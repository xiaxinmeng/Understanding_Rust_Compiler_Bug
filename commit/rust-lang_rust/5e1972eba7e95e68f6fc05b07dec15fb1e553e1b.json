{"sha": "5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "node_id": "C_kwDOAAsO6NoAKDVlMTk3MmViYTdlOTVlNjhmNmZjMDViMDdkZWMxNWZiMWU1NTNlMWI", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-11T02:20:41Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-11T02:32:15Z"}, "message": "Tweak assoc type obligation spans\n\n* Point at RHS of associated type in obligation span\n* Point at `impl` assoc type on projection error\n* Reduce verbosity of recursive obligations\n* Point at source of binding lifetime obligation\n* Tweak \"required bound\" note\n* Tweak \"expected... found opaque (return) type\" labels\n* Point at set type in impl assoc type WF errors", "tree": {"sha": "fd01764b7ebb5b4c0f952c4fbce21d2a48b1d0e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd01764b7ebb5b4c0f952c4fbce21d2a48b1d0e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "html_url": "https://github.com/rust-lang/rust/commit/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0448f44bcda55fd9eb71da82495ef648eedb4e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0448f44bcda55fd9eb71da82495ef648eedb4e4", "html_url": "https://github.com/rust-lang/rust/commit/f0448f44bcda55fd9eb71da82495ef648eedb4e4"}], "stats": {"total": 760, "additions": 503, "deletions": 257}, "files": [{"sha": "abeac224aa2925a199a8979982044eccc6f37660", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1429,13 +1429,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Extend a type error with extra labels pointing at \"non-trivial\" types, like closures and\n+    /// the return type of `async fn`s.\n+    ///\n+    /// `secondary_span` gives the caller the opportunity to expand `diag` with a `span_label`.\n+    ///\n+    /// `swap_secondary_and_primary` is used to make projection errors in particular nicer by using\n+    /// the message in `secondary_span` as the primary label, and apply the message that would\n+    /// otherwise be used for the primary label on the `secondary_span` `Span`. This applies on\n+    /// E0271, like `src/test/ui/issues/issue-39970.stderr`.\n     pub fn note_type_err(\n         &self,\n         diag: &mut DiagnosticBuilder<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         secondary_span: Option<(Span, String)>,\n         mut values: Option<ValuePairs<'tcx>>,\n         terr: &TypeError<'tcx>,\n+        swap_secondary_and_primary: bool,\n     ) {\n         let span = cause.span(self.tcx);\n         debug!(\"note_type_err cause={:?} values={:?}, terr={:?}\", cause, values, terr);\n@@ -1612,9 +1622,32 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         match terr {\n             TypeError::ObjectUnsafeCoercion(_) => {}\n             _ => {\n-                diag.span_label(span, terr.to_string());\n+                let mut label_or_note = |span: Span, msg: &str| {\n+                    if &[span] == diag.span.primary_spans() {\n+                        diag.span_label(span, msg);\n+                    } else {\n+                        diag.span_note(span, msg);\n+                    }\n+                };\n                 if let Some((sp, msg)) = secondary_span {\n-                    diag.span_label(sp, msg);\n+                    if swap_secondary_and_primary {\n+                        let terr = if let Some(infer::ValuePairs::Types(infer::ExpectedFound {\n+                            expected,\n+                            ..\n+                        })) = values\n+                        {\n+                            format!(\"expected this to be `{}`\", expected)\n+                        } else {\n+                            terr.to_string()\n+                        };\n+                        label_or_note(sp, &terr);\n+                        label_or_note(span, &msg);\n+                    } else {\n+                        label_or_note(span, &terr.to_string());\n+                        label_or_note(sp, &msg);\n+                    }\n+                } else {\n+                    label_or_note(span, &terr.to_string());\n                 }\n             }\n         };\n@@ -2048,7 +2081,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 struct_span_err!(self.tcx.sess, span, E0644, \"{}\", failure_str)\n             }\n         };\n-        self.note_type_err(&mut diag, &trace.cause, None, Some(trace.values), terr);\n+        self.note_type_err(&mut diag, &trace.cause, None, Some(trace.values), terr, false);\n         diag\n     }\n "}, {"sha": "1b4566fd0263466437f912fd54cf5317c48ab4f1", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -118,17 +118,15 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             ArgumentMutability(_) | Mutability => write!(f, \"types differ in mutability\"),\n             TupleSize(values) => write!(\n                 f,\n-                \"expected a tuple with {} element{}, \\\n-                           found one with {} element{}\",\n+                \"expected a tuple with {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,\n                 pluralize!(values.found)\n             ),\n             FixedArraySize(values) => write!(\n                 f,\n-                \"expected an array with a fixed size of {} element{}, \\\n-                           found one with {} element{}\",\n+                \"expected an array with a fixed size of {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,"}, {"sha": "645295d4839f18f17ffc5343feaa45d10c70f1ae", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1338,7 +1338,46 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     \"type mismatch resolving `{}`\",\n                     predicate\n                 );\n-                self.note_type_err(&mut diag, &obligation.cause, None, values, err);\n+                let secondary_span = match predicate.kind().skip_binder() {\n+                    ty::PredicateKind::Projection(proj) => self\n+                        .tcx\n+                        .opt_associated_item(proj.projection_ty.item_def_id)\n+                        .and_then(|trait_assoc_item| {\n+                            self.tcx\n+                                .trait_of_item(proj.projection_ty.item_def_id)\n+                                .map(|id| (trait_assoc_item, id))\n+                        })\n+                        .and_then(|(trait_assoc_item, id)| {\n+                            self.tcx.find_map_relevant_impl(\n+                                id,\n+                                proj.projection_ty.self_ty(),\n+                                |did| {\n+                                    self.tcx\n+                                        .associated_items(did)\n+                                        .in_definition_order()\n+                                        .filter(|assoc| assoc.ident == trait_assoc_item.ident)\n+                                        .next()\n+                                },\n+                            )\n+                        })\n+                        .and_then(|item| match self.tcx.hir().get_if_local(item.def_id) {\n+                            Some(\n+                                hir::Node::TraitItem(hir::TraitItem {\n+                                    kind: hir::TraitItemKind::Type(_, Some(ty)),\n+                                    ..\n+                                })\n+                                | hir::Node::ImplItem(hir::ImplItem {\n+                                    kind: hir::ImplItemKind::TyAlias(ty),\n+                                    ..\n+                                }),\n+                            ) => {\n+                                Some((ty.span, format!(\"type mismatch resolving `{}`\", predicate)))\n+                            }\n+                            _ => None,\n+                        }),\n+                    _ => None,\n+                };\n+                self.note_type_err(&mut diag, &obligation.cause, secondary_span, values, err, true);\n                 self.note_obligation_cause(&mut diag, obligation);\n                 diag.emit();\n             }\n@@ -2095,10 +2134,21 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) -> bool {\n         if let ObligationCauseCode::BuiltinDerivedObligation(ref data) = cause_code {\n             let parent_trait_ref = self.resolve_vars_if_possible(data.parent_trait_ref);\n-\n-            if obligated_types.iter().any(|ot| ot == &parent_trait_ref.skip_binder().self_ty()) {\n+            let self_ty = parent_trait_ref.skip_binder().self_ty();\n+            if obligated_types.iter().any(|ot| ot == &self_ty) {\n                 return true;\n             }\n+            if let ty::Adt(def, substs) = self_ty.kind() {\n+                if let [arg] = &substs[..] {\n+                    if let ty::subst::GenericArgKind::Type(ty) = arg.unpack() {\n+                        if let ty::Adt(inner_def, _) = ty.kind() {\n+                            if inner_def == def {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n         false\n     }"}, {"sha": "db76ade296b6f579da4f228d3e26bdfdacec7ed8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2186,6 +2186,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             seen_requirements,\n                         )\n                     });\n+                } else {\n+                    ensure_sufficient_stack(|| {\n+                        self.note_obligation_cause_code(\n+                            err,\n+                            &parent_predicate,\n+                            &cause_code.peel_derives(),\n+                            obligated_types,\n+                            seen_requirements,\n+                        )\n+                    });\n                 }\n             }\n             ObligationCauseCode::ImplDerivedObligation(ref data) => {"}, {"sha": "a397ee771af59c51c3cd51b2f9261f2d3f181c81", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -638,7 +638,11 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         self.expr_ty = fcx.structurally_resolved_type(self.expr.span, self.expr_ty);\n         self.cast_ty = fcx.structurally_resolved_type(self.cast_span, self.cast_ty);\n \n-        if !fcx.type_is_known_to_be_sized_modulo_regions(self.cast_ty, self.span) {\n+        debug!(\"check_cast({}, {:?} as {:?})\", self.expr.hir_id, self.expr_ty, self.cast_ty);\n+\n+        if !fcx.type_is_known_to_be_sized_modulo_regions(self.cast_ty, self.span)\n+            && !self.cast_ty.has_infer_types()\n+        {\n             self.report_cast_to_unsized_type(fcx);\n         } else if self.expr_ty.references_error() || self.cast_ty.references_error() {\n             // No sense in giving duplicate error messages"}, {"sha": "b7ca00965bd189eca3c4b84fd2902934afcade72", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -730,15 +730,15 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n                         let abi = sig.header.abi;\n                         fn_maybe_err(tcx, item.ident.span, abi);\n                     }\n-                    hir::TraitItemKind::Type(.., Some(_default)) => {\n+                    hir::TraitItemKind::Type(.., Some(default)) => {\n                         let assoc_item = tcx.associated_item(item.def_id);\n                         let trait_substs =\n                             InternalSubsts::identity_for_item(tcx, it.def_id.to_def_id());\n                         let _: Result<_, rustc_errors::ErrorReported> = check_type_bounds(\n                             tcx,\n                             assoc_item,\n                             assoc_item,\n-                            item.span,\n+                            default.span,\n                             ty::TraitRef { def_id: it.def_id.to_def_id(), substs: trait_substs },\n                         );\n                     }\n@@ -987,12 +987,12 @@ pub(super) fn check_impl_items_against_trait<'tcx>(\n                         opt_trait_span,\n                     );\n                 }\n-                hir::ImplItemKind::TyAlias(_) => {\n+                hir::ImplItemKind::TyAlias(impl_ty) => {\n                     let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n                     compare_ty_impl(\n                         tcx,\n                         &ty_impl_item,\n-                        impl_item.span,\n+                        impl_ty.span,\n                         &ty_trait_item,\n                         impl_trait_ref,\n                         opt_trait_span,"}, {"sha": "6af0312f313b5fcd130d94196d1566dc5a99be6f", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -379,6 +379,7 @@ fn compare_predicate_entailment<'tcx>(\n                     found: impl_fty,\n                 })),\n                 &terr,\n+                false,\n             );\n             diag.emit();\n             return Err(ErrorReported);\n@@ -734,8 +735,7 @@ fn compare_number_of_method_arguments<'tcx>(\n             tcx.sess,\n             impl_span,\n             E0050,\n-            \"method `{}` has {} but the declaration in \\\n-                                        trait `{}` has {}\",\n+            \"method `{}` has {} but the declaration in trait `{}` has {}\",\n             trait_m.ident,\n             potentially_plural_count(impl_number_args, \"parameter\"),\n             tcx.def_path_str(trait_m.def_id),\n@@ -1069,6 +1069,7 @@ crate fn compare_const_impl<'tcx>(\n                     found: impl_ty,\n                 })),\n                 &terr,\n+                false,\n             );\n             diag.emit();\n         }\n@@ -1099,7 +1100,8 @@ crate fn compare_ty_impl<'tcx>(\n     let _: Result<(), ErrorReported> = (|| {\n         compare_number_of_generics(tcx, impl_ty, impl_ty_span, trait_ty, trait_item_span)?;\n \n-        compare_type_predicate_entailment(tcx, impl_ty, impl_ty_span, trait_ty, impl_trait_ref)?;\n+        let sp = tcx.def_span(impl_ty.def_id);\n+        compare_type_predicate_entailment(tcx, impl_ty, sp, trait_ty, impl_trait_ref)?;\n \n         check_type_bounds(tcx, trait_ty, impl_ty, impl_ty_span, impl_trait_ref)\n     })();"}, {"sha": "17f07d0877e516e3b3eb3e727cb860402145ee1d", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -683,7 +683,8 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n \n     let (method_sig, span) = match impl_item.kind {\n         hir::ImplItemKind::Fn(ref sig, _) => (Some(sig), impl_item.span),\n-        hir::ImplItemKind::TyAlias(ty) => (None, ty.span),\n+        // Constrain binding and overflow error spans to `<Ty>` in `type foo = <Ty>`.\n+        hir::ImplItemKind::TyAlias(ty) if ty.span != DUMMY_SP => (None, ty.span),\n         _ => (None, impl_item.span),\n     };\n "}, {"sha": "f45fa0ad55cd109e2166bdf9635176f639019b07", "filename": "src/test/ui/associated-consts/associated-const-generic-obligations.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,12 +1,14 @@\n error[E0326]: implemented const `FROM` has an incompatible type for trait\n   --> $DIR/associated-const-generic-obligations.rs:14:17\n    |\n-LL |     const FROM: Self::Out;\n-   |                 --------- type in trait\n-...\n LL |     const FROM: &'static str = \"foo\";\n    |                 ^^^^^^^^^^^^ expected associated type, found `&str`\n    |\n+note: type in trait\n+  --> $DIR/associated-const-generic-obligations.rs:10:17\n+   |\n+LL |     const FROM: Self::Out;\n+   |                 ^^^^^^^^^\n    = note: expected associated type `<T as Foo>::Out`\n                     found reference `&'static str`\n "}, {"sha": "f3616035fc7d4010000995ba0e403e6494b962f8", "filename": "src/test/ui/associated-consts/associated-const-impl-wrong-type.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-type.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,11 +1,14 @@\n error[E0326]: implemented const `BAR` has an incompatible type for trait\n   --> $DIR/associated-const-impl-wrong-type.rs:8:16\n    |\n-LL |     const BAR: u32;\n-   |                --- type in trait\n-...\n LL |     const BAR: i32 = -1;\n    |                ^^^ expected `u32`, found `i32`\n+   |\n+note: type in trait\n+  --> $DIR/associated-const-impl-wrong-type.rs:2:16\n+   |\n+LL |     const BAR: u32;\n+   |                ^^^\n \n error: aborting due to previous error\n "}, {"sha": "0cccc6b38a3a931d14e8603d9dc66ffb67f3efef", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n    |\n LL | fn b() { blue_car(ModelT); }\n-   |          ^^^^^^^^ expected struct `Blue`, found struct `Black`\n+   |          ^^^^^^^^ type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n    |\n+note: expected this to be `Blue`\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:16:40\n+   |\n+LL | impl Vehicle for ModelT { type Color = Black; }\n+   |                                        ^^^^^\n note: required by a bound in `blue_car`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:27:19\n    |\n@@ -14,8 +19,13 @@ error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n    |\n LL | fn c() { black_car(ModelU); }\n-   |          ^^^^^^^^^ expected struct `Black`, found struct `Blue`\n+   |          ^^^^^^^^^ type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n+   |\n+note: expected this to be `Black`\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:21:40\n    |\n+LL | impl Vehicle for ModelU { type Color = Blue; }\n+   |                                        ^^^^\n note: required by a bound in `black_car`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:24:20\n    |"}, {"sha": "f6988dcf65ebff2a3c5324e04949bebc0d648365", "filename": "src/test/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -37,8 +37,6 @@ pub fn main() {\n     let a = 42;\n     foo1(a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected struct `Bar`, found `usize`\n     baz(&a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected struct `Bar`, found `usize`\n }"}, {"sha": "521907a60445c4c1c423935c5f16e9524d7443bf", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -17,20 +17,30 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5\n    |\n LL |     foo1(a);\n-   |     ^^^^ expected struct `Bar`, found `usize`\n+   |     ^^^^ type mismatch resolving `<isize as Foo>::A == Bar`\n    |\n+note: expected this to be `Bar`\n+  --> $DIR/associated-types-eq-3.rs:12:14\n+   |\n+LL |     type A = usize;\n+   |              ^^^^^\n note: required by a bound in `foo1`\n   --> $DIR/associated-types-eq-3.rs:18:16\n    |\n LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n    |                ^^^^^ required by this bound in `foo1`\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n-  --> $DIR/associated-types-eq-3.rs:41:9\n+  --> $DIR/associated-types-eq-3.rs:40:9\n    |\n LL |     baz(&a);\n-   |         ^^ expected struct `Bar`, found `usize`\n+   |         ^^ type mismatch resolving `<isize as Foo>::A == Bar`\n+   |\n+note: expected this to be `Bar`\n+  --> $DIR/associated-types-eq-3.rs:12:14\n    |\n+LL |     type A = usize;\n+   |              ^^^^^\n    = note: required for the cast to the object type `dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors"}, {"sha": "b306ae273e870ba3686b77a666ba9520537e194c", "filename": "src/test/ui/associated-types/associated-types-eq-hr.nll.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize\n   --> $DIR/associated-types-eq-hr.rs:87:5\n    |\n LL |     foo::<UintStruct>();\n-   |     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n+   |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n+note: expected this to be `&isize`\n+  --> $DIR/associated-types-eq-hr.rs:26:14\n+   |\n+LL |     type A = &'a usize;\n+   |              ^^^^^^^^^\n    = note: expected reference `&isize`\n               found reference `&usize`\n note: required by a bound in `foo`\n@@ -19,8 +24,13 @@ error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     bar::<IntStruct>();\n-   |     ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n+   |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+   |\n+note: expected this to be `&usize`\n+  --> $DIR/associated-types-eq-hr.rs:14:14\n    |\n+LL |     type A = &'a isize;\n+   |              ^^^^^^^^^\n    = note: expected reference `&usize`\n               found reference `&isize`\n note: required by a bound in `bar`"}, {"sha": "1329e1382fd4a51bb65db364549cfa73112770d2", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize\n   --> $DIR/associated-types-eq-hr.rs:87:5\n    |\n LL |     foo::<UintStruct>();\n-   |     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n+   |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n+note: expected this to be `&isize`\n+  --> $DIR/associated-types-eq-hr.rs:26:14\n+   |\n+LL |     type A = &'a usize;\n+   |              ^^^^^^^^^\n    = note: expected reference `&isize`\n               found reference `&usize`\n note: required by a bound in `foo`\n@@ -19,8 +24,13 @@ error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     bar::<IntStruct>();\n-   |     ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n+   |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+   |\n+note: expected this to be `&usize`\n+  --> $DIR/associated-types-eq-hr.rs:14:14\n    |\n+LL |     type A = &'a isize;\n+   |              ^^^^^^^^^\n    = note: expected reference `&usize`\n               found reference `&isize`\n note: required by a bound in `bar`"}, {"sha": "516057e53d25efd466daf4da7f03eda9337d4b37", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -5,8 +5,13 @@ LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n    |                 - this type parameter\n ...\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found type parameter `T`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Adapter<I> as Iterator>::Item == Option<T>`\n    |\n+note: expected this to be `Option<T>`\n+  --> $DIR/associated-types-issue-20346.rs:23:17\n+   |\n+LL |     type Item = T;\n+   |                 ^\n    = note: expected enum `Option<T>`\n               found type `T`\n note: required by a bound in `is_iterator_of`"}, {"sha": "aa8841fbaae08cb7f0a984a8b15c8eee899e30bc", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -11,24 +11,23 @@ LL | #![feature(associated_type_defaults, specialization)]\n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:19:18\n    |\n-LL |     fn make() -> Self::Ty {\n-   |                  -------- type in trait\n-...\n LL |     fn make() -> u8 { 0 }\n    |                  ^^\n    |                  |\n    |                  expected associated type, found `u8`\n    |                  help: change the output type to match the trait: `<A<T> as Tr>::Ty`\n    |\n+note: type in trait\n+  --> $DIR/defaults-specialization.rs:9:18\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |                  ^^^^^^^^\n    = note: expected fn pointer `fn() -> <A<T> as Tr>::Ty`\n               found fn pointer `fn() -> u8`\n \n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:35:18\n    |\n-LL |     fn make() -> Self::Ty {\n-   |                  -------- type in trait\n-...\n LL |     default type Ty = bool;\n    |     ----------------------- expected this associated type\n LL | \n@@ -38,6 +37,11 @@ LL |     fn make() -> bool { true }\n    |                  expected associated type, found `bool`\n    |                  help: change the output type to match the trait: `<B<T> as Tr>::Ty`\n    |\n+note: type in trait\n+  --> $DIR/defaults-specialization.rs:9:18\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |                  ^^^^^^^^\n    = note: expected fn pointer `fn() -> <B<T> as Tr>::Ty`\n               found fn pointer `fn() -> bool`\n "}, {"sha": "6c63c01e2c2f75aec84ffe5a1c0c8a9e7a308847", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:13:5\n+  --> $DIR/defaults-suitability.rs:13:22\n    |\n LL |     type Ty: Clone = NotClone;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NotClone`\n+   |                      ^^^^^^^^ the trait `Clone` is not implemented for `NotClone`\n    |\n note: required by a bound in `Tr::Ty`\n   --> $DIR/defaults-suitability.rs:13:14\n@@ -11,10 +11,10 @@ LL |     type Ty: Clone = NotClone;\n    |              ^^^^^ required by this bound in `Tr::Ty`\n \n error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:22:5\n+  --> $DIR/defaults-suitability.rs:22:15\n    |\n LL |     type Ty = NotClone;\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NotClone`\n+   |               ^^^^^^^^ the trait `Clone` is not implemented for `NotClone`\n    |\n note: required by a bound in `Tr2::Ty`\n   --> $DIR/defaults-suitability.rs:20:15\n@@ -26,10 +26,10 @@ LL |     type Ty = NotClone;\n    |          -- required by a bound in this\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:28:5\n+  --> $DIR/defaults-suitability.rs:28:23\n    |\n LL |     type Bar: Clone = Vec<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n+   |                       ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<T>`\n note: required by a bound in `Foo::Bar`\n@@ -43,10 +43,10 @@ LL | trait Foo<T: std::clone::Clone> {\n    |            +++++++++++++++++++\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:34:5\n+  --> $DIR/defaults-suitability.rs:34:29\n    |\n LL |     type Assoc: Foo<Self> = ();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo<Self>` is not implemented for `()`\n+   |                             ^^ the trait `Foo<Self>` is not implemented for `()`\n    |\n note: required by a bound in `Bar::Assoc`\n   --> $DIR/defaults-suitability.rs:34:17\n@@ -55,10 +55,10 @@ LL |     type Assoc: Foo<Self> = ();\n    |                 ^^^^^^^^^ required by this bound in `Bar::Assoc`\n \n error[E0277]: the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n-  --> $DIR/defaults-suitability.rs:56:5\n+  --> $DIR/defaults-suitability.rs:56:18\n    |\n LL |     type Assoc = NotClone;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `NotClone`\n+   |                  ^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `NotClone`\n    |\n note: required by a bound in `D::Assoc`\n   --> $DIR/defaults-suitability.rs:53:18\n@@ -70,10 +70,10 @@ LL |     type Assoc = NotClone;\n    |          ----- required by a bound in this\n \n error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:65:5\n+  --> $DIR/defaults-suitability.rs:65:23\n    |\n LL |     type Bar: Clone = Vec<Self::Baz>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n+   |                       ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo2<T>>::Baz>`\n note: required by a bound in `Foo2::Bar`\n@@ -87,10 +87,10 @@ LL | trait Foo2<T> where <Self as Foo2<T>>::Baz: Clone {\n    |               +++++++++++++++++++++++++++++++++++\n \n error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:74:5\n+  --> $DIR/defaults-suitability.rs:74:23\n    |\n LL |     type Bar: Clone = Vec<Self::Baz>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n+   |                       ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo25<T>>::Baz>`\n note: required by a bound in `Foo25::Bar`\n@@ -104,10 +104,10 @@ LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: Clone {\n    |                       ++++++++++++++++++++++++++++++++++++\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:87:5\n+  --> $DIR/defaults-suitability.rs:87:16\n    |\n LL |     type Baz = T;\n-   |     ^^^^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n+   |                ^ the trait `Clone` is not implemented for `T`\n    |\n note: required by a bound in `Foo3::Baz`\n   --> $DIR/defaults-suitability.rs:84:16"}, {"sha": "5cd1cb4a1a712b8690c5064527f73d8e13c9ec65", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-1.rs:20:5\n+  --> $DIR/defaults-unsound-62211-1.rs:20:96\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Self` cannot be formatted with the default formatter\n+   |                                                                                                ^^^^ `Self` cannot be formatted with the default formatter\n    |\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `UncheckedCopy::Output`\n@@ -16,10 +16,10 @@ LL | trait UncheckedCopy: Sized + std::fmt::Display {\n    |                            +++++++++++++++++++\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-1.rs:20:5\n+  --> $DIR/defaults-unsound-62211-1.rs:20:96\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n+   |                                                                                                ^^^^ no implementation for `Self += &'static str`\n    |\n note: required by a bound in `UncheckedCopy::Output`\n   --> $DIR/defaults-unsound-62211-1.rs:20:47\n@@ -32,10 +32,10 @@ LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n    |                            +++++++++++++++++++++++++\n \n error[E0277]: the trait bound `Self: Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:20:5\n+  --> $DIR/defaults-unsound-62211-1.rs:20:96\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `Self`\n+   |                                                                                                ^^^^ the trait `Deref` is not implemented for `Self`\n    |\n note: required by a bound in `UncheckedCopy::Output`\n   --> $DIR/defaults-unsound-62211-1.rs:20:25\n@@ -48,10 +48,10 @@ LL | trait UncheckedCopy: Sized + Deref {\n    |                            +++++++\n \n error[E0277]: the trait bound `Self: Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:20:5\n+  --> $DIR/defaults-unsound-62211-1.rs:20:96\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Self`\n+   |                                                                                                ^^^^ the trait `Copy` is not implemented for `Self`\n    |\n note: required by a bound in `UncheckedCopy::Output`\n   --> $DIR/defaults-unsound-62211-1.rs:20:18"}, {"sha": "89319bb7563cc4480b14b9b177027e76a0265d55", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-2.rs:20:5\n+  --> $DIR/defaults-unsound-62211-2.rs:20:96\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Self` cannot be formatted with the default formatter\n+   |                                                                                                ^^^^ `Self` cannot be formatted with the default formatter\n    |\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `UncheckedCopy::Output`\n@@ -16,10 +16,10 @@ LL | trait UncheckedCopy: Sized + std::fmt::Display {\n    |                            +++++++++++++++++++\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-2.rs:20:5\n+  --> $DIR/defaults-unsound-62211-2.rs:20:96\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n+   |                                                                                                ^^^^ no implementation for `Self += &'static str`\n    |\n note: required by a bound in `UncheckedCopy::Output`\n   --> $DIR/defaults-unsound-62211-2.rs:20:47\n@@ -32,10 +32,10 @@ LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n    |                            +++++++++++++++++++++++++\n \n error[E0277]: the trait bound `Self: Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:20:5\n+  --> $DIR/defaults-unsound-62211-2.rs:20:96\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `Self`\n+   |                                                                                                ^^^^ the trait `Deref` is not implemented for `Self`\n    |\n note: required by a bound in `UncheckedCopy::Output`\n   --> $DIR/defaults-unsound-62211-2.rs:20:25\n@@ -48,10 +48,10 @@ LL | trait UncheckedCopy: Sized + Deref {\n    |                            +++++++\n \n error[E0277]: the trait bound `Self: Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:20:5\n+  --> $DIR/defaults-unsound-62211-2.rs:20:96\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Self`\n+   |                                                                                                ^^^^ the trait `Copy` is not implemented for `Self`\n    |\n note: required by a bound in `UncheckedCopy::Output`\n   --> $DIR/defaults-unsound-62211-2.rs:20:18"}, {"sha": "f1677b822b4c97f7ef3d7340270170cb1c15773b", "filename": "src/test/ui/associated-types/issue-43784-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-43784-associated-type.rs:14:5\n+  --> $DIR/issue-43784-associated-type.rs:14:18\n    |\n LL |     type Assoc = T;\n-   |     ^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                  ^ the trait `Copy` is not implemented for `T`\n    |\n note: required by a bound in `Complete::Assoc`\n   --> $DIR/issue-43784-associated-type.rs:5:17"}, {"sha": "526f425b21e71d65ebf783d7a03a00cf45d8313f", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `(dyn ToString + 'static): Default` is not satisfied\n-  --> $DIR/issue-43924.rs:7:5\n+  --> $DIR/issue-43924.rs:7:45\n    |\n LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `(dyn ToString + 'static)`\n+   |                                             ^^^^^^^^^^^^ the trait `Default` is not implemented for `(dyn ToString + 'static)`\n    |\n note: required by a bound in `Foo::Out`\n   --> $DIR/issue-43924.rs:7:15"}, {"sha": "200efbe02e6616cae534c7d82132b60059835eba", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `<() as Array>::Element == &()`\n   --> $DIR/issue-44153.rs:18:5\n    |\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `&()`, found `()`\n+   |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<() as Array>::Element == &()`\n    |\n+note: expected this to be `&()`\n+  --> $DIR/issue-44153.rs:10:20\n+   |\n+LL |     type Element = ();\n+   |                    ^^\n note: required because of the requirements on the impl of `Visit` for `()`\n   --> $DIR/issue-44153.rs:13:10\n    |"}, {"sha": "6ff5e45423431b270650b9112e5ce1f9c9de2afb", "filename": "src/test/ui/associated-types/issue-54108.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: cannot add `<T as SubEncoder>::ActualSize` to `<T as SubEncoder>::ActualSize`\n-  --> $DIR/issue-54108.rs:19:5\n+  --> $DIR/issue-54108.rs:19:17\n    |\n LL |     type Size = <Self as SubEncoder>::ActualSize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `<T as SubEncoder>::ActualSize + <T as SubEncoder>::ActualSize`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `<T as SubEncoder>::ActualSize + <T as SubEncoder>::ActualSize`\n    |\n    = help: the trait `Add` is not implemented for `<T as SubEncoder>::ActualSize`\n note: required by a bound in `Encoder::Size`"}, {"sha": "f643ec3ff1fdca30f0dcad3ad8a7f9c4c61da24b", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n-  --> $DIR/issue-63593.rs:9:5\n+  --> $DIR/issue-63593.rs:9:17\n    |\n LL |     type This = Self;\n-   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                 ^^^^ doesn't have a size known at compile-time\n    |\n note: required by a bound in `MyTrait::This`\n   --> $DIR/issue-63593.rs:9:5"}, {"sha": "82c520b99b17020bf7bae164057a305c94948e37", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n-  --> $DIR/issue-65774-1.rs:10:5\n+  --> $DIR/issue-65774-1.rs:10:33\n    |\n LL |     type MpuConfig: MyDisplay = T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+   |                                 ^ the trait `MyDisplay` is not implemented for `T`\n    |\n note: required by a bound in `MPU::MpuConfig`\n   --> $DIR/issue-65774-1.rs:10:21"}, {"sha": "349cef9df72dd4a09319f2ca704bbb1c83309aa7", "filename": "src/test/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n-  --> $DIR/issue-65774-2.rs:10:5\n+  --> $DIR/issue-65774-2.rs:10:33\n    |\n LL |     type MpuConfig: MyDisplay = T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+   |                                 ^ the trait `MyDisplay` is not implemented for `T`\n    |\n note: required by a bound in `MPU::MpuConfig`\n   --> $DIR/issue-65774-2.rs:10:21"}, {"sha": "e95943f34d5496738b91d457eef2f9e1e539a74d", "filename": "src/test/ui/associated-types/issue-72806.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,9 +1,14 @@\n error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n-  --> $DIR/issue-72806.rs:14:5\n+  --> $DIR/issue-72806.rs:14:20\n    |\n LL |     type Sibling = Foo2;\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `char`, found `u32`\n+   |                    ^^^^ type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n    |\n+note: expected this to be `char`\n+  --> $DIR/issue-72806.rs:18:15\n+   |\n+LL |     type Ok = u32;\n+   |               ^^^\n note: required by a bound in `Bar::Sibling`\n   --> $DIR/issue-72806.rs:3:24\n    |"}, {"sha": "2e7a1dd2a3186752e07cb6c2d6cf5e996332666d", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:8:18\n    |\n LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n    |\n note: required by a bound in `Foo::Assoc`\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:4:17\n@@ -11,10 +11,10 @@ LL |     type Assoc: Bar;\n    |                 ^^^ required by this bound in `Foo::Assoc`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:19:5\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:19:18\n    |\n LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n    |\n note: required by a bound in `Baz::Assoc`\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:13:18\n@@ -26,10 +26,10 @@ LL |     type Assoc;\n    |          ----- required by a bound in this\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n-  --> $DIR/point-at-type-on-obligation-failure-2.rs:30:5\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:30:18\n    |\n LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |                  ^^^^ the trait `Bar` is not implemented for `bool`\n    |\n note: required by a bound in `Bat::Assoc`\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:24:27"}, {"sha": "9afbe82c3219538e5900342ce9e95a6bedbdd66a", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,9 +1,14 @@\n error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n-  --> $DIR/point-at-type-on-obligation-failure.rs:14:5\n+  --> $DIR/point-at-type-on-obligation-failure.rs:14:20\n    |\n LL |     type Sibling = Foo2;\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `u32`\n+   |                    ^^^^ type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n    |\n+note: expected this to be `()`\n+  --> $DIR/point-at-type-on-obligation-failure.rs:18:15\n+   |\n+LL |     type Ok = u32;\n+   |               ^^^\n note: required by a bound in `Bar::Sibling`\n   --> $DIR/point-at-type-on-obligation-failure.rs:3:24\n    |"}, {"sha": "80ec03d6221e8e88b41b9993f75565e0433693f2", "filename": "src/test/ui/chalkify/impl_wf_2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `f32: Foo` is not satisfied\n-  --> $DIR/impl_wf_2.rs:25:5\n+  --> $DIR/impl_wf_2.rs:25:17\n    |\n LL |     type Item = f32;\n-   |     ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `f32`\n+   |                 ^^^ the trait `Foo` is not implemented for `f32`\n    |\n note: required by a bound in `Bar::Item`\n   --> $DIR/impl_wf_2.rs:8:16"}, {"sha": "90e907157a50e782e2022d471590b6770ab43bac", "filename": "src/test/ui/compare-method/bad-self-type.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -13,27 +13,31 @@ LL |     fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/bad-self-type.rs:22:18\n    |\n-LL |     fn foo(self);\n-   |            ---- type in trait\n-...\n LL |     fn foo(self: Box<Self>) {}\n    |            ------^^^^^^^^^\n    |            |     |\n    |            |     expected struct `MyFuture`, found struct `Box`\n    |            help: change the self-receiver type to match the trait: `self`\n    |\n+note: type in trait\n+  --> $DIR/bad-self-type.rs:17:12\n+   |\n+LL |     fn foo(self);\n+   |            ^^^^\n    = note: expected fn pointer `fn(MyFuture)`\n               found fn pointer `fn(Box<MyFuture>)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/bad-self-type.rs:24:18\n    |\n-LL |     fn bar(self) -> Option<()>;\n-   |                     ---------- type in trait\n-...\n LL |     fn bar(self) {}\n    |                  ^ expected enum `Option`, found `()`\n    |\n+note: type in trait\n+  --> $DIR/bad-self-type.rs:18:21\n+   |\n+LL |     fn bar(self) -> Option<()>;\n+   |                     ^^^^^^^^^^\n    = note: expected fn pointer `fn(MyFuture) -> Option<()>`\n               found fn pointer `fn(MyFuture)`\n help: change the output type to match the trait"}, {"sha": "49b5b1b92cd0523728ac2a7d1379afb80488c91e", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,9 +1,6 @@\n error[E0053]: method `b` has an incompatible type for trait\n   --> $DIR/reordered-type-param.rs:16:30\n    |\n-LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n-   |                             - type in trait\n-...\n LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |        -       -             ^\n    |        |       |             |\n@@ -12,6 +9,11 @@ LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |        |       found type parameter\n    |        expected type parameter\n    |\n+note: type in trait\n+  --> $DIR/reordered-type-param.rs:7:29\n+   |\n+LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n+   |                             ^\n    = note: expected fn pointer `fn(&E, F) -> F`\n               found fn pointer `fn(&E, G) -> G`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound"}, {"sha": "9dc677ef6ed48fe4964650aa939b463ff2c74655", "filename": "src/test/ui/const-generics/associated-type-bound-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n-  --> $DIR/associated-type-bound-fail.rs:9:5\n+  --> $DIR/associated-type-bound-fail.rs:9:18\n    |\n LL |     type Assoc = u16;\n-   |     ^^^^^^^^^^^^^^^^^ the trait `Bar<N>` is not implemented for `u16`\n+   |                  ^^^ the trait `Bar<N>` is not implemented for `u16`\n    |\n    = help: the following implementations were found:\n              <u16 as Bar<3_usize>>"}, {"sha": "1597120fb5caf4b2fec53b057997e3583c6977fe", "filename": "src/test/ui/consts/issue-70942-trait-vs-impl-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,11 +1,14 @@\n error[E0326]: implemented const `VALUE` has an incompatible type for trait\n   --> $DIR/issue-70942-trait-vs-impl-mismatch.rs:8:18\n    |\n-LL |     const VALUE: usize;\n-   |                  ----- type in trait\n-...\n LL |     const VALUE: i32 = 0;\n    |                  ^^^ expected `usize`, found `i32`\n+   |\n+note: type in trait\n+  --> $DIR/issue-70942-trait-vs-impl-mismatch.rs:2:18\n+   |\n+LL |     const VALUE: usize;\n+   |                  ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "98db79591152f03cd89a2b28bb1be458b47f7456", "filename": "src/test/ui/dst/dst-bad-deep.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -8,11 +8,6 @@ LL |     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n note: required because it appears within the type `Fat<[isize]>`\n   --> $DIR/dst-bad-deep.rs:6:8\n    |\n-LL | struct Fat<T: ?Sized> {\n-   |        ^^^\n-note: required because it appears within the type `Fat<Fat<[isize]>>`\n-  --> $DIR/dst-bad-deep.rs:6:8\n-   |\n LL | struct Fat<T: ?Sized> {\n    |        ^^^\n    = note: structs must have a statically known size to be initialized"}, {"sha": "9c9c7237d71459a4ad74b88d71374954c3100ec0", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n   --> $DIR/E0271.rs:10:5\n    |\n LL |     foo(3_i8);\n-   |     ^^^ expected `u32`, found `&str`\n+   |     ^^^ type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n    |\n+note: expected this to be `u32`\n+  --> $DIR/E0271.rs:7:43\n+   |\n+LL | impl Trait for i8 { type AssociatedType = &'static str; }\n+   |                                           ^^^^^^^^^^^^\n note: required by a bound in `foo`\n   --> $DIR/E0271.rs:3:32\n    |"}, {"sha": "8d6713261d5ecb6b3232cc1a6d0ca7261f3a7cb7", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -71,11 +71,6 @@ note: required because it appears within the type `Bar<A>`\n    |\n LL | struct Bar<T: ?Sized> {\n    |        ^^^\n-note: required because it appears within the type `Bar<Bar<A>>`\n-  --> $DIR/extern-types-unsized.rs:14:8\n-   |\n-LL | struct Bar<T: ?Sized> {\n-   |        ^^^\n note: required by a bound in `assert_sized`\n   --> $DIR/extern-types-unsized.rs:19:17\n    |"}, {"sha": "6c2c3ed9c365537d38c22a016144ea52928e7af1", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -62,10 +62,10 @@ LL |     type Assoc where Self: Sized = Foo;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `U32: Clone` is not satisfied\n-  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:16:26\n    |\n LL |     type Pointer2<U32> = Box<U32>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `U32`\n+   |                          ^^^^^^^^ the trait `Clone` is not implemented for `U32`\n    |\n help: consider restricting type parameter `U32`\n    |"}, {"sha": "c4009dd96251f05f71d51b54d097bf549a4e7e1e", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `(): AsRef<()>` is not satisfied\n-  --> $DIR/cross-crate-bounds.rs:15:5\n+  --> $DIR/cross-crate-bounds.rs:15:16\n    |\n LL |     type Bar = ();\n-   |     ^^^^^^^^^^^^^^ the trait `AsRef<()>` is not implemented for `()`\n+   |                ^^ the trait `AsRef<()>` is not implemented for `()`\n    |\n note: required by a bound in `foo_defn::Foo::Bar`\n   --> $DIR/auxiliary/foo_defn.rs:6:15"}, {"sha": "544f2bcbbd7778c456297eebef49c8f08fe4ba0b", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` doesn't implement `std::fmt::Display`\n-  --> $DIR/generic-associated-types-where.rs:20:5\n+  --> $DIR/generic-associated-types-where.rs:20:22\n    |\n LL |     type Assoc2<T> = Vec<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |                      ^^^^^^ `T` cannot be formatted with the default formatter\n    |\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider restricting type parameter `T`"}, {"sha": "5be431f2933b30c78b18024e1a95951657c39cbd", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -17,10 +17,10 @@ LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/impl_bounds.rs:17:5\n+  --> $DIR/impl_bounds.rs:17:35\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/impl_bounds.rs:17:12"}, {"sha": "2e21b38cb0e92733d263827f94d81b189db2427f", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-68641-check-gat-bounds.rs:14:5\n+  --> $DIR/issue-68641-check-gat-bounds.rs:14:21\n    |\n LL |     type Item<'a> = T;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                     ^ the trait `Copy` is not implemented for `T`\n    |\n note: required by a bound in `UnsafeCopy::Item`\n   --> $DIR/issue-68641-check-gat-bounds.rs:6:20"}, {"sha": "713cc744f5a228cef1480b3f514c9e5c591d2ff6", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68642-broken-llvm-ir.rs:14:5\n+  --> $DIR/issue-68642-broken-llvm-ir.rs:14:18\n    |\n LL |     type F<'a> = Self;\n-   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |                  ^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Fun::F`"}, {"sha": "a7b7f64cdb172dd323e9ec98039526a70197a68c", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68643-broken-mir.rs:14:5\n+  --> $DIR/issue-68643-broken-mir.rs:14:18\n    |\n LL |     type F<'a> = Self;\n-   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |                  ^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Fun::F`"}, {"sha": "5e921e053bb4298ebcb7d186a2b153a8bdc60294", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68644-codegen-selection.rs:14:5\n+  --> $DIR/issue-68644-codegen-selection.rs:14:18\n    |\n LL |     type F<'a> = Self;\n-   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |                  ^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Fun::F`"}, {"sha": "7edcdce628e6d631773f8c38ec4b933453e79437", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n-  --> $DIR/issue-68645-codegen-fulfillment.rs:14:5\n+  --> $DIR/issue-68645-codegen-fulfillment.rs:14:18\n    |\n LL |     type F<'a> = Self;\n-   |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n+   |                  ^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `Fun::F`"}, {"sha": "8e0f23716019688edbaa8177e1a23cf4734d54a2", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,10 +1,10 @@\n error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n-  --> $DIR/issue-68656-unsized-values.rs:15:5\n+  --> $DIR/issue-68656-unsized-values.rs:15:21\n    |\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n    |      - this type parameter\n LL |     type Item<'a> = T;\n-   |     ^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n+   |                     ^ expected type parameter `T`, found associated type\n    |\n    = note: expected type parameter `T`\n              found associated type `<T as Deref>::Target`"}, {"sha": "f0e03e73f0b3ef32766d0b2a320364a3d8c87776", "filename": "src/test/ui/generic-associated-types/issue-74684-2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n   --> $DIR/issue-74684-2.rs:23:5\n    |\n LL |     bug(Box::new(x));\n-   |     ^^^ expected slice `[u8]`, found `i32`\n+   |     ^^^ type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n    |\n+note: expected this to be `[u8]`\n+  --> $DIR/issue-74684-2.rs:10:18\n+   |\n+LL |     type F<'a> = i32;\n+   |                  ^^^\n note: required by a bound in `bug`\n   --> $DIR/issue-74684-2.rs:13:28\n    |"}, {"sha": "9eaa74e343e4b9e55bb5afa8f4ec7d3520dd0216", "filename": "src/test/ui/generic-associated-types/issue-74816.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Self: Trait1` is not satisfied\n-  --> $DIR/issue-74816.rs:9:5\n+  --> $DIR/issue-74816.rs:9:31\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait1` is not implemented for `Self`\n+   |                               ^^^^ the trait `Trait1` is not implemented for `Self`\n    |\n note: required by a bound in `Trait2::Associated`\n   --> $DIR/issue-74816.rs:9:22\n@@ -15,10 +15,10 @@ LL | trait Trait2: Trait1 {\n    |             ++++++++\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n-  --> $DIR/issue-74816.rs:9:5\n+  --> $DIR/issue-74816.rs:9:31\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                               ^^^^ doesn't have a size known at compile-time\n    |\n note: required by a bound in `Trait2::Associated`\n   --> $DIR/issue-74816.rs:9:5"}, {"sha": "8517eb9fa21026c915453e4dcb1463593b7cee28", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `Box<T>: Copy` is not satisfied\n-  --> $DIR/issue-74824.rs:7:5\n+  --> $DIR/issue-74824.rs:7:26\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<T>`\n+   |                          ^^^^^^ the trait `Copy` is not implemented for `Box<T>`\n    |\n note: required by a bound in `UnsafeCopy::Copy`\n   --> $DIR/issue-74824.rs:7:19\n@@ -11,10 +11,10 @@ LL |     type Copy<T>: Copy = Box<T>;\n    |                   ^^^^ required by this bound in `UnsafeCopy::Copy`\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/issue-74824.rs:7:5\n+  --> $DIR/issue-74824.rs:7:26\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n+   |                          ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Box<T>`\n note: required by a bound in `UnsafeCopy::Copy`"}, {"sha": "c4a7d8faa41195d04dc098512bd59e003c2c774e", "filename": "src/test/ui/generic-associated-types/issue-78113-lifetime-mismatch-dyn-trait-box.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78113-lifetime-mismatch-dyn-trait-box.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error: incompatible lifetime on type\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:17:5\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:17:18\n    |\n LL |     type T<'a> = Box<dyn A + 'a>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^\n    |\n note: because this has an unmet lifetime requirement\n   --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:12:17\n@@ -26,10 +26,10 @@ LL | impl A for Box<dyn A + '_> {}\n    |                      ++++\n \n error: incompatible lifetime on type\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:27:5\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:27:18\n    |\n LL |     type T<'a> = Box<dyn A + 'a>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^\n    |\n note: because this has an unmet lifetime requirement\n   --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:23:17\n@@ -48,10 +48,10 @@ LL | impl C for Box<dyn A + 'static> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: incompatible lifetime on type\n-  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:37:5\n+  --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:37:18\n    |\n LL |     type T<'a> = (Box<dyn A + 'a>, Box<dyn A + 'a>);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: because this has an unmet lifetime requirement\n   --> $DIR/issue-78113-lifetime-mismatch-dyn-trait-box.rs:33:17"}, {"sha": "e5db2f1b7c35bfd9bb8346966b35fbaab89584d2", "filename": "src/test/ui/generic-associated-types/issue-87429-associated-type-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: can't compare `Foo` with `Foo`\n-  --> $DIR/issue-87429-associated-type-default.rs:14:5\n+  --> $DIR/issue-87429-associated-type-default.rs:14:60\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Foo == Foo`\n+   |                                                            ^^^ no implementation for `Foo == Foo`\n    |\n    = help: the trait `PartialEq` is not implemented for `Foo`\n note: required by a bound in `Family2::Member`"}, {"sha": "ca44ecfdb537d992fcf29aee3540a8d11c21e1ce", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -9,10 +9,10 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `Foo` with `Foo`\n-  --> $DIR/issue-87429-specialization.rs:21:5\n+  --> $DIR/issue-87429-specialization.rs:21:31\n    |\n LL |     default type Member<'a> = Foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Foo == Foo`\n+   |                               ^^^ no implementation for `Foo == Foo`\n    |\n    = help: the trait `PartialEq` is not implemented for `Foo`\n note: required by a bound in `Family::Member`"}, {"sha": "cb462871ccd32b7ce26f81ece5e897455eef32b9", "filename": "src/test/ui/generic-associated-types/issue-88595.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-88595.rs:19:5\n+  --> $DIR/issue-88595.rs:19:18\n    |\n LL |     type B<'b> = impl Clone;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/issue-88595.rs:18:6"}, {"sha": "23e8d08af34286699d69da3704caa99698abbcf9", "filename": "src/test/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0477]: the type `&mut ()` does not fulfill the required lifetime\n-  --> $DIR/issue-90014.rs:14:5\n+  --> $DIR/issue-90014.rs:14:20\n    |\n LL |     type Fut<'a> = impl Future<Output = ()>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-90014.rs:14:14"}, {"sha": "7ec9386cabead9d918d1ae4bc92748333515c018", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n-  --> $DIR/unsatisfied-outlives-bound.rs:8:5\n+  --> $DIR/unsatisfied-outlives-bound.rs:8:21\n    |\n LL |     type Item<'a> = &'b ();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^\n    |\n note: type must outlive the lifetime `'a` as defined here as required by this binding\n   --> $DIR/unsatisfied-outlives-bound.rs:8:15\n@@ -11,10 +11,10 @@ LL |     type Item<'a> = &'b ();\n    |               ^^\n \n error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n-  --> $DIR/unsatisfied-outlives-bound.rs:17:5\n+  --> $DIR/unsatisfied-outlives-bound.rs:17:21\n    |\n LL |     type Item<'a> = &'a ();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n   --> $DIR/unsatisfied-outlives-bound.rs:13:20"}, {"sha": "0ebba37e4ec70c60a876eef6eb360640e3332df5", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19\n    |\n LL |     let v = Unit2.m(\n-   |                   ^ expected associated type, found struct `Unit4`\n+   |                   ^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n+note: expected this to be `<_ as Ty<'_>>::V`\n+  --> $DIR/issue-62203-hrtb-ice.rs:21:14\n+   |\n+LL |     type O = T::Output;\n+   |              ^^^^^^^^^\n    = note: expected associated type `<_ as Ty<'_>>::V`\n                        found struct `Unit4`\n    = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4` or calling a method that returns `<_ as Ty<'_>>::V`"}, {"sha": "afa21c1a858a2efe714f0a471403d0171b6834be", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as imp\n   --> $DIR/bound-normalization-fail.rs:25:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n    |\n+note: expected this to be `<T as impl_trait::Trait>::Assoc`\n+  --> $DIR/bound-normalization-fail.rs:14:19\n+   |\n+LL |     type Output = T;\n+   |                   ^\n    = note: expected associated type `<T as impl_trait::Trait>::Assoc`\n                     found unit type `()`\n help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n@@ -21,8 +26,13 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lif\n   --> $DIR/bound-normalization-fail.rs:41:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n+   |\n+note: expected this to be `<T as lifetimes::Trait<'static>>::Assoc`\n+  --> $DIR/bound-normalization-fail.rs:14:19\n    |\n+LL |     type Output = T;\n+   |                   ^\n    = note: expected associated type `<T as lifetimes::Trait<'static>>::Assoc`\n                     found unit type `()`\n help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`"}, {"sha": "acf768d5795e5311a5526cd1e3639cb00601ccde", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,16 +1,18 @@\n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/impl-generic-mismatch-ab.rs:8:32\n    |\n-LL |     fn foo<A: Debug>(&self, a: &A, b: &impl Debug);\n-   |                                -- type in trait\n-...\n LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n    |            -                   ^^^^^^^^^^^\n    |            |                   |\n    |            |                   expected type parameter `B`, found type parameter `impl Debug`\n    |            |                   help: change the parameter type to match the trait: `&B`\n    |            expected type parameter\n    |\n+note: type in trait\n+  --> $DIR/impl-generic-mismatch-ab.rs:4:32\n+   |\n+LL |     fn foo<A: Debug>(&self, a: &A, b: &impl Debug);\n+   |                                ^^\n    = note: expected fn pointer `fn(&(), &B, &impl Debug)`\n               found fn pointer `fn(&(), &impl Debug, &B)`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound"}, {"sha": "65daabe419d3f3b81862bc8904edf28257ca35ae", "filename": "src/test/ui/impl-trait/projection-mismatch-in-impl-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `<() as Super>::Assoc == ()`\n   --> $DIR/projection-mismatch-in-impl-where-clause.rs:13:14\n    |\n LL | fn test() -> impl Test {\n-   |              ^^^^^^^^^ expected `()`, found `u8`\n+   |              ^^^^^^^^^ type mismatch resolving `<() as Super>::Assoc == ()`\n    |\n+note: expected this to be `()`\n+  --> $DIR/projection-mismatch-in-impl-where-clause.rs:6:18\n+   |\n+LL |     type Assoc = u8;\n+   |                  ^^\n note: required because of the requirements on the impl of `Test` for `()`\n   --> $DIR/projection-mismatch-in-impl-where-clause.rs:11:9\n    |"}, {"sha": "6e897a3edfdc3c1d0bc0cc22314e7779e0b5d14b", "filename": "src/test/ui/inference/cannot-infer-partial-try-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -16,7 +16,7 @@ fn infallible() -> Result<(), std::convert::Infallible> {\n \n fn main() {\n     let x = || -> Result<_, QualifiedError<_>> {\n-        infallible()?; //~ERROR type annotations needed\n+        infallible()?; //~ ERROR type annotations needed\n         Ok(())\n     };\n }"}, {"sha": "72e549813e81c340fb0cc93c432f05ce0e45480f", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,15 +1,17 @@\n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/issue-13033.rs:8:30\n    |\n-LL |     fn bar(&mut self, other: &mut dyn Foo);\n-   |                              ------------ type in trait\n-...\n LL |     fn bar(&mut self, other: &dyn Foo) {}\n    |                              ^^^^^^^^\n    |                              |\n    |                              types differ in mutability\n    |                              help: change the parameter type to match the trait: `&mut dyn Foo`\n    |\n+note: type in trait\n+  --> $DIR/issue-13033.rs:2:30\n+   |\n+LL |     fn bar(&mut self, other: &mut dyn Foo);\n+   |                              ^^^^^^^^^^^^\n    = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n               found fn pointer `fn(&mut Baz, &dyn Foo)`\n "}, {"sha": "0780109b8432ec5b653fb412705121efa3b762a1", "filename": "src/test/ui/issues/issue-35869.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,60 +1,68 @@\n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:11:15\n    |\n-LL |     fn foo(_: fn(u8) -> ());\n-   |               ------------ type in trait\n-...\n LL |     fn foo(_: fn(u16) -> ()) {}\n    |               ^^^^^^^^^^^^^\n    |               |\n    |               expected `u8`, found `u16`\n    |               help: change the parameter type to match the trait: `fn(u8)`\n    |\n+note: type in trait\n+  --> $DIR/issue-35869.rs:2:15\n+   |\n+LL |     fn foo(_: fn(u8) -> ());\n+   |               ^^^^^^^^^^^^\n    = note: expected fn pointer `fn(fn(u8))`\n               found fn pointer `fn(fn(u16))`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:13:15\n    |\n-LL |     fn bar(_: Option<u8>);\n-   |               ---------- type in trait\n-...\n LL |     fn bar(_: Option<u16>) {}\n    |               ^^^^^^^^^^^\n    |               |\n    |               expected `u8`, found `u16`\n    |               help: change the parameter type to match the trait: `Option<u8>`\n    |\n+note: type in trait\n+  --> $DIR/issue-35869.rs:3:15\n+   |\n+LL |     fn bar(_: Option<u8>);\n+   |               ^^^^^^^^^^\n    = note: expected fn pointer `fn(Option<u8>)`\n               found fn pointer `fn(Option<u16>)`\n \n error[E0053]: method `baz` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:15:15\n    |\n-LL |     fn baz(_: (u8, u16));\n-   |               --------- type in trait\n-...\n LL |     fn baz(_: (u16, u16)) {}\n    |               ^^^^^^^^^^\n    |               |\n    |               expected `u8`, found `u16`\n    |               help: change the parameter type to match the trait: `(u8, u16)`\n    |\n+note: type in trait\n+  --> $DIR/issue-35869.rs:4:15\n+   |\n+LL |     fn baz(_: (u8, u16));\n+   |               ^^^^^^^^^\n    = note: expected fn pointer `fn((u8, _))`\n               found fn pointer `fn((u16, _))`\n \n error[E0053]: method `qux` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:17:17\n    |\n-LL |     fn qux() -> u8;\n-   |                 -- type in trait\n-...\n LL |     fn qux() -> u16 { 5u16 }\n    |                 ^^^\n    |                 |\n    |                 expected `u8`, found `u16`\n    |                 help: change the output type to match the trait: `u8`\n    |\n+note: type in trait\n+  --> $DIR/issue-35869.rs:5:17\n+   |\n+LL |     fn qux() -> u8;\n+   |                 ^^\n    = note: expected fn pointer `fn() -> u8`\n               found fn pointer `fn() -> u16`\n "}, {"sha": "1f64a90bc1cf91547a7af1ece25ed737ff66d025", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n   --> $DIR/issue-39970.rs:19:5\n    |\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&()`\n+   |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n    |\n+note: expected this to be `()`\n+  --> $DIR/issue-39970.rs:10:20\n+   |\n+LL |     type Element = &'a ();\n+   |                    ^^^^^^\n note: required because of the requirements on the impl of `Visit` for `()`\n   --> $DIR/issue-39970.rs:13:6\n    |"}, {"sha": "54b41926451454ad50712753b435736fe2cecc38", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,30 +1,34 @@\n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/E0053.rs:9:15\n    |\n-LL |     fn foo(x: u16);\n-   |               --- type in trait\n-...\n LL |     fn foo(x: i16) { }\n    |               ^^^\n    |               |\n    |               expected `u16`, found `i16`\n    |               help: change the parameter type to match the trait: `u16`\n    |\n+note: type in trait\n+  --> $DIR/E0053.rs:2:15\n+   |\n+LL |     fn foo(x: u16);\n+   |               ^^^\n    = note: expected fn pointer `fn(u16)`\n               found fn pointer `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/E0053.rs:11:12\n    |\n-LL |     fn bar(&self);\n-   |            ----- type in trait\n-...\n LL |     fn bar(&mut self) { }\n    |            ^^^^^^^^^\n    |            |\n    |            types differ in mutability\n    |            help: change the self-receiver type to match the trait: `self: &Bar`\n    |\n+note: type in trait\n+  --> $DIR/E0053.rs:3:12\n+   |\n+LL |     fn bar(&self);\n+   |            ^^^^^\n    = note: expected fn pointer `fn(&Bar)`\n               found fn pointer `fn(&mut Bar)`\n "}, {"sha": "6b2ba53daa0822947e705aefa3d453e96a51a8c5", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,30 +1,34 @@\n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:9:15\n    |\n-LL |     fn foo(x: u16);\n-   |               --- type in trait\n-...\n LL |     fn foo(x: i16) { }\n    |               ^^^\n    |               |\n    |               expected `u16`, found `i16`\n    |               help: change the parameter type to match the trait: `u16`\n    |\n+note: type in trait\n+  --> $DIR/trait-impl-fn-incompatibility.rs:2:15\n+   |\n+LL |     fn foo(x: u16);\n+   |               ^^^\n    = note: expected fn pointer `fn(u16)`\n               found fn pointer `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:10:28\n    |\n-LL |     fn bar(&mut self, bar: &mut Bar);\n-   |                            -------- type in trait\n-...\n LL |     fn bar(&mut self, bar: &Bar) { }\n    |                            ^^^^\n    |                            |\n    |                            types differ in mutability\n    |                            help: change the parameter type to match the trait: `&mut Bar`\n    |\n+note: type in trait\n+  --> $DIR/trait-impl-fn-incompatibility.rs:3:28\n+   |\n+LL |     fn bar(&mut self, bar: &mut Bar);\n+   |                            ^^^^^^^^\n    = note: expected fn pointer `fn(&mut Bar, &mut Bar)`\n               found fn pointer `fn(&mut Bar, &Bar)`\n "}, {"sha": "293ec3a725d89f2fe91fbda68e5962bffb17cc92", "filename": "src/test/ui/never_type/issue-51506.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `!` is not an iterator\n-  --> $DIR/issue-51506.rs:13:5\n+  --> $DIR/issue-51506.rs:13:24\n    |\n LL |     default type Out = !;\n-   |     ^^^^^^^^^^^^^^^^^^^^^ `!` is not an iterator\n+   |                        ^ `!` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `!`\n note: required by a bound in `Trait::Out`"}, {"sha": "8eaba559a6240b68ee31a730574a5a763f5ec850", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -183,32 +183,36 @@ LL |         const async unsafe extern \"C\" fn fe5();\n error[E0053]: method `ft1` has an incompatible type for trait\n   --> $DIR/fn-header-semantic-fail.rs:28:24\n    |\n-LL |         async fn ft1();\n-   |                       - type in trait\n-...\n LL |         async fn ft1() {}\n    |                        ^\n    |                        |\n    |                        checked the `Output` of this `async fn`, found opaque type\n    |                        expected `()`, found opaque type\n    |\n    = note: while checking the return type of the `async fn`\n+note: type in trait\n+  --> $DIR/fn-header-semantic-fail.rs:16:23\n+   |\n+LL |         async fn ft1();\n+   |                       ^\n    = note: expected fn pointer `fn()`\n               found fn pointer `fn() -> impl Future<Output = ()>`\n \n error[E0053]: method `ft5` has an incompatible type for trait\n   --> $DIR/fn-header-semantic-fail.rs:33:48\n    |\n-LL |         const async unsafe extern \"C\" fn ft5();\n-   |                                               - type in trait\n-...\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |                                                ^\n    |                                                |\n    |                                                checked the `Output` of this `async fn`, found opaque type\n    |                                                expected `()`, found opaque type\n    |\n    = note: while checking the return type of the `async fn`\n+note: type in trait\n+  --> $DIR/fn-header-semantic-fail.rs:20:47\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5();\n+   |                                               ^\n    = note: expected fn pointer `unsafe extern \"C\" fn()`\n               found fn pointer `unsafe extern \"C\" fn() -> impl Future<Output = ()>`\n "}, {"sha": "ac6154139e269454c2bf720accf183c1b98e5fe3", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:15:5\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:15:18\n    |\n LL |     type Value = &'a i32;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:5:17\n@@ -11,10 +11,10 @@ LL |     type Value: 'a;\n    |                 ^^\n \n error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n-  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:20:5\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:20:18\n    |\n LL |     type Value = &'a i32;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^\n    |\n note: type must outlive the lifetime `'b` as defined here as required by this binding\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:10"}, {"sha": "a96f5612fa23d207879dd9d85dac1ae474cc631e", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n-  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:10:5\n+  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:10:18\n    |\n LL |     type Value = &'a i32;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n   --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:5:17"}, {"sha": "d3214458eac13cc8f89bedfcf498812c5aad6116", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -47,16 +47,18 @@ LL |     async fn associated();\n error[E0053]: method `associated` has an incompatible type for trait\n   --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:26\n    |\n-LL |     async fn associated();\n-   |                          - type in trait\n-...\n LL |     async fn associated();\n    |                          ^\n    |                          |\n    |                          checked the `Output` of this `async fn`, found opaque type\n    |                          expected `()`, found opaque type\n    |\n    = note: while checking the return type of the `async fn`\n+note: type in trait\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:11:26\n+   |\n+LL |     async fn associated();\n+   |                          ^\n    = note: expected fn pointer `fn()`\n               found fn pointer `fn() -> impl Future<Output = ()>`\n "}, {"sha": "842b99edbe78ada8a4478ff20872285e122e9e08", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: cannot add `NonConstAdd` to `NonConstAdd`\n-  --> $DIR/assoc-type.rs:19:5\n+  --> $DIR/assoc-type.rs:19:16\n    |\n LL |     type Bar = NonConstAdd;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n+   |                ^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `Add` is not implemented for `NonConstAdd`\n note: required by a bound in `Foo::Bar`"}, {"sha": "9e400f87024745305a1b0c0d5e24a57b15e2614f", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -9,10 +9,10 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/deafult-associated-type-bound-1.rs:19:5\n+  --> $DIR/deafult-associated-type-bound-1.rs:19:22\n    |\n LL |     default type U = str;\n-   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n+   |                      ^^^ the trait `Clone` is not implemented for `str`\n    |\n note: required by a bound in `X::U`\n   --> $DIR/deafult-associated-type-bound-1.rs:9:13"}, {"sha": "47ea69d40bbb74a3a2b89066217072299b011251", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -9,10 +9,10 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `&'static B` with `B`\n-  --> $DIR/deafult-associated-type-bound-2.rs:16:5\n+  --> $DIR/deafult-associated-type-bound-2.rs:16:22\n    |\n LL |     default type U = &'static B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&'static B == B`\n+   |                      ^^^^^^^^^^ no implementation for `&'static B == B`\n    |\n    = help: the trait `PartialEq<B>` is not implemented for `&'static B`\n note: required by a bound in `X::U`"}, {"sha": "da5fe97cf1b8b2c3358b9987b889848cb4b3fcf6", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -9,10 +9,10 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: can't compare `T` with `T`\n-  --> $DIR/deafult-generic-associated-type-bound.rs:18:5\n+  --> $DIR/deafult-generic-associated-type-bound.rs:18:26\n    |\n LL |     default type U<'a> = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T == T`\n+   |                          ^^^^^ no implementation for `T == T`\n    |\n    = note: required because of the requirements on the impl of `PartialEq` for `&'a T`\n note: required by a bound in `X::U`"}, {"sha": "78e94cec2c0d5d0d44ce3bdc8567f5aa9d10f971", "filename": "src/test/ui/specialization/issue-33017.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-33017.rs:12:5\n+  --> $DIR/issue-33017.rs:12:27\n    |\n LL |     default type Output = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                           ^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required by a bound in `UncheckedCopy::Output`\n   --> $DIR/issue-33017.rs:8:31"}, {"sha": "cc5536c9e9af5b18d34e73c8dfc468304cd4bee6", "filename": "src/test/ui/specialization/issue-38091.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -9,10 +9,10 @@ LL | #![feature(specialization)]\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n error[E0277]: the trait bound `(): Valid` is not satisfied\n-  --> $DIR/issue-38091.rs:12:5\n+  --> $DIR/issue-38091.rs:12:23\n    |\n LL |     default type Ty = ();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Valid` is not implemented for `()`\n+   |                       ^^ the trait `Valid` is not implemented for `()`\n    |\n note: required by a bound in `Iterate::Ty`\n   --> $DIR/issue-38091.rs:5:14"}, {"sha": "1941d40fee8b93dbd56bec58b893541bebb2d14e", "filename": "src/test/ui/specialization/issue-44861.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `(): CoerceUnsized<*const [u8]>` is not satisfied\n-  --> $DIR/issue-44861.rs:21:5\n+  --> $DIR/issue-44861.rs:21:26\n    |\n LL |     default type Data2 = ();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CoerceUnsized<*const [u8]>` is not implemented for `()`\n+   |                          ^^ the trait `CoerceUnsized<*const [u8]>` is not implemented for `()`\n    |\n note: required by a bound in `Smartass::Data2`\n   --> $DIR/issue-44861.rs:12:17"}, {"sha": "bb5d90f001ee7335d2ccc238c9a14d24d41d5792", "filename": "src/test/ui/specialization/issue-59435.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `MyStruct: Default` is not satisfied\n-  --> $DIR/issue-59435.rs:11:5\n+  --> $DIR/issue-59435.rs:11:27\n    |\n LL |     default type MyType = MyStruct;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `MyStruct`\n+   |                           ^^^^^^^^ the trait `Default` is not implemented for `MyStruct`\n    |\n note: required by a bound in `MyTrait::MyType`\n   --> $DIR/issue-59435.rs:7:18"}, {"sha": "1a36f6e8e7ff9f4e4829281e49ece4f85e058e3c", "filename": "src/test/ui/suggestions/issue-85945-check-where-clause-before-suggesting-unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85945-check-where-clause-before-suggesting-unsized.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,7 +2,7 @@\n // `Sized` bound is already in a `where` clause.\n fn foo<T>(_: &T) where T: Sized {}\n fn bar() { foo(\"\"); }\n-//~^ERROR the size for values of type\n+//~^ ERROR the size for values of type\n \n pub fn main() {\n }"}, {"sha": "4251c1a1ed6cd9d3572ec30e7b2f99d39c812c18", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-5.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n   --> $DIR/check-trait-object-bounds-5.rs:23:5\n    |\n LL |     is_obj(x)\n-   |     ^^^^^^ expected `i64`, found `i32`\n+   |     ^^^^^^ type mismatch resolving `<i32 as Is>::T == i64`\n    |\n+note: expected this to be `i64`\n+  --> $DIR/check-trait-object-bounds-5.rs:9:14\n+   |\n+LL |     type T = U;\n+   |              ^\n note: required by a bound in `is_obj`\n   --> $DIR/check-trait-object-bounds-5.rs:20:23\n    |"}, {"sha": "5b23a513eea9b96f77d6012a13f7bd7a4bc9464f", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-6.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -2,8 +2,13 @@ error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n   --> $DIR/check-trait-object-bounds-6.rs:20:5\n    |\n LL |     is_obj(x)\n-   |     ^^^^^^ expected `i64`, found `i32`\n+   |     ^^^^^^ type mismatch resolving `<i32 as Is>::T == i64`\n    |\n+note: expected this to be `i64`\n+  --> $DIR/check-trait-object-bounds-6.rs:9:14\n+   |\n+LL |     type T = U;\n+   |              ^\n note: required by a bound in `is_obj`\n   --> $DIR/check-trait-object-bounds-6.rs:17:23\n    |"}, {"sha": "30aa97d2934ddcecc21f1de30bfca84d3ce8eb88", "filename": "src/test/ui/traits/impl-method-mismatch.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,12 +1,14 @@\n error[E0053]: method `jumbo` has an incompatible type for trait\n   --> $DIR/impl-method-mismatch.rs:7:5\n    |\n-LL |     fn jumbo(&self, x: &usize) -> usize;\n-   |     ------------------------------------ type in trait\n-...\n LL |     unsafe fn jumbo(&self, x: &usize) { *self + *x; }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected normal fn, found unsafe fn\n    |\n+note: type in trait\n+  --> $DIR/impl-method-mismatch.rs:2:5\n+   |\n+LL |     fn jumbo(&self, x: &usize) -> usize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected fn pointer `fn(&usize, &usize) -> usize`\n               found fn pointer `unsafe fn(&usize, &usize)`\n "}, {"sha": "c36c17d3d24dd69596af705c2b84596074d48032", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -22,6 +22,7 @@ impl<'a> NotAuto for C<'a> {}\n fn is_send<S: NotAuto>() {}\n //~^ NOTE: required\n //~| NOTE: required\n+\n fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();"}, {"sha": "9ca615aacee3f61594f99cd32be222b8b45af81d", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `X<C<'_>>: NotAuto`\n-  --> $DIR/lifetime.rs:27:5\n+  --> $DIR/lifetime.rs:28:5\n    |\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0d0bf88616c8699411b89d707fddb533f651f15e", "filename": "src/test/ui/traits/inductive-overflow/two-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be shared between threads safely\n-  --> $DIR/two-traits.rs:11:5\n+  --> $DIR/two-traits.rs:11:14\n    |\n LL |     type X = Self;\n-   |     ^^^^^^^^^^^^^^ `T` cannot be shared between threads safely\n+   |              ^^^^ `T` cannot be shared between threads safely\n    |\n note: required by a bound in `Magic::X`\n   --> $DIR/two-traits.rs:8:13"}, {"sha": "245c4ee525eab7292f989d6c5de1740224db54e6", "filename": "src/test/ui/traits/issue-65673.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-65673.rs:9:5\n+  --> $DIR/issue-65673.rs:9:16\n    |\n LL |     type Ctx = dyn Alias<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n note: required by a bound in `WithType::Ctx`"}, {"sha": "6fc6b4bfe1f0048cff2e0fe98fd8c080646e7984", "filename": "src/test/ui/type-alias-impl-trait/issue-63355.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -4,8 +4,13 @@ error[E0271]: type mismatch resolving `<() as Bar>::Foo == ()`\n LL | pub type FooImpl = impl Foo;\n    |                    -------- the found opaque type\n LL | pub type BarImpl = impl Bar<Foo = FooImpl>;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<() as Bar>::Foo == ()`\n    |\n+note: expected this to be `()`\n+  --> $DIR/issue-63355.rs:24:16\n+   |\n+LL |     type Foo = FooImpl;\n+   |                ^^^^^^^\n    = note: expected unit type `()`\n             found opaque type `impl Foo`\n "}, {"sha": "347887f4bcfd5584ae8f856fa678c701768a3269", "filename": "src/test/ui/type/type-annotation-needed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,6 +1,7 @@\n fn foo<T: Into<String>>(x: i32) {}\n //~^ NOTE required by\n //~| NOTE required by\n+\n fn main() {\n     foo(42);\n     //~^ ERROR type annotations needed"}, {"sha": "f7dfb84523802fd1fec9b0647f153c56b7f64874", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,5 +1,5 @@\n error[E0283]: type annotations needed\n-  --> $DIR/type-annotation-needed.rs:5:5\n+  --> $DIR/type-annotation-needed.rs:6:5\n    |\n LL |     foo(42);\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`"}, {"sha": "8a0cba1fac5558c9a214992ae5a049a3781017c8", "filename": "src/test/ui/unsafe/unsafe-trait-impl.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e1972eba7e95e68f6fc05b07dec15fb1e553e1b/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr?ref=5e1972eba7e95e68f6fc05b07dec15fb1e553e1b", "patch": "@@ -1,12 +1,14 @@\n error[E0053]: method `len` has an incompatible type for trait\n   --> $DIR/unsafe-trait-impl.rs:8:5\n    |\n-LL |     unsafe fn len(&self) -> u32;\n-   |     ---------------------------- type in trait\n-...\n LL |     fn len(&self) -> u32 { *self }\n    |     ^^^^^^^^^^^^^^^^^^^^ expected unsafe fn, found normal fn\n    |\n+note: type in trait\n+  --> $DIR/unsafe-trait-impl.rs:4:5\n+   |\n+LL |     unsafe fn len(&self) -> u32;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected fn pointer `unsafe fn(&u32) -> _`\n               found fn pointer `fn(&u32) -> _`\n "}]}