{"sha": "404e9c5e3ad75057b6bbb3bcd44fe60480e50294", "node_id": "C_kwDOAAsO6NoAKDQwNGU5YzVlM2FkNzUwNTdiNmJiYjNiY2Q0NGZlNjA0ODBlNTAyOTQ", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-02-10T20:50:17Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-02-10T20:50:17Z"}, "message": "Have a function for the `log(0)` panic, rather than copy-pasting the string constant", "tree": {"sha": "7248798405fa17f78d95c01a1e6c0837d0a83aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7248798405fa17f78d95c01a1e6c0837d0a83aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/404e9c5e3ad75057b6bbb3bcd44fe60480e50294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/404e9c5e3ad75057b6bbb3bcd44fe60480e50294", "html_url": "https://github.com/rust-lang/rust/commit/404e9c5e3ad75057b6bbb3bcd44fe60480e50294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/404e9c5e3ad75057b6bbb3bcd44fe60480e50294/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d3ba5bcbf5c7e13d4ce068d3339710701dd603", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d3ba5bcbf5c7e13d4ce068d3339710701dd603", "html_url": "https://github.com/rust-lang/rust/commit/50d3ba5bcbf5c7e13d4ce068d3339710701dd603"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "0ce31b40a3845b877311ae66ab0a73bf88dc2df1", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/404e9c5e3ad75057b6bbb3bcd44fe60480e50294/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/404e9c5e3ad75057b6bbb3bcd44fe60480e50294/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=404e9c5e3ad75057b6bbb3bcd44fe60480e50294", "patch": "@@ -138,3 +138,11 @@ pub const fn i64(val: i64) -> u32 {\n pub const fn i128(val: i128) -> u32 {\n     u128(val as u128)\n }\n+\n+/// Instantiate this panic logic once, rather than for all the ilog methods\n+/// on every single primitive type.\n+#[cold]\n+#[track_caller]\n+pub const fn panic_for_nonpositive_argument() -> ! {\n+    panic!(\"argument of integer logarithm must be positive\")\n+}"}, {"sha": "479f8ffb78d01383177c6b77f6e23d4cc665a9dd", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/404e9c5e3ad75057b6bbb3bcd44fe60480e50294/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/404e9c5e3ad75057b6bbb3bcd44fe60480e50294/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=404e9c5e3ad75057b6bbb3bcd44fe60480e50294", "patch": "@@ -2331,14 +2331,17 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog(self, base: Self) -> u32 {\n             assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n-            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog(base) {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n@@ -2354,13 +2357,16 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog2(self) -> u32 {\n-            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog2() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n@@ -2376,13 +2382,16 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog10(self) -> u32 {\n-            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog10() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}, {"sha": "411ea68674db36dbf561e9d8f69e9e85d77e5454", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/404e9c5e3ad75057b6bbb3bcd44fe60480e50294/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/404e9c5e3ad75057b6bbb3bcd44fe60480e50294/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=404e9c5e3ad75057b6bbb3bcd44fe60480e50294", "patch": "@@ -705,14 +705,17 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog(self, base: Self) -> u32 {\n             assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n-            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog(base) {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n@@ -728,13 +731,16 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog2(self) -> u32 {\n-            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog2() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n@@ -750,13 +756,16 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog10(self) -> u32 {\n-            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog10() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}]}