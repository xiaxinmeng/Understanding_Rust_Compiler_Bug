{"sha": "4871f11439f8a867aed6f12e0c6cc86cd7dc518d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NzFmMTE0MzlmOGE4NjdhZWQ2ZjEyZTBjNmNjODZjZDdkYzUxOGQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-04-03T04:41:24Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-04-04T05:43:08Z"}, "message": "std: change timeval to ns resolution timespec\n\nThis lets us use the more precise clock_gettime on posix\nmachines.", "tree": {"sha": "1b292d291f81f4bf960d3ae0153338f90a6ed8bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b292d291f81f4bf960d3ae0153338f90a6ed8bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4871f11439f8a867aed6f12e0c6cc86cd7dc518d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4871f11439f8a867aed6f12e0c6cc86cd7dc518d", "html_url": "https://github.com/rust-lang/rust/commit/4871f11439f8a867aed6f12e0c6cc86cd7dc518d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4871f11439f8a867aed6f12e0c6cc86cd7dc518d/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aae7320dbc0cb703417f38eb4d7aa7bd977e779", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aae7320dbc0cb703417f38eb4d7aa7bd977e779", "html_url": "https://github.com/rust-lang/rust/commit/7aae7320dbc0cb703417f38eb4d7aa7bd977e779"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "70d02dfea4324108aa0b22418e7c404c8861d2eb", "filename": "src/libstd/time.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4871f11439f8a867aed6f12e0c6cc86cd7dc518d/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4871f11439f8a867aed6f12e0c6cc86cd7dc518d/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=4871f11439f8a867aed6f12e0c6cc86cd7dc518d", "patch": "@@ -1,21 +1,21 @@\n #[abi = \"cdecl\"]\n native mod rustrt {\n-    fn get_time(&sec: i64, &usec: i32);\n+    fn get_time(&sec: i64, &nsec: i32);\n     fn precise_time_ns(&ns: u64);\n }\n \n #[doc = \"A record specifying a time value in seconds and microseconds.\"]\n-type timeval = {sec: i64, usec: i32};\n+type timespec = {sec: i64, nsec: i32};\n \n #[doc = \"\n-Returns the current time as a `timeval` containing the seconds and\n+Returns the current time as a `timespec` containing the seconds and\n microseconds since 1970-01-01T00:00:00Z.\n \"]\n-fn get_time() -> timeval {\n+fn get_time() -> timespec {\n     let mut sec = 0i64;\n-    let mut usec = 0i32;\n-    rustrt::get_time(sec, usec);\n-    ret {sec: sec, usec: usec};\n+    let mut nsec = 0i32;\n+    rustrt::get_time(sec, nsec);\n+    ret {sec: sec, nsec: nsec};\n }\n \n #[doc = \"\n@@ -47,20 +47,20 @@ mod tests {\n \n         let tv1 = get_time();\n         log(debug, \"tv1=\" + uint::str(tv1.sec as uint) + \" sec + \"\n-                   + uint::str(tv1.usec as uint) + \" usec\");\n+                   + uint::str(tv1.nsec as uint) + \" nsec\");\n \n         assert tv1.sec > some_recent_date;\n-        assert tv1.usec < 1000000i32;\n+        assert tv1.nsec < 1000000000i32;\n \n         let tv2 = get_time();\n         log(debug, \"tv2=\" + uint::str(tv2.sec as uint) + \" sec + \"\n-                   + uint::str(tv2.usec as uint) + \" usec\");\n+                   + uint::str(tv2.nsec as uint) + \" nsec\");\n \n         assert tv2.sec >= tv1.sec;\n         assert tv2.sec < some_future_date;\n-        assert tv2.usec < 1000000i32;\n+        assert tv2.nsec < 1000000000i32;\n         if tv2.sec == tv1.sec {\n-            assert tv2.usec >= tv1.usec;\n+            assert tv2.nsec >= tv1.nsec;\n         }\n     }\n "}, {"sha": "a182d774e0de903d3ad56da1cdc79dd0cd287061", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4871f11439f8a867aed6f12e0c6cc86cd7dc518d/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4871f11439f8a867aed6f12e0c6cc86cd7dc518d/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=4871f11439f8a867aed6f12e0c6cc86cd7dc518d", "patch": "@@ -408,7 +408,7 @@ rust_ptr_eq(type_desc *t, rust_box *a, rust_box *b) {\n \n #if defined(__WIN32__)\n extern \"C\" CDECL void\n-get_time(int64_t *sec, int32_t *usec) {\n+get_time(int64_t *sec, int32_t *nsec) {\n     FILETIME fileTime;\n     GetSystemTimeAsFileTime(&fileTime);\n \n@@ -423,15 +423,22 @@ get_time(int64_t *sec, int32_t *usec) {\n     const uint64_t NANOSECONDS_FROM_1601_TO_1970 = 11644473600000000u;\n     uint64_t ns_since_1970 = ns_since_1601 - NANOSECONDS_FROM_1601_TO_1970;\n     *sec = ns_since_1970 / 1000000;\n-    *usec = ns_since_1970 % 1000000;\n+    *nsec = (ns_since_1970 % 1000000) * 1000;\n }\n #else\n extern \"C\" CDECL void\n-get_time(int64_t *sec, int32_t *usec) {\n+get_time(int64_t *sec, int32_t *nsec) {\n+#ifdef __APPLE__\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n     *sec = tv.tv_sec;\n-    *usec = tv.tv_usec;\n+    *nsec = tv.tv_usec * 1000;\n+#else\n+    timespec ts;\n+    clock_gettime(CLOCK_REALTIME, &ts);\n+    *sec = ts.tv_sec;\n+    *nsec = ts.tv_nsec;\n+#endif\n }\n #endif\n "}, {"sha": "495622b4e522ad7812c9214a5c3b16564a1ad7fc", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4871f11439f8a867aed6f12e0c6cc86cd7dc518d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4871f11439f8a867aed6f12e0c6cc86cd7dc518d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4871f11439f8a867aed6f12e0c6cc86cd7dc518d", "patch": "@@ -155,10 +155,10 @@ fn get_dest_addr(dest: dest) -> ValueRef {\n     }\n }\n \n-fn log_fn_time(ccx: @crate_ctxt, name: str, start: time::timeval,\n-               end: time::timeval) {\n+fn log_fn_time(ccx: @crate_ctxt, name: str, start: time::timespec,\n+               end: time::timespec) {\n     let elapsed = 1000 * ((end.sec - start.sec) as int) +\n-        ((end.usec as int) - (start.usec as int)) / 1000;\n+        ((end.nsec as int) - (start.nsec as int)) / 1000000;\n     *ccx.stats.fn_times += [{ident: name, time: elapsed}];\n }\n \n@@ -4056,7 +4056,7 @@ fn trans_fn(ccx: @crate_ctxt,\n             id: ast::node_id) {\n     let do_time = ccx.sess.opts.stats;\n     let start = if do_time { time::get_time() }\n-                else { {sec: 0i64, usec: 0i32} };\n+                else { {sec: 0i64, nsec: 0i32} };\n     let _icx = ccx.insn_ctxt(\"trans_fn\");\n     trans_closure(ccx, path, decl, body, llfndecl, ty_self,\n                   param_substs, id, {|fcx|"}]}