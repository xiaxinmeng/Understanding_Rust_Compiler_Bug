{"sha": "25953321c00cc07cee0d414716a344357524d32b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OTUzMzIxYzAwY2MwN2NlZTBkNDE0NzE2YTM0NDM1NzUyNGQzMmI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-05T11:49:36Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-05T19:00:38Z"}, "message": "rustc: remove \"GlobalMetaData\" dead code from hir::map::definitions.", "tree": {"sha": "b610dc54f03fc732e28650774f221baf8b1af369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b610dc54f03fc732e28650774f221baf8b1af369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25953321c00cc07cee0d414716a344357524d32b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25953321c00cc07cee0d414716a344357524d32b", "html_url": "https://github.com/rust-lang/rust/commit/25953321c00cc07cee0d414716a344357524d32b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25953321c00cc07cee0d414716a344357524d32b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e4da3caadc61fab2cfcffebcbfdd72fbcee62b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4da3caadc61fab2cfcffebcbfdd72fbcee62b7", "html_url": "https://github.com/rust-lang/rust/commit/2e4da3caadc61fab2cfcffebcbfdd72fbcee62b7"}], "stats": {"total": 317, "additions": 116, "deletions": 201}, "files": [{"sha": "1e444e8a5b84e2ee7a9fd55ebb3ab3e964653998", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 87, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -19,7 +19,7 @@ use std::hash::Hash;\n use syntax::ast;\n use syntax_pos::symbol::{Symbol, sym};\n use syntax_pos::hygiene::ExpnId;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::Span;\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`\n@@ -310,10 +310,6 @@ pub enum DefPathData {\n     AnonConst,\n     /// An `impl Trait` type node.\n     ImplTrait,\n-    /// Identifies a piece of crate metadata that is global to a whole crate\n-    /// (as opposed to just one item). `GlobalMetaData` components are only\n-    /// supposed to show up right below the crate root.\n-    GlobalMetaData(Symbol),\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n@@ -444,9 +440,6 @@ impl Definitions {\n         self.node_to_def_index.insert(ast::CRATE_NODE_ID, root_index);\n         self.set_invocation_parent(ExpnId::root(), root_index);\n \n-        // Allocate some other `DefIndex`es that always must exist.\n-        GlobalMetaDataKind::allocate_def_indices(self);\n-\n         root_index\n     }\n \n@@ -553,8 +546,7 @@ impl DefPathData {\n             TypeNs(name) |\n             ValueNs(name) |\n             MacroNs(name) |\n-            LifetimeNs(name) |\n-            GlobalMetaData(name) => Some(name),\n+            LifetimeNs(name) => Some(name),\n \n             Impl |\n             CrateRoot |\n@@ -572,8 +564,7 @@ impl DefPathData {\n             TypeNs(name) |\n             ValueNs(name) |\n             MacroNs(name) |\n-            LifetimeNs(name) |\n-            GlobalMetaData(name) => {\n+            LifetimeNs(name) => {\n                 name\n             }\n             // Note that this does not show up in user print-outs.\n@@ -591,78 +582,3 @@ impl DefPathData {\n         self.as_symbol().to_string()\n     }\n }\n-\n-// We define the `GlobalMetaDataKind` enum with this macro because we want to\n-// make sure that we exhaustively iterate over all variants when registering\n-// the corresponding `DefIndex`es in the `DefTable`.\n-macro_rules! define_global_metadata_kind {\n-    (pub enum GlobalMetaDataKind {\n-        $($variant:ident),*\n-    }) => (\n-        pub enum GlobalMetaDataKind {\n-            $($variant),*\n-        }\n-\n-        impl GlobalMetaDataKind {\n-            fn allocate_def_indices(definitions: &mut Definitions) {\n-                $({\n-                    let instance = GlobalMetaDataKind::$variant;\n-                    definitions.create_def_with_parent(\n-                        CRATE_DEF_INDEX,\n-                        ast::DUMMY_NODE_ID,\n-                        DefPathData::GlobalMetaData(instance.name()),\n-                        ExpnId::root(),\n-                        DUMMY_SP\n-                    );\n-\n-                    // Make sure calling `def_index` does not crash.\n-                    instance.def_index(&definitions.table);\n-                })*\n-            }\n-\n-            pub fn def_index(&self, def_path_table: &DefPathTable) -> DefIndex {\n-                let def_key = DefKey {\n-                    parent: Some(CRATE_DEF_INDEX),\n-                    disambiguated_data: DisambiguatedDefPathData {\n-                        data: DefPathData::GlobalMetaData(self.name()),\n-                        disambiguator: 0,\n-                    }\n-                };\n-\n-                // These `DefKey`s are all right after the root,\n-                // so a linear search is fine.\n-                let index = def_path_table.index_to_key\n-                                          .iter()\n-                                          .position(|k| *k == def_key)\n-                                          .unwrap();\n-\n-                DefIndex::from(index)\n-            }\n-\n-            fn name(&self) -> Symbol {\n-\n-                let string = match *self {\n-                    $(\n-                        GlobalMetaDataKind::$variant => {\n-                            concat!(\"{{GlobalMetaData::\", stringify!($variant), \"}}\")\n-                        }\n-                    )*\n-                };\n-\n-                Symbol::intern(string)\n-            }\n-        }\n-    )\n-}\n-\n-define_global_metadata_kind!(pub enum GlobalMetaDataKind {\n-    Krate,\n-    CrateDeps,\n-    DylibDependencyFormats,\n-    LangItems,\n-    LangItemsMissing,\n-    NativeLibraries,\n-    SourceMap,\n-    Impls,\n-    ExportedSymbols\n-});"}, {"sha": "0fe4c7c67487379a325318558f81cf2a956a42a5", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -601,8 +601,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             | DefPathData::Misc\n             | DefPathData::Impl\n             | DefPathData::MacroNs(_)\n-            | DefPathData::LifetimeNs(_)\n-            | DefPathData::GlobalMetaData(_) => {\n+            | DefPathData::LifetimeNs(_) => {\n                 bug!(\"symbol_names: unexpected DefPathData: {:?}\", disambiguated_data.data)\n             }\n         };"}, {"sha": "fcbb189c1117bb3a3e64a6a382e41cb4dfea225f", "filename": "src/test/mir-opt/graphviz.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.rs?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -7,14 +7,14 @@ fn main() {}\n \n // END RUST SOURCE\n // START rustc.main.mir_map.0.dot\n-// digraph Mir_0_12 { // The name here MUST be an ASCII identifier.\n+// digraph Mir_0_3 { // The name here MUST be an ASCII identifier.\n //     graph [fontname=\"monospace\"];\n //     node [fontname=\"monospace\"];\n //     edge [fontname=\"monospace\"];\n //     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n-//     bb0__0_12 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n-//     bb1__0_12 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n-//     bb2__0_12 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n-//     bb0__0_12 -> bb2__0_12 [label=\"\"];\n+//     bb0__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>>];\n+//     bb1__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>>];\n+//     bb2__0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>>];\n+//     bb0__0_3 -> bb2__0_3 [label=\"\"];\n // }\n // END rustc.main.mir_map.0.dot"}, {"sha": "491130b7c5d32937d65bef3f58afa5ed1cd8f140", "filename": "src/test/mir-opt/inline-closure-borrows-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -20,7 +20,7 @@ fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(13), local_id: 31 }];\n+//     _3 = [closure@HirId { owner: DefIndex(4), local_id: 31 }];\n //     ...\n //     _4 = &_3;\n //     ..."}, {"sha": "7c0259b643a630636e566afc2b4fe7dc2dc6a169", "filename": "src/test/mir-opt/inline-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure.rs?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -16,7 +16,7 @@ fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(13), local_id: 15 }];\n+//     _3 = [closure@HirId { owner: DefIndex(4), local_id: 15 }];\n //     ...\n //     _4 = &_3;\n //     ..."}, {"sha": "96b848eb1d41cceb0f310a2b6788a5d2d3de190c", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -100,7 +100,7 @@ fn main() {\n // }\n // END rustc.main.EraseRegions.after.mir\n // START rustc.main-{{closure}}.EraseRegions.after.mir\n-// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(22), local_id: 72 }], _2: &i32) -> &i32 {\n+// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(13), local_id: 72 }], _2: &i32) -> &i32 {\n //     ...\n //     bb0: {\n //         Retag([fn entry] _1);"}, {"sha": "1f15ce5c212f474ea1987ab01f4e79769c0feb19", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:13 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) i32)),\n            ]\n@@ -30,7 +30,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ escape_argument_callee[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ escape_argument_callee[317d]::test[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "610a4aed796c61e973cebf7e0549d3c713fb5cdc", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:13 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)),\n            ]\n@@ -21,7 +21,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ escape_argument[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ escape_argument[317d]::test[0]) with substs []\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-argument.rs:27:25"}, {"sha": "7c4d48cdf9fc2e14c9f3f6318e96684ae17db308", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |             let mut closure1 = || p = &y;\n    |                                ^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:14 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:5 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]::{{closure}}[0]) with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r i32,\n@@ -23,7 +23,7 @@ LL | |             closure1();\n LL | |         };\n    | |_________^\n    |\n-   = note: defining type: DefId(0:13 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r i32,\n@@ -44,7 +44,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ escape_upvar_nested[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ escape_upvar_nested[317d]::test[0]) with substs []\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-upvar-nested.rs:21:40"}, {"sha": "4446486808bca9622c636967265f89eb86befd4f", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |         let mut closure = || p = &y;\n    |                           ^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:13 ~ escape_upvar_ref[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ escape_upvar_ref[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                &'_#1r i32,\n@@ -25,7 +25,7 @@ LL | |     deref(p);\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ escape_upvar_ref[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ escape_upvar_ref[317d]::test[0]) with substs []\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/escape-upvar-ref.rs:23:35"}, {"sha": "43406c05a250045f111d2319d0e292bdb7cd4f04", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -8,7 +8,7 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: DefId(0:27 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:18 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -39,7 +39,7 @@ LL | |     );\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:23 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:14 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "3bd3fc517cebe633e575ab6ebb022ca293ec5f78", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n@@ -30,7 +30,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-ref.rs:45:9"}, {"sha": "5ebc22da0365f0fea3dacadc21dd8936e7e22cd7", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -8,7 +8,7 @@ LL | |\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:18 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:9 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n            ]\n@@ -35,7 +35,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:17 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]) with substs []\n+   = note: defining type: DefId(0:8 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]) with substs []\n \n note: External requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:35:15\n@@ -46,7 +46,7 @@ LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:20 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:11 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>)),\n            ]\n@@ -65,7 +65,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:19 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]) with substs []\n+   = note: defining type: DefId(0:10 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]) with substs []\n \n error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:30:26"}, {"sha": "e93634aa3da50b5a8fa3e5d75a4911b9f06b868e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -10,7 +10,7 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) u32>)),\n            ]\n@@ -31,7 +31,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:5"}, {"sha": "2127eab43448a69f1604a07793165810dd219065", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -10,7 +10,7 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n@@ -31,7 +31,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:5"}, {"sha": "9078877492f78bc59e3480f8283d50cd1ea9c3f0", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -30,7 +30,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_approximated_val[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_approximated_val[317d]::test[0]) with substs []\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-val.rs:38:9"}, {"sha": "c5468e73cfa08ad7f0dda2ebae2d52f5e40df9c6", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -8,7 +8,7 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: DefId(0:23 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:14 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -28,5 +28,5 @@ LL | |     );\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:21 ~ propagate_despite_same_free_region[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:12 ~ propagate_despite_same_free_region[317d]::supply[0]) with substs []\n "}, {"sha": "bf43c89386547dd7eb626e037475445954ec711b", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>)),\n            ]\n@@ -39,7 +39,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "569bae999dd27617d4e056be76c234cfa198c7f0", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:25 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:16 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't1)) u32>)),\n            ]\n@@ -39,7 +39,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:22 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]) with substs []\n+   = note: defining type: DefId(0:13 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "0d622654c528f01d57c71e04b8b89b1fe8de4f82", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -11,7 +11,7 @@ LL | |         require(value);\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: DefId(0:23 ~ propagate_from_trait_match[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:14 ~ propagate_from_trait_match[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -32,7 +32,7 @@ LL | |     });\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:20 ~ propagate_from_trait_match[317d]::supply[0]) with substs [\n+   = note: defining type: DefId(0:11 ~ propagate_from_trait_match[317d]::supply[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "00c56a796d1b6f9261a5b847cd4fd1a51b9c6431", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |     expect_sig(|a, b| b); // ought to return `a`\n    |                ^^^^^^^^\n    |\n-   = note: defining type: DefId(0:13 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:4 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) i32,\n            ]\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:12 ~ return_wrong_bound_region[317d]::test[0]) with substs []\n+   = note: defining type: DefId(0:3 ~ return_wrong_bound_region[317d]::test[0]) with substs []\n \n error: aborting due to previous error\n "}, {"sha": "dd61023a15b01f112e9ed0386b4cb85746498789", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:22 ~ projection_no_regions_closure[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:13 ~ projection_no_regions_closure[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -25,7 +25,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:19 ~ projection_no_regions_closure[317d]::no_region[0]) with substs [\n+   = note: defining type: DefId(0:10 ~ projection_no_regions_closure[317d]::no_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -44,7 +44,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:26 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:17 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -64,7 +64,7 @@ LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:23 ~ projection_no_regions_closure[317d]::correct_region[0]) with substs [\n+   = note: defining type: DefId(0:14 ~ projection_no_regions_closure[317d]::correct_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -75,7 +75,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:31 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:22 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -97,7 +97,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:27 ~ projection_no_regions_closure[317d]::wrong_region[0]) with substs [\n+   = note: defining type: DefId(0:18 ~ projection_no_regions_closure[317d]::wrong_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -117,7 +117,7 @@ note: External requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:36 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:27 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -139,7 +139,7 @@ LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:32 ~ projection_no_regions_closure[317d]::outlives_region[0]) with substs [\n+   = note: defining type: DefId(0:23 ~ projection_no_regions_closure[317d]::outlives_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,"}, {"sha": "c5c0e106c8a9cbfc0cf053e81dd2d7aa03cc9532", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:28 ~ projection_one_region_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:19 ~ projection_one_region_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:24 ~ projection_one_region_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:15 ~ projection_one_region_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -38,7 +38,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:24 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(25), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:15 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(16), 'a))`...\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -57,7 +57,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:33 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:24 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -80,7 +80,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_one_region_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:20 ~ projection_one_region_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -111,7 +111,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:29 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -133,7 +133,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_one_region_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:25 ~ projection_one_region_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -145,7 +145,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:43 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:34 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -168,7 +168,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:39 ~ projection_one_region_closure[317d]::elements_outlive[0]) with substs [\n+   = note: defining type: DefId(0:30 ~ projection_one_region_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,"}, {"sha": "3fcf9731fc3a59ea189866daa0c76df90395d8bc", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:28 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:19 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -26,7 +26,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:15 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -48,7 +48,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:33 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -70,7 +70,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:20 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -93,7 +93,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -115,7 +115,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:25 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -127,7 +127,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:43 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -149,7 +149,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:39 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]) with substs [\n+   = note: defining type: DefId(0:30 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -161,7 +161,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:47 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -182,7 +182,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:44 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]) with substs [\n+   = note: defining type: DefId(0:35 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "9cc2e504e1009eb5a4f62db958a8b710cc8b4fda", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:28 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:19 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -23,7 +23,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:15 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -34,7 +34,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:33 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:24 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -54,7 +54,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:20 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -66,7 +66,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:29 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -86,7 +86,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:25 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -98,7 +98,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:43 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:34 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -118,7 +118,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:39 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]) with substs [\n+   = note: defining type: DefId(0:30 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -130,7 +130,7 @@ note: No external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:47 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:38 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -149,7 +149,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:44 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]) with substs [\n+   = note: defining type: DefId(0:35 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "c4f65a29b8e3ecc1cc46d448abbb8d6af755d234", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:31 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:22 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -27,7 +27,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:26 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n+   = note: defining type: DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -39,15 +39,15 @@ error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:26 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(27), 'a))`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(18), 'a))`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:37 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:28 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -70,7 +70,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:32 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n+   = note: defining type: DefId(0:23 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -91,7 +91,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:43 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:34 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -114,7 +114,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:38 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n+   = note: defining type: DefId(0:29 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -127,7 +127,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:49 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:40 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -150,7 +150,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:44 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]) with substs [\n+   = note: defining type: DefId(0:35 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -163,7 +163,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:55 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:46 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -186,7 +186,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:50 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]) with substs [\n+   = note: defining type: DefId(0:41 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]) with substs [\n                '_#1r,\n                '_#2r,\n                '_#3r,\n@@ -199,7 +199,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:60 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:51 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -221,7 +221,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:56 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]) with substs [\n+   = note: defining type: DefId(0:47 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -243,7 +243,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:65 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:56 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -265,7 +265,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:61 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]) with substs [\n+   = note: defining type: DefId(0:52 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -277,7 +277,7 @@ note: External requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:69 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:60 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -298,7 +298,7 @@ LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:66 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]) with substs [\n+   = note: defining type: DefId(0:57 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "fd8d8917c18781f2f3c96909dece3d438c43a3a0", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:20 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:11 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n@@ -21,7 +21,7 @@ LL | |     twice(cell, value, |a, b| invoke(a, b));\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:18 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [\n+   = note: defining type: DefId(0:9 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [\n                T,\n            ]\n \n@@ -31,7 +31,7 @@ note: External requirements\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: DefId(0:24 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:15 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) T)),\n@@ -49,7 +49,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:21 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [\n+   = note: defining type: DefId(0:12 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [\n                T,\n            ]\n \n@@ -59,7 +59,7 @@ error[E0309]: the parameter type `T` may not live long enough\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:21 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(22), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:12 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(13), 'a))`...\n \n error: aborting due to previous error\n "}, {"sha": "7c8dc94eda98bcf6910dee2f5e8305270d330abd", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -4,7 +4,7 @@ note: External requirements\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^\n    |\n-   = note: defining type: DefId(0:20 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:11 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -25,7 +25,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:17 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]) with substs [\n+   = note: defining type: DefId(0:8 ~ ty_param_closure_outlives_from_return_type[317d]::no_region[0]) with substs [\n                '_#1r,\n                T,\n            ]"}, {"sha": "97b84d1bdf801e6cb48a9602f755a98753d2a11f", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25953321c00cc07cee0d414716a344357524d32b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=25953321c00cc07cee0d414716a344357524d32b", "patch": "@@ -11,7 +11,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:23 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:14 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::{{closure}}[0]) with closure substs [\n                T,\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T)),\n@@ -32,7 +32,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]) with substs [\n+   = note: defining type: DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]) with substs [\n                T,\n            ]\n \n@@ -49,7 +49,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(21), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(12), 'a))`...\n \n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -64,7 +64,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:27 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:18 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -85,7 +85,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:24 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]) with substs [\n+   = note: defining type: DefId(0:15 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -101,7 +101,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:32 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:23 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                T,\n                i32,\n@@ -123,7 +123,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:28 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]) with substs [\n+   = note: defining type: DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]) with substs [\n                '_#1r,\n                T,\n            ]\n@@ -139,7 +139,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:28 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(29), 'a))`...\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(20), 'a))`...\n \n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26\n@@ -151,7 +151,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: DefId(0:37 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n+   = note: defining type: DefId(0:28 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs [\n                '_#1r,\n                '_#2r,\n                T,\n@@ -173,7 +173,7 @@ LL | |     })\n LL | | }\n    | |_^\n    |\n-   = note: defining type: DefId(0:33 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]) with substs [\n+   = note: defining type: DefId(0:24 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]) with substs [\n                '_#1r,\n                '_#2r,\n                T,"}]}