{"sha": "d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff", "node_id": "C_kwDOAAsO6NoAKGQ1YWI4YjJmNWIzOTY5MGM2ZjczYzM0NTlkZjgzOGZkNGM4ZjQ0ZmY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T18:32:05Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T18:32:05Z"}, "message": "Rename add_implicit_generics to lower_generics", "tree": {"sha": "fa0b5a998632c6b90f0f363eb89274f423c9ef11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa0b5a998632c6b90f0f363eb89274f423c9ef11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmKWXyUACgkQgTGiTgx5\n768Ewg//WgGHesLE84CoDZlnLZH7EJf6xHsEw61rqZQah8sDwqT3igr5RtLY+HCF\nGJInRDSgOxPvcGBByqHgu0HF745oM9VtO9NZQHPLglMqFRPS7ahtFMzMYilQn0B3\naWLwrWVAFG6uEF2uq4haKI3rDX+9SNm6qrswCrNvDPEHFqKTK5TBqPAPidlV7TC5\nDRYD7PwLfIvK6K87wHa2Fqikxc8+iSmqYPrvcuU2LSX9fG6sdGtqDgHeV9O6WbaD\nt0HH1L+7nbchR4WTw+dqVH1Oqm9vZGDSjCcRAnvEKhSXGl6LZJFrB2bfkkYbJR+1\n9k4SvryUQZbHp7TXp7UDIo3Jj0hrrl/HEeYPYbkneC27wtDOseKd82xcuRCIEwAH\nmJ9q7Y1kDUnraHe6IpiaqUxHuPezc8B5Sisd5KsXgXCY9hhKKZvKXzfCntZ6v8fc\n37+31sCRQAL+o/cTfX7+44AJvoBFHXJXPPqV7fjbMdR1UOFCo7Ljy16f8qmwgoXy\no2xIefMzA0DMLHeLPwR2KBPkVZ2Hkk3cZShNrE3SFS9bJ0yWRqnYjY14TG+bSvX9\n5xWbd15FMRztSPn66CyzTpSvpD3fSdw3u1UVFaCt5SftzQNB1AHSHJPsF1pW/JKq\nTSSUBedunNc8MvKCdW3ZDdr1IICa/GqRyudV9BE+nQEY/ic/WJI=\n=aWAQ\n-----END PGP SIGNATURE-----", "payload": "tree fa0b5a998632c6b90f0f363eb89274f423c9ef11\nparent e080298e35b6eb9f34a64e450eb08dc17cf1a21b\nauthor Santiago Pastorino <spastorino@gmail.com> 1654021925 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1654021925 -0300\n\nRename add_implicit_generics to lower_generics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff", "html_url": "https://github.com/rust-lang/rust/commit/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e080298e35b6eb9f34a64e450eb08dc17cf1a21b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e080298e35b6eb9f34a64e450eb08dc17cf1a21b", "html_url": "https://github.com/rust-lang/rust/commit/e080298e35b6eb9f34a64e450eb08dc17cf1a21b"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "09d679e6eb7aa123e1906bfdfc688fa52a5c3769", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff", "patch": "@@ -267,11 +267,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n \n                     let itctx = ImplTraitContext::Universal(this.current_hir_id_owner);\n-                    let (generics, decl) =\n-                        this.add_implicit_generics(generics, id, itctx, |this| {\n-                            let ret_id = asyncness.opt_return_id();\n-                            this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n-                        });\n+                    let (generics, decl) = this.lower_generics(generics, id, itctx, |this| {\n+                        let ret_id = asyncness.opt_return_id();\n+                        this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n+                    });\n                     let sig = hir::FnSig {\n                         decl,\n                         header: this.lower_fn_header(header),\n@@ -311,7 +310,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // opaque type Foo1: Trait\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, where_clauses, true);\n-                let (generics, ty) = self.add_implicit_generics(\n+                let (generics, ty) = self.lower_generics(\n                     &generics,\n                     id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -324,7 +323,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }) => {\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, *where_clauses, true);\n-                let (generics, ty) = self.add_implicit_generics(\n+                let (generics, ty) = self.lower_generics(\n                     &generics,\n                     id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -333,7 +332,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n             ItemKind::Enum(ref enum_definition, ref generics) => {\n-                let (generics, variants) = self.add_implicit_generics(\n+                let (generics, variants) = self.lower_generics(\n                     generics,\n                     id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -346,7 +345,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ItemKind::Enum(hir::EnumDef { variants }, generics)\n             }\n             ItemKind::Struct(ref struct_def, ref generics) => {\n-                let (generics, struct_def) = self.add_implicit_generics(\n+                let (generics, struct_def) = self.lower_generics(\n                     generics,\n                     id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -355,7 +354,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ItemKind::Struct(struct_def, generics)\n             }\n             ItemKind::Union(ref vdata, ref generics) => {\n-                let (generics, vdata) = self.add_implicit_generics(\n+                let (generics, vdata) = self.lower_generics(\n                     generics,\n                     id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -388,7 +387,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // parent lifetime.\n                 let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n                 let (generics, (trait_ref, lowered_ty)) =\n-                    self.add_implicit_generics(ast_generics, id, itctx, |this| {\n+                    self.lower_generics(ast_generics, id, itctx, |this| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(\n                                 trait_ref,\n@@ -433,7 +432,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref bounds,\n                 ref items,\n             }) => {\n-                let (generics, (unsafety, items, bounds)) = self.add_implicit_generics(\n+                let (generics, (unsafety, items, bounds)) = self.lower_generics(\n                     generics,\n                     id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -452,7 +451,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ItemKind::Trait(is_auto, unsafety, generics, bounds, items)\n             }\n             ItemKind::TraitAlias(ref generics, ref bounds) => {\n-                let (generics, bounds) = self.add_implicit_generics(\n+                let (generics, bounds) = self.lower_generics(\n                     generics,\n                     id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -658,7 +657,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let fdec = &sig.decl;\n                     let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n                     let (generics, (fn_dec, fn_args)) =\n-                        self.add_implicit_generics(generics, i.id, itctx, |this| {\n+                        self.lower_generics(generics, i.id, itctx, |this| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n                                 this.lower_fn_decl(fdec, None, FnDeclKind::ExternFn, None),\n@@ -797,7 +796,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }) => {\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, where_clauses, false);\n-                self.add_implicit_generics(\n+                self.lower_generics(\n                     &generics,\n                     i.id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -883,7 +882,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::TyAlias(box TyAlias { generics, where_clauses, ty, .. }) => {\n                 let mut generics = generics.clone();\n                 add_ty_alias_where_clause(&mut generics, *where_clauses, false);\n-                self.add_implicit_generics(\n+                self.lower_generics(\n                     &generics,\n                     i.id,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n@@ -1239,7 +1238,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n         let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n-        let (generics, decl) = self.add_implicit_generics(generics, id, itctx, |this| {\n+        let (generics, decl) = self.lower_generics(generics, id, itctx, |this| {\n             this.lower_fn_decl(&sig.decl, Some(id), kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })"}, {"sha": "90fc9bf8940c76ba517b9d249614f887447b635a", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff", "patch": "@@ -706,7 +706,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// Creates a new `hir::GenericParam` for every new `Fresh` lifetime and\n     /// universal `impl Trait` type parameter encountered while evaluating `f`.\n     /// Definitions are created with the provided `parent_def_id`.\n-    fn add_implicit_generics<T>(\n+    fn lower_generics<T>(\n         &mut self,\n         generics: &Generics,\n         parent_node_id: NodeId,"}]}