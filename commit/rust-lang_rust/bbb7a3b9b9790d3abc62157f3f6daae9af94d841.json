{"sha": "bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "node_id": "C_kwDOAAsO6NoAKGJiYjdhM2I5Yjk3OTBkM2FiYzYyMTU3ZjNmNmRhYWU5YWY5NGQ4NDE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T12:53:33Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T14:18:11Z"}, "message": "Rename Compiler variables for clarity", "tree": {"sha": "aa85f1ae574805b833f6e468b22df1c3c548c9df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa85f1ae574805b833f6e468b22df1c3c548c9df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "html_url": "https://github.com/rust-lang/rust/commit/bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd1e824d88e9927326e5a2b4242c53e83b264d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1e824d88e9927326e5a2b4242c53e83b264d07", "html_url": "https://github.com/rust-lang/rust/commit/fd1e824d88e9927326e5a2b4242c53e83b264d07"}], "stats": {"total": 95, "additions": 54, "deletions": 41}, "files": [{"sha": "8352c1a965a75d8b9447079363d365730531081a", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "patch": "@@ -18,7 +18,7 @@ pub(crate) fn run(\n     sysroot_kind: SysrootKind,\n     dirs: &Dirs,\n     cg_clif_dylib: &Path,\n-    host_compiler: &Compiler,\n+    bootstrap_host_compiler: &Compiler,\n ) {\n     if !config::get_bool(\"testsuite.abi-cafe\") {\n         eprintln!(\"[RUN] abi-cafe (skipped)\");\n@@ -31,15 +31,15 @@ pub(crate) fn run(\n         channel,\n         sysroot_kind,\n         cg_clif_dylib,\n-        host_compiler,\n-        &host_compiler.triple,\n+        bootstrap_host_compiler,\n+        &bootstrap_host_compiler.triple,\n     );\n \n     eprintln!(\"Running abi-cafe\");\n \n     let pairs = [\"rustc_calls_cgclif\", \"cgclif_calls_rustc\", \"cgclif_calls_cc\", \"cc_calls_cgclif\"];\n \n-    let mut cmd = ABI_CAFE.run(host_compiler, dirs);\n+    let mut cmd = ABI_CAFE.run(bootstrap_host_compiler, dirs);\n     cmd.arg(\"--\");\n     cmd.arg(\"--pairs\");\n     cmd.args(pairs);"}, {"sha": "1e83f21ba577b8bf870b77792ecc2094beee0294", "filename": "build_system/bench.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "patch": "@@ -21,24 +21,24 @@ pub(crate) static SIMPLE_RAYTRACER_LLVM: CargoProject =\n pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n     CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n \n-pub(crate) fn benchmark(dirs: &Dirs, host_compiler: &Compiler) {\n-    benchmark_simple_raytracer(dirs, host_compiler);\n+pub(crate) fn benchmark(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n+    benchmark_simple_raytracer(dirs, bootstrap_host_compiler);\n }\n \n-fn benchmark_simple_raytracer(dirs: &Dirs, host_compiler: &Compiler) {\n+fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n     if std::process::Command::new(\"hyperfine\").output().is_err() {\n         eprintln!(\"Hyperfine not installed\");\n         eprintln!(\"Hint: Try `cargo install hyperfine` to install hyperfine\");\n         std::process::exit(1);\n     }\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(host_compiler, dirs);\n+    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(bootstrap_host_compiler, dirs);\n     spawn_and_wait(build_cmd);\n     fs::copy(\n         SIMPLE_RAYTRACER_LLVM\n             .target_dir(dirs)\n-            .join(&host_compiler.triple)\n+            .join(&bootstrap_host_compiler.triple)\n             .join(\"debug\")\n             .join(get_file_name(\"main\", \"bin\")),\n         RelPath::BUILD.to_path(dirs).join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),"}, {"sha": "514404305a3fa0416635e45dc7ad0b9a6a34357a", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "patch": "@@ -10,10 +10,10 @@ pub(crate) static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"c\n pub(crate) fn build_backend(\n     dirs: &Dirs,\n     channel: &str,\n-    host_compiler: &Compiler,\n+    bootstrap_host_compiler: &Compiler,\n     use_unstable_features: bool,\n ) -> PathBuf {\n-    let mut cmd = CG_CLIF.build(&host_compiler, dirs);\n+    let mut cmd = CG_CLIF.build(&bootstrap_host_compiler, dirs);\n \n     cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n \n@@ -48,7 +48,7 @@ pub(crate) fn build_backend(\n \n     CG_CLIF\n         .target_dir(dirs)\n-        .join(&host_compiler.triple)\n+        .join(&bootstrap_host_compiler.triple)\n         .join(channel)\n         .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))\n }"}, {"sha": "92d01750fab00e6da9e6a7c7c725495cc4e8f87b", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn build_sysroot(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib_src: &Path,\n-    host_compiler: &Compiler,\n+    bootstrap_host_compiler: &Compiler,\n     target_triple: &str,\n ) {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n@@ -53,7 +53,8 @@ pub(crate) fn build_sysroot(\n \n     let default_sysroot = super::rustc_info::get_default_sysroot();\n \n-    let host_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&host_compiler.triple).join(\"lib\");\n+    let host_rustlib_lib =\n+        RUSTLIB_DIR.to_path(dirs).join(&bootstrap_host_compiler.triple).join(\"lib\");\n     let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(target_triple).join(\"lib\");\n     fs::create_dir_all(&host_rustlib_lib).unwrap();\n     fs::create_dir_all(&target_rustlib_lib).unwrap();\n@@ -83,7 +84,11 @@ pub(crate) fn build_sysroot(\n         SysrootKind::None => {} // Nothing to do\n         SysrootKind::Llvm => {\n             for file in fs::read_dir(\n-                default_sysroot.join(\"lib\").join(\"rustlib\").join(&host_compiler.triple).join(\"lib\"),\n+                default_sysroot\n+                    .join(\"lib\")\n+                    .join(\"rustlib\")\n+                    .join(&bootstrap_host_compiler.triple)\n+                    .join(\"lib\"),\n             )\n             .unwrap()\n             {\n@@ -103,7 +108,7 @@ pub(crate) fn build_sysroot(\n                 try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n             }\n \n-            if target_triple != host_compiler.triple {\n+            if target_triple != bootstrap_host_compiler.triple {\n                 for file in fs::read_dir(\n                     default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n                 )\n@@ -118,19 +123,19 @@ pub(crate) fn build_sysroot(\n             build_clif_sysroot_for_triple(\n                 dirs,\n                 channel,\n-                host_compiler.clone(),\n+                bootstrap_host_compiler.clone(),\n                 &cg_clif_dylib_path,\n             );\n \n-            if host_compiler.triple != target_triple {\n+            if bootstrap_host_compiler.triple != target_triple {\n                 build_clif_sysroot_for_triple(\n                     dirs,\n                     channel,\n                     {\n-                        let mut target_compiler = host_compiler.clone();\n-                        target_compiler.triple = target_triple.to_owned();\n-                        target_compiler.set_cross_linker_and_runner();\n-                        target_compiler\n+                        let mut bootstrap_target_compiler = bootstrap_host_compiler.clone();\n+                        bootstrap_target_compiler.triple = target_triple.to_owned();\n+                        bootstrap_target_compiler.set_cross_linker_and_runner();\n+                        bootstrap_target_compiler\n                     },\n                     &cg_clif_dylib_path,\n                 );"}, {"sha": "910213be85e2cda8c1405d5f4029f3c6bba54764", "filename": "build_system/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "patch": "@@ -97,7 +97,7 @@ pub fn main() {\n         }\n     }\n \n-    let host_compiler = Compiler::llvm_with_triple(\n+    let bootstrap_host_compiler = Compiler::bootstrap_with_triple(\n         std::env::var(\"HOST_TRIPLE\")\n             .ok()\n             .or_else(|| config::get_value(\"host\"))\n@@ -106,7 +106,7 @@ pub fn main() {\n     let target_triple = std::env::var(\"TARGET_TRIPLE\")\n         .ok()\n         .or_else(|| config::get_value(\"target\"))\n-        .unwrap_or_else(|| host_compiler.triple.clone());\n+        .unwrap_or_else(|| bootstrap_host_compiler.triple.clone());\n \n     // FIXME allow changing the location of these dirs using cli arguments\n     let current_dir = std::env::current_dir().unwrap();\n@@ -137,8 +137,12 @@ pub fn main() {\n     env::set_var(\"RUSTC\", \"rustc_should_be_set_explicitly\");\n     env::set_var(\"RUSTDOC\", \"rustdoc_should_be_set_explicitly\");\n \n-    let cg_clif_dylib =\n-        build_backend::build_backend(&dirs, channel, &host_compiler, use_unstable_features);\n+    let cg_clif_dylib = build_backend::build_backend(\n+        &dirs,\n+        channel,\n+        &bootstrap_host_compiler,\n+        use_unstable_features,\n+    );\n     match command {\n         Command::Prepare => {\n             // Handled above\n@@ -149,12 +153,18 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_compiler,\n+                &bootstrap_host_compiler,\n                 &target_triple,\n             );\n \n-            if host_compiler.triple == target_triple {\n-                abi_cafe::run(channel, sysroot_kind, &dirs, &cg_clif_dylib, &host_compiler);\n+            if bootstrap_host_compiler.triple == target_triple {\n+                abi_cafe::run(\n+                    channel,\n+                    sysroot_kind,\n+                    &dirs,\n+                    &cg_clif_dylib,\n+                    &bootstrap_host_compiler,\n+                );\n             } else {\n                 eprintln!(\"[RUN] abi-cafe (skipped, cross-compilation not supported)\");\n                 return;\n@@ -166,7 +176,7 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_compiler,\n+                &bootstrap_host_compiler,\n                 &target_triple,\n             );\n         }\n@@ -176,10 +186,10 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_compiler,\n+                &bootstrap_host_compiler,\n                 &target_triple,\n             );\n-            bench::benchmark(&dirs, &host_compiler);\n+            bench::benchmark(&dirs, &bootstrap_host_compiler);\n         }\n     }\n }"}, {"sha": "e915ed2a381d5d01ecc301ecadf8bb251d5e2a01", "filename": "build_system/tests.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "patch": "@@ -3,6 +3,7 @@ use super::build_sysroot::{self, SYSROOT_SRC};\n use super::config;\n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n+use super::rustc_info::get_host_triple;\n use super::utils::{spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler};\n use super::SysrootKind;\n use std::env;\n@@ -240,22 +241,19 @@ pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib: &Path,\n-    host_compiler: &Compiler,\n+    bootstrap_host_compiler: &Compiler,\n     target_triple: &str,\n ) {\n-    let runner = TestRunner::new(\n-        dirs.clone(),\n-        target_triple.to_owned(),\n-        host_compiler.triple == target_triple,\n-    );\n+    let runner =\n+        TestRunner::new(dirs.clone(), target_triple.to_owned(), get_host_triple() == target_triple);\n \n     if config::get_bool(\"testsuite.no_sysroot\") {\n         build_sysroot::build_sysroot(\n             dirs,\n             channel,\n             SysrootKind::None,\n             cg_clif_dylib,\n-            host_compiler,\n+            bootstrap_host_compiler,\n             &target_triple,\n         );\n \n@@ -274,7 +272,7 @@ pub(crate) fn run_tests(\n             channel,\n             sysroot_kind,\n             cg_clif_dylib,\n-            host_compiler,\n+            bootstrap_host_compiler,\n             &target_triple,\n         );\n     }"}, {"sha": "07ea482fbbeaa07e4d0d5128bcc7793fade8962e", "filename": "build_system/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb7a3b9b9790d3abc62157f3f6daae9af94d841/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=bbb7a3b9b9790d3abc62157f3f6daae9af94d841", "patch": "@@ -19,7 +19,7 @@ pub(crate) struct Compiler {\n }\n \n impl Compiler {\n-    pub(crate) fn llvm_with_triple(triple: String) -> Compiler {\n+    pub(crate) fn bootstrap_with_triple(triple: String) -> Compiler {\n         Compiler {\n             cargo: get_cargo_path(),\n             rustc: get_rustc_path(),"}]}