{"sha": "7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYmQzMGIxYWUwY2U5MjkzMzAyYmJmNGJmYjgxNGYxZGM3OTExMDc=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-01-16T22:15:52Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-01-16T22:48:49Z"}, "message": "don't clone types that are copy\n\nfound via clippy", "tree": {"sha": "5499d1a8da34237b9e85748fa9fa5ed903e0e3b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5499d1a8da34237b9e85748fa9fa5ed903e0e3b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "html_url": "https://github.com/rust-lang/rust/commit/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48840618382eccb8a799320c8e5d08e3b52f4c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/48840618382eccb8a799320c8e5d08e3b52f4c42", "html_url": "https://github.com/rust-lang/rust/commit/48840618382eccb8a799320c8e5d08e3b52f4c42"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "febf4f21a67555a2b48a85cb41d79254e1fdd9b6", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -2008,7 +2008,7 @@ impl<'tcx> ObligationCause<'tcx> {\n                 TypeError::IntrinsicCast => {\n                     Error0308(\"cannot coerce intrinsics to function pointers\")\n                 }\n-                TypeError::ObjectUnsafeCoercion(did) => Error0038(did.clone()),\n+                TypeError::ObjectUnsafeCoercion(did) => Error0038(*did),\n                 _ => Error0308(\"mismatched types\"),\n             },\n         }"}, {"sha": "2866a1624de5b8686d3d326b1157f1285c34987a", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -909,18 +909,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_expr_asm(&mut self, asm: &InlineAsm) -> hir::ExprKind<'hir> {\n         let inner = hir::InlineAsmInner {\n-            inputs: asm.inputs.iter().map(|&(ref c, _)| c.clone()).collect(),\n+            inputs: asm.inputs.iter().map(|&(c, _)| c).collect(),\n             outputs: asm\n                 .outputs\n                 .iter()\n                 .map(|out| hir::InlineAsmOutput {\n-                    constraint: out.constraint.clone(),\n+                    constraint: out.constraint,\n                     is_rw: out.is_rw,\n                     is_indirect: out.is_indirect,\n                     span: out.expr.span,\n                 })\n                 .collect(),\n-            asm: asm.asm.clone(),\n+            asm: asm.asm,\n             asm_str_style: asm.asm_str_style,\n             clobbers: asm.clobbers.clone().into(),\n             volatile: asm.volatile,"}, {"sha": "9226f458165066992215559da8d395550a833f26", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -1608,7 +1608,7 @@ impl<'a> TraitDef<'a> {\n                 } else {\n                     ast::BindingMode::ByRef(mutbl)\n                 };\n-                cx.pat(path.span, PatKind::Ident(binding_mode, (*path).clone(), None))\n+                cx.pat(path.span, PatKind::Ident(binding_mode, *path, None))\n             })\n             .collect()\n     }"}, {"sha": "009ab6ac5b12f90ea37822a2ac6d7e05a546799b", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -196,7 +196,7 @@ impl AnnotateSnippetEmitterWriter {\n     ) {\n         let converter = DiagnosticConverter {\n             source_map: self.source_map.clone(),\n-            level: level.clone(),\n+            level: *level,\n             message,\n             code: code.clone(),\n             msp: msp.clone(),"}, {"sha": "87f39dedd02734331310758d29aab7753f81d091", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -236,7 +236,7 @@ fn encode_work_product_index(\n     let serialized_products: Vec<_> = work_products\n         .iter()\n         .map(|(id, work_product)| SerializedWorkProduct {\n-            id: id.clone(),\n+            id: *id,\n             work_product: work_product.clone(),\n         })\n         .collect();"}, {"sha": "42ec8787cb2878a51391110e70f0ef02b1600972", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -245,7 +245,7 @@ impl LintStore {\n \n     pub fn register_renamed(&mut self, old_name: &str, new_name: &str) {\n         let target = match self.by_name.get(new_name) {\n-            Some(&Id(lint_id)) => lint_id.clone(),\n+            Some(&Id(lint_id)) => lint_id,\n             _ => bug!(\"invalid lint renaming of {} to {}\", old_name, new_name),\n         };\n         self.by_name.insert(old_name.to_string(), Renamed(new_name.to_string(), target));"}, {"sha": "6280121f655660fab155a744edb8a5b1a6144446", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -840,7 +840,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     fn get_stability(&self, id: DefIndex) -> Option<attr::Stability> {\n         match self.is_proc_macro(id) {\n-            true => self.root.proc_macro_stability.clone(),\n+            true => self.root.proc_macro_stability,\n             false => self.root.per_def.stability.get(self, id).map(|stab| stab.decode(self)),\n         }\n     }"}, {"sha": "8ad92ce75a851645a6a690c5a0b4c8bfda8ff4fd", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -504,7 +504,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             },\n             proc_macro_data,\n             proc_macro_stability: if is_proc_macro {\n-                tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).map(|stab| stab.clone())\n+                tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).map(|stab| *stab)\n             } else {\n                 None\n             },"}, {"sha": "9d5cf3ec4bec0e8c2f962d85123fc020f6654dd8", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -200,8 +200,8 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n                 region,\n                 reserve_location: location,\n                 activation_location: TwoPhaseActivation::NotTwoPhase,\n-                borrowed_place: borrowed_place.clone(),\n-                assigned_place: assigned_place.clone(),\n+                borrowed_place: *borrowed_place,\n+                assigned_place: *assigned_place,\n             };\n             let idx = self.idx_vec.push(borrow);\n             self.location_map.insert(location, idx);"}, {"sha": "44ff493b5b4f0370f99bc1047e2af32b8521f2ea", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -65,7 +65,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n         } else if cx.body_owner_kind.is_fn_or_closure() {\n             // fetch the fully liberated fn signature (that is, all bound\n             // types/lifetimes replaced)\n-            let fn_sig = cx.tables().liberated_fn_sigs()[id].clone();\n+            let fn_sig = cx.tables().liberated_fn_sigs()[id];\n             let fn_def_id = tcx.hir().local_def_id(id);\n \n             let ty = tcx.type_of(fn_def_id);"}, {"sha": "5ec7e73f873e0f0e8247cdd630a22a34d1bda241", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 // deprecated_since and its reason.\n                 if let Some(parent_stab) = self.parent_stab {\n                     if parent_stab.rustc_depr.is_some() && stab.rustc_depr.is_none() {\n-                        stab.rustc_depr = parent_stab.rustc_depr.clone()\n+                        stab.rustc_depr = parent_stab.rustc_depr\n                     }\n                 }\n "}, {"sha": "0b18352df330764c0d37dd468494b300e8e3c1df", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -400,7 +400,7 @@ impl context::UnificationOps<ChalkArenas<'tcx>, ChalkArenas<'tcx>>\n         &mut self,\n         value: &Canonical<'tcx, InEnvironment<'tcx, Goal<'tcx>>>,\n     ) -> (Canonical<'tcx, InEnvironment<'tcx, Goal<'tcx>>>, UniverseMap) {\n-        (value.clone(), UniverseMap)\n+        (*value, UniverseMap)\n     }\n \n     fn invert_goal("}, {"sha": "084e6c8d083c5be9999ec2f02e17d1dfc1ab238b", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -175,7 +175,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ty::Infer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),\n             ty::FnPtr(sig) => {\n-                let expected_sig = ExpectedSig { cause_span: None, sig: sig.skip_binder().clone() };\n+                let expected_sig = ExpectedSig { cause_span: None, sig: *sig.skip_binder() };\n                 (Some(expected_sig), Some(ty::ClosureKind::Fn))\n             }\n             _ => (None, None),"}, {"sha": "f37f6921cebaf4f5c3a1360237be99c8a0cf4136", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         //  constraint, and add it to our list. Since we make sure to never re-add\n         //  deleted items, this process will always finish.\n         while !vid_map.is_empty() {\n-            let target = vid_map.keys().next().expect(\"Keys somehow empty\").clone();\n+            let target = *vid_map.keys().next().expect(\"Keys somehow empty\");\n             let deps = vid_map.remove(&target).expect(\"Entry somehow missing\");\n \n             for smaller in deps.smaller.iter() {"}, {"sha": "4c4d795824318aae19620a7fffb4f4b0c04a6741", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd30b1ae0ce9293302bbf4bfb814f1dc791107/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=7fbd30b1ae0ce9293302bbf4bfb814f1dc791107", "patch": "@@ -485,9 +485,7 @@ pub fn run_test(\n         }\n         StaticBenchFn(benchfn) => {\n             // Benchmarks aren't expected to panic, so we run them all in-process.\n-            crate::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n-                (benchfn.clone())(harness)\n-            });\n+            crate::bench::benchmark(desc, monitor_ch, opts.nocapture, benchfn);\n         }\n         DynTestFn(f) => {\n             match strategy {"}]}