{"sha": "48132caac241b4a278d58e1d791c6d31f7439ad6", "node_id": "C_kwDOAAsO6NoAKDQ4MTMyY2FhYzI0MWI0YTI3OGQ1OGUxZDc5MWM2ZDMxZjc0MzlhZDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-28T08:25:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-28T08:25:26Z"}, "message": "Auto merge of #94427 - cjgillot:inline-fresh-expn, r=oli-obk\n\nOnly create a single expansion for each inline integration.\n\nThe inlining integrator used to create one expansion for each span from the callee body.\nThis PR reverses the logic to create a single expansion for the whole call,\nwhich is more consistent with how macro expansions work for macros.\n\nThis should remove the large memory regression in #91743.", "tree": {"sha": "5ac49406823aa148c132f825cdaa5dc37ea04e5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac49406823aa148c132f825cdaa5dc37ea04e5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48132caac241b4a278d58e1d791c6d31f7439ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48132caac241b4a278d58e1d791c6d31f7439ad6", "html_url": "https://github.com/rust-lang/rust/commit/48132caac241b4a278d58e1d791c6d31f7439ad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48132caac241b4a278d58e1d791c6d31f7439ad6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427cf81206d3b6cf41c86c1b9ce113a33f1ce860", "url": "https://api.github.com/repos/rust-lang/rust/commits/427cf81206d3b6cf41c86c1b9ce113a33f1ce860", "html_url": "https://github.com/rust-lang/rust/commit/427cf81206d3b6cf41c86c1b9ce113a33f1ce860"}, {"sha": "e77e4fcf898ca4b2aa2041d2cbac200ed0f11b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77e4fcf898ca4b2aa2041d2cbac200ed0f11b5b", "html_url": "https://github.com/rust-lang/rust/commit/e77e4fcf898ca4b2aa2041d2cbac200ed0f11b5b"}], "stats": {"total": 999, "additions": 502, "deletions": 497}, "files": [{"sha": "52c44231d8f0e0783d288a65429539f095bca050", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -408,8 +408,8 @@ pub trait Emitter {\n                             \"this derive macro expansion\".into()\n                         }\n                         ExpnKind::Macro(MacroKind::Bang, _) => \"this macro invocation\".into(),\n-                        ExpnKind::Inlined => \"the inlined copy of this code\".into(),\n-                        ExpnKind::Root => \"in the crate root\".into(),\n+                        ExpnKind::Inlined => \"this inlined function call\".into(),\n+                        ExpnKind::Root => \"the crate root\".into(),\n                         ExpnKind::AstPass(kind) => kind.descr().into(),\n                         ExpnKind::Desugaring(kind) => {\n                             format!(\"this {} desugaring\", kind.descr()).into()"}, {"sha": "cbd7c7964d7f7d69d470d2bc734f03522aacdbbb", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::*;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n-use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n+use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n use rustc_target::spec::abi::Abi;\n \n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n@@ -543,6 +543,16 @@ impl<'tcx> Inliner<'tcx> {\n                 // Copy the arguments if needed.\n                 let args: Vec<_> = self.make_call_args(args, &callsite, caller_body, &callee_body);\n \n+                let mut expn_data = ExpnData::default(\n+                    ExpnKind::Inlined,\n+                    callsite.source_info.span,\n+                    self.tcx.sess.edition(),\n+                    None,\n+                    None,\n+                );\n+                expn_data.def_site = callee_body.span;\n+                let expn_data =\n+                    LocalExpnId::fresh(expn_data, self.tcx.create_stable_hashing_context());\n                 let mut integrator = Integrator {\n                     args: &args,\n                     new_locals: Local::new(caller_body.local_decls.len())..,\n@@ -553,8 +563,7 @@ impl<'tcx> Inliner<'tcx> {\n                     cleanup_block: cleanup,\n                     in_cleanup_block: false,\n                     tcx: self.tcx,\n-                    callsite_span: callsite.source_info.span,\n-                    body_span: callee_body.span,\n+                    expn_data,\n                     always_live_locals: BitSet::new_filled(callee_body.local_decls.len()),\n                 };\n \n@@ -787,8 +796,7 @@ struct Integrator<'a, 'tcx> {\n     cleanup_block: Option<BasicBlock>,\n     in_cleanup_block: bool,\n     tcx: TyCtxt<'tcx>,\n-    callsite_span: Span,\n-    body_span: Span,\n+    expn_data: LocalExpnId,\n     always_live_locals: BitSet<Local>,\n }\n \n@@ -835,12 +843,8 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n     }\n \n     fn visit_span(&mut self, span: &mut Span) {\n-        let mut expn_data =\n-            ExpnData::default(ExpnKind::Inlined, *span, self.tcx.sess.edition(), None, None);\n-        expn_data.def_site = self.body_span;\n         // Make sure that all spans track the fact that they were inlined.\n-        *span =\n-            self.callsite_span.fresh_expansion(expn_data, self.tcx.create_stable_hashing_context());\n+        *span = span.fresh_expansion(self.expn_data);\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {"}, {"sha": "5fae46d5fd89b52fa313df0209012bbbc9840175", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -874,19 +874,13 @@ impl Span {\n     /// other compiler-generated code to set per-span properties like allowed unstable features.\n     /// The returned span belongs to the created expansion and has the new properties,\n     /// but its location is inherited from the current span.\n-    pub fn fresh_expansion(self, expn_data: ExpnData, ctx: impl HashStableContext) -> Span {\n-        self.fresh_expansion_with_transparency(expn_data, Transparency::Transparent, ctx)\n-    }\n-\n-    pub fn fresh_expansion_with_transparency(\n-        self,\n-        expn_data: ExpnData,\n-        transparency: Transparency,\n-        ctx: impl HashStableContext,\n-    ) -> Span {\n-        let expn_id = LocalExpnId::fresh(expn_data, ctx).to_expn_id();\n+    pub fn fresh_expansion(self, expn_id: LocalExpnId) -> Span {\n         HygieneData::with(|data| {\n-            self.with_ctxt(data.apply_mark(SyntaxContext::root(), expn_id, transparency))\n+            self.with_ctxt(data.apply_mark(\n+                SyntaxContext::root(),\n+                expn_id.to_expn_id(),\n+                Transparency::Transparent,\n+            ))\n         })\n     }\n \n@@ -903,7 +897,8 @@ impl Span {\n             allow_internal_unstable,\n             ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None, None)\n         };\n-        self.fresh_expansion(expn_data, ctx)\n+        let expn_id = LocalExpnId::fresh(expn_data, ctx);\n+        self.fresh_expansion(expn_id)\n     }\n }\n "}, {"sha": "c1dd5894947cae68c1b074c98842545cc2170474", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -4,8 +4,9 @@ use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n+use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n-use rustc_span::{hygiene::AstPass, ExpnData, ExpnKind, FileName, InnerSpan, DUMMY_SP};\n+use rustc_span::{FileName, InnerSpan, DUMMY_SP};\n \n use crate::clean;\n use crate::core::DocContext;\n@@ -46,7 +47,8 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             None,\n             None,\n         );\n-        let span = DUMMY_SP.fresh_expansion(expn_data, self.cx.tcx.create_stable_hashing_context());\n+        let expn_id = LocalExpnId::fresh(expn_data, self.cx.tcx.create_stable_hashing_context());\n+        let span = DUMMY_SP.fresh_expansion(expn_id);\n \n         let is_empty = rustc_driver::catch_fatal_errors(|| {\n             parse_stream_from_source_str("}, {"sha": "372b14eb7c92ac2df2677f06172d80aebb305fd6", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -11,8 +11,8 @@\n       let mut _6: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n       let mut _7: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n       scope 1 (inlined core::str::<impl str>::as_bytes) { // at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          debug self => _3;                // in scope 1 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          let mut _8: &str;                // in scope 1 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          debug self => _3;                // in scope 1 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n+          let mut _8: &str;                // in scope 1 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n           scope 2 {\n           }\n       }\n@@ -21,12 +21,12 @@\n           StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n           StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n           _3 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          StorageLive(_8);                 // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          _8 = _3;                         // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n--         _2 = transmute::<&str, &[u8]>(move _8) -> bb14; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-+         _2 = transmute::<&str, &[u8]>(move _8) -> bb12; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n+          _8 = _3;                         // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n+-         _2 = transmute::<&str, &[u8]>(move _8) -> bb14; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n++         _2 = transmute::<&str, &[u8]>(move _8) -> bb12; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $DIR/deduplicate_blocks.rs:3:11: 3:23\n+                                           // + span: $SRC_DIR/core/src/str/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {transmute::<&str, &[u8]>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n@@ -97,7 +97,7 @@\n   \n -     bb14: {\n +     bb12: {\n-          StorageDead(_8);                 // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:22: 3:23\n           _6 = Len((*_2));                 // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n           _7 = Ge(move _6, const 4_usize); // scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37"}, {"sha": "c6c4d6dcc0fb6c056badfc10b77c7f96bba8704b", "filename": "src/test/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -19,7 +19,7 @@\n -                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n +                 debug z => _4;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n                   scope 4 (inlined std::mem::drop::<i32>) { // at $DIR/cycle.rs:14:5: 14:12\n-                      debug _x => _6;      // in scope 4 at $DIR/cycle.rs:14:5: 14:12\n+                      debug _x => _6;      // in scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n                   }\n               }\n           }"}, {"sha": "ab60a7fc62f21c2a0bb7c339c75418ae574fce60", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -12,7 +12,7 @@\n           scope 2 {\n           }\n           scope 3 (inlined std::mem::drop::<u32>) { // at $DIR/union.rs:15:5: 15:27\n-              debug _x => _4;              // in scope 3 at $DIR/union.rs:15:5: 15:27\n+              debug _x => _4;              // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           }\n       }\n   "}, {"sha": "b2745a17e97172975b5f18ceac801b0f62893295", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -9,10 +9,10 @@ fn bar() -> bool {\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:11:9: 11:10\n         scope 2 (inlined foo) {          // at $DIR/inline-any-operand.rs:12:5: 12:13\n-            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n-            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n-            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n-            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+            debug x => _3;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n+            debug y => _4;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n+            let mut _5: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+            let mut _6: i32;             // in scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n         }\n     }\n \n@@ -28,13 +28,13 @@ fn bar() -> bool {\n         _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageLive(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n-        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+        _5 = _3;                         // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:6\n+        StorageLive(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        _6 = _4;                         // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        _0 = Eq(move _5, move _6);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n+        StorageDead(_6);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n+        StorageDead(_5);                 // scope 2 at $DIR/inline-any-operand.rs:17:10: 17:11\n         StorageDead(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageDead(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13"}, {"sha": "93a63c84783915312b0f14afcb29e7faae19dbc1", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -14,8 +14,8 @@ fn foo(_1: T, _2: i32) -> i32 {\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure.rs:11:9: 11:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure.rs:12:5: 12:12\n-            debug _t => _8;              // in scope 2 at $DIR/inline-closure.rs:12:5: 12:12\n-            debug _q => _9;              // in scope 2 at $DIR/inline-closure.rs:12:5: 12:12\n+            debug _t => _8;              // in scope 2 at $DIR/inline-closure.rs:11:14: 11:16\n+            debug _q => _9;              // in scope 2 at $DIR/inline-closure.rs:11:18: 11:20\n         }\n     }\n \n@@ -34,7 +34,7 @@ fn foo(_1: T, _2: i32) -> i32 {\n         _8 = move (_5.0: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         _9 = move (_5.1: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n-        _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:12:5: 12:12\n+        _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:11:22: 11:24\n         StorageDead(_9);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageDead(_8);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12"}, {"sha": "3436370253ffb6e97bc5a072afcd1d8b05793707", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -14,11 +14,11 @@ fn foo(_1: T, _2: &i32) -> i32 {\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-            let _10: &i32;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:14: 12:15\n+            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:23: 12:25\n+            let _10: &i32;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n             scope 3 {\n-                debug variable => _10;   // in scope 3 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+                debug variable => _10;   // in scope 3 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n             }\n         }\n     }\n@@ -38,10 +38,10 @@ fn foo(_1: T, _2: &i32) -> i32 {\n         _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _10 = _8;                        // scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _0 = (*_10);                     // scope 3 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageDead(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageLive(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+        _10 = _8;                        // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:24: 13:27\n+        _0 = (*_10);                     // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n+        StorageDead(_10);                // scope 2 at $DIR/inline-closure-borrows-arg.rs:15:5: 15:6\n         StorageDead(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageDead(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12"}, {"sha": "cb382859d51303fcc2acae13dc19443d24c71456", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -14,11 +14,11 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure-captures.rs:11:9: 11:10\n         scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            debug _q => _9;              // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            let mut _10: i32;            // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-            let mut _11: T;              // in scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+            debug _q => _9;              // in scope 2 at $DIR/inline-closure-captures.rs:11:14: 11:16\n+            debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:10:23: 10:24\n+            debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:10:17: 10:18\n+            let mut _10: i32;            // in scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n+            let mut _11: T;              // in scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n         }\n     }\n \n@@ -40,14 +40,14 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         _9 = move (_7.0: i32);           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        _10 = (*((*_6).0: &i32));        // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        _11 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        (_0.0: i32) = move _10;          // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        (_0.1: T) = move _11;            // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageDead(_11);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n-        StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n+        _10 = (*((*_6).0: &i32));        // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n+        StorageLive(_11);                // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        _11 = (*((*_6).1: &T));          // scope 2 at $DIR/inline-closure-captures.rs:11:22: 11:23\n+        (_0.0: i32) = move _10;          // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n+        (_0.1: T) = move _11;            // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n+        StorageDead(_11);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n         StorageDead(_9);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageDead(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9"}, {"sha": "b6615739a2150f0ea9b9948364451c1df699af11", "filename": "src/test/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -10,11 +10,11 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24\n-+         _1 = <A<C> as Call>::call() -> bb1; // scope 1 at $DIR/inline-cycle.rs:14:5: 14:24\n++         _1 = <A<C> as Call>::call() -> bb1; // scope 1 at $DIR/inline-cycle.rs:43:9: 43:23\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle.rs:14:5: 14:22\n -                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $DIR/inline-cycle.rs:14:5: 14:24\n++                                          // + span: $DIR/inline-cycle.rs:43:9: 43:21\n +                                          // + literal: Const { ty: fn() {<A<C> as Call>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   "}, {"sha": "4e46156200443f4ca987f4465b466647f52fcc1b", "filename": "src/test/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -5,12 +5,12 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:48:10: 48:10\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n +     let mut _2: fn() {f};                // in scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n-+     let mut _5: ();                      // in scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n++     let mut _5: ();                      // in scope 0 at $DIR/inline-cycle.rs:54:5: 54:8\n +     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline-cycle.rs:49:5: 49:12\n-+         debug f => _2;                   // in scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline-cycle.rs:49:5: 49:12\n++         debug f => _2;                   // in scope 1 at $DIR/inline-cycle.rs:53:22: 53:23\n++         let _3: ();                      // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         let mut _4: fn() {f};            // in scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n++         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline-cycle.rs:54:5: 54:8\n +         }\n +     }\n   \n@@ -25,18 +25,18 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-cycle.rs:49:10: 49:11\n                                            // + literal: Const { ty: fn() {f}, val: Value(Scalar(<ZST>)) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         _5 = const ();                   // scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         _3 = move _4() -> bb1;           // scope 2 at $DIR/inline-cycle.rs:49:5: 49:12\n++         StorageLive(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         StorageLive(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n++         _4 = move _2;                    // scope 1 at $DIR/inline-cycle.rs:54:5: 54:6\n++         StorageLive(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         _5 = const ();                   // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         _3 = move _4() -> bb1;           // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n-+         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:49:5: 49:12\n++         StorageDead(_5);                 // scope 1 at $DIR/inline-cycle.rs:54:5: 54:8\n++         StorageDead(_4);                 // scope 1 at $DIR/inline-cycle.rs:54:7: 54:8\n++         StorageDead(_3);                 // scope 1 at $DIR/inline-cycle.rs:54:8: 54:9\n +         StorageDead(_2);                 // scope 0 at $DIR/inline-cycle.rs:49:5: 49:12\n           StorageDead(_1);                 // scope 0 at $DIR/inline-cycle.rs:49:12: 49:13\n           _0 = const ();                   // scope 0 at $DIR/inline-cycle.rs:48:10: 50:2"}, {"sha": "fddf7e6e1f0a7a3119972a5a9cce8929cbd1658c", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -5,18 +5,18 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle-generic.rs:8:11: 8:11\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline-cycle-generic.rs:9:5: 9:24\n++         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline-cycle-generic.rs:38:9: 38:31\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n++         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline-cycle-generic.rs:31:9: 31:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n -                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:24\n++                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26\n +                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   "}, {"sha": "5c42c7d2a579d50dc3e9cd65dfc87a4dc0daab83", "filename": "src/test/mir-opt/inline/inline_diverging.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.f.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -20,7 +20,7 @@\n +     }\n + \n +     bb1: {\n-+         goto -> bb1;                     // scope 1 at $DIR/inline-diverging.rs:8:5: 8:12\n++         goto -> bb1;                     // scope 1 at $DIR/inline-diverging.rs:39:5: 39:12\n       }\n   }\n   "}, {"sha": "3b9d5e727b8a333abc74437b0e5e4c2cc35e2557", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -35,14 +35,14 @@\n           StorageLive(_6);                 // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n -         panic();                         // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-diverging.rs:16:9: 16:16\n-+         begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $DIR/inline-diverging.rs:16:9: 16:16\n++         begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:16:9: 16:14\n -                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $DIR/inline-diverging.rs:16:9: 16:16\n++                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n +                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n +                                          // mir::Constant\n-+                                          // + span: $DIR/inline-diverging.rs:16:9: 16:16\n++                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n +                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n       }\n   }"}, {"sha": "bea33073366f733e63a08450723fee0fdb890890", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -5,28 +5,28 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:21:12: 21:12\n       let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n +     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _9: ();                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _10: ();                     // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n++     let mut _9: ();                      // in scope 0 at $DIR/inline-diverging.rs:27:13: 27:16\n++     let mut _10: ();                     // in scope 0 at $DIR/inline-diverging.rs:28:13: 28:16\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline-diverging.rs:22:5: 22:22\n-+         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         let mut _7: !;                   // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         let mut _8: !;                   // in scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n++         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37\n++         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n++         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n++         let mut _7: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n++         let mut _8: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n +         scope 2 {\n-+             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:22:5: 22:22\n-+             let _5: !;                   // in scope 2 at $DIR/inline-diverging.rs:22:5: 22:22\n++             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10\n++             let _5: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n +             scope 3 {\n-+                 debug b => _5;           // in scope 3 at $DIR/inline-diverging.rs:22:5: 22:22\n++                 debug b => _5;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n +             }\n-+             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:22:5: 22:22\n-+                 scope 7 (inlined sleep) { // at $DIR/inline-diverging.rs:22:5: 22:22\n++             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:28:13: 28:16\n++                 scope 7 (inlined sleep) { // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +                 }\n +             }\n +         }\n-+         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:22:5: 22:22\n-+             scope 5 (inlined sleep) {    // at $DIR/inline-diverging.rs:22:5: 22:22\n++         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:27:13: 27:16\n++             scope 5 (inlined sleep) {    // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +             }\n +         }\n +     }\n@@ -42,19 +42,19 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         StorageLive(_9);                 // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         _9 = const ();                   // scope 1 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:22:5: 22:22\n++         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n++         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         StorageLive(_9);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         _9 = const ();                   // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n       }\n   \n       bb1: {\n -         StorageDead(_1);                 // scope 0 at $DIR/inline-diverging.rs:22:22: 22:23\n -         _0 = const ();                   // scope 0 at $DIR/inline-diverging.rs:21:12: 23:2\n -         return;                          // scope 0 at $DIR/inline-diverging.rs:23:2: 23:2\n-+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:22:5: 22:22\n++         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n       }\n   }\n   "}, {"sha": "1d72b34f83b815809d3b00f83e2d696ff2abe4d6", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -14,22 +14,22 @@\n +     scope 2 (inlined g) {                // at $DIR/inline-generator.rs:9:28: 9:31\n +     }\n +     scope 3 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new) { // at $DIR/inline-generator.rs:9:14: 9:32\n-+         debug pointer => _3;             // in scope 3 at $DIR/inline-generator.rs:9:14: 9:32\n-+         let mut _5: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 3 at $DIR/inline-generator.rs:9:14: 9:32\n++         debug pointer => _3;             // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         let mut _5: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         scope 4 {\n-+             scope 5 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new_unchecked) { // at $DIR/inline-generator.rs:9:14: 9:32\n-+                 debug pointer => _5;     // in scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n-+                 let mut _6: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n++             scope 5 (inlined Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new_unchecked) { // at $SRC_DIR/core/src/pin.rs:LL:COL\n++                 debug pointer => _5;     // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++                 let mut _6: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +             }\n +         }\n +     }\n +     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline-generator.rs:9:14: 9:46\n-+         debug a => _11;                  // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         let mut _8: i32;                 // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         debug a => _11;                  // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n++         let mut _8: i32;                 // in scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n++         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n++         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:15:9: 15:9\n++         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n++         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +     }\n   \n       bb0: {\n@@ -44,7 +44,7 @@\n -     }\n - \n -     bb1: {\n-+         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:9:28: 9:31\n++         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n           _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n -         _2 = Pin::<&mut impl Generator<bool>>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n -                                          // mir::Constant\n@@ -54,13 +54,13 @@\n -     }\n - \n -     bb2: {\n-+         StorageLive(_5);                 // scope 4 at $DIR/inline-generator.rs:9:14: 9:32\n-+         _5 = move _3;                    // scope 4 at $DIR/inline-generator.rs:9:14: 9:32\n-+         StorageLive(_6);                 // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n-+         _6 = move _5;                    // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n-+         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]) = move _6; // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n-+         StorageDead(_6);                 // scope 5 at $DIR/inline-generator.rs:9:14: 9:32\n-+         StorageDead(_5);                 // scope 4 at $DIR/inline-generator.rs:9:14: 9:32\n++         StorageLive(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         _5 = move _3;                    // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         _6 = move _5;                    // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]) = move _6; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/inline-generator.rs:9:31: 9:32\n -         _1 = <impl Generator<bool> as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n -                                          // mir::Constant\n@@ -71,8 +71,8 @@\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_12);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n-+         _12 = discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))); // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         _12 = discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))); // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n       }\n   \n -     bb3: {\n@@ -94,47 +94,47 @@\n +     }\n + \n +     bb3: {\n-+         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n++         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n++         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n++         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n +     }\n + \n +     bb4: {\n-+         _8 = const 7_i32;                // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         _8 = const 7_i32;                // scope 6 at $DIR/inline-generator.rs:15:24: 15:25\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n +     }\n + \n +     bb5: {\n-+         _8 = const 13_i32;               // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         _8 = const 13_i32;               // scope 6 at $DIR/inline-generator.rs:15:35: 15:37\n++         goto -> bb6;                     // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n +     }\n + \n +     bb6: {\n-+         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))) = 3; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageDead(_9);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n++         ((_1 as Yielded).0: i32) = move _8; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         discriminant(_1) = 0;            // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n++         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))) = 3; // scope 6 at $DIR/inline-generator.rs:15:11: 15:39\n +         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:11: 15:39\n +     }\n + \n +     bb7: {\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n-+         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))) = 1; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n++         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         discriminant((*(_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]))) = 1; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n +         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:41: 15:41\n +     }\n + \n +     bb8: {\n-+         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +     }\n + \n +     bb9: {\n-+         unreachable;                     // scope 6 at $DIR/inline-generator.rs:9:14: 9:46\n++         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n       }\n   }\n   "}, {"sha": "5903cdd9489e5e4ef7ea613cfe6660154b673337", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -34,18 +34,18 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb2: {\n-+                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n++                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_7).1: usize) = const 0_usize; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43"}, {"sha": "0f83b0c4a27ad2b3ccd83f63d831f50f3dc3890a", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -34,18 +34,18 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb2: {\n-+                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n++                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_7).1: usize) = const 0_usize; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43"}, {"sha": "9fd08f141dc762ce30db306d385b9aa37b912013", "filename": "src/test/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -5,9 +5,9 @@ fn main() -> () {\n     let _1: ();                          // in scope 0 at $DIR/inline-options.rs:9:5: 9:18\n     let _2: ();                          // in scope 0 at $DIR/inline-options.rs:10:5: 10:21\n     scope 1 (inlined inlined::<u32>) {   // at $DIR/inline-options.rs:10:5: 10:21\n-        let _3: ();                      // in scope 1 at $DIR/inline-options.rs:10:5: 10:21\n-        let _4: ();                      // in scope 1 at $DIR/inline-options.rs:10:5: 10:21\n-        let _5: ();                      // in scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        let _3: ();                      // in scope 1 at $DIR/inline-options.rs:16:23: 16:26\n+        let _4: ();                      // in scope 1 at $DIR/inline-options.rs:16:28: 16:31\n+        let _5: ();                      // in scope 1 at $DIR/inline-options.rs:16:33: 16:36\n     }\n \n     bb0: {\n@@ -21,33 +21,33 @@ fn main() -> () {\n     bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/inline-options.rs:9:18: 9:19\n         StorageLive(_2);                 // scope 0 at $DIR/inline-options.rs:10:5: 10:21\n-        StorageLive(_3);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n-        _3 = g() -> bb2;                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageLive(_3);                 // scope 1 at $DIR/inline-options.rs:16:23: 16:26\n+        _3 = g() -> bb2;                 // scope 1 at $DIR/inline-options.rs:16:23: 16:26\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-options.rs:10:5: 10:21\n+                                         // + span: $DIR/inline-options.rs:16:23: 16:24\n                                          // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n-        _4 = g() -> bb3;                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageDead(_3);                 // scope 1 at $DIR/inline-options.rs:16:26: 16:27\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-options.rs:16:28: 16:31\n+        _4 = g() -> bb3;                 // scope 1 at $DIR/inline-options.rs:16:28: 16:31\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-options.rs:10:5: 10:21\n+                                         // + span: $DIR/inline-options.rs:16:28: 16:29\n                                          // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n-        StorageLive(_5);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n-        _5 = g() -> bb4;                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-options.rs:16:31: 16:32\n+        StorageLive(_5);                 // scope 1 at $DIR/inline-options.rs:16:33: 16:36\n+        _5 = g() -> bb4;                 // scope 1 at $DIR/inline-options.rs:16:33: 16:36\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-options.rs:10:5: 10:21\n+                                         // + span: $DIR/inline-options.rs:16:33: 16:34\n                                          // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // scope 1 at $DIR/inline-options.rs:10:5: 10:21\n+        StorageDead(_5);                 // scope 1 at $DIR/inline-options.rs:16:36: 16:37\n         StorageDead(_2);                 // scope 0 at $DIR/inline-options.rs:10:21: 10:22\n         _0 = const ();                   // scope 0 at $DIR/inline-options.rs:8:11: 11:2\n         return;                          // scope 0 at $DIR/inline-options.rs:11:2: 11:2"}, {"sha": "1aa859484f6f963a8321a35f97d250982df4470d", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -15,10 +15,10 @@ fn bar() -> bool {\n         let mut _9: &i32;                // in scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         let mut _10: &i32;               // in scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         scope 2 (inlined foo) {          // at $DIR/inline-retag.rs:12:5: 12:15\n-            debug x => _3;               // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-            debug y => _6;               // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-            let mut _11: i32;            // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-            let mut _12: i32;            // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+            debug x => _3;               // in scope 2 at $DIR/inline-retag.rs:16:8: 16:9\n+            debug y => _6;               // in scope 2 at $DIR/inline-retag.rs:16:17: 16:18\n+            let mut _11: i32;            // in scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+            let mut _12: i32;            // in scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n         }\n     }\n \n@@ -52,15 +52,15 @@ fn bar() -> bool {\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _6 = &(*_7);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_6);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-        Retag(_3);                       // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-        Retag(_6);                       // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-        StorageLive(_11);                // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-        _11 = (*_3);                     // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-        StorageLive(_12);                // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-        _12 = (*_6);                     // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-        _0 = Eq(move _11, move _12);     // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-        StorageDead(_12);                // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n-        StorageDead(_11);                // scope 2 at $DIR/inline-retag.rs:12:5: 12:15\n+        Retag(_3);                       // scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n+        Retag(_6);                       // scope 2 at $DIR/inline-retag.rs:16:1: 18:2\n+        StorageLive(_11);                // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+        _11 = (*_3);                     // scope 2 at $DIR/inline-retag.rs:17:5: 17:7\n+        StorageLive(_12);                // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+        _12 = (*_6);                     // scope 2 at $DIR/inline-retag.rs:17:11: 17:13\n+        _0 = Eq(move _11, move _12);     // scope 2 at $DIR/inline-retag.rs:17:5: 17:13\n+        StorageDead(_12);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n+        StorageDead(_11);                // scope 2 at $DIR/inline-retag.rs:17:12: 17:13\n         StorageDead(_6);                 // scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n         StorageDead(_3);                 // scope 1 at $DIR/inline-retag.rs:12:14: 12:15\n         StorageDead(_2);                 // scope 1 at $DIR/inline-retag.rs:12:14: 12:15"}, {"sha": "a7e0a52f7438e6218f1c7196e19dad5c93a0bc04", "filename": "src/test/mir-opt/inline/inline_shims.clone.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -18,7 +18,7 @@\n -     }\n - \n -     bb1: {\n-+         _0 = (*_2);                      // scope 1 at $DIR/inline-shims.rs:6:5: 6:14\n++         _0 = (*_2);                      // scope 1 at $SRC_DIR/core/src/clone.rs:LL:COL\n           StorageDead(_2);                 // scope 0 at $DIR/inline-shims.rs:6:13: 6:14\n           return;                          // scope 0 at $DIR/inline-shims.rs:7:2: 7:2\n       }"}, {"sha": "b6d5f51c173065da62c21250b6016733cf4c4ae6", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -12,8 +12,8 @@\n       }\n       scope 2 {\n +         scope 3 (inlined std::ptr::drop_in_place::<Option<B>> - shim(Some(Option<B>))) { // at $DIR/inline-shims.rs:12:14: 12:40\n-+             let mut _6: isize;           // in scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n-+             let mut _7: isize;           // in scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n++             let mut _6: isize;           // in scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++             let mut _7: isize;           // in scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n +         }\n       }\n   \n@@ -38,8 +38,8 @@\n -                                          // + literal: Const { ty: unsafe fn(*mut Option<B>) {std::ptr::drop_in_place::<Option<B>>}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_6);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n +         StorageLive(_7);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n-+         _6 = discriminant((*_5));        // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n-+         switchInt(move _6) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n++         _6 = discriminant((*_5));        // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n++         switchInt(move _6) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n       }\n   \n       bb2: {\n@@ -50,7 +50,7 @@\n +     }\n + \n +     bb3: {\n-+         drop((((*_5) as Some).0: B)) -> bb2; // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n++         drop((((*_5) as Some).0: B)) -> bb2; // scope 3 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n       }\n   }\n   "}, {"sha": "97ff6f75f24bda44e544d9e4667ef89e0c765a2b", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -19,7 +19,7 @@\n -     }\n - \n -     bb1: {\n-+         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:5:13: 5:38\n++         _1 = const 123_u32;              // scope 2 at $DIR/inline-specialization.rs:14:31: 14:34\n           _0 = const ();                   // scope 0 at $DIR/inline-specialization.rs:4:11: 6:2\n           StorageDead(_1);                 // scope 0 at $DIR/inline-specialization.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/inline-specialization.rs:6:2: 6:2"}, {"sha": "9d8818e657ebd6910838e9a6b760fcbacec57676", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -6,8 +6,8 @@ fn test2(_1: &dyn X) -> bool {\n     let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n     let mut _3: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n     scope 1 (inlined test) {             // at $DIR/inline-trait-method_2.rs:5:5: 5:12\n-        debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n-        let mut _4: &dyn X;              // in scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n+        debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:9:9: 9:10\n+        let mut _4: &dyn X;              // in scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n     }\n \n     bb0: {\n@@ -16,16 +16,16 @@ fn test2(_1: &dyn X) -> bool {\n         _3 = &(*_1);                     // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n-        StorageLive(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n-        _4 = _2;                         // scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n-        _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+        _4 = _2;                         // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n+        _0 = <dyn X as X>::y(move _4) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n                                          // mir::Constant\n-                                         // + span: $DIR/inline-trait-method_2.rs:5:5: 5:12\n+                                         // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-trait-method_2.rs:10:9: 10:10\n         StorageDead(_2);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:11: 5:12\n         return;                          // scope 0 at $DIR/inline-trait-method_2.rs:6:2: 6:2\n     }"}, {"sha": "e9c02cf2c67674e90163770ed2ddb1ccb74fa72b", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -7,19 +7,19 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     let mut _3: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     let mut _4: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        debug self => _4;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        let mut _5: &mut [T];            // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        debug self => _4;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        let mut _5: &mut [T];            // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        StorageLive(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        _5 = &mut (*_4);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        _3 = &mut (*_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        StorageDead(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        _5 = &mut (*_4);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:14: 3:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15"}, {"sha": "9264d41554ae3177af0c687bf7321fd16897c102", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -7,23 +7,23 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     let mut _3: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        debug self => _4;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        let mut _5: &mut T;              // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        let mut _6: &mut T;              // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _5: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        let mut _6: &mut T;              // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        StorageLive(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        StorageLive(_6);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        _6 = &mut (*(*_4));              // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        _5 = &mut (*_6);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        _3 = &mut (*_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        StorageDead(_6);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        StorageDead(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        StorageLive(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageLive(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _6 = &mut (*(*_4));              // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _5 = &mut (*_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        _3 = &mut (*_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_6);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+        StorageDead(_5);                 // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:14: 8:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15"}, {"sha": "23f33daaa57f2b9d5bd59088f07518d4207c4033", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -6,14 +6,14 @@ fn c(_1: &[T]) -> &[T] {\n     let _2: &[T];                        // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n     let mut _3: &[T];                    // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n     scope 1 (inlined <[T] as AsRef<[T]>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n-        debug self => _3;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n+        debug self => _3;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n-        _2 = _3;                         // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n+        _2 = _3;                         // scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:14: 13:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:14:1: 14:2"}, {"sha": "422bf748d9ffe751b534b2be55890fd07a6d8f71", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -6,14 +6,14 @@ fn d(_1: &Box<T>) -> &T {\n     let _2: &T;                          // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-        debug self => _3;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n+        debug self => _3;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-        _2 = &(*(*_3));                  // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n+        _2 = &(*(*_3));                  // scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:14: 18:15\n         StorageDead(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:19:1: 19:2"}, {"sha": "42704b06883949cf6eefe788a6b92bb91805dee9", "filename": "src/test/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -10,10 +10,10 @@ fn main() -> () {\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:5:9: 5:10\n         scope 2 (inlined main::{closure#0}) { // at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-            debug x => _5;               // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-            let _6: ();                  // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+            debug x => _5;               // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:14: 5:15\n+            let _6: ();                  // in scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n             scope 3 {\n-                debug y => _6;           // in scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+                debug y => _6;           // in scope 3 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n             }\n         }\n     }\n@@ -27,8 +27,8 @@ fn main() -> () {\n         (_3.0: ()) = move _4;            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageLive(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         _5 = move (_3.0: ());            // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-        StorageLive(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n-        StorageDead(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n+        StorageLive(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:23: 5:24\n+        StorageDead(_6);                 // scope 2 at $DIR/issue-76997-inline-scopes-parenting.rs:5:32: 5:33\n         StorageDead(_5);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:5: 6:10\n         StorageDead(_4);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:9: 6:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue-76997-inline-scopes-parenting.rs:6:9: 6:10"}, {"sha": "9e92f025b76618c9b5080025b9e7fada8ad75272", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -29,7 +29,7 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n -                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n-+         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $DIR/issue-78442.rs:11:5: 11:17\n++         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb2: {"}, {"sha": "e2051c85af215a32d654c1430252f7da367f6f62", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -7,23 +7,23 @@ fn num_to_digit(_1: char) -> u32 {\n     let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n     let mut _4: char;                    // in scope 0 at $DIR/issue-59352.rs:14:26: 14:29\n     let mut _5: u32;                     // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-    let mut _11: isize;                  // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n+    let mut _11: isize;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue-59352.rs:14:8: 14:23\n-        debug self => _2;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        debug radix => _5;               // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        let mut _6: &std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        let _7: std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        let mut _8: char;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        scope 2 (inlined Option::<u32>::is_some) { // at $DIR/issue-59352.rs:14:8: 14:23\n-            debug self => _6;            // in scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n-            let mut _9: isize;           // in scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n+        debug self => _2;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        debug radix => _5;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        let mut _6: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        let _7: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        let mut _8: char;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        scope 2 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+            debug self => _6;            // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+            let mut _9: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n     scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue-59352.rs:14:26: 14:50\n-        debug self => _3;                // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n-        let mut _10: isize;              // in scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        debug self => _3;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _10: isize;              // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         scope 4 {\n-            debug val => _0;             // in scope 4 at $DIR/issue-59352.rs:14:26: 14:50\n+            debug val => _0;             // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n \n@@ -32,13 +32,13 @@ fn num_to_digit(_1: char) -> u32 {\n         _2 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:8: 14:11\n         StorageLive(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         _5 = const 8_u32;                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageLive(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageLive(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageLive(_8);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        _8 = _2;                         // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _8 = _2;                         // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-59352.rs:14:8: 14:23\n+                                         // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n \n@@ -56,8 +56,8 @@ fn num_to_digit(_1: char) -> u32 {\n     bb2: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:14:40: 14:41\n         StorageLive(_10);                // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n-        _10 = discriminant(_3);          // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n-        switchInt(move _10) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        _10 = discriminant(_3);          // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _10) -> [0_isize: bb6, 1_isize: bb8, otherwise: bb7]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb3: {\n@@ -71,36 +71,36 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb5: {\n-        _6 = &_7;                        // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageDead(_8);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageLive(_9);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        _9 = discriminant((*_6));        // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageLive(_11);                // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n-        _11 = move _9;                   // scope 2 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageDead(_9);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageDead(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n-        StorageDead(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n+        _6 = &_7;                        // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageDead(_8);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageLive(_9);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _9 = discriminant((*_6));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageLive(_11);                // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        _11 = move _9;                   // scope 2 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+        StorageDead(_9);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageDead(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n         StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:14:22: 14:23\n         switchInt(move _11) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/issue-59352.rs:14:8: 14:23\n     }\n \n     bb6: {\n-        core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-59352.rs:14:26: 14:50\n+                                         // + span: $SRC_DIR/core/src/option.rs:LL:COL\n                                          // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-59352.rs:14:26: 14:50\n+                                         // + span: $SRC_DIR/core/src/option.rs:LL:COL\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 }) }\n     }\n \n     bb7: {\n-        unreachable;                     // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        unreachable;                     // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb8: {\n-        _0 = move ((_3 as Some).0: u32); // scope 3 at $DIR/issue-59352.rs:14:26: 14:50\n+        _0 = move ((_3 as Some).0: u32); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageDead(_10);                // scope 0 at $DIR/issue-59352.rs:14:26: 14:50\n         StorageDead(_3);                 // scope 0 at $DIR/issue-59352.rs:14:49: 14:50\n         goto -> bb4;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63"}, {"sha": "7750624db30fbf07ef638c42c2c7d20ec1343592", "filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -4,28 +4,28 @@ fn f_u64() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:39:16: 39:16\n     let mut _1: u64;                     // in scope 0 at $DIR/lower_intrinsics.rs:40:5: 40:21\n     scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:44:22: 44:23\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n+        let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n+        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n         }\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:40:5: 40:21\n         _1 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n+        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n+        _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n+        _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n                                          // mir::Constant\n-                                         // + span: $DIR/lower_intrinsics.rs:40:5: 40:21\n+                                         // + span: $DIR/lower_intrinsics.rs:48:9: 48:18\n                                          // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:48:20: 48:21\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:48:21: 48:22\n         StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:40:5: 40:21\n         return;                          // scope 0 at $DIR/lower_intrinsics.rs:41:2: 41:2\n     }"}, {"sha": "4d4e65d31141602e4c5c3e52eb4832bbdc14a440", "filename": "src/test/mir-opt/lower_intrinsics.f_unit.PreCodegen.before.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -4,23 +4,23 @@ fn f_unit() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:33:17: 33:17\n     let mut _1: ();                      // in scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:18\n     scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics.rs:34:5: 34:19\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n-        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:34:5: 34:19\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:44:22: 44:23\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n+        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n         }\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:18\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n-        _2 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n+        _2 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n                                          // mir::Constant\n-                                         // + span: $DIR/lower_intrinsics.rs:34:5: 34:19\n+                                         // + span: $DIR/lower_intrinsics.rs:46:9: 46:14\n                                          // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:17: 46:18\n         StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:34:18: 34:19\n         return;                          // scope 0 at $DIR/lower_intrinsics.rs:35:2: 35:2\n     }"}, {"sha": "312031b7a0ff42725614ade95f8243531fc206b8", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -24,12 +24,12 @@\n                   debug i => _12;          // in scope 3 at $DIR/remove_storage_markers.rs:8:9: 8:10\n               }\n               scope 5 (inlined iter::range::<impl Iterator for std::ops::Range<i32>>::next) { // at $DIR/remove_storage_markers.rs:8:14: 8:19\n-                  debug self => _8;        // in scope 5 at $DIR/remove_storage_markers.rs:8:14: 8:19\n-                  let mut _14: &mut std::ops::Range<i32>; // in scope 5 at $DIR/remove_storage_markers.rs:8:14: 8:19\n+                  debug self => _8;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                  let mut _14: &mut std::ops::Range<i32>; // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n               }\n           }\n           scope 4 (inlined <std::ops::Range<i32> as IntoIterator>::into_iter) { // at $DIR/remove_storage_markers.rs:8:14: 8:19\n-              debug self => _3;            // in scope 4 at $DIR/remove_storage_markers.rs:8:14: 8:19\n+              debug self => _3;            // in scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n           }\n       }\n   \n@@ -40,7 +40,7 @@\n -         StorageLive(_3);                 // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           (_3.0: i32) = const 0_i32;       // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           (_3.1: i32) = const 10_i32;      // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n-          _2 = move _3;                    // scope 4 at $DIR/remove_storage_markers.rs:8:14: 8:19\n+          _2 = move _3;                    // scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n -         StorageDead(_3);                 // scope 1 at $DIR/remove_storage_markers.rs:8:18: 8:19\n -         StorageLive(_4);                 // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           _4 = move _2;                    // scope 1 at $DIR/remove_storage_markers.rs:8:14: 8:19\n@@ -54,11 +54,11 @@\n -         StorageLive(_9);                 // scope 2 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           _9 = &mut _4;                    // scope 2 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           _8 = &mut (*_9);                 // scope 2 at $DIR/remove_storage_markers.rs:8:14: 8:19\n--         StorageLive(_14);                // scope 5 at $DIR/remove_storage_markers.rs:8:14: 8:19\n-          _14 = &mut (*_8);                // scope 5 at $DIR/remove_storage_markers.rs:8:14: 8:19\n-          _7 = <std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next(move _14) -> bb4; // scope 5 at $DIR/remove_storage_markers.rs:8:14: 8:19\n+-         StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+          _14 = &mut (*_8);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+          _7 = <std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next(move _14) -> bb4; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $DIR/remove_storage_markers.rs:8:14: 8:19\n+                                           // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(Scalar(<ZST>)) }\n       }\n   \n@@ -90,7 +90,7 @@\n       }\n   \n       bb4: {\n--         StorageDead(_14);                // scope 5 at $DIR/remove_storage_markers.rs:8:14: 8:19\n+-         StorageDead(_14);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n -         StorageDead(_8);                 // scope 2 at $DIR/remove_storage_markers.rs:8:18: 8:19\n           _10 = discriminant(_7);          // scope 2 at $DIR/remove_storage_markers.rs:8:14: 8:19\n           switchInt(move _10) -> [0_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/remove_storage_markers.rs:8:14: 8:19"}, {"sha": "8b321130236f81c47f9362593e03fe9004d08a79", "filename": "src/test/mir-opt/remove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -7,14 +7,14 @@\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n       let mut _3: T;                       // in scope 0 at $DIR/remove_unneeded_drops.rs:21:10: 21:11\n       scope 1 (inlined std::mem::drop::<T>) { // at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n-          debug _x => _3;                  // in scope 1 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n+          debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:21:10: 21:11\n           _3 = move _1;                    // scope 0 at $DIR/remove_unneeded_drops.rs:21:10: 21:11\n-          drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n+          drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   \n       bb1 (cleanup): {"}, {"sha": "a0c8565134cd9d4e18d3991a2ce0604a874ddf7b", "filename": "src/test/mir-opt/remove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -7,14 +7,14 @@\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n       let mut _3: std::vec::Vec<bool>;     // in scope 0 at $DIR/remove_unneeded_drops.rs:9:10: 9:11\n       scope 1 (inlined std::mem::drop::<Vec<bool>>) { // at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n-          debug _x => _3;                  // in scope 1 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n+          debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:9:10: 9:11\n           _3 = move _1;                    // scope 0 at $DIR/remove_unneeded_drops.rs:9:10: 9:11\n-          drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n+          drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   \n       bb1 (cleanup): {"}, {"sha": "714136a9e245e7aca6c2bc2206bd83535869ca1b", "filename": "src/test/mir-opt/remove_unneeded_drops.opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -7,14 +7,14 @@\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n       let mut _3: bool;                    // in scope 0 at $DIR/remove_unneeded_drops.rs:4:10: 4:11\n       scope 1 (inlined std::mem::drop::<bool>) { // at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n-          debug _x => _3;                  // in scope 1 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n+          debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:4:10: 4:11\n           _3 = _1;                         // scope 0 at $DIR/remove_unneeded_drops.rs:4:10: 4:11\n--         drop(_3) -> bb1;                 // scope 1 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n+-         drop(_3) -> bb1;                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n -     }\n - \n -     bb1: {"}, {"sha": "3dca9f3e1b162424ffb98f4b2964b199804b5461", "filename": "src/test/mir-opt/remove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -7,14 +7,14 @@\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n       let mut _3: T;                       // in scope 0 at $DIR/remove_unneeded_drops.rs:14:10: 14:11\n       scope 1 (inlined std::mem::drop::<T>) { // at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n-          debug _x => _3;                  // in scope 1 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n+          debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:14:10: 14:11\n           _3 = _1;                         // scope 0 at $DIR/remove_unneeded_drops.rs:14:10: 14:11\n--         drop(_3) -> bb1;                 // scope 1 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n+-         drop(_3) -> bb1;                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n -     }\n - \n -     bb1: {"}, {"sha": "45a7fac63152de23225cf8f36ae983615bf37538", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -16,14 +16,14 @@\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n           scope 2 {\n               scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  debug residual => _8;    // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  let _16: i32;            // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  let mut _17: i32;        // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  let mut _18: i32;        // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n+                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   scope 9 {\n-                      debug e => _16;      // in scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                      scope 10 (inlined <i32 as From<i32>>::from) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                          debug t => _18;  // in scope 10 at $DIR/separate_const_switch.rs:29:8: 29:10\n+                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                       }\n                   }\n               }\n@@ -35,18 +35,18 @@\n           }\n       }\n       scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-          debug self => _4;                // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let mut _10: isize;              // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let _11: i32;                    // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let mut _12: i32;                // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let _13: i32;                    // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let mut _15: i32;                // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           scope 6 {\n-              debug v => _11;              // in scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n+              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           }\n           scope 7 {\n-              debug e => _13;              // in scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n+              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           }\n       }\n   \n@@ -56,8 +56,8 @@\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n           StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _10 = discriminant(_4);          // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n@@ -77,17 +77,17 @@\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-          StorageLive(_16);                // scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _16 = move ((_8 as Err).0: i32); // scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_17);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_18);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _18 = move _16;                  // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _17 = move _18;                  // scope 10 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_18);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          discriminant(_0) = 1;            // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_17);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_16);                // scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n@@ -96,18 +96,18 @@\n       }\n   \n       bb3: {\n-          StorageLive(_13);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _13 = move ((_4 as Err).0: i32); // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_14);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_15);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _15 = move _13;                  // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          ((_14 as Err).0: i32) = move _15; // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          discriminant(_14) = 1;           // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_15);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          discriminant(_3) = 1;            // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_14);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_13);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n -         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n@@ -117,18 +117,18 @@\n       }\n   \n       bb4: {\n-          unreachable;                     // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb5: {\n-          StorageLive(_11);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_12);                // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _12 = move _11;                  // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          ((_3 as Continue).0: i32) = move _12; // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          discriminant(_3) = 0;            // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_12);                // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_11);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n -         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10"}, {"sha": "1476f06f25bd1fa340a241e794e186cbcd490d66", "filename": "src/test/mir-opt/separate_const_switch.identity.PreCodegen.after.mir", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -13,14 +13,14 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         debug residual => _5;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n         scope 2 {\n             scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                debug residual => _6;    // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                let _14: i32;            // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                let mut _15: i32;        // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                let mut _16: i32;        // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n+                debug residual => _6;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let _14: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _15: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _16: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                 scope 9 {\n-                    debug e => _14;      // in scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                    scope 10 (inlined <i32 as From<i32>>::from) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                        debug t => _16;  // in scope 10 at $DIR/separate_const_switch.rs:29:8: 29:10\n+                    debug e => _14;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                    scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                        debug t => _16;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                     }\n                 }\n             }\n@@ -32,18 +32,18 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         }\n     }\n     scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-        debug self => _4;                // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        let mut _8: isize;               // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        let _9: i32;                     // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        let mut _10: i32;                // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        let _11: i32;                    // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        let mut _12: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        let mut _13: i32;                // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let mut _8: isize;               // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let _9: i32;                     // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let mut _10: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let mut _12: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        let mut _13: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n         scope 6 {\n-            debug v => _9;               // in scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n+            debug v => _9;               // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n         }\n         scope 7 {\n-            debug e => _11;              // in scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n+            debug e => _11;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n         }\n     }\n \n@@ -53,40 +53,40 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n         StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n         _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n         StorageLive(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _8 = discriminant(_4);           // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        _8 = discriminant(_4);           // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb1: {\n-        StorageLive(_11);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _11 = move ((_4 as Err).0: i32); // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageLive(_12);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageLive(_13);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _13 = move _11;                  // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        ((_12 as Err).0: i32) = move _13; // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        discriminant(_12) = 1;           // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_13);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _12; // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        discriminant(_3) = 1;            // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_12);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_11);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _11 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _13 = move _11;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        ((_12 as Err).0: i32) = move _13; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        discriminant(_12) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _12; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n         StorageLive(_5);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n         _5 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n         StorageLive(_6);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n         _6 = _5;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-        StorageLive(_14);                // scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _14 = move ((_6 as Err).0: i32); // scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageLive(_15);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageLive(_16);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _16 = move _14;                  // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _15 = move _16;                  // scope 10 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_16);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        ((_0 as Err).0: i32) = move _15; // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        discriminant(_0) = 1;            // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_15);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_14);                // scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        StorageLive(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _14 = move ((_6 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _16 = move _14;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _15 = move _16;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageDead(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        ((_0 as Err).0: i32) = move _15; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_6);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n         StorageDead(_5);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n         StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n@@ -95,18 +95,18 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n     }\n \n     bb2: {\n-        unreachable;                     // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageLive(_9);                 // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _9 = move ((_4 as Ok).0: i32);   // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageLive(_10);                // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        _10 = move _9;                   // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        ((_3 as Continue).0: i32) = move _10; // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        discriminant(_3) = 0;            // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_10);                // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-        StorageDead(_9);                 // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+        StorageLive(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _9 = move ((_4 as Ok).0: i32);   // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _10 = move _9;                   // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        ((_3 as Continue).0: i32) = move _10; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n         StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n         StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10"}, {"sha": "da0ea8a585c50e86bb9aa20d0b27920f3169a443", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -16,14 +16,14 @@\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n           scope 2 {\n               scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  debug residual => _8;    // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  let _16: i32;            // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  let mut _17: i32;        // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  let mut _18: i32;        // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n+                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   scope 9 {\n-                      debug e => _16;      // in scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-                      scope 10 (inlined <i32 as From<i32>>::from) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                          debug t => _18;  // in scope 10 at $DIR/separate_const_switch.rs:29:8: 29:10\n+                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                       }\n                   }\n               }\n@@ -35,18 +35,18 @@\n           }\n       }\n       scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-          debug self => _4;                // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let mut _10: isize;              // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let _11: i32;                    // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let mut _12: i32;                // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let _13: i32;                    // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          let mut _15: i32;                // in scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           scope 6 {\n-              debug v => _11;              // in scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n+              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           }\n           scope 7 {\n-              debug e => _13;              // in scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n+              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           }\n       }\n   \n@@ -56,9 +56,9 @@\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:9\n           StorageLive(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _10 = discriminant(_4);          // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n--         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-+         switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _10) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n@@ -86,17 +86,17 @@\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n-          StorageLive(_16);                // scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _16 = move ((_8 as Err).0: i32); // scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_17);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_18);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _18 = move _16;                  // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _17 = move _18;                  // scope 10 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_18);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          discriminant(_0) = 1;            // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_17);                // scope 9 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_16);                // scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:29:10: 29:11\n@@ -106,19 +106,19 @@\n   \n -     bb4: {\n +     bb3: {\n-          StorageLive(_13);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _13 = move ((_4 as Err).0: i32); // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_14);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_15);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _15 = move _13;                  // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          ((_14 as Err).0: i32) = move _15; // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          discriminant(_14) = 1;           // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_15);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          discriminant(_3) = 1;            // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_14);                // scope 7 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_13);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n--         goto -> bb1;                     // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n +         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n@@ -127,20 +127,20 @@\n   \n -     bb5: {\n +     bb4: {\n-          unreachable;                     // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n -     bb6: {\n +     bb5: {\n-          StorageLive(_11);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageLive(_12);                // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          _12 = move _11;                  // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          ((_3 as Continue).0: i32) = move _12; // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          discriminant(_3) = 0;            // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_12);                // scope 6 at $DIR/separate_const_switch.rs:29:8: 29:10\n-          StorageDead(_11);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n--         goto -> bb1;                     // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n+          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+-         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n +         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10"}, {"sha": "7cd095c2db1d6a458d972aa5829a21f85ce0c764", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -22,28 +22,28 @@\n -         debug e => _6;                   // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n +         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n--             debug t => _9;               // in scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n-+             debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n+-             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n--             debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n-+             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+-             debug e => _8;               // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n++             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n           }\n       }\n       scope 3 {\n -         debug v => _10;                  // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n +         debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n       }\n       scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n-          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n+          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:23:22: 23:23\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n           StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n-          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n+          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:24:5: 24:6\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n           switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n@@ -75,13 +75,13 @@\n -         StorageLive(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:37: 37:50\n -         StorageLive(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n -         _9 = _6;                         // scope 2 at $DIR/simplify-arm.rs:37:48: 37:49\n--         _8 = move _9;                    // scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n+-         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n -         StorageDead(_9);                 // scope 2 at $DIR/simplify-arm.rs:37:49: 37:50\n--         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n--         discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+-         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify-arm.rs:28:9: 28:10\n+-         discriminant(_0) = 1;            // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n -         StorageDead(_8);                 // scope 2 at $DIR/simplify-arm.rs:37:50: 37:51\n -         StorageDead(_6);                 // scope 0 at $DIR/simplify-arm.rs:37:50: 37:51\n-+         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n++         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n           goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2"}, {"sha": "91c5c6301637b62694a8d0e23851b7c82753800d", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -20,25 +20,25 @@\n       scope 2 {\n           debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:37:13: 37:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:37:37: 37:50\n-              debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify-arm.rs:37:37: 37:50\n+              debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u8, i32>) { // at $DIR/simplify-arm.rs:37:26: 37:51\n-              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify-arm.rs:27:21: 27:22\n           }\n       }\n       scope 3 {\n           debug v => ((_0 as Ok).0: u8);   // in scope 3 at $DIR/simplify-arm.rs:38:12: 38:13\n       }\n       scope 4 (inlined into_result::<u8, i32>) { // at $DIR/simplify-arm.rs:36:19: 36:33\n-          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n+          debug r => _4;                   // in scope 4 at $DIR/simplify-arm.rs:23:22: 23:23\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify-arm.rs:36:9: 36:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n           StorageLive(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n-          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n+          _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:24:5: 24:6\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n -         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n@@ -58,7 +58,7 @@\n -     }\n - \n -     bb3: {\n--         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:37:26: 37:51\n+-         _0 = move _3;                    // scope 6 at $DIR/simplify-arm.rs:28:5: 28:11\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:39:6: 39:7\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-arm.rs:41:1: 41:2\n -         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:41:2: 41:2"}, {"sha": "9f6585e91681ed932fa28d216d02e8569ba38648", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -20,32 +20,32 @@\n       scope 2 {\n           debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-              debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n+              debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+              debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n           debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n       }\n       scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n--         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n-+         debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+-         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n++         debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n -         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n -         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n--         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+-         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n -         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n -         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n +         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n-+         nop;                             // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n++         nop;                             // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n +         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n           goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:21:13: 21:33"}, {"sha": "b568b3a479f5f6141c441ea4bb90e3f48d7601e2", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -22,28 +22,28 @@\n -         debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n +         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n           scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n--             debug t => _9;               // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n-+             debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n+-             debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++             debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           }\n           scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n--             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n-+             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+-             debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n++             debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n           }\n       }\n       scope 3 {\n -         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n +         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n       }\n       scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-          debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+          debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n           StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n           StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n           _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n-          _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+          _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n           StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n           _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n           switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n@@ -71,13 +71,13 @@\n -         StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:22:37: 22:50\n -         StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n -         _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:22:48: 22:49\n--         _8 = move _9;                    // scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n+-         _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n -         StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:22:49: 22:50\n--         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n--         discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+-         ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n+-         discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n -         StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:22:50: 22:51\n -         StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:22:50: 22:51\n-+         _0 = move _3;                    // scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n++         _0 = move _3;                    // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n           StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:24:6: 24:7\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:26:1: 26:2\n           return;                          // scope 0 at $DIR/simplify_try.rs:26:2: 26:2"}, {"sha": "24d8f5fba61d2878c25ed1745a484821446839a0", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -19,25 +19,25 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     scope 2 {\n         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n         scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n+            debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         }\n         scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n         }\n     }\n     scope 3 {\n         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n     }\n     scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+        debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:21:9: 21:10\n         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n-        _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+        _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n         goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:21:13: 21:33"}, {"sha": "e99795ffe21c588dd0500c8838d90574dd786486", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -9,17 +9,17 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n     scope 2 {\n         debug e => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:22:13: 22:14\n         scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => ((_0 as Err).0: i32); // in scope 5 at $DIR/simplify_try.rs:22:37: 22:50\n+            debug t => ((_0 as Err).0: i32); // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         }\n         scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:22:26: 22:51\n+            debug e => ((_0 as Err).0: i32); // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n         }\n     }\n     scope 3 {\n         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:23:12: 23:13\n     }\n     scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n+        debug r => _0;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n     }\n \n     bb0: {"}, {"sha": "f1cfcfee55798a6009713788e9a411500bd01e69", "filename": "src/test/ui/const_prop/inline_spans.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.rs?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -5,10 +5,14 @@\n \n fn main() {\n     let _ = add(u8::MAX, 1);\n-    //~^ ERROR this arithmetic operation will overflow\n+    //~^ NOTE in this expansion of inlined source\n+    //~| NOTE in this expansion of inlined source\n }\n \n #[inline(always)]\n fn add(x: u8, y: u8) -> u8 {\n     x + y\n+    //~^ ERROR this arithmetic operation will overflow\n+    //~| NOTE attempt to compute `u8::MAX + 1_u8`, which would overflow\n+    //~| NOTE `#[deny(arithmetic_overflow)]` on by default\n }"}, {"sha": "f99a314238681418f7073e7a35b922ed0f19a7f6", "filename": "src/test/ui/const_prop/inline_spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48132caac241b4a278d58e1d791c6d31f7439ad6/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Finline_spans.stderr?ref=48132caac241b4a278d58e1d791c6d31f7439ad6", "patch": "@@ -1,11 +1,11 @@\n error: this arithmetic operation will overflow\n-  --> $DIR/inline_spans.rs:7:13\n+  --> $DIR/inline_spans.rs:14:5\n    |\n LL |     let _ = add(u8::MAX, 1);\n-   |             ^^^^^^^^^^^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n+   |             --------------- in this inlined function call\n ...\n LL |     x + y\n-   |     ----- in the inlined copy of this code\n+   |     ^^^^^ attempt to compute `u8::MAX + 1_u8`, which would overflow\n    |\n    = note: `#[deny(arithmetic_overflow)]` on by default\n "}]}