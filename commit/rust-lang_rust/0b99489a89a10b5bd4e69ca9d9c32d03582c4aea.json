{"sha": "0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOTk0ODlhODlhMTBiNWJkNGU2OWNhOWQ5YzMyZDAzNTgyYzRhZWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T07:51:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T07:51:14Z"}, "message": "Rollup merge of #69965 - mark-i-m:codegen-utils, r=eddyb\n\nRefactorings to get rid of rustc_codegen_utils\n\nr? @eddyb\n\ncc #45276\n\nAfter this, the only modules left in `rustc_codegen_utils` are\n- `link`: a bunch of linking-related functions (many dealing with file names). These are mostly consumed by save analysis, rustc_driver, rustc_interface, and of course codegen. I assume they live here because we don't want a dependency of save analysis on codegen... Perhaps they can be moved to librustc?\n- ~`symbol_names` and `symbol_names_test`: honestly it seems odd that `symbol_names_test` is not a submodule of `symbol_names`. It seems like these could honestly live in their own crate or move to librustc. Already name mangling is exported as the `symbol_name` query.~ (move it to its own crate)\n\nI don't mind doing either of the above as part of this PR or a followup if you want.", "tree": {"sha": "50de525c3b0fcd9749e2216621f6eddd0bb143bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50de525c3b0fcd9749e2216621f6eddd0bb143bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedcdyCRBK7hj4Ov3rIwAAdHIIAAXWYBsh4nuGezmxSyDYZVOZ\nQaAcCpdErryU0lBCK7SW3n+ZHPdRxYXSvmJDyaQPDpNeFti1PW1c9nD9eZzt6+mj\n78oJ2ItW9jdEqpUssOa9zHuw6I04ierQseD2IVcOS0Cm0mmjvVPG6OPZJNihIlWb\ne1uSXtJ6k7ZB1TWfXfvm16D9xtPsmd8wIuc2uibMXwu80zIVgyr/SVCci4t5mx2y\nx+C9sfvcJSxcZuzGmjGha4tn+a7lD2E2ZLRwy1xe1jOJABJM2pVJG6UA3pcyoaY9\n7Xdf6J0xbw4QgtZ4oGcSo0WyoILTsyOVt8XZ2QtcGPHcS7O8djl/FUmFMLnbRFU=\n=LhMH\n-----END PGP SIGNATURE-----\n", "payload": "tree 50de525c3b0fcd9749e2216621f6eddd0bb143bb\nparent 426a4cc930476a557b1e8b3d708a8bec97bad92a\nparent 2d75a339ca9e7cd11338b165311927e6eb73cca4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584777074 +0100\ncommitter GitHub <noreply@github.com> 1584777074 +0100\n\nRollup merge of #69965 - mark-i-m:codegen-utils, r=eddyb\n\nRefactorings to get rid of rustc_codegen_utils\n\nr? @eddyb\n\ncc #45276\n\nAfter this, the only modules left in `rustc_codegen_utils` are\n- `link`: a bunch of linking-related functions (many dealing with file names). These are mostly consumed by save analysis, rustc_driver, rustc_interface, and of course codegen. I assume they live here because we don't want a dependency of save analysis on codegen... Perhaps they can be moved to librustc?\n- ~`symbol_names` and `symbol_names_test`: honestly it seems odd that `symbol_names_test` is not a submodule of `symbol_names`. It seems like these could honestly live in their own crate or move to librustc. Already name mangling is exported as the `symbol_name` query.~ (move it to its own crate)\n\nI don't mind doing either of the above as part of this PR or a followup if you want.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "html_url": "https://github.com/rust-lang/rust/commit/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "426a4cc930476a557b1e8b3d708a8bec97bad92a", "url": "https://api.github.com/repos/rust-lang/rust/commits/426a4cc930476a557b1e8b3d708a8bec97bad92a", "html_url": "https://github.com/rust-lang/rust/commit/426a4cc930476a557b1e8b3d708a8bec97bad92a"}, {"sha": "2d75a339ca9e7cd11338b165311927e6eb73cca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d75a339ca9e7cd11338b165311927e6eb73cca4", "html_url": "https://github.com/rust-lang/rust/commit/2d75a339ca9e7cd11338b165311927e6eb73cca4"}], "stats": {"total": 553, "additions": 264, "deletions": 289}, "files": [{"sha": "04044c79bdaf93198a8083cb6e902dfb33612282", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -3567,7 +3567,6 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_codegen_ssa\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n@@ -3598,37 +3597,21 @@ dependencies = [\n  \"rustc_apfloat\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_fs_util\",\n  \"rustc_hir\",\n  \"rustc_incremental\",\n  \"rustc_index\",\n+ \"rustc_metadata\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_symbol_mangling\",\n  \"rustc_target\",\n  \"serialize\",\n  \"tempfile\",\n ]\n \n-[[package]]\n-name = \"rustc_codegen_utils\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"log\",\n- \"punycode\",\n- \"rustc\",\n- \"rustc-demangle\",\n- \"rustc_ast\",\n- \"rustc_data_structures\",\n- \"rustc_hir\",\n- \"rustc_metadata\",\n- \"rustc_session\",\n- \"rustc_span\",\n- \"rustc_target\",\n-]\n-\n [[package]]\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n@@ -3665,7 +3648,6 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_codegen_ssa\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n@@ -3814,7 +3796,6 @@ dependencies = [\n  \"rustc_builtin_macros\",\n  \"rustc_codegen_llvm\",\n  \"rustc_codegen_ssa\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n@@ -3832,6 +3813,7 @@ dependencies = [\n  \"rustc_resolve\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_symbol_mangling\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n  \"rustc_traits\",\n@@ -4071,7 +4053,6 @@ dependencies = [\n  \"rustc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n- \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_parse\",\n@@ -4112,6 +4093,23 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n+[[package]]\n+name = \"rustc_symbol_mangling\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log\",\n+ \"punycode\",\n+ \"rustc\",\n+ \"rustc-demangle\",\n+ \"rustc_ast\",\n+ \"rustc_data_structures\",\n+ \"rustc_hir\",\n+ \"rustc_metadata\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+]\n+\n [[package]]\n name = \"rustc_target\"\n version = \"0.0.0\""}, {"sha": "eeacd6a6d83f6dda727570cfee51254c66e6a03e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -3148,6 +3148,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n+    super::util::bug::provide(providers);\n     *providers = ty::query::Providers {\n         trait_impls_of: trait_def::trait_impls_of_provider,\n         all_local_trait_impls: trait_def::all_local_trait_impls,"}, {"sha": "54cd8a29f947416cb4baccd920f05f0977bcb1d5", "filename": "src/librustc/util/bug.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fbug.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -1,6 +1,6 @@\n // These functions are used by macro expansion for bug! and span_bug!\n \n-use crate::ty::tls;\n+use crate::ty::{tls, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n \n@@ -39,3 +39,17 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n     });\n     unreachable!();\n }\n+\n+/// A query to trigger a `delay_span_bug`. Clearly, if one has a `tcx` one can already trigger a\n+/// `delay_span_bug`, so what is the point of this? It exists to help us test `delay_span_bug`'s\n+/// interactions with the query system and incremental.\n+pub fn trigger_delay_span_bug(tcx: TyCtxt<'_>, key: rustc_hir::def_id::DefId) {\n+    tcx.sess.delay_span_bug(\n+        tcx.def_span(key),\n+        \"delayed span bug triggered by #[rustc_error(delay_span_bug_from_inside_query)]\",\n+    );\n+}\n+\n+pub fn provide(providers: &mut crate::ty::query::Providers<'_>) {\n+    *providers = crate::ty::query::Providers { trigger_delay_span_bug, ..*providers };\n+}"}, {"sha": "16ed0854abe6eabd1d529b7f5b901ff99f62cffd", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -20,7 +20,6 @@ rustc = { path = \"../librustc\" }\n rustc-demangle = \"0.1\"\n rustc_attr = { path = \"../librustc_attr\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "e36c80e15a5e0778312c86f1127bd7c0b0504890", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -27,7 +27,6 @@ use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_errors::{FatalError, Handler};\n use rustc_serialize::json;\n use rustc_session::config::{self, OptLevel, OutputFilenames, PrintRequest};"}, {"sha": "299f4d2c6699897b48b90ecc0a5105b1f4577525", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -25,7 +25,7 @@ rustc_span = { path = \"../librustc_span\" }\n rustc = { path = \"../librustc\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_attr = { path = \"../librustc_attr\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_symbol_mangling = { path = \"../librustc_symbol_mangling\" }\n rustc_data_structures = { path = \"../librustc_data_structures\"}\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n@@ -34,3 +34,4 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_session = { path = \"../librustc_session\" }\n+rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "672b6e4aa4600c1e18ee055cd7ebb65456398573", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -6,6 +6,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_session::config::{\n     self, CFGuard, DebugInfo, OutputFilenames, OutputType, PrintRequest, Sanitizer,\n };\n+use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n@@ -36,8 +37,6 @@ use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::str;\n \n-pub use rustc_codegen_utils::link::*;\n-\n pub fn remove(sess: &Session, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n         sess.err(&format!(\"failed to remove {}: {}\", path.display(), e));"}, {"sha": "8a2503ce16730679fd3e37bdcb19d3fb5ab8d9aa", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -8,7 +8,6 @@ use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::Instance;\n use rustc::ty::{SymbolName, TyCtxt};\n use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n-use rustc_codegen_utils::symbol_names;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n@@ -423,17 +422,21 @@ pub fn symbol_name_for_instance_in_crate<'tcx>(\n     // This is something instantiated in an upstream crate, so we have to use\n     // the slower (because uncached) version of computing the symbol name.\n     match symbol {\n-        ExportedSymbol::NonGeneric(def_id) => symbol_names::symbol_name_for_instance_in_crate(\n-            tcx,\n-            Instance::mono(tcx, def_id),\n-            instantiating_crate,\n-        ),\n-        ExportedSymbol::Generic(def_id, substs) => symbol_names::symbol_name_for_instance_in_crate(\n-            tcx,\n-            Instance::new(def_id, substs),\n-            instantiating_crate,\n-        ),\n-        ExportedSymbol::DropGlue(ty) => symbol_names::symbol_name_for_instance_in_crate(\n+        ExportedSymbol::NonGeneric(def_id) => {\n+            rustc_symbol_mangling::symbol_name_for_instance_in_crate(\n+                tcx,\n+                Instance::mono(tcx, def_id),\n+                instantiating_crate,\n+            )\n+        }\n+        ExportedSymbol::Generic(def_id, substs) => {\n+            rustc_symbol_mangling::symbol_name_for_instance_in_crate(\n+                tcx,\n+                Instance::new(def_id, substs),\n+                instantiating_crate,\n+            )\n+        }\n+        ExportedSymbol::DropGlue(ty) => rustc_symbol_mangling::symbol_name_for_instance_in_crate(\n             tcx,\n             Instance::resolve_drop_in_place(tcx, ty),\n             instantiating_crate,"}, {"sha": "834702a30099c9d427793c1e88a2a05d0d0d7c3b", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -36,7 +36,6 @@ use rustc::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc_attr as attr;\n-use rustc_codegen_utils::{check_for_rustc_errors_attr, symbol_names_test};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n@@ -47,6 +46,7 @@ use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, EntryFnType, Lto};\n use rustc_session::Session;\n use rustc_span::Span;\n+use rustc_symbol_mangling::test as symbol_names_test;\n \n use std::cmp;\n use std::ops::{Deref, DerefMut};\n@@ -514,8 +514,6 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> OngoingCodegen<B> {\n-    check_for_rustc_errors_attr(tcx);\n-\n     // Skip crate items and just output metadata in -Z no-codegen mode.\n     if tcx.sess.opts.debugging_opts.no_codegen || !tcx.sess.opts.output_types.should_codegen() {\n         let ongoing_codegen = start_async_codegen(backend, tcx, metadata, 1);"}, {"sha": "4e861f45ff7a50f476e76e45a842cd3cda9da95d", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -2,15 +2,22 @@ use super::write::WriteBackendMethods;\n use super::CodegenObject;\n use crate::ModuleCodegen;\n \n-use rustc::middle::cstore::EncodedMetadata;\n+use rustc::dep_graph::DepGraph;\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n use rustc::ty::layout::{HasTyCtxt, LayoutOf, TyLayout};\n-use rustc::ty::Ty;\n-use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n+use rustc::ty::{Ty, TyCtxt};\n+use rustc::util::common::ErrorReported;\n use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_session::{config, Session};\n+use rustc_session::{\n+    config::{self, OutputFilenames, PrintRequest},\n+    Session,\n+};\n use rustc_span::symbol::Symbol;\n \n+pub use rustc_data_structures::sync::MetadataRef;\n+\n+use std::any::Any;\n use std::sync::Arc;\n \n pub trait BackendTypes {\n@@ -37,6 +44,50 @@ impl<'tcx, T> Backend<'tcx> for T where\n {\n }\n \n+pub trait CodegenBackend {\n+    fn init(&self, _sess: &Session) {}\n+    fn print(&self, _req: PrintRequest, _sess: &Session) {}\n+    fn target_features(&self, _sess: &Session) -> Vec<Symbol> {\n+        vec![]\n+    }\n+    fn print_passes(&self) {}\n+    fn print_version(&self) {}\n+\n+    fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n+    fn provide(&self, _providers: &mut Providers<'_>);\n+    fn provide_extern(&self, _providers: &mut Providers<'_>);\n+    fn codegen_crate<'tcx>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        metadata: EncodedMetadata,\n+        need_metadata_module: bool,\n+    ) -> Box<dyn Any>;\n+\n+    /// This is called on the returned `Box<dyn Any>` from `codegen_backend`\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics when the passed `Box<dyn Any>` was not returned by `codegen_backend`.\n+    fn join_codegen(\n+        &self,\n+        ongoing_codegen: Box<dyn Any>,\n+        sess: &Session,\n+        dep_graph: &DepGraph,\n+    ) -> Result<Box<dyn Any>, ErrorReported>;\n+\n+    /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics when the passed `Box<dyn Any>` was not returned by `join_codegen`.\n+    fn link(\n+        &self,\n+        sess: &Session,\n+        codegen_results: Box<dyn Any>,\n+        outputs: &OutputFilenames,\n+    ) -> Result<(), ErrorReported>;\n+}\n+\n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send + Sync {\n     fn new_metadata(&self, sess: TyCtxt<'_>, mod_name: &str) -> Self::Module;\n     fn write_compressed_metadata<'tcx>("}, {"sha": "1bc9f297ea1b122aa2db508be6e393b46232afd4", "filename": "src/librustc_codegen_ssa/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -29,7 +29,7 @@ mod write;\n \n pub use self::abi::AbiBuilderMethods;\n pub use self::asm::{AsmBuilderMethods, AsmMethods};\n-pub use self::backend::{Backend, BackendTypes, ExtraBackendMethods};\n+pub use self::backend::{Backend, BackendTypes, CodegenBackend, ExtraBackendMethods};\n pub use self::builder::{BuilderMethods, OverflowOp};\n pub use self::consts::ConstMethods;\n pub use self::debuginfo::{DebugInfoBuilderMethods, DebugInfoMethods};"}, {"sha": "561692e70669aaa0ad54c3f4a9a7da62adf7f1a9", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/426a4cc930476a557b1e8b3d708a8bec97bad92a/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426a4cc930476a557b1e8b3d708a8bec97bad92a/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=426a4cc930476a557b1e8b3d708a8bec97bad92a", "patch": "@@ -1,64 +0,0 @@\n-//! The Rust compiler.\n-//!\n-//! # Note\n-//!\n-//! This API is completely unstable and subject to change.\n-\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-\n-use std::any::Any;\n-\n-use rustc::dep_graph::DepGraph;\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc::ty::query::Providers;\n-use rustc::ty::TyCtxt;\n-use rustc::util::common::ErrorReported;\n-use rustc_session::config::{OutputFilenames, PrintRequest};\n-use rustc_session::Session;\n-use rustc_span::symbol::Symbol;\n-\n-pub use rustc_data_structures::sync::MetadataRef;\n-\n-pub trait CodegenBackend {\n-    fn init(&self, _sess: &Session) {}\n-    fn print(&self, _req: PrintRequest, _sess: &Session) {}\n-    fn target_features(&self, _sess: &Session) -> Vec<Symbol> {\n-        vec![]\n-    }\n-    fn print_passes(&self) {}\n-    fn print_version(&self) {}\n-\n-    fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n-    fn provide(&self, _providers: &mut Providers<'_>);\n-    fn provide_extern(&self, _providers: &mut Providers<'_>);\n-    fn codegen_crate<'tcx>(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        metadata: EncodedMetadata,\n-        need_metadata_module: bool,\n-    ) -> Box<dyn Any>;\n-\n-    /// This is called on the returned `Box<dyn Any>` from `codegen_backend`\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics when the passed `Box<dyn Any>` was not returned by `codegen_backend`.\n-    fn join_codegen(\n-        &self,\n-        ongoing_codegen: Box<dyn Any>,\n-        sess: &Session,\n-        dep_graph: &DepGraph,\n-    ) -> Result<Box<dyn Any>, ErrorReported>;\n-\n-    /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics when the passed `Box<dyn Any>` was not returned by `join_codegen`.\n-    fn link(\n-        &self,\n-        sess: &Session,\n-        codegen_results: Box<dyn Any>,\n-        outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported>;\n-}"}, {"sha": "38906bbaef8104f07fcf152e030ec1bc690ad9b8", "filename": "src/librustc_codegen_utils/lib.rs", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/426a4cc930476a557b1e8b3d708a8bec97bad92a/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426a4cc930476a557b1e8b3d708a8bec97bad92a/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=426a4cc930476a557b1e8b3d708a8bec97bad92a", "patch": "@@ -1,66 +0,0 @@\n-//! # Note\n-//!\n-//! This API is completely unstable and subject to change.\n-\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![feature(never_type)]\n-#![feature(nll)]\n-#![feature(in_band_lifetimes)]\n-#![recursion_limit = \"256\"]\n-\n-#[macro_use]\n-extern crate rustc;\n-\n-use rustc::ty::query::Providers;\n-use rustc::ty::TyCtxt;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_span::symbol::sym;\n-\n-pub mod codegen_backend;\n-pub mod link;\n-pub mod symbol_names;\n-pub mod symbol_names_test;\n-\n-pub fn trigger_delay_span_bug(tcx: TyCtxt<'_>, key: DefId) {\n-    tcx.sess.delay_span_bug(\n-        tcx.def_span(key),\n-        \"delayed span bug triggered by #[rustc_error(delay_span_bug_from_inside_query)]\",\n-    );\n-}\n-\n-/// check for the #[rustc_error] annotation, which forces an\n-/// error in codegen. This is used to write compile-fail tests\n-/// that actually test that compilation succeeds without\n-/// reporting an error.\n-pub fn check_for_rustc_errors_attr(tcx: TyCtxt<'_>) {\n-    if let Some((def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-        let attrs = &*tcx.get_attrs(def_id);\n-        for attr in attrs {\n-            if attr.check_name(sym::rustc_error) {\n-                match attr.meta_item_list() {\n-                    // check if there is a #[rustc_error(delayed)]\n-                    Some(list) => {\n-                        if list.iter().any(|list_item| {\n-                            list_item.ident().map(|i| i.name)\n-                                == Some(sym::delay_span_bug_from_inside_query)\n-                        }) {\n-                            tcx.ensure().trigger_delay_span_bug(def_id);\n-                        }\n-                    }\n-                    // bare #[rustc_error]\n-                    None => {\n-                        tcx.sess.span_fatal(\n-                            tcx.def_span(def_id),\n-                            \"fatal error triggered by #[rustc_error]\",\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-pub fn provide(providers: &mut Providers<'_>) {\n-    crate::symbol_names::provide(providers);\n-    *providers = Providers { trigger_delay_span_bug, ..*providers };\n-}"}, {"sha": "aec10ee5ef53776a8066b07e192f8004cde0686e", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -27,13 +27,12 @@ rustc_parse = { path = \"../librustc_parse\" }\n rustc_plugin_impl = { path = \"../librustc_plugin_impl\" }\n rustc_save_analysis = { path = \"../librustc_save_analysis\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n-rustc_session = { path = \"../librustc_session\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }"}, {"sha": "9097a72f36f49c4931971b6a2ac87de96a6a3738", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -21,8 +21,8 @@ pub extern crate rustc_plugin_impl as plugin;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::ty::TyCtxt;\n use rustc::util::common::ErrorReported;\n-use rustc_codegen_ssa::CodegenResults;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_ast::ast;\n+use rustc_codegen_ssa::{traits::CodegenBackend, CodegenResults};\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::{\n@@ -43,6 +43,8 @@ use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest};\n use rustc_session::lint::{Lint, LintId};\n use rustc_session::{config, DiagnosticOutput, Session};\n use rustc_session::{early_error, early_warn};\n+use rustc_span::source_map::{FileLoader, FileName};\n+use rustc_span::symbol::sym;\n \n use std::borrow::Cow;\n use std::cmp::max;\n@@ -58,11 +60,6 @@ use std::process::{self, Command, Stdio};\n use std::str;\n use std::time::Instant;\n \n-use rustc_ast::ast;\n-use rustc_span::source_map::FileLoader;\n-use rustc_span::symbol::sym;\n-use rustc_span::FileName;\n-\n mod args;\n pub mod pretty;\n \n@@ -693,16 +690,15 @@ impl RustcDefaultCalls {\n                     let t_outputs = rustc_interface::util::build_output_filenames(\n                         input, odir, ofile, attrs, sess,\n                     );\n-                    let id = rustc_codegen_utils::link::find_crate_name(Some(sess), attrs, input);\n+                    let id = rustc_session::output::find_crate_name(Some(sess), attrs, input);\n                     if *req == PrintRequest::CrateName {\n                         println!(\"{}\", id);\n                         continue;\n                     }\n                     let crate_types = collect_crate_types(sess, attrs);\n                     for &style in &crate_types {\n-                        let fname = rustc_codegen_utils::link::filename_for_input(\n-                            sess, style, &id, &t_outputs,\n-                        );\n+                        let fname =\n+                            rustc_session::output::filename_for_input(sess, style, &id, &t_outputs);\n                         println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n                     }\n                 }"}, {"sha": "2e055ff183f2c26eba1ff1ba8561f0ceda59dab1", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -28,7 +28,7 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_traits = { path = \"../librustc_traits\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_symbol_mangling = { path = \"../librustc_symbol_mangling\" }\n rustc_codegen_llvm = { path = \"../librustc_codegen_llvm\", optional = true }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_infer = { path = \"../librustc_infer\" }"}, {"sha": "65a7a48d440bde2a758b951f66de818fcaa0d764", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -5,7 +5,7 @@ use rustc::ty;\n use rustc::util::common::ErrorReported;\n use rustc_ast::ast::{self, MetaItemKind};\n use rustc_ast::token;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::OnDrop;"}, {"sha": "b7a5f2f4531e59f5129ffdbf8683e9665b066584", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -14,8 +14,7 @@ use rustc::util::common::ErrorReported;\n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self, ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_codegen_utils::link::filename_for_metadata;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::sync::{par_iter, Lrc, Once, ParallelIterator, WorkerLocal};\n use rustc_data_structures::{box_region_allow_access, declare_box_region_type, parallel};\n use rustc_errors::PResult;\n@@ -29,9 +28,11 @@ use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_resolve::{Resolver, ResolverArenas};\n-use rustc_session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::config::{PpMode, PpSourceMode};\n+use rustc_session::config::{\n+    self, CrateType, Input, OutputFilenames, OutputType, PpMode, PpSourceMode,\n+};\n use rustc_session::lint;\n+use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n@@ -477,12 +478,7 @@ fn generated_output_paths(\n             // by appending `.rlib`, `.exe`, etc., so we can skip this transformation.\n             OutputType::Exe if !exact_name => {\n                 for crate_type in sess.crate_types.borrow().iter() {\n-                    let p = ::rustc_codegen_utils::link::filename_for_input(\n-                        sess,\n-                        *crate_type,\n-                        crate_name,\n-                        outputs,\n-                    );\n+                    let p = filename_for_input(sess, *crate_type, crate_name, outputs);\n                     out_filenames.push(p);\n                 }\n             }\n@@ -682,7 +678,7 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     rustc_ty::provide(providers);\n     rustc_metadata::provide(providers);\n     rustc_lint::provide(providers);\n-    rustc_codegen_utils::provide(providers);\n+    rustc_symbol_mangling::provide(providers);\n     rustc_codegen_ssa::provide(providers);\n }\n "}, {"sha": "3ca92216003d16976b78d44a5537aca33d109b16", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -4,17 +4,18 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::ty::steal::Steal;\n-use rustc::ty::{GlobalCtxt, ResolverOutputs};\n+use rustc::ty::{GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_ast::{self, ast};\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::sync::{Lrc, Once, WorkerLocal};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::Crate;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use rustc_session::config::{OutputFilenames, OutputType};\n-use rustc_session::Session;\n+use rustc_session::{output::find_crate_name, Session};\n+use rustc_span::symbol::sym;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::mem;\n@@ -157,11 +158,7 @@ impl<'tcx> Queries<'tcx> {\n                 None => {\n                     let parse_result = self.parse()?;\n                     let krate = parse_result.peek();\n-                    rustc_codegen_utils::link::find_crate_name(\n-                        Some(self.session()),\n-                        &krate.attrs,\n-                        &self.compiler.input,\n-                    )\n+                    find_crate_name(Some(self.session()), &krate.attrs, &self.compiler.input)\n                 }\n             })\n         })\n@@ -277,11 +274,58 @@ impl<'tcx> Queries<'tcx> {\n                 // Don't do code generation if there were any errors\n                 self.session().compile_status()?;\n \n+                // Hook for compile-fail tests.\n+                Self::check_for_rustc_errors_attr(tcx);\n+\n                 Ok(passes::start_codegen(&***self.codegen_backend(), tcx, &*outputs.peek()))\n             })\n         })\n     }\n \n+    /// Check for the `#[rustc_error]` annotation, which forces an error in codegen. This is used\n+    /// to write compile-fail tests that actually test that compilation succeeds without reporting\n+    /// an error.\n+    fn check_for_rustc_errors_attr(tcx: TyCtxt<'_>) {\n+        let def_id = match tcx.entry_fn(LOCAL_CRATE) {\n+            Some((def_id, _)) => def_id,\n+            _ => return,\n+        };\n+\n+        let attrs = &*tcx.get_attrs(def_id);\n+        let attrs = attrs.iter().filter(|attr| attr.check_name(sym::rustc_error));\n+        for attr in attrs {\n+            match attr.meta_item_list() {\n+                // Check if there is a `#[rustc_error(delay_span_bug_from_inside_query)]`.\n+                Some(list)\n+                    if list.iter().any(|list_item| {\n+                        matches!(\n+                            list_item.ident().map(|i| i.name),\n+                            Some(sym::delay_span_bug_from_inside_query)\n+                        )\n+                    }) =>\n+                {\n+                    tcx.ensure().trigger_delay_span_bug(def_id);\n+                }\n+\n+                // Bare `#[rustc_error]`.\n+                None => {\n+                    tcx.sess.span_fatal(\n+                        tcx.def_span(def_id),\n+                        \"fatal error triggered by #[rustc_error]\",\n+                    );\n+                }\n+\n+                // Some other attribute.\n+                Some(_) => {\n+                    tcx.sess.span_warn(\n+                        tcx.def_span(def_id),\n+                        \"unexpected annotation used with `#[rustc_error(...)]!\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n     pub fn linker(&'tcx self) -> Result<Linker> {\n         let dep_graph = self.dep_graph()?;\n         let prepare_outputs = self.prepare_outputs()?;"}, {"sha": "c6f2d1b82fcf484da7c4cc4293d01106edd03d11", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n use rustc_ast::ptr::P;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast::{self, ast};\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n #[cfg(parallel_compiler)]\n@@ -20,7 +20,7 @@ use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n use rustc_session::CrateDisambiguator;\n-use rustc_session::{config, early_error, filesearch, DiagnosticOutput, Session};\n+use rustc_session::{config, early_error, filesearch, output, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap};\n use rustc_span::symbol::{sym, Symbol};\n@@ -505,15 +505,15 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n     if base.is_empty() {\n         base.extend(attr_types);\n         if base.is_empty() {\n-            base.push(::rustc_codegen_utils::link::default_output_for_target(session));\n+            base.push(output::default_output_for_target(session));\n         } else {\n             base.sort();\n             base.dedup();\n         }\n     }\n \n     base.retain(|crate_type| {\n-        let res = !::rustc_codegen_utils::link::invalid_output_for_target(session, *crate_type);\n+        let res = !output::invalid_output_for_target(session, *crate_type);\n \n         if !res {\n             session.warn(&format!("}, {"sha": "1f551583b0c863fbf0cc20159c734040c912fda6", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -16,6 +16,7 @@ use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n use rustc_session::config;\n+use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::edition::Edition;\n@@ -852,11 +853,7 @@ impl<'a> CrateLoader<'a> {\n                 );\n                 let name = match orig_name {\n                     Some(orig_name) => {\n-                        crate::validate_crate_name(\n-                            Some(self.sess),\n-                            &orig_name.as_str(),\n-                            Some(item.span),\n-                        );\n+                        validate_crate_name(Some(self.sess), &orig_name.as_str(), Some(item.span));\n                         orig_name\n                     }\n                     None => item.ident.name,"}, {"sha": "2993aed2f8ab438062f6158d59c5acf63d1831de", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -29,37 +29,3 @@ mod rmeta;\n pub mod creader;\n pub mod dynamic_lib;\n pub mod locator;\n-\n-pub fn validate_crate_name(\n-    sess: Option<&rustc_session::Session>,\n-    s: &str,\n-    sp: Option<rustc_span::Span>,\n-) {\n-    let mut err_count = 0;\n-    {\n-        let mut say = |s: &str| {\n-            match (sp, sess) {\n-                (_, None) => bug!(\"{}\", s),\n-                (Some(sp), Some(sess)) => sess.span_err(sp, s),\n-                (None, Some(sess)) => sess.err(s),\n-            }\n-            err_count += 1;\n-        };\n-        if s.is_empty() {\n-            say(\"crate name must not be empty\");\n-        }\n-        for c in s.chars() {\n-            if c.is_alphanumeric() {\n-                continue;\n-            }\n-            if c == '_' {\n-                continue;\n-            }\n-            say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n-        }\n-    }\n-\n-    if err_count > 0 {\n-        sess.unwrap().abort_if_errors();\n-    }\n-}"}, {"sha": "de851d97727276e17c39b042ac7c06c0ae8262e7", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -13,12 +13,11 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_parse = { path = \"../librustc_parse\" }\n serde_json = \"1\"\n rustc_ast = { path = \"../librustc_ast\" }\n-rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rls-data = \"0.19\"\n rls-span = \"0.5\""}, {"sha": "bb717981a3be73afa4238a4027983c5040bd660d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -16,12 +16,12 @@ use rustc_ast::ast::{self, Attribute, NodeId, PatKind, DUMMY_NODE_ID};\n use rustc_ast::util::comments::strip_doc_comment_decoration;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast_pretty::pprust::{self, param_to_string, ty_to_string};\n-use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_session::config::{CrateType, Input, OutputType};\n+use rustc_session::output::{filename_for_metadata, out_filename};\n use rustc_span::source_map::Spanned;\n use rustc_span::*;\n "}, {"sha": "cc4d525d62887c3a4dbf810978740a6da69a444a", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -21,3 +21,5 @@ pub mod search_paths;\n \n mod session;\n pub use session::*;\n+\n+pub mod output;"}, {"sha": "ba3d08cfc7c14064ee2057a07fd9f8187fa42b41", "filename": "src/librustc_session/output.rs", "status": "renamed", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_session%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_session%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foutput.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -1,6 +1,7 @@\n+//! Related to out filenames of compilation (e.g. save analysis, binaries).\n+use crate::config::{self, Input, OutputFilenames, OutputType};\n+use crate::Session;\n use rustc_ast::{ast, attr};\n-use rustc_session::config::{self, Input, OutputFilenames, OutputType};\n-use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use std::path::{Path, PathBuf};\n@@ -24,9 +25,9 @@ pub fn out_filename(\n     out_filename\n }\n \n-// Make sure files are writeable.  Mac, FreeBSD, and Windows system linkers\n-// check this already -- however, the Linux linker will happily overwrite a\n-// read-only file.  We should be consistent.\n+/// Make sure files are writeable.  Mac, FreeBSD, and Windows system linkers\n+/// check this already -- however, the Linux linker will happily overwrite a\n+/// read-only file.  We should be consistent.\n pub fn check_file_is_writeable(file: &Path, sess: &Session) {\n     if !is_writeable(file) {\n         sess.fatal(&format!(\n@@ -46,7 +47,7 @@ fn is_writeable(p: &Path) -> bool {\n \n pub fn find_crate_name(sess: Option<&Session>, attrs: &[ast::Attribute], input: &Input) -> String {\n     let validate = |s: String, span: Option<Span>| {\n-        rustc_metadata::validate_crate_name(sess, &s, span);\n+        validate_crate_name(sess, &s, span);\n         s\n     };\n \n@@ -96,6 +97,36 @@ pub fn find_crate_name(sess: Option<&Session>, attrs: &[ast::Attribute], input:\n     \"rust_out\".to_string()\n }\n \n+pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n+    let mut err_count = 0;\n+    {\n+        let mut say = |s: &str| {\n+            match (sp, sess) {\n+                (_, None) => panic!(\"{}\", s),\n+                (Some(sp), Some(sess)) => sess.span_err(sp, s),\n+                (None, Some(sess)) => sess.err(s),\n+            }\n+            err_count += 1;\n+        };\n+        if s.is_empty() {\n+            say(\"crate name must not be empty\");\n+        }\n+        for c in s.chars() {\n+            if c.is_alphanumeric() {\n+                continue;\n+            }\n+            if c == '_' {\n+                continue;\n+            }\n+            say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n+        }\n+    }\n+\n+    if err_count > 0 {\n+        sess.unwrap().abort_if_errors();\n+    }\n+}\n+\n pub fn filename_for_metadata(\n     sess: &Session,\n     crate_name: &str,", "previous_filename": "src/librustc_codegen_utils/link.rs"}, {"sha": "1e4fc8f7e6842fbfe0166b04d949e280fe7aa428", "filename": "src/librustc_symbol_mangling/Cargo.toml", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2FCargo.toml?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -1,13 +1,13 @@\n [package]\n authors = [\"The Rust Project Developers\"]\n-name = \"rustc_codegen_utils\"\n+name = \"rustc_symbol_mangling\"\n version = \"0.0.0\"\n edition = \"2018\"\n \n [lib]\n-name = \"rustc_codegen_utils\"\n+name = \"rustc_symbol_mangling\"\n path = \"lib.rs\"\n-test = false\n+doctest = false\n \n [dependencies]\n log = \"0.4\"", "previous_filename": "src/librustc_codegen_utils/Cargo.toml"}, {"sha": "0dedda9bb6b73e67c0017ab9f063dd494124dd3f", "filename": "src/librustc_symbol_mangling/legacy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flegacy.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "previous_filename": "src/librustc_codegen_utils/symbol_names/legacy.rs"}, {"sha": "26cb3410500274b2c2f3a7c7251ecb407d0a872a", "filename": "src/librustc_symbol_mangling/lib.rs", "status": "renamed", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flib.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -87,6 +87,15 @@\n //! virtually impossible. Thus, symbol hash generation exclusively relies on\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(never_type)]\n+#![feature(nll)]\n+#![feature(in_band_lifetimes)]\n+#![recursion_limit = \"256\"]\n+\n+#[macro_use]\n+extern crate rustc;\n+\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n use rustc::ty::query::Providers;\n@@ -103,6 +112,8 @@ use log::debug;\n mod legacy;\n mod v0;\n \n+pub mod test;\n+\n /// This function computes the symbol name for the given `instance` and the\n /// given instantiating crate. That is, if you know that instance X is\n /// instantiated in crate Y, this is the symbol name this instance would have.", "previous_filename": "src/librustc_codegen_utils/symbol_names.rs"}, {"sha": "8f2f2628e7b7f2bce7658f7f3e72379fd43992be", "filename": "src/librustc_symbol_mangling/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Ftest.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "previous_filename": "src/librustc_codegen_utils/symbol_names_test.rs"}, {"sha": "ce6d0d9dc5ba8962782f90079cf2da8161e0bb53", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "previous_filename": "src/librustc_codegen_utils/symbol_names/v0.rs"}, {"sha": "0e6c39e0affca0041d9aebf603afd727b0092b4b", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b99489a89a10b5bd4e69ca9d9c32d03582c4aea/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=0b99489a89a10b5bd4e69ca9d9c32d03582c4aea", "patch": "@@ -1,36 +1,38 @@\n #![feature(rustc_private)]\n \n extern crate rustc;\n-extern crate rustc_codegen_utils;\n+extern crate rustc_codegen_ssa;\n #[macro_use]\n extern crate rustc_data_structures;\n-extern crate rustc_hir;\n-extern crate rustc_target;\n extern crate rustc_driver;\n+extern crate rustc_hir;\n extern crate rustc_session;\n extern crate rustc_span;\n+extern crate rustc_symbol_mangling;\n+extern crate rustc_target;\n \n-use std::any::Any;\n-use std::sync::Arc;\n-use std::path::Path;\n-use rustc::ty::TyCtxt;\n-use rustc::ty::query::Providers;\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n use rustc::dep_graph::DepGraph;\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n use rustc::util::common::ErrorReported;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_data_structures::sync::MetadataRef;\n+use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_session::Session;\n+use rustc_data_structures::sync::MetadataRef;\n use rustc_session::config::OutputFilenames;\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::Target;\n+use std::any::Any;\n+use std::path::Path;\n+use std::sync::Arc;\n \n pub struct NoLlvmMetadataLoader;\n \n impl MetadataLoader for NoLlvmMetadataLoader {\n     fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        let buf = std::fs::read(filename).map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n+        let buf =\n+            std::fs::read(filename).map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n         let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n         Ok(rustc_erase_owner!(buf.map_owner_box()))\n     }\n@@ -48,7 +50,7 @@ impl CodegenBackend for TheBackend {\n     }\n \n     fn provide(&self, providers: &mut Providers) {\n-        rustc_codegen_utils::symbol_names::provide(providers);\n+        rustc_symbol_mangling::provide(providers);\n \n         providers.target_features_whitelist = |tcx, _cnum| {\n             tcx.arena.alloc(Default::default()) // Just a dummy\n@@ -78,7 +80,8 @@ impl CodegenBackend for TheBackend {\n         _sess: &Session,\n         _dep_graph: &DepGraph,\n     ) -> Result<Box<dyn Any>, ErrorReported> {\n-        let crate_name = ongoing_codegen.downcast::<Symbol>()\n+        let crate_name = ongoing_codegen\n+            .downcast::<Symbol>()\n             .expect(\"in join_codegen: ongoing_codegen is not a Symbol\");\n         Ok(crate_name)\n     }\n@@ -89,17 +92,15 @@ impl CodegenBackend for TheBackend {\n         codegen_results: Box<dyn Any>,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n+        use rustc_session::{config::CrateType, output::out_filename};\n         use std::io::Write;\n-        use rustc_session::config::CrateType;\n-        use rustc_codegen_utils::link::out_filename;\n-        let crate_name = codegen_results.downcast::<Symbol>()\n-            .expect(\"in link: codegen_results is not a Symbol\");\n+        let crate_name =\n+            codegen_results.downcast::<Symbol>().expect(\"in link: codegen_results is not a Symbol\");\n         for &crate_type in sess.opts.crate_types.iter() {\n             if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));\n             }\n-            let output_name =\n-                out_filename(sess, crate_type, &outputs, &*crate_name.as_str());\n+            let output_name = out_filename(sess, crate_type, &outputs, &*crate_name.as_str());\n             let mut out_file = ::std::fs::File::create(output_name).unwrap();\n             write!(out_file, \"This has been \\\"compiled\\\" successfully.\").unwrap();\n         }"}]}