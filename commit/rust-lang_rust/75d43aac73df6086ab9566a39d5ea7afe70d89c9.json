{"sha": "75d43aac73df6086ab9566a39d5ea7afe70d89c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZDQzYWFjNzNkZjYwODZhYjk1NjZhMzlkNWVhN2FmZTcwZDg5Yzk=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-07-13T13:59:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-13T13:59:41Z"}, "message": "Rollup merge of #5443 - thiagoarrais:issue-2040, r=flip1995\n\nSome accuracy lints for floating point operations\n\nThis will add some lints for accuracy on floating point operations suggested by @clarfon in #2040 (fixes #2040).\n\nThese are the remaining lints:\n\n- [x] x.powi(2) => x * x\n- [x] x.logN() / y.logN() => x.logbase(y)\n- [x] x.logbase(E) => x.log()\n- [x] x.logbase(10) => x.log10()\n- [x] x.logbase(2) => x.log2().\n- [x] x * PI / 180 => x.to_radians()\n- [x] x * 180 / PI => x.to_degrees()\n- [x] (x + 1).log() => x.log_1p()\n- [x] sqrt(x * x + y * y) => x.hypot(y)\n\nchangelog: Included some accuracy lints for floating point operations", "tree": {"sha": "cf42a96da202f8cede53da3ab17c4646000ffb28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf42a96da202f8cede53da3ab17c4646000ffb28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d43aac73df6086ab9566a39d5ea7afe70d89c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDGjNCRBK7hj4Ov3rIwAAdHIIAJgstTrO7LUX9px9YWGgD2JS\neiUNEqMuAphABS8ndabI/91hi1o0+4PMKSOu06RJ2/upUVpiE4JgIpqtBQ3EuPw7\nxqG/BU7Xlg1FrPxQS9zTRwpwoIFRLsoxtDVcD0l6NnqN2yNiQI1uW8DPVn9L+Tee\n/bqYrxj3Dxf9dld7t0m8Tz1gw9b8+3KqOxIrepRHQy0LlDu0YUbVbKdgH46K3cGT\nP2nXgnXWzZGDBqa3hvWlyFK254O+D/8zlxfhMBYpaTBNt8gyuHISOq1lm/JzgB5N\npRB3NOtA8mckg7RhrMAFOwVJHFl/SMYmsAB/IKxpGQq1gL13G6TXeTT3injMQqU=\n=yc06\n-----END PGP SIGNATURE-----\n", "payload": "tree cf42a96da202f8cede53da3ab17c4646000ffb28\nparent 7d611d92240d43d9a04cf8db0cb4fb5690f8249c\nparent 3065201eb3a0c4976de7ef5b5b924afde1b18325\nauthor Philipp Krones <hello@philkrones.com> 1594648781 +0200\ncommitter GitHub <noreply@github.com> 1594648781 +0200\n\nRollup merge of #5443 - thiagoarrais:issue-2040, r=flip1995\n\nSome accuracy lints for floating point operations\n\nThis will add some lints for accuracy on floating point operations suggested by @clarfon in #2040 (fixes #2040).\n\nThese are the remaining lints:\n\n- [x] x.powi(2) => x * x\n- [x] x.logN() / y.logN() => x.logbase(y)\n- [x] x.logbase(E) => x.log()\n- [x] x.logbase(10) => x.log10()\n- [x] x.logbase(2) => x.log2().\n- [x] x * PI / 180 => x.to_radians()\n- [x] x * 180 / PI => x.to_degrees()\n- [x] (x + 1).log() => x.log_1p()\n- [x] sqrt(x * x + y * y) => x.hypot(y)\n\nchangelog: Included some accuracy lints for floating point operations\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d43aac73df6086ab9566a39d5ea7afe70d89c9", "html_url": "https://github.com/rust-lang/rust/commit/75d43aac73df6086ab9566a39d5ea7afe70d89c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d43aac73df6086ab9566a39d5ea7afe70d89c9/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d611d92240d43d9a04cf8db0cb4fb5690f8249c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d611d92240d43d9a04cf8db0cb4fb5690f8249c", "html_url": "https://github.com/rust-lang/rust/commit/7d611d92240d43d9a04cf8db0cb4fb5690f8249c"}, {"sha": "3065201eb3a0c4976de7ef5b5b924afde1b18325", "url": "https://api.github.com/repos/rust-lang/rust/commits/3065201eb3a0c4976de7ef5b5b924afde1b18325", "html_url": "https://github.com/rust-lang/rust/commit/3065201eb3a0c4976de7ef5b5b924afde1b18325"}], "stats": {"total": 531, "additions": 499, "deletions": 32}, "files": [{"sha": "3087d6a940a867268b8aab2c823193400bed58d8", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 224, "deletions": 3, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -1,11 +1,11 @@\n use crate::consts::{\n     constant, constant_simple, Constant,\n-    Constant::{F32, F64},\n+    Constant::{Int, F32, F64},\n };\n-use crate::utils::{higher, numeric_literal, span_lint_and_sugg, sugg, SpanlessEq};\n+use crate::utils::{get_parent_expr, higher, numeric_literal, span_lint_and_sugg, sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -293,6 +293,121 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     }\n }\n \n+fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n+    if let Some((value, _)) = constant(cx, cx.tables(), &args[1]) {\n+        if value == Int(2) {\n+            if let Some(parent) = get_parent_expr(cx, expr) {\n+                if let Some(grandparent) = get_parent_expr(cx, parent) {\n+                    if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = grandparent.kind {\n+                        if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n+                            return;\n+                        }\n+                    }\n+                }\n+\n+                if let ExprKind::Binary(\n+                    Spanned {\n+                        node: BinOpKind::Add, ..\n+                    },\n+                    ref lhs,\n+                    ref rhs,\n+                ) = parent.kind\n+                {\n+                    let other_addend = if lhs.hir_id == expr.hir_id { rhs } else { lhs };\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        SUBOPTIMAL_FLOPS,\n+                        parent.span,\n+                        \"square can be computed more efficiently\",\n+                        \"consider using\",\n+                        format!(\n+                            \"{}.mul_add({}, {})\",\n+                            Sugg::hir(cx, &args[0], \"..\"),\n+                            Sugg::hir(cx, &args[0], \"..\"),\n+                            Sugg::hir(cx, &other_addend, \"..\"),\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    );\n+\n+                    return;\n+                }\n+            }\n+\n+            span_lint_and_sugg(\n+                cx,\n+                SUBOPTIMAL_FLOPS,\n+                expr.span,\n+                \"square can be computed more efficiently\",\n+                \"consider using\",\n+                format!(\"{} * {}\", Sugg::hir(cx, &args[0], \"..\"), Sugg::hir(cx, &args[0], \"..\")),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn detect_hypot(cx: &LateContext<'_>, args: &[Expr<'_>]) -> Option<String> {\n+    if let ExprKind::Binary(\n+        Spanned {\n+            node: BinOpKind::Add, ..\n+        },\n+        ref add_lhs,\n+        ref add_rhs,\n+    ) = args[0].kind\n+    {\n+        // check if expression of the form x * x + y * y\n+        if_chain! {\n+            if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref lmul_lhs, ref lmul_rhs) = add_lhs.kind;\n+            if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref rmul_lhs, ref rmul_rhs) = add_rhs.kind;\n+            if are_exprs_equal(cx, lmul_lhs, lmul_rhs);\n+            if are_exprs_equal(cx, rmul_lhs, rmul_rhs);\n+            then {\n+                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, &lmul_lhs, \"..\"), Sugg::hir(cx, &rmul_lhs, \"..\")));\n+            }\n+        }\n+\n+        // check if expression of the form x.powi(2) + y.powi(2)\n+        if_chain! {\n+            if let ExprKind::MethodCall(\n+                PathSegment { ident: lmethod_name, .. },\n+                ref _lspan,\n+                ref largs,\n+                _\n+            ) = add_lhs.kind;\n+            if let ExprKind::MethodCall(\n+                PathSegment { ident: rmethod_name, .. },\n+                ref _rspan,\n+                ref rargs,\n+                _\n+            ) = add_rhs.kind;\n+            if lmethod_name.as_str() == \"powi\" && rmethod_name.as_str() == \"powi\";\n+            if let Some((lvalue, _)) = constant(cx, cx.tables(), &largs[1]);\n+            if let Some((rvalue, _)) = constant(cx, cx.tables(), &rargs[1]);\n+            if Int(2) == lvalue && Int(2) == rvalue;\n+            then {\n+                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, &largs[0], \"..\"), Sugg::hir(cx, &rargs[0], \"..\")));\n+            }\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn check_hypot(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n+    if let Some(message) = detect_hypot(cx, args) {\n+        span_lint_and_sugg(\n+            cx,\n+            IMPRECISE_FLOPS,\n+            expr.span,\n+            \"hypotenuse can be computed more accurately\",\n+            \"consider using\",\n+            message,\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n+\n // TODO: Lint expressions of the form `x.exp() - y` where y > 1\n // and suggest usage of `x.exp_m1() - (y - 1)` instead\n fn check_expm1(cx: &LateContext<'_>, expr: &Expr<'_>) {\n@@ -344,6 +459,14 @@ fn check_mul_add(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         rhs,\n     ) = &expr.kind\n     {\n+        if let Some(parent) = get_parent_expr(cx, expr) {\n+            if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = parent.kind {\n+                if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n+                    return;\n+                }\n+            }\n+        }\n+\n         let (recv, arg1, arg2) = if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, lhs) {\n             (inner_lhs, inner_rhs, rhs)\n         } else if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, rhs) {\n@@ -479,6 +602,100 @@ fn check_custom_abs(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     }\n }\n \n+fn are_same_base_logs(cx: &LateContext<'_>, expr_a: &Expr<'_>, expr_b: &Expr<'_>) -> bool {\n+    if_chain! {\n+        if let ExprKind::MethodCall(PathSegment { ident: method_name_a, .. }, _, ref args_a, _) = expr_a.kind;\n+        if let ExprKind::MethodCall(PathSegment { ident: method_name_b, .. }, _, ref args_b, _) = expr_b.kind;\n+        then {\n+            return method_name_a.as_str() == method_name_b.as_str() &&\n+                args_a.len() == args_b.len() &&\n+                (\n+                    [\"ln\", \"log2\", \"log10\"].contains(&&*method_name_a.as_str()) ||\n+                    method_name_a.as_str() == \"log\" && args_a.len() == 2 && are_exprs_equal(cx, &args_a[1], &args_b[1])\n+                );\n+        }\n+    }\n+\n+    false\n+}\n+\n+fn check_log_division(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    // check if expression of the form x.logN() / y.logN()\n+    if_chain! {\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Div, ..\n+            },\n+            lhs,\n+            rhs,\n+        ) = &expr.kind;\n+        if are_same_base_logs(cx, lhs, rhs);\n+        if let ExprKind::MethodCall(_, _, ref largs, _) = lhs.kind;\n+        if let ExprKind::MethodCall(_, _, ref rargs, _) = rhs.kind;\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                SUBOPTIMAL_FLOPS,\n+                expr.span,\n+                \"log base can be expressed more clearly\",\n+                \"consider using\",\n+                format!(\"{}.log({})\", Sugg::hir(cx, &largs[0], \"..\"), Sugg::hir(cx, &rargs[0], \"..\"),),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn check_radians(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Div, ..\n+            },\n+            div_lhs,\n+            div_rhs,\n+        ) = &expr.kind;\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Mul, ..\n+            },\n+            mul_lhs,\n+            mul_rhs,\n+        ) = &div_lhs.kind;\n+        if let Some((rvalue, _)) = constant(cx, cx.tables(), div_rhs);\n+        if let Some((lvalue, _)) = constant(cx, cx.tables(), mul_rhs);\n+        then {\n+            // TODO: also check for constant values near PI/180 or 180/PI\n+            if (F32(f32_consts::PI) == rvalue || F64(f64_consts::PI) == rvalue) &&\n+               (F32(180_f32) == lvalue || F64(180_f64) == lvalue)\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    SUBOPTIMAL_FLOPS,\n+                    expr.span,\n+                    \"conversion to degrees can be done more accurately\",\n+                    \"consider using\",\n+                    format!(\"{}.to_degrees()\", Sugg::hir(cx, &mul_lhs, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            } else if\n+                (F32(180_f32) == rvalue || F64(180_f64) == rvalue) &&\n+                (F32(f32_consts::PI) == lvalue || F64(f64_consts::PI) == lvalue)\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    SUBOPTIMAL_FLOPS,\n+                    expr.span,\n+                    \"conversion to radians can be done more accurately\",\n+                    \"consider using\",\n+                    format!(\"{}.to_radians()\", Sugg::hir(cx, &mul_lhs, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::MethodCall(ref path, _, args, _) = &expr.kind {\n@@ -489,13 +706,17 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n                     \"ln\" => check_ln1p(cx, expr, args),\n                     \"log\" => check_log_base(cx, expr, args),\n                     \"powf\" => check_powf(cx, expr, args),\n+                    \"powi\" => check_powi(cx, expr, args),\n+                    \"sqrt\" => check_hypot(cx, expr, args),\n                     _ => {},\n                 }\n             }\n         } else {\n             check_expm1(cx, expr);\n             check_mul_add(cx, expr);\n             check_custom_abs(cx, expr);\n+            check_log_division(cx, expr);\n+            check_radians(cx, expr);\n         }\n     }\n }"}, {"sha": "bbe411b3f48843bc0487d14a326e6e0df0ebb663", "filename": "tests/ui/floating_point_hypot.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_hypot.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_hypot.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_hypot.fixed?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![warn(clippy::imprecise_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 4f32;\n+    let _ = x.hypot(y);\n+    let _ = (x + 1f32).hypot(y);\n+    let _ = x.hypot(y);\n+    // Cases where the lint shouldn't be applied\n+    // TODO: linting this adds some complexity, but could be done\n+    let _ = x.mul_add(x, y * y).sqrt();\n+    let _ = (x * 4f32 + y * y).sqrt();\n+}"}, {"sha": "586fd170ea14565dc41018f640c1c27da3672e3b", "filename": "tests/ui/floating_point_hypot.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_hypot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_hypot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_hypot.rs?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![warn(clippy::imprecise_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 4f32;\n+    let _ = (x * x + y * y).sqrt();\n+    let _ = ((x + 1f32) * (x + 1f32) + y * y).sqrt();\n+    let _ = (x.powi(2) + y.powi(2)).sqrt();\n+    // Cases where the lint shouldn't be applied\n+    // TODO: linting this adds some complexity, but could be done\n+    let _ = x.mul_add(x, y * y).sqrt();\n+    let _ = (x * 4f32 + y * y).sqrt();\n+}"}, {"sha": "42069d9ee9efbad760b05431f0262688149eda5f", "filename": "tests/ui/floating_point_hypot.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_hypot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_hypot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_hypot.stderr?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,22 @@\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_hypot.rs:7:13\n+   |\n+LL |     let _ = (x * x + y * y).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.hypot(y)`\n+   |\n+   = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n+\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_hypot.rs:8:13\n+   |\n+LL |     let _ = ((x + 1f32) * (x + 1f32) + y * y).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 1f32).hypot(y)`\n+\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_hypot.rs:9:13\n+   |\n+LL |     let _ = (x.powi(2) + y.powi(2)).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.hypot(y)`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7dc7ee94affc0d06c7ca21e0ad7df80a8d9903d9", "filename": "tests/ui/floating_point_log.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_log.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_log.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.fixed?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -25,11 +25,11 @@ fn check_ln1p() {\n     let _ = 2.0f32.ln_1p();\n     let _ = x.ln_1p();\n     let _ = (x / 2.0).ln_1p();\n-    let _ = x.powi(2).ln_1p();\n-    let _ = (x.powi(2) / 2.0).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n+    let _ = (x.powi(3) / 2.0).ln_1p();\n     let _ = ((std::f32::consts::E - 1.0)).ln_1p();\n     let _ = x.ln_1p();\n-    let _ = x.powi(2).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n     let _ = (x + 2.0).ln_1p();\n     let _ = (x / 2.0).ln_1p();\n     // Cases where the lint shouldn't be applied\n@@ -43,9 +43,9 @@ fn check_ln1p() {\n     let _ = 2.0f64.ln_1p();\n     let _ = x.ln_1p();\n     let _ = (x / 2.0).ln_1p();\n-    let _ = x.powi(2).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n     let _ = x.ln_1p();\n-    let _ = x.powi(2).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n     let _ = (x + 2.0).ln_1p();\n     let _ = (x / 2.0).ln_1p();\n     // Cases where the lint shouldn't be applied"}, {"sha": "01181484e7dee290c0973d60a38a93bd71062905", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -25,11 +25,11 @@ fn check_ln1p() {\n     let _ = (1f32 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n     let _ = (1.0 + x / 2.0).ln();\n-    let _ = (1.0 + x.powi(2)).ln();\n-    let _ = (1.0 + x.powi(2) / 2.0).ln();\n+    let _ = (1.0 + x.powi(3)).ln();\n+    let _ = (1.0 + x.powi(3) / 2.0).ln();\n     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n     let _ = (x + 1.0).ln();\n-    let _ = (x.powi(2) + 1.0).ln();\n+    let _ = (x.powi(3) + 1.0).ln();\n     let _ = (x + 2.0 + 1.0).ln();\n     let _ = (x / 2.0 + 1.0).ln();\n     // Cases where the lint shouldn't be applied\n@@ -43,9 +43,9 @@ fn check_ln1p() {\n     let _ = (1f64 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n     let _ = (1.0 + x / 2.0).ln();\n-    let _ = (1.0 + x.powi(2)).ln();\n+    let _ = (1.0 + x.powi(3)).ln();\n     let _ = (x + 1.0).ln();\n-    let _ = (x.powi(2) + 1.0).ln();\n+    let _ = (x.powi(3) + 1.0).ln();\n     let _ = (x + 2.0 + 1.0).ln();\n     let _ = (x / 2.0 + 1.0).ln();\n     // Cases where the lint shouldn't be applied"}, {"sha": "900dc2b79336a8bd1e67a642c54a6eb1c74966fa", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -77,14 +77,14 @@ LL |     let _ = (1.0 + x / 2.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:28:13\n    |\n-LL |     let _ = (1.0 + x.powi(2)).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(3)).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:29:13\n    |\n-LL |     let _ = (1.0 + x.powi(2) / 2.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(2) / 2.0).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(3) / 2.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(3) / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:30:13\n@@ -101,8 +101,8 @@ LL |     let _ = (x + 1.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:32:13\n    |\n-LL |     let _ = (x.powi(2) + 1.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (x.powi(3) + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:33:13\n@@ -143,8 +143,8 @@ LL |     let _ = (1.0 + x / 2.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:46:13\n    |\n-LL |     let _ = (1.0 + x.powi(2)).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(3)).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:47:13\n@@ -155,8 +155,8 @@ LL |     let _ = (x + 1.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:48:13\n    |\n-LL |     let _ = (x.powi(2) + 1.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (x.powi(3) + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:49:13"}, {"sha": "13962a272d4552b6ccce46a9ff908890e0add9cf", "filename": "tests/ui/floating_point_logbase.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_logbase.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_logbase.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.fixed?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 5f32;\n+    let _ = x.log(y);\n+    let _ = x.log(y);\n+    let _ = x.log(y);\n+    let _ = x.log(y);\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.ln() / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.ln();\n+    let _ = x.log(5f32) / y.log(7f32);\n+}"}, {"sha": "26bc20d5370b1f0a6f678d1b7d54b6fe447487d8", "filename": "tests/ui/floating_point_logbase.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_logbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_logbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.rs?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 5f32;\n+    let _ = x.ln() / y.ln();\n+    let _ = x.log2() / y.log2();\n+    let _ = x.log10() / y.log10();\n+    let _ = x.log(5f32) / y.log(5f32);\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.ln() / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.ln();\n+    let _ = x.log(5f32) / y.log(7f32);\n+}"}, {"sha": "78354c2f62d432eaf0e9c7a9cd6670bfc3bbc4cf", "filename": "tests/ui/floating_point_logbase.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_logbase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_logbase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.stderr?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,28 @@\n+error: log base can be expressed more clearly\n+  --> $DIR/floating_point_logbase.rs:7:13\n+   |\n+LL |     let _ = x.ln() / y.ln();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: log base can be expressed more clearly\n+  --> $DIR/floating_point_logbase.rs:8:13\n+   |\n+LL |     let _ = x.log2() / y.log2();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: log base can be expressed more clearly\n+  --> $DIR/floating_point_logbase.rs:9:13\n+   |\n+LL |     let _ = x.log10() / y.log10();\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: log base can be expressed more clearly\n+  --> $DIR/floating_point_logbase.rs:10:13\n+   |\n+LL |     let _ = x.log(5f32) / y.log(5f32);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "911700bab0040e2e4a33439c537b73cbbeb69721", "filename": "tests/ui/floating_point_mul_add.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_mul_add.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_mul_add.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.fixed?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -18,4 +18,9 @@ fn main() {\n \n     let _ = a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c)) + c;\n     let _ = 1234.567_f64.mul_add(45.67834_f64, 0.0004_f64);\n+\n+    let _ = a.mul_add(a, b).sqrt();\n+\n+    // Cases where the lint shouldn't be applied\n+    let _ = (a * a + b * b).sqrt();\n }"}, {"sha": "d202385fc8ae76a0ee0f169852b1d410b3a76f77", "filename": "tests/ui/floating_point_mul_add.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_mul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_mul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.rs?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -18,4 +18,9 @@ fn main() {\n \n     let _ = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n+\n+    let _ = (a * a + b).sqrt();\n+\n+    // Cases where the lint shouldn't be applied\n+    let _ = (a * a + b * b).sqrt();\n }"}, {"sha": "ac8d0c0cae068cf87162396380ce510e075d3477", "filename": "tests/ui/floating_point_mul_add.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_mul_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_mul_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.stderr?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -54,5 +54,11 @@ error: multiply and add expressions can be calculated more efficiently and accur\n LL |     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1234.567_f64.mul_add(45.67834_f64, 0.0004_f64)`\n \n-error: aborting due to 9 previous errors\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_mul_add.rs:22:13\n+   |\n+LL |     let _ = (a * a + b).sqrt();\n+   |             ^^^^^^^^^^^ help: consider using: `a.mul_add(a, b)`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "b0641a100cdc810b4a3c7d3d045928970dfe1272", "filename": "tests/ui/floating_point_powf.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powf.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powf.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.fixed?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let _ = (-3.1f32).exp();\n     let _ = x.sqrt();\n     let _ = x.cbrt();\n-    let _ = x.powi(2);\n+    let _ = x.powi(3);\n     let _ = x.powi(-2);\n     let _ = x.powi(16_777_215);\n     let _ = x.powi(-16_777_215);\n@@ -30,7 +30,7 @@ fn main() {\n     let _ = (-3.1f64).exp();\n     let _ = x.sqrt();\n     let _ = x.cbrt();\n-    let _ = x.powi(2);\n+    let _ = x.powi(3);\n     let _ = x.powi(-2);\n     let _ = x.powi(-2_147_483_648);\n     let _ = x.powi(2_147_483_647);"}, {"sha": "a0a2c973900f4b7ba943f29a7bb90dcecaf6a8ce", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let _ = std::f32::consts::E.powf(-3.1);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n-    let _ = x.powf(2.0);\n+    let _ = x.powf(3.0);\n     let _ = x.powf(-2.0);\n     let _ = x.powf(16_777_215.0);\n     let _ = x.powf(-16_777_215.0);\n@@ -30,7 +30,7 @@ fn main() {\n     let _ = std::f64::consts::E.powf(-3.1);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n-    let _ = x.powf(2.0);\n+    let _ = x.powf(3.0);\n     let _ = x.powf(-2.0);\n     let _ = x.powf(-2_147_483_648.0);\n     let _ = x.powf(2_147_483_647.0);"}, {"sha": "2422eb911e90a7041dedbecccf2fa2677a12710d", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -53,8 +53,8 @@ LL |     let _ = x.powf(1.0 / 3.0);\n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:14:13\n    |\n-LL |     let _ = x.powf(2.0);\n-   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+LL |     let _ = x.powf(3.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:15:13\n@@ -125,8 +125,8 @@ LL |     let _ = x.powf(1.0 / 3.0);\n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:33:13\n    |\n-LL |     let _ = x.powf(2.0);\n-   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+LL |     let _ = x.powf(3.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:34:13"}, {"sha": "56762400593b54fc3806cd7636594698fdf9962a", "filename": "tests/ui/floating_point_powi.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.fixed?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let one = 1;\n+    let x = 3f32;\n+    let _ = x * x;\n+    let _ = x * x;\n+\n+    let y = 4f32;\n+    let _ = x.mul_add(x, y);\n+    let _ = y.mul_add(y, x);\n+    let _ = x.mul_add(x, y).sqrt();\n+    let _ = y.mul_add(y, x).sqrt();\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.powi(3);\n+    let _ = x.powi(one + 1);\n+    let _ = (x.powi(2) + y.powi(2)).sqrt();\n+}"}, {"sha": "1f800e4628dcae43fa277f5cbabc5897b9b67008", "filename": "tests/ui/floating_point_powi.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.rs?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let one = 1;\n+    let x = 3f32;\n+    let _ = x.powi(2);\n+    let _ = x.powi(1 + 1);\n+\n+    let y = 4f32;\n+    let _ = x.powi(2) + y;\n+    let _ = x + y.powi(2);\n+    let _ = (x.powi(2) + y).sqrt();\n+    let _ = (x + y.powi(2)).sqrt();\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.powi(3);\n+    let _ = x.powi(one + 1);\n+    let _ = (x.powi(2) + y.powi(2)).sqrt();\n+}"}, {"sha": "d5a5f1bcca1015cb948a125e4c2b09c873b2de0c", "filename": "tests/ui/floating_point_powi.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_powi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.stderr?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,40 @@\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:7:13\n+   |\n+LL |     let _ = x.powi(2);\n+   |             ^^^^^^^^^ help: consider using: `x * x`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:8:13\n+   |\n+LL |     let _ = x.powi(1 + 1);\n+   |             ^^^^^^^^^^^^^ help: consider using: `x * x`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:11:13\n+   |\n+LL |     let _ = x.powi(2) + y;\n+   |             ^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:12:13\n+   |\n+LL |     let _ = x + y.powi(2);\n+   |             ^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:13:13\n+   |\n+LL |     let _ = (x.powi(2) + y).sqrt();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n+\n+error: square can be computed more efficiently\n+  --> $DIR/floating_point_powi.rs:14:13\n+   |\n+LL |     let _ = (x + y.powi(2)).sqrt();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "92480c5db8be446f807d15087515ecab6482fdc3", "filename": "tests/ui/floating_point_rad.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_rad.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_rad.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.fixed?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let _ = x.to_degrees();\n+    let _ = x.to_radians();\n+    // Cases where the lint shouldn't be applied\n+    let _ = x * 90f32 / std::f32::consts::PI;\n+    let _ = x * std::f32::consts::PI / 90f32;\n+    let _ = x * 180f32 / std::f32::consts::E;\n+    let _ = x * std::f32::consts::E / 180f32;\n+}"}, {"sha": "062e7c3fdc17afe8d7c1aa4d9a53aa00bff0ae3c", "filename": "tests/ui/floating_point_rad.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_rad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_rad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.rs?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let _ = x * 180f32 / std::f32::consts::PI;\n+    let _ = x * std::f32::consts::PI / 180f32;\n+    // Cases where the lint shouldn't be applied\n+    let _ = x * 90f32 / std::f32::consts::PI;\n+    let _ = x * std::f32::consts::PI / 90f32;\n+    let _ = x * 180f32 / std::f32::consts::E;\n+    let _ = x * std::f32::consts::E / 180f32;\n+}"}, {"sha": "a6ffdca64eefea7b563eec7a75c4002f87083be1", "filename": "tests/ui/floating_point_rad.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_rad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75d43aac73df6086ab9566a39d5ea7afe70d89c9/tests%2Fui%2Ffloating_point_rad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_rad.stderr?ref=75d43aac73df6086ab9566a39d5ea7afe70d89c9", "patch": "@@ -0,0 +1,16 @@\n+error: conversion to degrees can be done more accurately\n+  --> $DIR/floating_point_rad.rs:6:13\n+   |\n+LL |     let _ = x * 180f32 / std::f32::consts::PI;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_degrees()`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: conversion to radians can be done more accurately\n+  --> $DIR/floating_point_rad.rs:7:13\n+   |\n+LL |     let _ = x * std::f32::consts::PI / 180f32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.to_radians()`\n+\n+error: aborting due to 2 previous errors\n+"}]}