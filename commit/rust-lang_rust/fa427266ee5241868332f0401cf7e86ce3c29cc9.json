{"sha": "fa427266ee5241868332f0401cf7e86ce3c29cc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNDI3MjY2ZWU1MjQxODY4MzMyZjA0MDFjZjdlODZjZTNjMjljYzk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-02-26T19:06:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-02-26T19:06:39Z"}, "message": "Some drive-by improvements to SanePrivacyVisitor\n\nCheck that variant fields are not marked public by syntax extensions", "tree": {"sha": "ebacc225de425a2d049c2c0a7ff245a396536d72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebacc225de425a2d049c2c0a7ff245a396536d72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa427266ee5241868332f0401cf7e86ce3c29cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa427266ee5241868332f0401cf7e86ce3c29cc9", "html_url": "https://github.com/rust-lang/rust/commit/fa427266ee5241868332f0401cf7e86ce3c29cc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa427266ee5241868332f0401cf7e86ce3c29cc9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df4821698e867a468c9237af30cd5bc4a7bc2773", "url": "https://api.github.com/repos/rust-lang/rust/commits/df4821698e867a468c9237af30cd5bc4a7bc2773", "html_url": "https://github.com/rust-lang/rust/commit/df4821698e867a468c9237af30cd5bc4a7bc2773"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "e0ede288523b436c0295bc995dd315ddd27b6f60", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fa427266ee5241868332f0401cf7e86ce3c29cc9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa427266ee5241868332f0401cf7e86ce3c29cc9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=fa427266ee5241868332f0401cf7e86ce3c29cc9", "patch": "@@ -1139,10 +1139,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for SanePrivacyVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n-    /// Validates all of the visibility qualifiers placed on the item given. This\n-    /// ensures that there are no extraneous qualifiers that don't actually do\n-    /// anything. In theory these qualifiers wouldn't parse, but that may happen\n-    /// later on down the road...\n+    /// Validate that items that shouldn't have visibility qualifiers don't have them.\n+    /// Such qualifiers can be set by syntax extensions even if the parser doesn't allow them,\n+    /// so we check things like variant fields too.\n     fn check_sane_privacy(&self, item: &hir::Item) {\n         let check_inherited = |sp, vis, note: &str| {\n             if vis != hir::Inherited {\n@@ -1156,13 +1155,12 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         };\n \n         match item.node {\n-            // implementations of traits don't need visibility qualifiers because\n-            // that's controlled by having the trait in scope.\n             hir::ItemImpl(_, _, _, Some(..), _, ref impl_items) => {\n                 check_inherited(item.span, item.vis,\n                                 \"visibility qualifiers have no effect on trait impls\");\n                 for impl_item in impl_items {\n-                    check_inherited(impl_item.span, impl_item.vis, \"\");\n+                    check_inherited(impl_item.span, impl_item.vis,\n+                                    \"visibility qualifiers have no effect on trait impl items\");\n                 }\n             }\n             hir::ItemImpl(_, _, _, None, _, _) => {\n@@ -1177,7 +1175,15 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 check_inherited(item.span, item.vis,\n                                 \"place qualifiers on individual functions instead\");\n             }\n-            hir::ItemStruct(..) | hir::ItemEnum(..) | hir::ItemTrait(..) |\n+            hir::ItemEnum(ref def, _) => {\n+                for variant in &def.variants {\n+                    for field in variant.node.data.fields() {\n+                        check_inherited(field.span, field.node.kind.visibility(),\n+                                        \"visibility qualifiers have no effect on variant fields\");\n+                    }\n+                }\n+            }\n+            hir::ItemStruct(..) | hir::ItemTrait(..) |\n             hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n             hir::ItemMod(..) | hir::ItemExternCrate(..) |\n             hir::ItemUse(..) | hir::ItemTy(..) => {}\n@@ -1764,8 +1770,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n \n     let krate = tcx.map.krate();\n \n-    // Sanity check to make sure that all privacy usage and controls are\n-    // reasonable.\n+    // Sanity check to make sure that all privacy usage is reasonable.\n     let mut visitor = SanePrivacyVisitor { tcx: tcx };\n     krate.visit_all_items(&mut visitor);\n "}]}