{"sha": "ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "node_id": "C_kwDOAAsO6NoAKGVjOGQwMWZkY2NiZTY4ZDlhMmFkNmYyYzJmYmUwMDBhOWE2ZGE1MzA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-17T13:00:35Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:33:55Z"}, "message": "Allow iterators instead of requiring slices that will get turned into iterators", "tree": {"sha": "1c7aced8f51ff8c698b9218529b5bfc168c1159f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c7aced8f51ff8c698b9218529b5bfc168c1159f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "html_url": "https://github.com/rust-lang/rust/commit/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd40c10751baf6c0c5fc52c99900c0b9066ed11b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd40c10751baf6c0c5fc52c99900c0b9066ed11b", "html_url": "https://github.com/rust-lang/rust/commit/bd40c10751baf6c0c5fc52c99900c0b9066ed11b"}], "stats": {"total": 137, "additions": 69, "deletions": 68}, "files": [{"sha": "750d57b9c8c433ecb8621e3d71bea9fd9aeb164f", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             let trait_ref = tcx.mk_trait_ref(\n                 tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),\n                 place_ty.ty,\n-                &[],\n+                [],\n             );\n \n             // To have a `Copy` operand, the type `T` of the\n@@ -1277,7 +1277,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     let trait_ref = tcx.mk_trait_ref(\n                         tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                         place_ty,\n-                        &[],\n+                        [],\n                     );\n                     self.prove_trait_ref(\n                         trait_ref,\n@@ -1870,7 +1870,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             let trait_ref = tcx.mk_trait_ref(\n                                 tcx.require_lang_item(LangItem::Copy, Some(span)),\n                                 ty,\n-                                &[],\n+                                [],\n                             );\n \n                             self.prove_trait_ref(\n@@ -1887,7 +1887,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 let trait_ref = tcx.mk_trait_ref(\n                     tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                     ty,\n-                    &[],\n+                    [],\n                 );\n \n                 self.prove_trait_ref(\n@@ -1903,7 +1903,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 let trait_ref = tcx.mk_trait_ref(\n                     tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                     *ty,\n-                    &[],\n+                    [],\n                 );\n \n                 self.prove_trait_ref(\n@@ -2004,7 +2004,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         let trait_ref = tcx.mk_trait_ref(\n                             tcx.require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),\n                             op.ty(body, tcx),\n-                            &[ty.into()],\n+                            [ty.into()],\n                         );\n \n                         self.prove_trait_ref("}, {"sha": "4f1878a3f25862197087d371960788b2156a3d49", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -160,7 +160,7 @@ impl Qualif for NeedsNonConstDrop {\n             ObligationCause::dummy(),\n             cx.param_env,\n             ty::Binder::dummy(ty::TraitPredicate {\n-                trait_ref: cx.tcx.mk_trait_ref(destruct, ty, &[]),\n+                trait_ref: cx.tcx.mk_trait_ref(destruct, ty, []),\n                 constness: ty::BoundConstness::ConstIfConst,\n                 polarity: ty::ImplPolarity::Positive,\n             }),"}, {"sha": "17cdbdb70fbe9d6a4a64f49a9d7cedea38c8f6da", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> Bounds<'tcx> {\n         // If it could be sized, and is, add the `Sized` predicate.\n         let sized_predicate = self.implicitly_sized.and_then(|span| {\n             tcx.lang_items().sized_trait().map(move |sized| {\n-                let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized, param_ty, &[]));\n+                let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized, param_ty, []));\n                 (trait_ref.without_const().to_predicate(tcx), span)\n             })\n         });"}, {"sha": "1538d0a1bbb96c838c836580d7643f61e648813c", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -1782,7 +1782,7 @@ fn receiver_is_implemented<'tcx>(\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n     let tcx = wfcx.tcx();\n-    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, receiver_ty, &[]));\n+    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, receiver_ty, []));\n \n     let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref.without_const());\n "}, {"sha": "31432bb6e417005021ce63f5c558e4d29d6ea916", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -545,9 +545,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                             ty::PredicateKind::Projection(mut proj_pred) => {\n                                 assert_eq!(proj_pred.projection_ty.self_ty(), opaque_ty);\n-                                proj_pred.projection_ty.substs = self\n-                                    .tcx\n-                                    .mk_substs_trait(ty, &proj_pred.projection_ty.substs[1..]);\n+                                proj_pred.projection_ty.substs = self.tcx.mk_substs_trait(\n+                                    ty,\n+                                    proj_pred.projection_ty.substs.iter().skip(1),\n+                                );\n                                 ty::PredicateKind::Projection(proj_pred)\n                             }\n                             _ => continue,"}, {"sha": "12cbc743bf9415fe4296b2cbfadafc2d9d81e972", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -807,7 +807,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 self.param_env,\n                 ty::Binder::dummy(ty::TraitRef::new(\n                     self.tcx.require_lang_item(hir::LangItem::PointerSized, Some(self.cause.span)),\n-                    self.tcx.mk_substs_trait(a, &[]),\n+                    self.tcx.mk_substs_trait(a, []),\n                 ))\n                 .to_poly_trait_predicate(),\n             ));"}, {"sha": "fcef6f32e1097257fdc098dea025dfe53b355591", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -1095,7 +1095,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.param_env,\n                 ty::Binder::dummy(self.tcx.mk_trait_ref(\n                     into_def_id,\n-                    expr_ty, &[expected_ty.into()]\n+                    expr_ty, [expected_ty.into()]\n                 ))\n                 .to_poly_trait_predicate(),\n             ))"}, {"sha": "6b228377ed004ee348b0aa8df16f16759f2ce2cc", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let trait_ref = tcx.mk_trait_ref(\n                             fn_once,\n                             ty,\n-                            &[self\n+                            [self\n                                 .next_ty_var(TypeVariableOrigin {\n                                     kind: TypeVariableOriginKind::MiscVariable,\n                                     span,"}, {"sha": "a25929330f8b8c5858991044d7dcada55ad54c67", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -27,7 +27,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         def_id: DefId,\n         cause: ObligationCause<'tcx>,\n     ) {\n-        let trait_ref = infcx.tcx.mk_trait_ref(def_id, ty, &[]);\n+        let trait_ref = infcx.tcx.mk_trait_ref(def_id, ty, []);\n         self.register_predicate_obligation(\n             infcx,\n             Obligation {"}, {"sha": "b8e6f0258d0191a7b397741b57b27d6469c644c7", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> OverloadedDeref<'tcx> {\n             .find(|m| m.kind == ty::AssocKind::Fn)\n             .unwrap()\n             .def_id;\n-        tcx.mk_fn_def(method_def_id, tcx.mk_substs_trait(source, &[]))\n+        tcx.mk_fn_def(method_def_id, tcx.mk_substs_trait(source, []))\n     }\n }\n "}, {"sha": "c43447ae05db4fab287be5ef4d322c266eeff741", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -2809,20 +2809,26 @@ impl<'tcx> TyCtxt<'tcx> {\n         iter.intern_with(|xs| self.intern_place_elems(xs))\n     }\n \n-    pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {\n-        self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))\n+    pub fn mk_substs_trait(\n+        self,\n+        self_ty: Ty<'tcx>,\n+        rest: impl IntoIterator<Item = GenericArg<'tcx>>,\n+    ) -> SubstsRef<'tcx> {\n+        self.mk_substs(iter::once(self_ty.into()).chain(rest))\n     }\n \n     pub fn mk_trait_ref(\n         self,\n         trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n-        rest: &[GenericArg<'tcx>],\n+        rest: impl IntoIterator<Item = GenericArg<'tcx>, IntoIter: ExactSizeIterator>,\n     ) -> ty::TraitRef<'tcx> {\n+        let rest = rest.into_iter();\n         debug_assert_eq!(\n             self.generics_of(trait_def_id).count() - 1,\n             rest.len(),\n-            \"wrong number of generic parameters for {trait_def_id:?} on self type {self_ty:?}: {rest:?} \\nDid you accidentally include the self-type in the params list?\"\n+            \"wrong number of generic parameters for {trait_def_id:?} on self type {self_ty:?}: {:?} \\nDid you accidentally include the self-type in the params list?\",\n+            rest.collect::<Vec<_>>(),\n         );\n         let substs = self.mk_substs_trait(self_ty, rest);\n         ty::TraitRef::new(trait_def_id, substs)"}, {"sha": "586460986dd73cbad18633ee4f318a8be72e3c57", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -551,7 +551,7 @@ impl<'tcx> Instance<'tcx> {\n         let sig =\n             tcx.try_normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), sig).ok()?;\n         assert_eq!(sig.inputs().len(), 1);\n-        let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n+        let substs = tcx.mk_substs_trait(self_ty, [sig.inputs()[0].into()]);\n \n         debug!(?self_ty, ?sig);\n         Some(Instance { def, substs })"}, {"sha": "35ab8b2af6b54b71b742673a5f847129dd75c4f6", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -719,7 +719,7 @@ impl<'tcx> PolyExistentialPredicate<'tcx> {\n                 self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)\n             }\n             ExistentialPredicate::AutoTrait(did) => {\n-                let trait_ref = self.rebind(tcx.mk_trait_ref(did, self_ty, &[]));\n+                let trait_ref = self.rebind(tcx.mk_trait_ref(did, self_ty, []));\n                 trait_ref.without_const().to_predicate(tcx)\n             }\n         }\n@@ -812,7 +812,7 @@ impl<'tcx> TraitRef<'tcx> {\n     }\n \n     pub fn with_self_type(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n-        tcx.mk_trait_ref(self.def_id, self_ty, &self.substs[1..])\n+        tcx.mk_trait_ref(self.def_id, self_ty, self.substs.iter().skip(1))\n     }\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n@@ -910,7 +910,7 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n         // otherwise the escaping vars would be captured by the binder\n         // debug_assert!(!self_ty.has_escaping_bound_vars());\n \n-        tcx.mk_trait_ref(self.def_id, self_ty, self.substs)\n+        tcx.mk_trait_ref(self.def_id, self_ty, self.substs.iter())\n     }\n }\n "}, {"sha": "0a6a8859d2f86de2033b5645249b10984142b07b", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -840,7 +840,7 @@ fn trait_method<'tcx>(\n     self_ty: Ty<'tcx>,\n     params: &[GenericArg<'tcx>],\n ) -> ConstantKind<'tcx> {\n-    let substs = tcx.mk_substs_trait(self_ty, params);\n+    let substs = tcx.mk_substs_trait(self_ty, params.iter().copied());\n \n     // The unhygienic comparison here is acceptable because this is only\n     // used on known traits."}, {"sha": "ce87a1916b4658034ba7941ab6149b7713375ad0", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -615,7 +615,7 @@ where\n         let drop_trait = tcx.require_lang_item(LangItem::Drop, None);\n         let drop_fn = tcx.associated_item_def_ids(drop_trait)[0];\n         let ty = self.place_ty(self.place);\n-        let substs = tcx.mk_substs_trait(ty, &[]);\n+        let substs = tcx.mk_substs_trait(ty, []);\n \n         let ref_ty =\n             tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut { ty, mutbl: hir::Mutability::Mut });"}, {"sha": "68703eb0a232e781613cea056be79b8a258b5049", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -346,7 +346,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n         // we must subst the self_ty because it's\n         // otherwise going to be TySelf and we can't index\n         // or access fields of a Place of type TySelf.\n-        let substs = tcx.mk_substs_trait(self_ty, &[]);\n+        let substs = tcx.mk_substs_trait(self_ty, []);\n         let sig = tcx.bound_fn_sig(def_id).subst(tcx, substs);\n         let sig = tcx.erase_late_bound_regions(sig);\n         let span = tcx.def_span(def_id);\n@@ -427,7 +427,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n     ) {\n         let tcx = self.tcx;\n \n-        let substs = tcx.mk_substs_trait(ty, &[]);\n+        let substs = tcx.mk_substs_trait(ty, []);\n \n         // `func == Clone::clone(&ty) -> ty`\n         let func_ty = tcx.mk_fn_def(self.def_id, substs);\n@@ -586,7 +586,7 @@ fn build_call_shim<'tcx>(\n \n         // Create substitutions for the `Self` and `Args` generic parameters of the shim body.\n         let arg_tup = tcx.mk_tup(untuple_args.iter());\n-        let sig_substs = tcx.mk_substs_trait(ty, &[ty::subst::GenericArg::from(arg_tup)]);\n+        let sig_substs = tcx.mk_substs_trait(ty, [ty::subst::GenericArg::from(arg_tup)]);\n \n         (Some(sig_substs), Some(untuple_args))\n     } else {"}, {"sha": "8eb489bb5962b546514ed0339f26a5343b686ca8", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -29,7 +29,7 @@ fn custom_coerce_unsize_info<'tcx>(\n ) -> CustomCoerceUnsized {\n     let def_id = tcx.require_lang_item(LangItem::CoerceUnsized, None);\n \n-    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(def_id, source_ty, &[target_ty.into()]));\n+    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(def_id, source_ty, [target_ty.into()]));\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {"}, {"sha": "415bd8de145ac4b32f1ed113a78dbdcb6f8c1ed2", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, ty, &[]);\n+        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, ty, []);\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n "}, {"sha": "c7dc7b1049c69adf5d01b0dbf119189de8925e1b", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n-        let trait_ref = tcx.mk_trait_ref(trait_did, ty, &[]);\n+        let trait_ref = tcx.mk_trait_ref(trait_did, ty, []);\n \n         let trait_pred = ty::Binder::dummy(trait_ref);\n \n@@ -260,7 +260,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n         predicates.push_back(ty::Binder::dummy(ty::TraitPredicate {\n-            trait_ref: infcx.tcx.mk_trait_ref(trait_did, ty, &[]),\n+            trait_ref: infcx.tcx.mk_trait_ref(trait_did, ty, []),\n \n             constness: ty::BoundConstness::NotConst,\n             // Auto traits are positive"}, {"sha": "09c2449bdaeecf51f44f9972ab6df2de069f7d8d", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -93,7 +93,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         def_id: DefId,\n     ) {\n         let tcx = self.infcx.tcx;\n-        let trait_ref = tcx.mk_trait_ref(def_id, ty, &[]);\n+        let trait_ref = tcx.mk_trait_ref(def_id, ty, []);\n         self.register_obligation(Obligation {\n             cause,\n             recursion_depth: 0,"}, {"sha": "3d0f87942c33ac21ce29ed02ebb4942209480a5a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -347,8 +347,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     span: DUMMY_SP,\n                     kind: TypeVariableOriginKind::MiscVariable,\n                 });\n-                let trait_ref =\n-                    self.tcx.mk_trait_ref(trait_def_id, ty.skip_binder(), &[var.into()]);\n+                let trait_ref = self.tcx.mk_trait_ref(trait_def_id, ty.skip_binder(), [var.into()]);\n                 let obligation = Obligation::new(\n                     self.tcx,\n                     ObligationCause::dummy(),"}, {"sha": "4b6d8177381a9f21adf15f54fd8f1c1f96f34ac4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -2985,7 +2985,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     self.tcx.mk_projection(\n                         item_def_id,\n                         // Future::Output has no substs\n-                        self.tcx.mk_substs_trait(trait_pred.self_ty(), &[]),\n+                        self.tcx.mk_substs_trait(trait_pred.self_ty(), []),\n                     )\n                 });\n                 let projection_ty = normalize_to(\n@@ -3068,13 +3068,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // Ensure all fields impl the trait.\n                 adt.all_fields().all(|field| {\n                     let field_ty = field.ty(self.tcx, substs);\n-                    let trait_substs;\n-                    let trait_substs: &[_] = match diagnostic_name {\n+                    let trait_substs = match diagnostic_name {\n                         sym::PartialEq | sym::PartialOrd => {\n-                            trait_substs = [field_ty.into()];\n-                            &trait_substs\n+                            Some(field_ty.into())\n                         }\n-                        _ => &[],\n+                        _ => None,\n                     };\n                     let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n                         trait_ref: self.tcx.mk_trait_ref("}, {"sha": "7eb21e156fd2ef2f1c76fb84abf32af541b4af3a", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -143,7 +143,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     def_id: DefId,\n     span: Span,\n ) -> bool {\n-    let trait_ref = ty::Binder::dummy(infcx.tcx.mk_trait_ref(def_id, ty, &[]));\n+    let trait_ref = ty::Binder::dummy(infcx.tcx.mk_trait_ref(def_id, ty, []));\n     pred_known_to_hold_modulo_regions(infcx, param_env, trait_ref.without_const(), span)\n }\n \n@@ -902,7 +902,7 @@ pub fn vtable_trait_upcasting_coercion_new_vptr_slot<'tcx>(\n     // this has been typecked-before, so diagnostics is not really needed.\n     let unsize_trait_did = tcx.require_lang_item(LangItem::Unsize, None);\n \n-    let trait_ref = tcx.mk_trait_ref(unsize_trait_did, source, &[target.into()]);\n+    let trait_ref = tcx.mk_trait_ref(unsize_trait_did, source, [target.into()]);\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), ty::Binder::dummy(trait_ref))) {\n         Ok(ImplSource::TraitUpcasting(implsrc_traitcasting)) => {"}, {"sha": "29b315bff16d96ca468d0ac48eaf7687cabaf255", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -688,7 +688,7 @@ fn receiver_is_dispatchable<'tcx>(\n         let unsize_predicate = ty::Binder::dummy(tcx.mk_trait_ref(\n             unsize_did,\n             tcx.types.self_param,\n-            &[unsized_self_ty.into()],\n+            [unsized_self_ty.into()],\n         ))\n         .without_const()\n         .to_predicate(tcx);\n@@ -724,7 +724,7 @@ fn receiver_is_dispatchable<'tcx>(\n         let predicate = ty::Binder::dummy(tcx.mk_trait_ref(\n             dispatch_from_dyn_did,\n             receiver_ty,\n-            &[unsized_receiver_ty.into()],\n+            [unsized_receiver_ty.into()],\n         ))\n         .without_const();\n "}, {"sha": "b8fe4c8640542135fd66737a4217ea3e3d90b580", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -1712,7 +1712,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                                 selcx.tcx(),\n                                 ty::Binder::dummy(selcx.tcx().mk_trait_ref(\n                                     selcx.tcx().require_lang_item(LangItem::Sized, None),\n-                                    self_ty, &[],\n+                                    self_ty, [],\n                                 ))\n                                 .without_const(),\n                             ),\n@@ -1969,7 +1969,7 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n         let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(\n             tcx.require_lang_item(LangItem::Sized, None),\n             self_ty,\n-            &[],\n+            [],\n         ))\n         .without_const();\n         obligations.push(obligation.with(tcx, sized_predicate));"}, {"sha": "b11f2c8e6a4671bbacd750faed02c9350040790c", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -714,7 +714,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // <ty as Deref>\n-        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, ty, &[]);\n+        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, ty, []);\n \n         let obligation = traits::Obligation::new(\n             tcx,"}, {"sha": "5c3a132bb5ceb24c82f381253b2e3ffcb2293173", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -635,7 +635,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tr = ty::Binder::dummy(self.tcx().mk_trait_ref(\n             self.tcx().require_lang_item(LangItem::Sized, None),\n             output_ty,\n-            &[],\n+            [],\n         ));\n         nested.push(Obligation::new(\n             self.infcx.tcx,\n@@ -1000,7 +1000,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let tr = ty::Binder::dummy(tcx.mk_trait_ref(\n                     tcx.require_lang_item(LangItem::Sized, None),\n                     source,\n-                    &[],\n+                    [],\n                 ));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n@@ -1258,7 +1258,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             trait_ref: self.tcx().mk_trait_ref(\n                                 self.tcx().require_lang_item(LangItem::Destruct, None),\n                                 nested_ty,\n-                                &[],\n+                                [],\n                             ),\n                             constness: ty::BoundConstness::ConstIfConst,\n                             polarity: ty::ImplPolarity::Positive,\n@@ -1283,7 +1283,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         trait_ref: self.tcx().mk_trait_ref(\n                             self.tcx().require_lang_item(LangItem::Destruct, None),\n                             nested_ty,\n-                            &[],\n+                            [],\n                         ),\n                         constness: ty::BoundConstness::ConstIfConst,\n                         polarity: ty::ImplPolarity::Positive,"}, {"sha": "41798e00caaa7609797b98b33ef4cd690bfff0f2", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -241,7 +241,7 @@ pub fn predicate_for_trait_def<'tcx>(\n     self_ty: Ty<'tcx>,\n     params: &[GenericArg<'tcx>],\n ) -> PredicateObligation<'tcx> {\n-    let trait_ref = tcx.mk_trait_ref(trait_def_id, self_ty, params);\n+    let trait_ref = tcx.mk_trait_ref(trait_def_id, self_ty, params.iter().copied());\n     predicate_for_trait_ref(tcx, cause, param_env, trait_ref, recursion_depth)\n }\n \n@@ -304,7 +304,7 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n         TupleArgumentsFlag::Yes => tcx.intern_tup(sig.skip_binder().inputs()),\n     };\n     debug_assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, self_ty, &[arguments_tuple.into()]);\n+    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, self_ty, [arguments_tuple.into()]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n \n@@ -316,7 +316,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n     debug_assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref =\n-        tcx.mk_trait_ref(fn_trait_def_id, self_ty, &[sig.skip_binder().resume_ty.into()]);\n+        tcx.mk_trait_ref(fn_trait_def_id, self_ty, [sig.skip_binder().resume_ty.into()]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n "}, {"sha": "378e673879522210844c0064f3d9611cb8ff2801", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -421,11 +421,8 @@ impl<'tcx> WfPredicates<'tcx> {\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n-            let trait_ref = self.tcx.mk_trait_ref(\n-                self.tcx.require_lang_item(LangItem::Sized, None),\n-                subty,\n-                &[],\n-            );\n+            let trait_ref =\n+                self.tcx.mk_trait_ref(self.tcx.require_lang_item(LangItem::Sized, None), subty, []);\n             self.out.push(traits::Obligation::with_depth(\n                 self.tcx,\n                 cause,"}, {"sha": "06a42a95d6061d0fe501cf85a4f45e274ecd5d27", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -689,7 +689,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n                         trait_id: chalk_ir::TraitId(def_id),\n                         substitution: interner\n                             .tcx\n-                            .mk_substs_trait(self_ty, &[])\n+                            .mk_substs_trait(self_ty, [])\n                             .lower_into(interner),\n                     }),\n                 ),"}, {"sha": "26db976820653310b080d12dd99594356c5398bb", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -49,7 +49,7 @@ fn sized_constraint_for_ty<'tcx>(\n             // it on the impl.\n \n             let Some(sized_trait) = tcx.lang_items().sized_trait() else { return vec![ty] };\n-            let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(sized_trait, ty, &[]))\n+            let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(sized_trait, ty, []))\n                 .without_const()\n                 .to_predicate(tcx);\n             let predicates = tcx.predicates_of(adtdef.did()).predicates;"}, {"sha": "bd55517311d7e238515ded10430b77d9836493e8", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -44,7 +44,7 @@ where\n         discard_positive_impl: bool,\n     ) -> Option<Item> {\n         let tcx = self.cx.tcx;\n-        let trait_ref = tcx.mk_trait_ref(trait_def_id, ty, &[]);\n+        let trait_ref = tcx.mk_trait_ref(trait_def_id, ty, []);\n         if !self.cx.generated_synthetics.insert((ty, trait_def_id)) {\n             debug!(\"get_auto_trait_impl_for({:?}): already generated, aborting\", trait_ref);\n             return None;"}, {"sha": "82d368bb8bc2c1e127d74f8c07530e152c2ba84c", "filename": "src/tools/clippy/clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -59,7 +59,7 @@ fn is_impl_not_trait_with_bool_out(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n             )\n         })\n         .map_or(false, |assoc_item| {\n-            let proj = cx.tcx.mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n+            let proj = cx.tcx.mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(ty, []));\n             let nty = cx.tcx.normalize_erasing_regions(cx.param_env, proj);\n \n             nty.is_bool()"}, {"sha": "03d865af374a2d7132e13c27077aeefa8308499c", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -1263,7 +1263,7 @@ fn replace_types<'tcx>(\n                     let item_def_id = projection_predicate.projection_ty.item_def_id;\n                     let assoc_item = cx.tcx.associated_item(item_def_id);\n                     let projection = cx.tcx\n-                        .mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(new_ty, &[]));\n+                        .mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(new_ty, []));\n \n                     if let Ok(projected_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, projection)\n                         && substs[term_param_ty.index as usize] != ty::GenericArg::from(projected_ty)"}, {"sha": "a1698a61e6014301b7a4e3b93e2481f86570c21e", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=ec8d01fdccbe68d9a2ad6f2c2fbe000a9a6da530", "patch": "@@ -79,7 +79,7 @@ pub fn get_associated_type<'tcx>(\n         .associated_items(trait_id)\n         .find_by_name_and_kind(cx.tcx, Ident::from_str(name), ty::AssocKind::Type, trait_id)\n         .and_then(|assoc| {\n-            let proj = cx.tcx.mk_projection(assoc.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n+            let proj = cx.tcx.mk_projection(assoc.def_id, cx.tcx.mk_substs_trait(ty, []));\n             cx.tcx.try_normalize_erasing_regions(cx.param_env, proj).ok()\n         })\n }"}]}