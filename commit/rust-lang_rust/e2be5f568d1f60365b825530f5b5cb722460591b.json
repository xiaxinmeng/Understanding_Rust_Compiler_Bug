{"sha": "e2be5f568d1f60365b825530f5b5cb722460591b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYmU1ZjU2OGQxZjYwMzY1YjgyNTUzMGY1YjVjYjcyMjQ2MDU5MWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-09T20:04:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-09T20:04:04Z"}, "message": "Auto merge of #74595 - lcnr:ConstEvaluatable-fut-compat, r=oli-obk\n\nmake `ConstEvaluatable` more strict\n\nrelevant zulip discussion: https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.60ConstEvaluatable.60.20generic.20functions/near/204125452\n\nLet's see how much this impacts. Depending on how this goes this should probably be a future compat warning.\n\nShort explanation: we currently forbid anonymous constants which depend on generic types, e.g. `[0; std::mem::size_of::<T>]` currently errors.\n\nWe previously checked this by evaluating the constant and returned an error if that failed. This however allows things like\n```rust\nconst fn foo<T>() -> usize {\n    if std::mem::size_of::<*mut T>() < 8 { // size of *mut T does not depend on T\n        std::mem::size_of::<T>()\n    } else {\n        8\n    }\n}\n\nfn test<T>() {\n    let _ = [0; foo::<T>()];\n}\n```\nwhich is a backwards compatibility hazard. This also has worrying interactions with mir optimizations (https://github.com/rust-lang/rust/pull/74491#issuecomment-661890421) and intrinsics (#74538).\n\nr? `@oli-obk` `@eddyb`", "tree": {"sha": "0cbb2200538ae294e0849811e4707f4ddeea6b1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cbb2200538ae294e0849811e4707f4ddeea6b1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2be5f568d1f60365b825530f5b5cb722460591b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2be5f568d1f60365b825530f5b5cb722460591b", "html_url": "https://github.com/rust-lang/rust/commit/e2be5f568d1f60365b825530f5b5cb722460591b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2be5f568d1f60365b825530f5b5cb722460591b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d92155bf6ae0b7d79fc83cbeeb0cc0c765353471", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92155bf6ae0b7d79fc83cbeeb0cc0c765353471", "html_url": "https://github.com/rust-lang/rust/commit/d92155bf6ae0b7d79fc83cbeeb0cc0c765353471"}, {"sha": "74e07198a08fea62ab2fba9ae258f4d118d7dffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e07198a08fea62ab2fba9ae258f4d118d7dffe", "html_url": "https://github.com/rust-lang/rust/commit/74e07198a08fea62ab2fba9ae258f4d118d7dffe"}], "stats": {"total": 202, "additions": 184, "deletions": 18}, "files": [{"sha": "3c041bbc0aedd05a20a793bd475de498011ed793", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -186,6 +186,23 @@ pub struct Body<'tcx> {\n     /// FIXME(oli-obk): rewrite the promoted during promotion to eliminate the cell components.\n     pub ignore_interior_mut_in_const_validation: bool,\n \n+    /// Does this body use generic parameters. This is used for the `ConstEvaluatable` check.\n+    ///\n+    /// Note that this does not actually mean that this body is not computable right now.\n+    /// The repeat count in the following example is polymorphic, but can still be evaluated\n+    /// without knowing anything about the type parameter `T`.\n+    ///\n+    /// ```rust\n+    /// fn test<T>() {\n+    ///     let _ = [0; std::mem::size_of::<*mut T>()];\n+    /// }\n+    /// ```\n+    ///\n+    /// **WARNING**: Do not change this flags after the MIR was originally created, even if an optimization\n+    /// removed the last mention of all generic params. We do not want to rely on optimizations and\n+    /// potentially allow things like `[u8; std::mem::size_of::<T>() * 0]` due to this.\n+    pub is_polymorphic: bool,\n+\n     predecessor_cache: PredecessorCache,\n }\n \n@@ -208,7 +225,7 @@ impl<'tcx> Body<'tcx> {\n             local_decls.len()\n         );\n \n-        Body {\n+        let mut body = Body {\n             phase: MirPhase::Build,\n             basic_blocks,\n             source_scopes,\n@@ -224,8 +241,11 @@ impl<'tcx> Body<'tcx> {\n             span,\n             required_consts: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,\n+            is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n-        }\n+        };\n+        body.is_polymorphic = body.has_param_types_or_consts();\n+        body\n     }\n \n     /// Returns a partially initialized MIR body containing only a list of basic blocks.\n@@ -234,7 +254,7 @@ impl<'tcx> Body<'tcx> {\n     /// is only useful for testing but cannot be `#[cfg(test)]` because it is used in a different\n     /// crate.\n     pub fn new_cfg_only(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>) -> Self {\n-        Body {\n+        let mut body = Body {\n             phase: MirPhase::Build,\n             basic_blocks,\n             source_scopes: IndexVec::new(),\n@@ -250,8 +270,11 @@ impl<'tcx> Body<'tcx> {\n             generator_kind: None,\n             var_debug_info: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,\n+            is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n-        }\n+        };\n+        body.is_polymorphic = body.has_param_types_or_consts();\n+        body\n     }\n \n     #[inline]"}, {"sha": "2bcf10b8b38789290203f503bb9ff32eecad2bbd", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -539,6 +539,16 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    pub CONST_EVALUATABLE_UNCHECKED,\n+    Warn,\n+    \"detects a generic constant is used in a type without a emitting a warning\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #76200 <https://github.com/rust-lang/rust/issues/76200>\",\n+        edition: None,\n+    };\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -612,6 +622,7 @@ declare_lint_pass! {\n         UNSAFE_OP_IN_UNSAFE_FN,\n         INCOMPLETE_INCLUDE,\n         CENUM_IMPL_DROP_CAST,\n+        CONST_EVALUATABLE_UNCHECKED,\n     ]\n }\n "}, {"sha": "013cd71ea305d03227cd3957fcff0bc73cde868e", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -0,0 +1,61 @@\n+use rustc_hir::def::DefKind;\n+use rustc_infer::infer::InferCtxt;\n+use rustc_middle::mir::interpret::ErrorHandled;\n+use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::{self, TypeFoldable};\n+use rustc_session::lint;\n+use rustc_span::def_id::DefId;\n+use rustc_span::Span;\n+\n+pub fn is_const_evaluatable<'cx, 'tcx>(\n+    infcx: &InferCtxt<'cx, 'tcx>,\n+    def: ty::WithOptConstParam<DefId>,\n+    substs: SubstsRef<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    span: Span,\n+) -> Result<(), ErrorHandled> {\n+    let future_compat_lint = || {\n+        if let Some(local_def_id) = def.did.as_local() {\n+            infcx.tcx.struct_span_lint_hir(\n+                lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n+                infcx.tcx.hir().local_def_id_to_hir_id(local_def_id),\n+                span,\n+                |err| {\n+                    err.build(\"cannot use constants which depend on generic parameters in types\")\n+                        .emit();\n+                },\n+            );\n+        }\n+    };\n+\n+    // FIXME: We should only try to evaluate a given constant here if it is fully concrete\n+    // as we don't want to allow things like `[u8; std::mem::size_of::<*mut T>()]`.\n+    //\n+    // We previously did not check this, so we only emit a future compat warning if\n+    // const evaluation succeeds and the given constant is still polymorphic for now\n+    // and hopefully soon change this to an error.\n+    //\n+    // See #74595 for more details about this.\n+    let concrete = infcx.const_eval_resolve(param_env, def, substs, None, Some(span));\n+\n+    let def_kind = infcx.tcx.def_kind(def.did);\n+    match def_kind {\n+        DefKind::AnonConst => {\n+            let mir_body = if let Some(def) = def.as_const_arg() {\n+                infcx.tcx.optimized_mir_of_const_arg(def)\n+            } else {\n+                infcx.tcx.optimized_mir(def.did)\n+            };\n+            if mir_body.is_polymorphic && concrete.is_ok() {\n+                future_compat_lint();\n+            }\n+        }\n+        _ => {\n+            if substs.has_param_types_or_consts() && concrete.is_ok() {\n+                future_compat_lint();\n+            }\n+        }\n+    }\n+\n+    concrete.map(drop)\n+}"}, {"sha": "4818022bf6202a5280d310c5a973d7977785f84b", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Binder, Const, Ty, TypeFoldable};\n use std::marker::PhantomData;\n \n+use super::const_evaluatable;\n use super::project;\n use super::select::SelectionContext;\n use super::wf;\n@@ -458,15 +459,15 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n \n                 ty::PredicateAtom::ConstEvaluatable(def_id, substs) => {\n-                    match self.selcx.infcx().const_eval_resolve(\n-                        obligation.param_env,\n+                    match const_evaluatable::is_const_evaluatable(\n+                        self.selcx.infcx(),\n                         def_id,\n                         substs,\n-                        None,\n-                        Some(obligation.cause.span),\n+                        obligation.param_env,\n+                        obligation.cause.span,\n                     ) {\n-                        Ok(_) => ProcessResult::Changed(vec![]),\n-                        Err(err) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(err))),\n+                        Ok(()) => ProcessResult::Changed(vec![]),\n+                        Err(e) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(e))),\n                     }\n                 }\n "}, {"sha": "49dac873cde2d3e9a25341860d4f73f7dee4ca4f", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -7,6 +7,7 @@ pub mod auto_trait;\n mod chalk_fulfill;\n pub mod codegen;\n mod coherence;\n+mod const_evaluatable;\n mod engine;\n pub mod error_reporting;\n mod fulfill;"}, {"sha": "7e8e2baa8a13d9d67a55f34c38f5890b2563aa2f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -6,6 +6,7 @@ use self::EvaluationResult::*;\n use self::SelectionCandidate::*;\n \n use super::coherence::{self, Conflict};\n+use super::const_evaluatable;\n use super::project;\n use super::project::normalize_with_depth_to;\n use super::util;\n@@ -542,14 +543,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::PredicateAtom::ConstEvaluatable(def_id, substs) => {\n-                match self.tcx().const_eval_resolve(\n-                    obligation.param_env,\n+                match const_evaluatable::is_const_evaluatable(\n+                    self.infcx,\n                     def_id,\n                     substs,\n-                    None,\n-                    None,\n+                    obligation.param_env,\n+                    obligation.cause.span,\n                 ) {\n-                    Ok(_) => Ok(EvaluatedToOk),\n+                    Ok(()) => Ok(EvaluatedToOk),\n                     Err(ErrorHandled::TooGeneric) => Ok(EvaluatedToAmbig),\n                     Err(_) => Ok(EvaluatedToErr),\n                 }"}, {"sha": "a6777632254b71e5ce5412a3719d2e55060220ea", "filename": "src/test/ui/const_evaluatable/associated-const.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fconst_evaluatable%2Fassociated-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fconst_evaluatable%2Fassociated-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fassociated-const.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+struct Foo<T>(T);\n+impl<T> Foo<T> {\n+    const VALUE: usize = std::mem::size_of::<T>();\n+}\n+\n+fn test<T>() {\n+    let _ = [0; Foo::<u8>::VALUE];\n+}\n+\n+fn main() {}"}, {"sha": "b5de66621c50ee950cd6b1640a5d877ddeb226ba", "filename": "src/test/ui/const_evaluatable/function-call.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fconst_evaluatable%2Ffunction-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fconst_evaluatable%2Ffunction-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Ffunction-call.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+const fn foo<T>() -> usize {\n+    // We might instead branch on `std::mem::size_of::<*mut T>() < 8` here,\n+    // which would cause this function to fail on 32 bit systems.\n+    if false {\n+        std::mem::size_of::<T>()\n+    } else {\n+        8\n+    }\n+}\n+\n+fn test<T>() {\n+    let _ = [0; foo::<T>()];\n+    //~^ WARN cannot use constants which depend on generic parameters in types\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+}\n+\n+fn main() {}"}, {"sha": "0d8463714e8dfe131e355faf634a9f423ffb9c41", "filename": "src/test/ui/const_evaluatable/function-call.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fconst_evaluatable%2Ffunction-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fconst_evaluatable%2Ffunction-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Ffunction-call.stderr?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -0,0 +1,12 @@\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/function-call.rs:14:17\n+   |\n+LL |     let _ = [0; foo::<T>()];\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cdc1db4c0b48203e3adfad7d21c1b263147db072", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-\n #![feature(arbitrary_enum_discriminant, core_intrinsics)]\n \n extern crate core;\n@@ -9,6 +8,8 @@ use core::intrinsics::discriminant_value;\n enum MyWeirdOption<T> {\n     None = 0,\n     Some(T) = core::mem::size_of::<*mut T>(),\n+    //~^ WARN cannot use constants which depend on generic parameters in types\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n }\n \n fn main() {"}, {"sha": "906927e705ee8cbb75212d6f0fc4cf9e310bede6", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -0,0 +1,12 @@\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/issue-70453-polymorphic-ctfe.rs:10:15\n+   |\n+LL |     Some(T) = core::mem::size_of::<*mut T>(),\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "6dd1648c9b84c46c1c49a1f20ee7de11c0c775c9", "filename": "src/test/ui/impl-trait/issue-56445.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-56445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-56445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-56445.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -5,8 +5,7 @@\n \n use std::marker::PhantomData;\n \n-pub struct S<'a>\n-{\n+pub struct S<'a> {\n     pub m1: PhantomData<&'a u8>,\n     pub m2: [u8; S::size()],\n }"}, {"sha": "e10040652c78d36dbce7febd3c60b08c3f11d699", "filename": "src/test/ui/lazy_normalization_consts/issue-73980.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -10,5 +10,7 @@ impl<T: ?Sized> L<T> {\n }\n \n impl<T> X<T, [u8; L::<T>::S]> {}\n+//~^ WARN cannot use constants which depend on generic parameters\n+//~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}, {"sha": "5ed1ca362f411c69cf1a02321fcdc7082f217a96", "filename": "src/test/ui/lazy_normalization_consts/issue-73980.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2be5f568d1f60365b825530f5b5cb722460591b/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr?ref=e2be5f568d1f60365b825530f5b5cb722460591b", "patch": "@@ -0,0 +1,12 @@\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/issue-73980.rs:12:9\n+   |\n+LL | impl<T> X<T, [u8; L::<T>::S]> {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+warning: 1 warning emitted\n+"}]}