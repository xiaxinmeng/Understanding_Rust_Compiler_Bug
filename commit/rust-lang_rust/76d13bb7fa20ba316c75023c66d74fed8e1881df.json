{"sha": "76d13bb7fa20ba316c75023c66d74fed8e1881df", "node_id": "C_kwDOAAsO6NoAKDc2ZDEzYmI3ZmEyMGJhMzE2Yzc1MDIzYzY2ZDc0ZmVkOGUxODgxZGY", "commit": {"author": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2023-03-26T15:00:10Z"}, "committer": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2023-03-26T21:49:57Z"}, "message": "Don't lint functions with \"box\" in their name", "tree": {"sha": "9f948a1ef64952e04902b3c6353f3db41783efe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f948a1ef64952e04902b3c6353f3db41783efe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d13bb7fa20ba316c75023c66d74fed8e1881df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGofhdE61kfoixWy+rtlL+hwwE4kFAmQgvgUACgkQrtlL+hww\nE4krXw/8D0g/r0IgjlIxRc/YG5TQo9TJ8SYA1+PUsfk6miG9GMnhSvosPVn6lZFH\nb3ShGBO5ed0IsB0Pc+WLR42+GpqBQdXH0JL5+7x0d+0tDZxt8wsttYr0sNGThiBw\nMT9HNSeye09+uBXzY8URrgkhQmOADZjk4LOEeiVyGzAcNsc+TtZY/Pan8/11zjh2\nwtF3DBUrnhbZJw87vlmVSh04rkn4lTHULWUC4ETQM1qaP44Fmm86su5w957zIE5F\ngDNn+ledfMF1bScsGb90ZGFL6fw5zhTx3h1Vrtpm9Xyg1bXyFpQI3gjf0kAYx7EY\nqB+M6bhULL3FBOjiAh7AAUVp507wUa1e04RF3+aZpQsvYpRfe13Kib/VCsQPgdyn\nJxYe9109uwgDftSDZxHNLfRqZna1uU5ejFjjAUyKmKHiPWFCOlsWCs3jjZdw/mUr\nPaJs/rSApEsJPNOkLtFTK70JSB3w89E3s1nXe7lz5ai8lMUe+3YkNss4GaD15bB0\nouomif5wqdcihVYUkKMiVsCvcZu2weeWOayy959v8KApi6slYhG+GsqZ+DVOt7jz\nH7Cc+SL5M67Ri19pI6Tz50Y4Lf3VSmxQ4ijHMsq5E+U4Oo7BT9IANTT882+tOafv\noaxuGSJG/rKFChcBMTN5jNchlzYC7VYXZle6GUuFLuwPGdfbW4s=\n=dluR\n-----END PGP SIGNATURE-----", "payload": "tree 9f948a1ef64952e04902b3c6353f3db41783efe4\nparent a143fb7a11695c45545e6a207f677bd1112032d7\nauthor Micha White <botahamec@outlook.com> 1679842810 -0400\ncommitter Micha White <botahamec@outlook.com> 1679867397 -0400\n\nDon't lint functions with \"box\" in their name\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d13bb7fa20ba316c75023c66d74fed8e1881df", "html_url": "https://github.com/rust-lang/rust/commit/76d13bb7fa20ba316c75023c66d74fed8e1881df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d13bb7fa20ba316c75023c66d74fed8e1881df/comments", "author": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a143fb7a11695c45545e6a207f677bd1112032d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a143fb7a11695c45545e6a207f677bd1112032d7", "html_url": "https://github.com/rust-lang/rust/commit/a143fb7a11695c45545e6a207f677bd1112032d7"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "912bcda630b83b179d39f42dedeb81dadebb2b55", "filename": "clippy_lints/src/unnecessary_box_returns.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76d13bb7fa20ba316c75023c66d74fed8e1881df/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d13bb7fa20ba316c75023c66d74fed8e1881df/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs?ref=76d13bb7fa20ba316c75023c66d74fed8e1881df", "patch": "@@ -3,6 +3,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{def_id::LocalDefId, FnDecl, FnRetTy, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Symbol;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -46,12 +47,17 @@ impl UnnecessaryBoxReturns {\n         }\n     }\n \n-    fn check_fn_decl(&mut self, cx: &LateContext<'_>, decl: &FnDecl<'_>, def_id: LocalDefId) {\n+    fn check_fn_item(&mut self, cx: &LateContext<'_>, decl: &FnDecl<'_>, def_id: LocalDefId, name: Symbol) {\n         // we don't want to tell someone to break an exported function if they ask us not to\n         if self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(def_id) {\n             return;\n         }\n \n+        // functions which contain the word \"box\" are exempt from this lint\n+        if name.as_str().contains(\"box\") {\n+            return;\n+        }\n+\n         let FnRetTy::Return(return_ty_hir) = &decl.output else { return };\n \n         let return_ty = cx\n@@ -91,7 +97,7 @@ impl UnnecessaryBoxReturns {\n impl LateLintPass<'_> for UnnecessaryBoxReturns {\n     fn check_trait_item(&mut self, cx: &LateContext<'_>, item: &TraitItem<'_>) {\n         let TraitItemKind::Fn(signature, _) = &item.kind else { return };\n-        self.check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n+        self.check_fn_item(cx, signature.decl, item.owner_id.def_id, item.ident.name);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, item: &rustc_hir::ImplItem<'_>) {\n@@ -104,11 +110,11 @@ impl LateLintPass<'_> for UnnecessaryBoxReturns {\n         }\n \n         let ImplItemKind::Fn(signature, ..) = &item.kind else { return };\n-        self.check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n+        self.check_fn_item(cx, signature.decl, item.owner_id.def_id, item.ident.name);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         let ItemKind::Fn(signature, ..) = &item.kind else { return };\n-        self.check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n+        self.check_fn_item(cx, signature.decl, item.owner_id.def_id, item.ident.name);\n     }\n }"}, {"sha": "fe60d929759ba8eff87cc691df8f89d345ea78d1", "filename": "tests/ui/unnecessary_box_returns.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/76d13bb7fa20ba316c75023c66d74fed8e1881df/tests%2Fui%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d13bb7fa20ba316c75023c66d74fed8e1881df/tests%2Fui%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.rs?ref=76d13bb7fa20ba316c75023c66d74fed8e1881df", "patch": "@@ -22,25 +22,30 @@ impl Foo {\n }\n \n // lint\n-fn boxed_usize() -> Box<usize> {\n+fn bxed_usize() -> Box<usize> {\n     Box::new(5)\n }\n \n // lint\n-fn _boxed_foo() -> Box<Foo> {\n+fn _bxed_foo() -> Box<Foo> {\n     Box::new(Foo {})\n }\n \n // don't lint: this is exported\n-pub fn boxed_foo() -> Box<Foo> {\n+pub fn bxed_foo() -> Box<Foo> {\n     Box::new(Foo {})\n }\n \n // don't lint: str is unsized\n-fn boxed_str() -> Box<str> {\n+fn bxed_str() -> Box<str> {\n     \"Hello, world!\".to_string().into_boxed_str()\n }\n \n+// don't lint: function contains the word, \"box\"\n+fn boxed_usize() -> Box<usize> {\n+    Box::new(7)\n+}\n+\n // don't lint: this has an unspecified return type\n fn default() {}\n "}, {"sha": "b17512c10a1773c343d9c9eb9a7b7dd82f6698b4", "filename": "tests/ui/unnecessary_box_returns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76d13bb7fa20ba316c75023c66d74fed8e1881df/tests%2Fui%2Funnecessary_box_returns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d13bb7fa20ba316c75023c66d74fed8e1881df/tests%2Fui%2Funnecessary_box_returns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.stderr?ref=76d13bb7fa20ba316c75023c66d74fed8e1881df", "patch": "@@ -16,18 +16,18 @@ LL |     fn baz(&self) -> Box<usize> {\n    = help: changing this also requires a change to the return expressions in this function\n \n error: boxed return of the sized type `usize`\n-  --> $DIR/unnecessary_box_returns.rs:25:21\n+  --> $DIR/unnecessary_box_returns.rs:25:20\n    |\n-LL | fn boxed_usize() -> Box<usize> {\n-   |                     ^^^^^^^^^^ help: try: `usize`\n+LL | fn bxed_usize() -> Box<usize> {\n+   |                    ^^^^^^^^^^ help: try: `usize`\n    |\n    = help: changing this also requires a change to the return expressions in this function\n \n error: boxed return of the sized type `Foo`\n-  --> $DIR/unnecessary_box_returns.rs:30:20\n+  --> $DIR/unnecessary_box_returns.rs:30:19\n    |\n-LL | fn _boxed_foo() -> Box<Foo> {\n-   |                    ^^^^^^^^ help: try: `Foo`\n+LL | fn _bxed_foo() -> Box<Foo> {\n+   |                   ^^^^^^^^ help: try: `Foo`\n    |\n    = help: changing this also requires a change to the return expressions in this function\n "}]}