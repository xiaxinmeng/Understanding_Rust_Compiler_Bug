{"sha": "12457607c3df8ff86f7c27348b60bbfe5643a33d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDU3NjA3YzNkZjhmZjg2ZjdjMjczNDhiNjBiYmZlNTY0M2EzM2Q=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T13:53:26Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T13:53:26Z"}, "message": "Choose pointer size dynamically.", "tree": {"sha": "200d213d5580918e6ded393e308002c09ec1ed0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/200d213d5580918e6ded393e308002c09ec1ed0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12457607c3df8ff86f7c27348b60bbfe5643a33d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12457607c3df8ff86f7c27348b60bbfe5643a33d", "html_url": "https://github.com/rust-lang/rust/commit/12457607c3df8ff86f7c27348b60bbfe5643a33d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12457607c3df8ff86f7c27348b60bbfe5643a33d/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b37be71c29cc35173c60a643cf44af11ef2f769", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b37be71c29cc35173c60a643cf44af11ef2f769", "html_url": "https://github.com/rust-lang/rust/commit/0b37be71c29cc35173c60a643cf44af11ef2f769"}], "stats": {"total": 53, "additions": 22, "deletions": 31}, "files": [{"sha": "6c1144b6b9c16b1fac7b047822987f7f42033e87", "filename": "src/interpreter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12457607c3df8ff86f7c27348b60bbfe5643a33d/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12457607c3df8ff86f7c27348b60bbfe5643a33d/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=12457607c3df8ff86f7c27348b60bbfe5643a33d", "patch": "@@ -582,13 +582,13 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         use syntax::ast::{IntTy, UintTy};\n         let repr = match ty.sty {\n             ty::TyBool => Repr::Primitive { size: 1 },\n-            ty::TyInt(IntTy::Is)  => Repr::isize(),\n+            ty::TyInt(IntTy::Is)  => Repr::Primitive { size: self.memory.pointer_size },\n             ty::TyInt(IntTy::I8)  => Repr::Primitive { size: 1 },\n             ty::TyInt(IntTy::I16) => Repr::Primitive { size: 2 },\n             ty::TyInt(IntTy::I32) => Repr::Primitive { size: 4 },\n             ty::TyInt(IntTy::I64) => Repr::Primitive { size: 8 },\n \n-            ty::TyUint(UintTy::Us)  => Repr::usize(),\n+            ty::TyUint(UintTy::Us)  => Repr::Primitive { size: self.memory.pointer_size },\n             ty::TyUint(UintTy::U8)  => Repr::Primitive { size: 1 },\n             ty::TyUint(UintTy::U16) => Repr::Primitive { size: 2 },\n             ty::TyUint(UintTy::U32) => Repr::Primitive { size: 4 },\n@@ -613,9 +613,9 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             ty::TyRawPtr(ty::TypeAndMut { ty, .. }) |\n             ty::TyBox(ty) => {\n                 if ty.is_sized(&self.tcx.empty_parameter_environment(), DUMMY_SP) {\n-                    Repr::Pointer\n+                    Repr::Primitive { size: self.memory.pointer_size }\n                 } else {\n-                    Repr::FatPointer\n+                    Repr::Primitive { size: self.memory.pointer_size * 2 }\n                 }\n             }\n "}, {"sha": "c563e84a90c5dc5d93f378dfdcd297a558e22108", "filename": "src/memory.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/12457607c3df8ff86f7c27348b60bbfe5643a33d/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12457607c3df8ff86f7c27348b60bbfe5643a33d/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=12457607c3df8ff86f7c27348b60bbfe5643a33d", "patch": "@@ -8,12 +8,10 @@ use std::ptr;\n use error::{EvalError, EvalResult};\n use primval::PrimVal;\n \n-// TODO(tsion): How should this get set? Host or target pointer size?\n-const POINTER_SIZE: usize = 8;\n-\n pub struct Memory {\n-    next_id: u64,\n     alloc_map: HashMap<u64, Allocation>,\n+    next_id: u64,\n+    pub pointer_size: usize,\n }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -40,14 +38,11 @@ pub struct FieldRepr {\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum Repr {\n-    /// Representation for a primitive type such as a boolean, integer, or character.\n+    /// Representation for a non-aggregate type such as a boolean, integer, character or pointer.\n     Primitive {\n         size: usize\n     },\n \n-    Pointer,\n-    FatPointer,\n-\n     /// The representation for aggregate types including structs, enums, and tuples.\n     Aggregate {\n         /// The size of the discriminant (an integer). Should be between 0 and 8. Always 0 for\n@@ -71,7 +66,13 @@ pub enum Repr {\n \n impl Memory {\n     pub fn new() -> Self {\n-        Memory { next_id: 0, alloc_map: HashMap::new() }\n+        Memory {\n+            alloc_map: HashMap::new(),\n+            next_id: 0,\n+\n+            // TODO(tsion): Should this be host's or target's usize?\n+            pointer_size: mem::size_of::<usize>(),\n+        }\n     }\n \n     pub fn allocate(&mut self, size: usize) -> Pointer {\n@@ -145,8 +146,8 @@ impl Memory {\n \n     pub fn read_ptr(&self, ptr: Pointer) -> EvalResult<Pointer> {\n         let alloc = try!(self.get(ptr.alloc_id));\n-        try!(alloc.check_relocation_edges(ptr.offset, ptr.offset + POINTER_SIZE));\n-        let bytes = &alloc.bytes[ptr.offset..ptr.offset + POINTER_SIZE];\n+        try!(alloc.check_relocation_edges(ptr.offset, ptr.offset + self.pointer_size));\n+        let bytes = &alloc.bytes[ptr.offset..ptr.offset + self.pointer_size];\n         let offset = byteorder::NativeEndian::read_u64(bytes) as usize;\n \n         match alloc.relocations.get(&ptr.offset) {\n@@ -158,7 +159,8 @@ impl Memory {\n     // TODO(tsion): Detect invalid writes here and elsewhere.\n     pub fn write_ptr(&mut self, dest: Pointer, ptr_val: Pointer) -> EvalResult<()> {\n         {\n-            let bytes = try!(self.get_bytes_mut(dest, POINTER_SIZE));\n+            let size = self.pointer_size;\n+            let bytes = try!(self.get_bytes_mut(dest, size));\n             byteorder::NativeEndian::write_u64(bytes, ptr_val.offset as u64);\n         }\n         let alloc = try!(self.get_mut(dest.alloc_id));\n@@ -180,8 +182,8 @@ impl Memory {\n             ty::TyUint(UintTy::U64) => self.read_uint(ptr, 8).map(|n| PrimVal::U64(n as u64)),\n \n             // TODO(tsion): Pick the PrimVal dynamically.\n-            ty::TyInt(IntTy::Is)    => self.read_int(ptr, POINTER_SIZE).map(PrimVal::I64),\n-            ty::TyUint(UintTy::Us)  => self.read_uint(ptr, POINTER_SIZE).map(PrimVal::U64),\n+            ty::TyInt(IntTy::Is)    => self.read_int(ptr, self.pointer_size).map(PrimVal::I64),\n+            ty::TyUint(UintTy::Us)  => self.read_uint(ptr, self.pointer_size).map(PrimVal::U64),\n             _ => panic!(\"primitive read of non-primitive type: {:?}\", ty),\n         }\n     }\n@@ -241,7 +243,8 @@ impl Allocation {\n \n     fn count_overlapping_relocations(&self, start: usize, end: usize) -> usize {\n         self.relocations.range(\n-            Included(&start.saturating_sub(POINTER_SIZE - 1)),\n+            // FIXME(tsion): Assuming pointer size is 8. Move this method to Memory.\n+            Included(&start.saturating_sub(8 - 1)),\n             Excluded(&end)\n         ).count()\n     }\n@@ -275,23 +278,11 @@ impl Pointer {\n }\n \n impl Repr {\n-    // TODO(tsion): Choice is based on host machine's type size. Should this be how miri works?\n-    pub fn isize() -> Self {\n-        Repr::Primitive { size: mem::size_of::<isize>() }\n-    }\n-\n-    // TODO(tsion): Choice is based on host machine's type size. Should this be how miri works?\n-    pub fn usize() -> Self {\n-        Repr::Primitive { size: mem::size_of::<usize>() }\n-    }\n-\n     pub fn size(&self) -> usize {\n         match *self {\n             Repr::Primitive { size } => size,\n             Repr::Aggregate { size, .. } => size,\n             Repr::Array { elem_size, length } => elem_size * length,\n-            Repr::Pointer => POINTER_SIZE,\n-            Repr::FatPointer => POINTER_SIZE * 2,\n         }\n     }\n }"}]}