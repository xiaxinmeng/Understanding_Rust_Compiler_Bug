{"sha": "97032a6dfacdd3548e4bff98c90a6b3875a14077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDMyYTZkZmFjZGQzNTQ4ZTRiZmY5OGM5MGE2YjM4NzVhMTQwNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T20:42:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-08T20:42:42Z"}, "message": "Auto merge of #80522 - cjgillot:borrowcrate, r=oli-obk\n\nSplit rustc_mir\n\nThe `rustc_mir` crate is the second largest in the compiler.\nThis PR splits it up into 5 crates:\n- rustc_borrowck;\n- rustc_const_eval;\n- rustc_mir_dataflow;\n- rustc_mir_transform;\n- rustc_monomorphize.", "tree": {"sha": "9b89fe6f913eeacc4e7e5c93c9534a6e87cd538f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b89fe6f913eeacc4e7e5c93c9534a6e87cd538f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97032a6dfacdd3548e4bff98c90a6b3875a14077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97032a6dfacdd3548e4bff98c90a6b3875a14077", "html_url": "https://github.com/rust-lang/rust/commit/97032a6dfacdd3548e4bff98c90a6b3875a14077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97032a6dfacdd3548e4bff98c90a6b3875a14077/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ae8deb8a35030bdc4e502b03400800864cc264", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ae8deb8a35030bdc4e502b03400800864cc264", "html_url": "https://github.com/rust-lang/rust/commit/47ae8deb8a35030bdc4e502b03400800864cc264"}, {"sha": "924dbc36c9888eebacdcd06ec444418683b0d5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/924dbc36c9888eebacdcd06ec444418683b0d5fd", "html_url": "https://github.com/rust-lang/rust/commit/924dbc36c9888eebacdcd06ec444418683b0d5fd"}], "stats": {"total": 1644, "additions": 938, "deletions": 706}, "files": [{"sha": "fa3e48849b8f27509065426943d7e08ebcd26f1e", "filename": "Cargo.lock", "status": "modified", "additions": 102, "deletions": 17, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -3621,6 +3621,33 @@ dependencies = [\n  \"rustc_span\",\n ]\n \n+[[package]]\n+name = \"rustc_borrowck\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"either\",\n+ \"itertools 0.9.0\",\n+ \"polonius-engine\",\n+ \"rustc_const_eval\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_graphviz\",\n+ \"rustc_hir\",\n+ \"rustc_index\",\n+ \"rustc_infer\",\n+ \"rustc_lexer\",\n+ \"rustc_middle\",\n+ \"rustc_mir_dataflow\",\n+ \"rustc_serialize\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"rustc_trait_selection\",\n+ \"rustc_traits\",\n+ \"smallvec\",\n+ \"tracing\",\n+]\n+\n [[package]]\n name = \"rustc_builtin_macros\"\n version = \"0.0.0\"\n@@ -3704,6 +3731,30 @@ dependencies = [\n  \"tracing\",\n ]\n \n+[[package]]\n+name = \"rustc_const_eval\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"either\",\n+ \"gsgdt\",\n+ \"rustc_apfloat\",\n+ \"rustc_ast\",\n+ \"rustc_attr\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_hir\",\n+ \"rustc_index\",\n+ \"rustc_infer\",\n+ \"rustc_macros\",\n+ \"rustc_middle\",\n+ \"rustc_mir_dataflow\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"rustc_trait_selection\",\n+ \"tracing\",\n+]\n+\n [[package]]\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n@@ -3742,6 +3793,7 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_codegen_ssa\",\n+ \"rustc_const_eval\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n@@ -3752,7 +3804,6 @@ dependencies = [\n  \"rustc_lint\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n- \"rustc_mir\",\n  \"rustc_parse\",\n  \"rustc_plugin_impl\",\n  \"rustc_save_analysis\",\n@@ -3911,9 +3962,11 @@ dependencies = [\n  \"rustc_ast_lowering\",\n  \"rustc_ast_passes\",\n  \"rustc_attr\",\n+ \"rustc_borrowck\",\n  \"rustc_builtin_macros\",\n  \"rustc_codegen_llvm\",\n  \"rustc_codegen_ssa\",\n+ \"rustc_const_eval\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n@@ -3922,8 +3975,9 @@ dependencies = [\n  \"rustc_lint\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n- \"rustc_mir\",\n  \"rustc_mir_build\",\n+ \"rustc_mir_transform\",\n+ \"rustc_monomorphize\",\n  \"rustc_parse\",\n  \"rustc_passes\",\n  \"rustc_plugin_impl\",\n@@ -4041,6 +4095,8 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-ir\",\n+ \"either\",\n+ \"gsgdt\",\n  \"polonius-engine\",\n  \"rustc-rayon-core\",\n  \"rustc_apfloat\",\n@@ -4050,6 +4106,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n+ \"rustc_graphviz\",\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_macros\",\n@@ -4064,51 +4121,63 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"rustc_mir\"\n+name = \"rustc_mir_build\"\n version = \"0.0.0\"\n dependencies = [\n- \"coverage_test_macros\",\n- \"either\",\n- \"gsgdt\",\n- \"itertools 0.9.0\",\n- \"polonius-engine\",\n- \"regex\",\n  \"rustc_apfloat\",\n+ \"rustc_arena\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n- \"rustc_graphviz\",\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n- \"rustc_lexer\",\n- \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n- \"rustc_traits\",\n  \"smallvec\",\n  \"tracing\",\n ]\n \n [[package]]\n-name = \"rustc_mir_build\"\n+name = \"rustc_mir_dataflow\"\n version = \"0.0.0\"\n dependencies = [\n- \"rustc_apfloat\",\n- \"rustc_arena\",\n+ \"polonius-engine\",\n+ \"regex\",\n+ \"rustc_ast\",\n+ \"rustc_data_structures\",\n+ \"rustc_graphviz\",\n+ \"rustc_hir\",\n+ \"rustc_index\",\n+ \"rustc_middle\",\n+ \"rustc_serialize\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"smallvec\",\n+ \"tracing\",\n+]\n+\n+[[package]]\n+name = \"rustc_mir_transform\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"coverage_test_macros\",\n+ \"itertools 0.9.0\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n+ \"rustc_const_eval\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_index\",\n- \"rustc_infer\",\n  \"rustc_middle\",\n+ \"rustc_mir_dataflow\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -4118,6 +4187,22 @@ dependencies = [\n  \"tracing\",\n ]\n \n+[[package]]\n+name = \"rustc_monomorphize\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_hir\",\n+ \"rustc_index\",\n+ \"rustc_middle\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"smallvec\",\n+ \"tracing\",\n+]\n+\n [[package]]\n name = \"rustc_parse\"\n version = \"0.0.0\""}, {"sha": "c683c388ba9ead0b7c939caade7db8e941eb5bb9", "filename": "compiler/rustc_borrowck/Cargo.toml", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2FCargo.toml?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"rustc_mir\"\n+name = \"rustc_borrowck\"\n version = \"0.0.0\"\n edition = \"2018\"\n \n@@ -8,30 +8,23 @@ doctest = false\n \n [dependencies]\n either = \"1.5.0\"\n-rustc_graphviz = { path = \"../rustc_graphviz\" }\n-gsgdt = \"0.1.2\"\n itertools = \"0.9\"\n tracing = \"0.1\"\n polonius-engine = \"0.13.0\"\n-regex = \"1\"\n-rustc_middle = { path = \"../rustc_middle\" }\n-rustc_attr = { path = \"../rustc_attr\" }\n+smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n+rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n-rustc_macros = { path = \"../rustc_macros\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n+rustc_const_eval = { path = \"../rustc_const_eval\" }\n+rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_traits = { path = \"../rustc_traits\" }\n-rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-rustc_apfloat = { path = \"../rustc_apfloat\" }\n-smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n-\n-[dev-dependencies]\n-coverage_test_macros = { path = \"src/transform/coverage/test_macros\" }", "previous_filename": "compiler/rustc_mir/Cargo.toml"}, {"sha": "ee2ce1d3f74c3035129f153692dcbafeb12740f7", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,14 +1,14 @@\n-use crate::borrow_check::nll::ToRegionVid;\n-use crate::borrow_check::path_utils::allow_two_phase_borrow;\n-use crate::borrow_check::place_ext::PlaceExt;\n-use crate::dataflow::indexes::BorrowIndex;\n-use crate::dataflow::move_paths::MoveData;\n+use crate::nll::ToRegionVid;\n+use crate::path_utils::allow_two_phase_borrow;\n+use crate::place_ext::PlaceExt;\n+use crate::BorrowIndex;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{MutatingUseContext, NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n+use rustc_mir_dataflow::move_paths::MoveData;\n use std::fmt;\n use std::ops::Index;\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/borrow_set.rs"}, {"sha": "5702203d7c4ffba938aea53c89e71a1dbf7ba9bf", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -2,7 +2,7 @@ use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n \n-impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n+impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn cannot_move_when_borrowed(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(self, span, E0505, \"cannot move out of {} because it is borrowed\", desc,)\n     }", "previous_filename": "compiler/rustc_mir/src/util/borrowck_errors.rs"}, {"sha": "a40f148cdf88c02a32706c7aeac8080a0f53314b", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, RegionVid, Ty};\n \n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowSet, facts::AllFacts, location::LocationTable, nll::ToRegionVid,\n     places_conflict, region_infer::values::LivenessValues,\n };", "previous_filename": "compiler/rustc_mir/src/borrow_check/constraint_generation.rs"}, {"sha": "cb9e0234c49ffa5a5a7edc3e653817563f93ee5e", "filename": "compiler/rustc_borrowck/src/constraints/graph.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::{RegionVid, VarianceDiagInfo};\n use rustc_span::DUMMY_SP;\n \n-use crate::borrow_check::{\n+use crate::{\n     constraints::OutlivesConstraintIndex,\n     constraints::{OutlivesConstraint, OutlivesConstraintSet},\n     type_check::Locations,", "previous_filename": "compiler/rustc_mir/src/borrow_check/constraints/graph.rs"}, {"sha": "98378a98684e2f0ff2589631a42988a14bcc598a", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty::{RegionVid, VarianceDiagInfo};\n use std::fmt;\n use std::ops::Index;\n \n-use crate::borrow_check::type_check::Locations;\n+use crate::type_check::Locations;\n \n crate mod graph;\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/constraints/mod.rs"}, {"sha": "f6e4e3888418fb22d848f7b63f1ebf6a7b13a5ec", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/borrow_check/consumers.rs"}, {"sha": "1e660ece908683f2d12b728ef68d104bdbb80398", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "renamed", "additions": 103, "deletions": 10, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,17 +1,110 @@\n-use rustc_middle::mir::{self, Body, Location, Place};\n-use rustc_middle::ty::RegionVid;\n-use rustc_middle::ty::TyCtxt;\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::{self, BasicBlock, Body, Location, Place};\n+use rustc_middle::ty::RegionVid;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_mir_dataflow::impls::{EverInitializedPlaces, MaybeUninitializedPlaces};\n+use rustc_mir_dataflow::ResultsVisitable;\n+use rustc_mir_dataflow::{self, fmt::DebugWithContext, GenKill};\n+use rustc_mir_dataflow::{Analysis, Direction, Results};\n+use std::fmt;\n+use std::iter;\n \n-use crate::borrow_check::{\n+use crate::{\n     places_conflict, BorrowSet, PlaceConflictBias, PlaceExt, RegionInferenceContext, ToRegionVid,\n };\n-use crate::dataflow::{self, fmt::DebugWithContext, GenKill};\n \n-use std::fmt;\n-use std::iter;\n+/// A tuple with named fields that can hold either the results or the transient state of the\n+/// dataflow analyses used by the borrow checker.\n+#[derive(Debug)]\n+pub struct BorrowckAnalyses<B, U, E> {\n+    pub borrows: B,\n+    pub uninits: U,\n+    pub ever_inits: E,\n+}\n+\n+/// The results of the dataflow analyses used by the borrow checker.\n+pub type BorrowckResults<'mir, 'tcx> = BorrowckAnalyses<\n+    Results<'tcx, Borrows<'mir, 'tcx>>,\n+    Results<'tcx, MaybeUninitializedPlaces<'mir, 'tcx>>,\n+    Results<'tcx, EverInitializedPlaces<'mir, 'tcx>>,\n+>;\n+\n+/// The transient state of the dataflow analyses used by the borrow checker.\n+pub type BorrowckFlowState<'mir, 'tcx> =\n+    <BorrowckResults<'mir, 'tcx> as ResultsVisitable<'tcx>>::FlowState;\n+\n+macro_rules! impl_visitable {\n+    ( $(\n+        $T:ident { $( $field:ident : $A:ident ),* $(,)? }\n+    )* ) => { $(\n+        impl<'tcx, $($A),*, D: Direction> ResultsVisitable<'tcx> for $T<$( Results<'tcx, $A> ),*>\n+        where\n+            $( $A: Analysis<'tcx, Direction = D>, )*\n+        {\n+            type Direction = D;\n+            type FlowState = $T<$( $A::Domain ),*>;\n+\n+            fn new_flow_state(&self, body: &mir::Body<'tcx>) -> Self::FlowState {\n+                $T {\n+                    $( $field: self.$field.analysis.bottom_value(body) ),*\n+                }\n+            }\n+\n+            fn reset_to_block_entry(\n+                &self,\n+                state: &mut Self::FlowState,\n+                block: BasicBlock,\n+            ) {\n+                $( state.$field.clone_from(&self.$field.entry_set_for_block(block)); )*\n+            }\n+\n+            fn reconstruct_before_statement_effect(\n+                &self,\n+                state: &mut Self::FlowState,\n+                stmt: &mir::Statement<'tcx>,\n+                loc: Location,\n+            ) {\n+                $( self.$field.analysis\n+                    .apply_before_statement_effect(&mut state.$field, stmt, loc); )*\n+            }\n+\n+            fn reconstruct_statement_effect(\n+                &self,\n+                state: &mut Self::FlowState,\n+                stmt: &mir::Statement<'tcx>,\n+                loc: Location,\n+            ) {\n+                $( self.$field.analysis\n+                    .apply_statement_effect(&mut state.$field, stmt, loc); )*\n+            }\n+\n+            fn reconstruct_before_terminator_effect(\n+                &self,\n+                state: &mut Self::FlowState,\n+                term: &mir::Terminator<'tcx>,\n+                loc: Location,\n+            ) {\n+                $( self.$field.analysis\n+                    .apply_before_terminator_effect(&mut state.$field, term, loc); )*\n+            }\n+\n+            fn reconstruct_terminator_effect(\n+                &self,\n+                state: &mut Self::FlowState,\n+                term: &mir::Terminator<'tcx>,\n+                loc: Location,\n+            ) {\n+                $( self.$field.analysis\n+                    .apply_terminator_effect(&mut state.$field, term, loc); )*\n+            }\n+        }\n+    )* }\n+}\n+\n+impl_visitable! {\n+    BorrowckAnalyses { borrows: B, uninits: U, ever_inits: E }\n+}\n \n rustc_index::newtype_index! {\n     pub struct BorrowIndex {\n@@ -230,7 +323,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n     }\n }\n \n-impl<'tcx> dataflow::AnalysisDomain<'tcx> for Borrows<'_, 'tcx> {\n+impl<'tcx> rustc_mir_dataflow::AnalysisDomain<'tcx> for Borrows<'_, 'tcx> {\n     type Domain = BitSet<BorrowIndex>;\n \n     const NAME: &'static str = \"borrows\";\n@@ -246,7 +339,7 @@ impl<'tcx> dataflow::AnalysisDomain<'tcx> for Borrows<'_, 'tcx> {\n     }\n }\n \n-impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n+impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     type Idx = BorrowIndex;\n \n     fn before_statement_effect(", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/borrows.rs"}, {"sha": "689ec249a2fb4f5c708fc3ffa1e244483a3fe97c", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/borrow_check/def_use.rs"}, {"sha": "76e779bfec608d25279bd40f4912cedb0e530332", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -14,8 +14,8 @@ use rustc_traits::{type_op_ascribe_user_type_with_span, type_op_prove_predicate_\n use std::fmt;\n use std::rc::Rc;\n \n-use crate::borrow_check::region_infer::values::RegionElement;\n-use crate::borrow_check::MirBorrowckCtxt;\n+use crate::region_infer::values::RegionElement;\n+use crate::MirBorrowckCtxt;\n \n #[derive(Clone)]\n crate struct UniverseInfo<'tcx>(UniverseInfoInner<'tcx>);", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/bound_region_errors.rs"}, {"sha": "ce1e7c14b1ff673b249fd3bc4fca294296c28403", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -10,16 +10,16 @@ use rustc_middle::mir::{\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n+use rustc_mir_dataflow::drop_flag_effects;\n+use rustc_mir_dataflow::move_paths::{MoveOutIndex, MovePathIndex};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n-use crate::dataflow::drop_flag_effects;\n-use crate::dataflow::indexes::{MoveOutIndex, MovePathIndex};\n-use crate::util::borrowck_errors;\n+use crate::borrowck_errors;\n \n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowData, diagnostics::Instance, prefixes::IsPrefixOf,\n     InitializationRequiringAction, MirBorrowckCtxt, PrefixSet, WriteKind,\n };\n@@ -49,7 +49,7 @@ enum StorageDeadOrDrop<'tcx> {\n }\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n-    pub(in crate::borrow_check) fn report_use_of_moved_or_uninitialized(\n+    pub(crate) fn report_use_of_moved_or_uninitialized(\n         &mut self,\n         location: Location,\n         desired_action: InitializationRequiringAction,\n@@ -441,7 +441,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n-    pub(in crate::borrow_check) fn report_move_out_while_borrowed(\n+    pub(crate) fn report_move_out_while_borrowed(\n         &mut self,\n         location: Location,\n         (place, span): (Place<'tcx>, Span),\n@@ -489,7 +489,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n-    pub(in crate::borrow_check) fn report_use_while_mutably_borrowed(\n+    pub(crate) fn report_use_while_mutably_borrowed(\n         &mut self,\n         location: Location,\n         (place, _span): (Place<'tcx>, Span),\n@@ -535,7 +535,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(in crate::borrow_check) fn report_conflicting_borrow(\n+    pub(crate) fn report_conflicting_borrow(\n         &mut self,\n         location: Location,\n         (place, span): (Place<'tcx>, Span),\n@@ -798,7 +798,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// cannot borrow `a.u` (via `a.u.z.c`) as immutable because it is also borrowed as\n     /// mutable (via `a.u.s.b`) [E0502]\n     /// ```\n-    pub(in crate::borrow_check) fn describe_place_for_conflicting_borrow(\n+    pub(crate) fn describe_place_for_conflicting_borrow(\n         &self,\n         first_borrowed_place: Place<'tcx>,\n         second_borrowed_place: Place<'tcx>,\n@@ -875,7 +875,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// short a lifetime. (But sometimes it is more useful to report\n     /// it as a more direct conflict between the execution of a\n     /// `Drop::drop` with an aliasing borrow.)\n-    pub(in crate::borrow_check) fn report_borrowed_value_does_not_live_long_enough(\n+    pub(crate) fn report_borrowed_value_does_not_live_long_enough(\n         &mut self,\n         location: Location,\n         borrow: &BorrowData<'tcx>,\n@@ -1634,7 +1634,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         (result, reinits_reachable)\n     }\n \n-    pub(in crate::borrow_check) fn report_illegal_mutation_of_borrowed(\n+    pub(crate) fn report_illegal_mutation_of_borrowed(\n         &mut self,\n         location: Location,\n         (place, span): (Place<'tcx>, Span),\n@@ -1695,7 +1695,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some((method_did, method_substs)),\n         ) = (\n             &self.body[loan.reserve_location.block].terminator,\n-            crate::util::find_self_call(\n+            rustc_const_eval::util::find_self_call(\n                 tcx,\n                 self.body,\n                 loan.assigned_place.local,\n@@ -1726,7 +1726,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// assigned; `err_place` is a place providing a reason why\n     /// `place` is not mutable (e.g., the non-`mut` local `x` in an\n     /// assignment to `x.f`).\n-    pub(in crate::borrow_check) fn report_illegal_reassignment(\n+    pub(crate) fn report_illegal_reassignment(\n         &mut self,\n         _location: Location,\n         (place, span): (Place<'tcx>, Span),\n@@ -2226,7 +2226,7 @@ enum AnnotatedBorrowFnSignature<'tcx> {\n impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n     /// Annotate the provided diagnostic with information about borrow from the fn signature that\n     /// helps explain.\n-    pub(in crate::borrow_check) fn emit(\n+    pub(crate) fn emit(\n         &self,\n         cx: &mut MirBorrowckCtxt<'_, 'tcx>,\n         diag: &mut DiagnosticBuilder<'_>,", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs"}, {"sha": "2d12a682e7ae6d9c5c598fa1834b4b4b75f6b2e4", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -15,16 +15,16 @@ use rustc_middle::ty::{self, RegionVid, TyCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n-use crate::borrow_check::region_infer::BlameConstraint;\n-use crate::borrow_check::{\n+use crate::region_infer::BlameConstraint;\n+use crate::{\n     borrow_set::BorrowData, nll::ConstraintDescription, region_infer::Cause, MirBorrowckCtxt,\n     WriteKind,\n };\n \n use super::{find_use, RegionName, UseSpans};\n \n #[derive(Debug)]\n-pub(in crate::borrow_check) enum BorrowExplanation {\n+pub(crate) enum BorrowExplanation {\n     UsedLater(LaterUseKind, Span, Option<Span>),\n     UsedLaterInLoop(LaterUseKind, Span, Option<Span>),\n     UsedLaterWhenDropped {\n@@ -43,7 +43,7 @@ pub(in crate::borrow_check) enum BorrowExplanation {\n }\n \n #[derive(Clone, Copy, Debug)]\n-pub(in crate::borrow_check) enum LaterUseKind {\n+pub(crate) enum LaterUseKind {\n     TraitCapture,\n     ClosureCapture,\n     Call,\n@@ -52,13 +52,13 @@ pub(in crate::borrow_check) enum LaterUseKind {\n }\n \n impl BorrowExplanation {\n-    pub(in crate::borrow_check) fn is_explained(&self) -> bool {\n+    pub(crate) fn is_explained(&self) -> bool {\n         match self {\n             BorrowExplanation::Unexplained => false,\n             _ => true,\n         }\n     }\n-    pub(in crate::borrow_check) fn add_explanation_to_diagnostic<'tcx>(\n+    pub(crate) fn add_explanation_to_diagnostic<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n@@ -267,7 +267,7 @@ impl BorrowExplanation {\n             _ => {}\n         }\n     }\n-    pub(in crate::borrow_check) fn add_lifetime_bound_suggestion_to_diagnostic(\n+    pub(crate) fn add_lifetime_bound_suggestion_to_diagnostic(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         category: &ConstraintCategory,\n@@ -326,7 +326,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ///   - second half is the place being accessed\n     ///\n     /// [d]: https://rust-lang.github.io/rfcs/2094-nll.html#leveraging-intuition-framing-errors-in-terms-of-points\n-    pub(in crate::borrow_check) fn explain_why_borrow_contains_point(\n+    pub(crate) fn explain_why_borrow_contains_point(\n         &self,\n         location: Location,\n         borrow: &BorrowData<'tcx>,", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs"}, {"sha": "ab4536f00fc4289d702989625a8ff46b44b60b5c", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,7 +1,7 @@\n use std::collections::VecDeque;\n use std::rc::Rc;\n \n-use crate::borrow_check::{\n+use crate::{\n     def_use::{self, DefUse},\n     nll::ToRegionVid,\n     region_infer::{Cause, RegionInferenceContext},", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/find_use.rs"}, {"sha": "50130dc2a27ed1b48c65fd883fd65cbb81b3a1f2", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -12,6 +12,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Instance, Ty, TyCtxt};\n+use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult};\n use rustc_span::{\n     hygiene::{DesugaringKind, ForLoopLoc},\n     symbol::sym,\n@@ -21,7 +22,6 @@ use rustc_target::abi::VariantIdx;\n \n use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;\n-use crate::dataflow::move_paths::{InitLocation, LookupResult};\n \n mod find_use;\n mod outlives_suggestion;\n@@ -900,8 +900,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }) = &self.body[location.block].terminator\n         {\n             let (method_did, method_substs) = if let Some(info) =\n-                crate::util::find_self_call(self.infcx.tcx, &self.body, target_temp, location.block)\n-            {\n+                rustc_const_eval::util::find_self_call(\n+                    self.infcx.tcx,\n+                    &self.body,\n+                    target_temp,\n+                    location.block,\n+                ) {\n                 info\n             } else {\n                 return normal_ret;", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs"}, {"sha": "3c11408458629dfe84b6bb40ef6e05cfa38f9db7", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -2,16 +2,16 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n+use rustc_mir_dataflow::move_paths::{\n+    IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n+};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n \n-use crate::borrow_check::diagnostics::UseSpans;\n-use crate::borrow_check::prefixes::PrefixSet;\n-use crate::borrow_check::MirBorrowckCtxt;\n-use crate::dataflow::move_paths::{\n-    IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n-};\n+use crate::diagnostics::UseSpans;\n+use crate::prefixes::PrefixSet;\n+use crate::MirBorrowckCtxt;\n \n // Often when desugaring a pattern match we may have many individual moves in\n // MIR that are all part of one operation from the user's point-of-view. For", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs"}, {"sha": "7ca72cbed8de8a0f0d1cc185f46b67a36bc93656", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -14,9 +14,9 @@ use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n \n-use crate::borrow_check::diagnostics::BorrowedContentSource;\n-use crate::borrow_check::MirBorrowckCtxt;\n-use crate::util::collect_writes::FindAssignments;\n+use crate::diagnostics::BorrowedContentSource;\n+use crate::MirBorrowckCtxt;\n+use rustc_const_eval::util::collect_writes::FindAssignments;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs"}, {"sha": "9de0c62f186c0f70ebb64880577e7fb55d39091c", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,16 +1,14 @@\n //! Contains utilities for generating suggestions for borrowck errors related to unsatisfied\n //! outlives constraints.\n \n-use std::collections::BTreeMap;\n-\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::DiagnosticBuilder;\n use rustc_middle::ty::RegionVid;\n-use tracing::debug;\n-\n use smallvec::SmallVec;\n+use std::collections::BTreeMap;\n+use tracing::debug;\n \n-use crate::borrow_check::MirBorrowckCtxt;\n+use crate::MirBorrowckCtxt;\n \n use super::{ErrorConstraintInfo, RegionName, RegionNameSource};\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/outlives_suggestion.rs"}, {"sha": "57d2a3c5ce91bba441d81ad723ddcc02f02788fb", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -11,10 +11,10 @@ use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n \n-use crate::util::borrowck_errors;\n+use crate::borrowck_errors;\n \n-use crate::borrow_check::region_infer::BlameConstraint;\n-use crate::borrow_check::{\n+use crate::region_infer::BlameConstraint;\n+use crate::{\n     nll::ConstraintDescription,\n     region_infer::{values::RegionElement, TypeTest},\n     universal_regions::DefiningTy,\n@@ -152,7 +152,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     }\n \n     /// Produces nice borrowck error diagnostics for all the errors collected in `nll_errors`.\n-    pub(in crate::borrow_check) fn report_region_errors(&mut self, nll_errors: RegionErrors<'tcx>) {\n+    pub(crate) fn report_region_errors(&mut self, nll_errors: RegionErrors<'tcx>) {\n         // Iterate through all the errors, producing a diagnostic for each one. The diagnostics are\n         // buffered in the `MirBorrowckCtxt`.\n \n@@ -265,7 +265,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     ///\n     /// Here we would be invoked with `fr = 'a` and `outlived_fr = `'b`.\n-    pub(in crate::borrow_check) fn report_region_error(\n+    pub(crate) fn report_region_error(\n         &mut self,\n         fr: RegionVid,\n         fr_origin: NllRegionVariableOrigin,", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs"}, {"sha": "5edb52b0b650dca370cbced4b8c34a86a2d9def3", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n-use crate::borrow_check::{nll::ToRegionVid, universal_regions::DefiningTy, MirBorrowckCtxt};\n+use crate::{nll::ToRegionVid, universal_regions::DefiningTy, MirBorrowckCtxt};\n \n /// A name for a particular region used in emitting diagnostics. This name could be a generated\n /// name like `'1`, a name used by the user like `'a`, or a name like `'static`.", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs"}, {"sha": "00f62806753556f477aec00a6280a662d27ba28b", "filename": "compiler/rustc_borrowck/src/diagnostics/var_name.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,5 +1,5 @@\n-use crate::borrow_check::Upvar;\n-use crate::borrow_check::{nll::ToRegionVid, region_infer::RegionInferenceContext};\n+use crate::Upvar;\n+use crate::{nll::ToRegionVid, region_infer::RegionInferenceContext};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/var_name.rs"}, {"sha": "86b719bdfa0c738cc1326098c28ed57d6cd83ee4", "filename": "compiler/rustc_borrowck/src/facts.rs", "status": "renamed", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,10 +1,11 @@\n-use crate::borrow_check::location::{LocationIndex, LocationTable};\n-use crate::dataflow::indexes::{BorrowIndex, MovePathIndex};\n+use crate::location::{LocationIndex, LocationTable};\n+use crate::BorrowIndex;\n use polonius_engine::AllFacts as PoloniusFacts;\n use polonius_engine::Atom;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::Local;\n use rustc_middle::ty::{RegionVid, TyCtxt};\n+use rustc_mir_dataflow::move_paths::MovePathIndex;\n use std::error::Error;\n use std::fmt::Debug;\n use std::fs::{self, File};\n@@ -100,12 +101,6 @@ impl Atom for LocationIndex {\n     }\n }\n \n-impl Atom for MovePathIndex {\n-    fn index(self) -> usize {\n-        Idx::index(self)\n-    }\n-}\n-\n struct FactWriter<'w> {\n     location_table: &'w LocationTable,\n     dir: &'w Path,", "previous_filename": "compiler/rustc_mir/src/borrow_check/facts.rs"}, {"sha": "016fe0bb6dedffbe9ff419991993903f2c5cbde4", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -7,12 +7,10 @@ use rustc_middle::mir::{Statement, StatementKind};\n use rustc_middle::ty::TyCtxt;\n use std::iter;\n \n-use crate::dataflow::indexes::BorrowIndex;\n-\n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowSet, facts::AllFacts, location::LocationTable, path_utils::*, AccessDepth,\n-    Activation, ArtificialField, Deep, JustWrite, LocalMutationIsAllowed, MutateMode, Read,\n-    ReadKind, ReadOrWrite, Reservation, Shallow, Write, WriteAndRead, WriteKind,\n+    Activation, ArtificialField, BorrowIndex, Deep, JustWrite, LocalMutationIsAllowed, MutateMode,\n+    Read, ReadKind, ReadOrWrite, Reservation, Shallow, Write, WriteAndRead, WriteKind,\n };\n \n pub(super) fn generate_invalidates<'tcx>(", "previous_filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs"}, {"sha": "4e4b8a953cd1228c177dc07f90b45a2ea6464069", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "renamed", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,5 +1,23 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n+#![feature(bool_to_option)]\n+#![feature(box_patterns)]\n+#![feature(const_panic)]\n+#![feature(crate_visibility_modifier)]\n+#![feature(format_args_capture)]\n+#![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n+#![feature(min_specialization)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(trusted_step)]\n+#![feature(try_blocks)]\n+#![recursion_limit = \"256\"]\n+\n+#[macro_use]\n+extern crate rustc_middle;\n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n@@ -29,14 +47,13 @@ use std::iter;\n use std::mem;\n use std::rc::Rc;\n \n-use crate::dataflow;\n-use crate::dataflow::impls::{\n-    Borrows, EverInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces,\n+use rustc_mir_dataflow::impls::{\n+    EverInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces,\n };\n-use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n-use crate::dataflow::move_paths::{InitLocation, LookupResult, MoveData, MoveError};\n-use crate::dataflow::MoveDataParamEnv;\n-use crate::dataflow::{Analysis, BorrowckFlowState as Flows, BorrowckResults};\n+use rustc_mir_dataflow::move_paths::{InitIndex, MoveOutIndex, MovePathIndex};\n+use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult, MoveData, MoveError};\n+use rustc_mir_dataflow::Analysis;\n+use rustc_mir_dataflow::MoveDataParamEnv;\n \n use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n@@ -47,9 +64,10 @@ use facts::AllFacts;\n use self::path_utils::*;\n \n mod borrow_set;\n+mod borrowck_errors;\n mod constraint_generation;\n mod constraints;\n-pub mod consumers;\n+mod dataflow;\n mod def_use;\n mod diagnostics;\n mod facts;\n@@ -67,15 +85,19 @@ mod type_check;\n mod universal_regions;\n mod used_muts;\n \n-crate use borrow_set::{BorrowData, BorrowSet};\n-crate use nll::{PoloniusOutput, ToRegionVid};\n-crate use place_ext::PlaceExt;\n-crate use places_conflict::{places_conflict, PlaceConflictBias};\n-crate use region_infer::RegionInferenceContext;\n+// A public API provided for the Rust compiler consumers.\n+pub mod consumers;\n+\n+use borrow_set::{BorrowData, BorrowSet};\n+use dataflow::{BorrowIndex, BorrowckFlowState as Flows, BorrowckResults, Borrows};\n+use nll::{PoloniusOutput, ToRegionVid};\n+use place_ext::PlaceExt;\n+use places_conflict::{places_conflict, PlaceConflictBias};\n+use region_infer::RegionInferenceContext;\n \n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n-crate struct Upvar<'tcx> {\n+struct Upvar<'tcx> {\n     place: CapturedPlace<'tcx>,\n \n     /// If true, the capture is behind a reference.\n@@ -352,7 +374,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     mbcx.report_move_errors(move_errors);\n \n-    dataflow::visit_results(\n+    rustc_mir_dataflow::visit_results(\n         &body,\n         traversal::reverse_postorder(&body).map(|(bb, _)| bb),\n         &results,\n@@ -495,8 +517,8 @@ pub struct BodyWithBorrowckFacts<'tcx> {\n     pub location_table: LocationTable,\n }\n \n-crate struct MirBorrowckCtxt<'cx, 'tcx> {\n-    crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n+struct MirBorrowckCtxt<'cx, 'tcx> {\n+    infcx: &'cx InferCtxt<'cx, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n     body: &'cx Body<'tcx>,\n     move_data: &'cx MoveData<'tcx>,\n@@ -594,7 +616,7 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n // 2. loans made in overlapping scopes do not conflict\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n-impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {\n+impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {\n     type FlowState = Flows<'cx, 'tcx>;\n \n     fn visit_statement_before_primary_effect(\n@@ -2344,7 +2366,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// then returns the index of the field being projected. Note that this closure will always\n     /// be `self` in the current MIR, because that is the only time we directly access the fields\n     /// of a closure type.\n-    pub fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {\n+    fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {\n         path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())\n     }\n }", "previous_filename": "compiler/rustc_mir/src/borrow_check/mod.rs"}, {"sha": "d378a2cbea3e19dedeb5c1aead21582dab987dd5", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/borrow_check/location.rs"}, {"sha": "2e2578df01146aca4fce8335ac4dc3bd10e58be3", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/borrow_check/member_constraints.rs"}, {"sha": "8b2c0362261ca9ac4e6aacac8c979e221933a203", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "renamed", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::Diagnostic;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n+use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n@@ -17,16 +18,13 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::str::FromStr;\n \n-use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n \n-use crate::dataflow::impls::MaybeInitializedPlaces;\n-use crate::dataflow::move_paths::{InitKind, InitLocation, MoveData};\n-use crate::dataflow::ResultsCursor;\n-use crate::util as mir_util;\n-use crate::util::pretty;\n+use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir_dataflow::move_paths::{InitKind, InitLocation, MoveData};\n+use rustc_mir_dataflow::ResultsCursor;\n \n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowSet,\n     constraint_generation,\n     diagnostics::RegionErrors,\n@@ -56,7 +54,7 @@ crate struct NllOutput<'tcx> {\n /// Rewrites the regions in the MIR to use NLL variables, also scraping out the set of universal\n /// regions (e.g., region parameters) declared on the function. That set will need to be given to\n /// `compute_regions`.\n-pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n+pub(crate) fn replace_regions_in_mir<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n@@ -72,7 +70,7 @@ pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     // Replace all remaining regions with fresh inference variables.\n     renumber::renumber_mir(infcx, body, promoted);\n \n-    mir_util::dump_mir(infcx.tcx, None, \"renumber\", &0, body, |_, _| Ok(()));\n+    dump_mir(infcx.tcx, None, \"renumber\", &0, body, |_, _| Ok(()));\n \n     universal_regions\n }\n@@ -155,7 +153,7 @@ fn populate_polonius_move_facts(\n /// Computes the (non-lexical) regions from the input MIR.\n ///\n /// This may result in errors being reported.\n-pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n+pub(crate) fn compute_regions<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     universal_regions: UniversalRegions<'tcx>,\n     body: &Body<'tcx>,\n@@ -322,11 +320,11 @@ pub(super) fn dump_mir_results<'a, 'tcx>(\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n ) {\n-    if !mir_util::dump_enabled(infcx.tcx, \"nll\", body.source.def_id()) {\n+    if !dump_enabled(infcx.tcx, \"nll\", body.source.def_id()) {\n         return;\n     }\n \n-    mir_util::dump_mir(infcx.tcx, None, \"nll\", &0, body, |pass_where, out| {\n+    dump_mir(infcx.tcx, None, \"nll\", &0, body, |pass_where, out| {\n         match pass_where {\n             // Before the CFG, dump out the values for each region variable.\n             PassWhere::BeforeCFG => {\n@@ -354,14 +352,14 @@ pub(super) fn dump_mir_results<'a, 'tcx>(\n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = try {\n         let mut file =\n-            pretty::create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, body.source)?;\n+            create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, body.source)?;\n         regioncx.dump_graphviz_raw_constraints(&mut file)?;\n     };\n \n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = try {\n         let mut file =\n-            pretty::create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, body.source)?;\n+            create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, body.source)?;\n         regioncx.dump_graphviz_scc_constraints(&mut file)?;\n     };\n }", "previous_filename": "compiler/rustc_mir/src/borrow_check/nll.rs"}, {"sha": "d5d00b467eeed2bab3184a8724821b470edd9902", "filename": "compiler/rustc_borrowck/src/path_utils.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,8 +1,8 @@\n-use crate::borrow_check::borrow_set::{BorrowData, BorrowSet, TwoPhaseActivation};\n-use crate::borrow_check::places_conflict;\n-use crate::borrow_check::AccessDepth;\n-use crate::borrow_check::Upvar;\n-use crate::dataflow::indexes::BorrowIndex;\n+use crate::borrow_set::{BorrowData, BorrowSet, TwoPhaseActivation};\n+use crate::places_conflict;\n+use crate::AccessDepth;\n+use crate::BorrowIndex;\n+use crate::Upvar;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::BorrowKind;\n use rustc_middle::mir::{BasicBlock, Body, Field, Location, Place, PlaceRef, ProjectionElem};", "previous_filename": "compiler/rustc_mir/src/borrow_check/path_utils.rs"}, {"sha": "83ff1595b0be44031dd044b5c2ba6d50dc372a22", "filename": "compiler/rustc_borrowck/src/place_ext.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,4 +1,4 @@\n-use crate::borrow_check::borrow_set::LocalsStateAtExit;\n+use crate::borrow_set::LocalsStateAtExit;\n use rustc_hir as hir;\n use rustc_middle::mir::ProjectionElem;\n use rustc_middle::mir::{Body, Mutability, Place};", "previous_filename": "compiler/rustc_mir/src/borrow_check/place_ext.rs"}, {"sha": "773e9e90b0c6be85cfeebb0a2f788c1c17b3c30d", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n-use crate::borrow_check::ArtificialField;\n-use crate::borrow_check::Overlap;\n-use crate::borrow_check::{AccessDepth, Deep, Shallow};\n+use crate::ArtificialField;\n+use crate::Overlap;\n+use crate::{AccessDepth, Deep, Shallow};\n use rustc_hir as hir;\n use rustc_middle::mir::{Body, BorrowKind, Local, Place, PlaceElem, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/borrow_check/places_conflict.rs"}, {"sha": "bdf2becb711264eff522a8cbe962ea5db3888cc1", "filename": "compiler/rustc_borrowck/src/prefixes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/borrow_check/prefixes.rs"}, {"sha": "cfd3acb6bdebdf78a5b875ad7f9443ce6d438a08", "filename": "compiler/rustc_borrowck/src/region_infer/dump_mir.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -4,7 +4,7 @@\n //! context internal state.\n \n use super::{OutlivesConstraint, RegionInferenceContext};\n-use crate::borrow_check::type_check::Locations;\n+use crate::type_check::Locations;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::TyCtxt;\n use std::io::{self, Write};", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/dump_mir.rs"}, {"sha": "95048d50f117f733e4072615efc1ca3e740cd13c", "filename": "compiler/rustc_borrowck/src/region_infer/graphviz.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fgraphviz.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -6,7 +6,7 @@ use std::borrow::Cow;\n use std::io::{self, Write};\n \n use super::*;\n-use crate::borrow_check::constraints::OutlivesConstraint;\n+use crate::constraints::OutlivesConstraint;\n use rustc_graphviz as dot;\n \n impl<'tcx> RegionInferenceContext<'tcx> {", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/graphviz.rs"}, {"sha": "48e45a9b1ce72e7f1559df69e847f627d7bb4e0c", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::{self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n \n-use crate::borrow_check::{\n+use crate::{\n     constraints::{\n         graph::NormalConstraintGraph, ConstraintSccIndex, OutlivesConstraint, OutlivesConstraintSet,\n     },\n@@ -132,33 +132,33 @@ pub(crate) struct AppliedMemberConstraint {\n     ///\n     /// The vector if `AppliedMemberConstraint` elements is kept sorted\n     /// by this field.\n-    pub(in crate::borrow_check) member_region_scc: ConstraintSccIndex,\n+    pub(crate) member_region_scc: ConstraintSccIndex,\n \n     /// The \"best option\" that `apply_member_constraint` found -- this was\n     /// added as an \"ad-hoc\" lower-bound to `member_region_scc`.\n-    pub(in crate::borrow_check) min_choice: ty::RegionVid,\n+    pub(crate) min_choice: ty::RegionVid,\n \n     /// The \"member constraint index\" -- we can find out details about\n     /// the constraint from\n     /// `set.member_constraints[member_constraint_index]`.\n-    pub(in crate::borrow_check) member_constraint_index: NllMemberConstraintIndex,\n+    pub(crate) member_constraint_index: NllMemberConstraintIndex,\n }\n \n pub(crate) struct RegionDefinition<'tcx> {\n     /// What kind of variable is this -- a free region? existential\n     /// variable? etc. (See the `NllRegionVariableOrigin` for more\n     /// info.)\n-    pub(in crate::borrow_check) origin: NllRegionVariableOrigin,\n+    pub(crate) origin: NllRegionVariableOrigin,\n \n     /// Which universe is this region variable defined in? This is\n     /// most often `ty::UniverseIndex::ROOT`, but when we encounter\n     /// forall-quantifiers like `for<'a> { 'a = 'b }`, we would create\n     /// the variable for `'a` in a fresh universe that extends ROOT.\n-    pub(in crate::borrow_check) universe: ty::UniverseIndex,\n+    pub(crate) universe: ty::UniverseIndex,\n \n     /// If this is 'static or an early-bound region, then this is\n     /// `Some(X)` where `X` is the name of the region.\n-    pub(in crate::borrow_check) external_name: Option<ty::Region<'tcx>>,\n+    pub(crate) external_name: Option<ty::Region<'tcx>>,\n }\n \n /// N.B., the variants in `Cause` are intentionally ordered. Lower\n@@ -245,7 +245,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///\n     /// The `outlives_constraints` and `type_tests` are an initial set\n     /// of constraints produced by the MIR type check.\n-    pub(in crate::borrow_check) fn new(\n+    pub(crate) fn new(\n         var_infos: VarInfos,\n         universal_regions: Rc<UniversalRegions<'tcx>>,\n         placeholder_indices: Rc<PlaceholderIndices>,\n@@ -534,7 +534,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Once region solving has completed, this function will return\n     /// the member constraints that were applied to the value of a given\n     /// region `r`. See `AppliedMemberConstraint`.\n-    pub(in crate::borrow_check) fn applied_member_constraints(\n+    pub(crate) fn applied_member_constraints(\n         &self,\n         r: impl ToRegionVid,\n     ) -> &[AppliedMemberConstraint] {\n@@ -1088,7 +1088,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///   include the CFG anyhow.\n     /// - For each `end('x)` element in `'r`, compute the mutual LUB, yielding\n     ///   a result `'y`.\n-    pub(in crate::borrow_check) fn universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n+    pub(crate) fn universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n         debug!(\"universal_upper_bound(r={:?}={})\", r, self.region_value_str(r));\n \n         // Find the smallest universal region that contains all other\n@@ -1115,7 +1115,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Therefore, this method should only be used in diagnostic code,\n     /// where displaying *some* named universal region is better than\n     /// falling back to 'static.\n-    pub(in crate::borrow_check) fn approx_universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n+    pub(crate) fn approx_universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n         debug!(\"approx_universal_upper_bound(r={:?}={})\", r, self.region_value_str(r));\n \n         // Find the smallest universal region that contains all other", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs"}, {"sha": "39b83e5043101bbde09f54f02f7f1862dc3c7b43", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// which has no `external_name` in which case we use `'empty` as the\n     /// region to pass to `infer_opaque_definition_from_instantiation`.\n     #[instrument(skip(self, infcx))]\n-    pub(in crate::borrow_check) fn infer_opaque_types(\n+    pub(crate) fn infer_opaque_types(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n@@ -105,7 +105,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// that the regions produced are in fact equal to the named region they are\n     /// replaced with. This is fine because this function is only to improve the\n     /// region names in error messages.\n-    pub(in crate::borrow_check) fn name_regions<T>(&self, tcx: TyCtxt<'tcx>, ty: T) -> T\n+    pub(crate) fn name_regions<T>(&self, tcx: TyCtxt<'tcx>, ty: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/opaque_types.rs"}, {"sha": "056907dcb16563a5daf40ddffa64485e97d96a3d", "filename": "compiler/rustc_borrowck/src/region_infer/reverse_sccs.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,5 +1,5 @@\n-use crate::borrow_check::constraints::ConstraintSccIndex;\n-use crate::borrow_check::RegionInferenceContext;\n+use crate::constraints::ConstraintSccIndex;\n+use crate::RegionInferenceContext;\n use itertools::Itertools;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::vec_graph::VecGraph;", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/reverse_sccs.rs"}, {"sha": "2864abde0022c15e2c54e60ce4d80e9bcfd66699", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/values.rs"}, {"sha": "9377473befe32c011b7c92d8374972222ae3c666", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/borrow_check/renumber.rs"}, {"sha": "7a8c0a3da1f1f4854370e6982b9243463fe3a69a", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -8,7 +8,7 @@ use rustc_span::Span;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOpOutput};\n use rustc_trait_selection::traits::query::Fallible;\n \n-use crate::borrow_check::diagnostics::{ToUniverseInfo, UniverseInfo};\n+use crate::diagnostics::{ToUniverseInfo, UniverseInfo};\n \n use super::{Locations, NormalizeLocation, TypeChecker};\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/canonical.rs"}, {"sha": "b020746848535899733852039c543ac07d71164c", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::DUMMY_SP;\n \n-use crate::borrow_check::{\n+use crate::{\n     constraints::OutlivesConstraint,\n     nll::ToRegionVid,\n     region_infer::TypeTest,", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/constraint_conversion.rs"}, {"sha": "e1e8f6a61adb817038607d3c103394d97c29e531", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -13,7 +13,7 @@ use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n use std::rc::Rc;\n use type_op::TypeOpOutput;\n \n-use crate::borrow_check::{\n+use crate::{\n     nll::ToRegionVid,\n     type_check::constraint_conversion,\n     type_check::{Locations, MirTypeckRegionConstraints},\n@@ -55,7 +55,7 @@ type RegionBoundPairs<'tcx> = Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>;\n type NormalizedInputsAndOutput<'tcx> = Vec<Ty<'tcx>>;\n \n crate struct CreateResult<'tcx> {\n-    pub(in crate::borrow_check) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n+    crate universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n     crate region_bound_pairs: RegionBoundPairs<'tcx>,\n     crate normalized_inputs_and_output: NormalizedInputsAndOutput<'tcx>,\n }", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/free_region_relations.rs"}, {"sha": "9d6f6f60a94f91976edabb4f5c5174614750cb49", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -7,16 +7,15 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n+use rustc_index::vec::Idx;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::*;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::{self, Ty};\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n-\n-use rustc_index::vec::Idx;\n use rustc_span::Span;\n+use rustc_trait_selection::traits::query::normalize::AtExt;\n \n-use crate::borrow_check::universal_regions::UniversalRegions;\n+use crate::universal_regions::UniversalRegions;\n \n use super::{Locations, TypeChecker};\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs"}, {"sha": "8b74abd94c07711ee3f6a541e8bb546a35ecd274", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -3,8 +3,8 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{Body, Local, Location};\n \n-use crate::borrow_check::def_use::{self, DefUse};\n-use crate::borrow_check::region_infer::values::{PointIndex, RegionValueElements};\n+use crate::def_use::{self, DefUse};\n+use crate::region_infer::values::{PointIndex, RegionValueElements};\n \n /// A map that cross references each local with the locations where it\n /// is defined (assigned), used, or dropped. Used during liveness", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/local_use_map.rs"}, {"sha": "1e712354d6a83027be6ab619be6212eec924be90", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -3,11 +3,11 @@ use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use std::rc::Rc;\n \n-use crate::dataflow::impls::MaybeInitializedPlaces;\n-use crate::dataflow::move_paths::MoveData;\n-use crate::dataflow::ResultsCursor;\n+use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir_dataflow::move_paths::MoveData;\n+use rustc_mir_dataflow::ResultsCursor;\n \n-use crate::borrow_check::{\n+use crate::{\n     constraints::OutlivesConstraintSet,\n     facts::{AllFacts, AllFactsExt},\n     location::LocationTable,", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/mod.rs"}, {"sha": "79ab8b713f95d1f646397c40c216edecbea2d730", "filename": "compiler/rustc_borrowck/src/type_check/liveness/polonius.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,10 +1,9 @@\n-use crate::borrow_check::def_use::{self, DefUse};\n-use crate::borrow_check::location::{LocationIndex, LocationTable};\n-use crate::dataflow::indexes::MovePathIndex;\n-use crate::dataflow::move_paths::{LookupResult, MoveData};\n+use crate::def_use::{self, DefUse};\n+use crate::location::{LocationIndex, LocationTable};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{Body, Local, Location, Place};\n use rustc_middle::ty::subst::GenericArg;\n+use rustc_mir_dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n \n use super::TypeChecker;\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/polonius.rs"}, {"sha": "1671c7c627e19d1555daa5c5e3a28f32e9e94249", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -8,12 +8,11 @@ use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n use std::rc::Rc;\n \n-use crate::dataflow::impls::MaybeInitializedPlaces;\n-use crate::dataflow::indexes::MovePathIndex;\n-use crate::dataflow::move_paths::{HasMoveData, MoveData};\n-use crate::dataflow::ResultsCursor;\n+use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir_dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex};\n+use rustc_mir_dataflow::ResultsCursor;\n \n-use crate::borrow_check::{\n+use crate::{\n     region_infer::values::{self, PointIndex, RegionValueElements},\n     type_check::liveness::local_use_map::LocalUseMap,\n     type_check::liveness::polonius,", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/trace.rs"}, {"sha": "2c8ff45b00da43813b3f3768bfb734df884d7a86", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -41,14 +41,14 @@ use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::Fallible;\n use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligations};\n \n-use crate::dataflow::impls::MaybeInitializedPlaces;\n-use crate::dataflow::move_paths::MoveData;\n-use crate::dataflow::ResultsCursor;\n-use crate::transform::{\n+use rustc_const_eval::transform::{\n     check_consts::ConstCx, promote_consts::is_const_fn_in_array_repeat_expression,\n };\n+use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir_dataflow::move_paths::MoveData;\n+use rustc_mir_dataflow::ResultsCursor;\n \n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowSet,\n     constraints::{OutlivesConstraint, OutlivesConstraintSet},\n     diagnostics::UniverseInfo,\n@@ -68,7 +68,7 @@ use crate::borrow_check::{\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n-        $crate::borrow_check::type_check::mirbug(\n+        $crate::type_check::mirbug(\n             $context.tcx(),\n             $context.last_span,\n             &format!(\n@@ -887,7 +887,7 @@ struct BorrowCheckContext<'a, 'tcx> {\n \n crate struct MirTypeckResults<'tcx> {\n     crate constraints: MirTypeckRegionConstraints<'tcx>,\n-    pub(in crate::borrow_check) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n+    crate universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n     crate opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n }\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs"}, {"sha": "0b9c33ccb775a96ad7fe411259aaa6ba7bbd609e", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -5,9 +5,9 @@ use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Const, Ty};\n use rustc_trait_selection::traits::query::Fallible;\n \n-use crate::borrow_check::constraints::OutlivesConstraint;\n-use crate::borrow_check::diagnostics::UniverseInfo;\n-use crate::borrow_check::type_check::{BorrowCheckContext, Locations};\n+use crate::constraints::OutlivesConstraint;\n+use crate::diagnostics::UniverseInfo;\n+use crate::type_check::{BorrowCheckContext, Locations};\n \n /// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n ///", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/relate_tys.rs"}, {"sha": "bebd19370299d00cdf360796c578638612f80312", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n use std::iter;\n \n-use crate::borrow_check::nll::ToRegionVid;\n+use crate::nll::ToRegionVid;\n \n #[derive(Debug)]\n pub struct UniversalRegions<'tcx> {", "previous_filename": "compiler/rustc_mir/src/borrow_check/universal_regions.rs"}, {"sha": "6022a9809502b2fc79b1e98f77f80884f657526c", "filename": "compiler/rustc_borrowck/src/used_muts.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,11 +1,10 @@\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n     Local, Location, Place, Statement, StatementKind, Terminator, TerminatorKind,\n };\n \n-use rustc_data_structures::fx::FxHashSet;\n-\n-use crate::borrow_check::MirBorrowckCtxt;\n+use crate::MirBorrowckCtxt;\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Walks the MIR adding to the set of `used_mut` locals that will be ignored for the purposes", "previous_filename": "compiler/rustc_mir/src/borrow_check/used_muts.rs"}, {"sha": "7a51293f5cda5411b59f58e48702de53011e7d0b", "filename": "compiler/rustc_codegen_cranelift/scripts/filter_profile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -42,7 +42,7 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {\n             continue;\n         }\n \n-        if stack.contains(\"rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\")\n+        if stack.contains(\"rustc_monomorphize::partitioning::collect_and_partition_mono_items\")\n             || stack.contains(\"rustc_incremental::assert_dep_graph::assert_dep_graph\")\n             || stack.contains(\"rustc_symbol_mangling::test::report_symbol_names\")\n         {\n@@ -81,7 +81,7 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {\n         }\n \n         const COLLECT_AND_PARTITION_MONO_ITEMS: &str =\n-            \"rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items\";\n+            \"rustc_monomorphize::partitioning::collect_and_partition_mono_items\";\n         if let Some(index) = stack.find(COLLECT_AND_PARTITION_MONO_ITEMS) {\n             stack = &stack[..index + COLLECT_AND_PARTITION_MONO_ITEMS.len()];\n         }"}, {"sha": "46a7485e4ef9ce2e0a7d859a1fa240c17fcaa39f", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     let mir = tcx.instance_mir(instance.def);\n     let _mir_guard = crate::PrintOnPanic(|| {\n         let mut buf = Vec::new();\n-        rustc_mir::util::write_mir_pretty(tcx, Some(instance.def_id()), &mut buf).unwrap();\n+        rustc_middle::mir::write_mir_pretty(tcx, Some(instance.def_id()), &mut buf).unwrap();\n         String::from_utf8_lossy(&buf).into_owned()\n     });\n "}, {"sha": "87193e3ef5341a060567ac6dac79fce80d6a62a3", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -16,7 +16,6 @@ extern crate rustc_incremental;\n extern crate rustc_index;\n extern crate rustc_interface;\n extern crate rustc_metadata;\n-extern crate rustc_mir;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;"}, {"sha": "1653d5cf6c560ae42e05550cf2a72f1491ca366d", "filename": "compiler/rustc_const_eval/Cargo.toml", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2FCargo.toml?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -0,0 +1,27 @@\n+[package]\n+name = \"rustc_const_eval\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+either = \"1.5.0\"\n+gsgdt = \"0.1.2\"\n+tracing = \"0.1\"\n+rustc_apfloat = { path = \"../rustc_apfloat\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n+rustc_attr = { path = \"../rustc_attr\" }\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n+rustc_index = { path = \"../rustc_index\" }\n+rustc_infer = { path = \"../rustc_infer\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n+rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n+rustc_session = { path = \"../rustc_session\" }\n+rustc_target = { path = \"../rustc_target\" }\n+rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_span = { path = \"../rustc_span\" }"}, {"sha": "5da1681662577648009f96b1da5b0aabfe02229d", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/const_eval/error.rs"}, {"sha": "171fc45ea4696c4ed5b414ff68b3ba15fba522e9", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -5,12 +5,12 @@ use crate::interpret::{\n     Immediate, InternKind, InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RefTracking, Scalar,\n     ScalarMaybeUninit, StackPopCleanup,\n };\n-use crate::util::pretty::display_allocation;\n \n use rustc_errors::ErrorReported;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n+use rustc_middle::mir::pretty::display_allocation;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;", "previous_filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs"}, {"sha": "40419a4d201ac0b198ab799ebf509a020ea23b7e", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs"}, {"sha": "8a90686b9003f5c391cd1e7a077969ab1a12a42c", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/const_eval/machine.rs"}, {"sha": "a334165df4cb1ff28a3747663808b2416edec18f", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/const_eval/mod.rs"}, {"sha": "4c4b0bd2d1f271c215d8e6b9591e9f3ee077e851", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/cast.rs"}, {"sha": "0521443533b784598e3612d38e0521792685b0da", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -12,6 +12,7 @@ use rustc_middle::ty::layout::{self, LayoutError, LayoutOf, LayoutOfHelpers, TyA\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n+use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n@@ -22,7 +23,6 @@ use super::{\n     ScalarMaybeUninit, StackPopJump,\n };\n use crate::transform::validate::equal_up_to_regions;\n-use crate::util::storage::AlwaysLiveLocals;\n \n pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     /// Stores the `Machine` instance.", "previous_filename": "compiler/rustc_mir/src/interpret/eval_context.rs"}, {"sha": "84e79408397e59efeabc80e346bfb425196268da", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -420,7 +420,7 @@ impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx, !>>\n     /// A helper function that allocates memory for the layout given and gives you access to mutate\n     /// it. Once your own mutation code is done, the backing `Allocation` is removed from the\n     /// current `Memory` and returned.\n-    pub(crate) fn intern_with_temp_alloc(\n+    pub fn intern_with_temp_alloc(\n         &mut self,\n         layout: TyAndLayout<'tcx>,\n         f: impl FnOnce(", "previous_filename": "compiler/rustc_mir/src/interpret/intern.rs"}, {"sha": "07e974b72664bbefc7103a91f80532ea3135ec6e", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/intrinsics.rs"}, {"sha": "d4cbba18029311bff2079acb73220ddb4d42bf62", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/intrinsics/caller_location.rs"}, {"sha": "a7012cd63f313059b270808ebea4cc8fe6d16c8d", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/intrinsics/type_name.rs"}, {"sha": "323e102b8723b904e8deadc005f055d421b139ec", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/machine.rs"}, {"sha": "b8b6ff93753f0d0001ca94533ee07a70f70e791e", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -15,6 +15,7 @@ use std::ptr;\n \n use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_middle::mir::display_allocation;\n use rustc_middle::ty::{Instance, ParamEnv, TyCtxt};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n@@ -23,7 +24,6 @@ use super::{\n     InterpResult, Machine, MayLeak, Pointer, PointerArithmetic, Provenance, Scalar,\n     ScalarMaybeUninit,\n };\n-use crate::util::pretty;\n \n #[derive(Debug, PartialEq, Copy, Clone)]\n pub enum MemoryKind<T> {\n@@ -851,7 +851,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> std::fmt::Debug for DumpAllocs<'a,\n             for alloc_id in alloc.relocations().values().map(|tag| tag.get_alloc_id()) {\n                 allocs_to_print.push_back(alloc_id);\n             }\n-            write!(fmt, \"{}\", pretty::display_allocation(tcx, alloc))\n+            write!(fmt, \"{}\", display_allocation(tcx, alloc))\n         }\n \n         let mut allocs_to_print: VecDeque<_> = self.allocs.iter().copied().collect();", "previous_filename": "compiler/rustc_mir/src/interpret/memory.rs"}, {"sha": "2b9fe56599715b6fd87db2f9104242b507d485f0", "filename": "compiler/rustc_const_eval/src/interpret/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/mod.rs"}, {"sha": "63aca67c9443c13b1724fa6fb2087cc6e94ec327", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -296,7 +296,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Note that for a given layout, this operation will either always fail or always\n     /// succeed!  Whether it succeeds depends on whether the layout can be represented\n     /// in an `Immediate`, not on which data is stored there currently.\n-    pub(crate) fn try_read_immediate(\n+    pub fn try_read_immediate(\n         &self,\n         src: &OpTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {\n@@ -547,7 +547,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     // in patterns via the `const_eval` module\n     /// The `val` and `layout` are assumed to already be in our interpreter\n     /// \"universe\" (param_env).\n-    crate fn const_to_op(\n+    pub fn const_to_op(\n         &self,\n         val: &ty::Const<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n@@ -566,7 +566,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    crate fn mir_const_to_op(\n+    pub fn mir_const_to_op(\n         &self,\n         val: &mir::ConstantKind<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,", "previous_filename": "compiler/rustc_mir/src/interpret/operand.rs"}, {"sha": "ac000b1bb566fe7ea9c037167da15e730073085e", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/operator.rs"}, {"sha": "95a44e3fecf3d19b249c1f81924f123b5ebc010b", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/place.rs"}, {"sha": "09bd07660a33eb0fa3ca56cc16ce2d62c6ce7b37", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -76,7 +76,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Runs the interpretation logic for the given `mir::Statement` at the current frame and\n     /// statement counter. This also moves the statement counter forward.\n-    crate fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {\n+    pub fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {\n         info!(\"{:?}\", stmt);\n \n         use rustc_middle::mir::StatementKind::*;", "previous_filename": "compiler/rustc_mir/src/interpret/step.rs"}, {"sha": "1c8e5e9e23c3caefab88cd27f834bd67c5b8db48", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/terminator.rs"}, {"sha": "a6ba00ec6952ece9e30b54fa295720de1669fa97", "filename": "compiler/rustc_const_eval/src/interpret/traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/traits.rs"}, {"sha": "eb0fdebb665faa2bea8e83168f0700b8ce916d2d", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/util.rs"}, {"sha": "03e0a8e7901d94c86f2077dd026e207e1aaea148", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/validity.rs"}, {"sha": "679d30227f1366cb4e89b1b25ad9e923a6efc268", "filename": "compiler/rustc_const_eval/src/interpret/visitor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/interpret/visitor.rs"}, {"sha": "0aa2dfb010f5477fe3c7df472669f5ff451aca0c", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "renamed", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -4,65 +4,44 @@ Rust MIR: a lowered representation of Rust.\n \n */\n \n-#![feature(nll)]\n-#![feature(in_band_lifetimes)]\n-#![feature(array_windows)]\n #![feature(assert_matches)]\n #![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n+#![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n-#![feature(format_args_capture)]\n+#![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n-#![feature(never_type)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]\n+#![feature(option_get_or_insert_default)]\n+#![feature(never_type)]\n+#![feature(trait_alias)]\n #![feature(trusted_len)]\n+#![feature(trusted_step)]\n #![feature(try_blocks)]\n-#![feature(associated_type_defaults)]\n-#![feature(stmt_expr_attributes)]\n-#![feature(trait_alias)]\n-#![feature(option_get_or_insert_default)]\n-#![feature(once_cell)]\n-#![feature(control_flow_enum)]\n-#![feature(try_reserve)]\n-#![feature(try_reserve_kind)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]\n extern crate tracing;\n #[macro_use]\n extern crate rustc_middle;\n \n-mod borrow_check;\n pub mod const_eval;\n-pub mod dataflow;\n pub mod interpret;\n-pub mod monomorphize;\n-mod shim;\n pub mod transform;\n pub mod util;\n \n-// A public API provided for the Rust compiler consumers.\n-pub use self::borrow_check::consumers;\n-\n use rustc_middle::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers) {\n-    borrow_check::provide(providers);\n     const_eval::provide(providers);\n-    shim::provide(providers);\n-    transform::provide(providers);\n-    monomorphize::partitioning::provide(providers);\n-    monomorphize::polymorphize::provide(providers);\n     providers.eval_to_const_value_raw = const_eval::eval_to_const_value_raw_provider;\n     providers.eval_to_allocation_raw = const_eval::eval_to_allocation_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n-    providers.mir_callgraph_reachable = transform::inline::cycle::mir_callgraph_reachable;\n-    providers.mir_inliner_callees = transform::inline::cycle::mir_inliner_callees;\n     providers.destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::destructure_const(tcx, param_env, value)", "previous_filename": "compiler/rustc_mir/src/lib.rs"}, {"sha": "d02b4286c175a6396771cdc31e4f7ecebd0c822f", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -12,6 +12,8 @@ use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt};\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n+use rustc_mir_dataflow::impls::MaybeMutBorrowedLocals;\n+use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, SelectionContext, TraitEngine};\n@@ -24,17 +26,15 @@ use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n-use crate::dataflow::impls::MaybeMutBorrowedLocals;\n-use crate::dataflow::{self, Analysis};\n \n // We are using `MaybeMutBorrowedLocals` as a proxy for whether an item may have been mutated\n // through a pointer prior to the given point. This is okay even though `MaybeMutBorrowedLocals`\n // kills locals upon `StorageDead` because a local will never be used after a `StorageDead`.\n type IndirectlyMutableResults<'mir, 'tcx> =\n-    dataflow::ResultsCursor<'mir, 'tcx, MaybeMutBorrowedLocals<'mir, 'tcx>>;\n+    rustc_mir_dataflow::ResultsCursor<'mir, 'tcx, MaybeMutBorrowedLocals<'mir, 'tcx>>;\n \n type QualifResults<'mir, 'tcx, Q> =\n-    dataflow::ResultsCursor<'mir, 'tcx, FlowSensitiveAnalysis<'mir, 'mir, 'tcx, Q>>;\n+    rustc_mir_dataflow::ResultsCursor<'mir, 'tcx, FlowSensitiveAnalysis<'mir, 'mir, 'tcx, Q>>;\n \n #[derive(Default)]\n pub struct Qualifs<'mir, 'tcx> {", "previous_filename": "compiler/rustc_mir/src/transform/check_consts/check.rs"}, {"sha": "a5cb0f4e14b178547dc1c1f6ae305f748b3d8183", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs"}, {"sha": "8923d989b2944a63796842d5e1f6cbddf2e60e26", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs"}, {"sha": "b08ce219034ce09eb5b38d2b4dd7fcea7b7b5959", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/check_consts/post_drop_elaboration.rs"}, {"sha": "413a9638eb37b172717d4473f48079215170cf72", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs"}, {"sha": "8e1b69a1d7413e48215c3ddf798f02d1929f501f", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::mir::{self, BasicBlock, Local, Location};\n use std::marker::PhantomData;\n \n use super::{qualifs, ConstCx, Qualif};\n-use crate::dataflow;\n \n /// A `Visitor` that propagates qualifs between locals. This defines the transfer function of\n /// `FlowSensitiveAnalysis`.\n@@ -165,7 +164,7 @@ where\n     }\n }\n \n-impl<Q> dataflow::AnalysisDomain<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n+impl<Q> rustc_mir_dataflow::AnalysisDomain<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n where\n     Q: Qualif,\n {\n@@ -182,7 +181,7 @@ where\n     }\n }\n \n-impl<Q> dataflow::Analysis<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n+impl<Q> rustc_mir_dataflow::Analysis<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n where\n     Q: Qualif,\n {", "previous_filename": "compiler/rustc_mir/src/transform/check_consts/resolver.rs"}, {"sha": "38c28f34934a4d01da25fecaec30fe22becf6bbe", "filename": "compiler/rustc_const_eval/src/transform/mod.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -0,0 +1,5 @@\n+pub mod check_consts;\n+pub mod promote_consts;\n+pub mod validate;\n+\n+pub use rustc_middle::mir::MirPass;"}, {"sha": "6822ad2d7b5dd0d3e02f0f9a2029b407bd249839", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1058,7 +1058,7 @@ pub fn promote_candidates<'tcx>(\n \n /// This function returns `true` if the function being called in the array\n /// repeat expression is a `const` function.\n-crate fn is_const_fn_in_array_repeat_expression<'tcx>(\n+pub fn is_const_fn_in_array_repeat_expression<'tcx>(\n     ccx: &ConstCx<'_, 'tcx>,\n     place: &Place<'tcx>,\n     body: &Body<'tcx>,", "previous_filename": "compiler/rustc_mir/src/transform/promote_consts.rs"}, {"sha": "40a32a76c9446e49114d4794b0b7f9dfbf2f6f5b", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,9 +1,5 @@\n //! Validates the MIR to ensure that invariants are upheld.\n \n-use crate::dataflow::impls::MaybeStorageLive;\n-use crate::dataflow::{Analysis, ResultsCursor};\n-use crate::util::storage::AlwaysLiveLocals;\n-\n use super::MirPass;\n use rustc_index::bit_set::BitSet;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -17,6 +13,9 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc_mir_dataflow::impls::MaybeStorageLive;\n+use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n+use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_target::abi::Size;\n \n #[derive(Copy, Clone, Debug)]", "previous_filename": "compiler/rustc_mir/src/transform/validate.rs"}, {"sha": "4bc0357cab8047c65b2defe905c5ad78d86b29ea", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/util/aggregate.rs"}, {"sha": "73adc60577bfcf41e43f243ba057f77256c8d112", "filename": "compiler/rustc_const_eval/src/util/alignment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Falignment.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/util/alignment.rs"}, {"sha": "9c56fd722bda619d9da2c54104acf74999b2949b", "filename": "compiler/rustc_const_eval/src/util/collect_writes.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcollect_writes.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -2,7 +2,7 @@ use rustc_middle::mir::visit::PlaceContext;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{Body, Local, Location};\n \n-crate trait FindAssignments {\n+pub trait FindAssignments {\n     // Finds all statements that assign directly to local (i.e., X = ...)\n     // and returns their locations.\n     fn find_assignments(&self, local: Local) -> Vec<Location>;", "previous_filename": "compiler/rustc_mir/src/util/collect_writes.rs"}, {"sha": "33ad128eeeb7503847c1c63974e5ab491de1830e", "filename": "compiler/rustc_const_eval/src/util/find_self_call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ffind_self_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ffind_self_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ffind_self_call.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/util/find_self_call.rs"}, {"sha": "4a406f8bfd08834fc18e66ea987fe261ed636ef9", "filename": "compiler/rustc_const_eval/src/util/mod.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -0,0 +1,8 @@\n+pub mod aggregate;\n+mod alignment;\n+pub mod collect_writes;\n+mod find_self_call;\n+\n+pub use self::aggregate::expand_aggregate;\n+pub use self::alignment::is_disaligned;\n+pub use self::find_self_call::find_self_call;"}, {"sha": "ba8616cc6ef73cb9340001bd3e99d1385c9e566c", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -22,7 +22,7 @@ rustc_feature = { path = \"../rustc_feature\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_hir_pretty = { path = \"../rustc_hir_pretty\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n-rustc_mir = { path = \"../rustc_mir\" }\n+rustc_const_eval = { path = \"../rustc_const_eval\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_plugin_impl = { path = \"../rustc_plugin_impl\" }\n rustc_save_analysis = { path = \"../rustc_save_analysis\" }"}, {"sha": "a25cc000443c7aa294894ca46a7187af5a1ee6d9", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -6,8 +6,8 @@ use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n+use rustc_middle::mir::{write_mir_graphviz, write_mir_pretty};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n use rustc_session::config::{Input, PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;"}, {"sha": "e76fa6d8a1bc664b7002a429e18e6ff797dc3e06", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -14,6 +14,7 @@ rayon = { version = \"0.3.1\", package = \"rustc-rayon\" }\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n+rustc_borrowck = { path = \"../rustc_borrowck\" }\n rustc_builtin_macros = { path = \"../rustc_builtin_macros\" }\n rustc_expand = { path = \"../rustc_expand\" }\n rustc_parse = { path = \"../rustc_parse\" }\n@@ -31,8 +32,10 @@ rustc_symbol_mangling = { path = \"../rustc_symbol_mangling\" }\n rustc_codegen_llvm = { path = \"../rustc_codegen_llvm\", optional = true }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n-rustc_mir = { path = \"../rustc_mir\" }\n+rustc_const_eval = { path = \"../rustc_const_eval\" }\n rustc_mir_build = { path = \"../rustc_mir_build\" }\n+rustc_mir_transform = { path = \"../rustc_mir_transform\" }\n+rustc_monomorphize = { path = \"../rustc_monomorphize\" }\n rustc_passes = { path = \"../rustc_passes\" }\n rustc_typeck = { path = \"../rustc_typeck\" }\n rustc_lint = { path = \"../rustc_lint\" }"}, {"sha": "1f3d6f70ff8373990e8ff45cf997aa371f401b98", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -4,6 +4,7 @@ use crate::util;\n \n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self as ast, visit};\n+use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n@@ -21,7 +22,6 @@ use rustc_middle::middle;\n use rustc_middle::middle::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n-use rustc_mir as mir;\n use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, hir_stats, layout_test};\n@@ -737,9 +737,12 @@ pub static DEFAULT_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|| {\n     let providers = &mut Providers::default();\n     providers.analysis = analysis;\n     proc_macro_decls::provide(providers);\n+    rustc_const_eval::provide(providers);\n     rustc_middle::hir::provide(providers);\n-    mir::provide(providers);\n+    mir_borrowck::provide(providers);\n     mir_build::provide(providers);\n+    rustc_mir_transform::provide(providers);\n+    rustc_monomorphize::provide(providers);\n     rustc_privacy::provide(providers);\n     typeck::provide(providers);\n     ty::provide(providers);\n@@ -911,7 +914,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n         for def_id in tcx.body_owners() {\n             tcx.ensure().thir_check_unsafety(def_id);\n             if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n-                mir::transform::check_unsafety::check_unsafety(tcx, def_id);\n+                rustc_mir_transform::check_unsafety::check_unsafety(tcx, def_id);\n             }\n \n             if tcx.hir().body_const_context(def_id).is_some() {\n@@ -1059,7 +1062,7 @@ pub fn start_codegen<'tcx>(\n     info!(\"Post-codegen\\n{:?}\", tcx.debug_stats());\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {\n-        if let Err(e) = mir::transform::dump_mir::emit_mir(tcx, outputs) {\n+        if let Err(e) = rustc_mir_transform::dump_mir::emit_mir(tcx, outputs) {\n             tcx.sess.err(&format!(\"could not emit MIR: {}\", e));\n             tcx.sess.abort_if_errors();\n         }"}, {"sha": "68b83fccc85fd4dd1f98c49996c1564c91a6732c", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -9,6 +9,8 @@ doctest = false\n [dependencies]\n rustc_arena = { path = \"../rustc_arena\" }\n bitflags = \"1.2.1\"\n+either = \"1.5.0\"\n+gsgdt = \"0.1.2\"\n tracing = \"0.1\"\n rustc-rayon-core = \"0.3.1\"\n polonius-engine = \"0.13.0\"\n@@ -21,6 +23,7 @@ rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_errors = { path = \"../rustc_errors\" }\n+rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "a366232c349d7c48119523e473d6b3f6485df811", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -8,7 +8,7 @@\n //! - **MIR.** The \"mid-level (M) intermediate representation (IR)\" is\n //!   defined in the `mir` module. This module contains only the\n //!   *definition* of the MIR; the passes that transform and operate\n-//!   on MIR are found in `rustc_mir` crate.\n+//!   on MIR are found in `rustc_const_eval` crate.\n //! - **Types.** The internal representation of types used in rustc is\n //!   defined in the `ty` module. This includes the **type context**\n //!   (or `tcx`), which is the central context during most of\n@@ -51,6 +51,8 @@\n #![feature(associated_type_defaults)]\n #![feature(iter_zip)]\n #![feature(thread_local_const_init)]\n+#![feature(trusted_step)]\n+#![feature(try_blocks)]\n #![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(nonzero_ops)]"}, {"sha": "770b52a4d4b0fbb3ffc26e9bdf3030b23e2d7e4c", "filename": "compiler/rustc_middle/src/mir/generic_graph.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/util/generic_graph.rs"}, {"sha": "21c18b28e258ba2d389099d61a2100d3f1cf43a5", "filename": "compiler/rustc_middle/src/mir/generic_graphviz.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/util/generic_graphviz.rs"}, {"sha": "92c7a358c0a41d59b9552a99ede510c04f0f0f84", "filename": "compiler/rustc_middle/src/mir/graphviz.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/util/graphviz.rs"}, {"sha": "38d4c5b4bd10ee208c49cd7bee2b4ca175597434", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -42,18 +42,30 @@ pub use self::query::*;\n \n pub mod abstract_const;\n pub mod coverage;\n+mod generic_graph;\n+pub mod generic_graphviz;\n mod graph_cyclic_cache;\n+pub mod graphviz;\n pub mod interpret;\n pub mod mono;\n+pub mod patch;\n mod predecessors;\n+pub mod pretty;\n mod query;\n+pub mod spanview;\n pub mod tcx;\n pub mod terminator;\n pub use terminator::*;\n pub mod traversal;\n mod type_foldable;\n pub mod visit;\n \n+pub use self::generic_graph::graphviz_safe_def_name;\n+pub use self::graphviz::write_mir_graphviz;\n+pub use self::pretty::{\n+    create_dump_file, display_allocation, dump_enabled, dump_mir, write_mir_pretty, PassWhere,\n+};\n+\n /// Types for locals\n pub type LocalDecls<'tcx> = IndexVec<Local, LocalDecl<'tcx>>;\n \n@@ -75,6 +87,22 @@ impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n     }\n }\n \n+/// A streamlined trait that you can implement to create a pass; the\n+/// pass will be named after the type, and it will consist of a main\n+/// loop that goes over each available MIR and applies `run_pass`.\n+pub trait MirPass<'tcx> {\n+    fn name(&self) -> Cow<'_, str> {\n+        let name = std::any::type_name::<Self>();\n+        if let Some(tail) = name.rfind(':') {\n+            Cow::from(&name[tail + 1..])\n+        } else {\n+            Cow::from(name)\n+        }\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);\n+}\n+\n /// The various \"big phases\" that MIR goes through.\n ///\n /// These phases all describe dialects of MIR. Since all MIR uses the same datastructures, the\n@@ -1142,7 +1170,7 @@ rustc_index::newtype_index! {\n     /// [CFG]: https://rustc-dev-guide.rust-lang.org/appendix/background.html#cfg\n     /// [data-flow analyses]:\n     ///     https://rustc-dev-guide.rust-lang.org/appendix/background.html#what-is-a-dataflow-analysis\n-    /// [`CriticalCallEdges`]: ../../rustc_mir/transform/add_call_guards/enum.AddCallGuards.html#variant.CriticalCallEdges\n+    /// [`CriticalCallEdges`]: ../../rustc_const_eval/transform/add_call_guards/enum.AddCallGuards.html#variant.CriticalCallEdges\n     /// [guide-mir]: https://rustc-dev-guide.rust-lang.org/mir/\n     pub struct BasicBlock {\n         derive [HashStable]"}, {"sha": "1f571a36441be101cd22eed473dd2bac343e488f", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/util/patch.rs"}, {"sha": "db98cb763430f4dc62a0e9f4246192a1ffc2dc88", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -7,7 +7,6 @@ use std::path::{Path, PathBuf};\n \n use super::graphviz::write_mir_fn_graphviz;\n use super::spanview::write_mir_fn_spanview;\n-use crate::transform::MirSource;\n use either::Either;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n@@ -16,6 +15,7 @@ use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, Pointer, Provenance,\n };\n use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::MirSource;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt, TyS, TypeFoldable, TypeVisitor};\n use rustc_target::abi::Size;\n@@ -250,7 +250,7 @@ fn create_dump_file_with_basename(\n /// bit of MIR-related data. Used by `mir-dump`, but also by other\n /// bits of code (e.g., NLL inference) that dump graphviz data or\n /// other things, and hence takes the extension as an argument.\n-pub(crate) fn create_dump_file(\n+pub fn create_dump_file(\n     tcx: TyCtxt<'_>,\n     extension: &str,\n     pass_num: Option<&dyn Display>,", "previous_filename": "compiler/rustc_mir/src/util/pretty.rs"}, {"sha": "1bdb6ca012b4aa6bdd63b34a7968425d8d472aa5", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -219,7 +219,7 @@ pub struct BorrowCheckResult<'tcx> {\n /// The result of the `mir_const_qualif` query.\n ///\n /// Each field (except `error_occured`) corresponds to an implementer of the `Qualif` trait in\n-/// `rustc_mir/src/transform/check_consts/qualifs.rs`. See that file for more information on each\n+/// `rustc_const_eval/src/transform/check_consts/qualifs.rs`. See that file for more information on each\n /// `Qualif`.\n #[derive(Clone, Copy, Debug, Default, TyEncodable, TyDecodable, HashStable)]\n pub struct ConstQualifs {\n@@ -313,7 +313,7 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n /// are interesting (for error reporting). Order of variants indicates sort\n /// order of the category, thereby influencing diagnostic output.\n ///\n-/// See also `rustc_mir::borrow_check::constraints`.\n+/// See also `rustc_const_eval::borrow_check::constraints`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n #[derive(TyEncodable, TyDecodable, HashStable)]\n pub enum ConstraintCategory {"}, {"sha": "42683dac426e3b1fdd5271658149c50ca42bd014", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/util/spanview.rs"}, {"sha": "0fbaf81c21e40e7c0a22e4dafbab9f25193d6ca8", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -643,7 +643,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     }\n \n     /// This returns the types of the MIR locals which had to be stored across suspension points.\n-    /// It is calculated in rustc_mir::transform::generator::StateTransform.\n+    /// It is calculated in rustc_const_eval::transform::generator::StateTransform.\n     /// All the types here must be in the tuple in GeneratorInterior.\n     ///\n     /// The locals are grouped by their variant number. Note that some locals may\n@@ -1268,7 +1268,7 @@ pub type Region<'tcx> = &'tcx RegionKind;\n /// Representation of regions. Note that the NLL checker uses a distinct\n /// representation of regions. For this reason, it internally replaces all the\n /// regions with inference variables -- the index of the variable is then used\n-/// to index into internal NLL data structures. See `rustc_mir::borrow_check`\n+/// to index into internal NLL data structures. See `rustc_const_eval::borrow_check`\n /// module for more information.\n ///\n /// ## The Region lattice within a given function"}, {"sha": "8a426cc1015ccbdd4ae0562156a611fba8400c64", "filename": "compiler/rustc_mir/src/dataflow/mod.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -1,49 +0,0 @@\n-use rustc_ast::{self as ast, MetaItem};\n-use rustc_middle::ty;\n-use rustc_session::Session;\n-use rustc_span::symbol::{sym, Symbol};\n-\n-pub(crate) use self::drop_flag_effects::*;\n-pub use self::framework::{\n-    fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, BorrowckFlowState,\n-    BorrowckResults, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results,\n-    ResultsCursor, ResultsRefCursor, ResultsVisitor, SwitchIntEdgeEffects,\n-};\n-\n-use self::move_paths::MoveData;\n-\n-pub mod drop_flag_effects;\n-mod framework;\n-pub mod impls;\n-pub mod move_paths;\n-\n-pub(crate) mod indexes {\n-    pub(crate) use super::{\n-        impls::borrows::BorrowIndex,\n-        move_paths::{InitIndex, MoveOutIndex, MovePathIndex},\n-    };\n-}\n-\n-pub struct MoveDataParamEnv<'tcx> {\n-    pub(crate) move_data: MoveData<'tcx>,\n-    pub(crate) param_env: ty::ParamEnv<'tcx>,\n-}\n-\n-pub(crate) fn has_rustc_mir_with(\n-    _sess: &Session,\n-    attrs: &[ast::Attribute],\n-    name: Symbol,\n-) -> Option<MetaItem> {\n-    for attr in attrs {\n-        if attr.has_name(sym::rustc_mir) {\n-            let items = attr.meta_item_list();\n-            for item in items.iter().flat_map(|l| l.iter()) {\n-                match item.meta_item() {\n-                    Some(mi) if mi.has_name(name) => return Some(mi.clone()),\n-                    _ => continue,\n-                }\n-            }\n-        }\n-    }\n-    None\n-}"}, {"sha": "3e466b5060febad46d9057bbf047054bad41eb37", "filename": "compiler/rustc_mir/src/util/mod.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ae8deb8a35030bdc4e502b03400800864cc264/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs?ref=47ae8deb8a35030bdc4e502b03400800864cc264", "patch": "@@ -1,21 +0,0 @@\n-pub mod aggregate;\n-pub mod borrowck_errors;\n-pub mod elaborate_drops;\n-pub mod patch;\n-pub mod storage;\n-\n-mod alignment;\n-pub mod collect_writes;\n-mod find_self_call;\n-mod generic_graph;\n-pub(crate) mod generic_graphviz;\n-mod graphviz;\n-pub(crate) mod pretty;\n-pub(crate) mod spanview;\n-\n-pub use self::aggregate::expand_aggregate;\n-pub use self::alignment::is_disaligned;\n-pub use self::find_self_call::find_self_call;\n-pub use self::generic_graph::graphviz_safe_def_name;\n-pub use self::graphviz::write_mir_graphviz;\n-pub use self::pretty::{dump_enabled, dump_mir, write_mir_fn, write_mir_pretty, PassWhere};"}, {"sha": "3cd4892402e4c36ef493d2a6ff1ffc152bfaba59", "filename": "compiler/rustc_mir_dataflow/Cargo.toml", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2FCargo.toml?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -0,0 +1,23 @@\n+[package]\n+name = \"rustc_mir_dataflow\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+polonius-engine = \"0.13.0\"\n+regex = \"1\"\n+smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_graphviz = { path = \"../rustc_graphviz\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n+rustc_index = { path = \"../rustc_index\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_session = { path = \"../rustc_session\" }\n+rustc_target = { path = \"../rustc_target\" }\n+rustc_span = { path = \"../rustc_span\" }"}, {"sha": "e2269562b3d9b4f2fd69cbfdd114d7c211604ace", "filename": "compiler/rustc_mir_dataflow/src/drop_flag_effects.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fdrop_flag_effects.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,4 +1,4 @@\n-use crate::util::elaborate_drops::DropFlagState;\n+use crate::elaborate_drops::DropFlagState;\n use rustc_middle::mir::{self, Body, Location};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::abi::VariantIdx;\n@@ -79,7 +79,7 @@ fn place_contents_drop_state_cannot_differ<'tcx>(\n     }\n }\n \n-pub(crate) fn on_lookup_result_bits<'tcx, F>(\n+pub fn on_lookup_result_bits<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n@@ -96,7 +96,7 @@ pub(crate) fn on_lookup_result_bits<'tcx, F>(\n     }\n }\n \n-pub(crate) fn on_all_children_bits<'tcx, F>(\n+pub fn on_all_children_bits<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n@@ -138,7 +138,7 @@ pub(crate) fn on_all_children_bits<'tcx, F>(\n     on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);\n }\n \n-pub(crate) fn on_all_drop_children_bits<'tcx, F>(\n+pub fn on_all_drop_children_bits<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'tcx>,\n@@ -161,7 +161,7 @@ pub(crate) fn on_all_drop_children_bits<'tcx, F>(\n     })\n }\n \n-pub(crate) fn drop_flag_effects_for_function_entry<'tcx, F>(\n+pub fn drop_flag_effects_for_function_entry<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'tcx>,\n@@ -179,7 +179,7 @@ pub(crate) fn drop_flag_effects_for_function_entry<'tcx, F>(\n     }\n }\n \n-pub(crate) fn drop_flag_effects_for_location<'tcx, F>(\n+pub fn drop_flag_effects_for_location<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'tcx>,\n@@ -204,7 +204,7 @@ pub(crate) fn drop_flag_effects_for_location<'tcx, F>(\n     for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));\n }\n \n-pub(crate) fn for_location_inits<'tcx, F>(\n+pub fn for_location_inits<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,", "previous_filename": "compiler/rustc_mir/src/dataflow/drop_flag_effects.rs"}, {"sha": "7607ccc3aba83a589fd550db9e1b7359354138aa", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,7 +1,7 @@\n-use crate::util::patch::MirPatch;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::subst::SubstsRef;", "previous_filename": "compiler/rustc_mir/src/util/elaborate_drops.rs"}, {"sha": "c000e49c14bc1b72483803e310601e420be49193", "filename": "compiler/rustc_mir_dataflow/src/framework/cursor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/cursor.rs"}, {"sha": "8a9ced91eb3763c66d15f6799f6c7a78e1408526", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/direction.rs"}, {"sha": "804abc3b42b53c70af141a7e11b72e238e3dc79f", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -11,6 +11,7 @@ use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::{self, traversal, BasicBlock};\n+use rustc_middle::mir::{create_dump_file, dump_enabled};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n \n@@ -20,7 +21,6 @@ use super::{\n     visit_results, Analysis, Direction, GenKill, GenKillAnalysis, GenKillSet, JoinSemiLattice,\n     ResultsCursor, ResultsVisitor,\n };\n-use crate::util::pretty::{create_dump_file, dump_enabled};\n \n /// A dataflow analysis that has converged to fixpoint.\n pub struct Results<'tcx, A>", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs"}, {"sha": "1d1553bbbd984b69c1869b145b6214e4a1529dac", "filename": "compiler/rustc_mir_dataflow/src/framework/fmt.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -147,18 +147,18 @@ where\n }\n \n impl<C> DebugWithContext<C> for rustc_middle::mir::Local {}\n-impl<C> DebugWithContext<C> for crate::dataflow::move_paths::InitIndex {}\n+impl<C> DebugWithContext<C> for crate::move_paths::InitIndex {}\n \n-impl<'tcx, C> DebugWithContext<C> for crate::dataflow::move_paths::MovePathIndex\n+impl<'tcx, C> DebugWithContext<C> for crate::move_paths::MovePathIndex\n where\n-    C: crate::dataflow::move_paths::HasMoveData<'tcx>,\n+    C: crate::move_paths::HasMoveData<'tcx>,\n {\n     fn fmt_with(&self, ctxt: &C, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", ctxt.move_data().move_paths[*self])\n     }\n }\n \n-impl<T, C> DebugWithContext<C> for crate::dataflow::lattice::Dual<T>\n+impl<T, C> DebugWithContext<C> for crate::lattice::Dual<T>\n where\n     T: DebugWithContext<C>,\n {", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/fmt.rs"}, {"sha": "a370f8e40f9aed237bb23ccca902a51cab82246f", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -6,11 +6,11 @@ use std::{io, ops, str};\n \n use regex::Regex;\n use rustc_graphviz as dot;\n+use rustc_middle::mir::graphviz_safe_def_name;\n use rustc_middle::mir::{self, BasicBlock, Body, Location};\n \n use super::fmt::{DebugDiffWithAdapter, DebugWithAdapter, DebugWithContext};\n use super::{Analysis, Direction, Results, ResultsRefCursor, ResultsVisitor};\n-use crate::util::graphviz_safe_def_name;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum OutputStyle {", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/graphviz.rs"}, {"sha": "f937b31f4cfc9d00afb13f31958ec9ba856e8e4c", "filename": "compiler/rustc_mir_dataflow/src/framework/lattice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/lattice.rs"}, {"sha": "f0c9ac4c504a384557b36b40883ac49f73d66a96", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -11,7 +11,7 @@\n //! `visit_results`. The following example uses the `ResultsCursor` approach.\n //!\n //! ```ignore (cross-crate-imports)\n-//! use rustc_mir::dataflow::Analysis; // Makes `into_engine` available.\n+//! use rustc_const_eval::dataflow::Analysis; // Makes `into_engine` available.\n //!\n //! fn do_my_analysis(tcx: TyCtxt<'tcx>, body: &mir::Body<'tcx>) {\n //!     let analysis = MyAnalysis::new()\n@@ -50,8 +50,7 @@ pub use self::cursor::{ResultsCursor, ResultsRefCursor};\n pub use self::direction::{Backward, Direction, Forward};\n pub use self::engine::{Engine, Results};\n pub use self::lattice::{JoinSemiLattice, MeetSemiLattice};\n-pub use self::visitor::{visit_results, ResultsVisitor};\n-pub use self::visitor::{BorrowckFlowState, BorrowckResults};\n+pub use self::visitor::{visit_results, ResultsVisitable, ResultsVisitor};\n \n /// Define the domain of a dataflow problem.\n ///", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/mod.rs"}, {"sha": "a5989121679c4fa8fb2014cd9910581e30520a48", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/tests.rs"}, {"sha": "84136c4d78cf1e495bd739b48b181a88936d6882", "filename": "compiler/rustc_mir_dataflow/src/framework/visitor.rs", "status": "renamed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,7 +1,6 @@\n use rustc_middle::mir::{self, BasicBlock, Location};\n \n use super::{Analysis, Direction, Results};\n-use crate::dataflow::impls::{borrows::Borrows, EverInitializedPlaces, MaybeUninitializedPlaces};\n \n /// Calls the corresponding method in `ResultsVisitor` for every location in a `mir::Body` with the\n /// dataflow state at that location.\n@@ -186,95 +185,3 @@ where\n         self.analysis.apply_terminator_effect(state, term, loc);\n     }\n }\n-\n-/// A tuple with named fields that can hold either the results or the transient state of the\n-/// dataflow analyses used by the borrow checker.\n-#[derive(Debug)]\n-pub struct BorrowckAnalyses<B, U, E> {\n-    pub borrows: B,\n-    pub uninits: U,\n-    pub ever_inits: E,\n-}\n-\n-/// The results of the dataflow analyses used by the borrow checker.\n-pub type BorrowckResults<'mir, 'tcx> = BorrowckAnalyses<\n-    Results<'tcx, Borrows<'mir, 'tcx>>,\n-    Results<'tcx, MaybeUninitializedPlaces<'mir, 'tcx>>,\n-    Results<'tcx, EverInitializedPlaces<'mir, 'tcx>>,\n->;\n-\n-/// The transient state of the dataflow analyses used by the borrow checker.\n-pub type BorrowckFlowState<'mir, 'tcx> =\n-    <BorrowckResults<'mir, 'tcx> as ResultsVisitable<'tcx>>::FlowState;\n-\n-macro_rules! impl_visitable {\n-    ( $(\n-        $T:ident { $( $field:ident : $A:ident ),* $(,)? }\n-    )* ) => { $(\n-        impl<'tcx, $($A),*, D: Direction> ResultsVisitable<'tcx> for $T<$( Results<'tcx, $A> ),*>\n-        where\n-            $( $A: Analysis<'tcx, Direction = D>, )*\n-        {\n-            type Direction = D;\n-            type FlowState = $T<$( $A::Domain ),*>;\n-\n-            fn new_flow_state(&self, body: &mir::Body<'tcx>) -> Self::FlowState {\n-                $T {\n-                    $( $field: self.$field.analysis.bottom_value(body) ),*\n-                }\n-            }\n-\n-            fn reset_to_block_entry(\n-                &self,\n-                state: &mut Self::FlowState,\n-                block: BasicBlock,\n-            ) {\n-                $( state.$field.clone_from(&self.$field.entry_set_for_block(block)); )*\n-            }\n-\n-            fn reconstruct_before_statement_effect(\n-                &self,\n-                state: &mut Self::FlowState,\n-                stmt: &mir::Statement<'tcx>,\n-                loc: Location,\n-            ) {\n-                $( self.$field.analysis\n-                    .apply_before_statement_effect(&mut state.$field, stmt, loc); )*\n-            }\n-\n-            fn reconstruct_statement_effect(\n-                &self,\n-                state: &mut Self::FlowState,\n-                stmt: &mir::Statement<'tcx>,\n-                loc: Location,\n-            ) {\n-                $( self.$field.analysis\n-                    .apply_statement_effect(&mut state.$field, stmt, loc); )*\n-            }\n-\n-            fn reconstruct_before_terminator_effect(\n-                &self,\n-                state: &mut Self::FlowState,\n-                term: &mir::Terminator<'tcx>,\n-                loc: Location,\n-            ) {\n-                $( self.$field.analysis\n-                    .apply_before_terminator_effect(&mut state.$field, term, loc); )*\n-            }\n-\n-            fn reconstruct_terminator_effect(\n-                &self,\n-                state: &mut Self::FlowState,\n-                term: &mir::Terminator<'tcx>,\n-                loc: Location,\n-            ) {\n-                $( self.$field.analysis\n-                    .apply_terminator_effect(&mut state.$field, term, loc); )*\n-            }\n-        }\n-    )* }\n-}\n-\n-impl_visitable! {\n-    BorrowckAnalyses { borrows: B, uninits: U, ever_inits: E }\n-}", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/visitor.rs"}, {"sha": "81d84f80ad4c19a2cf083639abeb7bee435afe49", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n-pub use super::*;\n+use super::*;\n \n-use crate::dataflow::{AnalysisDomain, GenKill, GenKillAnalysis};\n+use crate::{AnalysisDomain, GenKill, GenKillAnalysis};\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{ParamEnv, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/borrowed_locals.rs"}, {"sha": "07570e764f5e087369b944156429366497d13761", "filename": "compiler/rustc_mir_dataflow/src/impls/init_locals.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -2,15 +2,15 @@\n //!\n //! A local will be maybe initialized if *any* projections of that local might be initialized.\n \n-use crate::dataflow::{self, GenKill};\n+use crate::GenKill;\n \n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{self, BasicBlock, Local, Location};\n \n pub struct MaybeInitializedLocals;\n \n-impl dataflow::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n+impl crate::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_init_locals\";\n@@ -28,7 +28,7 @@ impl dataflow::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n     }\n }\n \n-impl dataflow::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n+impl crate::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n     type Idx = Local;\n \n     fn statement_effect(", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/init_locals.rs"}, {"sha": "0039d3188d57acc0317793da5c4a621cb88cb7f6", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -2,7 +2,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Local, Location};\n \n-use crate::dataflow::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n+use crate::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n \n /// A [live-variable dataflow analysis][liveness].\n ///", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/liveness.rs"}, {"sha": "771ad90af28d67e08b306a755f4723129f46bca7", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "renamed", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -7,27 +7,22 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, Body, Location};\n use rustc_middle::ty::{self, TyCtxt};\n \n-use super::MoveDataParamEnv;\n-\n-use crate::util::elaborate_drops::DropFlagState;\n-\n-use super::move_paths::{HasMoveData, InitIndex, InitKind, MoveData, MovePathIndex};\n-use super::{lattice, AnalysisDomain, GenKill, GenKillAnalysis};\n-\n-use super::drop_flag_effects_for_function_entry;\n-use super::drop_flag_effects_for_location;\n-use super::on_lookup_result_bits;\n-use crate::dataflow::drop_flag_effects;\n-use crate::dataflow::framework::SwitchIntEdgeEffects;\n+use crate::drop_flag_effects;\n+use crate::drop_flag_effects_for_function_entry;\n+use crate::drop_flag_effects_for_location;\n+use crate::elaborate_drops::DropFlagState;\n+use crate::framework::SwitchIntEdgeEffects;\n+use crate::move_paths::{HasMoveData, InitIndex, InitKind, MoveData, MovePathIndex};\n+use crate::on_lookup_result_bits;\n+use crate::MoveDataParamEnv;\n+use crate::{lattice, AnalysisDomain, GenKill, GenKillAnalysis};\n \n mod borrowed_locals;\n-pub(super) mod borrows;\n mod init_locals;\n mod liveness;\n mod storage_liveness;\n \n pub use self::borrowed_locals::{MaybeBorrowedLocals, MaybeMutBorrowedLocals};\n-pub use self::borrows::Borrows;\n pub use self::init_locals::MaybeInitializedLocals;\n pub use self::liveness::MaybeLiveLocals;\n pub use self::storage_liveness::{MaybeRequiresStorage, MaybeStorageLive};", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/mod.rs"}, {"sha": "b468e50b391ca87a0ff39d2c1ad6f61e566e83b8", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,7 +1,7 @@\n pub use super::*;\n \n-use crate::dataflow::{self, GenKill, Results, ResultsRefCursor};\n-use crate::util::storage::AlwaysLiveLocals;\n+use crate::storage::AlwaysLiveLocals;\n+use crate::{GenKill, Results, ResultsRefCursor};\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use std::cell::RefCell;\n@@ -17,7 +17,7 @@ impl MaybeStorageLive {\n     }\n }\n \n-impl dataflow::AnalysisDomain<'tcx> for MaybeStorageLive {\n+impl crate::AnalysisDomain<'tcx> for MaybeStorageLive {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_storage_live\";\n@@ -39,7 +39,7 @@ impl dataflow::AnalysisDomain<'tcx> for MaybeStorageLive {\n     }\n }\n \n-impl dataflow::GenKillAnalysis<'tcx> for MaybeStorageLive {\n+impl crate::GenKillAnalysis<'tcx> for MaybeStorageLive {\n     type Idx = Local;\n \n     fn statement_effect(\n@@ -97,7 +97,7 @@ impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx> dataflow::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n+impl<'mir, 'tcx> crate::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"requires_storage\";\n@@ -116,7 +116,7 @@ impl<'mir, 'tcx> dataflow::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, '\n     }\n }\n \n-impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n+impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n     type Idx = Local;\n \n     fn before_statement_effect(", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/storage_liveness.rs"}, {"sha": "bfae09b7760a04672941a8c63d962fbe31ea2d03", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -0,0 +1,72 @@\n+#![feature(associated_type_defaults)]\n+#![feature(bool_to_option)]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n+#![feature(const_panic)]\n+#![feature(exact_size_is_empty)]\n+#![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n+#![feature(min_specialization)]\n+#![feature(once_cell)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(trusted_step)]\n+#![recursion_limit = \"256\"]\n+\n+#[macro_use]\n+extern crate tracing;\n+#[macro_use]\n+extern crate rustc_middle;\n+\n+use rustc_ast::{self as ast, MetaItem};\n+use rustc_middle::ty;\n+use rustc_session::Session;\n+use rustc_span::symbol::{sym, Symbol};\n+\n+pub use self::drop_flag_effects::{\n+    drop_flag_effects_for_function_entry, drop_flag_effects_for_location,\n+    move_path_children_matching, on_all_children_bits, on_all_drop_children_bits,\n+    on_lookup_result_bits,\n+};\n+pub use self::framework::{\n+    fmt, lattice, visit_results, Analysis, AnalysisDomain, Backward, Direction, Engine, Forward,\n+    GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor, ResultsRefCursor,\n+    ResultsVisitable, ResultsVisitor,\n+};\n+\n+use self::move_paths::MoveData;\n+\n+pub mod drop_flag_effects;\n+pub mod elaborate_drops;\n+mod framework;\n+pub mod impls;\n+pub mod move_paths;\n+pub mod rustc_peek;\n+pub mod storage;\n+\n+pub(crate) mod indexes {\n+    pub(crate) use super::move_paths::MovePathIndex;\n+}\n+\n+pub struct MoveDataParamEnv<'tcx> {\n+    pub move_data: MoveData<'tcx>,\n+    pub param_env: ty::ParamEnv<'tcx>,\n+}\n+\n+pub fn has_rustc_mir_with(\n+    _sess: &Session,\n+    attrs: &[ast::Attribute],\n+    name: Symbol,\n+) -> Option<MetaItem> {\n+    for attr in attrs {\n+        if attr.has_name(sym::rustc_mir) {\n+            let items = attr.meta_item_list();\n+            for item in items.iter().flat_map(|l| l.iter()) {\n+                match item.meta_item() {\n+                    Some(mi) if mi.has_name(name) => return Some(mi.clone()),\n+                    _ => continue,\n+                }\n+            }\n+        }\n+    }\n+    None\n+}"}, {"sha": "28936274baafa639614b7aa547c37859c8a0b8aa", "filename": "compiler/rustc_mir_dataflow/src/move_paths/abs_domain.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/dataflow/move_paths/abs_domain.rs"}, {"sha": "cea465ea1ed9dc423045c5a80d5ffed630310173", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs"}, {"sha": "699ec4bbff80fa788ad305ada8cc0c4c4f25c9ca", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "renamed", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -19,6 +19,12 @@ rustc_index::newtype_index! {\n     }\n }\n \n+impl polonius_engine::Atom for MovePathIndex {\n+    fn index(self) -> usize {\n+        rustc_index::vec::Idx::index(self)\n+    }\n+}\n+\n rustc_index::newtype_index! {\n     pub struct MoveOutIndex {\n         DEBUG_FORMAT = \"mo{}\"\n@@ -276,7 +282,7 @@ impl fmt::Debug for Init {\n }\n \n impl Init {\n-    crate fn span<'tcx>(&self, body: &Body<'tcx>) -> Span {\n+    pub fn span<'tcx>(&self, body: &Body<'tcx>) -> Span {\n         match self.location {\n             InitLocation::Argument(local) => body.local_decls[local].source_info.span,\n             InitLocation::Statement(location) => body.source_info(location).span,\n@@ -338,12 +344,12 @@ impl MovePathLookup {\n \n #[derive(Debug)]\n pub struct IllegalMoveOrigin<'tcx> {\n-    pub(crate) location: Location,\n-    pub(crate) kind: IllegalMoveOriginKind<'tcx>,\n+    pub location: Location,\n+    pub kind: IllegalMoveOriginKind<'tcx>,\n }\n \n #[derive(Debug)]\n-pub(crate) enum IllegalMoveOriginKind<'tcx> {\n+pub enum IllegalMoveOriginKind<'tcx> {\n     /// Illegal move due to attempt to move from behind a reference.\n     BorrowedContent {\n         /// The place the reference refers to: if erroneous code was trying to", "previous_filename": "compiler/rustc_mir/src/dataflow/move_paths/mod.rs"}, {"sha": "29ffed9934421688045467ef07c43ae15376755c", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -5,25 +5,25 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n-use crate::transform::MirPass;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::MirPass;\n use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-use crate::dataflow::impls::{\n+use crate::impls::{\n     DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeLiveLocals, MaybeMutBorrowedLocals,\n     MaybeUninitializedPlaces,\n };\n-use crate::dataflow::move_paths::{HasMoveData, MoveData};\n-use crate::dataflow::move_paths::{LookupResult, MovePathIndex};\n-use crate::dataflow::MoveDataParamEnv;\n-use crate::dataflow::{Analysis, JoinSemiLattice, Results, ResultsCursor};\n+use crate::move_paths::{HasMoveData, MoveData};\n+use crate::move_paths::{LookupResult, MovePathIndex};\n+use crate::MoveDataParamEnv;\n+use crate::{Analysis, JoinSemiLattice, Results, ResultsCursor};\n \n pub struct SanityCheck;\n \n impl<'tcx> MirPass<'tcx> for SanityCheck {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        use crate::dataflow::has_rustc_mir_with;\n+        use crate::has_rustc_mir_with;\n         let def_id = body.source.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));", "previous_filename": "compiler/rustc_mir/src/transform/rustc_peek.rs"}, {"sha": "18b8ef557d6714e315d24c45c86a38fd41048989", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/util/storage.rs"}, {"sha": "5e1a587b0ecead71635b3a70a71527e93106a133", "filename": "compiler/rustc_mir_transform/Cargo.toml", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2FCargo.toml?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -0,0 +1,29 @@\n+[package]\n+name = \"rustc_mir_transform\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+itertools = \"0.9\"\n+smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n+rustc_attr = { path = \"../rustc_attr\" }\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n+rustc_index = { path = \"../rustc_index\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n+rustc_const_eval = { path = \"../rustc_const_eval\" }\n+rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_session = { path = \"../rustc_session\" }\n+rustc_target = { path = \"../rustc_target\" }\n+rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_span = { path = \"../rustc_span\" }\n+\n+[dev-dependencies]\n+coverage_test_macros = { path = \"src/coverage/test_macros\" }"}, {"sha": "855dcbc431b1eca3f57c50bfda93a1ac5e853d14", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,4 +1,4 @@\n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_hir::def::DefKind;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::*;", "previous_filename": "compiler/rustc_mir/src/transform/abort_unwinding_calls.rs"}, {"sha": "cd6b671a0dbfd9f563fb808508206d4b80a1091f", "filename": "compiler/rustc_mir_transform/src/add_call_guards.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,4 +1,4 @@\n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;", "previous_filename": "compiler/rustc_mir/src/transform/add_call_guards.rs"}, {"sha": "9eaf2b6a2111377ff18f25f61e5a66566b072a41", "filename": "compiler/rustc_mir_transform/src/add_moves_for_packed_drops.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,9 +1,9 @@\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n \n-use crate::transform::MirPass;\n use crate::util;\n-use crate::util::patch::MirPatch;\n+use crate::MirPass;\n+use rustc_middle::mir::patch::MirPatch;\n \n // This pass moves values being dropped that are within a packed\n // struct to a separate local before dropping them, to ensure that", "previous_filename": "compiler/rustc_mir/src/transform/add_moves_for_packed_drops.rs"}, {"sha": "7a8dee09c29f098b1924b913a1850daa29ed1dd9", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -4,7 +4,7 @@\n //! of MIR building, and only after this pass we think of the program has having the\n //! normal MIR semantics.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n ", "previous_filename": "compiler/rustc_mir/src/transform/add_retag.rs"}, {"sha": "27fe80a456f7de06b71a6157c7055ddb8182fb75", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::CONST_ITEM_MUTATION;\n use rustc_span::def_id::DefId;\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n \n pub struct CheckConstItemMutation;\n ", "previous_filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs"}, {"sha": "49be34c7a284562bbb0ff247ffa6460ea3290828", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -6,8 +6,8 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::UNALIGNED_REFERENCES;\n use rustc_span::symbol::sym;\n \n-use crate::transform::MirPass;\n use crate::util;\n+use crate::MirPass;\n \n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { unsafe_derive_on_repr_packed, ..*providers };", "previous_filename": "compiler/rustc_mir/src/transform/check_packed_ref.rs"}, {"sha": "1ff9bd157210874391deafc577a31eb4dd435c42", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/check_unsafety.rs"}, {"sha": "611d29a4ee29a3400d60ed14f3cc47820cbf75b5", "filename": "compiler/rustc_mir_transform/src/cleanup_post_borrowck.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -18,7 +18,7 @@\n //! [`ForMatchGuard`]: rustc_middle::mir::FakeReadCause::ForMatchGuard\n //! [`Nop`]: rustc_middle::mir::StatementKind::Nop\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::visit::MutVisitor;\n use rustc_middle::mir::{Body, BorrowKind, Location, Rvalue};\n use rustc_middle::mir::{Statement, StatementKind};", "previous_filename": "compiler/rustc_mir/src/transform/cleanup_post_borrowck.rs"}, {"sha": "b613634560fbd42e8f615fd1fdd1c010477e87f5", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::{\n     ty::TyCtxt,\n };\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_index::{bit_set::BitSet, vec::IndexVec};\n \n pub struct ConstDebugInfo;", "previous_filename": "compiler/rustc_mir/src/transform/const_debuginfo.rs"}, {"sha": "d319fdcaa6b7e2b2c22383e0918bd963a70cf195", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -17,7 +17,7 @@\n //! }\n //! ```\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use rustc_middle::{mir::visit::Visitor, ty::ParamEnv};", "previous_filename": "compiler/rustc_mir/src/transform/const_goto.rs"}, {"sha": "71b3a555587f710c748f332f29c5d99611087f0a", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -28,13 +28,13 @@ use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n \n-use crate::const_eval::ConstEvalErr;\n-use crate::interpret::{\n+use crate::MirPass;\n+use rustc_const_eval::const_eval::ConstEvalErr;\n+use rustc_const_eval::interpret::{\n     self, compile_time_machine, AllocId, Allocation, ConstValue, CtfeValidationMode, Frame, ImmTy,\n     Immediate, InterpCx, InterpResult, LocalState, LocalValue, MemPlace, MemoryKind, OpTy,\n     Operand as InterpOperand, PlaceTy, Scalar, ScalarMaybeUninit, StackPopCleanup, StackPopUnwind,\n };\n-use crate::transform::MirPass;\n \n /// The maximum number of bytes that we'll allocate space for a local or the return value.\n /// Needed for #66397, because otherwise we eval into large places and that can cause OOM or just", "previous_filename": "compiler/rustc_mir/src/transform/const_prop.rs"}, {"sha": "6726b669ff2aae96ac90176a2593239ac6bcf430", "filename": "compiler/rustc_mir_transform/src/coverage/counters.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/coverage/counters.rs"}, {"sha": "513a85b591306bec225b4ac706fbe7b3734b7ae9", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "renamed", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -44,15 +44,15 @@\n //! points, which can be enabled via environment variable:\n //!\n //! ```shell\n-//! RUSTC_LOG=rustc_mir::transform::coverage=debug\n+//! RUSTC_LOG=rustc_mir_transform::transform::coverage=debug\n //! ```\n //!\n //! Other module paths with coverage-related debug logs may also be of interest, particularly for\n //! debugging the coverage map data, injected as global variables in the LLVM IR (during rustc's\n //! code generation pass). For example:\n //!\n //! ```shell\n-//! RUSTC_LOG=rustc_mir::transform::coverage,rustc_codegen_ssa::coverageinfo,rustc_codegen_llvm::coverageinfo=debug\n+//! RUSTC_LOG=rustc_mir_transform::transform::coverage,rustc_codegen_ssa::coverageinfo,rustc_codegen_llvm::coverageinfo=debug\n //! ```\n //!\n //! Coverage Debug Options\n@@ -111,9 +111,9 @@\n use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n use super::spans::CoverageSpan;\n \n-use crate::util::generic_graphviz::GraphvizWriter;\n-use crate::util::pretty;\n-use crate::util::spanview::{self, SpanViewable};\n+use rustc_middle::mir::create_dump_file;\n+use rustc_middle::mir::generic_graphviz::GraphvizWriter;\n+use rustc_middle::mir::spanview::{self, SpanViewable};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::coverage::*;\n@@ -181,13 +181,11 @@ impl DebugOptions {\n                             }\n                         };\n                     }\n-                    _ => {\n-                        bug!(\n-                            \"Unsupported setting `{}` in environment variable {}\",\n-                            option,\n-                            RUSTC_COVERAGE_DEBUG_OPTIONS\n-                        )\n-                    }\n+                    _ => bug!(\n+                        \"Unsupported setting `{}` in environment variable {}\",\n+                        option,\n+                        RUSTC_COVERAGE_DEBUG_OPTIONS\n+                    ),\n                 };\n             }\n         }\n@@ -643,7 +641,7 @@ pub(super) fn dump_coverage_spanview(\n     let def_id = mir_source.def_id();\n \n     let span_viewables = span_viewables(tcx, mir_body, basic_coverage_blocks, &coverage_spans);\n-    let mut file = pretty::create_dump_file(tcx, \"html\", None, pass_name, &0, mir_source)\n+    let mut file = create_dump_file(tcx, \"html\", None, pass_name, &0, mir_source)\n         .expect(\"Unexpected error creating MIR spanview HTML file\");\n     let crate_name = tcx.crate_name(def_id.krate);\n     let item_name = tcx.def_path(def_id).to_filename_friendly_no_crate();\n@@ -745,7 +743,7 @@ pub(super) fn dump_coverage_graphviz(\n                 .join(\"\\n  \")\n         ));\n     }\n-    let mut file = pretty::create_dump_file(tcx, \"dot\", None, pass_name, &0, mir_source)\n+    let mut file = create_dump_file(tcx, \"dot\", None, pass_name, &0, mir_source)\n         .expect(\"Unexpected error creating BasicCoverageBlock graphviz DOT file\");\n     graphviz_writer\n         .write_graphviz(tcx, &mut file)", "previous_filename": "compiler/rustc_mir/src/transform/coverage/debug.rs"}, {"sha": "d78ad6ce97fa23697cb768ba90ed40efecaa81df", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/coverage/graph.rs"}, {"sha": "6043606c37957da13fb600d9926ccdb49181a21a", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -12,8 +12,7 @@ use counters::CoverageCounters;\n use graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n use spans::{CoverageSpan, CoverageSpans};\n \n-use crate::transform::MirPass;\n-use crate::util::pretty;\n+use crate::MirPass;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::graph::WithNumNodes;\n@@ -25,6 +24,7 @@ use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::coverage::*;\n+use rustc_middle::mir::dump_enabled;\n use rustc_middle::mir::{\n     self, BasicBlock, BasicBlockData, Coverage, SourceInfo, Statement, StatementKind, Terminator,\n     TerminatorKind,\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let mut graphviz_data = debug::GraphvizData::new();\n         let mut debug_used_expressions = debug::UsedExpressions::new();\n \n-        let dump_mir = pretty::dump_enabled(tcx, self.pass_name, def_id);\n+        let dump_mir = dump_enabled(tcx, self.pass_name, def_id);\n         let dump_graphviz = dump_mir && tcx.sess.opts.debugging_opts.dump_mir_graphviz;\n         let dump_spanview = dump_mir && tcx.sess.opts.debugging_opts.dump_mir_spanview.is_some();\n ", "previous_filename": "compiler/rustc_mir/src/transform/coverage/mod.rs"}, {"sha": "760f16eae6b1f85be18bea6412b0f260c77b4ed8", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/coverage/query.rs"}, {"sha": "2ea2e06029d679176e20719eab21f281c361eaa3", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,15 +1,13 @@\n use super::debug::term_type;\n use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph, START_BCB};\n \n-use crate::util::spanview::source_range_no_file;\n-\n use rustc_data_structures::graph::WithNumNodes;\n+use rustc_middle::mir::spanview::source_range_no_file;\n use rustc_middle::mir::{\n     self, AggregateKind, BasicBlock, FakeReadCause, Rvalue, Statement, StatementKind, Terminator,\n     TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n-\n use rustc_span::source_map::original_sp;\n use rustc_span::{BytePos, ExpnKind, MacroKind, Span, Symbol};\n ", "previous_filename": "compiler/rustc_mir/src/transform/coverage/spans.rs"}, {"sha": "cc93fd482b5d49d4400e4d47b3a517dd1b346cdf", "filename": "compiler/rustc_mir_transform/src/coverage/test_macros/Cargo.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2FCargo.toml?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/coverage/test_macros/Cargo.toml"}, {"sha": "3d6095d2738cb562deecb28361595667663d888b", "filename": "compiler/rustc_mir_transform/src/coverage/test_macros/src/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftest_macros%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/coverage/test_macros/src/lib.rs"}, {"sha": "14dd0a8b9245bdd83f121f616d6b356443ed53ec", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/coverage/tests.rs"}, {"sha": "a5491f0ef4e2daafa05b24e8e623c9a1e8efd376", "filename": "compiler/rustc_mir_transform/src/deaggregator.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeaggregator.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,5 +1,5 @@\n-use crate::transform::MirPass;\n use crate::util::expand_aggregate;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n ", "previous_filename": "compiler/rustc_mir/src/transform/deaggregator.rs"}, {"sha": "8d2413433a92be5386ec7f5aea3cd8b03efe8775", "filename": "compiler/rustc_mir_transform/src/deduplicate_blocks.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -3,7 +3,7 @@\n \n use std::{collections::hash_map::Entry, hash::Hash, hash::Hasher, iter};\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::visit::MutVisitor;", "previous_filename": "compiler/rustc_mir/src/transform/deduplicate_blocks.rs"}, {"sha": "dd95f0014230953d1f96c9139c2c4daed42606e3", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "renamed", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -96,12 +96,7 @@\n //! [previous attempt]: https://github.com/rust-lang/rust/pull/47954\n //! [subsequent approach]: https://github.com/rust-lang/rust/pull/71003\n \n-use crate::dataflow::impls::{MaybeInitializedLocals, MaybeLiveLocals};\n-use crate::dataflow::Analysis;\n-use crate::{\n-    transform::MirPass,\n-    util::{dump_mir, PassWhere},\n-};\n+use crate::MirPass;\n use itertools::Itertools;\n use rustc_data_structures::unify::{InPlaceUnificationTable, UnifyKey};\n use rustc_index::{\n@@ -110,11 +105,14 @@ use rustc_index::{\n };\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n+use rustc_middle::mir::{dump_mir, PassWhere};\n use rustc_middle::mir::{\n     traversal, Body, InlineAsmOperand, Local, LocalKind, Location, Operand, Place, PlaceElem,\n     Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n+use rustc_mir_dataflow::impls::{MaybeInitializedLocals, MaybeLiveLocals};\n+use rustc_mir_dataflow::Analysis;\n \n // Empirical measurements have resulted in some observations:\n // - Running on a body with a single block and 500 locals takes barely any time", "previous_filename": "compiler/rustc_mir/src/transform/dest_prop.rs"}, {"sha": "2a24e1ea8d7edf968cbb898f958289ccad3eb257", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "renamed", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -5,9 +5,9 @@ use std::fmt;\n use std::fs::File;\n use std::io;\n \n-use crate::transform::MirPass;\n-use crate::util as mir_util;\n+use crate::MirPass;\n use rustc_middle::mir::Body;\n+use rustc_middle::mir::{dump_enabled, dump_mir, write_mir_pretty};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OutputFilenames, OutputType};\n \n@@ -39,21 +39,14 @@ pub fn on_mir_pass<'tcx>(\n     body: &Body<'tcx>,\n     is_after: bool,\n ) {\n-    if mir_util::dump_enabled(tcx, pass_name, body.source.def_id()) {\n-        mir_util::dump_mir(\n-            tcx,\n-            Some(pass_num),\n-            pass_name,\n-            &Disambiguator { is_after },\n-            body,\n-            |_, _| Ok(()),\n-        );\n+    if dump_enabled(tcx, pass_name, body.source.def_id()) {\n+        dump_mir(tcx, Some(pass_num), pass_name, &Disambiguator { is_after }, body, |_, _| Ok(()));\n     }\n }\n \n pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n     let path = outputs.path(OutputType::Mir);\n     let mut f = io::BufWriter::new(File::create(&path)?);\n-    mir_util::write_mir_pretty(tcx, None, &mut f)?;\n+    write_mir_pretty(tcx, None, &mut f)?;\n     Ok(())\n }", "previous_filename": "compiler/rustc_mir/src/transform/dump_mir.rs"}, {"sha": "d7f1ad7f696433d109cfb89668bf29a910041459", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,4 +1,4 @@\n-use crate::{transform::MirPass, util::patch::MirPatch};\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n use std::fmt::Debug;", "previous_filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs"}, {"sha": "b9a48197a351a65ed9ce6cd0ef0c9708ee2bc252", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "renamed", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,18 +1,17 @@\n-use crate::dataflow;\n-use crate::dataflow::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use crate::dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n-use crate::dataflow::on_lookup_result_bits;\n-use crate::dataflow::MoveDataParamEnv;\n-use crate::dataflow::{on_all_children_bits, on_all_drop_children_bits};\n-use crate::dataflow::{Analysis, ResultsCursor};\n-use crate::transform::MirPass;\n-use crate::util::elaborate_drops::{elaborate_drop, DropFlagState, Unwind};\n-use crate::util::elaborate_drops::{DropElaborator, DropFlagMode, DropStyle};\n-use crate::util::patch::MirPatch;\n+use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_mir_dataflow::elaborate_drops::{elaborate_drop, DropFlagState, Unwind};\n+use rustc_mir_dataflow::elaborate_drops::{DropElaborator, DropFlagMode, DropStyle};\n+use rustc_mir_dataflow::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use rustc_mir_dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n+use rustc_mir_dataflow::on_lookup_result_bits;\n+use rustc_mir_dataflow::MoveDataParamEnv;\n+use rustc_mir_dataflow::{on_all_children_bits, on_all_drop_children_bits};\n+use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use std::fmt;\n@@ -214,14 +213,14 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n     }\n \n     fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path> {\n-        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n+        rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::Field(idx, _) => idx == field,\n             _ => false,\n         })\n     }\n \n     fn array_subpath(&self, path: Self::Path, index: u64, size: u64) -> Option<Self::Path> {\n-        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n+        rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::ConstantIndex { offset, min_length, from_end } => {\n                 debug_assert!(size == min_length, \"min_length should be exact for arrays\");\n                 assert!(!from_end, \"from_end should not be used for array element ConstantIndex\");\n@@ -232,13 +231,13 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n     }\n \n     fn deref_subpath(&self, path: Self::Path) -> Option<Self::Path> {\n-        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| {\n+        rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| {\n             e == ProjectionElem::Deref\n         })\n     }\n \n     fn downcast_subpath(&self, path: Self::Path, variant: VariantIdx) -> Option<Self::Path> {\n-        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n+        rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::Downcast(_, idx) => idx == variant,\n             _ => false,\n         })\n@@ -513,9 +512,14 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n     fn drop_flags_for_args(&mut self) {\n         let loc = Location::START;\n-        dataflow::drop_flag_effects_for_function_entry(self.tcx, self.body, self.env, |path, ds| {\n-            self.set_drop_flag(loc, path, ds);\n-        })\n+        rustc_mir_dataflow::drop_flag_effects_for_function_entry(\n+            self.tcx,\n+            self.body,\n+            self.env,\n+            |path, ds| {\n+                self.set_drop_flag(loc, path, ds);\n+            },\n+        )\n     }\n \n     fn drop_flags_for_locs(&mut self) {\n@@ -556,7 +560,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                     }\n                 }\n                 let loc = Location { block: bb, statement_index: i };\n-                dataflow::drop_flag_effects_for_location(\n+                rustc_mir_dataflow::drop_flag_effects_for_location(\n                     self.tcx,\n                     self.body,\n                     self.env,", "previous_filename": "compiler/rustc_mir/src/transform/elaborate_drops.rs"}, {"sha": "d96a067fdda79237234cfbca14fa713d9f887265", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -11,7 +11,7 @@ use rustc_session::lint::builtin::FUNCTION_ITEM_REFERENCES;\n use rustc_span::{symbol::sym, Span};\n use rustc_target::spec::abi::Abi;\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n \n pub struct FunctionItemReferences;\n ", "previous_filename": "compiler/rustc_mir/src/transform/function_item_references.rs"}, {"sha": "06366b6fc31d53e13b7b882f60cfb2bd767cf0f7", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -49,25 +49,25 @@\n //! For generators with state 1 (returned) and state 2 (poisoned) it does nothing.\n //! Otherwise it drops all the values in scope at the last suspension point.\n \n-use crate::dataflow::impls::{\n-    MaybeBorrowedLocals, MaybeLiveLocals, MaybeRequiresStorage, MaybeStorageLive,\n-};\n-use crate::dataflow::{self, Analysis};\n-use crate::transform::simplify;\n-use crate::transform::MirPass;\n-use crate::util::dump_mir;\n+use crate::simplify;\n use crate::util::expand_aggregate;\n-use crate::util::storage;\n+use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::{BitMatrix, BitSet};\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_middle::mir::dump_mir;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::GeneratorSubsts;\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n+use rustc_mir_dataflow::impls::{\n+    MaybeBorrowedLocals, MaybeLiveLocals, MaybeRequiresStorage, MaybeStorageLive,\n+};\n+use rustc_mir_dataflow::storage;\n+use rustc_mir_dataflow::{self, Analysis};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::PanicStrategy;\n use std::{iter, ops};\n@@ -468,15 +468,15 @@ fn locals_live_across_suspend_points(\n         .iterate_to_fixpoint();\n \n     let mut borrowed_locals_cursor =\n-        dataflow::ResultsCursor::new(body_ref, &borrowed_locals_results);\n+        rustc_mir_dataflow::ResultsCursor::new(body_ref, &borrowed_locals_results);\n \n     // Calculate the MIR locals that we actually need to keep storage around\n     // for.\n     let requires_storage_results = MaybeRequiresStorage::new(body, &borrowed_locals_results)\n         .into_engine(tcx, body_ref)\n         .iterate_to_fixpoint();\n     let mut requires_storage_cursor =\n-        dataflow::ResultsCursor::new(body_ref, &requires_storage_results);\n+        rustc_mir_dataflow::ResultsCursor::new(body_ref, &requires_storage_results);\n \n     // Calculate the liveness of MIR locals ignoring borrows.\n     let mut liveness = MaybeLiveLocals\n@@ -616,7 +616,7 @@ fn compute_storage_conflicts(\n     body: &'mir Body<'tcx>,\n     saved_locals: &GeneratorSavedLocals,\n     always_live_locals: storage::AlwaysLiveLocals,\n-    requires_storage: dataflow::Results<'tcx, MaybeRequiresStorage<'mir, 'tcx>>,\n+    requires_storage: rustc_mir_dataflow::Results<'tcx, MaybeRequiresStorage<'mir, 'tcx>>,\n ) -> BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal> {\n     assert_eq!(body.local_decls.len(), saved_locals.domain_size());\n \n@@ -671,7 +671,7 @@ struct StorageConflictVisitor<'mir, 'tcx, 's> {\n     local_conflicts: BitMatrix<Local, Local>,\n }\n \n-impl dataflow::ResultsVisitor<'mir, 'tcx> for StorageConflictVisitor<'mir, 'tcx, '_> {\n+impl rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx> for StorageConflictVisitor<'mir, 'tcx, '_> {\n     type FlowState = BitSet<Local>;\n \n     fn visit_statement_before_primary_effect(\n@@ -865,8 +865,8 @@ fn insert_switch<'tcx>(\n \n fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     use crate::shim::DropShimElaborator;\n-    use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n-    use crate::util::patch::MirPatch;\n+    use rustc_middle::mir::patch::MirPatch;\n+    use rustc_mir_dataflow::elaborate_drops::{elaborate_drop, Unwind};\n \n     // Note that `elaborate_drops` only drops the upvars of a generator, and\n     // this is ok because `open_drop` can only be reached within that own", "previous_filename": "compiler/rustc_mir/src/transform/generator.rs"}, {"sha": "d43528a1cf098b7b984cd55633d22150285a68a0", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -13,7 +13,7 @@ use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n use rustc_target::spec::abi::Abi;\n \n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n-use crate::transform::MirPass;\n+use crate::MirPass;\n use std::iter;\n use std::ops::{Range, RangeFrom};\n ", "previous_filename": "compiler/rustc_mir/src/transform/inline.rs"}, {"sha": "385394ba67d4d2e8fa0fdc2f8747c59129817d11", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/inline/cycle.rs"}, {"sha": "e15a69c95ae9c6904da0be721fa9d53ea4634a5e", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n //! Performs various peephole optimizations.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n     BinOp, Body, Constant, LocalDecls, Operand, Place, ProjectionElem, Rvalue, SourceInfo,", "previous_filename": "compiler/rustc_mir/src/transform/instcombine.rs"}, {"sha": "22abce65a4b7dc75b5be9d4f09dcb15ced08bdae", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "renamed", "additions": 77, "deletions": 71, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,5 +1,26 @@\n-use crate::{shim, util};\n+#![cfg_attr(bootstrap, feature(bindings_after_at))]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n+#![feature(crate_visibility_modifier)]\n+#![feature(const_panic)]\n+#![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n+#![feature(map_try_insert)]\n+#![feature(min_specialization)]\n+#![feature(option_get_or_insert_default)]\n+#![feature(once_cell)]\n+#![feature(never_type)]\n+#![feature(trusted_step)]\n+#![feature(try_blocks)]\n+#![recursion_limit = \"256\"]\n+\n+#[macro_use]\n+extern crate tracing;\n+#[macro_use]\n+extern crate rustc_middle;\n+\n use required_consts::RequiredConstsVisitor;\n+use rustc_const_eval::util;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::steal::Steal;\n use rustc_hir as hir;\n@@ -11,57 +32,59 @@ use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::{Span, Symbol};\n-use std::borrow::Cow;\n-\n-pub mod abort_unwinding_calls;\n-pub mod add_call_guards;\n-pub mod add_moves_for_packed_drops;\n-pub mod add_retag;\n-pub mod check_const_item_mutation;\n-pub mod check_consts;\n-pub mod check_packed_ref;\n+\n+mod abort_unwinding_calls;\n+mod add_call_guards;\n+mod add_moves_for_packed_drops;\n+mod add_retag;\n+mod check_const_item_mutation;\n+mod check_packed_ref;\n pub mod check_unsafety;\n-pub mod cleanup_post_borrowck;\n-pub mod const_debuginfo;\n-pub mod const_goto;\n-pub mod const_prop;\n-pub mod coverage;\n-pub mod deaggregator;\n-pub mod deduplicate_blocks;\n-pub mod dest_prop;\n+mod cleanup_post_borrowck;\n+mod const_debuginfo;\n+mod const_goto;\n+mod const_prop;\n+mod coverage;\n+mod deaggregator;\n+mod deduplicate_blocks;\n+mod dest_prop;\n pub mod dump_mir;\n-pub mod early_otherwise_branch;\n-pub mod elaborate_drops;\n-pub mod function_item_references;\n-pub mod generator;\n-pub mod inline;\n-pub mod instcombine;\n-pub mod lower_intrinsics;\n-pub mod lower_slice_len;\n-pub mod match_branches;\n-pub mod multiple_return_terminators;\n-pub mod nrvo;\n-pub mod promote_consts;\n-pub mod remove_noop_landing_pads;\n-pub mod remove_storage_markers;\n-pub mod remove_unneeded_drops;\n-pub mod remove_zsts;\n-pub mod required_consts;\n-pub mod rustc_peek;\n-pub mod separate_const_switch;\n-pub mod simplify;\n-pub mod simplify_branches;\n-pub mod simplify_comparison_integral;\n-pub mod simplify_try;\n-pub mod uninhabited_enum_branching;\n-pub mod unreachable_prop;\n-pub mod validate;\n-\n-pub use rustc_middle::mir::MirSource;\n-\n-pub(crate) fn provide(providers: &mut Providers) {\n-    self::check_unsafety::provide(providers);\n-    self::check_packed_ref::provide(providers);\n+mod early_otherwise_branch;\n+mod elaborate_drops;\n+mod function_item_references;\n+mod generator;\n+mod inline;\n+mod instcombine;\n+mod lower_intrinsics;\n+mod lower_slice_len;\n+mod match_branches;\n+mod multiple_return_terminators;\n+mod nrvo;\n+mod remove_noop_landing_pads;\n+mod remove_storage_markers;\n+mod remove_unneeded_drops;\n+mod remove_zsts;\n+mod required_consts;\n+mod separate_const_switch;\n+mod shim;\n+mod simplify;\n+mod simplify_branches;\n+mod simplify_comparison_integral;\n+mod simplify_try;\n+mod uninhabited_enum_branching;\n+mod unreachable_prop;\n+\n+use rustc_const_eval::transform::check_consts;\n+use rustc_const_eval::transform::promote_consts;\n+use rustc_const_eval::transform::validate;\n+use rustc_const_eval::transform::MirPass;\n+use rustc_mir_dataflow::rustc_peek;\n+\n+pub fn provide(providers: &mut Providers) {\n+    check_unsafety::provide(providers);\n+    check_packed_ref::provide(providers);\n+    coverage::query::provide(providers);\n+    shim::provide(providers);\n     *providers = Providers {\n         mir_keys,\n         mir_const,\n@@ -83,6 +106,8 @@ pub(crate) fn provide(providers: &mut Providers) {\n         optimized_mir,\n         is_mir_available,\n         is_ctfe_mir_available: |tcx, did| is_mir_available(tcx, did),\n+        mir_callgraph_reachable: inline::cycle::mir_callgraph_reachable,\n+        mir_inliner_callees: inline::cycle::mir_inliner_callees,\n         promoted_mir: |tcx, def_id| {\n             let def_id = def_id.expect_local();\n             if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n@@ -96,7 +121,6 @@ pub(crate) fn provide(providers: &mut Providers) {\n         },\n         ..*providers\n     };\n-    coverage::query::provide(providers);\n }\n \n fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n@@ -144,25 +168,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n     set\n }\n \n-/// Generates a default name for the pass based on the name of the\n-/// type `T`.\n-pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n-    let name = std::any::type_name::<T>();\n-    if let Some(tail) = name.rfind(':') { Cow::from(&name[tail + 1..]) } else { Cow::from(name) }\n-}\n-\n-/// A streamlined trait that you can implement to create a pass; the\n-/// pass will be named after the type, and it will consist of a main\n-/// loop that goes over each available MIR and applies `run_pass`.\n-pub trait MirPass<'tcx> {\n-    fn name(&self) -> Cow<'_, str> {\n-        default_name::<Self>()\n-    }\n-\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);\n-}\n-\n-pub fn run_passes(\n+fn run_passes(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     mir_phase: MirPhase,\n@@ -269,7 +275,7 @@ fn mir_const<'tcx>(\n \n     let mut body = tcx.mir_built(def).steal();\n \n-    util::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n+    rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n \n     run_passes(\n         tcx,", "previous_filename": "compiler/rustc_mir/src/transform/mod.rs"}, {"sha": "2f89b041c27b1f7062502f547ef5efbb840ec0fa", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n //! Lowers intrinsic calls\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs"}, {"sha": "30de374a2d8221ddb5cbed5138302b15f45d2cac", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,7 +1,7 @@\n //! This pass lowers calls to core::slice::len to just Len op.\n //! It should run before inlining!\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::*;", "previous_filename": "compiler/rustc_mir/src/transform/lower_slice_len.rs"}, {"sha": "c618abe9d059963898ce1bfb1db5708926687a48", "filename": "compiler/rustc_mir_transform/src/match_branches.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,4 +1,4 @@\n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use std::iter;\n@@ -134,7 +134,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                             let const_cmp = Operand::const_from_scalar(\n                                 tcx,\n                                 switch_ty,\n-                                crate::interpret::Scalar::from_uint(val, size),\n+                                rustc_const_eval::interpret::Scalar::from_uint(val, size),\n                                 rustc_span::DUMMY_SP,\n                             );\n                             let op = if f_b { BinOp::Eq } else { BinOp::Ne };", "previous_filename": "compiler/rustc_mir/src/transform/match_branches.rs"}, {"sha": "b614917a88369ddced2445c4a4953de9a7aee194", "filename": "compiler/rustc_mir_transform/src/multiple_return_terminators.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,7 +1,7 @@\n //! This pass removes jumps to basic blocks containing only a return, and replaces them with a\n //! return instead.\n \n-use crate::transform::{simplify, MirPass};\n+use crate::{simplify, MirPass};\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;", "previous_filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs"}, {"sha": "3ac4e77cf9a751fe190fd47fc7e750f5d7bee1a5", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::visit::{MutVisitor, NonUseContext, PlaceContext, Visitor}\n use rustc_middle::mir::{self, BasicBlock, Local, Location};\n use rustc_middle::ty::TyCtxt;\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n \n /// This pass looks for MIR that always copies the same local into the return place and eliminates\n /// the copy by renaming all uses of that local to `_0`.", "previous_filename": "compiler/rustc_mir/src/transform/nrvo.rs"}, {"sha": "298bcd9dc24f98664f981b91e47186d8c0056ca1", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n-use crate::transform::MirPass;\n-use crate::util::patch::MirPatch;\n+use crate::MirPass;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use rustc_target::spec::PanicStrategy;", "previous_filename": "compiler/rustc_mir/src/transform/remove_noop_landing_pads.rs"}, {"sha": "0c7323cbac5b1d039886c53a003af72eb2169136", "filename": "compiler/rustc_mir_transform/src/remove_storage_markers.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n //! This pass removes storage markers if they won't be emitted during codegen.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n ", "previous_filename": "compiler/rustc_mir/src/transform/remove_storage_markers.rs"}, {"sha": "5c9d04a08bfec775e45efd7df67f67359536f84e", "filename": "compiler/rustc_mir_transform/src/remove_unneeded_drops.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n //! This pass replaces a drop of a type that does not need dropping, with a goto\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n ", "previous_filename": "compiler/rustc_mir/src/transform/remove_unneeded_drops.rs"}, {"sha": "25e3c52132cca69b59c30d44f719d9298bb07f47", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n //! Removes assignments to ZST places.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{Body, LocalDecls, Place, StatementKind};\n use rustc_middle::ty::{self, Ty, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/transform/remove_zsts.rs"}, {"sha": "8b64ad65ab35ca5ac000eb3c983ce0ea71d14adf", "filename": "compiler/rustc_mir_transform/src/required_consts.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/required_consts.rs"}, {"sha": "1945e551485d8fcf939fd8263e3e9f9715916b69", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -37,7 +37,7 @@\n //! simplicity rather than completeness (it notably\n //! sometimes duplicates abusively).\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use smallvec::SmallVec;", "previous_filename": "compiler/rustc_mir/src/transform/separate_const_switch.rs"}, {"sha": "4d350fc87cb3aebbb3db0c9654af20e3526fbd33", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -15,13 +15,13 @@ use rustc_target::spec::abi::Abi;\n use std::fmt;\n use std::iter;\n \n-use crate::transform::{\n+use crate::util::expand_aggregate;\n+use crate::{\n     abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, remove_noop_landing_pads,\n     run_passes, simplify,\n };\n-use crate::util::elaborate_drops::{self, DropElaborator, DropFlagMode, DropStyle};\n-use crate::util::expand_aggregate;\n-use crate::util::patch::MirPatch;\n+use rustc_middle::mir::patch::MirPatch;\n+use rustc_mir_dataflow::elaborate_drops::{self, DropElaborator, DropFlagMode, DropStyle};\n \n pub fn provide(providers: &mut Providers) {\n     providers.mir_shims = make_shim;\n@@ -940,7 +940,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n         span,\n     );\n \n-    crate::util::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n+    rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n \n     body\n }", "previous_filename": "compiler/rustc_mir/src/shim.rs"}, {"sha": "e3cfd1d0afcd79c870dafeb5c8e61af6472afa7d", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -27,7 +27,7 @@\n //! naively generate still contains the `_a = ()` write in the unreachable block \"after\" the\n //! return.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};", "previous_filename": "compiler/rustc_mir/src/transform/simplify.rs"}, {"sha": "df90cfa318df0c9943d1523a0055651a50e3de44", "filename": "compiler/rustc_mir_transform/src/simplify_branches.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n //! A pass that simplifies branches when their condition is known.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n ", "previous_filename": "compiler/rustc_mir/src/transform/simplify_branches.rs"}, {"sha": "948fcd9f4550f4e6ec0a7cbdbb606240978b494b", "filename": "compiler/rustc_mir_transform/src/simplify_comparison_integral.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/transform/simplify_comparison_integral.rs"}, {"sha": "fd36671b36f5435990a98e1cc287e3955bb603aa", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -9,7 +9,7 @@\n //!\n //! into just `x`.\n \n-use crate::transform::{simplify, MirPass};\n+use crate::{simplify, MirPass};\n use itertools::Itertools as _;\n use rustc_index::{bit_set::BitSet, vec::IndexVec};\n use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};", "previous_filename": "compiler/rustc_mir/src/transform/simplify_try.rs"}, {"sha": "5cef64d7786b3b965e9b9bd0471cddb562be8fe8", "filename": "compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n //! A pass that eliminates branches on uninhabited enum variants.\n \n-use crate::transform::MirPass;\n+use crate::MirPass;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_middle::mir::{\n     BasicBlock, BasicBlockData, Body, Local, Operand, Rvalue, StatementKind, SwitchTargets,", "previous_filename": "compiler/rustc_mir/src/transform/uninhabited_enum_branching.rs"}, {"sha": "baf381081ddab019de0e25c8ef10278fbf82f2cc", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -2,8 +2,8 @@\n //! when all of their successors are unreachable. This is achieved through a\n //! post-order traversal of the blocks.\n \n-use crate::transform::simplify;\n-use crate::transform::MirPass;\n+use crate::simplify;\n+use crate::MirPass;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;", "previous_filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs"}, {"sha": "350ae08877718e38fc0c561c676d306048fa148e", "filename": "compiler/rustc_monomorphize/Cargo.toml", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2FCargo.toml?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -0,0 +1,19 @@\n+[package]\n+name = \"rustc_monomorphize\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+tracing = \"0.1\"\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n+rustc_index = { path = \"../rustc_index\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n+rustc_session = { path = \"../rustc_session\" }\n+rustc_span = { path = \"../rustc_span\" }\n+rustc_target = { path = \"../rustc_target\" }"}, {"sha": "1e39b1bd5e80e6a3461c4381c5277ddbe7d36fbf", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -178,8 +178,6 @@\n //! this is not implemented however: a mono item will be produced\n //! regardless of whether it is actually needed or not.\n \n-use crate::monomorphize;\n-\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n use rustc_errors::{ErrorReported, FatalError};\n@@ -1052,7 +1050,7 @@ fn find_vtable_types_for_unsizing<'tcx>(\n             assert_eq!(source_adt_def, target_adt_def);\n \n             let CustomCoerceUnsized::Struct(coerce_index) =\n-                monomorphize::custom_coerce_unsize_info(tcx, source_ty, target_ty);\n+                crate::custom_coerce_unsize_info(tcx, source_ty, target_ty);\n \n             let source_fields = &source_adt_def.non_enum_variant().fields;\n             let target_fields = &target_adt_def.non_enum_variant().fields;\n@@ -1085,7 +1083,7 @@ fn create_fn_mono_item<'tcx>(\n     let def_id = instance.def_id();\n     if tcx.sess.opts.debugging_opts.profile_closures && def_id.is_local() && tcx.is_closure(def_id)\n     {\n-        monomorphize::util::dump_closure_profile(tcx, instance);\n+        crate::util::dump_closure_profile(tcx, instance);\n     }\n \n     respan(source, MonoItem::Fn(instance.polymorphize(tcx)))", "previous_filename": "compiler/rustc_mir/src/monomorphize/collector.rs"}, {"sha": "08b1d7b7fabd7314f2487935b555bf2fe1c7001c", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "renamed", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,13 +1,25 @@\n+#![feature(array_windows)]\n+#![feature(bool_to_option)]\n+#![feature(crate_visibility_modifier)]\n+#![feature(control_flow_enum)]\n+#![feature(in_band_lifetimes)]\n+#![recursion_limit = \"256\"]\n+\n+#[macro_use]\n+extern crate tracing;\n+#[macro_use]\n+extern crate rustc_middle;\n+\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-use rustc_hir::lang_items::LangItem;\n-\n-pub mod collector;\n-pub mod partitioning;\n-pub mod polymorphize;\n-pub mod util;\n+mod collector;\n+mod partitioning;\n+mod polymorphize;\n+mod util;\n \n fn custom_coerce_unsize_info<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -31,3 +43,8 @@ fn custom_coerce_unsize_info<'tcx>(\n         }\n     }\n }\n+\n+pub fn provide(providers: &mut Providers) {\n+    partitioning::provide(providers);\n+    polymorphize::provide(providers);\n+}", "previous_filename": "compiler/rustc_mir/src/monomorphize/mod.rs"}, {"sha": "429ed53d37977ec67288c929eb67d8888ce48b64", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -13,9 +13,9 @@ use rustc_middle::ty::{self, DefIdTree, InstanceDef, TyCtxt};\n use rustc_span::symbol::Symbol;\n \n use super::PartitioningCx;\n-use crate::monomorphize::collector::InliningMap;\n-use crate::monomorphize::partitioning::merging;\n-use crate::monomorphize::partitioning::{\n+use crate::collector::InliningMap;\n+use crate::partitioning::merging;\n+use crate::partitioning::{\n     MonoItemPlacement, Partitioner, PostInliningPartitioning, PreInliningPartitioning,\n };\n ", "previous_filename": "compiler/rustc_mir/src/monomorphize/partitioning/default.rs"}, {"sha": "229468b47ff62b871889c5bfaba27dcaf5c2f348", "filename": "compiler/rustc_monomorphize/src/partitioning/merging.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder};\n use rustc_span::symbol::{Symbol, SymbolStr};\n \n use super::PartitioningCx;\n-use crate::monomorphize::partitioning::PreInliningPartitioning;\n+use crate::partitioning::PreInliningPartitioning;\n \n pub fn merge_codegen_units<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,", "previous_filename": "compiler/rustc_mir/src/monomorphize/partitioning/merging.rs"}, {"sha": "7a7a56a034ed28e1e97379fbce53b46fd7db60aa", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -105,8 +105,8 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n \n-use crate::monomorphize::collector::InliningMap;\n-use crate::monomorphize::collector::{self, MonoItemCollectionMode};\n+use crate::collector::InliningMap;\n+use crate::collector::{self, MonoItemCollectionMode};\n \n pub struct PartitioningCx<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,", "previous_filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs"}, {"sha": "3c55a4b0a8fb1e52040d7a3e6055c2aeb47921d9", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs"}, {"sha": "799b4e18c240f24afedae9073453384356f2c5ad", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "previous_filename": "compiler/rustc_mir/src/monomorphize/util.rs"}, {"sha": "3da9fd159a728e7e909e89980ee476041050eef1", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -1,6 +1,6 @@\n //! This calculates the types which has storage which lives across a suspension point in a\n //! generator from the perspective of typeck. The actual types used at runtime\n-//! is calculated in `rustc_mir::transform::generator` and may be a subset of the\n+//! is calculated in `rustc_const_eval::transform::generator` and may be a subset of the\n //! types computed here.\n \n use super::FnCtxt;"}, {"sha": "e2ad21bba21b754400031c8bc6283494d0f974e9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -11,6 +11,7 @@ crate mod utils;\n \n use rustc_ast as ast;\n use rustc_attr as attr;\n+use rustc_const_eval::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -22,7 +23,6 @@ use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, DefIdTree, Lift, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n-use rustc_mir::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExpnKind};"}, {"sha": "8246834a74688040d3dc089d7cbefc3460b99d30", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -34,6 +34,7 @@ extern crate rustc_ast;\n extern crate rustc_ast_lowering;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n+extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_errors;\n@@ -49,7 +50,6 @@ extern crate rustc_lint;\n extern crate rustc_lint_defs;\n extern crate rustc_metadata;\n extern crate rustc_middle;\n-extern crate rustc_mir;\n extern crate rustc_parse;\n extern crate rustc_passes;\n extern crate rustc_resolve;"}, {"sha": "961ea518c13abfb66c6676f49760e8de4b3aafb3", "filename": "src/test/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -11,13 +11,14 @@\n //! `optimized_mir` and pulls out the MIR bodies with the borrowck information\n //! from the thread local storage.\n \n+extern crate rustc_borrowck;\n extern crate rustc_driver;\n extern crate rustc_hir;\n extern crate rustc_interface;\n extern crate rustc_middle;\n-extern crate rustc_mir;\n extern crate rustc_session;\n \n+use rustc_borrowck::consumers::BodyWithBorrowckFacts;\n use rustc_driver::Compilation;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -26,7 +27,6 @@ use rustc_interface::{Config, Queries};\n use rustc_middle::ty::query::query_values::mir_borrowck;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_mir::consumers::BodyWithBorrowckFacts;\n use rustc_session::Session;\n use std::cell::RefCell;\n use std::collections::HashMap;\n@@ -108,7 +108,7 @@ thread_local! {\n }\n \n fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> mir_borrowck<'tcx> {\n-    let body_with_facts = rustc_mir::consumers::get_body_with_borrowck_facts(\n+    let body_with_facts = rustc_borrowck::consumers::get_body_with_borrowck_facts(\n         tcx,\n         ty::WithOptConstParam::unknown(def_id),\n     );\n@@ -120,7 +120,7 @@ fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> mir_borrowck<'tc\n         assert!(map.insert(def_id, body_with_facts).is_none());\n     });\n     let mut providers = Providers::default();\n-    rustc_mir::provide(&mut providers);\n+    rustc_borrowck::provide(&mut providers);\n     let original_mir_borrowck = providers.mir_borrowck;\n     original_mir_borrowck(tcx, def_id)\n }"}, {"sha": "77d1d71e9b2699b0bac2f5bb31e5c5fc06151ccb", "filename": "src/test/run-make-fulldeps/sepcomp-cci-copies/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftest%2Frun-make-fulldeps%2Fsepcomp-cci-copies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftest%2Frun-make-fulldeps%2Fsepcomp-cci-copies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsepcomp-cci-copies%2FMakefile?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -3,7 +3,7 @@\n # Check that cross-crate inlined items are inlined in all compilation units\n # that refer to them, and not in any other compilation units.\n # Note that we have to pass `-C codegen-units=6` because up to two CGUs may be\n-# created for each source module (see `rustc_mir::monomorphize::partitioning`).\n+# created for each source module (see `rustc_const_eval::monomorphize::partitioning`).\n \n all:\n \t$(RUSTC) cci_lib.rs"}, {"sha": "3c6faf117fde501d38d4fe897f80e0db537658bb", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -31,7 +31,7 @@ extern crate rustc_infer;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n extern crate rustc_middle;\n-extern crate rustc_mir;\n+extern crate rustc_mir_dataflow;\n extern crate rustc_parse;\n extern crate rustc_parse_format;\n extern crate rustc_session;"}, {"sha": "7041e4f980ef435cdecbb8c77675c7b2a08fef1f", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::{\n     Mutability,\n };\n use rustc_middle::ty::{self, fold::TypeVisitor, Ty, TyCtxt};\n-use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n+use rustc_mir_dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::sym;\n@@ -625,7 +625,10 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 .flat_map(HybridBitSet::iter)\n                 .collect();\n \n-            if ContainsRegion(self.cx.tcx).visit_ty(self.body.local_decls[*dest].ty).is_break() {\n+            if ContainsRegion(self.cx.tcx)\n+                .visit_ty(self.body.local_decls[*dest].ty)\n+                .is_break()\n+            {\n                 mutable_variables.push(*dest);\n             }\n "}, {"sha": "0906f958cfb1f4510741d546004bd245140afdc7", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -17,14 +17,14 @@\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n+extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_infer;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n extern crate rustc_middle;\n-extern crate rustc_mir;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;"}, {"sha": "4fb9e6b07e71ae5fa61ea2cb1ba9cdb1a54cfc78", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97032a6dfacdd3548e4bff98c90a6b3875a14077/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=97032a6dfacdd3548e4bff98c90a6b3875a14077", "patch": "@@ -366,7 +366,7 @@ fn check_terminator(\n }\n \n fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> bool {\n-    rustc_mir::const_eval::is_const_fn(tcx, def_id)\n+    rustc_const_eval::const_eval::is_const_fn(tcx, def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire"}]}