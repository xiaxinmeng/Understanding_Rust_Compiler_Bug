{"sha": "8738d5d61183e7fec36b8645586f148ec36d82c3", "node_id": "C_kwDOAAsO6NoAKDg3MzhkNWQ2MTE4M2U3ZmVjMzZiODY0NTU4NmYxNDhlYzM2ZDgyYzM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-22T10:42:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-22T10:42:43Z"}, "message": "Rollup merge of #89257 - aDotInTheVoid:macro-error-2, r=estebank\n\nGive better error for `macro_rules name`\n\nfollow up to #89221\n\nr? ``@estebank``\n\n``@rustbot`` modify labels: +A-diagnostics +A-parser", "tree": {"sha": "a06732aa5bcd82d1f3ff6fb7212b0433d3b10970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a06732aa5bcd82d1f3ff6fb7212b0433d3b10970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8738d5d61183e7fec36b8645586f148ec36d82c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcpWjCRBK7hj4Ov3rIwAAiF0IADTZidI/cS4PTc65k/x2KLKN\nV/kjQyUhlspGmg3q4kq8L4EULNXUtSspovco2KY3lsKJd/+qZc+u4boAjxopbnna\nA6GkiuvJxqzBPn0uuUjWGmI/u8BGb60Aw7VLA/9SY4qHFT3LoqvdKEKwMQvU8XWz\nvDq9dM1orKjJyGCpkG2N9D2vGslS55KMM7NrgIlRdW5r8u3bTCX/z+K93ymnmgKd\nTcqyuD6dmzeIOy5opQSK+7Uls7n++ewHCuiFM/eEkaNZHyowmZXDKDMebGKiWxbS\nWi+DGl5X8z/xJRclZiK0d8mQixActV2FZ5owQonNGhlgCrNNzGhBDyW2/e74gzU=\n=HBx+\n-----END PGP SIGNATURE-----\n", "payload": "tree a06732aa5bcd82d1f3ff6fb7212b0433d3b10970\nparent 918f9cc88bf71db79067af325ca00d8cba7309b6\nparent 729ff2d00653feec9810857a7a6b06559d78cfb8\nauthor Yuki Okushi <jtitor@2k36.org> 1634899363 +0900\ncommitter GitHub <noreply@github.com> 1634899363 +0900\n\nRollup merge of #89257 - aDotInTheVoid:macro-error-2, r=estebank\n\nGive better error for `macro_rules name`\n\nfollow up to #89221\n\nr? ``@estebank``\n\n``@rustbot`` modify labels: +A-diagnostics +A-parser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8738d5d61183e7fec36b8645586f148ec36d82c3", "html_url": "https://github.com/rust-lang/rust/commit/8738d5d61183e7fec36b8645586f148ec36d82c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8738d5d61183e7fec36b8645586f148ec36d82c3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918f9cc88bf71db79067af325ca00d8cba7309b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/918f9cc88bf71db79067af325ca00d8cba7309b6", "html_url": "https://github.com/rust-lang/rust/commit/918f9cc88bf71db79067af325ca00d8cba7309b6"}, {"sha": "729ff2d00653feec9810857a7a6b06559d78cfb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/729ff2d00653feec9810857a7a6b06559d78cfb8", "html_url": "https://github.com/rust-lang/rust/commit/729ff2d00653feec9810857a7a6b06559d78cfb8"}], "stats": {"total": 102, "additions": 92, "deletions": 10}, "files": [{"sha": "d2167c7a5db0c8f642f61c047f5b3b54b39372eb", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8738d5d61183e7fec36b8645586f148ec36d82c3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8738d5d61183e7fec36b8645586f148ec36d82c3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=8738d5d61183e7fec36b8645586f148ec36d82c3", "patch": "@@ -279,9 +279,9 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(kw::Macro) {\n             // MACROS 2.0 ITEM\n             self.parse_item_decl_macro(lo)?\n-        } else if self.is_macro_rules_item() {\n+        } else if let IsMacroRulesItem::Yes { has_bang } = self.is_macro_rules_item() {\n             // MACRO_RULES ITEM\n-            self.parse_item_macro_rules(vis)?\n+            self.parse_item_macro_rules(vis, has_bang)?\n         } else if vis.kind.is_pub() && self.isnt_macro_invocation() {\n             self.recover_missing_kw_before_item()?;\n             return Ok(None);\n@@ -300,7 +300,7 @@ impl<'a> Parser<'a> {\n         || self.is_kw_followed_by_ident(kw::Union) // no: `union::b`, yes: `union U { .. }`\n         || self.check_auto_or_unsafe_trait_item() // no: `auto::b`, yes: `auto trait X { .. }`\n         || self.is_async_fn() // no(2015): `async::b`, yes: `async fn`\n-        || self.is_macro_rules_item() // no: `macro_rules::b`, yes: `macro_rules! mac`\n+        || matches!(self.is_macro_rules_item(), IsMacroRulesItem::Yes{..}) // no: `macro_rules::b`, yes: `macro_rules! mac`\n     }\n \n     /// Are we sure this could not possibly be a macro invocation?\n@@ -1534,18 +1534,43 @@ impl<'a> Parser<'a> {\n         Ok((ident, ItemKind::MacroDef(ast::MacroDef { body, macro_rules: false })))\n     }\n \n-    /// Is this unambiguously the start of a `macro_rules! foo` item definition?\n-    fn is_macro_rules_item(&mut self) -> bool {\n-        self.check_keyword(kw::MacroRules)\n-            && self.look_ahead(1, |t| *t == token::Not)\n-            && self.look_ahead(2, |t| t.is_ident())\n+    /// Is this a possibly malformed start of a `macro_rules! foo` item definition?\n+\n+    fn is_macro_rules_item(&mut self) -> IsMacroRulesItem {\n+        if self.check_keyword(kw::MacroRules) {\n+            let macro_rules_span = self.token.span;\n+\n+            if self.look_ahead(1, |t| *t == token::Not) && self.look_ahead(2, |t| t.is_ident()) {\n+                return IsMacroRulesItem::Yes { has_bang: true };\n+            } else if self.look_ahead(1, |t| (t.is_ident())) {\n+                // macro_rules foo\n+                self.struct_span_err(macro_rules_span, \"expected `!` after `macro_rules`\")\n+                    .span_suggestion(\n+                        macro_rules_span,\n+                        \"add a `!`\",\n+                        \"macro_rules!\".to_owned(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+\n+                return IsMacroRulesItem::Yes { has_bang: false };\n+            }\n+        }\n+\n+        IsMacroRulesItem::No\n     }\n \n     /// Parses a `macro_rules! foo { ... }` declarative macro.\n-    fn parse_item_macro_rules(&mut self, vis: &Visibility) -> PResult<'a, ItemInfo> {\n+    fn parse_item_macro_rules(\n+        &mut self,\n+        vis: &Visibility,\n+        has_bang: bool,\n+    ) -> PResult<'a, ItemInfo> {\n         self.expect_keyword(kw::MacroRules)?; // `macro_rules`\n-        self.expect(&token::Not)?; // `!`\n \n+        if has_bang {\n+            self.expect(&token::Not)?; // `!`\n+        }\n         let ident = self.parse_ident()?;\n \n         if self.eat(&token::Not) {\n@@ -2121,3 +2146,8 @@ impl<'a> Parser<'a> {\n         }\n     }\n }\n+\n+enum IsMacroRulesItem {\n+    Yes { has_bang: bool },\n+    No,\n+}"}, {"sha": "b1aa3298bfa561cb0d5b1f03d1879ef471655466", "filename": "src/test/ui/macros/missing-bang-in-decl.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8738d5d61183e7fec36b8645586f148ec36d82c3/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8738d5d61183e7fec36b8645586f148ec36d82c3/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.fixed?ref=8738d5d61183e7fec36b8645586f148ec36d82c3", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(unused_macros)]\n+\n+macro_rules! foo {\n+    //~^ ERROR expected `!` after `macro_rules`\n+    () => {};\n+}\n+\n+macro_rules! bar {\n+    //~^ ERROR expected `!` after `macro_rules`\n+    //~^^ ERROR macro names aren't followed by a `!`\n+    () => {};\n+}\n+\n+fn main() {}"}, {"sha": "8393f15fc52f4ae9bac2668476445704fd5659c1", "filename": "src/test/ui/macros/missing-bang-in-decl.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8738d5d61183e7fec36b8645586f148ec36d82c3/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8738d5d61183e7fec36b8645586f148ec36d82c3/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.rs?ref=8738d5d61183e7fec36b8645586f148ec36d82c3", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(unused_macros)]\n+\n+macro_rules foo {\n+    //~^ ERROR expected `!` after `macro_rules`\n+    () => {};\n+}\n+\n+macro_rules bar! {\n+    //~^ ERROR expected `!` after `macro_rules`\n+    //~^^ ERROR macro names aren't followed by a `!`\n+    () => {};\n+}\n+\n+fn main() {}"}, {"sha": "dfabafb0a7ab8e21b8da95409a7bf1593ca07674", "filename": "src/test/ui/macros/missing-bang-in-decl.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8738d5d61183e7fec36b8645586f148ec36d82c3/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8738d5d61183e7fec36b8645586f148ec36d82c3/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-bang-in-decl.stderr?ref=8738d5d61183e7fec36b8645586f148ec36d82c3", "patch": "@@ -0,0 +1,20 @@\n+error: expected `!` after `macro_rules`\n+  --> $DIR/missing-bang-in-decl.rs:5:1\n+   |\n+LL | macro_rules foo {\n+   | ^^^^^^^^^^^ help: add a `!`: `macro_rules!`\n+\n+error: expected `!` after `macro_rules`\n+  --> $DIR/missing-bang-in-decl.rs:10:1\n+   |\n+LL | macro_rules bar! {\n+   | ^^^^^^^^^^^ help: add a `!`: `macro_rules!`\n+\n+error: macro names aren't followed by a `!`\n+  --> $DIR/missing-bang-in-decl.rs:10:16\n+   |\n+LL | macro_rules bar! {\n+   |                ^ help: remove the `!`\n+\n+error: aborting due to 3 previous errors\n+"}]}