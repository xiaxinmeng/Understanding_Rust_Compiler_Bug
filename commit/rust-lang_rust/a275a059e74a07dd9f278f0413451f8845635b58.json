{"sha": "a275a059e74a07dd9f278f0413451f8845635b58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNzVhMDU5ZTc0YTA3ZGQ5ZjI3OGYwNDEzNDUxZjg4NDU2MzViNTg=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-08-17T17:07:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-17T17:07:59Z"}, "message": "Merge pull request #2920 from topecongiro/issue-2919\n\nUse correct max width when formatting macro body", "tree": {"sha": "82b72556ff2ccbd2cbac9d7f37a1f0006c2ae911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b72556ff2ccbd2cbac9d7f37a1f0006c2ae911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a275a059e74a07dd9f278f0413451f8845635b58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbdwDvCRBK7hj4Ov3rIwAAdHIIAJbMXVJyeBSXrNJIstHnBaXn\nimnEWfR+lN4YDRLPPXnDbSfkltpj7aU4oRIsUvdaV6eWaGx4LRY8LFQG3OpF1Rf6\nmPWXzXgKtul3haEeXvj9zuwM3bR8EeDLpnpSOrleeXcMBUZUW8S69x1PoK0TxkLr\nA2CyLaKjC+oFpU9+trD53yGy/6Z3ZN1whabdO6g+LyagINIOBrrIlzcicckaTca1\np+8VY8sCtq31NJZJ/494UxQhNQi0ceLFr++ktVNLldqvWY+KIihqvwLIMeGFHtjq\nSgrUfrfryev/f2IumKbjZTIq16depna4sbemiFCrzBn5gtkKD2XciWhNwaY7yGg=\n=QgoD\n-----END PGP SIGNATURE-----\n", "payload": "tree 82b72556ff2ccbd2cbac9d7f37a1f0006c2ae911\nparent 7c1ad96e9fca2186e691f64be55e96fec6a204be\nparent b318e5a68417db710beaa582775c4b6a2af5c0b1\nauthor Nick Cameron <nrc@ncameron.org> 1534525679 -0700\ncommitter GitHub <noreply@github.com> 1534525679 -0700\n\nMerge pull request #2920 from topecongiro/issue-2919\n\nUse correct max width when formatting macro body"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a275a059e74a07dd9f278f0413451f8845635b58", "html_url": "https://github.com/rust-lang/rust/commit/a275a059e74a07dd9f278f0413451f8845635b58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a275a059e74a07dd9f278f0413451f8845635b58/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1ad96e9fca2186e691f64be55e96fec6a204be", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1ad96e9fca2186e691f64be55e96fec6a204be", "html_url": "https://github.com/rust-lang/rust/commit/7c1ad96e9fca2186e691f64be55e96fec6a204be"}, {"sha": "b318e5a68417db710beaa582775c4b6a2af5c0b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b318e5a68417db710beaa582775c4b6a2af5c0b1", "html_url": "https://github.com/rust-lang/rust/commit/b318e5a68417db710beaa582775c4b6a2af5c0b1"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "e95cd3de60752c2a3853dce5af612b3f9a5eb5b2", "filename": "src/macros.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a275a059e74a07dd9f278f0413451f8845635b58/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a275a059e74a07dd9f278f0413451f8845635b58/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=a275a059e74a07dd9f278f0413451f8845635b58", "patch": "@@ -1277,20 +1277,22 @@ impl MacroBranch {\n         let body_indent = if has_block_body {\n             shape.indent\n         } else {\n-            // We'll hack the indent below, take this into account when formatting,\n-            let body_indent = shape.indent.block_indent(&config);\n-            let new_width = config.max_width() - body_indent.width();\n-            config.set().max_width(new_width);\n-            body_indent\n+            shape.indent.block_indent(&config)\n         };\n+        let new_width = config.max_width() - body_indent.width();\n+        config.set().max_width(new_width);\n \n         // First try to format as items, then as statements.\n         let new_body = match ::format_snippet(&body_str, &config) {\n             Some(new_body) => new_body,\n-            None => match ::format_code_block(&body_str, &config) {\n-                Some(new_body) => new_body,\n-                None => return None,\n-            },\n+            None => {\n+                let new_width = new_width + config.tab_spaces();\n+                config.set().max_width(new_width);\n+                match ::format_code_block(&body_str, &config) {\n+                    Some(new_body) => new_body,\n+                    None => return None,\n+                }\n+            }\n         };\n         let new_body = wrap_str(new_body, config.max_width(), shape)?;\n "}, {"sha": "b2d9c1199c5010b708b5e5367226b397e3c7803b", "filename": "tests/source/macro_rules.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a275a059e74a07dd9f278f0413451f8845635b58/tests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a275a059e74a07dd9f278f0413451f8845635b58/tests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_rules.rs?ref=a275a059e74a07dd9f278f0413451f8845635b58", "patch": "@@ -263,3 +263,19 @@ macro_rules! impl_as_byte_slice_arrays {\n         }\n     };\n }\n+\n+// #2919\n+fn foo() {\n+    {\n+        macro_rules! touch_value {\n+            ($func:ident, $value:expr) => {{\n+                let result = API::get_cached().$func(self, key.as_ptr(), $value, ffi::VSPropAppendMode::paTouch);\n+                let result = API::get_cached().$func(self, key.as_ptr(), $value, ffi::VSPropAppend);\n+                let result = API::get_cached().$func(self, key.as_ptr(), $value, ffi::VSPropAppendM);\n+                let result = APIIIIIIIII::get_cached().$func(self, key.as_ptr(), $value, ffi::VSPropAppendM);\n+                let result = API::get_cached().$func(self, key.as_ptr(), $value, ffi::VSPropAppendMMMMMMMMMM);\n+                debug_assert!(result == 0);\n+            }};\n+        }\n+    }\n+}"}, {"sha": "281d655a8d8857c090539e48e4f75791921cac74", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a275a059e74a07dd9f278f0413451f8845635b58/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a275a059e74a07dd9f278f0413451f8845635b58/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=a275a059e74a07dd9f278f0413451f8845635b58", "patch": "@@ -305,3 +305,31 @@ macro_rules! impl_as_byte_slice_arrays {\n         }\n     };\n }\n+\n+// #2919\n+fn foo() {\n+    {\n+        macro_rules! touch_value {\n+            ($func:ident, $value:expr) => {{\n+                let result = API::get_cached().$func(\n+                    self,\n+                    key.as_ptr(),\n+                    $value,\n+                    ffi::VSPropAppendMode::paTouch,\n+                );\n+                let result = API::get_cached().$func(self, key.as_ptr(), $value, ffi::VSPropAppend);\n+                let result =\n+                    API::get_cached().$func(self, key.as_ptr(), $value, ffi::VSPropAppendM);\n+                let result =\n+                    APIIIIIIIII::get_cached().$func(self, key.as_ptr(), $value, ffi::VSPropAppendM);\n+                let result = API::get_cached().$func(\n+                    self,\n+                    key.as_ptr(),\n+                    $value,\n+                    ffi::VSPropAppendMMMMMMMMMM,\n+                );\n+                debug_assert!(result == 0);\n+            }};\n+        }\n+    }\n+}"}]}