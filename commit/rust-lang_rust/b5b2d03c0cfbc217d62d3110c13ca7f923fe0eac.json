{"sha": "b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac", "node_id": "C_kwDOAAsO6NoAKGI1YjJkMDNjMGNmYmMyMTdkNjJkMzExMGMxM2NhN2Y5MjNmZTBlYWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-02T20:22:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-02T20:22:48Z"}, "message": "Rollup merge of #105144 - compiler-errors:normalization-doc, r=lcnr\n\nDocument normalization methods `At::{normalize,query_normalize}`\n\nr? ``@lcnr``", "tree": {"sha": "f3e36e687ec4887587e0b7dbb6625228094d2aa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3e36e687ec4887587e0b7dbb6625228094d2aa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjil6YCRBK7hj4Ov3rIwAASuEIADPaouEt6DqYULlPSyAc7pTi\nwzuC5V0EDxx6FWAbvV/lUA8VyGe5d69JFdf1h2AWi2k3B3+yBPPOi8Ten1dX/iEB\nEyS1ouE7tSdb/m/dtTB4jQEf2LRIWkO/BOQxcbpzV2HqxIl0SINDzTxgiKbBwnu/\nA1LKm71xCoPsatD37AJdxjRQ1hJirHjuqbx1fNMONiIbP+mh+Xmq+gxpEYcWJEQN\nCzCuTHud8QbwBGJRdoG5w4OssSRBrfU/14E2A1dI3A6NyXKbkE2D3ltMGlVCp57P\nXCDDtxVXtpcCH+9YwsSRT9eeACwLiJcYw2BRV4xJ93e/uItTL2EFHzLjFiut3rY=\n=oN5P\n-----END PGP SIGNATURE-----\n", "payload": "tree f3e36e687ec4887587e0b7dbb6625228094d2aa4\nparent 0724a01b8c0d1e6dc06d4004301a1b18784d85d7\nparent 02b64c5d2689fad8360d83f3bcd58f5dbbd2f303\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670012568 +0100\ncommitter GitHub <noreply@github.com> 1670012568 +0100\n\nRollup merge of #105144 - compiler-errors:normalization-doc, r=lcnr\n\nDocument normalization methods `At::{normalize,query_normalize}`\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac", "html_url": "https://github.com/rust-lang/rust/commit/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0724a01b8c0d1e6dc06d4004301a1b18784d85d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0724a01b8c0d1e6dc06d4004301a1b18784d85d7", "html_url": "https://github.com/rust-lang/rust/commit/0724a01b8c0d1e6dc06d4004301a1b18784d85d7"}, {"sha": "02b64c5d2689fad8360d83f3bcd58f5dbbd2f303", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b64c5d2689fad8360d83f3bcd58f5dbbd2f303", "html_url": "https://github.com/rust-lang/rust/commit/02b64c5d2689fad8360d83f3bcd58f5dbbd2f303"}], "stats": {"total": 59, "additions": 20, "deletions": 39}, "files": [{"sha": "5aebccac6a2954d2aca2517d3feb60fbd9e9f225", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac", "patch": "@@ -80,7 +80,6 @@ pub struct InferOk<'tcx, T> {\n }\n pub type InferResult<'tcx, T> = Result<InferOk<'tcx, T>, TypeError<'tcx>>;\n \n-pub type Bound<T> = Option<T>;\n pub type UnitResult<'tcx> = RelateResult<'tcx, ()>; // \"unify result\"\n pub type FixupResult<'tcx, T> = Result<T, FixupError<'tcx>>; // \"fixup result\"\n "}, {"sha": "899e30275a05296eb2de1958b29b41286f3f51d0", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac", "patch": "@@ -11,8 +11,8 @@ use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::util::impl_subject_and_oblig;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n-    self, Normalized, Obligation, ObligationCause, ObligationCtxt, PredicateObligation,\n-    PredicateObligations, SelectionContext,\n+    self, Obligation, ObligationCause, ObligationCtxt, PredicateObligation, PredicateObligations,\n+    SelectionContext,\n };\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n@@ -30,6 +30,8 @@ use std::fmt::Debug;\n use std::iter;\n use std::ops::ControlFlow;\n \n+use super::NormalizeExt;\n+\n /// Whether we do the orphan check relative to this crate or\n /// to some remote crate.\n #[derive(Copy, Clone, Debug)]\n@@ -128,8 +130,8 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n         predicates: tcx.predicates_of(impl_def_id).instantiate(tcx, impl_substs).predicates,\n     };\n \n-    let Normalized { value: mut header, obligations } =\n-        traits::normalize(selcx, param_env, ObligationCause::dummy(), header);\n+    let InferOk { value: mut header, obligations } =\n+        selcx.infcx.at(&ObligationCause::dummy(), param_env).normalize(header);\n \n     header.predicates.extend(obligations.into_iter().map(|o| o.predicate));\n     header"}, {"sha": "c6818a4e57d424cb04355b43f1451bf5caecdfa3", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac", "patch": "@@ -56,7 +56,6 @@ pub use self::object_safety::astconv_object_safety_violations;\n pub use self::object_safety::is_vtable_safe_method;\n pub use self::object_safety::MethodViolationCode;\n pub use self::object_safety::ObjectSafetyViolation;\n-pub(crate) use self::project::{normalize, normalize_to};\n pub use self::project::{normalize_projection_type, NormalizeExt};\n pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};"}, {"sha": "051660be9c474abb77ada510476f05f55426dc14", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 7, "deletions": 33, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac", "patch": "@@ -50,14 +50,18 @@ pub type ProjectionTyObligation<'tcx> = Obligation<'tcx, ty::ProjectionTy<'tcx>>\n pub(super) struct InProgress;\n \n pub trait NormalizeExt<'tcx> {\n+    /// Normalize a value using the `AssocTypeNormalizer`.\n+    ///\n+    /// This normalization should be used when the type contains inference variables or the\n+    /// projection may be fallible.\n     fn normalize<T: TypeFoldable<'tcx>>(&self, t: T) -> InferOk<'tcx, T>;\n }\n \n impl<'tcx> NormalizeExt<'tcx> for At<'_, 'tcx> {\n     fn normalize<T: TypeFoldable<'tcx>>(&self, value: T) -> InferOk<'tcx, T> {\n         let mut selcx = SelectionContext::new(self.infcx);\n         let Normalized { value, obligations } =\n-            normalize(&mut selcx, self.param_env, self.cause.clone(), value);\n+            normalize_with_depth(&mut selcx, self.param_env, self.cause.clone(), 0, value);\n         InferOk { value, obligations }\n     }\n }\n@@ -303,37 +307,6 @@ fn project_and_unify_type<'cx, 'tcx>(\n     }\n }\n \n-/// Normalizes any associated type projections in `value`, replacing\n-/// them with a fully resolved type where possible. The return value\n-/// combines the normalized result and any additional obligations that\n-/// were incurred as result.\n-pub(crate) fn normalize<'a, 'b, 'tcx, T>(\n-    selcx: &'a mut SelectionContext<'b, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    cause: ObligationCause<'tcx>,\n-    value: T,\n-) -> Normalized<'tcx, T>\n-where\n-    T: TypeFoldable<'tcx>,\n-{\n-    let mut obligations = Vec::new();\n-    let value = normalize_to(selcx, param_env, cause, value, &mut obligations);\n-    Normalized { value, obligations }\n-}\n-\n-pub(crate) fn normalize_to<'a, 'b, 'tcx, T>(\n-    selcx: &'a mut SelectionContext<'b, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    cause: ObligationCause<'tcx>,\n-    value: T,\n-    obligations: &mut Vec<PredicateObligation<'tcx>>,\n-) -> T\n-where\n-    T: TypeFoldable<'tcx>,\n-{\n-    normalize_with_depth_to(selcx, param_env, cause, 0, value, obligations)\n-}\n-\n /// As `normalize`, but with a custom depth.\n pub(crate) fn normalize_with_depth<'a, 'b, 'tcx, T>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n@@ -2324,10 +2297,11 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         },\n     ));\n \n-    let ty = super::normalize_to(\n+    let ty = normalize_with_depth_to(\n         selcx,\n         obligation.param_env,\n         cause.clone(),\n+        obligation.recursion_depth + 1,\n         tcx.bound_trait_impl_trait_tys(impl_fn_def_id)\n             .map_bound(|tys| {\n                 tys.map_or_else(|_| tcx.ty_error(), |tys| tys[&obligation.predicate.item_def_id])"}, {"sha": "f899321fc01e1e4d1a13ea625b4185871c67fe41", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=b5b2d03c0cfbc217d62d3110c13ca7f923fe0eac", "patch": "@@ -23,6 +23,13 @@ use super::NoSolution;\n pub use rustc_middle::traits::query::NormalizationResult;\n \n pub trait QueryNormalizeExt<'tcx> {\n+    /// Normalize a value using the `QueryNormalizer`.\n+    ///\n+    /// This normalization should *only* be used when the projection does not\n+    /// have possible ambiguity or may not be well-formed.\n+    ///\n+    /// After codegen, when lifetimes do not matter, it is preferable to instead\n+    /// use [`TyCtxt::normalize_erasing_regions`], which wraps this procedure.\n     fn query_normalize<T>(&self, value: T) -> Result<Normalized<'tcx, T>, NoSolution>\n     where\n         T: TypeFoldable<'tcx>;"}]}