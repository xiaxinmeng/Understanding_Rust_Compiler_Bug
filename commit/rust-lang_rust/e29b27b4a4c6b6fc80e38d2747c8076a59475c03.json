{"sha": "e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "node_id": "C_kwDOAAsO6NoAKGUyOWIyN2I0YTRjNmI2ZmM4MGUzOGQyNzQ3YzgwNzZhNTk0NzVjMDM", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-03-13T19:07:53Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-03-27T14:03:14Z"}, "message": "replace advance_by returning usize with Result<(), NonZeroUsize>", "tree": {"sha": "8b39f203c9919d8f90a084ee8e5d80167b33e92e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b39f203c9919d8f90a084ee8e5d80167b33e92e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "html_url": "https://github.com/rust-lang/rust/commit/e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/69db91b8b25de51633ac9f089cd7fb10a58c2b2a", "html_url": "https://github.com/rust-lang/rust/commit/69db91b8b25de51633ac9f089cd7fb10a58c2b2a"}], "stats": {"total": 611, "additions": 340, "deletions": 271}, "files": [{"sha": "c277c62ad14d921e6f2f2e239d66a6b8dea50c39", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use core::iter::{FusedIterator, TrustedLen};\n+use core::num::NonZeroUsize;\n use core::{array, fmt, mem::MaybeUninit, ops::Try, ptr};\n \n use crate::alloc::{Allocator, Global};\n@@ -54,15 +55,16 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n-        if self.inner.len < n {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        let rem = if self.inner.len < n {\n             let len = self.inner.len;\n             self.inner.clear();\n             len - n\n         } else {\n             self.inner.drain(..n);\n             0\n-        }\n+        };\n+        NonZeroUsize::new(rem).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n@@ -182,15 +184,16 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let len = self.inner.len;\n-        if len >= n {\n+        let rem = if len >= n {\n             self.inner.truncate(len - n);\n             0\n         } else {\n             self.inner.clear();\n             n - len\n-        }\n+        };\n+        NonZeroUsize::new(rem).map_or(Ok(()), Err)\n     }\n \n     fn try_rfold<B, F, R>(&mut self, mut init: B, mut f: F) -> R"}, {"sha": "646a2a991e701903123a96ec46cdd0755fa0cccc", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n+use core::num::NonZeroUsize;\n use core::ops::Try;\n use core::{fmt, mem, slice};\n \n@@ -55,13 +56,15 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         }\n     }\n \n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let remaining = self.i1.advance_by(n);\n-        if remaining == 0 {\n-            return 0;\n+        match remaining {\n+            Ok(()) => return Ok(()),\n+            Err(n) => {\n+                mem::swap(&mut self.i1, &mut self.i2);\n+                self.i1.advance_by(n.get())\n+            }\n         }\n-        mem::swap(&mut self.i1, &mut self.i2);\n-        self.i1.advance_by(remaining)\n     }\n \n     #[inline]\n@@ -125,13 +128,14 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n         }\n     }\n \n-    fn advance_back_by(&mut self, n: usize) -> usize {\n-        let remaining = self.i2.advance_back_by(n);\n-        if remaining == 0 {\n-            return 0;\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        match self.i2.advance_back_by(n) {\n+            Ok(()) => return Ok(()),\n+            Err(n) => {\n+                mem::swap(&mut self.i1, &mut self.i2);\n+                self.i2.advance_back_by(n.get())\n+            }\n         }\n-        mem::swap(&mut self.i1, &mut self.i2);\n-        self.i2.advance_back_by(remaining)\n     }\n \n     fn rfold<Acc, F>(self, accum: Acc, mut f: F) -> Acc"}, {"sha": "7defbb1090ffd682b86e2ebe1d1647ab79fa5054", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use core::iter::{FusedIterator, TrustedLen, TrustedRandomAccess, TrustedRandomAccessNoCoerce};\n+use core::num::NonZeroUsize;\n use core::ops::Try;\n use core::{fmt, mem, slice};\n \n@@ -47,13 +48,14 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n         }\n     }\n \n-    fn advance_by(&mut self, n: usize) -> usize {\n-        let remaining = self.i1.advance_by(n);\n-        if remaining == 0 {\n-            return 0;\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        match self.i1.advance_by(n) {\n+            Ok(()) => return Ok(()),\n+            Err(remaining) => {\n+                mem::swap(&mut self.i1, &mut self.i2);\n+                self.i1.advance_by(remaining.get())\n+            }\n         }\n-        mem::swap(&mut self.i1, &mut self.i2);\n-        self.i1.advance_by(remaining)\n     }\n \n     #[inline]\n@@ -117,13 +119,14 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n         }\n     }\n \n-    fn advance_back_by(&mut self, n: usize) -> usize {\n-        let remaining = self.i2.advance_back_by(n);\n-        if remaining == 0 {\n-            return 0;\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        match self.i2.advance_back_by(n) {\n+            Ok(()) => return Ok(()),\n+            Err(remaining) => {\n+                mem::swap(&mut self.i1, &mut self.i2);\n+                self.i2.advance_back_by(remaining.get())\n+            }\n         }\n-        mem::swap(&mut self.i1, &mut self.i2);\n-        self.i2.advance_back_by(remaining)\n     }\n \n     fn rfold<Acc, F>(self, accum: Acc, mut f: F) -> Acc"}, {"sha": "6a05f70e4374753a3a6254f2d21f40860bcfba85", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -11,6 +11,7 @@ use core::iter::{\n };\n use core::marker::PhantomData;\n use core::mem::{self, ManuallyDrop, MaybeUninit, SizedTypeProperties};\n+use core::num::NonZeroUsize;\n #[cfg(not(no_global_oom_handling))]\n use core::ops::Deref;\n use core::ptr::{self, NonNull};\n@@ -213,7 +214,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let step_size = self.len().min(n);\n         let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);\n         if T::IS_ZST {\n@@ -227,7 +228,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         unsafe {\n             ptr::drop_in_place(to_drop);\n         }\n-        n - step_size\n+        NonZeroUsize::new(n - step_size).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n@@ -310,7 +311,7 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let step_size = self.len().min(n);\n         if T::IS_ZST {\n             // SAFETY: same as for advance_by()\n@@ -324,7 +325,7 @@ impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {\n         unsafe {\n             ptr::drop_in_place(to_drop);\n         }\n-        n - step_size\n+        NonZeroUsize::new(n - step_size).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "3ee16f04e92f58fd5d734980f102cc53e8583b9d", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,6 +1,7 @@\n use core::alloc::{Allocator, Layout};\n use core::assert_eq;\n use core::iter::IntoIterator;\n+use core::num::NonZeroUsize;\n use core::ptr::NonNull;\n use std::alloc::System;\n use std::assert_matches::assert_matches;\n@@ -1064,20 +1065,20 @@ fn test_into_iter_leak() {\n #[test]\n fn test_into_iter_advance_by() {\n     let mut i = vec![1, 2, 3, 4, 5].into_iter();\n-    assert_eq!(i.advance_by(0), 0);\n-    assert_eq!(i.advance_back_by(0), 0);\n+    assert_eq!(i.advance_by(0), Ok(()));\n+    assert_eq!(i.advance_back_by(0), Ok(()));\n     assert_eq!(i.as_slice(), [1, 2, 3, 4, 5]);\n \n-    assert_eq!(i.advance_by(1), 0);\n-    assert_eq!(i.advance_back_by(1), 0);\n+    assert_eq!(i.advance_by(1), Ok(()));\n+    assert_eq!(i.advance_back_by(1), Ok(()));\n     assert_eq!(i.as_slice(), [2, 3, 4]);\n \n-    assert_eq!(i.advance_back_by(usize::MAX), usize::MAX - 3);\n+    assert_eq!(i.advance_back_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX - 3).unwrap()));\n \n-    assert_eq!(i.advance_by(usize::MAX), usize::MAX);\n+    assert_eq!(i.advance_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX).unwrap()));\n \n-    assert_eq!(i.advance_by(0), 0);\n-    assert_eq!(i.advance_back_by(0), 0);\n+    assert_eq!(i.advance_by(0), Ok(()));\n+    assert_eq!(i.advance_back_by(0), Ok(()));\n \n     assert_eq!(i.len(), 0);\n }\n@@ -1125,7 +1126,7 @@ fn test_into_iter_zst() {\n     for _ in vec![C; 5].into_iter().rev() {}\n \n     let mut it = vec![C, C].into_iter();\n-    assert_eq!(it.advance_by(1), 0);\n+    assert_eq!(it.advance_by(1), Ok(()));\n     drop(it);\n \n     let mut it = vec![C, C].into_iter();"}, {"sha": "73e2c2cfbbef6d19b7cd33ec4ee6f428d61ed1b3", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,5 +1,6 @@\n //! Defines the `IntoIter` owned iterator for arrays.\n \n+use crate::num::NonZeroUsize;\n use crate::{\n     fmt,\n     iter::{self, ExactSizeIterator, FusedIterator, TrustedLen},\n@@ -284,7 +285,7 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n         self.next_back()\n     }\n \n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // This also moves the start, which marks them as conceptually \"dropped\",\n         // so if anything goes bad then our drop impl won't double-free them.\n         let range_to_drop = self.alive.take_prefix(n);\n@@ -296,7 +297,7 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n             ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n         }\n \n-        remaining\n+        NonZeroUsize::new(remaining).map_or(Ok(()), Err)\n     }\n }\n \n@@ -333,7 +334,7 @@ impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n         })\n     }\n \n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // This also moves the end, which marks them as conceptually \"dropped\",\n         // so if anything goes bad then our drop impl won't double-free them.\n         let range_to_drop = self.alive.take_suffix(n);\n@@ -345,7 +346,7 @@ impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n             ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(slice));\n         }\n \n-        remaining\n+        NonZeroUsize::new(remaining).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "4e0e19ddc78223f40a2d10f058242597d093d747", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,3 +1,4 @@\n+use crate::num::NonZeroUsize;\n use crate::ops::{NeverShortCircuit, Try};\n \n /// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n@@ -26,7 +27,7 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         I::advance_by(self.0, n)\n     }\n \n@@ -62,7 +63,7 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         I::advance_back_by(self.0, n)\n     }\n "}, {"sha": "2046b70c9c6b43edfa8632272e86e2bfe0779665", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use crate::iter::{DoubleEndedIterator, FusedIterator, Iterator, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::Try;\n \n /// An iterator that links two iterators together, in a chain.\n@@ -95,32 +96,32 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, mut n: usize) -> usize {\n+    fn advance_by(&mut self, mut n: usize) -> Result<(), NonZeroUsize> {\n         if let Some(ref mut a) = self.a {\n-            n = a.advance_by(n);\n-            if n == 0 {\n-                return n;\n-            }\n+            n = match a.advance_by(n) {\n+                Ok(()) => return Ok(()),\n+                Err(k) => k.get(),\n+            };\n             self.a = None;\n         }\n \n         if let Some(ref mut b) = self.b {\n-            n = b.advance_by(n);\n+            return b.advance_by(n);\n             // we don't fuse the second iterator\n         }\n \n-        n\n+        NonZeroUsize::new(n).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n     fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n         if let Some(ref mut a) = self.a {\n             n = match a.advance_by(n) {\n-                0 => match a.next() {\n+                Ok(()) => match a.next() {\n                     None => 0,\n                     x => return x,\n                 },\n-                k => k,\n+                Err(k) => k.get(),\n             };\n \n             self.a = None;\n@@ -181,32 +182,32 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, mut n: usize) -> usize {\n+    fn advance_back_by(&mut self, mut n: usize) -> Result<(), NonZeroUsize> {\n         if let Some(ref mut b) = self.b {\n-            n = b.advance_back_by(n);\n-            if n == 0 {\n-                return n;\n-            }\n+            n = match b.advance_back_by(n) {\n+                Ok(()) => return Ok(()),\n+                Err(k) => k.get(),\n+            };\n             self.b = None;\n         }\n \n         if let Some(ref mut a) = self.a {\n-            n = a.advance_back_by(n);\n+            return a.advance_back_by(n);\n             // we don't fuse the second iterator\n         }\n \n-        n\n+        NonZeroUsize::new(n).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n     fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n         if let Some(ref mut b) = self.b {\n             n = match b.advance_back_by(n) {\n-                0 => match b.next_back() {\n+                Ok(()) => match b.next_back() {\n                     None => 0,\n                     x => return x,\n                 },\n-                k => k,\n+                Err(k) => k.get(),\n             };\n \n             self.b = None;"}, {"sha": "2289025d0a78087b3d864aa4cd7479b5c7b5149c", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -4,6 +4,7 @@ use crate::iter::adapters::{\n use crate::iter::{FusedIterator, TrustedLen};\n use crate::mem::MaybeUninit;\n use crate::mem::SizedTypeProperties;\n+use crate::num::NonZeroUsize;\n use crate::ops::Try;\n use crate::{array, ptr};\n \n@@ -89,7 +90,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.it.advance_by(n)\n     }\n \n@@ -130,7 +131,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.it.advance_back_by(n)\n     }\n }"}, {"sha": "51bd09b6effe1ea00ba9f184466f8b3858f7e02e", "filename": "library/core/src/iter/adapters/cycle.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcycle.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,3 +1,4 @@\n+use crate::num::NonZeroUsize;\n use crate::{iter::FusedIterator, ops::Try};\n \n /// An iterator that repeats endlessly.\n@@ -81,22 +82,22 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> usize {\n-        let mut n = self.iter.advance_by(n);\n-        if n == 0 {\n-            return n;\n-        }\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        let mut n = match self.iter.advance_by(n) {\n+            Ok(()) => return Ok(()),\n+            Err(rem) => rem.get(),\n+        };\n \n         while n > 0 {\n             self.iter = self.orig.clone();\n-            let rem = self.iter.advance_by(n);\n-            if rem == n {\n-                return n;\n-            }\n-            n = rem;\n+            n = match self.iter.advance_by(n) {\n+                Ok(()) => return Ok(()),\n+                e @ Err(rem) if rem.get() == n => return e,\n+                Err(rem) => rem.get(),\n+            };\n         }\n \n-        0\n+        NonZeroUsize::new(n).map_or(Ok(()), Err)\n     }\n \n     // No `fold` override, because `fold` doesn't make much sense for `Cycle`,"}, {"sha": "479ea6d83c74e9d847585d104775f627a6a94c25", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -2,6 +2,7 @@ use crate::iter::adapters::{\n     zip::try_get_unchecked, SourceIter, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n };\n use crate::iter::{FusedIterator, InPlaceIterable, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::Try;\n \n /// An iterator that yields the current count and the element during iteration.\n@@ -114,10 +115,14 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> usize {\n-        let n = self.iter.advance_by(n);\n-        self.count += n;\n-        n\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n+        let remaining = self.iter.advance_by(n);\n+        let advanced = match remaining {\n+            Ok(()) => n,\n+            Err(rem) => n - rem.get(),\n+        };\n+        self.count += advanced;\n+        remaining\n     }\n \n     #[rustc_inherit_overflow_checks]\n@@ -201,7 +206,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // we do not need to update the count since that only tallies the number of items\n         // consumed from the front. consuming items from the back can never reduce that.\n         self.iter.advance_back_by(n)"}, {"sha": "e0308e3360f45a1880a779ebcc60ac0262d4dc61", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,5 +1,6 @@\n use crate::fmt;\n use crate::iter::{DoubleEndedIterator, Fuse, FusedIterator, Iterator, Map, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator that maps each element to an iterator, and yields the elements\n@@ -75,7 +76,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.inner.advance_by(n)\n     }\n \n@@ -120,7 +121,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.inner.advance_back_by(n)\n     }\n }\n@@ -236,7 +237,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.inner.advance_by(n)\n     }\n \n@@ -281,7 +282,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.inner.advance_back_by(n)\n     }\n }\n@@ -552,19 +553,19 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: Iterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_by(n) {\n-                0 => ControlFlow::Break(()),\n-                remaining => ControlFlow::Continue(remaining),\n+                Ok(()) => ControlFlow::Break(()),\n+                Err(remaining) => ControlFlow::Continue(remaining.get()),\n             }\n         }\n \n         match self.iter_try_fold(n, advance) {\n-            ControlFlow::Continue(remaining) => remaining,\n-            _ => 0,\n+            ControlFlow::Continue(remaining) => NonZeroUsize::new(remaining).map_or(Ok(()), Err),\n+            _ => Ok(()),\n         }\n     }\n \n@@ -642,19 +643,19 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: DoubleEndedIterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_back_by(n) {\n-                0 => ControlFlow::Break(()),\n-                remaining => ControlFlow::Continue(remaining),\n+                Ok(()) => ControlFlow::Break(()),\n+                Err(remaining) => ControlFlow::Continue(remaining.get()),\n             }\n         }\n \n         match self.iter_try_rfold(n, advance) {\n-            ControlFlow::Continue(remaining) => remaining,\n-            _ => 0,\n+            ControlFlow::Continue(remaining) => NonZeroUsize::new(remaining).map_or(Ok(()), Err),\n+            _ => Ok(()),\n         }\n     }\n }"}, {"sha": "1d882087f695d9cbdef301588263fc1b4c63c630", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use crate::iter::{FusedIterator, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::Try;\n \n /// A double-ended iterator with the direction inverted.\n@@ -38,7 +39,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.iter.advance_back_by(n)\n     }\n \n@@ -83,7 +84,7 @@ where\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.iter.advance_by(n)\n     }\n "}, {"sha": "306338bc7cca0b85e2e94e98fe8832513ba0aa0a", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,5 +1,6 @@\n use crate::intrinsics::unlikely;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable};\n+use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator that skips over `n` elements of `iter`.\n@@ -128,21 +129,27 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, mut n: usize) -> usize {\n+    fn advance_by(&mut self, mut n: usize) -> Result<(), NonZeroUsize> {\n         let skip_inner = self.n;\n         let skip_and_advance = skip_inner.saturating_add(n);\n \n-        let remainder = self.iter.advance_by(skip_and_advance);\n+        let remainder = match self.iter.advance_by(skip_and_advance) {\n+            Ok(()) => 0,\n+            Err(n) => n.get(),\n+        };\n         let advanced_inner = skip_and_advance - remainder;\n         n -= advanced_inner.saturating_sub(skip_inner);\n         self.n = self.n.saturating_sub(advanced_inner);\n \n         // skip_and_advance may have saturated\n         if unlikely(remainder == 0 && n > 0) {\n-            n = self.iter.advance_by(n);\n+            n = match self.iter.advance_by(n) {\n+                Ok(()) => 0,\n+                Err(n) => n.get(),\n+            }\n         }\n \n-        n\n+        NonZeroUsize::new(n).map_or(Ok(()), Err)\n     }\n }\n \n@@ -196,13 +203,11 @@ where\n     impl_fold_via_try_fold! { rfold -> try_rfold }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let min = crate::cmp::min(self.len(), n);\n         let rem = self.iter.advance_back_by(min);\n-        if rem != 0 {\n-            panic!(\"ExactSizeIterator contract violation\");\n-        };\n-        n - min\n+        assert!(rem.is_ok(), \"ExactSizeIterator contract violation\");\n+        NonZeroUsize::new(n - min).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "ce18bffe7146f9da9d34d58f28c7be62534279cb", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,5 +1,6 @@\n use crate::cmp;\n use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n+use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n@@ -121,12 +122,15 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let min = self.n.min(n);\n-        let rem = self.iter.advance_by(min);\n+        let rem = match self.iter.advance_by(min) {\n+            Ok(()) => 0,\n+            Err(rem) => rem.get(),\n+        };\n         let advanced = min - rem;\n         self.n -= advanced;\n-        n - advanced\n+        NonZeroUsize::new(n - advanced).map_or(Ok(()), Err)\n     }\n }\n \n@@ -217,7 +221,7 @@ where\n \n     #[inline]\n     #[rustc_inherit_overflow_checks]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // The amount by which the inner iterator needs to be shortened for it to be\n         // at most as long as the take() amount.\n         let trim_inner = self.iter.len().saturating_sub(self.n);\n@@ -226,11 +230,14 @@ where\n         // about having to advance more than usize::MAX here.\n         let advance_by = trim_inner.saturating_add(n);\n \n-        let remainder = self.iter.advance_back_by(advance_by);\n+        let remainder = match self.iter.advance_back_by(advance_by) {\n+            Ok(()) => 0,\n+            Err(rem) => rem.get(),\n+        };\n         let advanced_by_inner = advance_by - remainder;\n         let advanced_by = advanced_by_inner - trim_inner;\n         self.n -= advanced_by;\n-        n - advanced_by\n+        NonZeroUsize::new(n - advanced_by).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "1cd71193bd772f693828ae8af8ca5b77857fbff1", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,6 +1,7 @@\n use crate::convert::TryFrom;\n use crate::marker::Destruct;\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::ops::{self, Try};\n \n use super::{\n@@ -530,12 +531,12 @@ trait RangeIteratorImpl {\n     // Iterator\n     fn spec_next(&mut self) -> Option<Self::Item>;\n     fn spec_nth(&mut self, n: usize) -> Option<Self::Item>;\n-    fn spec_advance_by(&mut self, n: usize) -> usize;\n+    fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize>;\n \n     // DoubleEndedIterator\n     fn spec_next_back(&mut self) -> Option<Self::Item>;\n     fn spec_nth_back(&mut self, n: usize) -> Option<Self::Item>;\n-    fn spec_advance_back_by(&mut self, n: usize) -> usize;\n+    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize>;\n }\n \n impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A> {\n@@ -567,7 +568,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n     }\n \n     #[inline]\n-    default fn spec_advance_by(&mut self, n: usize) -> usize {\n+    default fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -579,7 +580,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n         self.start =\n             Step::forward_checked(self.start.clone(), taken).expect(\"`Step` invariants not upheld\");\n \n-        n - taken\n+        NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n@@ -608,7 +609,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n     }\n \n     #[inline]\n-    default fn spec_advance_back_by(&mut self, n: usize) -> usize {\n+    default fn spec_advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -620,7 +621,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n         self.end =\n             Step::backward_checked(self.end.clone(), taken).expect(\"`Step` invariants not upheld\");\n \n-        n - taken\n+        NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }\n }\n \n@@ -651,7 +652,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n     }\n \n     #[inline]\n-    fn spec_advance_by(&mut self, n: usize) -> usize {\n+    fn spec_advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -666,7 +667,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n         // Otherwise 0 is returned which always safe to use.\n         self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };\n \n-        n - taken\n+        NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }\n \n     #[inline]\n@@ -695,7 +696,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n     }\n \n     #[inline]\n-    fn spec_advance_back_by(&mut self, n: usize) -> usize {\n+    fn spec_advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let available = if self.start <= self.end {\n             Step::steps_between(&self.start, &self.end).unwrap_or(usize::MAX)\n         } else {\n@@ -707,7 +708,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n         // SAFETY: same as the spec_advance_by() implementation\n         self.end = unsafe { Step::backward_unchecked(self.end.clone(), taken) };\n \n-        n - taken\n+        NonZeroUsize::new(n - taken).map_or(Ok(()), Err)\n     }\n }\n \n@@ -757,7 +758,7 @@ impl<A: ~const Step + ~const Destruct> const Iterator for ops::Range<A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.spec_advance_by(n)\n     }\n \n@@ -836,7 +837,7 @@ impl<A: ~const Step + ~const Destruct> const DoubleEndedIterator for ops::Range<\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.spec_advance_back_by(n)\n     }\n }"}, {"sha": "67051f6e97bdd42b9a3810d8094e83245f543129", "filename": "library/core/src/iter/sources/repeat.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use crate::iter::{FusedIterator, TrustedLen};\n+use crate::num::NonZeroUsize;\n \n /// Creates a new iterator that endlessly repeats a single element.\n ///\n@@ -80,10 +81,10 @@ impl<A: Clone> Iterator for Repeat<A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // Advancing an infinite iterator of a single element is a no-op.\n         let _ = n;\n-        0\n+        Ok(())\n     }\n \n     #[inline]\n@@ -109,10 +110,10 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         // Advancing an infinite iterator of a single element is a no-op.\n         let _ = n;\n-        0\n+        Ok(())\n     }\n \n     #[inline]"}, {"sha": "0b0445850bf526ed02b5a7349e954751ebdab859", "filename": "library/core/src/iter/sources/repeat_n.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,5 +1,6 @@\n use crate::iter::{FusedIterator, TrustedLen};\n use crate::mem::ManuallyDrop;\n+use crate::num::NonZeroUsize;\n \n /// Creates a new iterator that repeats a single element a given number of times.\n ///\n@@ -137,18 +138,19 @@ impl<A: Clone> Iterator for RepeatN<A> {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, skip: usize) -> usize {\n+    fn advance_by(&mut self, skip: usize) -> Result<(), NonZeroUsize> {\n         let len = self.count;\n \n         if skip >= len {\n             self.take_element();\n         }\n \n         if skip > len {\n-            skip - len\n+            // SAFETY: we just checked that the difference is positive\n+            Err(unsafe { NonZeroUsize::new_unchecked(skip - len) })\n         } else {\n             self.count = len - skip;\n-            0\n+            Ok(())\n         }\n     }\n \n@@ -178,7 +180,7 @@ impl<A: Clone> DoubleEndedIterator for RepeatN<A> {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         self.advance_by(n)\n     }\n "}, {"sha": "182b365b030ae99cad2905946f347d8dcb074f4a", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use crate::marker::Destruct;\n+use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator able to yield elements from both ends.\n@@ -120,29 +121,31 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     /// #![feature(iter_advance_by)]\n     ///\n+    /// use std::num::NonZeroUsize;\n     /// let a = [3, 4, 5, 6];\n     /// let mut iter = a.iter();\n     ///\n-    /// assert_eq!(iter.advance_back_by(2), 0);\n+    /// assert_eq!(iter.advance_back_by(2), Ok(()));\n     /// assert_eq!(iter.next_back(), Some(&4));\n-    /// assert_eq!(iter.advance_back_by(0), 0);\n-    /// assert_eq!(iter.advance_back_by(100), 99); // only `&3` was skipped\n+    /// assert_eq!(iter.advance_back_by(0), Ok(()));\n+    /// assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(99).unwrap())); // only `&3` was skipped\n     /// ```\n     ///\n     /// [`Ok(())`]: Ok\n     /// [`Err(k)`]: Err\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_back_by(&mut self, n: usize) -> usize\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize>\n     where\n         Self::Item: ~const Destruct,\n     {\n         for i in 0..n {\n             if self.next_back().is_none() {\n-                return n - i;\n+                // SAFETY: `i` is always less than `n`.\n+                return Err(unsafe { NonZeroUsize::new_unchecked(n - i) });\n             }\n         }\n-        0\n+        Ok(())\n     }\n \n     /// Returns the `n`th element from the end of the iterator.\n@@ -190,7 +193,7 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]\n     #[rustc_do_not_const_check]\n     fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n-        if self.advance_back_by(n) > 0 {\n+        if self.advance_back_by(n).is_err() {\n             return None;\n         }\n         self.next_back()\n@@ -378,7 +381,7 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n     fn next_back(&mut self) -> Option<I::Item> {\n         (**self).next_back()\n     }\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         (**self).advance_back_by(n)\n     }\n     fn nth_back(&mut self, n: usize) -> Option<I::Item> {"}, {"sha": "5a1ee80f7968d2503b170a585ac2248c720493ed", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,6 +1,7 @@\n use crate::array;\n use crate::cmp::{self, Ordering};\n use crate::marker::Destruct;\n+use crate::num::NonZeroUsize;\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n use super::super::try_process;\n@@ -327,26 +328,28 @@ pub trait Iterator {\n     /// ```\n     /// #![feature(iter_advance_by)]\n     ///\n+    /// use std::num::NonZeroUsize;\n     /// let a = [1, 2, 3, 4];\n     /// let mut iter = a.iter();\n     ///\n-    /// assert_eq!(iter.advance_by(2), 0);\n+    /// assert_eq!(iter.advance_by(2), Ok(()));\n     /// assert_eq!(iter.next(), Some(&3));\n-    /// assert_eq!(iter.advance_by(0), 0);\n-    /// assert_eq!(iter.advance_by(100), 99); // only `&4` was skipped\n+    /// assert_eq!(iter.advance_by(0), Ok(()));\n+    /// assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(99).unwrap())); // only `&4` was skipped\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_by(&mut self, n: usize) -> usize\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize>\n     where\n         Self::Item: ~const Destruct,\n     {\n         for i in 0..n {\n             if self.next().is_none() {\n-                return n - i;\n+                // SAFETY: `i` is always less than `n`.\n+                return Err(unsafe { NonZeroUsize::new_unchecked(n - i) });\n             }\n         }\n-        0\n+        Ok(())\n     }\n \n     /// Returns the `n`th element of the iterator.\n@@ -394,9 +397,7 @@ pub trait Iterator {\n     where\n         Self::Item: ~const Destruct,\n     {\n-        if self.advance_by(n) > 0 {\n-            return None;\n-        }\n+        self.advance_by(n).ok()?;\n         self.next()\n     }\n \n@@ -4017,7 +4018,7 @@ impl<I: Iterator + ?Sized> Iterator for &mut I {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (**self).size_hint()\n     }\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         (**self).advance_by(n)\n     }\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {"}, {"sha": "265022a394e882fced2cc9fb899d6bc12a8c44c2", "filename": "library/core/src/ops/index_range.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fops%2Findex_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fops%2Findex_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex_range.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,5 +1,6 @@\n use crate::intrinsics::{assert_unsafe_precondition, unchecked_add, unchecked_sub};\n use crate::iter::{FusedIterator, TrustedLen};\n+use crate::num::NonZeroUsize;\n \n /// Like a `Range<usize>`, but with a safety invariant that `start <= end`.\n ///\n@@ -132,9 +133,9 @@ impl Iterator for IndexRange {\n     }\n \n     #[inline]\n-    fn advance_by(&mut self, n: usize) -> usize {\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let taken = self.take_prefix(n);\n-        n - taken.len()\n+        NonZeroUsize::new(n - taken.len()).map_or(Ok(()), Err)\n     }\n }\n \n@@ -150,9 +151,9 @@ impl DoubleEndedIterator for IndexRange {\n     }\n \n     #[inline]\n-    fn advance_back_by(&mut self, n: usize) -> usize {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         let taken = self.take_suffix(n);\n-        n - taken.len()\n+        NonZeroUsize::new(n - taken.len()).map_or(Ok(()), Err)\n     }\n }\n "}, {"sha": "b73e35f1e9138b5744afef54cee24073e5048694", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -176,11 +176,11 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            fn advance_by(&mut self, n: usize) -> usize {\n+            fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n                 unsafe { self.post_inc_start(advance) };\n-                n - advance\n+                NonZeroUsize::new(n - advance).map_or(Ok(()), Err)\n             }\n \n             #[inline]\n@@ -371,11 +371,11 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            fn advance_back_by(&mut self, n: usize) -> usize {\n+            fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n                 let advance = cmp::min(len!(self), n);\n                 // SAFETY: By construction, `advance` does not exceed `self.len()`.\n                 unsafe { self.pre_dec_end(advance) };\n-                n - advance\n+                NonZeroUsize::new(n - advance).map_or(Ok(()), Err)\n             }\n         }\n "}, {"sha": "0869644c040f5572c7222d9e3f2d04a2709dad08", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,5 +1,6 @@\n use core::{array, assert_eq};\n use core::convert::TryFrom;\n+use core::num::NonZeroUsize;\n use core::sync::atomic::{AtomicUsize, Ordering};\n \n #[test]\n@@ -535,17 +536,17 @@ fn array_intoiter_advance_by() {\n     let mut it = IntoIterator::into_iter(a);\n \n     let r = it.advance_by(1);\n-    assert_eq!(r, 0);\n+    assert_eq!(r, Ok(()));\n     assert_eq!(it.len(), 99);\n     assert_eq!(counter.get(), 1);\n \n     let r = it.advance_by(0);\n-    assert_eq!(r, 0);\n+    assert_eq!(r, Ok(()));\n     assert_eq!(it.len(), 99);\n     assert_eq!(counter.get(), 1);\n \n     let r = it.advance_by(11);\n-    assert_eq!(r, 0);\n+    assert_eq!(r, Ok(()));\n     assert_eq!(it.len(), 88);\n     assert_eq!(counter.get(), 12);\n \n@@ -557,17 +558,17 @@ fn array_intoiter_advance_by() {\n     assert_eq!(counter.get(), 13);\n \n     let r = it.advance_by(123456);\n-    assert_eq!(r, 123456 - 87);\n+    assert_eq!(r, Err(NonZeroUsize::new(123456 - 87).unwrap()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_by(0);\n-    assert_eq!(r, 0);\n+    assert_eq!(r, Ok(()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_by(10);\n-    assert_eq!(r, 10);\n+    assert_eq!(r, Err(NonZeroUsize::new(10).unwrap()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n }\n@@ -588,17 +589,17 @@ fn array_intoiter_advance_back_by() {\n     let mut it = IntoIterator::into_iter(a);\n \n     let r = it.advance_back_by(1);\n-    assert_eq!(r, 0);\n+    assert_eq!(r, Ok(()));\n     assert_eq!(it.len(), 99);\n     assert_eq!(counter.get(), 1);\n \n     let r = it.advance_back_by(0);\n-    assert_eq!(r, 0);\n+    assert_eq!(r, Ok(()));\n     assert_eq!(it.len(), 99);\n     assert_eq!(counter.get(), 1);\n \n     let r = it.advance_back_by(11);\n-    assert_eq!(r, 0);\n+    assert_eq!(r, Ok(()));\n     assert_eq!(it.len(), 88);\n     assert_eq!(counter.get(), 12);\n \n@@ -610,17 +611,17 @@ fn array_intoiter_advance_back_by() {\n     assert_eq!(counter.get(), 13);\n \n     let r = it.advance_back_by(123456);\n-    assert_eq!(r, 123456 - 87);\n+    assert_eq!(r, Err(NonZeroUsize::new(123456 - 87).unwrap()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_back_by(0);\n-    assert_eq!(r, 0);\n+    assert_eq!(r, Ok(()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n \n     let r = it.advance_back_by(10);\n-    assert_eq!(r, 10);\n+    assert_eq!(r, Err(NonZeroUsize::new(10).unwrap()));\n     assert_eq!(it.len(), 0);\n     assert_eq!(counter.get(), 100);\n }\n@@ -679,8 +680,8 @@ fn array_into_iter_fold() {\n \n     let a = [1, 2, 3, 4, 5, 6];\n     let mut it = a.into_iter();\n-    assert_eq!(it.advance_by(1), 0);\n-    assert_eq!(it.advance_back_by(2), 0);\n+    assert_eq!(it.advance_by(1), Ok(()));\n+    assert_eq!(it.advance_back_by(2), Ok(()));\n     let s = it.fold(10, |a, b| 10 * a + b);\n     assert_eq!(s, 10234);\n }\n@@ -695,8 +696,8 @@ fn array_into_iter_rfold() {\n \n     let a = [1, 2, 3, 4, 5, 6];\n     let mut it = a.into_iter();\n-    assert_eq!(it.advance_by(1), 0);\n-    assert_eq!(it.advance_back_by(2), 0);\n+    assert_eq!(it.advance_by(1), Ok(()));\n+    assert_eq!(it.advance_back_by(2), Ok(()));\n     let s = it.rfold(10, |a, b| 10 * a + b);\n     assert_eq!(s, 10432);\n }"}, {"sha": "175a1b638e1a1e48995769f90b23561c52ff9fd6", "filename": "library/core/tests/iter/adapters/chain.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,5 +1,6 @@\n use super::*;\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n #[test]\n fn test_iterator_chain() {\n@@ -31,28 +32,28 @@ fn test_iterator_chain_advance_by() {\n \n         for i in 0..xs.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            assert_eq!(0, iter.advance_by(i));\n+            assert_eq!(iter.advance_by(i), Ok(()));\n             assert_eq!(iter.next(), Some(&xs[i]));\n-            assert_eq!(iter.advance_by(100), 100 - (len - i - 1));\n-            assert_eq!(0, iter.advance_by(0));\n+            assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(100 - (len - i - 1)).unwrap()));\n+            assert_eq!(iter.advance_by(0), Ok(()));\n         }\n \n         for i in 0..ys.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            assert_eq!(iter.advance_by(xs.len() + i), 0);\n+            assert_eq!(iter.advance_by(xs.len() + i), Ok(()));\n             assert_eq!(iter.next(), Some(&ys[i]));\n-            assert_eq!(iter.advance_by(100), 100 - (ys.len() - i - 1));\n-            assert_eq!(iter.advance_by(0), 0);\n+            assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(100 - (ys.len() - i - 1)).unwrap()));\n+            assert_eq!(iter.advance_by(0), Ok(()));\n         }\n \n         let mut iter = xs.iter().chain(ys);\n-        assert_eq!(iter.advance_by(len), 0);\n+        assert_eq!(iter.advance_by(len), Ok(()));\n         assert_eq!(iter.next(), None);\n-        assert_eq!(iter.advance_by(0), 0);\n+        assert_eq!(iter.advance_by(0), Ok(()));\n \n         let mut iter = xs.iter().chain(ys);\n-        assert_eq!(iter.advance_by(len + 1), 1);\n-        assert_eq!(iter.advance_by(0), 0);\n+        assert_eq!(iter.advance_by(len + 1), Err(NonZeroUsize::new(1).unwrap()));\n+        assert_eq!(iter.advance_by(0), Ok(()));\n     }\n \n     test_chain(&[], &[]);\n@@ -68,28 +69,28 @@ fn test_iterator_chain_advance_back_by() {\n \n         for i in 0..ys.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            assert_eq!(iter.advance_back_by(i), 0);\n+            assert_eq!(iter.advance_back_by(i), Ok(()));\n             assert_eq!(iter.next_back(), Some(&ys[ys.len() - i - 1]));\n-            assert_eq!(iter.advance_back_by(100), 100 - (len - i - 1));\n-            assert_eq!(iter.advance_back_by(0), 0);\n+            assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(100 - (len - i - 1)).unwrap()));\n+            assert_eq!(iter.advance_back_by(0), Ok(()));\n         }\n \n         for i in 0..xs.len() {\n             let mut iter = Unfuse::new(xs).chain(Unfuse::new(ys));\n-            assert_eq!(iter.advance_back_by(ys.len() + i), 0);\n+            assert_eq!(iter.advance_back_by(ys.len() + i), Ok(()));\n             assert_eq!(iter.next_back(), Some(&xs[xs.len() - i - 1]));\n-            assert_eq!(iter.advance_back_by(100), 100 - (xs.len() - i - 1));\n-            assert_eq!(iter.advance_back_by(0), 0);\n+            assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(100 - (xs.len() - i - 1)).unwrap()));\n+            assert_eq!(iter.advance_back_by(0), Ok(()));\n         }\n \n         let mut iter = xs.iter().chain(ys);\n-        assert_eq!(iter.advance_back_by(len), 0);\n+        assert_eq!(iter.advance_back_by(len), Ok(()));\n         assert_eq!(iter.next_back(), None);\n-        assert_eq!(iter.advance_back_by(0), 0);\n+        assert_eq!(iter.advance_back_by(0), Ok(()));\n \n         let mut iter = xs.iter().chain(ys);\n-        assert_eq!(iter.advance_back_by(len + 1), 1);\n-        assert_eq!(iter.advance_back_by(0), 0);\n+        assert_eq!(iter.advance_back_by(len + 1), Err(NonZeroUsize::new(1).unwrap()));\n+        assert_eq!(iter.advance_back_by(0), Ok(()));\n     }\n \n     test_chain(&[], &[]);"}, {"sha": "ff57973a62a4b41f008f5ed0f2ef5aec803ffe99", "filename": "library/core/tests/iter/adapters/enumerate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n #[test]\n fn test_iterator_enumerate() {\n@@ -55,6 +56,20 @@ fn test_iterator_enumerate_count() {\n     assert_eq!(xs.iter().enumerate().count(), 6);\n }\n \n+#[test]\n+fn test_iterator_enumerate_advance_by() {\n+    let xs = [0, 1, 2, 3, 4, 5];\n+    let mut it = xs.iter().enumerate();\n+    assert_eq!(it.advance_by(0), Ok(()));\n+    assert_eq!(it.next(), Some((0, &0)));\n+    assert_eq!(it.advance_by(1), Ok(()));\n+    assert_eq!(it.next(), Some((2, &2)));\n+    assert_eq!(it.advance_by(2), Ok(()));\n+    assert_eq!(it.next(), Some((5, &5)));\n+    assert_eq!(it.advance_by(1), Err(NonZeroUsize::new(1).unwrap()));\n+    assert_eq!(it.next(), None);\n+}\n+\n #[test]\n fn test_iterator_enumerate_fold() {\n     let xs = [0, 1, 2, 3, 4, 5];"}, {"sha": "91809c9e5fd5d66247541a42f12443922a1a886d", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,6 +1,7 @@\n use core::assert_eq;\n use super::*;\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n #[test]\n fn test_iterator_flatten() {\n@@ -62,19 +63,19 @@ fn test_flatten_try_folds() {\n fn test_flatten_advance_by() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n \n-    assert_eq!(it.advance_by(5), 0);\n+    assert_eq!(it.advance_by(5), Ok(()));\n     assert_eq!(it.next(), Some(5));\n-    assert_eq!(it.advance_by(9), 0);\n+    assert_eq!(it.advance_by(9), Ok(()));\n     assert_eq!(it.next(), Some(15));\n-    assert_eq!(it.advance_back_by(4), 0);\n+    assert_eq!(it.advance_back_by(4), Ok(()));\n     assert_eq!(it.next_back(), Some(35));\n-    assert_eq!(it.advance_back_by(9), 0);\n+    assert_eq!(it.advance_back_by(9), Ok(()));\n     assert_eq!(it.next_back(), Some(25));\n \n-    assert_eq!(it.advance_by(usize::MAX), usize::MAX - 9);\n-    assert_eq!(it.advance_back_by(usize::MAX), usize::MAX);\n-    assert_eq!(it.advance_by(0), 0);\n-    assert_eq!(it.advance_back_by(0), 0);\n+    assert_eq!(it.advance_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX - 9).unwrap()));\n+    assert_eq!(it.advance_back_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX).unwrap()));\n+    assert_eq!(it.advance_by(0), Ok(()));\n+    assert_eq!(it.advance_back_by(0), Ok(()));\n     assert_eq!(it.size_hint(), (0, Some(0)));\n }\n \n@@ -175,19 +176,19 @@ fn test_flatten_count() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n \n     assert_eq!(it.clone().count(), 40);\n-    assert_eq!(it.advance_by(5), 0);\n+    assert_eq!(it.advance_by(5), Ok(()));\n     assert_eq!(it.clone().count(), 35);\n-    assert_eq!(it.advance_back_by(5), 0);\n+    assert_eq!(it.advance_back_by(5), Ok(()));\n     assert_eq!(it.clone().count(), 30);\n-    assert_eq!(it.advance_by(10), 0);\n+    assert_eq!(it.advance_by(10), Ok(()));\n     assert_eq!(it.clone().count(), 20);\n-    assert_eq!(it.advance_back_by(8), 0);\n+    assert_eq!(it.advance_back_by(8), Ok(()));\n     assert_eq!(it.clone().count(), 12);\n-    assert_eq!(it.advance_by(4), 0);\n+    assert_eq!(it.advance_by(4), Ok(()));\n     assert_eq!(it.clone().count(), 8);\n-    assert_eq!(it.advance_back_by(5), 0);\n+    assert_eq!(it.advance_back_by(5), Ok(()));\n     assert_eq!(it.clone().count(), 3);\n-    assert_eq!(it.advance_by(3), 0);\n+    assert_eq!(it.advance_by(3), Ok(()));\n     assert_eq!(it.clone().count(), 0);\n }\n \n@@ -196,18 +197,18 @@ fn test_flatten_last() {\n     let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n \n     assert_eq!(it.clone().last(), Some(39));\n-    assert_eq!(it.advance_by(5), 0); // 5..40\n+    assert_eq!(it.advance_by(5), Ok(())); // 5..40\n     assert_eq!(it.clone().last(), Some(39));\n-    assert_eq!(it.advance_back_by(5), 0); // 5..35\n+    assert_eq!(it.advance_back_by(5), Ok(())); // 5..35\n     assert_eq!(it.clone().last(), Some(34));\n-    assert_eq!(it.advance_by(10), 0); // 15..35\n+    assert_eq!(it.advance_by(10), Ok(())); // 15..35\n     assert_eq!(it.clone().last(), Some(34));\n-    assert_eq!(it.advance_back_by(8), 0); // 15..27\n+    assert_eq!(it.advance_back_by(8), Ok(())); // 15..27\n     assert_eq!(it.clone().last(), Some(26));\n-    assert_eq!(it.advance_by(4), 0); // 19..27\n+    assert_eq!(it.advance_by(4), Ok(())); // 19..27\n     assert_eq!(it.clone().last(), Some(26));\n-    assert_eq!(it.advance_back_by(5), 0); // 19..22\n+    assert_eq!(it.advance_back_by(5), Ok(())); // 19..22\n     assert_eq!(it.clone().last(), Some(21));\n-    assert_eq!(it.advance_by(3), 0); // 22..22\n+    assert_eq!(it.advance_by(3), Ok(())); // 22..22\n     assert_eq!(it.clone().last(), None);\n }"}, {"sha": "e3e88a84fadf6da200aac49908492e6ebc3e68a6", "filename": "library/core/tests/iter/adapters/skip.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n use super::Unfuse;\n \n@@ -73,16 +74,16 @@ fn test_iterator_skip_nth() {\n \n #[test]\n fn test_skip_advance_by() {\n-    assert_eq!((0..0).skip(10).advance_by(0), 0);\n-    assert_eq!((0..0).skip(10).advance_by(1), 1);\n+    assert_eq!((0..0).skip(10).advance_by(0), Ok(()));\n+    assert_eq!((0..0).skip(10).advance_by(1), Err(NonZeroUsize::new(1).unwrap()));\n     assert_eq!(\n         (0u128..(usize::MAX as u128) + 1).skip(usize::MAX - 10).advance_by(usize::MAX - 5),\n-        usize::MAX - 16\n+        Err(NonZeroUsize::new(usize::MAX - 16).unwrap())\n     );\n-    assert_eq!((0u128..u128::MAX).skip(usize::MAX - 10).advance_by(20), 0);\n+    assert_eq!((0u128..u128::MAX).skip(usize::MAX - 10).advance_by(20), Ok(()));\n \n-    assert_eq!((0..2).skip(1).advance_back_by(10), 9);\n-    assert_eq!((0..0).skip(1).advance_back_by(0), 0);\n+    assert_eq!((0..2).skip(1).advance_back_by(10), Err(NonZeroUsize::new(9).unwrap()));\n+    assert_eq!((0..0).skip(1).advance_back_by(0), Ok(()));\n }\n \n #[test]"}, {"sha": "3cad47c06de031e0b47e68ff31cc9210722a6aed", "filename": "library/core/tests/iter/adapters/take.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,4 +1,5 @@\n use core::iter::*;\n+use core::num::NonZeroUsize;\n \n #[test]\n fn test_iterator_take() {\n@@ -76,23 +77,23 @@ fn test_iterator_take_nth_back() {\n #[test]\n fn test_take_advance_by() {\n     let mut take = (0..10).take(3);\n-    assert_eq!(take.advance_by(2), 0);\n+    assert_eq!(take.advance_by(2), Ok(()));\n     assert_eq!(take.next(), Some(2));\n-    assert_eq!(take.advance_by(1), 1);\n+    assert_eq!(take.advance_by(1), Err(NonZeroUsize::new(1).unwrap()));\n \n-    assert_eq!((0..0).take(10).advance_by(0), 0);\n-    assert_eq!((0..0).take(10).advance_by(1), 1);\n-    assert_eq!((0..10).take(4).advance_by(5), 1);\n+    assert_eq!((0..0).take(10).advance_by(0), Ok(()));\n+    assert_eq!((0..0).take(10).advance_by(1), Err(NonZeroUsize::new(1).unwrap()));\n+    assert_eq!((0..10).take(4).advance_by(5), Err(NonZeroUsize::new(1).unwrap()));\n \n     let mut take = (0..10).take(3);\n-    assert_eq!(take.advance_back_by(2), 0);\n+    assert_eq!(take.advance_back_by(2), Ok(()));\n     assert_eq!(take.next(), Some(0));\n-    assert_eq!(take.advance_back_by(1), 1);\n+    assert_eq!(take.advance_back_by(1), Err(NonZeroUsize::new(1).unwrap()));\n \n-    assert_eq!((0..2).take(1).advance_back_by(10), 9);\n-    assert_eq!((0..0).take(1).advance_back_by(1), 1);\n-    assert_eq!((0..0).take(1).advance_back_by(0), 0);\n-    assert_eq!((0..usize::MAX).take(100).advance_back_by(usize::MAX), usize::MAX - 100);\n+    assert_eq!((0..2).take(1).advance_back_by(10), Err(NonZeroUsize::new(9).unwrap()));\n+    assert_eq!((0..0).take(1).advance_back_by(1), Err(NonZeroUsize::new(1).unwrap()));\n+    assert_eq!((0..0).take(1).advance_back_by(0), Ok(()));\n+    assert_eq!((0..usize::MAX).take(100).advance_back_by(usize::MAX), Err(NonZeroUsize::new(usize::MAX - 100).unwrap()));\n }\n \n #[test]"}, {"sha": "0a77ecddb84d5b38776db36b1c53155346928f7d", "filename": "library/core/tests/iter/range.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Frange.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,3 +1,4 @@\n+use core::num::NonZeroUsize;\n use super::*;\n \n #[test]\n@@ -287,25 +288,25 @@ fn test_range_step() {\n #[test]\n fn test_range_advance_by() {\n     let mut r = 0..usize::MAX;\n-    assert_eq!(0, r.advance_by(0));\n-    assert_eq!(0, r.advance_back_by(0));\n+    assert_eq!(Ok(()), r.advance_by(0));\n+    assert_eq!(Ok(()), r.advance_back_by(0));\n \n     assert_eq!(r.len(), usize::MAX);\n \n-    assert_eq!(0, r.advance_by(1));\n-    assert_eq!(0, r.advance_back_by(1));\n+    assert_eq!(Ok(()), r.advance_by(1));\n+    assert_eq!(Ok(()), r.advance_back_by(1));\n \n     assert_eq!((r.start, r.end), (1, usize::MAX - 1));\n \n-    assert_eq!(2, r.advance_by(usize::MAX));\n+    assert_eq!(Err(NonZeroUsize::new(2).unwrap()), r.advance_by(usize::MAX));\n \n-    assert_eq!(0, r.advance_by(0));\n-    assert_eq!(0, r.advance_back_by(0));\n+    assert_eq!(Ok(()), r.advance_by(0));\n+    assert_eq!(Ok(()), r.advance_back_by(0));\n \n     let mut r = 0u128..u128::MAX;\n \n-    assert_eq!(0, r.advance_by(usize::MAX));\n-    assert_eq!(0, r.advance_back_by(usize::MAX));\n+    assert_eq!(Ok(()), r.advance_by(usize::MAX));\n+    assert_eq!(Ok(()), r.advance_back_by(usize::MAX));\n \n     assert_eq!((r.start, r.end), (0u128 + usize::MAX as u128, u128::MAX - usize::MAX as u128));\n }"}, {"sha": "9eebfb1f1f359120a65b1d9127b90f41eb8e86a9", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,3 +1,5 @@\n+use core::num::NonZeroUsize;\n+\n /// A wrapper struct that implements `Eq` and `Ord` based on the wrapped\n /// integer modulo 3. Used to test that `Iterator::max` and `Iterator::min`\n /// return the correct element if some of them are equal.\n@@ -148,13 +150,13 @@ fn test_iterator_advance_by() {\n \n     for i in 0..v.len() {\n         let mut iter = v.iter();\n-        assert_eq!(iter.advance_by(i), 0);\n+        assert_eq!(iter.advance_by(i), Ok(()));\n         assert_eq!(iter.next().unwrap(), &v[i]);\n-        assert_eq!(iter.advance_by(100), 100 - (v.len() - 1 - i));\n+        assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(100 - (v.len() - 1 - i)).unwrap()));\n     }\n \n-    assert_eq!(v.iter().advance_by(v.len()), 0);\n-    assert_eq!(v.iter().advance_by(100), 100 - v.len());\n+    assert_eq!(v.iter().advance_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().advance_by(100), Err(NonZeroUsize::new(100 - v.len()).unwrap()));\n }\n \n #[test]\n@@ -163,13 +165,13 @@ fn test_iterator_advance_back_by() {\n \n     for i in 0..v.len() {\n         let mut iter = v.iter();\n-        assert_eq!(iter.advance_back_by(i), 0);\n+        assert_eq!(iter.advance_back_by(i), Ok(()));\n         assert_eq!(iter.next_back().unwrap(), &v[v.len() - 1 - i]);\n-        assert_eq!(iter.advance_back_by(100), 100 - (v.len() - 1 - i));\n+        assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(100 - (v.len() - 1 - i)).unwrap()));\n     }\n \n-    assert_eq!(v.iter().advance_back_by(v.len()), 0);\n-    assert_eq!(v.iter().advance_back_by(100), 100 - v.len());\n+    assert_eq!(v.iter().advance_back_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().advance_back_by(100), Err(NonZeroUsize::new(100 - v.len()).unwrap()));\n }\n \n #[test]\n@@ -178,13 +180,13 @@ fn test_iterator_rev_advance_back_by() {\n \n     for i in 0..v.len() {\n         let mut iter = v.iter().rev();\n-        assert_eq!(iter.advance_back_by(i), 0);\n+        assert_eq!(iter.advance_back_by(i), Ok(()));\n         assert_eq!(iter.next_back().unwrap(), &v[i]);\n-        assert_eq!(iter.advance_back_by(100), 100 - (v.len() - 1 - i));\n+        assert_eq!(iter.advance_back_by(100), Err(NonZeroUsize::new(100 - (v.len() - 1 - i)).unwrap()));\n     }\n \n-    assert_eq!(v.iter().rev().advance_back_by(v.len()), 0);\n-    assert_eq!(v.iter().rev().advance_back_by(100), 100 - v.len());\n+    assert_eq!(v.iter().rev().advance_back_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().rev().advance_back_by(100), Err(NonZeroUsize::new(100 - v.len()).unwrap()));\n }\n \n #[test]\n@@ -422,13 +424,13 @@ fn test_iterator_rev_advance_by() {\n \n     for i in 0..v.len() {\n         let mut iter = v.iter().rev();\n-        assert_eq!(iter.advance_by(i), 0);\n+        assert_eq!(iter.advance_by(i), Ok(()));\n         assert_eq!(iter.next().unwrap(), &v[v.len() - 1 - i]);\n-        assert_eq!(iter.advance_by(100), 100 - (v.len() - 1 - i));\n+        assert_eq!(iter.advance_by(100), Err(NonZeroUsize::new(100 - (v.len() - 1 - i)).unwrap()));\n     }\n \n-    assert_eq!(v.iter().rev().advance_by(v.len()), 0);\n-    assert_eq!(v.iter().rev().advance_by(100), 100 - v.len());\n+    assert_eq!(v.iter().rev().advance_by(v.len()), Ok(()));\n+    assert_eq!(v.iter().rev().advance_by(100), Err(NonZeroUsize::new(100 - v.len()).unwrap()));\n }\n \n #[test]"}, {"sha": "88f54591bb4a49036cad9660d25ec739b1dbeda4", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e29b27b4a4c6b6fc80e38d2747c8076a59475c03/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=e29b27b4a4c6b6fc80e38d2747c8076a59475c03", "patch": "@@ -1,6 +1,7 @@\n use core::cell::Cell;\n use core::cmp::Ordering;\n use core::mem::MaybeUninit;\n+use core::num::NonZeroUsize;\n use core::result::Result::{Err, Ok};\n use core::slice;\n \n@@ -142,20 +143,20 @@ fn test_iterator_advance_by() {\n \n     for i in 0..=v.len() {\n         let mut iter = v.iter();\n-        assert_eq!(iter.advance_by(i), 0);\n+        assert_eq!(iter.advance_by(i), Ok(()));\n         assert_eq!(iter.as_slice(), &v[i..]);\n     }\n \n     let mut iter = v.iter();\n-    assert_eq!(iter.advance_by(v.len() + 1), 1);\n+    assert_eq!(iter.advance_by(v.len() + 1), Err(NonZeroUsize::new(1).unwrap()));\n     assert_eq!(iter.as_slice(), &[]);\n \n     let mut iter = v.iter();\n-    assert_eq!(iter.advance_by(3), 0);\n+    assert_eq!(iter.advance_by(3), Ok(()));\n     assert_eq!(iter.as_slice(), &v[3..]);\n-    assert_eq!(iter.advance_by(2), 0);\n+    assert_eq!(iter.advance_by(2), Ok(()));\n     assert_eq!(iter.as_slice(), &[]);\n-    assert_eq!(iter.advance_by(0), 0);\n+    assert_eq!(iter.advance_by(0), Ok(()));\n }\n \n #[test]\n@@ -164,20 +165,20 @@ fn test_iterator_advance_back_by() {\n \n     for i in 0..=v.len() {\n         let mut iter = v.iter();\n-        assert_eq!(iter.advance_back_by(i), 0);\n+        assert_eq!(iter.advance_back_by(i), Ok(()));\n         assert_eq!(iter.as_slice(), &v[..v.len() - i]);\n     }\n \n     let mut iter = v.iter();\n-    assert_eq!(iter.advance_back_by(v.len() + 1), 1);\n+    assert_eq!(iter.advance_back_by(v.len() + 1), Err(NonZeroUsize::new(1).unwrap()));\n     assert_eq!(iter.as_slice(), &[]);\n \n     let mut iter = v.iter();\n-    assert_eq!(iter.advance_back_by(3), 0);\n+    assert_eq!(iter.advance_back_by(3), Ok(()));\n     assert_eq!(iter.as_slice(), &v[..v.len() - 3]);\n-    assert_eq!(iter.advance_back_by(2), 0);\n+    assert_eq!(iter.advance_back_by(2), Ok(()));\n     assert_eq!(iter.as_slice(), &[]);\n-    assert_eq!(iter.advance_back_by(0), 0);\n+    assert_eq!(iter.advance_back_by(0), Ok(()));\n }\n \n #[test]"}]}