{"sha": "448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "node_id": "C_kwDOAAsO6NoAKDQ0OGM2YTRkYjdmYTk4ZGJmMTZiZTE2ZjZlYjI3ZDhkN2YyZDk2NjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-26T01:25:56Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-26T01:25:56Z"}, "message": "Suggest returning closure as impl Fn", "tree": {"sha": "913f934d263e529c0daf2fe0289a71f576ee42b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/913f934d263e529c0daf2fe0289a71f576ee42b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "html_url": "https://github.com/rust-lang/rust/commit/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7480389611f9d04bd34adf41a2b3029be4eb815e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7480389611f9d04bd34adf41a2b3029be4eb815e", "html_url": "https://github.com/rust-lang/rust/commit/7480389611f9d04bd34adf41a2b3029be4eb815e"}], "stats": {"total": 110, "additions": 86, "deletions": 24}, "files": [{"sha": "4e1bba6f1fa9f9ba588263f04103a9f4cc4f6b83", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "patch": "@@ -1536,6 +1536,34 @@ pub trait PrettyPrinter<'tcx>:\n         }\n         Ok(self)\n     }\n+\n+    fn pretty_closure_as_impl(\n+        mut self,\n+        closure: ty::ClosureSubsts<'tcx>,\n+    ) -> Result<Self::Const, Self::Error> {\n+        let sig = closure.sig();\n+        let kind = closure.kind_ty().to_opt_closure_kind().unwrap_or(ty::ClosureKind::Fn);\n+\n+        write!(self, \"impl \")?;\n+        self.wrap_binder(&sig, |sig, mut cx| {\n+            define_scoped_cx!(cx);\n+\n+            p!(print(kind), \"(\");\n+            for (i, arg) in sig.inputs()[0].tuple_fields().iter().enumerate() {\n+                if i > 0 {\n+                    p!(\", \");\n+                }\n+                p!(print(arg));\n+            }\n+            p!(\")\");\n+\n+            if !sig.output().is_unit() {\n+                p!(\" -> \", print(sig.output()));\n+            }\n+\n+            Ok(cx)\n+        })\n+    }\n }\n \n // HACK(eddyb) boxed to avoid moving around a large struct by-value.\n@@ -2450,6 +2478,11 @@ impl<'tcx> ty::PolyTraitPredicate<'tcx> {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, TypeFoldable, TypeVisitable, Lift)]\n+pub struct PrintClosureAsImpl<'tcx> {\n+    pub closure: ty::ClosureSubsts<'tcx>,\n+}\n+\n forward_display_to_print! {\n     ty::Region<'tcx>,\n     Ty<'tcx>,\n@@ -2542,6 +2575,10 @@ define_print_and_forward_display! {\n         p!(print(self.0.trait_ref.print_only_trait_path()));\n     }\n \n+    PrintClosureAsImpl<'tcx> {\n+        p!(pretty_closure_as_impl(self.closure))\n+    }\n+\n     ty::ParamTy {\n         p!(write(\"{}\", self.name))\n     }"}, {"sha": "80354a3f8a2260e8f61b39e37a89251470c10a75", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "patch": "@@ -325,6 +325,10 @@ impl<'tcx> ClosureSubsts<'tcx> {\n             _ => bug!(\"closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}\", ty.kind()),\n         }\n     }\n+\n+    pub fn print_as_impl_trait(self) -> ty::print::PrintClosureAsImpl<'tcx> {\n+        ty::print::PrintClosureAsImpl { closure: self }\n+    }\n }\n \n /// Similar to `ClosureSubsts`; see the above documentation for more."}, {"sha": "64d261285c511f146a2a193fe5e752062611e77c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "patch": "@@ -506,30 +506,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.resolve_numeric_literals_with_default(self.resolve_vars_if_possible(found));\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n-        match (\n-            &fn_decl.output,\n-            found.is_suggestable(self.tcx, false),\n-            can_suggest,\n-            expected.is_unit(),\n-        ) {\n-            (&hir::FnRetTy::DefaultReturn(span), true, true, true) => {\n-                err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found });\n-                true\n-            }\n-            (&hir::FnRetTy::DefaultReturn(span), false, true, true) => {\n-                // FIXME: if `found` could be `impl Iterator` or `impl Fn*`, we should suggest\n-                // that.\n-                err.subdiagnostic(AddReturnTypeSuggestion::MissingHere { span });\n-                true\n-            }\n-            (&hir::FnRetTy::DefaultReturn(span), _, false, true) => {\n+        match &fn_decl.output {\n+            &hir::FnRetTy::DefaultReturn(span) if expected.is_unit() && !can_suggest => {\n                 // `fn main()` must return `()`, do not suggest changing return type\n                 err.subdiagnostic(ExpectedReturnTypeLabel::Unit { span });\n-                true\n+                return true;\n             }\n-            // expectation was caused by something else, not the default return\n-            (&hir::FnRetTy::DefaultReturn(_), _, _, false) => false,\n-            (&hir::FnRetTy::Return(ref ty), _, _, _) => {\n+            &hir::FnRetTy::DefaultReturn(span) if expected.is_unit() => {\n+                if found.is_suggestable(self.tcx, false) {\n+                    err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found: found.to_string() });\n+                    return true;\n+                } else if let ty::Closure(_, substs) = found.kind()\n+                    // FIXME(compiler-errors): Get better at printing binders...\n+                    && let closure = substs.as_closure()\n+                    && closure.sig().is_suggestable(self.tcx, false)\n+                {\n+                    err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found: closure.print_as_impl_trait().to_string() });\n+                    return true;\n+                } else {\n+                    // FIXME: if `found` could be `impl Iterator` we should suggest that.\n+                    err.subdiagnostic(AddReturnTypeSuggestion::MissingHere { span });\n+                    return true\n+                }\n+            }\n+            &hir::FnRetTy::Return(ref ty) => {\n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n                 debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);\n@@ -546,9 +546,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.try_suggest_return_impl_trait(err, expected, ty, fn_id);\n                     return true;\n                 }\n-                false\n             }\n+            _ => {}\n         }\n+        false\n     }\n \n     /// check whether the return type is a generic type with a trait bound"}, {"sha": "14c0558cdde9362fb52dea2cb6ea0054ad9d977a", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "patch": "@@ -195,7 +195,7 @@ pub struct AddressOfTemporaryTaken {\n }\n \n #[derive(SessionSubdiagnostic)]\n-pub enum AddReturnTypeSuggestion<'tcx> {\n+pub enum AddReturnTypeSuggestion {\n     #[suggestion(\n         typeck::add_return_type_add,\n         code = \"-> {found} \",\n@@ -204,7 +204,7 @@ pub enum AddReturnTypeSuggestion<'tcx> {\n     Add {\n         #[primary_span]\n         span: Span,\n-        found: Ty<'tcx>,\n+        found: String,\n     },\n     #[suggestion(\n         typeck::add_return_type_missing_here,"}, {"sha": "eb593a0396522c129999075d19d262074b070207", "filename": "src/test/ui/suggestions/return-closures.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/src%2Ftest%2Fui%2Fsuggestions%2Freturn-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/src%2Ftest%2Fui%2Fsuggestions%2Freturn-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-closures.rs?ref=448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "patch": "@@ -0,0 +1,6 @@\n+fn foo() {\n+    |x: &i32| 1i32\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "6689f697088ff3f7ff97f240253b4fda0c373264", "filename": "src/test/ui/suggestions/return-closures.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/src%2Ftest%2Fui%2Fsuggestions%2Freturn-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662/src%2Ftest%2Fui%2Fsuggestions%2Freturn-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-closures.stderr?ref=448c6a4db7fa98dbf16be16f6eb27d8d7f2d9662", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-closures.rs:2:5\n+   |\n+LL | fn foo() {\n+   |          - help: try adding a return type: `-> impl for<'r> Fn(&'r i32) -> i32`\n+LL |     |x: &i32| 1i32\n+   |     ^^^^^^^^^^^^^^ expected `()`, found closure\n+   |\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/return-closures.rs:2:5: 2:14]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}