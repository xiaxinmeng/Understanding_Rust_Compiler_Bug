{"sha": "d8091f89919957339929fb2f2cb7b05bc2e1f116", "node_id": "C_kwDOAAsO6NoAKGQ4MDkxZjg5OTE5OTU3MzM5OTI5ZmIyZjJjYjdiMDViYzJlMWYxMTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-12T05:41:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-12T05:41:25Z"}, "message": "Rollup merge of #102578 - lukas-code:ilog-panic, r=m-ou-se\n\nPanic for invalid arguments of `{integer primitive}::ilog{,2,10}` in all modes\n\nDecision made in https://github.com/rust-lang/rust/issues/100422#issuecomment-1245864700\n\nresolves https://github.com/rust-lang/rust/issues/100422\n\ntracking issue: https://github.com/rust-lang/rust/issues/70887\n\nr? `@m-ou-se`", "tree": {"sha": "4704d354f3432e61b487ed052fb514b59c32f0f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4704d354f3432e61b487ed052fb514b59c32f0f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8091f89919957339929fb2f2cb7b05bc2e1f116", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRlOFCRBK7hj4Ov3rIwAAICgIAChQupa4PzjUHvyygE23itKQ\nwJR7mpY0q3+oMy/qvTwvJ/BMnGPzNci4UaoevP4bJoJ4UEeHewxTIt/V/lL/NOYd\nUMmfbom8kNGk5H+xr/iHKIGrL33taEB3y1+KW96ZaCN/3QxOx/e3hMnGBPpCKEBq\nVk6hD76yFFnN7C1ooAHCeSXjJM07EOowNi8u46u8CMzCVP+YCrDZ6PHk+h62vbp6\nbANCXqgMfu4zk/NyhNWYPUSQNVMT1Tqgra9Nh96UlbQghJMfSKpgsRhBKRrb4o6J\nBOlgQGtp0OIrwwojcMoCeBf1lhisuzpzJOf5rzh6tMZQ78Y91stEdUeYAHdPnQM=\n=PnUg\n-----END PGP SIGNATURE-----\n", "payload": "tree 4704d354f3432e61b487ed052fb514b59c32f0f8\nparent f8723f965137d768155952b0d54a4129b3706aea\nparent b7dae8a5e2ad75ca8f472c953f459c45e019896d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665553285 +0530\ncommitter GitHub <noreply@github.com> 1665553285 +0530\n\nRollup merge of #102578 - lukas-code:ilog-panic, r=m-ou-se\n\nPanic for invalid arguments of `{integer primitive}::ilog{,2,10}` in all modes\n\nDecision made in https://github.com/rust-lang/rust/issues/100422#issuecomment-1245864700\n\nresolves https://github.com/rust-lang/rust/issues/100422\n\ntracking issue: https://github.com/rust-lang/rust/issues/70887\n\nr? `@m-ou-se`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8091f89919957339929fb2f2cb7b05bc2e1f116", "html_url": "https://github.com/rust-lang/rust/commit/d8091f89919957339929fb2f2cb7b05bc2e1f116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8091f89919957339929fb2f2cb7b05bc2e1f116/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8723f965137d768155952b0d54a4129b3706aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8723f965137d768155952b0d54a4129b3706aea", "html_url": "https://github.com/rust-lang/rust/commit/f8723f965137d768155952b0d54a4129b3706aea"}, {"sha": "b7dae8a5e2ad75ca8f472c953f459c45e019896d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dae8a5e2ad75ca8f472c953f459c45e019896d", "html_url": "https://github.com/rust-lang/rust/commit/b7dae8a5e2ad75ca8f472c953f459c45e019896d"}], "stats": {"total": 130, "additions": 45, "deletions": 85}, "files": [{"sha": "ff3b7bc2c90474c072f082ab6087ede3f5d4d652", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 8, "deletions": 43, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d8091f89919957339929fb2f2cb7b05bc2e1f116/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8091f89919957339929fb2f2cb7b05bc2e1f116/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=d8091f89919957339929fb2f2cb7b05bc2e1f116", "patch": "@@ -2279,9 +2279,8 @@ macro_rules! int_impl {\n         ///\n         /// # Panics\n         ///\n-        /// When the number is negative, zero, or if the base is not at least 2; it\n-        /// panics in debug mode and the return value is 0 in release\n-        /// mode.\n+        /// This function will panic if `self` is less than or equal to zero,\n+        /// or if `base` is less then 2.\n         ///\n         /// # Examples\n         ///\n@@ -2294,27 +2293,16 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog(self, base: Self) -> u32 {\n-            match self.checked_ilog(base) {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n+            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n-        /// When the number is negative or zero it panics in debug mode and the return value\n-        /// is 0 in release mode.\n+        /// This function will panic if `self` is less than or equal to zero.\n         ///\n         /// # Examples\n         ///\n@@ -2327,27 +2315,15 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog2(self) -> u32 {\n-            match self.checked_ilog2() {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n-        /// When the number is negative or zero it panics in debug mode and the return value\n-        /// is 0 in release mode.\n+        /// This function will panic if `self` is less than or equal to zero.\n         ///\n         /// # Example\n         ///\n@@ -2360,19 +2336,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog10(self) -> u32 {\n-            match self.checked_ilog10() {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}, {"sha": "d921ff9ba102655d40970332f39347d819d7cc12", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 7, "deletions": 42, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d8091f89919957339929fb2f2cb7b05bc2e1f116/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8091f89919957339929fb2f2cb7b05bc2e1f116/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=d8091f89919957339929fb2f2cb7b05bc2e1f116", "patch": "@@ -692,8 +692,7 @@ macro_rules! uint_impl {\n         ///\n         /// # Panics\n         ///\n-        /// When the number is zero, or if the base is not at least 2;\n-        /// it panics in debug mode and the return value is 0 in release mode.\n+        /// This function will panic if `self` is zero, or if `base` is less then 2.\n         ///\n         /// # Examples\n         ///\n@@ -706,27 +705,16 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog(self, base: Self) -> u32 {\n-            match self.checked_ilog(base) {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n+            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n-        /// When the number is zero it panics in debug mode and\n-        /// the return value is 0 in release mode.\n+        /// This function will panic if `self` is zero.\n         ///\n         /// # Examples\n         ///\n@@ -739,27 +727,15 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog2(self) -> u32 {\n-            match self.checked_ilog2() {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n         ///\n         /// # Panics\n         ///\n-        /// When the number is zero it panics in debug mode and the\n-        /// return value is 0 in release mode.\n+        /// This function will panic if `self` is zero.\n         ///\n         /// # Example\n         ///\n@@ -772,19 +748,8 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n-        #[rustc_inherit_overflow_checks]\n-        #[allow(arithmetic_overflow)]\n         pub const fn ilog10(self) -> u32 {\n-            match self.checked_ilog10() {\n-                Some(n) => n,\n-                None => {\n-                    // In debug builds, trigger a panic on None.\n-                    // This should optimize completely out in release builds.\n-                    let _ = Self::MAX + 1;\n-\n-                    0\n-                },\n-            }\n+            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}, {"sha": "a1edb1a51863214bf9c12feb8e745ec12d74a5bb", "filename": "library/core/tests/num/int_log.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d8091f89919957339929fb2f2cb7b05bc2e1f116/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8091f89919957339929fb2f2cb7b05bc2e1f116/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs?ref=d8091f89919957339929fb2f2cb7b05bc2e1f116", "patch": "@@ -164,3 +164,33 @@ fn ilog10_u64() {\n fn ilog10_u128() {\n     ilog10_loop! { u128, 38 }\n }\n+\n+#[test]\n+#[should_panic(expected = \"argument of integer logarithm must be positive\")]\n+fn ilog2_of_0_panic() {\n+    let _ = 0u32.ilog2();\n+}\n+\n+#[test]\n+#[should_panic(expected = \"argument of integer logarithm must be positive\")]\n+fn ilog10_of_0_panic() {\n+    let _ = 0u32.ilog10();\n+}\n+\n+#[test]\n+#[should_panic(expected = \"argument of integer logarithm must be positive\")]\n+fn ilog3_of_0_panic() {\n+    let _ = 0u32.ilog(3);\n+}\n+\n+#[test]\n+#[should_panic(expected = \"base of integer logarithm must be at least 2\")]\n+fn ilog0_of_1_panic() {\n+    let _ = 1u32.ilog(0);\n+}\n+\n+#[test]\n+#[should_panic(expected = \"base of integer logarithm must be at least 2\")]\n+fn ilog1_of_1_panic() {\n+    let _ = 1u32.ilog(1);\n+}"}]}