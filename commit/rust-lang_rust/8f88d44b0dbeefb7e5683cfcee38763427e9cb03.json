{"sha": "8f88d44b0dbeefb7e5683cfcee38763427e9cb03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmODhkNDRiMGRiZWVmYjdlNTY4M2NmY2VlMzg3NjM0MjdlOWNiMDM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-02T17:10:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-02T17:10:23Z"}, "message": "Rollup merge of #88589 - xFrednet:00000-correct-comment-to-doc, r=petrochenkov\n\nCorrect doc comments inside `use_expr_visitor.rs`\n\nJust a simple update. I haven't changed any content inside the comments, as they still seem correct. Have a wonderful rest of the day :upside_down_face:", "tree": {"sha": "fcce6d0fa681c9f57b0c37ee56c801fd6760eb6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcce6d0fa681c9f57b0c37ee56c801fd6760eb6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f88d44b0dbeefb7e5683cfcee38763427e9cb03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMQV/CRBK7hj4Ov3rIwAAYwIIAA8VvhO8/+Uq9qSSis+Qo+aQ\nn3BPWZPplody3fgOJ+fSFcPFt+je/1RI5Hl9+9rJD88iMT9Vgm4W2hYkrBsXYksp\nkc1UqcrY785bcIDSMODMC5rC+5py8cmMYA/ReRCAcukVkpDBsJOO5CEKhSs2tvFX\nyx7uGN5LfHyJnlfIRoSXS0ir9Rhg523Pg7vHszYIV0UUEtpZoyU58JpiHMZe9S76\nmbyEJ3OWOYcELG3VLNqPt6SbQPO3L5LzGCh5Tfk3u/Sc+GxLZw34YCx/KZSLAUCC\nVpq25F0mvCVLSNsicE1IASqV2FGa2tdtpR22eUVh1+2NtfI/oRB1wsZljmKBQAk=\n=a7tr\n-----END PGP SIGNATURE-----\n", "payload": "tree fcce6d0fa681c9f57b0c37ee56c801fd6760eb6d\nparent 2159c5db6363e9b41afdd32bb84334b2bf24544a\nparent a079ae2599305d6a218e52a384f1cb1077f5ffb1\nauthor Mara Bos <m-ou.se@m-ou.se> 1630602623 +0200\ncommitter GitHub <noreply@github.com> 1630602623 +0200\n\nRollup merge of #88589 - xFrednet:00000-correct-comment-to-doc, r=petrochenkov\n\nCorrect doc comments inside `use_expr_visitor.rs`\n\nJust a simple update. I haven't changed any content inside the comments, as they still seem correct. Have a wonderful rest of the day :upside_down_face:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f88d44b0dbeefb7e5683cfcee38763427e9cb03", "html_url": "https://github.com/rust-lang/rust/commit/8f88d44b0dbeefb7e5683cfcee38763427e9cb03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f88d44b0dbeefb7e5683cfcee38763427e9cb03/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2159c5db6363e9b41afdd32bb84334b2bf24544a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2159c5db6363e9b41afdd32bb84334b2bf24544a", "html_url": "https://github.com/rust-lang/rust/commit/2159c5db6363e9b41afdd32bb84334b2bf24544a"}, {"sha": "a079ae2599305d6a218e52a384f1cb1077f5ffb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a079ae2599305d6a218e52a384f1cb1077f5ffb1", "html_url": "https://github.com/rust-lang/rust/commit/a079ae2599305d6a218e52a384f1cb1077f5ffb1"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "ba70006fe96b3bb7a918bbcde28f049addbd7ec0", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8f88d44b0dbeefb7e5683cfcee38763427e9cb03/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f88d44b0dbeefb7e5683cfcee38763427e9cb03/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=8f88d44b0dbeefb7e5683cfcee38763427e9cb03", "patch": "@@ -21,74 +21,74 @@ use std::iter;\n \n use crate::mem_categorization as mc;\n \n-///////////////////////////////////////////////////////////////////////////\n-// The Delegate trait\n-\n /// This trait defines the callbacks you can expect to receive when\n /// employing the ExprUseVisitor.\n pub trait Delegate<'tcx> {\n-    // The value found at `place` is moved, depending\n-    // on `mode`. Where `diag_expr_id` is the id used for diagnostics for `place`.\n-    //\n-    // Use of a `Copy` type in a ByValue context is considered a use\n-    // by `ImmBorrow` and `borrow` is called instead. This is because\n-    // a shared borrow is the \"minimum access\" that would be needed\n-    // to perform a copy.\n-    //\n-    //\n-    // The parameter `diag_expr_id` indicates the HIR id that ought to be used for\n-    // diagnostics. Around pattern matching such as `let pat = expr`, the diagnostic\n-    // id will be the id of the expression `expr` but the place itself will have\n-    // the id of the binding in the pattern `pat`.\n+    /// The value found at `place` is moved, depending\n+    /// on `mode`. Where `diag_expr_id` is the id used for diagnostics for `place`.\n+    ///\n+    /// Use of a `Copy` type in a ByValue context is considered a use\n+    /// by `ImmBorrow` and `borrow` is called instead. This is because\n+    /// a shared borrow is the \"minimum access\" that would be needed\n+    /// to perform a copy.\n+    ///\n+    ///\n+    /// The parameter `diag_expr_id` indicates the HIR id that ought to be used for\n+    /// diagnostics. Around pattern matching such as `let pat = expr`, the diagnostic\n+    /// id will be the id of the expression `expr` but the place itself will have\n+    /// the id of the binding in the pattern `pat`.\n     fn consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n \n-    // The value found at `place` is being borrowed with kind `bk`.\n-    // `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n+    /// The value found at `place` is being borrowed with kind `bk`.\n+    /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn borrow(\n         &mut self,\n         place_with_id: &PlaceWithHirId<'tcx>,\n         diag_expr_id: hir::HirId,\n         bk: ty::BorrowKind,\n     );\n \n-    // The path at `assignee_place` is being assigned to.\n-    // `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n+    /// The path at `assignee_place` is being assigned to.\n+    /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n \n-    // The `place` should be a fake read because of specified `cause`.\n+    /// The `place` should be a fake read because of specified `cause`.\n     fn fake_read(&mut self, place: Place<'tcx>, cause: FakeReadCause, diag_expr_id: hir::HirId);\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n enum ConsumeMode {\n-    Copy, // reference to x where x has a type that copies\n-    Move, // reference to x where x has a type that moves\n+    /// reference to x where x has a type that copies\n+    Copy,\n+    /// reference to x where x has a type that moves\n+    Move,\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MutateMode {\n     Init,\n-    JustWrite,    // x = y\n-    WriteAndRead, // x += y\n+    /// Example: `x = y`\n+    JustWrite,\n+    /// Example: `x += y`\n+    WriteAndRead,\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-// The ExprUseVisitor type\n-//\n-// This is the code that actually walks the tree.\n+/// The ExprUseVisitor type\n+///\n+/// This is the code that actually walks the tree.\n pub struct ExprUseVisitor<'a, 'tcx> {\n     mc: mc::MemCategorizationContext<'a, 'tcx>,\n     body_owner: LocalDefId,\n     delegate: &'a mut dyn Delegate<'tcx>,\n }\n \n-// If the MC results in an error, it's because the type check\n-// failed (or will fail, when the error is uncovered and reported\n-// during writeback). In this case, we just ignore this part of the\n-// code.\n-//\n-// Note that this macro appears similar to try!(), but, unlike try!(),\n-// it does not propagate the error.\n+/// If the MC results in an error, it's because the type check\n+/// failed (or will fail, when the error is uncovered and reported\n+/// during writeback). In this case, we just ignore this part of the\n+/// code.\n+///\n+/// Note that this macro appears similar to try!(), but, unlike try!(),\n+/// it does not propagate the error.\n macro_rules! return_if_err {\n     ($inp: expr) => {\n         match $inp {\n@@ -537,9 +537,9 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         self.walk_expr(with_expr);\n     }\n \n-    // Invoke the appropriate delegate calls for anything that gets\n-    // consumed or borrowed as part of the automatic adjustment\n-    // process.\n+    /// Invoke the appropriate delegate calls for anything that gets\n+    /// consumed or borrowed as part of the automatic adjustment\n+    /// process.\n     fn walk_adjustment(&mut self, expr: &hir::Expr<'_>) {\n         let adjustments = self.mc.typeck_results.expr_adjustments(expr);\n         let mut place_with_id = return_if_err!(self.mc.cat_expr_unadjusted(expr));"}]}