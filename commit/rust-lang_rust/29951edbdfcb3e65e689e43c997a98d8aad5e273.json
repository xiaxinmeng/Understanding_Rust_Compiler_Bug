{"sha": "29951edbdfcb3e65e689e43c997a98d8aad5e273", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OTUxZWRiZGZjYjNlNjVlNjg5ZTQzYzk5N2E5OGQ4YWFkNWUyNzM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-20T14:54:40Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2020-01-23T12:15:14Z"}, "message": "Clarify some methods around instance instantiation via comments and clearer names.", "tree": {"sha": "4916fea8bd867e45c1881a38beae58295329acf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4916fea8bd867e45c1881a38beae58295329acf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29951edbdfcb3e65e689e43c997a98d8aad5e273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29951edbdfcb3e65e689e43c997a98d8aad5e273", "html_url": "https://github.com/rust-lang/rust/commit/29951edbdfcb3e65e689e43c997a98d8aad5e273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29951edbdfcb3e65e689e43c997a98d8aad5e273/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0bbe7915e2b663ac84244918d6d06e0747ed33e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bbe7915e2b663ac84244918d6d06e0747ed33e", "html_url": "https://github.com/rust-lang/rust/commit/e0bbe7915e2b663ac84244918d6d06e0747ed33e"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "475c77adebd106a98b1e90840fa7edee5bb0527b", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29951edbdfcb3e65e689e43c997a98d8aad5e273/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29951edbdfcb3e65e689e43c997a98d8aad5e273/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=29951edbdfcb3e65e689e43c997a98d8aad5e273", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> MonoItem<'tcx> {\n     }\n \n     pub fn instantiation_mode(&self, tcx: TyCtxt<'tcx>) -> InstantiationMode {\n-        let inline_in_all_cgus = tcx\n+        let generate_cgu_internal_copies = tcx\n             .sess\n             .opts\n             .debugging_opts\n@@ -93,7 +93,7 @@ impl<'tcx> MonoItem<'tcx> {\n                 // If this function isn't inlined or otherwise has explicit\n                 // linkage, then we'll be creating a globally shared version.\n                 if self.explicit_linkage(tcx).is_some()\n-                    || !instance.def.requires_local(tcx)\n+                    || !instance.def.generates_cgu_internal_copy(tcx)\n                     || Some(instance.def_id()) == entry_def_id\n                 {\n                     return InstantiationMode::GloballyShared { may_conflict: false };\n@@ -102,7 +102,7 @@ impl<'tcx> MonoItem<'tcx> {\n                 // At this point we don't have explicit linkage and we're an\n                 // inlined function. If we're inlining into all CGUs then we'll\n                 // be creating a local copy per CGU\n-                if inline_in_all_cgus {\n+                if generate_cgu_internal_copies {\n                     return InstantiationMode::LocalCopy;\n                 }\n "}, {"sha": "c4770184612cbfdd6168e8a3f9d9b3196cd409bb", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29951edbdfcb3e65e689e43c997a98d8aad5e273/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29951edbdfcb3e65e689e43c997a98d8aad5e273/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=29951edbdfcb3e65e689e43c997a98d8aad5e273", "patch": "@@ -114,7 +114,12 @@ impl<'tcx> InstanceDef<'tcx> {\n         tcx.get_attrs(self.def_id())\n     }\n \n-    pub fn is_inline(&self, tcx: TyCtxt<'tcx>) -> bool {\n+    /// Returns `true` if the LLVM version of this instance is unconditionally\n+    /// marked with `inline`. This implies that a copy of this instance is\n+    /// generated in every codegen unit.\n+    /// Note that this is only a hint. See the documentation for\n+    /// `generates_cgu_internal_copy` for more information.\n+    pub fn requires_inline(&self, tcx: TyCtxt<'tcx>) -> bool {\n         use crate::hir::map::DefPathData;\n         let def_id = match *self {\n             ty::InstanceDef::Item(def_id) => def_id,\n@@ -127,8 +132,15 @@ impl<'tcx> InstanceDef<'tcx> {\n         }\n     }\n \n-    pub fn requires_local(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        if self.is_inline(tcx) {\n+    /// Returns `true` if the machine code for this instance is instantiated in\n+    /// each codegen unit that references it.\n+    /// Note that this is only a hint! The compiler can globally decide to *not*\n+    /// do this in order to speed up compilation. CGU-internal copies are\n+    /// only exist to enable inlining. If inlining is not performed (e.g. at\n+    /// `-Copt-level=0`) then the time for generating them is wasted and it's\n+    /// better to create a single copy with external linkage.\n+    pub fn generates_cgu_internal_copy(&self, tcx: TyCtxt<'tcx>) -> bool {\n+        if self.requires_inline(tcx) {\n             return true;\n         }\n         if let ty::InstanceDef::DropGlue(..) = *self {"}, {"sha": "fc1b365cf90ce57cfbeaf1a54a3d8ea83e0df4c8", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29951edbdfcb3e65e689e43c997a98d8aad5e273/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29951edbdfcb3e65e689e43c997a98d8aad5e273/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=29951edbdfcb3e65e689e43c997a98d8aad5e273", "patch": "@@ -246,7 +246,7 @@ pub fn from_fn_attrs(\n     }\n \n     // FIXME(eddyb) consolidate these two `inline` calls (and avoid overwrites).\n-    if instance.def.is_inline(cx.tcx) {\n+    if instance.def.requires_inline(cx.tcx) {\n         inline(cx, llfn, attributes::InlineAttr::Hint);\n     }\n "}]}