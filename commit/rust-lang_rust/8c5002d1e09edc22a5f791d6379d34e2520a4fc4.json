{"sha": "8c5002d1e09edc22a5f791d6379d34e2520a4fc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNTAwMmQxZTA5ZWRjMjJhNWY3OTFkNjM3OWQzNGUyNTIwYTRmYzQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-06-08T23:21:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-08T23:21:10Z"}, "message": "Rollup merge of #51437 - est31:rustbuild_metadata, r=Mark-Simulacrum\n\nrustbuild: generate full list of dependencies for metadata\n\nPreviously, we didn't send --features to our cargo metadata invocations,\nand thus missed some dependencies that we enable through the --features\nmechanism.", "tree": {"sha": "6c51dc0881ed405bef59b8be96b90617de6d975c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c51dc0881ed405bef59b8be96b90617de6d975c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c5002d1e09edc22a5f791d6379d34e2520a4fc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbGw9mCRBK7hj4Ov3rIwAAdHIIAGHQKIJfAoz7dJy7QdEaL4jh\nwnFYxz9s4pavWwdy899lIiSH9se+0/xLJhpPjaAlmnznWx2bK+AUPmXxv86SPBCO\n8iYAtU0hgKvr/ujhEtsLEIOvZ1IJU7VWTFSsRTPOs4otlwmOLRAh6twrjpmJOamz\nkmqBYvzu2oHI7szDt3IG5NYpTX9q2cSquU1mIe4mNSGpB7AHE+eMySFn6T+M3kQ9\nTBpJoie2Pp7c7126vpbS8+yzT34tekpybGv2wavU2jF3dEMauaF2BBW/t0BfRa7H\nv6dubPLSsBoo+gjwXVfDdIcj9EKC2FZ8U/BUb6JWIBBAB7MpbO/e0wG1yMWijlY=\n=lCnm\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c51dc0881ed405bef59b8be96b90617de6d975c\nparent efb30d7695067603d182f97176f3bf537e263db2\nparent c28145d1adbb32340897a102c43f0a8d2cb58ee2\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1528500070 -0600\ncommitter GitHub <noreply@github.com> 1528500070 -0600\n\nRollup merge of #51437 - est31:rustbuild_metadata, r=Mark-Simulacrum\n\nrustbuild: generate full list of dependencies for metadata\n\nPreviously, we didn't send --features to our cargo metadata invocations,\nand thus missed some dependencies that we enable through the --features\nmechanism.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5002d1e09edc22a5f791d6379d34e2520a4fc4", "html_url": "https://github.com/rust-lang/rust/commit/8c5002d1e09edc22a5f791d6379d34e2520a4fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c5002d1e09edc22a5f791d6379d34e2520a4fc4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb30d7695067603d182f97176f3bf537e263db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb30d7695067603d182f97176f3bf537e263db2", "html_url": "https://github.com/rust-lang/rust/commit/efb30d7695067603d182f97176f3bf537e263db2"}, {"sha": "c28145d1adbb32340897a102c43f0a8d2cb58ee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28145d1adbb32340897a102c43f0a8d2cb58ee2", "html_url": "https://github.com/rust-lang/rust/commit/c28145d1adbb32340897a102c43f0a8d2cb58ee2"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "6e77413f06188804b5fbb4503d1e0a157052df41", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c5002d1e09edc22a5f791d6379d34e2520a4fc4/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5002d1e09edc22a5f791d6379d34e2520a4fc4/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=8c5002d1e09edc22a5f791d6379d34e2520a4fc4", "patch": "@@ -280,7 +280,8 @@ pub struct Build {\n struct Crate {\n     name: Interned<String>,\n     version: String,\n-    deps: Vec<Interned<String>>,\n+    deps: HashSet<Interned<String>>,\n+    id: String,\n     path: PathBuf,\n     doc_step: String,\n     build_step: String,"}, {"sha": "718a6da363724b0bef268d91fa6df1b7d13130c6", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8c5002d1e09edc22a5f791d6379d34e2520a4fc4/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5002d1e09edc22a5f791d6379d34e2520a4fc4/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=8c5002d1e09edc22a5f791d6379d34e2520a4fc4", "patch": "@@ -11,6 +11,7 @@\n use std::collections::HashMap;\n use std::process::Command;\n use std::path::PathBuf;\n+use std::collections::HashSet;\n \n use build_helper::output;\n use serde_json;\n@@ -45,12 +46,34 @@ struct ResolveNode {\n }\n \n pub fn build(build: &mut Build) {\n-    build_krate(build, \"src/libstd\");\n-    build_krate(build, \"src/libtest\");\n-    build_krate(build, \"src/rustc\");\n+    let mut resolves = Vec::new();\n+    build_krate(&build.std_features(), build, &mut resolves, \"src/libstd\");\n+    build_krate(\"\", build, &mut resolves, \"src/libtest\");\n+    build_krate(&build.rustc_features(), build, &mut resolves, \"src/rustc\");\n+\n+    let mut id2name = HashMap::new();\n+    for (name, krate) in build.crates.iter() {\n+        id2name.insert(krate.id.clone(), name.clone());\n+    }\n+\n+    for node in resolves {\n+        let name = match id2name.get(&node.id) {\n+            Some(name) => name,\n+            None => continue,\n+        };\n+\n+        let krate = build.crates.get_mut(name).unwrap();\n+        for dep in node.dependencies.iter() {\n+            let dep = match id2name.get(dep) {\n+                Some(dep) => dep,\n+                None => continue,\n+            };\n+            krate.deps.insert(*dep);\n+        }\n+    }\n }\n \n-fn build_krate(build: &mut Build, krate: &str) {\n+fn build_krate(features: &str, build: &mut Build, resolves: &mut Vec<ResolveNode>, krate: &str) {\n     // Run `cargo metadata` to figure out what crates we're testing.\n     //\n     // Down below we're going to call `cargo test`, but to test the right set\n@@ -60,14 +83,13 @@ fn build_krate(build: &mut Build, krate: &str) {\n     let mut cargo = Command::new(&build.initial_cargo);\n     cargo.arg(\"metadata\")\n          .arg(\"--format-version\").arg(\"1\")\n+         .arg(\"--features\").arg(features)\n          .arg(\"--manifest-path\").arg(build.src.join(krate).join(\"Cargo.toml\"));\n     let output = output(&mut cargo);\n     let output: Output = serde_json::from_str(&output).unwrap();\n-    let mut id2name = HashMap::new();\n     for package in output.packages {\n         if package.source.is_none() {\n             let name = INTERNER.intern_string(package.name);\n-            id2name.insert(package.id, name);\n             let mut path = PathBuf::from(package.manifest_path);\n             path.pop();\n             build.crates.insert(name, Crate {\n@@ -77,25 +99,11 @@ fn build_krate(build: &mut Build, krate: &str) {\n                 bench_step: format!(\"bench-crate-{}\", name),\n                 name,\n                 version: package.version,\n-                deps: Vec::new(),\n+                id: package.id,\n+                deps: HashSet::new(),\n                 path,\n             });\n         }\n     }\n-\n-    for node in output.resolve.nodes {\n-        let name = match id2name.get(&node.id) {\n-            Some(name) => name,\n-            None => continue,\n-        };\n-\n-        let krate = build.crates.get_mut(name).unwrap();\n-        for dep in node.dependencies.iter() {\n-            let dep = match id2name.get(dep) {\n-                Some(dep) => dep,\n-                None => continue,\n-            };\n-            krate.deps.push(*dep);\n-        }\n-    }\n+    resolves.extend(output.resolve.nodes);\n }"}]}