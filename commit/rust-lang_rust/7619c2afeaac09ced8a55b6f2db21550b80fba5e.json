{"sha": "7619c2afeaac09ced8a55b6f2db21550b80fba5e", "node_id": "C_kwDOAAsO6NoAKDc2MTljMmFmZWFhYzA5Y2VkOGE1NWI2ZjJkYjIxNTUwYjgwZmJhNWU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-02T17:18:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-03T15:00:49Z"}, "message": "Simplify", "tree": {"sha": "a3b1c4408dab97c5fc188b14b046560cc4503818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3b1c4408dab97c5fc188b14b046560cc4503818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7619c2afeaac09ced8a55b6f2db21550b80fba5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7619c2afeaac09ced8a55b6f2db21550b80fba5e", "html_url": "https://github.com/rust-lang/rust/commit/7619c2afeaac09ced8a55b6f2db21550b80fba5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7619c2afeaac09ced8a55b6f2db21550b80fba5e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f5ee155c1a39c028f79e281d1edcaacc54bedb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f5ee155c1a39c028f79e281d1edcaacc54bedb1", "html_url": "https://github.com/rust-lang/rust/commit/9f5ee155c1a39c028f79e281d1edcaacc54bedb1"}], "stats": {"total": 62, "additions": 25, "deletions": 37}, "files": [{"sha": "9c65efdb102291f1d4ba8d56320d664fae88e857", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=7619c2afeaac09ced8a55b6f2db21550b80fba5e", "patch": "@@ -99,6 +99,19 @@ impl Completions {\n         item.add_to(self);\n     }\n \n+    pub(crate) fn add_nameref_keywords(&mut self, ctx: &CompletionContext) {\n+        [\"self::\", \"super::\", \"crate::\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n+    }\n+\n+    pub(crate) fn add_crate_roots(&mut self, ctx: &CompletionContext) {\n+        ctx.process_all_names(&mut |name, res| match res {\n+            ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_crate_root(ctx.db) => {\n+                self.add_resolution(ctx, name, res);\n+            }\n+            _ => (),\n+        });\n+    }\n+\n     pub(crate) fn add_resolution(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "cb45d9de03fc78e96cb828a89fd81bc0743d583d", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=7619c2afeaac09ced8a55b6f2db21550b80fba5e", "patch": "@@ -2,7 +2,6 @@\n //!\n //! This module uses a bit of static metadata to provide completions for builtin-in attributes and lints.\n \n-use hir::ScopeDef;\n use ide_db::{\n     helpers::{\n         generated_lints::{\n@@ -103,22 +102,15 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n             return;\n         }\n         // fresh use tree with leading colon2, only show crate roots\n-        None if is_absolute_path => {\n-            ctx.process_all_names(&mut |name, res| match res {\n-                ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_crate_root(ctx.db) => {\n-                    acc.add_resolution(ctx, name, res);\n-                }\n-                _ => (),\n-            });\n-        }\n+        None if is_absolute_path => acc.add_crate_roots(ctx),\n         // only show modules in a fresh UseTree\n         None => {\n             ctx.process_all_names(&mut |name, def| {\n                 if let Some(def) = module_or_attr(def) {\n                     acc.add_resolution(ctx, name, def);\n                 }\n             });\n-            [\"self::\", \"super::\", \"crate::\"].into_iter().for_each(|kw| acc.add_keyword(ctx, kw));\n+            acc.add_nameref_keywords(ctx);\n         }\n     }\n "}, {"sha": "f1b4fa720591d98cc39240bf5734a462f61c4c3e", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=7619c2afeaac09ced8a55b6f2db21550b80fba5e", "patch": "@@ -141,7 +141,6 @@ fn pattern_path_completion(\n                             _ => return,\n                         };\n \n-                        // Note associated consts cannot be referenced in patterns\n                         if let Some(hir::Adt::Enum(e)) = ty.as_adt() {\n                             e.variants(ctx.db)\n                                 .into_iter()\n@@ -157,9 +156,9 @@ fn pattern_path_completion(\n                             ctx.module,\n                             None,\n                             |_ty, item| {\n-                                // We might iterate candidates of a trait multiple times here, so deduplicate\n-                                // them.\n+                                // Note associated consts cannot be referenced in patterns\n                                 if let AssocItem::TypeAlias(ta) = item {\n+                                    // We might iterate candidates of a trait multiple times here, so deduplicate them.\n                                     if seen.insert(item) {\n                                         acc.add_type_alias(ctx, ta);\n                                     }\n@@ -173,26 +172,15 @@ fn pattern_path_completion(\n             }\n         }\n         // qualifier can only be none here if we are in a TuplePat or RecordPat in which case special characters have to follow the path\n-        // so executing the rest of this completion doesn't make sense\n-        // fresh use tree with leading colon2, only show crate roots\n-        None if *is_absolute_path => {\n-            cov_mark::hit!(use_tree_crate_roots_only);\n-            ctx.process_all_names(&mut |name, res| match res {\n-                ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_crate_root(ctx.db) => {\n-                    acc.add_resolution(ctx, name, res);\n-                }\n-                _ => (),\n-            });\n-        }\n-        // only show modules in a fresh UseTree\n+        None if *is_absolute_path => acc.add_crate_roots(ctx),\n         None => {\n             cov_mark::hit!(unqualified_path_only_modules_in_import);\n             ctx.process_all_names(&mut |name, res| {\n                 if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n                     acc.add_resolution(ctx, name, res);\n                 }\n             });\n-            [\"self::\", \"super::\", \"crate::\"].into_iter().for_each(|kw| acc.add_keyword(ctx, kw));\n+            acc.add_nameref_keywords(ctx);\n         }\n     }\n }"}, {"sha": "6f980845c7db52c8d78983a0c9eb8815a5296d8b", "filename": "crates/ide_completion/src/completions/use_.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=7619c2afeaac09ced8a55b6f2db21550b80fba5e", "patch": "@@ -79,12 +79,7 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n         // fresh use tree with leading colon2, only show crate roots\n         None if is_absolute_path => {\n             cov_mark::hit!(use_tree_crate_roots_only);\n-            ctx.process_all_names(&mut |name, res| match res {\n-                ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_crate_root(ctx.db) => {\n-                    acc.add_resolution(ctx, name, res);\n-                }\n-                _ => (),\n-            });\n+            acc.add_crate_roots(ctx);\n         }\n         // only show modules in a fresh UseTree\n         None => {\n@@ -94,7 +89,7 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                     acc.add_resolution(ctx, name, res);\n                 }\n             });\n-            [\"self::\", \"super::\", \"crate::\"].into_iter().for_each(|kw| acc.add_keyword(ctx, kw));\n+            acc.add_nameref_keywords(ctx);\n         }\n     }\n }"}, {"sha": "d711215491c1dcc3ae4ec2ef7f3c3466325c196e", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7619c2afeaac09ced8a55b6f2db21550b80fba5e/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=7619c2afeaac09ced8a55b6f2db21550b80fba5e", "patch": "@@ -72,12 +72,12 @@ pub(crate) struct PathCompletionCtx {\n \n #[derive(Debug)]\n pub(crate) struct PathQualifierCtx {\n-    pub path: ast::Path,\n-    pub resolution: Option<PathResolution>,\n+    pub(crate) path: ast::Path,\n+    pub(crate) resolution: Option<PathResolution>,\n     /// Whether this path consists solely of `super` segments\n-    pub is_super_chain: bool,\n+    pub(crate) is_super_chain: bool,\n     /// Whether the qualifier comes from a use tree parent or not\n-    pub use_tree_parent: bool,\n+    pub(crate) use_tree_parent: bool,\n }\n \n #[derive(Debug)]"}]}