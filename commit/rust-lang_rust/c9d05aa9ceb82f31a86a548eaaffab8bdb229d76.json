{"sha": "c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDA1YWE5Y2ViODJmMzFhODZhNTQ4ZWFhZmZhYjhiZGIyMjlkNzY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-05T00:36:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-22T18:33:12Z"}, "message": "Point at correct span for parenthesized types", "tree": {"sha": "6e2272f04a7e71606b45b5f713b47e6808ccc7fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e2272f04a7e71606b45b5f713b47e6808ccc7fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "html_url": "https://github.com/rust-lang/rust/commit/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b370c111fdb2bc6c6a67bc0ebb7bc4946344a15a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b370c111fdb2bc6c6a67bc0ebb7bc4946344a15a", "html_url": "https://github.com/rust-lang/rust/commit/b370c111fdb2bc6c6a67bc0ebb7bc4946344a15a"}], "stats": {"total": 186, "additions": 95, "deletions": 91}, "files": [{"sha": "f6b872623d78976722bc659dbd399de8bf63bcde", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1893,10 +1893,13 @@ impl<'a> LoweringContext<'a> {\n                         if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n                             // Do not suggest going from `Trait()` to `Trait<>`\n                             if data.inputs.len() > 0 {\n+                                let split = snippet.find('(').unwrap();\n+                                let trait_name = &snippet[0..split];\n+                                let args = &snippet[split + 1 .. snippet.len() - 1];\n                                 err.span_suggestion(\n                                     data.span,\n                                     \"use angle brackets instead\",\n-                                    format!(\"<{}>\", &snippet[1..snippet.len() - 1]),\n+                                    format!(\"{}<{}>\", trait_name, args),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }"}, {"sha": "f6df24c05684afc852a04a57ed40bb0329e41d49", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -129,10 +129,11 @@ impl<'a> Parser<'a> {\n         self.parse_path(style)\n     }\n \n-    crate fn parse_path_segments(&mut self,\n-                           segments: &mut Vec<PathSegment>,\n-                           style: PathStyle)\n-                           -> PResult<'a, ()> {\n+    crate fn parse_path_segments(\n+        &mut self,\n+        segments: &mut Vec<PathSegment>,\n+        style: PathStyle,\n+    ) -> PResult<'a, ()> {\n         loop {\n             let segment = self.parse_path_segment(style)?;\n             if style == PathStyle::Expr {\n@@ -196,12 +197,12 @@ impl<'a> Parser<'a> {\n                 let (args, constraints) =\n                     self.parse_generic_args_with_leaning_angle_bracket_recovery(style, lo)?;\n                 self.expect_gt()?;\n-                let span = lo.to(self.prev_span);\n+                let span = ident.span.to(self.prev_span);\n                 AngleBracketedArgs { args, constraints, span }.into()\n             } else {\n                 // `(T, U) -> R`\n                 let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n-                let span = lo.to(self.prev_span);\n+                let span = ident.span.to(self.prev_span);\n                 let output = if self.eat(&token::RArrow) {\n                     Some(self.parse_ty_common(false, false, false)?)\n                 } else {"}, {"sha": "fbe2d192d0cce3584b84e39c13605f5ec253b0c6", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -18,7 +18,7 @@ LL |     f1(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), &()) -> _`\n ...\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   |    --                     ---------- required by this bound in `f1`\n+   |    --                   ------------ required by this bound in `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -40,7 +40,7 @@ LL |     f2(|_: (), _: ()| {});\n    |     expected signature of `fn(&'a (), &()) -> _`\n ...\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   |    --                             ------------- required by this bound in `f2`\n+   |    --                           --------------- required by this bound in `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -62,7 +62,7 @@ LL |     f3(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), &()) -> _`\n ...\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   |    --                         ------------- required by this bound in `f3`\n+   |    --                       --------------- required by this bound in `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n@@ -84,7 +84,7 @@ LL |     f4(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), &'r ()) -> _`\n ...\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   |    --                             ------------- required by this bound in `f4`\n+   |    --                           --------------- required by this bound in `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n@@ -106,7 +106,7 @@ LL |     f5(|_: (), _: ()| {});\n    |     expected signature of `fn(&'r (), &'r ()) -> _`\n ...\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   |    --                             ---------------- required by this bound in `f5`\n+   |    --                           ------------------ required by this bound in `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -128,7 +128,7 @@ LL |     g1(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   |    --                     ----------------------- required by this bound in `g1`\n+   |    --                   ------------------------- required by this bound in `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -150,7 +150,7 @@ LL |     g2(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n ...\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   |    --                     -------------- required by this bound in `g2`\n+   |    --                   ---------------- required by this bound in `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -172,7 +172,7 @@ LL |     g3(|_: (), _: ()| {});\n    |     expected signature of `fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   |    --                             -------------------------- required by this bound in `g3`\n+   |    --                           ---------------------------- required by this bound in `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -194,7 +194,7 @@ LL |     g4(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n ...\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   |    --                     ------------------------- required by this bound in `g4`\n+   |    --                   --------------------------- required by this bound in `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -216,7 +216,7 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &(), for<'r, 's> fn(&'r (), &'s ())) -> _`\n ...\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   |    --                     ------------------------------------------ required by this bound in `h1`\n+   |    --                   -------------------------------------------- required by this bound in `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -238,7 +238,7 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n ...\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   |    --                              ---------------------------------------------- required by this bound in `h2`\n+   |    --                            ------------------------------------------------ required by this bound in `h2`\n \n error: aborting due to 22 previous errors\n "}, {"sha": "ac4666fe36de6c92e2266e08fc327de84a39d06a", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -42,7 +42,7 @@ error[E0631]: type mismatch in closure arguments\n LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n    |    ------------------------------------------\n LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-   |                            ------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n+   |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n ...\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n@@ -55,7 +55,7 @@ error[E0631]: type mismatch in closure arguments\n LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n    |    -------------------------------------------\n LL |     where F: FnOnce(fn(&u32), &i32)\n-   |                    ---------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n@@ -68,7 +68,7 @@ error[E0631]: type mismatch in closure arguments\n LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n    |    -------------------------------------------\n LL |     where F: FnOnce(fn(&u32), &i32)\n-   |                    ---------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`"}, {"sha": "bcbd3a91cb951e1326fff0573e5aec028f2faec2", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,11 +1,11 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/E0214.rs:2:15\n+  --> $DIR/E0214.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec![\"foo\"];\n-   |               ^^^^^^\n-   |               |\n-   |               only `Fn` traits may use parentheses\n-   |               help: use angle brackets instead: `<&str>`\n+   |            ^^^^^^^^^\n+   |            |\n+   |            only `Fn` traits may use parentheses\n+   |            help: use angle brackets instead: `Vec<&str>`\n \n error: aborting due to previous error\n "}, {"sha": "c05379c71eeaf3d81e0b15c5bb1c4edd902ca9d3", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -44,10 +44,10 @@ LL | impl Fn<()> for Foo {\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0229]: associated type bindings are not allowed here\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:6\n    |\n LL | impl FnOnce() for Foo1 {\n-   |            ^^ associated type not allowed here\n+   |      ^^^^^^^^ associated type not allowed here\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:21:6"}, {"sha": "c3b419fe939cb0b10092678db0987531d736d457", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,11 +1,11 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-23589.rs:2:15\n+  --> $DIR/issue-23589.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |               ^^^^^^\n-   |               |\n-   |               only `Fn` traits may use parentheses\n-   |               help: use angle brackets instead: `<&str>`\n+   |            ^^^^^^^^^\n+   |            |\n+   |            only `Fn` traits may use parentheses\n+   |            help: use angle brackets instead: `Vec<&str>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-23589.rs:2:29"}, {"sha": "976e3064db64b7f9532e5bb2a40ed2339a27cfda", "filename": "src/test/ui/issues/issue-32995-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,27 +1,27 @@\n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:4:28\n+  --> $DIR/issue-32995-2.rs:4:22\n    |\n LL |     { fn f<X: ::std::marker()::Send>() {} }\n-   |                            ^^\n+   |                      ^^^^^^^^\n    |\n    = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:8:35\n+  --> $DIR/issue-32995-2.rs:8:29\n    |\n LL |     { fn f() -> impl ::std::marker()::Send { } }\n-   |                                   ^^\n+   |                             ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:16:19\n+  --> $DIR/issue-32995-2.rs:16:13\n    |\n LL | impl ::std::marker()::Copy for X {}\n-   |                   ^^\n+   |             ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>"}, {"sha": "724e82a59dc3519ae984ab7b7812490c0fa81947", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,63 +1,63 @@\n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:4:17\n+  --> $DIR/issue-32995.rs:4:12\n    |\n LL |     let x: usize() = 1;\n-   |                 ^^\n+   |            ^^^^^^^\n    |\n    = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:8:24\n+  --> $DIR/issue-32995.rs:8:19\n    |\n LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n-   |                        ^^\n+   |                   ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:12:25\n+  --> $DIR/issue-32995.rs:12:20\n    |\n LL |     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-   |                         ^^\n+   |                    ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:16:36\n+  --> $DIR/issue-32995.rs:16:25\n    |\n LL |     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-   |                                    ^^\n+   |                         ^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:20:35\n+  --> $DIR/issue-32995.rs:20:29\n    |\n LL |     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n-   |                                   ^^\n+   |                             ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:24:41\n+  --> $DIR/issue-32995.rs:24:35\n    |\n LL |     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n-   |                                         ^^\n+   |                                   ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:30:14\n+  --> $DIR/issue-32995.rs:30:13\n    |\n LL |     let d : X() = Default::default();\n-   |              ^^\n+   |             ^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>"}, {"sha": "b1b3041ea027508317937e36332d9f0636986af6", "filename": "src/test/ui/issues/issue-39687.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-39687.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-39687.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39687.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,8 +1,8 @@\n error[E0229]: associated type bindings are not allowed here\n-  --> $DIR/issue-39687.rs:4:16\n+  --> $DIR/issue-39687.rs:4:14\n    |\n LL |     <fn() as Fn()>::call;\n-   |                ^^ associated type not allowed here\n+   |              ^^^^ associated type not allowed here\n \n error: aborting due to previous error\n "}, {"sha": "2c57b8585d92400a0eae4b899a836bfc0a659521", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -19,7 +19,7 @@ LL | pub fn break_me<T, F>(f: F)\n    |        --------\n LL | where T: for<'b> Trait<'b>,\n LL |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n-   |                       ------------------------- required by this bound in `break_me`\n+   |                  ------------------------------ required by this bound in `break_me`\n LL |     break_me::<Type, fn(_)>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'b, found concrete lifetime\n "}, {"sha": "69c1d85e4e12d031e249e235834a7a950ba94091", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -20,7 +20,7 @@ LL | pub fn foo<T, F>(_: T, _: F)\n    |        ---\n LL | where T: for<'a> Trait<'a>,\n LL |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n-   |                       ------------------------ required by this bound in `foo`\n+   |                  ----------------------------- required by this bound in `foo`\n ...\n LL |     foo((), drop)\n    |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime"}, {"sha": "85cad61210ebf7734fe37073611d859ac27808a0", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -38,7 +38,7 @@ error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::Fn\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   |    ---      ----------- required by this bound in `baz`\n+   |    ---    ------------- required by this bound in `baz`\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime"}, {"sha": "dd8a3feb04954103d86694febcc63880911b1065", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,20 +1,20 @@\n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:13:10\n+  --> $DIR/type-parameters-in-field-exprs.rs:13:7\n    |\n LL |     f.x::<isize>;\n-   |          ^^^^^^^\n+   |       ^^^^^^^^^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:15:10\n+  --> $DIR/type-parameters-in-field-exprs.rs:15:7\n    |\n LL |     f.x::<>;\n-   |          ^^\n+   |       ^^^^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:17:10\n+  --> $DIR/type-parameters-in-field-exprs.rs:17:7\n    |\n LL |     f.x::();\n-   |          ^^\n+   |       ^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "139247c0388a9314076abda97bd53e06c46c0bd0", "filename": "src/test/ui/span/macro-ty-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,14 +1,14 @@\n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:10:10\n+  --> $DIR/macro-ty-params.rs:10:5\n    |\n LL |     foo::<T>!();\n-   |          ^^^\n+   |     ^^^^^^^^\n \n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:11:10\n+  --> $DIR/macro-ty-params.rs:11:5\n    |\n LL |     foo::<>!();\n-   |          ^^\n+   |     ^^^^^^^\n \n error: unexpected generic arguments in path\n   --> $DIR/macro-ty-params.rs:12:8\n@@ -17,10 +17,10 @@ LL |     m!(Default<>);\n    |        ^^^^^^^^^\n \n error: generic arguments in macro path\n-  --> $DIR/macro-ty-params.rs:12:15\n+  --> $DIR/macro-ty-params.rs:12:8\n    |\n LL |     m!(Default<>);\n-   |               ^^\n+   |        ^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0d0acfde88605f467410b4286468490da55f70bd", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -5,10 +5,10 @@ LL |         input_cells: Vec::new()\n    |         ^^^^^^^^^^^ a field by this name exists in `Self`\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-34255-1.rs:7:30\n+  --> $DIR/issue-34255-1.rs:7:27\n    |\n LL |         input_cells: Vec::new()\n-   |                              ^^\n+   |                           ^^^^^\n    |\n    = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "32619420f6d53bee9d99f1299b6cc74698368877", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,8 +1,8 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:19\n+  --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16\n    |\n LL |     let x: Box<Bar()> = panic!();\n-   |                   ^^ only `Fn` traits may use parentheses\n+   |                ^^^^^ only `Fn` traits may use parentheses\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16"}, {"sha": "f5cf6db30f99c8ad0b30e2120cf26ff3862c8c3f", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,11 +1,11 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:18\n+  --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:13\n    |\n LL |     let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n-   |                  ^^^^^^^^^^^^^^\n-   |                  |\n-   |                  only `Fn` traits may use parentheses\n-   |                  help: use angle brackets instead: `<isize, usize>`\n+   |             ^^^^^^^^^^^^^^^^^^^\n+   |             |\n+   |             only `Fn` traits may use parentheses\n+   |             help: use angle brackets instead: `Bar::<isize, usize>`\n \n error: aborting due to previous error\n "}, {"sha": "ba93b60dad878ccac9da4f50cf35247b000940f1", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,8 +1,8 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:18\n+  --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15\n    |\n LL | fn foo(b: Box<Bar()>) {\n-   |                  ^^ only `Fn` traits may use parentheses\n+   |               ^^^^^ only `Fn` traits may use parentheses\n \n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15"}, {"sha": "59e7bc8c832d645ff39746f1b30cb10b382653ac", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,8 +1,8 @@\n error[E0220]: associated type `Output` not found for `One<()>`\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs:5:19\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs:5:16\n    |\n LL | fn foo(_: &dyn One())\n-   |                   ^^ associated type `Output` not found\n+   |                ^^^^^ associated type `Output` not found\n \n error: aborting due to previous error\n "}, {"sha": "f42ac38d370d57e2b73ca6e66ed65746f5e501fe", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -5,10 +5,10 @@ LL | fn foo(_: &dyn Three())\n    |                ^^^^^^^ expected 3 type arguments\n \n error[E0220]: associated type `Output` not found for `Three<(), [type error], [type error]>`\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:21\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())\n-   |                     ^^ associated type `Output` not found\n+   |                ^^^^^^^ associated type `Output` not found\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8185a798e7b65518f6c8540dfc4e792837c63b93", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,14 +1,14 @@\n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:19\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:15\n    |\n LL | fn foo(_: dyn Zero())\n-   |                   ^^ unexpected type argument\n+   |               ^^^^^^ unexpected type argument\n \n error[E0220]: associated type `Output` not found for `Zero`\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:19\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:15\n    |\n LL | fn foo(_: dyn Zero())\n-   |                   ^^ associated type `Output` not found\n+   |               ^^^^^^ associated type `Output` not found\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c81402a3dcc004cc53a79fa788ec94f40b36eb78", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d05aa9ceb82f31a86a548eaaffab8bdb229d76/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr?ref=c9d05aa9ceb82f31a86a548eaaffab8bdb229d76", "patch": "@@ -1,8 +1,8 @@\n error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:13\n+  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:8\n    |\n LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n-   |             ^^^^^^^ unexpected type argument\n+   |        ^^^^^^^^^^^^ unexpected type argument\n \n error[E0220]: associated type `Output` not found for `Trait`\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:24"}]}