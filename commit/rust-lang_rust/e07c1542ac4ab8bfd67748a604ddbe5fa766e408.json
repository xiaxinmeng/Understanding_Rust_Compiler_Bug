{"sha": "e07c1542ac4ab8bfd67748a604ddbe5fa766e408", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwN2MxNTQyYWM0YWI4YmZkNjc3NDhhNjA0ZGRiZTVmYTc2NmU0MDg=", "commit": {"author": {"name": "Bernardo Meurer", "email": "meurerbernardo@gmail.com", "date": "2018-08-23T16:34:21Z"}, "committer": {"name": "Bernardo Meurer", "email": "meurerbernardo@gmail.com", "date": "2018-08-23T16:34:21Z"}, "message": "Fixed multi-line function signatures", "tree": {"sha": "670c311028a886daa5d2b17232ba2590bab8e017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/670c311028a886daa5d2b17232ba2590bab8e017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e07c1542ac4ab8bfd67748a604ddbe5fa766e408", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJbfuIbAAoJEOQhx0GR6hhscvkH+wTeqcNtErWVu/C/vXe2Xzpa\nsa8YwZOV3797RvpqkqITn2JEsqKNHNJow5mozTPEJZ3ThejXTDbqVadHOkobAgyI\nHraXeqIRExZdFKrpZ0P3QNuvpKhuWAGqHLlYPE09aqjHstYURhlYriP9uOedICJR\nEMQn/yeNCYNcLwr1CODJsHnFhMAuajNxXT32+EgHY4I8kkQ6coB0iNeQiQ4W5e5+\nPNvM2gT5ms1lB/72eDhL4IXtyFU62F3QBVFpe+9ssaRSZ2J9Mk7JXKSOOaXKWCa0\n+xL8AiZlZ3aKcfelFY8WalwXUO1fhXHbQag3AbH6zE+IbITiToN+lLKqodamh8k=\n=Vozu\n-----END PGP SIGNATURE-----", "payload": "tree 670c311028a886daa5d2b17232ba2590bab8e017\nparent 6ca038475537d8a58d793e4312274332065e3c9a\nauthor Bernardo Meurer <meurerbernardo@gmail.com> 1535042061 -0700\ncommitter Bernardo Meurer <meurerbernardo@gmail.com> 1535042061 -0700\n\nFixed multi-line function signatures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e07c1542ac4ab8bfd67748a604ddbe5fa766e408", "html_url": "https://github.com/rust-lang/rust/commit/e07c1542ac4ab8bfd67748a604ddbe5fa766e408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e07c1542ac4ab8bfd67748a604ddbe5fa766e408/comments", "author": {"login": "lovesegfault", "id": 7243783, "node_id": "MDQ6VXNlcjcyNDM3ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/7243783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovesegfault", "html_url": "https://github.com/lovesegfault", "followers_url": "https://api.github.com/users/lovesegfault/followers", "following_url": "https://api.github.com/users/lovesegfault/following{/other_user}", "gists_url": "https://api.github.com/users/lovesegfault/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovesegfault/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovesegfault/subscriptions", "organizations_url": "https://api.github.com/users/lovesegfault/orgs", "repos_url": "https://api.github.com/users/lovesegfault/repos", "events_url": "https://api.github.com/users/lovesegfault/events{/privacy}", "received_events_url": "https://api.github.com/users/lovesegfault/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lovesegfault", "id": 7243783, "node_id": "MDQ6VXNlcjcyNDM3ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/7243783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovesegfault", "html_url": "https://github.com/lovesegfault", "followers_url": "https://api.github.com/users/lovesegfault/followers", "following_url": "https://api.github.com/users/lovesegfault/following{/other_user}", "gists_url": "https://api.github.com/users/lovesegfault/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovesegfault/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovesegfault/subscriptions", "organizations_url": "https://api.github.com/users/lovesegfault/orgs", "repos_url": "https://api.github.com/users/lovesegfault/repos", "events_url": "https://api.github.com/users/lovesegfault/events{/privacy}", "received_events_url": "https://api.github.com/users/lovesegfault/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ca038475537d8a58d793e4312274332065e3c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca038475537d8a58d793e4312274332065e3c9a", "html_url": "https://github.com/rust-lang/rust/commit/6ca038475537d8a58d793e4312274332065e3c9a"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "fa70a1500d0609d5c50f26361d9c5d3eb3612d10", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07c1542ac4ab8bfd67748a604ddbe5fa766e408/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07c1542ac4ab8bfd67748a604ddbe5fa766e408/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=e07c1542ac4ab8bfd67748a604ddbe5fa766e408", "patch": "@@ -396,7 +396,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         &self,\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>\n-        ) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n+    ) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n         trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n         trace!(\"substs: {:#?}\", self.substs());\n         trace!(\"param_env: {:#?}\", self.param_env);"}, {"sha": "6f1a126534ce876224658aa6c6fe3e1b3d6db594", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e07c1542ac4ab8bfd67748a604ddbe5fa766e408/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07c1542ac4ab8bfd67748a604ddbe5fa766e408/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=e07c1542ac4ab8bfd67748a604ddbe5fa766e408", "patch": "@@ -789,8 +789,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     }\n \n     /// Read a *non-ZST* scalar\n-    pub fn read_scalar(&self, ptr: Pointer, ptr_align: Align, size: Size)\n-        -> EvalResult<'tcx, ScalarMaybeUndef> {\n+    pub fn read_scalar(\n+        &self,\n+        ptr: Pointer,\n+        ptr_align: Align,\n+        size: Size\n+    ) -> EvalResult<'tcx, ScalarMaybeUndef> {\n         // Make sure we don't read part of a pointer as a pointer\n         self.check_relocation_edges(ptr, size)?;\n         let endianness = self.endianness();"}, {"sha": "f1c2b6b34fb15b2f5e9fd04451b4142371ee7291", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07c1542ac4ab8bfd67748a604ddbe5fa766e408/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07c1542ac4ab8bfd67748a604ddbe5fa766e408/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=e07c1542ac4ab8bfd67748a604ddbe5fa766e408", "patch": "@@ -776,7 +776,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     pub fn unpack_unsized_mplace(\n         &self,\n         mplace: MPlaceTy<'tcx>\n-        ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n+    ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n         trace!(\"Unpacking {:?} ({:?})\", *mplace, mplace.layout.ty);\n         let layout = match mplace.extra {\n             PlaceExtra::Vtable(vtable) => {"}]}