{"sha": "de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2U5NDFlNGVhZmRjNzNmNGQ2OGM2Y2RiYjhjNDkyMjRlNWE5MGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-11T15:29:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:59:40Z"}, "message": "convert `prove_predicate` into a query", "tree": {"sha": "9168c30136f00431cecf2acf07e24cda3cb0d017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9168c30136f00431cecf2acf07e24cda3cb0d017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "html_url": "https://github.com/rust-lang/rust/commit/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6136837b770980c8fd271d43358afc455021d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6136837b770980c8fd271d43358afc455021d9b", "html_url": "https://github.com/rust-lang/rust/commit/d6136837b770980c8fd271d43358afc455021d9b"}], "stats": {"total": 109, "additions": 92, "deletions": 17}, "files": [{"sha": "94c79c17f0578764a05adee2e7f9b7e4c322ada7", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "patch": "@@ -72,7 +72,7 @@ use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n use traits::query::{\n     CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal,\n-    CanonicalPredicateGoal,\n+    CanonicalPredicateGoal, CanonicalTypeOpProvePredicateGoal,\n };\n use ty::{TyCtxt, Instance, InstanceDef, ParamEnv, ParamEnvAnd, PolyTraitRef, Ty};\n use ty::subst::Substs;\n@@ -651,6 +651,7 @@ define_dep_nodes!( <'tcx>\n     [] EvaluateObligation(CanonicalPredicateGoal<'tcx>),\n     [] TypeOpEq(CanonicalTypeOpEqGoal<'tcx>),\n     [] TypeOpSubtype(CanonicalTypeOpSubtypeGoal<'tcx>),\n+    [] TypeOpProvePredicate(CanonicalTypeOpProvePredicateGoal<'tcx>),\n \n     [] SubstituteNormalizeAndTestPredicates { key: (DefId, &'tcx Substs<'tcx>) },\n "}, {"sha": "aa0b524af06e56aa048ae8c917f1b8f02af99f0f", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "patch": "@@ -38,6 +38,9 @@ pub type CanonicalTypeOpEqGoal<'tcx> =\n pub type CanonicalTypeOpSubtypeGoal<'tcx> =\n     Canonical<'tcx, type_op::subtype::Subtype<'tcx>>;\n \n+pub type CanonicalTypeOpProvePredicateGoal<'tcx> =\n+    Canonical<'tcx, type_op::prove_predicate::ProvePredicate<'tcx>>;\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct NoSolution;\n "}, {"sha": "193dd1c7c841b154412f2958c2e0d176b68cb9b2", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::{InferCtxt, InferOk, InferResult};\n-use traits::{Obligation, ObligationCause};\n+use infer::canonical::{Canonical, CanonicalizedQueryResult};\n use ty::{ParamEnv, Predicate, TyCtxt};\n \n-#[derive(Debug)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct ProvePredicate<'tcx> {\n-    param_env: ParamEnv<'tcx>,\n-    predicate: Predicate<'tcx>,\n+    pub param_env: ParamEnv<'tcx>,\n+    pub predicate: Predicate<'tcx>,\n }\n \n impl<'tcx> ProvePredicate<'tcx> {\n@@ -27,18 +26,40 @@ impl<'tcx> ProvePredicate<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> super::TypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n-    type Output = ();\n+impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n+    type QueryResult = ();\n \n-    fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::Output, Self> {\n+    fn trivial_noop(self, _tcx: TyCtxt<'_, 'gcx, 'tcx>) -> Result<Self::QueryResult, Self> {\n         Err(self)\n     }\n \n-    fn perform(self, _infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n-        let obligation = Obligation::new(ObligationCause::dummy(), self.param_env, self.predicate);\n-        Ok(InferOk {\n-            value: (),\n-            obligations: vec![obligation],\n-        })\n+    fn param_env(&self) -> ParamEnv<'tcx> {\n+        self.param_env\n     }\n+\n+    fn perform_query(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonical<'gcx, ProvePredicate<'gcx>>,\n+    ) -> CanonicalizedQueryResult<'gcx, ()> {\n+        tcx.type_op_prove_predicate(canonicalized).unwrap()\n+    }\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for ProvePredicate<'tcx> {\n+        param_env,\n+        predicate,\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for ProvePredicate<'a> {\n+        type Lifted = ProvePredicate<'tcx>;\n+        param_env,\n+        predicate,\n+    }\n+}\n+\n+impl_stable_hash_for! {\n+    struct ProvePredicate<'tcx> { param_env, predicate }\n }"}, {"sha": "930826dad62eedde575f6e8a44d9bbf114062b4f", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "patch": "@@ -14,7 +14,7 @@ use hir::def_id::{CrateNum, DefId, DefIndex};\n use mir::interpret::{GlobalId, ConstValue};\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal,\n-    CanonicalTypeOpSubtypeGoal,\n+    CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::Substs;\n@@ -117,6 +117,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::type_op_subtype<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::type_op_prove_predicate<'tcx> {\n+    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpProvePredicateGoal<'tcx>) -> String {\n+        format!(\"evaluating `type_op_prove_predicate` `{:?}`\", goal)\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::is_copy_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Copy`\", env.value)"}, {"sha": "dfc54cb1425686de078bea502783e951d796e358", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "patch": "@@ -34,7 +34,8 @@ use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::{self, Vtable};\n use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal,\n-                    CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal, NoSolution};\n+                    CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal,\n+                    CanonicalTypeOpProvePredicateGoal, NoSolution};\n use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use traits::query::normalize::NormalizationResult;\n use traits::specialization_graph;\n@@ -462,6 +463,14 @@ define_queries! { <'tcx>\n         NoSolution,\n     >,\n \n+    /// Do not call this query directly: invoke `infcx.at().prove_predicates()` instead.\n+    [] fn type_op_prove_predicate: TypeOpProvePredicate(\n+        CanonicalTypeOpProvePredicateGoal<'tcx>\n+    ) -> Result<\n+        Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ()>>>,\n+        NoSolution,\n+    >,\n+\n     [] fn substitute_normalize_and_test_predicates:\n         substitute_normalize_and_test_predicates_node((DefId, &'tcx Substs<'tcx>)) -> bool,\n "}, {"sha": "57568f60b86ee358f9354d1fc64d90b88bfbf486", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "patch": "@@ -1030,6 +1030,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::EvaluateObligation |\n         DepKind::TypeOpEq |\n         DepKind::TypeOpSubtype |\n+        DepKind::TypeOpProvePredicate |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::InstanceDefSizeEstimate |\n         DepKind::ProgramClausesForEnv |"}, {"sha": "261d6b2fbfa25245f6efb1c7e7e06576ef6271e5", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "patch": "@@ -35,6 +35,7 @@ mod normalize_projection_ty;\n mod normalize_erasing_regions;\n pub mod lowering;\n mod type_op_eq;\n+mod type_op_prove_predicate;\n mod type_op_subtype;\n \n use rustc::ty::query::Providers;\n@@ -50,6 +51,7 @@ pub fn provide(p: &mut Providers) {\n         program_clauses_for_env: lowering::program_clauses_for_env,\n         evaluate_obligation: evaluate_obligation::evaluate_obligation,\n         type_op_eq: type_op_eq::type_op_eq,\n+        type_op_prove_predicate: type_op_prove_predicate::type_op_prove_predicate,\n         type_op_subtype: type_op_subtype::type_op_subtype,\n         ..*p\n     };"}, {"sha": "ad16e6d31d7a0a71b411b635dee1f1d0f2391a05", "filename": "src/librustc_traits/type_op_prove_predicate.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc_traits%2Ftype_op_prove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b/src%2Flibrustc_traits%2Ftype_op_prove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op_prove_predicate.rs?ref=de7e941e4eafdc73f4d68c6cdbb8c49224e5a90b", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::infer::canonical::{Canonical, QueryResult};\n+use rustc::traits::query::type_op::prove_predicate::ProvePredicate;\n+use rustc::traits::query::NoSolution;\n+use rustc::traits::{FulfillmentContext, Obligation, ObligationCause, TraitEngine};\n+use rustc::ty::TyCtxt;\n+use rustc_data_structures::sync::Lrc;\n+use syntax::codemap::DUMMY_SP;\n+\n+crate fn type_op_prove_predicate<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, ProvePredicate<'tcx>>,\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n+    let tcx = tcx.global_tcx();\n+    tcx.infer_ctxt().enter(|ref infcx| {\n+        let (ProvePredicate { param_env, predicate }, canonical_inference_vars) =\n+            infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonicalized);\n+        let fulfill_cx = &mut FulfillmentContext::new();\n+        let obligation = Obligation::new(ObligationCause::dummy(), param_env, predicate);\n+        fulfill_cx.register_predicate_obligation(infcx, obligation);\n+        infcx.make_canonicalized_query_result(canonical_inference_vars, (), fulfill_cx)\n+    })\n+}"}]}