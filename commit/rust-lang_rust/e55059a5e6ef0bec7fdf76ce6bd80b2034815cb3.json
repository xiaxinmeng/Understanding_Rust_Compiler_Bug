{"sha": "e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTA1OWE1ZTZlZjBiZWM3ZmRmNzZjZTZiZDgwYjIwMzQ4MTVjYjM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-10-08T08:57:07Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-10-25T14:08:29Z"}, "message": "ci: extract installing mingw into a script", "tree": {"sha": "da58cb196c1f4700f66e83246cdf9e14374dd965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da58cb196c1f4700f66e83246cdf9e14374dd965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl2zAd0ACgkQPgar6Auq\n8ZwAVBAAw47CLL/+w110dBsa9mqYyu9Yni+ffjpQIw9fhGqjvm0PQLGLeMN4a5zf\nbmCCKi2d7861mwbM3lfop/jT568kjcjkkP3YLKY5r1lPytYrDqdxx4PzLvNRmGN7\nnTVLH7XFqSiXmMxC5bcMyOtTRMSjyFMf0qShs778Bm/+PzFoFqXvkvGAvPRJwrEO\noYyEzgeywzDwEu0C9k7sX8OnvgBm7K5dHrqIoshMz8TZ0zXYWK5h/RTu6o4S15B+\nVBvCW4xEiGOXLm16Ofo568WU5yPegA3PAgDcNr7cYwLJQjxplhTS5CVfQdkenvcS\nD/wdPeQHbBxrpqHXVhqVViKXwsngbvODdfZ5O2lVtVV3FvnQmqN3rkLxj+RdlmYk\nZvyUGUKJS39puCputLsxbv5865VyArGBJEBNBbZ0bXsvagsiNO5dR9W7dbaPBfhf\nZXJvPTYgviK+IYMjXZI+39LBTsjaVnNGLz7oO/JGnm/HBW90TrUEqgvIZYcCYBAe\nteIeAcrdRGrsKO+y9TmwuvebGCNizw7e3A6VEgqf0H4z8LsoZqdCt0vkDBcmU+Io\nR3/igomQ/LD+52BEbNladg/sWtVrGgrTzVOh2KIcNCqqLAQpL7ylPHQn3Si6RRC7\nHhQGmkbM9MwgdvLMViY+6SMxsEuBAHsQ99iV7mFSw2pY+qROhFk=\n=B1Df\n-----END PGP SIGNATURE-----", "payload": "tree da58cb196c1f4700f66e83246cdf9e14374dd965\nparent 852dfd7a17bffadfd79f323d3291808dd10c854e\nauthor Pietro Albini <pietro@pietroalbini.org> 1570525027 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1572012509 +0200\n\nci: extract installing mingw into a script\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3", "html_url": "https://github.com/rust-lang/rust/commit/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "852dfd7a17bffadfd79f323d3291808dd10c854e", "url": "https://api.github.com/repos/rust-lang/rust/commits/852dfd7a17bffadfd79f323d3291808dd10c854e", "html_url": "https://github.com/rust-lang/rust/commit/852dfd7a17bffadfd79f323d3291808dd10c854e"}], "stats": {"total": 91, "additions": 51, "deletions": 40}, "files": [{"sha": "7aab5658dc05a27f07d615ce8714fd3d8d110776", "filename": "src/ci/azure-pipelines/steps/install-windows-build-deps.yml", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml?ref=e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3", "patch": "@@ -1,44 +1,4 @@\n steps:\n-# If we need to download a custom MinGW, do so here and set the path\n-# appropriately.\n-#\n-# Here we also do a pretty heinous thing which is to mangle the MinGW\n-# installation we just downloaded. Currently, as of this writing, we're using\n-# MinGW-w64 builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it\n-# appears to be the first version which contains a fix for #40546, builds\n-# randomly failing during LLVM due to ar.exe/ranlib.exe failures.\n-#\n-# Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n-# to contain a regression in gdb (#40184). As a result if we were to use the\n-# gdb provided (7.11.1) then we would fail all debuginfo tests.\n-#\n-# In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n-# avoid disabling gdb tests we download an *old* version of gdb, specifically\n-# that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n-# with the 6.2.0 gdb to get tests passing.\n-#\n-# Note that we don't literally overwrite the gdb.exe binary because it appears\n-# to just use gdborig.exe, so that's the binary we deal with instead.\n-- bash: |\n-    set -e\n-    curl -o mingw.7z $MINGW_URL/$MINGW_ARCHIVE\n-    7z x -y mingw.7z > /dev/null\n-    curl -o $MINGW_DIR/bin/gdborig.exe $MINGW_URL/2017-04-20-${MSYS_BITS}bit-gdborig.exe\n-    echo \"##vso[task.prependpath]`pwd`/$MINGW_DIR/bin\"\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['MINGW_URL'],''))\n-  displayName: Download custom MinGW\n-\n-# Otherwise install MinGW through `pacman`\n-- bash: |\n-    set -e\n-    arch=i686\n-    if [ \"$MSYS_BITS\" = \"64\" ]; then\n-      arch=x86_64\n-    fi\n-    pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake mingw-w64-$arch-gcc mingw-w64-$arch-python2\n-    echo \"##vso[task.prependpath]$(System.Workfolder)/msys2/mingw$MSYS_BITS/bin\"\n-  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n-  displayName: Download standard MinGW\n \n # Note that this is originally from the github releases patch of Ninja\n - bash: |"}, {"sha": "7478121306edcf8e79b27576f80b1994aab5a6ac", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3", "patch": "@@ -98,6 +98,13 @@ steps:\n   displayName: Install msys2\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n+- bash: src/ci/scripts/install-mingw.sh\n+  env:\n+    AGENT_OS: $(Agent.OS)\n+    SYSTEM_WORKFOLDER: $(System.Workfolder)\n+  displayName: Install MinGW\n+  condition: and(succeeded(), not(variables.SKIP_JOB))\n+\n - template: install-windows-build-deps.yml\n \n # Looks like docker containers have IPv6 disabled by default, so let's turn it"}, {"sha": "cf3e3e7ec258c89560786b505f3d4f041b6164f4", "filename": "src/ci/scripts/install-mingw.sh", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3/src%2Fci%2Fscripts%2Finstall-mingw.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3/src%2Fci%2Fscripts%2Finstall-mingw.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-mingw.sh?ref=e55059a5e6ef0bec7fdf76ce6bd80b2034815cb3", "patch": "@@ -0,0 +1,44 @@\n+#!/bin/bash\n+# If we need to download a custom MinGW, do so here and set the path\n+# appropriately.\n+#\n+# Here we also do a pretty heinous thing which is to mangle the MinGW\n+# installation we just downloaded. Currently, as of this writing, we're using\n+# MinGW-w64 builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it\n+# appears to be the first version which contains a fix for #40546, builds\n+# randomly failing during LLVM due to ar.exe/ranlib.exe failures.\n+#\n+# Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n+# to contain a regression in gdb (#40184). As a result if we were to use the\n+# gdb provided (7.11.1) then we would fail all debuginfo tests.\n+#\n+# In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n+# avoid disabling gdb tests we download an *old* version of gdb, specifically\n+# that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n+# with the 6.2.0 gdb to get tests passing.\n+#\n+# Note that we don't literally overwrite the gdb.exe binary because it appears\n+# to just use gdborig.exe, so that's the binary we deal with instead.\n+#\n+# Otherwise install MinGW through `pacman`\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+if isWindows; then\n+    if [[ -z \"${MINGW_URL+x}\" ]]; then\n+        curl -o mingw.7z \"${MINGW_URL}/${MINGW_ARCHIVE}\"\n+        7z x -y mingw.7z > /dev/null\n+        curl -o \"${MINGW_DIR}/bin/gdborig.exe\" \"${MINGW_URL}/2017-04-20-${MSYS_BITS}bit-gdborig.exe\"\n+        ciCommandAddPath \"$(pwd)/${MINGW_DIR}/bin\"\n+    else\n+        arch=i686\n+        if [ \"$MSYS_BITS\" = \"64\" ]; then\n+          arch=x86_64\n+        fi\n+        pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake mingw-w64-$arch-gcc mingw-w64-$arch-python2\n+        ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/mingw${MSYS_BITS}/bin\"\n+    fi\n+fi"}]}