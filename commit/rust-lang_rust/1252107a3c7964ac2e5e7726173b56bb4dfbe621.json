{"sha": "1252107a3c7964ac2e5e7726173b56bb4dfbe621", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTIxMDdhM2M3OTY0YWMyZTVlNzcyNjE3M2I1NmJiNGRmYmU2MjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-06T14:39:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-06T14:39:49Z"}, "message": "Merge #4345\n\n4345: Refactor assists a bit r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5189803adf9b8d89cb4823362e568748de039396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5189803adf9b8d89cb4823362e568748de039396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1252107a3c7964ac2e5e7726173b56bb4dfbe621", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJessw1CRBK7hj4Ov3rIwAAdHIIAEpb1lpvOr4TBT7NHIguKbRe\naJ5CGO+3OMYO9bypFFMwcf13trjjwTxZou3pyEIXuLShbpAXhPILP1t6bDX/hr9D\n5lsucOrO3Op52N/6EHcB8cY4sfM0rCeDfMp5eraZuHPFjlUrN4TgSBWEosTRikq6\n9YGjYgYxmepgxaTTk/FIz7ntjpPEZFlz7c1Uf2m4FzGjBY3mi0RALExoDCnbzfP6\n7u6PesQ5dnNLYno9HpzxrXy91cuT2QUc5vD/74iylYzWWx6GL4cuKzr1bXXNyL8j\nMCQv0dRMTZnV8OxsE8+Vl16FKUUqgso2qLUMwTtjuVf+Aoy39F71LCvo3ChWDg8=\n=K/x0\n-----END PGP SIGNATURE-----\n", "payload": "tree 5189803adf9b8d89cb4823362e568748de039396\nparent efd8e34c396f1524623a495e47111f1047cf2879\nparent 020ca6695f4d58f651984c4fbe2227d891896bb3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588775989 +0000\ncommitter GitHub <noreply@github.com> 1588775989 +0000\n\nMerge #4345\n\n4345: Refactor assists a bit r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1252107a3c7964ac2e5e7726173b56bb4dfbe621", "html_url": "https://github.com/rust-lang/rust/commit/1252107a3c7964ac2e5e7726173b56bb4dfbe621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1252107a3c7964ac2e5e7726173b56bb4dfbe621/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd8e34c396f1524623a495e47111f1047cf2879", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd8e34c396f1524623a495e47111f1047cf2879", "html_url": "https://github.com/rust-lang/rust/commit/efd8e34c396f1524623a495e47111f1047cf2879"}, {"sha": "020ca6695f4d58f651984c4fbe2227d891896bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/020ca6695f4d58f651984c4fbe2227d891896bb3", "html_url": "https://github.com/rust-lang/rust/commit/020ca6695f4d58f651984c4fbe2227d891896bb3"}], "stats": {"total": 79, "additions": 32, "deletions": 47}, "files": [{"sha": "871671de2bf87953534c7c918a61b86eb7ae7b24", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=1252107a3c7964ac2e5e7726173b56bb4dfbe621", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{AssistFile, AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n+use crate::{AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n \n #[derive(Clone, Debug)]\n pub(crate) struct Assist(pub(crate) Vec<AssistInfo>);\n@@ -22,16 +22,16 @@ pub(crate) struct Assist(pub(crate) Vec<AssistInfo>);\n pub(crate) struct AssistInfo {\n     pub(crate) label: AssistLabel,\n     pub(crate) group_label: Option<GroupLabel>,\n-    pub(crate) action: Option<SourceChange>,\n+    pub(crate) source_change: Option<SourceChange>,\n }\n \n impl AssistInfo {\n     fn new(label: AssistLabel) -> AssistInfo {\n-        AssistInfo { label, group_label: None, action: None }\n+        AssistInfo { label, group_label: None, source_change: None }\n     }\n \n-    fn resolved(self, action: SourceChange) -> AssistInfo {\n-        AssistInfo { action: Some(action), ..self }\n+    fn resolved(self, source_change: SourceChange) -> AssistInfo {\n+        AssistInfo { source_change: Some(source_change), ..self }\n     }\n \n     fn with_group(self, group_label: GroupLabel) -> AssistInfo {\n@@ -40,7 +40,7 @@ impl AssistInfo {\n \n     pub(crate) fn into_resolved(self) -> Option<ResolvedAssist> {\n         let label = self.label;\n-        self.action.map(|action| ResolvedAssist { label, action })\n+        self.source_change.map(|source_change| ResolvedAssist { label, source_change })\n     }\n }\n \n@@ -104,12 +104,12 @@ impl<'a> AssistCtx<'a> {\n         let change_label = label.label.clone();\n         let mut info = AssistInfo::new(label);\n         if self.should_compute_edit {\n-            let action = {\n+            let source_change = {\n                 let mut edit = ActionBuilder::new(&self);\n                 f(&mut edit);\n-                edit.build(change_label, self.frange.file_id)\n+                edit.build(change_label)\n             };\n-            info = info.resolved(action)\n+            info = info.resolved(source_change)\n         };\n \n         Some(Assist(vec![info]))\n@@ -163,12 +163,12 @@ impl<'a> AssistGroup<'a> {\n         let change_label = label.label.clone();\n         let mut info = AssistInfo::new(label).with_group(self.group.clone());\n         if self.ctx.should_compute_edit {\n-            let action = {\n+            let source_change = {\n                 let mut edit = ActionBuilder::new(&self.ctx);\n                 f(&mut edit);\n-                edit.build(change_label, self.ctx.frange.file_id)\n+                edit.build(change_label)\n             };\n-            info = info.resolved(action)\n+            info = info.resolved(source_change)\n         };\n \n         self.assists.push(info)\n@@ -186,7 +186,7 @@ impl<'a> AssistGroup<'a> {\n pub(crate) struct ActionBuilder<'a, 'b> {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextSize>,\n-    file: AssistFile,\n+    file: FileId,\n     ctx: &'a AssistCtx<'b>,\n }\n \n@@ -195,7 +195,7 @@ impl<'a, 'b> ActionBuilder<'a, 'b> {\n         Self {\n             edit: TextEditBuilder::default(),\n             cursor_position: None,\n-            file: AssistFile::default(),\n+            file: ctx.frange.file_id,\n             ctx,\n         }\n     }\n@@ -254,20 +254,16 @@ impl<'a, 'b> ActionBuilder<'a, 'b> {\n         algo::diff(&node, &new).into_text_edit(&mut self.edit)\n     }\n \n-    pub(crate) fn set_file(&mut self, assist_file: AssistFile) {\n-        self.file = assist_file\n+    pub(crate) fn set_file(&mut self, assist_file: FileId) {\n+        self.file = assist_file;\n     }\n \n-    fn build(self, change_label: String, current_file: FileId) -> SourceChange {\n+    fn build(self, change_label: String) -> SourceChange {\n         let edit = self.edit.finish();\n         if edit.is_empty() && self.cursor_position.is_none() {\n             panic!(\"Only call `add_assist` if the assist can be applied\")\n         }\n-        let file = match self.file {\n-            AssistFile::CurrentFile => current_file,\n-            AssistFile::TargetFile(it) => it,\n-        };\n         SingleFileChange { label: change_label, edit, cursor_position: self.cursor_position }\n-            .into_source_change(file)\n+            .into_source_change(self.file)\n     }\n }"}, {"sha": "278079665062d287b4a6e79f7ce76cebd4fca060", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=1252107a3c7964ac2e5e7726173b56bb4dfbe621", "patch": "@@ -3,9 +3,10 @@ use ra_syntax::{\n     SyntaxKind, SyntaxNode, TextSize,\n };\n \n-use crate::{Assist, AssistCtx, AssistFile, AssistId};\n+use crate::{Assist, AssistCtx, AssistId};\n use ast::{edit::IndentLevel, ArgListOwner, ModuleItemOwner};\n use hir::HirDisplay;\n+use ra_db::FileId;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n // Assist: add_function\n@@ -70,15 +71,15 @@ struct FunctionTemplate {\n     insert_offset: TextSize,\n     cursor_offset: TextSize,\n     fn_def: ast::SourceFile,\n-    file: AssistFile,\n+    file: FileId,\n }\n \n struct FunctionBuilder {\n     target: GeneratedFunctionTarget,\n     fn_name: ast::Name,\n     type_params: Option<ast::TypeParamList>,\n     params: ast::ParamList,\n-    file: AssistFile,\n+    file: FileId,\n     needs_pub: bool,\n }\n \n@@ -92,7 +93,7 @@ impl FunctionBuilder {\n         target_module: Option<hir::InFile<hir::ModuleSource>>,\n     ) -> Option<Self> {\n         let needs_pub = target_module.is_some();\n-        let mut file = AssistFile::default();\n+        let mut file = ctx.frange.file_id;\n         let target = if let Some(target_module) = target_module {\n             let (in_file, target) = next_space_for_fn_in_module(ctx.sema.db, target_module)?;\n             file = in_file;\n@@ -253,9 +254,8 @@ fn next_space_for_fn_after_call_site(expr: &ast::CallExpr) -> Option<GeneratedFu\n fn next_space_for_fn_in_module(\n     db: &dyn hir::db::AstDatabase,\n     module: hir::InFile<hir::ModuleSource>,\n-) -> Option<(AssistFile, GeneratedFunctionTarget)> {\n+) -> Option<(FileId, GeneratedFunctionTarget)> {\n     let file = module.file_id.original_file(db);\n-    let assist_file = AssistFile::TargetFile(file);\n     let assist_item = match module.value {\n         hir::ModuleSource::SourceFile(it) => {\n             if let Some(last_item) = it.items().last() {\n@@ -272,7 +272,7 @@ fn next_space_for_fn_in_module(\n             }\n         }\n     };\n-    Some((assist_file, assist_item))\n+    Some((file, assist_item))\n }\n \n #[cfg(test)]"}, {"sha": "13ea45ec7cc99d2f552b1b0e71091a108441c916", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=1252107a3c7964ac2e5e7726173b56bb4dfbe621", "patch": "@@ -18,7 +18,7 @@ pub mod utils;\n pub mod ast_transform;\n \n use hir::Semantics;\n-use ra_db::{FileId, FileRange};\n+use ra_db::FileRange;\n use ra_ide_db::{source_change::SourceChange, RootDatabase};\n use ra_syntax::TextRange;\n \n@@ -59,19 +59,7 @@ impl AssistLabel {\n #[derive(Debug, Clone)]\n pub struct ResolvedAssist {\n     pub label: AssistLabel,\n-    pub action: SourceChange,\n-}\n-\n-#[derive(Debug, Clone, Copy)]\n-enum AssistFile {\n-    CurrentFile,\n-    TargetFile(FileId),\n-}\n-\n-impl Default for AssistFile {\n-    fn default() -> Self {\n-        Self::CurrentFile\n-    }\n+    pub source_change: SourceChange,\n }\n \n /// Return all the assists applicable at the given position."}, {"sha": "17e3ece9f60868c41f9908c06c589412d5eccc02", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=1252107a3c7964ac2e5e7726173b56bb4dfbe621", "patch": "@@ -57,7 +57,7 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n         });\n \n     let actual = {\n-        let change = assist.action.source_file_edits.pop().unwrap();\n+        let change = assist.source_change.source_file_edits.pop().unwrap();\n         let mut actual = before.clone();\n         change.edit.apply(&mut actual);\n         actual\n@@ -94,7 +94,7 @@ fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n \n     match (assist(assist_ctx), expected) {\n         (Some(assist), ExpectedResult::After(after)) => {\n-            let mut action = assist.0[0].action.clone().unwrap();\n+            let mut action = assist.0[0].source_change.clone().unwrap();\n             let change = action.source_file_edits.pop().unwrap();\n \n             let mut actual = db.file_text(change.file_id).as_ref().to_owned();"}, {"sha": "6021f7279f63ba45b0696a6610c9d02f7d535d53", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=1252107a3c7964ac2e5e7726173b56bb4dfbe621", "patch": "@@ -2,11 +2,12 @@\n \n use std::fmt;\n \n-use super::completion_config::SnippetCap;\n use hir::Documentation;\n use ra_syntax::TextRange;\n use ra_text_edit::TextEdit;\n \n+use crate::completion::completion_config::SnippetCap;\n+\n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n /// `CompletionItem`, use `new` method and the `Builder` struct."}, {"sha": "737f8710919bb1ea41e8432a18531b6cedbce0f4", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1252107a3c7964ac2e5e7726173b56bb4dfbe621/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=1252107a3c7964ac2e5e7726173b56bb4dfbe621", "patch": "@@ -478,7 +478,7 @@ impl Analysis {\n                     id: assist.label.id,\n                     label: assist.label.label,\n                     group_label: assist.label.group.map(|it| it.0),\n-                    source_change: assist.action,\n+                    source_change: assist.source_change,\n                 })\n                 .collect()\n         })"}]}