{"sha": "35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1Y2JhOWViMGJjZWZkYmI3MjZhMjQxZGIzYWUzMWY0YjUyNTZjZmE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-15T17:30:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-18T07:41:28Z"}, "message": "Retire EnumLiftImpl.", "tree": {"sha": "f9bce44b55dd9872d0086987b331cbf832b3d5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9bce44b55dd9872d0086987b331cbf832b3d5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "html_url": "https://github.com/rust-lang/rust/commit/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033d1df19b3835c184dabfa1c7cab42337fa36b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/033d1df19b3835c184dabfa1c7cab42337fa36b6", "html_url": "https://github.com/rust-lang/rust/commit/033d1df19b3835c184dabfa1c7cab42337fa36b6"}], "stats": {"total": 135, "additions": 9, "deletions": 126}, "files": [{"sha": "aae1c7a299272d675ac4ffbc4546a1e474749186", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "patch": "@@ -253,58 +253,6 @@ macro_rules! CloneTypeFoldableAndLiftImpls {\n     }\n }\n \n-#[macro_export]\n-macro_rules! EnumLiftImpl {\n-    (impl<$($p:tt),*> Lift<$tcx:tt> for $s:path {\n-        type Lifted = $lifted:ty;\n-        $($variants:tt)*\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::Lift<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            type Lifted = $lifted;\n-\n-            fn lift_to_tcx(&self, tcx: TyCtxt<$tcx>) -> Option<$lifted> {\n-                EnumLiftImpl!(@Variants(self, tcx) input($($variants)*) output())\n-            }\n-        }\n-    };\n-\n-    (@Variants($this:expr, $tcx:expr) input() output($($output:tt)*)) => {\n-        match $this {\n-            $($output)*\n-        }\n-    };\n-\n-    (@Variants($this:expr, $tcx:expr)\n-     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumLiftImpl!(\n-            @Variants($this, $tcx)\n-                input($($input)*)\n-                output(\n-                    $variant ( $($variant_arg),* ) => {\n-                        Some($variant ( $($tcx.lift($variant_arg)?),* ))\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@Variants($this:expr, $tcx:expr)\n-     input( ($variant:path), $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumLiftImpl!(\n-            @Variants($this, $tcx)\n-                input($($input)*)\n-                output(\n-                    $variant => { Some($variant) }\n-                    $($output)*\n-                )\n-        )\n-    };\n-}\n-\n #[macro_export]\n macro_rules! EnumTypeFoldableImpl {\n     (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {"}, {"sha": "3aa355ce11a8a2ccbc4ada0a4c1c28b705111084", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "patch": "@@ -334,27 +334,27 @@ pub type TraitObligations<'tcx> = Vec<TraitObligation<'tcx>>;\n /// are used for representing the trait system in the form of\n /// logic programming clauses. They are part of the interface\n /// for the chalk SLG solver.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable, Lift)]\n pub enum WhereClause<'tcx> {\n     Implemented(ty::TraitPredicate<'tcx>),\n     ProjectionEq(ty::ProjectionPredicate<'tcx>),\n     RegionOutlives(ty::RegionOutlivesPredicate<'tcx>),\n     TypeOutlives(ty::TypeOutlivesPredicate<'tcx>),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable, Lift)]\n pub enum WellFormed<'tcx> {\n     Trait(ty::TraitPredicate<'tcx>),\n     Ty(Ty<'tcx>),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable, Lift)]\n pub enum FromEnv<'tcx> {\n     Trait(ty::TraitPredicate<'tcx>),\n     Ty(Ty<'tcx>),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable, Lift)]\n pub enum DomainGoal<'tcx> {\n     Holds(WhereClause<'tcx>),\n     WellFormed(WellFormed<'tcx>),\n@@ -370,7 +370,7 @@ pub enum QuantifierKind {\n     Existential,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable, Lift)]\n pub enum GoalKind<'tcx> {\n     Implies(Clauses<'tcx>, Goal<'tcx>),\n     And(Goal<'tcx>, Goal<'tcx>),"}, {"sha": "d6cd2cce425cb6f29d4953d5d9bd82f6032f04da", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "patch": "@@ -4,7 +4,7 @@ use crate::hir;\n use syntax::source_map::Span;\n use crate::traits::{FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt};\n use crate::traits::query::NoSolution;\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty};\n \n use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -17,22 +17,13 @@ use std::mem;\n /// case they are called implied bounds). They are fed to the\n /// `OutlivesEnv` which in turn is supplied to the region checker and\n /// other parts of the inference system.\n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Clone, Debug, TypeFoldable, Lift)]\n pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),\n     RegionSubProjection(ty::Region<'tcx>, ty::ProjectionTy<'tcx>),\n }\n \n-EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for self::OutlivesBound<'a> {\n-        type Lifted = self::OutlivesBound<'tcx>;\n-        (self::OutlivesBound::RegionSubRegion)(a, b),\n-        (self::OutlivesBound::RegionSubParam)(a, b),\n-        (self::OutlivesBound::RegionSubProjection)(a, b),\n-    }\n-}\n-\n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for OutlivesBound<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         mem::discriminant(self).hash_stable(hcx, hasher);"}, {"sha": "8c300da11fcbf67e5b0e77fa64183dd46b26467a", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "patch": "@@ -650,55 +650,6 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n     }\n }\n \n-EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for traits::WhereClause<'a> {\n-        type Lifted = traits::WhereClause<'tcx>;\n-        (traits::WhereClause::Implemented)(trait_ref),\n-        (traits::WhereClause::ProjectionEq)(projection),\n-        (traits::WhereClause::TypeOutlives)(ty_outlives),\n-        (traits::WhereClause::RegionOutlives)(region_outlives),\n-    }\n-}\n-\n-EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for traits::WellFormed<'a> {\n-        type Lifted = traits::WellFormed<'tcx>;\n-        (traits::WellFormed::Trait)(trait_ref),\n-        (traits::WellFormed::Ty)(ty),\n-    }\n-}\n-\n-EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for traits::FromEnv<'a> {\n-        type Lifted = traits::FromEnv<'tcx>;\n-        (traits::FromEnv::Trait)(trait_ref),\n-        (traits::FromEnv::Ty)(ty),\n-    }\n-}\n-\n-EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for traits::DomainGoal<'a> {\n-        type Lifted = traits::DomainGoal<'tcx>;\n-        (traits::DomainGoal::Holds)(wc),\n-        (traits::DomainGoal::WellFormed)(wf),\n-        (traits::DomainGoal::FromEnv)(from_env),\n-        (traits::DomainGoal::Normalize)(projection),\n-    }\n-}\n-\n-EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for traits::GoalKind<'a> {\n-        type Lifted = traits::GoalKind<'tcx>;\n-        (traits::GoalKind::Implies)(hypotheses, goal),\n-        (traits::GoalKind::And)(goal1, goal2),\n-        (traits::GoalKind::Not)(goal),\n-        (traits::GoalKind::DomainGoal)(domain_goal),\n-        (traits::GoalKind::Quantified)(kind, goal),\n-        (traits::GoalKind::Subtype)(a, b),\n-        (traits::GoalKind::CannotProve),\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for traits::Environment<'a> {\n     type Lifted = traits::Environment<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {"}, {"sha": "41d069bf6ae33c28d7d1be549c7681a00d076d1a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35cba9eb0bcefdbb726a241db3ae31f4b5256cfa/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=35cba9eb0bcefdbb726a241db3ae31f4b5256cfa", "patch": "@@ -885,7 +885,8 @@ impl CanonicalUserType<'tcx> {\n /// A user-given type annotation attached to a constant. These arise\n /// from constants that are named via paths, like `Foo::<A>::new` and\n /// so forth.\n-#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable, Lift)]\n pub enum UserType<'tcx> {\n     Ty(Ty<'tcx>),\n \n@@ -894,14 +895,6 @@ pub enum UserType<'tcx> {\n     TypeOf(DefId, UserSubsts<'tcx>),\n }\n \n-EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for UserType<'a> {\n-        type Lifted = UserType<'tcx>;\n-        (UserType::Ty)(ty),\n-        (UserType::TypeOf)(def, substs),\n-    }\n-}\n-\n impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n         let mk = |ty| interners.intern_ty(ty);"}]}