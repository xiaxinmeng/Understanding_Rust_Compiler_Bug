{"sha": "388ff03248f15b6266f8614e1a3f10e28fcbb1e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OGZmMDMyNDhmMTViNjI2NmY4NjE0ZTFhM2YxMGUyOGZjYmIxZTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-29T10:38:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-01T09:22:50Z"}, "message": "create a new `WorkQueue` data structure", "tree": {"sha": "d62788e232cb2e957f83d4f0f2ca42bbcdbaf28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62788e232cb2e957f83d4f0f2ca42bbcdbaf28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/388ff03248f15b6266f8614e1a3f10e28fcbb1e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/388ff03248f15b6266f8614e1a3f10e28fcbb1e3", "html_url": "https://github.com/rust-lang/rust/commit/388ff03248f15b6266f8614e1a3f10e28fcbb1e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/388ff03248f15b6266f8614e1a3f10e28fcbb1e3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1703baf520b8c14f50719c9ffa8036f3b782134", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1703baf520b8c14f50719c9ffa8036f3b782134", "html_url": "https://github.com/rust-lang/rust/commit/a1703baf520b8c14f50719c9ffa8036f3b782134"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "e4d0bc596cba6fb11a41fda148c4939771466377", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/388ff03248f15b6266f8614e1a3f10e28fcbb1e3/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ff03248f15b6266f8614e1a3f10e28fcbb1e3/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=388ff03248f15b6266f8614e1a3f10e28fcbb1e3", "patch": "@@ -77,6 +77,7 @@ pub mod sync;\n pub mod owning_ref;\n pub mod tiny_list;\n pub mod sorted_map;\n+pub mod work_queue;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "b8e8b249bb504018d2f5037ee0072a6eabdeff27", "filename": "src/librustc_data_structures/work_queue.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/388ff03248f15b6266f8614e1a3f10e28fcbb1e3/src%2Flibrustc_data_structures%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388ff03248f15b6266f8614e1a3f10e28fcbb1e3/src%2Flibrustc_data_structures%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fwork_queue.rs?ref=388ff03248f15b6266f8614e1a3f10e28fcbb1e3", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use indexed_set::IdxSetBuf;\n+use indexed_vec::Idx;\n+use std::collections::VecDeque;\n+\n+/// A work queue is a handy data structure for tracking work left to\n+/// do. (For example, basic blocks left to process.) It is basically a\n+/// de-duplicating queue; so attempting to insert X if X is already\n+/// enqueued has no effect. This implementation assumes that the\n+/// elements are dense indices, so it can allocate the queue to size\n+/// and also use a bit set to track occupancy.\n+pub struct WorkQueue<T: Idx> {\n+    deque: VecDeque<T>,\n+    set: IdxSetBuf<T>,\n+}\n+\n+impl<T: Idx> WorkQueue<T> {\n+    /// Create a new work queue with all the elements from (0..len).\n+    #[inline]\n+    pub fn with_all(len: usize) -> Self {\n+        WorkQueue {\n+            deque: (0..len).map(T::new).collect(),\n+            set: IdxSetBuf::new_filled(len),\n+        }\n+    }\n+\n+    /// Create a new work queue that starts empty, where elements range from (0..len).\n+    #[inline]\n+    pub fn with_none(len: usize) -> Self {\n+        WorkQueue {\n+            deque: VecDeque::with_capacity(len),\n+            set: IdxSetBuf::new_empty(len),\n+        }\n+    }\n+\n+    /// Attempt to enqueue `element` in the work queue. Returns false if it was already present.\n+    #[inline]\n+    pub fn insert(&mut self, element: T) -> bool {\n+        if self.set.add(&element) {\n+            self.deque.push_back(element);\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+    /// Attempt to enqueue `element` in the work queue. Returns false if it was already present.\n+    #[inline]\n+    pub fn pop(&mut self) -> Option<T> {\n+        if let Some(element) = self.deque.pop_front() {\n+            self.set.remove(&element);\n+            Some(element)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// True if nothing is enqueued.\n+    #[inline]\n+    pub fn is_empty(&self) -> bool {\n+        self.deque.is_empty()\n+    }\n+}"}]}