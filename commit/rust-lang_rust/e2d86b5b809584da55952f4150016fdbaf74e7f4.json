{"sha": "e2d86b5b809584da55952f4150016fdbaf74e7f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDg2YjViODA5NTg0ZGE1NTk1MmY0MTUwMDE2ZmRiYWY3NGU3ZjQ=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-23T07:49:47Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-10-26T10:02:07Z"}, "message": "Move fixable `filter_next` and `filter_map_next` cases to rustfixed tests", "tree": {"sha": "28afa22f5165e7f9bd29ebd7b6c7132014b0d23f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28afa22f5165e7f9bd29ebd7b6c7132014b0d23f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d86b5b809584da55952f4150016fdbaf74e7f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d86b5b809584da55952f4150016fdbaf74e7f4", "html_url": "https://github.com/rust-lang/rust/commit/e2d86b5b809584da55952f4150016fdbaf74e7f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d86b5b809584da55952f4150016fdbaf74e7f4/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a3ae114858ff971b4cc51b4a43cb1475bd39516", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3ae114858ff971b4cc51b4a43cb1475bd39516", "html_url": "https://github.com/rust-lang/rust/commit/2a3ae114858ff971b4cc51b4a43cb1475bd39516"}], "stats": {"total": 114, "additions": 79, "deletions": 35}, "files": [{"sha": "dbeb2354309c92bb4a66b2288ab2a7ec7ac905e5", "filename": "tests/ui/filter_map_next.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next.rs?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -3,9 +3,6 @@\n fn main() {\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n \n-    let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n-    assert_eq!(element, Some(1));\n-\n     #[rustfmt::skip]\n     let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]\n         .into_iter()"}, {"sha": "45427684d96e1c058ec0c0a25e31e64ed3af2852", "filename": "tests/ui/filter_map_next.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next.stderr?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -1,13 +1,5 @@\n error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n-  --> $DIR/filter_map_next.rs:6:32\n-   |\n-LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `a.iter().find_map(|s| s.parse().ok())`\n-   |\n-   = note: `-D clippy::filter-map-next` implied by `-D warnings`\n-\n-error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n-  --> $DIR/filter_map_next.rs:10:26\n+  --> $DIR/filter_map_next.rs:7:26\n    |\n LL |       let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]\n    |  __________________________^\n@@ -18,6 +10,8 @@ LL | |             if x == 2 {\n LL | |         })\n LL | |         .next();\n    | |_______________^\n+   |\n+   = note: `-D clippy::filter-map-next` implied by `-D warnings`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "c3992d7e92cf37c36d0c5568aa3a462bfcd2278b", "filename": "tests/ui/filter_map_next_fixable.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.fixed?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+#![warn(clippy::all, clippy::pedantic)]\n+\n+fn main() {\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+\n+    let element: Option<i32> = a.iter().find_map(|s| s.parse().ok());\n+    assert_eq!(element, Some(1));\n+}"}, {"sha": "447219a96839181630629af538bd834624f0bb51", "filename": "tests/ui/filter_map_next_fixable.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.rs?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+#![warn(clippy::all, clippy::pedantic)]\n+\n+fn main() {\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+\n+    let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+    assert_eq!(element, Some(1));\n+}"}, {"sha": "6c2530e0379e4fded306cb600956b395a3affb42", "filename": "tests/ui/filter_map_next_fixable.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Ffilter_map_next_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_next_fixable.stderr?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -0,0 +1,10 @@\n+error: called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+  --> $DIR/filter_map_next_fixable.rs:8:32\n+   |\n+LL |     let element: Option<i32> = a.iter().filter_map(|s| s.parse().ok()).next();\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `a.iter().find_map(|s| s.parse().ok())`\n+   |\n+   = note: `-D clippy::filter-map-next` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d93e5b114ecfa7a8933431848efc8a8543f442d8", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -122,16 +122,13 @@ impl Mul<T> for T {\n fn filter_next() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n \n-    // Single-line case.\n-    let _ = v.iter().filter(|&x| *x < 0).next();\n-\n     // Multi-line case.\n     let _ = v.iter().filter(|&x| {\n                                 *x < 0\n                             }\n                    ).next();\n \n-    // Check that hat we don't lint if the caller is not an `Iterator`.\n+    // Check that we don't lint if the caller is not an `Iterator`.\n     let foo = IteratorFalsePositives { foo: 0 };\n     let _ = foo.filter().next();\n }"}, {"sha": "8a281c2dbd25c2ec3feee082f9735bf89dff00f4", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -11,49 +11,43 @@ LL | |     }\n error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n   --> $DIR/methods.rs:126:13\n    |\n-LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `v.iter().find(|&x| *x < 0)`\n-   |\n-   = note: `-D clippy::filter-next` implied by `-D warnings`\n-\n-error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n-  --> $DIR/methods.rs:129:13\n-   |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n LL | |                                 *x < 0\n LL | |                             }\n LL | |                    ).next();\n    | |___________________________^\n+   |\n+   = note: `-D clippy::filter-next` implied by `-D warnings`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:146:22\n+  --> $DIR/methods.rs:143:22\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:147:20\n+  --> $DIR/methods.rs:144:20\n    |\n LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:148:20\n+  --> $DIR/methods.rs:145:20\n    |\n LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:149:22\n+  --> $DIR/methods.rs:146:22\n    |\n LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:152:13\n+  --> $DIR/methods.rs:149:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -63,13 +57,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:158:22\n+  --> $DIR/methods.rs:155:22\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:161:13\n+  --> $DIR/methods.rs:158:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -79,13 +73,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:167:22\n+  --> $DIR/methods.rs:164:22\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:170:13\n+  --> $DIR/methods.rs:167:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -94,5 +88,5 @@ LL | |                                }\n LL | |                    ).is_some();\n    | |______________________________^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "ee7c1b0da6d979cb7d0213574864d4d0833ab2b9", "filename": "tests/ui/methods_fixable.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods_fixable.fixed?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#![warn(clippy::filter_next)]\n+\n+/// Checks implementation of `FILTER_NEXT` lint.\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // Single-line case.\n+    let _ = v.iter().find(|&x| *x < 0);\n+}"}, {"sha": "6d0f1b7bd5147beed87737827d520e45827c7638", "filename": "tests/ui/methods_fixable.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods_fixable.rs?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#![warn(clippy::filter_next)]\n+\n+/// Checks implementation of `FILTER_NEXT` lint.\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // Single-line case.\n+    let _ = v.iter().filter(|&x| *x < 0).next();\n+}"}, {"sha": "70e7c3dea545bbeff7c3f78e4555fd0f2aee8822", "filename": "tests/ui/methods_fixable.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d86b5b809584da55952f4150016fdbaf74e7f4/tests%2Fui%2Fmethods_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods_fixable.stderr?ref=e2d86b5b809584da55952f4150016fdbaf74e7f4", "patch": "@@ -0,0 +1,10 @@\n+error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead.\n+  --> $DIR/methods_fixable.rs:10:13\n+   |\n+LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `v.iter().find(|&x| *x < 0)`\n+   |\n+   = note: `-D clippy::filter-next` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}