{"sha": "afdd148c0388e4900d18cf8a920b3db428d1ba95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZGQxNDhjMDM4OGU0OTAwZDE4Y2Y4YTkyMGIzZGI0MjhkMWJhOTU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-26T23:44:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-26T23:44:57Z"}, "message": "Rollup merge of #78342 - oliviacrain:checkmate-pass, r=Mark-Simulacrum\n\nUse check-pass in single-use-lifetime ui tests\n\nRationale: the `single_use_lifetimes` lint is used during late name resolution, which is within the scope of `check-pass` and does not require codegen or linking.\n\nHelps remove some FIXMES associated with #62277. Additionally tidies touched test files.", "tree": {"sha": "f12bbca04a92b512a2d7024a01f63ca01b110ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f12bbca04a92b512a2d7024a01f63ca01b110ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afdd148c0388e4900d18cf8a920b3db428d1ba95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfl196CRBK7hj4Ov3rIwAAdHIIAHZhyfVgi6DMS7o6V8voxI3p\n3SBaRtDISRGNPeOifTtf/EApYPdlbmp1xHDhAxBJhiMRYMDAq02rKaPG0e/rslxs\n67i3CBEFq1YeDi4Sf81/cYN/aZi65n9kCjVOwz7bmm+TKaeMKydOoCPYh7VNdawa\nUp0aV2KrXzdy/FF5JGbGMTMx7vuZIxfUSLcafh/WVn7GjaCx/IU+cQ2O9zteqhOR\n2NdN9q4PMUsfmeP3VtwWGNcZn7FszmiW4fgEYLGcGBY4BVKGhBNZqQpuA4vGHOi2\nj1Isb5I5bDhaICqnucoZm2R97rlMwWevHIekk7anqaQ5iYbyqsQKa4ZR9Tu7KYg=\n=0v00\n-----END PGP SIGNATURE-----\n", "payload": "tree f12bbca04a92b512a2d7024a01f63ca01b110ec1\nparent 0b72ca6ea6a57c9b3395e42b8340dcbad2cbbf24\nparent cc468c0829dd159a50359441989c06834faa6a00\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603755897 +0900\ncommitter GitHub <noreply@github.com> 1603755897 +0900\n\nRollup merge of #78342 - oliviacrain:checkmate-pass, r=Mark-Simulacrum\n\nUse check-pass in single-use-lifetime ui tests\n\nRationale: the `single_use_lifetimes` lint is used during late name resolution, which is within the scope of `check-pass` and does not require codegen or linking.\n\nHelps remove some FIXMES associated with #62277. Additionally tidies touched test files.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afdd148c0388e4900d18cf8a920b3db428d1ba95", "html_url": "https://github.com/rust-lang/rust/commit/afdd148c0388e4900d18cf8a920b3db428d1ba95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afdd148c0388e4900d18cf8a920b3db428d1ba95/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b72ca6ea6a57c9b3395e42b8340dcbad2cbbf24", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b72ca6ea6a57c9b3395e42b8340dcbad2cbbf24", "html_url": "https://github.com/rust-lang/rust/commit/0b72ca6ea6a57c9b3395e42b8340dcbad2cbbf24"}, {"sha": "cc468c0829dd159a50359441989c06834faa6a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc468c0829dd159a50359441989c06834faa6a00", "html_url": "https://github.com/rust-lang/rust/commit/cc468c0829dd159a50359441989c06834faa6a00"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "7b7ff08da7cac4b587d22700dce1ba8a3cac1729", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-return.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs?ref=afdd148c0388e4900d18cf8a920b3db428d1ba95", "patch": "@@ -5,11 +5,12 @@\n // (Normally, using `'static` would be preferred, but there are\n // times when that is not what you want.)\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n \n-fn b<'a>() -> &'a u32 { // OK: used only in return type\n+// OK: used only in return type\n+fn b<'a>() -> &'a u32 {\n     &22\n }\n "}, {"sha": "9082aa68ed22bede7e699d917134c664546c659d", "filename": "src/test/ui/single-use-lifetime/one-use-in-struct.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs?ref=afdd148c0388e4900d18cf8a920b3db428d1ba95", "patch": "@@ -2,27 +2,26 @@\n // even when they are only used once (since to not use a named\n // lifetime is illegal!)\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n struct Foo<'f> {\n-    data: &'f u32\n+    data: &'f u32,\n }\n \n enum Bar<'f> {\n-    Data(&'f u32)\n+    Data(&'f u32),\n }\n \n-trait Baz<'f> { }\n+trait Baz<'f> {}\n \n // `Derive`d impls shouldn't trigger a warning, either (Issue #53738).\n-\n #[derive(Debug)]\n struct Quux<'a> {\n     priors: &'a u32,\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "f80f3f63c66d920bd6fb747a2559ef178b39f6d9", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-argument-and-return.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs?ref=afdd148c0388e4900d18cf8a920b3db428d1ba95", "patch": "@@ -1,14 +1,15 @@\n // Test that we DO NOT warn when lifetime name is used in\n // both the argument and return.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-fn c<'a>(x: &'a u32) -> &'a u32 { // OK: used twice\n+// OK: used twice\n+fn c<'a>(x: &'a u32) -> &'a u32 {\n     &22\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "51724ebf898884f65600d83d5574a04767848383", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-arguments.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs?ref=afdd148c0388e4900d18cf8a920b3db428d1ba95", "patch": "@@ -1,16 +1,16 @@\n // Test that we DO NOT warn when lifetime name is used multiple\n // arguments, or more than once in a single argument.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-fn c<'a>(x: &'a u32, y: &'a u32) { // OK: used twice\n-}\n+// OK: used twice\n+fn c<'a>(x: &'a u32, y: &'a u32) {}\n \n-fn d<'a>(x: (&'a u32, &'a u32)) { // OK: used twice\n-}\n+// OK: used twice\n+fn d<'a>(x: (&'a u32, &'a u32)) {}\n \n-fn main() { }\n+fn main() {}"}, {"sha": "125a395db3be31076460a8e06ba401785545f7c7", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-impl-header.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs?ref=afdd148c0388e4900d18cf8a920b3db428d1ba95", "patch": "@@ -1,18 +1,17 @@\n // Test that we DO NOT warn for a lifetime used twice in an impl.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n struct Foo<'f> {\n-    data: &'f u32\n+    data: &'f u32,\n }\n \n impl<'f> Foo<'f> {\n-    fn inherent_a(&self, data: &'f u32) {\n-    }\n+    fn inherent_a(&self, data: &'f u32) {}\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "16431a39fd0e558b0f703d28a93d97f1894f4b85", "filename": "src/test/ui/single-use-lifetime/two-uses-in-trait-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd148c0388e4900d18cf8a920b3db428d1ba95/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs?ref=afdd148c0388e4900d18cf8a920b3db428d1ba95", "patch": "@@ -1,14 +1,14 @@\n // Test that we DO NOT warn for a lifetime on an impl used in both\n // header and in an associated type.\n //\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n struct Foo<'f> {\n-    data: &'f u32\n+    data: &'f u32,\n }\n \n impl<'f> Iterator for Foo<'f> {\n@@ -19,4 +19,4 @@ impl<'f> Iterator for Foo<'f> {\n     }\n }\n \n-fn main() { }\n+fn main() {}"}]}