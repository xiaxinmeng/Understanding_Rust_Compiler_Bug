{"sha": "052961b0138b38a9da26e88e3db6aac19e8c070c", "node_id": "C_kwDOAAsO6NoAKDA1Mjk2MWIwMTM4YjM4YTlkYTI2ZTg4ZTNkYjZhYWMxOWU4YzA3MGM", "commit": {"author": {"name": "Axel Cohen", "email": "axel.cohen@eshard.com", "date": "2021-12-20T13:49:04Z"}, "committer": {"name": "Axel Cohen", "email": "axel.cohen@eshard.com", "date": "2021-12-20T13:49:04Z"}, "message": "rustc_codegen_llvm: move should_use_new_llvm_pass_manager function to llvm_util", "tree": {"sha": "1a92569b0e9e0b4c60a7ea04d350c88cbe813c68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a92569b0e9e0b4c60a7ea04d350c88cbe813c68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052961b0138b38a9da26e88e3db6aac19e8c070c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052961b0138b38a9da26e88e3db6aac19e8c070c", "html_url": "https://github.com/rust-lang/rust/commit/052961b0138b38a9da26e88e3db6aac19e8c070c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052961b0138b38a9da26e88e3db6aac19e8c070c/comments", "author": {"login": "eskarn", "id": 94465698, "node_id": "U_kgDOBaFuog", "avatar_url": "https://avatars.githubusercontent.com/u/94465698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eskarn", "html_url": "https://github.com/eskarn", "followers_url": "https://api.github.com/users/eskarn/followers", "following_url": "https://api.github.com/users/eskarn/following{/other_user}", "gists_url": "https://api.github.com/users/eskarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eskarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eskarn/subscriptions", "organizations_url": "https://api.github.com/users/eskarn/orgs", "repos_url": "https://api.github.com/users/eskarn/repos", "events_url": "https://api.github.com/users/eskarn/events{/privacy}", "received_events_url": "https://api.github.com/users/eskarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eskarn", "id": 94465698, "node_id": "U_kgDOBaFuog", "avatar_url": "https://avatars.githubusercontent.com/u/94465698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eskarn", "html_url": "https://github.com/eskarn", "followers_url": "https://api.github.com/users/eskarn/followers", "following_url": "https://api.github.com/users/eskarn/following{/other_user}", "gists_url": "https://api.github.com/users/eskarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/eskarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eskarn/subscriptions", "organizations_url": "https://api.github.com/users/eskarn/orgs", "repos_url": "https://api.github.com/users/eskarn/repos", "events_url": "https://api.github.com/users/eskarn/events{/privacy}", "received_events_url": "https://api.github.com/users/eskarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d1208df8f76a39135574231065e4761859b7d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d1208df8f76a39135574231065e4761859b7d8", "html_url": "https://github.com/rust-lang/rust/commit/75d1208df8f76a39135574231065e4761859b7d8"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "27c08ba5f3c220f2866f5df83f9015d208caeac3", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/052961b0138b38a9da26e88e3db6aac19e8c070c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052961b0138b38a9da26e88e3db6aac19e8c070c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=052961b0138b38a9da26e88e3db6aac19e8c070c", "patch": "@@ -3,7 +3,7 @@ use crate::back::write::{\n };\n use crate::llvm::archive_ro::ArchiveRO;\n use crate::llvm::{self, build_string, False, True};\n-use crate::{LlvmCodegenBackend, ModuleLlvm};\n+use crate::{llvm_util, LlvmCodegenBackend, ModuleLlvm};\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule, ThinShared};\n use rustc_codegen_ssa::back::symbol_export;\n use rustc_codegen_ssa::back::write::{\n@@ -596,7 +596,10 @@ pub(crate) fn run_pass_manager(\n     //      tools/lto/LTOCodeGenerator.cpp\n     debug!(\"running the pass manager\");\n     unsafe {\n-        if write::should_use_new_llvm_pass_manager(cgcx, config) {\n+        if llvm_util::should_use_new_llvm_pass_manager(\n+            &config.new_llvm_pass_manager,\n+            &cgcx.target_arch,\n+        ) {\n             let opt_stage = if thin { llvm::OptStage::ThinLTO } else { llvm::OptStage::FatLTO };\n             let opt_level = config.opt_level.unwrap_or(config::OptLevel::No);\n             write::optimize_with_new_llvm_pass_manager("}, {"sha": "e275ba7d65dc779169f48a3de74c2461e423783c", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/052961b0138b38a9da26e88e3db6aac19e8c070c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052961b0138b38a9da26e88e3db6aac19e8c070c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=052961b0138b38a9da26e88e3db6aac19e8c070c", "patch": "@@ -413,21 +413,6 @@ fn get_pgo_sample_use_path(config: &ModuleConfig) -> Option<CString> {\n         .map(|path_buf| CString::new(path_buf.to_string_lossy().as_bytes()).unwrap())\n }\n \n-pub(crate) fn should_use_new_llvm_pass_manager(\n-    cgcx: &CodegenContext<LlvmCodegenBackend>,\n-    config: &ModuleConfig,\n-) -> bool {\n-    // The new pass manager is enabled by default for LLVM >= 13.\n-    // This matches Clang, which also enables it since Clang 13.\n-\n-    // FIXME: There are some perf issues with the new pass manager\n-    // when targeting s390x, so it is temporarily disabled for that\n-    // arch, see https://github.com/rust-lang/rust/issues/89609\n-    config\n-        .new_llvm_pass_manager\n-        .unwrap_or_else(|| cgcx.target_arch != \"s390x\" && llvm_util::get_version() >= (13, 0, 0))\n-}\n-\n pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n     diag_handler: &Handler,\n@@ -531,7 +516,10 @@ pub(crate) unsafe fn optimize(\n     }\n \n     if let Some(opt_level) = config.opt_level {\n-        if should_use_new_llvm_pass_manager(cgcx, config) {\n+        if llvm_util::should_use_new_llvm_pass_manager(\n+            &config.new_llvm_pass_manager,\n+            &cgcx.target_arch,\n+        ) {\n             let opt_stage = match cgcx.lto {\n                 Lto::Fat => llvm::OptStage::PreLinkFatLTO,\n                 Lto::Thin | Lto::ThinLocal => llvm::OptStage::PreLinkThinLTO,"}, {"sha": "53571e8cb32a17371896ef5319a693afefebac25", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/052961b0138b38a9da26e88e3db6aac19e8c070c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052961b0138b38a9da26e88e3db6aac19e8c070c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=052961b0138b38a9da26e88e3db6aac19e8c070c", "patch": "@@ -415,3 +415,13 @@ pub fn tune_cpu(sess: &Session) -> Option<&str> {\n     let name = sess.opts.debugging_opts.tune_cpu.as_ref()?;\n     Some(handle_native(name))\n }\n+\n+pub(crate) fn should_use_new_llvm_pass_manager(user_opt: &Option<bool>, target_arch: &str) -> bool {\n+    // The new pass manager is enabled by default for LLVM >= 13.\n+    // This matches Clang, which also enables it since Clang 13.\n+\n+    // FIXME: There are some perf issues with the new pass manager\n+    // when targeting s390x, so it is temporarily disabled for that\n+    // arch, see https://github.com/rust-lang/rust/issues/89609\n+    user_opt.unwrap_or_else(|| target_arch != \"s390x\" && llvm_util::get_version() >= (13, 0, 0))\n+}"}]}