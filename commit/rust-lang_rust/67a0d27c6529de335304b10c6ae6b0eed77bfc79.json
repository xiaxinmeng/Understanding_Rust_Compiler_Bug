{"sha": "67a0d27c6529de335304b10c6ae6b0eed77bfc79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YTBkMjdjNjUyOWRlMzM1MzA0YjEwYzZhZTZiMGVlZDc3YmZjNzk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-11T05:45:27Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-11T05:45:27Z"}, "message": "Ensure we walk the root module of the crate", "tree": {"sha": "6cc486b7adfffa096045f75a63adb10b2e4c1267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc486b7adfffa096045f75a63adb10b2e4c1267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a0d27c6529de335304b10c6ae6b0eed77bfc79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a0d27c6529de335304b10c6ae6b0eed77bfc79", "html_url": "https://github.com/rust-lang/rust/commit/67a0d27c6529de335304b10c6ae6b0eed77bfc79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a0d27c6529de335304b10c6ae6b0eed77bfc79/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8d51c2ebe8d89c9cdcf06a9383d6e974efc5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8d51c2ebe8d89c9cdcf06a9383d6e974efc5b6", "html_url": "https://github.com/rust-lang/rust/commit/bb8d51c2ebe8d89c9cdcf06a9383d6e974efc5b6"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "cac1a2e3c5af15a00160791226899cbf9f85a37d", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=67a0d27c6529de335304b10c6ae6b0eed77bfc79", "patch": "@@ -267,7 +267,7 @@ pub struct ModData {\n     pub items: Vec<NodeId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n "}, {"sha": "dd022dee78cba2dddb40c02d516662b7d302de7e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=67a0d27c6529de335304b10c6ae6b0eed77bfc79", "patch": "@@ -1211,6 +1211,33 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n }\n \n impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, D> {\n+    fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, id: NodeId) {\n+        // Since we handle explicit modules ourselves in visit_item, this should\n+        // only get called for the root module of a crate.\n+        assert_eq!(id, ast::CRATE_NODE_ID);\n+\n+        let qualname = format!(\"::{}\", self.tcx.node_path_str(id));\n+\n+        let cm = self.tcx.sess.codemap();\n+        let filename = cm.span_to_filename(span);\n+        self.dumper.mod_data(ModData {\n+            id: id,\n+            name: String::new(),\n+            qualname: qualname,\n+            span: span,\n+            scope: id,\n+            filename: filename,\n+            items: m.items.iter().map(|i| i.id).collect(),\n+            visibility: Visibility::Public,\n+            // TODO Visitor doesn't pass us the attibutes.\n+            docs: String::new(),\n+            sig: None,\n+            // TODO Visitor doesn't pass us the attibutes.\n+            attributes: vec![],\n+        }.lower(self.tcx));\n+        self.nest_scope(id, |v| visit::walk_mod(v, m));\n+    }\n+\n     fn visit_item(&mut self, item: &'l ast::Item) {\n         use syntax::ast::ItemKind::*;\n         self.process_macro_use(item.span, item.id);"}, {"sha": "02441a0587eb6a9ad2596ec72a411d7732ad829c", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=67a0d27c6529de335304b10c6ae6b0eed77bfc79", "patch": "@@ -392,7 +392,7 @@ pub struct ModData {\n     pub items: Vec<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n-    pub sig: Signature,\n+    pub sig: Option<Signature>,\n     pub attributes: Vec<Attribute>,\n }\n \n@@ -410,7 +410,7 @@ impl Lower for data::ModData {\n             items: self.items.into_iter().map(|id| make_def_id(id, &tcx.hir)).collect(),\n             visibility: self.visibility,\n             docs: self.docs,\n-            sig: self.sig.lower(tcx),\n+            sig: self.sig.map(|s| s.lower(tcx)),\n             attributes: self.attributes.lower(tcx),\n         }\n     }"}, {"sha": "49b14f5eca07261471085dc780b89824cbd2de50", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=67a0d27c6529de335304b10c6ae6b0eed77bfc79", "patch": "@@ -293,7 +293,7 @@ impl Into<Option<Def>> for ModData {\n                 parent: None,\n                 decl_id: None,\n                 docs: self.docs,\n-                sig: Some(self.sig.into()),\n+                sig: self.sig.map(|s| s.into()),\n                 attributes: vec![],\n             }),\n             _ => None,"}, {"sha": "eaa0c0825f0e9314282a95e13bee6f4b7218644a", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=67a0d27c6529de335304b10c6ae6b0eed77bfc79", "patch": "@@ -121,7 +121,7 @@ impl<'b, O: DumpOutput + 'b> Dump for JsonDumper<O> {\n             children: data.items.into_iter().map(|id| id_from_def_id(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n-            sig: Some(data.sig.into()),\n+            sig: data.sig.map(|s| s.into()),\n             attributes: data.attributes.into_iter().map(|a| a.into()).collect(),\n         };\n         if def.span.file_name.to_str().unwrap() != def.value {"}, {"sha": "9283c6d7b53808cc6a6c1da4d4eb9d04fba8d8d1", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a0d27c6529de335304b10c6ae6b0eed77bfc79/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=67a0d27c6529de335304b10c6ae6b0eed77bfc79", "patch": "@@ -257,7 +257,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     items: m.items.iter().map(|i| i.id).collect(),\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n-                    sig: self.sig_base(item),\n+                    sig: Some(self.sig_base(item)),\n                     attributes: item.attrs.clone(),\n                 }))\n             }"}]}