{"sha": "21a0d52a85895434ec1ac2f2293b89112bfc0002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYTBkNTJhODU4OTU0MzRlYzFhYzJmMjI5M2I4OTExMmJmYzAwMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-12T21:30:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-12T21:30:07Z"}, "message": "auto merge of #4876 : brson/rust/debuginfo, r=brson\n\nUpdate of #4862", "tree": {"sha": "48b667dd526f67997acf880e660cd33d52ed0d74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b667dd526f67997acf880e660cd33d52ed0d74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21a0d52a85895434ec1ac2f2293b89112bfc0002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21a0d52a85895434ec1ac2f2293b89112bfc0002", "html_url": "https://github.com/rust-lang/rust/commit/21a0d52a85895434ec1ac2f2293b89112bfc0002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21a0d52a85895434ec1ac2f2293b89112bfc0002/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "210fa2d0172c10112196e8fcf640e32ee54944fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/210fa2d0172c10112196e8fcf640e32ee54944fe", "html_url": "https://github.com/rust-lang/rust/commit/210fa2d0172c10112196e8fcf640e32ee54944fe"}, {"sha": "79e9b6d6a13a8634734c85c653b3850427081ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e9b6d6a13a8634734c85c653b3850427081ea3", "html_url": "https://github.com/rust-lang/rust/commit/79e9b6d6a13a8634734c85c653b3850427081ea3"}], "stats": {"total": 191, "additions": 178, "deletions": 13}, "files": [{"sha": "d9f2db8e110994bfb9e1c349b7d97c445cc1805a", "filename": "configure", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a0d52a85895434ec1ac2f2293b89112bfc0002/configure", "raw_url": "https://github.com/rust-lang/rust/raw/21a0d52a85895434ec1ac2f2293b89112bfc0002/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=21a0d52a85895434ec1ac2f2293b89112bfc0002", "patch": "@@ -394,6 +394,7 @@ probe CFG_PDFLATEX         pdflatex\n probe CFG_XETEX            xetex\n probe CFG_LUATEX           luatex\n probe CFG_NODE             nodejs node\n+probe CFG_GDB              gdb\n if [ \"$CFG_OSTYPE\" = \"unknown-linux-gnu\" ]\n then\n     probe CFG_PAXCTL           paxctl /sbin/paxctl\n@@ -619,6 +620,7 @@ do\n     make_dir $h/test/bench\n     make_dir $h/test/perf\n     make_dir $h/test/pretty\n+    make_dir $h/test/debug-info\n     make_dir $h/test/doc-tutorial\n     make_dir $h/test/doc-tutorial-ffi\n     make_dir $h/test/doc-tutorial-macros"}, {"sha": "abe9ba60ecda45ac31f61ccc4d16a42af02529ae", "filename": "mk/tests.mk", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/21a0d52a85895434ec1ac2f2293b89112bfc0002/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/21a0d52a85895434ec1ac2f2293b89112bfc0002/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=21a0d52a85895434ec1ac2f2293b89112bfc0002", "patch": "@@ -103,7 +103,8 @@ cleantestlibs:\n          -name '*.dSYM' -o    \\\n          -name '*.libaux' -o      \\\n          -name '*.out' -o     \\\n-         -name '*.err'        \\\n+         -name '*.err' -o     \\\n+\t -name '*.debugger.script' \\\n          | xargs rm -rf\n \n \n@@ -170,6 +171,7 @@ check-stage$(1)-T-$(2)-H-$(3)-exec:     \t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec\t\t\t\\\n         check-stage$(1)-T-$(2)-H-$(3)-crates-exec                      \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-bench-exec\t\t\t\\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec\n \n@@ -284,6 +286,7 @@ CFAIL_RC := $(wildcard $(S)src/test/compile-fail/*.rc)\n CFAIL_RS := $(wildcard $(S)src/test/compile-fail/*.rs)\n BENCH_RS := $(wildcard $(S)src/test/bench/*.rs)\n PRETTY_RS := $(wildcard $(S)src/test/pretty/*.rs)\n+DEBUGINFO_RS := $(wildcard $(S)src/test/debug-info/*.rs)\n \n # perf tests are the same as bench tests only they run under\n # a performance monitor.\n@@ -296,6 +299,7 @@ CFAIL_TESTS := $(CFAIL_RC) $(CFAIL_RS)\n BENCH_TESTS := $(BENCH_RS)\n PERF_TESTS := $(PERF_RS)\n PRETTY_TESTS := $(PRETTY_RS)\n+DEBUGINFO_TESTS := $(DEBUGINFO_RS)\n \n CTEST_SRC_BASE_rpass = run-pass\n CTEST_BUILD_BASE_rpass = run-pass\n@@ -327,6 +331,15 @@ CTEST_BUILD_BASE_perf = perf\n CTEST_MODE_perf = run-pass\n CTEST_RUNTOOL_perf = $(CTEST_PERF_RUNTOOL)\n \n+CTEST_SRC_BASE_debuginfo = debug-info\n+CTEST_BUILD_BASE_debuginfo = debug-info\n+CTEST_MODE_debuginfo = debug-info\n+CTEST_RUNTOOL_debuginfo = $(CTEST_RUNTOOL)\n+\n+ifeq ($(CFG_GDB),)\n+CTEST_DISABLE_debuginfo = \"no gdb found\"\n+endif\n+\n define DEF_CTEST_VARS\n \n # All the per-stage build rules you might want to call from the\n@@ -349,7 +362,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n         --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X)\t\t\t\\\n         --aux-base $$(S)src/test/auxiliary/                 \\\n         --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n-        --rustcflags \"$$(CFG_RUSTC_FLAGS) --target=$(2)\"\t\\\n+       --rustcflags \"$$(CFG_RUSTC_FLAGS) --target=$(2)\"\t\\\n         $$(CTEST_TESTARGS)\n \n CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n@@ -358,6 +371,7 @@ CTEST_DEPS_rfail_$(1)-T-$(2)-H-$(3) = $$(RFAIL_TESTS)\n CTEST_DEPS_cfail_$(1)-T-$(2)-H-$(3) = $$(CFAIL_TESTS)\n CTEST_DEPS_bench_$(1)-T-$(2)-H-$(3) = $$(BENCH_TESTS)\n CTEST_DEPS_perf_$(1)-T-$(2)-H-$(3) = $$(PERF_TESTS)\n+CTEST_DEPS_debuginfo_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_TESTS)\n \n endef\n \n@@ -377,6 +391,8 @@ CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4) := \\\n \n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n+ifeq ($$(CTEST_DISABLE_$(4)),)\n+\n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n                 $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n@@ -386,9 +402,20 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n                 && touch $$@\n \n+else\n+\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n+                $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n+\t@$$(call E, run $(4): $$<)\n+\t@$$(call E, warning: tests disabled: $$(CTEST_DISABLE_$(4)))\n+\ttouch $$@\n+\n+endif\n+\n endef\n \n-CTEST_NAMES = rpass rpass-full rfail cfail bench perf\n+CTEST_NAMES = rpass rpass-full rfail cfail bench perf debuginfo\n \n $(foreach host,$(CFG_TARGET_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n@@ -496,6 +523,7 @@ TEST_GROUPS = \\\n \tcfail \\\n \tbench \\\n \tperf \\\n+\tdebuginfo \\\n \tdoc \\\n \t$(foreach docname,$(DOC_TEST_NAMES),$(docname)) \\\n \tpretty \\"}, {"sha": "679f9ab93bf085d55d3b6bed06f1fad628a4a26a", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=21a0d52a85895434ec1ac2f2293b89112bfc0002", "patch": "@@ -1,5 +1,5 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n+// Copyright 2012-2013 The Rust Project Developers. See the\n+// COPYRIGHT file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n // Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n@@ -18,6 +18,7 @@ pub enum mode {\n     mode_run_fail,\n     mode_run_pass,\n     mode_pretty,\n+    mode_debug_info,\n }\n \n pub type config = {"}, {"sha": "6d3bfde037216b60d9b907488e599a990488df85", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=21a0d52a85895434ec1ac2f2293b89112bfc0002", "patch": "@@ -41,6 +41,7 @@ use common::mode_run_pass;\n use common::mode_run_fail;\n use common::mode_compile_fail;\n use common::mode_pretty;\n+use common::mode_debug_info;\n use common::mode;\n use util::logv;\n \n@@ -131,6 +132,7 @@ pub fn str_mode(s: ~str) -> mode {\n       ~\"run-fail\" => mode_run_fail,\n       ~\"run-pass\" => mode_run_pass,\n       ~\"pretty\" => mode_pretty,\n+      ~\"debug-info\" => mode_debug_info,\n       _ => die!(~\"invalid mode\")\n     }\n }\n@@ -140,7 +142,8 @@ pub fn mode_str(mode: mode) -> ~str {\n       mode_compile_fail => ~\"compile-fail\",\n       mode_run_fail => ~\"run-fail\",\n       mode_run_pass => ~\"run-pass\",\n-      mode_pretty => ~\"pretty\"\n+      mode_pretty => ~\"pretty\",\n+      mode_debug_info => ~\"debug-info\",\n     }\n }\n "}, {"sha": "5c33c66209a378268c0da929aa9aafe2a84cf45e", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=21a0d52a85895434ec1ac2f2293b89112bfc0002", "patch": "@@ -1,5 +1,5 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n+// Copyright 2012-2013 The Rust Project Developers. See the\n+// COPYRIGHT file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n // Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n@@ -28,7 +28,11 @@ pub struct TestProps {\n     // Modules from aux directory that should be compiled\n     aux_builds: ~[~str],\n     // Environment settings to use during execution\n-    exec_env: ~[(~str,~str)]\n+    exec_env: ~[(~str,~str)],\n+    // Commands to be given to the debugger, when testing debug info\n+    debugger_cmds: ~[~str],\n+    // Lines to check if they appear in the expected debugger output\n+    check_lines: ~[~str],\n }\n \n // Load any test directives embedded in the file\n@@ -38,6 +42,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut exec_env = ~[];\n     let mut compile_flags = None;\n     let mut pp_exact = None;\n+    let mut debugger_cmds = ~[];\n+    let mut check_lines = ~[];\n     for iter_header(testfile) |ln| {\n         match parse_error_pattern(ln) {\n           Some(ep) => error_patterns.push(ep),\n@@ -59,13 +65,25 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         do parse_exec_env(ln).iter |ee| {\n             exec_env.push(*ee);\n         }\n+\n+        match parse_debugger_cmd(ln) {\n+            Some(dc) => debugger_cmds.push(dc),\n+            None => ()\n+        };\n+\n+        match parse_check_line(ln) {\n+            Some(cl) => check_lines.push(cl),\n+            None => ()\n+        };\n     };\n     return TestProps {\n         error_patterns: error_patterns,\n         compile_flags: compile_flags,\n         pp_exact: pp_exact,\n         aux_builds: aux_builds,\n-        exec_env: exec_env\n+        exec_env: exec_env,\n+        debugger_cmds: debugger_cmds,\n+        check_lines: check_lines\n     };\n }\n \n@@ -112,6 +130,14 @@ fn parse_compile_flags(line: ~str) -> Option<~str> {\n     parse_name_value_directive(line, ~\"compile-flags\")\n }\n \n+fn parse_debugger_cmd(line: ~str) -> Option<~str> {\n+    parse_name_value_directive(line, ~\"debugger\")\n+}\n+\n+fn parse_check_line(line: ~str) -> Option<~str> {\n+    parse_name_value_directive(line, ~\"check\")\n+}\n+\n fn parse_exec_env(line: ~str) -> Option<(~str, ~str)> {\n     do parse_name_value_directive(line, ~\"exec-env\").map |nv| {\n         // nv is either FOO or FOO=BAR"}, {"sha": "0f8c8761c427cf0cf1118bd6b6c68971cba1ed72", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=21a0d52a85895434ec1ac2f2293b89112bfc0002", "patch": "@@ -1,5 +1,5 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n+// Copyright 2012-2013 The Rust Project Developers. See the\n+// COPYRIGHT file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n // Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n@@ -39,11 +39,13 @@ pub fn run(config: config, testfile: ~str) {\n     let testfile = Path(testfile);\n     debug!(\"running %s\", testfile.to_str());\n     let props = load_props(&testfile);\n+    debug!(\"loaded props\");\n     match config.mode {\n       mode_compile_fail => run_cfail_test(config, props, &testfile),\n       mode_run_fail => run_rfail_test(config, props, &testfile),\n       mode_run_pass => run_rpass_test(config, props, &testfile),\n-      mode_pretty => run_pretty_test(config, props, &testfile)\n+      mode_pretty => run_pretty_test(config, props, &testfile),\n+      mode_debug_info => run_debuginfo_test(config, props, &testfile)\n     }\n }\n \n@@ -224,6 +226,55 @@ actual:\\n\\\n     }\n }\n \n+fn run_debuginfo_test(config: config, props: TestProps, testfile: &Path) {\n+    // compile test file (it shoud have 'compile-flags:-g' in the header)\n+    let mut ProcRes = compile_test(config, props, testfile);\n+    if ProcRes.status != 0 {\n+        fatal_ProcRes(~\"compilation failed!\", ProcRes);\n+    }\n+\n+    // write debugger script\n+    let script_str = str::append(str::connect(props.debugger_cmds, \"\\n\"),\n+                                 ~\"\\nquit\\n\");\n+    debug!(\"script_str = %s\", script_str);\n+    dump_output_file(config, testfile, script_str, ~\"debugger.script\");\n+\n+    // run debugger script with gdb\n+    #[cfg(windows)]\n+    fn debugger() -> ~str { ~\"gdb.exe\" }\n+    #[cfg(unix)]\n+    fn debugger() -> ~str { ~\"gdb\" }\n+    let debugger_script = make_out_name(config, testfile, ~\"debugger.script\");\n+    let debugger_opts = ~[~\"-quiet\", ~\"-batch\", ~\"-nx\",\n+                          ~\"-command=\" + debugger_script.to_str(),\n+                          make_exe_name(config, testfile).to_str()];\n+    let ProcArgs = ProcArgs {prog: debugger(), args: debugger_opts};\n+    ProcRes = compose_and_run(config, testfile, ProcArgs, ~[], ~\"\", None);\n+    if ProcRes.status != 0 {\n+        fatal(~\"gdb failed to execute\");\n+    }\n+\n+    let num_check_lines = vec::len(props.check_lines);\n+    if num_check_lines > 0 {\n+        // check if each line in props.check_lines appears in the\n+        // output (in order)\n+        let mut i = 0u;\n+        for str::lines(ProcRes.stdout).each |line| {\n+            if props.check_lines[i].trim() == line.trim() {\n+                i += 1u;\n+            }\n+            if i == num_check_lines {\n+                // all lines checked\n+                break;\n+            }\n+        }\n+        if i != num_check_lines {\n+            fatal(fmt!(\"line not found in debugger output: %s\",\n+                       props.check_lines[i]));\n+        }\n+    }\n+}\n+\n fn check_error_patterns(props: TestProps,\n                         testfile: &Path,\n                         ProcRes: ProcRes) {"}, {"sha": "51bb177601ae11c608b429648966ab58e21c5f28", "filename": "src/test/debug-info/simple.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Ftest%2Fdebug-info%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Ftest%2Fdebug-info%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple.rs?ref=21a0d52a85895434ec1ac2f2293b89112bfc0002", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-test\n+// compile-flags:-g\n+// debugger:break 20\n+// debugger:run\n+// debugger:print x\n+// check:$1 = 42\n+\n+fn main() {\n+    let x = 42;\n+    debug!(\"The answer is %d\", x);\n+}"}, {"sha": "b313291447794af7a7caa4d2912b5ae616aa9f28", "filename": "src/test/debug-info/struct.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Ftest%2Fdebug-info%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a0d52a85895434ec1ac2f2293b89112bfc0002/src%2Ftest%2Fdebug-info%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct.rs?ref=21a0d52a85895434ec1ac2f2293b89112bfc0002", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-test\n+// compile-flags:-g\n+// debugger:break 32\n+// debugger:run\n+// debugger:print pair\n+// check:$1 = {\n+// check:x = 1,\n+// check:y = 2,\n+// check:}\n+// debugger:print pair.x\n+// check:$2 = 1\n+// debugger:print pair.y\n+// check:$3 = 2\n+\n+struct Pair {\n+    x: int,\n+    y: int\n+}\n+\n+fn main() {\n+    let pair = Pair { x: 1, y: 2 };\n+    debug!(\"x = %d, y = %d\", pair.x, pair.y);\n+}"}]}