{"sha": "f93bef35f35579b60c8b919844a2021f3f035daa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5M2JlZjM1ZjM1NTc5YjYwYzhiOTE5ODQ0YTIwMjFmM2YwMzVkYWE=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-06-29T22:08:50Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-07-24T17:37:36Z"}, "message": "Move vector implementation", "tree": {"sha": "b932b8982bac289b92b813ada32c8b4e59926057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b932b8982bac289b92b813ada32c8b4e59926057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f93bef35f35579b60c8b919844a2021f3f035daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f93bef35f35579b60c8b919844a2021f3f035daa", "html_url": "https://github.com/rust-lang/rust/commit/f93bef35f35579b60c8b919844a2021f3f035daa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f93bef35f35579b60c8b919844a2021f3f035daa/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529ffe05d6111afe110226ba6ebc577d1414d452", "url": "https://api.github.com/repos/rust-lang/rust/commits/529ffe05d6111afe110226ba6ebc577d1414d452", "html_url": "https://github.com/rust-lang/rust/commit/529ffe05d6111afe110226ba6ebc577d1414d452"}], "stats": {"total": 133, "additions": 33, "deletions": 100}, "files": [{"sha": "2f0f851a92f172ed3875b0d6e390b7db25ec65c6", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93bef35f35579b60c8b919844a2021f3f035daa/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93bef35f35579b60c8b919844a2021f3f035daa/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=f93bef35f35579b60c8b919844a2021f3f035daa", "patch": "@@ -12,8 +12,6 @@\n #![unstable(feature = \"portable_simd\", issue = \"86656\")]\n //! Portable SIMD module.\n \n-#[macro_use]\n-mod first;\n #[macro_use]\n mod permute;\n #[macro_use]"}, {"sha": "2bc7c1cd2b741cf6768328dad64ce1f47af62712", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 3, "deletions": 98, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f93bef35f35579b60c8b919844a2021f3f035daa/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93bef35f35579b60c8b919844a2021f3f035daa/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=f93bef35f35579b60c8b919844a2021f3f035daa", "patch": "@@ -1,3 +1,6 @@\n+#[macro_use]\n+mod vector_impl;\n+\n mod float;\n mod int;\n mod uint;\n@@ -31,101 +34,3 @@ pub trait Vector: sealed::Sealed {\n     #[must_use]\n     fn splat(val: Self::Scalar) -> Self;\n }\n-\n-macro_rules! impl_vector_for {\n-    ($simd:ident {type Scalar = $scalar:ident;}) => {\n-        impl_vector_for! { $simd<1> { type Scalar = $scalar; type BitMask = u8; } }\n-        impl_vector_for! { $simd<2> { type Scalar = $scalar; type BitMask = u8; } }\n-        impl_vector_for! { $simd<4> { type Scalar = $scalar; type BitMask = u8; } }\n-        impl_vector_for! { $simd<8> { type Scalar = $scalar; type BitMask = u8; } }\n-        impl_vector_for! { $simd<16> { type Scalar = $scalar; type BitMask = u16; } }\n-        impl_vector_for! { $simd<32> { type Scalar = $scalar; type BitMask = u32; } }\n-    };\n-    ($simd:ident<$lanes:literal> {type Scalar = $scalar:ident; type BitMask = $bitmask:ident; }) => {\n-        impl sealed::Sealed for $simd<$lanes> {}\n-\n-        impl Vector for $simd<$lanes> {\n-            type Scalar = $scalar;\n-            const LANES: usize = $lanes;\n-\n-            type BitMask = $bitmask;\n-\n-            #[inline]\n-            fn splat(val: Self::Scalar) -> Self {\n-                Self::splat(val)\n-            }\n-        }\n-    };\n-}\n-\n-impl_vector_for! {\n-    SimdUsize {\n-        type Scalar = usize;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdIsize {\n-        type Scalar = isize;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdI8 {\n-        type Scalar = i8;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdI16 {\n-        type Scalar = i16;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdI32 {\n-        type Scalar = i32;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdI64 {\n-        type Scalar = i64;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdU8 {\n-        type Scalar = u8;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdU16 {\n-        type Scalar = u16;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdU32 {\n-        type Scalar = u32;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdU64 {\n-        type Scalar = u64;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdF32 {\n-        type Scalar = f32;\n-    }\n-}\n-\n-impl_vector_for! {\n-    SimdF64 {\n-        type Scalar = f64;\n-    }\n-}"}, {"sha": "e166a93670b8616806767ea9f1e43854c70cbc74", "filename": "crates/core_simd/src/vector/vector_impl.rs", "status": "renamed", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f93bef35f35579b60c8b919844a2021f3f035daa/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvector_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93bef35f35579b60c8b919844a2021f3f035daa/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvector_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fvector_impl.rs?ref=f93bef35f35579b60c8b919844a2021f3f035daa", "patch": "@@ -1,6 +1,36 @@\n+macro_rules! impl_vector_trait {\n+    ($simd:ident {type Scalar = $scalar:ty;}) => {\n+        impl_vector_trait! { $simd<1> { type Scalar = $scalar; type BitMask = u8; } }\n+        impl_vector_trait! { $simd<2> { type Scalar = $scalar; type BitMask = u8; } }\n+        impl_vector_trait! { $simd<4> { type Scalar = $scalar; type BitMask = u8; } }\n+        impl_vector_trait! { $simd<8> { type Scalar = $scalar; type BitMask = u8; } }\n+        impl_vector_trait! { $simd<16> { type Scalar = $scalar; type BitMask = u16; } }\n+        impl_vector_trait! { $simd<32> { type Scalar = $scalar; type BitMask = u32; } }\n+    };\n+    ($simd:ident<$lanes:literal> {type Scalar = $scalar:ty; type BitMask = $bitmask:ident; }) => {\n+        impl crate::vector::sealed::Sealed for $simd<$lanes> {}\n+\n+        impl crate::vector::Vector for $simd<$lanes> {\n+            type Scalar = $scalar;\n+            const LANES: usize = $lanes;\n+\n+            type BitMask = $bitmask;\n+\n+            #[inline]\n+            fn splat(val: Self::Scalar) -> Self {\n+                Self::splat(val)\n+            }\n+        }\n+    };\n+}\n+\n /// Implements common traits on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n macro_rules! impl_vector {\n     { $name:ident, $type:ty } => {\n+        impl_vector_trait! {\n+            $name { type Scalar = $type; }\n+        }\n+\n         impl<const LANES: usize> $name<LANES> where Self: crate::Vector {\n             /// Construct a SIMD vector by setting all lanes to the given value.\n             pub const fn splat(value: $type) -> Self {", "previous_filename": "crates/core_simd/src/first.rs"}]}