{"sha": "c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOGVhMTcyNGIwYjIxYTBlZjgxZWUyZDY5NzZiMGEzY2YyZGIwNDM=", "commit": {"author": {"name": "r00ster91", "email": "r00ster91@protonmail.com", "date": "2021-06-04T12:32:47Z"}, "committer": {"name": "r00ster91", "email": "r00ster91@protonmail.com", "date": "2021-06-04T12:32:47Z"}, "message": "Replace some std::iter::repeat with str::repeat", "tree": {"sha": "29bb9101769ba442a6de51e0430674d077a51fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29bb9101769ba442a6de51e0430674d077a51fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043", "html_url": "https://github.com/rust-lang/rust/commit/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043/comments", "author": {"login": "r00ster91", "id": 35064754, "node_id": "MDQ6VXNlcjM1MDY0NzU0", "avatar_url": "https://avatars.githubusercontent.com/u/35064754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r00ster91", "html_url": "https://github.com/r00ster91", "followers_url": "https://api.github.com/users/r00ster91/followers", "following_url": "https://api.github.com/users/r00ster91/following{/other_user}", "gists_url": "https://api.github.com/users/r00ster91/gists{/gist_id}", "starred_url": "https://api.github.com/users/r00ster91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r00ster91/subscriptions", "organizations_url": "https://api.github.com/users/r00ster91/orgs", "repos_url": "https://api.github.com/users/r00ster91/repos", "events_url": "https://api.github.com/users/r00ster91/events{/privacy}", "received_events_url": "https://api.github.com/users/r00ster91/received_events", "type": "User", "site_admin": false}, "committer": {"login": "r00ster91", "id": 35064754, "node_id": "MDQ6VXNlcjM1MDY0NzU0", "avatar_url": "https://avatars.githubusercontent.com/u/35064754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r00ster91", "html_url": "https://github.com/r00ster91", "followers_url": "https://api.github.com/users/r00ster91/followers", "following_url": "https://api.github.com/users/r00ster91/following{/other_user}", "gists_url": "https://api.github.com/users/r00ster91/gists{/gist_id}", "starred_url": "https://api.github.com/users/r00ster91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r00ster91/subscriptions", "organizations_url": "https://api.github.com/users/r00ster91/orgs", "repos_url": "https://api.github.com/users/r00ster91/repos", "events_url": "https://api.github.com/users/r00ster91/events{/privacy}", "received_events_url": "https://api.github.com/users/r00ster91/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f5a198ffc0b624783a81e57e1d29c69283949c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5a198ffc0b624783a81e57e1d29c69283949c1", "html_url": "https://github.com/rust-lang/rust/commit/6f5a198ffc0b624783a81e57e1d29c69283949c1"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "64efd3ea8b62943175c01034c6e94f985d5417cb", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043", "patch": "@@ -858,7 +858,7 @@ fn missing_items_err(\n     // Obtain the level of indentation ending in `sugg_sp`.\n     let indentation = tcx.sess.source_map().span_to_margin(sugg_sp).unwrap_or(0);\n     // Make the whitespace that will make the suggestion have the right indentation.\n-    let padding: String = std::iter::repeat(\" \").take(indentation).collect();\n+    let padding: String = \" \".repeat(indentation);\n \n     for trait_item in missing_items {\n         let snippet = suggestion_signature(&trait_item, tcx);"}, {"sha": "1b90727fbc0a66f1a706130a91a43476a9773c8d", "filename": "src/test/ui/issues/issue-20644.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs?ref=c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043", "patch": "@@ -19,9 +19,7 @@ use std::path::Path;\n \n pub fn parse_summary<R: Read>(_: R, _: &Path) {\n      let path_from_root = Path::new(\"\");\n-     Path::new(&iter::repeat(\"../\")\n-               .take(path_from_root.components().count() - 1)\n-               .collect::<String>());\n+     Path::new(&\"../\".repeat(path_from_root.components().count() - 1));\n  }\n \n fn foo() {"}, {"sha": "aca96e06ef2e779c9be14100770758b1ed88781e", "filename": "src/tools/clippy/clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043", "patch": "@@ -7,7 +7,6 @@ use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for calls of `mem::discriminant()` on a non-enum type.\n@@ -67,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for MemDiscriminant {\n                                 }\n                             }\n \n-                            let derefs: String = iter::repeat('*').take(derefs_needed).collect();\n+                            let derefs = \"*\".repeat(derefs_needed);\n                             diag.span_suggestion(\n                                 param.span,\n                                 \"try dereferencing\","}, {"sha": "1a32af5dc7a386fdd5e03c3832e8c105d6fc47f8", "filename": "src/tools/clippy/clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=c08ea1724b0b21a0ef81ee2d6976b0a3cf2db043", "patch": "@@ -8,7 +8,6 @@ use rustc_hir::{BindingAnnotation, Expr, ExprKind, MatchSource, Node, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, adjustment::Adjust};\n use rustc_span::symbol::{sym, Symbol};\n-use std::iter;\n \n use super::CLONE_DOUBLE_REF;\n use super::CLONE_ON_COPY;\n@@ -54,8 +53,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                             ty = inner;\n                             n += 1;\n                         }\n-                        let refs: String = iter::repeat('&').take(n + 1).collect();\n-                        let derefs: String = iter::repeat('*').take(n).collect();\n+                        let refs = \"&\".repeat(n + 1);\n+                        let derefs = \"*\".repeat(n);\n                         let explicit = format!(\"<{}{}>::clone({})\", refs, ty, snip);\n                         diag.span_suggestion(\n                             expr.span,"}]}