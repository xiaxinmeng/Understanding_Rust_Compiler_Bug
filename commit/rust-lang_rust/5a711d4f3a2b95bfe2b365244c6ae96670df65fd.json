{"sha": "5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "node_id": "C_kwDOAAsO6NoAKDVhNzExZDRmM2EyYjk1YmZlMmIzNjUyNDRjNmFlOTY2NzBkZjY1ZmQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-11T09:39:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-11T09:39:12Z"}, "message": "Merge #11210\n\n11210: feat: Deprioritize ops methods in completion r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10593\r\n\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "616098ea9e28aae0e3417299f351db1c1a71aeb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/616098ea9e28aae0e3417299f351db1c1a71aeb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh3VBACRBK7hj4Ov3rIwAAOqMIAJdReFfIZAbtbuACGGQ19gTM\n2fMALb1wX2vqA6arHLndr8VHn7s/Xm53gvwMaOONG26CMjPYWqYDJemamWIuzoCN\novLYpY/wakJsz9yd9ia6tsFHN2fXrCuLZDMeVqokK4CErNoXHYDVxMIOJX7nK+iT\nC99rfBfJpEkOrFToq8zN3NXXO3ew521Jjufg/aAWpQQKOefSM6r/HeT2rI7laoEf\nD2klukj/tKQ0Abj6x6zg9Y3ig3/9JYdBsRego5CbggxYbyNqCXEYW535pXhr3PBo\nfWec2q2zmUolR7ZWFSmuhmmaeYTsyT5vba7VDviDM2E3mvteBvrjt9NTB+Ikz+I=\n=+1X3\n-----END PGP SIGNATURE-----\n", "payload": "tree 616098ea9e28aae0e3417299f351db1c1a71aeb4\nparent 85bcca6b37380dcf93c4695daa4c5e1f0f616e8a\nparent 4901ea3eef1aa01a231f76767fa5ee19e7f76cd9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641893952 +0000\ncommitter GitHub <noreply@github.com> 1641893952 +0000\n\nMerge #11210\n\n11210: feat: Deprioritize ops methods in completion r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10593\r\n\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "html_url": "https://github.com/rust-lang/rust/commit/5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85bcca6b37380dcf93c4695daa4c5e1f0f616e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/85bcca6b37380dcf93c4695daa4c5e1f0f616e8a", "html_url": "https://github.com/rust-lang/rust/commit/85bcca6b37380dcf93c4695daa4c5e1f0f616e8a"}, {"sha": "4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "html_url": "https://github.com/rust-lang/rust/commit/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9"}], "stats": {"total": 168, "additions": 130, "deletions": 38}, "files": [{"sha": "2c91a11e152781284c79542da1ab96f112fe2282", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "patch": "@@ -1610,6 +1610,12 @@ pub struct Trait {\n }\n \n impl Trait {\n+    pub fn lang(db: &dyn HirDatabase, krate: Crate, name: &Name) -> Option<Trait> {\n+        db.lang_item(krate.into(), name.to_smol_str())\n+            .and_then(LangItemTarget::as_trait)\n+            .map(Into::into)\n+    }\n+\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n         Module { id: self.id.lookup(db.upcast()).container }\n     }"}, {"sha": "b4ddfba0d05574eb702e4156997fb83c9e3974df", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "patch": "@@ -255,6 +255,10 @@ impl Attrs {\n         }\n     }\n \n+    pub fn lang(&self) -> Option<&SmolStr> {\n+        self.by_key(\"lang\").string_value()\n+    }\n+\n     pub fn docs(&self) -> Option<Documentation> {\n         let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_deref()? {\n             AttrInput::Literal(s) => Some(s),\n@@ -775,20 +779,20 @@ impl Attr {\n }\n \n #[derive(Debug, Clone, Copy)]\n-pub struct AttrQuery<'a> {\n-    attrs: &'a Attrs,\n+pub struct AttrQuery<'attr> {\n+    attrs: &'attr Attrs,\n     key: &'static str,\n }\n \n-impl<'a> AttrQuery<'a> {\n-    pub fn tt_values(self) -> impl Iterator<Item = &'a Subtree> {\n+impl<'attr> AttrQuery<'attr> {\n+    pub fn tt_values(self) -> impl Iterator<Item = &'attr Subtree> {\n         self.attrs().filter_map(|attr| match attr.input.as_deref()? {\n             AttrInput::TokenTree(it, _) => Some(it),\n             _ => None,\n         })\n     }\n \n-    pub fn string_value(self) -> Option<&'a SmolStr> {\n+    pub fn string_value(self) -> Option<&'attr SmolStr> {\n         self.attrs().find_map(|attr| match attr.input.as_deref()? {\n             AttrInput::Literal(it) => Some(it),\n             _ => None,\n@@ -799,7 +803,7 @@ impl<'a> AttrQuery<'a> {\n         self.attrs().next().is_some()\n     }\n \n-    pub fn attrs(self) -> impl Iterator<Item = &'a Attr> + Clone {\n+    pub fn attrs(self) -> impl Iterator<Item = &'attr Attr> + Clone {\n         let key = self.key;\n         self.attrs\n             .iter()"}, {"sha": "8778501845876d5aaed04881da7d37eceea3a2ee", "filename": "crates/hir_def/src/lang_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fhir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fhir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flang_item.rs?ref=5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "patch": "@@ -144,8 +144,8 @@ impl LangItems {\n         let _p = profile::span(\"lang_item_query\");\n         let lang_items = db.crate_lang_items(start_crate);\n         let start_crate_target = lang_items.items.get(&item);\n-        if let Some(target) = start_crate_target {\n-            return Some(*target);\n+        if let Some(&target) = start_crate_target {\n+            return Some(target);\n         }\n         db.crate_graph()[start_crate]\n             .dependencies"}, {"sha": "4dcda0fcdc88779fffa994f204687401c1734e7a", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "patch": "@@ -309,39 +309,45 @@ pub mod known {\n         wrapping_mul,\n         wrapping_sub,\n         // known methods of lang items\n-        add,\n-        mul,\n-        sub,\n-        div,\n-        rem,\n-        shl,\n-        shr,\n-        bitxor,\n-        bitor,\n-        bitand,\n-        add_assign,\n-        mul_assign,\n-        sub_assign,\n-        div_assign,\n-        rem_assign,\n-        shl_assign,\n-        shr_assign,\n-        bitxor_assign,\n-        bitor_assign,\n-        bitand_assign,\n         eq,\n         ne,\n         ge,\n         gt,\n         le,\n         lt,\n         // lang items\n-        not,\n-        neg,\n+        add_assign,\n+        add,\n+        bitand_assign,\n+        bitand,\n+        bitor_assign,\n+        bitor,\n+        bitxor_assign,\n+        bitxor,\n+        deref_mut,\n+        deref,\n+        div_assign,\n+        div,\n+        fn_mut,\n+        fn_once,\n         future_trait,\n-        owned_box,\n         index,\n-        partial_ord\n+        index_mut,\n+        mul_assign,\n+        mul,\n+        neg,\n+        not,\n+        owned_box,\n+        partial_ord,\n+        r#fn,\n+        rem_assign,\n+        rem,\n+        shl_assign,\n+        shl,\n+        shr_assign,\n+        shr,\n+        sub_assign,\n+        sub,\n     );\n \n     // self/Self cannot be used as an identifier"}, {"sha": "0baca08ca99d4b5118dd17fbf262bd105f255122", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "patch": "@@ -3,7 +3,7 @@\n use std::iter;\n \n use base_db::SourceDatabaseExt;\n-use hir::{Local, Name, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo};\n+use hir::{HasAttrs, Local, Name, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo};\n use ide_db::{\n     active_parameter::ActiveParameter,\n     base_db::{FilePosition, SourceDatabase},\n@@ -85,6 +85,7 @@ pub(crate) enum ParamKind {\n     Function,\n     Closure,\n }\n+\n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n@@ -120,6 +121,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) lifetime_ctx: Option<LifetimeContext>,\n     pub(super) pattern_ctx: Option<PatternContext>,\n     pub(super) path_context: Option<PathCompletionContext>,\n+\n     pub(super) locals: Vec<(Name, Local)>,\n \n     no_completion_required: bool,\n@@ -308,6 +310,14 @@ impl<'a> CompletionContext<'a> {\n         self.token.kind() == BANG && self.token.parent().map_or(false, |it| it.kind() == MACRO_CALL)\n     }\n \n+    /// Whether the given trait is an operator trait or not.\n+    pub(crate) fn is_ops_trait(&self, trait_: hir::Trait) -> bool {\n+        match trait_.attrs(self.db).lang() {\n+            Some(lang) => OP_TRAIT_LANG_NAMES.contains(&lang.as_str()),\n+            None => false,\n+        }\n+    }\n+\n     /// A version of [`SemanticsScope::process_all_names`] that filters out `#[doc(hidden)]` items.\n     pub(crate) fn process_all_names(&self, f: &mut dyn FnMut(Name, ScopeDef)) {\n         let _p = profile::span(\"CompletionContext::process_all_names\");\n@@ -388,6 +398,7 @@ impl<'a> CompletionContext<'a> {\n                 locals.push((name, local));\n             }\n         });\n+\n         let mut ctx = CompletionContext {\n             sema,\n             scope,\n@@ -889,6 +900,7 @@ fn pattern_context_for(pat: ast::Pat) -> PatternContext {\n         });\n     PatternContext { refutability, is_param, has_type_ascription }\n }\n+\n fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Option<N> {\n     syntax.covering_element(range).ancestors().find_map(N::cast)\n }\n@@ -915,6 +927,37 @@ fn has_ref(token: &SyntaxToken) -> bool {\n     token.kind() == T![&]\n }\n \n+const OP_TRAIT_LANG_NAMES: &[&str] = &[\n+    \"add_assign\",\n+    \"add\",\n+    \"bitand_assign\",\n+    \"bitand\",\n+    \"bitor_assign\",\n+    \"bitor\",\n+    \"bitxor_assign\",\n+    \"bitxor\",\n+    \"deref_mut\",\n+    \"deref\",\n+    \"div_assign\",\n+    \"div\",\n+    \"fn_mut\",\n+    \"fn_once\",\n+    \"fn\",\n+    \"index_mut\",\n+    \"index\",\n+    \"mul_assign\",\n+    \"mul\",\n+    \"neg\",\n+    \"not\",\n+    \"rem_assign\",\n+    \"rem\",\n+    \"shl_assign\",\n+    \"shl\",\n+    \"shr_assign\",\n+    \"shr\",\n+    \"sub\",\n+    \"sub\",\n+];\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};"}, {"sha": "8ac4291078a56f58a7a2227a5ae54b829f653db0", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "patch": "@@ -139,6 +139,8 @@ pub struct CompletionRelevance {\n     /// }\n     /// ```\n     pub is_local: bool,\n+    /// Set for method completions of the `core::ops` family.\n+    pub is_op_method: bool,\n     /// This is set in cases like these:\n     ///\n     /// ```\n@@ -175,6 +177,7 @@ pub enum CompletionRelevanceTypeMatch {\n }\n \n impl CompletionRelevance {\n+    const BASE_LINE: u32 = 1;\n     /// Provides a relevance score. Higher values are more relevant.\n     ///\n     /// The absolute value of the relevance score is not meaningful, for\n@@ -185,7 +188,7 @@ impl CompletionRelevance {\n     /// See is_relevant if you need to make some judgement about score\n     /// in an absolute sense.\n     pub fn score(&self) -> u32 {\n-        let mut score = 0;\n+        let mut score = Self::BASE_LINE;\n \n         if self.exact_name_match {\n             score += 1;\n@@ -198,6 +201,9 @@ impl CompletionRelevance {\n         if self.is_local {\n             score += 1;\n         }\n+        if self.is_op_method {\n+            score -= 1;\n+        }\n         if self.exact_postfix_snippet_match {\n             score += 100;\n         }\n@@ -208,7 +214,7 @@ impl CompletionRelevance {\n     /// some threshold such that we think it is especially likely\n     /// to be relevant.\n     pub fn is_relevant(&self) -> bool {\n-        self.score() > 0\n+        self.score() > (Self::BASE_LINE + 1)\n     }\n }\n \n@@ -558,6 +564,7 @@ mod tests {\n         // This test asserts that the relevance score for these items is ascending, and\n         // that any items in the same vec have the same score.\n         let expected_relevance_order = vec![\n+            vec![CompletionRelevance { is_op_method: true, ..CompletionRelevance::default() }],\n             vec![CompletionRelevance::default()],\n             vec![\n                 CompletionRelevance { exact_name_match: true, ..CompletionRelevance::default() },\n@@ -588,10 +595,8 @@ mod tests {\n                 ..CompletionRelevance::default()\n             }],\n             vec![CompletionRelevance {\n-                exact_name_match: false,\n-                type_match: None,\n-                is_local: false,\n                 exact_postfix_snippet_match: true,\n+                ..CompletionRelevance::default()\n             }],\n         ];\n "}, {"sha": "15dacc8e4624eded8b5f90a8ae2d22f63405e17e", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "patch": "@@ -400,6 +400,7 @@ mod tests {\n                 (relevance.exact_name_match, \"name\"),\n                 (relevance.is_local, \"local\"),\n                 (relevance.exact_postfix_snippet_match, \"snippet\"),\n+                (relevance.is_op_method, \"op_method\"),\n             ]\n             .into_iter()\n             .filter_map(|(cond, desc)| if cond { Some(desc) } else { None })\n@@ -580,6 +581,7 @@ fn main() { let _: m::Spam = S$0 }\n                                 Exact,\n                             ),\n                             is_local: false,\n+                            is_op_method: false,\n                             exact_postfix_snippet_match: false,\n                         },\n                         trigger_call_info: true,\n@@ -600,6 +602,7 @@ fn main() { let _: m::Spam = S$0 }\n                                 Exact,\n                             ),\n                             is_local: false,\n+                            is_op_method: false,\n                             exact_postfix_snippet_match: false,\n                         },\n                     },\n@@ -685,6 +688,7 @@ fn foo() { A { the$0 } }\n                                 CouldUnify,\n                             ),\n                             is_local: false,\n+                            is_op_method: false,\n                             exact_postfix_snippet_match: false,\n                         },\n                     },\n@@ -1349,6 +1353,23 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn op_method_relevances() {\n+        check_relevance(\n+            r#\"\n+#[lang = \"sub\"]\n+trait Sub {\n+    fn sub(self, other: Self) -> Self { self }\n+}\n+impl Sub for u32 {}\n+fn foo(a: u32) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                me sub(\u2026) (as Sub) [op_method]\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn struct_field_method_ref() {\n         check_kinds("}, {"sha": "fc2cb933db2e4be5deafbdcb03b66b5155ee9936", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a711d4f3a2b95bfe2b365244c6ae96670df65fd/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=5a711d4f3a2b95bfe2b365244c6ae96670df65fd", "patch": "@@ -70,6 +70,13 @@ fn render(\n     item.set_relevance(CompletionRelevance {\n         type_match: compute_type_match(completion, &ret_type),\n         exact_name_match: compute_exact_name_match(completion, &call),\n+        is_op_method: match func_type {\n+            FuncType::Method(_) => func\n+                .as_assoc_item(ctx.db())\n+                .and_then(|trait_| trait_.containing_trait_or_trait_impl(ctx.db()))\n+                .map_or(false, |trait_| completion.is_ops_trait(trait_)),\n+            _ => false,\n+        },\n         ..CompletionRelevance::default()\n     });\n "}]}