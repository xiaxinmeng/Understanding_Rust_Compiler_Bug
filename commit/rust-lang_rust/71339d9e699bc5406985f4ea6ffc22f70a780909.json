{"sha": "71339d9e699bc5406985f4ea6ffc22f70a780909", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMzM5ZDllNjk5YmM1NDA2OTg1ZjRlYTZmZmMyMmY3MGE3ODA5MDk=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-10T23:46:16Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-11T05:00:48Z"}, "message": "Pipe code cleanup", "tree": {"sha": "dbd765af920256cac5b733c1abdd3d4417f0244b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd765af920256cac5b733c1abdd3d4417f0244b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71339d9e699bc5406985f4ea6ffc22f70a780909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71339d9e699bc5406985f4ea6ffc22f70a780909", "html_url": "https://github.com/rust-lang/rust/commit/71339d9e699bc5406985f4ea6ffc22f70a780909", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71339d9e699bc5406985f4ea6ffc22f70a780909/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877ebed6cf0a20a7ba88a74b32058679ef9abbf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/877ebed6cf0a20a7ba88a74b32058679ef9abbf5", "html_url": "https://github.com/rust-lang/rust/commit/877ebed6cf0a20a7ba88a74b32058679ef9abbf5"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "658d59a437578fbc66a5b48933bab0107110f095", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/71339d9e699bc5406985f4ea6ffc22f70a780909/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71339d9e699bc5406985f4ea6ffc22f70a780909/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=71339d9e699bc5406985f4ea6ffc22f70a780909", "patch": "@@ -133,7 +133,6 @@ fn try_recv<T: send>(-p: recv_packet<T>) -> option<T> {\n         rustrt::task_clear_event_reject(this);\n         let old_state = swap_state_acq(p.header.state,\n                                        blocked);\n-        #debug(\"%?\", old_state);\n         alt old_state {\n           empty {\n             #debug(\"no data available on %?, going to sleep.\", p_);\n@@ -230,7 +229,7 @@ impl private_methods for packet_header {\n \n #[doc = \"Returns when one of the packet headers reports data is\n available.\"]\n-fn wait_many(pkts: ~[&a.packet_header]) -> uint {\n+fn wait_many(pkts: &[&a.packet_header]) -> uint {\n     let this = rustrt::rust_get_task();\n \n     rustrt::task_clear_event_reject(this);\n@@ -283,39 +282,30 @@ fn select2<A: send, B: send>(\n     +b: recv_packet<B>)\n     -> either<(option<A>, recv_packet<B>), (recv_packet<A>, option<B>)>\n {\n-    let a = unsafe { uniquify(a.unwrap()) };\n-    let b = unsafe { uniquify(b.unwrap()) };\n-    let i = {\n-        let headers = ~[&a.header,\n-                        &b.header];\n-        wait_many(headers)\n-    };\n+    let i = wait_many([a.header(), b.header()]/_);\n \n     unsafe {\n         alt i {\n-          0 { left((try_recv(recv_packet(transmute(a))),\n-                    recv_packet(transmute(b)))) }\n-          1 { right((recv_packet(transmute(a)),\n-                     try_recv(recv_packet(transmute(b))))) }\n+          0 { left((try_recv(a), b)) }\n+          1 { right((a, try_recv(b))) }\n           _ { fail \"select2 return an invalid packet\" }\n         }\n     }\n }\n \n+fn selecti<T: send>(endpoints: &[&recv_packet<T>]) -> uint {\n+    wait_many(endpoints.map(|p| p.header()))\n+}\n+\n #[doc = \"Waits on a set of endpoints. Returns a message, its index,\n  and a list of the remaining endpoints.\"]\n fn select<T: send>(+endpoints: ~[recv_packet<T>])\n     -> (uint, option<T>, ~[recv_packet<T>])\n {\n-    let endpoints = vec::map_consume(\n-        endpoints,\n-        |p| unsafe { uniquify(p.unwrap()) });\n-    let endpoints_r = vec::view(endpoints, 0, endpoints.len());\n-    let ready = wait_many(endpoints_r.map_r(|p| &p.header));\n+    let ready = wait_many(endpoints.map(|p| p.header()));\n     let mut remaining = ~[];\n     let mut result = none;\n     do vec::consume(endpoints) |i, p| {\n-        let p = recv_packet(unsafe { unsafe::transmute(p) });\n         if i == ready {\n             result = try_recv(p);\n         }"}, {"sha": "7142da8084821092be0eb1a68a6072da93ed60cd", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71339d9e699bc5406985f4ea6ffc22f70a780909/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71339d9e699bc5406985f4ea6ffc22f70a780909/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=71339d9e699bc5406985f4ea6ffc22f70a780909", "patch": "@@ -51,15 +51,15 @@ fn main() {\n     });\n \n     let (c1, p1) = oneshot::init();\n-    let (c2, p2) = oneshot::init();\n+    let (_c2, p2) = oneshot::init();\n \n     let c = send(c, (p1, p2));\n     \n     sleep(iotask, 1000);\n \n     signal(c1);\n \n-    let (c1, p1) = oneshot::init();\n+    let (_c1, p1) = oneshot::init();\n     let (c2, p2) = oneshot::init();\n \n     send(c, (p1, p2));"}]}