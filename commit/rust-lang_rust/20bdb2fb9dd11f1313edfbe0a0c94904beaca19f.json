{"sha": "20bdb2fb9dd11f1313edfbe0a0c94904beaca19f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYmRiMmZiOWRkMTFmMTMxM2VkZmJlMGEwYzk0OTA0YmVhY2ExOWY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-03-31T09:44:35Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-04-27T09:56:04Z"}, "message": "Use config_type proc macro", "tree": {"sha": "b1bcca7eecba0ea377cbdb73c58933d230198c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1bcca7eecba0ea377cbdb73c58933d230198c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f", "html_url": "https://github.com/rust-lang/rust/commit/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee02cdfb0bdde08acf8821242fd68ba4137a8582", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee02cdfb0bdde08acf8821242fd68ba4137a8582", "html_url": "https://github.com/rust-lang/rust/commit/ee02cdfb0bdde08acf8821242fd68ba4137a8582"}], "stats": {"total": 190, "additions": 43, "deletions": 147}, "files": [{"sha": "dd148264be3589f1edb6c12f8a159ac54902cc7b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=20bdb2fb9dd11f1313edfbe0a0c94904beaca19f", "patch": "@@ -148,8 +148,8 @@ name = \"config_proc_macro\"\n version = \"0.1.0\"\n dependencies = [\n  \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "86faab57d16acfc55700152f8a764142a57c901c", "filename": "src/config/lists.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f/src%2Fconfig%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f/src%2Fconfig%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flists.rs?ref=20bdb2fb9dd11f1313edfbe0a0c94904beaca19f", "patch": "@@ -1,6 +1,7 @@\n //! Configuration options related to rewriting a list.\n \n-use crate::config::config_type::ConfigType;\n+use config_proc_macro::config_type;\n+\n use crate::config::IndentStyle;\n \n /// The definitive formatting tactic for lists.\n@@ -25,7 +26,7 @@ impl DefinitiveListTactic {\n /// Formatting tactic for lists. This will be cast down to a\n /// `DefinitiveListTactic` depending on the number and length of the items and\n /// their comments.\n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+#[config_type]\n pub enum ListTactic {\n     // One item per row.\n     Vertical,\n@@ -39,17 +40,13 @@ pub enum ListTactic {\n     Mixed,\n }\n \n-impl_enum_serialize_and_deserialize!(ListTactic, Vertical, Horizontal, HorizontalVertical, Mixed);\n-\n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+#[config_type]\n pub enum SeparatorTactic {\n     Always,\n     Never,\n     Vertical,\n }\n \n-impl_enum_serialize_and_deserialize!(SeparatorTactic, Always, Never, Vertical);\n-\n impl SeparatorTactic {\n     pub fn from_bool(b: bool) -> SeparatorTactic {\n         if b {\n@@ -61,14 +58,12 @@ impl SeparatorTactic {\n }\n \n /// Where to put separator.\n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+#[config_type]\n pub enum SeparatorPlace {\n     Front,\n     Back,\n }\n \n-impl_enum_serialize_and_deserialize!(SeparatorPlace, Front, Back);\n-\n impl SeparatorPlace {\n     pub fn is_front(self) -> bool {\n         self == SeparatorPlace::Front"}, {"sha": "e8a26a4aeea458ea9e96e5d4a58efd7bdea20e4d", "filename": "src/config/options.rs", "status": "modified", "additions": 36, "deletions": 135, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=20bdb2fb9dd11f1313edfbe0a0c94904beaca19f", "patch": "@@ -3,133 +3,18 @@ use std::fmt;\n use std::path::{Path, PathBuf};\n \n use atty;\n+use config_proc_macro::config_type;\n use serde::de::{Deserialize, Deserializer, SeqAccess, Visitor};\n \n-use crate::config::config_type::ConfigType;\n use crate::config::lists::*;\n use crate::config::Config;\n \n-/// Macro that will stringify the enum variants or a provided textual repr\n-#[macro_export]\n-macro_rules! configuration_option_enum_stringify {\n-    ($variant:ident) => {\n-        stringify!($variant)\n-    };\n-\n-    ($_variant:ident: $value:expr) => {\n-        stringify!($value)\n-    };\n-}\n-\n-/// Macro for deriving implementations of Serialize/Deserialize for enums\n-#[macro_export]\n-macro_rules! impl_enum_serialize_and_deserialize {\n-    ( $e:ident, $( $variant:ident $(: $value:expr)* ),* ) => {\n-        impl ::serde::ser::Serialize for $e {\n-            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n-                where S: ::serde::ser::Serializer\n-            {\n-                use serde::ser::Error;\n-\n-                // We don't know whether the user of the macro has given us all options.\n-                #[allow(unreachable_patterns)]\n-                match *self {\n-                    $(\n-                        $e::$variant => serializer.serialize_str(\n-                            configuration_option_enum_stringify!($variant $(: $value)*)\n-                        ),\n-                    )*\n-                    _ => {\n-                        Err(S::Error::custom(format!(\"Cannot serialize {:?}\", self)))\n-                    }\n-                }\n-            }\n-        }\n-\n-        impl<'de> ::serde::de::Deserialize<'de> for $e {\n-            fn deserialize<D>(d: D) -> Result<Self, D::Error>\n-                    where D: ::serde::Deserializer<'de> {\n-                use serde::de::{Error, Visitor};\n-                use std::marker::PhantomData;\n-                use std::fmt;\n-                struct StringOnly<T>(PhantomData<T>);\n-                impl<'de, T> Visitor<'de> for StringOnly<T>\n-                        where T: ::serde::Deserializer<'de> {\n-                    type Value = String;\n-                    fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                        formatter.write_str(\"string\")\n-                    }\n-                    fn visit_str<E>(self, value: &str) -> Result<String, E> {\n-                        Ok(String::from(value))\n-                    }\n-                }\n-                let s = d.deserialize_string(StringOnly::<D>(PhantomData))?;\n-                $(\n-                    if configuration_option_enum_stringify!($variant $(: $value)*)\n-                        .eq_ignore_ascii_case(&s) {\n-                      return Ok($e::$variant);\n-                    }\n-                )*\n-                static ALLOWED: &'static[&str] = &[\n-                    $(configuration_option_enum_stringify!($variant $(: $value)*),)*];\n-                Err(D::Error::unknown_variant(&s, ALLOWED))\n-            }\n-        }\n-\n-        impl ::std::str::FromStr for $e {\n-            type Err = &'static str;\n-\n-            fn from_str(s: &str) -> Result<Self, Self::Err> {\n-                $(\n-                    if configuration_option_enum_stringify!($variant $(: $value)*)\n-                        .eq_ignore_ascii_case(s) {\n-                        return Ok($e::$variant);\n-                    }\n-                )*\n-                Err(\"Bad variant\")\n-            }\n-        }\n-\n-        impl ConfigType for $e {\n-            fn doc_hint() -> String {\n-                let mut variants = Vec::new();\n-                $(\n-                    variants.push(\n-                        configuration_option_enum_stringify!($variant $(: $value)*)\n-                    );\n-                )*\n-                format!(\"[{}]\", variants.join(\"|\"))\n-            }\n-        }\n-    };\n-}\n-\n-macro_rules! configuration_option_enum {\n-    ($e:ident: $( $name:ident $(: $value:expr)* ),+ $(,)*) => (\n-        #[derive(Copy, Clone, Eq, PartialEq)]\n-        pub enum $e {\n-            $( $name ),+\n-        }\n-\n-        impl ::std::fmt::Debug for $e {\n-            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n-                f.write_str(match self {\n-                    $(\n-                        $e::$name => configuration_option_enum_stringify!($name $(: $value)*),\n-                    )+\n-                })\n-            }\n-        }\n-\n-        impl_enum_serialize_and_deserialize!($e, $( $name $(: $value)* ),+);\n-    );\n-}\n-\n-configuration_option_enum! { NewlineStyle:\n-    Auto, // Auto-detect based on the raw source input\n+#[config_type]\n+pub enum NewlineStyle {\n+    Auto,    // Auto-detect based on the raw source input\n     Windows, // \\r\\n\n-    Unix, // \\n\n-    Native, // \\r\\n in Windows, \\n on other platforms\n+    Unix,    // \\n\n+    Native,  // \\r\\n in Windows, \\n on other platforms\n }\n \n impl NewlineStyle {\n@@ -188,15 +73,17 @@ impl NewlineStyle {\n     }\n }\n \n-configuration_option_enum! { BraceStyle:\n+#[config_type]\n+pub enum BraceStyle {\n     AlwaysNextLine,\n     PreferSameLine,\n     // Prefer same line except where there is a where-clause, in which case force\n     // the brace to the next line.\n     SameLineWhere,\n }\n \n-configuration_option_enum! { ControlBraceStyle:\n+#[config_type]\n+pub enum ControlBraceStyle {\n     // K&R style, Rust community default\n     AlwaysSameLine,\n     // Stroustrup style\n@@ -205,15 +92,17 @@ configuration_option_enum! { ControlBraceStyle:\n     AlwaysNextLine,\n }\n \n-configuration_option_enum! { IndentStyle:\n+#[config_type]\n+pub enum IndentStyle {\n     // First line on the same line as the opening brace, all lines aligned with\n     // the first line.\n     Visual,\n     // First line is on a new line and all lines align with block indent.\n     Block,\n }\n \n-configuration_option_enum! { Density:\n+#[config_type]\n+pub enum Density {\n     // Fit as much on one line as possible.\n     Compressed,\n     // Use more lines.\n@@ -222,14 +111,16 @@ configuration_option_enum! { Density:\n     Vertical,\n }\n \n-configuration_option_enum! { TypeDensity:\n+#[config_type]\n+pub enum TypeDensity {\n     // No spaces around \"=\" and \"+\"\n     Compressed,\n     // Spaces around \" = \" and \" + \"\n     Wide,\n }\n \n-configuration_option_enum! { Heuristics:\n+#[config_type]\n+pub enum Heuristics {\n     // Turn off any heuristics\n     Off,\n     // Turn on max heuristics\n@@ -249,15 +140,17 @@ impl Density {\n     }\n }\n \n-configuration_option_enum! { ReportTactic:\n+#[config_type]\n+pub enum ReportTactic {\n     Always,\n     Unnumbered,\n     Never,\n }\n \n // What Rustfmt should emit. Mostly corresponds to the `--emit` command line\n // option.\n-configuration_option_enum! { EmitMode:\n+#[config_type]\n+pub enum EmitMode {\n     // Emits to files.\n     Files,\n     // Writes the output to stdout.\n@@ -275,7 +168,8 @@ configuration_option_enum! { EmitMode:\n }\n \n // Client-preference for coloured output.\n-configuration_option_enum! { Color:\n+#[config_type]\n+pub enum Color {\n     // Always use color, whether it is a piped or terminal output\n     Always,\n     // Never use color\n@@ -284,7 +178,8 @@ configuration_option_enum! { Color:\n     Auto,\n }\n \n-configuration_option_enum! { Version:\n+#[config_type]\n+pub enum Version {\n     // 1.x.y\n     One,\n     // 2.x.y\n@@ -303,7 +198,8 @@ impl Color {\n }\n \n // How chatty should Rustfmt be?\n-configuration_option_enum! { Verbosity:\n+#[config_type]\n+pub enum Verbosity {\n     // Emit more.\n     Verbose,\n     Normal,\n@@ -474,9 +370,14 @@ pub trait CliOptions {\n }\n \n // The edition of the compiler (RFC 2052)\n-configuration_option_enum! { Edition:\n-    Edition2015: 2015,\n-    Edition2018: 2018,\n+#[config_type]\n+pub enum Edition {\n+    #[value = \"2015\"]\n+    #[doc_hint = \"2015\"]\n+    Edition2015,\n+    #[value = \"2018\"]\n+    #[doc_hint = \"2018\"]\n+    Edition2018,\n }\n \n impl Default for Edition {"}]}