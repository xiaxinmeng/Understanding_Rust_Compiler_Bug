{"sha": "f67861310c1bdcb39301aa6c54d49aa719119a8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Nzg2MTMxMGMxYmRjYjM5MzAxYWE2YzU0ZDQ5YWE3MTkxMTlhOGI=", "commit": {"author": {"name": "Luiz Carlos Mour\u00e3o Paes de Carvalho", "email": "luizcarlosmpc@gmail.com", "date": "2021-03-12T11:06:50Z"}, "committer": {"name": "Luiz Carlos Mour\u00e3o Paes de Carvalho", "email": "luizcarlosmpc@gmail.com", "date": "2021-03-12T11:06:50Z"}, "message": "refactor: refactored and reduced assist code", "tree": {"sha": "e700cce538e5fba7f5231aa238a6dd6d7917874c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e700cce538e5fba7f5231aa238a6dd6d7917874c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f67861310c1bdcb39301aa6c54d49aa719119a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f67861310c1bdcb39301aa6c54d49aa719119a8b", "html_url": "https://github.com/rust-lang/rust/commit/f67861310c1bdcb39301aa6c54d49aa719119a8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f67861310c1bdcb39301aa6c54d49aa719119a8b/comments", "author": {"login": "saiintbrisson", "id": 29989290, "node_id": "MDQ6VXNlcjI5OTg5Mjkw", "avatar_url": "https://avatars.githubusercontent.com/u/29989290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saiintbrisson", "html_url": "https://github.com/saiintbrisson", "followers_url": "https://api.github.com/users/saiintbrisson/followers", "following_url": "https://api.github.com/users/saiintbrisson/following{/other_user}", "gists_url": "https://api.github.com/users/saiintbrisson/gists{/gist_id}", "starred_url": "https://api.github.com/users/saiintbrisson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saiintbrisson/subscriptions", "organizations_url": "https://api.github.com/users/saiintbrisson/orgs", "repos_url": "https://api.github.com/users/saiintbrisson/repos", "events_url": "https://api.github.com/users/saiintbrisson/events{/privacy}", "received_events_url": "https://api.github.com/users/saiintbrisson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saiintbrisson", "id": 29989290, "node_id": "MDQ6VXNlcjI5OTg5Mjkw", "avatar_url": "https://avatars.githubusercontent.com/u/29989290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saiintbrisson", "html_url": "https://github.com/saiintbrisson", "followers_url": "https://api.github.com/users/saiintbrisson/followers", "following_url": "https://api.github.com/users/saiintbrisson/following{/other_user}", "gists_url": "https://api.github.com/users/saiintbrisson/gists{/gist_id}", "starred_url": "https://api.github.com/users/saiintbrisson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saiintbrisson/subscriptions", "organizations_url": "https://api.github.com/users/saiintbrisson/orgs", "repos_url": "https://api.github.com/users/saiintbrisson/repos", "events_url": "https://api.github.com/users/saiintbrisson/events{/privacy}", "received_events_url": "https://api.github.com/users/saiintbrisson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5", "html_url": "https://github.com/rust-lang/rust/commit/6236b1eaf85c3b93d03d4797aabf4ddc1360a2b5"}], "stats": {"total": 57, "additions": 21, "deletions": 36}, "files": [{"sha": "7e6cae9e1e1463d4688301278e3692a91612d01a", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f67861310c1bdcb39301aa6c54d49aa719119a8b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67861310c1bdcb39301aa6c54d49aa719119a8b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=f67861310c1bdcb39301aa6c54d49aa719119a8b", "patch": "@@ -28,53 +28,37 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n /// }\n /// ```\n pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let method;\n-\n-    let stmt = if let Some(stmt) = ctx.find_node_at_offset::<ast::ExprStmt>() {\n-        method = ast::MethodCallExpr::cast(stmt.syntax().first_child()?)?;\n-        Some(stmt)\n-    } else {\n-        method = match ctx.find_node_at_offset::<ast::Expr>()? {\n-            ast::Expr::MethodCallExpr(expr) => expr,\n-            ast::Expr::ClosureExpr(expr) => {\n-                ast::MethodCallExpr::cast(expr.syntax().ancestors().nth(2)?)?\n-            }\n-            _ => {\n-                return None;\n-            }\n-        };\n-        None\n-    };\n+    let method = ctx.find_node_at_offset::<ast::MethodCallExpr>()?;\n+    let stmt = method.syntax().parent().and_then(ast::ExprStmt::cast);\n \n     let closure = match method.arg_list()?.args().next()? {\n         ast::Expr::ClosureExpr(expr) => expr,\n-        _ => {\n-            return None;\n-        }\n+        _ => return None,\n     };\n \n-    let (method, parent) = validate_method_call_expr(&ctx.sema, method)?;\n+    let (method, receiver) = validate_method_call_expr(&ctx.sema, method)?;\n \n     let param_list = closure.param_list()?;\n     let param = param_list.params().next()?.pat()?;\n     let body = closure.body()?;\n \n-    let indent = stmt.as_ref().map_or(method.indent_level(), |stmt| stmt.indent_level());\n     let syntax = stmt.as_ref().map_or(method.syntax(), |stmt| stmt.syntax());\n \n     acc.add(\n         AssistId(\"convert_iter_for_each_to_for\", AssistKind::RefactorRewrite),\n         \"Replace this `Iterator::for_each` with a for loop\",\n         syntax.text_range(),\n         |builder| {\n+            let indent = stmt.as_ref().map_or(method.indent_level(), |stmt| stmt.indent_level());\n+\n             let block = match body {\n                 ast::Expr::BlockExpr(block) => block,\n                 _ => make::block_expr(Vec::new(), Some(body)),\n             }\n             .reset_indent()\n             .indent(indent);\n \n-            let expr_for_loop = make::expr_for_loop(param, parent, block);\n+            let expr_for_loop = make::expr_for_loop(param, receiver, block);\n             builder.replace(syntax.text_range(), expr_for_loop.syntax().text())\n         },\n     )\n@@ -88,15 +72,15 @@ fn validate_method_call_expr(\n         return None;\n     }\n \n+    let receiver = expr.receiver()?;\n     let expr = ast::Expr::MethodCallExpr(expr);\n-    let parent = ast::Expr::cast(expr.syntax().first_child()?)?;\n \n-    let it_type = sema.type_of_expr(&parent)?;\n-    let module = sema.scope(parent.syntax()).module()?;\n+    let it_type = sema.type_of_expr(&receiver)?;\n+    let module = sema.scope(receiver.syntax()).module()?;\n     let krate = module.krate();\n \n     let iter_trait = FamousDefs(sema, Some(krate)).core_iter_Iterator()?;\n-    it_type.impls_trait(sema.db, iter_trait, &[]).then(|| (expr, parent))\n+    it_type.impls_trait(sema.db, iter_trait, &[]).then(|| (expr, receiver))\n }\n \n #[cfg(test)]\n@@ -175,34 +159,36 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_for_each_without_braces_stmt() {\n+    fn test_for_each_in_iter_stmt() {\n         check_assist_with_fixtures(\n             r#\"\n use empty_iter::*;\n fn main() {\n-    let x = Empty;\n-    x.iter().$0for_each(|(x, y)| println!(\"x: {}, y: {}\", x, y));\n+    let x = Empty.iter();\n+    x.$0for_each(|(x, y)| {\n+        println!(\"x: {}, y: {}\", x, y);\n+    });\n }\"#,\n             r#\"\n use empty_iter::*;\n fn main() {\n-    let x = Empty;\n-    for (x, y) in x.iter() {\n-        println!(\"x: {}, y: {}\", x, y)\n+    let x = Empty.iter();\n+    for (x, y) in x {\n+        println!(\"x: {}, y: {}\", x, y);\n     }\n }\n \"#,\n         )\n     }\n \n     #[test]\n-    fn test_for_each_in_closure_stmt() {\n+    fn test_for_each_without_braces_stmt() {\n         check_assist_with_fixtures(\n             r#\"\n use empty_iter::*;\n fn main() {\n     let x = Empty;\n-    x.iter().for_each($0|(x, y)| println!(\"x: {}, y: {}\", x, y));\n+    x.iter().$0for_each(|(x, y)| println!(\"x: {}, y: {}\", x, y));\n }\"#,\n             r#\"\n use empty_iter::*;\n@@ -215,7 +201,6 @@ fn main() {\n \"#,\n         )\n     }\n-\n     #[test]\n     fn test_for_each_not_applicable() {\n         check_assist_not_applicable("}]}