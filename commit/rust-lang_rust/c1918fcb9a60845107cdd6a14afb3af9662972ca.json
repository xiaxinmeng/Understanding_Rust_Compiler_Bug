{"sha": "c1918fcb9a60845107cdd6a14afb3af9662972ca", "node_id": "C_kwDOAAsO6NoAKGMxOTE4ZmNiOWE2MDg0NTEwN2NkZDZhMTRhZmIzYWY5NjYyOTcyY2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T00:26:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T00:26:53Z"}, "message": "Auto merge of #100210 - mystor:proc_macro_diag_struct, r=eddyb\n\nproc_macro/bridge: send diagnostics over the bridge as a struct\n\nThis removes some RPC when creating and emitting diagnostics, and\nsimplifies the bridge slightly.\n\nAfter this change, there are no remaining methods which take advantage\nof the support for `&mut` references to objects in the store as\narguments, meaning that support for them could technically be removed if\nwe wanted. The only remaining uses of immutable references into the\nstore are `TokenStream` and `SourceFile`.\n\nr? `@eddyb`", "tree": {"sha": "fbd6a9b1747923cc3c03419bb5a9ba484a11c2b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbd6a9b1747923cc3c03419bb5a9ba484a11c2b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1918fcb9a60845107cdd6a14afb3af9662972ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1918fcb9a60845107cdd6a14afb3af9662972ca", "html_url": "https://github.com/rust-lang/rust/commit/c1918fcb9a60845107cdd6a14afb3af9662972ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1918fcb9a60845107cdd6a14afb3af9662972ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e358a6827d83e8d6473913a5e304734aadfed04", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e358a6827d83e8d6473913a5e304734aadfed04", "html_url": "https://github.com/rust-lang/rust/commit/3e358a6827d83e8d6473913a5e304734aadfed04"}, {"sha": "2c7f2c105bb52d83409fc29bd181af442b8ba43d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7f2c105bb52d83409fc29bd181af442b8ba43d", "html_url": "https://github.com/rust-lang/rust/commit/2c7f2c105bb52d83409fc29bd181af442b8ba43d"}], "stats": {"total": 59, "additions": 4, "deletions": 55}, "files": [{"sha": "e4e43e97dde82eee29821dfb138cc75d14f7f297", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 4, "deletions": 55, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c1918fcb9a60845107cdd6a14afb3af9662972ca/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1918fcb9a60845107cdd6a14afb3af9662972ca/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=c1918fcb9a60845107cdd6a14afb3af9662972ca", "patch": "@@ -37,23 +37,6 @@ pub struct SourceFile {\n type Level = super::proc_macro::Level;\n type LineColumn = super::proc_macro::LineColumn;\n \n-/// A structure representing a diagnostic message and associated children\n-/// messages.\n-#[derive(Clone, Debug)]\n-pub struct Diagnostic {\n-    level: Level,\n-    message: String,\n-    spans: Vec<Span>,\n-    children: Vec<Diagnostic>,\n-}\n-\n-impl Diagnostic {\n-    /// Creates a new diagnostic with the given `level` and `message`.\n-    pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n-        Diagnostic { level, message: message.into(), spans: vec![], children: vec![] }\n-    }\n-}\n-\n pub struct FreeFunctions;\n \n #[derive(Default)]\n@@ -65,8 +48,6 @@ impl server::Types for RustAnalyzer {\n     type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type SourceFile = SourceFile;\n-    type MultiSpan = Vec<Span>;\n-    type Diagnostic = Diagnostic;\n     type Span = Span;\n     type Symbol = Symbol;\n }\n@@ -90,6 +71,10 @@ impl server::FreeFunctions for RustAnalyzer {\n             span: tt::TokenId::unspecified(),\n         })\n     }\n+\n+    fn emit_diagnostic(&mut self, _: bridge::Diagnostic<Self::Span>) {\n+        // FIXME handle diagnostic\n+    }\n }\n \n impl server::TokenStream for RustAnalyzer {\n@@ -282,30 +267,6 @@ impl server::SourceFile for RustAnalyzer {\n     }\n }\n \n-impl server::Diagnostic for RustAnalyzer {\n-    fn new(&mut self, level: Level, msg: &str, spans: Self::MultiSpan) -> Self::Diagnostic {\n-        let mut diag = Diagnostic::new(level, msg);\n-        diag.spans = spans;\n-        diag\n-    }\n-\n-    fn sub(\n-        &mut self,\n-        _diag: &mut Self::Diagnostic,\n-        _level: Level,\n-        _msg: &str,\n-        _spans: Self::MultiSpan,\n-    ) {\n-        // FIXME handle diagnostic\n-        //\n-    }\n-\n-    fn emit(&mut self, _diag: Self::Diagnostic) {\n-        // FIXME handle diagnostic\n-        // diag.emit()\n-    }\n-}\n-\n impl server::Span for RustAnalyzer {\n     fn debug(&mut self, span: Self::Span) -> String {\n         format!(\"{:?}\", span.0)\n@@ -372,18 +333,6 @@ impl server::Span for RustAnalyzer {\n     }\n }\n \n-impl server::MultiSpan for RustAnalyzer {\n-    fn new(&mut self) -> Self::MultiSpan {\n-        // FIXME handle span\n-        vec![]\n-    }\n-\n-    fn push(&mut self, other: &mut Self::MultiSpan, span: Self::Span) {\n-        //TODP\n-        other.push(span)\n-    }\n-}\n-\n impl server::Symbol for RustAnalyzer {\n     fn normalize_and_validate_ident(&mut self, string: &str) -> Result<Self::Symbol, ()> {\n         // FIXME: nfc-normalize and validate idents"}]}