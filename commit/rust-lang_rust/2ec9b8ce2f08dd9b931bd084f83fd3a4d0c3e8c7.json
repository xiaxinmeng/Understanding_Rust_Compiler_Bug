{"sha": "2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYzliOGNlMmYwOGRkOWI5MzFiZDA4NGY4M2ZkM2E0ZDBjM2U4Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-20T00:42:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-20T00:42:35Z"}, "message": "auto merge of #8500 : graydon/rust/2013-08-13-self-rollup, r=thestinger\n\nclose #8424 r=brson\r\nclose #8173 r=brson\r\nclose #8209 r=strcat", "tree": {"sha": "45e58188d429ab43e8ff65d51cc20f8b83fd3a71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45e58188d429ab43e8ff65d51cc20f8b83fd3a71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "html_url": "https://github.com/rust-lang/rust/commit/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6e678fac7dd093aa7de2201e4fca746ced9b6ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e678fac7dd093aa7de2201e4fca746ced9b6ca", "html_url": "https://github.com/rust-lang/rust/commit/e6e678fac7dd093aa7de2201e4fca746ced9b6ca"}, {"sha": "610b2b58ecfcce10dd448c11941de956206d1bd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/610b2b58ecfcce10dd448c11941de956206d1bd1", "html_url": "https://github.com/rust-lang/rust/commit/610b2b58ecfcce10dd448c11941de956206d1bd1"}], "stats": {"total": 320, "additions": 303, "deletions": 17}, "files": [{"sha": "a31efe26c1a5f2f1330ddc59f17db62531b1c44e", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -26,6 +26,7 @@ use std::os;\n use std::str;\n use std::task::{spawn_sched, SingleThreaded};\n use std::vec;\n+use std::unstable::running_on_valgrind;\n \n use extra::test::MetricMap;\n \n@@ -38,11 +39,21 @@ pub fn run(config: config, testfile: ~str) {\n     // that destroys parallelism if we let normal schedulers block.\n     // It should be possible to remove this spawn once std::run is\n     // rewritten to be non-blocking.\n-    do spawn_sched(SingleThreaded) {\n+    //\n+    // We do _not_ create another thread if we're running on V because\n+    // it serializes all threads anyways.\n+    if running_on_valgrind() {\n         let config = config.take();\n         let testfile = testfile.take();\n         let mut _mm = MetricMap::new();\n         run_metrics(config, testfile, &mut _mm);\n+    } else {\n+        do spawn_sched(SingleThreaded) {\n+            let config = config.take();\n+            let testfile = testfile.take();\n+            let mut _mm = MetricMap::new();\n+            run_metrics(config, testfile, &mut _mm);\n+        }\n     }\n }\n "}, {"sha": "49cf8c239b7e690db4e03e8bb06f98194544d691", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -727,6 +727,7 @@ mod test {\n     use rt::test::*;\n     use cell::Cell;\n     use iter::Times;\n+    use rt::util;\n \n     #[test]\n     fn oneshot_single_thread_close_port_first() {\n@@ -875,6 +876,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_close_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n@@ -890,6 +892,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_send_close_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n@@ -910,6 +913,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_recv_close_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n@@ -936,6 +940,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_send_recv_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<~int>();\n@@ -955,6 +960,7 @@ mod test {\n \n     #[test]\n     fn stream_send_recv_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do stress_factor().times {\n             do run_in_mt_newsched_task {\n                 let (port, chan) = stream::<~int>();\n@@ -999,6 +1005,7 @@ mod test {\n \n     #[test]\n     fn shared_chan_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do run_in_mt_newsched_task {\n             let (port, chan) = stream();\n             let chan = SharedChan::new(chan);\n@@ -1018,6 +1025,7 @@ mod test {\n \n     #[test]\n     fn shared_port_stress() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do run_in_mt_newsched_task {\n             // XXX: Removing these type annotations causes an ICE\n             let (end_port, end_chan) = stream::<()>();\n@@ -1098,6 +1106,8 @@ mod test {\n         use rand;\n         use rand::RngUtil;\n \n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n+\n         do run_in_mt_newsched_task {\n             let (end_port, end_chan) = stream::<()>();\n             let end_chan = SharedChan::new(end_chan);"}, {"sha": "e65a45f0e0749ed6e4ba0c9a2e4e79cda16c7cad", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -819,6 +819,7 @@ mod test {\n     use cell::Cell;\n     use rt::thread::Thread;\n     use rt::task::{Task, Sched};\n+    use rt::util;\n     use option::{Some};\n \n     #[test]\n@@ -1040,6 +1041,7 @@ mod test {\n \n     #[test]\n     fn test_stress_schedule_task_states() {\n+        if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         let n = stress_factor() * 120;\n         for _ in range(0, n as int) {\n             test_schedule_home_states();"}, {"sha": "4e2f9fbe130754ce2e7636173d27455ffc32e1bc", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -18,7 +18,7 @@ use iterator::{Iterator, range};\n use super::io::net::ip::{SocketAddr, Ipv4Addr, Ipv6Addr};\n use vec::{OwnedVector, MutableVector, ImmutableVector};\n use rt::sched::Scheduler;\n-use unstable::run_in_bare_thread;\n+use unstable::{run_in_bare_thread};\n use rt::thread::Thread;\n use rt::task::Task;\n use rt::uv::uvio::UvEventLoop;\n@@ -162,10 +162,14 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n         let nthreads = match os::getenv(\"RUST_RT_TEST_THREADS\") {\n             Some(nstr) => FromStr::from_str(nstr).unwrap(),\n             None => {\n-                // Using more threads than cores in test code\n-                // to force the OS to preempt them frequently.\n-                // Assuming that this help stress test concurrent types.\n-                util::num_cpus() * 2\n+                if util::limit_thread_creation_due_to_osx_and_valgrind() {\n+                    1\n+                } else {\n+                    // Using more threads than cores in test code\n+                    // to force the OS to preempt them frequently.\n+                    // Assuming that this help stress test concurrent types.\n+                    util::num_cpus() * 2\n+                }\n             }\n         };\n "}, {"sha": "c81f3ec9a7993b6cdb888fb5d072e5099cdf3341", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -15,6 +15,9 @@ use option::{Some, None};\n use os;\n use str::StrSlice;\n \n+#[cfg(target_os=\"macos\")]\n+use unstable::running_on_valgrind;\n+\n /// Get the number of cores available\n pub fn num_cpus() -> uint {\n     #[fixed_stack_segment]; #[inline(never)];\n@@ -28,12 +31,35 @@ pub fn num_cpus() -> uint {\n     }\n }\n \n+/// Valgrind has a fixed-sized array (size around 2000) of segment descriptors wired into it; this\n+/// is a hard limit and requires rebuilding valgrind if you want to go beyond it. Normally this is\n+/// not a problem, but in some tests, we produce a lot of threads casually. Making lots of threads\n+/// alone might not be a problem _either_, except on OSX, the segments produced for new threads\n+/// _take a while_ to get reclaimed by the OS. Combined with the fact that libuv schedulers fork off\n+/// a separate thread for polling fsevents on OSX, we get a perfect storm of creating \"too many\n+/// mappings\" for valgrind to handle when running certain stress tests in the runtime.\n+#[cfg(target_os=\"macos\")]\n+pub fn limit_thread_creation_due_to_osx_and_valgrind() -> bool {\n+    running_on_valgrind()\n+}\n+\n+#[cfg(not(target_os=\"macos\"))]\n+pub fn limit_thread_creation_due_to_osx_and_valgrind() -> bool {\n+    false\n+}\n+\n /// Get's the number of scheduler threads requested by the environment\n /// either `RUST_THREADS` or `num_cpus`.\n pub fn default_sched_threads() -> uint {\n     match os::getenv(\"RUST_THREADS\") {\n         Some(nstr) => FromStr::from_str(nstr).unwrap(),\n-        None => num_cpus()\n+        None => {\n+            if limit_thread_creation_due_to_osx_and_valgrind() {\n+                1\n+            } else {\n+                num_cpus()\n+            }\n+        }\n     }\n }\n "}, {"sha": "eeaee4c14a51264ae801491926078e5a02c9e7ba", "filename": "src/libstd/run.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -955,6 +955,7 @@ mod tests {\n     use path::Path;\n     use run;\n     use str;\n+    use unstable::running_on_valgrind;\n \n     #[test]\n     #[cfg(windows)]\n@@ -1365,13 +1366,4 @@ mod tests {\n \n         assert!(output.contains(\"RUN_TEST_NEW_ENV=123\"));\n     }\n-\n-    fn running_on_valgrind() -> bool {\n-        #[fixed_stack_segment]; #[inline(never)];\n-        unsafe { rust_running_on_valgrind() != 0 }\n-    }\n-\n-    extern {\n-        fn rust_running_on_valgrind() -> uintptr_t;\n-    }\n }"}, {"sha": "51de3caf2aebb276a62cf7bb5ef8d33e59365528", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -14,6 +14,7 @@ use comm::{GenericChan, GenericPort};\n use comm;\n use prelude::*;\n use task;\n+use libc::uintptr_t;\n \n pub mod dynamic_lib;\n \n@@ -118,3 +119,17 @@ pub fn change_dir_locked(p: &Path, action: &fn()) -> bool {\n         fn rust_drop_change_dir_lock();\n     }\n }\n+\n+\n+/// Dynamically inquire about whether we're running under V.\n+/// You should usually not use this unless your test definitely\n+/// can't run correctly un-altered. Valgrind is there to help\n+/// you notice weirdness in normal, un-doctored code paths!\n+pub fn running_on_valgrind() -> bool {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    unsafe { rust_running_on_valgrind() != 0 }\n+}\n+\n+extern {\n+    fn rust_running_on_valgrind() -> uintptr_t;\n+}"}, {"sha": "927602de1698903f429ef2330b07a15b96ab1f54", "filename": "src/test/auxiliary/xc_conditions.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Fauxiliary%2Fxc_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Fauxiliary%2Fxc_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_conditions.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[crate_type=\"lib\"];\n+\n+condition! {\n+    pub oops: int -> int;\n+}\n+\n+pub fn trouble() -> int {\n+    oops::cond.raise(1)\n+}"}, {"sha": "16a5bb563434196c1ff4fdc8ba6f95930a5c6c77", "filename": "src/test/auxiliary/xc_conditions_2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Fauxiliary%2Fxc_conditions_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Fauxiliary%2Fxc_conditions_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_conditions_2.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[crate_type=\"lib\"];\n+\n+condition! {\n+    pub oops: int -> int;\n+}"}, {"sha": "d5ce63e7e9bc0939bdf20bfecfbd3d5f5f3d7914", "filename": "src/test/auxiliary/xc_conditions_3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Fauxiliary%2Fxc_conditions_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Fauxiliary%2Fxc_conditions_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_conditions_3.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[crate_type=\"lib\"];\n+\n+condition! {\n+    pub oops: int -> int;\n+}\n+\n+pub fn guard(k: extern fn() -> int, x: int) -> int {\n+    do oops::cond.trap(|i| i*x).inside {\n+        k()\n+    }\n+}"}, {"sha": "c9b5a1dc2b82076e69b1d905b9961b2ed0ef22e9", "filename": "src/test/auxiliary/xc_conditions_4.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Fauxiliary%2Fxc_conditions_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Fauxiliary%2Fxc_conditions_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_conditions_4.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[crate_type=\"lib\"];\n+\n+#[deriving(Eq)]\n+pub enum Color {\n+    Red, Green, Blue\n+}\n+\n+condition! {\n+    pub oops: (int,float,~str) -> ::Color;\n+}\n+\n+pub trait Thunk<T> {\n+    fn call(self) -> T;\n+}\n+\n+pub fn callback<T,TH:Thunk<T>>(t:TH) -> T {\n+    t.call()\n+}\n+"}, {"sha": "a70fec92659425ddb66def4d3381af18397ff639", "filename": "src/test/run-pass/foreign-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-struct.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-win32\n // Passing enums by value\n \n pub enum void { }"}, {"sha": "5803c3da6cc9c5f2553a7268e2be2049159be610", "filename": "src/test/run-pass/issue-4929.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fissue-4929.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fissue-4929.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4929.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn make_adder(x: int) -> @fn(int) -> int { |y| x + y }\n+pub fn main() { }"}, {"sha": "ffef5369f237e6c8c505df3d062870ffd7ce0e58", "filename": "src/test/run-pass/xc_conditions_client.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fxc_conditions_client.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fxc_conditions_client.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxc_conditions_client.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:xc_conditions.rs\n+\n+extern mod xc_conditions;\n+use xc_conditions::oops;\n+use xc_conditions::trouble;\n+\n+// Tests of cross-crate conditions; the condition is\n+// defined in lib, and we test various combinations\n+// of `trap` and `raise` in the client or the lib where\n+// the condition was defined. Also in test #4 we use\n+// more complex features (generics, traits) in\n+// combination with the condition.\n+//\n+//                    trap   raise\n+//                    ------------\n+// xc_conditions  :   client   lib\n+// xc_conditions_2:   client   client\n+// xc_conditions_3:   lib      client\n+// xc_conditions_4:   client   client  (with traits)\n+//\n+// the trap=lib, raise=lib case isn't tested since\n+// there's no cross-crate-ness to test in that case.\n+\n+pub fn main() {\n+    do oops::cond.trap(|_i| 12345).inside {\n+        let x = trouble();\n+        assert_eq!(x,12345);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "9666c037449f1a4a049a2a0ff79232af7a65b799", "filename": "src/test/run-pass/xc_conditions_client_2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fxc_conditions_client_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fxc_conditions_client_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxc_conditions_client_2.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:xc_conditions_2.rs\n+\n+extern mod xc_conditions_2;\n+use xcc = xc_conditions_2;\n+\n+pub fn main() {\n+    do xcc::oops::cond.trap(|_| 1).inside {\n+        xcc::oops::cond.raise(1);\n+    }\n+}"}, {"sha": "7d16572c139ce61725a77d268a0f7f28f52f727e", "filename": "src/test/run-pass/xc_conditions_client_3.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fxc_conditions_client_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fxc_conditions_client_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxc_conditions_client_3.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:xc_conditions_3.rs\n+\n+extern mod xc_conditions_3;\n+use xcc = xc_conditions_3;\n+\n+pub fn main() {\n+    assert_eq!(xcc::guard(a, 1), 40);\n+}\n+\n+pub fn a() -> int {\n+    assert_eq!(xcc::oops::cond.raise(7), 7);\n+    xcc::guard(b, 2)\n+}\n+\n+pub fn b() -> int {\n+    assert_eq!(xcc::oops::cond.raise(8), 16);\n+    xcc::guard(c, 3)\n+}\n+\n+pub fn c() -> int {\n+    assert_eq!(xcc::oops::cond.raise(9), 27);\n+    xcc::guard(d, 4)\n+}\n+\n+pub fn d() -> int {\n+    xcc::oops::cond.raise(10)\n+}"}, {"sha": "9a4a868374235fa3768f9bee4f8c27a3ba90c08b", "filename": "src/test/run-pass/xc_conditions_client_4.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fxc_conditions_client_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7/src%2Ftest%2Frun-pass%2Fxc_conditions_client_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxc_conditions_client_4.rs?ref=2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:xc_conditions_4.rs\n+\n+extern mod xc_conditions_4;\n+use xcc = xc_conditions_4;\n+\n+struct SThunk {\n+    x: int\n+}\n+\n+impl xcc::Thunk<xcc::Color> for SThunk {\n+    fn call(self) -> xcc::Color {\n+        xcc::oops::cond.raise((self.x, 1.23, ~\"oh no\"))\n+    }\n+}\n+\n+pub fn main() {\n+    do xcc::oops::cond.trap(|_| xcc::Red).inside {\n+        let t = SThunk { x : 10 };\n+        assert_eq!(xcc::callback(t), xcc::Red)\n+    }\n+}\n\\ No newline at end of file"}]}