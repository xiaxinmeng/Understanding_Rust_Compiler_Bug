{"sha": "ea441e16b46ba955e22585f0b7200b551eff4e7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDQxZTE2YjQ2YmE5NTVlMjI1ODVmMGI3MjAwYjU1MWVmZjRlN2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-06T18:41:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-07T16:24:50Z"}, "message": "Remember to check the name of the associated type being projected when searching the environment. Fixes #20651.", "tree": {"sha": "0435ed3edeb2777fcf12f2719d2b25cb02195c0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0435ed3edeb2777fcf12f2719d2b25cb02195c0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea441e16b46ba955e22585f0b7200b551eff4e7c", "comment_count": 11, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea441e16b46ba955e22585f0b7200b551eff4e7c", "html_url": "https://github.com/rust-lang/rust/commit/ea441e16b46ba955e22585f0b7200b551eff4e7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea441e16b46ba955e22585f0b7200b551eff4e7c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8efd9901b628d687d11a4d0ccc153553b38ada49", "url": "https://api.github.com/repos/rust-lang/rust/commits/8efd9901b628d687d11a4d0ccc153553b38ada49", "html_url": "https://github.com/rust-lang/rust/commit/8efd9901b628d687d11a4d0ccc153553b38ada49"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "a6be8d16a7803af1c0d080536b146966b875af90", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea441e16b46ba955e22585f0b7200b551eff4e7c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea441e16b46ba955e22585f0b7200b551eff4e7c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=ea441e16b46ba955e22585f0b7200b551eff4e7c", "patch": "@@ -452,7 +452,9 @@ fn assemble_candidates_from_predicates<'cx,'tcx>(\n     for predicate in elaborate_predicates(selcx.tcx(), env_predicates) {\n         match predicate {\n             ty::Predicate::Projection(ref data) => {\n-                let is_match = infcx.probe(|_| {\n+                let same_name = data.item_name() == obligation.predicate.item_name;\n+\n+                let is_match = same_name && infcx.probe(|_| {\n                     let origin = infer::Misc(obligation.cause.span);\n                     let obligation_poly_trait_ref =\n                         obligation_trait_ref.to_poly_trait_ref();\n@@ -465,6 +467,9 @@ fn assemble_candidates_from_predicates<'cx,'tcx>(\n                 });\n \n                 if is_match {\n+                    debug!(\"assemble_candidates_from_predicates: candidate {}\",\n+                           data.repr(selcx.tcx()));\n+\n                     candidate_set.vec.push(\n                         ProjectionTyCandidate::ParamEnv(data.clone()));\n                 }\n@@ -527,6 +532,9 @@ fn assemble_candidates_from_impls<'cx,'tcx>(\n \n     match vtable {\n         super::VtableImpl(data) => {\n+            debug!(\"assemble_candidates_from_impls: impl candidate {}\",\n+                   data.repr(selcx.tcx()));\n+\n             candidate_set.vec.push(\n                 ProjectionTyCandidate::Impl(data));\n         }"}, {"sha": "424e64d8e78800d1f23e48d3c666c81f5ed2dff4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea441e16b46ba955e22585f0b7200b551eff4e7c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea441e16b46ba955e22585f0b7200b551eff4e7c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ea441e16b46ba955e22585f0b7200b551eff4e7c", "patch": "@@ -1866,6 +1866,10 @@ pub struct ProjectionPredicate<'tcx> {\n pub type PolyProjectionPredicate<'tcx> = Binder<ProjectionPredicate<'tcx>>;\n \n impl<'tcx> PolyProjectionPredicate<'tcx> {\n+    pub fn item_name(&self) -> ast::Name {\n+        self.0.projection_ty.item_name // safe to skip the binder to access a name\n+    }\n+\n     pub fn sort_key(&self) -> (ast::DefId, ast::Name) {\n         self.0.projection_ty.sort_key()\n     }"}, {"sha": "9436f825de89dd4b95a51cc7e6f7ce4ad320bcdd", "filename": "src/test/compile-fail/associated-types-multiple-types-one-trait.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ea441e16b46ba955e22585f0b7200b551eff4e7c/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea441e16b46ba955e22585f0b7200b551eff4e7c/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs?ref=ea441e16b46ba955e22585f0b7200b551eff4e7c", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    type X;\n+    type Y;\n+}\n+\n+fn have_x_want_x<T:Foo<X=u32>>(t: &T)\n+{\n+    want_x(t);\n+}\n+\n+fn have_x_want_y<T:Foo<X=u32>>(t: &T)\n+{\n+    want_y(t); //~ ERROR type mismatch\n+}\n+\n+fn have_y_want_x<T:Foo<Y=i32>>(t: &T)\n+{\n+    want_x(t); //~ ERROR type mismatch\n+}\n+\n+fn have_y_want_y<T:Foo<Y=i32>>(t: &T)\n+{\n+    want_y(t);\n+}\n+\n+fn have_xy_want_x<T:Foo<X=u32,Y=i32>>(t: &T)\n+{\n+    want_x(t);\n+}\n+\n+fn have_xy_want_y<T:Foo<X=u32,Y=i32>>(t: &T)\n+{\n+    want_y(t);\n+}\n+\n+fn have_xy_want_xy<T:Foo<X=u32,Y=i32>>(t: &T)\n+{\n+    want_x(t);\n+    want_y(t);\n+}\n+\n+fn want_x<T:Foo<X=u32>>(t: &T) { }\n+\n+fn want_y<T:Foo<Y=i32>>(t: &T) { }\n+\n+fn main() { }"}]}