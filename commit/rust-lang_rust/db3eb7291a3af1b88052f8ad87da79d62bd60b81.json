{"sha": "db3eb7291a3af1b88052f8ad87da79d62bd60b81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiM2ViNzI5MWEzYWYxYjg4MDUyZjhhZDg3ZGE3OWQ2MmJkNjBiODE=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-18T11:57:34Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-19T09:20:00Z"}, "message": "std::str: Implement CharIterator separately\n\nLet CharIterator be a separate type from CharOffsetIterator (so that\nCharIterator can be cloned, for example).\n\nImplement CharOffsetIterator by using the same technique as the method\nsubslice_offset.", "tree": {"sha": "9945bd29ce3b457bbff6e3f594d8655d04c0238e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9945bd29ce3b457bbff6e3f594d8655d04c0238e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db3eb7291a3af1b88052f8ad87da79d62bd60b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db3eb7291a3af1b88052f8ad87da79d62bd60b81", "html_url": "https://github.com/rust-lang/rust/commit/db3eb7291a3af1b88052f8ad87da79d62bd60b81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db3eb7291a3af1b88052f8ad87da79d62bd60b81/comments", "author": null, "committer": null, "parents": [{"sha": "8a5889d2a2eb4b2c9d41f6f3991fdd2622933047", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5889d2a2eb4b2c9d41f6f3991fdd2622933047", "html_url": "https://github.com/rust-lang/rust/commit/8a5889d2a2eb4b2c9d41f6f3991fdd2622933047"}], "stats": {"total": 103, "additions": 68, "deletions": 35}, "files": [{"sha": "ccb7349eefd75ee7d2a7570c87416d25a4e01e54", "filename": "src/libstd/str.rs", "status": "modified", "additions": 68, "deletions": 35, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/db3eb7291a3af1b88052f8ad87da79d62bd60b81/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3eb7291a3af1b88052f8ad87da79d62bd60b81/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=db3eb7291a3af1b88052f8ad87da79d62bd60b81", "patch": "@@ -255,56 +255,94 @@ impl<'self, C: CharEq> CharEq for &'self [C] {\n Section: Iterators\n */\n \n-/// External iterator for a string's characters and their byte offsets.\n-/// Use with the `std::iterator` module.\n+/// External iterator for a string's characters.\n #[deriving(Clone)]\n-pub struct CharOffsetIterator<'self> {\n-    priv index_front: uint,\n-    priv index_back: uint,\n+pub struct CharIterator<'self> {\n     priv string: &'self str,\n }\n \n-impl<'self> Iterator<(uint, char)> for CharOffsetIterator<'self> {\n+impl<'self> Iterator<char> for CharIterator<'self> {\n     #[inline]\n-    fn next(&mut self) -> Option<(uint, char)> {\n-        if self.index_front < self.index_back {\n-            let CharRange {ch, next} = self.string.char_range_at(self.index_front);\n-            let index = self.index_front;\n-            self.index_front = next;\n-            Some((index, ch))\n+    fn next(&mut self) -> Option<char> {\n+        if self.string.len() != 0 {\n+            let CharRange {ch, next} = self.string.char_range_at(0);\n+            unsafe {\n+                self.string = raw::slice_unchecked(self.string, next, self.string.len());\n+            }\n+            Some(ch)\n         } else {\n             None\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        (self.string.len().saturating_add(3)/4, Some(self.string.len()))\n+    }\n }\n \n-impl<'self> DoubleEndedIterator<(uint, char)> for CharOffsetIterator<'self> {\n+impl<'self> DoubleEndedIterator<char> for CharIterator<'self> {\n     #[inline]\n-    fn next_back(&mut self) -> Option<(uint, char)> {\n-        if self.index_front < self.index_back {\n-            let CharRange {ch, next} = self.string.char_range_at_reverse(self.index_back);\n-            self.index_back = next;\n-            Some((next, ch))\n+    fn next_back(&mut self) -> Option<char> {\n+        if self.string.len() != 0 {\n+            let CharRange {ch, next} = self.string.char_range_at_reverse(self.string.len());\n+            unsafe {\n+                self.string = raw::slice_unchecked(self.string, 0, next);\n+            }\n+            Some(ch)\n         } else {\n             None\n         }\n     }\n }\n \n-/// External iterator for a string's characters and their byte offsets in reverse order.\n-/// Use with the `std::iterator` module.\n-pub type CharOffsetRevIterator<'self> =\n-    Invert<CharOffsetIterator<'self>>;\n \n-/// External iterator for a string's characters.\n+/// External iterator for a string's characters and their byte offsets.\n /// Use with the `std::iterator` module.\n-pub type CharIterator<'self> =\n-    Map<'self, (uint, char), char, CharOffsetIterator<'self>>;\n+#[deriving(Clone)]\n+pub struct CharOffsetIterator<'self> {\n+    priv string: &'self str,\n+    priv iter: CharIterator<'self>,\n+}\n+\n+impl<'self> Iterator<(uint, char)> for CharOffsetIterator<'self> {\n+    #[inline]\n+    fn next(&mut self) -> Option<(uint, char)> {\n+        let offset = do self.string.as_imm_buf |a, _| {\n+            do self.iter.string.as_imm_buf |b, _| {\n+                b as uint - a as uint\n+            }\n+        };\n+        self.iter.next().map_move(|ch| (offset, ch))\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+impl<'self> DoubleEndedIterator<(uint, char)> for CharOffsetIterator<'self> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<(uint, char)> {\n+        self.iter.next_back().map_move(|ch| {\n+            let offset = do self.string.as_imm_buf |a, _| {\n+                do self.iter.string.as_imm_buf |b, len| {\n+                    b as uint - a as uint + len\n+                }\n+            };\n+            (offset, ch)\n+        })\n+    }\n+}\n \n /// External iterator for a string's characters in reverse order.\n /// Use with the `std::iterator` module.\n-pub type CharRevIterator<'self> =\n-    Invert<Map<'self, (uint, char), char, CharOffsetIterator<'self>>>;\n+pub type CharRevIterator<'self> = Invert<CharIterator<'self>>;\n+\n+/// External iterator for a string's characters and their byte offsets in reverse order.\n+/// Use with the `std::iterator` module.\n+pub type CharOffsetRevIterator<'self> = Invert<CharOffsetIterator<'self>>;\n \n /// External iterator for a string's bytes.\n /// Use with the `std::iterator` module.\n@@ -313,8 +351,7 @@ pub type ByteIterator<'self> =\n \n /// External iterator for a string's bytes in reverse order.\n /// Use with the `std::iterator` module.\n-pub type ByteRevIterator<'self> =\n-    Invert<Map<'self, &'self u8, u8, vec::VecIterator<'self, u8>>>;\n+pub type ByteRevIterator<'self> = Invert<ByteIterator<'self>>;\n \n /// An iterator over the substrings of a string, separated by `sep`.\n #[deriving(Clone)]\n@@ -1218,7 +1255,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// ~~~\n     #[inline]\n     fn iter(&self) -> CharIterator<'self> {\n-        self.char_offset_iter().map(|(_, c)| c)\n+        CharIterator{string: *self}\n     }\n \n     /// An iterator over the characters of `self`, in reverse order.\n@@ -1242,11 +1279,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// An iterator over the characters of `self` and their byte offsets.\n     #[inline]\n     fn char_offset_iter(&self) -> CharOffsetIterator<'self> {\n-        CharOffsetIterator {\n-            index_front: 0,\n-            index_back: self.len(),\n-            string: *self\n-        }\n+        CharOffsetIterator{string: *self, iter: self.iter()}\n     }\n \n     /// An iterator over the characters of `self` and their byte offsets."}]}