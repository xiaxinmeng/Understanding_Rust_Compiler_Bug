{"sha": "15dd90b6475c7a44c9b95044c91519d9464bbcc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZGQ5MGI2NDc1YzdhNDRjOWI5NTA0NGM5MTUxOWQ5NDY0YmJjYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-30T00:27:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-30T00:27:02Z"}, "message": "auto merge of #18359 : 1-more/rust/feature, r=alexcrichton", "tree": {"sha": "f0b56e19d9edb76e545aa45ae98fc20d78666c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b56e19d9edb76e545aa45ae98fc20d78666c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15dd90b6475c7a44c9b95044c91519d9464bbcc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15dd90b6475c7a44c9b95044c91519d9464bbcc4", "html_url": "https://github.com/rust-lang/rust/commit/15dd90b6475c7a44c9b95044c91519d9464bbcc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15dd90b6475c7a44c9b95044c91519d9464bbcc4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18a3db6aa1ce9e66b0c9cb776588d56470c6078b", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a3db6aa1ce9e66b0c9cb776588d56470c6078b", "html_url": "https://github.com/rust-lang/rust/commit/18a3db6aa1ce9e66b0c9cb776588d56470c6078b"}, {"sha": "9bf82fa7ffbcb97ef5bfdcbd081b0e11c7b79838", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bf82fa7ffbcb97ef5bfdcbd081b0e11c7b79838", "html_url": "https://github.com/rust-lang/rust/commit/9bf82fa7ffbcb97ef5bfdcbd081b0e11c7b79838"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "102f002855762b6b1e7b3ae717309ff884dfe5be", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/15dd90b6475c7a44c9b95044c91519d9464bbcc4/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15dd90b6475c7a44c9b95044c91519d9464bbcc4/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=15dd90b6475c7a44c9b95044c91519d9464bbcc4", "patch": "@@ -317,26 +317,29 @@ impl Div<i32,Duration> for Duration {\n \n impl fmt::Show for Duration {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let days = self.num_days();\n-        let secs = self.secs - days * SECS_PER_DAY;\n+        // technically speaking, negative duration is not valid ISO 8601,\n+        // but we need to print it anyway.\n+        let (abs, sign) = if self.secs < 0 { (-self, \"-\") } else { (*self, \"\") };\n+\n+        let days = abs.secs / SECS_PER_DAY;\n+        let secs = abs.secs - days * SECS_PER_DAY;\n         let hasdate = days != 0;\n-        let hastime = (secs != 0 || self.nanos != 0) || !hasdate;\n+        let hastime = (secs != 0 || abs.nanos != 0) || !hasdate;\n+\n+        try!(write!(f, \"{}P\", sign));\n \n-        try!(write!(f, \"P\"));\n         if hasdate {\n-            // technically speaking the negative part is not the valid ISO 8601,\n-            // but we need to print it anyway.\n             try!(write!(f, \"{}D\", days));\n         }\n         if hastime {\n-            if self.nanos == 0 {\n+            if abs.nanos == 0 {\n                 try!(write!(f, \"T{}S\", secs));\n-            } else if self.nanos % NANOS_PER_MILLI == 0 {\n-                try!(write!(f, \"T{}.{:03}S\", secs, self.nanos / NANOS_PER_MILLI));\n-            } else if self.nanos % NANOS_PER_MICRO == 0 {\n-                try!(write!(f, \"T{}.{:06}S\", secs, self.nanos / NANOS_PER_MICRO));\n+            } else if abs.nanos % NANOS_PER_MILLI == 0 {\n+                try!(write!(f, \"T{}.{:03}S\", secs, abs.nanos / NANOS_PER_MILLI));\n+            } else if abs.nanos % NANOS_PER_MICRO == 0 {\n+                try!(write!(f, \"T{}.{:06}S\", secs, abs.nanos / NANOS_PER_MICRO));\n             } else {\n-                try!(write!(f, \"T{}.{:09}S\", secs, self.nanos));\n+                try!(write!(f, \"T{}.{:09}S\", secs, abs.nanos));\n             }\n         }\n         Ok(())\n@@ -540,13 +543,15 @@ mod tests {\n         let d: Duration = Zero::zero();\n         assert_eq!(d.to_string(), \"PT0S\".to_string());\n         assert_eq!(Duration::days(42).to_string(), \"P42D\".to_string());\n-        assert_eq!(Duration::days(-42).to_string(), \"P-42D\".to_string());\n+        assert_eq!(Duration::days(-42).to_string(), \"-P42D\".to_string());\n         assert_eq!(Duration::seconds(42).to_string(), \"PT42S\".to_string());\n         assert_eq!(Duration::milliseconds(42).to_string(), \"PT0.042S\".to_string());\n         assert_eq!(Duration::microseconds(42).to_string(), \"PT0.000042S\".to_string());\n         assert_eq!(Duration::nanoseconds(42).to_string(), \"PT0.000000042S\".to_string());\n         assert_eq!((Duration::days(7) + Duration::milliseconds(6543)).to_string(),\n                    \"P7DT6.543S\".to_string());\n+        assert_eq!(Duration::seconds(-86401).to_string(), \"-P1DT1S\".to_string());\n+        assert_eq!(Duration::nanoseconds(-1).to_string(), \"-PT0.000000001S\".to_string());\n \n         // the format specifier should have no effect on `Duration`\n         assert_eq!(format!(\"{:30}\", Duration::days(1) + Duration::milliseconds(2345)),"}]}