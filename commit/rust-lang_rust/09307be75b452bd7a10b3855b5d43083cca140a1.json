{"sha": "09307be75b452bd7a10b3855b5d43083cca140a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MzA3YmU3NWI0NTJiZDdhMTBiMzg1NWI1ZDQzMDgzY2NhMTQwYTE=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-09T05:11:28Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-10T14:02:15Z"}, "message": "add apply ssr assist", "tree": {"sha": "5c1e05f3b1afa70492d37384fd94b989d49d80c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1e05f3b1afa70492d37384fd94b989d49d80c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09307be75b452bd7a10b3855b5d43083cca140a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09307be75b452bd7a10b3855b5d43083cca140a1", "html_url": "https://github.com/rust-lang/rust/commit/09307be75b452bd7a10b3855b5d43083cca140a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09307be75b452bd7a10b3855b5d43083cca140a1/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b1e5cde1cc6e470be60cf2c230b99a62c2d2c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b1e5cde1cc6e470be60cf2c230b99a62c2d2c3", "html_url": "https://github.com/rust-lang/rust/commit/a9b1e5cde1cc6e470be60cf2c230b99a62c2d2c3"}], "stats": {"total": 301, "additions": 300, "deletions": 1}, "files": [{"sha": "d1a250d4874a81a173e520b0937f160442590527", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09307be75b452bd7a10b3855b5d43083cca140a1/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09307be75b452bd7a10b3855b5d43083cca140a1/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=09307be75b452bd7a10b3855b5d43083cca140a1", "patch": "@@ -41,6 +41,7 @@ mod parent_module;\n mod references;\n mod fn_references;\n mod runnables;\n+mod ssr;\n mod status;\n mod syntax_highlighting;\n mod syntax_tree;\n@@ -51,6 +52,7 @@ mod doc_links;\n use std::sync::Arc;\n \n use cfg::CfgOptions;\n+\n use ide_db::base_db::{\n     salsa::{self, ParallelDatabase},\n     CheckCanceled, Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n@@ -502,7 +504,11 @@ impl Analysis {\n         resolve: bool,\n         frange: FileRange,\n     ) -> Cancelable<Vec<Assist>> {\n-        self.with_db(|db| Assist::get(db, config, resolve, frange))\n+        self.with_db(|db| {\n+            let mut acc = Assist::get(db, config, resolve, frange);\n+            ssr::add_ssr_assist(db, &mut acc, resolve, frange);\n+            acc\n+        })\n     }\n \n     /// Computes the set of diagnostics for the given file."}, {"sha": "f3638d928c07f4c353bd7a5765f57a0358a0eab4", "filename": "crates/ide/src/ssr.rs", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/09307be75b452bd7a10b3855b5d43083cca140a1/crates%2Fide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09307be75b452bd7a10b3855b5d43083cca140a1/crates%2Fide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fssr.rs?ref=09307be75b452bd7a10b3855b5d43083cca140a1", "patch": "@@ -0,0 +1,259 @@\n+//! This module provides an SSR assist. It is not desirable to include this\n+//! assist in ide_assists because that would require the ide_assists crate\n+//! depend on the ide_ssr crate.\n+\n+use ide_assists::{Assist, AssistId, AssistKind, GroupLabel};\n+use ide_db::{base_db::FileRange, label::Label, source_change::SourceChange, RootDatabase};\n+\n+pub(crate) fn add_ssr_assist(\n+    db: &RootDatabase,\n+    base: &mut Vec<Assist>,\n+    resolve: bool,\n+    frange: FileRange,\n+) -> Option<()> {\n+    let (match_finder, comment_range) = ide_ssr::ssr_from_comment(db, frange)?;\n+\n+    let (source_change_for_file, source_change_for_workspace) = if resolve {\n+        let edits = match_finder.edits();\n+\n+        let source_change_for_file = {\n+            let text_edit_for_file = edits.get(&frange.file_id).cloned().unwrap_or_default();\n+            SourceChange::from_text_edit(frange.file_id, text_edit_for_file)\n+        };\n+\n+        let source_change_for_workspace = SourceChange::from(match_finder.edits());\n+\n+        (Some(source_change_for_file), Some(source_change_for_workspace))\n+    } else {\n+        (None, None)\n+    };\n+\n+    let assists = vec![\n+        (\"Apply SSR in file\", source_change_for_file),\n+        (\"Apply SSR in workspace\", source_change_for_workspace),\n+    ];\n+\n+    for (label, source_change) in assists.into_iter() {\n+        let assist = Assist {\n+            id: AssistId(\"ssr\", AssistKind::RefactorRewrite),\n+            label: Label::new(label),\n+            group: Some(GroupLabel(\"Apply SSR\".into())),\n+            target: comment_range,\n+            source_change,\n+        };\n+\n+        base.push(assist);\n+    }\n+    Some(())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use std::sync::Arc;\n+\n+    use expect_test::expect;\n+    use ide_assists::Assist;\n+    use ide_db::{\n+        base_db::{fixture::WithFixture, salsa::Durability, FileRange},\n+        symbol_index::SymbolsDatabase,\n+        RootDatabase,\n+    };\n+    use rustc_hash::FxHashSet;\n+\n+    use super::add_ssr_assist;\n+\n+    fn get_assists(ra_fixture: &str, resolve: bool) -> Vec<Assist> {\n+        let (mut db, file_id, range_or_offset) = RootDatabase::with_range_or_offset(ra_fixture);\n+        let mut local_roots = FxHashSet::default();\n+        local_roots.insert(ide_db::base_db::fixture::WORKSPACE);\n+        db.set_local_roots_with_durability(Arc::new(local_roots), Durability::HIGH);\n+\n+        let mut assists = vec![];\n+\n+        add_ssr_assist(\n+            &db,\n+            &mut assists,\n+            resolve,\n+            FileRange { file_id, range: range_or_offset.into() },\n+        );\n+\n+        assists\n+    }\n+\n+    #[test]\n+    fn not_applicable_comment_not_ssr() {\n+        let ra_fixture = r#\"\n+            //- /lib.rs\n+\n+            // This is foo $0\n+            fn foo() {}\n+            \"#;\n+        let resolve = true;\n+\n+        let assists = get_assists(ra_fixture, resolve);\n+\n+        assert_eq!(0, assists.len());\n+    }\n+\n+    #[test]\n+    fn resolve_edits_true() {\n+        let resolve = true;\n+        let assists = get_assists(\n+            r#\"\n+            //- /lib.rs\n+            mod bar;\n+\n+            // 2 ==>> 3$0\n+            fn foo() { 2 }\n+\n+            //- /bar.rs\n+            fn bar() { 2 }\n+            \"#,\n+            resolve,\n+        );\n+\n+        assert_eq!(2, assists.len());\n+        let mut assists = assists.into_iter();\n+\n+        let apply_in_file_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"ssr\",\n+                    RefactorRewrite,\n+                ),\n+                label: \"Apply SSR in file\",\n+                group: Some(\n+                    GroupLabel(\n+                        \"Apply SSR\",\n+                    ),\n+                ),\n+                target: 10..21,\n+                source_change: Some(\n+                    SourceChange {\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"3\",\n+                                        delete: 33..34,\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                        file_system_edits: [],\n+                        is_snippet: false,\n+                    },\n+                ),\n+            }\n+        \"#]]\n+        .assert_debug_eq(&apply_in_file_assist);\n+\n+        let apply_in_workspace_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"ssr\",\n+                    RefactorRewrite,\n+                ),\n+                label: \"Apply SSR in workspace\",\n+                group: Some(\n+                    GroupLabel(\n+                        \"Apply SSR\",\n+                    ),\n+                ),\n+                target: 10..21,\n+                source_change: Some(\n+                    SourceChange {\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"3\",\n+                                        delete: 33..34,\n+                                    },\n+                                ],\n+                            },\n+                            FileId(\n+                                1,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"3\",\n+                                        delete: 11..12,\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                        file_system_edits: [],\n+                        is_snippet: false,\n+                    },\n+                ),\n+            }\n+        \"#]]\n+        .assert_debug_eq(&apply_in_workspace_assist);\n+    }\n+\n+    #[test]\n+    fn resolve_edits_false() {\n+        let resolve = false;\n+        let assists = get_assists(\n+            r#\"\n+            //- /lib.rs\n+            mod bar;\n+\n+            // 2 ==>> 3$0\n+            fn foo() { 2 }\n+\n+            //- /bar.rs\n+            fn bar() { 2 }\n+            \"#,\n+            resolve,\n+        );\n+\n+        assert_eq!(2, assists.len());\n+        let mut assists = assists.into_iter();\n+\n+        let apply_in_file_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"ssr\",\n+                    RefactorRewrite,\n+                ),\n+                label: \"Apply SSR in file\",\n+                group: Some(\n+                    GroupLabel(\n+                        \"Apply SSR\",\n+                    ),\n+                ),\n+                target: 10..21,\n+                source_change: None,\n+            }\n+        \"#]]\n+        .assert_debug_eq(&apply_in_file_assist);\n+\n+        let apply_in_workspace_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"ssr\",\n+                    RefactorRewrite,\n+                ),\n+                label: \"Apply SSR in workspace\",\n+                group: Some(\n+                    GroupLabel(\n+                        \"Apply SSR\",\n+                    ),\n+                ),\n+                target: 10..21,\n+                source_change: None,\n+            }\n+        \"#]]\n+        .assert_debug_eq(&apply_in_workspace_assist);\n+    }\n+}"}, {"sha": "f1b312284d0a4fe7ec7cf5256f611ade346962be", "filename": "crates/ide_ssr/src/from_comment.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/09307be75b452bd7a10b3855b5d43083cca140a1/crates%2Fide_ssr%2Fsrc%2Ffrom_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09307be75b452bd7a10b3855b5d43083cca140a1/crates%2Fide_ssr%2Fsrc%2Ffrom_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ffrom_comment.rs?ref=09307be75b452bd7a10b3855b5d43083cca140a1", "patch": "@@ -0,0 +1,32 @@\n+//! This module allows building an SSR MatchFinder by parsing the SSR rule\n+//! from a comment.\n+\n+use ide_db::{\n+    base_db::{FilePosition, FileRange, SourceDatabase},\n+    RootDatabase,\n+};\n+use syntax::{\n+    ast::{self, AstNode, AstToken},\n+    TextRange,\n+};\n+\n+use crate::MatchFinder;\n+\n+/// Attempts to build an SSR MatchFinder from a comment at the given file\n+/// range. If successful, returns the MatchFinder and a TextRange covering\n+/// comment.\n+pub fn ssr_from_comment(db: &RootDatabase, frange: FileRange) -> Option<(MatchFinder, TextRange)> {\n+    let comment = {\n+        let file = db.parse(frange.file_id);\n+        file.tree().syntax().token_at_offset(frange.range.start()).find_map(ast::Comment::cast)\n+    }?;\n+    let comment_text_without_prefix = comment.text().strip_prefix(comment.prefix()).unwrap();\n+    let ssr_rule = comment_text_without_prefix.parse().ok()?;\n+\n+    let lookup_context = FilePosition { file_id: frange.file_id, offset: frange.range.start() };\n+\n+    let mut match_finder = MatchFinder::in_context(db, lookup_context, vec![]);\n+    match_finder.add_rule(ssr_rule).ok()?;\n+\n+    Some((match_finder, comment.syntax().text_range()))\n+}"}, {"sha": "e72c611a3e20c7a819c6e8a6be3eae3bf2d05e7c", "filename": "crates/ide_ssr/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09307be75b452bd7a10b3855b5d43083cca140a1/crates%2Fide_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09307be75b452bd7a10b3855b5d43083cca140a1/crates%2Fide_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Flib.rs?ref=09307be75b452bd7a10b3855b5d43083cca140a1", "patch": "@@ -58,6 +58,7 @@\n // | VS Code | **Rust Analyzer: Structural Search Replace**\n // |===\n \n+mod from_comment;\n mod matching;\n mod nester;\n mod parsing;\n@@ -71,6 +72,7 @@ mod tests;\n \n use crate::errors::bail;\n pub use crate::errors::SsrError;\n+pub use crate::from_comment::ssr_from_comment;\n pub use crate::matching::Match;\n use crate::matching::MatchFailureReason;\n use hir::Semantics;"}]}