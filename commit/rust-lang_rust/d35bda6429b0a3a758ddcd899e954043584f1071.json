{"sha": "d35bda6429b0a3a758ddcd899e954043584f1071", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNWJkYTY0MjliMGEzYTc1OGRkY2Q4OTllOTU0MDQzNTg0ZjEwNzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-26T19:11:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-26T19:13:42Z"}, "message": "Make always-assert crate reusable", "tree": {"sha": "3371f60836fdab03f218793582d428ef7751fe55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3371f60836fdab03f218793582d428ef7751fe55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d35bda6429b0a3a758ddcd899e954043584f1071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d35bda6429b0a3a758ddcd899e954043584f1071", "html_url": "https://github.com/rust-lang/rust/commit/d35bda6429b0a3a758ddcd899e954043584f1071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d35bda6429b0a3a758ddcd899e954043584f1071/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2664aee8e5976f590e2fcb700982488ae2358780", "url": "https://api.github.com/repos/rust-lang/rust/commits/2664aee8e5976f590e2fcb700982488ae2358780", "html_url": "https://github.com/rust-lang/rust/commit/2664aee8e5976f590e2fcb700982488ae2358780"}], "stats": {"total": 97, "additions": 24, "deletions": 73}, "files": [{"sha": "45a0211ffb85e834997000027d4480eae1a121fc", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -15,6 +15,15 @@ version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e\"\n \n+[[package]]\n+name = \"always-assert\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"727786f78c5bc0cda8011831616589f72084cb16b7df4213a997b78749b55a60\"\n+dependencies = [\n+ \"log\",\n+]\n+\n [[package]]\n name = \"ansi_term\"\n version = \"0.12.1\"\n@@ -1415,6 +1424,7 @@ dependencies = [\n name = \"rust-analyzer\"\n version = \"0.0.0\"\n dependencies = [\n+ \"always-assert\",\n  \"anyhow\",\n  \"cfg\",\n  \"crossbeam-channel 0.5.0\",\n@@ -1658,6 +1668,7 @@ dependencies = [\n name = \"stdx\"\n version = \"0.0.0\"\n dependencies = [\n+ \"always-assert\",\n  \"backtrace\",\n ]\n "}, {"sha": "8ec4ac65e29db270a1345d98bd128691fd20a9c7", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -10,7 +10,7 @@ use ide_db::{\n     },\n     SymbolKind,\n };\n-use stdx::{assert_never, impl_from};\n+use stdx::{impl_from, never};\n use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n@@ -404,7 +404,7 @@ impl Builder {\n     pub(crate) fn set_detail(mut self, detail: Option<impl Into<String>>) -> Builder {\n         self.detail = detail.map(Into::into);\n         if let Some(detail) = &self.detail {\n-            if assert_never!(detail.contains('\\n'), \"multiline detail:\\n{}\", detail) {\n+            if never!(detail.contains('\\n'), \"multiline detail:\\n{}\", detail) {\n                 self.detail = Some(detail.splitn(2, '\\n').next().unwrap().to_string());\n             }\n         }"}, {"sha": "99a558532875309f8436fcf98ea7d7362a62ea8c", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -9,7 +9,7 @@ use ide_db::{\n     search::FileReference,\n     RootDatabase,\n };\n-use stdx::assert_never;\n+use stdx::never;\n use syntax::{\n     ast::{self, NameOwner},\n     lex_single_syntax_kind, AstNode, SyntaxKind, SyntaxNode, T,\n@@ -285,7 +285,7 @@ fn rename_mod(\n }\n \n fn rename_to_self(sema: &Semantics<RootDatabase>, local: hir::Local) -> RenameResult<SourceChange> {\n-    if assert_never!(local.is_self(sema.db)) {\n+    if never!(local.is_self(sema.db)) {\n         bail!(\"rename_to_self invoked on self\");\n     }\n \n@@ -388,7 +388,7 @@ fn rename_self_to_param(\n     let (file_id, self_param) = match local.source(sema.db) {\n         InFile { file_id, value: Either::Right(self_param) } => (file_id, self_param),\n         _ => {\n-            assert_never!(true, \"rename_self_to_param invoked on a non-self local\");\n+            never!(true, \"rename_self_to_param invoked on a non-self local\");\n             bail!(\"rename_self_to_param invoked on a non-self local\");\n         }\n     };"}, {"sha": "f76bac151c2a89cabf6bf853941d9234f0eb1c2c", "filename": "crates/ide_db/src/source_change.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsource_change.rs?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -10,7 +10,7 @@ use std::{\n \n use base_db::{AnchoredPathBuf, FileId};\n use rustc_hash::FxHashMap;\n-use stdx::assert_never;\n+use stdx::never;\n use text_edit::TextEdit;\n \n #[derive(Default, Debug, Clone)]\n@@ -40,10 +40,7 @@ impl SourceChange {\n     pub fn insert_source_edit(&mut self, file_id: FileId, edit: TextEdit) {\n         match self.source_file_edits.entry(file_id) {\n             Entry::Occupied(mut entry) => {\n-                assert_never!(\n-                    entry.get_mut().union(edit).is_err(),\n-                    \"overlapping edits for same file\"\n-                );\n+                never!(entry.get_mut().union(edit).is_err(), \"overlapping edits for same file\");\n             }\n             Entry::Vacant(entry) => {\n                 entry.insert(edit);"}, {"sha": "82ea76666a79394eb0a0e090c6ff9cff7f168a12", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -37,6 +37,7 @@ lsp-server = \"0.5.0\"\n tracing = \"0.1\"\n tracing-subscriber = { version = \"0.2\", default-features = false, features = [\"env-filter\", \"registry\"] }\n tracing-tree = { version = \"0.1.4\" }\n+always-assert = \"0.1\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n flycheck = { path = \"../flycheck\", version = \"0.0.0\" }\n@@ -72,3 +73,4 @@ tt = { path = \"../tt\" }\n \n [features]\n jemalloc = [\"jemallocator\", \"profile/jemalloc\"]\n+force-always-assert = [\"always-assert/force\"]"}, {"sha": "bee2eedbccb3b63133516b148f83834104d5a7cc", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -75,15 +75,6 @@ fn setup_logging(log_file: Option<PathBuf>) -> Result<()> {\n \n     profile::init();\n \n-    if !cfg!(debug_assertions) {\n-        stdx::set_assert_hook(|loc, args| {\n-            if env::var(\"RA_PROFILE\").is_ok() {\n-                panic!(\"assertion failed at {}: {}\", loc, args)\n-            }\n-            log::error!(\"assertion failed at {}: {}\", loc, args)\n-        });\n-    }\n-\n     Ok(())\n }\n "}, {"sha": "5866c0a280b333d9169d34393c9c50ac51b1314c", "filename": "crates/stdx/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fstdx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fstdx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2FCargo.toml?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -11,6 +11,7 @@ doctest = false\n \n [dependencies]\n backtrace = { version = \"0.3.44\", optional = true }\n+always-assert = { version = \"0.1.1\", features = [\"log\"] }\n # Think twice before adding anything here\n \n [features]"}, {"sha": "d26be4853449c993f050466200a96d15eec58ee6", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -4,7 +4,7 @@ use std::{cmp::Ordering, ops, process, time::Instant};\n mod macros;\n pub mod panic_context;\n \n-pub use crate::macros::{on_assert_failure, set_assert_hook};\n+pub use always_assert::{always, never};\n \n #[inline(always)]\n pub fn is_ci() -> bool {"}, {"sha": "d91fc690cb517fbc3de0058c3acb8d4c1dd2d382", "filename": "crates/stdx/src/macros.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fstdx%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/crates%2Fstdx%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fmacros.rs?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -1,9 +1,5 @@\n //! Convenience macros.\n \n-use std::{\n-    fmt, mem, panic,\n-    sync::atomic::{AtomicUsize, Ordering::SeqCst},\n-};\n #[macro_export]\n macro_rules! eprintln {\n     ($($tt:tt)*) => {{\n@@ -49,50 +45,3 @@ macro_rules! impl_from {\n         )*\n     }\n }\n-\n-/// A version of `assert!` macro which allows to handle an assertion failure.\n-///\n-/// In release mode, it returns the condition and logs an error.\n-///\n-/// ```\n-/// if assert_never!(impossible) {\n-///     // Heh, this shouldn't have happened, but lets try to soldier on...\n-///     return None;\n-/// }\n-/// ```\n-///\n-/// Rust analyzer is a long-running process, and crashing really isn't an option.\n-///\n-/// Shamelessly stolen from: https://www.sqlite.org/assert.html\n-#[macro_export]\n-macro_rules! assert_never {\n-    ($cond:expr) => { $crate::assert_never!($cond, \"\") };\n-    ($cond:expr, $($fmt:tt)*) => {{\n-        let value = $cond;\n-        if value {\n-            $crate::on_assert_failure(\n-                format_args!($($fmt)*)\n-            );\n-        }\n-        value\n-    }};\n-}\n-\n-type AssertHook = fn(&panic::Location<'_>, fmt::Arguments<'_>);\n-static HOOK: AtomicUsize = AtomicUsize::new(0);\n-\n-pub fn set_assert_hook(hook: AssertHook) {\n-    HOOK.store(hook as usize, SeqCst);\n-}\n-\n-#[cold]\n-#[track_caller]\n-pub fn on_assert_failure(args: fmt::Arguments) {\n-    let hook: usize = HOOK.load(SeqCst);\n-    if hook == 0 {\n-        panic!(\"\\n  assertion failed: {}\\n\", args);\n-    }\n-\n-    let hook: AssertHook = unsafe { mem::transmute::<usize, AssertHook>(hook) };\n-    hook(panic::Location::caller(), args)\n-}"}, {"sha": "0c5e2ad33cb0efb327ae8264cf70dce97e637dd3", "filename": "docs/dev/style.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -232,7 +232,7 @@ if idx >= len {\n ## Assertions\n \n Assert liberally.\n-Prefer `stdx::assert_never!` to standard `assert!`.\n+Prefer `stdx::never!` to standard `assert!`.\n \n ## Getters & Setters\n "}, {"sha": "81b9956b8f03d2e3fe1a5e968deea8dc63304907", "filename": "xtask/src/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d35bda6429b0a3a758ddcd899e954043584f1071/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35bda6429b0a3a758ddcd899e954043584f1071/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=d35bda6429b0a3a758ddcd899e954043584f1071", "patch": "@@ -180,7 +180,7 @@ fn install_server(opts: ServerOpt) -> Result<()> {\n         Malloc::Jemalloc => &[\"--features\", \"jemalloc\"],\n     };\n \n-    let cmd = cmd!(\"cargo install --path crates/rust-analyzer --locked --force {features...}\");\n+    let cmd = cmd!(\"cargo install --path crates/rust-analyzer --locked --force --features force-always-assert {features...}\");\n     let res = cmd.run();\n \n     if res.is_err() && old_rust {"}]}