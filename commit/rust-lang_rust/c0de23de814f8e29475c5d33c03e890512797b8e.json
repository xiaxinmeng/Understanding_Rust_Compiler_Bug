{"sha": "c0de23de814f8e29475c5d33c03e890512797b8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZGUyM2RlODE0ZjhlMjk0NzVjNWQzM2MwM2U4OTA1MTI3OTdiOGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-16T13:06:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-24T09:35:34Z"}, "message": "convert to use `is_local` instead of `== LOCAL_CRATE`", "tree": {"sha": "caa55db91ca1f76c0775fc809ad2d79b165513f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa55db91ca1f76c0775fc809ad2d79b165513f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0de23de814f8e29475c5d33c03e890512797b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0de23de814f8e29475c5d33c03e890512797b8e", "html_url": "https://github.com/rust-lang/rust/commit/c0de23de814f8e29475c5d33c03e890512797b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0de23de814f8e29475c5d33c03e890512797b8e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91bef2e051eeb307a8d681a312b824fcc6f4449", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91bef2e051eeb307a8d681a312b824fcc6f4449", "html_url": "https://github.com/rust-lang/rust/commit/e91bef2e051eeb307a8d681a312b824fcc6f4449"}], "stats": {"total": 124, "additions": 61, "deletions": 63}, "files": [{"sha": "f7f926d9d971afa5be26fad044a89ae5b5c873ae", "filename": "src/librustc/ast_map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fmod.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -14,7 +14,7 @@ use self::MapEntry::*;\n \n use metadata::inline::InlinedItem;\n use metadata::inline::InlinedItem as II;\n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n use syntax::abi;\n use syntax::ast::*;\n use syntax::ast_util;\n@@ -592,7 +592,7 @@ impl<'ast> Map<'ast> {\n     }\n \n     pub fn def_id_span(&self, def_id: DefId, fallback: Span) -> Span {\n-        if def_id.krate == LOCAL_CRATE {\n+        if def_id.is_local() {\n             self.opt_span(def_id.node).unwrap_or(fallback)\n         } else {\n             fallback"}, {"sha": "bceccc622af32b68691290abf516c79c8e6fb53d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -1260,7 +1260,7 @@ pub fn list_crate_metadata(bytes: &[u8], out: &mut io::Write) -> io::Result<()>\n // then we must translate the crate number from that encoded in the external\n // crate to the correct local crate number.\n pub fn translate_def_id(cdata: Cmd, did: DefId) -> DefId {\n-    if did.krate == LOCAL_CRATE {\n+    if did.is_local() {\n         return DefId { krate: cdata.cnum, node: did.node };\n     }\n "}, {"sha": "3f59d70642d8d5c48bad13fde31325a3832d7752", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -1781,7 +1781,7 @@ fn encode_lang_items(ecx: &EncodeContext, rbml_w: &mut Encoder) {\n \n     for (i, &def_id) in ecx.tcx.lang_items.items() {\n         if let Some(id) = def_id {\n-            if id.krate == LOCAL_CRATE {\n+            if id.is_local() {\n                 rbml_w.start_tag(tag_lang_items_item);\n                 rbml_w.wr_tagged_u32(tag_lang_items_item_id, i as u32);\n                 rbml_w.wr_tagged_u32(tag_lang_items_item_node_id, id.node as u32);"}, {"sha": "29d140004f8aa6abb0b4a424b400a00ec25cb8a0", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::def::DefFn;\n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n use middle::subst::{Subst, Substs, EnumeratedItems};\n use middle::ty::{TransmuteRestriction, ctxt, TyBareFn};\n use middle::ty::{self, Ty, HasTypeFlags};"}, {"sha": "206e1f2ba641bf54acac2be4eddf2ba4981c06c5", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             // Check the impl. If the generics on the self\n                             // type of the impl require inlining, this method\n                             // does too.\n-                            assert!(impl_did.krate == LOCAL_CRATE);\n+                            assert!(impl_did.is_local());\n                             match self.tcx\n                                       .map\n                                       .expect_item(impl_did.node)\n@@ -356,7 +356,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     // reachability, which might result in a compile time loss.\n     fn mark_destructors_reachable(&mut self) {\n         for (_, destructor_def_id) in self.tcx.destructor_for_type.borrow().iter() {\n-            if destructor_def_id.krate == LOCAL_CRATE {\n+            if destructor_def_id.is_local() {\n                 self.reachable_symbols.insert(destructor_def_id.node);\n             }\n         }"}, {"sha": "87939c45d67c54081afd27254c22ac14c77f557e", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -186,7 +186,7 @@ pub fn orphan_check<'tcx>(tcx: &ty::ctxt<'tcx>,\n     debug!(\"orphan_check: trait_ref={:?}\", trait_ref);\n \n     // If the *trait* is local to the crate, ok.\n-    if trait_ref.def_id.krate == LOCAL_CRATE {\n+    if trait_ref.def_id.is_local() {\n         debug!(\"trait {:?} is local to current crate\",\n                trait_ref.def_id);\n         return Ok(());\n@@ -318,7 +318,7 @@ fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n         ty::TyEnum(def, _) |\n         ty::TyStruct(def, _) => {\n-            def.did.krate == LOCAL_CRATE\n+            def.did.is_local()\n         }\n \n         ty::TyBox(_) => { // Box<T>\n@@ -327,7 +327,7 @@ fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>,\n         }\n \n         ty::TyTrait(ref tt) => {\n-            tt.principal_def_id().krate == LOCAL_CRATE\n+            tt.principal_def_id().is_local()\n         }\n \n         ty::TyClosure(..) |"}, {"sha": "0a4b935f1a249012a27cf2cefbc65906a78a41c5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -5468,7 +5468,7 @@ fn lookup_locally_or_in_crate_store<V, F>(descr: &str,\n         None => { }\n     }\n \n-    if def_id.krate == LOCAL_CRATE {\n+    if def_id.is_local() {\n         panic!(\"No def'n found for {:?} in tcx.{}\", def_id, descr);\n     }\n     let v = load_external();\n@@ -5776,7 +5776,7 @@ impl<'tcx> ctxt<'tcx> {\n                                              expected.ty,\n                                              found.ty));\n \n-                match (expected.def_id.krate == LOCAL_CRATE,\n+                match (expected.def_id.is_local(),\n                        self.map.opt_span(expected.def_id.node)) {\n                     (true, Some(span)) => {\n                         self.sess.span_note(span,\n@@ -5793,7 +5793,7 @@ impl<'tcx> ctxt<'tcx> {\n                     expected.origin_span,\n                     &format!(\"...that was applied to an unconstrained type variable here\"));\n \n-                match (found.def_id.krate == LOCAL_CRATE,\n+                match (found.def_id.is_local(),\n                        self.map.opt_span(found.def_id.node)) {\n                     (true, Some(span)) => {\n                         self.sess.span_note(span,\n@@ -5905,7 +5905,7 @@ impl<'tcx> ctxt<'tcx> {\n     }\n \n     pub fn trait_impl_polarity(&self, id: DefId) -> Option<ast::ImplPolarity> {\n-        if id.krate == LOCAL_CRATE {\n+        if id.is_local() {\n             match self.map.find(id.node) {\n                 Some(ast_map::NodeItem(item)) => {\n                     match item.node {\n@@ -5961,7 +5961,7 @@ impl<'tcx> ctxt<'tcx> {\n \n     /// Returns whether this DefId refers to an impl\n     pub fn is_impl(&self, id: DefId) -> bool {\n-        if id.krate == LOCAL_CRATE {\n+        if id.is_local() {\n             if let Some(ast_map::NodeItem(\n                 &ast::Item { node: ast::ItemImpl(..), .. })) = self.map.find(id.node) {\n                 true\n@@ -6012,7 +6012,7 @@ impl<'tcx> ctxt<'tcx> {\n     pub fn with_path<T, F>(&self, id: DefId, f: F) -> T where\n         F: FnOnce(ast_map::PathElems) -> T,\n     {\n-        if id.krate == LOCAL_CRATE {\n+        if id.is_local() {\n             self.map.with_path(id.node, f)\n         } else {\n             f(csearch::get_item_path(self, id).iter().cloned().chain(LinkedPath::empty()))\n@@ -6135,7 +6135,7 @@ impl<'tcx> ctxt<'tcx> {\n     /// Obtain the representation annotation for a struct definition.\n     pub fn lookup_repr_hints(&self, did: DefId) -> Rc<Vec<attr::ReprAttr>> {\n         memoized(&self.repr_hint_cache, did, |did: DefId| {\n-            Rc::new(if did.krate == LOCAL_CRATE {\n+            Rc::new(if did.is_local() {\n                 self.get_attrs(did).iter().flat_map(|meta| {\n                     attr::find_repr_attrs(self.sess.diagnostic(), meta).into_iter()\n                 }).collect()\n@@ -6315,7 +6315,7 @@ impl<'tcx> ctxt<'tcx> {\n     /// Load primitive inherent implementations if necessary\n     pub fn populate_implementations_for_primitive_if_necessary(&self,\n                                                                primitive_def_id: DefId) {\n-        if primitive_def_id.krate == LOCAL_CRATE {\n+        if primitive_def_id.is_local() {\n             return\n         }\n \n@@ -6337,7 +6337,7 @@ impl<'tcx> ctxt<'tcx> {\n     /// the given type if necessary.\n     pub fn populate_inherent_implementations_for_type_if_necessary(&self,\n                                                                    type_id: DefId) {\n-        if type_id.krate == LOCAL_CRATE {\n+        if type_id.is_local() {\n             return\n         }\n \n@@ -6365,7 +6365,7 @@ impl<'tcx> ctxt<'tcx> {\n     /// Populates the type context with all the implementations for the given\n     /// trait if necessary.\n     pub fn populate_implementations_for_trait_if_necessary(&self, trait_id: DefId) {\n-        if trait_id.krate == LOCAL_CRATE {\n+        if trait_id.is_local() {\n             return\n         }\n "}, {"sha": "b94711065dfd45d731d137a04d0944939f81296f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n use middle::subst::{self, Subst};\n use middle::ty::{BoundRegion, BrAnon, BrNamed};\n use middle::ty::{ReEarlyBound, BrFresh, ctxt};\n@@ -659,7 +659,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n             TyParam(ref param_ty) => write!(f, \"{}\", param_ty),\n             TyEnum(def, substs) | TyStruct(def, substs) => {\n                 ty::tls::with(|tcx| {\n-                    if def.did.krate == LOCAL_CRATE &&\n+                    if def.did.is_local() &&\n                           !tcx.tcache.borrow().contains_key(&def.did) {\n                         write!(f, \"{}<..>\", tcx.item_path_str(def.did))\n                     } else {\n@@ -674,7 +674,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n             TyClosure(ref did, ref substs) => ty::tls::with(|tcx| {\n                 try!(write!(f, \"[closure\"));\n \n-                if did.krate == LOCAL_CRATE {\n+                if did.is_local() {\n                     try!(write!(f, \"@{:?}\", tcx.map.span(did.node)));\n                     let mut sep = \" \";\n                     try!(tcx.with_freevars(did.node, |freevars| {"}, {"sha": "4fd8481f3b78ee56e3138bf32c5c5c91dc4f8865", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -27,7 +27,7 @@ use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;\n use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n-use rustc::middle::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::mem_categorization as mc;\n@@ -1193,7 +1193,7 @@ impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n             }\n \n             LpDowncast(ref lp, variant_def_id) => {\n-                let variant_str = if variant_def_id.krate == LOCAL_CRATE {\n+                let variant_str = if variant_def_id.is_local() {\n                     ty::tls::with(|tcx| tcx.item_path_str(variant_def_id))\n                 } else {\n                     format!(\"{:?}\", variant_def_id)\n@@ -1225,7 +1225,7 @@ impl<'tcx> fmt::Display for LoanPath<'tcx> {\n             }\n \n             LpDowncast(ref lp, variant_def_id) => {\n-                let variant_str = if variant_def_id.krate == LOCAL_CRATE {\n+                let variant_str = if variant_def_id.is_local() {\n                     ty::tls::with(|tcx| tcx.item_path_str(variant_def_id))\n                 } else {\n                     format!(\"{:?}\", variant_def_id)"}, {"sha": "d6aaa2a9050514ef312c2cb74f523240ced7b9c9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -30,7 +30,7 @@\n \n use metadata::{csearch, decoder};\n use middle::{cfg, def, infer, pat_util, stability, traits};\n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n use middle::subst::Substs;\n use middle::ty::{self, Ty};\n use middle::const_eval::{eval_const_expr_partial, ConstVal};\n@@ -2029,7 +2029,7 @@ impl LintPass for MissingDebugImplementations {\n             let debug_def = cx.tcx.lookup_trait_def(debug);\n             let mut impls = NodeSet();\n             debug_def.for_each_impl(cx.tcx, |d| {\n-                if d.krate == LOCAL_CRATE {\n+                if d.is_local() {\n                     if let Some(ty_def) = cx.tcx.node_id_to_type(d.node).ty_to_def_id() {\n                         impls.insert(ty_def.node);\n                     }\n@@ -2569,7 +2569,7 @@ impl LintPass for DropWithReprExtern {\n     fn check_crate(&mut self, ctx: &Context, _: &ast::Crate) {\n         for dtor_did in ctx.tcx.destructors.borrow().iter() {\n             let (drop_impl_did, dtor_self_type) =\n-                if dtor_did.krate == LOCAL_CRATE {\n+                if dtor_did.is_local() {\n                     let impl_did = ctx.tcx.map.get_parent_did(dtor_did.node);\n                     let ty = ctx.tcx.lookup_item_type(impl_did).ty;\n                     (impl_did, ty)"}, {"sha": "69f1c9f2ff30c4ef07f4414aa11f36d6877dc884", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -56,7 +56,7 @@ use rustc::lint;\n use rustc::metadata::csearch;\n use rustc::metadata::decoder::{DefLike, DlDef, DlField, DlImpl};\n use rustc::middle::def::*;\n-use rustc::middle::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::def_id::DefId;\n use rustc::middle::pat_util::pat_bindings;\n use rustc::middle::privacy::*;\n use rustc::middle::subst::{ParamSpace, FnSpace, TypeSpace};\n@@ -1256,7 +1256,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     fn get_trait_name(&self, did: DefId) -> Name {\n-        if did.krate == LOCAL_CRATE {\n+        if did.is_local() {\n             self.ast_map.expect_item(did.node).ident.name\n         } else {\n             csearch::get_trait_name(&self.session.cstore, did)\n@@ -3467,7 +3467,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         fn is_static_method(this: &Resolver, did: DefId) -> bool {\n-            if did.krate == LOCAL_CRATE {\n+            if did.is_local() {\n                 let sig = match this.ast_map.get(did.node) {\n                     ast_map::NodeTraitItem(trait_item) => match trait_item.node {\n                         ast::MethodTraitItem(ref sig, _) => sig,"}, {"sha": "36ed2c1457954dc665a806915ec3ed1ff7068acc", "filename": "src/librustc_resolve/record_exports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -25,7 +25,6 @@ use build_reduced_graph;\n use module_to_string;\n \n use rustc::middle::def::Export;\n-use rustc::middle::def_id::LOCAL_CRATE;\n use syntax::ast;\n \n use std::ops::{Deref, DerefMut};\n@@ -57,7 +56,7 @@ impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n         // exports for nonlocal crates.\n \n         match module_.def_id.get() {\n-            Some(def_id) if def_id.krate == LOCAL_CRATE => {\n+            Some(def_id) if def_id.is_local() => {\n                 // OK. Continue.\n                 debug!(\"(recording exports for module subtree) recording \\\n                         exports for local module `{}`\","}, {"sha": "11edcc2272840d8dc3dc3ce58caf3105a22c21f8", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -546,7 +546,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             }\n             def::DefMethod(decl_id) => {\n                 let sub_span = self.span_utils.sub_span_for_meth_name(path.span);\n-                let def_id = if decl_id.krate == LOCAL_CRATE {\n+                let def_id = if decl_id.is_local() {\n                     let ti = self.tcx.impl_or_trait_item(decl_id);\n                     match ti.container() {\n                         ty::TraitContainer(def_id) => {"}, {"sha": "2adc4e1944ea67668fa3214bf78e002d3d23afe9", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -2247,7 +2247,7 @@ pub fn create_entry_wrapper(ccx: &CrateContext,\n                     Ok(id) => id,\n                     Err(s) => { ccx.sess().fatal(&s[..]); }\n                 };\n-                let start_fn = if start_def_id.krate == LOCAL_CRATE {\n+                let start_fn = if start_def_id.is_local() {\n                     get_item_val(ccx, start_def_id.node)\n                 } else {\n                     let start_fn_type = csearch::get_type(ccx.tcx(),"}, {"sha": "f5dead996fb3e36f672c5e37254da7fa9d907ec1", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -464,7 +464,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n     // or is a named tuple constructor.\n     let must_monomorphise = if !substs.types.is_empty() || is_default {\n         true\n-    } else if def_id.krate == LOCAL_CRATE {\n+    } else if def_id.is_local() {\n         let map_node = session::expect(\n             ccx.sess(),\n             tcx.map.find(def_id.node),\n@@ -524,7 +524,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n \n     // Find the actual function pointer.\n     let mut val = {\n-        if def_id.krate == LOCAL_CRATE {\n+        if def_id.is_local() {\n             // Internal reference.\n             get_item_val(ccx, def_id.node)\n         } else {"}, {"sha": "37d3009a34b7e44c9e68df9a352e57b36909edb5", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -23,7 +23,7 @@ use super::{declare_local, VariableKind, VariableAccess};\n use llvm::{self, ValueRef};\n use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType};\n \n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n use middle::pat_util;\n use middle::subst::{self, Substs};\n use rustc::ast_map;\n@@ -322,7 +322,7 @@ impl<'tcx> TypeMap<'tcx> {\n                                             output: &mut String) {\n             // First, find out the 'real' def_id of the type. Items inlined from\n             // other crates have to be mapped back to their source.\n-            let source_def_id = if def_id.krate == LOCAL_CRATE {\n+            let source_def_id = if def_id.is_local() {\n                 match cx.external_srcs().borrow().get(&def_id.node).cloned() {\n                     Some(source_def_id) => {\n                         // The given def_id identifies the inlined copy of a\n@@ -336,7 +336,7 @@ impl<'tcx> TypeMap<'tcx> {\n             };\n \n             // Get the crate hash as first part of the identifier.\n-            let crate_hash = if source_def_id.krate == LOCAL_CRATE {\n+            let crate_hash = if source_def_id.is_local() {\n                 cx.link_meta().crate_hash.clone()\n             } else {\n                 cx.sess().cstore.get_crate_hash(source_def_id.krate)"}, {"sha": "7125a890d4c34626b1e5ef447fca7bff51bcb94f", "filename": "src/librustc_trans/trans/debuginfo/namespace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fnamespace.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -15,7 +15,7 @@ use super::utils::{DIB, debug_context};\n use llvm;\n use llvm::debuginfo::DIScope;\n use rustc::ast_map;\n-use rustc::middle::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::def_id::DefId;\n use trans::common::CrateContext;\n \n use std::ffi::CString;\n@@ -58,7 +58,7 @@ pub fn crate_root_namespace<'a>(cx: &'a CrateContext) -> &'a str {\n pub fn namespace_for_item(cx: &CrateContext, def_id: DefId) -> Rc<NamespaceTreeNode> {\n     cx.tcx().with_path(def_id, |path| {\n         // prepend crate name if not already present\n-        let krate = if def_id.krate == LOCAL_CRATE {\n+        let krate = if def_id.is_local() {\n             let crate_namespace_name = token::intern(crate_root_namespace(cx));\n             Some(ast_map::PathMod(crate_namespace_name))\n         } else {"}, {"sha": "0535e9986f5b9de257b90395fb69a8516f12374d", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -13,7 +13,7 @@\n use super::namespace::crate_root_namespace;\n \n use trans::common::CrateContext;\n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n use middle::subst::{self, Substs};\n use middle::ty::{self, Ty};\n \n@@ -172,7 +172,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                       output: &mut String) {\n         cx.tcx().with_path(def_id, |path| {\n             if qualified {\n-                if def_id.krate == LOCAL_CRATE {\n+                if def_id.is_local() {\n                     output.push_str(crate_root_namespace(cx));\n                     output.push_str(\"::\");\n                 }"}, {"sha": "09d014a33823eeb80efc7d4e721625373eac636d", "filename": "src/librustc_trans/trans/debuginfo/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Futils.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -13,7 +13,7 @@\n use super::{FunctionDebugContext, CrateDebugContext};\n use super::namespace::namespace_for_item;\n \n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n \n use llvm;\n use llvm::debuginfo::{DIScope, DIBuilderRef, DIDescriptor, DIArray};\n@@ -99,7 +99,7 @@ pub fn assert_type_for_node_id(cx: &CrateContext,\n pub fn get_namespace_and_span_for_item(cx: &CrateContext, def_id: DefId)\n                                    -> (DIScope, Span) {\n     let containing_scope = namespace_for_item(cx, def_id).scope;\n-    let definition_span = if def_id.krate == LOCAL_CRATE {\n+    let definition_span = if def_id.is_local() {\n         cx.tcx().map.span(def_id.node)\n     } else {\n         // For external items there is no span information"}, {"sha": "aea010e7d97b7f955f648fdcd1fd0c8f7b037244", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -55,7 +55,6 @@ use back::abi;\n use llvm::{self, ValueRef, TypeKind};\n use middle::check_const;\n use middle::def;\n-use middle::def_id::{LOCAL_CRATE};\n use middle::lang_items::CoerceUnsizedTraitLangItem;\n use middle::subst::{Substs, VecPerParamSpace};\n use middle::traits;\n@@ -901,7 +900,7 @@ fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let const_ty = expr_ty(bcx, ref_expr);\n \n             // For external constants, we don't inline.\n-            let val = if did.krate == LOCAL_CRATE {\n+            let val = if did.is_local() {\n                 // Case 1.\n \n                 // The LLVM global has the type of its initializer,"}, {"sha": "5a1988d3fc74c719401b7bc12db02f59e353ba9c", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -340,7 +340,7 @@ pub fn get_res_dtor<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         let (val, _, _) = monomorphize::monomorphic_fn(ccx, did, substs, None);\n \n         val\n-    } else if did.krate == LOCAL_CRATE {\n+    } else if did.is_local() {\n         get_item_val(ccx, did.node)\n     } else {\n         let tcx = ccx.tcx();"}, {"sha": "8c20b85b7c35dcee0b49f2b2e0483e9f7a3edb38", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -12,7 +12,7 @@ use llvm::{AvailableExternallyLinkage, InternalLinkage, SetLinkage};\n use metadata::csearch;\n use metadata::inline::InlinedItem;\n use middle::astencode;\n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n use middle::subst::Substs;\n use trans::base::{push_ctxt, trans_item, get_item_val, trans_fn};\n use trans::common::*;\n@@ -189,7 +189,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n \n pub fn get_local_instance(ccx: &CrateContext, fn_id: DefId)\n     -> Option<DefId> {\n-    if fn_id.krate == LOCAL_CRATE {\n+    if fn_id.is_local() {\n         Some(fn_id)\n     } else {\n         instantiate_inline(ccx, fn_id)"}, {"sha": "9d0cd3422727582fba2d5c8ef0d4290d5b143cf0", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -12,7 +12,7 @@ use arena::TypedArena;\n use back::abi;\n use back::link;\n use llvm::{ValueRef, get_params};\n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n use middle::subst::{Subst, Substs};\n use middle::subst::VecPerParamSpace;\n use middle::subst;"}, {"sha": "f14f196f1aebb67ff522447e0fe13cfefd37ac72", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -1276,7 +1276,7 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n     let trait_did = bound.0.def_id;\n     let ty = this.projected_ty_from_poly_trait_ref(span, bound, assoc_name);\n \n-    let item_did = if trait_did.krate == LOCAL_CRATE {\n+    let item_did = if trait_did.is_local() {\n         // `ty::trait_items` used below requires information generated\n         // by type collection, which may be in progress at this point.\n         match tcx.map.expect_item(trait_did.node).node {"}, {"sha": "bbea25525738a1ffdd32d634d166e4f29976da18", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -427,7 +427,7 @@ pub fn check_item_bodies(ccx: &CrateCtxt) {\n \n pub fn check_drop_impls(ccx: &CrateCtxt) {\n     for drop_method_did in ccx.tcx.destructors.borrow().iter() {\n-        if drop_method_did.krate == LOCAL_CRATE {\n+        if drop_method_did.is_local() {\n             let drop_impl_did = ccx.tcx.map.get_parent_did(drop_method_did.node);\n             match dropck::check_drop_impl(ccx.tcx, drop_impl_did) {\n                 Ok(()) => {}"}, {"sha": "be24c771b944af103dbadd1575eef886581b337a", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -15,7 +15,7 @@ use self::ResolveReason::*;\n \n use astconv::AstConv;\n use check::FnCtxt;\n-use middle::def_id::{DefId, LOCAL_CRATE};\n+use middle::def_id::DefId;\n use middle::pat_util;\n use middle::ty::{self, Ty, MethodCall, MethodCallee};\n use middle::ty_fold::{TypeFolder,TypeFoldable};\n@@ -351,7 +351,7 @@ impl ResolveReason {\n                 tcx.expr_span(upvar_id.closure_expr_id)\n             }\n             ResolvingClosure(did) => {\n-                if did.krate == LOCAL_CRATE {\n+                if did.is_local() {\n                     tcx.expr_span(did.node)\n                 } else {\n                     DUMMY_SP"}, {"sha": "aadd74708abc47924d7a926d784688561f9b92f7", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -320,7 +320,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                 }\n                 _ => {\n                     // Destructors only work on nominal types.\n-                    if impl_did.krate == LOCAL_CRATE {\n+                    if impl_did.is_local() {\n                         {\n                             match tcx.map.find(impl_did.node) {\n                                 Some(ast_map::NodeItem(item)) => {"}, {"sha": "0b7758f4796b4dfbeb6826928130ac911cc23381", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -295,7 +295,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                         // can't do `unsafe impl Send for Rc<SomethingLocal>` or\n                         // `impl !Send for Box<SomethingLocalAndSend>`.\n                         Some(self_def_id) => {\n-                            if self_def_id.krate == LOCAL_CRATE {\n+                            if self_def_id.is_local() {\n                                 None\n                             } else {\n                                 Some(format!("}, {"sha": "f442189ea99f65a517aa821d5f5f8d52d6307e4b", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -150,7 +150,7 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n \n     fn report_overlap_note(&self, impl1: DefId, impl2: DefId) {\n \n-        if impl2.krate == LOCAL_CRATE {\n+        if impl2.is_local() {\n             span_note!(self.tcx.sess, self.span_of_impl(impl2),\n                        \"note conflicting implementation here\");\n         } else {"}, {"sha": "d3e414fd9c0e475d25bc9daf44c0bfc55df6f8ea", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -400,7 +400,7 @@ impl<'a, 'tcx> AstConv<'tcx> for ItemCtxt<'a, 'tcx> {\n                                            assoc_name: ast::Name)\n                                            -> bool\n     {\n-        if trait_def_id.krate == LOCAL_CRATE {\n+        if trait_def_id.is_local() {\n             trait_defines_associated_type_named(self.ccx, trait_def_id.node, assoc_name)\n         } else {\n             let trait_def = self.tcx().lookup_trait_def(trait_def_id);"}, {"sha": "8165da95aedc7498b0cc8464220268d1aebc3ca2", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0de23de814f8e29475c5d33c03e890512797b8e/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=c0de23de814f8e29475c5d33c03e890512797b8e", "patch": "@@ -404,7 +404,7 @@ fn lang_items(tcx: &ty::ctxt) -> Vec<(ast::NodeId,Vec<ty::Variance>)> {\n \n     all.into_iter()\n        .filter(|&(ref d,_)| d.is_some())\n-       .filter(|&(ref d,_)| d.as_ref().unwrap().krate == LOCAL_CRATE)\n+       .filter(|&(ref d,_)| d.as_ref().unwrap().is_local())\n        .map(|(d, v)| (d.unwrap().node, v))\n        .collect()\n }\n@@ -740,7 +740,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                          -> VarianceTermPtr<'a> {\n         assert_eq!(param_def_id.krate, item_def_id.krate);\n \n-        if param_def_id.krate == LOCAL_CRATE {\n+        if param_def_id.is_local() {\n             // Parameter on an item defined within current crate:\n             // variance not yet inferred, so return a symbolic\n             // variance."}]}