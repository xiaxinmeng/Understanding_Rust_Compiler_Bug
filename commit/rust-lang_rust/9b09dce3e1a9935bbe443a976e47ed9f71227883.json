{"sha": "9b09dce3e1a9935bbe443a976e47ed9f71227883", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMDlkY2UzZTFhOTkzNWJiZTQ0M2E5NzZlNDdlZDlmNzEyMjc4ODM=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-06T17:09:09Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-07T09:16:02Z"}, "message": "Switch to using 'ln' for the natural logarithm and 'log' for arbitrary base logarithms", "tree": {"sha": "e66c0de3a1231882200cf6bd8a170dc2b971959c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e66c0de3a1231882200cf6bd8a170dc2b971959c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b09dce3e1a9935bbe443a976e47ed9f71227883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b09dce3e1a9935bbe443a976e47ed9f71227883", "html_url": "https://github.com/rust-lang/rust/commit/9b09dce3e1a9935bbe443a976e47ed9f71227883", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b09dce3e1a9935bbe443a976e47ed9f71227883/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b2020f2c3f51de0dd4dcfe4a107673eda6f25e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2020f2c3f51de0dd4dcfe4a107673eda6f25e7", "html_url": "https://github.com/rust-lang/rust/commit/7b2020f2c3f51de0dd4dcfe4a107673eda6f25e7"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "8a0b6567898e0eac5ef3f90226825008350dd618", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b09dce3e1a9935bbe443a976e47ed9f71227883/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b09dce3e1a9935bbe443a976e47ed9f71227883/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=9b09dce3e1a9935bbe443a976e47ed9f71227883", "patch": "@@ -195,11 +195,6 @@ pub mod consts {\n     pub static ln_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n-#[inline(always)]\n-pub fn logarithm(n: f32, b: f32) -> f32 {\n-    return log2(n) / log2(b);\n-}\n-\n impl Num for f32 {}\n \n #[cfg(notest)]\n@@ -422,12 +417,19 @@ impl Exponential for f32 {\n     #[inline(always)]\n     fn expm1(&self) -> f32 { expm1(*self) }\n \n+    /// Returns the natural logarithm of the number\n     #[inline(always)]\n-    fn log(&self) -> f32 { ln(*self) }\n+    fn ln(&self) -> f32 { ln(*self) }\n \n+    /// Returns the logarithm of the number with respect to an arbitrary base\n+    #[inline(always)]\n+    fn log(&self, base: f32) -> f32 { self.ln() / base.ln() }\n+\n+    /// Returns the base 2 logarithm of the number\n     #[inline(always)]\n     fn log2(&self) -> f32 { log2(*self) }\n \n+    /// Returns the base 10 logarithm of the number\n     #[inline(always)]\n     fn log10(&self) -> f32 { log10(*self) }\n }\n@@ -504,13 +506,13 @@ impl Real for f32 {\n     #[inline(always)]\n     fn log10_e() -> f32 { 0.434294481903251827651128918916605082 }\n \n-    /// log(2.0)\n+    /// ln(2.0)\n     #[inline(always)]\n-    fn log_2() -> f32 { 0.693147180559945309417232121458176568 }\n+    fn ln_2() -> f32 { 0.693147180559945309417232121458176568 }\n \n-    /// log(10.0)\n+    /// ln(10.0)\n     #[inline(always)]\n-    fn log_10() -> f32 { 2.30258509299404568401799145468436421 }\n+    fn ln_10() -> f32 { 2.30258509299404568401799145468436421 }\n \n     /// Converts to degrees, assuming the number is in radians\n     #[inline(always)]\n@@ -938,8 +940,8 @@ mod tests {\n         assert_approx_eq!(Real::frac_1_sqrt2::<f32>(), 1f32 / 2f32.sqrt());\n         assert_approx_eq!(Real::log2_e::<f32>(), Real::e::<f32>().log2());\n         assert_approx_eq!(Real::log10_e::<f32>(), Real::e::<f32>().log10());\n-        assert_approx_eq!(Real::log_2::<f32>(), 2f32.log());\n-        assert_approx_eq!(Real::log_10::<f32>(), 10f32.log());\n+        assert_approx_eq!(Real::ln_2::<f32>(), 2f32.ln());\n+        assert_approx_eq!(Real::ln_10::<f32>(), 10f32.ln());\n     }\n \n     #[test]"}, {"sha": "6d2fd3d1b81b6a7d8660595baa499925476d931a", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b09dce3e1a9935bbe443a976e47ed9f71227883/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b09dce3e1a9935bbe443a976e47ed9f71227883/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=9b09dce3e1a9935bbe443a976e47ed9f71227883", "patch": "@@ -218,11 +218,6 @@ pub mod consts {\n     pub static ln_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n-#[inline(always)]\n-pub fn logarithm(n: f64, b: f64) -> f64 {\n-    return log2(n) / log2(b);\n-}\n-\n impl Num for f64 {}\n \n #[cfg(notest)]\n@@ -435,12 +430,19 @@ impl Exponential for f64 {\n     #[inline(always)]\n     fn expm1(&self) -> f64 { expm1(*self) }\n \n+    /// Returns the natural logarithm of the number\n     #[inline(always)]\n-    fn log(&self) -> f64 { ln(*self) }\n+    fn ln(&self) -> f64 { ln(*self) }\n \n+    /// Returns the logarithm of the number with respect to an arbitrary base\n+    #[inline(always)]\n+    fn log(&self, base: f64) -> f64 { self.ln() / base.ln() }\n+\n+    /// Returns the base 2 logarithm of the number\n     #[inline(always)]\n     fn log2(&self) -> f64 { log2(*self) }\n \n+    /// Returns the base 10 logarithm of the number\n     #[inline(always)]\n     fn log10(&self) -> f64 { log10(*self) }\n }\n@@ -517,13 +519,13 @@ impl Real for f64 {\n     #[inline(always)]\n     fn log10_e() -> f64 { 0.434294481903251827651128918916605082 }\n \n-    /// log(2.0)\n+    /// ln(2.0)\n     #[inline(always)]\n-    fn log_2() -> f64 { 0.693147180559945309417232121458176568 }\n+    fn ln_2() -> f64 { 0.693147180559945309417232121458176568 }\n \n-    /// log(10.0)\n+    /// ln(10.0)\n     #[inline(always)]\n-    fn log_10() -> f64 { 2.30258509299404568401799145468436421 }\n+    fn ln_10() -> f64 { 2.30258509299404568401799145468436421 }\n \n     /// Converts to degrees, assuming the number is in radians\n     #[inline(always)]\n@@ -985,8 +987,8 @@ mod tests {\n         assert_approx_eq!(Real::frac_1_sqrt2::<f64>(), 1f64 / 2f64.sqrt());\n         assert_approx_eq!(Real::log2_e::<f64>(), Real::e::<f64>().log2());\n         assert_approx_eq!(Real::log10_e::<f64>(), Real::e::<f64>().log10());\n-        assert_approx_eq!(Real::log_2::<f64>(), 2f64.log());\n-        assert_approx_eq!(Real::log_10::<f64>(), 10f64.log());\n+        assert_approx_eq!(Real::ln_2::<f64>(), 2f64.ln());\n+        assert_approx_eq!(Real::ln_10::<f64>(), 10f64.ln());\n     }\n \n     #[test]"}, {"sha": "18c512b485fb1897187082f2f880aba286942943", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b09dce3e1a9935bbe443a976e47ed9f71227883/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b09dce3e1a9935bbe443a976e47ed9f71227883/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=9b09dce3e1a9935bbe443a976e47ed9f71227883", "patch": "@@ -25,7 +25,6 @@ use num::{Zero, One, strconv};\n use prelude::*;\n \n pub use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n-pub use f64::logarithm;\n pub use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n pub use f64::{erf, erfc, exp, expm1, exp2, abs_sub};\n pub use f64::{mul_add, fmax, fmin, next_after, frexp, hypot, ldexp};\n@@ -548,16 +547,25 @@ impl Exponential for float {\n         (*self as f64).expm1() as float\n     }\n \n+    /// Returns the natural logarithm of the number\n     #[inline(always)]\n-    fn log(&self) -> float {\n-        (*self as f64).log() as float\n+    fn ln(&self) -> float {\n+        (*self as f64).ln() as float\n     }\n \n+    /// Returns the logarithm of the number with respect to an arbitrary base\n+    #[inline(always)]\n+    fn log(&self, base: float) -> float {\n+        (*self as f64).log(base as f64) as float\n+    }\n+\n+    /// Returns the base 2 logarithm of the number\n     #[inline(always)]\n     fn log2(&self) -> float {\n         (*self as f64).log2() as float\n     }\n \n+    /// Returns the base 10 logarithm of the number\n     #[inline(always)]\n     fn log10(&self) -> float {\n         (*self as f64).log10() as float\n@@ -642,13 +650,13 @@ impl Real for float {\n     #[inline(always)]\n     fn log10_e() -> float { 0.434294481903251827651128918916605082 }\n \n-    /// log(2.0)\n+    /// ln(2.0)\n     #[inline(always)]\n-    fn log_2() -> float { 0.693147180559945309417232121458176568 }\n+    fn ln_2() -> float { 0.693147180559945309417232121458176568 }\n \n-    /// log(10.0)\n+    /// ln(10.0)\n     #[inline(always)]\n-    fn log_10() -> float { 2.30258509299404568401799145468436421 }\n+    fn ln_10() -> float { 2.30258509299404568401799145468436421 }\n \n     /// Converts to degrees, assuming the number is in radians\n     #[inline(always)]\n@@ -949,8 +957,8 @@ mod tests {\n         assert_approx_eq!(Real::frac_1_sqrt2::<float>(), 1f / 2f.sqrt());\n         assert_approx_eq!(Real::log2_e::<float>(), Real::e::<float>().log2());\n         assert_approx_eq!(Real::log10_e::<float>(), Real::e::<float>().log10());\n-        assert_approx_eq!(Real::log_2::<float>(), 2f.log());\n-        assert_approx_eq!(Real::log_10::<float>(), 10f.log());\n+        assert_approx_eq!(Real::ln_2::<float>(), 2f.ln());\n+        assert_approx_eq!(Real::ln_10::<float>(), 10f.ln());\n     }\n \n     #[test]"}, {"sha": "7fcd16c199a705a1b83e50d79c02689e0c141f69", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b09dce3e1a9935bbe443a976e47ed9f71227883/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b09dce3e1a9935bbe443a976e47ed9f71227883/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=9b09dce3e1a9935bbe443a976e47ed9f71227883", "patch": "@@ -122,7 +122,8 @@ pub trait Exponential {\n     fn exp(&self) -> Self;\n     fn exp2(&self) -> Self;\n     fn expm1(&self) -> Self;\n-    fn log(&self) -> Self;\n+    fn ln(&self) -> Self;\n+    fn log(&self, base: Self) -> Self;\n     fn log2(&self) -> Self;\n     fn log10(&self) -> Self;\n }\n@@ -158,8 +159,8 @@ pub trait Real: Signed\n     fn e() -> Self;\n     fn log2_e() -> Self;\n     fn log10_e() -> Self;\n-    fn log_2() -> Self;\n-    fn log_10() -> Self;\n+    fn ln_2() -> Self;\n+    fn ln_10() -> Self;\n \n     // Angular conversions\n     fn to_degrees(&self) -> Self;"}]}