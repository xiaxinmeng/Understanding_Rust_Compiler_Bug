{"sha": "f75d884046e07bb26edeaba9b8c982dc97485fd5", "node_id": "C_kwDOAAsO6NoAKGY3NWQ4ODQwNDZlMDdiYjI2ZWRlYWJhOWI4Yzk4MmRjOTc0ODVmZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T06:41:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-01T06:41:59Z"}, "message": "Auto merge of #96078 - udoprog:refcounted-str-to-u8, r=dtolnay\n\nImplement str to [u8] conversion for refcounted containers\n\nThis seems motivated to complete the APIs for shared containers since we already have similar allocation-free conversions for strings like `From<Box<[u8]>> for Box<str>`.\n\nInsta-stable since it's a new trait impl?", "tree": {"sha": "ec7af6facaaf19507588491c412d869a524cc789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec7af6facaaf19507588491c412d869a524cc789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f75d884046e07bb26edeaba9b8c982dc97485fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f75d884046e07bb26edeaba9b8c982dc97485fd5", "html_url": "https://github.com/rust-lang/rust/commit/f75d884046e07bb26edeaba9b8c982dc97485fd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f75d884046e07bb26edeaba9b8c982dc97485fd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "url": "https://api.github.com/repos/rust-lang/rust/commits/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca", "html_url": "https://github.com/rust-lang/rust/commit/61469b682c2b0bf9cebc4622f1859e2bb3b7ebca"}, {"sha": "100006bec9262a3774bfeb34a7ac5867b422b896", "url": "https://api.github.com/repos/rust-lang/rust/commits/100006bec9262a3774bfeb34a7ac5867b422b896", "html_url": "https://github.com/rust-lang/rust/commit/100006bec9262a3774bfeb34a7ac5867b422b896"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "4bcc78ae0f4b2df78e9c2ce586631666be80b88a", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f75d884046e07bb26edeaba9b8c982dc97485fd5/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75d884046e07bb26edeaba9b8c982dc97485fd5/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=f75d884046e07bb26edeaba9b8c982dc97485fd5", "patch": "@@ -1956,6 +1956,25 @@ where\n     }\n }\n \n+#[stable(feature = \"shared_from_str\", since = \"1.62.0\")]\n+impl From<Rc<str>> for Rc<[u8]> {\n+    /// Converts a reference-counted string slice into a byte slice.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let string: Rc<str> = Rc::from(\"eggplant\");\n+    /// let bytes: Rc<[u8]> = Rc::from(string);\n+    /// assert_eq!(\"eggplant\".as_bytes(), bytes.as_ref());\n+    /// ```\n+    #[inline]\n+    fn from(rc: Rc<str>) -> Self {\n+        // SAFETY: `str` has the same layout as `[u8]`.\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const [u8]) }\n+    }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Rc<[T]>> for Rc<[T; N]> {\n     type Error = Rc<[T]>;"}, {"sha": "1e2caddcacb19ed5c0719e6932eda6d67ce657ad", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f75d884046e07bb26edeaba9b8c982dc97485fd5/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75d884046e07bb26edeaba9b8c982dc97485fd5/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=f75d884046e07bb26edeaba9b8c982dc97485fd5", "patch": "@@ -2556,6 +2556,25 @@ where\n     }\n }\n \n+#[stable(feature = \"shared_from_str\", since = \"1.62.0\")]\n+impl From<Arc<str>> for Arc<[u8]> {\n+    /// Converts an atomically reference-counted string slice into a byte slice.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let string: Arc<str> = Arc::from(\"eggplant\");\n+    /// let bytes: Arc<[u8]> = Arc::from(string);\n+    /// assert_eq!(\"eggplant\".as_bytes(), bytes.as_ref());\n+    /// ```\n+    #[inline]\n+    fn from(rc: Arc<str>) -> Self {\n+        // SAFETY: `str` has the same layout as `[u8]`.\n+        unsafe { Arc::from_raw(Arc::into_raw(rc) as *const [u8]) }\n+    }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Arc<[T]>> for Arc<[T; N]> {\n     type Error = Arc<[T]>;"}]}