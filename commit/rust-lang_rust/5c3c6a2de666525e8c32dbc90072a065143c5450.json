{"sha": "5c3c6a2de666525e8c32dbc90072a065143c5450", "node_id": "C_kwDOAAsO6NoAKDVjM2M2YTJkZTY2NjUyNWU4YzMyZGJjOTAwNzJhMDY1MTQzYzU0NTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-19T14:35:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-19T14:35:14Z"}, "message": "Auto merge of #9483 - c410-f3r:arith, r=Jarcho\n\n[arithmetic-side-effects] Finish non-overflowing ops\n\nExtends https://github.com/rust-lang/rust-clippy/pull/9474 to also take into consideration \"raw\" binary operations. For example, `let a = b / 2` and `let a = 1 * b` won't trigger the lint.\n\nchangelog: [arithmetic-side-effects] Finish non-overflowing ops", "tree": {"sha": "a175554640acdcf73853c311e61dc7c66f8b91a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a175554640acdcf73853c311e61dc7c66f8b91a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3c6a2de666525e8c32dbc90072a065143c5450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3c6a2de666525e8c32dbc90072a065143c5450", "html_url": "https://github.com/rust-lang/rust/commit/5c3c6a2de666525e8c32dbc90072a065143c5450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3c6a2de666525e8c32dbc90072a065143c5450/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e120fb10c60a27670c72e7ec99e93d16c045f493", "url": "https://api.github.com/repos/rust-lang/rust/commits/e120fb10c60a27670c72e7ec99e93d16c045f493", "html_url": "https://github.com/rust-lang/rust/commit/e120fb10c60a27670c72e7ec99e93d16c045f493"}, {"sha": "b7bef4c8a4029d231fae492bb3cf5d334c19fd0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bef4c8a4029d231fae492bb3cf5d334c19fd0a", "html_url": "https://github.com/rust-lang/rust/commit/b7bef4c8a4029d231fae492bb3cf5d334c19fd0a"}], "stats": {"total": 209, "additions": 127, "deletions": 82}, "files": [{"sha": "d24c57c0a4b8a5ccdcb342a3b89850f9a42d70a0", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5c3c6a2de666525e8c32dbc90072a065143c5450/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3c6a2de666525e8c32dbc90072a065143c5450/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=5c3c6a2de666525e8c32dbc90072a065143c5450", "patch": "@@ -42,39 +42,30 @@ impl ArithmeticSideEffects {\n         }\n     }\n \n-    /// Checks assign operators (+=, -=, *=, /=) of integers in a non-constant environment that\n-    /// won't overflow.\n-    fn has_valid_assign_op(op: &Spanned<hir::BinOpKind>, rhs: &hir::Expr<'_>, rhs_refs: Ty<'_>) -> bool {\n-        if !Self::is_literal_integer(rhs, rhs_refs) {\n-            return false;\n-        }\n+    /// Assuming that `expr` is a literal integer, checks operators (+=, -=, *, /) in a\n+    /// non-constant environment that won't overflow.\n+    fn has_valid_op(op: &Spanned<hir::BinOpKind>, expr: &hir::Expr<'_>) -> bool {\n         if let hir::BinOpKind::Add | hir::BinOpKind::Sub = op.node\n-            && let hir::ExprKind::Lit(ref lit) = rhs.kind\n+            && let hir::ExprKind::Lit(ref lit) = expr.kind\n             && let ast::LitKind::Int(0, _) = lit.node\n         {\n             return true;\n         }\n         if let hir::BinOpKind::Div | hir::BinOpKind::Rem = op.node\n-            && let hir::ExprKind::Lit(ref lit) = rhs.kind\n+            && let hir::ExprKind::Lit(ref lit) = expr.kind\n             && !matches!(lit.node, ast::LitKind::Int(0, _))\n         {\n             return true;\n         }\n         if let hir::BinOpKind::Mul = op.node\n-            && let hir::ExprKind::Lit(ref lit) = rhs.kind\n+            && let hir::ExprKind::Lit(ref lit) = expr.kind\n             && let ast::LitKind::Int(0 | 1, _) = lit.node\n         {\n             return true;\n         }\n         false\n     }\n \n-    /// Checks \"raw\" binary operators (+, -, *, /) of integers in a non-constant environment\n-    /// already handled by the CTFE.\n-    fn has_valid_bin_op(lhs: &hir::Expr<'_>, lhs_refs: Ty<'_>, rhs: &hir::Expr<'_>, rhs_refs: Ty<'_>) -> bool {\n-        Self::is_literal_integer(lhs, lhs_refs) && Self::is_literal_integer(rhs, rhs_refs)\n-    }\n-\n     /// Checks if the given `expr` has any of the inner `allowed` elements.\n     fn is_allowed_ty(&self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n         self.allowed.contains(\n@@ -95,7 +86,8 @@ impl ArithmeticSideEffects {\n     }\n \n     fn issue_lint(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n-        span_lint(cx, ARITHMETIC_SIDE_EFFECTS, expr.span, \"arithmetic detected\");\n+        let msg = \"arithmetic operation that can potentially result in unexpected side-effects\";\n+        span_lint(cx, ARITHMETIC_SIDE_EFFECTS, expr.span, msg);\n         self.expr_span = Some(expr.span);\n     }\n \n@@ -127,13 +119,18 @@ impl ArithmeticSideEffects {\n         if self.is_allowed_ty(cx, lhs) || self.is_allowed_ty(cx, rhs) {\n             return;\n         }\n-        let lhs_refs = cx.typeck_results().expr_ty(lhs).peel_refs();\n-        let rhs_refs = cx.typeck_results().expr_ty(rhs).peel_refs();\n-        let has_valid_assign_op = Self::has_valid_assign_op(op, rhs, rhs_refs);\n-        if has_valid_assign_op || Self::has_valid_bin_op(lhs, lhs_refs, rhs, rhs_refs) {\n-            return;\n+        let has_valid_op = match (\n+            Self::is_literal_integer(lhs, cx.typeck_results().expr_ty(lhs).peel_refs()),\n+            Self::is_literal_integer(rhs, cx.typeck_results().expr_ty(rhs).peel_refs()),\n+        ) {\n+            (true, true) => true,\n+            (true, false) => Self::has_valid_op(op, lhs),\n+            (false, true) => Self::has_valid_op(op, rhs),\n+            (false, false) => false,\n+        };\n+        if !has_valid_op {\n+            self.issue_lint(cx, expr);\n         }\n-        self.issue_lint(cx, expr);\n     }\n }\n "}, {"sha": "c07425be50a48140a64fc77b9b206289e334534d", "filename": "tests/ui/arithmetic_side_effects.rs", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5c3c6a2de666525e8c32dbc90072a065143c5450/tests%2Fui%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3c6a2de666525e8c32dbc90072a065143c5450/tests%2Fui%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.rs?ref=5c3c6a2de666525e8c32dbc90072a065143c5450", "patch": "@@ -1,7 +1,10 @@\n #![allow(\n     clippy::assign_op_pattern,\n-    unconditional_panic,\n-    clippy::unnecessary_owned_empty_strings\n+    clippy::erasing_op,\n+    clippy::identity_op,\n+    clippy::unnecessary_owned_empty_strings,\n+    arithmetic_overflow,\n+    unconditional_panic\n )]\n #![feature(inline_const, saturating_int_impl)]\n #![warn(clippy::arithmetic_side_effects)]\n@@ -30,7 +33,7 @@ pub fn hard_coded_allowed() {\n }\n \n #[rustfmt::skip]\n-pub fn non_overflowing_ops() {\n+pub fn non_overflowing_const_ops() {\n     const _: i32 = { let mut n = 1; n += 1; n };\n     let _ = const { let mut n = 1; n += 1; n };\n \n@@ -41,33 +44,54 @@ pub fn non_overflowing_ops() {\n     let _ = const { let mut n = 1; n = 1 + n; n };\n \n     const _: i32 = 1 + 1;\n-    let _ = 1 + 1;\n     let _ = const { 1 + 1 };\n+}\n \n-    let mut _a = 1;\n-    _a += 0;\n-    _a -= 0;\n-    _a /= 99;\n-    _a %= 99;\n-    _a *= 0;\n-    _a *= 1;\n+pub fn non_overflowing_runtime_ops() {\n+    let mut _n = i32::MAX;\n+\n+    // Assign\n+    _n += 0;\n+    _n -= 0;\n+    _n /= 99;\n+    _n %= 99;\n+    _n *= 0;\n+    _n *= 1;\n+\n+    // Binary\n+    _n = _n + 0;\n+    _n = 0 + _n;\n+    _n = _n - 0;\n+    _n = 0 - _n;\n+    _n = _n / 99;\n+    _n = _n % 99;\n+    _n = _n * 0;\n+    _n = 0 * _n;\n+    _n = _n * 1;\n+    _n = 1 * _n;\n+    _n = 23 + 85;\n }\n \n #[rustfmt::skip]\n-pub fn overflowing_ops() {\n-    let mut _a = 1; _a += 1;\n-\n-    let mut _b = 1; _b = _b + 1;\n-\n-    let mut _c = 1; _c = 1 + _c;\n-\n-    let mut _a = 1;\n-    _a += 1;\n-    _a -= 1;\n-    _a /= 0;\n-    _a %= 0;\n-    _a *= 2;\n-    _a *= 3;\n+pub fn overflowing_runtime_ops() {\n+    let mut _n = i32::MAX;\n+\n+    // Assign\n+    _n += 1;\n+    _n -= 1;\n+    _n /= 0;\n+    _n %= 0;\n+    _n *= 2;\n+\n+    // Binary\n+    _n = _n + 1;\n+    _n = 1 + _n;\n+    _n = _n - 1;\n+    _n = 1 - _n;\n+    _n = _n / 0;\n+    _n = _n % 0;\n+    _n = _n * 2;\n+    _n = 2 * _n;\n }\n \n fn main() {}"}, {"sha": "2f953d266996352ebcf1a195abd6f33af99fe253", "filename": "tests/ui/arithmetic_side_effects.stderr", "status": "modified", "additions": 59, "deletions": 35, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5c3c6a2de666525e8c32dbc90072a065143c5450/tests%2Fui%2Farithmetic_side_effects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c3c6a2de666525e8c32dbc90072a065143c5450/tests%2Fui%2Farithmetic_side_effects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.stderr?ref=5c3c6a2de666525e8c32dbc90072a065143c5450", "patch": "@@ -1,58 +1,82 @@\n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:58:21\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:80:5\n    |\n-LL |     let mut _a = 1; _a += 1;\n-   |                     ^^^^^^^\n+LL |     _n += 1;\n+   |     ^^^^^^^\n    |\n    = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:60:26\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:81:5\n    |\n-LL |     let mut _b = 1; _b = _b + 1;\n-   |                          ^^^^^^\n+LL |     _n -= 1;\n+   |     ^^^^^^^\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:62:26\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:82:5\n    |\n-LL |     let mut _c = 1; _c = 1 + _c;\n-   |                          ^^^^^^\n+LL |     _n /= 0;\n+   |     ^^^^^^^\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:65:5\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:83:5\n    |\n-LL |     _a += 1;\n+LL |     _n %= 0;\n    |     ^^^^^^^\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:66:5\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:84:5\n    |\n-LL |     _a -= 1;\n+LL |     _n *= 2;\n    |     ^^^^^^^\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:67:5\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:87:10\n    |\n-LL |     _a /= 0;\n-   |     ^^^^^^^\n+LL |     _n = _n + 1;\n+   |          ^^^^^^\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:68:5\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:88:10\n    |\n-LL |     _a %= 0;\n-   |     ^^^^^^^\n+LL |     _n = 1 + _n;\n+   |          ^^^^^^\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:69:5\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:89:10\n    |\n-LL |     _a *= 2;\n-   |     ^^^^^^^\n+LL |     _n = _n - 1;\n+   |          ^^^^^^\n \n-error: arithmetic detected\n-  --> $DIR/arithmetic_side_effects.rs:70:5\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:90:10\n    |\n-LL |     _a *= 3;\n-   |     ^^^^^^^\n+LL |     _n = 1 - _n;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:91:10\n+   |\n+LL |     _n = _n / 0;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:92:10\n+   |\n+LL |     _n = _n % 0;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:93:10\n+   |\n+LL |     _n = _n * 2;\n+   |          ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:94:10\n+   |\n+LL |     _n = 2 * _n;\n+   |          ^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 13 previous errors\n "}]}