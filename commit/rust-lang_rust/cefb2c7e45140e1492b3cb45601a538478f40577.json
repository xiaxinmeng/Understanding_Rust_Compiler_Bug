{"sha": "cefb2c7e45140e1492b3cb45601a538478f40577", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZmIyYzdlNDUxNDBlMTQ5MmIzY2I0NTYwMWE1Mzg0NzhmNDA1Nzc=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-01-04T07:34:15Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-01-04T07:34:15Z"}, "message": "Fix ARM unwinding.", "tree": {"sha": "32ed257df40eb903ac0b24456caf09e4b2af8388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ed257df40eb903ac0b24456caf09e4b2af8388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cefb2c7e45140e1492b3cb45601a538478f40577", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cefb2c7e45140e1492b3cb45601a538478f40577", "html_url": "https://github.com/rust-lang/rust/commit/cefb2c7e45140e1492b3cb45601a538478f40577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cefb2c7e45140e1492b3cb45601a538478f40577/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bfd2a84cfe83b3a0ff8f3a828303b378a8d94b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bfd2a84cfe83b3a0ff8f3a828303b378a8d94b9", "html_url": "https://github.com/rust-lang/rust/commit/8bfd2a84cfe83b3a0ff8f3a828303b378a8d94b9"}], "stats": {"total": 175, "additions": 128, "deletions": 47}, "files": [{"sha": "10c597e61d1b124768af7aaa84d416d6d1f696ad", "filename": "mk/platform.mk", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cefb2c7e45140e1492b3cb45601a538478f40577/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cefb2c7e45140e1492b3cb45601a538478f40577/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=cefb2c7e45140e1492b3cb45601a538478f40577", "patch": "@@ -157,6 +157,7 @@ CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-l\n CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-linux-gnu := -Wl,-whole-archive\n CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-linux-gnu := -Wl,-no-whole-archive\n CFG_DEF_SUFFIX_x86_64-unknown-linux-gnu := .linux.def\n+CFG_LLC_FLAGS_x86_64-unknown-linux-gnu :=\n CFG_INSTALL_NAME_x86_64-unknown-linux-gnu =\n CFG_LIBUV_LINK_FLAGS_x86_64-unknown-linux-gnu =\n CFG_LLVM_BUILD_ENV_x86_64-unknown-linux-gnu=\"CXXFLAGS=-fno-omit-frame-pointer\"\n@@ -184,6 +185,7 @@ CFG_GCCISH_DEF_FLAG_i686-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-lis\n CFG_GCCISH_PRE_LIB_FLAGS_i686-unknown-linux-gnu := -Wl,-whole-archive\n CFG_GCCISH_POST_LIB_FLAGS_i686-unknown-linux-gnu := -Wl,-no-whole-archive\n CFG_DEF_SUFFIX_i686-unknown-linux-gnu := .linux.def\n+CFG_LLC_FLAGS_i686-unknown-linux-gnu :=\n CFG_INSTALL_NAME_i686-unknown-linux-gnu =\n CFG_LIBUV_LINK_FLAGS_i686-unknown-linux-gnu =\n CFG_LLVM_BUILD_ENV_i686-unknown-linux-gnu=\"CXXFLAGS=-fno-omit-frame-pointer\"\n@@ -213,6 +215,7 @@ CFG_GCCISH_DEF_FLAG_arm-apple-darwin := -Wl,-exported_symbols_list,\n CFG_GCCISH_PRE_LIB_FLAGS_arm-apple-darwin :=\n CFG_GCCISH_POST_LIB_FLAGS_arm-apple-darwin :=\n CFG_DEF_SUFFIX_arm-apple-darwin := .darwin.def\n+CFG_LLC_FLAGS_arm-apple-darwin := -arm-enable-ehabi -arm-enable-ehabi-descriptors\n CFG_INSTALL_NAME_arm-apple-darwin = -Wl,-install_name,@rpath/$(1)\n CFG_LIBUV_LINK_FLAGS_arm-apple-darwin =\n CFG_EXE_SUFFIX_arm-apple-darwin :=\n@@ -240,6 +243,7 @@ CFG_GCCISH_DEF_FLAG_x86_64-apple-darwin := -Wl,-exported_symbols_list,\n CFG_GCCISH_PRE_LIB_FLAGS_x86_64-apple-darwin :=\n CFG_GCCISH_POST_LIB_FLAGS_x86_64-apple-darwin :=\n CFG_DEF_SUFFIX_x86_64-apple-darwin := .darwin.def\n+CFG_LLC_FLAGS_x86_64-apple-darwin :=\n CFG_INSTALL_NAME_x86_64-apple-darwin = -Wl,-install_name,@rpath/$(1)\n CFG_LIBUV_LINK_FLAGS_x86_64-apple-darwin =\n CFG_EXE_SUFFIX_x86_64-apple-darwin :=\n@@ -266,6 +270,7 @@ CFG_GCCISH_DEF_FLAG_i686-apple-darwin := -Wl,-exported_symbols_list,\n CFG_GCCISH_PRE_LIB_FLAGS_i686-apple-darwin :=\n CFG_GCCISH_POST_LIB_FLAGS_i686-apple-darwin :=\n CFG_DEF_SUFFIX_i686-apple-darwin := .darwin.def\n+CFG_LLC_FLAGS_i686-apple-darwin :=\n CFG_INSTALL_NAME_i686-apple-darwin = -Wl,-install_name,@rpath/$(1)\n CFG_LIBUV_LINK_FLAGS_i686-apple-darwin =\n CFG_EXE_SUFFIX_i686-apple-darwin :=\n@@ -292,6 +297,7 @@ CFG_GCCISH_DEF_FLAG_arm-linux-androideabi := -Wl,--export-dynamic,--dynamic-list\n CFG_GCCISH_PRE_LIB_FLAGS_arm-linux-androideabi := -Wl,-whole-archive\n CFG_GCCISH_POST_LIB_FLAGS_arm-linux-androideabi := -Wl,-no-whole-archive\n CFG_DEF_SUFFIX_arm-linux-androideabi := .android.def\n+CFG_LLC_FLAGS_arm-linux-androideabi := -arm-enable-ehabi -arm-enable-ehabi-descriptors\n CFG_INSTALL_NAME_arm-linux-androideabi =\n CFG_LIBUV_LINK_FLAGS_arm-linux-androideabi =\n CFG_EXE_SUFFIX_arm-linux-androideabi :=\n@@ -321,6 +327,7 @@ CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabihf := -Wl,--export-dynamic,--dynami\n CFG_GCCISH_PRE_LIB_FLAGS_arm-unknown-linux-gnueabihf := -Wl,-whole-archive\n CFG_GCCISH_POST_LIB_FLAGS_arm-unknown-linux-gnueabihf := -Wl,-no-whole-archive\n CFG_DEF_SUFFIX_arm-unknown-linux-gnueabihf := .linux.def\n+CFG_LLC_FLAGS_arm-unknown-linux-gnueabihf := -arm-enable-ehabi -arm-enable-ehabi-descriptors\n CFG_INSTALL_NAME_ar,-unknown-linux-gnueabihf =\n CFG_LIBUV_LINK_FLAGS_arm-unknown-linux-gnueabihf =\n CFG_EXE_SUFFIX_arm-unknown-linux-gnueabihf :=\n@@ -350,6 +357,7 @@ CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-\n CFG_GCCISH_PRE_LIB_FLAGS_arm-unknown-linux-gnueabi := -Wl,-whole-archive\n CFG_GCCISH_POST_LIB_FLAGS_arm-unknown-linux-gnueabi := -Wl,-no-whole-archive\n CFG_DEF_SUFFIX_arm-unknown-linux-gnueabi := .linux.def\n+CFG_LLC_FLAGS_arm-unknown-linux-gnueabi := -arm-enable-ehabi -arm-enable-ehabi-descriptors\n CFG_INSTALL_NAME_arm-unknown-linux-gnueabi =\n CFG_LIBUV_LINK_FLAGS_arm-unknown-linux-gnueabi =\n CFG_EXE_SUFFIX_arm-unknown-linux-gnueabi :=\n@@ -378,6 +386,7 @@ CFG_GCCISH_DEF_FLAG_mips-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-lis\n CFG_GCCISH_PRE_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-whole-archive\n CFG_GCCISH_POST_LIB_FLAGS_mips-unknown-linux-gnu := -Wl,-no-whole-archive\n CFG_DEF_SUFFIX_mips-unknown-linux-gnu := .linux.def\n+CFG_LLC_FLAGS_mips-unknown-linux-gnu :=\n CFG_INSTALL_NAME_mips-unknown-linux-gnu =\n CFG_LIBUV_LINK_FLAGS_mips-unknown-linux-gnu =\n CFG_EXE_SUFFIX_mips-unknown-linux-gnu :=\n@@ -405,6 +414,7 @@ CFG_GCCISH_DEF_FLAG_i686-pc-mingw32 :=\n CFG_GCCISH_PRE_LIB_FLAGS_i686-pc-mingw32 :=\n CFG_GCCISH_POST_LIB_FLAGS_i686-pc-mingw32 :=\n CFG_DEF_SUFFIX_i686-pc-mingw32 := .mingw32.def\n+CFG_LLC_FLAGS_i686-pc-mingw32 :=\n CFG_INSTALL_NAME_i686-pc-mingw32 =\n CFG_LIBUV_LINK_FLAGS_i686-pc-mingw32 := -lws2_32 -lpsapi -liphlpapi\n CFG_LLVM_BUILD_ENV_i686-pc-mingw32 := CPATH=$(CFG_SRC_DIR)src/etc/mingw-fix-include\n@@ -432,6 +442,7 @@ CFG_GCCISH_DEF_FLAG_i586-mingw32msvc :=\n CFG_GCCISH_PRE_LIB_FLAGS_i586-mingw32msvc :=\n CFG_GCCISH_POST_LIB_FLAGS_i586-mingw32msvc :=\n CFG_DEF_SUFFIX_i586-mingw32msvc := .mingw32.def\n+CFG_LLC_FLAGS_i586-mingw32msvc :=\n CFG_INSTALL_NAME_i586-mingw32msvc =\n CFG_LIBUV_LINK_FLAGS_i586-mingw32msvc := -L$(CFG_MINGW32_CROSS_PATH)/i586-mingw32msvc/lib -lws2_32 -lpsapi -liphlpapi\n CFG_EXE_SUFFIX_i586-mingw32msvc := .exe\n@@ -461,6 +472,7 @@ CFG_GCCISH_DEF_FLAG_i686-w64-mingw32 :=\n CFG_GCCISH_PRE_LIB_FLAGS_i686-w64-mingw32 :=\n CFG_GCCISH_POST_LIB_FLAGS_i686-w64-mingw32 :=\n CFG_DEF_SUFFIX_i686-w64-mingw32 := .mingw32.def\n+CFG_LLC_FLAGS_i686-w64-mingw32 :=\n CFG_INSTALL_NAME_i686-w64-mingw32 =\n CFG_LIBUV_LINK_FLAGS_i686-w64-mingw32 := -lws2_32 -lpsapi -liphlpapi\n CFG_EXE_SUFFIX_i686-w64-mingw32 := .exe\n@@ -489,6 +501,7 @@ CFG_GCCISH_DEF_FLAG_x86_64-w64-mingw32 :=\n CFG_GCCISH_PRE_LIB_FLAGS_x86_64-w64-mingw32 :=\n CFG_GCCISH_POST_LIB_FLAGS_x86_64-w64-mingw32 :=\n CFG_DEF_SUFFIX_x86_64-w64-mingw32 := .mingw32.def\n+CFG_LLC_FLAGS_x86_64-w64-mingw32 :=\n CFG_INSTALL_NAME_x86_64-w64-mingw32 =\n CFG_LIBUV_LINK_FLAGS_x86_64-w64-mingw32 := -lws2_32 -lpsapi -liphlpapi\n CFG_EXE_SUFFIX_x86_64-w64-mingw32 := .exe\n@@ -515,6 +528,7 @@ CFG_GCCISH_DEF_FLAG_x86_64-unknown-freebsd := -Wl,--export-dynamic,--dynamic-lis\n CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-freebsd := -Wl,-whole-archive\n CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-freebsd := -Wl,-no-whole-archive\n CFG_DEF_SUFFIX_x86_64-unknown-freebsd := .bsd.def\n+CFG_LLC_FLAGS_x86_64-unknown-freebsd :=\n CFG_INSTALL_NAME_x86_64-unknown-freebsd =\n CFG_LIBUV_LINK_FLAGS_x86_64-unknown-freebsd := -pthread  -lkvm\n CFG_EXE_SUFFIX_x86_64-unknown-freebsd :="}, {"sha": "38cc233b9336096ca3e296cb5c2ac88afb21ae85", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb2c7e45140e1492b3cb45601a538478f40577/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cefb2c7e45140e1492b3cb45601a538478f40577/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=cefb2c7e45140e1492b3cb45601a538478f40577", "patch": "@@ -116,7 +116,7 @@ $$(RT_BUILD_DIR_$(1)_$(2))/%.o: rt/%.S  $$(MKFILE_DEPS) \\\n $$(RT_BUILD_DIR_$(1)_$(2))/%.o: rt/%.ll  $$(MKFILE_DEPS) \\\n                      $$(LLVM_CONFIG_$$(CFG_BUILD))\n \t@$$(call E, compile: $$@)\n-\t$$(Q)$(LLC_$(CFG_BUILD)) -filetype=obj -mtriple=$(1) -relocation-model=pic -o $$@ $$<\n+\t$$(Q)$(LLC_$(CFG_BUILD)) $$(CFG_LLC_FLAGS_$(1)) -filetype=obj -mtriple=$(1) -relocation-model=pic -o $$@ $$<\n \n $$(RT_BUILD_DIR_$(1)_$(2))/arch/$$(HOST_$(1))/libmorestack.a: $$(MORESTACK_OBJS_$(1)_$(2))\n \t@$$(call E, link: $$@)"}, {"sha": "3904be179c2861a9c3620c236beb2fbe01325cf1", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 113, "deletions": 46, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/cefb2c7e45140e1492b3cb45601a538478f40577/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb2c7e45140e1492b3cb45601a538478f40577/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=cefb2c7e45140e1492b3cb45601a538478f40577", "patch": "@@ -59,8 +59,7 @@ use any::{Any, AnyRefExt};\n use c_str::CString;\n use cast;\n use kinds::Send;\n-use libc::{c_char, size_t};\n-use libc::{c_void, c_int};\n+use libc::{c_void, c_char, size_t};\n use option::{Some, None, Option};\n use result::{Err, Ok};\n use rt::local::Local;\n@@ -78,6 +77,7 @@ mod libunwind {\n \n     use libc::{uintptr_t, uint64_t};\n \n+    #[cfg(not(target_os = \"android\"))]\n     #[repr(C)]\n     pub enum _Unwind_Action\n     {\n@@ -88,6 +88,18 @@ mod libunwind {\n         _UA_END_OF_STACK = 16,\n     }\n \n+    #[cfg(target_os = \"android\")]\n+    #[repr(C)]\n+    pub enum _Unwind_State\n+    {\n+      _US_VIRTUAL_UNWIND_FRAME = 0,\n+      _US_UNWIND_FRAME_STARTING = 1,\n+      _US_UNWIND_FRAME_RESUME = 2,\n+      _US_ACTION_MASK = 3,\n+      _US_FORCE_UNWIND = 8,\n+      _US_END_OF_STACK = 16\n+    }\n+\n     #[repr(C)]\n     pub enum _Unwind_Reason_Code {\n         _URC_NO_REASON = 0,\n@@ -99,6 +111,7 @@ mod libunwind {\n         _URC_HANDLER_FOUND = 6,\n         _URC_INSTALL_CONTEXT = 7,\n         _URC_CONTINUE_UNWIND = 8,\n+        _URC_FAILURE = 9, // used only by ARM EABI\n     }\n \n     pub type _Unwind_Exception_Class = uint64_t;\n@@ -108,8 +121,7 @@ mod libunwind {\n     pub struct _Unwind_Exception {\n         exception_class: _Unwind_Exception_Class,\n         exception_cleanup: _Unwind_Exception_Cleanup_Fn,\n-        private_1: _Unwind_Word,\n-        private_2: _Unwind_Word,\n+        private: [_Unwind_Word, ..20],\n     }\n \n     pub enum _Unwind_Context {}\n@@ -148,7 +160,7 @@ impl Unwinder {\n             let ep = rust_try(try_fn, closure.code as *c_void,\n                               closure.env as *c_void);\n             if !ep.is_null() {\n-                rtdebug!(\"Caught {}\", (*ep).exception_class);\n+                rtdebug!(\"caught {}\", (*ep).exception_class);\n                 uw::_Unwind_DeleteException(ep);\n             }\n         }\n@@ -190,8 +202,7 @@ impl Unwinder {\n                 let exception = ~uw::_Unwind_Exception {\n                     exception_class: rust_exception_class(),\n                     exception_cleanup: exception_cleanup,\n-                    private_1: 0,\n-                    private_2: 0\n+                    private: [0, ..20],\n                 };\n                 let error = uw::_Unwind_RaiseException(cast::transmute(exception));\n                 rtabort!(\"Could not unwind stack, error = {}\", error as int)\n@@ -242,51 +253,107 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n //   This is achieved by overriding the return value in search phase to always\n //   say \"catch!\".\n \n-extern \"C\" {\n-    fn __gcc_personality_v0(version: c_int,\n-                            actions: uw::_Unwind_Action,\n-                            exception_class: uw::_Unwind_Exception_Class,\n-                            ue_header: *uw::_Unwind_Exception,\n-                            context: *uw::_Unwind_Context)\n-        -> uw::_Unwind_Reason_Code;\n-}\n+#[cfg(not(target_os = \"android\"))]\n+pub mod eabi {\n+    use uw = super::libunwind;\n+    use libc::c_int;\n \n-#[lang=\"eh_personality\"]\n-#[no_mangle] // so we can reference it by name from middle/trans/base.rs\n-#[doc(hidden)]\n-#[cfg(not(test))]\n-pub extern \"C\" fn rust_eh_personality(\n-    version: c_int,\n-    actions: uw::_Unwind_Action,\n-    exception_class: uw::_Unwind_Exception_Class,\n-    ue_header: *uw::_Unwind_Exception,\n-    context: *uw::_Unwind_Context\n-) -> uw::_Unwind_Reason_Code\n-{\n-    unsafe {\n-        __gcc_personality_v0(version, actions, exception_class, ue_header,\n-                             context)\n+    extern \"C\" {\n+        fn __gcc_personality_v0(version: c_int,\n+                                actions: uw::_Unwind_Action,\n+                                exception_class: uw::_Unwind_Exception_Class,\n+                                ue_header: *uw::_Unwind_Exception,\n+                                context: *uw::_Unwind_Context)\n+            -> uw::_Unwind_Reason_Code;\n+    }\n+\n+    #[lang=\"eh_personality\"]\n+    #[no_mangle] // so we can reference it by name from middle/trans/base.rs\n+    #[doc(hidden)]\n+    #[cfg(not(test))]\n+    pub extern \"C\" fn rust_eh_personality(\n+        version: c_int,\n+        actions: uw::_Unwind_Action,\n+        exception_class: uw::_Unwind_Exception_Class,\n+        ue_header: *uw::_Unwind_Exception,\n+        context: *uw::_Unwind_Context\n+    ) -> uw::_Unwind_Reason_Code\n+    {\n+        unsafe {\n+            __gcc_personality_v0(version, actions, exception_class, ue_header,\n+                                 context)\n+        }\n+    }\n+\n+    #[no_mangle] // referenced from rust_try.ll\n+    #[doc(hidden)]\n+    #[cfg(not(test))]\n+    pub extern \"C\" fn rust_eh_personality_catch(\n+        version: c_int,\n+        actions: uw::_Unwind_Action,\n+        exception_class: uw::_Unwind_Exception_Class,\n+        ue_header: *uw::_Unwind_Exception,\n+        context: *uw::_Unwind_Context\n+    ) -> uw::_Unwind_Reason_Code\n+    {\n+        if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 { // search phase\n+            uw::_URC_HANDLER_FOUND // catch!\n+        }\n+        else { // cleanup phase\n+            unsafe {\n+                 __gcc_personality_v0(version, actions, exception_class, ue_header,\n+                                      context)\n+            }\n+        }\n     }\n }\n \n-#[no_mangle] // referenced from rust_try.ll\n-#[doc(hidden)]\n-#[cfg(not(test))]\n-pub extern \"C\" fn rust_eh_personality_catch(\n-    version: c_int,\n-    actions: uw::_Unwind_Action,\n-    exception_class: uw::_Unwind_Exception_Class,\n-    ue_header: *uw::_Unwind_Exception,\n-    context: *uw::_Unwind_Context\n-) -> uw::_Unwind_Reason_Code\n-{\n-    if (actions as c_int & uw::_UA_SEARCH_PHASE as c_int) != 0 { // search phase\n-        uw::_URC_HANDLER_FOUND // catch!\n+// ARM EHABI uses a slightly different personality routine signature,\n+// but otherwise works the same.\n+#[cfg(target_os = \"android\")]\n+pub mod eabi {\n+    use uw = super::libunwind;\n+    use libc::c_int;\n+\n+    extern \"C\" {\n+        fn __gcc_personality_v0(state: uw::_Unwind_State,\n+                                ue_header: *uw::_Unwind_Exception,\n+                                context: *uw::_Unwind_Context)\n+            -> uw::_Unwind_Reason_Code;\n     }\n-    else { // cleanup phase\n+\n+    #[lang=\"eh_personality\"]\n+    #[no_mangle] // so we can reference it by name from middle/trans/base.rs\n+    #[doc(hidden)]\n+    #[cfg(not(test))]\n+    pub extern \"C\" fn rust_eh_personality(\n+        state: uw::_Unwind_State,\n+        ue_header: *uw::_Unwind_Exception,\n+        context: *uw::_Unwind_Context\n+    ) -> uw::_Unwind_Reason_Code\n+    {\n         unsafe {\n-             __gcc_personality_v0(version, actions, exception_class, ue_header,\n-                                  context)\n+            __gcc_personality_v0(state, ue_header, context)\n+        }\n+    }\n+\n+    #[no_mangle] // referenced from rust_try.ll\n+    #[doc(hidden)]\n+    #[cfg(not(test))]\n+    pub extern \"C\" fn rust_eh_personality_catch(\n+        state: uw::_Unwind_State,\n+        ue_header: *uw::_Unwind_Exception,\n+        context: *uw::_Unwind_Context\n+    ) -> uw::_Unwind_Reason_Code\n+    {\n+        if (state as c_int & uw::_US_ACTION_MASK as c_int)\n+                           == uw::_US_VIRTUAL_UNWIND_FRAME as c_int { // search phase\n+            uw::_URC_HANDLER_FOUND // catch!\n+        }\n+        else { // cleanup phase\n+            unsafe {\n+                 __gcc_personality_v0(state, ue_header, context)\n+            }\n         }\n     }\n }"}]}