{"sha": "936377a0aabd4e383e619aaff51a01cdffc154d0", "node_id": "C_kwDOAAsO6NoAKDkzNjM3N2EwYWFiZDRlMzgzZTYxOWFhZmY1MWEwMWNkZmZjMTU0ZDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-24T06:13:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-24T06:13:04Z"}, "message": "Rollup merge of #109406 - WaffleLapkin:\ud83e\udd5b, r=cuviper\n\nRemove outdated comments\n\nWhat the title said", "tree": {"sha": "cfb331a82760c97cd9e1bcd8dbb1483365b00cda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb331a82760c97cd9e1bcd8dbb1483365b00cda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936377a0aabd4e383e619aaff51a01cdffc154d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHT9wCRBK7hj4Ov3rIwAAkgMIAKzrWp8eoEYnTl3GGOjd+cBX\n4C5lZ+C9NjPt05GZGs5pUTtGbNdmGwOE+5piBoHwcn3dksiuus/GUxNpZ4THNx4m\nIjJCPvfXlN/EotYxz2bGEUSsVg2GEP0Gt7bpDVUULISkkNK4jpASjyl2WcytYtWw\n53gGOYv/GpRjrO3p8+xhKJbh0ERnHC6MrxDTzTNEoHxSgvZZa/98jfO1bf8KR2Us\nSV42dw/6L5WtXuogiXMRmfwii3TG+0JOCBfRxuaz8N60JubJRaPskvhRPBtUCldN\nbMK78PKE2nGGplZlr+EU1y6Qrc9GWe16CqGPOCjRdyiN6T5HtqwgR4JoVACt9p8=\n=jUQU\n-----END PGP SIGNATURE-----\n", "payload": "tree cfb331a82760c97cd9e1bcd8dbb1483365b00cda\nparent 4c0f5008ce74563873cbd8574018dbe4906a5361\nparent c513c3b9a5deffac243b7bed3d339bd4e380dc1d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679638384 +0100\ncommitter GitHub <noreply@github.com> 1679638384 +0100\n\nRollup merge of #109406 - WaffleLapkin:\ud83e\udd5b, r=cuviper\n\nRemove outdated comments\n\nWhat the title said\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936377a0aabd4e383e619aaff51a01cdffc154d0", "html_url": "https://github.com/rust-lang/rust/commit/936377a0aabd4e383e619aaff51a01cdffc154d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936377a0aabd4e383e619aaff51a01cdffc154d0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0f5008ce74563873cbd8574018dbe4906a5361", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0f5008ce74563873cbd8574018dbe4906a5361", "html_url": "https://github.com/rust-lang/rust/commit/4c0f5008ce74563873cbd8574018dbe4906a5361"}, {"sha": "c513c3b9a5deffac243b7bed3d339bd4e380dc1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c513c3b9a5deffac243b7bed3d339bd4e380dc1d", "html_url": "https://github.com/rust-lang/rust/commit/c513c3b9a5deffac243b7bed3d339bd4e380dc1d"}], "stats": {"total": 13, "additions": 0, "deletions": 13}, "files": [{"sha": "c7d0144de30cb5bb61153e0e51b065e35841ac79", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/936377a0aabd4e383e619aaff51a01cdffc154d0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936377a0aabd4e383e619aaff51a01cdffc154d0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=936377a0aabd4e383e619aaff51a01cdffc154d0", "patch": "@@ -13,7 +13,6 @@ pub mod set;\n mod set_val;\n mod split;\n \n-#[doc(hidden)]\n trait Recover<Q: ?Sized> {\n     type Key;\n "}, {"sha": "4de30d40825e7a6688f870c63d3b6516d4380ab5", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/936377a0aabd4e383e619aaff51a01cdffc154d0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936377a0aabd4e383e619aaff51a01cdffc154d0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=936377a0aabd4e383e619aaff51a01cdffc154d0", "patch": "@@ -1,6 +1,3 @@\n-// This is pretty much entirely stolen from TreeSet, since BTreeMap has an identical interface\n-// to TreeMap\n-\n use crate::vec::Vec;\n use core::borrow::Borrow;\n use core::cmp::Ordering::{self, Equal, Greater, Less};\n@@ -18,8 +15,6 @@ use super::Recover;\n \n use crate::alloc::{Allocator, Global};\n \n-// FIXME(conventions): implement bounded iterators\n-\n /// An ordered set based on a B-Tree.\n ///\n /// See [`BTreeMap`]'s documentation for a detailed discussion of this collection's performance"}, {"sha": "837a18bff6087ccf47fa2f9ad82678e6f350b242", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/936377a0aabd4e383e619aaff51a01cdffc154d0/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936377a0aabd4e383e619aaff51a01cdffc154d0/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=936377a0aabd4e383e619aaff51a01cdffc154d0", "patch": "@@ -12,13 +12,6 @@ use crate::ops::{BitAnd, BitOr, BitXor, Sub};\n \n use super::map::{map_try_reserve_error, RandomState};\n \n-// Future Optimization (FIXME!)\n-// ============================\n-//\n-// Iteration over zero sized values is a noop. There is no need\n-// for `bucket.val` in the case of HashSet. I suppose we would need HKT\n-// to get rid of it properly.\n-\n /// A [hash set] implemented as a `HashMap` where the value is `()`.\n ///\n /// As with the [`HashMap`] type, a `HashSet` requires that the elements"}]}