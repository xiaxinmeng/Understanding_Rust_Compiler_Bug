{"sha": "d32673858698b8e733c9b42d82ad01f16c487eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMjY3Mzg1ODY5OGI4ZTczM2M5YjQyZDgyYWQwMWYxNmM0ODdlZWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-11T11:08:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:22:08Z"}, "message": "replace inline docs with references to rustc-guide", "tree": {"sha": "ae033fedce359f838d609faff61a8fb08017e096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae033fedce359f838d609faff61a8fb08017e096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d32673858698b8e733c9b42d82ad01f16c487eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d32673858698b8e733c9b42d82ad01f16c487eed", "html_url": "https://github.com/rust-lang/rust/commit/d32673858698b8e733c9b42d82ad01f16c487eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d32673858698b8e733c9b42d82ad01f16c487eed/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc04c41a4075cef1cc9c84911fbdc17b5b9265b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc04c41a4075cef1cc9c84911fbdc17b5b9265b7", "html_url": "https://github.com/rust-lang/rust/commit/fc04c41a4075cef1cc9c84911fbdc17b5b9265b7"}], "stats": {"total": 75, "additions": 18, "deletions": 57}, "files": [{"sha": "73fb2a92de6e9b7b4d663fb7bdabb9ed110e697e", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 18, "deletions": 57, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d32673858698b8e733c9b42d82ad01f16c487eed/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32673858698b8e733c9b42d82ad01f16c487eed/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=d32673858698b8e733c9b42d82ad01f16c487eed", "patch": "@@ -25,6 +25,11 @@\n //! M, into constraints in our source context. This process of\n //! translating the results back is done by the\n //! `instantiate_query_result` method.\n+//!\n+//! For a more detailed look at what is happening here, check\n+//! out the [chapter in the rustc guide][c].\n+//!\n+//! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html\n \n use infer::{InferCtxt, InferOk, InferResult, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::Idx;\n@@ -270,64 +275,10 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// have been ambiguous; you should check the certainty level of\n     /// the query before applying this function.)\n     ///\n-    /// It's easiest to explain what is happening here by\n-    /// example. Imagine we start out with the query `?A: Foo<'static,\n-    /// ?B>`. We would canonicalize that by introducing two variables:\n-    ///\n-    ///     ?0: Foo<'?1, ?2>\n-    ///\n-    /// (Note that all regions get replaced with variables always,\n-    /// even \"known\" regions like `'static`.) After canonicalization,\n-    /// we also get back an array with the \"original values\" for each\n-    /// canonicalized variable:\n-    ///\n-    ///     [?A, 'static, ?B]\n-    ///\n-    /// Now we do the query and get back some result R. As part of that\n-    /// result, we'll have an array of values for the canonical inputs.\n-    /// For example, the canonical result might be:\n-    ///\n-    /// ```\n-    /// for<2> {\n-    ///     values = [ Vec<?0>, '1, ?0 ]\n-    ///                    ^^   ^^  ^^ these are variables in the result!\n-    ///     ...\n-    /// }\n-    /// ```\n-    ///\n-    /// Note that this result is itself canonical and may include some\n-    /// variables (in this case, `?0`).\n+    /// To get a good understanding of what is happening here, check\n+    /// out the [chapter in the rustc guide][c].\n     ///\n-    /// What we want to do conceptually is to (a) instantiate each of the\n-    /// canonical variables in the result with a fresh inference variable\n-    /// and then (b) unify the values in the result with the original values.\n-    /// Doing step (a) would yield a result of\n-    ///\n-    /// ```\n-    /// {\n-    ///     values = [ Vec<?C>, '?X, ?C ]\n-    ///                    ^^   ^^^ fresh inference variables in `self`\n-    ///     ..\n-    /// }\n-    /// ```\n-    ///\n-    /// Step (b) would then unify:\n-    ///\n-    /// ```\n-    /// ?A with Vec<?C>\n-    /// 'static with '?X\n-    /// ?B with ?C\n-    /// ```\n-    ///\n-    /// But what we actually do is a mildly optimized variant of\n-    /// that. Rather than eagerly instantiating all of the canonical\n-    /// values in the result with variables, we instead walk the\n-    /// vector of values, looking for cases where the value is just a\n-    /// canonical variable. In our example, `values[2]` is `?C`, so\n-    /// that we means we can deduce that `?C := ?B and `'?X :=\n-    /// 'static`. This gives us a partial set of values. Anything for\n-    /// which we do not find a value, we create an inference variable\n-    /// for. **Then** we unify.\n+    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html#processing-the-canonicalized-query-result\n     pub fn instantiate_query_result<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n@@ -509,6 +460,11 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ///     T: Trait<'?0>\n     ///\n     /// with a mapping M that maps `'?0` to `'static`.\n+    ///\n+    /// To get a good understanding of what is happening here, check\n+    /// out the [chapter in the rustc guide][c].\n+    ///\n+    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html#canonicalizing-the-query\n     pub fn canonicalize_query<V>(&self, value: &V) -> (V::Canonicalized, CanonicalVarValues<'tcx>)\n     where\n         V: Canonicalize<'gcx, 'tcx>,\n@@ -541,6 +497,11 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// things) includes a mapping to `'?0 := 'static`. When\n     /// canonicalizing this query result R, we would leave this\n     /// reference to `'static` alone.\n+    ///\n+    /// To get a good understanding of what is happening here, check\n+    /// out the [chapter in the rustc guide][c].\n+    ///\n+    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html#canonicalizing-the-query-result\n     pub fn canonicalize_response<V>(\n         &self,\n         value: &V,"}]}