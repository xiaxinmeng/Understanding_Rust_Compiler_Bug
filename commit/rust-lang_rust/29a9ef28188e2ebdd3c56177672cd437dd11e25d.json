{"sha": "29a9ef28188e2ebdd3c56177672cd437dd11e25d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YTllZjI4MTg4ZTJlYmRkM2M1NjE3NzY3MmNkNDM3ZGQxMWUyNWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-02-22T17:11:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-04T22:33:43Z"}, "message": "expand: Align some code with the PR fixing inner attributes on out-of-line modules", "tree": {"sha": "9a7d6190c9d48bc4a396e991a2ebfd4e364c2967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a7d6190c9d48bc4a396e991a2ebfd4e364c2967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29a9ef28188e2ebdd3c56177672cd437dd11e25d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29a9ef28188e2ebdd3c56177672cd437dd11e25d", "html_url": "https://github.com/rust-lang/rust/commit/29a9ef28188e2ebdd3c56177672cd437dd11e25d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29a9ef28188e2ebdd3c56177672cd437dd11e25d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "url": "https://api.github.com/repos/rust-lang/rust/commits/da3419e18c68f4eb8beb3765fc9fde4c2e689d43", "html_url": "https://github.com/rust-lang/rust/commit/da3419e18c68f4eb8beb3765fc9fde4c2e689d43"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "dd2eaa0f3d53c5db05197b8f5512e51b941ec5c3", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29a9ef28188e2ebdd3c56177672cd437dd11e25d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a9ef28188e2ebdd3c56177672cd437dd11e25d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=29a9ef28188e2ebdd3c56177672cd437dd11e25d", "patch": "@@ -1280,8 +1280,12 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n             ast::ItemKind::Mod(_, ref mut mod_kind) if ident != Ident::invalid() => {\n                 let (file_path, dir_path, dir_ownership) = match mod_kind {\n-                    ModKind::Loaded(_, Inline::Yes, _) => {\n+                    ModKind::Loaded(_, inline, _) => {\n                         // Inline `mod foo { ... }`, but we still need to push directories.\n+                        assert!(\n+                            *inline == Inline::Yes,\n+                            \"`mod` item is loaded from a file for the second time\"\n+                        );\n                         let (dir_path, dir_ownership) = mod_dir_path(\n                             &self.cx.sess,\n                             ident,\n@@ -1292,11 +1296,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         item.attrs = attrs;\n                         (None, dir_path, dir_ownership)\n                     }\n-                    ModKind::Loaded(_, Inline::No, _) => {\n-                        panic!(\"`mod` item is loaded from a file for the second time\")\n-                    }\n                     ModKind::Unloaded => {\n                         // We have an outline `mod foo;` so we need to parse the file.\n+                        let old_attrs_len = attrs.len();\n                         let ParsedExternalMod {\n                             mut items,\n                             inner_span,\n@@ -1318,8 +1320,13 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n                         *mod_kind = ModKind::Loaded(items, Inline::No, inner_span);\n                         item.attrs = attrs;\n-                        // File can have inline attributes, e.g., `#![cfg(...)]` & co. => Reconfigure.\n-                        item = configure!(self, item);\n+                        if item.attrs.len() > old_attrs_len {\n+                            // If we loaded an out-of-line module and added some inner attributes,\n+                            // then we need to re-configure it.\n+                            // FIXME: Attributes also need to be recollected\n+                            // for resolution and expansion.\n+                            item = configure!(self, item);\n+                        }\n                         (Some(file_path), dir_path, dir_ownership)\n                     }\n                 };"}]}