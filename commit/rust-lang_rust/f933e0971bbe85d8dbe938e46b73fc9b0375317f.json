{"sha": "f933e0971bbe85d8dbe938e46b73fc9b0375317f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MzNlMDk3MWJiZTg1ZDhkYmU5MzhlNDZiNzNmYzliMDM3NTMxN2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-05T09:52:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:20Z"}, "message": "pass a `&mut QueryRegionConstraints` not just outlives constraints", "tree": {"sha": "3d5d9b550aef081f2764252b8527148fbcb96d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5d9b550aef081f2764252b8527148fbcb96d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f933e0971bbe85d8dbe938e46b73fc9b0375317f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f933e0971bbe85d8dbe938e46b73fc9b0375317f", "html_url": "https://github.com/rust-lang/rust/commit/f933e0971bbe85d8dbe938e46b73fc9b0375317f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f933e0971bbe85d8dbe938e46b73fc9b0375317f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec560e2c6d0e7ab17763208a8313d919602d6dd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec560e2c6d0e7ab17763208a8313d919602d6dd4", "html_url": "https://github.com/rust-lang/rust/commit/ec560e2c6d0e7ab17763208a8313d919602d6dd4"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "6ce644f8446808e4e68164a795fcac737d3eb20a", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f933e0971bbe85d8dbe938e46b73fc9b0375317f/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f933e0971bbe85d8dbe938e46b73fc9b0375317f/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=f933e0971bbe85d8dbe938e46b73fc9b0375317f", "patch": "@@ -279,7 +279,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         original_values: &OriginalQueryValues<'tcx>,\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n-        output_query_outlives_constraints: &mut Vec<QueryOutlivesConstraint<'tcx>>,\n+        output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,\n     ) -> InferResult<'tcx, R>\n     where\n         R: Debug + TypeFoldable<'tcx>,\n@@ -305,9 +305,11 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 (UnpackedKind::Lifetime(v_o), UnpackedKind::Lifetime(v_r)) => {\n                     // To make `v_o = v_r`, we emit `v_o: v_r` and `v_r: v_o`.\n                     if v_o != v_r {\n-                        output_query_outlives_constraints\n+                        output_query_region_constraints\n+                            .outlives\n                             .push(ty::Binder::dummy(ty::OutlivesPredicate(v_o.into(), v_r)));\n-                        output_query_outlives_constraints\n+                        output_query_region_constraints\n+                            .outlives\n                             .push(ty::Binder::dummy(ty::OutlivesPredicate(v_r.into(), v_o)));\n                     }\n                 }\n@@ -333,7 +335,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         }\n \n         // ...also include the other query region constraints from the query.\n-        output_query_outlives_constraints.extend(\n+        output_query_region_constraints.outlives.extend(\n             query_response.value.region_constraints.outlives.iter().filter_map(|r_c| {\n                 let r_c = substitute_value(self.tcx, &result_subst, r_c);\n "}, {"sha": "e2a5cd9670e0c50d889eb56a733c089e092aeb1a", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f933e0971bbe85d8dbe938e46b73fc9b0375317f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f933e0971bbe85d8dbe938e46b73fc9b0375317f/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=f933e0971bbe85d8dbe938e46b73fc9b0375317f", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::canonical::{\n     Canonical, Canonicalized, CanonicalizedQueryResponse, OriginalQueryValues,\n-    QueryRegionConstraints, QueryOutlivesConstraint, QueryResponse,\n+    QueryRegionConstraints, QueryResponse,\n };\n use crate::infer::{InferCtxt, InferOk};\n use std::fmt;\n@@ -85,7 +85,7 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n     fn fully_perform_into(\n         query_key: ParamEnvAnd<'tcx, Self>,\n         infcx: &InferCtxt<'_, 'tcx>,\n-        output_query_region_constraints: &mut Vec<QueryOutlivesConstraint<'tcx>>,\n+        output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,\n     ) -> Fallible<Self::QueryResponse> {\n         if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {\n             return Ok(result);\n@@ -141,15 +141,15 @@ where\n         self,\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Fallible<(Self::Output, Option<Rc<QueryRegionConstraints<'tcx>>>)> {\n-        let mut outlives = vec![];\n-        let r = Q::fully_perform_into(self, infcx, &mut outlives)?;\n+        let mut region_constraints = QueryRegionConstraints::default();\n+        let r = Q::fully_perform_into(self, infcx, &mut region_constraints)?;\n \n         // Promote the final query-region-constraints into a\n         // (optional) ref-counted vector:\n-        let opt_qrc = if outlives.is_empty() {\n+        let opt_qrc = if region_constraints.is_empty() {\n             None\n         } else {\n-            Some(Rc::new(QueryRegionConstraints { outlives }))\n+            Some(Rc::new(region_constraints))\n         };\n \n         Ok((r, opt_qrc))"}]}