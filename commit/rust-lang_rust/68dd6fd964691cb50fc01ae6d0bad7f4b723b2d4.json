{"sha": "68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZGQ2ZmQ5NjQ2OTFjYjUwZmMwMWFlNmQwYmFkN2Y0YjcyM2IyZDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-20T19:16:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-20T19:16:17Z"}, "message": "Rollup merge of #38006 - frewsxcv:libstd-debug, r=alexcrichton\n\nImplement `fmt::Debug` for all structures in libstd.\n\nPart of https://github.com/rust-lang/rust/issues/31869.\n\nAlso turn on the `missing_debug_implementations` lint at the crate\nlevel.", "tree": {"sha": "b9659a08f67979ddfd43ba715a9d47884a4a13d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9659a08f67979ddfd43ba715a9d47884a4a13d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "html_url": "https://github.com/rust-lang/rust/commit/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe44f77f4580b60cf9f22e0ab35156c0ce12824", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe44f77f4580b60cf9f22e0ab35156c0ce12824", "html_url": "https://github.com/rust-lang/rust/commit/7fe44f77f4580b60cf9f22e0ab35156c0ce12824"}, {"sha": "86fc63e62ddc0a271210b8cc7cc2a6de6874b8f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/86fc63e62ddc0a271210b8cc7cc2a6de6874b8f8", "html_url": "https://github.com/rust-lang/rust/commit/86fc63e62ddc0a271210b8cc7cc2a6de6874b8f8"}], "stats": {"total": 522, "additions": 515, "deletions": 7}, "files": [{"sha": "f5e9ec6d89d0f62603bf0fc35700e6e2eb81847d", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -12,6 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use fmt;\n use mem;\n use ops::Range;\n use iter::FusedIterator;\n@@ -370,6 +371,13 @@ impl ExactSizeIterator for EscapeDefault {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl FusedIterator for EscapeDefault {}\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for EscapeDefault {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"EscapeDefault { .. }\")\n+    }\n+}\n+\n \n static ASCII_LOWERCASE_MAP: [u8; 256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,"}, {"sha": "2fa3a9c4844b5502515f14ac07f6c14ee52e7bf8", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -1276,6 +1276,15 @@ impl<'a, K, V> Clone for Iter<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, K: Debug, V: Debug> fmt::Debug for Iter<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.clone())\n+            .finish()\n+    }\n+}\n+\n /// HashMap mutable values iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n@@ -1285,7 +1294,7 @@ pub struct IterMut<'a, K: 'a, V: 'a> {\n /// HashMap move iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n-    inner: table::IntoIter<K, V>,\n+    pub(super) inner: table::IntoIter<K, V>,\n }\n \n /// HashMap keys iterator.\n@@ -1302,6 +1311,15 @@ impl<'a, K, V> Clone for Keys<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, K: Debug, V: Debug> fmt::Debug for Keys<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.clone())\n+            .finish()\n+    }\n+}\n+\n /// HashMap values iterator.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n@@ -1316,10 +1334,19 @@ impl<'a, K, V> Clone for Values<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, K: Debug, V: Debug> fmt::Debug for Values<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.clone())\n+            .finish()\n+    }\n+}\n+\n /// HashMap drain iterator.\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n-    inner: table::Drain<'a, K, V>,\n+    pub(super) inner: table::Drain<'a, K, V>,\n }\n \n /// Mutable HashMap values iterator.\n@@ -1557,6 +1584,18 @@ impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, K, V> fmt::Debug for IterMut<'a, K, V>\n+    where K: fmt::Debug,\n+          V: fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.inner.iter())\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> Iterator for IntoIter<K, V> {\n     type Item = (K, V);\n@@ -1580,6 +1619,15 @@ impl<K, V> ExactSizeIterator for IntoIter<K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<K, V> FusedIterator for IntoIter<K, V> {}\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<K: Debug, V: Debug> fmt::Debug for IntoIter<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.inner.iter())\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     type Item = &'a K;\n@@ -1649,6 +1697,18 @@ impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, K, V> fmt::Debug for ValuesMut<'a, K, V>\n+    where K: fmt::Debug,\n+          V: fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.inner.inner.iter())\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     type Item = (K, V);\n@@ -1672,6 +1732,18 @@ impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K, V> FusedIterator for Drain<'a, K, V> {}\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, K, V> fmt::Debug for Drain<'a, K, V>\n+    where K: fmt::Debug,\n+          V: fmt::Debug,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.inner.iter())\n+            .finish()\n+    }\n+}\n+\n impl<'a, K, V> Entry<'a, K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Ensures a value is in the entry by inserting the default if empty, and returns\n@@ -2148,6 +2220,13 @@ impl Default for RandomState {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for RandomState {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"RandomState { .. }\")\n+    }\n+}\n+\n impl<K, S, Q: ?Sized> super::Recover<Q> for HashMap<K, (), S>\n     where K: Eq + Hash + Borrow<Q>,\n           S: BuildHasher,"}, {"sha": "341b050862f5c455520c25d6496c7a264782fb0b", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -948,6 +948,15 @@ impl<'a, K> ExactSizeIterator for Iter<'a, K> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K> FusedIterator for Iter<'a, K> {}\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, K: fmt::Debug> fmt::Debug for Iter<'a, K> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.clone())\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K> Iterator for IntoIter<K> {\n     type Item = K;\n@@ -968,6 +977,16 @@ impl<K> ExactSizeIterator for IntoIter<K> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<K> FusedIterator for IntoIter<K> {}\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<K: fmt::Debug> fmt::Debug for IntoIter<K> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let entries_iter = self.iter.inner.iter().map(|(k, _)| k);\n+        f.debug_list()\n+            .entries(entries_iter)\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K> Iterator for Drain<'a, K> {\n     type Item = K;\n@@ -988,6 +1007,16 @@ impl<'a, K> ExactSizeIterator for Drain<'a, K> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, K> FusedIterator for Drain<'a, K> {}\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, K: fmt::Debug> fmt::Debug for Drain<'a, K> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let entries_iter = self.iter.inner.iter().map(|(k, _)| k);\n+        f.debug_list()\n+            .entries(entries_iter)\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for Intersection<'a, T, S> {\n     fn clone(&self) -> Intersection<'a, T, S> {\n@@ -1021,6 +1050,18 @@ impl<'a, T, S> Iterator for Intersection<'a, T, S>\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, T, S> fmt::Debug for Intersection<'a, T, S>\n+    where T: fmt::Debug + Eq + Hash,\n+          S: BuildHasher,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.clone())\n+            .finish()\n+    }\n+}\n+\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T, S> FusedIterator for Intersection<'a, T, S>\n     where T: Eq + Hash,\n@@ -1068,6 +1109,18 @@ impl<'a, T, S> FusedIterator for Difference<'a, T, S>\n {\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, T, S> fmt::Debug for Difference<'a, T, S>\n+    where T: fmt::Debug + Eq + Hash,\n+          S: BuildHasher,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.clone())\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for SymmetricDifference<'a, T, S> {\n     fn clone(&self) -> SymmetricDifference<'a, T, S> {\n@@ -1097,6 +1150,18 @@ impl<'a, T, S> FusedIterator for SymmetricDifference<'a, T, S>\n {\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, T, S> fmt::Debug for SymmetricDifference<'a, T, S>\n+    where T: fmt::Debug + Eq + Hash,\n+          S: BuildHasher,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.clone())\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Clone for Union<'a, T, S> {\n     fn clone(&self) -> Union<'a, T, S> {\n@@ -1111,6 +1176,18 @@ impl<'a, T, S> FusedIterator for Union<'a, T, S>\n {\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, T, S> fmt::Debug for Union<'a, T, S>\n+    where T: fmt::Debug + Eq + Hash,\n+          S: BuildHasher,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list()\n+            .entries(self.clone())\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, S> Iterator for Union<'a, T, S>\n     where T: Eq + Hash,"}, {"sha": "2cd9362a65791408f9ece6192f1857b7636e5b56", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -882,6 +882,15 @@ unsafe impl<'a, K: Sync, V: Sync> Sync for IterMut<'a, K, V> {}\n // but Send is the more useful bound\n unsafe impl<'a, K: Send, V: Send> Send for IterMut<'a, K, V> {}\n \n+impl<'a, K: 'a, V: 'a> IterMut<'a, K, V> {\n+    pub fn iter(&self) -> Iter<K, V> {\n+        Iter {\n+            iter: self.iter.clone(),\n+            elems_left: self.elems_left,\n+        }\n+    }\n+}\n+\n /// Iterator over the entries in a table, consuming the table.\n pub struct IntoIter<K, V> {\n     table: RawTable<K, V>,\n@@ -891,6 +900,15 @@ pub struct IntoIter<K, V> {\n unsafe impl<K: Sync, V: Sync> Sync for IntoIter<K, V> {}\n unsafe impl<K: Send, V: Send> Send for IntoIter<K, V> {}\n \n+impl<K, V> IntoIter<K, V> {\n+    pub fn iter(&self) -> Iter<K, V> {\n+        Iter {\n+            iter: self.iter.clone(),\n+            elems_left: self.table.size,\n+        }\n+    }\n+}\n+\n /// Iterator over the entries in a table, clearing the table.\n pub struct Drain<'a, K: 'a, V: 'a> {\n     table: Shared<RawTable<K, V>>,\n@@ -901,6 +919,17 @@ pub struct Drain<'a, K: 'a, V: 'a> {\n unsafe impl<'a, K: Sync, V: Sync> Sync for Drain<'a, K, V> {}\n unsafe impl<'a, K: Send, V: Send> Send for Drain<'a, K, V> {}\n \n+impl<'a, K, V> Drain<'a, K, V> {\n+    pub fn iter(&self) -> Iter<K, V> {\n+        unsafe {\n+            Iter {\n+                iter: self.iter.clone(),\n+                elems_left: (**self.table).size,\n+            }\n+        }\n+    }\n+}\n+\n impl<'a, K, V> Iterator for Iter<'a, K, V> {\n     type Item = (&'a K, &'a V);\n "}, {"sha": "0521f301321a736e08a5392dc1686e5913fb0abc", "filename": "src/libstd/env.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -143,13 +143,27 @@ impl Iterator for Vars {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Vars {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Vars { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for VarsOs {\n     type Item = (OsString, OsString);\n     fn next(&mut self) -> Option<(OsString, OsString)> { self.inner.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for VarsOs {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"VarsOs { .. }\")\n+    }\n+}\n+\n /// Fetches the environment variable `key` from the current process.\n ///\n /// The returned result is `Ok(s)` if the environment variable is present and is\n@@ -364,6 +378,13 @@ impl<'a> Iterator for SplitPaths<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a> fmt::Debug for SplitPaths<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"SplitPaths { .. }\")\n+    }\n+}\n+\n /// Error type returned from `std::env::join_paths` when paths fail to be\n /// joined.\n #[derive(Debug)]\n@@ -640,6 +661,13 @@ impl DoubleEndedIterator for Args {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Args {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Args { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for ArgsOs {\n     type Item = OsString;\n@@ -657,6 +685,14 @@ impl ExactSizeIterator for ArgsOs {\n impl DoubleEndedIterator for ArgsOs {\n     fn next_back(&mut self) -> Option<OsString> { self.inner.next_back() }\n }\n+\n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for ArgsOs {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"ArgsOs { .. }\")\n+    }\n+}\n+\n /// Constants associated with the current target\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub mod consts {"}, {"sha": "176b5f66fc4e8500ff4d9a8eaf8b740bfeddd13f", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -140,7 +140,7 @@ pub struct DirEntry(fs_imp::DirEntry);\n ///             .create(true)\n ///             .open(\"foo.txt\");\n /// ```\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OpenOptions(fs_imp::OpenOptions);\n \n@@ -168,6 +168,7 @@ pub struct FileType(fs_imp::FileType);\n ///\n /// This builder also supports platform-specific options.\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n+#[derive(Debug)]\n pub struct DirBuilder {\n     inner: fs_imp::DirBuilder,\n     recursive: bool,\n@@ -834,6 +835,21 @@ impl Metadata {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Metadata {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Metadata\")\n+            .field(\"file_type\", &self.file_type())\n+            .field(\"is_dir\", &self.is_dir())\n+            .field(\"is_file\", &self.is_file())\n+            .field(\"permissions\", &self.permissions())\n+            .field(\"modified\", &self.modified())\n+            .field(\"accessed\", &self.accessed())\n+            .field(\"created\", &self.created())\n+            .finish()\n+    }\n+}\n+\n impl AsInner<fs_imp::FileAttr> for Metadata {\n     fn as_inner(&self) -> &fs_imp::FileAttr { &self.0 }\n }"}, {"sha": "143a85ae321846c6c8b4342c32a54f9fe93b5489", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -1444,6 +1444,16 @@ pub struct Chain<T, U> {\n     done_first: bool,\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<T: fmt::Debug, U: fmt::Debug> fmt::Debug for Chain<T, U> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Chain\")\n+            .field(\"t\", &self.first)\n+            .field(\"u\", &self.second)\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Read, U: Read> Read for Chain<T, U> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n@@ -1485,6 +1495,7 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n ///\n /// [`take()`]: trait.Read.html#method.take\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct Take<T> {\n     inner: T,\n     limit: u64,\n@@ -1602,6 +1613,7 @@ fn read_one_byte(reader: &mut Read) -> Option<Result<u8>> {\n ///\n /// [`bytes()`]: trait.Read.html#method.bytes\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct Bytes<R> {\n     inner: R,\n }\n@@ -1623,6 +1635,7 @@ impl<R: Read> Iterator for Bytes<R> {\n /// [chars]: trait.Read.html#method.chars\n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[derive(Debug)]\n pub struct Chars<R> {\n     inner: R,\n }\n@@ -1712,6 +1725,7 @@ impl fmt::Display for CharsError {\n ///\n /// [split]: trait.BufRead.html#method.split\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct Split<B> {\n     buf: B,\n     delim: u8,\n@@ -1743,6 +1757,7 @@ impl<B: BufRead> Iterator for Split<B> {\n ///\n /// [lines]: trait.BufRead.html#method.lines\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct Lines<B> {\n     buf: B,\n }"}, {"sha": "9d1c8942f8cf80605dab780459dcc69297786470", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -282,6 +282,13 @@ impl Stdin {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Stdin {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Stdin { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n@@ -314,6 +321,13 @@ impl<'a> BufRead for StdinLock<'a> {\n     fn consume(&mut self, n: usize) { self.inner.consume(n) }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a> fmt::Debug for StdinLock<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"StdinLock { .. }\")\n+    }\n+}\n+\n /// A handle to the global standard output stream of the current process.\n ///\n /// Each handle shares a global buffer of data to be written to the standard\n@@ -424,6 +438,13 @@ impl Stdout {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Stdout {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Stdout { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Stdout {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n@@ -449,6 +470,13 @@ impl<'a> Write for StdoutLock<'a> {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a> fmt::Debug for StdoutLock<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"StdoutLock { .. }\")\n+    }\n+}\n+\n /// A handle to the standard error stream of a process.\n ///\n /// For more information, see the [`io::stderr`] method.\n@@ -545,6 +573,13 @@ impl Stderr {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Stderr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Stderr { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Stderr {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n@@ -570,6 +605,13 @@ impl<'a> Write for StderrLock<'a> {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a> fmt::Debug for StderrLock<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"StderrLock { .. }\")\n+    }\n+}\n+\n /// Resets the thread-local stderr handle to the specified writer\n ///\n /// This will replace the current thread's stderr handle, returning the old"}, {"sha": "436511031ef53f777e20eb09cd115ceca67f250a", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(missing_copy_implementations)]\n \n+use fmt;\n use io::{self, Read, Write, ErrorKind, BufRead};\n \n /// Copies the entire contents of a reader into a writer.\n@@ -97,6 +98,13 @@ impl BufRead for Empty {\n     fn consume(&mut self, _n: usize) {}\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Empty {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Empty { .. }\")\n+    }\n+}\n+\n /// A reader which yields one byte over and over and over and over and over and...\n ///\n /// This struct is generally created by calling [`repeat()`][repeat]. Please\n@@ -133,6 +141,13 @@ impl Read for Repeat {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Repeat {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Repeat { .. }\")\n+    }\n+}\n+\n /// A writer which will move data into the void.\n ///\n /// This struct is generally created by calling [`sink()`][sink]. Please\n@@ -165,6 +180,13 @@ impl Write for Sink {\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Sink {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Sink { .. }\")\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use io::prelude::*;"}, {"sha": "fc5c6968544e80d22d25b0a0d255ee331a15e86a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -214,6 +214,7 @@\n #![no_std]\n \n #![deny(missing_docs)]\n+#![deny(missing_debug_implementations)]\n \n // Tell the compiler to link to either panic_abort or panic_unwind\n #![needs_panic_runtime]\n@@ -276,6 +277,7 @@\n #![feature(panic_unwind)]\n #![feature(placement_in_syntax)]\n #![feature(prelude_import)]\n+#![feature(pub_restricted)]\n #![feature(rand)]\n #![feature(raw)]\n #![feature(repr_simd)]"}, {"sha": "cadf87f32b14a6a93b58b7bbd1868cef0b9de794", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -12,6 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use fmt;\n use io::{self, Error, ErrorKind};\n use sys_common::net as net_imp;\n \n@@ -105,6 +106,13 @@ impl Iterator for LookupHost {\n     fn next(&mut self) -> Option<SocketAddr> { self.0.next() }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for LookupHost {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"LookupHost { .. }\")\n+    }\n+}\n+\n /// Resolve the host specified by `host` as a number of `SocketAddr` instances.\n ///\n /// This method may perform a DNS query to resolve `host` and may also inspect"}, {"sha": "63817c9f10f5fbb19892e61759b8e0f30f7858a5", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -76,6 +76,7 @@ pub struct TcpListener(net_imp::TcpListener);\n /// [`incoming`]: struct.TcpListener.html#method.incoming\n /// [`TcpListener`]: struct.TcpListener.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct Incoming<'a> { listener: &'a TcpListener }\n \n impl TcpStream {"}, {"sha": "7c9274d06016180e0bd7c1afab07e185984bd30c", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -17,6 +17,7 @@\n                               crates.io should be used instead for the correct \\\n                               definitions\")]\n #![allow(deprecated)]\n+#![allow(missing_debug_implementations)]\n \n use os::raw::c_ulong;\n "}, {"sha": "0b96295f9e69e0e1a04a65c0b9a51393cb03e920", "filename": "src/libstd/os/macos/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fraw.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -33,7 +33,7 @@ use os::raw::c_long;\n pub type pthread_t = usize;\n \n #[repr(C)]\n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n pub struct stat {\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]"}, {"sha": "cc154f7ab413b4341307d9eb127b91eb696f86f2", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -12,6 +12,8 @@\n \n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n+use fmt;\n+\n #[cfg(any(target_os = \"android\",\n           target_os = \"emscripten\",\n           all(target_os = \"linux\", any(target_arch = \"aarch64\",\n@@ -71,6 +73,13 @@ pub enum c_void {\n     #[doc(hidden)] __variant2,\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for c_void {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"c_void\")\n+    }\n+}\n+\n #[cfg(test)]\n #[allow(unused_imports)]\n mod tests {"}, {"sha": "faf4949e86192e2d76ba2cc7199f9a6a7a67ead7", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -14,6 +14,7 @@\n \n use any::Any;\n use cell::UnsafeCell;\n+use fmt;\n use ops::{Deref, DerefMut};\n use panicking;\n use ptr::{Unique, Shared};\n@@ -296,6 +297,15 @@ impl<R, F: FnOnce() -> R> FnOnce<()> for AssertUnwindSafe<F> {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"AssertUnwindSafe\")\n+            .field(&self.0)\n+            .finish()\n+    }\n+}\n+\n /// Invokes a closure, capturing the cause of an unwinding panic if one occurs.\n ///\n /// This function will return `Ok` with the closure's result if the closure"}, {"sha": "e5edea241e1990654e10d0113cc1dae57440363c", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -177,6 +177,7 @@ pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n /// panic!(\"Normal panic\");\n /// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n+#[derive(Debug)]\n pub struct PanicInfo<'a> {\n     payload: &'a (Any + Send),\n     location: Location<'a>,\n@@ -256,6 +257,7 @@ impl<'a> PanicInfo<'a> {\n ///\n /// panic!(\"Normal panic\");\n /// ```\n+#[derive(Debug)]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub struct Location<'a> {\n     file: &'a str,"}, {"sha": "e15c37aaf24911ac6ade0258109aa5150b084350", "filename": "src/libstd/process.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -114,6 +114,17 @@ impl IntoInner<imp::Process> for Child {\n     fn into_inner(self) -> imp::Process { self.handle }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Child {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"Child\")\n+            .field(\"stdin\", &self.stdin)\n+            .field(\"stdout\", &self.stdout)\n+            .field(\"stderr\", &self.stderr)\n+            .finish()\n+    }\n+}\n+\n /// A handle to a child process's stdin. This struct is used in the [`stdin`]\n /// field on [`Child`].\n ///\n@@ -149,6 +160,13 @@ impl FromInner<AnonPipe> for ChildStdin {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for ChildStdin {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"ChildStdin { .. }\")\n+    }\n+}\n+\n /// A handle to a child process's stdout. This struct is used in the [`stdout`]\n /// field on [`Child`].\n ///\n@@ -183,6 +201,13 @@ impl FromInner<AnonPipe> for ChildStdout {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for ChildStdout {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"ChildStdout { .. }\")\n+    }\n+}\n+\n /// A handle to a child process's stderr. This struct is used in the [`stderr`]\n /// field on [`Child`].\n ///\n@@ -217,6 +242,13 @@ impl FromInner<AnonPipe> for ChildStderr {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for ChildStderr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"ChildStderr { .. }\")\n+    }\n+}\n+\n /// A process builder, providing fine-grained control\n /// over how a new process should be spawned.\n ///\n@@ -622,6 +654,13 @@ impl FromInner<imp::Stdio> for Stdio {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Stdio {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Stdio { .. }\")\n+    }\n+}\n+\n /// Describes the result of a process after it has terminated.\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n #[stable(feature = \"process\", since = \"1.0.0\")]"}, {"sha": "b853e83de5d6cb035b112da1a1fa1d2971db4add", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -59,6 +59,7 @@\n #![unstable(feature = \"rand\", issue = \"0\")]\n \n use cell::RefCell;\n+use fmt;\n use io;\n use mem;\n use rc::Rc;\n@@ -143,6 +144,12 @@ pub struct ThreadRng {\n     rng: Rc<RefCell<ThreadRngInner>>,\n }\n \n+impl fmt::Debug for ThreadRng {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"ThreadRng { .. }\")\n+    }\n+}\n+\n /// Retrieve the lazily-initialized thread-local random number\n /// generator, seeded by the system. Intended to be used in method\n /// chaining style, e.g. `thread_rng().gen::<isize>()`."}, {"sha": "b8e83dced8d4b100bae84db8804628bb78bef740", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use fmt;\n use sync::{Mutex, Condvar};\n \n /// A barrier enables multiple threads to synchronize the beginning\n@@ -54,6 +55,13 @@ struct BarrierState {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BarrierWaitResult(bool);\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Barrier {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Barrier { .. }\")\n+    }\n+}\n+\n impl Barrier {\n     /// Creates a new barrier that can block a given number of threads.\n     ///\n@@ -102,6 +110,15 @@ impl Barrier {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for BarrierWaitResult {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"BarrierWaitResult\")\n+            .field(\"is_leader\", &self.is_leader())\n+            .finish()\n+    }\n+}\n+\n impl BarrierWaitResult {\n     /// Returns whether this thread from `wait` is the \"leader thread\".\n     ///"}, {"sha": "8ab30c51b282eb601ffba3f3eefbe3f01847851d", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use fmt;\n use sync::atomic::{AtomicUsize, Ordering};\n use sync::{mutex, MutexGuard, PoisonError};\n use sys_common::condvar as sys;\n@@ -239,6 +240,13 @@ impl Condvar {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Condvar {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Condvar { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"condvar_default\", since = \"1.9.0\")]\n impl Default for Condvar {\n     /// Creates a `Condvar` which is ready to be waited on and notified."}, {"sha": "aeeab170deafe9cfdd92324197a2bf14c74ffacd", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -306,6 +306,7 @@ impl<T> !Sync for Receiver<T> { }\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct Iter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n@@ -317,6 +318,7 @@ pub struct Iter<'a, T: 'a> {\n /// This Iterator will never block the caller in order to wait for data to\n /// become available. Instead, it will return `None`.\n #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n+#[derive(Debug)]\n pub struct TryIter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n@@ -325,6 +327,7 @@ pub struct TryIter<'a, T: 'a> {\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n #[stable(feature = \"receiver_into_iter\", since = \"1.1.0\")]\n+#[derive(Debug)]\n pub struct IntoIter<T> {\n     rx: Receiver<T>\n }"}, {"sha": "f6dbe01d7bdbf05fab89719ccdf962370629ac4f", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -351,6 +351,15 @@ impl<'a, T: ?Sized> Drop for MutexGuard<'a, T> {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"MutexGuard\")\n+            .field(\"lock\", &self.__lock)\n+            .finish()\n+    }\n+}\n+\n pub fn guard_lock<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a sys::Mutex {\n     &guard.__lock.inner\n }"}, {"sha": "a9747639aacd797381e8df74d4eb2b44ecbf13a4", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -64,6 +64,7 @@\n // You'll find a few more details in the implementation, but that's the gist of\n // it!\n \n+use fmt;\n use marker;\n use ptr;\n use sync::atomic::{AtomicUsize, AtomicBool, Ordering};\n@@ -103,6 +104,7 @@ unsafe impl Send for Once {}\n /// State yielded to the `call_once_force` method which can be used to query\n /// whether the `Once` was previously poisoned or not.\n #[unstable(feature = \"once_poison\", issue = \"33577\")]\n+#[derive(Debug)]\n pub struct OnceState {\n     poisoned: bool,\n }\n@@ -328,6 +330,13 @@ impl Once {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for Once {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Once { .. }\")\n+    }\n+}\n+\n impl Drop for Finish {\n     fn drop(&mut self) {\n         // Swap out our state with however we finished. We should only ever see"}, {"sha": "0a11c71706b7e45565349fd771619cc8f50598d0", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -362,6 +362,24 @@ impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, T: fmt::Debug> fmt::Debug for RwLockReadGuard<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"RwLockReadGuard\")\n+            .field(\"lock\", &self.__lock)\n+            .finish()\n+    }\n+}\n+\n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<'a, T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"RwLockWriteGuard\")\n+            .field(\"lock\", &self.__lock)\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'rwlock, T: ?Sized> Deref for RwLockReadGuard<'rwlock, T> {\n     type Target = T;"}, {"sha": "f4f73646e1b7e088e6d844ac1230b4f430a425ee", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -12,6 +12,7 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n use cell::{Cell, UnsafeCell};\n+use fmt;\n use intrinsics;\n use ptr;\n \n@@ -24,6 +25,12 @@ pub struct Key<T> {\n     dtor_running: Cell<bool>,\n }\n \n+impl<T> fmt::Debug for Key<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Key { .. }\")\n+    }\n+}\n+\n unsafe impl<T> ::marker::Sync for Key<T> { }\n \n impl<T> Key<T> {"}, {"sha": "2384d959881a238662648ceb50b59e935844174f", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -18,6 +18,7 @@ use sys::cvt;\n use sys_common::AsInner;\n use sys_common::io::read_to_end_uninitialized;\n \n+#[derive(Debug)]\n pub struct FileDesc {\n     fd: c_int,\n }"}, {"sha": "8b5c0c04276b164882604cf195bedcd30adab4e0", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -66,7 +66,7 @@ pub struct DirEntry {\n     name: Box<[u8]>\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct OpenOptions {\n     // generic\n     read: bool,\n@@ -86,6 +86,7 @@ pub struct FilePermissions { mode: mode_t }\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FileType { mode: mode_t }\n \n+#[derive(Debug)]\n pub struct DirBuilder { mode: mode_t }\n \n impl FileAttr {"}, {"sha": "c410fcd1ee0ed59f0c2533172541f3cd64a89a17", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -58,7 +58,7 @@ pub struct DirEntry {\n     data: c::WIN32_FIND_DATAW,\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct OpenOptions {\n     // generic\n     read: bool,\n@@ -79,6 +79,7 @@ pub struct OpenOptions {\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct FilePermissions { attrs: c::DWORD }\n \n+#[derive(Debug)]\n pub struct DirBuilder;\n \n impl fmt::Debug for ReadDir {"}, {"sha": "01584979aabaae59c57e769cee73dd8e25e49477", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -13,6 +13,7 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n use cell::UnsafeCell;\n+use fmt;\n use mem;\n \n /// A thread local storage key which owns its contents.\n@@ -98,6 +99,13 @@ pub struct LocalKey<T: 'static> {\n     init: fn() -> T,\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<T: 'static> fmt::Debug for LocalKey<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"LocalKey { .. }\")\n+    }\n+}\n+\n /// Declare a new thread local storage key of type `std::thread::LocalKey`.\n ///\n /// # Syntax\n@@ -184,7 +192,7 @@ macro_rules! __thread_local_inner {\n #[unstable(feature = \"thread_local_state\",\n            reason = \"state querying was recently added\",\n            issue = \"27716\")]\n-#[derive(Eq, PartialEq, Copy, Clone)]\n+#[derive(Debug, Eq, PartialEq, Copy, Clone)]\n pub enum LocalKeyState {\n     /// All keys are in this state whenever a thread starts. Keys will\n     /// transition to the `Valid` state once the first call to `with` happens\n@@ -313,6 +321,7 @@ impl<T: 'static> LocalKey<T> {\n #[doc(hidden)]\n pub mod os {\n     use cell::{Cell, UnsafeCell};\n+    use fmt;\n     use marker;\n     use ptr;\n     use sys_common::thread_local::StaticKey as OsStaticKey;\n@@ -323,6 +332,13 @@ pub mod os {\n         marker: marker::PhantomData<Cell<T>>,\n     }\n \n+    #[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+    impl<T> fmt::Debug for Key<T> {\n+        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            f.pad(\"Key { .. }\")\n+        }\n+    }\n+\n     unsafe impl<T> ::marker::Sync for Key<T> { }\n \n     struct Value<T: 'static> {"}, {"sha": "2a3fb5ec43f2abeb8a33df697a94e382217d7f65", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=68dd6fd964691cb50fc01ae6d0bad7f4b723b2d4", "patch": "@@ -217,6 +217,7 @@ pub use self::local::{LocalKey, LocalKeyState};\n /// Thread configuration. Provides detailed control over the properties\n /// and behavior of new threads.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct Builder {\n     // A name for the thread-to-be, for identification in panic messages\n     name: Option<String>,\n@@ -587,6 +588,13 @@ impl ThreadId {\n     }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl fmt::Debug for ThreadId {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"ThreadId { .. }\")\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Thread\n ////////////////////////////////////////////////////////////////////////////////\n@@ -802,6 +810,13 @@ impl<T> IntoInner<imp::Thread> for JoinHandle<T> {\n     fn into_inner(self) -> imp::Thread { self.0.native.unwrap() }\n }\n \n+#[stable(feature = \"std_debug\", since = \"1.15.0\")]\n+impl<T> fmt::Debug for JoinHandle<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"JoinHandle { .. }\")\n+    }\n+}\n+\n fn _assert_sync_and_send() {\n     fn _assert_both<T: Send + Sync>() {}\n     _assert_both::<JoinHandle<()>>();"}]}