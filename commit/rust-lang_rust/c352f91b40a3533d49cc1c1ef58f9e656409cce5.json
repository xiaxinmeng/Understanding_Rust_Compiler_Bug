{"sha": "c352f91b40a3533d49cc1c1ef58f9e656409cce5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNTJmOTFiNDBhMzUzM2Q0OWNjMWMxZWY1OGY5ZTY1NjQwOWNjZTU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-09T17:17:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-09T17:17:52Z"}, "message": "Rustfmt", "tree": {"sha": "7303f118bcd3e6755bf5c80ca1f625c635df055d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7303f118bcd3e6755bf5c80ca1f625c635df055d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c352f91b40a3533d49cc1c1ef58f9e656409cce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c352f91b40a3533d49cc1c1ef58f9e656409cce5", "html_url": "https://github.com/rust-lang/rust/commit/c352f91b40a3533d49cc1c1ef58f9e656409cce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c352f91b40a3533d49cc1c1ef58f9e656409cce5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e910a24d449028cbbb90e9e99c5b4e72642abd59", "url": "https://api.github.com/repos/rust-lang/rust/commits/e910a24d449028cbbb90e9e99c5b4e72642abd59", "html_url": "https://github.com/rust-lang/rust/commit/e910a24d449028cbbb90e9e99c5b4e72642abd59"}], "stats": {"total": 74, "additions": 28, "deletions": 46}, "files": [{"sha": "8ff1bf271ef49741ace98d372e36576dec0d8928", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=c352f91b40a3533d49cc1c1ef58f9e656409cce5", "patch": "@@ -81,9 +81,7 @@ fn main() {\n             None,\n             Some(Box::new(move |_| {\n                 Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend {\n-                    config: rustc_codegen_cranelift::BackendConfig {\n-                        use_jit,\n-                    }\n+                    config: rustc_codegen_cranelift::BackendConfig { use_jit },\n                 })\n             })),\n         )"}, {"sha": "cf8fee2b1d17ce7648fe2bed4a25597f1e37463a", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=c352f91b40a3533d49cc1c1ef58f9e656409cce5", "patch": "@@ -84,9 +84,8 @@ impl WriterRelocate {\n             match reloc.name {\n                 super::DebugRelocName::Section(_) => unreachable!(),\n                 super::DebugRelocName::Symbol(sym) => {\n-                    let addr = jit_product.lookup_func(\n-                        cranelift_module::FuncId::from_u32(sym.try_into().unwrap()),\n-                    );\n+                    let addr = jit_product\n+                        .lookup_func(cranelift_module::FuncId::from_u32(sym.try_into().unwrap()));\n                     let val = (addr as u64 as i64 + reloc.addend) as u64;\n                     self.writer\n                         .write_udata_at(reloc.offset as usize, val, reloc.size)\n@@ -163,12 +162,7 @@ impl Writer for WriterRelocate {\n         self.write_udata_at(offset, 0, size)\n     }\n \n-    fn write_eh_pointer(\n-        &mut self,\n-        address: Address,\n-        eh_pe: gimli::DwEhPe,\n-        size: u8,\n-    ) -> Result<()> {\n+    fn write_eh_pointer(&mut self, address: Address, eh_pe: gimli::DwEhPe, size: u8) -> Result<()> {\n         match address {\n             // Address::Constant arm copied from gimli\n             Address::Constant(val) => {\n@@ -186,27 +180,25 @@ impl Writer for WriterRelocate {\n                 };\n                 self.write_eh_pointer_data(val, eh_pe.format(), size)\n             }\n-            Address::Symbol { symbol, addend } => {\n-                match eh_pe.application() {\n-                    gimli::DW_EH_PE_pcrel => {\n-                        let size = match eh_pe.format() {\n-                            gimli::DW_EH_PE_sdata4 => 4,\n-                            _ => return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe)),\n-                        };\n-                        self.relocs.push(DebugReloc {\n-                            offset: self.len() as u32,\n-                            size,\n-                            name: DebugRelocName::Symbol(symbol),\n-                            addend,\n-                            kind: object::RelocationKind::Relative,\n-                        });\n-                        self.write_udata(0, size)\n-                    }\n-                    _ => {\n-                        return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe));\n-                    }\n+            Address::Symbol { symbol, addend } => match eh_pe.application() {\n+                gimli::DW_EH_PE_pcrel => {\n+                    let size = match eh_pe.format() {\n+                        gimli::DW_EH_PE_sdata4 => 4,\n+                        _ => return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe)),\n+                    };\n+                    self.relocs.push(DebugReloc {\n+                        offset: self.len() as u32,\n+                        size,\n+                        name: DebugRelocName::Symbol(symbol),\n+                        addend,\n+                        kind: object::RelocationKind::Relative,\n+                    });\n+                    self.write_udata(0, size)\n                 }\n-            }\n+                _ => {\n+                    return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe));\n+                }\n+            },\n         }\n     }\n }"}, {"sha": "61ebd931d2f144e778a2d2158bcee3d39881bcca", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=c352f91b40a3533d49cc1c1ef58f9e656409cce5", "patch": "@@ -20,7 +20,8 @@ impl<'tcx> UnwindContext<'tcx> {\n \n         let cie_id = if let Some(mut cie) = isa.create_systemv_cie() {\n             if isa.flags().is_pic() {\n-                cie.fde_address_encoding = gimli::DwEhPe(gimli::DW_EH_PE_pcrel.0 | gimli::DW_EH_PE_sdata4.0);\n+                cie.fde_address_encoding =\n+                    gimli::DwEhPe(gimli::DW_EH_PE_pcrel.0 | gimli::DW_EH_PE_sdata4.0);\n             }\n             Some(frame_table.add_cie(cie))\n         } else {"}, {"sha": "6f398d045b6463d41369b58da45a25188ab25322", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=c352f91b40a3533d49cc1c1ef58f9e656409cce5", "patch": "@@ -9,7 +9,7 @@ use rustc_codegen_ssa::CrateInfo;\n use crate::prelude::*;\n \n pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n-    use cranelift_simplejit::{SimpleJITModule, SimpleJITBuilder};\n+    use cranelift_simplejit::{SimpleJITBuilder, SimpleJITModule};\n \n     #[cfg(unix)]\n     unsafe {"}, {"sha": "67495c7414840dfe620009a58340626f5e0b412d", "filename": "src/trap.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c352f91b40a3533d49cc1c1ef58f9e656409cce5/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=c352f91b40a3533d49cc1c1ef58f9e656409cce5", "patch": "@@ -29,10 +29,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl Module>, msg: &str) {\n }\n \n /// Trap code: user1\n-pub(crate) fn trap_abort(\n-    fx: &mut FunctionCx<'_, '_, impl Module>,\n-    msg: impl AsRef<str>,\n-) {\n+pub(crate) fn trap_abort(fx: &mut FunctionCx<'_, '_, impl Module>, msg: impl AsRef<str>) {\n     codegen_print(fx, msg.as_ref());\n     fx.bcx.ins().trap(TrapCode::User(1));\n }\n@@ -41,10 +38,7 @@ pub(crate) fn trap_abort(\n /// so you can **not** add instructions to it afterwards.\n ///\n /// Trap code: user65535\n-pub(crate) fn trap_unreachable(\n-    fx: &mut FunctionCx<'_, '_, impl Module>,\n-    msg: impl AsRef<str>,\n-) {\n+pub(crate) fn trap_unreachable(fx: &mut FunctionCx<'_, '_, impl Module>, msg: impl AsRef<str>) {\n     codegen_print(fx, msg.as_ref());\n     fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n }\n@@ -68,10 +62,7 @@ pub(crate) fn trap_unreachable_ret_value<'tcx>(\n /// to it afterwards.\n ///\n /// Trap code: user65535\n-pub(crate) fn trap_unimplemented(\n-    fx: &mut FunctionCx<'_, '_, impl Module>,\n-    msg: impl AsRef<str>,\n-) {\n+pub(crate) fn trap_unimplemented(fx: &mut FunctionCx<'_, '_, impl Module>, msg: impl AsRef<str>) {\n     codegen_print(fx, msg.as_ref());\n     let true_ = fx.bcx.ins().iconst(types::I32, 1);\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));"}]}