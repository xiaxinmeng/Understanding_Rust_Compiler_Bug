{"sha": "f1d04a3434ea6a57addac9c205580d80e8b5837c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZDA0YTM0MzRlYTZhNTdhZGRhYzljMjA1NTgwZDgwZThiNTgzN2M=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T15:42:18Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:24:37Z"}, "message": "Don't run host-only tests when targeting another platform", "tree": {"sha": "02752dd82949ebfdde4bb632a8ef67bdc0e461d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02752dd82949ebfdde4bb632a8ef67bdc0e461d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1d04a3434ea6a57addac9c205580d80e8b5837c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d04a3434ea6a57addac9c205580d80e8b5837c", "html_url": "https://github.com/rust-lang/rust/commit/f1d04a3434ea6a57addac9c205580d80e8b5837c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1d04a3434ea6a57addac9c205580d80e8b5837c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a21c72fb08f13e0d3a7a94a9ef7b690de3914d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a21c72fb08f13e0d3a7a94a9ef7b690de3914d3", "html_url": "https://github.com/rust-lang/rust/commit/4a21c72fb08f13e0d3a7a94a9ef7b690de3914d3"}], "stats": {"total": 156, "additions": 114, "deletions": 42}, "files": [{"sha": "c1dd2ad15a1e1d6be29f765545b7aa68f76af227", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1d04a3434ea6a57addac9c205580d80e8b5837c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d04a3434ea6a57addac9c205580d80e8b5837c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f1d04a3434ea6a57addac9c205580d80e8b5837c", "patch": "@@ -236,9 +236,9 @@ impl<'a> Builder<'a> {\n                 tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n                 tool::RustInstaller, tool::Cargo, tool::Rls),\n-            Kind::Test => describe!(check::Tidy, check::Bootstrap, check::Compiletest, check::Crate,\n-                check::CrateLibrustc, check::Linkcheck, check::Cargotest, check::Cargo, check::Docs,\n-                check::ErrorIndex, check::Distcheck),\n+            Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n+                check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Linkcheck,\n+                check::Cargotest, check::Cargo, check::Docs, check::ErrorIndex, check::Distcheck),\n             Kind::Bench => describe!(check::Crate, check::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,"}, {"sha": "4be013e480e3419bf3b5088018c63f44ee38cb83", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 111, "deletions": 39, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/f1d04a3434ea6a57addac9c205580d80e8b5837c/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d04a3434ea6a57addac9c205580d80e8b5837c/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=f1d04a3434ea6a57addac9c205580d80e8b5837c", "patch": "@@ -468,14 +468,6 @@ fn testdir(build: &Build, host: Interned<String>) -> PathBuf {\n //              \"pretty\", \"run-fail-fulldeps\");\n //    }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct Compiletest {\n-    compiler: Compiler,\n-    target: Interned<String>,\n-    mode: &'static str,\n-    suite: &'static str,\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct Test {\n     path: &'static str,\n@@ -501,8 +493,74 @@ static DEFAULT_COMPILETESTS: &[Test] = &[\n \n     // What this runs varies depending on the native platform being apple\n     Test { path: \"src/test/debuginfo\", mode: \"debuginfo-XXX\", suite: \"debuginfo\" },\n+    Test { path: \"src/test/debuginfo-lldb\", mode: \"debuginfo-lldb\", suite: \"debuginfo\" },\n+    Test { path: \"src/test/debuginfo-gdb\", mode: \"debuginfo-gdb\", suite: \"debuginfo\" },\n ];\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct DefaultCompiletest {\n+    compiler: Compiler,\n+    target: Interned<String>,\n+    mode: &'static str,\n+    suite: &'static str,\n+}\n+\n+impl Step for DefaultCompiletest {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(mut run: ShouldRun) -> ShouldRun {\n+        for test in DEFAULT_COMPILETESTS {\n+            run = run.path(test.path);\n+        }\n+        run\n+    }\n+\n+    fn make_run(\n+        builder: &Builder,\n+        path: Option<&Path>,\n+        host: Interned<String>,\n+        target: Interned<String>,\n+    ) {\n+        let compiler = builder.compiler(builder.top_stage, host);\n+\n+        let test = path.map(|path| {\n+            DEFAULT_COMPILETESTS.iter().find(|&&test| {\n+                path.ends_with(test.path)\n+            }).unwrap_or_else(|| {\n+                panic!(\"make_run in compile test to receive test path, received {:?}\", path);\n+            })\n+        });\n+\n+        if let Some(test) = test {\n+            builder.ensure(DefaultCompiletest {\n+                compiler,\n+                target,\n+                mode: test.mode,\n+                suite: test.suite,\n+            });\n+        } else {\n+            for test in DEFAULT_COMPILETESTS {\n+                builder.ensure(DefaultCompiletest {\n+                    compiler,\n+                    target,\n+                    mode: test.mode,\n+                    suite: test.suite\n+                });\n+            }\n+        }\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        builder.ensure(Compiletest {\n+            compiler: self.compiler,\n+            target: self.target,\n+            mode: self.mode,\n+            suite: self.suite,\n+        })\n+    }\n+}\n+\n // Also default, but host-only.\n static HOST_COMPILETESTS: &[Test] = &[\n     Test { path: \"src/test/ui-fulldeps\", mode: \"ui\", suite: \"ui-fulldeps\" },\n@@ -524,20 +582,21 @@ static HOST_COMPILETESTS: &[Test] = &[\n     Test { path: \"src/test/run-fail-fulldeps/pretty\", mode: \"pretty\", suite: \"run-fail-fulldeps\" },\n ];\n \n-static COMPILETESTS: &[Test] = &[\n-    Test { path: \"src/test/debuginfo-lldb\", mode: \"debuginfo-lldb\", suite: \"debuginfo\" },\n-    Test { path: \"src/test/debuginfo-gdb\", mode: \"debuginfo-gdb\", suite: \"debuginfo\" },\n-];\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct HostCompiletest {\n+    compiler: Compiler,\n+    target: Interned<String>,\n+    mode: &'static str,\n+    suite: &'static str,\n+}\n \n-impl Step for Compiletest {\n+impl Step for HostCompiletest {\n     type Output = ();\n     const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n \n     fn should_run(mut run: ShouldRun) -> ShouldRun {\n-        // Note that this is general, while a few more cases are skipped inside\n-        // run() itself. This is to avoid duplication across should_run and\n-        // make_run.\n-        for test in COMPILETESTS.iter().chain(DEFAULT_COMPILETESTS).chain(HOST_COMPILETESTS) {\n+        for test in HOST_COMPILETESTS {\n             run = run.path(test.path);\n         }\n         run\n@@ -552,44 +611,57 @@ impl Step for Compiletest {\n         let compiler = builder.compiler(builder.top_stage, host);\n \n         let test = path.map(|path| {\n-            COMPILETESTS.iter().chain(DEFAULT_COMPILETESTS).chain(HOST_COMPILETESTS).find(|&&test| {\n+            HOST_COMPILETESTS.iter().find(|&&test| {\n                 path.ends_with(test.path)\n             }).unwrap_or_else(|| {\n                 panic!(\"make_run in compile test to receive test path, received {:?}\", path);\n             })\n         });\n \n-        if let Some(test) = test { // specific test\n-            let target = if HOST_COMPILETESTS.contains(test) {\n-                host\n-            } else {\n-                target\n-            };\n-            builder.ensure(Compiletest {\n-                compiler, target, mode: test.mode, suite: test.suite\n+        if let Some(test) = test {\n+            builder.ensure(HostCompiletest {\n+                compiler,\n+                target,\n+                mode: test.mode,\n+                suite: test.suite,\n             });\n-        } else { // default tests\n-            for test in DEFAULT_COMPILETESTS {\n-                builder.ensure(Compiletest {\n+        } else {\n+            for test in HOST_COMPILETESTS {\n+                builder.ensure(HostCompiletest {\n                     compiler,\n                     target,\n                     mode: test.mode,\n                     suite: test.suite\n                 });\n             }\n-            for test in HOST_COMPILETESTS {\n-                if test.mode != \"pretty\" {\n-                    builder.ensure(Compiletest {\n-                        compiler,\n-                        target: host,\n-                        mode: test.mode,\n-                        suite: test.suite\n-                    });\n-                }\n-            }\n         }\n     }\n \n+    fn run(self, builder: &Builder) {\n+        builder.ensure(Compiletest {\n+            compiler: self.compiler,\n+            target: self.target,\n+            mode: self.mode,\n+            suite: self.suite,\n+        })\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+struct Compiletest {\n+    compiler: Compiler,\n+    target: Interned<String>,\n+    mode: &'static str,\n+    suite: &'static str,\n+}\n+\n+impl Step for Compiletest {\n+    type Output = ();\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.never()\n+    }\n+\n     /// Executes the `compiletest` tool to run a suite of tests.\n     ///\n     /// Compiles all tests with `compiler` for `target` with the specified"}]}