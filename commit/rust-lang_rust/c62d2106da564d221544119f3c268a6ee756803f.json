{"sha": "c62d2106da564d221544119f3c268a6ee756803f", "node_id": "C_kwDOAAsO6NoAKGM2MmQyMTA2ZGE1NjRkMjIxNTQ0MTE5ZjNjMjY4YTZlZTc1NjgwM2Y", "commit": {"author": {"name": "kangarooCoder", "email": "ksbilodeau07@gmail.com", "date": "2022-04-06T02:50:12Z"}, "committer": {"name": "kangarooCoder", "email": "ksbilodeau07@gmail.com", "date": "2022-04-06T02:50:12Z"}, "message": "Merge remote-tracking branch 'origin/master'", "tree": {"sha": "7b7da3e0286718320f0793dd2bc07b2a2689782a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7da3e0286718320f0793dd2bc07b2a2689782a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c62d2106da564d221544119f3c268a6ee756803f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c62d2106da564d221544119f3c268a6ee756803f", "html_url": "https://github.com/rust-lang/rust/commit/c62d2106da564d221544119f3c268a6ee756803f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c62d2106da564d221544119f3c268a6ee756803f/comments", "author": {"login": "KSBilodeau", "id": 22333708, "node_id": "MDQ6VXNlcjIyMzMzNzA4", "avatar_url": "https://avatars.githubusercontent.com/u/22333708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KSBilodeau", "html_url": "https://github.com/KSBilodeau", "followers_url": "https://api.github.com/users/KSBilodeau/followers", "following_url": "https://api.github.com/users/KSBilodeau/following{/other_user}", "gists_url": "https://api.github.com/users/KSBilodeau/gists{/gist_id}", "starred_url": "https://api.github.com/users/KSBilodeau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KSBilodeau/subscriptions", "organizations_url": "https://api.github.com/users/KSBilodeau/orgs", "repos_url": "https://api.github.com/users/KSBilodeau/repos", "events_url": "https://api.github.com/users/KSBilodeau/events{/privacy}", "received_events_url": "https://api.github.com/users/KSBilodeau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KSBilodeau", "id": 22333708, "node_id": "MDQ6VXNlcjIyMzMzNzA4", "avatar_url": "https://avatars.githubusercontent.com/u/22333708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KSBilodeau", "html_url": "https://github.com/KSBilodeau", "followers_url": "https://api.github.com/users/KSBilodeau/followers", "following_url": "https://api.github.com/users/KSBilodeau/following{/other_user}", "gists_url": "https://api.github.com/users/KSBilodeau/gists{/gist_id}", "starred_url": "https://api.github.com/users/KSBilodeau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KSBilodeau/subscriptions", "organizations_url": "https://api.github.com/users/KSBilodeau/orgs", "repos_url": "https://api.github.com/users/KSBilodeau/repos", "events_url": "https://api.github.com/users/KSBilodeau/events{/privacy}", "received_events_url": "https://api.github.com/users/KSBilodeau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594a2fcc3f405e2c3ee643a1b79defbf5ccb1d1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/594a2fcc3f405e2c3ee643a1b79defbf5ccb1d1c", "html_url": "https://github.com/rust-lang/rust/commit/594a2fcc3f405e2c3ee643a1b79defbf5ccb1d1c"}, {"sha": "bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57", "html_url": "https://github.com/rust-lang/rust/commit/bbe9d27b8ff36da56638aa43d6d0cdfdf89a4e57"}], "stats": {"total": 2867, "additions": 2048, "deletions": 819}, "files": [{"sha": "e7e82e651bb09ae0f7dd5518eb76d9530ed46cea", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2068,7 +2068,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::GenericParam {\n             hir_id,\n             name,\n-            span: self.lower_span(param.ident.span),\n+            span: self.lower_span(param.span()),\n             pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n             bounds: self.arena.alloc_from_iter(bounds),\n             kind,"}, {"sha": "b945d687043b44d61df4f3e9295ed2a81f7a592b", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -772,14 +772,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some((issued_span, span)),\n         );\n \n-        self.suggest_using_local_if_applicable(\n-            &mut err,\n-            location,\n-            (place, span),\n-            gen_borrow_kind,\n-            issued_borrow,\n-            explanation,\n-        );\n+        self.suggest_using_local_if_applicable(&mut err, location, issued_borrow, explanation);\n \n         err\n     }\n@@ -789,8 +782,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         location: Location,\n-        (place, span): (Place<'tcx>, Span),\n-        gen_borrow_kind: BorrowKind,\n         issued_borrow: &BorrowData<'tcx>,\n         explanation: BorrowExplanation,\n     ) {\n@@ -822,7 +813,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             return;\n         };\n         let inner_param_uses = find_all_local_uses::find(self.body, inner_param.local);\n-        let Some((inner_call_loc,inner_call_term)) = inner_param_uses.into_iter().find_map(|loc| {\n+        let Some((inner_call_loc, inner_call_term)) = inner_param_uses.into_iter().find_map(|loc| {\n             let Either::Right(term) = self.body.stmt_at(loc) else {\n                 debug!(\"{:?} is a statement, so it can't be a call\", loc);\n                 return None;\n@@ -833,7 +824,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             };\n             debug!(\"checking call args for uses of inner_param: {:?}\", args);\n             if args.contains(&Operand::Move(inner_param)) {\n-                Some((loc,term))\n+                Some((loc, term))\n             } else {\n                 None\n             }"}, {"sha": "ffa629ca16c8b19d7bbc372fcc4055c8d94262a8", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -21,7 +21,7 @@ pub(crate) fn pointer_ty(tcx: TyCtxt<'_>) -> types::Type {\n }\n \n pub(crate) fn scalar_to_clif_type(tcx: TyCtxt<'_>, scalar: Scalar) -> Type {\n-    match scalar.value {\n+    match scalar.primitive() {\n         Primitive::Int(int, _sign) => match int {\n             Integer::I8 => types::I8,\n             Integer::I16 => types::I16,"}, {"sha": "357cb4a6d246fa451a1b42ff3413df5455ef3f81", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -105,7 +105,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n     // Decode the discriminant (specifically if it's niche-encoded).\n     match *tag_encoding {\n         TagEncoding::Direct => {\n-            let signed = match tag_scalar.value {\n+            let signed = match tag_scalar.primitive() {\n                 Int(_, signed) => signed,\n                 _ => false,\n             };"}, {"sha": "8f80b02ae0d4e7d98d588cd255f2ac210bdf209e", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -50,7 +50,7 @@ fn codegen_field<'tcx>(\n }\n \n fn scalar_pair_calculate_b_offset(tcx: TyCtxt<'_>, a_scalar: Scalar, b_scalar: Scalar) -> Offset32 {\n-    let b_offset = a_scalar.value.size(&tcx).align_to(b_scalar.value.align(&tcx).abi);\n+    let b_offset = a_scalar.size(&tcx).align_to(b_scalar.align(&tcx).abi);\n     Offset32::new(b_offset.bytes().try_into().unwrap())\n }\n "}, {"sha": "41f88f119e2a2b017a9e889c99e0748e9a2cc930", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -694,11 +694,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         }\n \n         fn scalar_load_metadata<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>, load: RValue<'gcc>, scalar: &abi::Scalar) {\n-            let vr = scalar.valid_range.clone();\n-            match scalar.value {\n+            let vr = scalar.valid_range(bx);\n+            match scalar.primitive() {\n                 abi::Int(..) => {\n                     if !scalar.is_always_valid(bx) {\n-                        bx.range_metadata(load, scalar.valid_range);\n+                        bx.range_metadata(load, vr);\n                     }\n                 }\n                 abi::Pointer if vr.start < vr.end && !vr.contains(0) => {\n@@ -720,7 +720,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n                 OperandValue::Immediate(self.to_immediate(load, place.layout))\n             }\n             else if let abi::Abi::ScalarPair(ref a, ref b) = place.layout.abi {\n-                let b_offset = a.value.size(self).align_to(b.value.align(self).abi);\n+                let b_offset = a.size(self).align_to(b.align(self).abi);\n                 let pair_type = place.layout.gcc_type(self, false);\n \n                 let mut load = |i, scalar: &abi::Scalar, align| {"}, {"sha": "b056b6d473042de78afd61ac952554c2a871dcf6", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -158,14 +158,14 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     }\n \n     fn scalar_to_backend(&self, cv: Scalar, layout: abi::Scalar, ty: Type<'gcc>) -> RValue<'gcc> {\n-        let bitsize = if layout.is_bool() { 1 } else { layout.value.size(self).bits() };\n+        let bitsize = if layout.is_bool() { 1 } else { layout.size(self).bits() };\n         match cv {\n             Scalar::Int(ScalarInt::ZST) => {\n-                assert_eq!(0, layout.value.size(self).bytes());\n+                assert_eq!(0, layout.size(self).bytes());\n                 self.const_undef(self.type_ix(0))\n             }\n             Scalar::Int(int) => {\n-                let data = int.assert_bits(layout.value.size(self));\n+                let data = int.assert_bits(layout.size(self));\n \n                 // FIXME(antoyo): there's some issues with using the u128 code that follows, so hard-code\n                 // the paths for floating-point values.\n@@ -209,7 +209,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                 let base_addr = self.const_bitcast(base_addr, self.usize_type);\n                 let offset = self.context.new_rvalue_from_long(self.usize_type, offset.bytes() as i64);\n                 let ptr = self.const_bitcast(base_addr + offset, ptr_type);\n-                if layout.value != Pointer {\n+                if layout.primitive() != Pointer {\n                     self.const_bitcast(ptr.dereference(None).to_rvalue(), ty)\n                 }\n                 else {"}, {"sha": "3dc456f1aa0e98452eab5f54e8b5b7eed28297af", "filename": "compiler/rustc_codegen_gcc/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -328,7 +328,7 @@ pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAl\n                 interpret::Pointer::new(alloc_id, Size::from_bytes(ptr_offset)),\n                 &cx.tcx,\n             ),\n-            abi::Scalar { value: Primitive::Pointer, valid_range: WrappingRange { start: 0, end: !0 } },\n+            abi::Scalar::Initialized { value: Primitive::Pointer, valid_range: WrappingRange::full(dl.pointer_size) },\n             cx.type_i8p(),\n         ));\n         next_offset = offset + pointer_size;"}, {"sha": "2c042ba4e3a9e99780bb9c900a0fe91a60b5422b", "filename": "compiler/rustc_codegen_gcc/src/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_of.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -224,7 +224,7 @@ impl<'tcx> LayoutGccExt<'tcx> for TyAndLayout<'tcx> {\n     }\n \n     fn scalar_gcc_type_at<'gcc>(&self, cx: &CodegenCx<'gcc, 'tcx>, scalar: &abi::Scalar, offset: Size) -> Type<'gcc> {\n-        match scalar.value {\n+        match scalar.primitive() {\n             Int(i, true) => cx.type_from_integer(i),\n             Int(i, false) => cx.type_from_unsigned_integer(i),\n             F32 => cx.type_f32(),\n@@ -282,7 +282,7 @@ impl<'tcx> LayoutGccExt<'tcx> for TyAndLayout<'tcx> {\n                 Size::ZERO\n             }\n             else {\n-                a.value.size(cx).align_to(b.value.align(cx).abi)\n+                a.size(cx).align_to(b.align(cx).abi)\n             };\n         self.scalar_gcc_type_at(cx, scalar, offset)\n     }"}, {"sha": "b9baa87bac7c7fba8bf663a478b9b6c41868895d", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -510,9 +510,9 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             // If the value is a boolean, the range is 0..2 and that ultimately\n             // become 0..0 when the type becomes i1, which would be rejected\n             // by the LLVM verifier.\n-            if let Int(..) = scalar.value {\n+            if let Int(..) = scalar.primitive() {\n                 if !scalar.is_bool() && !scalar.is_always_valid(bx) {\n-                    bx.range_metadata(callsite, scalar.valid_range);\n+                    bx.range_metadata(callsite, scalar.valid_range(bx));\n                 }\n             }\n         }"}, {"sha": "03c390b4bd427af8c96833c5d9d143da037b0ae2", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 43, "deletions": 37, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -753,7 +753,7 @@ fn dummy_output_type<'ll>(cx: &CodegenCx<'ll, '_>, reg: InlineAsmRegClass) -> &'\n /// Helper function to get the LLVM type for a Scalar. Pointers are returned as\n /// the equivalent integer type.\n fn llvm_asm_scalar_type<'ll>(cx: &CodegenCx<'ll, '_>, scalar: Scalar) -> &'ll Type {\n-    match scalar.value {\n+    match scalar.primitive() {\n         Primitive::Int(Integer::I8, _) => cx.type_i8(),\n         Primitive::Int(Integer::I16, _) => cx.type_i16(),\n         Primitive::Int(Integer::I32, _) => cx.type_i32(),\n@@ -774,7 +774,7 @@ fn llvm_fixup_input<'ll, 'tcx>(\n ) -> &'ll Value {\n     match (reg, layout.abi) {\n         (InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg), Abi::Scalar(s)) => {\n-            if let Primitive::Int(Integer::I8, _) = s.value {\n+            if let Primitive::Int(Integer::I8, _) = s.primitive() {\n                 let vec_ty = bx.cx.type_vector(bx.cx.type_i8(), 8);\n                 bx.insert_element(bx.const_undef(vec_ty), value, bx.const_i32(0))\n             } else {\n@@ -785,7 +785,7 @@ fn llvm_fixup_input<'ll, 'tcx>(\n             let elem_ty = llvm_asm_scalar_type(bx.cx, s);\n             let count = 16 / layout.size.bytes();\n             let vec_ty = bx.cx.type_vector(elem_ty, count);\n-            if let Primitive::Pointer = s.value {\n+            if let Primitive::Pointer = s.primitive() {\n                 value = bx.ptrtoint(value, bx.cx.type_isize());\n             }\n             bx.insert_element(bx.const_undef(vec_ty), value, bx.const_i32(0))\n@@ -800,7 +800,7 @@ fn llvm_fixup_input<'ll, 'tcx>(\n             bx.shuffle_vector(value, bx.const_undef(vec_ty), bx.const_vector(&indices))\n         }\n         (InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd), Abi::Scalar(s))\n-            if s.value == Primitive::F64 =>\n+            if s.primitive() == Primitive::F64 =>\n         {\n             bx.bitcast(value, bx.cx.type_i64())\n         }\n@@ -812,7 +812,7 @@ fn llvm_fixup_input<'ll, 'tcx>(\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg | ArmInlineAsmRegClass::sreg_low16),\n             Abi::Scalar(s),\n         ) => {\n-            if let Primitive::Int(Integer::I32, _) = s.value {\n+            if let Primitive::Int(Integer::I32, _) = s.primitive() {\n                 bx.bitcast(value, bx.cx.type_f32())\n             } else {\n                 value\n@@ -826,19 +826,21 @@ fn llvm_fixup_input<'ll, 'tcx>(\n             ),\n             Abi::Scalar(s),\n         ) => {\n-            if let Primitive::Int(Integer::I64, _) = s.value {\n+            if let Primitive::Int(Integer::I64, _) = s.primitive() {\n                 bx.bitcast(value, bx.cx.type_f64())\n             } else {\n                 value\n             }\n         }\n-        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => match s.value {\n-            // MIPS only supports register-length arithmetics.\n-            Primitive::Int(Integer::I8 | Integer::I16, _) => bx.zext(value, bx.cx.type_i32()),\n-            Primitive::F32 => bx.bitcast(value, bx.cx.type_i32()),\n-            Primitive::F64 => bx.bitcast(value, bx.cx.type_i64()),\n-            _ => value,\n-        },\n+        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => {\n+            match s.primitive() {\n+                // MIPS only supports register-length arithmetics.\n+                Primitive::Int(Integer::I8 | Integer::I16, _) => bx.zext(value, bx.cx.type_i32()),\n+                Primitive::F32 => bx.bitcast(value, bx.cx.type_i32()),\n+                Primitive::F64 => bx.bitcast(value, bx.cx.type_i64()),\n+                _ => value,\n+            }\n+        }\n         _ => value,\n     }\n }\n@@ -852,15 +854,15 @@ fn llvm_fixup_output<'ll, 'tcx>(\n ) -> &'ll Value {\n     match (reg, layout.abi) {\n         (InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg), Abi::Scalar(s)) => {\n-            if let Primitive::Int(Integer::I8, _) = s.value {\n+            if let Primitive::Int(Integer::I8, _) = s.primitive() {\n                 bx.extract_element(value, bx.const_i32(0))\n             } else {\n                 value\n             }\n         }\n         (InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg_low16), Abi::Scalar(s)) => {\n             value = bx.extract_element(value, bx.const_i32(0));\n-            if let Primitive::Pointer = s.value {\n+            if let Primitive::Pointer = s.primitive() {\n                 value = bx.inttoptr(value, layout.llvm_type(bx.cx));\n             }\n             value\n@@ -875,7 +877,7 @@ fn llvm_fixup_output<'ll, 'tcx>(\n             bx.shuffle_vector(value, bx.const_undef(vec_ty), bx.const_vector(&indices))\n         }\n         (InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd), Abi::Scalar(s))\n-            if s.value == Primitive::F64 =>\n+            if s.primitive() == Primitive::F64 =>\n         {\n             bx.bitcast(value, bx.cx.type_f64())\n         }\n@@ -887,7 +889,7 @@ fn llvm_fixup_output<'ll, 'tcx>(\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg | ArmInlineAsmRegClass::sreg_low16),\n             Abi::Scalar(s),\n         ) => {\n-            if let Primitive::Int(Integer::I32, _) = s.value {\n+            if let Primitive::Int(Integer::I32, _) = s.primitive() {\n                 bx.bitcast(value, bx.cx.type_i32())\n             } else {\n                 value\n@@ -901,20 +903,22 @@ fn llvm_fixup_output<'ll, 'tcx>(\n             ),\n             Abi::Scalar(s),\n         ) => {\n-            if let Primitive::Int(Integer::I64, _) = s.value {\n+            if let Primitive::Int(Integer::I64, _) = s.primitive() {\n                 bx.bitcast(value, bx.cx.type_i64())\n             } else {\n                 value\n             }\n         }\n-        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => match s.value {\n-            // MIPS only supports register-length arithmetics.\n-            Primitive::Int(Integer::I8, _) => bx.trunc(value, bx.cx.type_i8()),\n-            Primitive::Int(Integer::I16, _) => bx.trunc(value, bx.cx.type_i16()),\n-            Primitive::F32 => bx.bitcast(value, bx.cx.type_f32()),\n-            Primitive::F64 => bx.bitcast(value, bx.cx.type_f64()),\n-            _ => value,\n-        },\n+        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => {\n+            match s.primitive() {\n+                // MIPS only supports register-length arithmetics.\n+                Primitive::Int(Integer::I8, _) => bx.trunc(value, bx.cx.type_i8()),\n+                Primitive::Int(Integer::I16, _) => bx.trunc(value, bx.cx.type_i16()),\n+                Primitive::F32 => bx.bitcast(value, bx.cx.type_f32()),\n+                Primitive::F64 => bx.bitcast(value, bx.cx.type_f64()),\n+                _ => value,\n+            }\n+        }\n         _ => value,\n     }\n }\n@@ -927,7 +931,7 @@ fn llvm_fixup_output_type<'ll, 'tcx>(\n ) -> &'ll Type {\n     match (reg, layout.abi) {\n         (InlineAsmRegClass::AArch64(AArch64InlineAsmRegClass::vreg), Abi::Scalar(s)) => {\n-            if let Primitive::Int(Integer::I8, _) = s.value {\n+            if let Primitive::Int(Integer::I8, _) = s.primitive() {\n                 cx.type_vector(cx.type_i8(), 8)\n             } else {\n                 layout.llvm_type(cx)\n@@ -946,7 +950,7 @@ fn llvm_fixup_output_type<'ll, 'tcx>(\n             cx.type_vector(elem_ty, count * 2)\n         }\n         (InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd), Abi::Scalar(s))\n-            if s.value == Primitive::F64 =>\n+            if s.primitive() == Primitive::F64 =>\n         {\n             cx.type_i64()\n         }\n@@ -958,7 +962,7 @@ fn llvm_fixup_output_type<'ll, 'tcx>(\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::sreg | ArmInlineAsmRegClass::sreg_low16),\n             Abi::Scalar(s),\n         ) => {\n-            if let Primitive::Int(Integer::I32, _) = s.value {\n+            if let Primitive::Int(Integer::I32, _) = s.primitive() {\n                 cx.type_f32()\n             } else {\n                 layout.llvm_type(cx)\n@@ -972,19 +976,21 @@ fn llvm_fixup_output_type<'ll, 'tcx>(\n             ),\n             Abi::Scalar(s),\n         ) => {\n-            if let Primitive::Int(Integer::I64, _) = s.value {\n+            if let Primitive::Int(Integer::I64, _) = s.primitive() {\n                 cx.type_f64()\n             } else {\n                 layout.llvm_type(cx)\n             }\n         }\n-        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => match s.value {\n-            // MIPS only supports register-length arithmetics.\n-            Primitive::Int(Integer::I8 | Integer::I16, _) => cx.type_i32(),\n-            Primitive::F32 => cx.type_i32(),\n-            Primitive::F64 => cx.type_i64(),\n-            _ => layout.llvm_type(cx),\n-        },\n+        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => {\n+            match s.primitive() {\n+                // MIPS only supports register-length arithmetics.\n+                Primitive::Int(Integer::I8 | Integer::I16, _) => cx.type_i32(),\n+                Primitive::F32 => cx.type_i32(),\n+                Primitive::F64 => cx.type_i64(),\n+                _ => layout.llvm_type(cx),\n+            }\n+        }\n         _ => layout.llvm_type(cx),\n     }\n }"}, {"sha": "88b87951ecd35b57fd8e791b8261f865078a3d55", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -484,14 +484,14 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 bx.noundef_metadata(load);\n             }\n \n-            match scalar.value {\n+            match scalar.primitive() {\n                 abi::Int(..) => {\n                     if !scalar.is_always_valid(bx) {\n-                        bx.range_metadata(load, scalar.valid_range);\n+                        bx.range_metadata(load, scalar.valid_range(bx));\n                     }\n                 }\n                 abi::Pointer => {\n-                    if !scalar.valid_range.contains(0) {\n+                    if !scalar.valid_range(bx).contains(0) {\n                         bx.nonnull_metadata(load);\n                     }\n \n@@ -525,7 +525,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             });\n             OperandValue::Immediate(self.to_immediate(llval, place.layout))\n         } else if let abi::Abi::ScalarPair(a, b) = place.layout.abi {\n-            let b_offset = a.value.size(self).align_to(b.value.align(self).abi);\n+            let b_offset = a.size(self).align_to(b.align(self).abi);\n             let pair_ty = place.layout.llvm_type(self);\n \n             let mut load = |i, scalar: abi::Scalar, layout, align, offset| {"}, {"sha": "b69d7a000ee9abbbf240d124acf5c70f27367ec2", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -221,16 +221,16 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn scalar_to_backend(&self, cv: Scalar, layout: abi::Scalar, llty: &'ll Type) -> &'ll Value {\n-        let bitsize = if layout.is_bool() { 1 } else { layout.value.size(self).bits() };\n+        let bitsize = if layout.is_bool() { 1 } else { layout.size(self).bits() };\n         match cv {\n             Scalar::Int(ScalarInt::ZST) => {\n-                assert_eq!(0, layout.value.size(self).bytes());\n+                assert_eq!(0, layout.size(self).bytes());\n                 self.const_undef(self.type_ix(0))\n             }\n             Scalar::Int(int) => {\n-                let data = int.assert_bits(layout.value.size(self));\n+                let data = int.assert_bits(layout.size(self));\n                 let llval = self.const_uint_big(self.type_ix(bitsize), data);\n-                if layout.value == Pointer {\n+                if layout.primitive() == Pointer {\n                     unsafe { llvm::LLVMConstIntToPtr(llval, llty) }\n                 } else {\n                     self.const_bitcast(llval, llty)\n@@ -269,7 +269,7 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         1,\n                     )\n                 };\n-                if layout.value != Pointer {\n+                if layout.primitive() != Pointer {\n                     unsafe { llvm::LLVMConstPtrToInt(llval, llty) }\n                 } else {\n                     self.const_bitcast(llval, llty)"}, {"sha": "cb4073528e10a0affbfd4d5d7e75183236c9b75c", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -109,7 +109,10 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: ConstAllocation<\n                 Pointer::new(alloc_id, Size::from_bytes(ptr_offset)),\n                 &cx.tcx,\n             ),\n-            Scalar { value: Primitive::Pointer, valid_range: WrappingRange { start: 0, end: !0 } },\n+            Scalar::Initialized {\n+                value: Primitive::Pointer,\n+                valid_range: WrappingRange::full(dl.pointer_size),\n+            },\n             cx.type_i8p_ext(address_space),\n         ));\n         next_offset = offset + pointer_size;"}, {"sha": "73e01d0453b257077c8d0605417699f538c01d3d", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -118,7 +118,7 @@ fn tag_base_type<'ll, 'tcx>(\n \n         Variants::Multiple { tag_encoding: TagEncoding::Niche { .. }, tag, .. } => {\n             // Niche tags are always normalized to unsized integers of the correct size.\n-            match tag.value {\n+            match tag.primitive() {\n                 Primitive::Int(t, _) => t,\n                 Primitive::F32 => Integer::I32,\n                 Primitive::F64 => Integer::I64,\n@@ -136,7 +136,7 @@ fn tag_base_type<'ll, 'tcx>(\n \n         Variants::Multiple { tag_encoding: TagEncoding::Direct, tag, .. } => {\n             // Direct tags preserve the sign.\n-            tag.value.to_ty(cx.tcx)\n+            tag.primitive().to_ty(cx.tcx)\n         }\n     }\n }\n@@ -425,7 +425,7 @@ fn compute_discriminant_value<'ll, 'tcx>(\n                 let value = (variant_index.as_u32() as u128)\n                     .wrapping_sub(niche_variants.start().as_u32() as u128)\n                     .wrapping_add(niche_start);\n-                let value = tag.value.size(cx).truncate(value);\n+                let value = tag.size(cx).truncate(value);\n                 // NOTE(eddyb) do *NOT* remove this assert, until\n                 // we pass the full 128-bit value to LLVM, otherwise\n                 // truncation will be silent and remain undetected."}, {"sha": "48840c76cac8b05c4d312e60af84d5e85d5af1ba", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -134,7 +134,7 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n             sym::va_arg => {\n                 match fn_abi.ret.layout.abi {\n                     abi::Abi::Scalar(scalar) => {\n-                        match scalar.value {\n+                        match scalar.primitive() {\n                             Primitive::Int(..) => {\n                                 if self.cx().size_of(ret_ty).bytes() < 4 {\n                                     // `va_arg` should not be called on an integer type"}, {"sha": "862805236311dab7717942c657eafce04f622b97", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -309,7 +309,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n         scalar: Scalar,\n         offset: Size,\n     ) -> &'a Type {\n-        match scalar.value {\n+        match scalar.primitive() {\n             Int(i, _) => cx.type_from_integer(i),\n             F32 => cx.type_f32(),\n             F64 => cx.type_f64(),\n@@ -362,8 +362,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n             return cx.type_i1();\n         }\n \n-        let offset =\n-            if index == 0 { Size::ZERO } else { a.value.size(cx).align_to(b.value.align(cx).abi) };\n+        let offset = if index == 0 { Size::ZERO } else { a.size(cx).align_to(b.align(cx).abi) };\n         self.scalar_llvm_type_at(cx, scalar, offset)\n     }\n "}, {"sha": "369ca950e87be033e8a166a2101d1981290e5457", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -464,13 +464,13 @@ fn push_debuginfo_type_name<'tcx>(\n \n             // calculate the range of values for the dataful variant\n             let dataful_discriminant_range =\n-                dataful_variant_layout.largest_niche().unwrap().scalar.valid_range;\n+                dataful_variant_layout.largest_niche().unwrap().valid_range;\n \n             let min = dataful_discriminant_range.start;\n-            let min = tag.value.size(&tcx).truncate(min);\n+            let min = tag.size(&tcx).truncate(min);\n \n             let max = dataful_discriminant_range.end;\n-            let max = tag.value.size(&tcx).truncate(max);\n+            let max = tag.size(&tcx).truncate(max);\n \n             let dataful_variant_name = variant_name(*dataful_variant);\n             write!(output, \", {}, {}, {}\", min, max, dataful_variant_name).unwrap();"}, {"sha": "b7d760bfbabe1d3325252df2513428803d5792ed", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1572,7 +1572,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         match (src.layout.abi, dst.layout.abi) {\n             (abi::Abi::Scalar(src_scalar), abi::Abi::Scalar(dst_scalar)) => {\n                 // HACK(eddyb) LLVM doesn't like `bitcast`s between pointers and non-pointers.\n-                if (src_scalar.value == abi::Pointer) == (dst_scalar.value == abi::Pointer) {\n+                if (src_scalar.primitive() == abi::Pointer)\n+                    == (dst_scalar.primitive() == abi::Pointer)\n+                {\n                     assert_eq!(src.layout.size, dst.layout.size);\n \n                     // NOTE(eddyb) the `from_immediate` and `to_immediate_scalar`"}, {"sha": "08be4c0a7b622e2b46130721fdf194922c058eb3", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -207,11 +207,11 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n             // Extract a scalar component from a pair.\n             (OperandValue::Pair(a_llval, b_llval), Abi::ScalarPair(a, b)) => {\n                 if offset.bytes() == 0 {\n-                    assert_eq!(field.size, a.value.size(bx.cx()));\n+                    assert_eq!(field.size, a.size(bx.cx()));\n                     OperandValue::Immediate(a_llval)\n                 } else {\n-                    assert_eq!(offset, a.value.size(bx.cx()).align_to(b.value.align(bx.cx()).abi));\n-                    assert_eq!(field.size, b.value.size(bx.cx()));\n+                    assert_eq!(offset, a.size(bx.cx()).align_to(b.align(bx.cx()).abi));\n+                    assert_eq!(field.size, b.size(bx.cx()));\n                     OperandValue::Immediate(b_llval)\n                 }\n             }\n@@ -316,7 +316,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n                     bug!(\"store_with_flags: invalid ScalarPair layout: {:#?}\", dest.layout);\n                 };\n                 let ty = bx.backend_type(dest.layout);\n-                let b_offset = a_scalar.value.size(bx).align_to(b_scalar.value.align(bx).abi);\n+                let b_offset = a_scalar.size(bx).align_to(b_scalar.align(bx).abi);\n \n                 let llptr = bx.struct_gep(ty, dest.llval, 0);\n                 let val = bx.from_immediate(a);"}, {"sha": "cf69c8fd8fda940784522c89ecff24d71ea516d5", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                     self.llval\n                 }\n                 Abi::ScalarPair(a, b)\n-                    if offset == a.value.size(bx.cx()).align_to(b.value.align(bx.cx()).abi) =>\n+                    if offset == a.size(bx.cx()).align_to(b.align(bx.cx()).abi) =>\n                 {\n                     // Offset matches second field.\n                     let ty = bx.backend_type(self.layout);\n@@ -234,7 +234,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         // Decode the discriminant (specifically if it's niche-encoded).\n         match *tag_encoding {\n             TagEncoding::Direct => {\n-                let signed = match tag_scalar.value {\n+                let signed = match tag_scalar.primitive() {\n                     // We use `i1` for bytes that are always `0` or `1`,\n                     // e.g., `#[repr(i8)] enum E { A, B }`, but we can't\n                     // let LLVM interpret the `i1` as signed, because"}, {"sha": "fd29c9e281b920dba741834c28a1703753631785", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -299,23 +299,25 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                         let mut signed = false;\n                         if let Abi::Scalar(scalar) = operand.layout.abi {\n-                            if let Int(_, s) = scalar.value {\n+                            if let Int(_, s) = scalar.primitive() {\n                                 // We use `i1` for bytes that are always `0` or `1`,\n                                 // e.g., `#[repr(i8)] enum E { A, B }`, but we can't\n                                 // let LLVM interpret the `i1` as signed, because\n                                 // then `i1 1` (i.e., E::B) is effectively `i8 -1`.\n                                 signed = !scalar.is_bool() && s;\n \n                                 if !scalar.is_always_valid(bx.cx())\n-                                    && scalar.valid_range.end >= scalar.valid_range.start\n+                                    && scalar.valid_range(bx.cx()).end\n+                                        >= scalar.valid_range(bx.cx()).start\n                                 {\n                                     // We want `table[e as usize \u00b1 k]` to not\n                                     // have bound checks, and this is the most\n                                     // convenient place to put the `assume`s.\n-                                    if scalar.valid_range.start > 0 {\n-                                        let enum_value_lower_bound = bx\n-                                            .cx()\n-                                            .const_uint_big(ll_t_in, scalar.valid_range.start);\n+                                    if scalar.valid_range(bx.cx()).start > 0 {\n+                                        let enum_value_lower_bound = bx.cx().const_uint_big(\n+                                            ll_t_in,\n+                                            scalar.valid_range(bx.cx()).start,\n+                                        );\n                                         let cmp_start = bx.icmp(\n                                             IntPredicate::IntUGE,\n                                             llval,\n@@ -324,8 +326,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                         bx.assume(cmp_start);\n                                     }\n \n-                                    let enum_value_upper_bound =\n-                                        bx.cx().const_uint_big(ll_t_in, scalar.valid_range.end);\n+                                    let enum_value_upper_bound = bx\n+                                        .cx()\n+                                        .const_uint_big(ll_t_in, scalar.valid_range(bx.cx()).end);\n                                     let cmp_end = bx.icmp(\n                                         IntPredicate::IntULE,\n                                         llval,"}, {"sha": "b856d1708abc91fe85fa2643cd9e927ceeb8ae3e", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n use rustc_span::source_map::Span;\n-use rustc_target::abi::Abi;\n+use rustc_target::abi::{self, Abi};\n use std::borrow::Cow;\n use std::convert::TryInto;\n \n@@ -118,7 +118,7 @@ pub(super) fn op_to_const<'tcx>(\n     // the usual cases of extracting e.g. a `usize`, without there being a real use case for the\n     // `Undef` situation.\n     let try_as_immediate = match op.layout.abi {\n-        Abi::Scalar(..) => true,\n+        Abi::Scalar(abi::Scalar::Initialized { .. }) => true,\n         Abi::ScalarPair(..) => match op.layout.ty.kind() {\n             ty::Ref(_, inner, _) => match *inner.kind() {\n                 ty::Slice(elem) => elem == ecx.tcx.types.u8,"}, {"sha": "3cc237faf695c1f5a40ae90737d2f50a03b33b35", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -188,7 +188,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = self.read_scalar(&args[0])?.check_init()?;\n                 let bits = val.to_bits(layout_of.size)?;\n                 let kind = match layout_of.abi {\n-                    Abi::Scalar(scalar) => scalar.value,\n+                    Abi::Scalar(scalar) => scalar.primitive(),\n                     _ => span_bug!(\n                         self.cur_span(),\n                         \"{} called on invalid type {:?}\","}, {"sha": "ee1ba60829316834b34bbaf3996ebbf686f9edcb", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n use rustc_middle::ty::{ConstInt, DelaySpanBugEmitted, Ty};\n use rustc_middle::{mir, ty};\n-use rustc_target::abi::{Abi, HasDataLayout, Size, TagEncoding};\n+use rustc_target::abi::{self, Abi, HasDataLayout, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n \n use super::{\n@@ -265,16 +265,24 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }));\n         };\n \n+        // It may seem like all types with `Scalar` or `ScalarPair` ABI are fair game at this point.\n+        // However, `MaybeUninit<u64>` is considered a `Scalar` as far as its layout is concerned --\n+        // and yet cannot be represented by an interpreter `Scalar`, since we have to handle the\n+        // case where some of the bytes are initialized and others are not. So, we need an extra\n+        // check that walks over the type of `mplace` to make sure it is truly correct to treat this\n+        // like a `Scalar` (or `ScalarPair`).\n         match mplace.layout.abi {\n-            Abi::Scalar(..) => {\n+            Abi::Scalar(abi::Scalar::Initialized { .. }) => {\n                 let scalar = alloc.read_scalar(alloc_range(Size::ZERO, mplace.layout.size))?;\n                 Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))\n             }\n-            Abi::ScalarPair(a, b) => {\n+            Abi::ScalarPair(\n+                abi::Scalar::Initialized { value: a, .. },\n+                abi::Scalar::Initialized { value: b, .. },\n+            ) => {\n                 // We checked `ptr_align` above, so all fields will have the alignment they need.\n                 // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,\n                 // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.\n-                let (a, b) = (a.value, b.value);\n                 let (a_size, b_size) = (a.size(self), b.size(self));\n                 let b_offset = a_size.align_to(b.align(self).abi);\n                 assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields\n@@ -676,7 +684,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         //   may be a pointer. This is `tag_val.layout`; we just use it for sanity checks.\n \n         // Get layout for tag.\n-        let tag_layout = self.layout_of(tag_scalar_layout.value.to_int_ty(*self.tcx))?;\n+        let tag_layout = self.layout_of(tag_scalar_layout.primitive().to_int_ty(*self.tcx))?;\n \n         // Read tag and sanity-check `tag_layout`.\n         let tag_val = self.read_immediate(&self.operand_field(op, tag_field)?)?;"}, {"sha": "5f7f52ef9e9f4e170002f9d951583f93d30cf742", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -772,13 +772,11 @@ where\n                 // We checked `ptr_align` above, so all fields will have the alignment they need.\n                 // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,\n                 // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.\n-                let (a, b) = match dest.layout.abi {\n-                    Abi::ScalarPair(a, b) => (a.value, b.value),\n-                    _ => span_bug!(\n+                let Abi::ScalarPair(a, b) = dest.layout.abi else { span_bug!(\n                         self.cur_span(),\n                         \"write_immediate_to_mplace: invalid ScalarPair layout: {:#?}\",\n                         dest.layout\n-                    ),\n+                    )\n                 };\n                 let (a_size, b_size) = (a.size(&tcx), b.size(&tcx));\n                 let b_offset = a_size.align_to(b.align(&tcx).abi);\n@@ -1046,7 +1044,7 @@ where\n                 // raw discriminants for enums are isize or bigger during\n                 // their computation, but the in-memory tag is the smallest possible\n                 // representation\n-                let size = tag_layout.value.size(self);\n+                let size = tag_layout.size(self);\n                 let tag_val = size.truncate(discr_val);\n \n                 let tag_dest = self.place_field(dest, tag_field)?;\n@@ -1070,7 +1068,7 @@ where\n                         .expect(\"overflow computing relative variant idx\");\n                     // We need to use machine arithmetic when taking into account `niche_start`:\n                     // tag_val = variant_index_relative + niche_start_val\n-                    let tag_layout = self.layout_of(tag_layout.value.to_int_ty(*self.tcx))?;\n+                    let tag_layout = self.layout_of(tag_layout.primitive().to_int_ty(*self.tcx))?;\n                     let niche_start_val = ImmTy::from_uint(niche_start, tag_layout);\n                     let variant_index_relative_val =\n                         ImmTy::from_uint(variant_index_relative, tag_layout);"}, {"sha": "c2a38c6978bfb117750c7fc983240f99e380b45c", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -189,12 +189,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // that will take care to make it UB to leave the range, just\n                 // like for transmute).\n                 (abi::Abi::Scalar(caller), abi::Abi::Scalar(callee)) => {\n-                    caller.value == callee.value\n+                    caller.primitive() == callee.primitive()\n                 }\n                 (\n                     abi::Abi::ScalarPair(caller1, caller2),\n                     abi::Abi::ScalarPair(callee1, callee2),\n-                ) => caller1.value == callee1.value && caller2.value == callee2.value,\n+                ) => {\n+                    caller1.primitive() == callee1.primitive()\n+                        && caller2.primitive() == callee2.primitive()\n+                }\n                 // Be conservative\n                 _ => false,\n             }"}, {"sha": "e5fd182f8b3a9127255858fd9be3deef33ae7759", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -629,12 +629,12 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         op: &OpTy<'tcx, M::PointerTag>,\n         scalar_layout: ScalarAbi,\n     ) -> InterpResult<'tcx> {\n-        if scalar_layout.valid_range.is_full_for(op.layout.size) {\n+        if scalar_layout.valid_range(self.ecx).is_full_for(op.layout.size) {\n             // Nothing to check\n             return Ok(());\n         }\n         // At least one value is excluded.\n-        let valid_range = scalar_layout.valid_range;\n+        let valid_range = scalar_layout.valid_range(self.ecx);\n         let WrappingRange { start, end } = valid_range;\n         let max_value = op.layout.size.unsigned_int_max();\n         assert!(end <= max_value);"}, {"sha": "06a90ab05ac820e3ea0b467bfb127e4d9fc43b7c", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1047,6 +1047,12 @@ impl<'a> ExtCtxt<'a> {\n         self.current_expansion.id.expn_data().call_site\n     }\n \n+    /// Returns the current expansion kind's description.\n+    pub(crate) fn expansion_descr(&self) -> String {\n+        let expn_data = self.current_expansion.id.expn_data();\n+        expn_data.kind.descr()\n+    }\n+\n     /// Equivalent of `Span::def_site` from the proc macro API,\n     /// except that the location is taken from the span passed as an argument.\n     pub fn with_def_site_ctxt(&self, span: Span) -> Span {"}, {"sha": "b4bae8ce5fbeb17fd03d57f3042d737c849e013d", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -24,6 +24,8 @@ impl base::ProcMacro for BangProcMacro {\n         span: Span,\n         input: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n+        let _timer =\n+            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace).map_err(|e| {\n@@ -48,6 +50,8 @@ impl base::AttrProcMacro for AttrProcMacro {\n         annotation: TokenStream,\n         annotated: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n+        let _timer =\n+            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client\n@@ -97,17 +101,21 @@ impl MultiItemModifier for ProcMacroDerive {\n             nt_to_tokenstream(&item, &ecx.sess.parse_sess, CanSynthesizeMissingTokens::No)\n         };\n \n-        let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n-        let server = proc_macro_server::Rustc::new(ecx);\n-        let stream = match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {\n-            Ok(stream) => stream,\n-            Err(e) => {\n-                let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n-                if let Some(s) = e.as_str() {\n-                    err.help(&format!(\"message: {}\", s));\n+        let stream = {\n+            let _timer =\n+                ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+            let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n+            let server = proc_macro_server::Rustc::new(ecx);\n+            match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {\n+                Ok(stream) => stream,\n+                Err(e) => {\n+                    let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n+                    if let Some(s) = e.as_str() {\n+                        err.help(&format!(\"message: {}\", s));\n+                    }\n+                    err.emit();\n+                    return ExpandResult::Ready(vec![]);\n                 }\n-                err.emit();\n-                return ExpandResult::Ready(vec![]);\n             }\n         };\n "}, {"sha": "437104d1aaf5d3df7eca8a293a89fd7230392cdc", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n-use rustc_target::abi::Abi;\n+use rustc_target::abi::{Abi, WrappingRange};\n use rustc_target::abi::{Integer, TagEncoding, Variants};\n use rustc_target::spec::abi::Abi as SpecAbi;\n \n@@ -796,14 +796,18 @@ crate fn repr_nullable_ptr<'tcx>(\n         // Return the nullable type this Option-like enum can be safely represented with.\n         let field_ty_abi = &cx.layout_of(field_ty).unwrap().abi;\n         if let Abi::Scalar(field_ty_scalar) = field_ty_abi {\n-            match (field_ty_scalar.valid_range.start, field_ty_scalar.valid_range.end) {\n-                (0, x) if x == field_ty_scalar.value.size(&cx.tcx).unsigned_int_max() - 1 => {\n+            match field_ty_scalar.valid_range(cx) {\n+                WrappingRange { start: 0, end }\n+                    if end == field_ty_scalar.size(&cx.tcx).unsigned_int_max() - 1 =>\n+                {\n                     return Some(get_nullable_type(cx, field_ty).unwrap());\n                 }\n-                (1, _) => {\n+                WrappingRange { start: 1, .. } => {\n                     return Some(get_nullable_type(cx, field_ty).unwrap());\n                 }\n-                (start, end) => unreachable!(\"Unhandled start and end range: ({}, {})\", start, end),\n+                WrappingRange { start, end } => {\n+                    unreachable!(\"Unhandled start and end range: ({}, {})\", start, end)\n+                }\n             };\n         }\n     }\n@@ -1342,7 +1346,7 @@ impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n                 return\n             };\n \n-            let tag_size = tag.value.size(&cx.tcx).bytes();\n+            let tag_size = tag.size(&cx.tcx).bytes();\n \n             debug!(\n                 \"enum `{}` is {} bytes large with layout:\\n{:#?}\","}, {"sha": "e278efa3d8b1e4d1f88710c0a8506e5a9735b3c0", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -305,10 +305,10 @@ fn invert_mapping(map: &[u32]) -> Vec<u32> {\n impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     fn scalar_pair(&self, a: Scalar, b: Scalar) -> LayoutS<'tcx> {\n         let dl = self.data_layout();\n-        let b_align = b.value.align(dl);\n-        let align = a.value.align(dl).max(b_align).max(dl.aggregate_align);\n-        let b_offset = a.value.size(dl).align_to(b_align.abi);\n-        let size = (b_offset + b.value.size(dl)).align_to(align.abi);\n+        let b_align = b.align(dl);\n+        let align = a.align(dl).max(b_align).max(dl.aggregate_align);\n+        let b_offset = a.size(dl).align_to(b_align.abi);\n+        let size = (b_offset + b.size(dl)).align_to(align.abi);\n \n         // HACK(nox): We iter on `b` and then `a` because `max_by_key`\n         // returns the last maximum.\n@@ -567,7 +567,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let scalar_unit = |value: Primitive| {\n             let size = value.size(dl);\n             assert!(size.bits() <= 128);\n-            Scalar { value, valid_range: WrappingRange { start: 0, end: size.unsigned_int_max() } }\n+            Scalar::Initialized { value, valid_range: WrappingRange::full(size) }\n         };\n         let scalar =\n             |value: Primitive| tcx.intern_layout(LayoutS::scalar(self, scalar_unit(value)));\n@@ -581,11 +581,14 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             // Basic scalars.\n             ty::Bool => tcx.intern_layout(LayoutS::scalar(\n                 self,\n-                Scalar { value: Int(I8, false), valid_range: WrappingRange { start: 0, end: 1 } },\n+                Scalar::Initialized {\n+                    value: Int(I8, false),\n+                    valid_range: WrappingRange { start: 0, end: 1 },\n+                },\n             )),\n             ty::Char => tcx.intern_layout(LayoutS::scalar(\n                 self,\n-                Scalar {\n+                Scalar::Initialized {\n                     value: Int(I32, false),\n                     valid_range: WrappingRange { start: 0, end: 0x10FFFF },\n                 },\n@@ -598,7 +601,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             }),\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n-                ptr.valid_range = ptr.valid_range.with_start(1);\n+                ptr.valid_range_mut().start = 1;\n                 tcx.intern_layout(LayoutS::scalar(self, ptr))\n             }\n \n@@ -616,7 +619,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n                 let mut data_ptr = scalar_unit(Pointer);\n                 if !ty.is_unsafe_ptr() {\n-                    data_ptr.valid_range = data_ptr.valid_range.with_start(1);\n+                    data_ptr.valid_range_mut().start = 1;\n                 }\n \n                 let pointee = tcx.normalize_erasing_regions(param_env, pointee);\n@@ -632,7 +635,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),\n                     ty::Dynamic(..) => {\n                         let mut vtable = scalar_unit(Pointer);\n-                        vtable.valid_range = vtable.valid_range.with_start(1);\n+                        vtable.valid_range_mut().start = 1;\n                         vtable\n                     }\n                     _ => return Err(LayoutError::Unknown(unsized_part)),\n@@ -889,14 +892,14 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                         // If all non-ZST fields have the same ABI, forward this ABI\n                         if optimize && !field.is_zst() {\n-                            // Normalize scalar_unit to the maximal valid range\n+                            // Discard valid range information and allow undef\n                             let field_abi = match field.abi {\n-                                Abi::Scalar(x) => Abi::Scalar(scalar_unit(x.value)),\n+                                Abi::Scalar(x) => Abi::Scalar(x.to_union()),\n                                 Abi::ScalarPair(x, y) => {\n-                                    Abi::ScalarPair(scalar_unit(x.value), scalar_unit(y.value))\n+                                    Abi::ScalarPair(x.to_union(), y.to_union())\n                                 }\n                                 Abi::Vector { element: x, count } => {\n-                                    Abi::Vector { element: scalar_unit(x.value), count }\n+                                    Abi::Vector { element: x.to_union(), count }\n                                 }\n                                 Abi::Uninhabited | Abi::Aggregate { .. } => {\n                                     Abi::Aggregate { sized: true }\n@@ -1000,14 +1003,16 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             if let Bound::Included(start) = start {\n                                 // FIXME(eddyb) this might be incorrect - it doesn't\n                                 // account for wrap-around (end < start) ranges.\n-                                assert!(scalar.valid_range.start <= start);\n-                                scalar.valid_range.start = start;\n+                                let valid_range = scalar.valid_range_mut();\n+                                assert!(valid_range.start <= start);\n+                                valid_range.start = start;\n                             }\n                             if let Bound::Included(end) = end {\n                                 // FIXME(eddyb) this might be incorrect - it doesn't\n                                 // account for wrap-around (end < start) ranges.\n-                                assert!(scalar.valid_range.end >= end);\n-                                scalar.valid_range.end = end;\n+                                let valid_range = scalar.valid_range_mut();\n+                                assert!(valid_range.end >= end);\n+                                valid_range.end = end;\n                             }\n \n                             // Update `largest_niche` if we have introduced a larger niche.\n@@ -1133,9 +1138,15 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                         // guaranteed to be initialised, not the\n                                         // other primitive.\n                                         if offset.bytes() == 0 {\n-                                            Abi::ScalarPair(niche_scalar, scalar_unit(second.value))\n+                                            Abi::ScalarPair(\n+                                                niche_scalar,\n+                                                scalar_unit(second.primitive()),\n+                                            )\n                                         } else {\n-                                            Abi::ScalarPair(scalar_unit(first.value), niche_scalar)\n+                                            Abi::ScalarPair(\n+                                                scalar_unit(first.primitive()),\n+                                                niche_scalar,\n+                                            )\n                                         }\n                                     }\n                                     _ => Abi::Aggregate { sized: true },\n@@ -1314,7 +1325,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 }\n \n                 let tag_mask = ity.size().unsigned_int_max();\n-                let tag = Scalar {\n+                let tag = Scalar::Initialized {\n                     value: Int(ity, signed),\n                     valid_range: WrappingRange {\n                         start: (min as u128 & tag_mask),\n@@ -1325,7 +1336,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 // Without latter check aligned enums with custom discriminant values\n                 // Would result in ICE see the issue #92464 for more info\n-                if tag.value.size(dl) == size || variants.iter().all(|layout| layout.is_empty()) {\n+                if tag.size(dl) == size || variants.iter().all(|layout| layout.is_empty()) {\n                     abi = Abi::Scalar(tag);\n                 } else {\n                     // Try to use a ScalarPair for all tagged enums.\n@@ -1345,7 +1356,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             }\n                         };\n                         let prim = match field.abi {\n-                            Abi::Scalar(scalar) => scalar.value,\n+                            Abi::Scalar(scalar) => scalar.primitive(),\n                             _ => {\n                                 common_prim = None;\n                                 break;\n@@ -1599,7 +1610,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let max_discr = (info.variant_fields.len() - 1) as u128;\n         let discr_int = Integer::fit_unsigned(max_discr);\n         let discr_int_ty = discr_int.to_ty(tcx, false);\n-        let tag = Scalar {\n+        let tag = Scalar::Initialized {\n             value: Primitive::Int(discr_int, false),\n             valid_range: WrappingRange { start: 0, end: max_discr },\n         };\n@@ -1898,7 +1909,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     adt_kind.into(),\n                     adt_packed,\n                     match tag_encoding {\n-                        TagEncoding::Direct => Some(tag.value.size(self)),\n+                        TagEncoding::Direct => Some(tag.size(self)),\n                         _ => None,\n                     },\n                     variant_infos,\n@@ -2304,7 +2315,7 @@ where\n             let tag_layout = |tag: Scalar| -> TyAndLayout<'tcx> {\n                 TyAndLayout {\n                     layout: tcx.intern_layout(LayoutS::scalar(cx, tag)),\n-                    ty: tag.value.to_ty(tcx),\n+                    ty: tag.primitive().to_ty(tcx),\n                 }\n             };\n \n@@ -3079,11 +3090,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             }\n \n             // Only pointer types handled below.\n-            if scalar.value != Pointer {\n-                return;\n-            }\n+            let Scalar::Initialized { value: Pointer, valid_range} = scalar else { return };\n \n-            if !scalar.valid_range.contains(0) {\n+            if !valid_range.contains(0) {\n                 attrs.set(ArgAttribute::NonNull);\n             }\n "}, {"sha": "0c7d2f7b4e5edb4b48e348ec381d1b707d48f0ae", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3298,7 +3298,9 @@ impl<'a> Resolver<'a> {\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 => {\n                 Some(path_res.base_res())\n             }\n-            PathResult::NonModule(..) | PathResult::Failed { .. } => None,\n+            PathResult::Module(ModuleOrUniformRoot::ExternPrelude)\n+            | PathResult::NonModule(..)\n+            | PathResult::Failed { .. } => None,\n             PathResult::Module(..) | PathResult::Indeterminate => unreachable!(),\n         }\n     }"}, {"sha": "cd54167aa7f82de2676554e2f38af0ae1f7c6d77", "filename": "compiler/rustc_target/src/abi/call/mips64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -6,7 +6,7 @@ use crate::abi::{self, HasDataLayout, Size, TyAbiInterface};\n fn extend_integer_width_mips<Ty>(arg: &mut ArgAbi<'_, Ty>, bits: u64) {\n     // Always sign extend u32 values on 64-bit mips\n     if let abi::Abi::Scalar(scalar) = arg.layout.abi {\n-        if let abi::Int(i, signed) = scalar.value {\n+        if let abi::Int(i, signed) = scalar.primitive() {\n             if !signed && i.size().bits() == 32 {\n                 if let PassMode::Direct(ref mut attrs) = arg.mode {\n                     attrs.ext(ArgExtension::Sext);\n@@ -25,7 +25,7 @@ where\n     C: HasDataLayout,\n {\n     match ret.layout.field(cx, i).abi {\n-        abi::Abi::Scalar(scalar) => match scalar.value {\n+        abi::Abi::Scalar(scalar) => match scalar.primitive() {\n             abi::F32 => Some(Reg::f32()),\n             abi::F64 => Some(Reg::f64()),\n             _ => None,\n@@ -110,7 +110,7 @@ where\n \n                 // We only care about aligned doubles\n                 if let abi::Abi::Scalar(scalar) = field.abi {\n-                    if let abi::F64 = scalar.value {\n+                    if let abi::F64 = scalar.primitive() {\n                         if offset.is_aligned(dl.f64_align.abi) {\n                             // Insert enough integers to cover [last_offset, offset)\n                             assert!(last_offset.is_aligned(dl.f64_align.abi));"}, {"sha": "ce564d1455bfc05d3ee3016f2f5e4255cd2454d9", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -348,7 +348,7 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n \n             // The primitive for this algorithm.\n             Abi::Scalar(scalar) => {\n-                let kind = match scalar.value {\n+                let kind = match scalar.primitive() {\n                     abi::Int(..) | abi::Pointer => RegKind::Integer,\n                     abi::F32 | abi::F64 => RegKind::Float,\n                 };\n@@ -482,7 +482,7 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n             Abi::Scalar(scalar) => PassMode::Direct(scalar_attrs(&layout, scalar, Size::ZERO)),\n             Abi::ScalarPair(a, b) => PassMode::Pair(\n                 scalar_attrs(&layout, a, Size::ZERO),\n-                scalar_attrs(&layout, b, a.value.size(cx).align_to(b.value.align(cx).abi)),\n+                scalar_attrs(&layout, b, a.size(cx).align_to(b.align(cx).abi)),\n             ),\n             Abi::Vector { .. } => PassMode::Direct(ArgAttributes::new()),\n             Abi::Aggregate { .. } => PassMode::Direct(ArgAttributes::new()),\n@@ -534,7 +534,7 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n     pub fn extend_integer_width_to(&mut self, bits: u64) {\n         // Only integers have signedness\n         if let Abi::Scalar(scalar) = self.layout.abi {\n-            if let abi::Int(i, signed) = scalar.value {\n+            if let abi::Int(i, signed) = scalar.primitive() {\n                 if i.size().bits() < bits {\n                     if let PassMode::Direct(ref mut attrs) = self.mode {\n                         if signed {"}, {"sha": "752b44f6434cf86daa144acd9abbf0e6a24e26fb", "filename": "compiler/rustc_target/src/abi/call/riscv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -44,7 +44,7 @@ where\n     Ty: TyAbiInterface<'a, C> + Copy,\n {\n     match arg_layout.abi {\n-        Abi::Scalar(scalar) => match scalar.value {\n+        Abi::Scalar(scalar) => match scalar.primitive() {\n             abi::Int(..) | abi::Pointer => {\n                 if arg_layout.size.bits() > xlen {\n                     return Err(CannotUseFpConv);\n@@ -298,7 +298,7 @@ fn classify_arg<'a, Ty, C>(\n \n fn extend_integer_width<'a, Ty>(arg: &mut ArgAbi<'a, Ty>, xlen: u64) {\n     if let Abi::Scalar(scalar) = arg.layout.abi {\n-        if let abi::Int(i, _) = scalar.value {\n+        if let abi::Int(i, _) = scalar.primitive() {\n             // 32-bit integers are always sign-extended\n             if i.size().bits() == 32 && xlen > 32 {\n                 if let PassMode::Direct(ref mut attrs) = arg.mode {"}, {"sha": "5a92ebdd9e8431908b85654c920dc3fad25e150a", "filename": "compiler/rustc_target/src/abi/call/sparc64.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -20,7 +20,7 @@ where\n {\n     let dl = cx.data_layout();\n \n-    if scalar.value != abi::F32 && scalar.value != abi::F64 {\n+    if !scalar.primitive().is_float() {\n         return data;\n     }\n \n@@ -56,7 +56,7 @@ where\n         return data;\n     }\n \n-    if scalar.value == abi::F32 {\n+    if scalar.primitive() == abi::F32 {\n         data.arg_attribute = ArgAttribute::InReg;\n         data.prefix[data.prefix_index] = Some(Reg::f32());\n         data.last_offset = offset + Reg::f32().size;\n@@ -79,17 +79,15 @@ where\n     C: HasDataLayout,\n {\n     data = arg_scalar(cx, &scalar1, offset, data);\n-    if scalar1.value == abi::F32 {\n-        offset += Reg::f32().size;\n-    } else if scalar2.value == abi::F64 {\n-        offset += Reg::f64().size;\n-    } else if let abi::Int(i, _signed) = scalar1.value {\n-        offset += i.size();\n-    } else if scalar1.value == abi::Pointer {\n-        offset = offset + Reg::i64().size;\n+    match (scalar1.primitive(), scalar2.primitive()) {\n+        (abi::F32, _) => offset += Reg::f32().size,\n+        (_, abi::F64) => offset += Reg::f64().size,\n+        (abi::Int(i, _signed), _) => offset += i.size(),\n+        (abi::Pointer, _) => offset += Reg::i64().size,\n+        _ => {}\n     }\n \n-    if (offset.raw % 4) != 0 && (scalar2.value == abi::F32 || scalar2.value == abi::F64) {\n+    if (offset.raw % 4) != 0 && scalar2.primitive().is_float() {\n         offset.raw += 4 - (offset.raw % 4);\n     }\n     data = arg_scalar(cx, &scalar2, offset, data);"}, {"sha": "a52e01a495a57e0d76c1a33aad089fb901ddc6d7", "filename": "compiler/rustc_target/src/abi/call/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -49,7 +49,7 @@ where\n         let mut c = match layout.abi {\n             Abi::Uninhabited => return Ok(()),\n \n-            Abi::Scalar(scalar) => match scalar.value {\n+            Abi::Scalar(scalar) => match scalar.primitive() {\n                 abi::Int(..) | abi::Pointer => Class::Int,\n                 abi::F32 | abi::F64 => Class::Sse,\n             },"}, {"sha": "c46726b767bf2290c5c70eff04e8c64e478d9227", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 80, "deletions": 20, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -752,6 +752,10 @@ pub struct WrappingRange {\n }\n \n impl WrappingRange {\n+    pub fn full(size: Size) -> Self {\n+        Self { start: 0, end: size.unsigned_int_max() }\n+    }\n+\n     /// Returns `true` if `v` is contained in the range.\n     #[inline(always)]\n     pub fn contains(&self, v: u128) -> bool {\n@@ -799,28 +803,82 @@ impl fmt::Debug for WrappingRange {\n /// Information about one scalar component of a Rust type.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n #[derive(HashStable_Generic)]\n-pub struct Scalar {\n-    pub value: Primitive,\n-\n-    // FIXME(eddyb) always use the shortest range, e.g., by finding\n-    // the largest space between two consecutive valid values and\n-    // taking everything else as the (shortest) valid range.\n-    pub valid_range: WrappingRange,\n+pub enum Scalar {\n+    Initialized {\n+        value: Primitive,\n+\n+        // FIXME(eddyb) always use the shortest range, e.g., by finding\n+        // the largest space between two consecutive valid values and\n+        // taking everything else as the (shortest) valid range.\n+        valid_range: WrappingRange,\n+    },\n+    Union {\n+        /// Even for unions, we need to use the correct registers for the kind of\n+        /// values inside the union, so we keep the `Primitive` type around. We\n+        /// also use it to compute the size of the scalar.\n+        /// However, unions never have niches and even allow undef,\n+        /// so there is no `valid_range`.\n+        value: Primitive,\n+    },\n }\n \n impl Scalar {\n     #[inline]\n     pub fn is_bool(&self) -> bool {\n         matches!(\n             self,\n-            Scalar { value: Int(I8, false), valid_range: WrappingRange { start: 0, end: 1 } }\n+            Scalar::Initialized {\n+                value: Int(I8, false),\n+                valid_range: WrappingRange { start: 0, end: 1 }\n+            }\n         )\n     }\n \n+    /// Get the primitive representation of this type, ignoring the valid range and whether the\n+    /// value is allowed to be undefined (due to being a union).\n+    pub fn primitive(&self) -> Primitive {\n+        match *self {\n+            Scalar::Initialized { value, .. } | Scalar::Union { value } => value,\n+        }\n+    }\n+\n+    pub fn align(self, cx: &impl HasDataLayout) -> AbiAndPrefAlign {\n+        self.primitive().align(cx)\n+    }\n+\n+    pub fn size(self, cx: &impl HasDataLayout) -> Size {\n+        self.primitive().size(cx)\n+    }\n+\n+    #[inline]\n+    pub fn to_union(&self) -> Self {\n+        Self::Union { value: self.primitive() }\n+    }\n+\n+    #[inline]\n+    pub fn valid_range(&self, cx: &impl HasDataLayout) -> WrappingRange {\n+        match *self {\n+            Scalar::Initialized { valid_range, .. } => valid_range,\n+            Scalar::Union { value } => WrappingRange::full(value.size(cx)),\n+        }\n+    }\n+\n+    #[inline]\n+    /// Allows the caller to mutate the valid range. This operation will panic if attempted on a union.\n+    pub fn valid_range_mut(&mut self) -> &mut WrappingRange {\n+        match self {\n+            Scalar::Initialized { valid_range, .. } => valid_range,\n+            Scalar::Union { .. } => panic!(\"cannot change the valid range of a union\"),\n+        }\n+    }\n+\n     /// Returns `true` if all possible numbers are valid, i.e `valid_range` covers the whole layout\n     #[inline]\n     pub fn is_always_valid<C: HasDataLayout>(&self, cx: &C) -> bool {\n-        self.valid_range.is_full_for(self.value.size(cx))\n+        match *self {\n+            Scalar::Initialized { valid_range, .. } => valid_range.is_full_for(self.size(cx)),\n+            Scalar::Union { .. } => true,\n+        }\n     }\n }\n \n@@ -988,7 +1046,7 @@ impl Abi {\n     #[inline]\n     pub fn is_signed(&self) -> bool {\n         match self {\n-            Abi::Scalar(scal) => match scal.value {\n+            Abi::Scalar(scal) => match scal.primitive() {\n                 Primitive::Int(_, signed) => signed,\n                 _ => false,\n             },\n@@ -1060,17 +1118,19 @@ pub enum TagEncoding {\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct Niche {\n     pub offset: Size,\n-    pub scalar: Scalar,\n+    pub value: Primitive,\n+    pub valid_range: WrappingRange,\n }\n \n impl Niche {\n     pub fn from_scalar<C: HasDataLayout>(cx: &C, offset: Size, scalar: Scalar) -> Option<Self> {\n-        let niche = Niche { offset, scalar };\n+        let Scalar::Initialized { value, valid_range } = scalar else { return None };\n+        let niche = Niche { offset, value, valid_range };\n         if niche.available(cx) > 0 { Some(niche) } else { None }\n     }\n \n     pub fn available<C: HasDataLayout>(&self, cx: &C) -> u128 {\n-        let Scalar { value, valid_range: v } = self.scalar;\n+        let Self { value, valid_range: v, .. } = *self;\n         let size = value.size(cx);\n         assert!(size.bits() <= 128);\n         let max_value = size.unsigned_int_max();\n@@ -1083,7 +1143,7 @@ impl Niche {\n     pub fn reserve<C: HasDataLayout>(&self, cx: &C, count: u128) -> Option<(u128, Scalar)> {\n         assert!(count > 0);\n \n-        let Scalar { value, valid_range: v } = self.scalar;\n+        let Self { value, valid_range: v, .. } = *self;\n         let size = value.size(cx);\n         assert!(size.bits() <= 128);\n         let max_value = size.unsigned_int_max();\n@@ -1107,12 +1167,12 @@ impl Niche {\n         // If niche zero is already reserved, the selection of bounds are of little interest.\n         let move_start = |v: WrappingRange| {\n             let start = v.start.wrapping_sub(count) & max_value;\n-            Some((start, Scalar { value, valid_range: v.with_start(start) }))\n+            Some((start, Scalar::Initialized { value, valid_range: v.with_start(start) }))\n         };\n         let move_end = |v: WrappingRange| {\n             let start = v.end.wrapping_add(1) & max_value;\n             let end = v.end.wrapping_add(count) & max_value;\n-            Some((start, Scalar { value, valid_range: v.with_end(end) }))\n+            Some((start, Scalar::Initialized { value, valid_range: v.with_end(end) }))\n         };\n         let distance_end_zero = max_value - v.end;\n         if v.start > v.end {\n@@ -1172,8 +1232,8 @@ pub struct LayoutS<'a> {\n impl<'a> LayoutS<'a> {\n     pub fn scalar<C: HasDataLayout>(cx: &C, scalar: Scalar) -> Self {\n         let largest_niche = Niche::from_scalar(cx, Size::ZERO, scalar);\n-        let size = scalar.value.size(cx);\n-        let align = scalar.value.align(cx);\n+        let size = scalar.size(cx);\n+        let align = scalar.align(cx);\n         LayoutS {\n             variants: Variants::Single { index: VariantIdx::new(0) },\n             fields: FieldsShape::Primitive,\n@@ -1325,7 +1385,7 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n         C: HasDataLayout,\n     {\n         match self.abi {\n-            Abi::Scalar(scalar) => scalar.value.is_float(),\n+            Abi::Scalar(scalar) => scalar.primitive().is_float(),\n             Abi::Aggregate { .. } => {\n                 if self.fields.count() == 1 && self.fields.offset(0).bytes() == 0 {\n                     self.field(cx, 0).is_single_fp_element(cx)\n@@ -1371,7 +1431,7 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n         let scalar_allows_raw_init = move |s: Scalar| -> bool {\n             if zero {\n                 // The range must contain 0.\n-                s.valid_range.contains(0)\n+                s.valid_range(cx).contains(0)\n             } else {\n                 // The range must include all values.\n                 s.is_always_valid(cx)"}, {"sha": "9998c5bb087e17bfe1a38fa4d6482077f9995589", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -540,6 +540,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         );\n                         self.note_version_mismatch(&mut err, &trait_ref);\n                         self.suggest_remove_await(&obligation, &mut err);\n+                        self.suggest_derive(&obligation, &mut err, trait_predicate);\n \n                         if Some(trait_ref.def_id()) == tcx.lang_items().try_trait() {\n                             self.suggest_await_before_try("}, {"sha": "31b92d52bebc8d08a8690b60d7d283ecb516e6f4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -208,6 +208,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 flags.push((sym::_Self, Some(\"&[]\".to_owned())));\n             }\n \n+            if self_ty.is_fn() {\n+                let fn_sig = self_ty.fn_sig(self.tcx);\n+                let shortname = match fn_sig.unsafety() {\n+                    hir::Unsafety::Normal => \"fn\",\n+                    hir::Unsafety::Unsafe => \"unsafe fn\",\n+                };\n+                flags.push((sym::_Self, Some(shortname.to_owned())));\n+            }\n+\n             if let ty::Array(aty, len) = self_ty.kind() {\n                 flags.push((sym::_Self, Some(\"[]\".to_owned())));\n                 flags.push((sym::_Self, Some(format!(\"[{}]\", aty))));"}, {"sha": "7c3f306717a69e24665a9b16bd19aaa587cccfe9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -189,6 +189,13 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     );\n+\n+    fn suggest_derive(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    );\n }\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n@@ -2651,6 +2658,68 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => {}\n         }\n     }\n+\n+    fn suggest_derive(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) {\n+        let Some(diagnostic_name) = self.tcx.get_diagnostic_name(trait_pred.def_id()) else {\n+            return;\n+        };\n+        let (adt, substs) = match trait_pred.skip_binder().self_ty().kind() {\n+            ty::Adt(adt, substs) if adt.did().is_local() => (adt, substs),\n+            _ => return,\n+        };\n+        let can_derive = {\n+            let is_derivable_trait = match diagnostic_name {\n+                sym::Default => !adt.is_enum(),\n+                sym::PartialEq | sym::PartialOrd => {\n+                    let rhs_ty = trait_pred.skip_binder().trait_ref.substs.type_at(1);\n+                    trait_pred.skip_binder().self_ty() == rhs_ty\n+                }\n+                sym::Eq | sym::Ord | sym::Clone | sym::Copy | sym::Hash | sym::Debug => true,\n+                _ => false,\n+            };\n+            is_derivable_trait &&\n+                // Ensure all fields impl the trait.\n+                adt.all_fields().all(|field| {\n+                    let field_ty = field.ty(self.tcx, substs);\n+                    let trait_substs = match diagnostic_name {\n+                        sym::PartialEq | sym::PartialOrd => {\n+                            self.tcx.mk_substs_trait(field_ty, &[field_ty.into()])\n+                        }\n+                        _ => self.tcx.mk_substs_trait(field_ty, &[]),\n+                    };\n+                    let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n+                        trait_ref: ty::TraitRef {\n+                            substs: trait_substs,\n+                            ..trait_pred.skip_binder().trait_ref\n+                        },\n+                        ..*tr\n+                    });\n+                    let field_obl = Obligation::new(\n+                        obligation.cause.clone(),\n+                        obligation.param_env,\n+                        trait_pred.to_predicate(self.tcx),\n+                    );\n+                    self.predicate_must_hold_modulo_regions(&field_obl)\n+                })\n+        };\n+        if can_derive {\n+            err.span_suggestion_verbose(\n+                self.tcx.def_span(adt.did()).shrink_to_lo(),\n+                &format!(\n+                    \"consider annotating `{}` with `#[derive({})]`\",\n+                    trait_pred.skip_binder().self_ty(),\n+                    diagnostic_name.to_string(),\n+                ),\n+                format!(\"#[derive({})]\\n\", diagnostic_name.to_string()),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n }\n \n /// Collect all the returned expressions within the input expression."}, {"sha": "83e535b3c32477f22d2523ecada2657c0cefa16c", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -40,6 +40,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_parentheses(err, expr);\n         self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected);\n+        self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n         self.report_closure_inferred_return_type(err, expected);\n@@ -630,7 +631,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     Applicability::MachineApplicable,\n                                     true,\n                                 ));\n-\n                     }\n                 }\n                 _ => {}"}, {"sha": "93a0900c7e80d93300c554ce9b3b9ecee62ba658", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,8 +2,6 @@ use super::FnCtxt;\n use crate::astconv::AstConv;\n \n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_span::{self, Span};\n-\n use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n@@ -13,12 +11,14 @@ use rustc_hir::{\n     WherePredicate,\n };\n use rustc_infer::infer::{self, TyCtxtInferExt};\n-\n+use rustc_infer::traits;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Binder, Ty};\n+use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::{self, Binder, ToPredicate, Ty};\n use rustc_span::symbol::{kw, sym};\n+use rustc_span::Span;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n \n-use rustc_middle::ty::subst::GenericArgKind;\n use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -846,4 +846,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let node = self.tcx.hir().get(id);\n         matches!(node, Node::Stmt(Stmt { kind: StmtKind::Local(..), .. }))\n     }\n+\n+    /// Suggest that `&T` was cloned instead of `T` because `T` does not implement `Clone`,\n+    /// which is a side-effect of autoref.\n+    pub(crate) fn note_type_is_not_clone(\n+        &self,\n+        diag: &mut Diagnostic,\n+        expected_ty: Ty<'tcx>,\n+        found_ty: Ty<'tcx>,\n+        expr: &hir::Expr<'_>,\n+    ) {\n+        let hir::ExprKind::MethodCall(segment, &[ref callee_expr], _) = expr.kind else { return; };\n+        let Some(clone_trait_did) = self.tcx.lang_items().clone_trait() else { return; };\n+        let ty::Ref(_, pointee_ty, _) = found_ty.kind() else { return };\n+        let results = self.typeck_results.borrow();\n+        // First, look for a `Clone::clone` call\n+        if segment.ident.name == sym::clone\n+            && results.type_dependent_def_id(expr.hir_id).map_or(\n+                false,\n+                |did| {\n+                    self.tcx.associated_item(did).container\n+                        == ty::AssocItemContainer::TraitContainer(clone_trait_did)\n+                },\n+            )\n+            // If that clone call hasn't already dereferenced the self type (i.e. don't give this\n+            // diagnostic in cases where we have `(&&T).clone()` and we expect `T`).\n+            && !results.expr_adjustments(callee_expr).iter().any(|adj| matches!(adj.kind, ty::adjustment::Adjust::Deref(..)))\n+            // Check that we're in fact trying to clone into the expected type\n+            && self.can_coerce(*pointee_ty, expected_ty)\n+            // And the expected type doesn't implement `Clone`\n+            && !self.predicate_must_hold_considering_regions(&traits::Obligation {\n+                cause: traits::ObligationCause::dummy(),\n+                param_env: self.param_env,\n+                recursion_depth: 0,\n+                predicate: ty::Binder::dummy(ty::TraitRef {\n+                    def_id: clone_trait_did,\n+                    substs: self.tcx.mk_substs([expected_ty.into()].iter()),\n+                })\n+                .without_const()\n+                .to_predicate(self.tcx),\n+            })\n+        {\n+            diag.span_note(\n+                callee_expr.span,\n+                &format!(\n+                    \"`{expected_ty}` does not implement `Clone`, so `{found_ty}` was cloned instead\"\n+                ),\n+            );\n+        }\n+    }\n }"}, {"sha": "27063952adbad4186204fb97b76f6388ab6f6d0d", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -991,6 +991,16 @@ extern \"rust-intrinsic\" {\n     /// let ptr_num_cast = ptr as *const i32 as usize;\n     /// ```\n     ///\n+    /// Note that using `transmute` to turn a pointer to a `usize` is (as noted above) [undefined\n+    /// behavior][ub] in `const` contexts. Also outside of consts, this operation might not behave\n+    /// as expected -- this is touching on many unspecified aspects of the Rust memory model.\n+    /// Depending on what the code is doing, the following alternatives are preferrable to\n+    /// pointer-to-integer transmutation:\n+    /// - If the code just wants to store data of arbitrary type in some buffer and needs to pick a\n+    ///   type for that buffer, it can use [`MaybeUninit`][mem::MaybeUninit].\n+    /// - If the code actually wants to work on the address the pointer points to, it can use `as`\n+    ///   casts or [`ptr.addr()`][pointer::addr].\n+    ///\n     /// Turning a `*mut T` into an `&mut T`:\n     ///\n     /// ```"}, {"sha": "d8206e789311481c97cf8c6f3339bd02759db883", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,8 +1,7 @@\n Panics the current thread.\n \n This allows a program to terminate immediately and provide feedback\n-to the caller of the program. `panic!` should be used when a program reaches\n-an unrecoverable state.\n+to the caller of the program.\n \n This macro is the perfect way to assert conditions in example code and in\n tests. `panic!` is closely tied with the `unwrap` method of both\n@@ -21,13 +20,25 @@ Inside the hook a panic can be accessed as a `&dyn Any + Send`,\n which contains either a `&str` or `String` for regular `panic!()` invocations.\n To panic with a value of another other type, [`panic_any`] can be used.\n \n-[`Result`] enum is often a better solution for recovering from errors than\n-using the `panic!` macro. This macro should be used to avoid proceeding using\n-incorrect values, such as from external sources. Detailed information about\n-error handling is found in the [book].\n-\n See also the macro [`compile_error!`], for raising errors during compilation.\n \n+# When to use `panic!` vs `Result`\n+\n+The Rust model of error handling groups errors into two major categories:\n+recoverable and unrecoverable errors. For a recoverable error, such as a file\n+not found error, it\u2019s reasonable to report the problem to the user and retry\n+the operation. Unrecoverable errors are always symptoms of bugs, like trying to\n+access a location beyond the end of an array.\n+\n+The Rust language and standard library provides `Result` and `panic!` as parts\n+of two complementary systems for representing, reporting, propagating, reacting\n+to, and discarding errors for in these two categories.\n+\n+The `panic!` macro is provided to represent unrecoverable errors, whereas the\n+`Result` enum is provided to represent recoverable errors. For more detailed\n+information about error handling check out the [book] or the [`std::result`]\n+module docs.\n+\n [ounwrap]: Option::unwrap\n [runwrap]: Result::unwrap\n [`std::panic::set_hook()`]: ../std/panic/fn.set_hook.html\n@@ -36,6 +47,7 @@ See also the macro [`compile_error!`], for raising errors during compilation.\n [`Any`]: crate::any::Any\n [`format!`]: ../std/macro.format.html\n [book]: ../book/ch09-00-error-handling.html\n+[`std::result`]: ../std/result/index.html\n \n # Current implementation\n "}, {"sha": "c5a194b7d0a41ee9435837ac4c7bd39498157c14", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -60,6 +60,12 @@\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{Fn}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `Fn<{Args}>` closure, found `{Self}`\"\n )]\n@@ -141,6 +147,12 @@ pub trait Fn<Args>: FnMut<Args> {\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnMut<{Args}>` closure, found `{Self}`\"\n )]\n@@ -214,6 +226,12 @@ pub trait FnMut<Args>: FnOnce<Args> {\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{FnOnce}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnOnce<{Args}>` closure, found `{Self}`\"\n )]"}, {"sha": "658c79896eb2e58747f20c5c165989dd86c98748", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 88, "deletions": 9, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,7 +10,7 @@ use crate::slice::from_raw_parts;\n use crate::sys::net::Socket;\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n-#[cfg(all(doc, not(target_os = \"linux\"), not(target_os = \"android\")))]\n+#[cfg(all(doc, not(target_os = \"linux\"), not(target_os = \"android\"), not(target_os = \"netbsd\")))]\n #[allow(non_camel_case_types)]\n mod libc {\n     pub use libc::c_int;\n@@ -177,13 +177,24 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n     }\n }\n \n+#[cfg(all(doc, not(target_os = \"android\"), not(target_os = \"linux\"), not(target_os = \"netbsd\")))]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+#[derive(Clone)]\n+pub struct SocketCred(());\n+\n /// Unix credential.\n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(target_os = \"netbsd\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+#[derive(Clone)]\n+pub struct SocketCred(libc::sockcred);\n+\n+#[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n impl SocketCred {\n     /// Create a Unix credential struct.\n     ///\n@@ -234,6 +245,61 @@ impl SocketCred {\n     }\n }\n \n+#[cfg(target_os = \"netbsd\")]\n+impl SocketCred {\n+    /// Create a Unix credential struct.\n+    ///\n+    /// PID, UID and GID is set to 0.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn new() -> SocketCred {\n+        SocketCred(libc::sockcred {\n+            sc_pid: 0,\n+            sc_uid: 0,\n+            sc_euid: 0,\n+            sc_gid: 0,\n+            sc_egid: 0,\n+            sc_ngroups: 0,\n+            sc_groups: [0u32; 1],\n+        })\n+    }\n+\n+    /// Set the PID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_pid(&mut self, pid: libc::pid_t) {\n+        self.0.sc_pid = pid;\n+    }\n+\n+    /// Get the current PID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_pid(&self) -> libc::pid_t {\n+        self.0.sc_pid\n+    }\n+\n+    /// Set the UID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_uid(&mut self, uid: libc::uid_t) {\n+        self.0.sc_uid = uid;\n+    }\n+\n+    /// Get the current UID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_uid(&self) -> libc::uid_t {\n+        self.0.sc_uid\n+    }\n+\n+    /// Set the GID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_gid(&mut self, gid: libc::gid_t) {\n+        self.0.sc_gid = gid;\n+    }\n+\n+    /// Get the current GID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_gid(&self) -> libc::gid_t {\n+        self.0.sc_gid\n+    }\n+}\n+\n /// This control message contains file descriptors.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_RIGHTS`.\n@@ -249,14 +315,22 @@ impl<'a> Iterator for ScmRights<'a> {\n     }\n }\n \n+#[cfg(all(doc, not(target_os = \"android\"), not(target_os = \"linux\"), not(target_os = \"netbsd\")))]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+pub struct ScmCredentials<'a>(AncillaryDataIter<'a, ()>);\n+\n /// This control message contains unix credentials.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_CREDENTIALS` or `SCM_CREDS`.\n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(target_os = \"netbsd\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::sockcred>);\n+\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -278,7 +352,7 @@ pub enum AncillaryError {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub enum AncillaryData<'a> {\n     ScmRights(ScmRights<'a>),\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     ScmCredentials(ScmCredentials<'a>),\n }\n \n@@ -300,8 +374,8 @@ impl<'a> AncillaryData<'a> {\n     /// # Safety\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n-    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDENTIALS`.\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDS`.\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n         let scm_credentials = ScmCredentials(ancillary_data_iter);\n@@ -320,6 +394,8 @@ impl<'a> AncillaryData<'a> {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n+                    #[cfg(target_os = \"netbsd\")]\n+                    libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n                     cmsg_type => {\n                         Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n                     }\n@@ -531,7 +607,7 @@ impl<'a> SocketAncillary<'a> {\n     /// Technically, that means this operation adds a control message with the level `SOL_SOCKET`\n     /// and type `SCM_CREDENTIALS` or `SCM_CREDS`.\n     ///\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n         self.truncated = false;\n@@ -540,7 +616,10 @@ impl<'a> SocketAncillary<'a> {\n             &mut self.length,\n             creds,\n             libc::SOL_SOCKET,\n+            #[cfg(not(target_os = \"netbsd\"))]\n             libc::SCM_CREDENTIALS,\n+            #[cfg(target_os = \"netbsd\")]\n+            libc::SCM_CREDS,\n         )\n     }\n "}, {"sha": "872058b36e62f198a4e2c5a0e63c4ed3c1f744e2", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -865,7 +865,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -877,7 +877,7 @@ impl UnixDatagram {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixDatagram::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "cd1aa01fa0f1986f7783ca34d11161f7b66920f7", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -415,7 +415,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -427,7 +427,7 @@ impl UnixStream {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixStream::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "f7a00676daaed7e7de26fbfd4a9ed1c4824287c3", "filename": "library/std/src/sync/condvar/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsync%2Fcondvar%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsync%2Fcondvar%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar%2Ftests.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -191,7 +191,7 @@ fn wait_timeout_wake() {\n \n #[test]\n #[should_panic]\n-#[cfg_attr(not(unix), ignore)]\n+#[cfg(all(unix, not(target_os = \"linux\"), not(target_os = \"android\")))]\n fn two_mutexes() {\n     let m = Arc::new(Mutex::new(()));\n     let m2 = m.clone();"}, {"sha": "c61d948fb601dbbff54a9ec3799ca1a1662ea264", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -4,31 +4,46 @@\n     all(target_os = \"emscripten\", target_feature = \"atomics\")\n ))]\n \n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-use crate::convert::TryInto;\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-use crate::ptr::null;\n use crate::sync::atomic::AtomicI32;\n use crate::time::Duration;\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n-    let timespec = timeout.and_then(|d| {\n-        Some(libc::timespec {\n-            // Sleep forever if the timeout is longer than fits in a timespec.\n-            tv_sec: d.as_secs().try_into().ok()?,\n-            // This conversion never truncates, as subsec_nanos is always <1e9.\n-            tv_nsec: d.subsec_nanos() as _,\n-        })\n-    });\n-    unsafe {\n-        libc::syscall(\n-            libc::SYS_futex,\n-            futex as *const AtomicI32,\n-            libc::FUTEX_WAIT | libc::FUTEX_PRIVATE_FLAG,\n-            expected,\n-            timespec.as_ref().map_or(null(), |d| d as *const libc::timespec),\n-        );\n+pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) -> bool {\n+    use super::time::Timespec;\n+    use crate::ptr::null;\n+    use crate::sync::atomic::Ordering::Relaxed;\n+\n+    // Calculate the timeout as an absolute timespec.\n+    //\n+    // Overflows are rounded up to an infinite timeout (None).\n+    let timespec =\n+        timeout.and_then(|d| Some(Timespec::now(libc::CLOCK_MONOTONIC).checked_add_duration(&d)?));\n+\n+    loop {\n+        // No need to wait if the value already changed.\n+        if futex.load(Relaxed) != expected {\n+            return true;\n+        }\n+\n+        // Use FUTEX_WAIT_BITSET rather than FUTEX_WAIT to be able to give an\n+        // absolute time rather than a relative time.\n+        let r = unsafe {\n+            libc::syscall(\n+                libc::SYS_futex,\n+                futex as *const AtomicI32,\n+                libc::FUTEX_WAIT_BITSET | libc::FUTEX_PRIVATE_FLAG,\n+                expected,\n+                timespec.as_ref().map_or(null(), |t| &t.t as *const libc::timespec),\n+                null::<u32>(), // This argument is unused for FUTEX_WAIT_BITSET.\n+                !0u32,         // A full bitmask, to make it behave like a regular FUTEX_WAIT.\n+            )\n+        };\n+\n+        match (r < 0).then(super::os::errno) {\n+            Some(libc::ETIMEDOUT) => return false,\n+            Some(libc::EINTR) => continue,\n+            _ => return true,\n+        }\n     }\n }\n \n@@ -65,6 +80,18 @@ pub fn futex_wake(futex: &AtomicI32) {\n     }\n }\n \n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+pub fn futex_wake_all(futex: &AtomicI32) {\n+    unsafe {\n+        libc::syscall(\n+            libc::SYS_futex,\n+            futex as *const AtomicI32,\n+            libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,\n+            i32::MAX,\n+        );\n+    }\n+}\n+\n #[cfg(target_os = \"emscripten\")]\n pub fn futex_wake(futex: &AtomicI32) {\n     extern \"C\" {"}, {"sha": "630351d0dc278e7fd283f4422745da28e2340d3e", "filename": "library/std/src/sys/unix/locks/futex.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,164 @@\n+use crate::sync::atomic::{\n+    AtomicI32,\n+    Ordering::{Acquire, Relaxed, Release},\n+};\n+use crate::sys::futex::{futex_wait, futex_wake, futex_wake_all};\n+use crate::time::Duration;\n+\n+pub type MovableMutex = Mutex;\n+pub type MovableCondvar = Condvar;\n+\n+pub struct Mutex {\n+    /// 0: unlocked\n+    /// 1: locked, no other threads waiting\n+    /// 2: locked, and other threads waiting (contended)\n+    futex: AtomicI32,\n+}\n+\n+impl Mutex {\n+    #[inline]\n+    pub const fn new() -> Self {\n+        Self { futex: AtomicI32::new(0) }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn init(&mut self) {}\n+\n+    #[inline]\n+    pub unsafe fn destroy(&self) {}\n+\n+    #[inline]\n+    pub unsafe fn try_lock(&self) -> bool {\n+        self.futex.compare_exchange(0, 1, Acquire, Relaxed).is_ok()\n+    }\n+\n+    #[inline]\n+    pub unsafe fn lock(&self) {\n+        if self.futex.compare_exchange(0, 1, Acquire, Relaxed).is_err() {\n+            self.lock_contended();\n+        }\n+    }\n+\n+    #[cold]\n+    fn lock_contended(&self) {\n+        // Spin first to speed things up if the lock is released quickly.\n+        let mut state = self.spin();\n+\n+        // If it's unlocked now, attempt to take the lock\n+        // without marking it as contended.\n+        if state == 0 {\n+            match self.futex.compare_exchange(0, 1, Acquire, Relaxed) {\n+                Ok(_) => return, // Locked!\n+                Err(s) => state = s,\n+            }\n+        }\n+\n+        loop {\n+            // Put the lock in contended state.\n+            // We avoid an unnecessary write if it as already set to 2,\n+            // to be friendlier for the caches.\n+            if state != 2 && self.futex.swap(2, Acquire) == 0 {\n+                // We changed it from 0 to 2, so we just succesfully locked it.\n+                return;\n+            }\n+\n+            // Wait for the futex to change state, assuming it is still 2.\n+            futex_wait(&self.futex, 2, None);\n+\n+            // Spin again after waking up.\n+            state = self.spin();\n+        }\n+    }\n+\n+    fn spin(&self) -> i32 {\n+        let mut spin = 100;\n+        loop {\n+            // We only use `load` (and not `swap` or `compare_exchange`)\n+            // while spinning, to be easier on the caches.\n+            let state = self.futex.load(Relaxed);\n+\n+            // We stop spinning when the mutex is unlocked (0),\n+            // but also when it's contended (2).\n+            if state != 1 || spin == 0 {\n+                return state;\n+            }\n+\n+            crate::hint::spin_loop();\n+            spin -= 1;\n+        }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn unlock(&self) {\n+        if self.futex.swap(0, Release) == 2 {\n+            // We only wake up one thread. When that thread locks the mutex, it\n+            // will mark the mutex as contended (2) (see lock_contended above),\n+            // which makes sure that any other waiting threads will also be\n+            // woken up eventually.\n+            self.wake();\n+        }\n+    }\n+\n+    #[cold]\n+    fn wake(&self) {\n+        futex_wake(&self.futex);\n+    }\n+}\n+\n+pub struct Condvar {\n+    // The value of this atomic is simply incremented on every notification.\n+    // This is used by `.wait()` to not miss any notifications after\n+    // unlocking the mutex and before waiting for notifications.\n+    futex: AtomicI32,\n+}\n+\n+impl Condvar {\n+    #[inline]\n+    pub const fn new() -> Self {\n+        Self { futex: AtomicI32::new(0) }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn init(&mut self) {}\n+\n+    #[inline]\n+    pub unsafe fn destroy(&self) {}\n+\n+    // All the memory orderings here are `Relaxed`,\n+    // because synchronization is done by unlocking and locking the mutex.\n+\n+    pub unsafe fn notify_one(&self) {\n+        self.futex.fetch_add(1, Relaxed);\n+        futex_wake(&self.futex);\n+    }\n+\n+    pub unsafe fn notify_all(&self) {\n+        self.futex.fetch_add(1, Relaxed);\n+        futex_wake_all(&self.futex);\n+    }\n+\n+    pub unsafe fn wait(&self, mutex: &Mutex) {\n+        self.wait_optional_timeout(mutex, None);\n+    }\n+\n+    pub unsafe fn wait_timeout(&self, mutex: &Mutex, timeout: Duration) -> bool {\n+        self.wait_optional_timeout(mutex, Some(timeout))\n+    }\n+\n+    unsafe fn wait_optional_timeout(&self, mutex: &Mutex, timeout: Option<Duration>) -> bool {\n+        // Examine the notification counter _before_ we unlock the mutex.\n+        let futex_value = self.futex.load(Relaxed);\n+\n+        // Unlock the mutex before going to sleep.\n+        mutex.unlock();\n+\n+        // Wait, but only if there hasn't been any\n+        // notification since we unlocked the mutex.\n+        let r = futex_wait(&self.futex, futex_value, timeout);\n+\n+        // Lock the mutex again.\n+        mutex.lock();\n+\n+        r\n+    }\n+}"}, {"sha": "30e9f407eec4cecaa73b77ca164d48bd3b580ea4", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,8 +1,24 @@\n-mod pthread_condvar;\n-mod pthread_mutex;\n-mod pthread_remutex;\n-mod pthread_rwlock;\n-pub use pthread_condvar::{Condvar, MovableCondvar};\n-pub use pthread_mutex::{MovableMutex, Mutex};\n-pub use pthread_remutex::ReentrantMutex;\n-pub use pthread_rwlock::{MovableRWLock, RWLock};\n+cfg_if::cfg_if! {\n+    if #[cfg(any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+    ))] {\n+        mod futex;\n+        #[allow(dead_code)]\n+        mod pthread_mutex; // Only used for PthreadMutexAttr, needed by pthread_remutex.\n+        mod pthread_remutex; // FIXME: Implement this using a futex\n+        mod pthread_rwlock; // FIXME: Implement this using a futex\n+        pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n+        pub use pthread_remutex::ReentrantMutex;\n+        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+    } else {\n+        mod pthread_mutex;\n+        mod pthread_remutex;\n+        mod pthread_rwlock;\n+        mod pthread_condvar;\n+        pub use pthread_mutex::{Mutex, MovableMutex};\n+        pub use pthread_remutex::ReentrantMutex;\n+        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+        pub use pthread_condvar::{Condvar, MovableCondvar};\n+    }\n+}"}, {"sha": "9bf9607a63e4d1b35f5209a86154e8cd51681e7b", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -419,6 +419,17 @@ impl Socket {\n         Ok(passcred != 0)\n     }\n \n+    #[cfg(target_os = \"netbsd\")]\n+    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n+        setsockopt(self, 0 as libc::c_int, libc::LOCAL_CREDS, passcred as libc::c_int)\n+    }\n+\n+    #[cfg(target_os = \"netbsd\")]\n+    pub fn passcred(&self) -> io::Result<bool> {\n+        let passcred: libc::c_int = getsockopt(self, 0 as libc::c_int, libc::LOCAL_CREDS)?;\n+        Ok(passcred != 0)\n+    }\n+\n     #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;"}, {"sha": "498c94d0cdcba2bad36d2f203ccf3580d0704dd0", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,16 +9,16 @@ use crate::convert::TryInto;\n const NSEC_PER_SEC: u64 = 1_000_000_000;\n \n #[derive(Copy, Clone)]\n-struct Timespec {\n-    t: libc::timespec,\n+pub(in crate::sys::unix) struct Timespec {\n+    pub t: libc::timespec,\n }\n \n impl Timespec {\n     const fn zero() -> Timespec {\n         Timespec { t: libc::timespec { tv_sec: 0, tv_nsec: 0 } }\n     }\n \n-    fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {\n+    pub fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {\n         if self >= other {\n             // NOTE(eddyb) two aspects of this `if`-`else` are required for LLVM\n             // to optimize it into a branchless form (see also #75545):\n@@ -51,7 +51,7 @@ impl Timespec {\n         }\n     }\n \n-    fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n@@ -68,7 +68,7 @@ impl Timespec {\n         Some(Timespec { t: libc::timespec { tv_sec: secs, tv_nsec: nsec as _ } })\n     }\n \n-    fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n@@ -266,6 +266,7 @@ mod inner {\n #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n mod inner {\n     use crate::fmt;\n+    use crate::mem::MaybeUninit;\n     use crate::sys::cvt;\n     use crate::time::Duration;\n \n@@ -285,7 +286,7 @@ mod inner {\n \n     impl Instant {\n         pub fn now() -> Instant {\n-            Instant { t: now(libc::CLOCK_MONOTONIC) }\n+            Instant { t: Timespec::now(libc::CLOCK_MONOTONIC) }\n         }\n \n         pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n@@ -312,7 +313,7 @@ mod inner {\n \n     impl SystemTime {\n         pub fn now() -> SystemTime {\n-            SystemTime { t: now(libc::CLOCK_REALTIME) }\n+            SystemTime { t: Timespec::now(libc::CLOCK_REALTIME) }\n         }\n \n         pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {\n@@ -348,9 +349,11 @@ mod inner {\n     #[cfg(any(target_os = \"dragonfly\", target_os = \"espidf\"))]\n     pub type clock_t = libc::c_ulong;\n \n-    fn now(clock: clock_t) -> Timespec {\n-        let mut t = Timespec { t: libc::timespec { tv_sec: 0, tv_nsec: 0 } };\n-        cvt(unsafe { libc::clock_gettime(clock, &mut t.t) }).unwrap();\n-        t\n+    impl Timespec {\n+        pub fn now(clock: clock_t) -> Timespec {\n+            let mut t = MaybeUninit::uninit();\n+            cvt(unsafe { libc::clock_gettime(clock, t.as_mut_ptr()) }).unwrap();\n+            Timespec { t: unsafe { t.assume_init() } }\n+        }\n     }\n }"}, {"sha": "99d7475da33966daae1326fe155ae97ce18323b8", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1769,7 +1769,7 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n \n                     let tag_size = if let TagEncoding::Niche { .. } = tag_encoding {\n                         0\n-                    } else if let Primitive::Int(i, _) = tag.value {\n+                    } else if let Primitive::Int(i, _) = tag.primitive() {\n                         i.size().bytes()\n                     } else {\n                         span_bug!(tcx.def_span(ty_def_id), \"tag is neither niche nor int\")"}, {"sha": "cf6d8a52a766897258d39abe33a75cfc2f65275f", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 51, "deletions": 37, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,56 +3,70 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:15:11: 15:11\n-      let _1: main::InvalidChar;           // in scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n-      let mut _3: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:28:25: 28:46\n-      let mut _5: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:35:35: 35:56\n+      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n+      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:21:34: 21:63\n+      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:28:25: 28:59\n+      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:28:34: 28:55\n+      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:35:35: 35:73\n+      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:35:44: 35:65\n       scope 1 {\n           debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:21:9: 21:22\n-          let _2: [main::InvalidTag; 1];   // in scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n-          scope 2 {\n-              debug _invalid_tag => _2;    // in scope 2 at $DIR/invalid_constant.rs:28:9: 28:21\n-              let _4: [main::NoVariants; 1]; // in scope 2 at $DIR/invalid_constant.rs:35:9: 35:31\n-              scope 3 {\n-                  debug _enum_without_variants => _4; // in scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n-                  let _6: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 3 at $DIR/invalid_constant.rs:39:9: 39:22\n-                  scope 4 {\n-                      debug _non_utf8_str => _6; // in scope 4 at $DIR/invalid_constant.rs:39:9: 39:22\n+          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n+          scope 3 {\n+              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:28:9: 28:21\n+              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n+              scope 5 {\n+                  debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:35:9: 35:31\n+                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:39:9: 39:22\n+                  scope 7 {\n+                      debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:39:9: 39:22\n                   }\n               }\n+              scope 6 {\n+              }\n+          }\n+          scope 4 {\n           }\n       }\n+      scope 2 {\n+      }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n--         _1 = const { InvalidChar { int: 0x110001 } }; // scope 0 at $DIR/invalid_constant.rs:21:25: 21:64\n-+         _1 = const InvalidChar { int: 1114113_u32, chr: {transmute(0x00110001): char} }; // scope 0 at $DIR/invalid_constant.rs:21:25: 21:64\n-                                           // mir::Constant\n-                                           // + span: $DIR/invalid_constant.rs:21:25: 21:64\n--                                          // + literal: Const { ty: InvalidChar, val: Unevaluated(main::{constant#0}, [main::InvalidChar], None) }\n-+                                          // + literal: Const { ty: InvalidChar, val: Value(Scalar(0x00110001)) }\n-          StorageLive(_2);                 // scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n-          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:25: 28:46\n-          (_3.0: u32) = const 4_u32;       // scope 1 at $DIR/invalid_constant.rs:28:25: 28:46\n--         _2 = [move _3];                  // scope 1 at $DIR/invalid_constant.rs:28:24: 28:47\n-+         _2 = [const InvalidTag { int: 4_u32, e: Scalar(0x00000004): E }]; // scope 1 at $DIR/invalid_constant.rs:28:24: 28:47\n+          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n+          (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n+-         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n++         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n+          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:21:69: 21:70\n+          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n+          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:28:25: 28:59\n+          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n+          (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n+-         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:28:34: 28:57\n+-         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:28:24: 28:60\n++         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:28:34: 28:57\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:28:24: 28:47\n-+                                          // + literal: Const { ty: InvalidTag, val: Value(Scalar(0x00000004)) }\n-          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:46: 28:47\n-          StorageLive(_4);                 // scope 2 at $DIR/invalid_constant.rs:35:9: 35:31\n-          StorageLive(_5);                 // scope 2 at $DIR/invalid_constant.rs:35:35: 35:56\n-          (_5.0: u32) = const 0_u32;       // scope 2 at $DIR/invalid_constant.rs:35:35: 35:56\n--         _4 = [move _5];                  // scope 2 at $DIR/invalid_constant.rs:35:34: 35:57\n-+         _4 = [const NoVariants { int: 0_u32, empty: Scalar(<ZST>): Empty }]; // scope 2 at $DIR/invalid_constant.rs:35:34: 35:57\n++                                          // + span: $DIR/invalid_constant.rs:28:34: 28:57\n++                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n++         _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:28:24: 28:60\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:35:34: 35:57\n-+                                          // + literal: Const { ty: NoVariants, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_5);                 // scope 2 at $DIR/invalid_constant.rs:35:56: 35:57\n-          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:39:9: 39:22\n++                                          // + span: $DIR/invalid_constant.rs:28:24: 28:60\n++                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n+          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:28:59: 28:60\n+          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:28:60: 28:61\n+          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n+          StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:35:35: 35:73\n+          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n+          (_8.0: u32) = const 0_u32;       // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n+          nop;                             // scope 6 at $DIR/invalid_constant.rs:35:44: 35:71\n+          nop;                             // scope 3 at $DIR/invalid_constant.rs:35:34: 35:74\n+          StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:35:73: 35:74\n+          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:35:74: 35:75\n+          StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:39:9: 39:22\n           nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 42:2\n+          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:42:1: 42:2\n           StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:42:1: 42:2\n-          StorageDead(_4);                 // scope 2 at $DIR/invalid_constant.rs:42:1: 42:2\n-          StorageDead(_2);                 // scope 1 at $DIR/invalid_constant.rs:42:1: 42:2\n+          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:42:1: 42:2\n           StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:42:1: 42:2\n           return;                          // scope 0 at $DIR/invalid_constant.rs:42:2: 42:2\n       }"}, {"sha": "0337a7ca851183658374fbc4af09191ba23ea6eb", "filename": "src/test/mir-opt/const_prop/invalid_constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -18,21 +18,21 @@ fn main() {\n         int: u32,\n         chr: char,\n     }\n-    let _invalid_char = const { InvalidChar { int: 0x110001 } };\n+    let _invalid_char = unsafe { InvalidChar { int: 0x110001 }.chr };\n \n     // An enum with an invalid tag. Regression test for #93688.\n     union InvalidTag {\n         int: u32,\n         e: E,\n     }\n-    let _invalid_tag = [InvalidTag { int: 4 }];\n+    let _invalid_tag = [unsafe { InvalidTag { int: 4 }.e }];\n \n     // An enum without variants. Regression test for #94073.\n     union NoVariants {\n         int: u32,\n         empty: Empty,\n     }\n-    let _enum_without_variants = [NoVariants { int: 0 }];\n+    let _enum_without_variants = [unsafe { NoVariants { int: 0 }.empty }];\n \n     // A non-UTF-8 string slice. Regression test for #75763 and #78520.\n     struct Str<const S: &'static str>;"}, {"sha": "cc7a5fa1c7372a32fd97f51c9c7093e805ae9352", "filename": "src/test/rustdoc-ui/intra-doc/global-path.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,8 @@\n+// Doc link path with empty prefix that resolves to \"extern prelude\" instead of a module.\n+\n+// check-pass\n+// edition:2018\n+\n+/// [::Unresolved]\n+//~^ WARN unresolved link to `::Unresolved`\n+pub struct Item;"}, {"sha": "02379cd6cdf694a9cf7aedb4f8cea81a67ced39b", "filename": "src/test/rustdoc-ui/intra-doc/global-path.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fglobal-path.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,10 @@\n+warning: unresolved link to `::Unresolved`\n+  --> $DIR/global-path.rs:6:6\n+   |\n+LL | /// [::Unresolved]\n+   |      ^^^^^^^^^^^^ no item named `` in scope\n+   |\n+   = note: `#[warn(rustdoc::broken_intra_doc_links)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "eba1a8e2278b7d20b11c95c26f2f57c896395891", "filename": "src/test/ui/array-slice-vec/repeat_empty_ok.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -5,6 +5,10 @@ LL |     let headers = [Header{value: &[]}; 128];\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n   --> $DIR/repeat_empty_ok.rs:13:19\n@@ -13,6 +17,10 @@ LL |     let headers = [Header{value: &[0]}; 128];\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "43541c5dfbcb54e4f9a39a62fc49a32dbacf670f", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `Tr::Ty`\n    |\n LL |     type Ty: Clone = NotClone;\n    |              ^^^^^ required by this bound in `Tr::Ty`\n+help: consider annotating `NotClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:22:15\n@@ -24,6 +28,10 @@ LL |     Self::Ty: Clone,\n LL | {\n LL |     type Ty = NotClone;\n    |          -- required by a bound in this\n+help: consider annotating `NotClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:28:23"}, {"sha": "0edc9a556b7f6090402256492f1069d6fe7aad27", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `Add`\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n LL | pub trait Add<Rhs = Self> {\n-   |               ^^^ required by this bound in `Add`\n+   |               ^^^^^^^^^^ required by this bound in `Add`\n help: consider further restricting `Self`\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + Sized {}"}, {"sha": "0d12a948c68bdbc13a597f7a60a7c000e2ce6481", "filename": "src/test/ui/async-await/issues/issue-78654.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -5,10 +5,10 @@ LL | impl<const H: feature> Foo {\n    |               ^^^^^^^ not a type\n \n error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-78654.rs:9:12\n+  --> $DIR/issue-78654.rs:9:6\n    |\n LL | impl<const H: feature> Foo {\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "0d12a948c68bdbc13a597f7a60a7c000e2ce6481", "filename": "src/test/ui/async-await/issues/issue-78654.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -5,10 +5,10 @@ LL | impl<const H: feature> Foo {\n    |               ^^^^^^^ not a type\n \n error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-78654.rs:9:12\n+  --> $DIR/issue-78654.rs:9:6\n    |\n LL | impl<const H: feature> Foo {\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "bd095c2d83d8a186cb49ed9e2a36514e251883df", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,11 +2,12 @@ error[E0277]: expected a `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-i\n   --> $DIR/coerce-unsafe-to-closure.rs:2:44\n    |\n LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n-   |                                        --- ^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   |                                        --- ^^^^^^^^^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |                                        |\n    |                                        required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |"}, {"sha": "4b2b05742538b35cea80d4c063fa720b68b38c85", "filename": "src/test/ui/const-generics/defaults/default-on-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,8 +1,8 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default-on-impl.rs:3:12\n+  --> $DIR/default-on-impl.rs:3:6\n    |\n LL | impl<const N: usize = 1> Foo<N> {}\n-   |            ^\n+   |      ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c587a7e153fe38075257b122600db093f9414bb9", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-76595.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,7 +10,7 @@ note: function defined here, with 2 generic parameters: `T`, `P`\n   --> $DIR/issue-76595.rs:10:4\n    |\n LL | fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n-   |    ^^^^ -        -\n+   |    ^^^^ -  --------------\n help: add missing generic argument\n    |\n LL |     test::<2, P>();"}, {"sha": "a845454f762cf444a06e719ff8bfa4542634f9e1", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,7 +10,7 @@ note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:1:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n-   |    ^^^       -               -\n+   |    ^^^ --------------  --------------\n help: add missing generic argument\n    |\n LL |     foo::<0, Y>();\n@@ -28,7 +28,7 @@ note: function defined here, with 2 generic parameters: `X`, `Y`\n   --> $DIR/incorrect-number-of-const-args.rs:1:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n-   |    ^^^       -               -\n+   |    ^^^ --------------  --------------\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca9eb801dfce77962043f914d32843ace3a708f8", "filename": "src/test/ui/const-generics/issues/issue-68366.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,17 +1,17 @@\n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:11:13\n+  --> $DIR/issue-68366.rs:11:7\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n-   |             ^ unconstrained const parameter\n+   |       ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:17:12\n+  --> $DIR/issue-68366.rs:17:6\n    |\n LL | impl<const N: usize> Foo {}\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "3740ced90b1d772ab2bc7e808677708bc0ee2cc1", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,19 +8,19 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:11:13\n+  --> $DIR/issue-68366.rs:11:7\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n-   |             ^ unconstrained const parameter\n+   |       ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:17:12\n+  --> $DIR/issue-68366.rs:17:6\n    |\n LL | impl<const N: usize> Foo {}\n-   |            ^ unconstrained const parameter\n+   |      ^^^^^^^^^^^^^^ unconstrained const parameter\n    |\n    = note: expressions using a const parameter must map each value to a distinct output value\n    = note: proving the result of expressions other than the parameter are unique is not supported"}, {"sha": "f7b8d80eeca7f03c73d7823f18d3e371b24b8a26", "filename": "src/test/ui/const-generics/issues/issue-86820.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,14 +1,14 @@\n error[E0053]: method `bit` has an incompatible const parameter type for trait\n-  --> $DIR/issue-86820.rs:17:18\n+  --> $DIR/issue-86820.rs:17:12\n    |\n LL |     fn bit<const I : usize>(self) -> bool {\n-   |                  ^\n+   |            ^^^^^^^^^^^^^^^\n    |\n note: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n-  --> $DIR/issue-86820.rs:12:18\n+  --> $DIR/issue-86820.rs:12:12\n    |\n LL |     fn bit<const I : u8>(self) -> bool;\n-   |                  ^\n+   |            ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "dedad2880c9e86ad3df490b9b833f7a95f1fd3d2", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,8 +1,8 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default_function_param.rs:3:14\n+  --> $DIR/default_function_param.rs:3:8\n    |\n LL | fn foo<const SIZE: usize = 5usize>() {}\n-   |              ^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "acfdde8e1a01f16a45ee76e7f11e15ce22f96d84", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -17,7 +17,7 @@ note: trait defined here, with 1 generic parameter: `N`\n   --> $DIR/issue-89013-no-kw.rs:1:7\n    |\n LL | trait Foo<const N: usize> {\n-   |       ^^^       -\n+   |       ^^^ --------------\n help: add missing generic argument\n    |\n LL | impl Foo<N, N = 3> for Bar {"}, {"sha": "d2d58c496df2c898482e28c7c2ada6297ae2e519", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -29,7 +29,7 @@ note: trait defined here, with 1 generic parameter: `N`\n   --> $DIR/issue-89013.rs:1:7\n    |\n LL | trait Foo<const N: usize> {\n-   |       ^^^       -\n+   |       ^^^ --------------\n help: add missing generic argument\n    |\n LL | impl Foo<N, N = const 3> for Bar {"}, {"sha": "46546eada7aacc613d7617d826928468ab1fe99a", "filename": "src/test/ui/consts/issue-69488.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconsts%2Fissue-69488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconsts%2Fissue-69488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69488.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,34 @@\n+// run-pass\n+\n+#![feature(const_ptr_write)]\n+#![feature(const_mut_refs)]\n+\n+// Or, equivalently: `MaybeUninit`.\n+pub union BagOfBits<T: Copy> {\n+    uninit: (),\n+    _storage: T,\n+}\n+\n+pub const fn make_1u8_bag<T: Copy>() -> BagOfBits<T> {\n+    assert!(core::mem::size_of::<T>() >= 1);\n+    let mut bag = BagOfBits { uninit: () };\n+    unsafe { (&mut bag as *mut _ as *mut u8).write(1); };\n+    bag\n+}\n+\n+pub fn check_bag<T: Copy>(bag: &BagOfBits<T>) {\n+    let val = unsafe { (bag as *const _ as *const u8).read() };\n+    assert_eq!(val, 1);\n+}\n+\n+fn main() {\n+    check_bag(&make_1u8_bag::<[usize; 1]>()); // Fine\n+    check_bag(&make_1u8_bag::<usize>()); // Fine\n+\n+    const CONST_ARRAY_BAG: BagOfBits<[usize; 1]> = make_1u8_bag();\n+    check_bag(&CONST_ARRAY_BAG); // Fine.\n+    const CONST_USIZE_BAG: BagOfBits<usize> = make_1u8_bag();\n+\n+    // Used to panic since CTFE would make the entire `BagOfBits<usize>` uninit\n+    check_bag(&CONST_USIZE_BAG);\n+}"}, {"sha": "de9ff730b66f386aa5bdd5a9f328d32d99941ac2", "filename": "src/test/ui/consts/issue-94371.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconsts%2Fissue-94371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fconsts%2Fissue-94371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94371.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(const_swap)]\n+#![feature(const_mut_refs)]\n+\n+#[repr(C)]\n+struct Demo(u64, bool, u64, u32, u64, u64, u64);\n+\n+const C: (Demo, Demo) = {\n+    let mut x = Demo(1, true, 3, 4, 5, 6, 7);\n+    let mut y = Demo(10, false, 12, 13, 14, 15, 16);\n+    std::mem::swap(&mut x, &mut y);\n+    (x, y)\n+};\n+\n+fn main() {}"}, {"sha": "7326324b03ccacf6a433c6f99468a3365589318c", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "229a4f7d9ff9494c50ca3e2c2e29cb8310c6b880", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |      Error\n    |      ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "96bad9edad94c4a9e51c4e47125f900a73747a41", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b61341e57e671cd0be5603bbc9d8526d94b3e272", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "58a64a4f53bfc54b97e6f833e63737e2b30fe355", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,6 +10,10 @@ LL |      x: Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e9bb5f960b04a90f77d042d9b50f18257a8500f1", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,6 +10,10 @@ LL |      Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0a117c060ff383bef671c4840f4e39767e851b65", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,6 +10,10 @@ LL |     x: Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "f2e90a418455fbfca99b96bddcfac1d86f0b9967", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,6 +10,10 @@ LL |     Error\n    = help: the trait `Debug` is not implemented for `Error`\n    = note: add `#[derive(Debug)]` to `Error` or manually `impl Debug for Error`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "d4affd535eef4ea72313be6de5cbd25f0c32a93f", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Default` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "129351f599899ffab26414f77561697ca05aaaab", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Default` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e3fb234b96e4153b51ade0849d30f6a36c2a3a97", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4e10c3f69e735a5df6d17b558f156aad35661078", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "bfdab052a2ed42167c6d6398d2dbbc5b8e11cba4", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "26b8be343336b95ac9f7947ccf639103d01ef928", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "fe5e0e96ac7af1290546d0ce0d52c326678d42b0", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "99785b87ca83eef99d82a6b72095835e10f3a858", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |      Error\n    |      ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4db83dd130010c7996ee18a94ecd98e04d110622", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "8660c97e69e1c47106fe3237bbbe338e4c83854a", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "6e48332c25067c5b5249fb4f85c904b21352661d", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b05cf0a057b233cb309e4e1c0ea4557b3f1a60d9", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |      Error\n    |      ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c4def34a83dad2166a990cda9db59f4123d84e60", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "a3b288d0fb9cc2bc8af3d57a77cef5139efa5bd5", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL |     Error\n    |     ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "2d19aaf68afb1375889e113860babea228a42937", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ LL |      x: Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "dfbb8060ffa12d4568cf96b81fb91e3892caccf6", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ LL |      Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ba63d86e8e46c53bbab26e11a9ff6237c4922db7", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ LL |     x: Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "7686ed8064e7986ee4e4226c5d5e1c3afd94f54f", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ LL |     Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Error` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialOrd)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "451058cd0ee01b7be0c341ebfab35e309a173766", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -48,6 +48,10 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NoCloneOrEq`\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `NoCloneOrEq` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "428be79617d7feebf7b1a147b16e203f8801c092", "filename": "src/test/ui/error-codes/E0277-3.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,8 @@\n+fn foo<T: PartialEq>(_: T) {}\n+\n+struct S;\n+\n+fn main() {\n+    foo(S);\n+    //~^ ERROR can't compare `S` with `S`\n+}"}, {"sha": "0127e1ccc81ec0e64fd06b8766ab4682df3bb643", "filename": "src/test/ui/error-codes/E0277-3.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-3.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: can't compare `S` with `S`\n+  --> $DIR/E0277-3.rs:6:9\n+   |\n+LL |     foo(S);\n+   |     --- ^ no implementation for `S == S`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `PartialEq` is not implemented for `S`\n+note: required by a bound in `foo`\n+  --> $DIR/E0277-3.rs:1:11\n+   |\n+LL | fn foo<T: PartialEq>(_: T) {}\n+   |           ^^^^^^^^^ required by this bound in `foo`\n+help: consider annotating `S` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a7d5c7ac39b09b718afc2f7d5ba0873b2993bee2", "filename": "src/test/ui/feature-gates/feature-gate-default_type_parameter_fallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,7 +2,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:3:8\n    |\n LL | fn avg<T=i32>(_: T) {}\n-   |        ^\n+   |        ^^^^^\n    |\n    = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -12,7 +12,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/feature-gate-default_type_parameter_fallback.rs:8:6\n    |\n LL | impl<T=i32> S<T> {}\n-   |      ^\n+   |      ^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>"}, {"sha": "c6fa02cb9a6b45d2e30aa2f55c12c4c3143a190c", "filename": "src/test/ui/generic-associated-types/issue-87429-associated-type-default.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,6 +10,10 @@ note: required by a bound in `Family2::Member`\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family2::Member`\n+help: consider annotating `Foo` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "015e0c7792fecbe936298cf21d28d2d4e2b47ae7", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -20,6 +20,10 @@ note: required by a bound in `Family::Member`\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family::Member`\n+help: consider annotating `Foo` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "fe9b670da799c451196921466dfe67884e8ce115", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,7 +10,7 @@ note: struct defined here, with at most 2 generic parameters: `T`, `A`\n   --> $DIR/generic-impl-more-params-with-defaults.rs:5:8\n    |\n LL | struct Vec<T, A = Heap>(\n-   |        ^^^ -  -\n+   |        ^^^ -  --------\n \n error: aborting due to previous error\n "}, {"sha": "7f0198f0e842414932b260c27585e9c65375f20e", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,7 +10,7 @@ note: struct defined here, with at most 2 generic parameters: `T`, `A`\n   --> $DIR/generic-type-more-params-with-defaults.rs:5:8\n    |\n LL | struct Vec<T, A = Heap>(\n-   |        ^^^ -  -\n+   |        ^^^ -  --------\n \n error: aborting due to previous error\n "}, {"sha": "6791182238c72d978041c2bb39edbdd1e69a6c5c", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `Tsized`\n   --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:14\n    |\n LL | trait Tsized<P: Sized = [Self]> {}\n-   |              ^ required by this bound in `Tsized`\n+   |              ^^^^^^^^^^^^^^^^^ required by this bound in `Tsized`\n \n error: aborting due to previous error\n "}, {"sha": "3b0834a5f51b271b10445bb67d466cc19b0ed5c6", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -287,7 +287,7 @@ note: struct defined here, with at most 3 generic parameters: `A`, `B`, `C`\n   --> $DIR/wrong-number-of-args.rs:78:12\n    |\n LL |     struct Ty<A, B, C = &'static str>;\n-   |            ^^ -  -  -\n+   |            ^^ -  -  ----------------\n \n error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:96:14\n@@ -922,7 +922,7 @@ note: struct defined here, with at most 3 generic parameters: `K`, `V`, `S`\n   --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n    |\n LL | pub struct HashMap<K, V, S = RandomState> {\n-   |            ^^^^^^^ -  -  -\n+   |            ^^^^^^^ -  -  ---------------\n \n error[E0107]: this struct takes at least 2 generic arguments but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:319:18"}, {"sha": "58a2f79efb4c643e5f0cecdfbbb25faf395064b1", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -293,7 +293,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/where-allowed.rs:234:7\n    |\n LL | impl <T = impl Debug> T {}\n-   |       ^\n+   |       ^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n@@ -303,7 +303,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n   --> $DIR/where-allowed.rs:241:36\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n-   |                                    ^\n+   |                                    ^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>"}, {"sha": "d70bf6e1d921c3618744544c4763648cd8057d27", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `slice::<impl [T]>::sort`\n    |\n LL |         T: Ord,\n    |            ^^^ required by this bound in `slice::<impl [T]>::sort`\n+help: consider annotating `X` with `#[derive(Ord)]`\n+   |\n+LL | #[derive(Ord)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "266749376eb05427b9d43508a6adf14d89fe07c6", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -7,6 +7,10 @@ LL | struct Foo(Bar);\n    |            ^^^ the trait `Hash` is not implemented for `Bar`\n    |\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Bar` with `#[derive(Hash)]`\n+   |\n+LL | #[derive(Hash)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "69ef876d2550222cac11e12ee43ae48facbfbe8d", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -8,6 +8,10 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `PartialOrd` is not implemented for `Comparable`\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Comparable` with `#[derive(PartialOrd)]`\n+   |\n+LL | #[derive(PartialEq)] #[derive(PartialOrd)]\n+   |                      +++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "fa2eaab5b417b21fd1021e3787a449b4cbb9db15", "filename": "src/test/ui/issues/issue-78957.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,13 +2,13 @@ error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-78957.rs:5:16\n    |\n LL | pub struct Foo<#[inline] const N: usize>;\n-   |                ^^^^^^^^^       - not a function or closure\n+   |                ^^^^^^^^^ -------------- not a function or closure\n \n error: attribute should be applied to a function\n   --> $DIR/issue-78957.rs:7:16\n    |\n LL | pub struct Bar<#[cold] const N: usize>;\n-   |                ^^^^^^^       - not a function\n+   |                ^^^^^^^ -------------- not a function\n    |\n note: the lint level is defined here\n   --> $DIR/issue-78957.rs:1:9\n@@ -21,7 +21,7 @@ error[E0517]: attribute should be applied to a struct, enum, or union\n   --> $DIR/issue-78957.rs:10:23\n    |\n LL | pub struct Baz<#[repr(C)] const N: usize>;\n-   |                       ^         - not a struct, enum, or union\n+   |                       ^   -------------- not a struct, enum, or union\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-78957.rs:13:17"}, {"sha": "1772d353fe4277a0f3f37ee4943b891261dea312", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -93,6 +93,10 @@ note: required because of the requirements on the impl of `Gettable<Foo>` for `S\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<Foo>`\n+help: consider annotating `Foo` with `#[derive(Copy)]`\n+   |\n+LL |     #[derive(Copy)]\n+   |\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f227ac2477e6c33f68ca72268c195729aaf64fe8", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -101,6 +101,10 @@ note: required because of the requirements on the impl of `Gettable<Foo>` for `S\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<Foo>`\n+help: consider annotating `Foo` with `#[derive(Copy)]`\n+   |\n+LL |     #[derive(Copy)]\n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "25f7febfef9dfee610bc1f37f82054f31a81b551", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,7 +10,7 @@ error: layout_of(E) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I32,\n                        false,\n@@ -86,13 +86,11 @@ error: layout_of(E) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I32,\n-                           false,\n-                       ),\n-                       valid_range: 0..=0,\n-                   },\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -133,14 +131,14 @@ error: layout_of(S) = Layout {\n                index: 0,\n            },\n            abi: ScalarPair(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I32,\n                        true,\n                    ),\n                    valid_range: 0..=4294967295,\n                },\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I32,\n                        true,\n@@ -202,7 +200,7 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I32,\n                        false,\n@@ -271,14 +269,14 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                ],\n            },\n            abi: ScalarPair(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I32,\n                        false,\n                    ),\n                    valid_range: 0..=1,\n                },\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I32,\n                        true,\n@@ -291,13 +289,11 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I32,\n-                           false,\n-                       ),\n-                       valid_range: 0..=1,\n-                   },\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -321,7 +317,7 @@ error: layout_of(i32) = Layout {\n                index: 0,\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I32,\n                        true,"}, {"sha": "4db8162b16bb249e0b3201912f432206671ce875", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,7 +10,7 @@ error: layout_of(A) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I8,\n                        false,\n@@ -47,7 +47,7 @@ error: layout_of(A) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n@@ -60,13 +60,11 @@ error: layout_of(A) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I8,\n-                           false,\n-                       ),\n-                       valid_range: 0..=0,\n-                   },\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -98,7 +96,7 @@ error: layout_of(B) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I8,\n                        false,\n@@ -135,7 +133,7 @@ error: layout_of(B) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n@@ -148,13 +146,11 @@ error: layout_of(B) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I8,\n-                           false,\n-                       ),\n-                       valid_range: 255..=255,\n-                   },\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -186,7 +182,7 @@ error: layout_of(C) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I16,\n                        false,\n@@ -223,7 +219,7 @@ error: layout_of(C) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I16,\n                        false,\n@@ -236,13 +232,11 @@ error: layout_of(C) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I16,\n-                           false,\n-                       ),\n-                       valid_range: 256..=256,\n-                   },\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -274,7 +268,7 @@ error: layout_of(P) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I32,\n                        false,\n@@ -311,7 +305,7 @@ error: layout_of(P) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I32,\n                        false,\n@@ -324,13 +318,11 @@ error: layout_of(P) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I32,\n-                           false,\n-                       ),\n-                       valid_range: 268435456..=268435456,\n-                   },\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -362,7 +354,7 @@ error: layout_of(T) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I32,\n                        true,\n@@ -399,7 +391,7 @@ error: layout_of(T) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I32,\n                        true,\n@@ -412,13 +404,11 @@ error: layout_of(T) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I32,\n-                           true,\n-                       ),\n-                       valid_range: 2164260864..=2164260864,\n-                   },\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n                },\n            ),\n            align: AbiAndPrefAlign {"}, {"sha": "9d1f234f31ad5b68ed43ec5b381822f92967d007", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,7 +10,7 @@ error: layout_of(A) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I8,\n                        false,\n@@ -47,7 +47,7 @@ error: layout_of(A) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n@@ -60,13 +60,11 @@ error: layout_of(A) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I8,\n-                           false,\n-                       ),\n-                       valid_range: 0..=0,\n-                   },\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -98,7 +96,7 @@ error: layout_of(B) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I8,\n                        false,\n@@ -135,7 +133,7 @@ error: layout_of(B) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n@@ -148,13 +146,11 @@ error: layout_of(B) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I8,\n-                           false,\n-                       ),\n-                       valid_range: 255..=255,\n-                   },\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 255..=255,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -186,7 +182,7 @@ error: layout_of(C) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I16,\n                        false,\n@@ -223,7 +219,7 @@ error: layout_of(C) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I16,\n                        false,\n@@ -236,13 +232,11 @@ error: layout_of(C) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I16,\n-                           false,\n-                       ),\n-                       valid_range: 256..=256,\n-                   },\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -274,7 +268,7 @@ error: layout_of(P) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I32,\n                        false,\n@@ -311,7 +305,7 @@ error: layout_of(P) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I32,\n                        false,\n@@ -324,13 +318,11 @@ error: layout_of(P) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I32,\n-                           false,\n-                       ),\n-                       valid_range: 268435456..=268435456,\n-                   },\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n                },\n            ),\n            align: AbiAndPrefAlign {\n@@ -362,7 +354,7 @@ error: layout_of(T) = Layout {\n                ],\n            },\n            variants: Multiple {\n-               tag: Scalar {\n+               tag: Initialized {\n                    value: Int(\n                        I32,\n                        true,\n@@ -399,7 +391,7 @@ error: layout_of(T) = Layout {\n                ],\n            },\n            abi: Scalar(\n-               Scalar {\n+               Initialized {\n                    value: Int(\n                        I32,\n                        true,\n@@ -412,13 +404,11 @@ error: layout_of(T) = Layout {\n                    offset: Size {\n                        raw: 0,\n                    },\n-                   scalar: Scalar {\n-                       value: Int(\n-                           I32,\n-                           true,\n-                       ),\n-                       valid_range: 2164260864..=2164260864,\n-                   },\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n                },\n            ),\n            align: AbiAndPrefAlign {"}, {"sha": "803883460f08f4074adf2752a500673820a37b2c", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -28,6 +28,10 @@ note: required by a bound in `Copy`\n LL | pub trait Copy: Clone {\n    |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Test1` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: the trait bound `Test2: Clone` is not satisfied\n   --> $DIR/malformed-derive-entry.rs:6:10\n@@ -41,6 +45,10 @@ note: required by a bound in `Copy`\n LL | pub trait Copy: Clone {\n    |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Test2` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ed2766c000ec44ead22a07ae502c8e7c302c6f3a", "filename": "src/test/ui/mir/thir-constparam-temp.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fmir%2Fthir-constparam-temp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fmir%2Fthir-constparam-temp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fthir-constparam-temp.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -13,10 +13,10 @@ note: mutable reference created due to call to this method\n LL |     fn mut_self(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n note: `const` item defined here\n-  --> $DIR/thir-constparam-temp.rs:13:14\n+  --> $DIR/thir-constparam-temp.rs:13:8\n    |\n LL | fn foo<const YIKES: Yikes>() {\n-   |              ^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "c2515c40b1d778373235367e02fdfaefb501fb0b", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -11,6 +11,10 @@ note: required by a bound in `Result::<T, E>::unwrap`\n    |\n LL |         E: fmt::Debug,\n    |            ^^^^^^^^^^ required by this bound in `Result::<T, E>::unwrap`\n+help: consider annotating `Foo` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "cbceec58eb1eb816e7f2ec3d0189cd4e68d76815", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -99,10 +99,10 @@ LL | impl X<{ N }> {}\n    |        +   +\n \n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/missing-type-parameter2.rs:6:15\n+  --> $DIR/missing-type-parameter2.rs:6:9\n    |\n LL | impl<T, const A: u8 = 2> X<N> {}\n-   |               ^\n+   |         ^^^^^^^^^^^^^^^\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/missing-type-parameter2.rs:6:28"}, {"sha": "0dcf06481427dda88b513a33a02acb568bde34d1", "filename": "src/test/ui/nll/issue-50716.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-50716.rs:14:9\n+  --> $DIR/issue-50716.rs:18:9\n    |\n LL |     let _x = *s;\n    |         ^^ lifetime mismatch\n    |\n    = note: expected type `<<&'a T as A>::X as Sized>`\n               found type `<<&'static T as A>::X as Sized>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/issue-50716.rs:9:8\n+  --> $DIR/issue-50716.rs:13:8\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n    |        ^^", "previous_filename": "src/test/ui/nll/issue-50716.stderr"}, {"sha": "a8f4d694ba7d1b882bb178ca29fca719773addfd", "filename": "src/test/ui/nll/issue-50716.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-50716.rs:14:14\n+  --> $DIR/issue-50716.rs:18:14\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n    |        -- lifetime `'a` defined here"}, {"sha": "bd44d3eff9fc89cb14727630ca99d3abc92c082e", "filename": "src/test/ui/nll/issue-50716.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,6 +2,10 @@\n // Regression test for the issue #50716: NLL ignores lifetimes bounds\n // derived from `Sized` requirements\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait A {\n     type X: ?Sized;\n }"}, {"sha": "259f378f70b5c825f03fe2e803122f3bee13509c", "filename": "src/test/ui/nll/issue-52742.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,16 +1,16 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-52742.rs:12:18\n+  --> $DIR/issue-52742.rs:17:18\n    |\n LL |         self.y = b.z\n    |                  ^^^\n    |\n note: ...the reference is valid for the lifetime `'_` as defined here...\n-  --> $DIR/issue-52742.rs:10:10\n+  --> $DIR/issue-52742.rs:15:10\n    |\n LL | impl Foo<'_, '_> {\n    |          ^^\n note: ...but the borrowed content is only valid for the anonymous lifetime defined here\n-  --> $DIR/issue-52742.rs:11:31\n+  --> $DIR/issue-52742.rs:16:31\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                               ^^^^^^^", "previous_filename": "src/test/ui/nll/issue-52742.stderr"}, {"sha": "6828418a78ec1afa0f719a2c7c1395d20d51c9e5", "filename": "src/test/ui/nll/issue-52742.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-52742.rs:12:9\n+  --> $DIR/issue-52742.rs:17:9\n    |\n LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                 ---------         -- let's call this `'1`"}, {"sha": "5ec5770c5c206e46d35101c68628c367925f453e", "filename": "src/test/ui/nll/issue-52742.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,8 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n+\n struct Foo<'a, 'b> {\n     x: &'a u32,\n     y: &'b u32,"}, {"sha": "cc87954732c4e5466ce037eadcada77c93061795", "filename": "src/test/ui/nll/issue-55394.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,26 +1,26 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'s` due to conflicting requirements\n-  --> $DIR/issue-55394.rs:9:9\n+  --> $DIR/issue-55394.rs:13:9\n    |\n LL |         Foo { bar }\n    |         ^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/issue-55394.rs:8:17\n+  --> $DIR/issue-55394.rs:12:17\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n    |                 ^^^^^^^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/issue-55394.rs:9:15\n+  --> $DIR/issue-55394.rs:13:15\n    |\n LL |         Foo { bar }\n    |               ^^^\n note: but, the lifetime must be valid for the lifetime `'_` as defined here...\n-  --> $DIR/issue-55394.rs:7:10\n+  --> $DIR/issue-55394.rs:11:10\n    |\n LL | impl Foo<'_> {\n    |          ^^\n note: ...so that the types are compatible\n-  --> $DIR/issue-55394.rs:9:9\n+  --> $DIR/issue-55394.rs:13:9\n    |\n LL |         Foo { bar }\n    |         ^^^^^^^^^^^", "previous_filename": "src/test/ui/nll/issue-55394.stderr"}, {"sha": "c166c458c5013bd105fa2a6a5338368b9aaca35b", "filename": "src/test/ui/nll/issue-55394.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55394.rs:9:9\n+  --> $DIR/issue-55394.rs:13:9\n    |\n LL |     fn new(bar: &mut Bar) -> Self {\n    |                 -            ---- return type is Foo<'2>"}, {"sha": "9c4fcdf6419090876866d64b007e3e4381fff0c4", "filename": "src/test/ui/nll/issue-55394.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Bar;\n \n struct Foo<'s> {"}, {"sha": "d4e9f2b4154ef3614a4efb6974eaa2f499a24bad", "filename": "src/test/ui/nll/issue-55401.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/issue-55401.rs:3:5\n+  --> $DIR/issue-55401.rs:7:5\n    |\n LL |     *y\n    |     ^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/issue-55401.rs:1:47\n+  --> $DIR/issue-55401.rs:5:47\n    |\n LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n    |                                               ^^", "previous_filename": "src/test/ui/nll/issue-55401.stderr"}, {"sha": "1318dc676571490adf5a46d20f2108552880dc18", "filename": "src/test/ui/nll/issue-55401.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55401.rs:3:5\n+  --> $DIR/issue-55401.rs:7:5\n    |\n LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n    |                                               -- lifetime `'a` defined here"}, {"sha": "10f38c53dfdc74226db740ffcaebc14949499517", "filename": "src/test/ui/nll/issue-55401.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n     *y //~ ERROR"}, {"sha": "ea9f5d4b2b1aa15a20b619d6c6816f3dcb452d43", "filename": "src/test/ui/nll/lub-if.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-if.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-if.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,25 +1,25 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-if.rs:28:9\n+  --> $DIR/lub-if.rs:32:9\n    |\n LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-if.rs:23:17\n+  --> $DIR/lub-if.rs:27:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-if.rs:35:9\n+  --> $DIR/lub-if.rs:41:9\n    |\n LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-if.rs:32:17\n+  --> $DIR/lub-if.rs:38:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^", "previous_filename": "src/test/ui/nll/lub-if.stderr"}, {"sha": "2fd6e69628d472c95e9df998d9d536880c0bef55", "filename": "src/test/ui/nll/lub-if.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lub-if.rs:28:9\n+  --> $DIR/lub-if.rs:32:9\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |         s\n    |         ^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/lub-if.rs:35:9\n+  --> $DIR/lub-if.rs:41:9\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here"}, {"sha": "18561d63935e785947433fec10dd09afe250df05", "filename": "src/test/ui/nll/lub-if.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-if.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,6 +2,10 @@\n // of the various arms, particularly in the case where regions are\n // involved.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub fn opt_str0<'a>(maybestr: &'a Option<String>) -> &'a str {\n     if maybestr.is_none() {\n         \"(none)\"\n@@ -25,14 +29,18 @@ pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n         \"(none)\"\n     } else {\n         let s: &'a str = maybestr.as_ref().unwrap();\n-        s  //~ ERROR E0312\n+        s\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n     if maybestr.is_some() {\n         let s: &'a str = maybestr.as_ref().unwrap();\n-        s  //~ ERROR E0312\n+        s\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     } else {\n         \"(none)\"\n     }"}, {"sha": "38952133160ed70ed77acedbea0a03930ecfbf75", "filename": "src/test/ui/nll/lub-match.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-match.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,25 +1,25 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-match.rs:30:13\n+  --> $DIR/lub-match.rs:34:13\n    |\n LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-match.rs:25:17\n+  --> $DIR/lub-match.rs:29:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/lub-match.rs:39:13\n+  --> $DIR/lub-match.rs:45:13\n    |\n LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/lub-match.rs:35:17\n+  --> $DIR/lub-match.rs:41:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 ^^", "previous_filename": "src/test/ui/nll/lub-match.stderr"}, {"sha": "c78d0cb641dc8508bcd83c0a156869aa21ce7f9c", "filename": "src/test/ui/nll/lub-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-match.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lub-match.rs:30:13\n+  --> $DIR/lub-match.rs:34:13\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here\n@@ -8,7 +8,7 @@ LL |             s\n    |             ^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/lub-match.rs:39:13\n+  --> $DIR/lub-match.rs:45:13\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n    |                 -- lifetime `'a` defined here"}, {"sha": "084d8b95f5893d73824f18fdb9a240dd4887a732", "filename": "src/test/ui/nll/lub-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Flub-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flub-match.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,6 +2,10 @@\n // of the various arms, particularly in the case where regions are\n // involved.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n pub fn opt_str0<'a>(maybestr: &'a Option<String>) -> &'a str {\n     match *maybestr {\n         Some(ref s) => {\n@@ -27,7 +31,9 @@ pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n         None => \"(none)\",\n         Some(ref s) => {\n             let s: &'a str = s;\n-            s //~ ERROR E0312\n+            s\n+            //[base]~^ ERROR E0312\n+            //[nll]~^^ ERROR lifetime may not live long enough\n         }\n     }\n }\n@@ -36,7 +42,9 @@ pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n     match *maybestr {\n         Some(ref s) => {\n             let s: &'a str = s;\n-            s //~ ERROR E0312\n+            s\n+            //[base]~^ ERROR E0312\n+            //[nll]~^^ ERROR lifetime may not live long enough\n         }\n         None => \"(none)\",\n     }"}, {"sha": "010535fec6dd440b0e8de512948a1e5bc28ea327", "filename": "src/test/ui/nll/type-alias-free-regions.base.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,59 +1,59 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/type-alias-free-regions.rs:17:9\n+  --> $DIR/type-alias-free-regions.rs:21:9\n    |\n LL |         C { f: b }\n    |         ^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/type-alias-free-regions.rs:16:24\n+  --> $DIR/type-alias-free-regions.rs:20:24\n    |\n LL |     fn from_box(b: Box<B>) -> Self {\n    |                        ^\n note: ...so that the expression is assignable\n-  --> $DIR/type-alias-free-regions.rs:17:16\n+  --> $DIR/type-alias-free-regions.rs:21:16\n    |\n LL |         C { f: b }\n    |                ^\n    = note: expected `Box<Box<&isize>>`\n               found `Box<Box<&isize>>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/type-alias-free-regions.rs:15:6\n+  --> $DIR/type-alias-free-regions.rs:19:6\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/type-alias-free-regions.rs:17:9\n+  --> $DIR/type-alias-free-regions.rs:21:9\n    |\n LL |         C { f: b }\n    |         ^^^^^^^^^^\n    = note: expected `C<'a>`\n               found `C<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/type-alias-free-regions.rs:27:16\n+  --> $DIR/type-alias-free-regions.rs:31:16\n    |\n LL |         C { f: Box::new(b.0) }\n    |                ^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime defined here...\n-  --> $DIR/type-alias-free-regions.rs:26:23\n+  --> $DIR/type-alias-free-regions.rs:30:23\n    |\n LL |     fn from_tuple(b: (B,)) -> Self {\n    |                       ^\n note: ...so that the expression is assignable\n-  --> $DIR/type-alias-free-regions.rs:27:25\n+  --> $DIR/type-alias-free-regions.rs:31:25\n    |\n LL |         C { f: Box::new(b.0) }\n    |                         ^^^\n    = note: expected `Box<&isize>`\n               found `Box<&isize>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/type-alias-free-regions.rs:25:6\n+  --> $DIR/type-alias-free-regions.rs:29:6\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      ^^\n note: ...so that the types are compatible\n-  --> $DIR/type-alias-free-regions.rs:27:9\n+  --> $DIR/type-alias-free-regions.rs:31:9\n    |\n LL |         C { f: Box::new(b.0) }\n    |         ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/nll/type-alias-free-regions.stderr"}, {"sha": "6b746602d7ffd3b016fb851973a66db1a5d43fe2", "filename": "src/test/ui/nll/type-alias-free-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-alias-free-regions.rs:17:9\n+  --> $DIR/type-alias-free-regions.rs:21:9\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n    |      -- lifetime `'a` defined here\n@@ -9,7 +9,7 @@ LL |         C { f: b }\n    |         ^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-alias-free-regions.rs:27:9\n+  --> $DIR/type-alias-free-regions.rs:31:9\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      -- lifetime `'a` defined here"}, {"sha": "59ef0344937704cb507d59b46e45f675d88d6ee6", "filename": "src/test/ui/nll/type-alias-free-regions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,6 +1,10 @@\n // Test that we don't assume that type aliases have the same type parameters\n // as the type they alias and then panic when we see this.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n type A<'a> = &'a isize;\n type B<'a> = Box<A<'a>>;\n "}, {"sha": "ba17994b437661494e39725b131adeba52fde2d5", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `fn` parameter has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+  --> $DIR/constant-in-expr-inherent-1.rs:12:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |               ------- this data with lifetime `'a`...", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr"}, {"sha": "0399d5f893d85ef0779a8a794188b6d8c76fa85c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+  --> $DIR/constant-in-expr-inherent-1.rs:12:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "0bd316aa84cfe19296dfd30a433b2be873ebabc8", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct Foo<'a> { x: &'a u32 }\n \n impl<'a> Foo<'a> {"}, {"sha": "61efa879fc04be5e08f42868f22ba1db93daebb4", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/constant-in-expr-normalize.rs:18:5\n+  --> $DIR/constant-in-expr-normalize.rs:22:5\n    |\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/constant-in-expr-normalize.rs:17:8\n+  --> $DIR/constant-in-expr-normalize.rs:21:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        ^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.stderr"}, {"sha": "4c1e6bee2aa0d5143fa2716100381f1618301518", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-normalize.rs:18:5\n+  --> $DIR/constant-in-expr-normalize.rs:22:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "262f0ae318f8effba3583137d121a3ec56d4e1dd", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Mirror {\n     type Me;\n }"}, {"sha": "93f7156e55757aed90ce82c947c7897711a6ae7a", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/constant-in-expr-trait-item-1.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-1.rs:14:5\n    |\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/constant-in-expr-trait-item-1.rs:9:8\n+  --> $DIR/constant-in-expr-trait-item-1.rs:13:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        ^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.stderr"}, {"sha": "990d0ae385fc10804b73384bf0b4915c6b3cf384", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-1.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-1.rs:14:5\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "512edb501c4ea12a9aab2e5be57cf514d2010586", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "f43ade38937d342d165cb5445814d48cb271f74c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,12 +1,12 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/constant-in-expr-trait-item-2.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-2.rs:14:5\n    |\n LL |     <T as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/constant-in-expr-trait-item-2.rs:9:8\n+  --> $DIR/constant-in-expr-trait-item-2.rs:13:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        ^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.stderr"}, {"sha": "8c0430f1e092cb2bf193b74fc185f37419ebc2a0", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-2.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-2.rs:14:5\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "b3dfbd984ebbf3f035772bb2f339a5847ad1cd88", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "e9393aa05ab39c5bea59da8ee68eb4dfa7d14422", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,24 +1,24 @@\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL |     T::C\n    |     ^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/constant-in-expr-trait-item-3.rs:9:8\n+  --> $DIR/constant-in-expr-trait-item-3.rs:13:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        ^^\n note: ...so that the types are compatible\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL |     T::C\n    |     ^^^^\n    = note: expected `Foo<'_>`\n               found `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL |     T::C\n    |     ^^^^", "previous_filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr"}, {"sha": "cbcaf042f053904078269375831738eb2e8b2873", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+  --> $DIR/constant-in-expr-trait-item-3.rs:14:5\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here"}, {"sha": "6e78d94c2f63ac8c942008d36146f29a92a5b0c2", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a> {\n     const C: &'a u32;\n }"}, {"sha": "92909797c9679e38685da12858c0ff02e606abae", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -11,6 +11,10 @@ LL |       let hello = hello.clone();\n    |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |\n    = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n+help: consider annotating `S` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "417e01e491b471a5cdce49b2a51bae0f5c121f1f", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -7,6 +7,10 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    = help: the trait `Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Foo` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error[E0277]: `Bar` doesn't implement `Debug`\n   --> $DIR/no-debug.rs:10:32"}, {"sha": "f174215f257eb4aef305e771de54f45435d378b7", "filename": "src/test/ui/polymorphization/const_parameters/closures.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -11,7 +11,7 @@ error: item has unused generic parameters\n   --> $DIR/closures.rs:19:19\n    |\n LL | pub fn unused<const T: usize>() -> usize {\n-   |                     - generic parameter `T` is unused\n+   |               -------------- generic parameter `T` is unused\n LL |\n LL |     let add_one = |x: usize| x + 1;\n    |                   ^^^^^^^^^^^^^^^^\n@@ -20,13 +20,13 @@ error: item has unused generic parameters\n   --> $DIR/closures.rs:17:8\n    |\n LL | pub fn unused<const T: usize>() -> usize {\n-   |        ^^^^^^       - generic parameter `T` is unused\n+   |        ^^^^^^ -------------- generic parameter `T` is unused\n \n error: item has unused generic parameters\n   --> $DIR/closures.rs:28:19\n    |\n LL | pub fn used_parent<const T: usize>() -> usize {\n-   |                          - generic parameter `T` is unused\n+   |                    -------------- generic parameter `T` is unused\n LL |     let x: usize = T;\n LL |     let add_one = |x: usize| x + 1;\n    |                   ^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ error: item has unused generic parameters\n   --> $DIR/closures.rs:48:13\n    |\n LL | pub fn unused_upvar<const T: usize>() -> usize {\n-   |                           - generic parameter `T` is unused\n+   |                     -------------- generic parameter `T` is unused\n LL |     let x: usize = T;\n LL |     let y = || x;\n    |             ^^^^"}, {"sha": "f2b5a73073892b5730edf5fdc54cc025837584ca", "filename": "src/test/ui/polymorphization/const_parameters/functions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -11,7 +11,7 @@ error: item has unused generic parameters\n   --> $DIR/functions.rs:15:8\n    |\n LL | pub fn unused<const T: usize>() {\n-   |        ^^^^^^       - generic parameter `T` is unused\n+   |        ^^^^^^ -------------- generic parameter `T` is unused\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9cabb21e784adff9c0da3d333b29e72569567717", "filename": "src/test/ui/polymorphization/generators.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -23,7 +23,7 @@ error: item has unused generic parameters\n   --> $DIR/generators.rs:60:5\n    |\n LL |   pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n-   |                             - generic parameter `T` is unused\n+   |                       ------------ generic parameter `T` is unused\n LL | /     || {\n LL | |\n LL | |         yield 1;"}, {"sha": "904413712cde12d9e78e8257fdc0f9f59d9dc5c2", "filename": "src/test/ui/repeat-to-run-dtor-twice.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -5,6 +5,10 @@ LL |     let _ = [ a; 5 ];\n    |             ^^^^^^^^ the trait `Copy` is not implemented for `Foo`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n+help: consider annotating `Foo` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ea1f66d78a3786f87239963120858c3b0d23b613", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -7,6 +7,10 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    = help: the trait `Debug` is not implemented for `NotDebug`\n    = note: add `#[derive(Debug)]` to `NotDebug` or manually `impl Debug for NotDebug`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `NotDebug` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0a2a5f0f24578f27ae6faad85ff9b338aef9ce0d", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -17,6 +17,10 @@ note: required by a bound in `equals_self`\n    |\n LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n    |                         ^^^^^^^^^^^^^^^^ required by this bound in `equals_self`\n+help: consider annotating `S` with `#[derive(PartialEq)]`\n+   |\n+LL | #[derive(PartialEq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "6d389a1317a9fa2f4efa45870520388a9cc4b80d", "filename": "src/test/ui/rfc1623.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc1623.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc1623.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:28:8\n+  --> $DIR/rfc1623.rs:36:8\n    |\n LL |     f: &id,\n    |        ^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/rfc1623.stderr"}, {"sha": "f85b6ff8ff75b2a0431d8e43e50ce0fe97a4bb55", "filename": "src/test/ui/rfc1623.nll.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,11 +1,12 @@\n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ one type is more general than the other\n@@ -14,13 +15,14 @@ LL | | };\n               found type `Fn<(&Foo<'_>,)>`\n \n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ one type is more general than the other\n@@ -29,13 +31,14 @@ LL | | };\n               found type `Fn<(&Foo<'_>,)>`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ implementation of `FnOnce` is not general enough\n@@ -44,13 +47,14 @@ LL | | };\n    = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:25:35\n+  --> $DIR/rfc1623.rs:29:35\n    |\n LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n    |  ___________________________________^\n-LL | |     foo: &Foo { bools: &[false, true] },\n-LL | |     bar: &Bar { bools: &[true, true] },\n-LL | |     f: &id,\n+LL | |\n+LL | |\n+LL | |\n+...  |\n LL | |\n LL | | };\n    | |_^ implementation of `FnOnce` is not general enough"}, {"sha": "0e9d2140324256dbdcccab92e0fb3c9837ba5335", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(dead_code)]\n \n fn non_elidable<'a, 'b>(a: &'a u8, b: &'b u8) -> &'a u8 {\n@@ -23,10 +27,14 @@ fn id<T>(t: T) -> T {\n }\n \n static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+    //[nll]~^ ERROR mismatched types\n+    //[nll]~| ERROR mismatched types\n+    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n+    //[nll]~| ERROR implementation of `FnOnce` is not general enough\n     foo: &Foo { bools: &[false, true] },\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n-    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //[base]~^ ERROR implementation of `FnOnce` is not general enough\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "94a90a568548988a4754644f771c8838c928d9a6", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -53,7 +53,7 @@ error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:28:10\n    |\n LL |     call(foo_unsafe);\n-   |     ---- ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     ---- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -70,7 +70,7 @@ error[E0277]: expected a `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:30:14\n    |\n LL |     call_mut(foo_unsafe);\n-   |     -------- ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     -------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -87,7 +87,7 @@ error[E0277]: expected a `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:32:15\n    |\n LL |     call_once(foo_unsafe);\n-   |     --------- ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     --------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "5ef04936ea244b19b874c2005cdff16e87b0b77a", "filename": "src/test/ui/save-analysis/issue-89066.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-89066.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-89066.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-89066.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -31,7 +31,7 @@ note: struct defined here, with 2 generic parameters: `T`, `N`\n   --> $DIR/issue-89066.rs:8:8\n    |\n LL | struct All<'a, T, const N: usize> {\n-   |        ^^^     -        -\n+   |        ^^^     -  --------------\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2114594066861a517afb47854028e03b2fd4e2a2", "filename": "src/test/ui/specialization/issue-59435.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `MyTrait::MyType`\n    |\n LL |     type MyType: Default;\n    |                  ^^^^^^^ required by this bound in `MyTrait::MyType`\n+help: consider annotating `MyStruct` with `#[derive(Default)]`\n+   |\n+LL | #[derive(Default)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "266291f62b45dcab76e7e766f6253d58d3e42a3a", "filename": "src/test/ui/structs/struct-path-alias-bounds.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `S`\n    |\n LL | struct S<T: Clone> { a: T }\n    |             ^^^^^ required by this bound in `S`\n+help: consider annotating `NoClone` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "75658f58c8a1b5c454613430723c2d2b74742a28", "filename": "src/test/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ LL |     struct Outer<T>(Inner<T>);\n    = help: the trait `Debug` is not implemented for `a::Inner<T>`\n    = note: add `#[derive(Debug)]` to `a::Inner<T>` or manually `impl Debug for a::Inner<T>`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `a::Inner<T>` with `#[derive(Debug)]`\n+   |\n+LL |     #[derive(Debug)]\n+   |\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL |     struct Outer<T>(Inner<T>) where a::Inner<T>: Debug;"}, {"sha": "5d8d688a073ca9951b2da1ddb49c41c7228f93ac", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -25,6 +25,10 @@ note: required by a bound in `f_clone`\n    |\n LL | fn f_clone<T: Clone>(t: T) {}\n    |               ^^^^^ required by this bound in `f_clone`\n+help: consider annotating `S` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:33]` cannot be unpinned\n   --> $DIR/issue-84973-blacklist.rs:17:5"}, {"sha": "3c06f4f88c1f91f9558685506a057100e3ddbe4e", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-before-const.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.fixed?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// https://github.com/rust-lang/rust/issues/95616\n+\n+fn buggy_const<'a, const N: usize>(_a: &'a Option<[u8; N]>, _f: &'a str) -> &'a str { //~ERROR [E0106]\n+    return \"\";\n+}\n+\n+fn main() {\n+    buggy_const(&Some([69,69,69,69,0]), \"test\");\n+}"}, {"sha": "110468cbbc52e80e0233f55891c331bbe05aece6", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-before-const.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// https://github.com/rust-lang/rust/issues/95616\n+\n+fn buggy_const<const N: usize>(_a: &Option<[u8; N]>, _f: &str) -> &str { //~ERROR [E0106]\n+    return \"\";\n+}\n+\n+fn main() {\n+    buggy_const(&Some([69,69,69,69,0]), \"test\");\n+}"}, {"sha": "7b126c90ee797ac7ade0e9fd17d15b26435035c5", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-before-const.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-before-const.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,15 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetimes-in-signature-before-const.rs:4:67\n+   |\n+LL | fn buggy_const<const N: usize>(_a: &Option<[u8; N]>, _f: &str) -> &str {\n+   |                                    ----------------      ----     ^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_a` or `_f`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn buggy_const<'a, const N: usize>(_a: &'a Option<[u8; N]>, _f: &'a str) -> &'a str {\n+   |                +++                      ++                       ++          ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "d7697dcc6405b410941fe57e09da8eb59dd07f50", "filename": "src/test/ui/traits/inductive-overflow/supertrait-auto-trait.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -24,6 +24,10 @@ note: required by a bound in `copy`\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    |            ^^^^^ required by this bound in `copy`\n+help: consider annotating `NoClone` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62a2a64ed142c859e8ff4df050c8d08f1dd7982b", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ LL |     the_foos: Vec<Foo>,\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<Foo>`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Foo` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b2edcc5526a4abf329785fae9802006c1e3c3a76", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -29,10 +29,10 @@ LL |     t\n    |     ^\n    |\n note: constant used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:12:22\n+  --> $DIR/generic_duplicate_param_use.rs:12:16\n    |\n LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n-   |                      ^               ^\n+   |                ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6c82d31e18d8bf6c02014202a894fb5793433e95", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -26,10 +26,10 @@ LL |     7u32\n    |     ^^^^\n    |\n note: used non-generic constant `123_usize` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:11:21\n+  --> $DIR/generic_nondefining_use.rs:11:15\n    |\n LL | type OneConst<const X: usize> = impl Debug;\n-   |                     ^\n+   |               ^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a3b410c2cfb8c4946c53b40be46e6e828b4bf979", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,23 +1,23 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:10:18\n    |\n LL |     let z: i32 = x;\n    |                  ^\n    |\n note: used non-generic type `&'static i32` for generic parameter\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:19\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:19\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                   ^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:14:5\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr"}, {"sha": "db771d211322c8f53776a358d3e67c210c140468", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,23 +1,23 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:10:18\n    |\n LL |     let z: i32 = x;\n    |                  ^\n    |\n note: used non-generic type `&'static i32` for generic parameter\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:19\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:19\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                   ^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:14:5\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n LL |     t\n    |     ^"}, {"sha": "2ad7e615e19cc016b3ea8cab1e1b0a1a276f89c0", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,9 @@\n #![feature(type_alias_impl_trait)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn main() {\n     let y = 42;\n     let x = wrong_generic(&y);"}, {"sha": "be77b60ca8ff3ac82bfe8b92bb8bf4873a931bc9", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr"}, {"sha": "f5b91567ff53170c469f15b77bffbef65f3971ed", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,19 +1,19 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "e95ddab75bee407aae93febc78a5f2383159dc94", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,6 +1,11 @@\n // Regression test for issue #57611\n // Ensures that we don't ICE\n // FIXME: This should compile, but it currently doesn't\n+// known-bug\n+\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n #![feature(trait_alias)]\n #![feature(type_alias_impl_trait)]\n@@ -18,7 +23,6 @@ impl Foo for X {\n \n     fn bar(&self) -> Self::Bar {\n         |x| x\n-        //~^ ERROR implementation of `FnOnce` is not general enough\n     }\n }\n "}, {"sha": "56a9b5317f76e49f2e78c280b5fceb723226a0a0", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:6:19\n    |\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n-   |                   ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                   ^^^^^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n note: required by a bound in `Foo`\n@@ -15,7 +15,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:8:27\n    |\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n-   |                           ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n note: required by a bound in `Foo`"}, {"sha": "9279e4c3901db303674d35d8ea5f23d980296d3d", "filename": "src/test/ui/typeck/explain_clone_autoref.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,13 @@\n+struct NotClone;\n+\n+fn main() {\n+    clone_thing(&NotClone);\n+}\n+\n+fn clone_thing(nc: &NotClone) -> NotClone {\n+    //~^ NOTE expected `NotClone` because of return type\n+    nc.clone()\n+    //~^ ERROR mismatched type\n+    //~| NOTE `NotClone` does not implement `Clone`, so `&NotClone` was cloned instead\n+    //~| NOTE expected struct `NotClone`, found `&NotClone`\n+}"}, {"sha": "faac680ea19318f02e674ec0e5ddb67ad34cf9eb", "filename": "src/test/ui/typeck/explain_clone_autoref.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/explain_clone_autoref.rs:9:5\n+   |\n+LL | fn clone_thing(nc: &NotClone) -> NotClone {\n+   |                                  -------- expected `NotClone` because of return type\n+LL |\n+LL |     nc.clone()\n+   |     ^^^^^^^^^^ expected struct `NotClone`, found `&NotClone`\n+   |\n+note: `NotClone` does not implement `Clone`, so `&NotClone` was cloned instead\n+  --> $DIR/explain_clone_autoref.rs:9:5\n+   |\n+LL |     nc.clone()\n+   |     ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5d555a9c5e4506bba34d3cb694edef70582ff458", "filename": "src/test/ui/unboxed-closures/issue-30906.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-30906.rs:18:5\n+  --> $DIR/issue-30906.rs:22:5\n    |\n LL |     test(Compose(f, |_| {}));\n    |     ^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/unboxed-closures/issue-30906.stderr"}, {"sha": "333e8e178217f23b73483dd0092449382e316885", "filename": "src/test/ui/unboxed-closures/issue-30906.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-30906.rs:18:5\n+  --> $DIR/issue-30906.rs:22:5\n    |\n LL |     test(Compose(f, |_| {}));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough"}, {"sha": "1fd3a7f97dea3e88662e8d4b41a5fb0c88bbb634", "filename": "src/test/ui/unboxed-closures/issue-30906.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,9 @@\n #![feature(fn_traits, unboxed_closures)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n \n struct Compose<F, G>(F, G);"}, {"sha": "ebd14c64298202d8232f5a69f02cd159d64994da", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.base.stderr", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,23 +1,27 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:17:15\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:21:15\n    |\n LL |         x.set(y);\n    |               ^\n    |\n note: ...the reference is valid for the anonymous lifetime #2 defined here...\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:20:14\n    |\n LL |       doit(0, &|x, y| {\n    |  ______________^\n LL | |         x.set(y);\n+LL | |\n+LL | |\n LL | |     });\n    | |_____^\n note: ...but the borrowed content is only valid for the anonymous lifetime #3 defined here\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:16:14\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:20:14\n    |\n LL |       doit(0, &|x, y| {\n    |  ______________^\n LL | |         x.set(y);\n+LL | |\n+LL | |\n LL | |     });\n    | |_____^\n ", "previous_filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.stderr"}, {"sha": "aeeee6e5003e897799fae54845a0bd9e11f3d628", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:17:9\n+  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:21:9\n    |\n LL |     doit(0, &|x, y| {\n    |               -  - has type `&'1 i32`"}, {"sha": "288349e44561e35d1e40e6abd540b6c768b6029d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,6 +3,10 @@\n // That a closure whose expected argument types include two distinct\n // bound regions.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::cell::Cell;\n \n fn doit<T,F>(val: T, f: &F)\n@@ -14,6 +18,8 @@ fn doit<T,F>(val: T, f: &F)\n \n pub fn main() {\n     doit(0, &|x, y| {\n-        x.set(y); //~ ERROR E0312\n+        x.set(y);\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ lifetime may not live long enough\n     });\n }"}, {"sha": "18e133957ba37fa5aebb201743715c2eb3b91caf", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,11 +2,12 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r i\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:20:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------- ^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:15\n    |\n@@ -17,11 +18,12 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:25:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:19\n    |\n@@ -32,11 +34,12 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:30:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------------ ^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:15:20\n    |"}, {"sha": "c826af3c4c38f0f263f775f1840ceadc377d81c0", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -2,11 +2,12 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isi\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:21:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------- ^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:15\n    |\n@@ -17,11 +18,12 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:26:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:19\n    |\n@@ -32,11 +34,12 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:31:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------------ ^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:16:20\n    |"}, {"sha": "07357795010b54f3d70cb49a4baa729a3694989d", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `items` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/dyn-trait-underscore.rs:8:20\n+  --> $DIR/dyn-trait-underscore.rs:12:20\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                ---- this data with an anonymous lifetime `'_`...\n@@ -10,7 +10,7 @@ LL |     Box::new(items.iter())\n    |              ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/dyn-trait-underscore.rs:6:29\n+  --> $DIR/dyn-trait-underscore.rs:10:29\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                             ^^^^^^^^^^^^^^^^^^^^^ `'static` requirement introduced here", "previous_filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr"}, {"sha": "53d45f6a8f22b98da018b6f2e3fee0278758a770", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/dyn-trait-underscore.rs:8:5\n+  --> $DIR/dyn-trait-underscore.rs:12:5\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                - let's call the lifetime of this reference `'1`"}, {"sha": "7110d43221082facd2507a71f3966f0b3fbfa7aa", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,9 +3,15 @@\n //\n // cc #48468\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-    Box::new(items.iter()) //~ ERROR E0759\n+    Box::new(items.iter())\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn b<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {"}, {"sha": "2581911f5ce23bd157d52ff3110839b1d9d50837", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/underscore-lifetime-elison-mismatch.rs:1:49\n+  --> $DIR/underscore-lifetime-elison-mismatch.rs:5:49\n    |\n LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n    |                    ------      ------           ^ ...but data from `y` flows into `x` here", "previous_filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.stderr"}, {"sha": "8e10242cb1331ae08dbb46b8cbff7f69b8d9351c", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/underscore-lifetime-elison-mismatch.rs:1:42\n+  --> $DIR/underscore-lifetime-elison-mismatch.rs:5:42\n    |\n LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n    |                    -           -         ^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "6d495138da9e3d24f745b2964562915cc5fef5d5", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,3 +1,9 @@\n-fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); } //~ ERROR lifetime mismatch\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n+fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); }\n+//[base]~^ ERROR lifetime mismatch\n+//[nll]~^^ ERROR lifetime may not live long enough\n \n fn main() {}"}, {"sha": "c242a7de7abfb6959212bfa7cc74050e34abcfcf", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -38,6 +38,10 @@ note: required by a bound in `AssertParamIsCopy`\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `U1` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c242a7de7abfb6959212bfa7cc74050e34abcfcf", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -38,6 +38,10 @@ note: required by a bound in `AssertParamIsCopy`\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `U1` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99505f31639686770f8ecfb51ebb5daea54bd266", "filename": "src/test/ui/union/union-derive-eq.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "99505f31639686770f8ecfb51ebb5daea54bd266", "filename": "src/test/ui/union/union-derive-eq.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -13,6 +13,10 @@ note: required by a bound in `AssertParamIsEq`\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c8ace0848719ba737332b04bcb98ba95c21ee503", "filename": "src/test/ui/variance/variance-associated-types2.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-associated-types2.rs:13:42\n+  --> $DIR/variance-associated-types2.rs:17:42\n    |\n LL |     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n    |                                          ^^^^^^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Foo<Bar = &'a u32>`\n               found trait object `dyn Foo<Bar = &'static u32>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/variance-associated-types2.rs:12:9\n+  --> $DIR/variance-associated-types2.rs:16:9\n    |\n LL | fn take<'a>(_: &'a u32) {\n    |         ^^", "previous_filename": "src/test/ui/variance/variance-associated-types2.stderr"}, {"sha": "b74c400969237f570c1d9c95662af321f2284856", "filename": "src/test/ui/variance/variance-associated-types2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-associated-types2.rs:13:12\n+  --> $DIR/variance-associated-types2.rs:17:12\n    |\n LL | fn take<'a>(_: &'a u32) {\n    |         -- lifetime `'a` defined here"}, {"sha": "e3c8e6d7ca242bd6ca9b0ae96bf1d2d93a5c949e", "filename": "src/test/ui/variance/variance-associated-types2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,6 +1,10 @@\n // Test that dyn Foo<Bar = T> is invariant with respect to T.\n // Failure to enforce invariance here can be weaponized, see #71550 for details.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {\n     type Bar;\n }\n@@ -11,7 +15,8 @@ fn make() -> Box<dyn Foo<Bar = &'static u32>> {\n \n fn take<'a>(_: &'a u32) {\n     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n-    //~^ ERROR mismatched types [E0308]\n+    //[base]~^ ERROR mismatched types [E0308]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "5b78f4252b3ddc914ef46ec5714e050cdc0d7c60", "filename": "src/test/ui/variance/variance-btree-invariant-types.base.stderr", "status": "renamed", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,238 +1,238 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:4:5\n+  --> $DIR/variance-btree-invariant-types.rs:8:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:3:21\n+  --> $DIR/variance-btree-invariant-types.rs:7:21\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n    |                     ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:7:5\n+  --> $DIR/variance-btree-invariant-types.rs:13:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:6:21\n+  --> $DIR/variance-btree-invariant-types.rs:12:21\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n    |                     ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:10:5\n+  --> $DIR/variance-btree-invariant-types.rs:18:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:9:24\n+  --> $DIR/variance-btree-invariant-types.rs:17:24\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n    |                        ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:13:5\n+  --> $DIR/variance-btree-invariant-types.rs:23:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:12:24\n+  --> $DIR/variance-btree-invariant-types.rs:22:24\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n    |                        ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:17:5\n+  --> $DIR/variance-btree-invariant-types.rs:29:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, &'new (), _>`\n               found struct `RangeMut<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:16:22\n+  --> $DIR/variance-btree-invariant-types.rs:28:22\n    |\n LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n    |                      ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:20:5\n+  --> $DIR/variance-btree-invariant-types.rs:34:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, _, &'new ()>`\n               found struct `RangeMut<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:19:22\n+  --> $DIR/variance-btree-invariant-types.rs:33:22\n    |\n LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n    |                      ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:23:5\n+  --> $DIR/variance-btree-invariant-types.rs:39:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, &'static (), _>`\n               found struct `RangeMut<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:22:25\n+  --> $DIR/variance-btree-invariant-types.rs:38:25\n    |\n LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n    |                         ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:26:5\n+  --> $DIR/variance-btree-invariant-types.rs:44:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, _, &'static ()>`\n               found struct `RangeMut<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:25:25\n+  --> $DIR/variance-btree-invariant-types.rs:43:25\n    |\n LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n    |                         ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:31:5\n+  --> $DIR/variance-btree-invariant-types.rs:51:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:29:20\n+  --> $DIR/variance-btree-invariant-types.rs:49:20\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:35:5\n+  --> $DIR/variance-btree-invariant-types.rs:57:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:33:20\n+  --> $DIR/variance-btree-invariant-types.rs:55:20\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:39:5\n+  --> $DIR/variance-btree-invariant-types.rs:63:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:37:23\n+  --> $DIR/variance-btree-invariant-types.rs:61:23\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:43:5\n+  --> $DIR/variance-btree-invariant-types.rs:69:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:41:23\n+  --> $DIR/variance-btree-invariant-types.rs:67:23\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:48:5\n+  --> $DIR/variance-btree-invariant-types.rs:76:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:46:20\n+  --> $DIR/variance-btree-invariant-types.rs:74:20\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:52:5\n+  --> $DIR/variance-btree-invariant-types.rs:82:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:50:20\n+  --> $DIR/variance-btree-invariant-types.rs:80:20\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:56:5\n+  --> $DIR/variance-btree-invariant-types.rs:88:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:54:23\n+  --> $DIR/variance-btree-invariant-types.rs:86:23\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:60:5\n+  --> $DIR/variance-btree-invariant-types.rs:94:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:58:23\n+  --> $DIR/variance-btree-invariant-types.rs:92:23\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n    |                       ^^^^", "previous_filename": "src/test/ui/variance/variance-btree-invariant-types.stderr"}, {"sha": "991a7b0cdf078e43e312576dd8fbe59754e53536", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:4:5\n+  --> $DIR/variance-btree-invariant-types.rs:8:5\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n    |                     ---- lifetime `'new` defined here\n@@ -11,7 +11,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:7:5\n+  --> $DIR/variance-btree-invariant-types.rs:13:5\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n    |                     ---- lifetime `'new` defined here\n@@ -23,7 +23,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:10:5\n+  --> $DIR/variance-btree-invariant-types.rs:18:5\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n    |                        ---- lifetime `'new` defined here\n@@ -35,7 +35,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:13:5\n+  --> $DIR/variance-btree-invariant-types.rs:23:5\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n    |                        ---- lifetime `'new` defined here\n@@ -47,7 +47,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:17:5\n+  --> $DIR/variance-btree-invariant-types.rs:29:5\n    |\n LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n    |                      ---- lifetime `'new` defined here\n@@ -59,7 +59,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:20:5\n+  --> $DIR/variance-btree-invariant-types.rs:34:5\n    |\n LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n    |                      ---- lifetime `'new` defined here\n@@ -71,7 +71,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:23:5\n+  --> $DIR/variance-btree-invariant-types.rs:39:5\n    |\n LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n    |                         ---- lifetime `'new` defined here\n@@ -83,7 +83,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:26:5\n+  --> $DIR/variance-btree-invariant-types.rs:44:5\n    |\n LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n    |                         ---- lifetime `'new` defined here\n@@ -95,7 +95,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:31:5\n+  --> $DIR/variance-btree-invariant-types.rs:51:5\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -108,7 +108,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:35:5\n+  --> $DIR/variance-btree-invariant-types.rs:57:5\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -121,7 +121,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:39:5\n+  --> $DIR/variance-btree-invariant-types.rs:63:5\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -134,7 +134,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:43:5\n+  --> $DIR/variance-btree-invariant-types.rs:69:5\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -147,7 +147,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:48:5\n+  --> $DIR/variance-btree-invariant-types.rs:76:5\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -160,7 +160,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:52:5\n+  --> $DIR/variance-btree-invariant-types.rs:82:5\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -173,7 +173,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:56:5\n+  --> $DIR/variance-btree-invariant-types.rs:88:5\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -186,7 +186,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:60:5\n+  --> $DIR/variance-btree-invariant-types.rs:94:5\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here"}, {"sha": "7ddf6b294a5a19221c1c6f8d04f4b717ec677316", "filename": "src/test/ui/variance/variance-btree-invariant-types.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,63 +1,99 @@\n use std::collections::btree_map::{IterMut, OccupiedEntry, RangeMut, VacantEntry};\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n                          -> OccupiedEntry<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n                          -> OccupiedEntry<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n                             -> OccupiedEntry<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n                             -> OccupiedEntry<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n                          -> VacantEntry<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n                          -> VacantEntry<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n                             -> VacantEntry<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n                             -> VacantEntry<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n "}, {"sha": "e3180b6d984765246735070b4a71b4fb7a58e05b", "filename": "src/test/ui/variance/variance-cell-is-invariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/variance-cell-is-invariant.rs:14:25\n+  --> $DIR/variance-cell-is-invariant.rs:18:25\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |                          ----------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/variance/variance-cell-is-invariant.stderr"}, {"sha": "c2e93d99c43f04a5509026dc679e4331a2bf4cfa", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-cell-is-invariant.rs:14:12\n+  --> $DIR/variance-cell-is-invariant.rs:18:12\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "b8b73147d0eea58d5fa06e70b363acbbf75d01ae", "filename": "src/test/ui/variance/variance-cell-is-invariant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,6 +1,10 @@\n // Test that Cell is considered invariant with respect to its\n // type.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::cell::Cell;\n \n struct Foo<'a> {\n@@ -11,7 +15,9 @@ fn use_<'short,'long>(c: Foo<'short>,\n                       s: &'short isize,\n                       l: &'long isize,\n                       _where:Option<&'short &'long ()>) {\n-    let _: Foo<'long> = c; //~ ERROR E0623\n+    let _: Foo<'long> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "19b8b9d5aa05cf586329f275587a90b170bfc6ea", "filename": "src/test/ui/variance/variance-contravariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-object.rs:14:5\n+  --> $DIR/variance-contravariant-arg-object.rs:18:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-object.rs:10:21\n+  --> $DIR/variance-contravariant-arg-object.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-object.rs:10:27\n+  --> $DIR/variance-contravariant-arg-object.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-object.rs:22:5\n+  --> $DIR/variance-contravariant-arg-object.rs:28:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-object.rs:17:21\n+  --> $DIR/variance-contravariant-arg-object.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-object.rs:17:27\n+  --> $DIR/variance-contravariant-arg-object.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-arg-object.stderr"}, {"sha": "4071a41703e2820f97a0f1ba0d3af33adbd2980c", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-object.rs:14:5\n+  --> $DIR/variance-contravariant-arg-object.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-object.rs:22:5\n+  --> $DIR/variance-contravariant-arg-object.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "dab42c35218bf6168392d888261404620eb01e9f", "filename": "src/test/ui/variance/variance-contravariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self, t: T);\n }\n@@ -11,15 +15,19 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n                                 -> Box<dyn Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n     // Previously OK:\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "56cf84590107c60a876fc76146ae639002369d8b", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:17:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:10:21\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:10:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:27:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:16:21\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:16:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.stderr"}, {"sha": "6ca8f5ed4cce6581f2863e93628fa651fe8d9f80", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:17:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:27:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "11513d5411cfba8f8d269fe9ae16239725d33356", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,22 +3,30 @@\n // Test that even when `T` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self, t: T);\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n     // Previously OK, but now an error because traits are invariant:\n \n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "2ccab2ee5f089df76f129514d52b62b0e078ea33", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:17:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:10:21\n+  --> $DIR/variance-contravariant-self-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-self-trait-match.rs:10:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:16:21\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-self-trait-match.rs:16:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-self-trait-match.stderr"}, {"sha": "d2c549b1f715daa85c5c18657f188f32597836a7", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-self-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:17:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "f8d7c68fafe73a13d8418940b59abfce4c7d3807", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,14 +3,20 @@\n // Test that even when `Self` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get(&self);\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'max G : Get\n {\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n@@ -19,7 +25,9 @@ fn get_max_from_min<'min, 'max, G>()\n     // Previously OK, but now error because traits are invariant with\n     // respect to all inputs.\n \n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "3a97875fe0ec07433301a0256c40e69bc8bf0d31", "filename": "src/test/ui/variance/variance-covariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-object.rs:11:5\n+  --> $DIR/variance-covariant-arg-object.rs:19:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-object.rs:7:21\n+  --> $DIR/variance-covariant-arg-object.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-object.rs:7:27\n+  --> $DIR/variance-covariant-arg-object.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-object.rs:18:5\n+  --> $DIR/variance-covariant-arg-object.rs:28:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-object.rs:14:21\n+  --> $DIR/variance-covariant-arg-object.rs:24:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-object.rs:14:27\n+  --> $DIR/variance-covariant-arg-object.rs:24:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-arg-object.stderr"}, {"sha": "1b2ec61825f8f75001f799c946996464bd1d3c13", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-object.rs:15:5\n+  --> $DIR/variance-covariant-arg-object.rs:19:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-object.rs:22:5\n+  --> $DIR/variance-covariant-arg-object.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "20f74a3987e126c3ae36c22f66792f817367f532", "filename": "src/test/ui/variance/variance-covariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self) -> T;\n }\n@@ -12,14 +16,18 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n     where 'max : 'min\n {\n     // Previously OK, now an error as traits are invariant.\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "1749a871230cffca3e49b01e8f9883f3815d6b93", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:10:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:18:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:7:21\n+  --> $DIR/variance-covariant-arg-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-trait-match.rs:7:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:13:21\n+  --> $DIR/variance-covariant-arg-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-trait-match.rs:13:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-arg-trait-match.stderr"}, {"sha": "870af48b3e92ac8961af73950d3ffb5b84ac4870", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "d3d66d3fc4ba13820d203628bcacd6ddf23f7102", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self) -> T;\n }\n@@ -11,13 +15,17 @@ fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n     // Previously OK, now an error as traits are invariant.\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "94afc010e2134d9fe1440726162866bbc5b361bb", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:18:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-self-trait-match.rs:10:21\n+  --> $DIR/variance-covariant-self-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-self-trait-match.rs:10:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-self-trait-match.rs:17:21\n+  --> $DIR/variance-covariant-self-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-self-trait-match.rs:17:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-self-trait-match.stderr"}, {"sha": "14da2d2a552dbdce957cd08a21a5ca68f09d0d60", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-self-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "ece450173ca8d553750608cdf4171124db494ec8", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `Self` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get() -> Self;\n }\n@@ -11,13 +15,17 @@ fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'max G : Get\n {\n     // Previously OK, now an error as traits are invariant.\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'min G : Get\n {\n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "ec9271e902fed39a490aaba39673b230a5cbc531", "filename": "src/test/ui/variance/variance-invariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-object.rs:15:5\n+  --> $DIR/variance-invariant-arg-object.rs:15:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-object.rs:10:21\n+  --> $DIR/variance-invariant-arg-object.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-object.rs:10:27\n+  --> $DIR/variance-invariant-arg-object.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-object.rs:22:5\n+  --> $DIR/variance-invariant-arg-object.rs:24:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-object.rs:18:21\n+  --> $DIR/variance-invariant-arg-object.rs:20:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-object.rs:18:27\n+  --> $DIR/variance-invariant-arg-object.rs:20:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-arg-object.stderr"}, {"sha": "47364f426566346eac6e67feb313e83da291616d", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-object.rs:11:5\n+  --> $DIR/variance-invariant-arg-object.rs:15:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-object.rs:18:5\n+  --> $DIR/variance-invariant-arg-object.rs:24:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "cc8820fbac69e97b79edda9118611cb8e36a638f", "filename": "src/test/ui/variance/variance-invariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,9 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self, t: T) -> T;\n }\n@@ -8,14 +12,18 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n                                 -> Box<dyn Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "fe284682153992c19a35c7f2f82f52e288e62877", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:14:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:14:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:10:21\n+  --> $DIR/variance-invariant-arg-trait-match.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-trait-match.rs:10:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:17:21\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-trait-match.rs:17:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-arg-trait-match.stderr"}, {"sha": "74d2745cbbea8916179030ba2b67e77d57a0f311", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:14:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "498dd574bb38148374711d60a846440372fdac2e", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,19 +1,27 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self, t: T) -> T;\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "a2589f0ceee9b0b99ae1c9f5c2d139d8857bb7fa", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:14:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-self-trait-match.rs:7:21\n+  --> $DIR/variance-invariant-self-trait-match.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-self-trait-match.rs:7:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-self-trait-match.rs:13:21\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-self-trait-match.rs:13:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-self-trait-match.stderr"}, {"sha": "9d16e89450d786ff7189e40e5f443ad9a8ded6c9", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-self-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:14:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-self-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "0f3176b14b44d1f3fae2cdf1ca4d84a859bbafef", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,19 +1,27 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get(&self) -> Self;\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, &'max G : Get, G : 'max\n {\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, &'min G : Get, G : 'min\n {\n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "8872620e38aef5eabca37363bce90ba13446c45c", "filename": "src/test/ui/variance/variance-trait-matching.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `get`\n-  --> $DIR/variance-trait-matching.rs:24:5\n+  --> $DIR/variance-trait-matching.rs:28:5\n    |\n LL | fn get<'a, G>(get: &G) -> i32\n    |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`", "previous_filename": "src/test/ui/variance/variance-trait-matching.stderr"}, {"sha": "52c5eed3167cd31aa46eb06f5bdec680700e9b4d", "filename": "src/test/ui/variance/variance-trait-matching.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `get`\n-  --> $DIR/variance-trait-matching.rs:24:5\n+  --> $DIR/variance-trait-matching.rs:28:5\n    |\n LL | fn get<'a, G>(get: &G) -> i32\n    |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`"}, {"sha": "993db93533e2746eefc83b41475b8b92703e6c27", "filename": "src/test/ui/variance/variance-trait-matching.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,9 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Get<T> is covariant in T\n trait Get<T> {\n     fn get(&self) -> T;"}, {"sha": "a354aa52b5c7e36786a31d1f45474f71f7226e60", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-contravariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-contravariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-contravariant-struct-1.rs:8:8\n+  --> $DIR/variance-use-contravariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-contravariant-struct-1.rs:8:13\n+  --> $DIR/variance-use-contravariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-contravariant-struct-1.stderr"}, {"sha": "9549a8c08af615cac99b894268b123cb671d9dff", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-contravariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-contravariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "b55f5e76775ef4330c8ea8bec1ef4aaf8e193477", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,15 +1,19 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n struct SomeStruct<T>(fn(T));\n \n fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n                   -> SomeStruct<&'min ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "542d44c27093db4236f67d3bd960dc883a786820", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-covariant-struct-1.rs:10:5\n+  --> $DIR/variance-use-covariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-covariant-struct-1.rs:6:8\n+  --> $DIR/variance-use-covariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-covariant-struct-1.rs:6:13\n+  --> $DIR/variance-use-covariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-covariant-struct-1.stderr"}, {"sha": "2fac827a0fb1f68ea00a52712dac982c989c1e97", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-covariant-struct-1.rs:10:5\n+  --> $DIR/variance-use-covariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "3e3e76d9792c29f88ab2ab06ff5d3134eba934a8", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,13 +1,19 @@\n // Test that a covariant struct does not permit the lifetime of a\n // reference to be enlarged.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct SomeStruct<T>(T);\n \n fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n                   -> SomeStruct<&'max ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "02b4e91f781e5cbf579e24e06cedbd4ed4eec8ab", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-invariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-invariant-struct-1.rs:8:8\n+  --> $DIR/variance-use-invariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-invariant-struct-1.rs:8:13\n+  --> $DIR/variance-use-invariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |             ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-use-invariant-struct-1.rs:19:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:23:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-invariant-struct-1.rs:15:8\n+  --> $DIR/variance-use-invariant-struct-1.rs:19:8\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-invariant-struct-1.rs:15:13\n+  --> $DIR/variance-use-invariant-struct-1.rs:19:13\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-invariant-struct-1.stderr"}, {"sha": "e8460a388fcabae0f4ab835c83a93f2b990a8296", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-invariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ---- ---- lifetime `'max` defined here\n@@ -15,7 +15,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-use-invariant-struct-1.rs:19:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:23:5\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "7be03514e01a9bbb20ae3dfb88bb476a7b3a0ba6", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,22 +1,28 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n struct SomeStruct<T>(*mut T);\n \n fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n                   -> SomeStruct<&'min ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n                   -> SomeStruct<&'max ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "e47920d3dfcf8d5496568fa1cf3d3fccdf110693", "filename": "src/test/ui/wf/wf-const-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,6 +10,10 @@ note: required by a bound in `IsCopy`\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n    |                 ^^^^ required by this bound in `IsCopy`\n+help: consider annotating `NotCopy` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "186ab2790a3983a887390c1f251f67734ce426c1", "filename": "src/test/ui/wf/wf-static-method.base.stderr", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,131 +1,131 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/wf-static-method.rs:17:9\n+  --> $DIR/wf-static-method.rs:21:9\n    |\n LL |         u\n    |         ^\n    |\n note: ...the reference is valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:14:6\n+  --> $DIR/wf-static-method.rs:18:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      ^^\n note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:14:10\n+  --> $DIR/wf-static-method.rs:18:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |          ^^\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/wf-static-method.rs:26:18\n+  --> $DIR/wf-static-method.rs:32:18\n    |\n LL |         let me = Self::make_me();\n    |                  ^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:23:10\n+  --> $DIR/wf-static-method.rs:29:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |          ^^\n note: but lifetime parameter must outlive the lifetime `'a` as defined here\n-  --> $DIR/wf-static-method.rs:23:6\n+  --> $DIR/wf-static-method.rs:29:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |      ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/wf-static-method.rs:33:9\n+  --> $DIR/wf-static-method.rs:41:9\n    |\n LL |         u\n    |         ^\n    |\n note: ...the reference is valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:31:6\n+  --> $DIR/wf-static-method.rs:39:6\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      ^^\n note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:31:10\n+  --> $DIR/wf-static-method.rs:39:10\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |          ^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:40:13\n+  --> $DIR/wf-static-method.rs:50:13\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |             ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:41:23\n+  --> $DIR/wf-static-method.rs:51:23\n    |\n LL |     <()>::static_evil(b)\n    |                       ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:40:9\n+  --> $DIR/wf-static-method.rs:50:9\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:44:22\n+  --> $DIR/wf-static-method.rs:56:22\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:45:33\n+  --> $DIR/wf-static-method.rs:57:33\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |                                 ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:44:18\n+  --> $DIR/wf-static-method.rs:56:18\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL |     <Evil>::inherent_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:49:22\n+  --> $DIR/wf-static-method.rs:62:22\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:50:27\n+  --> $DIR/wf-static-method.rs:63:27\n    |\n LL |     <Evil>::inherent_evil(b)\n    |                           ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:49:18\n+  --> $DIR/wf-static-method.rs:62:18\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL |     <Evil>::inherent_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/wf/wf-static-method.stderr"}, {"sha": "7556d8e694d5a26ae981bc86956dff4e32719e44", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:17:9\n+  --> $DIR/wf-static-method.rs:21:9\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |         u\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:26:18\n+  --> $DIR/wf-static-method.rs:32:18\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |      --  -- lifetime `'b` defined here\n@@ -25,7 +25,7 @@ LL |         let me = Self::make_me();\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:33:9\n+  --> $DIR/wf-static-method.rs:41:9\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      --  -- lifetime `'b` defined here\n@@ -38,7 +38,7 @@ LL |         u\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         --  -- lifetime `'b` defined here\n@@ -50,7 +50,7 @@ LL |     <()>::static_evil(b)\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  --  -- lifetime `'b` defined here\n@@ -62,7 +62,7 @@ LL |     <IndirectEvil>::static_evil(b)\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  --  -- lifetime `'b` defined here"}, {"sha": "83557ce667bf6964bee0f7155d75700c107164af", "filename": "src/test/ui/wf/wf-static-method.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -4,6 +4,10 @@\n // static inherent methods isn't quite working - need to\n // fix that before removing the check.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a, 'b, T>: Sized {\n     fn make_me() -> Self { loop {} }\n     fn static_evil(u: &'b u32) -> &'a u32;\n@@ -14,7 +18,9 @@ struct Evil<'a, 'b: 'a>(Option<&'a &'b ()>);\n impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n     fn make_me() -> Self { }\n     fn static_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR E0312\n+        u\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n@@ -23,32 +29,40 @@ struct IndirectEvil<'a, 'b: 'a>(Option<&'a &'b ()>);\n impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n     fn make_me() -> Self { IndirectEvil(None) }\n     fn static_evil(u: &'b u32) -> &'a u32 {\n-        let me = Self::make_me(); //~ ERROR lifetime bound not satisfied\n+        let me = Self::make_me();\n+        //[base]~^ ERROR lifetime bound not satisfied\n+        //[nll]~^^ ERROR lifetime may not live long enough\n         loop {} // (`me` could be used for the lifetime transmute).\n     }\n }\n \n impl<'a, 'b> Evil<'a, 'b> {\n     fn inherent_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR E0312\n+        u\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n // while static methods don't get to *assume* this, we still\n // *check* that they hold.\n \n fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n-    <()>::static_evil(b) //~ ERROR cannot infer an appropriate lifetime\n+    <()>::static_evil(b)\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n     <IndirectEvil>::static_evil(b)\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n     <Evil>::inherent_evil(b)\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "4ae69cf2e1ff8bf456e7f100883a33499624574a", "filename": "src/test/ui/wf/wf-static-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -10,6 +10,10 @@ note: required by a bound in `IsCopy`\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n    |                 ^^^^ required by this bound in `IsCopy`\n+help: consider annotating `NotCopy` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c13552bc26eee730aba31adce9137ebcfc8bc9b6", "filename": "src/test/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -11,6 +11,10 @@ note: required by a bound in `Foo::<T>::equals`\n    |\n LL |     fn equals(&self, u: &Foo<T>) -> bool where T : Eq {\n    |                                                    ^^ required by this bound in `Foo::<T>::equals`\n+help: consider annotating `Bar` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b1805a4522f4d1ff27e634699729d261d685017f", "filename": "src/test/ui/where-clauses/where-clauses-unsatisfied.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -9,6 +9,10 @@ note: required by a bound in `equal`\n    |\n LL | fn equal<T>(a: &T, b: &T) -> bool where T : Eq { a == b }\n    |                                             ^^ required by this bound in `equal`\n+help: consider annotating `Struct` with `#[derive(Eq)]`\n+   |\n+LL | #[derive(Eq)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c09610cd696828892fe77b282da75a457dab73e1", "filename": "src/test/ui/where-clauses/where-for-self-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/where-for-self-2.rs:23:5\n+  --> $DIR/where-for-self-2.rs:27:5\n    |\n LL |     foo(&X);\n    |     ^^^ implementation of `Bar` is not general enough", "previous_filename": "src/test/ui/where-clauses/where-for-self-2.stderr"}, {"sha": "92d1b2121a6b254c90a535efdf8cecc269deaeed", "filename": "src/test/ui/where-clauses/where-for-self-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/where-for-self-2.rs:23:5\n+  --> $DIR/where-for-self-2.rs:27:5\n    |\n LL |     foo(&X);\n    |     ^^^^^^^ implementation of `Bar` is not general enough"}, {"sha": "4e4e0ec912ea1f43f350011d97093c7a16daa58c", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62d2106da564d221544119f3c268a6ee756803f/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -3,6 +3,10 @@\n // specific lifetime is not enough to satisfy the `for<'a> ...` constraint, which\n // should require *all* lifetimes.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n static X: &'static u32 = &42;\n \n trait Bar {"}, {"sha": "46d7ee68f26285db26b2640f2c07d6332380c756", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=c62d2106da564d221544119f3c268a6ee756803f", "patch": "@@ -1 +1 @@\n-Subproject commit bc08b8eff3f8e4da7c448d7b7f6461938c817a60\n+Subproject commit 46d7ee68f26285db26b2640f2c07d6332380c756"}]}