{"sha": "e5b6fab5768d3e2079c3a06e4206d3a199507be4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjZmYWI1NzY4ZDNlMjA3OWMzYTA2ZTQyMDZkM2ExOTk1MDdiZTQ=", "commit": {"author": {"name": "LooMaclin", "email": "loo.maclin@protonmail.com", "date": "2019-04-08T21:39:57Z"}, "committer": {"name": "LooMaclin", "email": "loo.maclin@protonmail.com", "date": "2019-04-08T21:39:57Z"}, "message": "Improve miri's error reporting in check_in_alloc", "tree": {"sha": "865672d1b4a186a3eee2d153287221ecd911faf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/865672d1b4a186a3eee2d153287221ecd911faf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b6fab5768d3e2079c3a06e4206d3a199507be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b6fab5768d3e2079c3a06e4206d3a199507be4", "html_url": "https://github.com/rust-lang/rust/commit/e5b6fab5768d3e2079c3a06e4206d3a199507be4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b6fab5768d3e2079c3a06e4206d3a199507be4/comments", "author": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "980db98b6440779ed714e454f544faf707b2ab9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/980db98b6440779ed714e454f544faf707b2ab9c", "html_url": "https://github.com/rust-lang/rust/commit/980db98b6440779ed714e454f544faf707b2ab9c"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "6475eac41e3a0931486b2f413b251cef45ff9578", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e5b6fab5768d3e2079c3a06e4206d3a199507be4/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b6fab5768d3e2079c3a06e4206d3a199507be4/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=e5b6fab5768d3e2079c3a06e4206d3a199507be4", "patch": "@@ -20,7 +20,7 @@ use syntax::ast::Mutability;\n use super::{\n     Pointer, AllocId, Allocation, GlobalId, AllocationExtra,\n     EvalResult, Scalar, InterpError, AllocKind, PointerArithmetic,\n-    Machine, AllocMap, MayLeak, ErrorHandled, CheckInAllocMsg,\n+    Machine, AllocMap, MayLeak, ErrorHandled, CheckInAllocMsg, InboundsCheck,\n };\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n@@ -252,7 +252,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             Scalar::Ptr(ptr) => {\n                 // check this is not NULL -- which we can ensure only if this is in-bounds\n                 // of some (potentially dead) allocation.\n-                let align = self.check_bounds_ptr(ptr, CheckInAllocMsg::NullPointer)?;\n+                let align = self.check_bounds_ptr(ptr, InboundsCheck::MaybeDead, CheckInAllocMsg::NullPointer)?;\n                 (ptr.offset.bytes(), align)\n             }\n             Scalar::Bits { bits, size } => {\n@@ -292,9 +292,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     pub fn check_bounds_ptr(\n         &self,\n         ptr: Pointer<M::PointerTag>,\n+        liveness: InboundsCheck,\n         msg: CheckInAllocMsg,\n     ) -> EvalResult<'tcx, Align> {\n-        let (allocation_size, align) = self.get_size_and_align(ptr.alloc_id, msg)?;\n+        let (allocation_size, align) = self.get_size_and_align(ptr.alloc_id, liveness)?;\n         ptr.check_in_alloc(allocation_size, msg)?;\n         Ok(align)\n     }\n@@ -419,11 +420,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     /// Obtain the size and alignment of an allocation, even if that allocation has been deallocated\n     ///\n-    /// If `liveness` is `InboundsCheck::Dead`, this function always returns `Ok`\n+    /// If `liveness` is `InboundsCheck::MaybeDead`, this function always returns `Ok`\n     pub fn get_size_and_align(\n         &self,\n         id: AllocId,\n-        msg: CheckInAllocMsg,\n+        liveness: InboundsCheck,\n     ) -> EvalResult<'static, (Size, Align)> {\n         if let Ok(alloc) = self.get(id) {\n             return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n@@ -439,8 +440,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n                 Ok((layout.size, layout.align.abi))\n             }\n-            _ => match msg {\n-                CheckInAllocMsg::NullPointer | CheckInAllocMsg::OutOfBounds => {\n+            _ => match liveness {\n+                InboundsCheck::MaybeDead => {\n                     // Must be a deallocated pointer\n                     Ok(*self.dead_alloc_map.get(&id).expect(\n                         \"allocation missing in dead_alloc_map\""}, {"sha": "38fe1caa41f60b120e38dd0868f417a5f84e07ad", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b6fab5768d3e2079c3a06e4206d3a199507be4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b6fab5768d3e2079c3a06e4206d3a199507be4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=e5b6fab5768d3e2079c3a06e4206d3a199507be4", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerEx\n use rustc::mir::interpret::{\n     GlobalId, AllocId, CheckInAllocMsg,\n     ConstValue, Pointer, Scalar,\n-    EvalResult, InterpError,\n+    EvalResult, InterpError, InboundsCheck,\n     sign_extend, truncate,\n };\n use super::{\n@@ -667,7 +667,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                     ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr)) => {\n                         // The niche must be just 0 (which an inbounds pointer value never is)\n                         let ptr_valid = niche_start == 0 && variants_start == variants_end &&\n-                            self.memory.check_bounds_ptr(ptr,\n+                            self.memory.check_bounds_ptr(ptr, InboundsCheck::MaybeDead,\n                                                          CheckInAllocMsg::OutOfBounds).is_ok();\n                         if !ptr_valid {\n                             return err!(InvalidDiscriminant(raw_discr.erase_tag()));"}]}