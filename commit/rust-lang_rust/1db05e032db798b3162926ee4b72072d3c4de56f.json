{"sha": "1db05e032db798b3162926ee4b72072d3c4de56f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjA1ZTAzMmRiNzk4YjMxNjI5MjZlZTRiNzIwNzJkM2M0ZGU1NmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-02T01:21:15Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-02T01:22:01Z"}, "message": "Add various `min_const_generics` regression tests", "tree": {"sha": "9affc7d1b0c5c1ec3c2bb8677370c427c768e352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9affc7d1b0c5c1ec3c2bb8677370c427c768e352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db05e032db798b3162926ee4b72072d3c4de56f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db05e032db798b3162926ee4b72072d3c4de56f", "html_url": "https://github.com/rust-lang/rust/commit/1db05e032db798b3162926ee4b72072d3c4de56f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db05e032db798b3162926ee4b72072d3c4de56f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0801263279bbd44b7dbe88d5039a6b810a037f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0801263279bbd44b7dbe88d5039a6b810a037f3b", "html_url": "https://github.com/rust-lang/rust/commit/0801263279bbd44b7dbe88d5039a6b810a037f3b"}], "stats": {"total": 296, "additions": 296, "deletions": 0}, "files": [{"sha": "354630ae878967fe3acee862fd4f8c90d8ae59a2", "filename": "src/test/ui/const-generics/min_const_generics/const-argument-if-length.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,18 @@\n+#![feature(min_const_generics)]\n+\n+pub const fn is_zst<T: ?Sized>() -> usize {\n+    if std::mem::size_of::<T>() == 0 {\n+        1\n+    } else {\n+        0\n+    }\n+}\n+\n+pub struct AtLeastByte<T: ?Sized> {\n+    value: T,\n+    //~^ ERROR the size for values of type `T` cannot be known at compilation time\n+    pad: [u8; is_zst::<T>()],\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+}\n+\n+fn main() {}"}, {"sha": "a5bd3ab274836c04916aa78680b60efcedf272c9", "filename": "src/test/ui/const-generics/min_const_generics/const-argument-if-length.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.stderr?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,30 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/const-argument-if-length.rs:14:24\n+   |\n+LL |     pad: [u8; is_zst::<T>()],\n+   |                        ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/const-argument-if-length.rs:12:12\n+   |\n+LL | pub struct AtLeastByte<T: ?Sized> {\n+   |                        - this type parameter needs to be `Sized`\n+LL |     value: T,\n+   |            ^ doesn't have a size known at compile-time\n+   |\n+   = note: only the last field of a struct may have a dynamically sized type\n+   = help: change the field's type to have a statically known size\n+help: borrowed types always have a statically known size\n+   |\n+LL |     value: &T,\n+   |            ^\n+help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |\n+LL |     value: Box<T>,\n+   |            ^^^^ ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "c52f402294203a8d6c502fa42c525de464db65fe", "filename": "src/test/ui/const-generics/min_const_generics/generic-function-call-in-array-length.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,11 @@\n+#![feature(min_const_generics)]\n+\n+const fn foo(n: usize) -> usize { n * 2 }\n+\n+fn bar<const N: usize>() -> [u32; foo(N)] {\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    [0; foo(N)]\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+}\n+\n+fn main() {}"}, {"sha": "de7e5fe47283e65f8c0d36df0e13df73fd9a3dd0", "filename": "src/test/ui/const-generics/min_const_generics/generic-sum-in-array-length.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,7 @@\n+#![feature(min_const_generics)]\n+\n+fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//~| ERROR generic parameters must not be used inside of non trivial constant values\n+\n+fn main() {}"}, {"sha": "45d0ba985a48ac63e998fc0345b247e782362b9b", "filename": "src/test/ui/const-generics/min_const_generics/generic-sum-in-array-length.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.stderr?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/generic-sum-in-array-length.rs:3:53\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                                     ^ non-trivial anonymous constants must not depend on the parameter `A`\n+   |\n+   = help: it is currently only allowed to use either `A` or `{ A }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/generic-sum-in-array-length.rs:3:57\n+   |\n+LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n+   |                                                         ^ non-trivial anonymous constants must not depend on the parameter `B`\n+   |\n+   = help: it is currently only allowed to use either `B` or `{ B }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "167a3f23c4c40d2766dacb4190dceac433ae31cc", "filename": "src/test/ui/const-generics/min_const_generics/intrinsics-type_name-as-const-argument.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,15 @@\n+#![feature(min_const_generics)]\n+#![feature(core_intrinsics)]\n+\n+trait Trait<const S: &'static str> {}\n+//~^ ERROR `&'static str` is forbidden as the type of a const generic parameter\n+\n+struct Bug<T>\n+where\n+    T: Trait<{std::intrinsics::type_name::<T>()}>\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+{\n+    t: T\n+}\n+\n+fn main() {}"}, {"sha": "07147da1117a37ba2ad8330ed7e372b9075daa66", "filename": "src/test/ui/const-generics/min_const_generics/intrinsics-type_name-as-const-argument.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.stderr?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,19 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:9:44\n+   |\n+LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n+   |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: `&'static str` is forbidden as the type of a const generic parameter\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:4:22\n+   |\n+LL | trait Trait<const S: &'static str> {}\n+   |                      ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "77ff10070e9712184289f7c571b6e48403df7244", "filename": "src/test/ui/const-generics/min_const_generics/issue-67375.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,9 @@\n+#![feature(min_const_generics)]\n+\n+struct Bug<T> {\n+    //~^ ERROR parameter `T` is never used\n+    inner: [(); { [|_: &T| {}; 0].len() }],\n+    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+}\n+\n+fn main() {}"}, {"sha": "345bdedfcb3e5e8cab68e4dfb1c917596e39e2f1", "filename": "src/test/ui/const-generics/min_const_generics/issue-67375.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.stderr?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,19 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-67375.rs:5:25\n+   |\n+LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n+   |                         ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/issue-67375.rs:3:12\n+   |\n+LL | struct Bug<T> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "cb1c900eb4fa88f66319a1920b84f98ec56399d5", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,18 @@\n+#![feature(min_const_generics)]\n+\n+use std::marker::PhantomData;\n+\n+use std::mem::{self, MaybeUninit};\n+\n+struct Bug<S> {\n+    //~^ ERROR parameter `S` is never used\n+    A: [(); {\n+        let x: S = MaybeUninit::uninit();\n+        //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+        let b = &*(&x as *const _ as *const S);\n+        //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+        0\n+    }],\n+}\n+\n+fn main() {}"}, {"sha": "a9a4fda8a479bd5c08858acc198a4a6641a11b0f", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-1.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.stderr?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,27 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-67945-1.rs:10:16\n+   |\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-67945-1.rs:12:45\n+   |\n+LL |         let b = &*(&x as *const _ as *const S);\n+   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-1.rs:7:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "4b0799dce1eb5f008083762ac89ee9125fab8f2f", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,16 @@\n+#![feature(min_const_generics)]\n+\n+use std::mem::MaybeUninit;\n+\n+struct Bug<S> {\n+    //~^ ERROR parameter `S` is never used\n+    A: [(); {\n+        let x: S = MaybeUninit::uninit();\n+        //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+        let b = &*(&x as *const _ as *const S);\n+        //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+        0\n+    }],\n+}\n+\n+fn main() {}"}, {"sha": "8c40dc0eade80f674f90bfe464f73ac656ef8094", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-2.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.stderr?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,27 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-67945-2.rs:8:16\n+   |\n+LL |         let x: S = MaybeUninit::uninit();\n+   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-67945-2.rs:10:45\n+   |\n+LL |         let b = &*(&x as *const _ as *const S);\n+   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |\n+   = note: type parameters are currently not permitted in anonymous constants\n+\n+error[E0392]: parameter `S` is never used\n+  --> $DIR/issue-67945-2.rs:5:12\n+   |\n+LL | struct Bug<S> {\n+   |            ^ unused parameter\n+   |\n+   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "cde7200458e21292d2860e95c03e6b15a3581bea", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-3.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,12 @@\n+#![feature(min_const_generics)]\n+\n+struct Bug<S: ?Sized> {\n+    A: [(); {\n+        let x: Option<Box<Self>> = None;\n+        //~^ ERROR generic `Self` types are currently not permitted in anonymous constants\n+        0\n+    }],\n+    B: S\n+}\n+\n+fn main() {}"}, {"sha": "c5f919302dc858061d1f03b443259ffc42c3e432", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-3.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-3.stderr?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,8 @@\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/issue-67945-3.rs:5:27\n+   |\n+LL |         let x: Option<Box<Self>> = None;\n+   |                           ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0ef17109bed40333528f57bc90f1cbb6181a53b5", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,8 @@\n+#![feature(min_const_generics)]\n+\n+fn a<const X: &'static [u32]>() {}\n+//~^ ERROR `&'static [u32]` is forbidden as the type of a const generic parameter\n+\n+fn main() {\n+    a::<{&[]}>();\n+}"}, {"sha": "cc32d8a67fed01fac7e9a9294be521b149d2606c", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,11 @@\n+error: `&'static [u32]` is forbidden as the type of a const generic parameter\n+  --> $DIR/static-reference-array-const-param.rs:3:15\n+   |\n+LL | fn a<const X: &'static [u32]>() {}\n+   |               ^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "dfa1ece2f36578df3095ed52b37a4bce8136f347", "filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,12 @@\n+#![feature(min_const_generics)]\n+\n+struct Const<const P: &'static ()>;\n+//~^ ERROR `&'static ()` is forbidden as the type of a const generic parameter\n+\n+fn main() {\n+    const A: &'static () = unsafe {\n+        std::mem::transmute(10 as *const ())\n+    };\n+\n+    let _ = Const::<{A}>;\n+}"}, {"sha": "063120ad074a0afe7c78a5e1d74d291c9926a330", "filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1db05e032db798b3162926ee4b72072d3c4de56f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr?ref=1db05e032db798b3162926ee4b72072d3c4de56f", "patch": "@@ -0,0 +1,11 @@\n+error: `&'static ()` is forbidden as the type of a const generic parameter\n+  --> $DIR/transmute-const-param-static-reference.rs:3:23\n+   |\n+LL | struct Const<const P: &'static ()>;\n+   |                       ^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}]}