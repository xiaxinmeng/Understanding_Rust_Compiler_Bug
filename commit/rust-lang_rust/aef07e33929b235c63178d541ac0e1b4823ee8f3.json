{"sha": "aef07e33929b235c63178d541ac0e1b4823ee8f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZjA3ZTMzOTI5YjIzNWM2MzE3OGQ1NDFhYzBlMWI0ODIzZWU4ZjM=", "commit": {"author": {"name": "bootandy", "email": "bootandy@gmail.com", "date": "2018-02-22T15:11:20Z"}, "committer": {"name": "bootandy", "email": "bootandy@gmail.com", "date": "2018-02-22T15:11:20Z"}, "message": "Do not pass Span by reference", "tree": {"sha": "e7ef122075206452724f3819379fad0170edcaea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ef122075206452724f3819379fad0170edcaea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef07e33929b235c63178d541ac0e1b4823ee8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef07e33929b235c63178d541ac0e1b4823ee8f3", "html_url": "https://github.com/rust-lang/rust/commit/aef07e33929b235c63178d541ac0e1b4823ee8f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef07e33929b235c63178d541ac0e1b4823ee8f3/comments", "author": {"login": "bootandy", "id": 311785, "node_id": "MDQ6VXNlcjMxMTc4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/311785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bootandy", "html_url": "https://github.com/bootandy", "followers_url": "https://api.github.com/users/bootandy/followers", "following_url": "https://api.github.com/users/bootandy/following{/other_user}", "gists_url": "https://api.github.com/users/bootandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/bootandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bootandy/subscriptions", "organizations_url": "https://api.github.com/users/bootandy/orgs", "repos_url": "https://api.github.com/users/bootandy/repos", "events_url": "https://api.github.com/users/bootandy/events{/privacy}", "received_events_url": "https://api.github.com/users/bootandy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bootandy", "id": 311785, "node_id": "MDQ6VXNlcjMxMTc4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/311785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bootandy", "html_url": "https://github.com/bootandy", "followers_url": "https://api.github.com/users/bootandy/followers", "following_url": "https://api.github.com/users/bootandy/following{/other_user}", "gists_url": "https://api.github.com/users/bootandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/bootandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bootandy/subscriptions", "organizations_url": "https://api.github.com/users/bootandy/orgs", "repos_url": "https://api.github.com/users/bootandy/repos", "events_url": "https://api.github.com/users/bootandy/events{/privacy}", "received_events_url": "https://api.github.com/users/bootandy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c97256dc5548576bbad7200cfb5ab4d4dc5ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c97256dc5548576bbad7200cfb5ab4d4dc5ed3", "html_url": "https://github.com/rust-lang/rust/commit/a7c97256dc5548576bbad7200cfb5ab4d4dc5ed3"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "a7bdd10ed669ae48852992a9ecdfc8866479f0c1", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aef07e33929b235c63178d541ac0e1b4823ee8f3/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef07e33929b235c63178d541ac0e1b4823ee8f3/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=aef07e33929b235c63178d541ac0e1b4823ee8f3", "patch": "@@ -744,7 +744,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     lint_unnecessary_fold(cx, expr, arglists[0]);\n                 }\n \n-                lint_or_fun_call(cx, expr, method_span, &method_call.name.as_str(), args);\n+                lint_or_fun_call(cx, expr, *method_span, &method_call.name.as_str(), args);\n \n                 let self_ty = cx.tables.expr_ty_adjusted(&args[0]);\n                 if args.len() == 1 && method_call.name == \"clone\" {\n@@ -845,7 +845,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n }\n \n /// Checks for the `OR_FUN_CALL` lint.\n-fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: &Span, name: &str, args: &[hir::Expr]) {\n+fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, name: &str, args: &[hir::Expr]) {\n     /// Check for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n     fn check_unwrap_or_default(\n         cx: &LateContext,\n@@ -894,7 +894,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: &Span, name\n     fn check_general_case(\n         cx: &LateContext,\n         name: &str,\n-        method_span: &Span,\n+        method_span: Span,\n         fun_span: Span,\n         self_expr: &hir::Expr,\n         arg: &hir::Expr,"}]}