{"sha": "ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMWEzZWZmZjAzYTE3YWY2ZjBmOGY5M2MwN2UzYWJlOTA1ODc2MmU=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-06-12T02:49:40Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-06-12T02:49:40Z"}, "message": "fix: backport fix for submod parser errors", "tree": {"sha": "224caf342f9b2ba799d83b93a10a381e9fca1165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224caf342f9b2ba799d83b93a10a381e9fca1165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "html_url": "https://github.com/rust-lang/rust/commit/ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dead3a807d6031972559c67ac5d30c61c50b0067", "url": "https://api.github.com/repos/rust-lang/rust/commits/dead3a807d6031972559c67ac5d30c61c50b0067", "html_url": "https://github.com/rust-lang/rust/commit/dead3a807d6031972559c67ac5d30c61c50b0067"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "28d111ba623ea89c700e853c4a6b7b2c4153e9be", "filename": "src/formatting.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "patch": "@@ -62,7 +62,7 @@ fn format_project<T: FormatHandler>(\n     let main_file = input.file_name();\n     let input_is_stdin = main_file == FileName::Stdin;\n \n-    let mut parse_session = ParseSess::new(config)?;\n+    let parse_session = ParseSess::new(config)?;\n     if config.skip_children() && parse_session.ignore_file(&main_file) {\n         return Ok(FormatReport::new());\n     }\n@@ -82,19 +82,19 @@ fn format_project<T: FormatHandler>(\n             return Ok(report);\n         }\n     };\n-    timer = timer.done_parsing();\n-\n-    // Suppress error output if we have to do any further parsing.\n-    parse_session.set_silent_emitter();\n \n     let mut context = FormatContext::new(&krate, report, parse_session, config, handler);\n     let files = modules::ModResolver::new(\n         &context.parse_session,\n         directory_ownership.unwrap_or(DirectoryOwnership::UnownedViaMod),\n         !input_is_stdin && !config.skip_children(),\n     )\n-    .visit_crate(&krate)\n-    .map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;\n+    .visit_crate(&krate)?;\n+\n+    timer = timer.done_parsing();\n+\n+    // Suppress error output if we have to do any further parsing.\n+    context.parse_session.set_silent_emitter();\n \n     for (path, module) in files {\n         let should_ignore = !input_is_stdin && context.ignore_file(&path);"}, {"sha": "cbe663cb412c3d61ae5f09f2fa5ffd5613be2d93", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "patch": "@@ -36,8 +36,8 @@ pub(crate) struct ModResolver<'ast, 'sess> {\n #[error(\"failed to resolve mod `{module}`: {kind}\")]\n #[derive(Debug, Error)]\n pub struct ModuleResolutionError {\n-    module: String,\n-    kind: ModuleResolutionErrorKind,\n+    pub(crate) module: String,\n+    pub(crate) kind: ModuleResolutionErrorKind,\n }\n \n #[derive(Debug, Error)]"}, {"sha": "decad02d0494070be3e3f3275e220cb4da5e17cd", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "patch": "@@ -119,7 +119,17 @@ impl<'a> Parser<'a> {\n             }\n         }));\n         match result {\n-            Ok(Some(m)) => Ok(m),\n+            Ok(Some(m)) => {\n+                if !sess.has_errors() {\n+                    return Ok(m);\n+                }\n+\n+                if sess.can_reset_errors() {\n+                    sess.reset_errors();\n+                    return Ok(m);\n+                }\n+                Err(ParserError::ParseError)\n+            }\n             Ok(None) => Err(ParserError::ParseError),\n             Err(..) if path.exists() => Err(ParserError::ParseError),\n             Err(_) => Err(ParserError::ParsePanicError),"}, {"sha": "57b5f2a78cd8e09dcb82473e548255ef2633c488", "filename": "src/test/mod.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "patch": "@@ -11,10 +11,12 @@ use std::thread;\n \n use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic};\n use crate::formatting::{ReportedErrors, SourceFile};\n-use crate::is_nightly_channel;\n+use crate::modules::{ModuleResolutionError, ModuleResolutionErrorKind};\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n use crate::source_file;\n-use crate::{FormatReport, FormatReportFormatterBuilder, Input, Session};\n+use crate::{\n+    is_nightly_channel, ErrorKind, FormatReport, FormatReportFormatterBuilder, Input, Session,\n+};\n \n mod configuration_snippet;\n \n@@ -483,6 +485,34 @@ fn format_lines_errors_are_reported_with_tabs() {\n     assert!(session.has_formatting_errors());\n }\n \n+#[test]\n+fn parser_errors_in_submods_are_surfaced() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/4126\n+    let filename = \"tests/parser/issue-4126/lib.rs\";\n+    let input_file = PathBuf::from(filename);\n+    let exp_mod_name = \"invalid\";\n+    let config = read_config(&input_file);\n+    let mut session = Session::<io::Stdout>::new(config, None);\n+    if let Err(ErrorKind::ModuleResolutionError(ModuleResolutionError { module, kind })) =\n+        session.format(Input::File(filename.into()))\n+    {\n+        assert_eq!(&module, exp_mod_name);\n+        if let ModuleResolutionErrorKind::ParseError {\n+            file: unparseable_file,\n+        } = kind\n+        {\n+            assert_eq!(\n+                unparseable_file,\n+                PathBuf::from(\"tests/parser/issue-4126/invalid.rs\"),\n+            );\n+        } else {\n+            panic!(\"Expected parser error\");\n+        }\n+    } else {\n+        panic!(\"Expected ModuleResolution operation error\");\n+    }\n+}\n+\n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<FormatReport>, u32, u32) {"}, {"sha": "7709c8484642d1b9703f53d388a5c277493ba27b", "filename": "tests/parser/issue-4126/invalid.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/tests%2Fparser%2Fissue-4126%2Finvalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/tests%2Fparser%2Fissue-4126%2Finvalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser%2Fissue-4126%2Finvalid.rs?ref=ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "patch": "@@ -0,0 +1,6 @@\n+fn foo() {\n+    if bar && if !baz {\n+        next_is_none = Some(true);\n+    }\n+    println!(\"foo\");\n+}"}, {"sha": "aac63e3557fea6498a40a441631968da1d2a825c", "filename": "tests/parser/issue-4126/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/tests%2Fparser%2Fissue-4126%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a3efff03a17af6f0f8f93c07e3abe9058762e/tests%2Fparser%2Fissue-4126%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser%2Fissue-4126%2Flib.rs?ref=ce1a3efff03a17af6f0f8f93c07e3abe9058762e", "patch": "@@ -0,0 +1 @@\n+mod invalid;"}]}