{"sha": "90ff2be4e820601a1d16ba5716916f7424dfa10d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZmYyYmU0ZTgyMDYwMWExZDE2YmE1NzE2OTE2Zjc0MjRkZmExMGQ=", "commit": {"author": {"name": "Toby Dimmick", "email": "tobydimmick@pm.me", "date": "2020-02-07T12:36:33Z"}, "committer": {"name": "Toby Dimmick", "email": "tobydimmick@pm.me", "date": "2020-02-07T12:36:33Z"}, "message": "PR tweaks", "tree": {"sha": "2267d5456f9f16ced879da399586d7802e933d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2267d5456f9f16ced879da399586d7802e933d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90ff2be4e820601a1d16ba5716916f7424dfa10d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90ff2be4e820601a1d16ba5716916f7424dfa10d", "html_url": "https://github.com/rust-lang/rust/commit/90ff2be4e820601a1d16ba5716916f7424dfa10d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90ff2be4e820601a1d16ba5716916f7424dfa10d/comments", "author": {"login": "tobz1000", "id": 1471978, "node_id": "MDQ6VXNlcjE0NzE5Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1471978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobz1000", "html_url": "https://github.com/tobz1000", "followers_url": "https://api.github.com/users/tobz1000/followers", "following_url": "https://api.github.com/users/tobz1000/following{/other_user}", "gists_url": "https://api.github.com/users/tobz1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobz1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobz1000/subscriptions", "organizations_url": "https://api.github.com/users/tobz1000/orgs", "repos_url": "https://api.github.com/users/tobz1000/repos", "events_url": "https://api.github.com/users/tobz1000/events{/privacy}", "received_events_url": "https://api.github.com/users/tobz1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tobz1000", "id": 1471978, "node_id": "MDQ6VXNlcjE0NzE5Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1471978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobz1000", "html_url": "https://github.com/tobz1000", "followers_url": "https://api.github.com/users/tobz1000/followers", "following_url": "https://api.github.com/users/tobz1000/following{/other_user}", "gists_url": "https://api.github.com/users/tobz1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobz1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobz1000/subscriptions", "organizations_url": "https://api.github.com/users/tobz1000/orgs", "repos_url": "https://api.github.com/users/tobz1000/repos", "events_url": "https://api.github.com/users/tobz1000/events{/privacy}", "received_events_url": "https://api.github.com/users/tobz1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0183952d2e1252a030aca3dafd8d7abe093be3a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0183952d2e1252a030aca3dafd8d7abe093be3a2", "html_url": "https://github.com/rust-lang/rust/commit/0183952d2e1252a030aca3dafd8d7abe093be3a2"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "7263c4d692837583ca47772d66ad667de1b87f7c", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ff2be4e820601a1d16ba5716916f7424dfa10d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ff2be4e820601a1d16ba5716916f7424dfa10d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=90ff2be4e820601a1d16ba5716916f7424dfa10d", "patch": "@@ -311,7 +311,7 @@ fn fn_def(p: &mut Parser) {\n     type_params::opt_type_param_list(p);\n \n     if p.at(T!['(']) {\n-        params::param_list_fn(p);\n+        params::param_list_fn_def(p);\n     } else {\n         p.error(\"expected function arguments\");\n     }"}, {"sha": "94edc7f35da43e6284ee9b0ec132562d8e47c8d7", "filename": "crates/ra_parser/src/grammar/params.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/90ff2be4e820601a1d16ba5716916f7424dfa10d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ff2be4e820601a1d16ba5716916f7424dfa10d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fparams.rs?ref=90ff2be4e820601a1d16ba5716916f7424dfa10d", "patch": "@@ -7,14 +7,14 @@ use super::*;\n // fn b(x: i32) {}\n // fn c(x: i32, ) {}\n // fn d(x: i32, y: ()) {}\n-pub(super) fn param_list_fn(p: &mut Parser) {\n-    list_(p, Flavor::Function)\n+pub(super) fn param_list_fn_def(p: &mut Parser) {\n+    list_(p, Flavor::FnDef)\n }\n \n // test param_list_opt_patterns\n // fn foo<F: FnMut(&mut Foo<'a>)>(){}\n-pub(super) fn param_list_impl_fn(p: &mut Parser) {\n-    list_(p, Flavor::ImplFn)\n+pub(super) fn param_list_fn_trait(p: &mut Parser) {\n+    list_(p, Flavor::FnTrait)\n }\n \n pub(super) fn param_list_fn_ptr(p: &mut Parser) {\n@@ -27,8 +27,8 @@ pub(super) fn param_list_closure(p: &mut Parser) {\n \n #[derive(Debug, Clone, Copy)]\n enum Flavor {\n-    Function, // Includes trait fn params; omitted param idents are not supported\n-    ImplFn,\n+    FnDef,   // Includes trait fn params; omitted param idents are not supported\n+    FnTrait, // Params for `Fn(...)`/`FnMut(...)`/`FnOnce(...)` annotations\n     FnPointer,\n     Closure,\n }\n@@ -38,13 +38,13 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n \n     let (bra, ket) = match flavor {\n         Closure => (T![|], T![|]),\n-        Function | ImplFn | FnPointer => (T!['('], T![')']),\n+        FnDef | FnTrait | FnPointer => (T!['('], T![')']),\n     };\n \n     let m = p.start();\n     p.bump(bra);\n \n-    if let Function = flavor {\n+    if let FnDef = flavor {\n         // test self_param_outer_attr\n         // fn f(#[must_use] self) {}\n         attributes::outer_attributes(p);\n@@ -56,10 +56,11 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n         // fn f(#[attr1] pat: Type) {}\n         attributes::outer_attributes(p);\n \n-        if let Function | FnPointer = flavor {\n-            if p.at(T![...]) {\n-                break;\n-            }\n+        // test param_list_vararg\n+        // extern \"C\" { fn printf(format: *const i8, ...) -> i32; }\n+        match flavor {\n+            FnDef | FnPointer if p.eat(T![...]) => break,\n+            _ => (),\n         }\n \n         if !p.at_ts(VALUE_PARAMETER_FIRST) {\n@@ -71,11 +72,7 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n             p.expect(T![,]);\n         }\n     }\n-    // test param_list_vararg\n-    // extern \"C\" { fn printf(format: *const i8, ...) -> i32; }\n-    if let Function | FnPointer = flavor {\n-        p.eat(T![...]);\n-    }\n+\n     p.expect(ket);\n     m.complete(p, PARAM_LIST);\n }\n@@ -105,13 +102,13 @@ fn value_parameter(p: &mut Parser, flavor: Flavor) {\n         //     fn f3(NewType(a): NewType) {}\n         //     fn f4(&&a: &&usize) {}\n         // }\n-        Flavor::Function => {\n+        Flavor::FnDef => {\n             patterns::pattern(p);\n             types::ascription(p);\n         }\n         // test value_parameters_no_patterns\n         // type F = Box<Fn(i32, &i32, &i32, ())>;\n-        Flavor::ImplFn => {\n+        Flavor::FnTrait => {\n             types::type_(p);\n         }\n         // test fn_pointer_param_ident_path"}, {"sha": "f5bf3d7ced5280e93c0658ebd4b62aa4bd682e08", "filename": "crates/ra_parser/src/grammar/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ff2be4e820601a1d16ba5716916f7424dfa10d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ff2be4e820601a1d16ba5716916f7424dfa10d/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=90ff2be4e820601a1d16ba5716916f7424dfa10d", "patch": "@@ -99,7 +99,7 @@ fn opt_path_type_args(p: &mut Parser, mode: Mode) {\n             // test path_fn_trait_args\n             // type F = Box<Fn(i32) -> ()>;\n             if p.at(T!['(']) {\n-                params::param_list_impl_fn(p);\n+                params::param_list_fn_trait(p);\n                 opt_fn_ret_type(p);\n             } else {\n                 type_args::opt_type_arg_list(p, false)"}]}