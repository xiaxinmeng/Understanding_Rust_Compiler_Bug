{"sha": "07c6295137753cb2a060d53e04b688dac3ced751", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YzYyOTUxMzc3NTNjYjJhMDYwZDUzZTA0YjY4OGRhYzNjZWQ3NTE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-17T17:26:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-17T17:26:21Z"}, "message": "Rollup merge of #41290 - GuillaumeGomez:put-back-hoedown, r=steveklabnik\n\nHoedown big comeback!\n\n```bash\n> cargo +local test\n   Compiling libc v0.2.20\n   Compiling sysinfo v0.3.4 (file:///Users/imperio/rust/sysinfo)\n    Finished dev [unoptimized + debuginfo] target(s) in 3.2 secs\n     Running target/debug/deps/disk_list-dbd70897f1f7e080\n\nrunning 1 test\ntest test_disks ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n\n     Running target/debug/deps/sysinfo-8ad11103abdf5941\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n\n   Doc-tests sysinfo\nWARNING: src/sysinfo.rs -  (line 45) test will be run in the next rustdoc version. If it's not supposed to, please update your documentation and make it compliant to common mark specifications.\nWARNING: src/sysinfo.rs -  (line 48) test will be run in the next rustdoc version. If it's not supposed to, please update your documentation and make it compliant to common mark specifications.\n\nrunning 1 test\ntest src/sysinfo.rs -  (line 14) ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n```\n\nr? @rust-lang/docs", "tree": {"sha": "eb19cbc5f3223006a95e00a28876e6ff49f02395", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb19cbc5f3223006a95e00a28876e6ff49f02395"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c6295137753cb2a060d53e04b688dac3ced751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c6295137753cb2a060d53e04b688dac3ced751", "html_url": "https://github.com/rust-lang/rust/commit/07c6295137753cb2a060d53e04b688dac3ced751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c6295137753cb2a060d53e04b688dac3ced751/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae25a60ba04d9b15f1d1eeda3b02cbd224b069d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae25a60ba04d9b15f1d1eeda3b02cbd224b069d", "html_url": "https://github.com/rust-lang/rust/commit/4ae25a60ba04d9b15f1d1eeda3b02cbd224b069d"}, {"sha": "bee02913207ec24913ca4eeb007b402146ed1532", "url": "https://api.github.com/repos/rust-lang/rust/commits/bee02913207ec24913ca4eeb007b402146ed1532", "html_url": "https://github.com/rust-lang/rust/commit/bee02913207ec24913ca4eeb007b402146ed1532"}], "stats": {"total": 287, "additions": 280, "deletions": 7}, "files": [{"sha": "9003f0750a23145ef721e720da7c0c7fbdf2ff82", "filename": ".gitmodules", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07c6295137753cb2a060d53e04b688dac3ced751/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/07c6295137753cb2a060d53e04b688dac3ced751/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=07c6295137753cb2a060d53e04b688dac3ced751", "patch": "@@ -5,6 +5,10 @@\n [submodule \"src/compiler-rt\"]\n \tpath = src/compiler-rt\n \turl = https://github.com/rust-lang/compiler-rt.git\n+[submodule \"src/rt/hoedown\"]\n+\tpath = src/rt/hoedown\n+\turl = https://github.com/rust-lang/hoedown.git\n+\tbranch = rust-2015-09-21-do-not-delete\n [submodule \"src/jemalloc\"]\n \tpath = src/jemalloc\n \turl = https://github.com/rust-lang/jemalloc.git"}, {"sha": "abe899803087120379021a1b88dd85ca4533cca0", "filename": "COPYRIGHT", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07c6295137753cb2a060d53e04b688dac3ced751/COPYRIGHT", "raw_url": "https://github.com/rust-lang/rust/raw/07c6295137753cb2a060d53e04b688dac3ced751/COPYRIGHT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COPYRIGHT?ref=07c6295137753cb2a060d53e04b688dac3ced751", "patch": "@@ -197,6 +197,28 @@ their own copyright notices and license terms:\n     USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n     OF SUCH DAMAGE.\n \n+* Hoedown, the markdown parser, under src/rt/hoedown, is\n+  licensed as follows.\n+\n+    Copyright (c) 2008, Natacha Port\u00e9\n+    Copyright (c) 2011, Vicent Mart\u00ed\n+    Copyright (c) 2013, Devin Torres and the Hoedown authors\n+\n+    Permission to use, copy, modify, and distribute this\n+    software for any purpose with or without fee is hereby\n+    granted, provided that the above copyright notice and\n+    this permission notice appear in all copies.\n+\n+    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR\n+    DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE\n+    INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+    FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n+    SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR\n+    ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA\n+    OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n+    OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n+    CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n+\n * libbacktrace, under src/libbacktrace:\n \n     Copyright (C) 2012-2014 Free Software Foundation, Inc."}, {"sha": "d1c98a5c6f16566b4b8c96bb00c53bcf30e01a8c", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=07c6295137753cb2a060d53e04b688dac3ced751", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustdoc\"\n version = \"0.0.0\"\n+build = \"build.rs\"\n \n [lib]\n name = \"rustdoc\""}, {"sha": "4189e3d2ac7073f3cb23f5219aafc18eafd8b4ee", "filename": "src/librustdoc/build.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=07c6295137753cb2a060d53e04b688dac3ced751", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate gcc;\n+\n+fn main() {\n+    let src_dir = std::path::Path::new(\"../rt/hoedown/src\");\n+    build_helper::rerun_if_changed_anything_in_dir(src_dir);\n+    let mut cfg = gcc::Config::new();\n+    cfg.file(\"../rt/hoedown/src/autolink.c\")\n+       .file(\"../rt/hoedown/src/buffer.c\")\n+       .file(\"../rt/hoedown/src/document.c\")\n+       .file(\"../rt/hoedown/src/escape.c\")\n+       .file(\"../rt/hoedown/src/html.c\")\n+       .file(\"../rt/hoedown/src/html_blocks.c\")\n+       .file(\"../rt/hoedown/src/html_smartypants.c\")\n+       .file(\"../rt/hoedown/src/stack.c\")\n+       .file(\"../rt/hoedown/src/version.c\")\n+       .include(src_dir)\n+       .compile(\"libhoedown.a\");\n+}\n+"}, {"sha": "b02b60531d108dc41a7da893e09a03be59cb9aed", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=07c6295137753cb2a060d53e04b688dac3ced751", "patch": "@@ -25,6 +25,9 @@\n \n #![allow(non_camel_case_types)]\n \n+use libc;\n+use std::slice;\n+\n use std::ascii::AsciiExt;\n use std::cell::RefCell;\n use std::collections::{HashMap, VecDeque};\n@@ -357,6 +360,194 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n     }\n }\n \n+const DEF_OUNIT: libc::size_t = 64;\n+const HOEDOWN_EXT_NO_INTRA_EMPHASIS: libc::c_uint = 1 << 11;\n+const HOEDOWN_EXT_TABLES: libc::c_uint = 1 << 0;\n+const HOEDOWN_EXT_FENCED_CODE: libc::c_uint = 1 << 1;\n+const HOEDOWN_EXT_AUTOLINK: libc::c_uint = 1 << 3;\n+const HOEDOWN_EXT_STRIKETHROUGH: libc::c_uint = 1 << 4;\n+const HOEDOWN_EXT_SUPERSCRIPT: libc::c_uint = 1 << 8;\n+const HOEDOWN_EXT_FOOTNOTES: libc::c_uint = 1 << 2;\n+\n+const HOEDOWN_EXTENSIONS: libc::c_uint =\n+    HOEDOWN_EXT_NO_INTRA_EMPHASIS | HOEDOWN_EXT_TABLES |\n+    HOEDOWN_EXT_FENCED_CODE | HOEDOWN_EXT_AUTOLINK |\n+    HOEDOWN_EXT_STRIKETHROUGH | HOEDOWN_EXT_SUPERSCRIPT |\n+    HOEDOWN_EXT_FOOTNOTES;\n+\n+enum hoedown_document {}\n+\n+type blockcodefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                 *const hoedown_buffer, *const hoedown_renderer_data,\n+                                 libc::size_t);\n+\n+type blockquotefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                  *const hoedown_renderer_data, libc::size_t);\n+\n+type headerfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                              libc::c_int, *const hoedown_renderer_data,\n+                              libc::size_t);\n+\n+type blockhtmlfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                 *const hoedown_renderer_data, libc::size_t);\n+\n+type codespanfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                *const hoedown_renderer_data, libc::size_t) -> libc::c_int;\n+\n+type linkfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n+                             *const hoedown_buffer, *const hoedown_buffer,\n+                             *const hoedown_renderer_data, libc::size_t) -> libc::c_int;\n+\n+type entityfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n+                               *const hoedown_renderer_data, libc::size_t);\n+\n+type normaltextfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                  *const hoedown_renderer_data, libc::size_t);\n+\n+#[repr(C)]\n+struct hoedown_renderer_data {\n+    opaque: *mut libc::c_void,\n+}\n+\n+#[repr(C)]\n+struct hoedown_renderer {\n+    opaque: *mut libc::c_void,\n+\n+    blockcode: Option<blockcodefn>,\n+    blockquote: Option<blockquotefn>,\n+    header: Option<headerfn>,\n+\n+    other_block_level_callbacks: [libc::size_t; 11],\n+\n+    blockhtml: Option<blockhtmlfn>,\n+\n+    /* span level callbacks - NULL or return 0 prints the span verbatim */\n+    autolink: libc::size_t, // unused\n+    codespan: Option<codespanfn>,\n+    other_span_level_callbacks_1: [libc::size_t; 7],\n+    link: Option<linkfn>,\n+    other_span_level_callbacks_2: [libc::size_t; 6],\n+\n+    /* low level callbacks - NULL copies input directly into the output */\n+    entity: Option<entityfn>,\n+    normal_text: Option<normaltextfn>,\n+\n+    /* header and footer */\n+    other_callbacks: [libc::size_t; 2],\n+}\n+\n+#[repr(C)]\n+struct hoedown_html_renderer_state {\n+    opaque: *mut libc::c_void,\n+    toc_data: html_toc_data,\n+    flags: libc::c_uint,\n+    link_attributes: Option<extern \"C\" fn(*mut hoedown_buffer,\n+                                          *const hoedown_buffer,\n+                                          *const hoedown_renderer_data)>,\n+}\n+\n+#[repr(C)]\n+struct html_toc_data {\n+    header_count: libc::c_int,\n+    current_level: libc::c_int,\n+    level_offset: libc::c_int,\n+    nesting_level: libc::c_int,\n+}\n+\n+#[repr(C)]\n+struct hoedown_buffer {\n+    data: *const u8,\n+    size: libc::size_t,\n+    asize: libc::size_t,\n+    unit: libc::size_t,\n+}\n+\n+extern {\n+    fn hoedown_html_renderer_new(render_flags: libc::c_uint,\n+                                 nesting_level: libc::c_int)\n+        -> *mut hoedown_renderer;\n+    fn hoedown_html_renderer_free(renderer: *mut hoedown_renderer);\n+\n+    fn hoedown_document_new(rndr: *const hoedown_renderer,\n+                            extensions: libc::c_uint,\n+                            max_nesting: libc::size_t) -> *mut hoedown_document;\n+    fn hoedown_document_render(doc: *mut hoedown_document,\n+                               ob: *mut hoedown_buffer,\n+                               document: *const u8,\n+                               doc_size: libc::size_t);\n+    fn hoedown_document_free(md: *mut hoedown_document);\n+\n+    fn hoedown_buffer_new(unit: libc::size_t) -> *mut hoedown_buffer;\n+    fn hoedown_buffer_free(b: *mut hoedown_buffer);\n+}\n+\n+impl hoedown_buffer {\n+    fn as_bytes(&self) -> &[u8] {\n+        unsafe { slice::from_raw_parts(self.data, self.size as usize) }\n+    }\n+}\n+\n+pub fn old_find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Span) {\n+    extern fn block(_ob: *mut hoedown_buffer,\n+                    text: *const hoedown_buffer,\n+                    lang: *const hoedown_buffer,\n+                    data: *const hoedown_renderer_data,\n+                    line: libc::size_t) {\n+        unsafe {\n+            if text.is_null() { return }\n+            let block_info = if lang.is_null() {\n+                LangString::all_false()\n+            } else {\n+                let lang = (*lang).as_bytes();\n+                let s = str::from_utf8(lang).unwrap();\n+                LangString::parse(s)\n+            };\n+            if !block_info.rust { return }\n+            let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n+            let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n+            let line = tests.get_line() + line;\n+            let filename = tests.get_filename();\n+            tests.add_old_test(line, filename);\n+        }\n+    }\n+\n+    extern fn header(_ob: *mut hoedown_buffer,\n+                     text: *const hoedown_buffer,\n+                     level: libc::c_int, data: *const hoedown_renderer_data,\n+                     _: libc::size_t) {\n+        unsafe {\n+            let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n+            let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n+            if text.is_null() {\n+                tests.register_header(\"\", level as u32);\n+            } else {\n+                let text = (*text).as_bytes();\n+                let text = str::from_utf8(text).unwrap();\n+                tests.register_header(text, level as u32);\n+            }\n+        }\n+    }\n+\n+    tests.set_position(position);\n+\n+    unsafe {\n+        let ob = hoedown_buffer_new(DEF_OUNIT);\n+        let renderer = hoedown_html_renderer_new(0, 0);\n+        (*renderer).blockcode = Some(block);\n+        (*renderer).header = Some(header);\n+        (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n+                = tests as *mut _ as *mut libc::c_void;\n+\n+        let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n+        hoedown_document_render(document, ob, doc.as_ptr(),\n+                                doc.len() as libc::size_t);\n+        hoedown_document_free(document);\n+\n+        hoedown_html_renderer_free(renderer);\n+        hoedown_buffer_free(ob);\n+    }\n+}\n+\n pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Span) {\n     tests.set_position(position);\n "}, {"sha": "f75144c23aca9dac01277c17964809c10d6af225", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=07c6295137753cb2a060d53e04b688dac3ced751", "patch": "@@ -25,7 +25,7 @@ use externalfiles::{ExternalHtml, LoadStringError, load_string};\n use html::render::reset_ids;\n use html::escape::Escape;\n use html::markdown;\n-use html::markdown::{Markdown, MarkdownWithToc, find_testable_code};\n+use html::markdown::{Markdown, MarkdownWithToc, find_testable_code, old_find_testable_code};\n use test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n@@ -159,6 +159,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut collector = Collector::new(input.to_string(), cfgs, libs, externs,\n                                        true, opts, maybe_sysroot, None,\n                                        Some(input.to_owned()));\n+    old_find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);"}, {"sha": "fb681b20065fa3a9d70434aa59a92dc9657edf94", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c6295137753cb2a060d53e04b688dac3ced751/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=07c6295137753cb2a060d53e04b688dac3ced751", "patch": "@@ -380,6 +380,8 @@ fn partition_source(s: &str) -> (String, String) {\n \n pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n+    // to be removed when hoedown will be definitely gone\n+    pub old_tests: Vec<String>,\n     names: Vec<String>,\n     cfgs: Vec<String>,\n     libs: SearchPaths,\n@@ -401,6 +403,7 @@ impl Collector {\n                codemap: Option<Rc<CodeMap>>, filename: Option<String>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n+            old_tests: Vec::new(),\n             names: Vec::new(),\n             cfgs: cfgs,\n             libs: libs,\n@@ -417,19 +420,36 @@ impl Collector {\n         }\n     }\n \n-    pub fn add_test(&mut self, test: String,\n-                    should_panic: bool, no_run: bool, should_ignore: bool,\n-                    as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n-                    line: usize, filename: String) {\n-        let name = if self.use_headers {\n+    fn generate_name(&self, line: usize, filename: &str) -> String {\n+        if self.use_headers {\n             if let Some(ref header) = self.current_header {\n                 format!(\"{} - {} (line {})\", filename, header, line)\n             } else {\n                 format!(\"{} - (line {})\", filename, line)\n             }\n         } else {\n             format!(\"{} - {} (line {})\", filename, self.names.join(\"::\"), line)\n-        };\n+        }\n+    }\n+\n+    pub fn add_old_test(&mut self, line: usize, filename: String) {\n+        let name = self.generate_name(line, &filename);\n+        self.old_tests.push(name);\n+    }\n+\n+    pub fn add_test(&mut self, test: String,\n+                    should_panic: bool, no_run: bool, should_ignore: bool,\n+                    as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n+                    line: usize, filename: String) {\n+        let name = self.generate_name(line, &filename);\n+        if self.old_tests.iter().find(|&x| x == &name).is_none() {\n+            let _ = writeln!(&mut io::stderr(),\n+                             \"WARNING: {} Code block is not currently run as a test, but will in \\\n+                              future versions of rustdoc. Please ensure this code block is a \\\n+                              runnable test, or use the `ignore` directive.\",\n+                             name);\n+            return\n+        }\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n         let externs = self.externs.clone();\n@@ -544,6 +564,8 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         attrs.unindent_doc_comments();\n         if let Some(doc) = attrs.doc_value() {\n             self.collector.cnt = 0;\n+            markdown::old_find_testable_code(doc, self.collector,\n+                                             attrs.span.unwrap_or(DUMMY_SP));\n             markdown::find_testable_code(doc, self.collector,\n                                          attrs.span.unwrap_or(DUMMY_SP));\n         }"}, {"sha": "da282f1bb7277b4d30fa1599ee29ad8eb4dd2a92", "filename": "src/rt/hoedown", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fhoedown?ref=07c6295137753cb2a060d53e04b688dac3ced751", "patch": "@@ -0,0 +1 @@\n+Subproject commit da282f1bb7277b4d30fa1599ee29ad8eb4dd2a92"}, {"sha": "44063e627a362837e141bd0ad1940dfa5c94de05", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07c6295137753cb2a060d53e04b688dac3ced751/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c6295137753cb2a060d53e04b688dac3ced751/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=07c6295137753cb2a060d53e04b688dac3ced751", "patch": "@@ -86,6 +86,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/rust-installer\",\n         \"src/liblibc\",\n         \"src/vendor\",\n+        \"src/rt/hoedown\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}