{"sha": "d5b86d5ee912407aef6af3a152a94bde70bacb7a", "node_id": "C_kwDOAAsO6NoAKGQ1Yjg2ZDVlZTkxMjQwN2FlZjZhZjNhMTUyYTk0YmRlNzBiYWNiN2E", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-13T11:21:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-13T11:21:31Z"}, "message": "Rollup merge of #101690 - kadiwa4:avoid_iterator_last, r=oli-obk\n\nAvoid `Iterator::last`\n\nAdapters like `Filter` and `Map` use the default implementation of `Iterator::last` which is not short-circuiting (and so does `core::str::Split`). The predicate function will be run for every single item of the underlying iterator. I hope that removing those calls to `last` results in slight performance improvements.", "tree": {"sha": "9effa6a3c60a5ab146fd1d50d0e7e6cb1b01f7b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9effa6a3c60a5ab146fd1d50d0e7e6cb1b01f7b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5b86d5ee912407aef6af3a152a94bde70bacb7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjIGe7CRBK7hj4Ov3rIwAAO0YIAKaNtdPE6G/Ua64sUGMwzBRf\nolPiZ1jTJFswrEFsiY0slicnvVz/Jh84UM3y/0l1JQFDGCA50xresqIiEfFZvwrH\nIoTQb3LYGw+pQ2C6xRTA2Sc/BniuSX9UAyuwhlcU+ChvAe0K9lRMp8J8FonbPi00\n0oG4UAXOMFoz7du1BUbNb2Rc4FpPjBhA5mjyrpI8+W0nE3m93JNpXaZel7wytRo2\nS70dafk2IoBfanxNEbaWRUS+xN8m2DO1v76prYApDK7kp8Vl0g6yfdsXfkRrbg/Y\nlwetpomUBwrgHIsn+kdNUo202tA14GE6mtiFjJAeAHO+YDAhsnSNzS0Zxe59VCU=\n=mr64\n-----END PGP SIGNATURE-----\n", "payload": "tree 9effa6a3c60a5ab146fd1d50d0e7e6cb1b01f7b0\nparent db75d7e14b6c5157e12fea4a1158e9dd58e92c36\nparent 66211d83f9ad82770f2f81d37aae1544365a9a32\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1663068091 +0530\ncommitter GitHub <noreply@github.com> 1663068091 +0530\n\nRollup merge of #101690 - kadiwa4:avoid_iterator_last, r=oli-obk\n\nAvoid `Iterator::last`\n\nAdapters like `Filter` and `Map` use the default implementation of `Iterator::last` which is not short-circuiting (and so does `core::str::Split`). The predicate function will be run for every single item of the underlying iterator. I hope that removing those calls to `last` results in slight performance improvements.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b86d5ee912407aef6af3a152a94bde70bacb7a", "html_url": "https://github.com/rust-lang/rust/commit/d5b86d5ee912407aef6af3a152a94bde70bacb7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5b86d5ee912407aef6af3a152a94bde70bacb7a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db75d7e14b6c5157e12fea4a1158e9dd58e92c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/db75d7e14b6c5157e12fea4a1158e9dd58e92c36", "html_url": "https://github.com/rust-lang/rust/commit/db75d7e14b6c5157e12fea4a1158e9dd58e92c36"}, {"sha": "66211d83f9ad82770f2f81d37aae1544365a9a32", "url": "https://api.github.com/repos/rust-lang/rust/commits/66211d83f9ad82770f2f81d37aae1544365a9a32", "html_url": "https://github.com/rust-lang/rust/commit/66211d83f9ad82770f2f81d37aae1544365a9a32"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "877944d3d70cb961195ac89e926ca12a39ef2467", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=d5b86d5ee912407aef6af3a152a94bde70bacb7a", "patch": "@@ -86,8 +86,7 @@ impl LocationTable {\n         let (block, &first_index) = self\n             .statements_before_block\n             .iter_enumerated()\n-            .filter(|(_, first_index)| **first_index <= point_index)\n-            .last()\n+            .rfind(|&(_, &first_index)| first_index <= point_index)\n             .unwrap();\n \n         let statement_index = (point_index - first_index) / 2;"}, {"sha": "1d62caef9b7a312cca3e7962680da0ece84bb87a", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d5b86d5ee912407aef6af3a152a94bde70bacb7a", "patch": "@@ -576,8 +576,7 @@ impl<'hir> Generics<'hir> {\n         if self.has_where_clause_predicates {\n             self.predicates\n                 .iter()\n-                .filter(|p| p.in_where_clause())\n-                .last()\n+                .rfind(|&p| p.in_where_clause())\n                 .map_or(end, |p| p.span())\n                 .shrink_to_hi()\n                 .to(end)"}, {"sha": "4fb6d65a6e98f4f86db64f3975bc73a5809fe042", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=d5b86d5ee912407aef6af3a152a94bde70bacb7a", "patch": "@@ -719,7 +719,7 @@ fn get_nullable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n     Some(match *ty.kind() {\n         ty::Adt(field_def, field_substs) => {\n             let inner_field_ty = {\n-                let first_non_zst_ty = field_def\n+                let mut first_non_zst_ty = field_def\n                     .variants()\n                     .iter()\n                     .filter_map(|v| transparent_newtype_field(cx.tcx, v));\n@@ -729,7 +729,7 @@ fn get_nullable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'t\n                     \"Wrong number of fields for transparent type\"\n                 );\n                 first_non_zst_ty\n-                    .last()\n+                    .next_back()\n                     .expect(\"No non-zst fields in transparent type.\")\n                     .ty(tcx, field_substs)\n             };"}, {"sha": "c3c9b0b5617824e4590262c54e20bd48889a2df9", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=d5b86d5ee912407aef6af3a152a94bde70bacb7a", "patch": "@@ -617,9 +617,9 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .filter(|&sp| sp != base_error.span)\n                         .collect();\n \n-                    let start_span = bounds.iter().map(|bound| bound.span()).next().unwrap();\n+                    let start_span = bounds[0].span();\n                     // `end_span` is the end of the poly trait ref (Foo + 'baz + Bar><)\n-                    let end_span = bounds.iter().map(|bound| bound.span()).last().unwrap();\n+                    let end_span = bounds.last().unwrap().span();\n                     // `last_bound_span` is the last bound of the poly trait ref (Foo + >'baz< + Bar)\n                     let last_bound_span = spans.last().cloned().unwrap();\n                     let mut multi_span: MultiSpan = spans.clone().into();"}, {"sha": "9ed4faccdb852934340c6a567785879b0361f9d5", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b86d5ee912407aef6af3a152a94bde70bacb7a/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d5b86d5ee912407aef6af3a152a94bde70bacb7a", "patch": "@@ -1309,10 +1309,8 @@ pub fn build_session(\n     let warnings_allow = sopts\n         .lint_opts\n         .iter()\n-        .filter(|&&(ref key, _)| *key == \"warnings\")\n-        .map(|&(_, ref level)| *level == lint::Allow)\n-        .last()\n-        .unwrap_or(false);\n+        .rfind(|&&(ref key, _)| *key == \"warnings\")\n+        .map_or(false, |&(_, level)| level == lint::Allow);\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n "}, {"sha": "ec6b8c2469c59cb5d5073a7bcc132859c0f316f0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5b86d5ee912407aef6af3a152a94bde70bacb7a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b86d5ee912407aef6af3a152a94bde70bacb7a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d5b86d5ee912407aef6af3a152a94bde70bacb7a", "patch": "@@ -587,7 +587,7 @@ fn generate_macro_def_id_path(\n             }\n         })\n         .collect();\n-    let relative = fqp.iter().map(|elem| elem.to_string());\n+    let mut relative = fqp.iter().map(|elem| elem.to_string());\n     let cstore = CStore::from_tcx(tcx);\n     // We need this to prevent a `panic` when this function is used from intra doc links...\n     if !cstore.has_crate_data(def_id.krate) {\n@@ -607,7 +607,7 @@ fn generate_macro_def_id_path(\n     let mut path = if is_macro_2 {\n         once(crate_name.clone()).chain(relative).collect()\n     } else {\n-        vec![crate_name.clone(), relative.last().unwrap()]\n+        vec![crate_name.clone(), relative.next_back().unwrap()]\n     };\n     if path.len() < 2 {\n         // The minimum we can have is the crate name followed by the macro name. If shorter, then"}, {"sha": "e2afa5ef59020c409f6629fce8ac37caf7aa6466", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b86d5ee912407aef6af3a152a94bde70bacb7a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b86d5ee912407aef6af3a152a94bde70bacb7a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d5b86d5ee912407aef6af3a152a94bde70bacb7a", "patch": "@@ -2594,7 +2594,7 @@ impl<'test> TestCx<'test> {\n                     }\n                     None\n                 } else {\n-                    let sline = line.split(\"///\").last().unwrap_or(\"\");\n+                    let sline = line.rsplit(\"///\").next().unwrap();\n                     let line = sline.trim_start();\n                     if line.starts_with(\"```\") {\n                         if ignore {"}]}