{"sha": "eb82a5a0c8a6cfc9a1665d70315335102f598263", "node_id": "C_kwDOAAsO6NoAKGViODJhNWEwYzhhNmNmYzlhMTY2NWQ3MDMxNTMzNTEwMmY1OTgyNjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-24T00:22:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-24T00:22:04Z"}, "message": "Rollup merge of #108961 - compiler-errors:refine-ct-errors, r=BoxyUwU\n\nRefine error spans for const args in hir typeck\n\nImprove just a couple of error messages having to do with mismatched consts.\n\nr? `@ghost` i'll put this up when the dependent commits are merged", "tree": {"sha": "72d018b2bcd41ebf00160979a9fb1ddd9ff1cda1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d018b2bcd41ebf00160979a9fb1ddd9ff1cda1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb82a5a0c8a6cfc9a1665d70315335102f598263", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHO0sCRBK7hj4Ov3rIwAAwNwIAE757H+chtL30aKj6ft/uJRC\nqYxaaOtgB6gB3wIR7M1hVn8WkqTqma+7D07bX/Pls7GImMUyoSIcUIRIgcvP4md4\nB98mpogjJzchOUYMd0pGEAt6w+hGclbZZ69HKLbDV/HwbPSWb4aEJeD0ZHy2QYYa\nvmQwO8LPQv3EKMwDghmSCUeV5p2941eMOhEKEFRdK8dx7X5UUwSP4bPXC0Kyh5/v\nlS6VoOdfHzF2b7R+oPUvzyxD9ofZNxuRPrMTFEqijQKHd4Ge08KUVxpFtUFnKDdy\nuLlhHzXF1B1vEmzD+PAhgPOhF+aehoQXhn45ZjlNWgB9yv2x0b0nCWhqsfQ37WQ=\n=+CQi\n-----END PGP SIGNATURE-----\n", "payload": "tree 72d018b2bcd41ebf00160979a9fb1ddd9ff1cda1\nparent d9c05b853d7745ea36bc54b0c5b7b00b3737d706\nparent 6c6bd014210aa4a5cd4a2bb5ab4cc7174e82d74b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679617324 +0100\ncommitter GitHub <noreply@github.com> 1679617324 +0100\n\nRollup merge of #108961 - compiler-errors:refine-ct-errors, r=BoxyUwU\n\nRefine error spans for const args in hir typeck\n\nImprove just a couple of error messages having to do with mismatched consts.\n\nr? `@ghost` i'll put this up when the dependent commits are merged\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb82a5a0c8a6cfc9a1665d70315335102f598263", "html_url": "https://github.com/rust-lang/rust/commit/eb82a5a0c8a6cfc9a1665d70315335102f598263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb82a5a0c8a6cfc9a1665d70315335102f598263/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9c05b853d7745ea36bc54b0c5b7b00b3737d706", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c05b853d7745ea36bc54b0c5b7b00b3737d706", "html_url": "https://github.com/rust-lang/rust/commit/d9c05b853d7745ea36bc54b0c5b7b00b3737d706"}, {"sha": "6c6bd014210aa4a5cd4a2bb5ab4cc7174e82d74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c6bd014210aa4a5cd4a2bb5ab4cc7174e82d74b", "html_url": "https://github.com/rust-lang/rust/commit/6c6bd014210aa4a5cd4a2bb5ab4cc7174e82d74b"}], "stats": {"total": 91, "additions": 63, "deletions": 28}, "files": [{"sha": "e0ddb90c33b990f0e075f24b71cfaa56830d649d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eb82a5a0c8a6cfc9a1665d70315335102f598263/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb82a5a0c8a6cfc9a1665d70315335102f598263/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=eb82a5a0c8a6cfc9a1665d70315335102f598263", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use rustc_span::{self, Span};\n+use rustc_span::{self, symbol::kw, Span};\n use rustc_trait_selection::traits;\n \n use std::ops::ControlFlow;\n@@ -25,17 +25,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let generics = self.tcx.generics_of(def_id);\n         let predicate_substs = match unsubstituted_pred.kind().skip_binder() {\n-            ty::PredicateKind::Clause(ty::Clause::Trait(pred)) => pred.trait_ref.substs,\n-            ty::PredicateKind::Clause(ty::Clause::Projection(pred)) => pred.projection_ty.substs,\n-            _ => ty::List::empty(),\n+            ty::PredicateKind::Clause(ty::Clause::Trait(pred)) => pred.trait_ref.substs.to_vec(),\n+            ty::PredicateKind::Clause(ty::Clause::Projection(pred)) => {\n+                pred.projection_ty.substs.to_vec()\n+            }\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(arg, ty)) => {\n+                vec![ty.into(), arg.into()]\n+            }\n+            ty::PredicateKind::ConstEvaluatable(e) => vec![e.into()],\n+            _ => return false,\n         };\n \n-        let find_param_matching = |matches: &dyn Fn(&ty::ParamTy) -> bool| {\n-            predicate_substs.types().find_map(|ty| {\n-                ty.walk().find_map(|arg| {\n+        let find_param_matching = |matches: &dyn Fn(ty::ParamTerm) -> bool| {\n+            predicate_substs.iter().find_map(|arg| {\n+                arg.walk().find_map(|arg| {\n                     if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                        && let ty::Param(param_ty) = ty.kind()\n-                        && matches(param_ty)\n+                        && let ty::Param(param_ty) = *ty.kind()\n+                        && matches(ty::ParamTerm::Ty(param_ty))\n+                    {\n+                        Some(arg)\n+                    } else if let ty::GenericArgKind::Const(ct) = arg.unpack()\n+                        && let ty::ConstKind::Param(param_ct) = ct.kind()\n+                        && matches(ty::ParamTerm::Const(param_ct))\n                     {\n                         Some(arg)\n                     } else {\n@@ -47,21 +58,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Prefer generics that are local to the fn item, since these are likely\n         // to be the cause of the unsatisfied predicate.\n-        let mut param_to_point_at = find_param_matching(&|param_ty| {\n-            self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) == def_id\n+        let mut param_to_point_at = find_param_matching(&|param_term| {\n+            self.tcx.parent(generics.param_at(param_term.index(), self.tcx).def_id) == def_id\n         });\n         // Fall back to generic that isn't local to the fn item. This will come\n         // from a trait or impl, for example.\n-        let mut fallback_param_to_point_at = find_param_matching(&|param_ty| {\n-            self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) != def_id\n-                && param_ty.name != rustc_span::symbol::kw::SelfUpper\n+        let mut fallback_param_to_point_at = find_param_matching(&|param_term| {\n+            self.tcx.parent(generics.param_at(param_term.index(), self.tcx).def_id) != def_id\n+                && !matches!(param_term, ty::ParamTerm::Ty(ty) if ty.name == kw::SelfUpper)\n         });\n         // Finally, the `Self` parameter is possibly the reason that the predicate\n         // is unsatisfied. This is less likely to be true for methods, because\n         // method probe means that we already kinda check that the predicates due\n         // to the `Self` type are true.\n-        let mut self_param_to_point_at =\n-            find_param_matching(&|param_ty| param_ty.name == rustc_span::symbol::kw::SelfUpper);\n+        let mut self_param_to_point_at = find_param_matching(\n+            &|param_term| matches!(param_term, ty::ParamTerm::Ty(ty) if ty.name == kw::SelfUpper),\n+        );\n \n         // Finally, for ambiguity-related errors, we actually want to look\n         // for a parameter that is the source of the inference type left\n@@ -225,14 +237,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .own_substs(ty::InternalSubsts::identity_for_item(self.tcx, def_id));\n         let Some((index, _)) = own_substs\n             .iter()\n-            .filter(|arg| matches!(arg.unpack(), ty::GenericArgKind::Type(_)))\n             .enumerate()\n             .find(|(_, arg)| **arg == param_to_point_at) else { return false };\n         let Some(arg) = segment\n             .args()\n             .args\n             .iter()\n-            .filter(|arg| matches!(arg, hir::GenericArg::Type(_)))\n             .nth(index) else { return false; };\n         error.obligation.cause.span = arg\n             .span()"}, {"sha": "e3cd5cca785aacf4bc6a1adf8b1db48f1b492df4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb82a5a0c8a6cfc9a1665d70315335102f598263/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb82a5a0c8a6cfc9a1665d70315335102f598263/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=eb82a5a0c8a6cfc9a1665d70315335102f598263", "patch": "@@ -1051,6 +1051,21 @@ impl<'tcx> TermKind<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum ParamTerm {\n+    Ty(ParamTy),\n+    Const(ParamConst),\n+}\n+\n+impl ParamTerm {\n+    pub fn index(self) -> usize {\n+        match self {\n+            ParamTerm::Ty(ty) => ty.index as usize,\n+            ParamTerm::Const(ct) => ct.index as usize,\n+        }\n+    }\n+}\n+\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///"}, {"sha": "296fd1ed5248f56a114db55a165d0b2a648d39d0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb82a5a0c8a6cfc9a1665d70315335102f598263/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb82a5a0c8a6cfc9a1665d70315335102f598263/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=eb82a5a0c8a6cfc9a1665d70315335102f598263", "patch": "@@ -1282,10 +1282,20 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     ),\n \n                     ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n-                        self.tcx.sess.struct_span_err(\n+                        let mut diag = self.tcx.sess.struct_span_err(\n                             span,\n                             &format!(\"the constant `{}` is not of type `{}`\", ct, ty),\n-                        )\n+                        );\n+                        self.note_type_err(\n+                            &mut diag,\n+                            &obligation.cause,\n+                            None,\n+                            None,\n+                            TypeError::Sorts(ty::error::ExpectedFound::new(true, ty, ct.ty())),\n+                            false,\n+                            false,\n+                        );\n+                        diag\n                     }\n                 }\n             }"}, {"sha": "6b3396a25cf97d6ce679d99b110aa8e0a6bdd974", "filename": "tests/ui/const-generics/generic_const_exprs/cross_crate_predicate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb82a5a0c8a6cfc9a1665d70315335102f598263/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb82a5a0c8a6cfc9a1665d70315335102f598263/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr?ref=eb82a5a0c8a6cfc9a1665d70315335102f598263", "patch": "@@ -1,8 +1,8 @@\n error: unconstrained generic constant\n-  --> $DIR/cross_crate_predicate.rs:7:13\n+  --> $DIR/cross_crate_predicate.rs:7:44\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n note: required by a bound in `test1`\n@@ -12,10 +12,10 @@ LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n error: unconstrained generic constant\n-  --> $DIR/cross_crate_predicate.rs:7:13\n+  --> $DIR/cross_crate_predicate.rs:7:44\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n note: required by a bound in `test1`"}, {"sha": "394dd44d40d3308536ae1da482aa767dad78fce7", "filename": "tests/ui/const-generics/type_mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb82a5a0c8a6cfc9a1665d70315335102f598263/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb82a5a0c8a6cfc9a1665d70315335102f598263/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=eb82a5a0c8a6cfc9a1665d70315335102f598263", "patch": "@@ -1,8 +1,8 @@\n error: the constant `N` is not of type `u8`\n-  --> $DIR/type_mismatch.rs:2:5\n+  --> $DIR/type_mismatch.rs:2:11\n    |\n LL |     bar::<N>()\n-   |     ^^^^^^^^\n+   |           ^ expected `u8`, found `usize`\n    |\n note: required by a bound in `bar`\n   --> $DIR/type_mismatch.rs:6:8"}, {"sha": "83f311efd39d7017ba191b1474e5d121480f06b2", "filename": "tests/ui/specialization/min_specialization/bad-const-wf-doesnt-specialize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb82a5a0c8a6cfc9a1665d70315335102f598263/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb82a5a0c8a6cfc9a1665d70315335102f598263/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr?ref=eb82a5a0c8a6cfc9a1665d70315335102f598263", "patch": "@@ -2,7 +2,7 @@ error: the constant `N` is not of type `usize`\n   --> $DIR/bad-const-wf-doesnt-specialize.rs:8:29\n    |\n LL | impl<const N: i32> Copy for S<N> {}\n-   |                             ^^^^\n+   |                             ^^^^ expected `usize`, found `i32`\n    |\n note: required by a bound in `S`\n   --> $DIR/bad-const-wf-doesnt-specialize.rs:6:10"}, {"sha": "bf947d0ea4a6cfd44fc3f0ccec08c136181c22c5", "filename": "tests/ui/transmutability/issue-101739-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb82a5a0c8a6cfc9a1665d70315335102f598263/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb82a5a0c8a6cfc9a1665d70315335102f598263/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr?ref=eb82a5a0c8a6cfc9a1665d70315335102f598263", "patch": "@@ -8,7 +8,7 @@ error: the constant `ASSUME_ALIGNMENT` is not of type `Assume`\n   --> $DIR/issue-101739-1.rs:8:14\n    |\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Assume`, found `bool`\n    |\n note: required by a bound in `BikeshedIntrinsicFrom`\n   --> $SRC_DIR/core/src/mem/transmutability.rs:LL:COL"}]}