{"sha": "d1b3ed8c3f808182d74c4056eb8936943ad356fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYjNlZDhjM2Y4MDgxODJkNzRjNDA1NmViODkzNjk0M2FkMzU2ZmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T17:57:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:14:07Z"}, "message": "Remove runtime vector builtins", "tree": {"sha": "725e90acf53b6e3278a271bd8b74015bb766958f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725e90acf53b6e3278a271bd8b74015bb766958f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1b3ed8c3f808182d74c4056eb8936943ad356fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b3ed8c3f808182d74c4056eb8936943ad356fb", "html_url": "https://github.com/rust-lang/rust/commit/d1b3ed8c3f808182d74c4056eb8936943ad356fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1b3ed8c3f808182d74c4056eb8936943ad356fb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "533becef2f54a0cb0a4b386a3df308bf7ab4ea14", "url": "https://api.github.com/repos/rust-lang/rust/commits/533becef2f54a0cb0a4b386a3df308bf7ab4ea14", "html_url": "https://github.com/rust-lang/rust/commit/533becef2f54a0cb0a4b386a3df308bf7ab4ea14"}], "stats": {"total": 112, "additions": 0, "deletions": 112}, "files": [{"sha": "f95a79fc73ba6f2d1733a6c7019fe8cb27842ed4", "filename": "src/lib/vec.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d1b3ed8c3f808182d74c4056eb8936943ad356fb/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b3ed8c3f808182d74c4056eb8936943ad356fb/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=d1b3ed8c3f808182d74c4056eb8936943ad356fb", "patch": "@@ -9,26 +9,6 @@ type dummy = int;\n \n native \"rust\" mod rustrt {\n     type vbuf;\n-    fn vec_buf[T](v: vec[T], offset: uint) -> vbuf;\n-    fn vec_len[T](v: vec[T]) -> uint;\n-\n-    /**\n-     * Sometimes we modify the vec internal data via vec_buf and need to\n-     * update the vec's fill length accordingly.\n-     */\n-    fn vec_len_set[T](v: vec[T], n: uint);\n-\n-    /**\n-     * The T in vec_alloc[T, U] is the type of the vec to allocate.  The\n-     * U is the type of an element in the vec.  So to allocate a vec[U] we\n-     * want to invoke this as vec_alloc[vec[U], U].\n-     */\n-    fn vec_alloc[T, U](n_elts: uint) -> vec[U];\n-    fn vec_alloc_mut[T, U](n_elts: uint) -> vec[mutable U];\n-    fn refcount[T](v: vec[T]) -> uint;\n-    fn vec_print_debug_info[T](v: vec[T]);\n-    fn vec_from_vbuf[T](v: vbuf, n_elts: uint) -> vec[T];\n-    fn unsafe_vec_to_mut[T](v: vec[T]) -> vec[mutable T];\n }\n \n // Local Variables:"}, {"sha": "c9688f3cadbdb6e8257068509bc117626cf7f961", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d1b3ed8c3f808182d74c4056eb8936943ad356fb/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d1b3ed8c3f808182d74c4056eb8936943ad356fb/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d1b3ed8c3f808182d74c4056eb8936943ad356fb", "patch": "@@ -120,74 +120,6 @@ unsupervise(rust_task *task) {\n     task->unsupervise();\n }\n \n-extern \"C\" CDECL rust_vec*\n-vec_alloc(rust_task *task, type_desc *t, type_desc *elem_t, size_t n_elts)\n-{\n-    LOG(task, mem, \"vec_alloc %\" PRIdPTR \" elements of size %\" PRIdPTR,\n-        n_elts, elem_t->size);\n-    size_t fill = n_elts * elem_t->size;\n-    size_t alloc = next_power_of_two(sizeof(rust_vec) + fill);\n-    void *mem = task->malloc(alloc, \"rust_vec\", t->is_stateful ? t : NULL);\n-    if (!mem) {\n-        task->fail();\n-        return NULL;\n-    }\n-    rust_vec *vec = new (mem) rust_vec(alloc, 0, NULL);\n-    return vec;\n-}\n-\n-extern \"C\" CDECL rust_vec*\n-vec_alloc_mut(rust_task *task, type_desc *t, type_desc *elem_t, size_t n_elts)\n-{\n-    return vec_alloc(task, t, elem_t, n_elts);\n-}\n-\n-extern \"C\" CDECL void *\n-vec_buf(rust_task *task, type_desc *ty, rust_vec *v, size_t offset)\n-{\n-    return (void *)&v->data[ty->size * offset];\n-}\n-\n-extern \"C\" CDECL size_t\n-vec_len(rust_task *task, type_desc *ty, rust_vec *v)\n-{\n-    return v->fill / ty->size;\n-}\n-\n-extern \"C\" CDECL void\n-vec_len_set(rust_task *task, type_desc *ty, rust_vec *v, size_t len)\n-{\n-    LOG(task, stdlib, \"vec_len_set(0x%\" PRIxPTR \", %\" PRIdPTR \") on vec with \"\n-        \"alloc = %\" PRIdPTR\n-        \", fill = %\" PRIdPTR\n-        \", len = %\" PRIdPTR\n-        \".  New fill is %\" PRIdPTR,\n-        v, len, v->alloc, v->fill, v->fill / ty->size, len * ty->size);\n-    v->fill = len * ty->size;\n-}\n-\n-extern \"C\" CDECL void\n-vec_print_debug_info(rust_task *task, type_desc *ty, rust_vec *v)\n-{\n-    LOG(task, stdlib,\n-        \"vec_print_debug_info(0x%\" PRIxPTR \")\"\n-        \" with tydesc 0x%\" PRIxPTR\n-        \" (size = %\" PRIdPTR \", align = %\" PRIdPTR \")\"\n-        \" alloc = %\" PRIdPTR \", fill = %\" PRIdPTR \", len = %\" PRIdPTR\n-        \" , data = ...\",\n-        v,\n-        ty,\n-        ty->size,\n-        ty->align,\n-        v->alloc,\n-        v->fill,\n-        v->fill / ty->size);\n-\n-    for (size_t i = 0; i < v->fill; ++i) {\n-        LOG(task, stdlib, \"  %\" PRIdPTR \":    0x%\" PRIxPTR, i, v->data[i]);\n-    }\n-}\n-\n /* Helper for str_alloc and str_from_vec.  Returns NULL as failure. */\n static rust_vec*\n vec_alloc_with_data(rust_task *task,\n@@ -202,22 +134,6 @@ vec_alloc_with_data(rust_task *task,\n     return new (mem) rust_vec(alloc, fill * elt_size, (uint8_t*)d);\n }\n \n-extern \"C\" CDECL rust_vec*\n-vec_from_vbuf(rust_task *task, type_desc *ty, void *vbuf, size_t n_elts)\n-{\n-    return vec_alloc_with_data(task, n_elts, n_elts * ty->size, ty->size,\n-                               vbuf);\n-}\n-\n-extern \"C\" CDECL rust_vec*\n-unsafe_vec_to_mut(rust_task *task, type_desc *ty, rust_vec *v)\n-{\n-    if (v->ref_count != CONST_REFCOUNT) {\n-        v->ref();\n-    }\n-    return v;\n-}\n-\n extern \"C\" CDECL rust_str*\n str_alloc(rust_task *task, size_t n_bytes)\n {"}, {"sha": "2c0f98c3462fa3df5b7850ceaa547a8237569766", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1b3ed8c3f808182d74c4056eb8936943ad356fb/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/d1b3ed8c3f808182d74c4056eb8936943ad356fb/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=d1b3ed8c3f808182d74c4056eb8936943ad356fb", "patch": "@@ -71,7 +71,6 @@ take_chan\n task_sleep\n task_yield\n task_join\n-unsafe_vec_to_mut\n unsupervise\n upcall_chan_target_task\n upcall_clone_chan\n@@ -113,11 +112,4 @@ upcall_take_task\n upcall_take_chan\n upcall_vec_append\n upcall_yield\n-vec_alloc\n-vec_alloc_mut\n-vec_buf\n-vec_from_vbuf\n-vec_len\n-vec_len_set\n-vec_print_debug_info\n "}]}