{"sha": "5b5499d5e60777b277d97efce5e62ab98c9cf823", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNTQ5OWQ1ZTYwNzc3YjI3N2Q5N2VmY2U1ZTYyYWI5OGM5Y2Y4MjM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-12T15:00:55Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-13T10:27:02Z"}, "message": "incr.comp.: Make DepNode's std::fmt::Debug implementation useful again.", "tree": {"sha": "6c1465f541173c7c1e1ea5dc247d7c7c54f57b51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c1465f541173c7c1e1ea5dc247d7c7c54f57b51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5499d5e60777b277d97efce5e62ab98c9cf823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5499d5e60777b277d97efce5e62ab98c9cf823", "html_url": "https://github.com/rust-lang/rust/commit/5b5499d5e60777b277d97efce5e62ab98c9cf823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5499d5e60777b277d97efce5e62ab98c9cf823/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f8b93693da78c2cfe1d7f1dc6834c5ba61e0cc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8b93693da78c2cfe1d7f1dc6834c5ba61e0cc0", "html_url": "https://github.com/rust-lang/rust/commit/3f8b93693da78c2cfe1d7f1dc6834c5ba61e0cc0"}], "stats": {"total": 154, "additions": 150, "deletions": 4}, "files": [{"sha": "787a9fb38aa55908aaba43fb10bf1309b034c6da", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 120, "deletions": 4, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/5b5499d5e60777b277d97efce5e62ab98c9cf823/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5499d5e60777b277d97efce5e62ab98c9cf823/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5b5499d5e60777b277d97efce5e62ab98c9cf823", "patch": "@@ -67,6 +67,7 @@ use ich::Fingerprint;\n use ty::TyCtxt;\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use ich::StableHashingContext;\n+use std::fmt;\n use std::hash::Hash;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n@@ -145,7 +146,7 @@ macro_rules! define_dep_nodes {\n             ),*\n         }\n \n-        #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n+        #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash,\n                  RustcEncodable, RustcDecodable)]\n         pub struct DepNode {\n             pub kind: DepKind,\n@@ -166,21 +167,45 @@ macro_rules! define_dep_nodes {\n                                 let tupled_args = ( $($tuple_arg,)* );\n                                 let hash = DepNodeParams::to_fingerprint(&tupled_args,\n                                                                          tcx);\n-                                return DepNode {\n+                                let dep_node = DepNode {\n                                     kind: DepKind::$variant,\n                                     hash\n                                 };\n+\n+                                if cfg!(debug_assertions) &&\n+                                   !dep_node.kind.can_reconstruct_query_key() &&\n+                                   (tcx.sess.opts.debugging_opts.incremental_info ||\n+                                    tcx.sess.opts.debugging_opts.query_dep_graph)\n+                                {\n+                                    tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n+                                        tupled_args.to_debug_str(tcx)\n+                                    });\n+                                }\n+\n+                                return dep_node;\n                             })*\n \n                             // struct args\n                             $({\n                                 let tupled_args = ( $($struct_arg_name,)* );\n                                 let hash = DepNodeParams::to_fingerprint(&tupled_args,\n                                                                          tcx);\n-                                return DepNode {\n+                                let dep_node = DepNode {\n                                     kind: DepKind::$variant,\n                                     hash\n                                 };\n+\n+                                if cfg!(debug_assertions) &&\n+                                   !dep_node.kind.can_reconstruct_query_key() &&\n+                                   (tcx.sess.opts.debugging_opts.incremental_info ||\n+                                    tcx.sess.opts.debugging_opts.query_dep_graph)\n+                                {\n+                                    tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n+                                        tupled_args.to_debug_str(tcx)\n+                                    });\n+                                }\n+\n+                                return dep_node;\n                             })*\n \n                             DepNode {\n@@ -267,6 +292,36 @@ macro_rules! define_dep_nodes {\n     );\n }\n \n+impl fmt::Debug for DepNode {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{:?}\", self.kind)?;\n+\n+        if !self.kind.has_params() {\n+            return Ok(());\n+        }\n+\n+        write!(f, \"(\")?;\n+\n+        ::ty::tls::with_opt(|opt_tcx| {\n+            if let Some(tcx) = opt_tcx {\n+                if let Some(def_id) = self.extract_def_id(tcx) {\n+                    write!(f, \"{}\", tcx.item_path_str(def_id))?;\n+                } else if let Some(ref s) = tcx.dep_graph.dep_node_debug_str(*self) {\n+                    write!(f, \"{}\", s)?;\n+                } else {\n+                    write!(f, \"{:?}\", self.hash)?;\n+                }\n+            } else {\n+                write!(f, \"{:?}\", self.hash)?;\n+            }\n+            Ok(())\n+        })?;\n+\n+        write!(f, \")\")\n+    }\n+}\n+\n+\n impl DefPathHash {\n     #[inline]\n     pub fn to_dep_node(self, kind: DepKind) -> DepNode {\n@@ -434,10 +489,11 @@ define_dep_nodes!(\n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool;\n     fn to_fingerprint(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Fingerprint;\n+    fn to_debug_str(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> String;\n }\n \n impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a, T> DepNodeParams<'a, 'gcx, 'tcx> for T\n-    where T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n+    where T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>> + fmt::Debug\n {\n     default const CAN_RECONSTRUCT_QUERY_KEY: bool = false;\n \n@@ -449,6 +505,10 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a, T> DepNodeParams<'a, 'gcx, 'tcx> for T\n \n         hasher.finish()\n     }\n+\n+    default fn to_debug_str(&self, _: TyCtxt<'a, 'gcx, 'tcx>) -> String {\n+        format!(\"{:?}\", *self)\n+    }\n }\n \n impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefId,) {\n@@ -457,6 +517,62 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefId,) {\n     fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n         tcx.def_path_hash(self.0).0\n     }\n+\n+    fn to_debug_str(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> String {\n+        tcx.item_path_str(self.0)\n+    }\n+}\n+\n+impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefId, DefId) {\n+    const CAN_RECONSTRUCT_QUERY_KEY: bool = false;\n+\n+    fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n+        let (def_id_0, def_id_1) = *self;\n+\n+        let def_path_hash_0 = tcx.def_path_hash(def_id_0);\n+        let def_path_hash_1 = tcx.def_path_hash(def_id_1);\n+\n+        def_path_hash_0.0.combine(def_path_hash_1.0)\n+    }\n+\n+    fn to_debug_str(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> String {\n+        let (def_id_0, def_id_1) = *self;\n+\n+        format!(\"({}, {})\",\n+                tcx.def_path(def_id_0).to_string(tcx),\n+                tcx.def_path(def_id_1).to_string(tcx))\n+    }\n+}\n+\n+\n+impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefIdList,) {\n+    const CAN_RECONSTRUCT_QUERY_KEY: bool = false;\n+\n+    fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n+        let mut fingerprint = Fingerprint::zero();\n+\n+        for &def_id in self.0.iter() {\n+            let def_path_hash = tcx.def_path_hash(def_id);\n+            fingerprint = fingerprint.combine(def_path_hash.0);\n+        }\n+\n+        fingerprint\n+    }\n+\n+    fn to_debug_str(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> String {\n+        use std::fmt::Write;\n+\n+        let mut s = String::new();\n+        write!(&mut s, \"[\").unwrap();\n+\n+        for &def_id in self.0.iter() {\n+            write!(&mut s, \"{}\", tcx.def_path(def_id).to_string(tcx)).unwrap();\n+        }\n+\n+        write!(&mut s, \"]\").unwrap();\n+\n+        s\n+    }\n }\n \n /// A \"work product\" corresponds to a `.o` (or other) file that we"}, {"sha": "e48e61d803510468d1c2b622034254246b078e5a", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b5499d5e60777b277d97efce5e62ab98c9cf823/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5499d5e60777b277d97efce5e62ab98c9cf823/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=5b5499d5e60777b277d97efce5e62ab98c9cf823", "patch": "@@ -37,6 +37,8 @@ struct DepGraphData {\n \n     /// Work-products that we generate in this run.\n     work_products: RefCell<FxHashMap<WorkProductId, WorkProduct>>,\n+\n+    dep_node_debug: RefCell<FxHashMap<DepNode, String>>,\n }\n \n impl DepGraph {\n@@ -46,6 +48,7 @@ impl DepGraph {\n                 thread: DepGraphThreadData::new(enabled),\n                 previous_work_products: RefCell::new(FxHashMap()),\n                 work_products: RefCell::new(FxHashMap()),\n+                dep_node_debug: RefCell::new(FxHashMap()),\n             })\n         }\n     }\n@@ -152,6 +155,22 @@ impl DepGraph {\n     pub fn previous_work_products(&self) -> Ref<FxHashMap<WorkProductId, WorkProduct>> {\n         self.data.previous_work_products.borrow()\n     }\n+\n+    #[inline(always)]\n+    pub(super) fn register_dep_node_debug_str<F>(&self,\n+                                                 dep_node: DepNode,\n+                                                 debug_str_gen: F)\n+        where F: FnOnce() -> String\n+    {\n+        let mut dep_node_debug = self.data.dep_node_debug.borrow_mut();\n+\n+        dep_node_debug.entry(dep_node)\n+                      .or_insert_with(debug_str_gen);\n+    }\n+\n+    pub(super) fn dep_node_debug_str(&self, dep_node: DepNode) -> Option<String> {\n+        self.data.dep_node_debug.borrow().get(&dep_node).cloned()\n+    }\n }\n \n /// A \"work product\" is an intermediate result that we save into the"}, {"sha": "2391b61253aa98883a2e9778bfe3c3971e17f8f1", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b5499d5e60777b277d97efce5e62ab98c9cf823/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5499d5e60777b277d97efce5e62ab98c9cf823/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=5b5499d5e60777b277d97efce5e62ab98c9cf823", "patch": "@@ -31,9 +31,20 @@ impl Fingerprint {\n         self.0\n     }\n \n+    #[inline]\n+    pub fn combine(self, other: Fingerprint) -> Fingerprint {\n+        // See https://stackoverflow.com/a/27952689 on why this function is\n+        // implemented this way.\n+        Fingerprint(\n+            self.0.wrapping_mul(3).wrapping_add(other.0),\n+            self.1.wrapping_mul(3).wrapping_add(other.1)\n+        )\n+    }\n+\n     pub fn to_hex(&self) -> String {\n         format!(\"{:x}{:x}\", self.0, self.1)\n     }\n+\n }\n \n impl ::std::fmt::Display for Fingerprint {"}]}