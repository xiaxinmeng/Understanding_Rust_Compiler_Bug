{"sha": "71cd6f42a6214510692afc662147919d53239ff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxY2Q2ZjQyYTYyMTQ1MTA2OTJhZmM2NjIxNDc5MTlkNTMyMzlmZjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-12-19T20:38:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-01-09T18:50:39Z"}, "message": "ast: Remove some indirection layers from values in key-value attributes", "tree": {"sha": "ca031315f428f7e118166d0b184be36e19db89ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca031315f428f7e118166d0b184be36e19db89ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71cd6f42a6214510692afc662147919d53239ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71cd6f42a6214510692afc662147919d53239ff4", "html_url": "https://github.com/rust-lang/rust/commit/71cd6f42a6214510692afc662147919d53239ff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71cd6f42a6214510692afc662147919d53239ff4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef589490a709984d3be80c9b59a1a10a4dd05e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef589490a709984d3be80c9b59a1a10a4dd05e3c", "html_url": "https://github.com/rust-lang/rust/commit/ef589490a709984d3be80c9b59a1a10a4dd05e3c"}], "stats": {"total": 122, "additions": 72, "deletions": 50}, "files": [{"sha": "8601da6fa0650acdab68d5a1c685165b214f3bae", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -23,8 +23,8 @@ pub use GenericArgs::*;\n pub use UnsafeSource::*;\n \n use crate::ptr::P;\n-use crate::token::{self, CommentKind, DelimToken};\n-use crate::tokenstream::{DelimSpan, LazyTokenStream, TokenStream};\n+use crate::token::{self, CommentKind, DelimToken, Token};\n+use crate::tokenstream::{DelimSpan, LazyTokenStream, TokenStream, TokenTree};\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -1464,8 +1464,8 @@ pub enum MacArgs {\n     Eq(\n         /// Span of the `=` token.\n         Span,\n-        /// Token stream of the \"value\".\n-        TokenStream,\n+        /// \"value\" as a nonterminal token.\n+        Token,\n     ),\n }\n \n@@ -1478,10 +1478,10 @@ impl MacArgs {\n     }\n \n     pub fn span(&self) -> Option<Span> {\n-        match *self {\n+        match self {\n             MacArgs::Empty => None,\n             MacArgs::Delimited(dspan, ..) => Some(dspan.entire()),\n-            MacArgs::Eq(eq_span, ref tokens) => Some(eq_span.to(tokens.span().unwrap_or(eq_span))),\n+            MacArgs::Eq(eq_span, token) => Some(eq_span.to(token.span)),\n         }\n     }\n \n@@ -1490,7 +1490,8 @@ impl MacArgs {\n     pub fn inner_tokens(&self) -> TokenStream {\n         match self {\n             MacArgs::Empty => TokenStream::default(),\n-            MacArgs::Delimited(.., tokens) | MacArgs::Eq(.., tokens) => tokens.clone(),\n+            MacArgs::Delimited(.., tokens) => tokens.clone(),\n+            MacArgs::Eq(.., token) => TokenTree::Token(token.clone()).into(),\n         }\n     }\n "}, {"sha": "6a54cb4766b2426251a5ca1fff2cb41a8108fe36", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -476,7 +476,7 @@ impl MetaItemKind {\n     pub fn mac_args(&self, span: Span) -> MacArgs {\n         match self {\n             MetaItemKind::Word => MacArgs::Empty,\n-            MetaItemKind::NameValue(lit) => MacArgs::Eq(span, lit.token_tree().into()),\n+            MetaItemKind::NameValue(lit) => MacArgs::Eq(span, lit.to_token()),\n             MetaItemKind::List(list) => {\n                 let mut tts = Vec::new();\n                 for (i, item) in list.iter().enumerate() {\n@@ -498,7 +498,10 @@ impl MetaItemKind {\n         match *self {\n             MetaItemKind::Word => vec![],\n             MetaItemKind::NameValue(ref lit) => {\n-                vec![TokenTree::token(token::Eq, span).into(), lit.token_tree().into()]\n+                vec![\n+                    TokenTree::token(token::Eq, span).into(),\n+                    TokenTree::Token(lit.to_token()).into(),\n+                ]\n             }\n             MetaItemKind::List(ref list) => {\n                 let mut tokens = Vec::new();\n@@ -554,10 +557,7 @@ impl MetaItemKind {\n                 MetaItemKind::list_from_tokens(tokens.clone())\n             }\n             MacArgs::Delimited(..) => None,\n-            MacArgs::Eq(_, tokens) => {\n-                assert!(tokens.len() == 1);\n-                MetaItemKind::name_value_from_tokens(&mut tokens.trees())\n-            }\n+            MacArgs::Eq(_, token) => Lit::from_token(token).ok().map(MetaItemKind::NameValue),\n             MacArgs::Empty => Some(MetaItemKind::Word),\n         }\n     }\n@@ -592,7 +592,7 @@ impl NestedMetaItem {\n     fn token_trees_and_spacings(&self) -> Vec<TreeAndSpacing> {\n         match *self {\n             NestedMetaItem::MetaItem(ref item) => item.token_trees_and_spacings(),\n-            NestedMetaItem::Literal(ref lit) => vec![lit.token_tree().into()],\n+            NestedMetaItem::Literal(ref lit) => vec![TokenTree::Token(lit.to_token()).into()],\n         }\n     }\n "}, {"sha": "575552c4dcee67d69d13ca69a3bf0b3f182908ef", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -365,18 +365,16 @@ pub fn visit_mac_args<T: MutVisitor>(args: &mut MacArgs, vis: &mut T) {\n             visit_delim_span(dspan, vis);\n             visit_tts(tokens, vis);\n         }\n-        MacArgs::Eq(eq_span, tokens) => {\n+        MacArgs::Eq(eq_span, token) => {\n             vis.visit_span(eq_span);\n-            visit_tts(tokens, vis);\n-            // The value in `#[key = VALUE]` must be visited as an expression for backward\n-            // compatibility, so that macros can be expanded in that position.\n-            if !vis.token_visiting_enabled() {\n-                match Lrc::make_mut(&mut tokens.0).get_mut(0) {\n-                    Some((TokenTree::Token(token), _spacing)) => match &mut token.kind {\n-                        token::Interpolated(nt) => match Lrc::make_mut(nt) {\n-                            token::NtExpr(expr) => vis.visit_expr(expr),\n-                            t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n-                        },\n+            if vis.token_visiting_enabled() {\n+                visit_token(token, vis);\n+            } else {\n+                // The value in `#[key = VALUE]` must be visited as an expression for backward\n+                // compatibility, so that macros can be expanded in that position.\n+                match &mut token.kind {\n+                    token::Interpolated(nt) => match Lrc::make_mut(nt) {\n+                        token::NtExpr(expr) => vis.visit_expr(expr),\n                         t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n                     },\n                     t => panic!(\"unexpected token in key-value attribute: {:?}\", t),"}, {"sha": "106ffb2a0fdfbddb15866c078885e8ba3d5d0e5e", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -2,7 +2,6 @@\n \n use crate::ast::{self, Lit, LitKind};\n use crate::token::{self, Token};\n-use crate::tokenstream::TokenTree;\n \n use rustc_lexer::unescape::{unescape_byte, unescape_char};\n use rustc_lexer::unescape::{unescape_byte_literal, unescape_literal, Mode};\n@@ -225,13 +224,13 @@ impl Lit {\n         Lit { token: kind.to_lit_token(), kind, span }\n     }\n \n-    /// Losslessly convert an AST literal into a token stream.\n-    pub fn token_tree(&self) -> TokenTree {\n-        let token = match self.token.kind {\n+    /// Losslessly convert an AST literal into a token.\n+    pub fn to_token(&self) -> Token {\n+        let kind = match self.token.kind {\n             token::Bool => token::Ident(self.token.symbol, false),\n             _ => token::Literal(self.token),\n         };\n-        TokenTree::token(token, self.span)\n+        Token::new(kind, self.span)\n     }\n }\n "}, {"sha": "2ba1c49edfa4462d328c1d5dc81d355c164bd8e1", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -15,7 +15,6 @@\n \n use crate::ast::*;\n use crate::token;\n-use crate::tokenstream::TokenTree;\n \n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n@@ -905,12 +904,9 @@ pub fn walk_mac_args<'a, V: Visitor<'a>>(visitor: &mut V, args: &'a MacArgs) {\n         MacArgs::Delimited(_dspan, _delim, _tokens) => {}\n         // The value in `#[key = VALUE]` must be visited as an expression for backward\n         // compatibility, so that macros can be expanded in that position.\n-        MacArgs::Eq(_eq_span, tokens) => match tokens.trees_ref().next() {\n-            Some(TokenTree::Token(token)) => match &token.kind {\n-                token::Interpolated(nt) => match &**nt {\n-                    token::NtExpr(expr) => visitor.visit_expr(expr),\n-                    t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n-                },\n+        MacArgs::Eq(_eq_span, token) => match &token.kind {\n+            token::Interpolated(nt) => match &**nt {\n+                token::NtExpr(expr) => visitor.visit_expr(expr),\n                 t => panic!(\"unexpected token in key-value attribute: {:?}\", t),\n             },\n             t => panic!(\"unexpected token in key-value attribute: {:?}\", t),"}, {"sha": "89557c29dd1664c6f23b8bd89821ca547452b595", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -1013,10 +1013,36 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // This is an inert key-value attribute - it will never be visible to macros\n             // after it gets lowered to HIR. Therefore, we can synthesize tokens with fake\n             // spans to handle nonterminals in `#[doc]` (e.g. `#[doc = $e]`).\n-            MacArgs::Eq(eq_span, ref tokens) => MacArgs::Eq(\n-                eq_span,\n-                self.lower_token_stream(tokens.clone(), CanSynthesizeMissingTokens::Yes),\n-            ),\n+            MacArgs::Eq(eq_span, ref token) => {\n+                // In valid code the value is always representable as a single literal token.\n+                fn unwrap_single_token(sess: &Session, tokens: TokenStream, span: Span) -> Token {\n+                    if tokens.len() != 1 {\n+                        sess.diagnostic()\n+                            .delay_span_bug(span, \"multiple tokens in key-value attribute's value\");\n+                    }\n+                    match tokens.into_trees().next() {\n+                        Some(TokenTree::Token(token)) => token,\n+                        Some(TokenTree::Delimited(_, delim, tokens)) => {\n+                            if delim != token::NoDelim {\n+                                sess.diagnostic().delay_span_bug(\n+                                    span,\n+                                    \"unexpected delimiter in key-value attribute's value\",\n+                                )\n+                            }\n+                            unwrap_single_token(sess, tokens, span)\n+                        }\n+                        None => Token::dummy(),\n+                    }\n+                }\n+\n+                let tokens = TokenStreamLowering {\n+                    parse_sess: &self.sess.parse_sess,\n+                    synthesize_tokens: CanSynthesizeMissingTokens::Yes,\n+                    nt_to_tokenstream: self.nt_to_tokenstream,\n+                }\n+                .lower_token(token.clone());\n+                MacArgs::Eq(eq_span, unwrap_single_token(self.sess, tokens, token.span))\n+            }\n         }\n     }\n "}, {"sha": "2c8caf68f00dae5a5a5d65690224aebf92114348", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -445,10 +445,11 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             ),\n             MacArgs::Empty | MacArgs::Eq(..) => {\n                 self.print_path(&item.path, false, 0);\n-                if let MacArgs::Eq(_, tokens) = &item.args {\n+                if let MacArgs::Eq(_, token) = &item.args {\n                     self.space();\n                     self.word_space(\"=\");\n-                    self.print_tts(tokens, true);\n+                    let token_str = self.token_to_string_ext(token, true);\n+                    self.word(token_str);\n                 }\n             }\n         }"}, {"sha": "d0b36a4cf1bc4cba221f1007968fe907f8855238", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -983,8 +983,8 @@ impl<'a> Parser<'a> {\n                         _ => self.sess.gated_spans.gate(sym::extended_key_value_attributes, span),\n                     }\n \n-                    let token = token::Interpolated(Lrc::new(token::NtExpr(expr)));\n-                    MacArgs::Eq(eq_span, TokenTree::token(token, span).into())\n+                    let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));\n+                    MacArgs::Eq(eq_span, Token::new(token_kind, span))\n                 } else {\n                     MacArgs::Empty\n                 }"}, {"sha": "21372725a6836b63fc2d45b62d25221f010e25ec", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -2,7 +2,7 @@\n \n use crate::parse_in;\n \n-use rustc_ast::tokenstream::DelimSpan;\n+use rustc_ast::tokenstream::{DelimSpan, TokenTree};\n use rustc_ast::{self as ast, Attribute, MacArgs, MacDelimiter, MetaItem, MetaItemKind};\n use rustc_errors::{Applicability, PResult};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n@@ -45,7 +45,8 @@ pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, Meta\n         kind: match &item.args {\n             MacArgs::Empty => MetaItemKind::Word,\n             MacArgs::Eq(_, t) => {\n-                let v = parse_in(sess, t.clone(), \"name value\", |p| p.parse_unsuffixed_lit())?;\n+                let t = TokenTree::Token(t.clone()).into();\n+                let v = parse_in(sess, t, \"name value\", |p| p.parse_unsuffixed_lit())?;\n                 MetaItemKind::NameValue(v)\n             }\n             MacArgs::Delimited(dspan, delim, t) => {"}, {"sha": "9c29a5f2337cd2ca34c6ead354f1397e203756c7", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":null}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":null}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "cccd51985dc830691b3f7bb451210bc639f389b3", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":null}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":null}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "eac5d0aa3ee9d88203cd0af1023d5a7d39e94196", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71cd6f42a6214510692afc662147919d53239ff4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71cd6f42a6214510692afc662147919d53239ff4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=71cd6f42a6214510692afc662147919d53239ff4", "patch": "@@ -556,7 +556,7 @@ pub fn eq_mac_args(l: &MacArgs, r: &MacArgs) -> bool {\n     match (l, r) {\n         (Empty, Empty) => true,\n         (Delimited(_, ld, lts), Delimited(_, rd, rts)) => ld == rd && lts.eq_unspanned(rts),\n-        (Eq(_, lts), Eq(_, rts)) => lts.eq_unspanned(rts),\n+        (Eq(_, lt), Eq(_, rt)) => lt.kind == rt.kind,\n         _ => false,\n     }\n }"}]}