{"sha": "cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMGY1Y2E4MTRhMWNmM2E1YWU4ODMwYmJjYmFiZWExZTNhMDQ1YWY=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-19T19:40:00Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-19T21:06:35Z"}, "message": "Implement CommentCodeSlices", "tree": {"sha": "d427a583cff7e8c8cb377c91da44023f46562fb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d427a583cff7e8c8cb377c91da44023f46562fb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af", "html_url": "https://github.com/rust-lang/rust/commit/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0148c16b64b7d3eb004398b0081ea6fa1b514c24", "url": "https://api.github.com/repos/rust-lang/rust/commits/0148c16b64b7d3eb004398b0081ea6fa1b514c24", "html_url": "https://github.com/rust-lang/rust/commit/0148c16b64b7d3eb004398b0081ea6fa1b514c24"}], "stats": {"total": 95, "additions": 78, "deletions": 17}, "files": [{"sha": "d9b2d1e111e57812e29918c644b02abec770fdf1", "filename": "src/comment.rs", "status": "modified", "additions": 74, "deletions": 9, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af", "patch": "@@ -162,15 +162,15 @@ pub fn contains_comment(text: &str) -> bool {\n     CharClasses::new(text.chars()).any(|(kind, _)| kind == CodeCharKind::Comment)\n }\n \n-struct CharClasses<T>\n+pub struct CharClasses<T>\n     where T: Iterator,\n           T::Item: RichChar\n {\n     base: iter::Peekable<T>,\n     status: CharClassesStatus,\n }\n \n-trait RichChar {\n+pub trait RichChar {\n     fn get_char(&self) -> char;\n }\n \n@@ -195,23 +195,23 @@ enum CharClassesStatus {\n     LitCharEscape,\n     // The u32 is the nesting deepness of the comment\n     BlockComment(u32),\n-    // Status when the '/' has been consumed, but not yet the '*', deepness is the new deepness\n-    // (after the comment opening).\n+    // Status when the '/' has been consumed, but not yet the '*', deepness is\n+    // the new deepness (after the comment opening).\n     BlockCommentOpening(u32),\n-    // Status when the '*' has been consumed, but not yet the '/', deepness is the new deepness\n-    // (after the comment closing).\n+    // Status when the '*' has been consumed, but not yet the '/', deepness is\n+    // the new deepness (after the comment closing).\n     BlockCommentClosing(u32),\n     LineComment,\n }\n \n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n-enum CodeCharKind {\n+pub enum CodeCharKind {\n     Normal,\n     Comment,\n }\n \n impl<T> CharClasses<T> where T: Iterator, T::Item: RichChar {\n-    fn new(base: T) -> CharClasses<T> {\n+    pub fn new(base: T) -> CharClasses<T> {\n         CharClasses {\n             base: base.peekable(),\n             status: CharClassesStatus::Normal,\n@@ -298,11 +298,76 @@ impl<T> Iterator for CharClasses<T> where T: Iterator, T::Item: RichChar {\n     }\n }\n \n+struct CommentCodeSlices<'a> {\n+    slice: &'a str,\n+    last_slice_type: CodeCharKind,\n+    last_slice_end: usize,\n+}\n+\n+impl<'a> CommentCodeSlices<'a> {\n+    fn new(slice: &'a str) -> CommentCodeSlices<'a> {\n+        CommentCodeSlices {\n+            slice: slice,\n+            last_slice_type: CodeCharKind::Comment,\n+            last_slice_end: 0,\n+        }\n+    }\n+}\n+\n+impl<'a> Iterator for CommentCodeSlices<'a> {\n+    type Item = (CodeCharKind, &'a str);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if self.last_slice_end == self.slice.len() {\n+            return None;\n+        }\n+\n+        let mut sub_slice_end = self.last_slice_end;\n+        for (kind, (i, _)) in CharClasses::new(self.slice[self.last_slice_end..].char_indices()) {\n+            if kind == self.last_slice_type {\n+                sub_slice_end = self.last_slice_end + i;\n+                break;\n+            }\n+        }\n+\n+        let kind = match self.last_slice_type {\n+            CodeCharKind::Comment => CodeCharKind::Normal,\n+            CodeCharKind::Normal => CodeCharKind::Comment,\n+        };\n+        self.last_slice_type = kind;\n+\n+        // FIXME: be consistent in use of kind vs type.\n+        if sub_slice_end == self.last_slice_end {\n+            // This was the last subslice.\n+            self.last_slice_end = self.slice.len();\n+\n+            Some((kind, &self.slice[sub_slice_end..]))\n+        } else {\n+            let res = &self.slice[self.last_slice_end..sub_slice_end];\n+            self.last_slice_end = sub_slice_end;\n+            Some((kind, res))\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n-    use super::{CharClasses, CodeCharKind, contains_comment, rewrite_comment, FindUncommented};\n+    use super::{CharClasses, CodeCharKind, contains_comment, rewrite_comment, FindUncommented,\n+                CommentCodeSlices};\n     use Indent;\n \n+    #[test]\n+    fn comment_code_slices() {\n+        let input = \"code(); /* test */ 1 + 1\";\n+\n+        let mut iter = CommentCodeSlices::new(input);\n+\n+        assert_eq!((CodeCharKind::Normal, \"code(); \"), iter.next().unwrap());\n+        assert_eq!((CodeCharKind::Comment, \"/* test */\"), iter.next().unwrap());\n+        assert_eq!((CodeCharKind::Normal, \" 1 + 1\"), iter.next().unwrap());\n+        assert_eq!(None, iter.next());\n+    }\n+\n     #[test]\n     #[rustfmt_skip]\n     fn format_comments() {"}, {"sha": "6cb4a88d160a218f7e5483bb906354f9778b8dae", "filename": "src/missed_spans.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=cf0f5ca814a1cf3a5ae8830bbcbabea1e3a045af", "patch": "@@ -10,7 +10,8 @@\n \n use visitor::FmtVisitor;\n \n-use syntax::codemap::{self, BytePos};\n+use syntax::codemap::{self, BytePos, Span};\n+use comment::{CharClasses, CodeCharKind};\n \n impl<'a> FmtVisitor<'a> {\n     // TODO these format_missing methods are ugly. Refactor and add unit tests\n@@ -37,16 +38,12 @@ impl<'a> FmtVisitor<'a> {\n                                                                 end: BytePos,\n                                                                 process_last_snippet: F) {\n         let start = self.last_pos;\n-        debug!(\"format_missing_inner: {:?} to {:?}\",\n-               self.codemap.lookup_char_pos(start),\n-               self.codemap.lookup_char_pos(end));\n \n         if start == end {\n             // Do nothing if this is the beginning of the file.\n-            if start == self.codemap.lookup_char_pos(start).file.start_pos {\n-                return;\n+            if start != self.codemap.lookup_char_pos(start).file.start_pos {\n+                process_last_snippet(self, \"\", \"\");\n             }\n-            process_last_snippet(self, \"\", \"\");\n             return;\n         }\n \n@@ -57,7 +54,6 @@ impl<'a> FmtVisitor<'a> {\n \n         self.last_pos = end;\n         let span = codemap::mk_sp(start, end);\n-        let snippet = self.snippet(span);\n \n         self.write_snippet(&snippet, &process_last_snippet);\n     }"}]}