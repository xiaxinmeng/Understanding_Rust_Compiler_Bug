{"sha": "c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZTUxN2UwYzRlYWJkYTVmNzFiZWMxMTI0ZWQ1YmI3NDZjMzllYjA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-26T10:48:34Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T10:18:49Z"}, "message": "ty: HirIdify some lints", "tree": {"sha": "22417bf2d8b51d6c99beb91a2c64edd4bf488526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22417bf2d8b51d6c99beb91a2c64edd4bf488526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "html_url": "https://github.com/rust-lang/rust/commit/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e72584c3a1b74dcc8f2ef51fb1d934c397b524aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e72584c3a1b74dcc8f2ef51fb1d934c397b524aa", "html_url": "https://github.com/rust-lang/rust/commit/e72584c3a1b74dcc8f2ef51fb1d934c397b524aa"}], "stats": {"total": 151, "additions": 62, "deletions": 89}, "files": [{"sha": "9761ee313533fe446b3b2410996e798f676e4e88", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -729,8 +729,7 @@ impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n         match span {\n             Some(s) => self.tcx.struct_span_lint_hir(lint, hir_id, s, msg),\n             None => {\n-                let node_id = self.tcx.hir().hir_to_node_id(hir_id); // FIXME(@ljedrz): remove later\n-                self.tcx.struct_lint_node(lint, node_id, msg)\n+                self.tcx.struct_lint_node(lint, hir_id, msg)\n             },\n         }\n     }"}, {"sha": "5b7bfab5acc71944c3d1828a9a09dce109158945", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -13,7 +13,6 @@ use crate::middle::privacy::AccessLevels;\n use crate::session::{DiagnosticMessageId, Session};\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, MultiSpan};\n-use syntax::ast;\n use syntax::ast::Attribute;\n use syntax::errors::Applicability;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n@@ -922,8 +921,8 @@ fn unnecessary_stable_feature_lint<'a, 'tcx>(\n     feature: Symbol,\n     since: Symbol\n ) {\n-    tcx.lint_node(lint::builtin::STABLE_FEATURES,\n-        ast::CRATE_NODE_ID,\n+    tcx.lint_hir(lint::builtin::STABLE_FEATURES,\n+        hir::CRATE_HIR_ID,\n         span,\n         &format!(\"the feature `{}` has been stable since {} and no longer requires \\\n                   an attribute to enable\", feature, since));"}, {"sha": "a2924cb993fbf6f2039b5eeeb1e07663c3ea5a8b", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -334,9 +334,9 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n                         FutureCompatOverlapErrorKind::Issue33140 =>\n                             lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS,\n                     };\n-                    tcx.struct_span_lint_node(\n+                    tcx.struct_span_lint_hir(\n                         lint,\n-                        tcx.hir().as_local_node_id(impl_def_id).unwrap(),\n+                        tcx.hir().as_local_hir_id(impl_def_id).unwrap(),\n                         impl_span,\n                         &msg)\n                 } else {"}, {"sha": "1983dfbd4b7d16f06ae37b07deb8741d5b073e75", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -65,7 +65,7 @@ use std::sync::mpsc;\n use std::sync::Arc;\n use std::marker::PhantomData;\n use rustc_target::spec::abi;\n-use syntax::ast::{self, NodeId};\n+use syntax::ast;\n use syntax::attr;\n use syntax::source_map::MultiSpan;\n use syntax::edition::Edition;\n@@ -2836,14 +2836,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.struct_span_lint_hir(lint, hir_id, span.into(), msg).emit()\n     }\n \n-    pub fn lint_node<S: Into<MultiSpan>>(self,\n-                                         lint: &'static Lint,\n-                                         id: NodeId,\n-                                         span: S,\n-                                         msg: &str) {\n-        self.struct_span_lint_node(lint, id, span.into(), msg).emit()\n-    }\n-\n     pub fn lint_hir_note<S: Into<MultiSpan>>(self,\n                                              lint: &'static Lint,\n                                              hir_id: HirId,\n@@ -2866,7 +2858,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         err.emit()\n     }\n \n-    pub fn lint_level_at_node(self, lint: &'static Lint, mut id: NodeId)\n+    pub fn lint_level_at_node(self, lint: &'static Lint, mut id: hir::HirId)\n         -> (lint::Level, lint::LintSource)\n     {\n         // Right now we insert a `with_ignore` node in the dep graph here to\n@@ -2880,11 +2872,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.dep_graph.with_ignore(|| {\n             let sets = self.lint_levels(LOCAL_CRATE);\n             loop {\n-                let hir_id = self.hir().definitions().node_to_hir_id(id);\n-                if let Some(pair) = sets.level_and_source(lint, hir_id, self.sess) {\n+                if let Some(pair) = sets.level_and_source(lint, id, self.sess) {\n                     return pair\n                 }\n-                let next = self.hir().get_parent_node(id);\n+                let next = self.hir().get_parent_node_by_hir_id(id);\n                 if next == id {\n                     bug!(\"lint traversal reached the root of the crate\");\n                 }\n@@ -2900,23 +2891,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                                     msg: &str)\n         -> DiagnosticBuilder<'tcx>\n     {\n-        let node_id = self.hir().hir_to_node_id(hir_id);\n-        let (level, src) = self.lint_level_at_node(lint, node_id);\n-        lint::struct_lint_level(self.sess, lint, level, src, Some(span.into()), msg)\n-    }\n-\n-    pub fn struct_span_lint_node<S: Into<MultiSpan>>(self,\n-                                                     lint: &'static Lint,\n-                                                     id: NodeId,\n-                                                     span: S,\n-                                                     msg: &str)\n-        -> DiagnosticBuilder<'tcx>\n-    {\n-        let (level, src) = self.lint_level_at_node(lint, id);\n+        let (level, src) = self.lint_level_at_node(lint, hir_id);\n         lint::struct_lint_level(self.sess, lint, level, src, Some(span.into()), msg)\n     }\n \n-    pub fn struct_lint_node(self, lint: &'static Lint, id: NodeId, msg: &str)\n+    pub fn struct_lint_node(self, lint: &'static Lint, id: HirId, msg: &str)\n         -> DiagnosticBuilder<'tcx>\n     {\n         let (level, src) = self.lint_level_at_node(lint, id);"}, {"sha": "0f151cd688df9792182c9dc46f222a62420f7444", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -346,9 +346,9 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 NotUseful => {\n                     match source {\n                         hir::MatchSource::IfLetDesugar { .. } => {\n-                            cx.tcx.lint_node(\n+                            cx.tcx.lint_hir(\n                                 lint::builtin::IRREFUTABLE_LET_PATTERNS,\n-                                hir_pat.id,\n+                                hir_pat.hir_id,\n                                 pat.span,\n                                 \"irrefutable if-let pattern\",\n                             );\n@@ -359,16 +359,16 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                             match arm_index {\n                                 // The arm with the user-specified pattern.\n                                 0 => {\n-                                    cx.tcx.lint_node(\n+                                    cx.tcx.lint_hir(\n                                         lint::builtin::UNREACHABLE_PATTERNS,\n-                                        hir_pat.id, pat.span,\n+                                        hir_pat.hir_id, pat.span,\n                                         \"unreachable pattern\");\n                                 },\n                                 // The arm with the wildcard pattern.\n                                 1 => {\n-                                    cx.tcx.lint_node(\n+                                    cx.tcx.lint_hir(\n                                         lint::builtin::IRREFUTABLE_LET_PATTERNS,\n-                                        hir_pat.id,\n+                                        hir_pat.hir_id,\n                                         pat.span,\n                                         \"irrefutable while-let pattern\",\n                                     );\n@@ -379,9 +379,9 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n                         hir::MatchSource::ForLoopDesugar |\n                         hir::MatchSource::Normal => {\n-                            let mut err = cx.tcx.struct_span_lint_node(\n+                            let mut err = cx.tcx.struct_span_lint_hir(\n                                 lint::builtin::UNREACHABLE_PATTERNS,\n-                                hir_pat.id,\n+                                hir_pat.hir_id,\n                                 pat.span,\n                                 \"unreachable pattern\",\n                             );"}, {"sha": "d5f2e7a7275e8e54a580880fd5c1bdffa1d8381a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -955,8 +955,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         debug!(\"const_to_pat: cv.ty={:?} span={:?}\", cv.ty, span);\n         let kind = match cv.ty.sty {\n             ty::Float(_) => {\n-                let id = self.tcx.hir().hir_to_node_id(id);\n-                self.tcx.lint_node(\n+                self.tcx.lint_hir(\n                     ::rustc::lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n                     id,\n                     span,"}, {"sha": "bfc977c28cd3944af30ce32cda1438906cd1990d", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -129,12 +129,12 @@ fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // no break */ }`) shouldn't be linted unless it actually\n     // recurs.\n     if !reached_exit_without_self_call && !self_call_locations.is_empty() {\n-        let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n+        let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n         let sp = tcx.sess.source_map().def_span(tcx.hir().span_by_hir_id(hir_id));\n-        let mut db = tcx.struct_span_lint_node(UNCONDITIONAL_RECURSION,\n-                                                node_id,\n-                                                sp,\n-                                                \"function cannot return without recursing\");\n+        let mut db = tcx.struct_span_lint_hir(UNCONDITIONAL_RECURSION,\n+                                              hir_id,\n+                                              sp,\n+                                              \"function cannot return without recursing\");\n         db.span_label(sp, \"cannot return without recursing\");\n         // offer some help to the programmer.\n         for location in &self_call_locations {"}, {"sha": "caddc23077dc4805524a13512096bc0fa1c4d61d", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -553,10 +553,8 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n }\n \n fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n-    let lint_node_id = match tcx.hir().as_local_node_id(def_id) {\n-        Some(node_id) => node_id,\n-        None => bug!(\"checking unsafety for non-local def id {:?}\", def_id)\n-    };\n+    let lint_hir_id = tcx.hir().as_local_hir_id(def_id).unwrap_or_else(||\n+        bug!(\"checking unsafety for non-local def id {:?}\", def_id));\n \n     // FIXME: when we make this a hard error, this should have its\n     // own error code.\n@@ -567,10 +565,10 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n         \"#[derive] can't be used on a #[repr(packed)] struct that \\\n          does not derive Copy (error E0133)\".to_string()\n     };\n-    tcx.lint_node(SAFE_PACKED_BORROWS,\n-                  lint_node_id,\n-                  tcx.def_span(def_id),\n-                  &message);\n+    tcx.lint_hir(SAFE_PACKED_BORROWS,\n+                 lint_hir_id,\n+                 tcx.def_span(def_id),\n+                 &message);\n }\n \n /// Returns the `HirId` for an enclosing scope that is also `unsafe`."}, {"sha": "ed0e27a1f78524dc27dabb893f3e1740625cebda", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -603,10 +603,10 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                         .unwrap()\n                         .source_info\n                         .span;\n-                    let node_id = self\n+                    let hir_id = self\n                         .tcx\n                         .hir()\n-                        .as_local_node_id(self.source.def_id())\n+                        .as_local_hir_id(self.source.def_id())\n                         .expect(\"some part of a failing const eval must be local\");\n                     use rustc::mir::interpret::EvalErrorKind::*;\n                     let msg = match msg {\n@@ -643,9 +643,9 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                         // Need proper const propagator for these\n                         _ => return,\n                     };\n-                    self.tcx.lint_node(\n+                    self.tcx.lint_hir(\n                         ::rustc::lint::builtin::CONST_ERR,\n-                        node_id,\n+                        hir_id,\n                         span,\n                         &msg,\n                     );"}, {"sha": "6c03dbd8f0b47fa2c54071e7d7164b7e6b9f8648", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -1539,12 +1539,12 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n \n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n         if self.leaks_private_dep(def_id) {\n-            self.tcx.lint_node(lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,\n-                               self.item_id,\n-                               self.span,\n-                               &format!(\"{} `{}` from private dependency '{}' in public \\\n-                                         interface\", kind, descr,\n-                                         self.tcx.crate_name(def_id.krate)));\n+            self.tcx.lint_hir(lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,\n+                              self.item_id,\n+                              self.span,\n+                              &format!(\"{} `{}` from private dependency '{}' in public \\\n+                                        interface\", kind, descr,\n+                                        self.tcx.crate_name(def_id.krate)));\n \n         }\n \n@@ -1567,8 +1567,8 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n                 err.emit();\n             } else {\n                 let err_code = if kind == \"trait\" { \"E0445\" } else { \"E0446\" };\n-                self.tcx.lint_node(lint::builtin::PRIVATE_IN_PUBLIC, node_id, self.span,\n-                                   &format!(\"{} (error {})\", msg, err_code));\n+                self.tcx.lint_hir(lint::builtin::PRIVATE_IN_PUBLIC, hir_id, self.span,\n+                                  &format!(\"{} (error {})\", msg, err_code));\n             }\n \n         }"}, {"sha": "4c6d7710009bf9dd502c5b7931c571f8021c6b44", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -51,14 +51,13 @@ struct CheckVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> CheckVisitor<'a, 'tcx> {\n-    fn check_import(&self, id: ast::NodeId, span: Span) {\n-        let def_id = self.tcx.hir().local_def_id(id);\n+    fn check_import(&self, id: hir::HirId, span: Span) {\n+        let def_id = self.tcx.hir().local_def_id_from_hir_id(id);\n         if !self.tcx.maybe_unused_trait_import(def_id) {\n             return;\n         }\n \n-        let import_def_id = self.tcx.hir().local_def_id(id);\n-        if self.used_trait_imports.contains(&import_def_id) {\n+        if self.used_trait_imports.contains(&def_id) {\n             return;\n         }\n \n@@ -67,7 +66,7 @@ impl<'a, 'tcx> CheckVisitor<'a, 'tcx> {\n         } else {\n             \"unused import\".to_owned()\n         };\n-        self.tcx.lint_node(lint::builtin::UNUSED_IMPORTS, id, span, &msg);\n+        self.tcx.lint_hir(lint::builtin::UNUSED_IMPORTS, id, span, &msg);\n     }\n }\n \n@@ -121,8 +120,8 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n     });\n \n     for extern_crate in &crates_to_lint {\n-        let id = tcx.hir().as_local_node_id(extern_crate.def_id).unwrap();\n-        let item = tcx.hir().expect_item(id);\n+        let id = tcx.hir().as_local_hir_id(extern_crate.def_id).unwrap();\n+        let item = tcx.hir().expect_item_by_hir_id(id);\n \n         // If the crate is fully unused, we suggest removing it altogether.\n         // We do this in any edition.\n@@ -135,7 +134,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n                     .map(|attr| attr.span)\n                     .fold(span, |acc, attr_span| acc.to(attr_span));\n \n-                tcx.struct_span_lint_node(lint, id, span, msg)\n+                tcx.struct_span_lint_hir(lint, id, span, msg)\n                     .span_suggestion_short(\n                         span_with_attrs,\n                         \"remove it\",\n@@ -177,7 +176,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n             None => format!(\"use {};\", item.ident.name),\n         };\n         let replacement = visibility_qualified(&item.vis, base_replacement);\n-        tcx.struct_span_lint_node(lint, id, extern_crate.span, msg)\n+        tcx.struct_span_lint_hir(lint, id, extern_crate.span, msg)\n             .span_suggestion_short(\n                 extern_crate.span,\n                 &help,"}, {"sha": "a51f45a6ff8f3e30785723838b6672e7784e8cb1", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -36,11 +36,11 @@ impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n \n             for &item2 in &impl_items2[..] {\n                 if (name, namespace) == name_and_namespace(item2) {\n-                    let node_id = self.tcx.hir().as_local_node_id(impl1);\n-                    let mut err = if used_to_be_allowed && node_id.is_some() {\n-                        self.tcx.struct_span_lint_node(\n+                    let hir_id = self.tcx.hir().as_local_hir_id(impl1);\n+                    let mut err = if used_to_be_allowed && hir_id.is_some() {\n+                        self.tcx.struct_span_lint_hir(\n                             lint::builtin::INCOHERENT_FUNDAMENTAL_IMPLS,\n-                            node_id.unwrap(),\n+                            hir_id.unwrap(),\n                             self.tcx.span_of_impl(item1).unwrap(),\n                             &format!(\"duplicate definitions with name `{}` (E0592)\", name)\n                         )"}, {"sha": "25c86b24c187b6eba04fd4989a727c694fc1a430", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -473,9 +473,9 @@ fn resolution_failure(\n ) {\n     let sp = span_of_attrs(attrs);\n \n-    let mut diag = cx.tcx.struct_span_lint_node(\n+    let mut diag = cx.tcx.struct_span_lint_hir(\n         lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n-        NodeId::from_u32(0),\n+        hir::CRATE_HIR_ID,\n         sp,\n         &format!(\"`[{}]` cannot be resolved, ignoring it...\", path_str),\n     );"}, {"sha": "d6f3585a04f336728fc8fa29d11492b34efd2e4d", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "patch": "@@ -1,12 +1,12 @@\n //! Contains information about \"passes\", used to modify crate information during the documentation\n //! process.\n \n+use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::lint as lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::util::nodemap::DefIdSet;\n use std::mem;\n-use syntax::ast::NodeId;\n use syntax_pos::{DUMMY_SP, Span};\n use std::ops::Range;\n \n@@ -312,18 +312,18 @@ pub fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a>(\n \n     if find_testable_code(&dox, &mut tests, ErrorCodes::No).is_ok() {\n         if check_missing_code == true && tests.found_tests == 0 {\n-            let mut diag = cx.tcx.struct_span_lint_node(\n+            let mut diag = cx.tcx.struct_span_lint_hir(\n                 lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n-                NodeId::from_u32(0),\n+                hir::CRATE_HIR_ID,\n                 span_of_attrs(&item.attrs),\n                 \"Missing code example in this documentation\");\n             diag.emit();\n         } else if check_missing_code == false &&\n                   tests.found_tests > 0 &&\n                   !cx.renderinfo.borrow().access_levels.is_doc_reachable(item.def_id) {\n-            let mut diag = cx.tcx.struct_span_lint_node(\n+            let mut diag = cx.tcx.struct_span_lint_hir(\n                 lint::builtin::PRIVATE_DOC_TESTS,\n-                NodeId::from_u32(0),\n+                hir::CRATE_HIR_ID,\n                 span_of_attrs(&item.attrs),\n                 \"Documentation test in private item\");\n             diag.emit();"}]}