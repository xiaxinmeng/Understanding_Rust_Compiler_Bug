{"sha": "3d526d1af369472944b65e23c665a62c3254619d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNTI2ZDFhZjM2OTQ3Mjk0NGI2NWUyM2M2NjVhNjJjMzI1NDYxOWQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-04T23:51:05Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-06T21:03:20Z"}, "message": "add task-local reference counted smart pointers\n\nTo provide a reference counted pointer type with deterministic\ndestruction once managed boxes are switched over to a garbage\ncollector. Unlike managed boxes, these can be moved instead of just\ncopied/cloned which is helpful for avoiding reference counts.", "tree": {"sha": "ea48ccbd37e644dd1cc10f7850e521be417b6196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea48ccbd37e644dd1cc10f7850e521be417b6196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d526d1af369472944b65e23c665a62c3254619d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d526d1af369472944b65e23c665a62c3254619d", "html_url": "https://github.com/rust-lang/rust/commit/3d526d1af369472944b65e23c665a62c3254619d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d526d1af369472944b65e23c665a62c3254619d/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5891bebc132d4c373a5a5ffc93ba1bea2e8beb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5891bebc132d4c373a5a5ffc93ba1bea2e8beb5", "html_url": "https://github.com/rust-lang/rust/commit/a5891bebc132d4c373a5a5ffc93ba1bea2e8beb5"}], "stats": {"total": 276, "additions": 276, "deletions": 0}, "files": [{"sha": "3eb480f9ea893b1c4430caaddb0916585b45fa62", "filename": "src/libstd/rc.rs", "status": "added", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/3d526d1af369472944b65e23c665a62c3254619d/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d526d1af369472944b65e23c665a62c3254619d/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=3d526d1af369472944b65e23c665a62c3254619d", "patch": "@@ -0,0 +1,275 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/** Task-local reference counted smart pointers\n+\n+Task-local reference counted smart pointers are an alternative to managed boxes with deterministic\n+destruction. They are restricted to containing `Owned` types in order to prevent cycles.\n+\n+*/\n+\n+use core::libc::{c_void, size_t, malloc, free};\n+use core::unstable::intrinsics;\n+\n+struct RcBox<T> {\n+    value: T,\n+    count: uint\n+}\n+\n+/// Immutable reference counted pointer type\n+pub struct Rc<T> {\n+    priv ptr: *mut RcBox<T>,\n+    priv non_owned: Option<@()> // FIXME: #5601: replace with `#[non_owned]`\n+}\n+\n+pub impl<'self, T: Owned> Rc<T> {\n+    fn new(value: T) -> Rc<T> {\n+        unsafe {\n+            let ptr = malloc(sys::size_of::<RcBox<T>>() as size_t) as *mut RcBox<T>;\n+            assert!(!ptr::is_null(ptr));\n+            intrinsics::move_val_init(&mut *ptr, RcBox{value: value, count: 1});\n+            Rc{ptr: ptr, non_owned: None}\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn borrow(&self) -> &'self T {\n+        unsafe { cast::transmute_region(&(*self.ptr).value) }\n+    }\n+}\n+\n+#[unsafe_destructor]\n+impl<T: Owned> Drop for Rc<T> {\n+    fn finalize(&self) {\n+        unsafe {\n+            (*self.ptr).count -= 1;\n+            if (*self.ptr).count == 0 {\n+                let mut x = intrinsics::init();\n+                x <-> *self.ptr;\n+                free(self.ptr as *c_void)\n+            }\n+        }\n+    }\n+}\n+\n+impl<T: Owned> Clone for Rc<T> {\n+    #[inline]\n+    fn clone(&self) -> Rc<T> {\n+        unsafe {\n+            (*self.ptr).count += 1;\n+            Rc{ptr: self.ptr, non_owned: None}\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test_rc {\n+    use super::*;\n+\n+    #[test]\n+    fn test_simple() {\n+        let x = Rc::new(5);\n+        assert_eq!(*x.borrow(), 5);\n+    }\n+\n+    #[test]\n+    fn test_clone() {\n+        let x = Rc::new(5);\n+        let y = x.clone();\n+        assert_eq!(*x.borrow(), 5);\n+        assert_eq!(*y.borrow(), 5);\n+    }\n+\n+    #[test]\n+    fn test_destructor() {\n+        let x = Rc::new(~5);\n+        assert_eq!(**x.borrow(), 5);\n+    }\n+}\n+\n+#[abi = \"rust-intrinsic\"]\n+extern \"rust-intrinsic\" mod rusti {\n+    fn init<T>() -> T;\n+}\n+\n+#[deriving(Eq)]\n+enum Borrow {\n+    Mutable,\n+    Immutable,\n+    Nothing\n+}\n+\n+struct RcMutBox<T> {\n+    value: T,\n+    count: uint,\n+    borrow: Borrow\n+}\n+\n+/// Mutable reference counted pointer type\n+pub struct RcMut<T> {\n+    priv ptr: *mut RcMutBox<T>,\n+    priv non_owned: Option<@mut ()> // FIXME: #5601: replace with `#[non_owned]` and `#[non_const]`\n+}\n+\n+pub impl<'self, T: Owned> RcMut<T> {\n+    fn new(value: T) -> RcMut<T> {\n+        unsafe {\n+            let ptr = malloc(sys::size_of::<RcMutBox<T>>() as size_t) as *mut RcMutBox<T>;\n+            assert!(!ptr::is_null(ptr));\n+            intrinsics::move_val_init(&mut *ptr, RcMutBox{value: value, count: 1, borrow: Nothing});\n+            RcMut{ptr: ptr, non_owned: None}\n+        }\n+    }\n+\n+    /// Fails if there is already a mutable borrow of the box\n+    #[inline]\n+    fn with_borrow(&self, f: &fn(&T)) {\n+        unsafe {\n+            assert!((*self.ptr).borrow != Mutable);\n+            let previous = (*self.ptr).borrow;\n+            (*self.ptr).borrow = Immutable;\n+            f(cast::transmute_region(&(*self.ptr).value));\n+            (*self.ptr).borrow = previous;\n+        }\n+    }\n+\n+    /// Fails if there is already a mutable or immutable borrow of the box\n+    #[inline]\n+    fn with_mut_borrow(&self, f: &fn(&mut T)) {\n+        unsafe {\n+            assert!((*self.ptr).borrow == Nothing);\n+            (*self.ptr).borrow = Mutable;\n+            f(cast::transmute_mut_region(&mut (*self.ptr).value));\n+            (*self.ptr).borrow = Nothing;\n+        }\n+    }\n+}\n+\n+#[unsafe_destructor]\n+impl<T: Owned> Drop for RcMut<T> {\n+    fn finalize(&self) {\n+        unsafe {\n+            (*self.ptr).count -= 1;\n+            if (*self.ptr).count == 0 {\n+                let mut x = rusti::init();\n+                x <-> *self.ptr;\n+                free(self.ptr as *c_void)\n+            }\n+        }\n+    }\n+}\n+\n+impl<T: Owned> Clone for RcMut<T> {\n+    #[inline]\n+    fn clone(&self) -> RcMut<T> {\n+        unsafe {\n+            (*self.ptr).count += 1;\n+            RcMut{ptr: self.ptr, non_owned: None}\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test_rc_mut {\n+    use super::*;\n+\n+    #[test]\n+    fn borrow_many() {\n+        let x = RcMut::new(5);\n+        let y = x.clone();\n+\n+        do x.with_borrow |a| {\n+            assert_eq!(*a, 5);\n+            do y.with_borrow |b| {\n+                assert_eq!(*b, 5);\n+                do x.with_borrow |c| {\n+                    assert_eq!(*c, 5);\n+                }\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    fn modify() {\n+        let x = RcMut::new(5);\n+        let y = x.clone();\n+\n+        do y.with_mut_borrow |a| {\n+            assert_eq!(*a, 5);\n+            *a = 6;\n+        }\n+\n+        do x.with_borrow |a| {\n+            assert_eq!(*a, 6);\n+        }\n+    }\n+\n+    #[test]\n+    fn release_immutable() {\n+        let x = RcMut::new(5);\n+        do x.with_borrow |_| {}\n+        do x.with_mut_borrow |_| {}\n+    }\n+\n+    #[test]\n+    fn release_mutable() {\n+        let x = RcMut::new(5);\n+        do x.with_mut_borrow |_| {}\n+        do x.with_borrow |_| {}\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn frozen() {\n+        let x = RcMut::new(5);\n+        let y = x.clone();\n+\n+        do x.with_borrow |_| {\n+            do y.with_mut_borrow |_| {\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn mutable_dupe() {\n+        let x = RcMut::new(5);\n+        let y = x.clone();\n+\n+        do x.with_mut_borrow |_| {\n+            do y.with_mut_borrow |_| {\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn mutable_freeze() {\n+        let x = RcMut::new(5);\n+        let y = x.clone();\n+\n+        do x.with_mut_borrow |_| {\n+            do y.with_borrow |_| {\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn restore_freeze() {\n+        let x = RcMut::new(5);\n+        let y = x.clone();\n+\n+        do x.with_borrow |_| {\n+            do x.with_borrow |_| {}\n+            do y.with_mut_borrow |_| {}\n+        }\n+    }\n+}"}, {"sha": "e208d7219d9bf14549ed66ac9029dd382ad68ec7", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d526d1af369472944b65e23c665a62c3254619d/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3d526d1af369472944b65e23c665a62c3254619d/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=3d526d1af369472944b65e23c665a62c3254619d", "patch": "@@ -50,6 +50,7 @@ pub mod uv_global_loop;\n pub mod c_vec;\n pub mod timer;\n pub mod io_util;\n+pub mod rc;\n \n // Concurrency\n "}]}