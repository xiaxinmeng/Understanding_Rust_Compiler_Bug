{"sha": "de1446680cab4102cef9d0e133f1b835574926eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTQ0NjY4MGNhYjQxMDJjZWY5ZDBlMTMzZjFiODM1NTc0OTI2ZWI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T05:28:23Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T14:34:05Z"}, "message": "core: merge DoubleEndedIteratorExt into IteratorExt", "tree": {"sha": "d1eeda81f79ff744d17679adf58e60d44c2478b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1eeda81f79ff744d17679adf58e60d44c2478b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de1446680cab4102cef9d0e133f1b835574926eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de1446680cab4102cef9d0e133f1b835574926eb", "html_url": "https://github.com/rust-lang/rust/commit/de1446680cab4102cef9d0e133f1b835574926eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de1446680cab4102cef9d0e133f1b835574926eb/comments", "author": null, "committer": null, "parents": [{"sha": "6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "html_url": "https://github.com/rust-lang/rust/commit/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3"}], "stats": {"total": 66, "additions": 29, "deletions": 37}, "files": [{"sha": "fb9530882db35ae4e97bb5250a21ce10fede58f7", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -110,7 +110,7 @@ mod prelude {\n     pub use core::iter::range;\n     pub use core::iter::{FromIterator, Extend, IteratorExt};\n     pub use core::iter::{Iterator, DoubleEndedIterator, RandomAccessIterator};\n-    pub use core::iter::{IteratorCloneExt, CloneIteratorExt, DoubleEndedIteratorExt};\n+    pub use core::iter::{IteratorCloneExt, CloneIteratorExt};\n     pub use core::iter::{IteratorOrdExt, MutableDoubleEndedIterator, ExactSizeIterator};\n     pub use core::kinds::{Copy, Send, Sized, Sync};\n     pub use core::mem::drop;"}, {"sha": "5db4e8580d0a49fde6105b78835e64eb0c7370e4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -1449,7 +1449,7 @@ pub mod raw {\n mod tests {\n     use std::boxed::Box;\n     use prelude::{Some, None, range, Vec, ToString, Clone, Greater, Less, Equal};\n-    use prelude::{SliceExt, Iterator, IteratorExt, DoubleEndedIteratorExt};\n+    use prelude::{SliceExt, Iterator, IteratorExt};\n     use prelude::AsSlice;\n     use prelude::{RandomAccessIterator, Ord, SliceConcatExt};\n     use core::cell::Cell;"}, {"sha": "6c51480931b3b3841a6cfbaae122fbef0e07b0fe", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -3278,7 +3278,7 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use super::*;\n-    use prelude::{SliceExt, IteratorExt, DoubleEndedIteratorExt, SliceConcatExt};\n+    use prelude::{SliceExt, IteratorExt, SliceConcatExt};\n     use test::Bencher;\n     use test::black_box;\n "}, {"sha": "27023fab858d939c6e688e56cc8b9bd6ba16f180", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -17,7 +17,7 @@ pub use self::SignFormat::*;\n use char;\n use char::Char;\n use fmt;\n-use iter::{range, DoubleEndedIteratorExt};\n+use iter::{IteratorExt, range};\n use num::{cast, Float, ToPrimitive};\n use num::FpCategory as Fp;\n use ops::FnOnce;"}, {"sha": "e680230265aa65e99f2ea452e026617501f81b71", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -15,7 +15,7 @@\n #![allow(unsigned_negation)]\n \n use fmt;\n-use iter::DoubleEndedIteratorExt;\n+use iter::IteratorExt;\n use num::{Int, cast};\n use slice::SliceExt;\n use str;"}, {"sha": "b19cbb54d29c805d0a12c24221ec8a12bdb8b715", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -719,6 +719,24 @@ pub trait IteratorExt: Iterator + Sized {\n             }\n         }).map(|(x, _)| x)\n     }\n+\n+    /// Change the direction of the iterator\n+    ///\n+    /// The flipped iterator swaps the ends on an iterator that can already\n+    /// be iterated from the front and from the back.\n+    ///\n+    ///\n+    /// If the iterator also implements RandomAccessIterator, the flipped\n+    /// iterator is also random access, with the indices starting at the back\n+    /// of the original iterator.\n+    ///\n+    /// Note: Random access with flipped indices still only applies to the first\n+    /// `uint::MAX` elements of the original iterator.\n+    #[inline]\n+    #[stable]\n+    fn rev(self) -> Rev<Self> {\n+        Rev{iter: self}\n+    }\n }\n \n #[unstable = \"trait is unstable\"]\n@@ -772,31 +790,6 @@ pub trait DoubleEndedIterator: Iterator {\n     fn next_back(&mut self) -> Option< <Self as Iterator>::Item>;\n }\n \n-/// Extension methods for double-ended iterators.\n-#[unstable = \"new extension trait convention\"]\n-pub trait DoubleEndedIteratorExt: DoubleEndedIterator + Sized {\n-    /// Change the direction of the iterator\n-    ///\n-    /// The flipped iterator swaps the ends on an iterator that can already\n-    /// be iterated from the front and from the back.\n-    ///\n-    ///\n-    /// If the iterator also implements RandomAccessIterator, the flipped\n-    /// iterator is also random access, with the indices starting at the back\n-    /// of the original iterator.\n-    ///\n-    /// Note: Random access with flipped indices still only applies to the first\n-    /// `uint::MAX` elements of the original iterator.\n-    #[inline]\n-    #[stable]\n-    fn rev(self) -> Rev<Self> {\n-        Rev{iter: self}\n-    }\n-}\n-\n-#[unstable = \"trait is unstable\"]\n-impl<I> DoubleEndedIteratorExt for I where I: DoubleEndedIterator {}\n-\n /// A double-ended iterator yielding mutable references\n #[experimental = \"not widely used\"]\n pub trait MutableDoubleEndedIterator {"}, {"sha": "b661fb7ccba8ddeca29ca74a51c3806fe7a0d6a6", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -42,7 +42,7 @@ pub use char::Char;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use iter::{Extend, IteratorExt};\n-pub use iter::{Iterator, DoubleEndedIterator, DoubleEndedIteratorExt};\n+pub use iter::{Iterator, DoubleEndedIterator};\n pub use iter::{IteratorCloneExt, CloneIteratorExt};\n pub use iter::{IteratorOrdExt, ExactSizeIterator, IteratorPairExt};\n pub use option::Option::{mod, Some, None};"}, {"sha": "7e99e4236083ec8666b809b4593d975773eadc55", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -21,7 +21,7 @@ use self::Searcher::{Naive, TwoWay, TwoWayLong};\n use cmp::{mod, Eq};\n use default::Default;\n use iter::range;\n-use iter::{DoubleEndedIteratorExt, ExactSizeIterator};\n+use iter::ExactSizeIterator;\n use iter::{Map, Iterator, IteratorExt, DoubleEndedIterator};\n use kinds::Sized;\n use mem;"}, {"sha": "39b96ef6aeea0e7ef0346562fdcd890f24a8a642", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -15,7 +15,7 @@ use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n use io::Writer;\n-use iter::{DoubleEndedIteratorExt, AdditiveIterator, Extend};\n+use iter::{AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map};\n use option::Option;\n use option::Option::{None, Some};\n@@ -449,7 +449,7 @@ mod tests {\n     use super::*;\n \n     use clone::Clone;\n-    use iter::{IteratorExt, DoubleEndedIteratorExt};\n+    use iter::IteratorExt;\n     use option::Option::{mod, Some, None};\n     use path::GenericPath;\n     use slice::{AsSlice, SliceExt};"}, {"sha": "f6fb149e82cf68f0201678745e2f8e4ffc26e748", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -20,7 +20,7 @@ use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n use io::Writer;\n-use iter::{AdditiveIterator, DoubleEndedIteratorExt, Extend};\n+use iter::{AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map, repeat};\n use mem;\n use option::Option;\n@@ -1124,7 +1124,7 @@ mod tests {\n     use super::*;\n \n     use clone::Clone;\n-    use iter::{IteratorExt, DoubleEndedIteratorExt};\n+    use iter::IteratorExt;\n     use option::Option::{mod, Some, None};\n     use path::GenericPath;\n     use slice::{AsSlice, SliceExt};"}, {"sha": "dea2749c18255dae602e3746676898c1afa27b50", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1446680cab4102cef9d0e133f1b835574926eb/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=de1446680cab4102cef9d0e133f1b835574926eb", "patch": "@@ -27,7 +27,6 @@\n #[stable] #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable] #[doc(no_inline)] pub use iter::CloneIteratorExt;\n #[stable] #[doc(no_inline)] pub use iter::DoubleEndedIterator;\n-#[stable] #[doc(no_inline)] pub use iter::DoubleEndedIteratorExt;\n #[stable] #[doc(no_inline)] pub use iter::ExactSizeIterator;\n #[stable] #[doc(no_inline)] pub use iter::{Iterator, IteratorExt, Extend};\n #[stable] #[doc(no_inline)] pub use iter::{IteratorCloneExt, IteratorOrdExt};"}]}