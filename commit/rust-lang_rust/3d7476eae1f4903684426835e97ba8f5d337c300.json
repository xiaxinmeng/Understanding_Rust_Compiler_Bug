{"sha": "3d7476eae1f4903684426835e97ba8f5d337c300", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzQ3NmVhZTFmNDkwMzY4NDQyNjgzNWU5N2JhOGY1ZDMzN2MzMDA=", "commit": {"author": {"name": "Levente Kurusa", "email": "lkurusa@acm.org", "date": "2018-10-01T13:13:42Z"}, "committer": {"name": "Levente Kurusa", "email": "lkurusa@acm.org", "date": "2018-10-06T10:45:19Z"}, "message": "codegen_llvm: verify that inline assembly operands are scalars\n\nOtherwise, LLVM translation will fail with a panic.\n\nSigned-off-by: Levente Kurusa <lkurusa@acm.org>", "tree": {"sha": "755aa03a87d0fcd2f9b1e174d83078755c054518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/755aa03a87d0fcd2f9b1e174d83078755c054518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7476eae1f4903684426835e97ba8f5d337c300", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE9aWNXk3bBSVLHV6MKNaxXmtJEmkFAlu4kj8ACgkQKNaxXmtJ\nEmnDmwf6A9EjPO3kahJtZmDAQbagARUrH2q814e4X7G46vnIzRlChVmEXZDOv6z3\nkNHVCGlCP0tuLIpvl+4P2Zvyutcomvjb81XkFbvDgIgN9WoPuLwhf6jJOCscj9/l\nO+DRCd+MO+DGzkZtImxJntUhTZqJs85beRX6lDtJ4CE0Zn+5uqmstZAaN4jx3yJL\nwDB7GcR3um6VVm3YtOuaWgM4CuPIiP4LU1JwCAwBrJn0hFjbto3+gM62TEnfloqY\nNnfoxaObC3xAx3htXMN9cWwYx4ZtqLJJOyHTx0mCOolEboaZcuyt+lZYTSiNIgav\nl9Ng9/ndNjtkcm9BvM7eFlVM3zMq4w==\n=bizC\n-----END PGP SIGNATURE-----", "payload": "tree 755aa03a87d0fcd2f9b1e174d83078755c054518\nparent 6188c58a55a27efac25f6e50a8e5f18c2650b60f\nauthor Levente Kurusa <lkurusa@acm.org> 1538399622 +0200\ncommitter Levente Kurusa <lkurusa@acm.org> 1538822719 +0200\n\ncodegen_llvm: verify that inline assembly operands are scalars\n\nOtherwise, LLVM translation will fail with a panic.\n\nSigned-off-by: Levente Kurusa <lkurusa@acm.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7476eae1f4903684426835e97ba8f5d337c300", "html_url": "https://github.com/rust-lang/rust/commit/3d7476eae1f4903684426835e97ba8f5d337c300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7476eae1f4903684426835e97ba8f5d337c300/comments", "author": {"login": "levex", "id": 849140, "node_id": "MDQ6VXNlcjg0OTE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/849140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levex", "html_url": "https://github.com/levex", "followers_url": "https://api.github.com/users/levex/followers", "following_url": "https://api.github.com/users/levex/following{/other_user}", "gists_url": "https://api.github.com/users/levex/gists{/gist_id}", "starred_url": "https://api.github.com/users/levex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levex/subscriptions", "organizations_url": "https://api.github.com/users/levex/orgs", "repos_url": "https://api.github.com/users/levex/repos", "events_url": "https://api.github.com/users/levex/events{/privacy}", "received_events_url": "https://api.github.com/users/levex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "levex", "id": 849140, "node_id": "MDQ6VXNlcjg0OTE0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/849140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levex", "html_url": "https://github.com/levex", "followers_url": "https://api.github.com/users/levex/followers", "following_url": "https://api.github.com/users/levex/following{/other_user}", "gists_url": "https://api.github.com/users/levex/gists{/gist_id}", "starred_url": "https://api.github.com/users/levex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levex/subscriptions", "organizations_url": "https://api.github.com/users/levex/orgs", "repos_url": "https://api.github.com/users/levex/repos", "events_url": "https://api.github.com/users/levex/events{/privacy}", "received_events_url": "https://api.github.com/users/levex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6188c58a55a27efac25f6e50a8e5f18c2650b60f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6188c58a55a27efac25f6e50a8e5f18c2650b60f", "html_url": "https://github.com/rust-lang/rust/commit/6188c58a55a27efac25f6e50a8e5f18c2650b60f"}], "stats": {"total": 129, "additions": 122, "deletions": 7}, "files": [{"sha": "5721938c9c0a75a9899b34c1551f28ed176cf85e", "filename": "src/librustc_codegen_llvm/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d7476eae1f4903684426835e97ba8f5d337c300/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7476eae1f4903684426835e97ba8f5d337c300/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs?ref=3d7476eae1f4903684426835e97ba8f5d337c300", "patch": "@@ -69,4 +69,15 @@ fn main() {\n ```\n \"##,\n \n+E0669: r##\"\n+Cannot convert inline assembly operand to a single LLVM value.\n+\n+This error usually happens when trying to pass in a value to an input inline\n+assembly operand that is actually a pair of values. In particular, this can\n+happen when trying to pass in a slice, for instance a `&str`. In Rust, these\n+values are represented internally as a pair of values, the pointer and its\n+length. When passed as an input operand, this pair of values can not be\n+coerced into a register and thus we must fail with an error.\n+\"##,\n+\n }"}, {"sha": "93be0074f6e9b57cd24992958ad84a72af72576d", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d7476eae1f4903684426835e97ba8f5d337c300/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7476eae1f4903684426835e97ba8f5d337c300/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=3d7476eae1f4903684426835e97ba8f5d337c300", "patch": "@@ -15,6 +15,7 @@ use builder::Builder;\n \n use super::FunctionCx;\n use super::LocalRef;\n+use super::OperandValue;\n \n impl FunctionCx<'a, 'll, 'tcx> {\n     pub fn codegen_statement(&mut self,\n@@ -82,14 +83,27 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                     self.codegen_place(&bx, output)\n                 }).collect();\n \n-                let input_vals = inputs.iter().map(|input| {\n-                    self.codegen_operand(&bx, input).immediate()\n-                }).collect();\n+                let input_vals = inputs.iter()\n+                    .try_fold(Vec::with_capacity(inputs.len()), |mut acc, input| {\n+                        let op = self.codegen_operand(&bx, input);\n+                        if let OperandValue::Immediate(_) = op.val {\n+                            acc.push(op.immediate());\n+                            Ok(acc)\n+                        } else {\n+                            Err(op)\n+                        }\n+                });\n \n-                let res = asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n-                if !res {\n-                    span_err!(bx.sess(), statement.source_info.span, E0668,\n-                              \"malformed inline assembly\");\n+                if input_vals.is_err() {\n+                   span_err!(bx.sess(), statement.source_info.span, E0669,\n+                             \"invalid value for constraint in inline assembly\");\n+                } else {\n+                    let input_vals = input_vals.unwrap();\n+                    let res = asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n+                    if !res {\n+                        span_err!(bx.sess(), statement.source_info.span, E0668,\n+                                  \"malformed inline assembly\");\n+                    }\n                 }\n                 bx\n             }"}, {"sha": "37021f38cacdf826f97234a4f81801c6365d2b50", "filename": "src/test/ui/inline-asm-bad-operand.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3d7476eae1f4903684426835e97ba8f5d337c300/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7476eae1f4903684426835e97ba8f5d337c300/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs?ref=3d7476eae1f4903684426835e97ba8f5d337c300", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the compiler will catch passing invalid values to inline assembly\n+// operands.\n+\n+#![feature(asm)]\n+\n+#[repr(C)]\n+struct MyPtr(usize);\n+\n+fn main() {\n+    issue_37433();\n+    issue_37437();\n+    issue_40187();\n+    issue_54067();\n+}\n+\n+fn issue_37433() {\n+    unsafe {\n+        asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n+    }\n+\n+    unsafe {\n+        let target = MyPtr(0);\n+        asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n+    }\n+}\n+\n+fn issue_37437() {\n+    let hello: &str = \"hello\";\n+    // this should fail...\n+    unsafe { asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n+    // but this should succeed.\n+    unsafe { asm!(\"\" :: \"r\"(hello.as_ptr())) };\n+}\n+\n+fn issue_40187() {\n+    let arr: [u8; 1] = [0; 1];\n+    unsafe {\n+        asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n+    }\n+}\n+\n+fn issue_54067() {\n+    let addr: Option<u32> = Some(123);\n+    unsafe {\n+        asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n+    }\n+}"}, {"sha": "6971215a95f9ede5be47dc10f0a63b49ea8b7f15", "filename": "src/test/ui/inline-asm-bad-operand.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3d7476eae1f4903684426835e97ba8f5d337c300/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d7476eae1f4903684426835e97ba8f5d337c300/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr?ref=3d7476eae1f4903684426835e97ba8f5d337c300", "patch": "@@ -0,0 +1,33 @@\n+error[E0669]: invalid value for constraint in inline assembly\n+  --> $DIR/inline-asm-bad-operand.rs:28:9\n+   |\n+LL |         asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0669]: invalid value for constraint in inline assembly\n+  --> $DIR/inline-asm-bad-operand.rs:33:9\n+   |\n+LL |         asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0669]: invalid value for constraint in inline assembly\n+  --> $DIR/inline-asm-bad-operand.rs:40:14\n+   |\n+LL |     unsafe { asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0669]: invalid value for constraint in inline assembly\n+  --> $DIR/inline-asm-bad-operand.rs:48:9\n+   |\n+LL |         asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0669]: invalid value for constraint in inline assembly\n+  --> $DIR/inline-asm-bad-operand.rs:55:9\n+   |\n+LL |         asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0669`."}]}