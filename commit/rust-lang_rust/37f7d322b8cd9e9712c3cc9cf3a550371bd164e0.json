{"sha": "37f7d322b8cd9e9712c3cc9cf3a550371bd164e0", "node_id": "C_kwDOAAsO6NoAKDM3ZjdkMzIyYjhjZDllOTcxMmMzY2M5Y2YzYTU1MDM3MWJkMTY0ZTA", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-11-06T21:35:10Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-05-07T11:35:54Z"}, "message": "Prevent aborting guard from aborting the process in a forced unwind", "tree": {"sha": "238e6307c63ca8ac191a00758d16f1735164ce12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/238e6307c63ca8ac191a00758d16f1735164ce12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f7d322b8cd9e9712c3cc9cf3a550371bd164e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f7d322b8cd9e9712c3cc9cf3a550371bd164e0", "html_url": "https://github.com/rust-lang/rust/commit/37f7d322b8cd9e9712c3cc9cf3a550371bd164e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f7d322b8cd9e9712c3cc9cf3a550371bd164e0/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62237536da0e17fdaa5c03965563a200296c6e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/62237536da0e17fdaa5c03965563a200296c6e12", "html_url": "https://github.com/rust-lang/rust/commit/62237536da0e17fdaa5c03965563a200296c6e12"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "82edb11cbd1461349aea5716f3b2fead13605907", "filename": "library/std/src/personality/gcc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37f7d322b8cd9e9712c3cc9cf3a550371bd164e0/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f7d322b8cd9e9712c3cc9cf3a550371bd164e0/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs?ref=37f7d322b8cd9e9712c3cc9cf3a550371bd164e0", "patch": "@@ -147,6 +147,7 @@ cfg_if::cfg_if! {\n             } else {\n                 match eh_action {\n                     EHAction::None => return continue_unwind(exception_object, context),\n+                    EHAction::Filter(_) if state & uw::_US_FORCE_UNWIND as c_int != 0 => return continue_unwind(exception_object, context),\n                     EHAction::Cleanup(lpad) | EHAction::Catch(lpad) | EHAction::Filter(lpad) => {\n                         uw::_Unwind_SetGR(\n                             context,\n@@ -207,6 +208,8 @@ cfg_if::cfg_if! {\n             } else {\n                 match eh_action {\n                     EHAction::None => uw::_URC_CONTINUE_UNWIND,\n+                    // Forced unwinding hits a terminate action.\n+                    EHAction::Filter(_) if actions as i32 & uw::_UA_FORCE_UNWIND as i32 != 0 => uw::_URC_CONTINUE_UNWIND,\n                     EHAction::Cleanup(lpad) | EHAction::Catch(lpad) | EHAction::Filter(lpad) => {\n                         uw::_Unwind_SetGR(\n                             context,"}]}