{"sha": "b5732508dd4b2a855a61cab77d75c1fa612324eb", "node_id": "C_kwDOAAsO6NoAKGI1NzMyNTA4ZGQ0YjJhODU1YTYxY2FiNzdkNzVjMWZhNjEyMzI0ZWI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-29T15:20:42Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-29T16:37:53Z"}, "message": "add tests", "tree": {"sha": "24d81edef6801a1e839aaf4be993b06756488469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24d81edef6801a1e839aaf4be993b06756488469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5732508dd4b2a855a61cab77d75c1fa612324eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5732508dd4b2a855a61cab77d75c1fa612324eb", "html_url": "https://github.com/rust-lang/rust/commit/b5732508dd4b2a855a61cab77d75c1fa612324eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5732508dd4b2a855a61cab77d75c1fa612324eb/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd062341125ae3abbf2e7a7e30cfb1e8ac0c6e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd062341125ae3abbf2e7a7e30cfb1e8ac0c6e3", "html_url": "https://github.com/rust-lang/rust/commit/cfd062341125ae3abbf2e7a7e30cfb1e8ac0c6e3"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "f21ef43fb7ccb4c3ae2684d950e5bfa26e1ba9df", "filename": "tests/ui/closures/2229_closure_analysis/unique-borrows-are-invariant-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b5732508dd4b2a855a61cab77d75c1fa612324eb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5732508dd4b2a855a61cab77d75c1fa612324eb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.rs?ref=b5732508dd4b2a855a61cab77d75c1fa612324eb", "patch": "@@ -0,0 +1,18 @@\n+// edition:2021\n+\n+// regression test for #112056\n+\n+fn extend_lifetime<'a, 'b>(x: &mut (&'a str,), y: &'b str) {\n+    let mut closure = |input| x.0 = input;\n+    //~^ ERROR: lifetime may not live long enough\n+    closure(y);\n+}\n+\n+fn main() {\n+    let mut tuple = (\"static\",);\n+    {\n+        let x = String::from(\"temporary\");\n+        extend_lifetime(&mut tuple, &x);\n+    }\n+    println!(\"{}\", tuple.0);\n+}"}, {"sha": "730823281abc950fcfc9dca20a05cc1692b83b1d", "filename": "tests/ui/closures/2229_closure_analysis/unique-borrows-are-invariant-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5732508dd4b2a855a61cab77d75c1fa612324eb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5732508dd4b2a855a61cab77d75c1fa612324eb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-1.stderr?ref=b5732508dd4b2a855a61cab77d75c1fa612324eb", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/unique-borrows-are-invariant-1.rs:6:31\n+   |\n+LL | fn extend_lifetime<'a, 'b>(x: &mut (&'a str,), y: &'b str) {\n+   |                    --  -- lifetime `'b` defined here\n+   |                    |\n+   |                    lifetime `'a` defined here\n+LL |     let mut closure = |input| x.0 = input;\n+   |                               ^^^^^^^^^^^ assignment requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "dd9d986c2089b28b688c187447ab40751269744a", "filename": "tests/ui/closures/2229_closure_analysis/unique-borrows-are-invariant-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b5732508dd4b2a855a61cab77d75c1fa612324eb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5732508dd4b2a855a61cab77d75c1fa612324eb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.rs?ref=b5732508dd4b2a855a61cab77d75c1fa612324eb", "patch": "@@ -0,0 +1,31 @@\n+// edition:2021\n+\n+// regression test for #112056\n+\n+struct Spooky<'b> {\n+    owned: Option<&'static u32>,\n+    borrowed: &'b &'static u32,\n+}\n+\n+impl<'b> Spooky<'b> {\n+    fn create_self_reference<'a>(&'a mut self) {\n+        let mut closure = || {\n+            if let Some(owned) = &self.owned {\n+                let borrow: &'a &'static u32 = owned;\n+                self.borrowed = borrow;\n+                //~^ ERROR: lifetime may not live long enough\n+            }\n+        };\n+        closure();\n+    }\n+}\n+\n+fn main() {\n+    let mut spooky: Spooky<'static> = Spooky {\n+        owned: Some(&1),\n+        borrowed: &&1,\n+    };\n+    spooky.create_self_reference();\n+    spooky.owned = None;\n+    println!(\"{}\", **spooky.borrowed);\n+}"}, {"sha": "66ba0fe3547a684dafe726ef838de9217a49d945", "filename": "tests/ui/closures/2229_closure_analysis/unique-borrows-are-invariant-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b5732508dd4b2a855a61cab77d75c1fa612324eb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5732508dd4b2a855a61cab77d75c1fa612324eb/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Funique-borrows-are-invariant-2.stderr?ref=b5732508dd4b2a855a61cab77d75c1fa612324eb", "patch": "@@ -0,0 +1,15 @@\n+error: lifetime may not live long enough\n+  --> $DIR/unique-borrows-are-invariant-2.rs:15:17\n+   |\n+LL | impl<'b> Spooky<'b> {\n+   |      -- lifetime `'b` defined here\n+LL |     fn create_self_reference<'a>(&'a mut self) {\n+   |                              -- lifetime `'a` defined here\n+...\n+LL |                 self.borrowed = borrow;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ assignment requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+error: aborting due to previous error\n+"}]}