{"sha": "dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZDM2NWYzZTRmZWQzZGYxMDFiZDJkM2VhMDFjNDk0ZjQwYmQzNDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-25T23:22:16Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-27T17:48:07Z"}, "message": "cleanup dead ast-borrowck / migrate-mode code.", "tree": {"sha": "4c8f409ee224739300114c1844544c8240cefe47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c8f409ee224739300114c1844544c8240cefe47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "html_url": "https://github.com/rust-lang/rust/commit/dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "defd5088d616bb324c92069b2c1129b76bc0ff94", "url": "https://api.github.com/repos/rust-lang/rust/commits/defd5088d616bb324c92069b2c1129b76bc0ff94", "html_url": "https://github.com/rust-lang/rust/commit/defd5088d616bb324c92069b2c1129b76bc0ff94"}], "stats": {"total": 126, "additions": 20, "deletions": 106}, "files": [{"sha": "5d06f62f4461673bd8ceed99a219d51cf4d32ec3", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -86,7 +86,6 @@ macro_rules! arena_types {\n                     rustc::infer::canonical::QueryResponse<'tcx, rustc::ty::Ty<'tcx>>\n                 >,\n             [few] crate_inherent_impls: rustc::ty::CrateInherentImpls,\n-            [decode] borrowck: rustc::middle::borrowck::BorrowCheckResult,\n             [few] upstream_monomorphizations:\n                 rustc::util::nodemap::DefIdMap<\n                     rustc_data_structures::fx::FxHashMap<"}, {"sha": "81183dc1f7908792eac0a4c7fa2001d55773e5f2", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -93,6 +93,8 @@ impl SuppressRegionErrors {\n     /// checks, so we should ignore errors if NLL is (unconditionally)\n     /// enabled.\n     pub fn when_nll_is_enabled(tcx: TyCtxt<'_>) -> Self {\n+        // FIXME(Centril): Once we actually remove `::Migrate` also make\n+        // this always `true` and then proceed to eliminate the dead code.\n         match tcx.borrowck_mode() {\n             // If we're on Migrate mode, report AST region errors\n             BorrowckMode::Migrate => SuppressRegionErrors { suppressed: false },"}, {"sha": "bd9899b644b5e2be6eae2d96af6528a9b34c7bc5", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -100,7 +100,6 @@ pub mod infer;\n pub mod lint;\n \n pub mod middle {\n-    pub mod borrowck;\n     pub mod expr_use_visitor;\n     pub mod cstore;\n     pub mod dead;"}, {"sha": "60c24eeae7b6459cd4fdb64ecb8f63b8504ec08a", "filename": "src/librustc/middle/borrowck.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/defd5088d616bb324c92069b2c1129b76bc0ff94/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defd5088d616bb324c92069b2c1129b76bc0ff94/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=defd5088d616bb324c92069b2c1129b76bc0ff94", "patch": "@@ -1,31 +0,0 @@\n-use crate::ich::StableHashingContext;\n-\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n-                                           StableHasherResult};\n-\n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub enum SignalledError { SawSomeError, NoErrorsSeen }\n-\n-impl Default for SignalledError {\n-    fn default() -> SignalledError {\n-        SignalledError::NoErrorsSeen\n-    }\n-}\n-\n-impl_stable_hash_for!(enum self::SignalledError { SawSomeError, NoErrorsSeen });\n-\n-#[derive(Debug, Default, RustcEncodable, RustcDecodable)]\n-pub struct BorrowCheckResult {\n-    pub signalled_any_error: SignalledError,\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for BorrowCheckResult {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let BorrowCheckResult {\n-            ref signalled_any_error,\n-        } = *self;\n-        signalled_any_error.hash_stable(hcx, hasher);\n-    }\n-}"}, {"sha": "4b1558592aee3a7f0015a567254868aaaebe22e7", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -397,10 +397,6 @@ rustc_queries! {\n     }\n \n     BorrowChecking {\n-        query borrowck(key: DefId) -> &'tcx BorrowCheckResult {\n-            cache_on_disk_if { key.is_local() }\n-        }\n-\n         /// Borrow-checks the function body. If this is a closure, returns\n         /// additional requirements that the closure's creator must verify.\n         query mir_borrowck(key: DefId) -> mir::BorrowCheckResult<'tcx> {"}, {"sha": "cbb22f1e4483074cf7a8da90ae06a2ef34312f85", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -478,14 +478,6 @@ impl BorrowckMode {\n             BorrowckMode::Migrate => true,\n         }\n     }\n-\n-    /// Returns whether we should emit the AST-based borrow checker errors.\n-    pub fn use_ast(self) -> bool {\n-        match self {\n-            BorrowckMode::Mir => false,\n-            BorrowckMode::Migrate => false,\n-        }\n-    }\n }\n \n pub enum Input {"}, {"sha": "ad3fee171662ad3006df24a5224eaf50164bf600", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -1435,12 +1435,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.queries.on_disk_cache.serialize(self.global_tcx(), encoder)\n     }\n \n-    /// If `true`, we should use the AST-based borrowck (we may *also* use\n-    /// the MIR-based borrowck).\n-    pub fn use_ast_borrowck(self) -> bool {\n-        self.borrowck_mode().use_ast()\n-    }\n-\n     /// If `true`, we should use the MIR-based borrowck, but also\n     /// fall back on the AST borrowck if the MIR-based one errors.\n     pub fn migrate_borrowck(self) -> bool {"}, {"sha": "f559cde4b03cf90d59e027edc538a895d283d441", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -4,7 +4,6 @@ use crate::hir::def::{DefKind, Export};\n use crate::hir::{self, TraitCandidate, ItemLocalId, CodegenFnAttrs};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint;\n-use crate::middle::borrowck::BorrowCheckResult;\n use crate::middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary, ForeignModule};\n use crate::middle::cstore::{NativeLibraryKind, DepKind, CrateSource};\n use crate::middle::privacy::AccessLevels;"}, {"sha": "70a2526f70a7eb9a2e6754397781dc2ef39b31e4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 17, "deletions": 39, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -1932,48 +1932,26 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n \n-            Reservation(wk @ WriteKind::Move)\n-            | Write(wk @ WriteKind::Move)\n-            | Reservation(wk @ WriteKind::StorageDeadOrDrop)\n-            | Reservation(wk @ WriteKind::MutableBorrow(BorrowKind::Shared))\n-            | Reservation(wk @ WriteKind::MutableBorrow(BorrowKind::Shallow))\n-            | Write(wk @ WriteKind::StorageDeadOrDrop)\n-            | Write(wk @ WriteKind::MutableBorrow(BorrowKind::Shared))\n-            | Write(wk @ WriteKind::MutableBorrow(BorrowKind::Shallow)) => {\n-                if let (Err(place_err), true) = (\n+            Reservation(WriteKind::Move)\n+            | Write(WriteKind::Move)\n+            | Reservation(WriteKind::StorageDeadOrDrop)\n+            | Reservation(WriteKind::MutableBorrow(BorrowKind::Shared))\n+            | Reservation(WriteKind::MutableBorrow(BorrowKind::Shallow))\n+            | Write(WriteKind::StorageDeadOrDrop)\n+            | Write(WriteKind::MutableBorrow(BorrowKind::Shared))\n+            | Write(WriteKind::MutableBorrow(BorrowKind::Shallow)) => {\n+                if let (Err(_), true) = (\n                     self.is_mutable(place.as_ref(), is_local_mutation_allowed),\n                     self.errors_buffer.is_empty()\n                 ) {\n-                    if self.infcx.tcx.migrate_borrowck() {\n-                        // rust-lang/rust#46908: In pure NLL mode this\n-                        // code path should be unreachable (and thus\n-                        // we signal an ICE in the else branch\n-                        // here). But we can legitimately get here\n-                        // under borrowck=migrate mode, so instead of\n-                        // ICE'ing we instead report a legitimate\n-                        // error (which will then be downgraded to a\n-                        // warning by the migrate machinery).\n-                        error_access = match wk {\n-                            WriteKind::MutableBorrow(_) => AccessKind::MutableBorrow,\n-                            WriteKind::Move => AccessKind::Move,\n-                            WriteKind::StorageDeadOrDrop |\n-                            WriteKind::Mutate => AccessKind::Mutate,\n-                        };\n-                        self.report_mutability_error(\n-                            place,\n-                            span,\n-                            place_err,\n-                            error_access,\n-                            location,\n-                        );\n-                    } else {\n-                        span_bug!(\n-                            span,\n-                            \"Accessing `{:?}` with the kind `{:?}` shouldn't be possible\",\n-                            place,\n-                            kind,\n-                        );\n-                    }\n+                    // rust-lang/rust#46908: In pure NLL mode this code path should\n+                    // be unreachable (and thus we signal an ICE in the else branch here).\n+                    span_bug!(\n+                        span,\n+                        \"Accessing `{:?}` with the kind `{:?}` shouldn't be possible\",\n+                        place,\n+                        kind,\n+                    );\n                 }\n                 return false;\n             }"}, {"sha": "d7b6810a8659afe3fced73bfde74880497d8eba2", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -28,17 +28,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n         let param_env = tcx.param_env(src.def_id()).with_reveal_all();\n         let move_data = match MoveData::gather_moves(body, tcx) {\n             Ok(move_data) => move_data,\n-            Err((move_data, _move_errors)) => {\n-                // The only way we should be allowing any move_errors\n-                // in here is if we are in the migration path for the\n-                // NLL-based MIR-borrowck.\n-                //\n-                // If we are in the migration path, we have already\n-                // reported these errors as warnings to the user. So\n-                // we will just ignore them here.\n-                assert!(tcx.migrate_borrowck());\n-                move_data\n-            }\n+            Err(_) => bug!(\"No `move_errors` should be allowed in MIR borrowck\"),\n         };\n         let elaborate_patch = {\n             let body = &*body;"}, {"sha": "0da1f3a1affd1422927ed34289f7cb219cae0f2b", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd365f3e4fed3df101bd2d3ea01c494f40bd345/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=dfd365f3e4fed3df101bd2d3ea01c494f40bd345", "patch": "@@ -291,10 +291,6 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n     // execute before we can steal.\n     tcx.ensure().mir_borrowck(def_id);\n \n-    if tcx.use_ast_borrowck() {\n-        tcx.ensure().borrowck(def_id);\n-    }\n-\n     let (body, _) = tcx.mir_validated(def_id);\n     let mut body = body.steal();\n     run_optimization_passes(tcx, &mut body, def_id, None);"}]}