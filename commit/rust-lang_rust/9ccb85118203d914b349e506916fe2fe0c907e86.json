{"sha": "9ccb85118203d914b349e506916fe2fe0c907e86", "node_id": "C_kwDOAAsO6NoAKDljY2I4NTExODIwM2Q5MTRiMzQ5ZTUwNjkxNmZlMmZlMGM5MDdlODY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-28T15:04:29Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-28T15:04:29Z"}, "message": "update fixme", "tree": {"sha": "de082c20e40e76441077f3fedd06d8dbdc75938c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de082c20e40e76441077f3fedd06d8dbdc75938c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ccb85118203d914b349e506916fe2fe0c907e86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ccb85118203d914b349e506916fe2fe0c907e86", "html_url": "https://github.com/rust-lang/rust/commit/9ccb85118203d914b349e506916fe2fe0c907e86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ccb85118203d914b349e506916fe2fe0c907e86/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ae7846a272a500ff7145255f0de5556c0b8949", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ae7846a272a500ff7145255f0de5556c0b8949", "html_url": "https://github.com/rust-lang/rust/commit/09ae7846a272a500ff7145255f0de5556c0b8949"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "0ed59223337a5951a20c99e90bc3a42dd8a896c0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ccb85118203d914b349e506916fe2fe0c907e86/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ccb85118203d914b349e506916fe2fe0c907e86/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=9ccb85118203d914b349e506916fe2fe0c907e86", "patch": "@@ -1737,12 +1737,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {\n                 // See if we can toss out `victim` based on specialization.\n-                // This requires us to know *for sure* that the `other` impl applies\n-                // i.e., `EvaluatedToOk`.\n+                // While this requires us to know *for sure* that the `other` impl applies\n+                // we still use modulo regions here.\n                 //\n-                // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary\n-                // to me but is required for `std` to compile, so I didn't change it\n-                // for now.\n+                // This is fine as specialization currently assumes that specializing\n+                // impls have to be always applicable, meaning that the only allowed\n+                // region constraints may be constraints also present on the default impl.\n                 let tcx = self.tcx();\n                 if other.evaluation.must_apply_modulo_regions() {\n                     if tcx.specializes((other_def, victim_def)) {"}]}