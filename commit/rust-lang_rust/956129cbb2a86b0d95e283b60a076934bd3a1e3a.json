{"sha": "956129cbb2a86b0d95e283b60a076934bd3a1e3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NjEyOWNiYjJhODZiMGQ5NWUyODNiNjBhMDc2OTM0YmQzYTFlM2E=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-05T20:57:52Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:14Z"}, "message": "ident->name", "tree": {"sha": "177139c3f9907f6d9e3ad209ab2e5962e525f2d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177139c3f9907f6d9e3ad209ab2e5962e525f2d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/956129cbb2a86b0d95e283b60a076934bd3a1e3a", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/956129cbb2a86b0d95e283b60a076934bd3a1e3a", "html_url": "https://github.com/rust-lang/rust/commit/956129cbb2a86b0d95e283b60a076934bd3a1e3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/956129cbb2a86b0d95e283b60a076934bd3a1e3a/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eabeba3ef309b09a1acd8adfbca13203a0766d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/eabeba3ef309b09a1acd8adfbca13203a0766d75", "html_url": "https://github.com/rust-lang/rust/commit/eabeba3ef309b09a1acd8adfbca13203a0766d75"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "6eb2fcf25fd3c289ff9113aa4c877ccd16099668", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/956129cbb2a86b0d95e283b60a076934bd3a1e3a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956129cbb2a86b0d95e283b60a076934bd3a1e3a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=956129cbb2a86b0d95e283b60a076934bd3a1e3a", "patch": "@@ -87,7 +87,7 @@ pub struct CrateContext {\n      // Cache of external const values\n      extern_const_values: HashMap<ast::DefId, ValueRef>,\n \n-     impl_method_cache: HashMap<(ast::DefId, ast::Ident), ast::DefId>,\n+     impl_method_cache: HashMap<(ast::DefId, ast::Name), ast::DefId>,\n \n      module_data: HashMap<~str, ValueRef>,\n      lltypes: HashMap<ty::t, Type>,"}, {"sha": "e49265a99a950a0aa46fd658fe6576752dc3e9fd", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/956129cbb2a86b0d95e283b60a076934bd3a1e3a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/956129cbb2a86b0d95e283b60a076934bd3a1e3a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=956129cbb2a86b0d95e283b60a076934bd3a1e3a", "patch": "@@ -268,7 +268,7 @@ pub fn trans_static_method_callee(bcx: @mut Block,\n         typeck::vtable_static(impl_did, ref rcvr_substs, rcvr_origins) => {\n             assert!(rcvr_substs.iter().all(|t| !ty::type_needs_infer(*t)));\n \n-            let mth_id = method_with_name(bcx.ccx(), impl_did, mname);\n+            let mth_id = method_with_name(bcx.ccx(), impl_did, mname.name);\n             let (callee_substs, callee_origins) =\n                 combine_impl_and_methods_tps(\n                     bcx, mth_id, callee_id,\n@@ -294,8 +294,7 @@ pub fn trans_static_method_callee(bcx: @mut Block,\n \n pub fn method_with_name(ccx: &mut CrateContext,\n                         impl_id: ast::DefId,\n-                        name: ast::Ident) -> ast::DefId {\n-    // NOTE : SHOULD USE NAME (chonged later)\n+                        name: ast::Name) -> ast::DefId {\n     let meth_id_opt = ccx.impl_method_cache.find_copy(&(impl_id, name));\n     match meth_id_opt {\n         Some(m) => return m,\n@@ -304,7 +303,7 @@ pub fn method_with_name(ccx: &mut CrateContext,\n \n     let imp = ccx.tcx.impls.find(&impl_id)\n         .expect(\"could not find impl while translating\");\n-    let meth = imp.methods.iter().find(|m| m.ident.name == name.name)\n+    let meth = imp.methods.iter().find(|m| m.ident.name == name)\n         .expect(\"could not find method while translating\");\n \n     ccx.impl_method_cache.insert((impl_id, name), meth.def_id);\n@@ -324,7 +323,7 @@ pub fn trans_monomorphized_callee(bcx: @mut Block,\n       typeck::vtable_static(impl_did, ref rcvr_substs, rcvr_origins) => {\n           let ccx = bcx.ccx();\n           let mname = ty::trait_method(ccx.tcx, trait_id, n_method).ident;\n-          let mth_id = method_with_name(bcx.ccx(), impl_did, mname);\n+          let mth_id = method_with_name(bcx.ccx(), impl_did, mname.name);\n \n           // obtain the `self` value:\n           let mut temp_cleanups = ~[];\n@@ -601,7 +600,7 @@ fn emit_vtable_methods(bcx: @mut Block,\n         let ident = ty::method(tcx, *method_def_id).ident;\n         // The substitutions we have are on the impl, so we grab\n         // the method type from the impl to substitute into.\n-        let m_id = method_with_name(ccx, impl_id, ident);\n+        let m_id = method_with_name(ccx, impl_id, ident.name);\n         let m = ty::method(tcx, m_id);\n         debug!(\"(making impl vtable) emitting method %s at subst %s\",\n                m.repr(tcx),"}]}