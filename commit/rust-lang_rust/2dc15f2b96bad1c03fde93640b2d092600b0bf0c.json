{"sha": "2dc15f2b96bad1c03fde93640b2d092600b0bf0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYzE1ZjJiOTZiYWQxYzAzZmRlOTM2NDBiMmQwOTI2MDBiMGJmMGM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-17T11:02:42Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-28T05:28:22Z"}, "message": "cleanup: use `DummyResult` to implement `MacroGenerable::dummy`", "tree": {"sha": "5644969dfab33973a49d1add5c86f184912a18cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5644969dfab33973a49d1add5c86f184912a18cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc15f2b96bad1c03fde93640b2d092600b0bf0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc15f2b96bad1c03fde93640b2d092600b0bf0c", "html_url": "https://github.com/rust-lang/rust/commit/2dc15f2b96bad1c03fde93640b2d092600b0bf0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc15f2b96bad1c03fde93640b2d092600b0bf0c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b968ee36564abd96da72c381f49bf8009f4b1870", "url": "https://api.github.com/repos/rust-lang/rust/commits/b968ee36564abd96da72c381f49bf8009f4b1870", "html_url": "https://github.com/rust-lang/rust/commit/b968ee36564abd96da72c381f49bf8009f4b1870"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "ca38ef068d05f4c610f7480e9f5444392af7afbd", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dc15f2b96bad1c03fde93640b2d092600b0bf0c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc15f2b96bad1c03fde93640b2d092600b0bf0c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2dc15f2b96bad1c03fde93640b2d092600b0bf0c", "patch": "@@ -443,6 +443,10 @@ impl MacResult for DummyResult {\n             span: self.span,\n         }))\n     }\n+\n+    fn make_ty(self: Box<DummyResult>) -> Option<P<ast::Ty>> {\n+        Some(DummyResult::raw_ty(self.span))\n+    }\n }\n \n /// An enum representing the different kinds of syntax extensions."}, {"sha": "a0bbdd8db7a487b0c292bb2a22661df33909970e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2dc15f2b96bad1c03fde93640b2d092600b0bf0c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc15f2b96bad1c03fde93640b2d092600b0bf0c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2dc15f2b96bad1c03fde93640b2d092600b0bf0c", "patch": "@@ -43,18 +43,19 @@ trait MacroGenerable: Sized {\n     fn fold_with<F: Folder>(self, folder: &mut F) -> Self;\n     fn visit_with<V: Visitor>(&self, visitor: &mut V);\n \n-    // Return a placeholder expansion to allow compilation to continue after an erroring expansion.\n-    fn dummy(span: Span) -> Self;\n-\n     // The user-friendly name of the node type (e.g. \"expression\", \"item\", etc.) for diagnostics.\n     fn kind_name() -> &'static str;\n+\n+    // Return a placeholder expansion to allow compilation to continue after an erroring expansion.\n+    fn dummy(span: Span) -> Self {\n+        Self::make_with(DummyResult::any(span)).unwrap()\n+    }\n }\n \n macro_rules! impl_macro_generable {\n     ($($ty:ty: $kind_name:expr, .$make:ident,\n                $(.$fold:ident)*  $(lift .$fold_elt:ident)*,\n-               $(.$visit:ident)* $(lift .$visit_elt:ident)*,\n-               |$span:ident| $dummy:expr;)*) => { $(\n+               $(.$visit:ident)* $(lift .$visit_elt:ident)*;)*) => { $(\n         impl MacroGenerable for $ty {\n             fn kind_name() -> &'static str { $kind_name }\n             fn make_with<'a>(result: Box<MacResult + 'a>) -> Option<Self> { result.$make() }\n@@ -66,31 +67,24 @@ macro_rules! impl_macro_generable {\n                 $( visitor.$visit(self) )*\n                 $( for item in self.as_slice() { visitor. $visit_elt (item) } )*\n             }\n-            fn dummy($span: Span) -> Self { $dummy }\n         }\n     )* }\n }\n \n impl_macro_generable! {\n-    P<ast::Pat>: \"pattern\", .make_pat, .fold_pat, .visit_pat, |span| P(DummyResult::raw_pat(span));\n-    P<ast::Ty>:  \"type\",    .make_ty,  .fold_ty,  .visit_ty,  |span| DummyResult::raw_ty(span);\n-    P<ast::Expr>:\n-        \"expression\", .make_expr, .fold_expr, .visit_expr, |span| DummyResult::raw_expr(span);\n-    SmallVector<ast::Stmt>:\n-        \"statement\",  .make_stmts, lift .fold_stmt, lift .visit_stmt, |_span| SmallVector::zero();\n-    SmallVector<P<ast::Item>>:\n-        \"item\",       .make_items, lift .fold_item, lift .visit_item, |_span| SmallVector::zero();\n+    P<ast::Expr>: \"expression\", .make_expr, .fold_expr, .visit_expr;\n+    P<ast::Pat>:  \"pattern\",    .make_pat,  .fold_pat,  .visit_pat;\n+    P<ast::Ty>:   \"type\",       .make_ty,   .fold_ty,   .visit_ty;\n+    SmallVector<ast::Stmt>: \"statement\", .make_stmts, lift .fold_stmt, lift .visit_stmt;\n+    SmallVector<P<ast::Item>>: \"item\",   .make_items, lift .fold_item, lift .visit_item;\n     SmallVector<ast::TraitItem>:\n-        \"trait item\", .make_trait_items, lift .fold_trait_item, lift .visit_trait_item,\n-        |_span| SmallVector::zero();\n+        \"trait item\", .make_trait_items, lift .fold_trait_item, lift .visit_trait_item;\n     SmallVector<ast::ImplItem>:\n-        \"impl item\",  .make_impl_items,  lift .fold_impl_item,  lift .visit_impl_item,\n-        |_span| SmallVector::zero();\n+        \"impl item\",  .make_impl_items,  lift .fold_impl_item,  lift .visit_impl_item;\n }\n \n impl MacroGenerable for Option<P<ast::Expr>> {\n     fn kind_name() -> &'static str { \"expression\" }\n-    fn dummy(_span: Span) -> Self { None }\n     fn make_with<'a>(result: Box<MacResult + 'a>) -> Option<Self> {\n         result.make_expr().map(Some)\n     }"}]}