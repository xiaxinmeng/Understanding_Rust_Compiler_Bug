{"sha": "619af1e22cb71b981fde4cedbf6ebce9b3488028", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOWFmMWUyMmNiNzFiOTgxZmRlNGNlZGJmNmViY2U5YjM0ODgwMjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T21:23:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T21:37:11Z"}, "message": "fix AST for if expressions\n\nthen is not always a block...", "tree": {"sha": "b99f89f6e652e7f34519ef5f4f8bfeb71694f40d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99f89f6e652e7f34519ef5f4f8bfeb71694f40d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/619af1e22cb71b981fde4cedbf6ebce9b3488028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/619af1e22cb71b981fde4cedbf6ebce9b3488028", "html_url": "https://github.com/rust-lang/rust/commit/619af1e22cb71b981fde4cedbf6ebce9b3488028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/619af1e22cb71b981fde4cedbf6ebce9b3488028/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d337c88b07b6a67b24f4bff4d72025d9ea412a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d337c88b07b6a67b24f4bff4d72025d9ea412a5", "html_url": "https://github.com/rust-lang/rust/commit/2d337c88b07b6a67b24f4bff4d72025d9ea412a5"}], "stats": {"total": 117, "additions": 112, "deletions": 5}, "files": [{"sha": "60d997bbe50d78a2ba9855c2b4e3a1c1ca959be8", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=619af1e22cb71b981fde4cedbf6ebce9b3488028", "patch": "@@ -498,7 +498,13 @@ impl ExprCollector {\n                     let then_branch = self.collect_block_opt(e.then_branch());\n                     let else_branch = e\n                         .else_branch()\n-                        .map(|e| self.collect_block(e))\n+                        .map(|b| match b {\n+                            ast::ElseBranchFlavor::Block(it) => self.collect_block(it),\n+                            ast::ElseBranchFlavor::IfExpr(elif) => {\n+                                let expr: &ast::Expr = ast::Expr::cast(elif.syntax()).unwrap();\n+                                self.collect_expr(expr)\n+                            }\n+                        })\n                         .unwrap_or_else(|| self.empty_block());\n                     let placeholder_pat = self.pats.alloc(Pat::Missing);\n                     let arms = vec![\n@@ -521,7 +527,13 @@ impl ExprCollector {\n                 } else {\n                     let condition = self.collect_expr_opt(e.condition().and_then(|c| c.expr()));\n                     let then_branch = self.collect_block_opt(e.then_branch());\n-                    let else_branch = e.else_branch().map(|e| self.collect_block(e));\n+                    let else_branch = e.else_branch().map(|b| match b {\n+                        ast::ElseBranchFlavor::Block(it) => self.collect_block(it),\n+                        ast::ElseBranchFlavor::IfExpr(elif) => {\n+                            let expr: &ast::Expr = ast::Expr::cast(elif.syntax()).unwrap();\n+                            self.collect_expr(expr)\n+                        }\n+                    });\n                     self.alloc_expr(\n                         Expr::If {\n                             condition,"}, {"sha": "6a435e5cfe370ef52b6d64fcee2d3ab478702353", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_in_elseif.snap", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_in_elseif.snap", "raw_url": "https://github.com/rust-lang/rust/raw/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_in_elseif.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_in_elseif.snap?ref=619af1e22cb71b981fde4cedbf6ebce9b3488028", "patch": "@@ -0,0 +1,17 @@\n+---\n+created: \"2019-01-26T21:36:52.714121185+00:00\"\n+creator: insta@0.5.2\n+expression: \"&result\"\n+source: crates/ra_hir/src/ty/tests.rs\n+---\n+[35; 38) 'foo': Foo\n+[45; 109) '{     ...   } }': ()\n+[51; 107) 'if tru...     }': ()\n+[54; 58) 'true': bool\n+[59; 67) '{      }': ()\n+[73; 107) 'if fal...     }': i32\n+[76; 81) 'false': bool\n+[82; 107) '{     ...     }': i32\n+[92; 95) 'foo': Foo\n+[92; 101) 'foo.field': i32\n+"}, {"sha": "e1165f6821a5c830ec900f2e4ff7e64d9711d679", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=619af1e22cb71b981fde4cedbf6ebce9b3488028", "patch": "@@ -284,6 +284,23 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_in_elseif() {\n+    check_inference(\n+        \"infer_in_elseif\",\n+        r#\"\n+struct Foo { field: i32 }\n+fn main(foo: Foo) {\n+    if true {\n+\n+    } else if false {\n+        foo.field\n+    }\n+}\n+\"#,\n+    )\n+}\n+\n #[test]\n fn infer_inherent_method() {\n     check_inference("}, {"sha": "71880b9198270cc74d9b766daabe46bb1fd81221", "filename": "crates/ra_ide_api_light/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_ide_api_light%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_ide_api_light%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=619af1e22cb71b981fde4cedbf6ebce9b3488028", "patch": "@@ -11,7 +11,10 @@ pub fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n     let pat = cond.pat()?;\n     let expr = cond.expr()?;\n     let then_block = if_expr.then_branch()?;\n-    let else_block = if_expr.else_branch()?;\n+    let else_block = match if_expr.else_branch()? {\n+        ast::ElseBranchFlavor::Block(it) => it,\n+        ast::ElseBranchFlavor::IfExpr(_) => return None,\n+    };\n \n     ctx.build(\"replace with match\", |edit| {\n         let match_expr = build_match_expr(expr, pat, then_block, else_block);"}, {"sha": "ab3dd1b84d078e3318290abdb44a13995035882d", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=619af1e22cb71b981fde4cedbf6ebce9b3488028", "patch": "@@ -285,13 +285,27 @@ impl LetStmt {\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ElseBranchFlavor<'a> {\n+    Block(&'a Block),\n+    IfExpr(&'a IfExpr),\n+}\n+\n impl IfExpr {\n     pub fn then_branch(&self) -> Option<&Block> {\n         self.blocks().nth(0)\n     }\n-    pub fn else_branch(&self) -> Option<&Block> {\n-        self.blocks().nth(1)\n+    pub fn else_branch(&self) -> Option<ElseBranchFlavor> {\n+        let res = match self.blocks().nth(1) {\n+            Some(block) => ElseBranchFlavor::Block(block),\n+            None => {\n+                let elif: &IfExpr = child_opt(self)?;\n+                ElseBranchFlavor::IfExpr(elif)\n+            }\n+        };\n+        Some(res)\n     }\n+\n     fn blocks(&self) -> AstChildren<Block> {\n         children(self)\n     }"}, {"sha": "4f8723ae7f4732069dfad31640d37d41fe986464", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619af1e22cb71b981fde4cedbf6ebce9b3488028/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=619af1e22cb71b981fde4cedbf6ebce9b3488028", "patch": "@@ -660,6 +660,50 @@ impl ToOwned for DynTraitType {\n \n impl DynTraitType {}\n \n+// ElseBranch\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct ElseBranch {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for ElseBranch {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum ElseBranchKind<'a> {\n+    Block(&'a Block),\n+    IfExpr(&'a IfExpr),\n+}\n+\n+impl AstNode for ElseBranch {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            | BLOCK\n+            | IF_EXPR => Some(ElseBranch::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ElseBranch {\n+    type Owned = TreeArc<ElseBranch>;\n+    fn to_owned(&self) -> TreeArc<ElseBranch> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+impl ElseBranch {\n+    pub fn kind(&self) -> ElseBranchKind {\n+        match self.syntax.kind() {\n+            BLOCK => ElseBranchKind::Block(Block::cast(&self.syntax).unwrap()),\n+            IF_EXPR => ElseBranchKind::IfExpr(IfExpr::cast(&self.syntax).unwrap()),\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n+impl ElseBranch {}\n+\n // EnumDef\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]"}]}