{"sha": "f13006182c9df451e7703307467fc1717239cf6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzAwNjE4MmM5ZGY0NTFlNzcwMzMwNzQ2N2ZjMTcxNzIzOWNmNmU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-22T05:33:07Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-12-11T23:36:15Z"}, "message": "Introduce `SearchPath` and replace `SearchPaths` with `Vec<SearchPath>`.\n\nIt's more idiomatic, makes the code shorter, and will help with the next\ncommit.", "tree": {"sha": "0b66ca2062a0484bb66615602e584263cda13d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b66ca2062a0484bb66615602e584263cda13d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f13006182c9df451e7703307467fc1717239cf6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f13006182c9df451e7703307467fc1717239cf6e", "html_url": "https://github.com/rust-lang/rust/commit/f13006182c9df451e7703307467fc1717239cf6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f13006182c9df451e7703307467fc1717239cf6e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2640da7d13a1051dddcf93c06f9ae90508fce6fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2640da7d13a1051dddcf93c06f9ae90508fce6fb", "html_url": "https://github.com/rust-lang/rust/commit/2640da7d13a1051dddcf93c06f9ae90508fce6fb"}], "stats": {"total": 173, "additions": 79, "deletions": 94}, "files": [{"sha": "7ea7e4479876480fc875b1a0205b9619632ce7e1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f13006182c9df451e7703307467fc1717239cf6e", "patch": "@@ -14,7 +14,7 @@\n use std::str::FromStr;\n \n use session::{early_error, early_warn, Session};\n-use session::search_paths::SearchPaths;\n+use session::search_paths::SearchPath;\n \n use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n@@ -374,7 +374,7 @@ top_level_options!(\n         lint_cap: Option<lint::Level> [TRACKED],\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n-        search_paths: SearchPaths [UNTRACKED],\n+        search_paths: Vec<SearchPath> [UNTRACKED],\n         libs: Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [TRACKED],\n \n@@ -593,7 +593,7 @@ impl Default for Options {\n             lint_cap: None,\n             describe_lints: false,\n             output_types: OutputTypes(BTreeMap::new()),\n-            search_paths: SearchPaths::new(),\n+            search_paths: vec![],\n             maybe_sysroot: None,\n             target_triple: TargetTriple::from_triple(host_triple()),\n             test: false,\n@@ -2115,9 +2115,9 @@ pub fn build_session_options_and_crate_config(\n         }\n     };\n \n-    let mut search_paths = SearchPaths::new();\n+    let mut search_paths = vec![];\n     for s in &matches.opt_strs(\"L\") {\n-        search_paths.add_path(&s[..], error_format);\n+        search_paths.push(SearchPath::from_cli_opt(&s[..], error_format));\n     }\n \n     let libs = matches\n@@ -2535,6 +2535,7 @@ mod tests {\n     use session::config::{build_configuration, build_session_options_and_crate_config};\n     use session::config::{LtoCli, CrossLangLto};\n     use session::build_session;\n+    use session::search_paths::SearchPath;\n     use std::collections::{BTreeMap, BTreeSet};\n     use std::iter::FromIterator;\n     use std::path::PathBuf;\n@@ -2790,48 +2791,48 @@ mod tests {\n \n         // Reference\n         v1.search_paths\n-            .add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n         v1.search_paths\n-            .add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n         v1.search_paths\n-            .add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n         v1.search_paths\n-            .add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n         v1.search_paths\n-            .add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n \n         v2.search_paths\n-            .add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n         v2.search_paths\n-            .add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n         v2.search_paths\n-            .add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n         v2.search_paths\n-            .add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n         v2.search_paths\n-            .add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n \n         v3.search_paths\n-            .add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n         v3.search_paths\n-            .add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n         v3.search_paths\n-            .add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n         v3.search_paths\n-            .add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n         v3.search_paths\n-            .add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n \n         v4.search_paths\n-            .add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n         v4.search_paths\n-            .add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n         v4.search_paths\n-            .add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n         v4.search_paths\n-            .add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n         v4.search_paths\n-            .add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n \n         assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() == v3.dep_tracking_hash());"}, {"sha": "6f52d2853534315bc2a4c088c06adc2d773970c4", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=f13006182c9df451e7703307467fc1717239cf6e", "patch": "@@ -18,7 +18,7 @@ use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n-use session::search_paths::{SearchPaths, PathKind};\n+use session::search_paths::{SearchPath, PathKind};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n \n #[derive(Copy, Clone)]\n@@ -31,27 +31,28 @@ pub enum FileMatch {\n \n pub struct FileSearch<'a> {\n     pub sysroot: &'a Path,\n-    pub search_paths: &'a SearchPaths,\n+    pub search_paths: &'a [SearchPath],\n     pub triple: &'a str,\n     pub kind: PathKind,\n }\n \n impl<'a> FileSearch<'a> {\n     pub fn for_each_lib_search_path<F>(&self, mut f: F) where\n-        F: FnMut(&Path, PathKind)\n+        F: FnMut(&SearchPath)\n     {\n         let mut visited_dirs = FxHashSet::default();\n-        visited_dirs.reserve(self.search_paths.paths.len() + 1);\n-        for (path, kind) in self.search_paths.iter(self.kind) {\n-            f(path, kind);\n-            visited_dirs.insert(path.to_path_buf());\n+        visited_dirs.reserve(self.search_paths.len() + 1);\n+        let iter = self.search_paths.iter().filter(|sp| sp.kind.matches(self.kind));\n+        for search_path in iter {\n+            f(search_path);\n+            visited_dirs.insert(search_path.dir.to_path_buf());\n         }\n \n         debug!(\"filesearch: searching lib path\");\n         let tlib_path = make_target_lib_path(self.sysroot,\n                                              self.triple);\n         if !visited_dirs.contains(&tlib_path) {\n-            f(&tlib_path, PathKind::All);\n+            f(&SearchPath { kind: PathKind::All, dir: tlib_path });\n         }\n     }\n \n@@ -62,9 +63,9 @@ impl<'a> FileSearch<'a> {\n     pub fn search<F>(&self, mut pick: F)\n         where F: FnMut(&Path, PathKind) -> FileMatch\n     {\n-        self.for_each_lib_search_path(|lib_search_path, kind| {\n-            debug!(\"searching {}\", lib_search_path.display());\n-            let files = match fs::read_dir(lib_search_path) {\n+        self.for_each_lib_search_path(|search_path| {\n+            debug!(\"searching {}\", search_path.dir.display());\n+            let files = match fs::read_dir(&search_path.dir) {\n                 Ok(files) => files,\n                 Err(..) => return,\n             };\n@@ -81,7 +82,7 @@ impl<'a> FileSearch<'a> {\n             let files2 = files.iter().filter(|p| !is_rlib(p));\n             for path in files1.chain(files2) {\n                 debug!(\"testing {}\", path.display());\n-                let maybe_picked = pick(path, kind);\n+                let maybe_picked = pick(path, search_path.kind);\n                 match maybe_picked {\n                     FileMatches => {\n                         debug!(\"picked {}\", path.display());\n@@ -96,7 +97,7 @@ impl<'a> FileSearch<'a> {\n \n     pub fn new(sysroot: &'a Path,\n                triple: &'a str,\n-               search_paths: &'a SearchPaths,\n+               search_paths: &'a Vec<SearchPath>,\n                kind: PathKind) -> FileSearch<'a> {\n         debug!(\"using sysroot = {}, triple = {}\", sysroot.display(), triple);\n         FileSearch {\n@@ -110,8 +111,8 @@ impl<'a> FileSearch<'a> {\n     // Returns a list of directories where target-specific dylibs might be located.\n     pub fn get_dylib_search_paths(&self) -> Vec<PathBuf> {\n         let mut paths = Vec::new();\n-        self.for_each_lib_search_path(|lib_search_path, _| {\n-            paths.push(lib_search_path.to_path_buf());\n+        self.for_each_lib_search_path(|search_path| {\n+            paths.push(search_path.dir.to_path_buf());\n         });\n         paths\n     }\n@@ -136,7 +137,7 @@ pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf\n     p\n }\n \n-fn make_target_lib_path(sysroot: &Path,\n+pub fn make_target_lib_path(sysroot: &Path,\n                         target_triple: &str) -> PathBuf {\n     sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n }"}, {"sha": "7a0bd2ed439b2f547b6547e45c36a44b727f5d80", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=f13006182c9df451e7703307467fc1717239cf6e", "patch": "@@ -8,18 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::slice;\n use std::path::{Path, PathBuf};\n use session::{early_error, config};\n+use session::filesearch::make_target_lib_path;\n \n #[derive(Clone, Debug)]\n-pub struct SearchPaths {\n-    crate paths: Vec<(PathKind, PathBuf)>,\n-}\n-\n-pub struct Iter<'a> {\n-    kind: PathKind,\n-    iter: slice::Iter<'a, (PathKind, PathBuf)>,\n+pub struct SearchPath {\n+    pub kind: PathKind,\n+    pub dir: PathBuf,\n }\n \n #[derive(Eq, PartialEq, Clone, Copy, Debug, PartialOrd, Ord, Hash)]\n@@ -32,12 +28,17 @@ pub enum PathKind {\n     All,\n }\n \n-impl SearchPaths {\n-    pub fn new() -> SearchPaths {\n-        SearchPaths { paths: Vec::new() }\n+impl PathKind {\n+    pub fn matches(&self, kind: PathKind) -> bool {\n+        match (self, kind) {\n+            (PathKind::All, _) | (_, PathKind::All) => true,\n+            _ => *self == kind,\n+        }\n     }\n+}\n \n-    pub fn add_path(&mut self, path: &str, output: config::ErrorOutputType) {\n+impl SearchPath {\n+    pub fn from_cli_opt(path: &str, output: config::ErrorOutputType) -> Self {\n         let (kind, path) = if path.starts_with(\"native=\") {\n             (PathKind::Native, &path[\"native=\".len()..])\n         } else if path.starts_with(\"crate=\") {\n@@ -54,34 +55,17 @@ impl SearchPaths {\n         if path.is_empty() {\n             early_error(output, \"empty search path given via `-L`\");\n         }\n-        self.paths.push((kind, PathBuf::from(path)));\n-    }\n \n-    pub fn iter(&self, kind: PathKind) -> Iter<'_> {\n-        Iter { kind: kind, iter: self.paths.iter() }\n+        let dir = PathBuf::from(path);\n+        Self::new(kind, dir)\n     }\n-}\n-\n-impl<'a> Iterator for Iter<'a> {\n-    type Item = (&'a Path, PathKind);\n \n-    fn next(&mut self) -> Option<(&'a Path, PathKind)> {\n-        loop {\n-            match *self.iter.next()? {\n-                (kind, ref p) if self.kind == PathKind::All ||\n-                                  kind == PathKind::All ||\n-                                  kind == self.kind => {\n-                    return Some((p, kind))\n-                }\n-                _ => {}\n-            }\n-        }\n+    pub fn from_sysroot_and_triple(sysroot: &Path, triple: &str) -> Self {\n+        Self::new(PathKind::All, make_target_lib_path(sysroot, triple))\n     }\n \n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        // This iterator will never return more elements than the base iterator;\n-        // but it can ignore all the remaining elements.\n-        let (_, upper) = self.iter.size_hint();\n-        (0, upper)\n+    fn new(kind: PathKind, dir: PathBuf) -> Self {\n+        SearchPath { kind, dir }\n     }\n }\n+"}, {"sha": "da5ad39ad2664d57da9f1a234292281c6687d18e", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=f13006182c9df451e7703307467fc1717239cf6e", "patch": "@@ -213,8 +213,8 @@ fn link_binary_output(sess: &Session,\n \n fn archive_search_paths(sess: &Session) -> Vec<PathBuf> {\n     let mut search = Vec::new();\n-    sess.target_filesearch(PathKind::Native).for_each_lib_search_path(|path, _| {\n-        search.push(path.to_path_buf());\n+    sess.target_filesearch(PathKind::Native).for_each_lib_search_path(|search_path| {\n+        search.push(search_path.dir.to_path_buf());\n     });\n \n     search\n@@ -1067,10 +1067,10 @@ fn link_args(cmd: &mut dyn Linker,\n fn add_local_native_libraries(cmd: &mut dyn Linker,\n                               sess: &Session,\n                               codegen_results: &CodegenResults) {\n-    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|path, k| {\n-        match k {\n-            PathKind::Framework => { cmd.framework_path(path); }\n-            _ => { cmd.include_path(&fix_windows_verbatim_for_gcc(path)); }\n+    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|search_path| {\n+        match search_path.kind {\n+            PathKind::Framework => { cmd.framework_path(&search_path.dir); }\n+            _ => { cmd.include_path(&fix_windows_verbatim_for_gcc(&search_path.dir)); }\n         }\n     });\n "}, {"sha": "b421f07ddafa21053200643c87f9a64959849b3e", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f13006182c9df451e7703307467fc1717239cf6e", "patch": "@@ -20,7 +20,7 @@ use rustc::session::early_error;\n use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc::session::config::{nightly_options, build_codegen_options, build_debugging_options,\n                              get_cmd_lint_options};\n-use rustc::session::search_paths::SearchPaths;\n+use rustc::session::search_paths::SearchPath;\n use rustc_driver;\n use rustc_target::spec::TargetTriple;\n use syntax::edition::Edition;\n@@ -46,7 +46,7 @@ pub struct Options {\n     /// How to format errors and warnings.\n     pub error_format: ErrorOutputType,\n     /// Library search paths to hand to the compiler.\n-    pub libs: SearchPaths,\n+    pub libs: Vec<SearchPath>,\n     /// The list of external crates to link against.\n     pub externs: Externs,\n     /// List of `cfg` flags to hand to the compiler. Always includes `rustdoc`.\n@@ -295,10 +295,9 @@ impl Options {\n         }\n         let input = PathBuf::from(&matches.free[0]);\n \n-        let mut libs = SearchPaths::new();\n-        for s in &matches.opt_strs(\"L\") {\n-            libs.add_path(s, error_format);\n-        }\n+        let libs = matches.opt_strs(\"L\").iter()\n+            .map(|s| SearchPath::from_cli_opt(s, error_format))\n+            .collect();\n         let externs = match parse_externs(&matches) {\n             Ok(ex) => ex,\n             Err(err) => {"}, {"sha": "b85342f631181465600ffcc3145a516a8749bb67", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f13006182c9df451e7703307467fc1717239cf6e", "patch": "@@ -51,7 +51,7 @@ use html::render::RenderInfo;\n use passes;\n \n pub use rustc::session::config::{Input, Options, CodegenOptions};\n-pub use rustc::session::search_paths::SearchPaths;\n+pub use rustc::session::search_paths::SearchPath;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n "}, {"sha": "50acde64cf023b32e1f817ab43fe67d2f3d49eeb", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13006182c9df451e7703307467fc1717239cf6e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f13006182c9df451e7703307467fc1717239cf6e", "patch": "@@ -21,7 +21,7 @@ use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::session::{self, CompileIncomplete, config};\n use rustc::session::config::{OutputType, OutputTypes, Externs, CodegenOptions};\n-use rustc::session::search_paths::{SearchPaths, PathKind};\n+use rustc::session::search_paths::{SearchPath, PathKind};\n use syntax::ast;\n use syntax::source_map::SourceMap;\n use syntax::edition::Edition;\n@@ -187,7 +187,7 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n }\n \n fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n-            cfgs: Vec<String>, libs: SearchPaths,\n+            cfgs: Vec<String>, libs: Vec<SearchPath>,\n             cg: CodegenOptions, externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n@@ -556,7 +556,7 @@ pub struct Collector {\n     names: Vec<String>,\n \n     cfgs: Vec<String>,\n-    libs: SearchPaths,\n+    libs: Vec<SearchPath>,\n     cg: CodegenOptions,\n     externs: Externs,\n     use_headers: bool,\n@@ -571,7 +571,7 @@ pub struct Collector {\n }\n \n impl Collector {\n-    pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, cg: CodegenOptions,\n+    pub fn new(cratename: String, cfgs: Vec<String>, libs: Vec<SearchPath>, cg: CodegenOptions,\n                externs: Externs, use_headers: bool, opts: TestOptions,\n                maybe_sysroot: Option<PathBuf>, source_map: Option<Lrc<SourceMap>>,\n                filename: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) -> Collector {"}]}