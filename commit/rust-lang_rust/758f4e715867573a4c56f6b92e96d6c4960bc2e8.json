{"sha": "758f4e715867573a4c56f6b92e96d6c4960bc2e8", "node_id": "C_kwDOAAsO6NoAKDc1OGY0ZTcxNTg2NzU3M2E0YzU2ZjZiOTJlOTZkNmM0OTYwYmMyZTg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-07T15:08:04Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-21T06:09:11Z"}, "message": "optimize `TypeFoldable` for 2 element tuples", "tree": {"sha": "37bc5bb72757fa877578bffea7e44fc86193e770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37bc5bb72757fa877578bffea7e44fc86193e770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/758f4e715867573a4c56f6b92e96d6c4960bc2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/758f4e715867573a4c56f6b92e96d6c4960bc2e8", "html_url": "https://github.com/rust-lang/rust/commit/758f4e715867573a4c56f6b92e96d6c4960bc2e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/758f4e715867573a4c56f6b92e96d6c4960bc2e8/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d5d6c055b5d8008764a04e98c63ac1711a0a25a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5d6c055b5d8008764a04e98c63ac1711a0a25a", "html_url": "https://github.com/rust-lang/rust/commit/7d5d6c055b5d8008764a04e98c63ac1711a0a25a"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "42d7b141166f478b3d119a4196d6281f2b96a082", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/758f4e715867573a4c56f6b92e96d6c4960bc2e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758f4e715867573a4c56f6b92e96d6c4960bc2e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=758f4e715867573a4c56f6b92e96d6c4960bc2e8", "patch": "@@ -889,19 +889,6 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::Existentia\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v))\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,"}, {"sha": "59a560f7342c80bd30e7124542ed95c1f30bc0f0", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/758f4e715867573a4c56f6b92e96d6c4960bc2e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758f4e715867573a4c56f6b92e96d6c4960bc2e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=758f4e715867573a4c56f6b92e96d6c4960bc2e8", "patch": "@@ -458,6 +458,45 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n+        // This code is fairly hot, though not as hot as `SubstsRef`.\n+        //\n+        // When compiling stage 2, I get the following results:\n+        //\n+        // len |   total   |   %\n+        // --- | --------- | -----\n+        //  2  |  15083590 |  48.1\n+        //  3  |   7540067 |  24.0\n+        //  1  |   5300377 |  16.9\n+        //  4  |   1351897 |   4.3\n+        //  0  |   1256849 |   4.0\n+        //\n+        // I've tried it with some private repositories and got\n+        // close to the same result, with 4 and 0 swapping places\n+        // sometimes.\n+        match self.len() {\n+            2 => {\n+                let param0 = self[0].try_fold_with(folder)?;\n+                let param1 = self[1].try_fold_with(folder)?;\n+                if param0 == self[0] && param1 == self[1] {\n+                    Ok(self)\n+                } else {\n+                    Ok(folder.tcx().intern_type_list(&[param0, param1]))\n+                }\n+            }\n+            _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v)),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Public trait `Subst`\n //"}]}