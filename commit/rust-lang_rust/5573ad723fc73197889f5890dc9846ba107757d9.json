{"sha": "5573ad723fc73197889f5890dc9846ba107757d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NzNhZDcyM2ZjNzMxOTc4ODlmNTg5MGRjOTg0NmJhMTA3NzU3ZDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-03T22:56:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-03T22:59:10Z"}, "message": "rustc: Fix an LLVM assertion that tripped when borrowing a by-val method receiver.\n\nIn certain lvalue code paths, the type of the borrowed value was not\nbeing used to generate temporary spills. I'm a bit surprised we didn't\nhit this sooner.", "tree": {"sha": "ad26e83a045d6948f568961e8e1979f469fe5948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad26e83a045d6948f568961e8e1979f469fe5948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5573ad723fc73197889f5890dc9846ba107757d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5573ad723fc73197889f5890dc9846ba107757d9", "html_url": "https://github.com/rust-lang/rust/commit/5573ad723fc73197889f5890dc9846ba107757d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5573ad723fc73197889f5890dc9846ba107757d9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e767011b77c654d0a926e752de216661bc5b2c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/e767011b77c654d0a926e752de216661bc5b2c22", "html_url": "https://github.com/rust-lang/rust/commit/e767011b77c654d0a926e752de216661bc5b2c22"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "43895577132a6c97afaeb4267f1b751bb4a878fb", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5573ad723fc73197889f5890dc9846ba107757d9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573ad723fc73197889f5890dc9846ba107757d9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5573ad723fc73197889f5890dc9846ba107757d9", "patch": "@@ -3112,24 +3112,24 @@ fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef, e: @ast::expr,\n \n           ast::by_copy | ast::by_move => {\n             // Ensure that an owned copy of the value is in memory:\n-            let alloc = alloc_ty(bcx, arg.ty);\n+            let alloc = alloc_ty(bcx, e_ty);\n             let move_out = arg_mode == ast::by_move ||\n                 ccx.maps.last_use_map.contains_key(e.id);\n             if lv.kind == lv_temporary { revoke_clean(bcx, val); }\n-            if lv.kind == lv_owned || !ty::type_is_immediate(arg.ty) {\n-                memmove_ty(bcx, alloc, val, arg.ty);\n-                if move_out && ty::type_needs_drop(ccx.tcx, arg.ty) {\n-                    bcx = zero_mem(bcx, val, arg.ty);\n+            if lv.kind == lv_owned || !ty::type_is_immediate(e_ty) {\n+                memmove_ty(bcx, alloc, val, e_ty);\n+                if move_out && ty::type_needs_drop(ccx.tcx, e_ty) {\n+                    bcx = zero_mem(bcx, val, e_ty);\n                 }\n             } else { Store(bcx, val, alloc); }\n             val = alloc;\n             if lv.kind != lv_temporary && !move_out {\n-                bcx = take_ty(bcx, val, arg.ty);\n+                bcx = take_ty(bcx, val, e_ty);\n             }\n \n             // In the event that failure occurs before the call actually\n             // happens, have to cleanup this copy:\n-            add_clean_temp_mem(bcx, val, arg.ty);\n+            add_clean_temp_mem(bcx, val, e_ty);\n             vec::push(temp_cleanups, val);\n           }\n         }"}, {"sha": "dbfb0d1ddc0a8a105a4fcd7a51bbe5ef0501de1a", "filename": "src/test/run-pass/borrow-by-val-method-receiver.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5573ad723fc73197889f5890dc9846ba107757d9/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573ad723fc73197889f5890dc9846ba107757d9/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs?ref=5573ad723fc73197889f5890dc9846ba107757d9", "patch": "@@ -0,0 +1,13 @@\n+trait Foo {\n+    fn foo(self);\n+}\n+\n+impl &[int]: Foo {\n+    fn foo(self) {}\n+}\n+\n+fn main() {\n+    let items = ~[ 3, 5, 1, 2, 4 ];\n+    items.foo();\n+}\n+"}]}