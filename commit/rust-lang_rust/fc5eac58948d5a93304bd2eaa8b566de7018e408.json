{"sha": "fc5eac58948d5a93304bd2eaa8b566de7018e408", "node_id": "C_kwDOAAsO6NoAKGZjNWVhYzU4OTQ4ZDVhOTMzMDRiZDJlYWE4YjU2NmRlNzAxOGU0MDg", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T14:12:26Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:30Z"}, "message": "Move `NeedlessBitwiseBool` into `Operators` lint pass", "tree": {"sha": "d7e2a7a3dea64cf43af9c770e9dcb0344bf0a0e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e2a7a3dea64cf43af9c770e9dcb0344bf0a0e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc5eac58948d5a93304bd2eaa8b566de7018e408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5eac58948d5a93304bd2eaa8b566de7018e408", "html_url": "https://github.com/rust-lang/rust/commit/fc5eac58948d5a93304bd2eaa8b566de7018e408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc5eac58948d5a93304bd2eaa8b566de7018e408/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c2daa60aa71446451d5fa9a2c43e9881e83f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c2daa60aa71446451d5fa9a2c43e9881e83f03", "html_url": "https://github.com/rust-lang/rust/commit/71c2daa60aa71446451d5fa9a2c43e9881e83f03"}], "stats": {"total": 159, "additions": 70, "deletions": 89}, "files": [{"sha": "d006aa4bce5f06a67b5e398b1a7088e4a3224815", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=fc5eac58948d5a93304bd2eaa8b566de7018e408", "patch": "@@ -387,7 +387,6 @@ store.register_lints(&[\n     mutex_atomic::MUTEX_ATOMIC,\n     mutex_atomic::MUTEX_INTEGER,\n     needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n-    needless_bitwise_bool::NEEDLESS_BITWISE_BOOL,\n     needless_bool::BOOL_COMPARISON,\n     needless_bool::NEEDLESS_BOOL,\n     needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n@@ -435,6 +434,7 @@ store.register_lints(&[\n     operators::MISREFACTORED_ASSIGN_OP,\n     operators::MODULO_ARITHMETIC,\n     operators::MODULO_ONE,\n+    operators::NEEDLESS_BITWISE_BOOL,\n     operators::OP_REF,\n     operators::VERBOSE_BIT_MASK,\n     option_env_unwrap::OPTION_ENV_UNWRAP,"}, {"sha": "4d4b89687d040d74f95cb9df0c8fc03e996663ba", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=fc5eac58948d5a93304bd2eaa8b566de7018e408", "patch": "@@ -67,14 +67,14 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(misc::USED_UNDERSCORE_BINDING),\n     LintId::of(mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER),\n     LintId::of(mut_mut::MUT_MUT),\n-    LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n     LintId::of(needless_continue::NEEDLESS_CONTINUE),\n     LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n     LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n     LintId::of(no_effect::NO_EFFECT_UNDERSCORE_BINDING),\n     LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n     LintId::of(non_expressive_names::SIMILAR_NAMES),\n     LintId::of(operators::FLOAT_CMP),\n+    LintId::of(operators::NEEDLESS_BITWISE_BOOL),\n     LintId::of(operators::VERBOSE_BIT_MASK),\n     LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n     LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),"}, {"sha": "42d4abcde43d304ac6d11a047c9a457db0227b10", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fc5eac58948d5a93304bd2eaa8b566de7018e408", "patch": "@@ -302,7 +302,6 @@ mod mut_reference;\n mod mutable_debug_assertion;\n mod mutex_atomic;\n mod needless_arbitrary_self_type;\n-mod needless_bitwise_bool;\n mod needless_bool;\n mod needless_borrowed_ref;\n mod needless_continue;\n@@ -569,7 +568,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(|| Box::new(booleans::NonminimalBool));\n-    store.register_late_pass(|| Box::new(needless_bitwise_bool::NeedlessBitwiseBool));\n     store.register_late_pass(|| Box::new(enum_clike::UnportableVariant));\n     store.register_late_pass(|| Box::new(float_literal::FloatLiteral));\n     store.register_late_pass(|| Box::new(ptr::Ptr));"}, {"sha": "623d22bc9bdfe6a6a6c1c1ef674da4ff5946e64c", "filename": "clippy_lints/src/needless_bitwise_bool.rs", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs?ref=71c2daa60aa71446451d5fa9a2c43e9881e83f03", "patch": "@@ -1,85 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::source::snippet_opt;\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for uses of bitwise and/or operators between booleans, where performance may be improved by using\n-    /// a lazy and.\n-    ///\n-    /// ### Why is this bad?\n-    /// The bitwise operators do not support short-circuiting, so it may hinder code performance.\n-    /// Additionally, boolean logic \"masked\" as bitwise logic is not caught by lints like `unnecessary_fold`\n-    ///\n-    /// ### Known problems\n-    /// This lint evaluates only when the right side is determined to have no side effects. At this time, that\n-    /// determination is quite conservative.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let (x,y) = (true, false);\n-    /// if x & !y {} // where both x and y are booleans\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// let (x,y) = (true, false);\n-    /// if x && !y {}\n-    /// ```\n-    #[clippy::version = \"1.54.0\"]\n-    pub NEEDLESS_BITWISE_BOOL,\n-    pedantic,\n-    \"Boolean expressions that use bitwise rather than lazy operators\"\n-}\n-\n-declare_lint_pass!(NeedlessBitwiseBool => [NEEDLESS_BITWISE_BOOL]);\n-\n-fn is_bitwise_operation(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    let ty = cx.typeck_results().expr_ty(expr);\n-    if_chain! {\n-        if !expr.span.from_expansion();\n-        if let (&ExprKind::Binary(ref op, _, right), &ty::Bool) = (&expr.kind, &ty.kind());\n-        if op.node == BinOpKind::BitAnd || op.node == BinOpKind::BitOr;\n-        if let ExprKind::Call(..) | ExprKind::MethodCall(..) | ExprKind::Binary(..) | ExprKind::Unary(..) = right.kind;\n-        if !right.can_have_side_effects();\n-        then {\n-            return true;\n-        }\n-    }\n-    false\n-}\n-\n-fn suggestion_snippet(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n-    if let ExprKind::Binary(ref op, left, right) = expr.kind {\n-        if let (Some(l_snippet), Some(r_snippet)) = (snippet_opt(cx, left.span), snippet_opt(cx, right.span)) {\n-            let op_snippet = match op.node {\n-                BinOpKind::BitAnd => \"&&\",\n-                _ => \"||\",\n-            };\n-            return Some(format!(\"{} {} {}\", l_snippet, op_snippet, r_snippet));\n-        }\n-    }\n-    None\n-}\n-\n-impl LateLintPass<'_> for NeedlessBitwiseBool {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        if is_bitwise_operation(cx, expr) {\n-            span_lint_and_then(\n-                cx,\n-                NEEDLESS_BITWISE_BOOL,\n-                expr.span,\n-                \"use of bitwise operator instead of lazy operator between booleans\",\n-                |diag| {\n-                    if let Some(sugg) = suggestion_snippet(cx, expr) {\n-                        diag.span_suggestion(expr.span, \"try\", sugg, Applicability::MachineApplicable);\n-                    }\n-                },\n-            );\n-        }\n-    }\n-}"}, {"sha": "0c5b8f3da6ae03ad31c5f24974909185cb9fc136", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=fc5eac58948d5a93304bd2eaa8b566de7018e408", "patch": "@@ -18,6 +18,7 @@ mod integer_division;\n mod misrefactored_assign_op;\n mod modulo_arithmetic;\n mod modulo_one;\n+mod needless_bitwise_bool;\n mod numeric_arithmetic;\n mod op_ref;\n mod verbose_bit_mask;\n@@ -641,6 +642,35 @@ declare_clippy_lint! {\n     \"any modulo arithmetic statement\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for uses of bitwise and/or operators between booleans, where performance may be improved by using\n+    /// a lazy and.\n+    ///\n+    /// ### Why is this bad?\n+    /// The bitwise operators do not support short-circuiting, so it may hinder code performance.\n+    /// Additionally, boolean logic \"masked\" as bitwise logic is not caught by lints like `unnecessary_fold`\n+    ///\n+    /// ### Known problems\n+    /// This lint evaluates only when the right side is determined to have no side effects. At this time, that\n+    /// determination is quite conservative.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let (x,y) = (true, false);\n+    /// if x & !y {} // where both x and y are booleans\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let (x,y) = (true, false);\n+    /// if x && !y {}\n+    /// ```\n+    #[clippy::version = \"1.54.0\"]\n+    pub NEEDLESS_BITWISE_BOOL,\n+    pedantic,\n+    \"Boolean expressions that use bitwise rather than lazy operators\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -668,6 +698,7 @@ impl_lint_pass!(Operators => [\n     FLOAT_CMP_CONST,\n     MODULO_ONE,\n     MODULO_ARITHMETIC,\n+    NEEDLESS_BITWISE_BOOL,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -690,6 +721,7 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                     }\n                     erasing_op::check(cx, e, op.node, lhs, rhs);\n                     identity_op::check(cx, e, op.node, lhs, rhs);\n+                    needless_bitwise_bool::check(cx, e, op.node, lhs, rhs);\n                 }\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);\n                 bit_mask::check(cx, e, op.node, lhs, rhs);"}, {"sha": "e902235a014e865777976dd26029cf4d84ea7da3", "filename": "clippy_lints/src/operators/needless_bitwise_bool.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Foperators%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Foperators%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fneedless_bitwise_bool.rs?ref=fc5eac58948d5a93304bd2eaa8b566de7018e408", "patch": "@@ -0,0 +1,36 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+\n+use super::NEEDLESS_BITWISE_BOOL;\n+\n+pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, op: BinOpKind, lhs: &Expr<'_>, rhs: &Expr<'_>) {\n+    let op_str = match op {\n+        BinOpKind::BitAnd => \"&&\",\n+        BinOpKind::BitOr => \"||\",\n+        _ => return,\n+    };\n+    if matches!(\n+        rhs.kind,\n+        ExprKind::Call(..) | ExprKind::MethodCall(..) | ExprKind::Binary(..) | ExprKind::Unary(..)\n+    ) && cx.typeck_results().expr_ty(e).is_bool()\n+        && !rhs.can_have_side_effects()\n+    {\n+        span_lint_and_then(\n+            cx,\n+            NEEDLESS_BITWISE_BOOL,\n+            e.span,\n+            \"use of bitwise operator instead of lazy operator between booleans\",\n+            |diag| {\n+                if let Some(lhs_snip) = snippet_opt(cx, lhs.span)\n+                    && let Some(rhs_snip) = snippet_opt(cx, rhs.span)\n+                {\n+                    let sugg = format!(\"{} {} {}\", lhs_snip, op_str, rhs_snip);\n+                    diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n+                }\n+            },\n+        );\n+    }\n+}"}]}