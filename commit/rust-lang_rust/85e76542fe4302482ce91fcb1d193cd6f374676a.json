{"sha": "85e76542fe4302482ce91fcb1d193cd6f374676a", "node_id": "C_kwDOAAsO6NoAKDg1ZTc2NTQyZmU0MzAyNDgyY2U5MWZjYjFkMTkzY2Q2ZjM3NDY3NmE", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-22T09:22:29Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-22T09:22:29Z"}, "message": "Cache `Hygiene` in `DefCollector`", "tree": {"sha": "e8170b71b284cc40d9a333451928a2c0c9514dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8170b71b284cc40d9a333451928a2c0c9514dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85e76542fe4302482ce91fcb1d193cd6f374676a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmRDp3wACgkQ4laYqTBY\nYXEIxQ//Yab138PsrhhgFg0h+xoXtPUh8klalKdS1W0UHqRxMmm2axh67i/B/79w\ngjZro7pvwAbSZdUrvb4D261lLKyYp4NmCdc0r4wjL2dclF11zKhcrLWRozSNBbxw\nBsfYXwDCVaA9xIaevkiMyD+06Yo5Zx3ZbxfIflfZH5y9GYJgzwRJdOmxSv5T2wk+\nei00vh9LdNTb8bZHFTCxHZQF6q0if3BgTplRVndTEVuVurUpvO+RVj6V8g47fRxK\n2ADVLrdx5WlFkTKu1UKH8II1Qm8R/ZgCMkx/KmZOxc9FBpTu0lUIcg592dTMQwdT\nuSU+kmzasfTuOnePZJgikvZgZA7sluqW0OM/zMnlkrrHDSn4G2S6T9cs1TfLJO/2\nSmzyq7mFrdTZ8dLX8re7KWtTdpI7vFU62mRf1sTy0AEirsaXbMi51gvBY0z1PEVZ\n0bNuaKu0QLqZ8Yy4GoOF/LZBNzLGm9Uows7ml+WNDyROKVPAQbmK8mN8FKOeWwR1\n+HaB6hPFC3Xu9UjUxIeJv+thUWfSymxnzQ27pMrI7YTuotaiPQMMVMu/2Edl2iUb\nY92i3j5XBe5K5hYjnKtnfzBgbp0MCAKgx3jHPZqkCdmdFbOCFNWemadqdRdHJSNi\nz4b3+8PR+xTOyjKUxul77aLulsA2J/eSWNR+iXl7c5aeORpgB8A=\n=JATN\n-----END PGP SIGNATURE-----", "payload": "tree e8170b71b284cc40d9a333451928a2c0c9514dce\nparent cf72b6232bbcabd06c094860f151332dde81c241\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1682155349 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1682155349 +0900\n\nCache `Hygiene` in `DefCollector`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85e76542fe4302482ce91fcb1d193cd6f374676a", "html_url": "https://github.com/rust-lang/rust/commit/85e76542fe4302482ce91fcb1d193cd6f374676a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85e76542fe4302482ce91fcb1d193cd6f374676a/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf72b6232bbcabd06c094860f151332dde81c241", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf72b6232bbcabd06c094860f151332dde81c241", "html_url": "https://github.com/rust-lang/rust/commit/cf72b6232bbcabd06c094860f151332dde81c241"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "ba93b2c70ef0a8588d4f09c6a19597dab65ac339", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/85e76542fe4302482ce91fcb1d193cd6f374676a/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e76542fe4302482ce91fcb1d193cd6f374676a/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=85e76542fe4302482ce91fcb1d193cd6f374676a", "patch": "@@ -123,6 +123,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         from_glob_import: Default::default(),\n         skip_attrs: Default::default(),\n         is_proc_macro,\n+        hygienes: FxHashMap::default(),\n     };\n     if tree_id.is_block() {\n         collector.seed_with_inner(tree_id);\n@@ -270,6 +271,12 @@ struct DefCollector<'a> {\n     /// This also stores the attributes to skip when we resolve derive helpers and non-macro\n     /// non-builtin attributes in general.\n     skip_attrs: FxHashMap<InFile<ModItem>, AttrId>,\n+    /// `Hygiene` cache, because `Hygiene` construction is expensive.\n+    ///\n+    /// Almost all paths should have been lowered to `ModPath` during `ItemTree` construction.\n+    /// However, `DefCollector` still needs to lower paths in attributes, in particular those in\n+    /// derive meta item list.\n+    hygienes: FxHashMap<HirFileId, Hygiene>,\n }\n \n impl DefCollector<'_> {\n@@ -313,8 +320,9 @@ impl DefCollector<'_> {\n                 }\n \n                 if *attr_name == hir_expand::name![feature] {\n+                    let hygiene = &Hygiene::new_unhygienic();\n                     let features = attr\n-                        .parse_path_comma_token_tree(self.db.upcast(), Hygiene::new_unhygienic())\n+                        .parse_path_comma_token_tree(self.db.upcast(), hygiene)\n                         .into_iter()\n                         .flatten()\n                         .filter_map(|feat| match feat.segments() {\n@@ -1225,7 +1233,18 @@ impl DefCollector<'_> {\n                             }\n                         };\n                         let ast_id = ast_id.with_value(ast_adt_id);\n-                        let hygiene = Hygiene::new(self.db.upcast(), file_id);\n+\n+                        let extend_unhygenic;\n+                        let hygiene = if file_id.is_macro() {\n+                            self.hygienes\n+                                .entry(file_id)\n+                                .or_insert_with(|| Hygiene::new(self.db.upcast(), file_id))\n+                        } else {\n+                            // Avoid heap allocation (`Hygiene` embraces `Arc`) and hash map entry\n+                            // when we're in an oridinary (non-macro) file.\n+                            extend_unhygenic = Hygiene::new_unhygienic();\n+                            &extend_unhygenic\n+                        };\n \n                         match attr.parse_path_comma_token_tree(self.db.upcast(), hygiene) {\n                             Some(derive_macros) => {\n@@ -2215,6 +2234,7 @@ mod tests {\n             from_glob_import: Default::default(),\n             skip_attrs: Default::default(),\n             is_proc_macro: false,\n+            hygienes: FxHashMap::default(),\n         };\n         collector.seed_with_top_level();\n         collector.collect();"}, {"sha": "17360090db1dc7aea0e8c037e9ab45b773eba593", "filename": "crates/hir-expand/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85e76542fe4302482ce91fcb1d193cd6f374676a/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e76542fe4302482ce91fcb1d193cd6f374676a/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fattrs.rs?ref=85e76542fe4302482ce91fcb1d193cd6f374676a", "patch": "@@ -269,7 +269,7 @@ impl Attr {\n     pub fn parse_path_comma_token_tree<'a>(\n         &'a self,\n         db: &'a dyn ExpandDatabase,\n-        hygiene: Hygiene,\n+        hygiene: &'a Hygiene,\n     ) -> Option<impl Iterator<Item = ModPath> + 'a> {\n         let args = self.token_tree_value()?;\n \n@@ -297,7 +297,7 @@ impl Attr {\n                     return None;\n                 }\n                 let path = meta.path()?;\n-                ModPath::from_src(db, path, &hygiene)\n+                ModPath::from_src(db, path, hygiene)\n             });\n \n         Some(paths)"}]}