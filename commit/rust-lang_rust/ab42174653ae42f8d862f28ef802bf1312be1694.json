{"sha": "ab42174653ae42f8d862f28ef802bf1312be1694", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNDIxNzQ2NTNhZTQyZjhkODYyZjI4ZWY4MDJiZjEzMTJiZTE2OTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-14T21:08:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-14T21:08:47Z"}, "message": "Merge #3131\n\n3131: vscode: simplified config and to removed one source of truth of default values r=matklad a=Veetaha\n\nThough not intended initially, the implementation of config design is alike [dart's one](https://github.com/Dart-Code/Dart-Code/blob/master/src/extension/config.ts) as pointed by @matklad in PM.\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>", "tree": {"sha": "0d3bf6a0d6712263e2ec4da30914ad3be37e8387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d3bf6a0d6712263e2ec4da30914ad3be37e8387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab42174653ae42f8d862f28ef802bf1312be1694", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRwxfCRBK7hj4Ov3rIwAAdHIIACN8vGiCgzmmmDfaVzBEnbiz\n1ZREy0t36oQG3mxJl5Qo79hobl7CGS8N2Hagu/L1eN1LNpmKCjuXXoykuu2RwZ1O\niGFGYqwDStdKhI4DJ0w3uGpq1V0+FImf2kKgYHHLjOaliylIFmubDYE8vMcc3oIt\nhPx35rgwP/fwmPqMLZ5Fkr7wt2GBSPO6gUjMmLPJzVVNGqrm72vrzJ7uzSMKQ1le\nXbAgIYX5vCrWK1Sj0DehUX+d5dU7nUw89Pn654kINxlqUh49GmxCf2aMYrKchQFh\nogQV29Q5w5ffVi6az1IyGBaMzVNdRWj5w7/CrME2jY2s5fIQzmTihJ99sR0bf0U=\n=9ue6\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d3bf6a0d6712263e2ec4da30914ad3be37e8387\nparent b2b94cbf71738e7bc372328f22c8dcc8c734b34c\nparent 20fabaf1eeec32e1115627a5552eddf0c074ce37\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581714527 +0000\ncommitter GitHub <noreply@github.com> 1581714527 +0000\n\nMerge #3131\n\n3131: vscode: simplified config and to removed one source of truth of default values r=matklad a=Veetaha\n\nThough not intended initially, the implementation of config design is alike [dart's one](https://github.com/Dart-Code/Dart-Code/blob/master/src/extension/config.ts) as pointed by @matklad in PM.\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab42174653ae42f8d862f28ef802bf1312be1694", "html_url": "https://github.com/rust-lang/rust/commit/ab42174653ae42f8d862f28ef802bf1312be1694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab42174653ae42f8d862f28ef802bf1312be1694/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "html_url": "https://github.com/rust-lang/rust/commit/b2b94cbf71738e7bc372328f22c8dcc8c734b34c"}, {"sha": "20fabaf1eeec32e1115627a5552eddf0c074ce37", "url": "https://api.github.com/repos/rust-lang/rust/commits/20fabaf1eeec32e1115627a5552eddf0c074ce37", "html_url": "https://github.com/rust-lang/rust/commit/20fabaf1eeec32e1115627a5552eddf0c074ce37"}], "stats": {"total": 307, "additions": 96, "deletions": 211}, "files": [{"sha": "a607c21480053e820531f5437af8ce12b6c4a912", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab42174653ae42f8d862f28ef802bf1312be1694/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/ab42174653ae42f8d862f28ef802bf1312be1694/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=ab42174653ae42f8d862f28ef802bf1312be1694", "patch": "@@ -182,6 +182,9 @@\n                 },\n                 \"rust-analyzer.excludeGlobs\": {\n                     \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n                     \"default\": [],\n                     \"description\": \"Paths to exclude from analysis\"\n                 },\n@@ -197,6 +200,9 @@\n                 },\n                 \"rust-analyzer.cargo-watch.arguments\": {\n                     \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n                     \"description\": \"`cargo-watch` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\",\n                     \"default\": []\n                 },\n@@ -242,6 +248,7 @@\n                 \"rust-analyzer.maxInlayHintLength\": {\n                     \"type\": \"number\",\n                     \"default\": 20,\n+                    \"exclusiveMinimum\": 0,\n                     \"description\": \"Maximum length for inlay hints\"\n                 },\n                 \"rust-analyzer.cargoFeatures.noDefaultFeatures\": {\n@@ -256,6 +263,9 @@\n                 },\n                 \"rust-analyzer.cargoFeatures.features\": {\n                     \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n                     \"default\": [],\n                     \"description\": \"List of features to activate\"\n                 }"}, {"sha": "dcf9d0c067316bebfa1be9b2c9e39ad2f41bb754", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab42174653ae42f8d862f28ef802bf1312be1694/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ab42174653ae42f8d862f28ef802bf1312be1694/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=ab42174653ae42f8d862f28ef802bf1312be1694", "patch": "@@ -1,6 +1,6 @@\n import * as lc from 'vscode-languageclient';\n+import * as vscode from 'vscode';\n \n-import { window, workspace } from 'vscode';\n import { Config } from './config';\n import { ensureLanguageServerBinary } from './installation/language_server';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n@@ -9,32 +9,34 @@ export async function createClient(config: Config): Promise<null | lc.LanguageCl\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n-    const workspaceFolderPath = workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n+    const workspaceFolderPath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const raLspServerPath = await ensureLanguageServerBinary(config.langServerSource);\n-    if (!raLspServerPath) return null;\n+    const langServerPath = await ensureLanguageServerBinary(config.langServerBinarySource);\n+    if (!langServerPath) return null;\n \n     const run: lc.Executable = {\n-        command: raLspServerPath,\n+        command: langServerPath,\n         options: { cwd: workspaceFolderPath },\n     };\n     const serverOptions: lc.ServerOptions = {\n         run,\n         debug: run,\n     };\n-    const traceOutputChannel = window.createOutputChannel(\n+    const traceOutputChannel = vscode.window.createOutputChannel(\n         'Rust Analyzer Language Server Trace',\n     );\n+    const cargoWatchOpts = config.cargoWatchOptions;\n+\n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n         initializationOptions: {\n             publishDecorations: true,\n             lruCapacity: config.lruCapacity,\n             maxInlayHintLength: config.maxInlayHintLength,\n-            cargoWatchEnable: config.cargoWatchOptions.enable,\n-            cargoWatchArgs: config.cargoWatchOptions.arguments,\n-            cargoWatchCommand: config.cargoWatchOptions.command,\n-            cargoWatchAllTargets: config.cargoWatchOptions.allTargets,\n+            cargoWatchEnable: cargoWatchOpts.enable,\n+            cargoWatchArgs: cargoWatchOpts.arguments,\n+            cargoWatchCommand: cargoWatchOpts.command,\n+            cargoWatchAllTargets: cargoWatchOpts.allTargets,\n             excludeGlobs: config.excludeGlobs,\n             useClientWatching: config.useClientWatching,\n             featureFlags: config.featureFlags,"}, {"sha": "8cd89e11969ad0cf35df7cdaedec7c9f24573fd3", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 72, "deletions": 199, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/ab42174653ae42f8d862f28ef802bf1312be1694/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ab42174653ae42f8d862f28ef802bf1312be1694/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=ab42174653ae42f8d862f28ef802bf1312be1694", "patch": "@@ -16,45 +16,49 @@ export interface CargoFeatures {\n     allFeatures: boolean;\n     features: string[];\n }\n-\n export class Config {\n-    langServerSource!: null | BinarySource;\n+    private static readonly rootSection = \"rust-analyzer\";\n+    private static readonly requiresReloadOpts = [\n+        \"cargoFeatures\",\n+        \"cargo-watch\",\n+    ]\n+    .map(opt => `${Config.rootSection}.${opt}`);\n+\n+    private cfg!: vscode.WorkspaceConfiguration;\n+\n+    constructor(private readonly ctx: vscode.ExtensionContext) {\n+        vscode.workspace.onDidChangeConfiguration(this.onConfigChange, this, ctx.subscriptions);\n+        this.refreshConfig();\n+    }\n \n-    highlightingOn = true;\n-    rainbowHighlightingOn = false;\n-    enableEnhancedTyping = true;\n-    lruCapacity: null | number = null;\n-    displayInlayHints = true;\n-    maxInlayHintLength: null | number = null;\n-    excludeGlobs: string[] = [];\n-    useClientWatching = true;\n-    featureFlags: Record<string, boolean> = {};\n-    // for internal use\n-    withSysroot: null | boolean = null;\n-    cargoWatchOptions: CargoWatchOptions = {\n-        enable: true,\n-        arguments: [],\n-        command: '',\n-        allTargets: true,\n-    };\n-    cargoFeatures: CargoFeatures = {\n-        noDefaultFeatures: false,\n-        allFeatures: true,\n-        features: [],\n-    };\n \n-    private prevEnhancedTyping: null | boolean = null;\n-    private prevCargoFeatures: null | CargoFeatures = null;\n-    private prevCargoWatchOptions: null | CargoWatchOptions = null;\n+    private refreshConfig() {\n+        this.cfg = vscode.workspace.getConfiguration(Config.rootSection);\n+        console.log(\"Using configuration:\", this.cfg);\n+    }\n+\n+    private async onConfigChange(event: vscode.ConfigurationChangeEvent) {\n+        this.refreshConfig();\n+\n+        const requiresReloadOpt = Config.requiresReloadOpts.find(\n+            opt => event.affectsConfiguration(opt)\n+        );\n+\n+        if (!requiresReloadOpt) return;\n \n-    constructor(ctx: vscode.ExtensionContext) {\n-        vscode.workspace.onDidChangeConfiguration(_ => this.refresh(ctx), null, ctx.subscriptions);\n-        this.refresh(ctx);\n+        const userResponse = await vscode.window.showInformationMessage(\n+            `Changing \"${requiresReloadOpt}\" requires a reload`,\n+            \"Reload now\"\n+        );\n+\n+        if (userResponse === \"Reload now\") {\n+            vscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n+        }\n     }\n \n-    private static expandPathResolving(path: string) {\n-        if (path.startsWith('~/')) {\n-            return path.replace('~', os.homedir());\n+    private static replaceTildeWithHomeDir(path: string) {\n+        if (path.startsWith(\"~/\")) {\n+            return os.homedir() + path.slice(\"~\".length);\n         }\n         return path;\n     }\n@@ -64,17 +68,14 @@ export class Config {\n      * `platform` on GitHub releases. (It is also stored under the same name when\n      * downloaded by the extension).\n      */\n-    private static prebuiltLangServerFileName(\n-        platform: NodeJS.Platform,\n-        arch: string\n-    ): null | string {\n+    get prebuiltLangServerFileName(): null | string {\n         // See possible `arch` values here:\n         // https://nodejs.org/api/process.html#process_process_arch\n \n-        switch (platform) {\n+        switch (process.platform) {\n \n             case \"linux\": {\n-                switch (arch) {\n+                switch (process.arch) {\n                     case \"arm\":\n                     case \"arm64\": return null;\n \n@@ -97,28 +98,23 @@ export class Config {\n         }\n     }\n \n-    private static langServerBinarySource(\n-        ctx: vscode.ExtensionContext,\n-        config: vscode.WorkspaceConfiguration\n-    ): null | BinarySource {\n-        const langServerPath = RA_LSP_DEBUG ?? config.get<null | string>(\"raLspServerPath\");\n+    get langServerBinarySource(): null | BinarySource {\n+        const langServerPath = RA_LSP_DEBUG ?? this.cfg.get<null | string>(\"raLspServerPath\");\n \n         if (langServerPath) {\n             return {\n                 type: BinarySource.Type.ExplicitPath,\n-                path: Config.expandPathResolving(langServerPath)\n+                path: Config.replaceTildeWithHomeDir(langServerPath)\n             };\n         }\n \n-        const prebuiltBinaryName = Config.prebuiltLangServerFileName(\n-            process.platform, process.arch\n-        );\n+        const prebuiltBinaryName = this.prebuiltLangServerFileName;\n \n         if (!prebuiltBinaryName) return null;\n \n         return {\n             type: BinarySource.Type.GithubRelease,\n-            dir: ctx.globalStoragePath,\n+            dir:  this.ctx.globalStoragePath,\n             file: prebuiltBinaryName,\n             repo: {\n                 name: \"rust-analyzer\",\n@@ -127,158 +123,35 @@ export class Config {\n         };\n     }\n \n+    // We don't do runtime config validation here for simplicity. More on stackoverflow:\n+    // https://stackoverflow.com/questions/60135780/what-is-the-best-way-to-type-check-the-configuration-for-vscode-extension\n \n-    // FIXME: revisit the logic for `if (.has(...)) config.get(...)` set default\n-    // values only in one place (i.e. remove default values from non-readonly members declarations)\n-    private refresh(ctx: vscode.ExtensionContext) {\n-        const config = vscode.workspace.getConfiguration('rust-analyzer');\n-\n-        let requireReloadMessage = null;\n-\n-        if (config.has('highlightingOn')) {\n-            this.highlightingOn = config.get('highlightingOn') as boolean;\n-        }\n+    get highlightingOn()        { return this.cfg.get(\"highlightingOn\") as boolean; }\n+    get rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n+    get lruCapacity()           { return this.cfg.get(\"lruCapacity\") as null | number; }\n+    get displayInlayHints()     { return this.cfg.get(\"displayInlayHints\") as boolean; }\n+    get maxInlayHintLength()    { return this.cfg.get(\"maxInlayHintLength\") as number; }\n+    get excludeGlobs()          { return this.cfg.get(\"excludeGlobs\") as string[]; }\n+    get useClientWatching()     { return this.cfg.get(\"useClientWatching\") as boolean; }\n+    get featureFlags()          { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }\n \n-        if (config.has('rainbowHighlightingOn')) {\n-            this.rainbowHighlightingOn = config.get(\n-                'rainbowHighlightingOn',\n-            ) as boolean;\n-        }\n-\n-        if (config.has('enableEnhancedTyping')) {\n-            this.enableEnhancedTyping = config.get(\n-                'enableEnhancedTyping',\n-            ) as boolean;\n-\n-            if (this.prevEnhancedTyping === null) {\n-                this.prevEnhancedTyping = this.enableEnhancedTyping;\n-            }\n-        } else if (this.prevEnhancedTyping === null) {\n-            this.prevEnhancedTyping = this.enableEnhancedTyping;\n-        }\n-\n-        if (this.prevEnhancedTyping !== this.enableEnhancedTyping) {\n-            requireReloadMessage =\n-                'Changing enhanced typing setting requires a reload';\n-            this.prevEnhancedTyping = this.enableEnhancedTyping;\n-        }\n-\n-        this.langServerSource = Config.langServerBinarySource(ctx, config);\n-\n-        if (config.has('cargo-watch.enable')) {\n-            this.cargoWatchOptions.enable = config.get<boolean>(\n-                'cargo-watch.enable',\n-                true,\n-            );\n-        }\n-\n-        if (config.has('cargo-watch.arguments')) {\n-            this.cargoWatchOptions.arguments = config.get<string[]>(\n-                'cargo-watch.arguments',\n-                [],\n-            );\n-        }\n-\n-        if (config.has('cargo-watch.command')) {\n-            this.cargoWatchOptions.command = config.get<string>(\n-                'cargo-watch.command',\n-                '',\n-            );\n-        }\n-\n-        if (config.has('cargo-watch.allTargets')) {\n-            this.cargoWatchOptions.allTargets = config.get<boolean>(\n-                'cargo-watch.allTargets',\n-                true,\n-            );\n-        }\n-\n-        if (config.has('lruCapacity')) {\n-            this.lruCapacity = config.get('lruCapacity') as number;\n-        }\n-\n-        if (config.has('displayInlayHints')) {\n-            this.displayInlayHints = config.get('displayInlayHints') as boolean;\n-        }\n-        if (config.has('maxInlayHintLength')) {\n-            this.maxInlayHintLength = config.get(\n-                'maxInlayHintLength',\n-            ) as number;\n-        }\n-        if (config.has('excludeGlobs')) {\n-            this.excludeGlobs = config.get('excludeGlobs') || [];\n-        }\n-        if (config.has('useClientWatching')) {\n-            this.useClientWatching = config.get('useClientWatching') || true;\n-        }\n-        if (config.has('featureFlags')) {\n-            this.featureFlags = config.get('featureFlags') || {};\n-        }\n-        if (config.has('withSysroot')) {\n-            this.withSysroot = config.get('withSysroot') || false;\n-        }\n-\n-        if (config.has('cargoFeatures.noDefaultFeatures')) {\n-            this.cargoFeatures.noDefaultFeatures = config.get(\n-                'cargoFeatures.noDefaultFeatures',\n-                false,\n-            );\n-        }\n-        if (config.has('cargoFeatures.allFeatures')) {\n-            this.cargoFeatures.allFeatures = config.get(\n-                'cargoFeatures.allFeatures',\n-                true,\n-            );\n-        }\n-        if (config.has('cargoFeatures.features')) {\n-            this.cargoFeatures.features = config.get(\n-                'cargoFeatures.features',\n-                [],\n-            );\n-        }\n-\n-        if (\n-            this.prevCargoFeatures !== null &&\n-            (this.cargoFeatures.allFeatures !==\n-                this.prevCargoFeatures.allFeatures ||\n-                this.cargoFeatures.noDefaultFeatures !==\n-                this.prevCargoFeatures.noDefaultFeatures ||\n-                this.cargoFeatures.features.length !==\n-                this.prevCargoFeatures.features.length ||\n-                this.cargoFeatures.features.some(\n-                    (v, i) => v !== this.prevCargoFeatures!.features[i],\n-                ))\n-        ) {\n-            requireReloadMessage = 'Changing cargo features requires a reload';\n-        }\n-        this.prevCargoFeatures = { ...this.cargoFeatures };\n-\n-        if (this.prevCargoWatchOptions !== null) {\n-            const changed =\n-                this.cargoWatchOptions.enable !== this.prevCargoWatchOptions.enable ||\n-                this.cargoWatchOptions.command !== this.prevCargoWatchOptions.command ||\n-                this.cargoWatchOptions.allTargets !== this.prevCargoWatchOptions.allTargets ||\n-                this.cargoWatchOptions.arguments.length !== this.prevCargoWatchOptions.arguments.length ||\n-                this.cargoWatchOptions.arguments.some(\n-                    (v, i) => v !== this.prevCargoWatchOptions!.arguments[i],\n-                );\n-            if (changed) {\n-                requireReloadMessage = 'Changing cargo-watch options requires a reload';\n-            }\n-        }\n-        this.prevCargoWatchOptions = { ...this.cargoWatchOptions };\n+    get cargoWatchOptions(): CargoWatchOptions {\n+        return {\n+            enable:     this.cfg.get(\"cargo-watch.enable\") as boolean,\n+            arguments:  this.cfg.get(\"cargo-watch.arguments\") as string[],\n+            allTargets: this.cfg.get(\"cargo-watch.allTargets\") as boolean,\n+            command:    this.cfg.get(\"cargo-watch.command\") as string,\n+        };\n+    }\n \n-        if (requireReloadMessage !== null) {\n-            const reloadAction = 'Reload now';\n-            vscode.window\n-                .showInformationMessage(requireReloadMessage, reloadAction)\n-                .then(selectedAction => {\n-                    if (selectedAction === reloadAction) {\n-                        vscode.commands.executeCommand(\n-                            'workbench.action.reloadWindow',\n-                        );\n-                    }\n-                });\n-        }\n+    get cargoFeatures(): CargoFeatures {\n+        return {\n+            noDefaultFeatures: this.cfg.get(\"cargoFeatures.noDefaultFeatures\") as boolean,\n+            allFeatures:       this.cfg.get(\"cargoFeatures.allFeatures\") as boolean,\n+            features:          this.cfg.get(\"cargoFeatures.features\") as string[],\n+        };\n     }\n+\n+    // for internal use\n+    get withSysroot() { return this.cfg.get(\"withSysroot\", false); }\n }"}, {"sha": "993e79d70360f274ebd303ee4ff64aed611b8bca", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab42174653ae42f8d862f28ef802bf1312be1694/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ab42174653ae42f8d862f28ef802bf1312be1694/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=ab42174653ae42f8d862f28ef802bf1312be1694", "patch": "@@ -66,9 +66,9 @@ class StatusDisplay implements Disposable {\n \n     refreshLabel() {\n         if (this.packageName) {\n-            this.statusBarItem!.text = `${spinnerFrames[this.i]} cargo ${this.command} [${this.packageName}]`;\n+            this.statusBarItem.text = `${spinnerFrames[this.i]} cargo ${this.command} [${this.packageName}]`;\n         } else {\n-            this.statusBarItem!.text = `${spinnerFrames[this.i]} cargo ${this.command}`;\n+            this.statusBarItem.text = `${spinnerFrames[this.i]} cargo ${this.command}`;\n         }\n     }\n "}]}