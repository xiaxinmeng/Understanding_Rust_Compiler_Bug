{"sha": "9f836d5a53e20fde65aa3469fa1826228e7c273a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODM2ZDVhNTNlMjBmZGU2NWFhMzQ2OWZhMTgyNjIyOGU3YzI3M2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-01T23:06:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-01T23:06:48Z"}, "message": "auto merge of #13877 : thestinger/rust/de-tilde-str-vec, r=alexcrichton", "tree": {"sha": "01a0c192a4dabd1ebb17f3d3da8662701d43c6f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01a0c192a4dabd1ebb17f3d3da8662701d43c6f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f836d5a53e20fde65aa3469fa1826228e7c273a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f836d5a53e20fde65aa3469fa1826228e7c273a", "html_url": "https://github.com/rust-lang/rust/commit/9f836d5a53e20fde65aa3469fa1826228e7c273a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f836d5a53e20fde65aa3469fa1826228e7c273a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb72d7cfea9ba44581f708b13aa82ab23ee4fa7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb72d7cfea9ba44581f708b13aa82ab23ee4fa7e", "html_url": "https://github.com/rust-lang/rust/commit/fb72d7cfea9ba44581f708b13aa82ab23ee4fa7e"}, {"sha": "e93cb04c4b011088d3b13a17bdf4cb865730dd38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e93cb04c4b011088d3b13a17bdf4cb865730dd38", "html_url": "https://github.com/rust-lang/rust/commit/e93cb04c4b011088d3b13a17bdf4cb865730dd38"}], "stats": {"total": 383, "additions": 186, "deletions": 197}, "files": [{"sha": "28c7cfb88c9d61434b4969bd489e8a08388adf68", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -170,7 +170,7 @@ fn parse_compile_flags(line: &str) -> Option<~str> {\n }\n \n fn parse_run_flags(line: &str) -> Option<~str> {\n-    parse_name_value_directive(line, ~\"run-flags\")\n+    parse_name_value_directive(line, \"run-flags\".to_owned())\n }\n \n fn parse_debugger_cmd(line: &str) -> Option<~str> {"}, {"sha": "302cc611f381eaa35139fe82486200ad1c9574cc", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -698,13 +698,13 @@ static INITIAL_LOAD_FACTOR: Fraction = (9, 10);\n /// book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\");\n ///\n /// // check for a specific one.\n-/// if !book_reviews.contains_key(& &\"Les Mis\u00e9rables\") {\n+/// if !book_reviews.contains_key(&(\"Les Mis\u00e9rables\")) {\n ///     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n ///              book_reviews.len());\n /// }\n ///\n /// // oops, this review has a lot of spelling mistakes, let's delete it.\n-/// book_reviews.remove(& &\"The Adventures of Sherlock Holmes\");\n+/// book_reviews.remove(&(\"The Adventures of Sherlock Holmes\"));\n ///\n /// // look up the values associated with some keys.\n /// let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];"}, {"sha": "ec1d3f5750adf480a0aa4da2f463d48829662cbb", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -1651,10 +1651,10 @@ mod test_set {\n \n         // FIXME: #5801: this needs a type hint to compile...\n         let result: Option<(&uint, & &'static str)> = z.next();\n-        assert_eq!(result.unwrap(), (&5u, & &\"bar\"));\n+        assert_eq!(result.unwrap(), (&5u, &(\"bar\")));\n \n         let result: Option<(&uint, & &'static str)> = z.next();\n-        assert_eq!(result.unwrap(), (&11u, & &\"foo\"));\n+        assert_eq!(result.unwrap(), (&11u, &(\"foo\")));\n \n         let result: Option<(&uint, & &'static str)> = z.next();\n         assert!(result.is_none());"}, {"sha": "78c2b6c99e955000a83673924d01aeab9ce7ae7c", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -1441,7 +1441,7 @@ mod tests {\n             optmulti(\"l\", \"\", \"Desc\", \"VAL\"));\n \n         let expected =\n-~\"Usage: fruits\n+\"Usage: fruits\n \n Options:\n     -b --banana VAL     Desc\n@@ -1450,7 +1450,7 @@ Options:\n     -k --kiwi           Desc\n     -p [VAL]            Desc\n     -l VAL              Desc\n-\";\n+\".to_owned();\n \n         let generated_usage = usage(\"Usage: fruits\", optgroups.as_slice());\n \n@@ -1471,13 +1471,13 @@ Options:\n                 \"This is a long description which _will_ be wrapped..+..\"));\n \n         let expected =\n-~\"Usage: fruits\n+\"Usage: fruits\n \n Options:\n     -k --kiwi           This is a long description which won't be wrapped..+..\n     -a --apple          This is a long description which _will_ be\n                         wrapped..+..\n-\";\n+\".to_owned();\n \n         let usage = usage(\"Usage: fruits\", optgroups.as_slice());\n \n@@ -1496,14 +1496,14 @@ Options:\n confuse the line wrapping; an apple costs 0.51\u20ac in some parts of Europe.\"));\n \n         let expected =\n-~\"Usage: fruits\n+\"Usage: fruits\n \n Options:\n     -k --k\u2013w\u2013           The word kiwi is normally spelled with two i's\n     -a --apple          This \u201cdescription\u201d has some characters that could\n                         confuse the line wrapping; an apple costs 0.51\u20ac in\n                         some parts of Europe.\n-\";\n+\".to_owned();\n \n         let usage = usage(\"Usage: fruits\", optgroups.as_slice());\n "}, {"sha": "9feceff537555a3692d5f6c4042272539d7da495", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -220,7 +220,9 @@ impl<'a> Parser<'a> {\n                         try!(self.parse_group_opts())\n                     } else {\n                         self.caps += 1;\n-                        self.stack.push(Paren(self.flags, self.caps, ~\"\"))\n+                        self.stack.push(Paren(self.flags,\n+                                              self.caps,\n+                                              \"\".to_owned()))\n                     }\n                 }\n                 ')' => {\n@@ -769,7 +771,7 @@ impl<'a> Parser<'a> {\n                     }\n                     if self.cur() == ':' {\n                         // Save the old flags with the opening paren.\n-                        self.stack.push(Paren(self.flags, 0, ~\"\"));\n+                        self.stack.push(Paren(self.flags, 0, \"\".to_owned()));\n                     }\n                     self.flags = flags;\n                     return Ok(())"}, {"sha": "f88f7fb8115df0e830ab6a47da6d2bf7aedf324f", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -116,7 +116,7 @@ impl<'a> NfaGen<'a> {\n             |cx, name| match name {\n                 &Some(ref name) => {\n                     let name = name.as_slice();\n-                    quote_expr!(cx, Some(~$name))\n+                    quote_expr!(cx, Some($name.to_owned()))\n                 }\n                 &None => quote_expr!(cx, None),\n             }\n@@ -306,7 +306,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n }\n \n ::regex::Regex {\n-    original: ~$regex,\n+    original: $regex.to_owned(),\n     names: vec!$cap_names,\n     p: ::regex::native::Native(exec),\n }"}, {"sha": "b579a9b9c64c12276548613c441a877a74bc2c72", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -1059,16 +1059,16 @@ pub fn build_session_(sopts: session::Options,\n \n pub fn parse_pretty(sess: &Session, name: &str) -> PpMode {\n     match name {\n-      &\"normal\" => PpmNormal,\n-      &\"expanded\" => PpmExpanded,\n-      &\"typed\" => PpmTyped,\n-      &\"expanded,identified\" => PpmExpandedIdentified,\n-      &\"identified\" => PpmIdentified,\n-      _ => {\n-        sess.fatal(\"argument to `pretty` must be one of `normal`, \\\n-                    `expanded`, `typed`, `identified`, \\\n-                    or `expanded,identified`\");\n-      }\n+        \"normal\" => PpmNormal,\n+        \"expanded\" => PpmExpanded,\n+        \"typed\" => PpmTyped,\n+        \"expanded,identified\" => PpmExpandedIdentified,\n+        \"identified\" => PpmIdentified,\n+        _ => {\n+            sess.fatal(\"argument to `pretty` must be one of `normal`, \\\n+                        `expanded`, `typed`, `identified`, \\\n+                        or `expanded,identified`\");\n+        }\n     }\n }\n "}, {"sha": "c9a40cffe587c8d7be409297f08c3ed4bc7af5e9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -300,7 +300,7 @@ pub fn run_compiler(args: &[~str]) {\n         None::<d::PpMode> => {/* continue */ }\n     }\n \n-    if r.contains(&~\"ls\") {\n+    if r.contains(&(\"ls\".to_owned())) {\n         match input {\n             d::FileInput(ref ifile) => {\n                 let mut stdout = io::stdout();"}, {"sha": "ff84a7b0ca4672a0a5b0dc47bebe1635eeed797e", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -1036,7 +1036,7 @@ fn check_crate_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n         if !iter.any(|other_attr| { name.equiv(other_attr) }) {\n             cx.span_lint(AttributeUsage, attr.span, \"unknown crate attribute\");\n         }\n-        if name.equiv(& &\"link\") {\n+        if name.equiv(&(\"link\")) {\n             cx.tcx.sess.span_err(attr.span,\n                                  \"obsolete crate `link` attribute\");\n             cx.tcx.sess.note(\"the link attribute has been superceded by the crate_id \\"}, {"sha": "e54a24af9605911e02534ac8dfa682915c8a72a9", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -189,9 +189,9 @@ impl<'a, 'b> Reflector<'a, 'b> {\n           ty::ty_rptr(_, ref mt) => {\n               match ty::get(mt.ty).sty {\n                   ty::ty_vec(ref mt, None) => {\n-                      let (name, extra) = (~\"slice\", Vec::new());\n+                      let (name, extra) = (\"slice\".to_owned(), Vec::new());\n                       let extra = extra.append(self.c_mt(mt).as_slice());\n-                      self.visit(~\"evec_\" + name, extra.as_slice())\n+                      self.visit(\"evec_\".to_owned() + name, extra.as_slice())\n                   }\n                   ty::ty_str => self.visit(\"estr_slice\".to_owned(), &[]),\n                   _ => {"}, {"sha": "9c8e02b8e21979c407dbd06523b9e6bab2de2de9", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -647,8 +647,8 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n               ty::ty_vec(mt, None) => {\n                   fcx.type_error_message(pat.span,\n                                          |_| {\n-                                          ~\"unique vector patterns are no \\\n-                                            longer supported\"\n+                                            \"unique vector patterns are no \\\n+                                             longer supported\".to_owned()\n                                          },\n                                          expected,\n                                          None);"}, {"sha": "5c3f99d1905153334c85ef10e7186c6783bcecbf", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 65, "deletions": 61, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -2564,70 +2564,74 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n     let tcx = fcx.ccx.tcx;\n     let id = expr.id;\n     match expr.node {\n-      ast::ExprVstore(ev, vst) => {\n-        let typ = match ev.node {\n-          ast::ExprLit(lit) if ast_util::lit_is_str(lit) => {\n-            ast_expr_vstore_to_ty(fcx, ev, vst, || ty::mt{ ty: ty::mk_str(tcx),\n-                                                           mutbl: ast::MutImmutable })\n-          }\n-          ast::ExprVec(ref args) => {\n-            let mutability = match vst {\n-                ast::ExprVstoreMutSlice => ast::MutMutable,\n-                _ => ast::MutImmutable,\n-            };\n-            let mut any_error = false;\n-            let mut any_bot = false;\n-            let t: ty::t = fcx.infcx().next_ty_var();\n-            for e in args.iter() {\n-                check_expr_has_type(fcx, *e, t);\n-                let arg_t = fcx.expr_ty(*e);\n-                if ty::type_is_error(arg_t) {\n-                    any_error = true;\n+        ast::ExprVstore(ev, vst) => {\n+            let typ = match ev.node {\n+                ast::ExprVec(ref args) => {\n+                    let mutability = match vst {\n+                        ast::ExprVstoreMutSlice => ast::MutMutable,\n+                        _ => ast::MutImmutable,\n+                    };\n+                    let mut any_error = false;\n+                    let mut any_bot = false;\n+                    let t: ty::t = fcx.infcx().next_ty_var();\n+                    for e in args.iter() {\n+                        check_expr_has_type(fcx, *e, t);\n+                        let arg_t = fcx.expr_ty(*e);\n+                        if ty::type_is_error(arg_t) {\n+                            any_error = true;\n+                        }\n+                        else if ty::type_is_bot(arg_t) {\n+                            any_bot = true;\n+                        }\n+                    }\n+                    if any_error {\n+                        ty::mk_err()\n+                    } else if any_bot {\n+                        ty::mk_bot()\n+                    } else {\n+                        ast_expr_vstore_to_ty(fcx, ev, vst, ||\n+                            ty::mt{ ty: ty::mk_vec(tcx,\n+                                                   ty::mt {ty: t, mutbl: mutability},\n+                                                   None),\n+                                                   mutbl: mutability })\n+                    }\n                 }\n-                else if ty::type_is_bot(arg_t) {\n-                    any_bot = true;\n+                ast::ExprRepeat(element, count_expr) => {\n+                    check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n+                    let _ = ty::eval_repeat_count(fcx, count_expr);\n+                    let mutability = match vst {\n+                        ast::ExprVstoreMutSlice => ast::MutMutable,\n+                        _ => ast::MutImmutable,\n+                    };\n+                    let t = fcx.infcx().next_ty_var();\n+                    check_expr_has_type(fcx, element, t);\n+                    let arg_t = fcx.expr_ty(element);\n+                    if ty::type_is_error(arg_t) {\n+                        ty::mk_err()\n+                    } else if ty::type_is_bot(arg_t) {\n+                        ty::mk_bot()\n+                    } else {\n+                        ast_expr_vstore_to_ty(fcx, ev, vst, ||\n+                            ty::mt{ ty: ty::mk_vec(tcx,\n+                                                   ty::mt {ty: t, mutbl: mutability},\n+                                                   None),\n+                                                   mutbl: mutability})\n+                    }\n                 }\n-            }\n-            if any_error {\n-                ty::mk_err()\n-            } else if any_bot {\n-                ty::mk_bot()\n-            } else {\n-                ast_expr_vstore_to_ty(fcx, ev, vst, ||\n-                    ty::mt{ ty: ty::mk_vec(tcx,\n-                                           ty::mt {ty: t, mutbl: mutability},\n-                                           None),\n-                            mutbl: mutability })\n-            }\n-          }\n-          ast::ExprRepeat(element, count_expr) => {\n-            check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n-            let _ = ty::eval_repeat_count(fcx, count_expr);\n-            let mutability = match vst {\n-                ast::ExprVstoreMutSlice => ast::MutMutable,\n-                _ => ast::MutImmutable,\n+                ast::ExprLit(_) => {\n+                    let error = if vst == ast::ExprVstoreSlice {\n+                        \"`&\\\"string\\\"` has been removed; use `\\\"string\\\"` instead\"\n+                    } else {\n+                        \"`~\\\"string\\\"` has been removed; use `\\\"string\\\".to_owned()` instead\"\n+                    };\n+                    tcx.sess.span_err(expr.span, error);\n+                    ty::mk_err()\n+                }\n+                _ => tcx.sess.span_bug(expr.span, \"vstore modifier on non-sequence\"),\n             };\n-            let t = fcx.infcx().next_ty_var();\n-            check_expr_has_type(fcx, element, t);\n-            let arg_t = fcx.expr_ty(element);\n-            if ty::type_is_error(arg_t) {\n-                ty::mk_err()\n-            } else if ty::type_is_bot(arg_t) {\n-                ty::mk_bot()\n-            } else {\n-                ast_expr_vstore_to_ty(fcx, ev, vst, ||\n-                    ty::mt{ ty: ty::mk_vec(tcx,\n-                                           ty::mt {ty: t, mutbl: mutability},\n-                                           None),\n-                            mutbl: mutability})\n-            }\n-          }\n-          _ =>\n-            tcx.sess.span_bug(expr.span, \"vstore modifier on non-sequence\")\n-        };\n-        fcx.write_ty(ev.id, typ);\n-        fcx.write_ty(id, typ);\n-      }\n+            fcx.write_ty(ev.id, typ);\n+            fcx.write_ty(id, typ);\n+        }\n \n       ast::ExprBox(place, subexpr) => {\n           check_expr(fcx, place);"}, {"sha": "fd004bd71d54151b30f5db46cef8de345d9b2a3d", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -1740,7 +1740,7 @@ impl<T: Iterator<char>> Builder<T> {\n             Some(NumberValue(n)) => { Ok(Number(n)) }\n             Some(BooleanValue(b)) => { Ok(Boolean(b)) }\n             Some(StringValue(ref mut s)) => {\n-                let mut temp = ~\"\";\n+                let mut temp = \"\".to_owned();\n                 swap(s, &mut temp);\n                 Ok(String(temp))\n             }\n@@ -2633,16 +2633,16 @@ mod tests {\n         assert_eq!(from_str(\"\\\"\"),    Err(SyntaxError(EOFWhileParsingString, 1, 2)));\n         assert_eq!(from_str(\"\\\"lol\"), Err(SyntaxError(EOFWhileParsingString, 1, 5)));\n \n-        assert_eq!(from_str(\"\\\"\\\"\"), Ok(String(~\"\")));\n-        assert_eq!(from_str(\"\\\"foo\\\"\"), Ok(String(~\"foo\")));\n-        assert_eq!(from_str(\"\\\"\\\\\\\"\\\"\"), Ok(String(~\"\\\"\")));\n-        assert_eq!(from_str(\"\\\"\\\\b\\\"\"), Ok(String(~\"\\x08\")));\n-        assert_eq!(from_str(\"\\\"\\\\n\\\"\"), Ok(String(~\"\\n\")));\n-        assert_eq!(from_str(\"\\\"\\\\r\\\"\"), Ok(String(~\"\\r\")));\n-        assert_eq!(from_str(\"\\\"\\\\t\\\"\"), Ok(String(~\"\\t\")));\n-        assert_eq!(from_str(\" \\\"foo\\\" \"), Ok(String(~\"foo\")));\n-        assert_eq!(from_str(\"\\\"\\\\u12ab\\\"\"), Ok(String(~\"\\u12ab\")));\n-        assert_eq!(from_str(\"\\\"\\\\uAB12\\\"\"), Ok(String(~\"\\uAB12\")));\n+        assert_eq!(from_str(\"\\\"\\\"\"), Ok(String(\"\".to_owned())));\n+        assert_eq!(from_str(\"\\\"foo\\\"\"), Ok(String(\"foo\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\\\\"\\\"\"), Ok(String(\"\\\"\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\b\\\"\"), Ok(String(\"\\x08\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\n\\\"\"), Ok(String(\"\\n\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\r\\\"\"), Ok(String(\"\\r\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\t\\\"\"), Ok(String(\"\\t\".to_owned())));\n+        assert_eq!(from_str(\" \\\"foo\\\" \"), Ok(String(\"foo\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\u12ab\\\"\"), Ok(String(\"\\u12ab\".to_owned())));\n+        assert_eq!(from_str(\"\\\"\\\\uAB12\\\"\"), Ok(String(\"\\uAB12\".to_owned())));\n     }\n \n     #[test]\n@@ -2890,23 +2890,23 @@ mod tests {\n     fn test_find(){\n         let json_value = from_str(\"{\\\"dog\\\" : \\\"cat\\\"}\").unwrap();\n         let found_str = json_value.find(&\"dog\".to_owned());\n-        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == &\"cat\");\n+        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == \"cat\");\n     }\n \n     #[test]\n     fn test_find_path(){\n         let json_value = from_str(\"{\\\"dog\\\":{\\\"cat\\\": {\\\"mouse\\\" : \\\"cheese\\\"}}}\").unwrap();\n         let found_str = json_value.find_path(&[&\"dog\".to_owned(),\n                                              &\"cat\".to_owned(), &\"mouse\".to_owned()]);\n-        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == &\"cheese\");\n+        assert!(found_str.is_some() && found_str.unwrap().as_string().unwrap() == \"cheese\");\n     }\n \n     #[test]\n     fn test_search(){\n         let json_value = from_str(\"{\\\"dog\\\":{\\\"cat\\\": {\\\"mouse\\\" : \\\"cheese\\\"}}}\").unwrap();\n         let found_str = json_value.search(&\"mouse\".to_owned()).and_then(|j| j.as_string());\n         assert!(found_str.is_some());\n-        assert!(found_str.unwrap() == &\"cheese\");\n+        assert!(found_str.unwrap() == \"cheese\");\n     }\n \n     #[test]\n@@ -2946,7 +2946,7 @@ mod tests {\n     fn test_as_string(){\n         let json_value = from_str(\"\\\"dog\\\"\").unwrap();\n         let json_str = json_value.as_string();\n-        let expected_str = &\"dog\";\n+        let expected_str = \"dog\";\n         assert_eq!(json_str, Some(expected_str));\n     }\n \n@@ -3067,7 +3067,7 @@ mod tests {\n             r#\"{ \"foo\":\"bar\", \"array\" : [0, 1, 2,3 ,4,5], \"idents\":[null,true,false]}\"#,\n             ~[\n                 (ObjectStart,             ~[]),\n-                  (StringValue(~\"bar\"),   ~[Key(\"foo\")]),\n+                  (StringValue(\"bar\".to_owned()),   ~[Key(\"foo\")]),\n                   (ListStart,             ~[Key(\"array\")]),\n                     (NumberValue(0.0),    ~[Key(\"array\"), Index(0)]),\n                     (NumberValue(1.0),    ~[Key(\"array\"), Index(1)]),\n@@ -3155,7 +3155,7 @@ mod tests {\n                   (NumberValue(1.0),            ~[Key(\"a\")]),\n                   (ListStart,                   ~[Key(\"b\")]),\n                     (BooleanValue(true),        ~[Key(\"b\"), Index(0)]),\n-                    (StringValue(~\"foo\\nbar\"),  ~[Key(\"b\"), Index(1)]),\n+                    (StringValue(\"foo\\nbar\".to_owned()),  ~[Key(\"b\"), Index(1)]),\n                     (ObjectStart,               ~[Key(\"b\"), Index(2)]),\n                       (ObjectStart,             ~[Key(\"b\"), Index(2), Key(\"c\")]),\n                         (NullValue,             ~[Key(\"b\"), Index(2), Key(\"c\"), Key(\"d\")]),\n@@ -3287,7 +3287,7 @@ mod tests {\n         assert!(stack.last_is_index());\n         assert!(stack.get(0) == Index(1));\n \n-        stack.push_key(~\"foo\");\n+        stack.push_key(\"foo\".to_owned());\n \n         assert!(stack.len() == 2);\n         assert!(stack.is_equal_to([Index(1), Key(\"foo\")]));\n@@ -3299,7 +3299,7 @@ mod tests {\n         assert!(stack.get(0) == Index(1));\n         assert!(stack.get(1) == Key(\"foo\"));\n \n-        stack.push_key(~\"bar\");\n+        stack.push_key(\"bar\".to_owned());\n \n         assert!(stack.len() == 3);\n         assert!(stack.is_equal_to([Index(1), Key(\"foo\"), Key(\"bar\")]));\n@@ -3363,7 +3363,7 @@ mod tests {\n     }\n \n     fn big_json() -> ~str {\n-        let mut src = ~\"[\\n\";\n+        let mut src = \"[\\n\".to_owned();\n         for _ in range(0, 500) {\n             src = src + r#\"{ \"a\": true, \"b\": null, \"c\":3.1415, \"d\": \"Hello world\", \"e\": [1,2,3]},\"#;\n         }"}, {"sha": "bf12dd2d94ab119a1750cd3e38d987a58d9e2b8e", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -62,7 +62,7 @@\n //!     let mut flags = FlagA | FlagB;\n //!     flags.clear();\n //!     assert!(flags.is_empty());\n-//!     assert_eq!(format!(\"{}\", flags), ~\"hi!\");\n+//!     assert_eq!(format!(\"{}\", flags).as_slice(), \"hi!\");\n //! }\n //! ~~~\n //!"}, {"sha": "e8ca4037f57f10e12282504ad86c6450be04b16e", "filename": "src/libstd/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fmod.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -343,7 +343,7 @@ mod tests {\n \n         assert_eq!(hasher.hash(&'a'), 97);\n \n-        assert_eq!(hasher.hash(& &\"a\"), 97 + 0xFF);\n+        assert_eq!(hasher.hash(&(\"a\")), 97 + 0xFF);\n         assert_eq!(hasher.hash(& &[1u8, 2u8, 3u8]), 9);\n \n         unsafe {"}, {"sha": "99a281755e4e0c2f137cd41093484548c7ff5707", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -555,7 +555,7 @@ mod tests {\n             ($path:expr, $disp:ident, $exp:expr) => (\n                 {\n                     let path = Path::new($path);\n-                    assert!(path.$disp().to_str() == ~$exp);\n+                    assert!(path.$disp().to_str().as_slice() == $exp);\n                 }\n             )\n         )"}, {"sha": "fc0137d00b7f9e42d1fafbde12709803a6b34572", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -637,7 +637,7 @@ fn test_repr() {\n     exact_test(&true, \"true\");\n     exact_test(&false, \"false\");\n     exact_test(&1.234, \"1.234f64\");\n-    exact_test(&(&\"hello\"), \"\\\"hello\\\"\");\n+    exact_test(&(\"hello\"), \"\\\"hello\\\"\");\n     // FIXME What do I do about this one?\n     exact_test(&(\"he\\u10f3llo\".to_owned()), \"~\\\"he\\\\u10f3llo\\\"\");\n "}, {"sha": "b105dd0ca5a78de8a49ce9189d689607e2af037a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -2025,12 +2025,12 @@ pub trait StrSlice<'a> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let s = ~\"Do you know the muffin man,\n-    /// The muffin man, the muffin man, ...\";\n+    /// let s = \"Do you know the muffin man,\n+    /// The muffin man, the muffin man, ...\".to_owned();\n     ///\n     /// assert_eq!(s.replace(\"muffin man\", \"little lamb\"),\n-    ///            ~\"Do you know the little lamb,\n-    /// The little lamb, the little lamb, ...\");\n+    ///            \"Do you know the little lamb,\n+    /// The little lamb, the little lamb, ...\".to_owned());\n     ///\n     /// // not found, so no change.\n     /// assert_eq!(s.replace(\"cookie monster\", \"little lamb\"), s);\n@@ -3604,11 +3604,11 @@ mod tests {\n \n     #[test]\n     fn test_total_ord() {\n-        \"1234\".cmp(& &\"123\") == Greater;\n-        \"123\".cmp(& &\"1234\") == Less;\n-        \"1234\".cmp(& &\"1234\") == Equal;\n-        \"12345555\".cmp(& &\"123456\") == Less;\n-        \"22\".cmp(& &\"1234\") == Greater;\n+        \"1234\".cmp(&(\"123\")) == Greater;\n+        \"123\".cmp(&(\"1234\")) == Less;\n+        \"1234\".cmp(&(\"1234\")) == Equal;\n+        \"12345555\".cmp(&(\"123456\")) == Less;\n+        \"22\".cmp(&(\"1234\")) == Greater;\n     }\n \n     #[test]\n@@ -4005,7 +4005,7 @@ mod tests {\n \n     #[test]\n     fn test_from_str() {\n-      let owned: Option<~str> = from_str(&\"string\");\n+      let owned: Option<~str> = from_str(\"string\");\n       assert_eq!(owned, Some(\"string\".to_owned()));\n     }\n "}, {"sha": "fa2f53fcf69a5587668b5604701eadb570e4ebe5", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -242,7 +242,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// ```rust\n     /// let mut vec = vec!(\"hello\");\n-    /// vec.grow(2, & &\"world\");\n+    /// vec.grow(2, &(\"world\"));\n     /// assert_eq!(vec, vec!(\"hello\", \"world\", \"world\"));\n     /// ```\n     pub fn grow(&mut self, n: uint, value: &T) {\n@@ -267,8 +267,8 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// ```rust\n     /// let mut vec = vec!(\"a\", \"b\", \"c\");\n-    /// vec.grow_set(1, & &\"fill\", \"d\");\n-    /// vec.grow_set(4, & &\"fill\", \"e\");\n+    /// vec.grow_set(1, &(\"fill\"), \"d\");\n+    /// vec.grow_set(4, &(\"fill\"), \"e\");\n     /// assert_eq!(vec, vec!(\"a\", \"d\", \"c\", \"fill\", \"e\"));\n     /// ```\n     pub fn grow_set(&mut self, index: uint, initval: &T, value: T) {"}, {"sha": "34c4f77bc4382bdcde0d35d7d1a9a145235226c3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -270,22 +270,22 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     }\n \n     let mut syntax_expanders = SyntaxEnv::new();\n-    syntax_expanders.insert(intern(&\"macro_rules\"),\n+    syntax_expanders.insert(intern(\"macro_rules\"),\n                             IdentTT(~BasicIdentMacroExpander {\n                                 expander: ext::tt::macro_rules::add_new_extension,\n                                 span: None,\n                             },\n                             None));\n-    syntax_expanders.insert(intern(&\"fmt\"),\n+    syntax_expanders.insert(intern(\"fmt\"),\n                             builtin_normal_expander(\n                                 ext::fmt::expand_syntax_ext));\n-    syntax_expanders.insert(intern(&\"format_args\"),\n+    syntax_expanders.insert(intern(\"format_args\"),\n                             builtin_normal_expander(\n                                 ext::format::expand_args));\n-    syntax_expanders.insert(intern(&\"env\"),\n+    syntax_expanders.insert(intern(\"env\"),\n                             builtin_normal_expander(\n                                     ext::env::expand_env));\n-    syntax_expanders.insert(intern(&\"option_env\"),\n+    syntax_expanders.insert(intern(\"option_env\"),\n                             builtin_normal_expander(\n                                     ext::env::expand_option_env));\n     syntax_expanders.insert(intern(\"bytes\"),\n@@ -297,63 +297,63 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"concat\"),\n                             builtin_normal_expander(\n                                     ext::concat::expand_syntax_ext));\n-    syntax_expanders.insert(intern(&\"log_syntax\"),\n+    syntax_expanders.insert(intern(\"log_syntax\"),\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n-    syntax_expanders.insert(intern(&\"deriving\"),\n+    syntax_expanders.insert(intern(\"deriving\"),\n                             ItemDecorator(ext::deriving::expand_meta_deriving));\n \n     // Quasi-quoting expanders\n-    syntax_expanders.insert(intern(&\"quote_tokens\"),\n+    syntax_expanders.insert(intern(\"quote_tokens\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_tokens));\n-    syntax_expanders.insert(intern(&\"quote_expr\"),\n+    syntax_expanders.insert(intern(\"quote_expr\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_expr));\n-    syntax_expanders.insert(intern(&\"quote_ty\"),\n+    syntax_expanders.insert(intern(\"quote_ty\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_ty));\n-    syntax_expanders.insert(intern(&\"quote_item\"),\n+    syntax_expanders.insert(intern(\"quote_item\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_item));\n-    syntax_expanders.insert(intern(&\"quote_pat\"),\n+    syntax_expanders.insert(intern(\"quote_pat\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_pat));\n-    syntax_expanders.insert(intern(&\"quote_stmt\"),\n+    syntax_expanders.insert(intern(\"quote_stmt\"),\n                        builtin_normal_expander(\n                             ext::quote::expand_quote_stmt));\n \n-    syntax_expanders.insert(intern(&\"line\"),\n+    syntax_expanders.insert(intern(\"line\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_line));\n-    syntax_expanders.insert(intern(&\"col\"),\n+    syntax_expanders.insert(intern(\"col\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_col));\n-    syntax_expanders.insert(intern(&\"file\"),\n+    syntax_expanders.insert(intern(\"file\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_file));\n-    syntax_expanders.insert(intern(&\"stringify\"),\n+    syntax_expanders.insert(intern(\"stringify\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_stringify));\n-    syntax_expanders.insert(intern(&\"include\"),\n+    syntax_expanders.insert(intern(\"include\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_include));\n-    syntax_expanders.insert(intern(&\"include_str\"),\n+    syntax_expanders.insert(intern(\"include_str\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_include_str));\n-    syntax_expanders.insert(intern(&\"include_bin\"),\n+    syntax_expanders.insert(intern(\"include_bin\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_include_bin));\n-    syntax_expanders.insert(intern(&\"module_path\"),\n+    syntax_expanders.insert(intern(\"module_path\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_mod));\n-    syntax_expanders.insert(intern(&\"asm\"),\n+    syntax_expanders.insert(intern(\"asm\"),\n                             builtin_normal_expander(\n                                     ext::asm::expand_asm));\n-    syntax_expanders.insert(intern(&\"cfg\"),\n+    syntax_expanders.insert(intern(\"cfg\"),\n                             builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n-    syntax_expanders.insert(intern(&\"trace_macros\"),\n+    syntax_expanders.insert(intern(\"trace_macros\"),\n                             builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));\n     syntax_expanders"}, {"sha": "5d8443b64d5ef5d342f8f50894899cd49ea2d419", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -2779,28 +2779,11 @@ impl<'a> Parser<'a> {\n             }\n           }\n           token::BINOP(token::AND) | token::ANDAND => {\n-              // parse &pat\n-              let lo = self.span.lo;\n-              self.expect_and();\n-              let sub = self.parse_pat();\n-              hi = sub.span.hi;\n-              // HACK: parse &\"...\" as a literal of a borrowed str\n-              pat = match sub.node {\n-                  PatLit(e) => {\n-                      match e.node {\n-                        ExprLit(lit) if lit_is_str(lit) => {\n-                          let vst = @Expr {\n-                              id: ast::DUMMY_NODE_ID,\n-                              node: ExprVstore(e, ExprVstoreSlice),\n-                              span: mk_sp(lo, hi)\n-                          };\n-                          PatLit(vst)\n-                        }\n-                        _ => PatRegion(sub),\n-                      }\n-                  }\n-                  _ => PatRegion(sub),\n-            };\n+            // parse &pat\n+            let lo = self.span.lo;\n+            self.expect_and();\n+            let sub = self.parse_pat();\n+            pat = PatRegion(sub);\n             hi = self.last_span.hi;\n             return @ast::Pat {\n                 id: ast::DUMMY_NODE_ID,"}, {"sha": "05d38b3d0c162df413924c7b712d69f47257e8a5", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -534,7 +534,7 @@ impl<T: Writer> ConsoleTestState<T> {\n \n     pub fn write_run_start(&mut self, len: uint) -> io::IoResult<()> {\n         self.total = len;\n-        let noun = if len != 1 { &\"tests\" } else { &\"test\" };\n+        let noun = if len != 1 { \"tests\" } else { \"test\" };\n         self.write_plain(format!(\"\\nrunning {} {}\\n\", len, noun))\n     }\n "}, {"sha": "99d9e6ce478dd534434c0679104f303555f2758e", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -185,7 +185,7 @@ fn encode_inner(s: &str, full_url: bool) -> ~str {\n  * ```rust\n  * use url::encode;\n  *\n- * let url = encode(&\"https://example.com/Rust (programming language)\");\n+ * let url = encode(\"https://example.com/Rust (programming language)\");\n  * println!(\"{}\", url); // https://example.com/Rust%20(programming%20language)\n  * ```\n  */\n@@ -260,7 +260,7 @@ fn decode_inner(s: &str, full_url: bool) -> ~str {\n  * ```rust\n  * use url::decode;\n  *\n- * let url = decode(&\"https://example.com/Rust%20(programming%20language)\");\n+ * let url = decode(\"https://example.com/Rust%20(programming%20language)\");\n  * println!(\"{}\", url); // https://example.com/Rust (programming language)\n  * ```\n  */"}, {"sha": "087e619f21399317500fe44c4db3e28b25464be4", "filename": "src/test/compile-fail/borrowck-move-error-with-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -30,7 +30,7 @@ impl Drop for S {\n }\n \n fn move_in_match() {\n-    match S {f:~\"foo\", g:~\"bar\"} {\n+    match S {f: \"foo\".to_owned(), g: \"bar\".to_owned()} {\n         S {         //~ ERROR cannot move out of type `S`, which defines the `Drop` trait\n             f: _s,  //~ NOTE attempting to move value to here\n             g: _t   //~ NOTE and here"}, {"sha": "77c26d9e6de5c1d4a143460397c18c2706dbce39", "filename": "src/test/compile-fail/const-cast-different-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static a: &'static str = &\"foo\";\n+static a: &'static str = \"foo\";\n static b: *u8 = a as *u8; //~ ERROR non-scalar cast\n static c: *u8 = &a as *u8; //~ ERROR mismatched types\n "}, {"sha": "2c3e6c6f04e845fa26ead14b431589a7a0d1c8e3", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -33,7 +33,7 @@ pub fn main() {\n     (&[1]).test_imm();\n     (\"test\").test_imm();\n     (\"test\".to_owned()).test_imm();\n-    (&\"test\").test_imm();\n+    (\"test\").test_imm();\n \n     // FIXME: Other types of mutable vecs don't currently exist\n "}, {"sha": "3d6b6ba626d1114d48b752dd14125fa47e30c93c", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -10,25 +10,25 @@\n \n \n pub fn main() {\n-    let x = &\"hello\";\n-    let v = &\"hello\";\n-    let y : &str = &\"there\";\n+    let x = \"hello\";\n+    let v = \"hello\";\n+    let y : &str = \"there\";\n \n     println!(\"{}\", x);\n     println!(\"{}\", y);\n \n     assert_eq!(x[0], 'h' as u8);\n     assert_eq!(x[4], 'o' as u8);\n \n-    let z : &str = &\"thing\";\n+    let z : &str = \"thing\";\n     assert_eq!(v, x);\n     assert!(x != z);\n \n-    let a = &\"aaaa\";\n-    let b = &\"bbbb\";\n+    let a = \"aaaa\";\n+    let b = \"bbbb\";\n \n-    let c = &\"cccc\";\n-    let cc = &\"ccccc\";\n+    let c = \"cccc\";\n+    let cc = \"ccccc\";\n \n     println!(\"{}\", a);\n "}, {"sha": "faf3b090312d8ce1941457ea0d7c54e667711805", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -16,7 +16,7 @@ fn perform_hax<T: 'static>(x: ~T) -> ~hax: {\n }\n \n fn deadcode() {\n-    perform_hax(~~\"deadcode\");\n+    perform_hax(~\"deadcode\".to_owned());\n }\n \n pub fn main() {"}, {"sha": "af6dc66b95b58f6d10346b2fd2690c975fce76ec", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -16,7 +16,7 @@ fn perform_hax<T: 'static>(x: ~T) -> ~hax: {\n }\n \n fn deadcode() {\n-    perform_hax(~~\"deadcode\");\n+    perform_hax(~\"deadcode\".to_owned());\n }\n \n pub fn main() {"}, {"sha": "3bbd33378d0c51a23e0d99ecb0a9c174275deaac", "filename": "src/test/run-pass/match-borrowed_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -44,15 +44,15 @@ fn g2(ref_1: &str, ref_2: &str) -> ~str {\n \n pub fn main() {\n     assert_eq!(f1(\"b\".to_owned()), \"found b\".to_owned());\n-    assert_eq!(f1(&\"c\"), \"not found\".to_owned());\n+    assert_eq!(f1(\"c\"), \"not found\".to_owned());\n     assert_eq!(f1(\"d\"), \"not found\".to_owned());\n     assert_eq!(f2(\"b\".to_owned()), \"found b\".to_owned());\n-    assert_eq!(f2(&\"c\"), \"not found (c)\".to_owned());\n+    assert_eq!(f2(\"c\"), \"not found (c)\".to_owned());\n     assert_eq!(f2(\"d\"), \"not found (d)\".to_owned());\n     assert_eq!(g1(\"b\".to_owned(), \"c\".to_owned()), \"found b,c\".to_owned());\n-    assert_eq!(g1(&\"c\", &\"d\"), \"not found\".to_owned());\n+    assert_eq!(g1(\"c\", \"d\"), \"not found\".to_owned());\n     assert_eq!(g1(\"d\", \"e\"), \"not found\".to_owned());\n     assert_eq!(g2(\"b\".to_owned(), \"c\".to_owned()), \"found b,c\".to_owned());\n-    assert_eq!(g2(&\"c\", &\"d\"), \"not found (c, d)\".to_owned());\n+    assert_eq!(g2(\"c\", \"d\"), \"not found (c, d)\".to_owned());\n     assert_eq!(g2(\"d\", \"e\"), \"not found (d, e)\".to_owned());\n }"}, {"sha": "060274f1bc7895c8fa7ee9b3e1252fe180d34fb8", "filename": "src/test/run-pass/small-enums-with-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f836d5a53e20fde65aa3469fa1826228e7c273a/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs?ref=9f836d5a53e20fde65aa3469fa1826228e7c273a", "patch": "@@ -22,8 +22,8 @@ macro_rules! check {\n             static S: $t = $e;\n             let v: $t = $e;\n             assert_eq!(S, v);\n-            assert_eq!(format!(\"{:?}\", v), ~$s);\n-            assert_eq!(format!(\"{:?}\", S), ~$s);\n+            assert_eq!(format!(\"{:?}\", v).as_slice(), $s);\n+            assert_eq!(format!(\"{:?}\", S).as_slice(), $s);\n         });*\n     }}\n }"}]}