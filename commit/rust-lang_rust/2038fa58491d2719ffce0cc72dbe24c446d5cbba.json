{"sha": "2038fa58491d2719ffce0cc72dbe24c446d5cbba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMzhmYTU4NDkxZDI3MTlmZmNlMGNjNzJkYmUyNGM0NDZkNWNiYmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-23T19:31:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-23T19:31:03Z"}, "message": "Rollup merge of #87171 - Alexendoo:bufwriter-option, r=Mark-Simulacrum\n\nRemove Option from BufWriter\n\nFixes #72925", "tree": {"sha": "1de0072cd38bc60b7f7c91c66fe114e70bd38f6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de0072cd38bc60b7f7c91c66fe114e70bd38f6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2038fa58491d2719ffce0cc72dbe24c446d5cbba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+xj3CRBK7hj4Ov3rIwAAt6UIABhme2ziMzut53PmxYgrdwEK\nnpkssMba/i5ciL9T77xy2VgzTWQLcVettRaVdB+3tOez0Q7rokn2a7E0OIMIneSL\nbthyKYynZbGl058GQEC1qQS4D2d9RpokOE9RP4yN90fjCAyRemeWMlPFHvac6/Gt\nUfCBxpdvObMAcOr6iZMj8OmdKu05DQaQiz55jQBZO3GiphJ5IS8fD47QW8KmdeA6\nqD2Iy+gmSrynLu+zXWBoGzUgfVcmp7u0ZlL0UWmugGeRUox1q/vlhN5IVQ7VCbMs\nD3TKIGJOr9LSjNXw40ZnNSam95z/xLnp7aPTYXIXY+1/sgme74Giy4TRUReVBcA=\n=w9eK\n-----END PGP SIGNATURE-----\n", "payload": "tree 1de0072cd38bc60b7f7c91c66fe114e70bd38f6f\nparent 249a11f93698802735f89efe5d8adf094b4b01ed\nparent 8837bf1acd2d0682c1030524fb328a073974112c\nauthor Yuki Okushi <jtitor@2k36.org> 1627068663 +0900\ncommitter GitHub <noreply@github.com> 1627068663 +0900\n\nRollup merge of #87171 - Alexendoo:bufwriter-option, r=Mark-Simulacrum\n\nRemove Option from BufWriter\n\nFixes #72925\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2038fa58491d2719ffce0cc72dbe24c446d5cbba", "html_url": "https://github.com/rust-lang/rust/commit/2038fa58491d2719ffce0cc72dbe24c446d5cbba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2038fa58491d2719ffce0cc72dbe24c446d5cbba/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "249a11f93698802735f89efe5d8adf094b4b01ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/249a11f93698802735f89efe5d8adf094b4b01ed", "html_url": "https://github.com/rust-lang/rust/commit/249a11f93698802735f89efe5d8adf094b4b01ed"}, {"sha": "8837bf1acd2d0682c1030524fb328a073974112c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8837bf1acd2d0682c1030524fb328a073974112c", "html_url": "https://github.com/rust-lang/rust/commit/8837bf1acd2d0682c1030524fb328a073974112c"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "c98244132befd62e3be3eb547b7feb841a3c1b18", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2038fa58491d2719ffce0cc72dbe24c446d5cbba/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2038fa58491d2719ffce0cc72dbe24c446d5cbba/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=2038fa58491d2719ffce0cc72dbe24c446d5cbba", "patch": "@@ -68,7 +68,7 @@ use crate::ptr;\n /// [`flush`]: BufWriter::flush\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BufWriter<W: Write> {\n-    inner: Option<W>,\n+    inner: W,\n     // The buffer. Avoid using this like a normal `Vec` in common code paths.\n     // That is, don't use `buf.push`, `buf.extend_from_slice`, or any other\n     // methods that require bounds checking or the like. This makes an enormous\n@@ -112,7 +112,7 @@ impl<W: Write> BufWriter<W> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize, inner: W) -> BufWriter<W> {\n-        BufWriter { inner: Some(inner), buf: Vec::with_capacity(capacity), panicked: false }\n+        BufWriter { inner, buf: Vec::with_capacity(capacity), panicked: false }\n     }\n \n     /// Send data in our local buffer into the inner writer, looping as\n@@ -161,10 +161,9 @@ impl<W: Write> BufWriter<W> {\n         }\n \n         let mut guard = BufGuard::new(&mut self.buf);\n-        let inner = self.inner.as_mut().unwrap();\n         while !guard.done() {\n             self.panicked = true;\n-            let r = inner.write(guard.remaining());\n+            let r = self.inner.write(guard.remaining());\n             self.panicked = false;\n \n             match r {\n@@ -212,7 +211,7 @@ impl<W: Write> BufWriter<W> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_ref(&self) -> &W {\n-        self.inner.as_ref().unwrap()\n+        &self.inner\n     }\n \n     /// Gets a mutable reference to the underlying writer.\n@@ -232,7 +231,7 @@ impl<W: Write> BufWriter<W> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut W {\n-        self.inner.as_mut().unwrap()\n+        &mut self.inner\n     }\n \n     /// Returns a reference to the internally buffered data.\n@@ -308,7 +307,7 @@ impl<W: Write> BufWriter<W> {\n     pub fn into_inner(mut self) -> Result<W, IntoInnerError<BufWriter<W>>> {\n         match self.flush_buf() {\n             Err(e) => Err(IntoInnerError::new(self, e)),\n-            Ok(()) => Ok(self.inner.take().unwrap()),\n+            Ok(()) => Ok(self.into_raw_parts().0),\n         }\n     }\n \n@@ -339,7 +338,12 @@ impl<W: Write> BufWriter<W> {\n     pub fn into_raw_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>) {\n         let buf = mem::take(&mut self.buf);\n         let buf = if !self.panicked { Ok(buf) } else { Err(WriterPanicked { buf }) };\n-        (self.inner.take().unwrap(), buf)\n+\n+        // SAFETY: forget(self) prevents double dropping inner\n+        let inner = unsafe { ptr::read(&mut self.inner) };\n+        mem::forget(self);\n+\n+        (inner, buf)\n     }\n \n     // Ensure this function does not get inlined into `write`, so that it\n@@ -643,7 +647,7 @@ where\n {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.debug_struct(\"BufWriter\")\n-            .field(\"writer\", &self.inner.as_ref().unwrap())\n+            .field(\"writer\", &self.inner)\n             .field(\"buffer\", &format_args!(\"{}/{}\", self.buf.len(), self.buf.capacity()))\n             .finish()\n     }\n@@ -663,7 +667,7 @@ impl<W: Write + Seek> Seek for BufWriter<W> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write> Drop for BufWriter<W> {\n     fn drop(&mut self) {\n-        if self.inner.is_some() && !self.panicked {\n+        if !self.panicked {\n             // dtors should not panic, so we ignore a failed flush\n             let _r = self.flush_buf();\n         }"}]}