{"sha": "eab97b5558d001136179aeb1d4e478670a43d54a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYjk3YjU1NThkMDAxMTM2MTc5YWViMWQ0ZTQ3ODY3MGE0M2Q1NGE=", "commit": {"author": {"name": "OGINO Masanori", "email": "masanori.ogino@gmail.com", "date": "2013-08-05T08:43:40Z"}, "committer": {"name": "OGINO Masanori", "email": "masanori.ogino@gmail.com", "date": "2013-08-05T08:43:40Z"}, "message": "Add extra::arena::Arena::new{, _with_size}.\n\nSigned-off-by: OGINO Masanori <masanori.ogino@gmail.com>", "tree": {"sha": "91fd2502a475c65b2f0dc2a7ceb339347d7d321f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91fd2502a475c65b2f0dc2a7ceb339347d7d321f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eab97b5558d001136179aeb1d4e478670a43d54a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eab97b5558d001136179aeb1d4e478670a43d54a", "html_url": "https://github.com/rust-lang/rust/commit/eab97b5558d001136179aeb1d4e478670a43d54a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eab97b5558d001136179aeb1d4e478670a43d54a/comments", "author": {"login": "omasanori", "id": 167209, "node_id": "MDQ6VXNlcjE2NzIwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/167209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omasanori", "html_url": "https://github.com/omasanori", "followers_url": "https://api.github.com/users/omasanori/followers", "following_url": "https://api.github.com/users/omasanori/following{/other_user}", "gists_url": "https://api.github.com/users/omasanori/gists{/gist_id}", "starred_url": "https://api.github.com/users/omasanori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omasanori/subscriptions", "organizations_url": "https://api.github.com/users/omasanori/orgs", "repos_url": "https://api.github.com/users/omasanori/repos", "events_url": "https://api.github.com/users/omasanori/events{/privacy}", "received_events_url": "https://api.github.com/users/omasanori/received_events", "type": "User", "site_admin": false}, "committer": {"login": "omasanori", "id": 167209, "node_id": "MDQ6VXNlcjE2NzIwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/167209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omasanori", "html_url": "https://github.com/omasanori", "followers_url": "https://api.github.com/users/omasanori/followers", "following_url": "https://api.github.com/users/omasanori/following{/other_user}", "gists_url": "https://api.github.com/users/omasanori/gists{/gist_id}", "starred_url": "https://api.github.com/users/omasanori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omasanori/subscriptions", "organizations_url": "https://api.github.com/users/omasanori/orgs", "repos_url": "https://api.github.com/users/omasanori/repos", "events_url": "https://api.github.com/users/omasanori/events{/privacy}", "received_events_url": "https://api.github.com/users/omasanori/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fdd7204215662232491ed0737bc43a569204607", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdd7204215662232491ed0737bc43a569204607", "html_url": "https://github.com/rust-lang/rust/commit/4fdd7204215662232491ed0737bc43a569204607"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "ae4356eb4baccb163c586078b047c7bf8c26ccaf", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eab97b5558d001136179aeb1d4e478670a43d54a/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab97b5558d001136179aeb1d4e478670a43d54a/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=eab97b5558d001136179aeb1d4e478670a43d54a", "patch": "@@ -67,17 +67,16 @@ pub struct Arena {\n     priv chunks: @mut MutList<Chunk>,\n }\n \n-#[unsafe_destructor]\n-impl Drop for Arena {\n-    fn drop(&self) {\n-        unsafe {\n-            destroy_chunk(&self.head);\n-            do self.chunks.each |chunk| {\n-                if !chunk.is_pod {\n-                    destroy_chunk(chunk);\n-                }\n-                true\n-            };\n+impl Arena {\n+    pub fn new() -> Arena {\n+        Arena::new_with_size(32u)\n+    }\n+\n+    pub fn new_with_size(initial_size: uint) -> Arena {\n+        Arena {\n+            head: chunk(initial_size, false),\n+            pod_head: chunk(initial_size, true),\n+            chunks: @mut MutNil,\n         }\n     }\n }\n@@ -92,18 +91,21 @@ fn chunk(size: uint, is_pod: bool) -> Chunk {\n     }\n }\n \n-pub fn arena_with_size(initial_size: uint) -> Arena {\n-    Arena {\n-        head: chunk(initial_size, false),\n-        pod_head: chunk(initial_size, true),\n-        chunks: @mut MutNil,\n+#[unsafe_destructor]\n+impl Drop for Arena {\n+    fn drop(&self) {\n+        unsafe {\n+            destroy_chunk(&self.head);\n+            do self.chunks.each |chunk| {\n+                if !chunk.is_pod {\n+                    destroy_chunk(chunk);\n+                }\n+                true\n+            };\n+        }\n     }\n }\n \n-pub fn Arena() -> Arena {\n-    arena_with_size(32u)\n-}\n-\n #[inline]\n fn round_up_to(base: uint, align: uint) -> uint {\n     (base + (align - 1)) & !(align - 1)\n@@ -276,7 +278,7 @@ impl Arena {\n \n #[test]\n fn test_arena_destructors() {\n-    let arena = Arena();\n+    let arena = Arena::new();\n     for i in range(0u, 10) {\n         // Arena allocate something with drop glue to make sure it\n         // doesn't leak.\n@@ -291,7 +293,7 @@ fn test_arena_destructors() {\n #[should_fail]\n #[ignore(cfg(windows))]\n fn test_arena_destructors_fail() {\n-    let arena = Arena();\n+    let arena = Arena::new();\n     // Put some stuff in the arena.\n     for i in range(0u, 10) {\n         // Arena allocate something with drop glue to make sure it"}, {"sha": "57bf33fb2fdacdc26e8c7920dc4034a9b6294f30", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eab97b5558d001136179aeb1d4e478670a43d54a/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab97b5558d001136179aeb1d4e478670a43d54a/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=eab97b5558d001136179aeb1d4e478670a43d54a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n extern mod extra;\n-use extra::arena;\n+use extra::arena::Arena;\n \n enum Tree<'self> {\n     Nil,\n@@ -25,7 +25,7 @@ fn item_check(t: &Tree) -> int {\n     }\n }\n \n-fn bottom_up_tree<'r>(arena: &'r arena::Arena, item: int, depth: int)\n+fn bottom_up_tree<'r>(arena: &'r Arena, item: int, depth: int)\n                    -> &'r Tree<'r> {\n     if depth > 0 {\n         return arena.alloc(\n@@ -57,15 +57,15 @@ fn main() {\n         max_depth = n;\n     }\n \n-    let stretch_arena = arena::Arena();\n+    let stretch_arena = Arena::new();\n     let stretch_depth = max_depth + 1;\n     let stretch_tree = bottom_up_tree(&stretch_arena, 0, stretch_depth);\n \n     printfln!(\"stretch tree of depth %d\\t check: %d\",\n               stretch_depth,\n               item_check(stretch_tree));\n \n-    let long_lived_arena = arena::Arena();\n+    let long_lived_arena = Arena::new();\n     let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n     let mut depth = min_depth;\n     while depth <= max_depth {"}, {"sha": "f2063b583e4f9b0cf6b7f7a0874dc1a8276a5e27", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eab97b5558d001136179aeb1d4e478670a43d54a/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab97b5558d001136179aeb1d4e478670a43d54a/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=eab97b5558d001136179aeb1d4e478670a43d54a", "patch": "@@ -11,10 +11,10 @@\n // except according to those terms.\n \n extern mod extra;\n-use extra::arena;\n+use extra::arena::Arena;\n \n pub fn main() {\n-    let mut arena = arena::Arena();\n+    let mut arena = Arena::new();\n     let p = &mut arena;\n     let x = p.alloc(|| 4u);\n     printf!(\"%u\", *x);"}]}