{"sha": "03967560982aa862765763cce8a738c3130d1669", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOTY3NTYwOTgyYWE4NjI3NjU3NjNjY2U4YTczOGMzMTMwZDE2Njk=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2017-02-19T15:36:17Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2017-02-19T15:36:17Z"}, "message": "Add test that adding allow attribute on impl block containing len silences len_without_is_empty. Add extra impl block to PubOne to check that this doesn't get flagged@", "tree": {"sha": "4b302a0c0299e3290842da12a9bc36b324b69f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b302a0c0299e3290842da12a9bc36b324b69f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03967560982aa862765763cce8a738c3130d1669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03967560982aa862765763cce8a738c3130d1669", "html_url": "https://github.com/rust-lang/rust/commit/03967560982aa862765763cce8a738c3130d1669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03967560982aa862765763cce8a738c3130d1669/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dd45b73172bf4ef8f60e8ed32588d688bc27fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd45b73172bf4ef8f60e8ed32588d688bc27fb1", "html_url": "https://github.com/rust-lang/rust/commit/2dd45b73172bf4ef8f60e8ed32588d688bc27fb1"}], "stats": {"total": 96, "additions": 60, "deletions": 36}, "files": [{"sha": "5b62949d77e42b3735bee5cb430b06751d8a1e5b", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/03967560982aa862765763cce8a738c3130d1669/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03967560982aa862765763cce8a738c3130d1669/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=03967560982aa862765763cce8a738c3130d1669", "patch": "@@ -12,6 +12,30 @@ impl PubOne {\n     }\n }\n \n+impl PubOne { // A second impl for this struct - the error span shouldn't mention this\n+    pub fn irrelevant(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n+// Identical to PubOne, but with an allow attribute on the impl complaining len\n+pub struct PubAllowed;\n+\n+#[allow(len_without_is_empty)]\n+impl PubAllowed {\n+    pub fn len(self: &Self) -> isize {\n+        1\n+    }\n+}\n+\n+// No allow attribute on this impl block, but that doesn't matter - we only require on the\n+// impl containing len.\n+impl PubAllowed {\n+    pub fn irrelevant(self: &Self) -> bool {\n+        false\n+    }\n+}\n+\n struct NotPubOne;\n \n impl NotPubOne {"}, {"sha": "9ebc5209a22eb23c5260117bb378f860e9fcab5b", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/03967560982aa862765763cce8a738c3130d1669/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03967560982aa862765763cce8a738c3130d1669/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=03967560982aa862765763cce8a738c3130d1669", "patch": "@@ -16,48 +16,48 @@ note: lint level defined here\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: trait `PubTraitsToo` has a `len` method but no `is_empty` method\n-  --> $DIR/len_zero.rs:31:1\n+  --> $DIR/len_zero.rs:55:1\n    |\n-31 |   pub trait PubTraitsToo {\n+55 |   pub trait PubTraitsToo {\n    |  _^ starting here...\n-32 | |     fn len(self: &Self) -> isize;\n-33 | | }\n+56 | |     fn len(self: &Self) -> isize;\n+57 | | }\n    | |_^ ...ending here\n \n error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n-  --> $DIR/len_zero.rs:65:1\n+  --> $DIR/len_zero.rs:89:1\n    |\n-65 |   impl HasIsEmpty {\n+89 |   impl HasIsEmpty {\n    |  _^ starting here...\n-66 | |     pub fn len(self: &Self) -> isize {\n-67 | |         1\n-68 | |     }\n-69 | |\n-70 | |     fn is_empty(self: &Self) -> bool {\n-71 | |         false\n-72 | |     }\n-73 | | }\n+90 | |     pub fn len(self: &Self) -> isize {\n+91 | |         1\n+92 | |     }\n+93 | |\n+94 | |     fn is_empty(self: &Self) -> bool {\n+95 | |         false\n+96 | |     }\n+97 | | }\n    | |_^ ...ending here\n \n error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty` method\n-   --> $DIR/len_zero.rs:94:1\n+   --> $DIR/len_zero.rs:118:1\n     |\n-94  |   impl HasWrongIsEmpty {\n+118 |   impl HasWrongIsEmpty {\n     |  _^ starting here...\n-95  | |     pub fn len(self: &Self) -> isize {\n-96  | |         1\n-97  | |     }\n-98  | |\n-99  | |     pub fn is_empty(self: &Self, x : u32) -> bool {\n-100 | |         false\n-101 | |     }\n-102 | | }\n+119 | |     pub fn len(self: &Self) -> isize {\n+120 | |         1\n+121 | |     }\n+122 | |\n+123 | |     pub fn is_empty(self: &Self, x : u32) -> bool {\n+124 | |         false\n+125 | |     }\n+126 | | }\n     | |_^ ...ending here\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:106:8\n+   --> $DIR/len_zero.rs:130:8\n     |\n-106 |     if x.len() == 0 {\n+130 |     if x.len() == 0 {\n     |        ^^^^^^^^^^^^\n     |\n note: lint level defined here\n@@ -69,45 +69,45 @@ help: consider using `is_empty`\n     |     if x.is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:113:8\n+   --> $DIR/len_zero.rs:137:8\n     |\n-113 |     if \"\".len() == 0 {\n+137 |     if \"\".len() == 0 {\n     |        ^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`\n     |     if \"\".is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:130:8\n+   --> $DIR/len_zero.rs:154:8\n     |\n-130 |     if has_is_empty.len() == 0 {\n+154 |     if has_is_empty.len() == 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`\n     |     if has_is_empty.is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:136:8\n+   --> $DIR/len_zero.rs:160:8\n     |\n-136 |     if has_is_empty.len() != 0 {\n+160 |     if has_is_empty.len() != 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`\n     |     if !has_is_empty.is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:142:8\n+   --> $DIR/len_zero.rs:166:8\n     |\n-142 |     if has_is_empty.len() > 0 {\n+166 |     if has_is_empty.len() > 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`\n     |     if !has_is_empty.is_empty() {\n \n error: length comparison to zero\n-   --> $DIR/len_zero.rs:151:8\n+   --> $DIR/len_zero.rs:175:8\n     |\n-151 |     if with_is_empty.len() == 0 {\n+175 |     if with_is_empty.len() == 0 {\n     |        ^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n help: consider using `is_empty`"}]}