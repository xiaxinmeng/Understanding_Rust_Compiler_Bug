{"sha": "ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "node_id": "C_kwDOAAsO6NoAKGVjN2ViNWI1YWQ4YjQzYmQ5ZDVkNzQyZDcyZTg0OWRlYjE0NjdlNjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-22T00:01:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-22T00:01:13Z"}, "message": "Rollup merge of #105960 - oli-obk:effect_cleanup, r=fee1-dead\n\nVarious cleanups\n\nThis PR pulls changes out of https://github.com/rust-lang/rust/pull/101900 that can land on master immediately\n\nr? ``@fee1-dead``", "tree": {"sha": "9d176e0f30898e21ac015f3fe09953dec2389e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d176e0f30898e21ac015f3fe09953dec2389e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjo55JCRBK7hj4Ov3rIwAAv6sIAGpsU93iy/d6+HEHkhBZWLkM\ng1G+quUhf7QcZ9Lb2SjNw3q3GDkKpNRB/uLvl+mcTyNvXURzAAOsENUC5QKdsle2\nx3tqWd+S63qvey3ojlIfJLVWPXrx+cZ/IDgQytyJTzpbMB+A1m/5VNZTsVmJrMGu\npjf8VkxIM7xC2OOJLtkgAoKegi/RXS5ygqeWJlavfbppHsmbMipQEFTVmvdgfz36\nGB1YHxxRHNLnwvO8i6h9bYag0ZGyZKUQeCFMhiXKFT9qxbboAj8SpQ+pR8nmKPnJ\nAKZNpLpAaZMF0qYUE7GfKsbZCe8Ikn4B5meuUXUN86o4kzAHO2ZWFu7QCS8PIuY=\n=9l6E\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d176e0f30898e21ac015f3fe09953dec2389e8c\nparent 924a1d4a7adf34a039954358db66061de7291207\nparent ed61be60da3b5dd28abd4ec4956df9eb896183c9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671667273 +0100\ncommitter GitHub <noreply@github.com> 1671667273 +0100\n\nRollup merge of #105960 - oli-obk:effect_cleanup, r=fee1-dead\n\nVarious cleanups\n\nThis PR pulls changes out of https://github.com/rust-lang/rust/pull/101900 that can land on master immediately\n\nr? ``@fee1-dead``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "html_url": "https://github.com/rust-lang/rust/commit/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "924a1d4a7adf34a039954358db66061de7291207", "url": "https://api.github.com/repos/rust-lang/rust/commits/924a1d4a7adf34a039954358db66061de7291207", "html_url": "https://github.com/rust-lang/rust/commit/924a1d4a7adf34a039954358db66061de7291207"}, {"sha": "ed61be60da3b5dd28abd4ec4956df9eb896183c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed61be60da3b5dd28abd4ec4956df9eb896183c9", "html_url": "https://github.com/rust-lang/rust/commit/ed61be60da3b5dd28abd4ec4956df9eb896183c9"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "f5cb89fa62463db7acb9d4ea47f66f270c97af48", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "patch": "@@ -170,6 +170,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn local_def_id(self, hir_id: HirId) -> LocalDefId {\n         self.opt_local_def_id(hir_id).unwrap_or_else(|| {\n             bug!(\n@@ -310,6 +311,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    #[track_caller]\n     pub fn get_parent_node(self, hir_id: HirId) -> HirId {\n         self.find_parent_node(hir_id)\n             .unwrap_or_else(|| bug!(\"No parent for node {:?}\", self.node_to_string(hir_id)))\n@@ -334,12 +336,14 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n+    #[track_caller]\n     pub fn get(self, id: HirId) -> Node<'hir> {\n         self.find(id).unwrap_or_else(|| bug!(\"couldn't find hir id {} in the HIR map\", id))\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n     #[inline]\n+    #[track_caller]\n     pub fn get_by_def_id(self, id: LocalDefId) -> Node<'hir> {\n         self.find_by_def_id(id).unwrap_or_else(|| bug!(\"couldn't find {:?} in the HIR map\", id))\n     }\n@@ -377,6 +381,7 @@ impl<'hir> Map<'hir> {\n         self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]\n     }\n \n+    #[track_caller]\n     pub fn fn_decl_by_hir_id(self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n         if let Some(node) = self.find(hir_id) {\n             node.fn_decl()\n@@ -385,6 +390,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    #[track_caller]\n     pub fn fn_sig_by_hir_id(self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {\n         if let Some(node) = self.find(hir_id) {\n             node.fn_sig()\n@@ -393,6 +399,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    #[track_caller]\n     pub fn enclosing_body_owner(self, hir_id: HirId) -> LocalDefId {\n         for (_, node) in self.parent_iter(hir_id) {\n             if let Some(body) = associated_body(node) {\n@@ -408,7 +415,7 @@ impl<'hir> Map<'hir> {\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n     pub fn body_owner(self, BodyId { hir_id }: BodyId) -> HirId {\n         let parent = self.get_parent_node(hir_id);\n-        assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));\n+        assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)), \"{hir_id:?}\");\n         parent\n     }\n \n@@ -419,10 +426,11 @@ impl<'hir> Map<'hir> {\n     /// Given a `LocalDefId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n     pub fn maybe_body_owned_by(self, id: LocalDefId) -> Option<BodyId> {\n-        self.get_if_local(id.to_def_id()).map(associated_body).flatten()\n+        self.find_by_def_id(id).and_then(associated_body)\n     }\n \n     /// Given a body owner's id, returns the `BodyId` associated with it.\n+    #[track_caller]\n     pub fn body_owned_by(self, id: LocalDefId) -> BodyId {\n         self.maybe_body_owned_by(id).unwrap_or_else(|| {\n             let hir_id = self.local_def_id_to_hir_id(id);"}, {"sha": "705adecd3b90f517b9d9c5ed814fdcbaecf4c111", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "patch": "@@ -70,14 +70,6 @@ impl GenericParamDef {\n         }\n     }\n \n-    pub fn has_default(&self) -> bool {\n-        match self.kind {\n-            GenericParamDefKind::Type { has_default, .. }\n-            | GenericParamDefKind::Const { has_default } => has_default,\n-            GenericParamDefKind::Lifetime => false,\n-        }\n-    }\n-\n     pub fn is_anonymous_lifetime(&self) -> bool {\n         match self.kind {\n             GenericParamDefKind::Lifetime => {"}, {"sha": "cbab4a16e94b6cdd8515943bf8745e264d2a8cbf", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "patch": "@@ -348,7 +348,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n         substs.reserve(defs.params.len());\n         for param in &defs.params {\n             let kind = mk_kind(param, substs);\n-            assert_eq!(param.index as usize, substs.len());\n+            assert_eq!(param.index as usize, substs.len(), \"{substs:#?}, {defs:#?}\");\n             substs.push(kind);\n         }\n     }"}, {"sha": "d5553f84f7517d8531eb348324bef6c259f44b2c", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "patch": "@@ -88,9 +88,11 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n         self.has_vars_bound_at_or_above(ty::INNERMOST)\n     }\n \n-    #[instrument(level = \"trace\", ret)]\n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)\n+        let res =\n+            self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags);\n+        trace!(?self, ?flags, ?res, \"has_type_flags\");\n+        res\n     }\n     fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)\n@@ -560,10 +562,8 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n \n     #[inline]\n-    #[instrument(skip(self), level = \"trace\", ret)]\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = t.flags();\n-        trace!(t.flags=?t.flags());\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n@@ -572,10 +572,8 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     #[inline]\n-    #[instrument(skip(self), level = \"trace\", ret)]\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = r.type_flags();\n-        trace!(r.flags=?flags);\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {\n@@ -584,7 +582,6 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     #[inline]\n-    #[instrument(level = \"trace\", ret)]\n     fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_const(c);\n         trace!(r.flags=?flags);\n@@ -596,14 +593,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n \n     #[inline]\n-    #[instrument(level = \"trace\", ret)]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\n-            \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n-            predicate,\n-            predicate.flags(),\n-            self.flags\n-        );\n         if predicate.flags().intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n         } else {"}, {"sha": "920c31233c18799a254a9f82282f8dbc30a56371", "filename": "library/core/src/const_closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "patch": "@@ -51,7 +51,7 @@ macro_rules! impl_fn_mut_tuple {\n         impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n             FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n         where\n-            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n         {\n             type Output = ClosureReturnValue;\n \n@@ -64,7 +64,7 @@ macro_rules! impl_fn_mut_tuple {\n         impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n             FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n         where\n-            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue + ~const Destruct,\n         {\n             extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n                 #[allow(non_snake_case)]"}, {"sha": "71a0d1825efec359cdf4b11fa9717ca2d082118f", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "patch": "@@ -199,7 +199,7 @@ pub trait Hash {\n     /// println!(\"Hash is {:x}!\", hasher.finish());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn hash<H: Hasher>(&self, state: &mut H);\n+    fn hash<H: ~const Hasher>(&self, state: &mut H);\n \n     /// Feeds a slice of this type into the given [`Hasher`].\n     ///\n@@ -980,7 +980,7 @@ mod impls {\n     #[rustc_const_unstable(feature = \"const_hash\", issue = \"104061\")]\n     impl<T: ?Sized + ~const Hash> const Hash for &mut T {\n         #[inline]\n-        fn hash<H: Hasher>(&self, state: &mut H) {\n+        fn hash<H: ~const Hasher>(&self, state: &mut H) {\n             (**self).hash(state);\n         }\n     }"}, {"sha": "228efb0bc0a5c41b95507952d0fdafaf7678a578", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=ec7eb5b5ad8b43bd9d5d742d72e849deb1467e63", "patch": "@@ -165,7 +165,7 @@ see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#ind\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n #[const_trait]\n-pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n+pub trait IndexMut<Idx: ?Sized>: ~const Index<Idx> {\n     /// Performs the mutable indexing (`container[index]`) operation.\n     ///\n     /// # Panics"}]}