{"sha": "c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZjJkNDlmZjhiZTZiNDJiYmE5NGU3ZGM5NmUwZmZmOGI1Y2E1ODA=", "commit": {"author": {"name": "Chenguang Wang", "email": "w3cing@gmail.com", "date": "2020-12-10T02:56:27Z"}, "committer": {"name": "Chenguang Wang", "email": "w3cing@gmail.com", "date": "2020-12-10T02:56:27Z"}, "message": "fix issue #78496", "tree": {"sha": "d6ba251da6bcd7cf0091379d008bbb002edb74f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6ba251da6bcd7cf0091379d008bbb002edb74f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580", "html_url": "https://github.com/rust-lang/rust/commit/c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580/comments", "author": {"login": "wecing", "id": 328191, "node_id": "MDQ6VXNlcjMyODE5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/328191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wecing", "html_url": "https://github.com/wecing", "followers_url": "https://api.github.com/users/wecing/followers", "following_url": "https://api.github.com/users/wecing/following{/other_user}", "gists_url": "https://api.github.com/users/wecing/gists{/gist_id}", "starred_url": "https://api.github.com/users/wecing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wecing/subscriptions", "organizations_url": "https://api.github.com/users/wecing/orgs", "repos_url": "https://api.github.com/users/wecing/repos", "events_url": "https://api.github.com/users/wecing/events{/privacy}", "received_events_url": "https://api.github.com/users/wecing/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wecing", "id": 328191, "node_id": "MDQ6VXNlcjMyODE5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/328191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wecing", "html_url": "https://github.com/wecing", "followers_url": "https://api.github.com/users/wecing/followers", "following_url": "https://api.github.com/users/wecing/following{/other_user}", "gists_url": "https://api.github.com/users/wecing/gists{/gist_id}", "starred_url": "https://api.github.com/users/wecing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wecing/subscriptions", "organizations_url": "https://api.github.com/users/wecing/orgs", "repos_url": "https://api.github.com/users/wecing/repos", "events_url": "https://api.github.com/users/wecing/events{/privacy}", "received_events_url": "https://api.github.com/users/wecing/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8080f54677e57ca56f20f514f14affc64827d66b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8080f54677e57ca56f20f514f14affc64827d66b", "html_url": "https://github.com/rust-lang/rust/commit/8080f54677e57ca56f20f514f14affc64827d66b"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "5829c522935300d42377a0e4dda52a98ad0fdd2c", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580", "patch": "@@ -283,6 +283,34 @@ impl<'a, 'tcx> Helper<'a, 'tcx> {\n                 return None;\n             }\n \n+            // when one place is the projection of the other, it's not safe to calculate their discriminant values sequentially.\n+            // for example, this should not be optimized:\n+            //\n+            // ```rust\n+            // enum E<'a> { Empty, Some(&'a E<'a>), }\n+            // let Some(Some(_)) = e;\n+            // ```\n+            //\n+            // ```mir\n+            // bb0: {\n+            //   _2 = discriminant(*_1)\n+            //   switchInt(move _2) -> [...]\n+            // }\n+            // bb1: {\n+            //   _3 = discriminant(*(((*_1) as Some).0: &E))\n+            //   switchInt(move _3) -> [...]\n+            // }\n+            // ```\n+            let discr_place = discr_info.place_of_adt_discr_read;\n+            let this_discr_place = this_bb_discr_info.place_of_adt_discr_read;\n+            if discr_place.local == this_discr_place.local\n+                && (discr_place.projection.starts_with(this_discr_place.projection)\n+                    || this_discr_place.projection.starts_with(discr_place.projection))\n+            {\n+                trace!(\"NO: one target is the projection of another\");\n+                return None;\n+            }\n+\n             // if we reach this point, the optimization applies, and we should be able to optimize this case\n             // store the info that is needed to apply the optimization\n "}, {"sha": "cc45945a2b8d5ca301814e37dfc674d9a968af75", "filename": "src/test/ui/mir/issue-78496.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580/src%2Ftest%2Fui%2Fmir%2Fissue-78496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580/src%2Ftest%2Fui%2Fmir%2Fissue-78496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-78496.rs?ref=c6f2d49ff8be6b42bba94e7dc96e0fff8b5ca580", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+// compile-flags: -Z mir-opt-level=2 -C opt-level=0\n+\n+// example from #68867\n+pub enum E<'a> {\n+    Empty,\n+    Some(&'a E<'a>),\n+}\n+\n+fn f(e: &E) -> u32 {\n+   if let E::Some(E::Some(_)) = e { 1 } else { 2 }\n+}\n+\n+fn main() {\n+   assert_eq!(f(&E::Empty), 2);\n+}"}]}