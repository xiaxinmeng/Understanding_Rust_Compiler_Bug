{"sha": "75a02a919c5109c55c652dd6671553df6452be04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YTAyYTkxOWM1MTA5YzU1YzY1MmRkNjY3MTU1M2RmNjQ1MmJlMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-14T10:08:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-14T10:08:48Z"}, "message": "Auto merge of #46633 - estebank:arg-mismatch, r=arielb1\n\nPoint at whole method call instead of args\n\nTo avoid confusion in cases where the code is\n\n```rust\nfn foo() {}\n/ foo(\n|     bar()\n|     ^^^ current diagnostics point here for arg count mismatch\n| );\n|_^ new diagnostic span points here\n```\n\nas this leads to confusion making people think that the diagnostic is\ntalking about `bar`'s arg count, not `foo`'s.\n\nPoint at `fn`s definition on arg mismatch, just like we do for closures.\n\nRe #42855, Fix #45633.", "tree": {"sha": "96c7b30ae56f3fbc4d441145a9a5deb1fd15f116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96c7b30ae56f3fbc4d441145a9a5deb1fd15f116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75a02a919c5109c55c652dd6671553df6452be04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75a02a919c5109c55c652dd6671553df6452be04", "html_url": "https://github.com/rust-lang/rust/commit/75a02a919c5109c55c652dd6671553df6452be04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75a02a919c5109c55c652dd6671553df6452be04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8954b16beb844fcac0cefe229e1c714a17de16e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8954b16beb844fcac0cefe229e1c714a17de16e5", "html_url": "https://github.com/rust-lang/rust/commit/8954b16beb844fcac0cefe229e1c714a17de16e5"}, {"sha": "92da91313ce15ad3830b3dacd31bdeb8a95e5346", "url": "https://api.github.com/repos/rust-lang/rust/commits/92da91313ce15ad3830b3dacd31bdeb8a95e5346", "html_url": "https://github.com/rust-lang/rust/commit/92da91313ce15ad3830b3dacd31bdeb8a95e5346"}], "stats": {"total": 178, "additions": 94, "deletions": 84}, "files": [{"sha": "635921134be779a7858a86ba55a42c12e9364252", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -714,7 +714,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 let found_did = found_trait_ty.ty_to_def_id();\n                 let found_span = found_did.and_then(|did| {\n                     self.tcx.hir.span_if_local(did)\n-                });\n+                }).map(|sp| self.tcx.sess.codemap().def_span(sp)); // the sp could be an fn def\n \n                 let found_ty_count =\n                     match found_trait_ref.skip_binder().substs.type_at(1).sty {\n@@ -751,7 +751,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     //\n                     // ```\n                     // [1i32, 2, 3].sort_by(|(a, b)| ..)\n-                    // //                   ^^^^^^^^\n+                    // //           ^^^^^^^ --------\n                     // // expected_trait_ref:  std::ops::FnMut<(&i32, &i32)>\n                     // //    found_trait_ref:  std::ops::FnMut<(&i32,)>\n                     // ```"}, {"sha": "e085d1311c3ff6f46e9861c8e93ccaa08f72f944", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -1559,6 +1559,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyAdt(def, _) => Some(def.did),\n             TyForeign(did) => Some(did),\n             TyClosure(id, _) => Some(id),\n+            TyFnDef(id, _) => Some(id),\n             _ => None,\n         }\n     }"}, {"sha": "baa389319ca723483c416c35575b3eb7f0dc2900", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -2432,21 +2432,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let mut expected_arg_tys = expected_arg_tys;\n         let expected_arg_count = fn_inputs.len();\n \n-        let sp_args = if args.len() > 0 {\n-            let (first, args) = args.split_at(1);\n-            let mut sp_tmp = first[0].span;\n-            for arg in args {\n-                let sp_opt = self.sess().codemap().merge_spans(sp_tmp, arg.span);\n-                if ! sp_opt.is_some() {\n-                    break;\n-                }\n-                sp_tmp = sp_opt.unwrap();\n-            };\n-            sp_tmp\n-        } else {\n-            sp\n-        };\n-\n         fn parameter_count_error<'tcx>(sess: &Session,\n                                        sp: Span,\n                                        expr_sp: Span,\n@@ -2465,7 +2450,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if arg_count == 1 {\" was\"} else {\"s were\"}),\n                 DiagnosticId::Error(error_code.to_owned()));\n \n-            if let Some(def_s) = def_span {\n+            if let Some(def_s) = def_span.map(|sp| sess.codemap().def_span(sp)) {\n                 err.span_label(def_s, \"defined here\");\n             }\n             if sugg_unit {\n@@ -2489,7 +2474,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let tuple_type = self.structurally_resolved_type(sp, fn_inputs[0]);\n             match tuple_type.sty {\n                 ty::TyTuple(arg_types, _) if arg_types.len() != args.len() => {\n-                    parameter_count_error(tcx.sess, sp_args, expr_sp, arg_types.len(), args.len(),\n+                    parameter_count_error(tcx.sess, sp, expr_sp, arg_types.len(), args.len(),\n                                           \"E0057\", false, def_span, false);\n                     expected_arg_tys = &[];\n                     self.err_args(args.len())\n@@ -2518,7 +2503,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if supplied_arg_count >= expected_arg_count {\n                 fn_inputs.to_vec()\n             } else {\n-                parameter_count_error(tcx.sess, sp_args, expr_sp, expected_arg_count,\n+                parameter_count_error(tcx.sess, sp, expr_sp, expected_arg_count,\n                                       supplied_arg_count, \"E0060\", true, def_span, false);\n                 expected_arg_tys = &[];\n                 self.err_args(supplied_arg_count)\n@@ -2532,7 +2517,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             } else {\n                 false\n             };\n-            parameter_count_error(tcx.sess, sp_args, expr_sp, expected_arg_count,\n+            parameter_count_error(tcx.sess, sp, expr_sp, expected_arg_count,\n                                   supplied_arg_count, \"E0061\", false, def_span, sugg_unit);\n             expected_arg_tys = &[];\n             self.err_args(supplied_arg_count)"}, {"sha": "e364a4d8b1441f9837647eacfbde4f7b6313c258", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n 12 |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n    |\n@@ -12,7 +12,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:13:5\n    |\n 13 |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n    |\n@@ -22,7 +22,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n    |\n 14 |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n    |\n@@ -32,7 +32,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:15:5\n    |\n 15 |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n    |\n@@ -42,7 +42,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n    |\n 16 |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n    |\n@@ -52,7 +52,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:5\n    |\n 17 |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n    |\n@@ -62,7 +62,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n    |\n 18 |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n    |\n@@ -72,7 +72,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:5\n    |\n 19 |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n    |\n@@ -82,7 +82,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n    |\n 20 |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n    |\n@@ -92,7 +92,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:21:5\n    |\n 21 |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ------------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n    |\n@@ -102,7 +102,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n    |\n 22 |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n-   |     ^^ ------------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n    |"}, {"sha": "2aa654ff6243d083fe8f6a056567b5e7c5a561d2", "filename": "src/test/ui/method-call-err-msg.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -1,29 +1,29 @@\n error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n-  --> $DIR/method-call-err-msg.rs:25:12\n+  --> $DIR/method-call-err-msg.rs:25:7\n    |\n 15 |     fn zero(self) -> Foo { self }\n-   |     ----------------------------- defined here\n+   |     -------------------- defined here\n ...\n 25 |     x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n-   |            ^ expected 0 parameters\n+   |       ^^^^ expected 0 parameters\n \n error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/method-call-err-msg.rs:27:7\n    |\n 17 |     fn one(self, _: isize) -> Foo { self }\n-   |     -------------------------------------- defined here\n+   |     ----------------------------- defined here\n ...\n 27 |      .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n    |       ^^^ expected 1 parameter\n \n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n-  --> $DIR/method-call-err-msg.rs:29:11\n+  --> $DIR/method-call-err-msg.rs:29:7\n    |\n 19 |     fn two(self, _: isize, _: isize) -> Foo { self }\n-   |     ------------------------------------------------ defined here\n+   |     --------------------------------------- defined here\n ...\n 29 |      .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n-   |           ^ expected 2 parameters\n+   |       ^^^ expected 2 parameters\n \n error[E0599]: no method named `take` found for type `Foo` in the current scope\n   --> $DIR/method-call-err-msg.rs:34:7"}, {"sha": "442900e0a836aa8d9247162cdac0b20f60721d83", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:17:5\n    |\n 17 |     foo(|_: isize| {}); //~ ERROR type mismatch\n-   |     ^^^ ------------- found signature of `fn(isize) -> _`\n+   |     ^^^ ---------- found signature of `fn(isize) -> _`\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n@@ -12,7 +12,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:18:5\n    |\n 18 |     bar(|_: isize| {}); //~ ERROR type mismatch\n-   |     ^^^ ------------- found signature of `fn(isize) -> _`\n+   |     ^^^ ---------- found signature of `fn(isize) -> _`\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n@@ -21,22 +21,22 @@ error[E0631]: type mismatch in closure arguments\n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:19:5\n    |\n+16 |     fn f(_: u64) {}\n+   |     ------------ found signature of `fn(u64) -> _`\n+...\n 19 |     foo(f); //~ ERROR type mismatch\n-   |     ^^^\n-   |     |\n-   |     expected signature of `fn(usize) -> _`\n-   |     found signature of `fn(u64) -> _`\n+   |     ^^^ expected signature of `fn(usize) -> _`\n    |\n    = note: required by `foo`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:20:5\n    |\n+16 |     fn f(_: u64) {}\n+   |     ------------ found signature of `fn(u64) -> _`\n+...\n 20 |     bar(f); //~ ERROR type mismatch\n-   |     ^^^\n-   |     |\n-   |     expected signature of `fn(usize) -> _`\n-   |     found signature of `fn(u64) -> _`\n+   |     ^^^ expected signature of `fn(usize) -> _`\n    |\n    = note: required by `bar`\n "}, {"sha": "1ee24e398520bcfde582f57396bb68c2f6f72c51", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -27,4 +27,11 @@ fn main() {\n     //~^ ERROR closure is expected to take\n     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x, y| i);\n     //~^ ERROR closure is expected to take\n+    let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n+    //~^ ERROR function is expected to take\n+    let bar = |i, x, y| i;\n+    let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n+    //~^ ERROR closure is expected to take\n }\n+\n+fn foo() {}"}, {"sha": "216f39bac5418565c1dcc585c13ccf8b3a049e52", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -56,5 +56,22 @@ error[E0593]: closure is expected to take a single 2-tuple as argument, but it t\n    |                                                     |\n    |                                                     expected closure that takes a single 2-tuple as argument\n \n-error: aborting due to 7 previous errors\n+error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 0 arguments\n+  --> $DIR/closure-arg-count.rs:30:53\n+   |\n+30 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n+   |                                                     ^^^ expected function that takes a single 2-tuple as argument\n+...\n+37 | fn foo() {}\n+   | -------- takes 0 arguments\n+\n+error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n+  --> $DIR/closure-arg-count.rs:33:53\n+   |\n+32 |     let bar = |i, x, y| i;\n+   |               --------- takes 3 distinct arguments\n+33 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n+   |                                                     ^^^ expected closure that takes a single 2-tuple as argument\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "af691663411fab8f0dd60c962bee5a914ea4bef7", "filename": "src/test/ui/mismatched_types/fn-variance-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -9,8 +9,10 @@\n // except according to those terms.\n \n fn takes_imm(x: &isize) { }\n+//~^ NOTE found signature\n \n fn takes_mut(x: &mut isize) { }\n+//~^ NOTE found signature\n \n fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n     f(t)\n@@ -22,12 +24,10 @@ fn main() {\n     //~^ ERROR type mismatch\n     //~| NOTE required by `apply`\n     //~| NOTE expected signature\n-    //~| NOTE found signature\n \n     apply(&mut 3, takes_mut);\n     apply(&mut 3, takes_imm);\n     //~^ ERROR type mismatch\n     //~| NOTE required by `apply`\n     //~| NOTE expected signature\n-    //~| NOTE found signature\n }"}, {"sha": "856efcd42181c9afc2adc19dddd7652e5ab4dee1", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -1,22 +1,22 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/fn-variance-1.rs:21:5\n+  --> $DIR/fn-variance-1.rs:23:5\n    |\n-21 |     apply(&3, takes_mut);\n-   |     ^^^^^\n-   |     |\n-   |     expected signature of `fn(&{integer}) -> _`\n-   |     found signature of `for<'r> fn(&'r mut isize) -> _`\n+14 | fn takes_mut(x: &mut isize) { }\n+   | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n+...\n+23 |     apply(&3, takes_mut);\n+   |     ^^^^^ expected signature of `fn(&{integer}) -> _`\n    |\n    = note: required by `apply`\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/fn-variance-1.rs:28:5\n+  --> $DIR/fn-variance-1.rs:29:5\n    |\n-28 |     apply(&mut 3, takes_imm);\n-   |     ^^^^^\n-   |     |\n-   |     expected signature of `fn(&mut {integer}) -> _`\n-   |     found signature of `for<'r> fn(&'r isize) -> _`\n+11 | fn takes_imm(x: &isize) { }\n+   | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n+...\n+29 |     apply(&mut 3, takes_imm);\n+   |     ^^^^^ expected signature of `fn(&mut {integer}) -> _`\n    |\n    = note: required by `apply`\n "}, {"sha": "66642466de37b882ec3a52311ac416e69a69677e", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -14,10 +14,10 @@ error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n    |               ^^^ expected 1 parameter\n \n error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n-  --> $DIR/overloaded-calls-bad.rs:44:17\n+  --> $DIR/overloaded-calls-bad.rs:44:15\n    |\n 44 |     let ans = s(\"burma\", \"shave\");\n-   |                 ^^^^^^^^^^^^^^^^ expected 1 parameter\n+   |               ^^^^^^^^^^^^^^^^^^^ expected 1 parameter\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8fa430ffff9d9bc851f967ca4b779e798d8d48c5", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/unboxed-closures-vtable-mismatch.rs:24:13\n    |\n 22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n-   |                       -------------------------------------------------- found signature of `fn(usize, isize) -> _`\n+   |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n 23 |     //~^ NOTE found signature of `fn(usize, isize)\n 24 |     let z = call_it(3, f);\n    |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`"}, {"sha": "450c87ca0322bacd8150491781eed5cbb0112dae", "filename": "src/test/ui/span/E0057.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -5,10 +5,10 @@ error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n    |             ^^^ expected 1 parameter\n \n error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n-  --> $DIR/E0057.rs:15:15\n+  --> $DIR/E0057.rs:15:13\n    |\n 15 |     let c = f(2, 3); //~ ERROR E0057\n-   |               ^^^^ expected 1 parameter\n+   |             ^^^^^^^ expected 1 parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3794d6ba2ded98735d20c1a98c64c7f328f58e89", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -17,13 +17,13 @@ error: expected one of `:` or `@`, found `,`\n    |         ^ expected one of `:` or `@` here\n \n error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n-  --> $DIR/issue-34264.rs:17:9\n+  --> $DIR/issue-34264.rs:17:5\n    |\n 11 | fn foo(Option<i32>, String) {} //~ ERROR expected one of\n-   | ------------------------------ defined here\n+   | --------------------------- defined here\n ...\n 17 |     foo(Some(42), 2, \"\"); //~ ERROR this function takes\n-   |         ^^^^^^^^^^^^^^^ expected 2 parameters\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected 2 parameters\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:18:13\n@@ -37,13 +37,13 @@ error[E0308]: mismatched types\n            - .len()\n \n error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n-  --> $DIR/issue-34264.rs:20:9\n+  --> $DIR/issue-34264.rs:20:5\n    |\n 13 | fn bar(x, y: usize) {} //~ ERROR expected one of\n-   | ---------------------- defined here\n+   | ------------------- defined here\n ...\n 20 |     bar(1, 2, 3); //~ ERROR this function takes\n-   |         ^^^^^^^ expected 2 parameters\n+   |     ^^^^^^^^^^^^ expected 2 parameters\n \n error: aborting due to 6 previous errors\n "}, {"sha": "77d037d497bfcd68e915b35eecc238702dcff998", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -12,25 +12,25 @@ error[E0061]: this function takes 2 parameters but 0 parameters were supplied\n   --> $DIR/missing-unit-argument.rs:22:5\n    |\n 11 | fn foo(():(), ():()) {}\n-   | ----------------------- defined here\n+   | -------------------- defined here\n ...\n 22 |     foo(); //~ ERROR this function takes\n    |     ^^^^^ expected 2 parameters\n \n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n-  --> $DIR/missing-unit-argument.rs:23:9\n+  --> $DIR/missing-unit-argument.rs:23:5\n    |\n 11 | fn foo(():(), ():()) {}\n-   | ----------------------- defined here\n+   | -------------------- defined here\n ...\n 23 |     foo(()); //~ ERROR this function takes\n-   |         ^^ expected 2 parameters\n+   |     ^^^^^^^ expected 2 parameters\n \n error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/missing-unit-argument.rs:24:5\n    |\n 12 | fn bar(():()) {}\n-   | ---------------- defined here\n+   | ------------- defined here\n ...\n 24 |     bar(); //~ ERROR this function takes\n    |     ^^^^^\n@@ -43,7 +43,7 @@ error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/missing-unit-argument.rs:25:7\n    |\n 16 |     fn baz(self, (): ()) { }\n-   |     ------------------------ defined here\n+   |     -------------------- defined here\n ...\n 25 |     S.baz(); //~ ERROR this function takes\n    |       ^^^\n@@ -56,7 +56,7 @@ error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/missing-unit-argument.rs:26:7\n    |\n 17 |     fn generic<T>(self, _: T) { }\n-   |     ----------------------------- defined here\n+   |     ------------------------- defined here\n ...\n 26 |     S.generic::<()>(); //~ ERROR this function takes\n    |       ^^^^^^^"}, {"sha": "b14d233acd6d4d2cb87f11d5e518c5a0cfdc4839", "filename": "src/test/ui/suggestions/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75a02a919c5109c55c652dd6671553df6452be04/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-initializer.stderr?ref=75a02a919c5109c55c652dd6671553df6452be04", "patch": "@@ -8,10 +8,10 @@ error: expected type, found `10`\n    |         while parsing the type for `x`\n \n error[E0061]: this function takes 1 parameter but 2 parameters were supplied\n-  --> $DIR/type-ascription-instead-of-initializer.rs:12:31\n+  --> $DIR/type-ascription-instead-of-initializer.rs:12:12\n    |\n 12 |     let x: Vec::with_capacity(10, 20);  //~ ERROR expected type, found `10`\n-   |                               ^^^^^^ expected 1 parameter\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 parameter\n \n error: aborting due to 2 previous errors\n "}]}