{"sha": "a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZTZlMGU5YjdiYzQ2OGI5ZTMxZDIyYzZmODJhMzkxYWQ3YmE5MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-30T10:31:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-30T10:31:20Z"}, "message": "auto merge of #10168 : reedlepee123/rust/priv_fields, r=brson\n\n....rs #8180", "tree": {"sha": "8e3638abaf793a1ddc089804e6e460ee6e79c20d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e3638abaf793a1ddc089804e6e460ee6e79c20d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a", "html_url": "https://github.com/rust-lang/rust/commit/a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e1a69112584341522e2cc00bfc6dd1db6e0ec3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1a69112584341522e2cc00bfc6dd1db6e0ec3a", "html_url": "https://github.com/rust-lang/rust/commit/5e1a69112584341522e2cc00bfc6dd1db6e0ec3a"}, {"sha": "d10106e91961f7da392d33d82086d41d81d7682d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10106e91961f7da392d33d82086d41d81d7682d", "html_url": "https://github.com/rust-lang/rust/commit/d10106e91961f7da392d33d82086d41d81d7682d"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "038598a29b8d479c3d28dc09a1591f00fe542d2b", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a", "patch": "@@ -193,7 +193,7 @@ impl<T: Send> SendDeferred<T> for SharedChan<T> {\n     }\n }\n \n-impl<T> Clone for SharedChan<T> {\n+impl<T: Send> Clone for SharedChan<T> {\n     fn clone(&self) -> SharedChan<T> {\n         let &SharedChan { x: ref c } = self;\n         SharedChan { x: c.clone() }\n@@ -221,7 +221,7 @@ impl<T: Send> GenericPort<T> for SharedPort<T> {\n     }\n }\n \n-impl<T> Clone for SharedPort<T> {\n+impl<T: Send> Clone for SharedPort<T> {\n     fn clone(&self) -> SharedPort<T> {\n         let &SharedPort { x: ref p } = self;\n         SharedPort { x: p.clone() }"}, {"sha": "3089ae2c2d0cefe80be28d1f5b9ec50b5f05e1ee", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=a0e6e0e9b7bc468b9e31d22c6f82a391ad7ba90a", "patch": "@@ -78,7 +78,7 @@ pub fn oneshot<T: Send>() -> (PortOne<T>, ChanOne<T>) {\n     }\n }\n \n-impl<T> ChanOne<T> {\n+impl<T: Send> ChanOne<T> {\n     #[inline]\n     fn packet(&self) -> *mut Packet<T> {\n         unsafe {\n@@ -181,7 +181,7 @@ impl<T> ChanOne<T> {\n     }\n }\n \n-impl<T> PortOne<T> {\n+impl<T: Send> PortOne<T> {\n     fn packet(&self) -> *mut Packet<T> {\n         unsafe {\n             let p: *mut ~Packet<T> = cast::transmute(&self.void_packet);\n@@ -218,7 +218,7 @@ impl<T> PortOne<T> {\n     }\n }\n \n-impl<T> SelectInner for PortOne<T> {\n+impl<T: Send> SelectInner for PortOne<T> {\n     #[inline] #[cfg(not(test))]\n     fn optimistic_check(&mut self) -> bool {\n         unsafe { (*self.packet()).state.load(Acquire) == STATE_ONE }\n@@ -319,9 +319,9 @@ impl<T> SelectInner for PortOne<T> {\n     }\n }\n \n-impl<T> Select for PortOne<T> { }\n+impl<T: Send> Select for PortOne<T> { }\n \n-impl<T> SelectPortInner<T> for PortOne<T> {\n+impl<T: Send> SelectPortInner<T> for PortOne<T> {\n     fn recv_ready(mut self) -> Option<T> {\n         let packet = self.packet();\n \n@@ -352,9 +352,9 @@ impl<T> SelectPortInner<T> for PortOne<T> {\n     }\n }\n \n-impl<T> SelectPort<T> for PortOne<T> { }\n+impl<T: Send> SelectPort<T> for PortOne<T> { }\n \n-impl<T> Peekable<T> for PortOne<T> {\n+impl<T: Send> Peekable<T> for PortOne<T> {\n     fn peek(&self) -> bool {\n         unsafe {\n             let packet: *mut Packet<T> = self.packet();\n@@ -369,7 +369,7 @@ impl<T> Peekable<T> for PortOne<T> {\n }\n \n #[unsafe_destructor]\n-impl<T> Drop for ChanOne<T> {\n+impl<T: Send> Drop for ChanOne<T> {\n     fn drop(&mut self) {\n         if self.suppress_finalize { return }\n \n@@ -396,7 +396,7 @@ impl<T> Drop for ChanOne<T> {\n }\n \n #[unsafe_destructor]\n-impl<T> Drop for PortOne<T> {\n+impl<T: Send> Drop for PortOne<T> {\n     fn drop(&mut self) {\n         if self.suppress_finalize { return }\n \n@@ -478,7 +478,7 @@ impl<T: Send> SendDeferred<T> for Chan<T> {\n     }\n }\n \n-impl<T> GenericPort<T> for Port<T> {\n+impl<T: Send> GenericPort<T> for Port<T> {\n     fn recv(&self) -> T {\n         match self.try_recv() {\n             Some(val) => val,\n@@ -501,7 +501,7 @@ impl<T> GenericPort<T> for Port<T> {\n     }\n }\n \n-impl<T> Peekable<T> for Port<T> {\n+impl<T: Send> Peekable<T> for Port<T> {\n     fn peek(&self) -> bool {\n         self.next.with_mut_ref(|p| p.peek())\n     }\n@@ -511,7 +511,7 @@ impl<T> Peekable<T> for Port<T> {\n // of them, but a &Port<T> should also be selectable so you can select2 on it\n // alongside a PortOne<U> without passing the port by value in recv_ready.\n \n-impl<'self, T> SelectInner for &'self Port<T> {\n+impl<'self, T: Send> SelectInner for &'self Port<T> {\n     #[inline]\n     fn optimistic_check(&mut self) -> bool {\n         do self.next.with_mut_ref |pone| { pone.optimistic_check() }\n@@ -529,9 +529,9 @@ impl<'self, T> SelectInner for &'self Port<T> {\n     }\n }\n \n-impl<'self, T> Select for &'self Port<T> { }\n+impl<'self, T: Send> Select for &'self Port<T> { }\n \n-impl<T> SelectInner for Port<T> {\n+impl<T: Send> SelectInner for Port<T> {\n     #[inline]\n     fn optimistic_check(&mut self) -> bool {\n         (&*self).optimistic_check()\n@@ -548,9 +548,9 @@ impl<T> SelectInner for Port<T> {\n     }\n }\n \n-impl<T> Select for Port<T> { }\n+impl<T: Send> Select for Port<T> { }\n \n-impl<'self, T> SelectPortInner<T> for &'self Port<T> {\n+impl<'self, T: Send> SelectPortInner<T> for &'self Port<T> {\n     fn recv_ready(self) -> Option<T> {\n         match self.next.take().recv_ready() {\n             Some(StreamPayload { val, next }) => {\n@@ -562,14 +562,14 @@ impl<'self, T> SelectPortInner<T> for &'self Port<T> {\n     }\n }\n \n-impl<'self, T> SelectPort<T> for &'self Port<T> { }\n+impl<'self, T: Send> SelectPort<T> for &'self Port<T> { }\n \n pub struct SharedChan<T> {\n     // Just like Chan, but a shared AtomicOption instead of Cell\n     priv next: UnsafeArc<AtomicOption<StreamChanOne<T>>>\n }\n \n-impl<T> SharedChan<T> {\n+impl<T: Send> SharedChan<T> {\n     pub fn new(chan: Chan<T>) -> SharedChan<T> {\n         let next = chan.next.take();\n         let next = AtomicOption::new(~next);\n@@ -609,7 +609,7 @@ impl<T: Send> SendDeferred<T> for SharedChan<T> {\n     }\n }\n \n-impl<T> Clone for SharedChan<T> {\n+impl<T: Send> Clone for SharedChan<T> {\n     fn clone(&self) -> SharedChan<T> {\n         SharedChan {\n             next: self.next.clone()\n@@ -622,7 +622,7 @@ pub struct SharedPort<T> {\n     priv next_link: UnsafeArc<AtomicOption<PortOne<StreamPortOne<T>>>>\n }\n \n-impl<T> SharedPort<T> {\n+impl<T: Send> SharedPort<T> {\n     pub fn new(port: Port<T>) -> SharedPort<T> {\n         // Put the data port into a new link pipe\n         let next_data_port = port.next.take();\n@@ -664,7 +664,7 @@ impl<T: Send> GenericPort<T> for SharedPort<T> {\n     }\n }\n \n-impl<T> Clone for SharedPort<T> {\n+impl<T: Send> Clone for SharedPort<T> {\n     fn clone(&self) -> SharedPort<T> {\n         SharedPort {\n             next_link: self.next_link.clone()"}]}