{"sha": "6ab97244b88b180c1cafd5b47533bd4366a09177", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYjk3MjQ0Yjg4YjE4MGMxY2FmZDViNDc1MzNiZDQzNjZhMDkxNzc=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-10T09:08:59Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T19:19:06Z"}, "message": "Tidy up the tests", "tree": {"sha": "92a23c89bef2216a3ebeb71a1d09261e225f36d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92a23c89bef2216a3ebeb71a1d09261e225f36d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ab97244b88b180c1cafd5b47533bd4366a09177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ab97244b88b180c1cafd5b47533bd4366a09177", "html_url": "https://github.com/rust-lang/rust/commit/6ab97244b88b180c1cafd5b47533bd4366a09177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ab97244b88b180c1cafd5b47533bd4366a09177/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6866a05e6ff4052bd45744d54f5c032aa737c36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6866a05e6ff4052bd45744d54f5c032aa737c36a", "html_url": "https://github.com/rust-lang/rust/commit/6866a05e6ff4052bd45744d54f5c032aa737c36a"}], "stats": {"total": 64, "additions": 15, "deletions": 49}, "files": [{"sha": "15af2190dc3ee0d6bebb1669b922d87c6b0cb382", "filename": "crates/completion/src/completions/complete_magic.rs", "status": "modified", "additions": 15, "deletions": 49, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6ab97244b88b180c1cafd5b47533bd4366a09177/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fcomplete_magic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ab97244b88b180c1cafd5b47533bd4366a09177/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fcomplete_magic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fcomplete_magic.rs?ref=6ab97244b88b180c1cafd5b47533bd4366a09177", "patch": "@@ -10,6 +10,7 @@ use crate::{context::CompletionContext, item::CompletionKind, CompletionItem, Co\n \n use super::Completions;\n \n+// TODO kb when typing, completes partial results, need to rerun manually to see the proper ones\n pub(crate) fn complete_magic(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     if !(ctx.is_trivial_path || ctx.is_pat_binding_or_const) {\n         return None;\n@@ -19,7 +20,7 @@ pub(crate) fn complete_magic(acc: &mut Completions, ctx: &CompletionContext) ->\n     let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n \n     // TODO kb consider heuristics, such as \"don't show `hash_map` import if `HashMap` is the import for completion\"\n-    // TODO kb module functions are not completed, consider `std::io::stdin` one\n+    // also apply completion ordering\n     let potential_import_name = ctx.token.to_string();\n \n     let possible_imports = ctx\n@@ -38,6 +39,7 @@ pub(crate) fn complete_magic(acc: &mut Completions, ctx: &CompletionContext) ->\n             builder.replace(anchor.syntax().text_range(), correct_qualifier);\n \n             // TODO kb: assists already have the merge behaviour setting, need to unite both\n+            // also consider a settings toggle for this particular feature?\n             let rewriter =\n                 insert_use(&import_scope, mod_path_to_ast(&mod_path), Some(MergeBehaviour::Full));\n             let old_ast = rewriter.rewrite_root()?;\n@@ -60,37 +62,10 @@ pub(crate) fn complete_magic(acc: &mut Completions, ctx: &CompletionContext) ->\n \n #[cfg(test)]\n mod tests {\n-    use expect_test::{expect, Expect};\n-\n-    use crate::{\n-        item::CompletionKind,\n-        test_utils::{check_edit, completion_list},\n-    };\n-\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n-        expect.assert_eq(&actual)\n-    }\n+    use crate::test_utils::check_edit;\n \n     #[test]\n     fn function_magic_completion() {\n-        check(\n-            r#\"\n-//- /lib.rs crate:dep\n-pub mod io {\n-    pub fn stdin() {}\n-};\n-\n-//- /main.rs crate:main deps:dep\n-fn main() {\n-    stdi<|>\n-}\n-\"#,\n-            expect![[r#\"\n-                st dep::io::stdin\n-            \"#]],\n-        );\n-\n         check_edit(\n             \"dep::io::stdin\",\n             r#\"\n@@ -116,37 +91,28 @@ fn main() {\n \n     #[test]\n     fn case_insensitive_magic_completion_works() {\n-        check(\n-            r#\"\n-//- /lib.rs crate:dep\n-pub struct TestStruct;\n-\n-//- /main.rs crate:main deps:dep\n-fn main() {\n-    teru<|>\n-}\n-\"#,\n-            expect![[r#\"\n-                st dep::TestStruct\n-            \"#]],\n-        );\n-\n         check_edit(\n-            \"dep::TestStruct\",\n+            \"dep::some_module::ThirdStruct\",\n             r#\"\n //- /lib.rs crate:dep\n-pub struct TestStruct;\n+pub struct FirstStruct;\n+pub mod some_module {\n+    pub struct SecondStruct;\n+    pub struct ThirdStruct;\n+}\n \n //- /main.rs crate:main deps:dep\n+use dep::{FirstStruct, some_module::SecondStruct};\n+\n fn main() {\n-    teru<|>\n+    this<|>\n }\n \"#,\n             r#\"\n-use dep::TestStruct;\n+use dep::{FirstStruct, some_module::{SecondStruct, ThirdStruct}};\n \n fn main() {\n-    TestStruct\n+    ThirdStruct\n }\n \"#,\n         );"}]}