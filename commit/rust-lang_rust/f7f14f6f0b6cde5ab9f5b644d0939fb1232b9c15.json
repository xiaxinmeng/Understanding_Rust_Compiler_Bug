{"sha": "f7f14f6f0b6cde5ab9f5b644d0939fb1232b9c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZjE0ZjZmMGI2Y2RlNWFiOWY1YjY0NGQwOTM5ZmIxMjMyYjljMTU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-31T01:39:03Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-31T01:39:26Z"}, "message": "Add note on panic behavior", "tree": {"sha": "e9e41363a56e2201b507417d8978ca2f69300724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e41363a56e2201b507417d8978ca2f69300724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f14f6f0b6cde5ab9f5b644d0939fb1232b9c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f14f6f0b6cde5ab9f5b644d0939fb1232b9c15", "html_url": "https://github.com/rust-lang/rust/commit/f7f14f6f0b6cde5ab9f5b644d0939fb1232b9c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f14f6f0b6cde5ab9f5b644d0939fb1232b9c15/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6afae41aee721fd259a8a764ec96f93bc07911", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6afae41aee721fd259a8a764ec96f93bc07911", "html_url": "https://github.com/rust-lang/rust/commit/6f6afae41aee721fd259a8a764ec96f93bc07911"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "17f12d0a82f2e4389658fcf51399846ee9f8a3f6", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7f14f6f0b6cde5ab9f5b644d0939fb1232b9c15/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f14f6f0b6cde5ab9f5b644d0939fb1232b9c15/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f7f14f6f0b6cde5ab9f5b644d0939fb1232b9c15", "patch": "@@ -626,6 +626,8 @@ where\n }\n \n /// Find the nearest parent module of a [`DefId`].\n+///\n+/// **Panics if the item it belongs to [is fake][Item::is_fake].**\n crate fn find_nearest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     if def_id.is_top_level_module() {\n         // The crate root has no parent. Use it as the root instead."}]}