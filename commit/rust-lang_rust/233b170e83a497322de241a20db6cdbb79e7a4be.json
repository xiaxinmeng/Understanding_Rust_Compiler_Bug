{"sha": "233b170e83a497322de241a20db6cdbb79e7a4be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzM2IxNzBlODNhNDk3MzIyZGUyNDFhMjBkYjZjZGJiNzllN2E0YmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-03T16:37:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-03T16:37:41Z"}, "message": "add pub(crate) works for named fields", "tree": {"sha": "5ffddf9bf1c05aef85ebca1f66ba73a24d5ea15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ffddf9bf1c05aef85ebca1f66ba73a24d5ea15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/233b170e83a497322de241a20db6cdbb79e7a4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/233b170e83a497322de241a20db6cdbb79e7a4be", "html_url": "https://github.com/rust-lang/rust/commit/233b170e83a497322de241a20db6cdbb79e7a4be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/233b170e83a497322de241a20db6cdbb79e7a4be/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33924c0939bb64cdb6fc4644582411a7be1f135d", "url": "https://api.github.com/repos/rust-lang/rust/commits/33924c0939bb64cdb6fc4644582411a7be1f135d", "html_url": "https://github.com/rust-lang/rust/commit/33924c0939bb64cdb6fc4644582411a7be1f135d"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "ac75f635e555b93126846a4bf18798ee0da1043d", "filename": "crates/ra_editor/src/assists/change_visibility.rs", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/233b170e83a497322de241a20db6cdbb79e7a4be/crates%2Fra_editor%2Fsrc%2Fassists%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233b170e83a497322de241a20db6cdbb79e7a4be/crates%2Fra_editor%2Fsrc%2Fassists%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fassists%2Fchange_visibility.rs?ref=233b170e83a497322de241a20db6cdbb79e7a4be", "patch": "@@ -1,29 +1,39 @@\n use ra_syntax::{\n-    SyntaxKind::{VISIBILITY, FN_KW, MOD_KW, STRUCT_KW, ENUM_KW, TRAIT_KW, FN_DEF, MODULE, STRUCT_DEF, ENUM_DEF, TRAIT_DEF},\n+    AstNode,\n+    ast::{self, VisibilityOwner, NameOwner},\n+    SyntaxKind::{VISIBILITY, FN_KW, MOD_KW, STRUCT_KW, ENUM_KW, TRAIT_KW, FN_DEF, MODULE, STRUCT_DEF, ENUM_DEF, TRAIT_DEF, IDENT},\n };\n \n use crate::assists::{AssistCtx, Assist};\n \n pub fn change_visibility(ctx: AssistCtx) -> Option<Assist> {\n-    let keyword = ctx.leaf_at_offset().find(|leaf| match leaf.kind() {\n+    let offset = if let Some(keyword) = ctx.leaf_at_offset().find(|leaf| match leaf.kind() {\n         FN_KW | MOD_KW | STRUCT_KW | ENUM_KW | TRAIT_KW => true,\n         _ => false,\n-    })?;\n-    let parent = keyword.parent()?;\n-    let def_kws = vec![FN_DEF, MODULE, STRUCT_DEF, ENUM_DEF, TRAIT_DEF];\n-    // Parent is not a definition, can't add visibility\n-    if !def_kws.iter().any(|&def_kw| def_kw == parent.kind()) {\n-        return None;\n-    }\n-    // Already have visibility, do nothing\n-    if parent.children().any(|child| child.kind() == VISIBILITY) {\n-        return None;\n-    }\n+    }) {\n+        let parent = keyword.parent()?;\n+        let def_kws = vec![FN_DEF, MODULE, STRUCT_DEF, ENUM_DEF, TRAIT_DEF];\n+        // Parent is not a definition, can't add visibility\n+        if !def_kws.iter().any(|&def_kw| def_kw == parent.kind()) {\n+            return None;\n+        }\n+        // Already have visibility, do nothing\n+        if parent.children().any(|child| child.kind() == VISIBILITY) {\n+            return None;\n+        }\n+        parent.range().start()\n+    } else {\n+        let ident = ctx.leaf_at_offset().find(|leaf| leaf.kind() == IDENT)?;\n+        let field = ident.ancestors().find_map(ast::NamedFieldDef::cast)?;\n+        if field.name()?.syntax().range() != ident.range() && field.visibility().is_some() {\n+            return None;\n+        }\n+        field.syntax().range().start()\n+    };\n \n-    let node_start = parent.range().start();\n-    ctx.build(\"make pub crate\", |edit| {\n-        edit.insert(node_start, \"pub(crate) \");\n-        edit.set_cursor(node_start);\n+    ctx.build(\"make pub(crate)\", |edit| {\n+        edit.insert(offset, \"pub(crate) \");\n+        edit.set_cursor(offset);\n     })\n }\n \n@@ -33,7 +43,7 @@ mod tests {\n     use crate::assists::check_assist;\n \n     #[test]\n-    fn test_change_visibility() {\n+    fn change_visibility_adds_pub_crate_to_items() {\n         check_assist(\n             change_visibility,\n             \"<|>fn foo() {}\",\n@@ -66,4 +76,13 @@ mod tests {\n             \"<|>pub(crate) unsafe fn foo() {}\",\n         );\n     }\n+\n+    #[test]\n+    fn change_visibility_works_with_struct_fields() {\n+        check_assist(\n+            change_visibility,\n+            \"struct S { <|>field: u32 }\",\n+            \"struct S { <|>pub(crate) field: u32 }\",\n+        )\n+    }\n }"}]}