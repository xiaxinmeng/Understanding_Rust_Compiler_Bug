{"sha": "ec0c150152c85435a23160b0db3472580a76fb74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMGMxNTAxNTJjODU0MzVhMjMxNjBiMGRiMzQ3MjU4MGE3NmZiNzQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-22T01:54:34Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-28T05:28:26Z"}, "message": "groundwork: refactor the interface that `resolve` exposes to `driver`", "tree": {"sha": "2ebe299fc5680574664caf82d811f00ba979e9e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ebe299fc5680574664caf82d811f00ba979e9e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec0c150152c85435a23160b0db3472580a76fb74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0c150152c85435a23160b0db3472580a76fb74", "html_url": "https://github.com/rust-lang/rust/commit/ec0c150152c85435a23160b0db3472580a76fb74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec0c150152c85435a23160b0db3472580a76fb74/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a4eb994099ad9763c32b229cac645cf76dff7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a4eb994099ad9763c32b229cac645cf76dff7a", "html_url": "https://github.com/rust-lang/rust/commit/36a4eb994099ad9763c32b229cac645cf76dff7a"}], "stats": {"total": 148, "additions": 60, "deletions": 88}, "files": [{"sha": "006616416d7f0e3b6c119a4c817b087572ab62f7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 30, "deletions": 43, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ec0c150152c85435a23160b0db3472580a76fb74/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec0c150152c85435a23160b0db3472580a76fb74/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ec0c150152c85435a23160b0db3472580a76fb74", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::DepGraph;\n use rustc::hir;\n use rustc::hir::{map as hir_map, FreevarMap, TraitMap};\n use rustc::hir::def::DefMap;\n@@ -27,7 +26,7 @@ use rustc::util::nodemap::NodeSet;\n use rustc_back::sha2::{Sha256, Digest};\n use rustc_borrowck as borrowck;\n use rustc_incremental;\n-use rustc_resolve as resolve;\n+use rustc_resolve::{MakeGlobMap, Resolver};\n use rustc_metadata::macro_import;\n use rustc_metadata::creader::read_local_crates;\n use rustc_metadata::cstore::CStore;\n@@ -291,7 +290,7 @@ pub struct CompileController<'a> {\n     pub after_analysis: PhaseController<'a>,\n     pub after_llvm: PhaseController<'a>,\n \n-    pub make_glob_map: resolve::MakeGlobMap,\n+    pub make_glob_map: MakeGlobMap,\n }\n \n impl<'a> CompileController<'a> {\n@@ -303,7 +302,7 @@ impl<'a> CompileController<'a> {\n             after_hir_lowering: PhaseController::basic(),\n             after_analysis: PhaseController::basic(),\n             after_llvm: PhaseController::basic(),\n-            make_glob_map: resolve::MakeGlobMap::No,\n+            make_glob_map: MakeGlobMap::No,\n         }\n     }\n }\n@@ -562,7 +561,7 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n                                         mut krate: ast::Crate,\n                                         crate_name: &'a str,\n                                         addl_plugins: Option<Vec<String>>,\n-                                        make_glob_map: resolve::MakeGlobMap)\n+                                        make_glob_map: MakeGlobMap)\n                                         -> Result<ExpansionResult<'a>, usize> {\n     let time_passes = sess.time_passes();\n \n@@ -728,7 +727,7 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n     krate = assign_node_ids(sess, krate);\n \n     // Collect defintions for def ids.\n-    let mut defs =\n+    let defs =\n         time(sess.time_passes(), \"collecting defs\", || hir_map::collect_definitions(&krate));\n \n     time(sess.time_passes(),\n@@ -743,8 +742,17 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n          \"AST validation\",\n          || ast_validation::check_crate(sess, &krate));\n \n-    let (analysis, resolutions, hir_forest) =\n-        lower_and_resolve(sess, crate_name, &mut defs, &krate, &sess.dep_graph, make_glob_map);\n+    let resolver_arenas = Resolver::arenas();\n+    let mut resolver = Resolver::new(sess, defs, make_glob_map, &resolver_arenas);\n+\n+    time(sess.time_passes(), \"name resolution\", || {\n+        resolver.resolve_crate(&krate);\n+    });\n+\n+    // Lower ast -> hir.\n+    let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n+        hir_map::Forest::new(lower_crate(sess, &krate, &mut resolver), &sess.dep_graph)\n+    });\n \n     // Discard MTWT tables that aren't required past lowering to HIR.\n     if !keep_mtwt_tables(sess) {\n@@ -753,9 +761,20 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n \n     Ok(ExpansionResult {\n         expanded_crate: krate,\n-        defs: defs,\n-        analysis: analysis,\n-        resolutions: resolutions,\n+        defs: resolver.definitions,\n+        analysis: ty::CrateAnalysis {\n+            export_map: resolver.export_map,\n+            access_levels: AccessLevels::default(),\n+            reachable: NodeSet(),\n+            name: crate_name,\n+            glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n+        },\n+        resolutions: Resolutions {\n+            def_map: resolver.def_map,\n+            freevars: resolver.freevars,\n+            trait_map: resolver.trait_map,\n+            maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n+        },\n         hir_forest: hir_forest\n     })\n }\n@@ -807,38 +826,6 @@ pub fn assign_node_ids(sess: &Session, krate: ast::Crate) -> ast::Crate {\n     krate\n }\n \n-pub fn lower_and_resolve<'a>(sess: &Session,\n-                             id: &'a str,\n-                             defs: &mut hir_map::Definitions,\n-                             krate: &ast::Crate,\n-                             dep_graph: &DepGraph,\n-                             make_glob_map: resolve::MakeGlobMap)\n-                             -> (ty::CrateAnalysis<'a>, Resolutions, hir_map::Forest) {\n-    resolve::with_resolver(sess, defs, make_glob_map, |mut resolver| {\n-        time(sess.time_passes(), \"name resolution\", || {\n-            resolve::resolve_crate(&mut resolver, krate);\n-        });\n-\n-        // Lower ast -> hir.\n-        let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n-            hir_map::Forest::new(lower_crate(sess, krate, &mut resolver), dep_graph)\n-        });\n-\n-        (ty::CrateAnalysis {\n-            export_map: resolver.export_map,\n-            access_levels: AccessLevels::default(),\n-            reachable: NodeSet(),\n-            name: &id,\n-            glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n-        }, Resolutions {\n-            def_map: resolver.def_map,\n-            freevars: resolver.freevars,\n-            trait_map: resolver.trait_map,\n-            maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n-        }, hir_forest)\n-    })\n-}\n-\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis."}, {"sha": "073f06d1c1e0d9c4a51ca19ab92447df3da0bf8b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 30, "deletions": 45, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ec0c150152c85435a23160b0db3472580a76fb74/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec0c150152c85435a23160b0db3472580a76fb74/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ec0c150152c85435a23160b0db3472580a76fb74", "patch": "@@ -925,7 +925,7 @@ impl PrimitiveTypeTable {\n pub struct Resolver<'a> {\n     session: &'a Session,\n \n-    definitions: &'a mut Definitions,\n+    pub definitions: Definitions,\n \n     graph_root: Module<'a>,\n \n@@ -1001,7 +1001,7 @@ pub struct Resolver<'a> {\n     arenas: &'a ResolverArenas<'a>,\n }\n \n-struct ResolverArenas<'a> {\n+pub struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleS<'a>>,\n     local_modules: RefCell<Vec<Module<'a>>>,\n     name_bindings: arena::TypedArena<NameBinding<'a>>,\n@@ -1079,7 +1079,7 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     }\n \n     fn definitions(&mut self) -> Option<&mut Definitions> {\n-        Some(self.definitions)\n+        Some(&mut self.definitions)\n     }\n }\n \n@@ -1100,11 +1100,11 @@ impl Named for hir::PathSegment {\n }\n \n impl<'a> Resolver<'a> {\n-    fn new(session: &'a Session,\n-           definitions: &'a mut Definitions,\n-           make_glob_map: MakeGlobMap,\n-           arenas: &'a ResolverArenas<'a>)\n-           -> Resolver<'a> {\n+    pub fn new(session: &'a Session,\n+               definitions: Definitions,\n+               make_glob_map: MakeGlobMap,\n+               arenas: &'a ResolverArenas<'a>)\n+               -> Resolver<'a> {\n         let root_def_id = definitions.local_def_id(CRATE_NODE_ID);\n         let graph_root =\n             ModuleS::new(NoParentLink, Some(Def::Mod(root_def_id)), false, arenas);\n@@ -1158,7 +1158,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn arenas() -> ResolverArenas<'a> {\n+    pub fn arenas() -> ResolverArenas<'a> {\n         ResolverArenas {\n             modules: arena::TypedArena::new(),\n             local_modules: RefCell::new(Vec::new()),\n@@ -1168,6 +1168,27 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    /// Entry point to crate resolution.\n+    pub fn resolve_crate(&mut self, krate: &Crate) {\n+        // Currently, we ignore the name resolution data structures for\n+        // the purposes of dependency tracking. Instead we will run name\n+        // resolution and include its output in the hash of each item,\n+        // much like we do for macro expansion. In other words, the hash\n+        // reflects not just its contents but the results of name\n+        // resolution on those contents. Hopefully we'll push this back at\n+        // some point.\n+        let _ignore = self.session.dep_graph.in_ignore();\n+\n+        self.build_reduced_graph(krate);\n+        resolve_imports::resolve_imports(self);\n+\n+        self.current_module = self.graph_root;\n+        visit::walk_crate(self, krate);\n+\n+        check_unused::check_crate(self, krate);\n+        self.report_privacy_errors();\n+    }\n+\n     fn new_module(&self, parent_link: ParentLink<'a>, def: Option<Def>, external: bool)\n                   -> Module<'a> {\n         self.arenas.alloc_module(ModuleS::new(parent_link, def, external, self.arenas))\n@@ -1568,12 +1589,6 @@ impl<'a> Resolver<'a> {\n         None\n     }\n \n-    fn resolve_crate(&mut self, krate: &Crate) {\n-        debug!(\"(resolving crate) starting\");\n-        self.current_module = self.graph_root;\n-        visit::walk_crate(self, krate);\n-    }\n-\n     fn resolve_item(&mut self, item: &Item) {\n         let name = item.ident.name;\n \n@@ -3455,34 +3470,4 @@ pub enum MakeGlobMap {\n     No,\n }\n \n-/// Entry point to crate resolution.\n-pub fn resolve_crate<'a, 'b>(resolver: &'b mut Resolver<'a>, krate: &'b Crate) {\n-    // Currently, we ignore the name resolution data structures for\n-    // the purposes of dependency tracking. Instead we will run name\n-    // resolution and include its output in the hash of each item,\n-    // much like we do for macro expansion. In other words, the hash\n-    // reflects not just its contents but the results of name\n-    // resolution on those contents. Hopefully we'll push this back at\n-    // some point.\n-    let _ignore = resolver.session.dep_graph.in_ignore();\n-\n-    resolver.build_reduced_graph(krate);\n-    resolve_imports::resolve_imports(resolver);\n-    resolver.resolve_crate(krate);\n-\n-    check_unused::check_crate(resolver, krate);\n-    resolver.report_privacy_errors();\n-}\n-\n-pub fn with_resolver<'a, T, F>(session: &'a Session,\n-                               definitions: &'a mut Definitions,\n-                               make_glob_map: MakeGlobMap,\n-                               f: F) -> T\n-    where F: for<'b> FnOnce(Resolver<'b>) -> T,\n-{\n-    let arenas = Resolver::arenas();\n-    let resolver = Resolver::new(session, definitions, make_glob_map, &arenas);\n-    f(resolver)\n-}\n-\n __build_diagnostic_array! { librustc_resolve, DIAGNOSTICS }"}]}