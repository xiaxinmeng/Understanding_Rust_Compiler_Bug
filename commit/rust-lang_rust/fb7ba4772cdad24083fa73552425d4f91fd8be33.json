{"sha": "fb7ba4772cdad24083fa73552425d4f91fd8be33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiN2JhNDc3MmNkYWQyNDA4M2ZhNzM1NTI0MjVkNGY5MWZkOGJlMzM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-11T19:15:29Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-11T19:15:29Z"}, "message": "Pass crate attributes in visit.rs", "tree": {"sha": "06138ef4c6c971eeb4b5b709c511fe9908306eed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06138ef4c6c971eeb4b5b709c511fe9908306eed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb7ba4772cdad24083fa73552425d4f91fd8be33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7ba4772cdad24083fa73552425d4f91fd8be33", "html_url": "https://github.com/rust-lang/rust/commit/fb7ba4772cdad24083fa73552425d4f91fd8be33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb7ba4772cdad24083fa73552425d4f91fd8be33/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67a0d27c6529de335304b10c6ae6b0eed77bfc79", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a0d27c6529de335304b10c6ae6b0eed77bfc79", "html_url": "https://github.com/rust-lang/rust/commit/67a0d27c6529de335304b10c6ae6b0eed77bfc79"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "60e671f1772e382e87841dca3fe0a888b657a064", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=fb7ba4772cdad24083fa73552425d4f91fd8be33", "patch": "@@ -1055,7 +1055,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n         run_lints!(self, check_ident, early_passes, sp, id);\n     }\n \n-    fn visit_mod(&mut self, m: &'a ast::Mod, s: Span, n: ast::NodeId) {\n+    fn visit_mod(&mut self, m: &'a ast::Mod, s: Span, _a: &[ast::Attribute], n: ast::NodeId) {\n         run_lints!(self, check_mod, early_passes, m, s, n);\n         ast_visit::walk_mod(self, m);\n         run_lints!(self, check_mod_post, early_passes, m, s, n);"}, {"sha": "29fac5463e557907073c8ea9c165f3b75af6f6c5", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=fb7ba4772cdad24083fa73552425d4f91fd8be33", "patch": "@@ -252,7 +252,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n \n impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n-    fn visit_mod(&mut self, m: &'v ast::Mod, _s: Span, _n: NodeId) {\n+    fn visit_mod(&mut self, m: &'v ast::Mod, _s: Span, _a: &[ast::Attribute], _n: NodeId) {\n         self.record(\"Mod\", Id::None, m);\n         ast_visit::walk_mod(self, m)\n     }"}, {"sha": "a95236e2a5072936710d1dcb4ac14adca87ec876", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=fb7ba4772cdad24083fa73552425d4f91fd8be33", "patch": "@@ -1211,7 +1211,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n }\n \n impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, D> {\n-    fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, id: NodeId) {\n+    fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, attrs: &[ast::Attribute], id: NodeId) {\n         // Since we handle explicit modules ourselves in visit_item, this should\n         // only get called for the root module of a crate.\n         assert_eq!(id, ast::CRATE_NODE_ID);\n@@ -1229,11 +1229,9 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n             filename: filename,\n             items: m.items.iter().map(|i| i.id).collect(),\n             visibility: Visibility::Public,\n-            // TODO Visitor doesn't pass us the attibutes.\n-            docs: String::new(),\n+            docs: docs_for_attrs(attrs),\n             sig: None,\n-            // TODO Visitor doesn't pass us the attibutes.\n-            attributes: vec![],\n+            attributes: attrs.to_owned(),\n         }.lower(self.tcx));\n         self.nest_scope(id, |v| visit::walk_mod(v, m));\n     }"}, {"sha": "0a5d0c2e7fe010d54514fbcae37a727762cc32d2", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=fb7ba4772cdad24083fa73552425d4f91fd8be33", "patch": "@@ -31,7 +31,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_ident(self, span, ident);\n     }\n-    fn visit_mod(&mut self, m: &Mod, _s: Span, _n: NodeId) {\n+    fn visit_mod(&mut self, m: &Mod, _s: Span, _a: &[Attribute], _n: NodeId) {\n         self.count += 1;\n         walk_mod(self, m)\n     }"}, {"sha": "9288d95009c1de0822b4f3378ce9dd796cc8509e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=fb7ba4772cdad24083fa73552425d4f91fd8be33", "patch": "@@ -56,7 +56,9 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_ident(&mut self, span: Span, ident: Ident) {\n         walk_ident(self, span, ident);\n     }\n-    fn visit_mod(&mut self, m: &'ast Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n+    fn visit_mod(&mut self, m: &'ast Mod, _s: Span, _attrs: &[Attribute], _n: NodeId) {\n+        walk_mod(self, m);\n+    }\n     fn visit_foreign_item(&mut self, i: &'ast ForeignItem) { walk_foreign_item(self, i) }\n     fn visit_global_asm(&mut self, ga: &'ast GlobalAsm) { walk_global_asm(self, ga) }\n     fn visit_item(&mut self, i: &'ast Item) { walk_item(self, i) }\n@@ -172,7 +174,7 @@ pub fn walk_ident<'a, V: Visitor<'a>>(visitor: &mut V, span: Span, ident: Ident)\n }\n \n pub fn walk_crate<'a, V: Visitor<'a>>(visitor: &mut V, krate: &'a Crate) {\n-    visitor.visit_mod(&krate.module, krate.span, CRATE_NODE_ID);\n+    visitor.visit_mod(&krate.module, krate.span, &krate.attrs, CRATE_NODE_ID);\n     walk_list!(visitor, visit_attribute, &krate.attrs);\n }\n \n@@ -249,7 +251,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n                              item.id)\n         }\n         ItemKind::Mod(ref module) => {\n-            visitor.visit_mod(module, item.span, item.id)\n+            visitor.visit_mod(module, item.span, &item.attrs, item.id)\n         }\n         ItemKind::ForeignMod(ref foreign_module) => {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);"}, {"sha": "6318abec69f06526c158e74da6454a12fa36b364", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ba4772cdad24083fa73552425d4f91fd8be33/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=fb7ba4772cdad24083fa73552425d4f91fd8be33", "patch": "@@ -329,7 +329,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         visit::walk_item(self, item);\n     }\n \n-    fn visit_mod(&mut self, m: &'a ast::Mod, _s: Span, id: NodeId) {\n+    fn visit_mod(&mut self, m: &'a ast::Mod, _s: Span, _a: &[ast::Attribute], id: NodeId) {\n         let mut prev_in_root = self.in_root;\n         if id != ast::CRATE_NODE_ID {\n             prev_in_root = mem::replace(&mut self.in_root, false);"}]}