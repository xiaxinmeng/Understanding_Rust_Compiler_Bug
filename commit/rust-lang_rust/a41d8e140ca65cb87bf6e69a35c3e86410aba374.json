{"sha": "a41d8e140ca65cb87bf6e69a35c3e86410aba374", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MWQ4ZTE0MGNhNjVjYjg3YmY2ZTY5YTM1YzNlODY0MTBhYmEzNzQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-07T14:48:37Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-07T14:48:37Z"}, "message": "Merge #946\n\n946: when loading workspace, say how many packages were loaded r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e349e903732fe18a78a02f9bc98342c540fbec14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e349e903732fe18a78a02f9bc98342c540fbec14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a41d8e140ca65cb87bf6e69a35c3e86410aba374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a41d8e140ca65cb87bf6e69a35c3e86410aba374", "html_url": "https://github.com/rust-lang/rust/commit/a41d8e140ca65cb87bf6e69a35c3e86410aba374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a41d8e140ca65cb87bf6e69a35c3e86410aba374/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5232099977d07492c1b6d5e6163c70d4f6eb07df", "url": "https://api.github.com/repos/rust-lang/rust/commits/5232099977d07492c1b6d5e6163c70d4f6eb07df", "html_url": "https://github.com/rust-lang/rust/commit/5232099977d07492c1b6d5e6163c70d4f6eb07df"}, {"sha": "1aa11eb7e9a579abd2f47b6be61f983ef2bf2f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa11eb7e9a579abd2f47b6be61f983ef2bf2f38", "html_url": "https://github.com/rust-lang/rust/commit/1aa11eb7e9a579abd2f47b6be61f983ef2bf2f38"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "eecf278a8ecd68213b07c355951919cb6237edd7", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a41d8e140ca65cb87bf6e69a35c3e86410aba374/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41d8e140ca65cb87bf6e69a35c3e86410aba374/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=a41d8e140ca65cb87bf6e69a35c3e86410aba374", "patch": "@@ -248,8 +248,10 @@ fn main_loop_inner(\n             && pending_libraries.is_empty()\n             && in_flight_libraries == 0\n         {\n+            let n_packages: usize = state.workspaces.iter().map(|it| it.count()).sum();\n             if options.show_workspace_loaded {\n-                show_message(req::MessageType::Info, \"workspace loaded\", msg_sender);\n+                let msg = format!(\"workspace loaded, {} rust packages\", n_packages);\n+                show_message(req::MessageType::Info, msg, msg_sender);\n             }\n             // Only send the notification first time\n             send_workspace_notification = false;\n@@ -508,12 +510,10 @@ fn update_file_notifications_on_threadpool(\n     });\n }\n \n-fn show_message<M: Into<String>>(typ: req::MessageType, msg: M, sender: &Sender<RawMessage>) {\n-    let not = RawNotification::new::<req::ShowMessage>(&req::ShowMessageParams {\n-        typ,\n-        message: msg.into(),\n-    });\n-\n+fn show_message(typ: req::MessageType, message: impl Into<String>, sender: &Sender<RawMessage>) {\n+    let message = message.into();\n+    let params = req::ShowMessageParams { typ, message };\n+    let not = RawNotification::new::<req::ShowMessage>(&params);\n     sender.send(not.into()).unwrap();\n }\n "}, {"sha": "6ae541ec681156c98914e096277e566b14679906", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a41d8e140ca65cb87bf6e69a35c3e86410aba374/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41d8e140ca65cb87bf6e69a35c3e86410aba374/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=a41d8e140ca65cb87bf6e69a35c3e86410aba374", "patch": "@@ -32,7 +32,7 @@ version = \"0.0.0\"\n use std::collections::Spam;\n \"#,\n     );\n-    server.wait_for_message(\"workspace loaded\");\n+    server.wait_until_workspace_is_loaded();\n     eprintln!(\"loading took    {:?}\", project_start.elapsed());\n     let completion_start = Instant::now();\n     let res = server.send_request::<Completion>(CompletionParams {\n@@ -54,7 +54,7 @@ fn foo() {\n }\n \",\n     );\n-    server.wait_for_message(\"workspace loaded\");\n+    server.wait_until_workspace_is_loaded();\n     server.request::<Runnables>(\n         RunnablesParams { text_document: server.doc_id(\"lib.rs\"), position: None },\n         json!([\n@@ -108,7 +108,7 @@ pub fn foo() {}\n fn test_eggs() {}\n \"#,\n     );\n-    server.wait_for_message(\"workspace loaded\");\n+    server.wait_until_workspace_is_loaded();\n     server.request::<Runnables>(\n         RunnablesParams {\n             text_document: server.doc_id(\"tests/spam.rs\"),\n@@ -168,7 +168,7 @@ fn main() {\n pub use std::collections::HashMap;\n \"#,\n     );\n-    server.wait_for_message(\"workspace loaded\");\n+    server.wait_until_workspace_is_loaded();\n \n     server.request::<Formatting>(\n         DocumentFormattingParams {\n@@ -217,7 +217,7 @@ mod bar;\n fn main() {}\n \"#,\n     );\n-    server.wait_for_message(\"workspace loaded\");\n+    server.wait_until_workspace_is_loaded();\n     let empty_context = || CodeActionContext { diagnostics: Vec::new(), only: None };\n     server.request::<CodeActionRequest>(\n         CodeActionParams {\n@@ -279,7 +279,7 @@ fn main() {}\n         PATH = tmp_dir.path().display()\n     );\n     let server = project_with_tmpdir(tmp_dir, &code);\n-    server.wait_for_message(\"workspace loaded\");\n+    server.wait_until_workspace_is_loaded();\n     let empty_context = || CodeActionContext { diagnostics: Vec::new(), only: None };\n     server.request::<CodeActionRequest>(\n         CodeActionParams {"}, {"sha": "ab9db3dd4ec68216634d8240a9b0bd4839ac94de", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a41d8e140ca65cb87bf6e69a35c3e86410aba374/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41d8e140ca65cb87bf6e69a35c3e86410aba374/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=a41d8e140ca65cb87bf6e69a35c3e86410aba374", "patch": "@@ -145,26 +145,25 @@ impl Server {\n         }\n         panic!(\"no response\");\n     }\n-    pub fn wait_for_message(&self, message: &str) {\n-        self.wait_for_message_n(message, 1)\n-    }\n-    pub fn wait_for_message_n(&self, message: &str, n: usize) {\n-        let f = |msg: &RawMessage| match msg {\n+    pub fn wait_until_workspace_is_loaded(&self) {\n+        self.wait_for_message_cond(1, &|msg: &RawMessage| match msg {\n             RawMessage::Notification(n) if n.method == ShowMessage::METHOD => {\n                 let msg = n.clone().cast::<req::ShowMessage>().unwrap();\n-                msg.message == message\n+                msg.message.starts_with(\"workspace loaded\")\n             }\n             _ => false,\n-        };\n+        })\n+    }\n+    fn wait_for_message_cond(&self, n: usize, cond: &dyn Fn(&RawMessage) -> bool) {\n         let mut total = 0;\n         for msg in self.messages.borrow().iter() {\n-            if f(msg) {\n+            if cond(msg) {\n                 total += 1\n             }\n         }\n         while total < n {\n             let msg = self.recv().expect(\"no response\");\n-            if f(&msg) {\n+            if cond(&msg) {\n                 total += 1;\n             }\n         }"}]}