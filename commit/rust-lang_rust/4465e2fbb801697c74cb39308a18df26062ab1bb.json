{"sha": "4465e2fbb801697c74cb39308a18df26062ab1bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NjVlMmZiYjgwMTY5N2M3NGNiMzkzMDhhMThkZjI2MDYyYWIxYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-08T15:16:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-08T15:16:17Z"}, "message": "Auto merge of #4355 - lzutao:macro_expn_try_err, r=flip1995\n\nFix macro expansion in try_err lint\n\nFixes #4309\n\nchangelog: none", "tree": {"sha": "97faa733d29a8f1b91825d0f8a815b1ce50d963a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97faa733d29a8f1b91825d0f8a815b1ce50d963a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4465e2fbb801697c74cb39308a18df26062ab1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4465e2fbb801697c74cb39308a18df26062ab1bb", "html_url": "https://github.com/rust-lang/rust/commit/4465e2fbb801697c74cb39308a18df26062ab1bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4465e2fbb801697c74cb39308a18df26062ab1bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd7d40789d510eba782fdf86c4a2fdd90084568", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd7d40789d510eba782fdf86c4a2fdd90084568", "html_url": "https://github.com/rust-lang/rust/commit/7bd7d40789d510eba782fdf86c4a2fdd90084568"}, {"sha": "90a7b6041319085634666d1ca1a28d79bd7ba6cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a7b6041319085634666d1ca1a28d79bd7ba6cd", "html_url": "https://github.com/rust-lang/rust/commit/90a7b6041319085634666d1ca1a28d79bd7ba6cd"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "7eba331ae0f326bdaef8bba3291200f957c5e0e2", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4465e2fbb801697c74cb39308a18df26062ab1bb/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4465e2fbb801697c74cb39308a18df26062ab1bb/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=4465e2fbb801697c74cb39308a18df26062ab1bb", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_qpath, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{in_macro_or_desugar, match_qpath, paths, snippet, snippet_with_macro_callsite, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -67,10 +67,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n \n             then {\n                 let err_type = cx.tables.expr_ty(err_arg);\n+                let origin_snippet = if in_macro_or_desugar(err_arg.span) {\n+                    snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n+                } else {\n+                    snippet(cx, err_arg.span, \"_\")\n+                };\n                 let suggestion = if err_type == return_type {\n-                    format!(\"return Err({})\", snippet(cx, err_arg.span, \"_\"))\n+                    format!(\"return Err({})\", origin_snippet)\n                 } else {\n-                    format!(\"return Err({}.into())\", snippet(cx, err_arg.span, \"_\"))\n+                    format!(\"return Err({}.into())\", origin_snippet)\n                 };\n \n                 span_lint_and_sugg("}, {"sha": "a2087316e3768f622787f45d421e2621f1efbe6e", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4465e2fbb801697c74cb39308a18df26062ab1bb/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4465e2fbb801697c74cb39308a18df26062ab1bb/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=4465e2fbb801697c74cb39308a18df26062ab1bb", "patch": "@@ -78,3 +78,22 @@ fn main() {\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n }\n+\n+macro_rules! bar {\n+    () => {\n+        String::from(\"aasdfasdfasdfa\")\n+    };\n+}\n+\n+macro_rules! foo {\n+    () => {\n+        bar!()\n+    };\n+}\n+\n+pub fn macro_inside(fail: bool) -> Result<i32, String> {\n+    if fail {\n+        return Err(foo!());\n+    }\n+    Ok(0)\n+}"}, {"sha": "5ef1b615dc70232f7ce0d17f0aa71dcec69018ba", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4465e2fbb801697c74cb39308a18df26062ab1bb/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4465e2fbb801697c74cb39308a18df26062ab1bb/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=4465e2fbb801697c74cb39308a18df26062ab1bb", "patch": "@@ -78,3 +78,22 @@ fn main() {\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n }\n+\n+macro_rules! bar {\n+    () => {\n+        String::from(\"aasdfasdfasdfa\")\n+    };\n+}\n+\n+macro_rules! foo {\n+    () => {\n+        bar!()\n+    };\n+}\n+\n+pub fn macro_inside(fail: bool) -> Result<i32, String> {\n+    if fail {\n+        Err(foo!())?;\n+    }\n+    Ok(0)\n+}"}, {"sha": "b915d6b601d12f2d0fea5c682b9cb88349944945", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4465e2fbb801697c74cb39308a18df26062ab1bb/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4465e2fbb801697c74cb39308a18df26062ab1bb/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=4465e2fbb801697c74cb39308a18df26062ab1bb", "patch": "@@ -28,5 +28,11 @@ error: returning an `Err(_)` with the `?` operator\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n-error: aborting due to 4 previous errors\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:96:9\n+   |\n+LL |         Err(foo!())?;\n+   |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n+\n+error: aborting due to 5 previous errors\n "}]}