{"sha": "6dff51f37d87eb02e8776032fa8da16c990a3283", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZmY1MWYzN2Q4N2ViMDJlODc3NjAzMmZhOGRhMTZjOTkwYTMyODM=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-06-03T08:01:25Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-06-03T08:01:25Z"}, "message": "rustdoc- Show defaults on const generics", "tree": {"sha": "a532a1fdf5dad6ce89d9763ddb22caf4e6b4fa20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a532a1fdf5dad6ce89d9763ddb22caf4e6b4fa20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dff51f37d87eb02e8776032fa8da16c990a3283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dff51f37d87eb02e8776032fa8da16c990a3283", "html_url": "https://github.com/rust-lang/rust/commit/6dff51f37d87eb02e8776032fa8da16c990a3283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dff51f37d87eb02e8776032fa8da16c990a3283/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da865095cf378fbfd07145c25fe5837ea091efeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/da865095cf378fbfd07145c25fe5837ea091efeb", "html_url": "https://github.com/rust-lang/rust/commit/da865095cf378fbfd07145c25fe5837ea091efeb"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "a3f63ea1046e32c45859b3340634a2f793d591e4", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6dff51f37d87eb02e8776032fa8da16c990a3283", "patch": "@@ -664,7 +664,10 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     }\n                 }\n                 GenericParamDefKind::Lifetime => {}\n-                GenericParamDefKind::Const { .. } => {}\n+                GenericParamDefKind::Const { ref mut default, .. } => {\n+                    // We never want something like `impl<const N: usize = 10>`\n+                    default.take();\n+                }\n             }\n         }\n "}, {"sha": "d1c18821ea644f9defcf73b72029c422141b0a53", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6dff51f37d87eb02e8776032fa8da16c990a3283", "patch": "@@ -445,11 +445,15 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     },\n                 )\n             }\n-            ty::GenericParamDefKind::Const { .. } => (\n+            ty::GenericParamDefKind::Const { has_default, .. } => (\n                 self.name,\n                 GenericParamDefKind::Const {\n                     did: self.def_id,\n                     ty: cx.tcx.type_of(self.def_id).clean(cx),\n+                    default: match has_default {\n+                        true => Some(cx.tcx.const_param_default(self.def_id).to_string()),\n+                        false => None,\n+                    },\n                 },\n             ),\n         };\n@@ -487,12 +491,15 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                     synthetic,\n                 },\n             ),\n-            hir::GenericParamKind::Const { ref ty, default: _ } => (\n+            hir::GenericParamKind::Const { ref ty, default } => (\n                 self.name.ident().name,\n                 GenericParamDefKind::Const {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n                     ty: ty.clean(cx),\n-                    // FIXME(const_generics_defaults): add `default` field here for docs\n+                    default: default.map(|ct| {\n+                        let def_id = cx.tcx.hir().local_def_id(ct.hir_id);\n+                        ty::Const::from_anon_const(cx.tcx, def_id).to_string()\n+                    }),\n                 },\n             ),\n         };"}, {"sha": "e73eb6c48acdbd677647c972a674e635effeaa37", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6dff51f37d87eb02e8776032fa8da16c990a3283", "patch": "@@ -1304,6 +1304,7 @@ crate enum GenericParamDefKind {\n     Const {\n         did: DefId,\n         ty: Type,\n+        default: Option<String>,\n     },\n }\n "}, {"sha": "10dba5a35c04a1411eae11618347db91a91723cb", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6dff51f37d87eb02e8776032fa8da16c990a3283", "patch": "@@ -177,12 +177,22 @@ impl clean::GenericParamDef {\n \n                 Ok(())\n             }\n-            clean::GenericParamDefKind::Const { ref ty, .. } => {\n+            clean::GenericParamDefKind::Const { ref ty, ref default, .. } => {\n                 if f.alternate() {\n-                    write!(f, \"const {}: {:#}\", self.name, ty.print(cx))\n+                    write!(f, \"const {}: {:#}\", self.name, ty.print(cx))?;\n                 } else {\n-                    write!(f, \"const {}:&nbsp;{}\", self.name, ty.print(cx))\n+                    write!(f, \"const {}:&nbsp;{}\", self.name, ty.print(cx))?;\n                 }\n+\n+                if let Some(default) = default {\n+                    if f.alternate() {\n+                        write!(f, \" = {:#}\", default)?;\n+                    } else {\n+                        write!(f, \"&nbsp;=&nbsp;{}\", default)?;\n+                    }\n+                }\n+\n+                Ok(())\n             }\n         })\n     }"}, {"sha": "a812a37823640b558afbfd9ff8ade55397a31f1a", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6dff51f37d87eb02e8776032fa8da16c990a3283", "patch": "@@ -317,7 +317,9 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n                 default: default.map(|x| x.into_tcx(tcx)),\n             },\n-            Const { did: _, ty } => GenericParamDefKind::Const(ty.into_tcx(tcx)),\n+            Const { did: _, ty, default } => {\n+                GenericParamDefKind::Const { ty: ty.into_tcx(tcx), default }\n+            }\n         }\n     }\n }"}, {"sha": "6d9a5cb515a480420aa521320303988678c8f408", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dff51f37d87eb02e8776032fa8da16c990a3283/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=6dff51f37d87eb02e8776032fa8da16c990a3283", "patch": "@@ -324,7 +324,7 @@ pub struct GenericParamDef {\n pub enum GenericParamDefKind {\n     Lifetime,\n     Type { bounds: Vec<GenericBound>, default: Option<Type> },\n-    Const(Type),\n+    Const { ty: Type, default: Option<String> },\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}]}