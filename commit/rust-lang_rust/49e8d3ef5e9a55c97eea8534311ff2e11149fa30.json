{"sha": "49e8d3ef5e9a55c97eea8534311ff2e11149fa30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZThkM2VmNWU5YTU1Yzk3ZWVhODUzNDMxMWZmMmUxMTE0OWZhMzA=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T05:09:27Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T05:09:27Z"}, "message": "Simplify handling of Result in eval_assignment.", "tree": {"sha": "000f662c2c9551a5d93e5077276d990318a5f682", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/000f662c2c9551a5d93e5077276d990318a5f682"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49e8d3ef5e9a55c97eea8534311ff2e11149fa30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49e8d3ef5e9a55c97eea8534311ff2e11149fa30", "html_url": "https://github.com/rust-lang/rust/commit/49e8d3ef5e9a55c97eea8534311ff2e11149fa30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49e8d3ef5e9a55c97eea8534311ff2e11149fa30/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d0e0423b3874e348dcf322342c29f31f5f98d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d0e0423b3874e348dcf322342c29f31f5f98d9", "html_url": "https://github.com/rust-lang/rust/commit/f7d0e0423b3874e348dcf322342c29f31f5f98d9"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "218bc4622debe19dba298aaa7a24e6abc4dcca52", "filename": "src/interpreter.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/49e8d3ef5e9a55c97eea8534311ff2e11149fa30/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e8d3ef5e9a55c97eea8534311ff2e11149fa30/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=49e8d3ef5e9a55c97eea8534311ff2e11149fa30", "patch": "@@ -495,7 +495,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         match *rvalue {\n             Use(ref operand) => {\n                 let src = try!(self.eval_operand(operand));\n-                self.memory.copy(src, dest, dest_repr.size())\n+                try!(self.memory.copy(src, dest, dest_repr.size()));\n             }\n \n             BinaryOp(bin_op, ref left, ref right) => {\n@@ -508,39 +508,36 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 let right_val = try!(self.read_primval(right_ptr, right_ty));\n \n                 let val = try!(primval::binary_op(bin_op, left_val, right_val));\n-                self.memory.write_primval(dest, val)\n+                try!(self.memory.write_primval(dest, val));\n             }\n \n             UnaryOp(un_op, ref operand) => {\n                 let ptr = try!(self.eval_operand(operand));\n                 let ty = self.operand_ty(operand);\n                 let val = try!(self.read_primval(ptr, ty));\n-                self.memory.write_primval(dest, primval::unary_op(un_op, val))\n+                try!(self.memory.write_primval(dest, primval::unary_op(un_op, val)));\n             }\n \n             Aggregate(ref kind, ref operands) => {\n                 use rustc::mir::repr::AggregateKind::*;\n                 match *kind {\n-                    Tuple => self.assign_to_aggregate(dest, &dest_repr, 0, operands),\n+                    Tuple | Closure(..) =>\n+                        try!(self.assign_to_aggregate(dest, &dest_repr, 0, operands)),\n \n                     Adt(_, variant_idx, _) =>\n-                        self.assign_to_aggregate(dest, &dest_repr, variant_idx, operands),\n-\n-                    Vec => match *dest_repr {\n-                        Repr::Array { elem_size, length } => {\n-                            assert_eq!(length, operands.len());\n-                            for (i, operand) in operands.iter().enumerate() {\n-                                let src = try!(self.eval_operand(operand));\n-                                let offset = i * elem_size;\n-                                let elem_dest = dest.offset(offset as isize);\n-                                try!(self.memory.copy(src, elem_dest, elem_size));\n-                            }\n-                            Ok(())\n+                        try!(self.assign_to_aggregate(dest, &dest_repr, variant_idx, operands)),\n+\n+                    Vec => if let Repr::Array { elem_size, length } = *dest_repr {\n+                        assert_eq!(length, operands.len());\n+                        for (i, operand) in operands.iter().enumerate() {\n+                            let src = try!(self.eval_operand(operand));\n+                            let offset = i * elem_size;\n+                            let elem_dest = dest.offset(offset as isize);\n+                            try!(self.memory.copy(src, elem_dest, elem_size));\n                         }\n-                        _ => panic!(\"expected Repr::Array target\"),\n+                    } else {\n+                        panic!(\"expected Repr::Array target\");\n                     },\n-\n-                    Closure(..) => self.assign_to_aggregate(dest, &dest_repr, 0, operands),\n                 }\n             }\n \n@@ -557,7 +554,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                     _ => panic!(\"Rvalue::Len expected array or slice, got {:?}\", ty),\n                 };\n                 let psize = self.memory.pointer_size;\n-                self.memory.write_uint(dest, len, psize)\n+                try!(self.memory.write_uint(dest, len, psize));\n             }\n \n             Ref(_, _, ref lvalue) => {\n@@ -571,13 +568,12 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                         try!(self.memory.write_uint(len_ptr, len, psize));\n                     }\n                 }\n-                Ok(())\n             }\n \n             Box(ty) => {\n                 let size = self.ty_size(ty);\n                 let ptr = self.memory.allocate(size);\n-                self.memory.write_ptr(dest, ptr)\n+                try!(self.memory.write_ptr(dest, ptr));\n             }\n \n             Cast(kind, ref operand, dest_ty) => {\n@@ -594,11 +590,8 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                         match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n                             (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n                                 let size = self.memory.pointer_size;\n-                                self.memory.write_uint(\n-                                    dest.offset(size as isize),\n-                                    length as u64,\n-                                    size,\n-                                )\n+                                let len_ptr = dest.offset(size as isize);\n+                                try!(self.memory.write_uint(len_ptr, length as u64, size));\n                             }\n \n                             _ => panic!(\"can't handle cast: {:?}\", rvalue),\n@@ -608,7 +601,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                     Misc => {\n                         // FIXME(tsion): Wrong for almost everything.\n                         let size = dest_repr.size();\n-                        self.memory.copy(src, dest, size)\n+                        try!(self.memory.copy(src, dest, size));\n                     }\n \n                     _ => panic!(\"can't handle cast: {:?}\", rvalue),\n@@ -617,6 +610,8 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n             ref r => panic!(\"can't handle rvalue: {:?}\", r),\n         }\n+\n+        Ok(())\n     }\n \n     fn operand_ty(&self, operand: &mir::Operand<'tcx>) -> ty::Ty<'tcx> {"}]}