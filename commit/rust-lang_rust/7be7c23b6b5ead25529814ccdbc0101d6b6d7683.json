{"sha": "7be7c23b6b5ead25529814ccdbc0101d6b6d7683", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZTdjMjNiNmI1ZWFkMjU1Mjk4MTRjY2RiYzAxMDFkNmI2ZDc2ODM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-27T01:47:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-27T01:47:27Z"}, "message": "Copy args to allocas, change llargs lookups to 'in mem'. Un-XFAIL tup.rs.", "tree": {"sha": "2c9ebc1ddeea78f47ca398408ad2c57216f0aaad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c9ebc1ddeea78f47ca398408ad2c57216f0aaad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be7c23b6b5ead25529814ccdbc0101d6b6d7683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be7c23b6b5ead25529814ccdbc0101d6b6d7683", "html_url": "https://github.com/rust-lang/rust/commit/7be7c23b6b5ead25529814ccdbc0101d6b6d7683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be7c23b6b5ead25529814ccdbc0101d6b6d7683/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7ce2425c9a35225a582f45604cfa7b0d11423b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ce2425c9a35225a582f45604cfa7b0d11423b3", "html_url": "https://github.com/rust-lang/rust/commit/d7ce2425c9a35225a582f45604cfa7b0d11423b3"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "c965f7b6689807fb5308169795bfc9326e4bc7f4", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7be7c23b6b5ead25529814ccdbc0101d6b6d7683/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7be7c23b6b5ead25529814ccdbc0101d6b6d7683/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=7be7c23b6b5ead25529814ccdbc0101d6b6d7683", "patch": "@@ -535,6 +535,7 @@ TEST_XFAILS_SELF := $(filter-out \\\n                         lazy-init.rs \\\n                         multiline-comment.rs \\\n                         return-nil.rs \\\n+                        tup.rs \\\n                         u32-decr.rs \\\n                         u8-incr.rs \\\n                         u8-incr-decr.rs \\"}, {"sha": "2f078f04aecdaba359c9033d140d794109e0ee4e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7be7c23b6b5ead25529814ccdbc0101d6b6d7683/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be7c23b6b5ead25529814ccdbc0101d6b6d7683/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7be7c23b6b5ead25529814ccdbc0101d6b6d7683", "patch": "@@ -1071,7 +1071,7 @@ fn trans_name(@block_ctxt cx, &ast.name n, &option.t[ast.def] dopt)\n                 case (ast.def_arg(?did)) {\n                     check (cx.fcx.llargs.contains_key(did));\n                     ret tup(res(cx, cx.fcx.llargs.get(did)),\n-                            false);\n+                            true);\n                 }\n                 case (ast.def_local(?did)) {\n                     check (cx.fcx.lllocals.contains_key(did));\n@@ -1521,15 +1521,46 @@ fn new_fn_ctxt(@crate_ctxt cx,\n              ccx=cx);\n }\n \n+\n+// Recommended LLVM style, strange though this is, is to copy from args to\n+// allocas immediately upon entry; this permits us to GEP into structures we\n+// were passed and whatnot. Apparently mem2reg will mop up.\n+\n+fn copy_args_to_allocas(@block_ctxt cx, &ast._fn f, &ast.ann ann) {\n+\n+    let vec[typeck.arg] arg_ts = vec();\n+    let @typeck.ty fty = node_ann_type(cx.fcx.ccx, ann);\n+    alt (fty.struct) {\n+        case (typeck.ty_fn(?a, _)) { arg_ts += a; }\n+    }\n+\n+    let uint arg_n = 0u;\n+\n+    for (ast.arg aarg in f.inputs) {\n+        auto arg = arg_ts.(arg_n);\n+        auto arg_t = type_of(cx.fcx.ccx, arg.ty);\n+        auto alloca = cx.build.Alloca(arg_t);\n+        auto argval = cx.fcx.llargs.get(aarg.id);\n+        cx.build.Store(argval, alloca);\n+        // Overwrite the llargs entry for this arg with its alloca.\n+        cx.fcx.llargs.insert(aarg.id, alloca);\n+        arg_n += 1u;\n+    }\n+}\n+\n fn is_terminated(@block_ctxt cx) -> bool {\n     auto inst = llvm.LLVMGetLastInstruction(cx.llbb);\n     ret llvm.LLVMIsATerminatorInst(inst) as int != 0;\n }\n \n-impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid) {\n+impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n+                   &ast.ann ann) {\n \n     auto fcx = new_fn_ctxt(cx, cx.path, f, fid);\n     auto bcx = new_top_block_ctxt(fcx);\n+\n+    copy_args_to_allocas(bcx, f, ann);\n+\n     auto res = trans_block(bcx, f.body);\n     if (!is_terminated(res.bcx)) {\n         // FIXME: until LLVM has a unit type, we are moving around\n@@ -1540,9 +1571,9 @@ impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid) {\n \n impure fn trans_item(@crate_ctxt cx, &ast.item item) {\n     alt (item.node) {\n-        case (ast.item_fn(?name, ?f, _, ?fid, _)) {\n+        case (ast.item_fn(?name, ?f, _, ?fid, ?ann)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n-            trans_fn(sub_cx, f, fid);\n+            trans_fn(sub_cx, f, fid, ann);\n         }\n         case (ast.item_mod(?name, ?m, _)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);"}]}