{"sha": "2877a01febe7a0667051463ed1bb431fe17c4d18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NzdhMDFmZWJlN2EwNjY3MDUxNDYzZWQxYmI0MzFmZTE3YzRkMTg=", "commit": {"author": {"name": "Dylan Maccora", "email": "maccora17@gmail.com", "date": "2017-04-17T22:29:05Z"}, "committer": {"name": "Dylan Maccora", "email": "maccora17@gmail.com", "date": "2017-04-17T22:29:05Z"}, "message": "Address review comments", "tree": {"sha": "ff9bc1abf9847bce5a08b63024a81b989272a2e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff9bc1abf9847bce5a08b63024a81b989272a2e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2877a01febe7a0667051463ed1bb431fe17c4d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2877a01febe7a0667051463ed1bb431fe17c4d18", "html_url": "https://github.com/rust-lang/rust/commit/2877a01febe7a0667051463ed1bb431fe17c4d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2877a01febe7a0667051463ed1bb431fe17c4d18/comments", "author": {"login": "maccoda", "id": 15388206, "node_id": "MDQ6VXNlcjE1Mzg4MjA2", "avatar_url": "https://avatars.githubusercontent.com/u/15388206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maccoda", "html_url": "https://github.com/maccoda", "followers_url": "https://api.github.com/users/maccoda/followers", "following_url": "https://api.github.com/users/maccoda/following{/other_user}", "gists_url": "https://api.github.com/users/maccoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/maccoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maccoda/subscriptions", "organizations_url": "https://api.github.com/users/maccoda/orgs", "repos_url": "https://api.github.com/users/maccoda/repos", "events_url": "https://api.github.com/users/maccoda/events{/privacy}", "received_events_url": "https://api.github.com/users/maccoda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maccoda", "id": 15388206, "node_id": "MDQ6VXNlcjE1Mzg4MjA2", "avatar_url": "https://avatars.githubusercontent.com/u/15388206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maccoda", "html_url": "https://github.com/maccoda", "followers_url": "https://api.github.com/users/maccoda/followers", "following_url": "https://api.github.com/users/maccoda/following{/other_user}", "gists_url": "https://api.github.com/users/maccoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/maccoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maccoda/subscriptions", "organizations_url": "https://api.github.com/users/maccoda/orgs", "repos_url": "https://api.github.com/users/maccoda/repos", "events_url": "https://api.github.com/users/maccoda/events{/privacy}", "received_events_url": "https://api.github.com/users/maccoda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d35fa1e98b244773129f18b0e8bcc81fa099ae68", "url": "https://api.github.com/repos/rust-lang/rust/commits/d35fa1e98b244773129f18b0e8bcc81fa099ae68", "html_url": "https://github.com/rust-lang/rust/commit/d35fa1e98b244773129f18b0e8bcc81fa099ae68"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "084736685e3a7f49bf23e4db4e3f7c97eec02fc9", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2877a01febe7a0667051463ed1bb431fe17c4d18/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2877a01febe7a0667051463ed1bb431fe17c4d18/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=2877a01febe7a0667051463ed1bb431fe17c4d18", "patch": "@@ -35,7 +35,7 @@\n //! - [`From`]`<U> for T` implies [`Into`]`<T> for U`\n //! - [`TryFrom`]`<U> for T` implies [`TryInto`]`<T> for U`\n //! - [`From`] and [`Into`] are reflexive, which means that all types can\n-//!   `into()` themselves and `from()` themselves\n+//!   `into` themselves and `from` themselves\n //!\n //! See each trait for usage examples.\n //!\n@@ -59,14 +59,15 @@ use str::FromStr;\n /// `AsRef` is to be used when wishing to convert to a reference of another\n /// type.\n /// `Borrow` is more related to the notion of taking the reference. It is\n-/// useful when wishing to abstract\n-/// over the type of reference (`&T`, `&mut T`) or allow both the referenced\n-/// and owned type to be treated in the same manner.\n+/// useful when wishing to abstract over the type of reference\n+/// (`&T`, `&mut T`) or allow both the referenced and owned type to be treated\n+/// in the same manner.\n+///\n /// The key difference between the two traits is the intention:\n ///\n /// - Use `AsRef` when goal is to simply convert into a reference\n /// - Use `Borrow` when goal is related to writing code that is agnostic to the\n-/// type of borrow and if is reference or value\n+///   type of borrow and if is reference or value\n ///\n /// See [the book][book] for a more detailed comparison.\n ///\n@@ -82,8 +83,8 @@ use str::FromStr;\n /// # Generic Implementations\n ///\n /// - `AsRef` auto-dereferences if the inner type is a reference or a mutable\n-/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n-/// `&mut Foo` or `&&mut Foo`)\n+///   reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n+///   `&mut Foo` or `&&mut Foo`)\n ///\n /// # Examples\n ///\n@@ -124,8 +125,8 @@ pub trait AsRef<T: ?Sized> {\n /// # Generic Implementations\n ///\n /// - `AsMut` auto-dereferences if the inner type is a reference or a mutable\n-/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n-/// `&mut Foo` or `&&mut Foo`)\n+///   reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n+///   `&mut Foo` or `&&mut Foo`)\n ///\n /// # Examples\n ///\n@@ -203,9 +204,11 @@ pub trait Into<T>: Sized {\n ///\n /// When constructing a function that is capable of failing the return type\n /// will generally be of the form `Result<T, E>`.\n+///\n /// The `From` trait allows for simplification of error handling by providing a\n /// means of returning a single error type that encapsulates numerous possible\n /// erroneous situations.\n+///\n /// This trait is not limited to error handling, rather the general case for\n /// this trait would be in any type conversions to have an explicit definition\n /// of how they are performed.\n@@ -310,8 +313,7 @@ pub trait TryFrom<T>: Sized {\n \n // As lifts over &\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T\n-    where T: AsRef<U>\n+impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T where T: AsRef<U>\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -320,8 +322,7 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a T\n \n // As lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T\n-    where T: AsRef<U>\n+impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U>\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -338,8 +339,7 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T\n \n // AsMut lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T\n-    where T: AsMut<U>\n+impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U>\n {\n     fn as_mut(&mut self) -> &mut U {\n         (*self).as_mut()\n@@ -356,8 +356,7 @@ impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T\n \n // From implies Into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T, U> Into<U> for T\n-    where U: From<T>\n+impl<T, U> Into<U> for T where U: From<T>\n {\n     fn into(self) -> U {\n         U::from(self)\n@@ -367,16 +366,13 @@ impl<T, U> Into<U> for T\n // From (and thus Into) is reflexive\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> From<T> for T {\n-    fn from(t: T) -> T {\n-        t\n-    }\n+    fn from(t: T) -> T { t }\n }\n \n \n // TryFrom implies TryInto\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl<T, U> TryInto<U> for T\n-    where U: TryFrom<T>\n+impl<T, U> TryInto<U> for T where U: TryFrom<T>\n {\n     type Error = U::Error;\n \n@@ -413,8 +409,7 @@ impl AsRef<str> for str {\n \n // FromStr implies TryFrom<&str>\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n-impl<'a, T> TryFrom<&'a str> for T\n-    where T: FromStr\n+impl<'a, T> TryFrom<&'a str> for T where T: FromStr\n {\n     type Error = <T as FromStr>::Err;\n "}]}