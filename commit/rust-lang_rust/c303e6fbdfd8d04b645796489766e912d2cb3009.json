{"sha": "c303e6fbdfd8d04b645796489766e912d2cb3009", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMDNlNmZiZGZkOGQwNGI2NDU3OTY0ODk3NjZlOTEyZDJjYjMwMDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T13:05:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-06T14:35:57Z"}, "message": "fix ra_analysis to work with the new API", "tree": {"sha": "ff1ca323cc9dea0bc18001d39f1c9c979cef6dec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff1ca323cc9dea0bc18001d39f1c9c979cef6dec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c303e6fbdfd8d04b645796489766e912d2cb3009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c303e6fbdfd8d04b645796489766e912d2cb3009", "html_url": "https://github.com/rust-lang/rust/commit/c303e6fbdfd8d04b645796489766e912d2cb3009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c303e6fbdfd8d04b645796489766e912d2cb3009/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f4f7bfcc524a55ba559e0141a70aa799a8686d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f4f7bfcc524a55ba559e0141a70aa799a8686d", "html_url": "https://github.com/rust-lang/rust/commit/a7f4f7bfcc524a55ba559e0141a70aa799a8686d"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "ee9052d3d5d558231fcdec776da826c4e2306ec2", "filename": "crates/ra_analysis/src/completion/complete_scope.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c303e6fbdfd8d04b645796489766e912d2cb3009/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c303e6fbdfd8d04b645796489766e912d2cb3009/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=c303e6fbdfd8d04b645796489766e912d2cb3009", "patch": "@@ -20,14 +20,17 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) ->\n     }\n \n     let module_scope = module.scope(ctx.db)?;\n+    let (file_id, _) = module.defenition_source(ctx.db)?;\n     module_scope\n         .entries()\n         .filter(|(_name, res)| {\n             // Don't expose this item\n+            // FIXME: this penetrates through all kinds of abstractions,\n+            // we need to figura out the way to do it less ugly.\n             match res.import {\n                 None => true,\n                 Some(import) => {\n-                    let range = import.range(ctx.db, module.file_id());\n+                    let range = import.range(ctx.db, file_id);\n                     !range.is_subrange(&ctx.leaf.range())\n                 }\n             }"}, {"sha": "aa0616e3b3b6ce2bd44a260ae6eaed9e6e8b6629", "filename": "crates/ra_analysis/src/goto_defenition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c303e6fbdfd8d04b645796489766e912d2cb3009/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c303e6fbdfd8d04b645796489766e912d2cb3009/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs?ref=c303e6fbdfd8d04b645796489766e912d2cb3009", "patch": "@@ -60,8 +60,8 @@ fn name_defenition(\n             if let Some(child_module) =\n                 hir::source_binder::module_from_declaration(db, file_id, module)?\n             {\n-                let file_id = child_module.file_id();\n-                let name = match child_module.name() {\n+                let (file_id, _) = child_module.defenition_source(db)?;\n+                let name = match child_module.name(db)? {\n                     Some(name) => name.to_string().into(),\n                     None => \"\".into(),\n                 };"}, {"sha": "07a9662905247adfa3c14c2b5be18bfb6dbaafb7", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c303e6fbdfd8d04b645796489766e912d2cb3009/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c303e6fbdfd8d04b645796489766e912d2cb3009/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=c303e6fbdfd8d04b645796489766e912d2cb3009", "patch": "@@ -109,8 +109,7 @@ impl db::RootDatabase {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n-        let (file_id, ast_module) = module.source(self);\n-        let ast_module = match ast_module {\n+        let (file_id, ast_module) = match module.declaration_source(self)? {\n             None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n@@ -206,7 +205,7 @@ impl db::RootDatabase {\n             })\n             .collect::<Vec<_>>();\n         if let Some(m) = source_binder::module_from_file_id(self, file_id)? {\n-            for (name_node, problem) in m.problems(self) {\n+            for (name_node, problem) in m.problems(self)? {\n                 let source_root = self.file_source_root(file_id);\n                 let diag = match problem {\n                     Problem::UnresolvedModule { candidate } => {"}, {"sha": "216209098d3b99c4e9cf99f91a12e3281f4f811f", "filename": "crates/ra_analysis/src/runnables.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c303e6fbdfd8d04b645796489766e912d2cb3009/crates%2Fra_analysis%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c303e6fbdfd8d04b645796489766e912d2cb3009/crates%2Fra_analysis%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Frunnables.rs?ref=c303e6fbdfd8d04b645796489766e912d2cb3009", "patch": "@@ -72,12 +72,15 @@ fn runnable_mod(db: &RootDatabase, file_id: FileId, module: ast::Module) -> Opti\n     let range = module.syntax().range();\n     let module =\n         hir::source_binder::module_from_child_node(db, file_id, module.syntax()).ok()??;\n+\n+    // FIXME: thread cancellation instead of `.ok`ing\n     let path = module\n         .path_to_root(db)\n         .ok()?\n         .into_iter()\n         .rev()\n-        .filter_map(|it| it.name(db).map(Clone::clone))\n+        .filter_map(|it| it.name(db).ok())\n+        .filter_map(|it| it)\n         .join(\"::\");\n     Some(Runnable {\n         range,"}]}