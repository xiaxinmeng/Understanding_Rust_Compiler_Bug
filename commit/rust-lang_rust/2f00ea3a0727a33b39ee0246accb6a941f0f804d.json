{"sha": "2f00ea3a0727a33b39ee0246accb6a941f0f804d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMDBlYTNhMDcyN2EzM2IzOWVlMDI0NmFjY2I2YTk0MWYwZjgwNGQ=", "commit": {"author": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-16T14:55:41Z"}, "committer": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-16T14:55:41Z"}, "message": "Suppress lint for unsuffixed number casts", "tree": {"sha": "31bada8feab4a31252a8c88deb317e7b95e4b658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31bada8feab4a31252a8c88deb317e7b95e4b658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f00ea3a0727a33b39ee0246accb6a941f0f804d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f00ea3a0727a33b39ee0246accb6a941f0f804d", "html_url": "https://github.com/rust-lang/rust/commit/2f00ea3a0727a33b39ee0246accb6a941f0f804d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f00ea3a0727a33b39ee0246accb6a941f0f804d/comments", "author": null, "committer": null, "parents": [{"sha": "afce85e96dd8a2157b2362e71e420789e2305de7", "url": "https://api.github.com/repos/rust-lang/rust/commits/afce85e96dd8a2157b2362e71e420789e2305de7", "html_url": "https://github.com/rust-lang/rust/commit/afce85e96dd8a2157b2362e71e420789e2305de7"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "e5f7fe4aa9d27e4f8aae6cc72cd5584bbdd778b0", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f00ea3a0727a33b39ee0246accb6a941f0f804d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f00ea3a0727a33b39ee0246accb6a941f0f804d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=2f00ea3a0727a33b39ee0246accb6a941f0f804d", "patch": "@@ -293,7 +293,6 @@ All notable changes to this project will be documented in this file.\n [`cast_possible_wrap`]: https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap\n [`cast_precision_loss`]: https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss\n [`cast_sign_loss`]: https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss\n-[`cast_unnecessary`]: https://github.com/Manishearth/rust-clippy/wiki#cast_unnecessary\n [`char_lit_as_u8`]: https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8\n [`chars_next_cmp`]: https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp\n [`clone_double_ref`]: https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref\n@@ -445,6 +444,7 @@ All notable changes to this project will be documented in this file.\n [`type_complexity`]: https://github.com/Manishearth/rust-clippy/wiki#type_complexity\n [`unicode_not_nfc`]: https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc\n [`unit_cmp`]: https://github.com/Manishearth/rust-clippy/wiki#unit_cmp\n+[`unnecessary_cast`]: https://github.com/Manishearth/rust-clippy/wiki#unnecessary_cast\n [`unnecessary_mut_passed`]: https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed\n [`unnecessary_operation`]: https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation\n [`unneeded_field_pattern`]: https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern"}, {"sha": "067368129e8bc87c375e4a89ebc52977f2c7f6ed", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f00ea3a0727a33b39ee0246accb6a941f0f804d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f00ea3a0727a33b39ee0246accb6a941f0f804d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2f00ea3a0727a33b39ee0246accb6a941f0f804d", "patch": "@@ -201,7 +201,6 @@ name\n [cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)                               | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n [cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)                             | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n [cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                                       | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n-[cast_unnecessary](https://github.com/Manishearth/rust-clippy/wiki#cast_unnecessary)                                   | warn    | cast to the same type, e.g `x as i32` where `x: i32`\n [char_lit_as_u8](https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8)                                       | warn    | casting a character literal to u8\n [chars_next_cmp](https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp)                                       | warn    | using `.chars().next()` to check if a string starts with a char\n [clone_double_ref](https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref)                                   | warn    | using `clone` on `&&T`\n@@ -350,6 +349,7 @@ name\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                     | warn    | usage of very complex types that might be better factored into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                     | allow   | using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                   | warn    | comparing unit values\n+[unnecessary_cast](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_cast)                                   | warn    | cast to the same type, e.g `x as i32` where `x: i32`\n [unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                       | warn    | an argument passed as a mutable reference although the callee only demands an immutable reference\n [unnecessary_operation](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation)                         | warn    | outer expressions with no effect\n [unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                       | warn    | struct fields bound to a wildcard instead of using `..`"}, {"sha": "59a01d719188ea67707d056c214eb5d41806be3b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f00ea3a0727a33b39ee0246accb6a941f0f804d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f00ea3a0727a33b39ee0246accb6a941f0f804d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2f00ea3a0727a33b39ee0246accb6a941f0f804d", "patch": "@@ -488,12 +488,12 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BOX_VEC,\n-        types::CAST_UNNECESSARY,\n         types::CHAR_LIT_AS_U8,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,\n         types::TYPE_COMPLEXITY,\n         types::UNIT_CMP,\n+        types::UNNECESSARY_CAST,\n         unicode::ZERO_WIDTH_SPACE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_io_amount::UNUSED_IO_AMOUNT,"}, {"sha": "c8cd531d364da29117958799d9ec848fd7d69a33", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2f00ea3a0727a33b39ee0246accb6a941f0f804d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f00ea3a0727a33b39ee0246accb6a941f0f804d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2f00ea3a0727a33b39ee0246accb6a941f0f804d", "patch": "@@ -379,9 +379,9 @@ declare_lint! {\n      and `x > i32::MAX`\"\n }\n \n-/// **What it does:** Checks for casts to the same type\n+/// **What it does:** Checks for casts to the same type.\n ///\n-/// **Why is this bad?** It's just unnecessary\n+/// **Why is this bad?** It's just unnecessary.\n ///\n /// **Known problems:** None.\n ///\n@@ -390,7 +390,7 @@ declare_lint! {\n /// let _ = 2i32 as i32\n /// ```\n declare_lint! {\n-    pub CAST_UNNECESSARY,\n+    pub UNNECESSARY_CAST,\n     Warn,\n     \"cast to the same type, e.g `x as i32` where `x: i32`\"\n }\n@@ -520,19 +520,28 @@ impl LintPass for CastPass {\n                     CAST_SIGN_LOSS,\n                     CAST_POSSIBLE_TRUNCATION,\n                     CAST_POSSIBLE_WRAP,\n-                    CAST_UNNECESSARY)\n+                    UNNECESSARY_CAST)\n     }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprCast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n-            if cast_from.sty == cast_to.sty && !in_external_macro(cx, expr.span) {\n-                span_lint(cx,\n-                          CAST_UNNECESSARY,\n-                          expr.span,\n-                          &format!(\"casting to the same type is unnecessary ({} -> {})\", cast_from, cast_to));\n+            if let ExprLit(ref lit) = ex.node {\n+                use syntax::ast::{LitKind, LitIntType};\n+                match lit.node {\n+                    LitKind::Int(_, LitIntType::Unsuffixed) => (),\n+                    LitKind::FloatUnsuffixed(_) => (),\n+                    _ => {\n+                        if cast_from.sty == cast_to.sty && !in_external_macro(cx, expr.span) {\n+                            span_lint(cx,\n+                                      UNNECESSARY_CAST,\n+                                      expr.span,\n+                                      &format!(\"casting to the same type is unnecessary (`{}` -> `{}`)\", cast_from, cast_to));\n+                        }\n+                    }\n+                }\n             }\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {"}, {"sha": "d63e0b102787e7a54d9fb24a0bc47ff9bbc0774e", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f00ea3a0727a33b39ee0246accb6a941f0f804d/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f00ea3a0727a33b39ee0246accb6a941f0f804d/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=2f00ea3a0727a33b39ee0246accb6a941f0f804d", "patch": "@@ -68,8 +68,10 @@ fn main() {\n     false as bool;\n     &1i32 as &i32;\n \n-    1i32 as i64;      // Should not trigger\n-\n+    // Should not trigger\n+    1i32 as i64;\n     let v = vec!(1);\n-    &v as &[i32]; // Should not trigger\n+    &v as &[i32];\n+    1.0 as f64;\n+    1 as u64;\n }"}, {"sha": "7238daa2b41165363bec6b2631448ff1de02a87b", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f00ea3a0727a33b39ee0246accb6a941f0f804d/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f00ea3a0727a33b39ee0246accb6a941f0f804d/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=2f00ea3a0727a33b39ee0246accb6a941f0f804d", "patch": "@@ -274,37 +274,29 @@ error: casting i32 to usize may lose the sign of the value\n 63 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n-warning: casting to the same type is unnecessary (i32 -> i32)\n+warning: casting to the same type is unnecessary (`i32` -> `i32`)\n   --> $DIR/cast.rs:66:5\n    |\n 66 |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n-   = note: #[warn(cast_unnecessary)] on by default\n+   = note: #[warn(unnecessary_cast)] on by default\n \n-warning: casting to the same type is unnecessary (f32 -> f32)\n+warning: casting to the same type is unnecessary (`f32` -> `f32`)\n   --> $DIR/cast.rs:67:5\n    |\n 67 |     1f32 as f32;\n    |     ^^^^^^^^^^^\n    |\n-   = note: #[warn(cast_unnecessary)] on by default\n+   = note: #[warn(unnecessary_cast)] on by default\n \n-warning: casting to the same type is unnecessary (bool -> bool)\n+warning: casting to the same type is unnecessary (`bool` -> `bool`)\n   --> $DIR/cast.rs:68:5\n    |\n 68 |     false as bool;\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: #[warn(cast_unnecessary)] on by default\n-\n-warning: casting to the same type is unnecessary (&i32 -> &i32)\n-  --> $DIR/cast.rs:69:5\n-   |\n-69 |     &1i32 as &i32;\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: #[warn(cast_unnecessary)] on by default\n+   = note: #[warn(unnecessary_cast)] on by default\n \n error: aborting due to 42 previous errors\n "}]}