{"sha": "12ecdb6381049e468ae56bf2e049ee885e185d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZWNkYjYzODEwNDllNDY4YWU1NmJmMmUwNDllZTg4NWUxODVkMmM=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-08-19T22:40:37Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-08-23T03:02:20Z"}, "message": "Enabled unit tests in std and extra.", "tree": {"sha": "f24d6c0d18079a717fd724dcacaefb104e297905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f24d6c0d18079a717fd724dcacaefb104e297905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ecdb6381049e468ae56bf2e049ee885e185d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ecdb6381049e468ae56bf2e049ee885e185d2c", "html_url": "https://github.com/rust-lang/rust/commit/12ecdb6381049e468ae56bf2e049ee885e185d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ecdb6381049e468ae56bf2e049ee885e185d2c/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4fddeadea70d2e9d04234b248ab119e5310630", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4fddeadea70d2e9d04234b248ab119e5310630", "html_url": "https://github.com/rust-lang/rust/commit/9e4fddeadea70d2e9d04234b248ab119e5310630"}], "stats": {"total": 155, "additions": 46, "deletions": 109}, "files": [{"sha": "1df69945a6057aaee0088b2311ae65c4b414071f", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -612,7 +612,7 @@ mod tests {\n         }\n     }\n \n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_arc_condvar_poison() {\n         unsafe {\n             let arc = ~MutexArc::new(1);\n@@ -636,7 +636,7 @@ mod tests {\n             }\n         }\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_mutex_arc_poison() {\n         unsafe {\n             let arc = ~MutexArc::new(1);\n@@ -651,7 +651,7 @@ mod tests {\n             }\n         }\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     pub fn test_mutex_arc_unwrap_poison() {\n         let arc = MutexArc::new(1);\n         let arc2 = ~(&arc).clone();\n@@ -668,7 +668,7 @@ mod tests {\n         let one = arc.unwrap();\n         assert!(one == 1);\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_rw_arc_poison_wr() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -681,7 +681,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_rw_arc_poison_ww() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -694,7 +694,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_rw_arc_poison_dw() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -709,7 +709,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rw_arc_no_poison_rr() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -722,7 +722,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rw_arc_no_poison_rw() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();\n@@ -735,7 +735,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rw_arc_no_poison_dr() {\n         let arc = ~RWArc::new(1);\n         let arc2 = (*arc).clone();"}, {"sha": "e24e747d61ab42ab3f8bf88b4913fc85fdd79125", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -291,7 +291,6 @@ fn test_arena_destructors() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(windows))]\n fn test_arena_destructors_fail() {\n     let arena = Arena::new();\n     // Put some stuff in the arena."}, {"sha": "6ae67e7c794ef49d5f7df494c1f3a22c706a60d5", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -185,7 +185,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_overrun_get() {\n         let cv = malloc(16u as size_t);\n \n@@ -194,7 +193,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_overrun_set() {\n         let cv = malloc(16u as size_t);\n "}, {"sha": "d102f6068f5613a49b2f85d9da80be798343dcf9", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -967,12 +967,10 @@ mod test {\n         }\n \n         #[test]\n-        #[ignore(cfg(windows))]\n         fn test_try_recv_none4_reader() {\n             test_try_recv_none4(reader_port_loader);\n         }\n         #[test]\n-        #[ignore(cfg(windows))]\n         fn test_try_recv_none4_pipe() {\n             test_try_recv_none4(pipe_port_loader);\n         }"}, {"sha": "ce56a3dcaa69b479e42277311eaee69ae75efb4a", "filename": "src/libextra/future.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -212,7 +212,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n     fn test_futurefail() {\n         let mut f = spawn(|| fail!());\n         let _x: ~str = f.get();"}, {"sha": "a9341a8075d416a69206d23ff8e7700beb26df3e", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -338,7 +338,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_empty_pop() { let mut heap = PriorityQueue::new::<int>(); heap.pop(); }\n \n     #[test]\n@@ -349,7 +348,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_empty_top() { let empty = PriorityQueue::new::<int>(); empty.top(); }\n \n     #[test]\n@@ -360,7 +358,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_empty_replace() { let mut heap = PriorityQueue::new(); heap.replace(5); }\n \n     #[test]"}, {"sha": "afb4cf3943abae035a6cba94d2cd3f8d791f0e27", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -921,7 +921,7 @@ mod tests {\n             assert!(!cond.signal());\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_killed_simple() {\n         // Mutex must get automatically unlocked if failed/killed within.\n         let m = ~Mutex::new();\n@@ -937,7 +937,7 @@ mod tests {\n         do m.lock { }\n     }\n     #[ignore(reason = \"linked failure\")]\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_killed_cond() {\n         // Getting killed during cond wait must not corrupt the mutex while\n         // unwinding (e.g. double unlock).\n@@ -964,7 +964,7 @@ mod tests {\n         }\n     }\n     #[ignore(reason = \"linked failure\")]\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_killed_broadcast() {\n         use std::unstable::finally::Finally;\n \n@@ -1024,7 +1024,7 @@ mod tests {\n             cond.wait();\n         }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_different_conds() {\n         let result = do task::try {\n             let m = ~Mutex::new_with_condvars(2);\n@@ -1045,7 +1045,7 @@ mod tests {\n         };\n         assert!(result.is_err());\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_mutex_no_condvars() {\n         let result = do task::try {\n             let m = ~Mutex::new_with_condvars(0);\n@@ -1275,7 +1275,7 @@ mod tests {\n         test_rwlock_cond_broadcast_helper(12, false, true);\n         test_rwlock_cond_broadcast_helper(12, false, false);\n     }\n-    #[cfg(test)] #[ignore(cfg(windows))]\n+    #[cfg(test)]\n     fn rwlock_kill_helper(mode1: RWLockMode, mode2: RWLockMode) {\n         // Mutex must get automatically unlocked if failed/killed within.\n         let x = ~RWLock::new();\n@@ -1290,23 +1290,23 @@ mod tests {\n         // child task must have finished by the time try returns\n         do lock_rwlock_in_mode(x, mode2) { }\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_reader_killed_writer() {\n         rwlock_kill_helper(Read, Write);\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_writer_killed_reader() {\n         rwlock_kill_helper(Write,Read );\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_reader_killed_reader() {\n         rwlock_kill_helper(Read, Read );\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_writer_killed_writer() {\n         rwlock_kill_helper(Write,Write);\n     }\n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn test_rwlock_kill_downgrader() {\n         rwlock_kill_helper(Downgrade, Read);\n         rwlock_kill_helper(Read, Downgrade);\n@@ -1321,7 +1321,7 @@ mod tests {\n         rwlock_kill_helper(Downgrade, DowngradeRead);\n         rwlock_kill_helper(Downgrade, DowngradeRead);\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_rwlock_downgrade_cant_swap() {\n         // Tests that you can't downgrade with a different rwlock's token.\n         let x = ~RWLock::new();"}, {"sha": "d940e8bb4734d208427e7413956ed67f84f6d401", "filename": "src/libextra/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -1163,7 +1163,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     fn test_should_fail() {\n         fn f() { fail!(); }\n         let desc = TestDescAndFn {"}, {"sha": "df2fe70ff0e12a9d97abad9682debece3938edcb", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -283,7 +283,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_with_ref_empty_fail() {\n         let c_str = unsafe { CString::new(ptr::null(), false) };\n         c_str.with_ref(|_| ());\n@@ -306,7 +305,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     fn test_to_c_str_fail() {\n         use c_str::null_byte::cond;\n "}, {"sha": "5db855d5b3c286296badd9d69174efa8d6cd63e8", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -93,15 +93,13 @@ fn test_basic() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(windows))]\n fn test_take_empty() {\n     let value_cell = Cell::new_empty::<~int>();\n     value_cell.take();\n }\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(windows))]\n fn test_put_back_non_empty() {\n     let value_cell = Cell::new(~10);\n     value_cell.put_back(~20);"}, {"sha": "2412ce9daf3c1a569ff929b1ee109249d46d6224", "filename": "src/libstd/io.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -2017,7 +2017,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_read_buffer_too_small() {\n         let path = &Path(\"tmp/lib-io-test-read-buffer-too-small.tmp\");\n         // ensure the file exists"}, {"sha": "5d6610e6b55a315c68c955259abf503398ba697f", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -201,7 +201,6 @@ fn test_tls_overwrite_multiple_types() {\n \n #[test]\n #[should_fail]\n-#[ignore(cfg(windows))]\n fn test_tls_cleanup_on_failure() {\n     static str_key: Key<@~str> = &Key;\n     static box_key: Key<@@()> = &Key;"}, {"sha": "e2218ce27362637fd0c415dbf4cbf2dd035b1c07", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -919,7 +919,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_range_step_zero_step() {\n         do range_step(0,10,0) |_i| { true };\n     }"}, {"sha": "d81a2756ad84a5802c0dc32950193079f9095b4a", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -638,14 +638,12 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     pub fn to_str_radix1() {\n         100u.to_str_radix(1u);\n     }\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     pub fn to_str_radix37() {\n         100u.to_str_radix(37u);\n     }\n@@ -697,13 +695,11 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_range_step_zero_step_up() {\n         do range_step(0,10,0) |_i| { true };\n     }\n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_range_step_zero_step_down() {\n         do range_step(0,-10,0) |_i| { true };\n     }"}, {"sha": "34c47d9f61ecdefb86dfb7b031abedf2c12165be", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -479,7 +479,7 @@ mod tests {\n         assert_eq!(y2, 5);\n         assert!(y.is_none());\n     }\n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn test_option_too_much_dance() {\n         let mut y = Some(util::NonCopyable);\n         let _y2 = y.take_unwrap();"}, {"sha": "f734a59f67f691a93c038911eb81f77a95fa36f4", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -1815,7 +1815,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[ignore]\n     fn test_setenv_overwrite() {\n         let n = make_rand_name();\n@@ -1829,7 +1828,6 @@ mod tests {\n     // Windows GetEnvironmentVariable requires some extra work to make sure\n     // the buffer the variable is copied into is the right size\n     #[test]\n-    #[ignore(cfg(windows))]\n     #[ignore]\n     fn test_getenv_big() {\n         let mut s = ~\"\";"}, {"sha": "f8516c08ee2168fe2e150d2361e30ba30145c7d8", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -670,7 +670,6 @@ pub mod ptr_tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_ptr_array_each_with_len_null_ptr() {\n         unsafe {\n             array_each_with_len(0 as **libc::c_char, 1, |e| {\n@@ -680,7 +679,6 @@ pub mod ptr_tests {\n     }\n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_ptr_array_each_null_ptr() {\n         unsafe {\n             array_each(0 as **libc::c_char, |e| {"}, {"sha": "c7f3fd7740ba23680a4fcf69dcf7fc731739fc3e", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -1007,7 +1007,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_gen_int_from_fail() {\n         let mut r = rng();\n         r.gen_int_range(5, -2);\n@@ -1024,7 +1023,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_gen_uint_range_fail() {\n         let mut r = rng();\n         r.gen_uint_range(5u, 2u);"}, {"sha": "bc07de7d965da817f49c37cb6877059e1464da20", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -751,7 +751,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn push_bytes_fail_reset_len() {\n         // push_bytes unsafely sets the vector length. This is testing that\n         // upon failure the length is reset correctly.\n@@ -806,7 +805,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn read_to_end_error() {\n         let mut reader = MockReader::new();\n         let count = Cell::new(0);"}, {"sha": "531d55f6043b38e08291f9f3cfa5f98148df7c82", "filename": "src/libstd/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fselect.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -136,7 +136,7 @@ mod test {\n     use cell::Cell;\n     use iterator::{Iterator, range};\n \n-    #[test] #[ignore(cfg(windows))] #[should_fail]\n+    #[test] #[should_fail]\n     fn select_doesnt_get_trolled() {\n         select::<PortOne<()>>([]);\n     }\n@@ -316,7 +316,7 @@ mod test {\n         }\n     }\n \n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn select_killed() {\n         do run_in_newsched_task {\n             let (success_p, success_c) = oneshot::<bool>();"}, {"sha": "610ca93494c9971f0e91b9ee2d44d6b598ac9bca", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -2451,7 +2451,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_pop_char_fail() {\n         let mut data = ~\"\";\n         let _cc3 = data.pop_char();\n@@ -2767,7 +2766,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_slice_fail() {\n         \"\u4e2d\u534eVi\u1ec7t Nam\".slice(0u, 2u);\n     }\n@@ -2933,7 +2931,6 @@ mod tests {\n \n \n     #[test]\n-    #[ignore(cfg(windows))]\n     fn test_from_bytes_fail() {\n         use str::not_utf8::cond;\n \n@@ -2983,7 +2980,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_as_bytes_fail() {\n         // Don't double free. (I'm not sure if this exercises the"}, {"sha": "e76b81a904df24efbb82b38db50d2f91847c8ee7", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -616,7 +616,7 @@ pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_kill_unkillable_task() {\n     use rt::test::*;\n \n@@ -637,7 +637,7 @@ fn test_kill_unkillable_task() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_kill_rekillable_task() {\n     use rt::test::*;\n \n@@ -658,7 +658,7 @@ fn test_kill_rekillable_task() {\n     }\n }\n \n-#[test] #[should_fail] #[ignore(cfg(windows))]\n+#[test] #[should_fail]\n fn test_cant_dup_task_builder() {\n     let mut builder = task();\n     builder.unlinked();\n@@ -679,7 +679,7 @@ fn test_cant_dup_task_builder() {\n fn block_forever() { let (po, _ch) = stream::<()>(); po.recv(); }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -698,15 +698,15 @@ fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_unlinked_unsup_no_fail_up() { // child unlinked fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n         do spawn_unlinked { fail!(); }\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -716,7 +716,7 @@ fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_unlinked_sup_fail_down() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -729,7 +729,7 @@ fn test_spawn_unlinked_sup_fail_down() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -750,7 +750,7 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -767,7 +767,7 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -780,7 +780,7 @@ fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -793,7 +793,7 @@ fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n     }\n }\n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -812,7 +812,7 @@ fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n // when the middle task exits successfully early before kill signals are sent.\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_failure_propagate_grandchild() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -829,7 +829,7 @@ fn test_spawn_failure_propagate_grandchild() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_failure_propagate_secondborn() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -846,7 +846,7 @@ fn test_spawn_failure_propagate_secondborn() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_failure_propagate_nephew_or_niece() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -863,7 +863,7 @@ fn test_spawn_failure_propagate_nephew_or_niece() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_linked_sup_propagate_sibling() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -941,7 +941,6 @@ fn test_add_wrapper() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_future_result() {\n     let mut result = None;\n     let mut builder = task();\n@@ -959,7 +958,7 @@ fn test_future_result() {\n     assert_eq!(result.unwrap().recv(), Failure);\n }\n \n-#[test] #[should_fail] #[ignore(cfg(windows))]\n+#[test] #[should_fail]\n fn test_back_to_the_future_result() {\n     let mut builder = task();\n     builder.future_result(util::ignore);\n@@ -977,7 +976,6 @@ fn test_try_success() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_try_fail() {\n     match do try {\n         fail!()\n@@ -1159,7 +1157,6 @@ fn test_avoid_copying_the_body_unlinked() {\n \n #[ignore(reason = \"linked failure\")]\n #[test]\n-#[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable() {\n     let (po, ch) = stream();\n@@ -1195,7 +1192,6 @@ fn test_unkillable() {\n \n #[ignore(reason = \"linked failure\")]\n #[test]\n-#[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable_nested() {\n     let (po, ch) = comm::stream();\n@@ -1261,7 +1257,7 @@ fn test_simple_newsched_spawn() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_spawn_watched() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n@@ -1284,7 +1280,7 @@ fn test_spawn_watched() {\n }\n \n #[ignore(reason = \"linked failure\")]\n-#[test] #[ignore(cfg(windows))]\n+#[test]\n fn test_indestructible() {\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {"}, {"sha": "783d9c3e810c9557eabaae6002dd5411da36d136", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -722,7 +722,6 @@ fn test_spawn_raw_simple() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_spawn_raw_unsupervise() {\n     let opts = task::TaskOpts {\n         linked: false,\n@@ -736,7 +735,6 @@ fn test_spawn_raw_unsupervise() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_spawn_raw_notify_success() {\n     let (notify_po, notify_ch) = comm::stream();\n \n@@ -750,7 +748,6 @@ fn test_spawn_raw_notify_success() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n fn test_spawn_raw_notify_failure() {\n     // New bindings for these\n     let (notify_po, notify_ch) = comm::stream();"}, {"sha": "f2cfd114349e48adecc56dbbaafdc1aaeca76508", "filename": "src/libstd/unstable/extfmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fextfmt.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -441,14 +441,12 @@ pub mod ct {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_parse_type_missing() {\n         parse_type(\"\", 0, 0, die);\n     }\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_parse_type_unknown() {\n         parse_type(\"!\", 0, 1, die);\n     }"}, {"sha": "42820aaaa959d562e33b88a1b897b1c1e792ef26", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -83,7 +83,6 @@ fn test_success() {\n }\n \n #[test]\n-#[ignore(cfg(windows))]\n #[should_fail]\n fn test_fail() {\n     let mut i = 0;"}, {"sha": "d7f9988edeff92da064b43bcd15e669c305abc2f", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -481,7 +481,7 @@ mod tests {\n         }\n     }\n \n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn exclusive_new_poison() {\n         unsafe {\n             // Tests that if one task fails inside of an Exclusive::new, subsequent\n@@ -599,7 +599,7 @@ mod tests {\n         res.unwrap().recv();\n     }\n \n-    #[test] #[should_fail] #[ignore(cfg(windows))]\n+    #[test] #[should_fail]\n     fn exclusive_new_unwrap_conflict() {\n         let x = Exclusive::new(~~\"hello\");\n         let x2 = Cell::new(x.clone());\n@@ -615,7 +615,7 @@ mod tests {\n         assert!(res.unwrap().recv() == task::Success);\n     }\n \n-    #[test] #[ignore(cfg(windows))]\n+    #[test]\n     fn exclusive_new_unwrap_deadlock() {\n         // This is not guaranteed to get to the deadlock before being killed,\n         // but it will show up sometimes, and if the deadlock were not there,"}, {"sha": "118e07abed8b2ea3c9027b62b845643d3943e198", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecdb6381049e468ae56bf2e049ee885e185d2c/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=12ecdb6381049e468ae56bf2e049ee885e185d2c", "patch": "@@ -2521,7 +2521,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_head_empty() {\n         let a: ~[int] = ~[];\n         a.head();\n@@ -2547,7 +2546,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_tail_empty() {\n         let a: ~[int] = ~[];\n         a.tail();\n@@ -2563,7 +2561,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_tailn_empty() {\n         let a: ~[int] = ~[];\n         a.tailn(2);\n@@ -2579,7 +2576,6 @@ mod tests {\n \n     #[init]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_init_empty() {\n         let a: ~[int] = ~[];\n         a.init();\n@@ -2595,7 +2591,6 @@ mod tests {\n \n     #[init]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_initn_empty() {\n         let a: ~[int] = ~[];\n         a.initn(2);\n@@ -2611,7 +2606,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_last_empty() {\n         let a: ~[int] = ~[];\n         a.last();\n@@ -3079,7 +3073,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_insert_oob() {\n         let mut a = ~[1, 2, 3];\n@@ -3102,7 +3095,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_remove_oob() {\n         let mut a = ~[1, 2, 3];\n@@ -3130,7 +3122,6 @@ mod tests {\n \n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_from_fn_fail() {\n         do from_fn(100) |v| {\n@@ -3140,7 +3131,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_build_fail() {\n         do build |push| {\n@@ -3153,7 +3143,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_grow_fn_fail() {\n         let mut v = ~[];\n@@ -3166,7 +3155,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_map_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3181,7 +3169,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_flat_map_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3196,7 +3183,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_rposition_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3211,7 +3197,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_permute_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3226,7 +3211,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(windows)]\n     #[should_fail]\n     fn test_as_imm_buf_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3236,7 +3220,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))]\n     #[should_fail]\n     fn test_as_mut_buf_fail() {\n         let mut v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n@@ -3247,7 +3230,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_copy_memory_oob() {\n         unsafe {\n             let mut a = [1, 2, 3, 4];\n@@ -3469,7 +3451,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_window_iterator_0() {\n         let v = &[1i,2,3,4];\n         let _it = v.window_iter(0);\n@@ -3494,7 +3475,6 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))]\n     fn test_chunk_iterator_0() {\n         let v = &[1i,2,3,4];\n         let _it = v.chunk_iter(0);"}]}