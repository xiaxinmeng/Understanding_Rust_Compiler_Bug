{"sha": "619c27a53959e2d79aadb01cba5b2c49756df771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOWMyN2E1Mzk1OWUyZDc5YWFkYjAxY2JhNWIyYzQ5NzU2ZGY3NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-09T15:34:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-09T15:34:16Z"}, "message": "Auto merge of #87003 - m-ou-se:rollup-x7mhv3v, r=m-ou-se\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #86855 (Fix comments about unique borrows)\n - #86881 (Inline implementation of lookup_line)\n - #86937 (Change linked tracking issue for more_qualified_paths)\n - #86994 (Update the comment on `lower_expr_try`)\n - #87000 (Use #[track_caller] in const panic diagnostics.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "23294d08e959d509fc5273b619367a00a25530d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23294d08e959d509fc5273b619367a00a25530d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/619c27a53959e2d79aadb01cba5b2c49756df771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/619c27a53959e2d79aadb01cba5b2c49756df771", "html_url": "https://github.com/rust-lang/rust/commit/619c27a53959e2d79aadb01cba5b2c49756df771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/619c27a53959e2d79aadb01cba5b2c49756df771/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e916b7cb7708e470be8d0134bdf39479051a5c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/e916b7cb7708e470be8d0134bdf39479051a5c44", "html_url": "https://github.com/rust-lang/rust/commit/e916b7cb7708e470be8d0134bdf39479051a5c44"}, {"sha": "2152c145d3a59a8a47bf370198b11410e329a71c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2152c145d3a59a8a47bf370198b11410e329a71c", "html_url": "https://github.com/rust-lang/rust/commit/2152c145d3a59a8a47bf370198b11410e329a71c"}], "stats": {"total": 138, "additions": 83, "deletions": 55}, "files": [{"sha": "eb8e92f07eacc180ceb0e5bd060c6918be404146", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -1559,13 +1559,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     /// Desugar `ExprKind::Try` from: `<expr>?` into:\n     /// ```rust\n-    /// match Try::into_result(<expr>) {\n-    ///     Ok(val) => #[allow(unreachable_code)] val,\n-    ///     Err(err) => #[allow(unreachable_code)]\n-    ///                 // If there is an enclosing `try {...}`:\n-    ///                 break 'catch_target Try::from_error(From::from(err)),\n-    ///                 // Otherwise:\n-    ///                 return Try::from_error(From::from(err)),\n+    /// match Try::branch(<expr>) {\n+    ///     ControlFlow::Continue(val) => #[allow(unreachable_code)] val,,\n+    ///     ControlFlow::Break(residual) =>\n+    ///         #[allow(unreachable_code)]\n+    ///         // If there is an enclosing `try {...}`:\n+    ///         break 'catch_target Try::from_residual(residual),\n+    ///         // Otherwise:\n+    ///         return Try::from_residual(residual),\n     /// }\n     /// ```\n     fn lower_expr_try(&mut self, span: Span, sub_expr: &Expr) -> hir::ExprKind<'hir> {"}, {"sha": "d01804aca88b22f007cd650355e9a9944cc0221b", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -685,7 +685,7 @@ declare_features! (\n     (incomplete, unnamed_fields, \"1.53.0\", Some(49804), None),\n \n     /// Allows qualified paths in struct expressions, struct patterns and tuple struct patterns.\n-    (active, more_qualified_paths, \"1.54.0\", Some(80080), None),\n+    (active, more_qualified_paths, \"1.54.0\", Some(86935), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates"}, {"sha": "ed813c054c2636d29121799b78211fc854223dd4", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -651,7 +651,7 @@ pub enum BorrowKind {\n     /// in an aliasable location. To solve, you'd have to translate with\n     /// an `&mut` borrow:\n     ///\n-    ///     struct Env { x: & &mut isize }\n+    ///     struct Env { x: &mut &mut isize }\n     ///     let x: &mut isize = ...;\n     ///     let y = (&mut Env { &mut x }, fn_ptr); // changed from &x to &mut x\n     ///     fn fn_ptr(env: &mut Env) { **env.x += 5; }"}, {"sha": "b0156daf17effd53b59b8b5aca1861a6cfe8c82f", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -347,7 +347,7 @@ pub enum BorrowKind {\n     /// an `&mut` borrow:\n     ///\n     /// ```\n-    /// struct Env { x: & &mut isize }\n+    /// struct Env { x: &mut &mut isize }\n     /// let x: &mut isize = ...;\n     /// let y = (&mut Env { &mut x }, fn_ptr); // changed from &x to &mut x\n     /// fn fn_ptr(env: &mut Env) { **env.x += 5; }"}, {"sha": "648a7abfdc7b12c36d3e483fa8ab1d2e6d935848", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -398,7 +398,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline(always)]\n     pub fn cur_span(&self) -> Span {\n-        self.stack().last().map_or(self.tcx.span, |f| f.current_span())\n+        self.stack()\n+            .iter()\n+            .rev()\n+            .find(|frame| !frame.instance.def.requires_caller_location(*self.tcx))\n+            .map_or(self.tcx.span, |f| f.current_span())\n     }\n \n     #[inline(always)]\n@@ -927,7 +931,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     #[must_use]\n     pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n         let mut frames = Vec::new();\n-        for frame in self.stack().iter().rev() {\n+        for frame in self\n+            .stack()\n+            .iter()\n+            .rev()\n+            .skip_while(|frame| frame.instance.def.requires_caller_location(*self.tcx))\n+        {\n             let lint_root = frame.current_source_info().and_then(|source_info| {\n                 match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),"}, {"sha": "6265470e625947ea482ff789bb9df2bb55395421", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -1552,13 +1552,11 @@ impl SourceFile {\n     /// number. If the source_file is empty or the position is located before the\n     /// first line, `None` is returned.\n     pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {\n-        if self.lines.is_empty() {\n-            return None;\n+        match self.lines.binary_search(&pos) {\n+            Ok(idx) => Some(idx),\n+            Err(0) => None,\n+            Err(idx) => Some(idx - 1),\n         }\n-\n-        let line_index = lookup_line(&self.lines[..], pos);\n-        assert!(line_index < self.lines.len() as isize);\n-        if line_index >= 0 { Some(line_index as usize) } else { None }\n     }\n \n     pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {\n@@ -1957,16 +1955,6 @@ impl InnerSpan {\n     }\n }\n \n-// Given a slice of line start positions and a position, returns the index of\n-// the line the position is on. Returns -1 if the position is located before\n-// the first line.\n-fn lookup_line(lines: &[BytePos], pos: BytePos) -> isize {\n-    match lines.binary_search(&pos) {\n-        Ok(line) => line as isize,\n-        Err(line) => line as isize - 1,\n-    }\n-}\n-\n /// Requirements for a `StableHashingContext` to be used in this crate.\n ///\n /// This is a hack to allow using the [`HashStable_Generic`] derive macro"}, {"sha": "11edcacc0d43ba95917ffadae0dc14d44b3cfebd", "filename": "compiler/rustc_span/src/tests.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_span%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/compiler%2Frustc_span%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Ftests.rs?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -2,18 +2,21 @@ use super::*;\n \n #[test]\n fn test_lookup_line() {\n-    let lines = &[BytePos(3), BytePos(17), BytePos(28)];\n+    let source = \"abcdefghijklm\\nabcdefghij\\n...\".to_owned();\n+    let sf =\n+        SourceFile::new(FileName::Anon(0), source, BytePos(3), SourceFileHashAlgorithm::Sha256);\n+    assert_eq!(sf.lines.as_slice(), &[BytePos(3), BytePos(17), BytePos(28)]);\n \n-    assert_eq!(lookup_line(lines, BytePos(0)), -1);\n-    assert_eq!(lookup_line(lines, BytePos(3)), 0);\n-    assert_eq!(lookup_line(lines, BytePos(4)), 0);\n+    assert_eq!(sf.lookup_line(BytePos(0)), None);\n+    assert_eq!(sf.lookup_line(BytePos(3)), Some(0));\n+    assert_eq!(sf.lookup_line(BytePos(4)), Some(0));\n \n-    assert_eq!(lookup_line(lines, BytePos(16)), 0);\n-    assert_eq!(lookup_line(lines, BytePos(17)), 1);\n-    assert_eq!(lookup_line(lines, BytePos(18)), 1);\n+    assert_eq!(sf.lookup_line(BytePos(16)), Some(0));\n+    assert_eq!(sf.lookup_line(BytePos(17)), Some(1));\n+    assert_eq!(sf.lookup_line(BytePos(18)), Some(1));\n \n-    assert_eq!(lookup_line(lines, BytePos(28)), 2);\n-    assert_eq!(lookup_line(lines, BytePos(29)), 2);\n+    assert_eq!(sf.lookup_line(BytePos(28)), Some(2));\n+    assert_eq!(sf.lookup_line(BytePos(29)), Some(2));\n }\n \n #[test]"}, {"sha": "7c2532673c835796354054a8daf9c6ea6cea4d5a", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.rs?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -0,0 +1,23 @@\n+#![feature(const_panic)]\n+#![allow(non_fmt_panics)]\n+#![crate_type = \"lib\"]\n+\n+#[track_caller]\n+const fn a() -> u32 {\n+    panic!(\"hey\")\n+}\n+\n+#[track_caller]\n+const fn b() -> u32 {\n+    a()\n+}\n+\n+const fn c() -> u32 {\n+    b()\n+    //~^ ERROR evaluation of constant value failed\n+    //~| NOTE the evaluated program panicked\n+    //~| NOTE inside\n+}\n+\n+const X: u32 = c();\n+//~^ NOTE inside"}, {"sha": "9a458db6ea24d48291aa0c090a9b2d2abee275c0", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_track_caller.rs:16:5\n+   |\n+LL |     b()\n+   |     ^^^\n+   |     |\n+   |     the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:16:5\n+   |     inside `c` at $DIR/const_panic_track_caller.rs:16:5\n+...\n+LL | const X: u32 = c();\n+   |                --- inside `X` at $DIR/const_panic_track_caller.rs:22:16\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "729ae535ceff69a67b83477e2c0cf441ada945e2", "filename": "src/test/ui/consts/const-unwrap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.rs?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -4,9 +4,8 @@\n \n const FOO: i32 = Some(42i32).unwrap();\n \n-// This causes an error, but it is attributed to the `panic` *inside* `Option::unwrap` (maybe due\n-// to `track_caller`?). A note points to the originating `const`.\n-const BAR: i32 = Option::<i32>::None.unwrap(); //~ NOTE\n+const BAR: i32 = Option::<i32>::None.unwrap();\n+//~^ERROR: evaluation of constant value failed\n \n fn main() {\n     println!(\"{}\", FOO);"}, {"sha": "d2cbe4550f4bbd73d87de07cfb47297b6d80001c", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -1,18 +1,8 @@\n error[E0080]: evaluation of constant value failed\n-  --> $SRC_DIR/core/src/option.rs:LL:COL\n-   |\n-LL |             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                     |\n-   |                     the evaluated program panicked at 'called `Option::unwrap()` on a `None` value', $DIR/const-unwrap.rs:9:38\n-   |                     inside `Option::<i32>::unwrap` at $SRC_DIR/core/src/panic.rs:LL:COL\n-   | \n-  ::: $DIR/const-unwrap.rs:9:18\n+  --> $DIR/const-unwrap.rs:7:18\n    |\n LL | const BAR: i32 = Option::<i32>::None.unwrap();\n-   |                  ---------------------------- inside `BAR` at $DIR/const-unwrap.rs:9:18\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'called `Option::unwrap()` on a `None` value', $DIR/const-unwrap.rs:7:38\n \n error: aborting due to previous error\n "}, {"sha": "80ebcabcf8df8d4f86e6669999b6a68e80ce3aa7", "filename": "src/test/ui/feature-gates/feature-gate-more-qualified-paths.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-more-qualified-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/619c27a53959e2d79aadb01cba5b2c49756df771/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-more-qualified-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-more-qualified-paths.stderr?ref=619c27a53959e2d79aadb01cba5b2c49756df771", "patch": "@@ -4,7 +4,7 @@ error[E0658]: usage of qualified paths in this context is experimental\n LL |     let <Foo as A>::Assoc { br } = StructStruct { br: 2 };\n    |         ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #80080 <https://github.com/rust-lang/rust/issues/80080> for more information\n+   = note: see issue #86935 <https://github.com/rust-lang/rust/issues/86935> for more information\n    = help: add `#![feature(more_qualified_paths)]` to the crate attributes to enable\n \n error[E0658]: usage of qualified paths in this context is experimental\n@@ -13,7 +13,7 @@ error[E0658]: usage of qualified paths in this context is experimental\n LL |     let _ = <Foo as A>::Assoc { br: 2 };\n    |             ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #80080 <https://github.com/rust-lang/rust/issues/80080> for more information\n+   = note: see issue #86935 <https://github.com/rust-lang/rust/issues/86935> for more information\n    = help: add `#![feature(more_qualified_paths)]` to the crate attributes to enable\n \n error[E0658]: usage of qualified paths in this context is experimental\n@@ -22,7 +22,7 @@ error[E0658]: usage of qualified paths in this context is experimental\n LL |     let <E>::V(..) = E::V(0);\n    |         ^^^^^^\n    |\n-   = note: see issue #80080 <https://github.com/rust-lang/rust/issues/80080> for more information\n+   = note: see issue #86935 <https://github.com/rust-lang/rust/issues/86935> for more information\n    = help: add `#![feature(more_qualified_paths)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}]}