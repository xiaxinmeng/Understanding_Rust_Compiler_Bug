{"sha": "5a77f3006f0e15c35e905b6f4f08a33f7005c3d1", "node_id": "C_kwDOAAsO6NoAKDVhNzdmMzAwNmYwZTE1YzM1ZTkwNWI2ZjRmMDhhMzNmNzAwNWMzZDE", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-31T04:42:17Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-31T17:40:18Z"}, "message": "Merge `DocContext.{ty,lt,ct}_substs` into one map\n\nIt should be impossible to have more than one entry with a particular\nkey across the three maps, so they should be one map. In addition to\nmaking it impossible for multiple entries to exist, this should improve\nmemory usage since now only one map is allocated on the stack and heap.", "tree": {"sha": "4dbe99fc1d3300972008f7cc5e62df9e5c9c656d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dbe99fc1d3300972008f7cc5e62df9e5c9c656d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1", "html_url": "https://github.com/rust-lang/rust/commit/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc58e8ccc5d590c80f3fa07f8fe5cb2f3813aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc58e8ccc5d590c80f3fa07f8fe5cb2f3813aaa", "html_url": "https://github.com/rust-lang/rust/commit/bbc58e8ccc5d590c80f3fa07f8fe5cb2f3813aaa"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "93bce10a2d60601797071104c8b60efcbc505be4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5a77f3006f0e15c35e905b6f4f08a33f7005c3d1", "patch": "@@ -222,7 +222,7 @@ impl Clean<Lifetime> for hir::Lifetime {\n             | rl::Region::Free(_, node_id),\n         ) = def\n         {\n-            if let Some(lt) = cx.lt_substs.get(&node_id).cloned() {\n+            if let Some(lt) = cx.substs.get(&node_id).and_then(|p| p.as_lt()).cloned() {\n                 return lt;\n             }\n         }\n@@ -1157,7 +1157,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n     match qpath {\n         hir::QPath::Resolved(None, ref path) => {\n             if let Res::Def(DefKind::TyParam, did) = path.res {\n-                if let Some(new_ty) = cx.ty_substs.get(&did).cloned() {\n+                if let Some(new_ty) = cx.substs.get(&did).and_then(|p| p.as_ty()).cloned() {\n                     return new_ty;\n                 }\n                 if let Some(bounds) = cx.impl_trait_bounds.remove(&did.into()) {\n@@ -1227,9 +1227,7 @@ fn maybe_expand_private_type_alias(cx: &mut DocContext<'_>, path: &hir::Path<'_>\n     let hir::ItemKind::TyAlias(ty, generics) = alias else { return None };\n \n     let provided_params = &path.segments.last().expect(\"segments were empty\");\n-    let mut ty_substs = FxHashMap::default();\n-    let mut lt_substs = FxHashMap::default();\n-    let mut ct_substs = FxHashMap::default();\n+    let mut substs = FxHashMap::default();\n     let generic_args = provided_params.args();\n \n     let mut indices: hir::GenericParamCount = Default::default();\n@@ -1254,7 +1252,7 @@ fn maybe_expand_private_type_alias(cx: &mut DocContext<'_>, path: &hir::Path<'_>\n                     } else {\n                         self::types::Lifetime::elided()\n                     };\n-                    lt_substs.insert(lt_def_id.to_def_id(), cleaned);\n+                    substs.insert(lt_def_id.to_def_id(), SubstParam::Lifetime(cleaned));\n                 }\n                 indices.lifetimes += 1;\n             }\n@@ -1272,9 +1270,9 @@ fn maybe_expand_private_type_alias(cx: &mut DocContext<'_>, path: &hir::Path<'_>\n                     _ => None,\n                 });\n                 if let Some(ty) = type_ {\n-                    ty_substs.insert(ty_param_def_id.to_def_id(), ty.clean(cx));\n+                    substs.insert(ty_param_def_id.to_def_id(), SubstParam::Type(ty.clean(cx)));\n                 } else if let Some(default) = *default {\n-                    ty_substs.insert(ty_param_def_id.to_def_id(), default.clean(cx));\n+                    substs.insert(ty_param_def_id.to_def_id(), SubstParam::Type(default.clean(cx)));\n                 }\n                 indices.types += 1;\n             }\n@@ -1292,15 +1290,16 @@ fn maybe_expand_private_type_alias(cx: &mut DocContext<'_>, path: &hir::Path<'_>\n                     _ => None,\n                 });\n                 if let Some(ct) = const_ {\n-                    ct_substs.insert(const_param_def_id.to_def_id(), ct.clean(cx));\n+                    substs\n+                        .insert(const_param_def_id.to_def_id(), SubstParam::Constant(ct.clean(cx)));\n                 }\n                 // FIXME(const_generics_defaults)\n                 indices.consts += 1;\n             }\n         }\n     }\n \n-    Some(cx.enter_alias(ty_substs, lt_substs, ct_substs, |cx| ty.clean(cx)))\n+    Some(cx.enter_alias(substs, |cx| ty.clean(cx)))\n }\n \n impl Clean<Type> for hir::Ty<'_> {"}, {"sha": "e91d0aa839d957996d06d33b53c752cef89ebefa", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5a77f3006f0e15c35e905b6f4f08a33f7005c3d1", "patch": "@@ -2247,3 +2247,32 @@ impl TypeBinding {\n         }\n     }\n }\n+\n+/// The type, lifetime, or constant that a private type alias's parameter should be\n+/// replaced with when expanding a use of that type alias.\n+///\n+/// For example:\n+///\n+/// ```\n+/// type PrivAlias<T> = Vec<T>;\n+///\n+/// pub fn public_fn() -> PrivAlias<i32> { vec![] }\n+/// ```\n+///\n+/// `public_fn`'s docs will show it as returning `Vec<i32>`, since `PrivAlias` is private.\n+/// [`SubstParam`] is used to record that `T` should be mapped to `i32`.\n+crate enum SubstParam {\n+    Type(Type),\n+    Lifetime(Lifetime),\n+    Constant(Constant),\n+}\n+\n+impl SubstParam {\n+    crate fn as_ty(&self) -> Option<&Type> {\n+        if let Self::Type(ty) = self { Some(ty) } else { None }\n+    }\n+\n+    crate fn as_lt(&self) -> Option<&Lifetime> {\n+        if let Self::Lifetime(lt) = self { Some(lt) } else { None }\n+    }\n+}"}, {"sha": "7fa6484d238967d549cc69351ef1851877eebe46", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a77f3006f0e15c35e905b6f4f08a33f7005c3d1/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5a77f3006f0e15c35e905b6f4f08a33f7005c3d1", "patch": "@@ -54,14 +54,10 @@ crate struct DocContext<'tcx> {\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n     /// the same time.\n     crate active_extern_traits: FxHashSet<DefId>,\n-    // The current set of type and lifetime substitutions,\n+    // The current set of parameter substitutions,\n     // for expanding type aliases at the HIR level:\n-    /// Table `DefId` of type parameter -> substituted type\n-    crate ty_substs: FxHashMap<DefId, clean::Type>,\n-    /// Table `DefId` of lifetime parameter -> substituted lifetime\n-    crate lt_substs: FxHashMap<DefId, clean::Lifetime>,\n-    /// Table `DefId` of const parameter -> substituted const\n-    crate ct_substs: FxHashMap<DefId, clean::Constant>,\n+    /// Table `DefId` of type, lifetime, or const parameter -> substituted type, lifetime, or const\n+    crate substs: FxHashMap<DefId, clean::SubstParam>,\n     /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n     crate impl_trait_bounds: FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n@@ -104,25 +100,13 @@ impl<'tcx> DocContext<'tcx> {\n \n     /// Call the closure with the given parameters set as\n     /// the substitutions for a type alias' RHS.\n-    crate fn enter_alias<F, R>(\n-        &mut self,\n-        ty_substs: FxHashMap<DefId, clean::Type>,\n-        lt_substs: FxHashMap<DefId, clean::Lifetime>,\n-        ct_substs: FxHashMap<DefId, clean::Constant>,\n-        f: F,\n-    ) -> R\n+    crate fn enter_alias<F, R>(&mut self, substs: FxHashMap<DefId, clean::SubstParam>, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n     {\n-        let (old_tys, old_lts, old_cts) = (\n-            mem::replace(&mut self.ty_substs, ty_substs),\n-            mem::replace(&mut self.lt_substs, lt_substs),\n-            mem::replace(&mut self.ct_substs, ct_substs),\n-        );\n+        let old_substs = mem::replace(&mut self.substs, substs);\n         let r = f(self);\n-        self.ty_substs = old_tys;\n-        self.lt_substs = old_lts;\n-        self.ct_substs = old_cts;\n+        self.substs = old_substs;\n         r\n     }\n \n@@ -350,9 +334,7 @@ crate fn run_global_ctxt(\n         param_env: ParamEnv::empty(),\n         external_traits: Default::default(),\n         active_extern_traits: Default::default(),\n-        ty_substs: Default::default(),\n-        lt_substs: Default::default(),\n-        ct_substs: Default::default(),\n+        substs: Default::default(),\n         impl_trait_bounds: Default::default(),\n         generated_synthetics: Default::default(),\n         auto_traits: tcx"}]}