{"sha": "72cc1aca175044ceb003a8b270940bec1da85460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyY2MxYWNhMTc1MDQ0Y2ViMDAzYThiMjcwOTQwYmVjMWRhODU0NjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-10T00:31:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-19T02:09:41Z"}, "message": "Parse file mods from .rs files", "tree": {"sha": "8b9776f3a594c18f802636112edff4ff20748633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b9776f3a594c18f802636112edff4ff20748633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72cc1aca175044ceb003a8b270940bec1da85460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72cc1aca175044ceb003a8b270940bec1da85460", "html_url": "https://github.com/rust-lang/rust/commit/72cc1aca175044ceb003a8b270940bec1da85460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72cc1aca175044ceb003a8b270940bec1da85460/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddbff6fd2a46b2b7073794d200140f0407208c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbff6fd2a46b2b7073794d200140f0407208c07", "html_url": "https://github.com/rust-lang/rust/commit/ddbff6fd2a46b2b7073794d200140f0407208c07"}], "stats": {"total": 112, "additions": 88, "deletions": 24}, "files": [{"sha": "660e88c7101d2c7f9cf12f698905b34c10b80cdc", "filename": "src/libsyntax/parse/eval.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/72cc1aca175044ceb003a8b270940bec1da85460/src%2Flibsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cc1aca175044ceb003a8b270940bec1da85460/src%2Flibsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Feval.rs?ref=72cc1aca175044ceb003a8b270940bec1da85460", "patch": "@@ -1,7 +1,9 @@\n use parser::{Parser, SOURCE_FILE};\n use attr::parser_attr;\n+use ast_util::mk_sp;\n \n export eval_crate_directives_to_mod;\n+export eval_src_mod;\n \n type ctx =\n     @{sess: parse::parse_sess,\n@@ -79,29 +81,46 @@ fn cdir_path_opt(default: ~str, attrs: ~[ast::attribute]) -> ~str {\n     }\n }\n \n+fn eval_src_mod(cx: ctx, prefix: &Path, id: ast::ident,\n+                outer_attrs: ~[ast::attribute]) -> (ast::item_, ~[ast::attribute]) {\n+    let file_path = Path(cdir_path_opt(\n+        cx.sess.interner.get(id) + ~\".rs\", outer_attrs));\n+    let full_path = if file_path.is_absolute {\n+        copy file_path\n+    } else {\n+        prefix.push_many(file_path.components)\n+    };\n+    let p0 =\n+        new_parser_from_file(cx.sess, cx.cfg,\n+                             &full_path, SOURCE_FILE);\n+    let inner_attrs = p0.parse_inner_attrs_and_next();\n+    let mod_attrs = vec::append(outer_attrs, inner_attrs.inner);\n+    let first_item_outer_attrs = inner_attrs.next;\n+    let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs);\n+    return (ast::item_mod(m0), mod_attrs);\n+}\n+\n+// XXX: Duplicated from parser.rs\n+fn mk_item(ctx: ctx, lo: BytePos, hi: BytePos, +ident: ast::ident,\n+           +node: ast::item_, vis: ast::visibility,\n+           +attrs: ~[ast::attribute]) -> @ast::item {\n+    return @{ident: ident,\n+             attrs: attrs,\n+             id: next_node_id(ctx.sess),\n+             node: node,\n+             vis: vis,\n+             span: mk_sp(lo, hi)};\n+}\n+\n fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: &Path,\n                         view_items: &mut ~[@ast::view_item],\n                         items: &mut ~[@ast::item]) {\n     match cdir.node {\n       ast::cdir_src_mod(vis, id, attrs) => {\n-        let file_path = Path(cdir_path_opt(\n-            cx.sess.interner.get(id) + ~\".rs\", attrs));\n-        let full_path = if file_path.is_absolute {\n-            copy file_path\n-        } else {\n-            prefix.push_many(file_path.components)\n-        };\n-        let p0 =\n-            new_parser_from_file(cx.sess, cx.cfg,\n-                                 &full_path, SOURCE_FILE);\n-        let inner_attrs = p0.parse_inner_attrs_and_next();\n-        let mod_attrs = vec::append(attrs, inner_attrs.inner);\n-        let first_item_outer_attrs = inner_attrs.next;\n-        let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs);\n-\n-        let i = p0.mk_item(cdir.span.lo, cdir.span.hi,\n+        let (m, mod_attrs) = eval_src_mod(cx, prefix, id, attrs);\n+        let i = mk_item(cx, cdir.span.lo, cdir.span.hi,\n                            /* FIXME (#2543) */ copy id,\n-                           ast::item_mod(m0), vis, mod_attrs);\n+                           m, vis, mod_attrs);\n         items.push(i);\n       }\n       ast::cdir_dir_mod(vis, id, cdirs, attrs) => {"}, {"sha": "12ae135e52550b92da09830cbb3d95ac6e68d179", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/72cc1aca175044ceb003a8b270940bec1da85460/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cc1aca175044ceb003a8b270940bec1da85460/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=72cc1aca175044ceb003a8b270940bec1da85460", "patch": "@@ -2958,13 +2958,26 @@ impl Parser {\n         (id, item_const(ty, e), None)\n     }\n \n-    fn parse_item_mod() -> item_info {\n+    fn parse_item_mod(outer_attrs: ~[ast::attribute]) -> item_info {\n         let id = self.parse_ident();\n-        self.expect(token::LBRACE);\n-        let inner_attrs = self.parse_inner_attrs_and_next();\n-        let m = self.parse_mod_items(token::RBRACE, inner_attrs.next);\n-        self.expect(token::RBRACE);\n-        (id, item_mod(m), Some(inner_attrs.inner))\n+        if self.token == token::SEMI {\n+            self.bump();\n+            // This mod is in an external file. Let's go get it!\n+            let eval_ctx = @{\n+                sess: self.sess,\n+                cfg: self.cfg\n+            };\n+            let prefix = Path(self.sess.cm.span_to_filename(copy self.span));\n+            let prefix = prefix.dir_path();\n+            let (m, attrs) = eval::eval_src_mod(eval_ctx, &prefix, id, outer_attrs);\n+            (id, m, Some(move attrs))\n+        } else {\n+            self.expect(token::LBRACE);\n+            let inner_attrs = self.parse_inner_attrs_and_next();\n+            let m = self.parse_mod_items(token::RBRACE, inner_attrs.next);\n+            self.expect(token::RBRACE);\n+            (id, item_mod(m), Some(inner_attrs.inner))\n+        }\n     }\n \n     fn parse_item_foreign_fn( +attrs: ~[attribute]) -> @foreign_item {\n@@ -3360,7 +3373,7 @@ impl Parser {\n             return self.parse_item_foreign_mod(lo, visibility, attrs,\n                                                items_allowed);\n         } else if items_allowed && self.eat_keyword(~\"mod\") {\n-            let (ident, item_, extra_attrs) = self.parse_item_mod();\n+            let (ident, item_, extra_attrs) = self.parse_item_mod(attrs);\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));"}, {"sha": "313efe558de3287c3d8b56b52a8f109a9532dfa6", "filename": "src/test/compile-fail/mod_file_aux.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Fcompile-fail%2Fmod_file_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Fcompile-fail%2Fmod_file_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_aux.rs?ref=72cc1aca175044ceb003a8b270940bec1da85460", "patch": "@@ -0,0 +1,3 @@\n+// xfail-test Not a test. Used by other tests\n+\n+pub fn foo() -> int { 10 }"}, {"sha": "b34c11a07aca6bdbf1cc57e7b1473bd884914b69", "filename": "src/test/compile-fail/mod_file_correct_spans.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmod_file_correct_spans.rs?ref=72cc1aca175044ceb003a8b270940bec1da85460", "patch": "@@ -0,0 +1,7 @@\n+// Testing that the codemap is maintained correctly when parsing mods from external files\n+\n+mod mod_file_aux;\n+\n+fn main() {\n+    assert mod_file_aux::bar() == 10; //~ ERROR unresolved name\n+}\n\\ No newline at end of file"}, {"sha": "6e8cb220dc0792e09c17fce9b029d534a17d5055", "filename": "src/test/run-pass/mod_file.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Frun-pass%2Fmod_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Frun-pass%2Fmod_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod_file.rs?ref=72cc1aca175044ceb003a8b270940bec1da85460", "patch": "@@ -0,0 +1,9 @@\n+// xfail-pretty\n+\n+// Testing that a plain .rs file can load modules from other source files\n+\n+mod mod_file_aux;\n+\n+fn main() {\n+    assert mod_file_aux::foo() == 10;\n+}\n\\ No newline at end of file"}, {"sha": "313efe558de3287c3d8b56b52a8f109a9532dfa6", "filename": "src/test/run-pass/mod_file_aux.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Frun-pass%2Fmod_file_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Frun-pass%2Fmod_file_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod_file_aux.rs?ref=72cc1aca175044ceb003a8b270940bec1da85460", "patch": "@@ -0,0 +1,3 @@\n+// xfail-test Not a test. Used by other tests\n+\n+pub fn foo() -> int { 10 }"}, {"sha": "e7191099e4cdd294fb012ad8d76f74fa74c8b622", "filename": "src/test/run-pass/mod_file_with_path_attr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Frun-pass%2Fmod_file_with_path_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cc1aca175044ceb003a8b270940bec1da85460/src%2Ftest%2Frun-pass%2Fmod_file_with_path_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod_file_with_path_attr.rs?ref=72cc1aca175044ceb003a8b270940bec1da85460", "patch": "@@ -0,0 +1,10 @@\n+// xfail-pretty\n+\n+// Testing that a plain .rs file can load modules from other source files\n+\n+#[path = \"mod_file_aux.rs\"]\n+mod m;\n+\n+fn main() {\n+    assert m::foo() == 10;\n+}\n\\ No newline at end of file"}]}