{"sha": "26ab32499c0114ae6e01e76374ae06bcd7a973bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YWIzMjQ5OWMwMTE0YWU2ZTAxZTc2Mzc0YWUwNmJjZDdhOTczYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-19T01:56:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-19T01:56:14Z"}, "message": "Auto merge of #60949 - Centril:rollup-f918e1v, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #60370 (Mark core::alloc::Layout::from_size_align_unchecked const)\n - #60678 (Stabilize vecdeque_rotate)\n - #60924 (Explain that ? converts the error type using From)\n - #60931 (Use iter() for iterating arrays by slice)\n - #60934 (Declare DefIndex with the newtype_index macro)\n - #60943 (fix copy-paste typo in docs for ptr::read_volatile)\n - #60945 (Simplify BufRead::fill_buf doc example using NLL)\n - #60947 (Fix typos in docs of GlobalAlloc)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7d49276d07c041e3c8958d2d03778be4ec4a46f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d49276d07c041e3c8958d2d03778be4ec4a46f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26ab32499c0114ae6e01e76374ae06bcd7a973bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26ab32499c0114ae6e01e76374ae06bcd7a973bd", "html_url": "https://github.com/rust-lang/rust/commit/26ab32499c0114ae6e01e76374ae06bcd7a973bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26ab32499c0114ae6e01e76374ae06bcd7a973bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "963184bbb670c1ffa97fc28a98cd5e8473118859", "url": "https://api.github.com/repos/rust-lang/rust/commits/963184bbb670c1ffa97fc28a98cd5e8473118859", "html_url": "https://github.com/rust-lang/rust/commit/963184bbb670c1ffa97fc28a98cd5e8473118859"}, {"sha": "9389c694155f4bad4d1aaf5a78ee864155e8ae57", "url": "https://api.github.com/repos/rust-lang/rust/commits/9389c694155f4bad4d1aaf5a78ee864155e8ae57", "html_url": "https://github.com/rust-lang/rust/commit/9389c694155f4bad4d1aaf5a78ee864155e8ae57"}], "stats": {"total": 209, "additions": 108, "deletions": 101}, "files": [{"sha": "31e49d06a7b5a963d3701ed6123ea50f8c792bf8", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -1948,8 +1948,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vecdeque_rotate)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = (0..10).collect();\n@@ -1963,7 +1961,7 @@ impl<T> VecDeque<T> {\n     /// }\n     /// assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n     /// ```\n-    #[unstable(feature = \"vecdeque_rotate\", issue = \"56686\")]\n+    #[stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")]\n     pub fn rotate_left(&mut self, mid: usize) {\n         assert!(mid <= self.len());\n         let k = self.len() - mid;\n@@ -1993,8 +1991,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vecdeque_rotate)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = (0..10).collect();\n@@ -2008,7 +2004,7 @@ impl<T> VecDeque<T> {\n     /// }\n     /// assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n     /// ```\n-    #[unstable(feature = \"vecdeque_rotate\", issue = \"56686\")]\n+    #[stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")]\n     pub fn rotate_right(&mut self, k: usize) {\n         assert!(k <= self.len());\n         let mid = self.len() - k;"}, {"sha": "989beb3b1bfd90afbfd55626953080d31016bb39", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -143,8 +143,8 @@ fn test_union() {\n #[test]\n // Only tests the simple function definition with respect to intersection\n fn test_is_disjoint() {\n-    let one = [1].into_iter().collect::<BTreeSet<_>>();\n-    let two = [2].into_iter().collect::<BTreeSet<_>>();\n+    let one = [1].iter().collect::<BTreeSet<_>>();\n+    let two = [2].iter().collect::<BTreeSet<_>>();\n     assert!(one.is_disjoint(&two));\n }\n "}, {"sha": "ddb3120e89d781635645c424a9eba34d803e85d2", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -6,7 +6,6 @@\n #![feature(repeat_generic_slice)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n-#![feature(vecdeque_rotate)]\n #![deny(rust_2018_idioms)]\n \n use std::hash::{Hash, Hasher};"}, {"sha": "f25631e028eecb15506ddf803c80482fb4b411c4", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -99,7 +99,7 @@ impl Layout {\n     /// [`Layout::from_size_align`](#method.from_size_align).\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n-    pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n+    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         Layout { size_: size, align_: NonZeroUsize::new_unchecked(align) }\n     }\n \n@@ -480,7 +480,7 @@ pub unsafe trait GlobalAlloc {\n     ///   this allocator,\n     ///\n     /// * `layout` must be the same layout that was used\n-    ///   to allocated that block of memory,\n+    ///   to allocate that block of memory,\n     #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout);\n \n@@ -535,7 +535,7 @@ pub unsafe trait GlobalAlloc {\n     /// * `ptr` must be currently allocated via this allocator,\n     ///\n     /// * `layout` must be the same layout that was used\n-    ///   to allocated that block of memory,\n+    ///   to allocate that block of memory,\n     ///\n     /// * `new_size` must be greater than zero.\n     ///"}, {"sha": "38c7c9bc4d086c53e9e27eed48168dff5670b4ef", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -356,7 +356,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// let a = [0, 1, 2, 3, 4, 5];\n-    /// let mut iter = a.into_iter().step_by(2);\n+    /// let mut iter = a.iter().step_by(2);\n     ///\n     /// assert_eq!(iter.next(), Some(&0));\n     /// assert_eq!(iter.next(), Some(&2));\n@@ -531,7 +531,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let mut iter = a.into_iter().map(|x| 2 * x);\n+    /// let mut iter = a.iter().map(|x| 2 * x);\n     ///\n     /// assert_eq!(iter.next(), Some(2));\n     /// assert_eq!(iter.next(), Some(4));\n@@ -620,7 +620,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [0i32, 1, 2];\n     ///\n-    /// let mut iter = a.into_iter().filter(|x| x.is_positive());\n+    /// let mut iter = a.iter().filter(|x| x.is_positive());\n     ///\n     /// assert_eq!(iter.next(), Some(&1));\n     /// assert_eq!(iter.next(), Some(&2));\n@@ -634,7 +634,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [0, 1, 2];\n     ///\n-    /// let mut iter = a.into_iter().filter(|x| **x > 1); // need two *s!\n+    /// let mut iter = a.iter().filter(|x| **x > 1); // need two *s!\n     ///\n     /// assert_eq!(iter.next(), Some(&2));\n     /// assert_eq!(iter.next(), None);\n@@ -646,7 +646,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [0, 1, 2];\n     ///\n-    /// let mut iter = a.into_iter().filter(|&x| *x > 1); // both & and *\n+    /// let mut iter = a.iter().filter(|&x| *x > 1); // both & and *\n     ///\n     /// assert_eq!(iter.next(), Some(&2));\n     /// assert_eq!(iter.next(), None);\n@@ -657,7 +657,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [0, 1, 2];\n     ///\n-    /// let mut iter = a.into_iter().filter(|&&x| x > 1); // two &s\n+    /// let mut iter = a.iter().filter(|&&x| x > 1); // two &s\n     ///\n     /// assert_eq!(iter.next(), Some(&2));\n     /// assert_eq!(iter.next(), None);\n@@ -837,7 +837,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1i32, 0, 1];\n     ///\n-    /// let mut iter = a.into_iter().skip_while(|x| x.is_negative());\n+    /// let mut iter = a.iter().skip_while(|x| x.is_negative());\n     ///\n     /// assert_eq!(iter.next(), Some(&0));\n     /// assert_eq!(iter.next(), Some(&1));\n@@ -851,7 +851,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1, 0, 1];\n     ///\n-    /// let mut iter = a.into_iter().skip_while(|x| **x < 0); // need two *s!\n+    /// let mut iter = a.iter().skip_while(|x| **x < 0); // need two *s!\n     ///\n     /// assert_eq!(iter.next(), Some(&0));\n     /// assert_eq!(iter.next(), Some(&1));\n@@ -863,7 +863,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1, 0, 1, -2];\n     ///\n-    /// let mut iter = a.into_iter().skip_while(|x| **x < 0);\n+    /// let mut iter = a.iter().skip_while(|x| **x < 0);\n     ///\n     /// assert_eq!(iter.next(), Some(&0));\n     /// assert_eq!(iter.next(), Some(&1));\n@@ -898,7 +898,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1i32, 0, 1];\n     ///\n-    /// let mut iter = a.into_iter().take_while(|x| x.is_negative());\n+    /// let mut iter = a.iter().take_while(|x| x.is_negative());\n     ///\n     /// assert_eq!(iter.next(), Some(&-1));\n     /// assert_eq!(iter.next(), None);\n@@ -911,7 +911,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1, 0, 1];\n     ///\n-    /// let mut iter = a.into_iter().take_while(|x| **x < 0); // need two *s!\n+    /// let mut iter = a.iter().take_while(|x| **x < 0); // need two *s!\n     ///\n     /// assert_eq!(iter.next(), Some(&-1));\n     /// assert_eq!(iter.next(), None);\n@@ -922,7 +922,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1, 0, 1, -2];\n     ///\n-    /// let mut iter = a.into_iter().take_while(|x| **x < 0);\n+    /// let mut iter = a.iter().take_while(|x| **x < 0);\n     ///\n     /// assert_eq!(iter.next(), Some(&-1));\n     ///\n@@ -937,7 +937,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// let a = [1, 2, 3, 4];\n-    /// let mut iter = a.into_iter();\n+    /// let mut iter = a.iter();\n     ///\n     /// let result: Vec<i32> = iter.by_ref()\n     ///                            .take_while(|n| **n != 3)\n@@ -1321,7 +1321,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let iter = a.into_iter();\n+    /// let iter = a.iter();\n     ///\n     /// let sum: i32 = iter.take(5).fold(0, |acc, i| acc + i );\n     ///\n@@ -1334,7 +1334,7 @@ pub trait Iterator {\n     /// // let's try that again\n     /// let a = [1, 2, 3];\n     ///\n-    /// let mut iter = a.into_iter();\n+    /// let mut iter = a.iter();\n     ///\n     /// // instead, we add in a .by_ref()\n     /// let sum: i32 = iter.by_ref().take(2).fold(0, |acc, i| acc + i );\n@@ -1479,7 +1479,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 3];\n     ///\n     /// let (even, odd): (Vec<i32>, Vec<i32>) = a\n-    ///     .into_iter()\n+    ///     .iter()\n     ///     .partition(|&n| n % 2 == 0);\n     ///\n     /// assert_eq!(even, vec![2]);"}, {"sha": "ada784e9ce70504171dadec906a592d59e66e991", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -837,7 +837,7 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n ///\n /// * `src` must be properly aligned.\n ///\n-/// Like [`read`], `read_unaligned` creates a bitwise copy of `T`, regardless of\n+/// Like [`read`], `read_volatile` creates a bitwise copy of `T`, regardless of\n /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the returned\n /// value and the value at `*src` can [violate memory safety][read-ownership].\n /// However, storing non-[`Copy`] types in volatile memory is almost certainly"}, {"sha": "63537ba23d84dc0edfabc9384a45e7a7a2249b7b", "filename": "src/libcore/tests/alloc.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Ftests%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Ftests%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Falloc.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -0,0 +1,10 @@\n+use core::alloc::Layout;\n+\n+#[test]\n+fn const_unchecked_layout() {\n+    const SIZE: usize = 0x2000;\n+    const ALIGN: usize = 0x1000;\n+    const LAYOUT: Layout = unsafe { Layout::from_size_align_unchecked(SIZE, ALIGN) };\n+    assert_eq!(LAYOUT.size(), SIZE);\n+    assert_eq!(LAYOUT.align(), ALIGN);\n+}"}, {"sha": "c617596aba80159af2ecb5f3c4967bc099897f8f", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -31,10 +31,12 @@\n #![feature(slice_partition_dedup)]\n #![feature(copy_within)]\n #![feature(int_error_matching)]\n+#![feature(const_fn)]\n #![warn(rust_2018_idioms)]\n \n extern crate test;\n \n+mod alloc;\n mod any;\n mod array;\n mod ascii;"}, {"sha": "0c4f5fb3fc167bd701087e504c7fa5feab06c876", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -96,34 +96,20 @@ impl fmt::Display for CrateNum {\n impl serialize::UseSpecializedEncodable for CrateNum {}\n impl serialize::UseSpecializedDecodable for CrateNum {}\n \n-/// A DefIndex is an index into the hir-map for a crate, identifying a\n-/// particular definition. It should really be considered an interned\n-/// shorthand for a particular DefPath.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n-pub struct DefIndex(u32);\n-\n-/// The crate root is always assigned index 0 by the AST Map code,\n-/// thanks to `NodeCollector::new`.\n-pub const CRATE_DEF_INDEX: DefIndex = DefIndex(0);\n+newtype_index! {\n+    /// A DefIndex is an index into the hir-map for a crate, identifying a\n+    /// particular definition. It should really be considered an interned\n+    /// shorthand for a particular DefPath.\n+    pub struct DefIndex {\n+        DEBUG_FORMAT = \"DefIndex({})\",\n \n-impl fmt::Debug for DefIndex {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"DefIndex({})\", self.as_array_index())\n+        /// The crate root is always assigned index 0 by the AST Map code,\n+        /// thanks to `NodeCollector::new`.\n+        const CRATE_DEF_INDEX = 0,\n     }\n }\n \n impl DefIndex {\n-    /// Converts this DefIndex into a zero-based array index.\n-    #[inline]\n-    pub fn as_array_index(&self) -> usize {\n-        self.0 as usize\n-    }\n-\n-    #[inline]\n-    pub fn from_array_index(i: usize) -> DefIndex {\n-        DefIndex(i as u32)\n-    }\n-\n     // Proc macros from a proc-macro crate have a kind of virtual DefIndex. This\n     // function maps the index of the macro within the crate (which is also the\n     // index of the macro in the CrateMetadata::proc_macros array) to the\n@@ -132,7 +118,7 @@ impl DefIndex {\n         // DefIndex for proc macros start from FIRST_FREE_DEF_INDEX,\n         // because the first FIRST_FREE_DEF_INDEX indexes are reserved\n         // for internal use.\n-        let def_index = DefIndex::from_array_index(\n+        let def_index = DefIndex::from(\n             proc_macro_index.checked_add(FIRST_FREE_DEF_INDEX)\n                 .expect(\"integer overflow adding `proc_macro_index`\"));\n         assert!(def_index != CRATE_DEF_INDEX);\n@@ -141,19 +127,11 @@ impl DefIndex {\n \n     // This function is the reverse of from_proc_macro_index() above.\n     pub fn to_proc_macro_index(self: DefIndex) -> usize {\n-        self.as_array_index().checked_sub(FIRST_FREE_DEF_INDEX)\n+        self.index().checked_sub(FIRST_FREE_DEF_INDEX)\n             .unwrap_or_else(|| {\n                 bug!(\"using local index {:?} as proc-macro index\", self)\n             })\n     }\n-\n-    pub fn from_raw_u32(x: u32) -> DefIndex {\n-        DefIndex(x)\n-    }\n-\n-    pub fn as_raw_u32(&self) -> u32 {\n-        self.0\n-    }\n }\n \n impl serialize::UseSpecializedEncodable for DefIndex {}\n@@ -169,7 +147,7 @@ pub struct DefId {\n \n impl fmt::Debug for DefId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"DefId({}:{}\", self.krate, self.index.as_array_index())?;\n+        write!(f, \"DefId({}:{}\", self.krate, self.index.index())?;\n \n         ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {"}, {"sha": "eeba628b3bf2168ad943ac41fe4cca076ed5bf72", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -226,7 +226,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>) {\n         debug!(\"hir_map: {:?} => {:?}\", id, entry);\n-        let local_map = &mut self.map[id.owner.as_array_index()];\n+        let local_map = &mut self.map[id.owner.index()];\n         let i = id.local_id.as_u32() as usize;\n         if local_map.is_none() {\n             *local_map = Some(IndexVec::with_capacity(i + 1));"}, {"sha": "1cc9a2c0e8a1b9d875b7f9a31520c5644f727e76", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -38,7 +38,7 @@ impl DefPathTable {\n                 def_path_hash: DefPathHash)\n                 -> DefIndex {\n         let index = {\n-            let index = DefIndex::from_array_index(self.index_to_key.len());\n+            let index = DefIndex::from(self.index_to_key.len());\n             debug!(\"DefPathTable::insert() - {:?} <-> {:?}\", key, index);\n             self.index_to_key.push(key);\n             index\n@@ -49,17 +49,17 @@ impl DefPathTable {\n     }\n \n     pub fn next_id(&self) -> DefIndex {\n-        DefIndex::from_array_index(self.index_to_key.len())\n+        DefIndex::from(self.index_to_key.len())\n     }\n \n     #[inline(always)]\n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n-        self.index_to_key[index.as_array_index()].clone()\n+        self.index_to_key[index.index()].clone()\n     }\n \n     #[inline(always)]\n     pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n-        let ret = self.def_path_hashes[index.as_array_index()];\n+        let ret = self.def_path_hashes[index.index()];\n         debug!(\"def_path_hash({:?}) = {:?}\", index, ret);\n         return ret\n     }\n@@ -74,7 +74,7 @@ impl DefPathTable {\n                 .map(|(index, &hash)| {\n                     let def_id = DefId {\n                         krate: cnum,\n-                        index: DefIndex::from_array_index(index),\n+                        index: DefIndex::from(index),\n                     };\n                     (hash, def_id)\n                 })\n@@ -387,7 +387,7 @@ impl Definitions {\n     #[inline]\n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> {\n         if def_id.krate == LOCAL_CRATE {\n-            let node_id = self.def_index_to_node[def_id.index.as_array_index()];\n+            let node_id = self.def_index_to_node[def_id.index.index()];\n             if node_id != ast::DUMMY_NODE_ID {\n                 return Some(node_id);\n             }\n@@ -417,7 +417,7 @@ impl Definitions {\n \n     #[inline]\n     pub fn def_index_to_hir_id(&self, def_index: DefIndex) -> hir::HirId {\n-        let node_id = self.def_index_to_node[def_index.as_array_index()];\n+        let node_id = self.def_index_to_node[def_index.index()];\n         self.node_to_hir_id[node_id]\n     }\n \n@@ -508,7 +508,7 @@ impl Definitions {\n \n         // Create the definition.\n         let index = self.table.allocate(key, def_path_hash);\n-        assert_eq!(index.as_array_index(), self.def_index_to_node.len());\n+        assert_eq!(index.index(), self.def_index_to_node.len());\n         self.def_index_to_node.push(node_id);\n \n         // Some things for which we allocate DefIndices don't correspond to\n@@ -653,7 +653,7 @@ macro_rules! define_global_metadata_kind {\n                                           .position(|k| *k == def_key)\n                                           .unwrap();\n \n-                DefIndex::from_array_index(index)\n+                DefIndex::from(index)\n             }\n \n             fn name(&self) -> Symbol {"}, {"sha": "4b94f772554e76910aa228856853fe0ad3e65cb0", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -189,7 +189,7 @@ pub struct Map<'hir> {\n impl<'hir> Map<'hir> {\n     #[inline]\n     fn lookup(&self, id: HirId) -> Option<&Entry<'hir>> {\n-        let local_map = self.map.get(id.owner.as_array_index())?;\n+        let local_map = self.map.get(id.owner.index())?;\n         local_map.as_ref()?.get(id.local_id)?.as_ref()\n     }\n \n@@ -1023,7 +1023,7 @@ impl<'hir> Map<'hir> {\n             local_map.iter_enumerated().filter_map(move |(i, entry)| entry.map(move |_| {\n                 // Reconstruct the HirId based on the 3 indices we used to find it\n                 HirId {\n-                    owner: DefIndex::from_array_index(array_index),\n+                    owner: DefIndex::from(array_index),\n                     local_id: i,\n                 }\n             }))"}, {"sha": "1878afd581dd48746bc6fd4a2512f39ba2848d00", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -56,7 +56,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n     }\n \n     let requested_node = env::var(\"RUST_REGION_GRAPH_NODE\")\n-        .ok().and_then(|s| s.parse().map(DefIndex::from_raw_u32).ok());\n+        .ok().and_then(|s| s.parse().map(DefIndex::from_u32).ok());\n \n     if requested_node.is_some() && requested_node != Some(context.index) {\n         return;\n@@ -90,7 +90,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n             let mut new_str = String::new();\n             for c in output_template.chars() {\n                 if c == '%' {\n-                    new_str.push_str(&context.index.as_raw_u32().to_string());\n+                    new_str.push_str(&context.index.as_u32().to_string());\n                 } else {\n                     new_str.push(c);\n                 }"}, {"sha": "9019c4a0575d40b9c5c12df1aa7fb6335cd946cf", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -643,13 +643,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             .map(|s| &s == \"?\")\n                             .unwrap_or(false);\n                         let is_from = format!(\"{}\", trait_ref).starts_with(\"std::convert::From<\");\n-                        let message = if is_try && is_from {\n-                            Some(format!(\n+                        let (message, note) = if is_try && is_from {\n+                            (Some(format!(\n                                 \"`?` couldn't convert the error to `{}`\",\n                                 trait_ref.self_ty(),\n+                            )), Some(\n+                                \"the question mark operation (`?`) implicitly performs a \\\n+                                 conversion on the error value using the `From` trait\".to_owned()\n                             ))\n                         } else {\n-                            message\n+                            (message, note)\n                         };\n \n                         let mut err = struct_span_err!("}, {"sha": "fdd1a821e31b56964bae3db7af15581bc05fd1a7", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -298,7 +298,7 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n     // negated `CrateNum` (so remote definitions are visited first) and then\n     // by a flattened version of the `DefIndex`.\n     trait_impls.sort_unstable_by_key(|def_id| {\n-        (-(def_id.krate.as_u32() as i64), def_id.index.as_array_index())\n+        (-(def_id.krate.as_u32() as i64), def_id.index.index())\n     });\n \n     for impl_def_id in trait_impls {"}, {"sha": "812321ff5e6c36f8fd16f772752f03b6d25eb5c2", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -648,7 +648,7 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n     // have to be user friendly.\n     let name = format!(\n         \"hir_id_{}_{}\",\n-        hir_id.owner.as_array_index(),\n+        hir_id.owner.index(),\n         hir_id.local_id.index(),\n     );\n     let lcfg = LabelledCFG {"}, {"sha": "d882fe6f27ecc7a8f115306a43066b0a428cbb73", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> SpecializedDecoder<DefId> for DecodeContext<'a, 'tcx> {\n impl<'a, 'tcx> SpecializedDecoder<DefIndex> for DecodeContext<'a, 'tcx> {\n     #[inline]\n     fn specialized_decode(&mut self) -> Result<DefIndex, Self::Error> {\n-        Ok(DefIndex::from_raw_u32(self.read_u32()?))\n+        Ok(DefIndex::from_u32(self.read_u32()?))\n     }\n }\n "}, {"sha": "939aadcc9ec9bfeefd0b44d1fca11df5060d0298", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -134,7 +134,7 @@ impl<'a, 'tcx> SpecializedEncoder<DefId> for EncodeContext<'a, 'tcx> {\n impl<'a, 'tcx> SpecializedEncoder<DefIndex> for EncodeContext<'a, 'tcx> {\n     #[inline]\n     fn specialized_encode(&mut self, def_index: &DefIndex) -> Result<(), Self::Error> {\n-        self.emit_u32(def_index.as_raw_u32())\n+        self.emit_u32(def_index.as_u32())\n     }\n }\n "}, {"sha": "934e871559c79939010ffb30377007afc5b96ba6", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -93,7 +93,7 @@ impl Index {\n     pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry<'_>>) {\n         assert!(entry.position < (u32::MAX as usize));\n         let position = entry.position as u32;\n-        let array_index = item.as_array_index();\n+        let array_index = item.index();\n \n         let positions = &mut self.positions;\n         assert!(u32::read_from_bytes_at(positions, array_index) == u32::MAX,\n@@ -126,7 +126,7 @@ impl<'tcx> LazySeq<Index> {\n                def_index,\n                self.len);\n \n-        let position = u32::read_from_bytes_at(bytes, 1 + def_index.as_array_index());\n+        let position = u32::read_from_bytes_at(bytes, 1 + def_index.index());\n         if position == u32::MAX {\n             debug!(\"Index::lookup: position=u32::MAX\");\n             None"}, {"sha": "fc4c6b3fd3f244afc5a41d37239e39c31ba8f987", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -27,7 +27,7 @@ pub fn graphviz_safe_def_name(def_id: DefId) -> String {\n     format!(\n         \"{}_{}\",\n         def_id.krate.index(),\n-        def_id.index.as_array_index(),\n+        def_id.index.index(),\n     )\n }\n "}, {"sha": "e34a33ef8fad9b2a7476e2d8a096e11b5e610ceb", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -172,7 +172,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>) {\n         let def_id = DefId {\n             krate: CrateNum::BuiltinMacros,\n-            index: DefIndex::from_array_index(self.macro_map.len()),\n+            index: DefIndex::from(self.macro_map.len()),\n         };\n         let kind = ext.kind();\n         self.macro_map.insert(def_id, ext);"}, {"sha": "d34f5633946bfa281773da81d21cab2b44013bcc", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -1170,7 +1170,7 @@ fn generated_code(span: Span) -> bool {\n fn id_from_def_id(id: DefId) -> rls_data::Id {\n     rls_data::Id {\n         krate: id.krate.as_u32(),\n-        index: id.index.as_raw_u32(),\n+        index: id.index.as_u32(),\n     }\n }\n "}, {"sha": "4fae7e080b14aef046cf68e4c73af475a0bc436a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -538,7 +538,7 @@ fn check_deprecated_options(matches: &getopts::Matches, diag: &errors::Handler)\n        \"passes\",\n     ];\n \n-    for flag in deprecated_flags.into_iter() {\n+    for flag in deprecated_flags.iter() {\n         if matches.opt_present(flag) {\n             let mut err = diag.struct_warn(&format!(\"the '{}' flag is considered deprecated\",\n                                                     flag));"}, {"sha": "2a3bc5e99617f468375a834110a7e7cf45e431ed", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> DocContext<'tcx> {\n             crate_num,\n             DefId {\n                 krate: crate_num,\n-                index: DefIndex::from_array_index(def_id.index.as_array_index() + 1),\n+                index: DefIndex::from(def_id.index.index() + 1),\n             },\n         );\n "}, {"sha": "36ce89558db7b81edc6eb0fd10c099ef5096ba81", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -506,7 +506,7 @@ pub fn initial_ids() -> Vec<String> {\n      \"methods\",\n      \"deref-methods\",\n      \"implementations\",\n-    ].into_iter().map(|id| (String::from(*id))).collect()\n+    ].iter().map(|id| (String::from(*id))).collect()\n }\n \n /// Generates the documentation for `crate` into the directory `dst`"}, {"sha": "917199f8ea8d03fe770c6a806a59d54ae207eac4", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -1579,18 +1579,13 @@ pub trait BufRead: Read {\n     /// let stdin = io::stdin();\n     /// let mut stdin = stdin.lock();\n     ///\n-    /// // we can't have two `&mut` references to `stdin`, so use a block\n-    /// // to end the borrow early.\n-    /// let length = {\n-    ///     let buffer = stdin.fill_buf().unwrap();\n+    /// let buffer = stdin.fill_buf().unwrap();\n     ///\n-    ///     // work with buffer\n-    ///     println!(\"{:?}\", buffer);\n-    ///\n-    ///     buffer.len()\n-    /// };\n+    /// // work with buffer\n+    /// println!(\"{:?}\", buffer);\n     ///\n     /// // ensure the bytes we worked with aren't returned again later\n+    /// let length = buffer.len();\n     /// stdin.consume(length);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "65ac7e44926d0dc175cd8bafac9b138445b15ed6", "filename": "src/test/ui/consts/std/alloc.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.rs?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -0,0 +1,10 @@\n+use std::alloc::Layout;\n+\n+// ok\n+const LAYOUT_VALID: Layout = unsafe { Layout::from_size_align_unchecked(0x1000, 0x08) };\n+\n+// not ok, since alignment needs to be non-zero.\n+const LAYOUT_INVALID: Layout = unsafe { Layout::from_size_align_unchecked(0x1000, 0x00) };\n+//~^ ERROR it is undefined behavior to use this value\n+\n+fn main() {}"}, {"sha": "74a8f3daf6aaa94ffd376a0bf16e2ffb4c7328e8", "filename": "src/test/ui/consts/std/alloc.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.stderr?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -0,0 +1,11 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/alloc.rs:7:1\n+   |\n+LL | const LAYOUT_INVALID: Layout = unsafe { Layout::from_size_align_unchecked(0x1000, 0x00) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0 at .align_, but expected something greater or equal to 1\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "04b8c3aa35396374ba058fc471b989d485ae34eb", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -4,6 +4,7 @@ error[E0277]: `?` couldn't convert the error to `()`\n LL |     Err(5)?;\n    |           ^ the trait `std::convert::From<{integer}>` is not implemented for `()`\n    |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = note: required by `std::convert::From::from`\n \n error: aborting due to previous error"}, {"sha": "e1c2c6b675e9bb1d1dd2d7a2ae56d7f1b73f9801", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -4,6 +4,7 @@ error[E0277]: `?` couldn't convert the error to `i32`\n LL |         Err(\"\")?;\n    |                ^ the trait `std::convert::From<&str>` is not implemented for `i32`\n    |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following implementations were found:\n              <i32 as std::convert::From<bool>>\n              <i32 as std::convert::From<i16>>"}, {"sha": "db5046f8c151af029bc24d9f3b3a59b5b8c39c55", "filename": "src/test/ui/try-on-option.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26ab32499c0114ae6e01e76374ae06bcd7a973bd/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=26ab32499c0114ae6e01e76374ae06bcd7a973bd", "patch": "@@ -4,6 +4,7 @@ error[E0277]: `?` couldn't convert the error to `()`\n LL |     x?;\n    |      ^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n    |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)"}]}