{"sha": "a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "node_id": "C_kwDOAAsO6NoAKGE5NDc5M2Q4ZDE3ZTRjZmUyZTcyN2MzMGMzNmUxNzRiOGQ2YjZlZTM", "commit": {"author": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-12-08T12:52:33Z"}, "committer": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-12-11T04:51:40Z"}, "message": "Implement blocking output\n\nThis allows decoupling `Command::spawn` and `Command::output`. This is\nuseful for targets which do support launching programs in blocking mode\nbut do not support multitasking (Eg: UEFI).\n\nThis was originally conceived when working on https://github.com/rust-lang/rust/pull/100316\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "4a6bb73b64331a1ab40165c5c8892bedb1ec837e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a6bb73b64331a1ab40165c5c8892bedb1ec837e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE38wTHvJPLWVvpQTWBc71x4nlWnQFAmOVYd0ACgkQBc71x4nl\nWnQRHA//Rtm8SOF/yEQcnKpd42b2tCad+GKK6+dAkIlB2fbrwuHNMZviMJ4bINXt\nS79sQghXxuiCVkgYMv4WIlXaGxi4OkepFXf00nBkWDcvi8U7zUOmzq4YQ5yR3yil\n1ESmJUPIZtz5tQ8D9sWfehPQbZ2QVDqeGWWYis7SvjeepaxtY6JzwpxUfrOLVxiC\nipkP5O6LTvDCvZmWwNcKPa8+7HSmVwrRWLObongTFj/PXcLxDdyTnzsgqq2NUPOk\n2uoEGNc4XCf80/gW9LdcLpjnmyiSK8MKjKPq6eRumgZO+IVCFw9hxS3zczzQDAfK\nsGwEqGxzG7X+X/kaML9/UfP/nwCL+f065B0zgugnklwdS9+6kDJTcL8qNKlW1/+3\nvLttO6ZcH9TKbKYGdyJd34biwhplhwZRE4Y8xe6VaFB68MgiSuxjstRg0EaY5UrF\n2yih0S1idrDINJTFgtaj8GlGcBk3UPYsu1mub+lZQGViVTVKqVgc8j0oZotrFw+W\nLEDwx28inFN0TPH3kvsmXvvIm0bhuj2bIEJfaHyoZqnQ3V6re2eyklC+8v05dHra\nd/Sb5ZQPMrh510p0hIP23cOwGnLsww0vN0o03Eb7dWVAFQdPh3iXZlF1ix7hQo6c\nZAvaFQXB3WEZjXFugSZ/o/m3kRZ2057q/jUevvENRZjv76H+CVA=\n=qC46\n-----END PGP SIGNATURE-----", "payload": "tree 4a6bb73b64331a1ab40165c5c8892bedb1ec837e\nparent 5479fe5f70bb32f037ff97de03ed185bdf2f54b7\nauthor Ayush Singh <ayushsingh1325@gmail.com> 1670503953 +0530\ncommitter Ayush Singh <ayushsingh1325@gmail.com> 1670734300 +0530\n\nImplement blocking output\n\nThis allows decoupling `Command::spawn` and `Command::output`. This is\nuseful for targets which do support launching programs in blocking mode\nbut do not support multitasking (Eg: UEFI).\n\nThis was originally conceived when working on https://github.com/rust-lang/rust/pull/100316\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "html_url": "https://github.com/rust-lang/rust/commit/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/comments", "author": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5479fe5f70bb32f037ff97de03ed185bdf2f54b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5479fe5f70bb32f037ff97de03ed185bdf2f54b7", "html_url": "https://github.com/rust-lang/rust/commit/5479fe5f70bb32f037ff97de03ed185bdf2f54b7"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "17aff342c1599455b2160b43b456bdb8f752246e", "filename": "library/std/src/process.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "patch": "@@ -911,10 +911,8 @@ impl Command {\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn output(&mut self) -> io::Result<Output> {\n-        self.inner\n-            .spawn(imp::Stdio::MakePipe, false)\n-            .map(Child::from_inner)\n-            .and_then(|p| p.wait_with_output())\n+        let (status, stdout, stderr) = self.inner.output()?;\n+        Ok(Output { status: ExitStatus(status), stdout, stderr })\n     }\n \n     /// Executes a command as a child process, waiting for it to finish and"}, {"sha": "4c99d758c93a3156e1ccfafe6252443c4f4468b5", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "patch": "@@ -35,6 +35,11 @@ impl Command {\n         Ok((Process { handle: Handle::new(process_handle) }, ours))\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n+\n     pub fn exec(&mut self, default: Stdio) -> io::Error {\n         if self.saw_nul() {\n             return io::const_io_error!("}, {"sha": "45616850a3719130ee6944254922aa43f431663e", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "patch": "@@ -132,6 +132,11 @@ impl Command {\n         }\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n+\n     // Attempts to fork the process. If successful, returns Ok((0, -1))\n     // in the child, and Ok((child_pid, -1)) in the parent.\n     #[cfg(not(target_os = \"linux\"))]"}, {"sha": "f28ca58d02038ade1af035abc4f7abc627455b0d", "filename": "library/std/src/sys/unix/process/process_unsupported.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs?ref=a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "patch": "@@ -20,6 +20,10 @@ impl Command {\n         unsupported()\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        unsupported()\n+    }\n+\n     pub fn exec(&mut self, _default: Stdio) -> io::Error {\n         unsupported_err()\n     }"}, {"sha": "f549d37c301165fad9019ca014f5770398cdcf5c", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "patch": "@@ -108,6 +108,11 @@ impl Command {\n         }\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n+\n     pub fn exec(&mut self, default: Stdio) -> io::Error {\n         let ret = Command::spawn(self, default, false);\n         match ret {"}, {"sha": "0bba673b458cb690011d413db588dffb9bde88c1", "filename": "library/std/src/sys/unsupported/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs?ref=a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "patch": "@@ -15,7 +15,7 @@ impl AnonPipe {\n         self.0\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+    pub fn read_to_end(&self, _buf: &mut Vec<u8>) -> io::Result<usize> {\n         self.0\n     }\n "}, {"sha": "a494f2d6b4c1529314c3a2a4b91184d9d6fa1697", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "patch": "@@ -75,6 +75,10 @@ impl Command {\n     ) -> io::Result<(Process, StdioPipes)> {\n         unsupported()\n     }\n+\n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        unsupported()\n+    }\n }\n \n impl From<AnonPipe> for Stdio {"}, {"sha": "10bc949e1f45faf7c167e66e6b5c61a4c2aae980", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "patch": "@@ -351,6 +351,11 @@ impl Command {\n             ))\n         }\n     }\n+\n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n }\n \n impl fmt::Debug for Command {"}, {"sha": "ae11412067b549a719ec243442bd2beb7606c270", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "patch": "@@ -4,7 +4,9 @@\n use crate::collections::BTreeMap;\n use crate::env;\n use crate::ffi::{OsStr, OsString};\n-use crate::sys::process::EnvKey;\n+use crate::io;\n+use crate::sys::pipe::read2;\n+use crate::sys::process::{EnvKey, ExitStatus, Process, StdioPipes};\n \n // Stores a set of changes to an environment\n #[derive(Clone, Debug)]\n@@ -117,3 +119,30 @@ impl<'a> ExactSizeIterator for CommandEnvs<'a> {\n         self.iter.is_empty()\n     }\n }\n+\n+pub fn wait_with_output(\n+    mut process: Process,\n+    mut pipes: StdioPipes,\n+) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+    drop(pipes.stdin.take());\n+\n+    let (mut stdout, mut stderr) = (Vec::new(), Vec::new());\n+    match (pipes.stdout.take(), pipes.stderr.take()) {\n+        (None, None) => {}\n+        (Some(out), None) => {\n+            let res = out.read_to_end(&mut stdout);\n+            res.unwrap();\n+        }\n+        (None, Some(err)) => {\n+            let res = err.read_to_end(&mut stderr);\n+            res.unwrap();\n+        }\n+        (Some(out), Some(err)) => {\n+            let res = read2(out, &mut stdout, err, &mut stderr);\n+            res.unwrap();\n+        }\n+    }\n+\n+    let status = process.wait()?;\n+    Ok((status, stdout, stderr))\n+}"}]}