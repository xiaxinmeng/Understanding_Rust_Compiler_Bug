{"sha": "bb383edb69e2aaa718dc94147275053005d112e3", "node_id": "C_kwDOAAsO6NoAKGJiMzgzZWRiNjllMmFhYTcxOGRjOTQxNDcyNzUwNTMwMDVkMTEyZTM", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-07T16:46:18Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-07T16:46:23Z"}, "message": "Move some expansion logic into generation-time, fix section header links, remove ID from line numbers, fix horizontal scrolling on non-expanded elements", "tree": {"sha": "1020f3b981ef933b301e5b932ea3bc051d9f1a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1020f3b981ef933b301e5b932ea3bc051d9f1a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb383edb69e2aaa718dc94147275053005d112e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb383edb69e2aaa718dc94147275053005d112e3", "html_url": "https://github.com/rust-lang/rust/commit/bb383edb69e2aaa718dc94147275053005d112e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb383edb69e2aaa718dc94147275053005d112e3/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5584c795975e9cc07884b479c7cb7aef2f47c231", "url": "https://api.github.com/repos/rust-lang/rust/commits/5584c795975e9cc07884b479c7cb7aef2f47c231", "html_url": "https://github.com/rust-lang/rust/commit/5584c795975e9cc07884b479c7cb7aef2f47c231"}], "stats": {"total": 94, "additions": 54, "deletions": 40}, "files": [{"sha": "5e4b068cf153c4a5e4a0adf93c97b89de9399abe", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bb383edb69e2aaa718dc94147275053005d112e3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb383edb69e2aaa718dc94147275053005d112e3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=bb383edb69e2aaa718dc94147275053005d112e3", "patch": "@@ -2461,6 +2461,7 @@ fn collect_paths_for_type(first_ty: clean::Type, cache: &Cache) -> Vec<String> {\n }\n \n const MAX_FULL_EXAMPLES: usize = 5;\n+const NUM_VISIBLE_LINES: usize = 10;\n \n /// Generates the HTML for example call locations generated via the --scrape-examples flag.\n fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item: &clean::Item) {\n@@ -2480,10 +2481,10 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n         w,\n         \"<div class=\\\"docblock scraped-example-list\\\">\\\n           <span></span>\n-          <h5 id=\\\"scraped-examples\\\" class=\\\"section-header\\\">\\\n-             <a href=\\\"#{}\\\">Examples found in repository</a>\\\n+          <h5 id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n+             <a href=\\\"#{id}\\\">Examples found in repository</a>\\\n           </h5>\",\n-        id\n+        id = id\n     );\n \n     // Generate the HTML for a single example, being the title and code block\n@@ -2503,54 +2504,58 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n         assert!(!call_data.locations.is_empty());\n         let min_loc =\n             call_data.locations.iter().min_by_key(|loc| loc.enclosing_item.byte_span.0).unwrap();\n-        let (byte_offset, _) = min_loc.enclosing_item.byte_span;\n-        let (line_offset, _) = min_loc.enclosing_item.line_span;\n-        let byte_ceiling =\n-            call_data.locations.iter().map(|loc| loc.enclosing_item.byte_span.1).max().unwrap();\n+        let byte_min = min_loc.enclosing_item.byte_span.0;\n+        let line_min = min_loc.enclosing_item.line_span.0;\n+        let max_loc =\n+            call_data.locations.iter().max_by_key(|loc| loc.enclosing_item.byte_span.1).unwrap();\n+        let byte_max = max_loc.enclosing_item.byte_span.1;\n+        let line_max = max_loc.enclosing_item.line_span.1;\n \n         // The output code is limited to that byte range.\n-        let contents_subset = &contents[(byte_offset as usize)..(byte_ceiling as usize)];\n+        let contents_subset = &contents[(byte_min as usize)..(byte_max as usize)];\n \n         // The call locations need to be updated to reflect that the size of the program has changed.\n-        // Specifically, the ranges are all subtracted by `byte_offset` since that's the new zero point.\n+        // Specifically, the ranges are all subtracted by `byte_min` since that's the new zero point.\n         let (byte_ranges, line_ranges): (Vec<_>, Vec<_>) = call_data\n             .locations\n             .iter()\n             .map(|loc| {\n                 let (byte_lo, byte_hi) = loc.call_expr.byte_span;\n                 let (line_lo, line_hi) = loc.call_expr.line_span;\n-                (\n-                    (byte_lo - byte_offset, byte_hi - byte_offset),\n-                    (line_lo - line_offset, line_hi - line_offset),\n-                )\n+                ((byte_lo - byte_min, byte_hi - byte_min), (line_lo - line_min, line_hi - line_min))\n             })\n             .unzip();\n \n         let (init_min, init_max) = line_ranges[0];\n         let line_range = if init_min == init_max {\n-            format!(\"line {}\", init_min + line_offset + 1)\n+            format!(\"line {}\", init_min + line_min + 1)\n         } else {\n-            format!(\"lines {}-{}\", init_min + line_offset + 1, init_max + line_offset + 1)\n+            format!(\"lines {}-{}\", init_min + line_min + 1, init_max + line_min + 1)\n         };\n \n+        let needs_expansion = line_max - line_min > NUM_VISIBLE_LINES;\n+\n         write!(\n             w,\n-            \"<div class=\\\"scraped-example\\\" data-locs=\\\"{locations}\\\" data-offset=\\\"{offset}\\\">\\\n+            \"<div class=\\\"scraped-example {expanded_cls}\\\" data-locs=\\\"{locations}\\\">\\\n                 <div class=\\\"scraped-example-title\\\">\\\n-                   {name} (<a href=\\\"{root}{url}\\\" target=\\\"_blank\\\">{line_range}</a>)\\\n+                   {name} (<a href=\\\"{root}{url}\\\">{line_range}</a>)\\\n                 </div>\\\n                 <div class=\\\"code-wrapper\\\">\",\n             root = cx.root_path(),\n             url = call_data.url,\n             name = call_data.display_name,\n             line_range = line_range,\n-            offset = line_offset,\n+            expanded_cls = if needs_expansion { \"\" } else { \"expanded\" },\n             // The locations are encoded as a data attribute, so they can be read\n             // later by the JS for interactions.\n             locations = serde_json::to_string(&line_ranges).unwrap(),\n         );\n         write!(w, r#\"<span class=\"prev\">&pr;</span> <span class=\"next\">&sc;</span>\"#);\n-        write!(w, r#\"<span class=\"expand\">&varr;</span>\"#);\n+\n+        if needs_expansion {\n+            write!(w, r#\"<span class=\"expand\">&varr;</span>\"#);\n+        }\n \n         // Look for the example file in the source map if it exists, otherwise return a dummy span\n         let file_span = (|| {\n@@ -2565,8 +2570,8 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n                 _ => false,\n             })?;\n             Some(rustc_span::Span::with_root_ctxt(\n-                file.start_pos + BytePos(byte_offset),\n-                file.start_pos + BytePos(byte_ceiling),\n+                file.start_pos + BytePos(byte_min),\n+                file.start_pos + BytePos(byte_max),\n             ))\n         })()\n         .unwrap_or(rustc_span::DUMMY_SP);\n@@ -2584,8 +2589,8 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n             file_span,\n             cx,\n             &root_path,\n-            Some(line_offset),\n             Some(highlight::DecorationInfo(decoration_info)),\n+            sources::SourceContext::Embedded { offset: line_min },\n         );\n         write!(w, \"</div></div>\");\n \n@@ -2648,7 +2653,7 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n             it.for_each(|(_, call_data)| {\n                 write!(\n                     w,\n-                    r#\"<li><a href=\"{root}{url}\" target=\"_blank\">{name}</a></li>\"#,\n+                    r#\"<li><a href=\"{root}{url}\">{name}</a></li>\"#,\n                     root = cx.root_path(),\n                     url = call_data.url,\n                     name = call_data.display_name"}, {"sha": "ffefc5450cd730c594393dc3d050089e73084861", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb383edb69e2aaa718dc94147275053005d112e3/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb383edb69e2aaa718dc94147275053005d112e3/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=bb383edb69e2aaa718dc94147275053005d112e3", "patch": "@@ -212,7 +212,7 @@ impl SourceCollector<'_, 'tcx> {\n                     &self.cx,\n                     &root_path,\n                     None,\n-                    None,\n+                    SourceContext::Standalone,\n                 )\n             },\n             &self.cx.shared.style_files,\n@@ -250,6 +250,11 @@ where\n     }\n }\n \n+crate enum SourceContext {\n+    Standalone,\n+    Embedded { offset: usize },\n+}\n+\n /// Wrapper struct to render the source code of a file. This will do things like\n /// adding line numbers to the left-hand side.\n crate fn print_src(\n@@ -259,8 +264,8 @@ crate fn print_src(\n     file_span: rustc_span::Span,\n     context: &Context<'_>,\n     root_path: &str,\n-    offset: Option<usize>,\n     decoration_info: Option<highlight::DecorationInfo>,\n+    source_context: SourceContext,\n ) {\n     let lines = s.lines().count();\n     let mut line_numbers = Buffer::empty_from(buf);\n@@ -271,9 +276,15 @@ crate fn print_src(\n         tmp /= 10;\n     }\n     line_numbers.write_str(\"<pre class=\\\"line-numbers\\\">\");\n-    let offset = offset.unwrap_or(0);\n     for i in 1..=lines {\n-        writeln!(line_numbers, \"<span id=\\\"{0}\\\">{0:1$}</span>\", i + offset, cols);\n+        match source_context {\n+            SourceContext::Standalone => {\n+                writeln!(line_numbers, \"<span id=\\\"{0}\\\">{0:1$}</span>\", i, cols)\n+            }\n+            SourceContext::Embedded { offset } => {\n+                writeln!(line_numbers, \"<span>{0:1$}</span>\", i + offset, cols)\n+            }\n+        }\n     }\n     line_numbers.write_str(\"</pre>\");\n     highlight::render_with_highlighting("}, {"sha": "820f6a00f20840994b7234781c8770d45186ec96", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb383edb69e2aaa718dc94147275053005d112e3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/bb383edb69e2aaa718dc94147275053005d112e3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=bb383edb69e2aaa718dc94147275053005d112e3", "patch": "@@ -1978,12 +1978,16 @@ details.undocumented[open] > summary::before {\n \tfont-family: 'Fira Sans';\n }\n \n-.scraped-example:not(.expanded) .code-wrapper pre.line-numbers,\n-.scraped-example:not(.expanded) .code-wrapper .example-wrap pre.rust {\n+.scraped-example:not(.expanded) .code-wrapper pre.line-numbers {\n \toverflow: hidden;\n \tmax-height: 240px;\n }\n \n+.scraped-example:not(.expanded) .code-wrapper .example-wrap pre.rust {\n+\toverflow-y: hidden;\n+\tmax-height: 240px;\n+}\n+\n .scraped-example .code-wrapper .prev {\n \tposition: absolute;\n \ttop: 0.25em;\n@@ -2019,7 +2023,7 @@ details.undocumented[open] > summary::before {\n .scraped-example:not(.expanded) .code-wrapper:before {\n \tcontent: \" \";\n \twidth: 100%;\n-\theight: 10px;\n+\theight: 5px;\n \tposition: absolute;\n \tz-index: 100;\n \ttop: 0;\n@@ -2029,7 +2033,7 @@ details.undocumented[open] > summary::before {\n .scraped-example:not(.expanded) .code-wrapper:after {\n \tcontent: \" \";\n \twidth: 100%;\n-\theight: 10px;\n+\theight: 5px;\n \tposition: absolute;\n \tz-index: 100;\n \tbottom: 0;"}, {"sha": "307843f242614355408f49b59abbc3fdd594a24e", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb383edb69e2aaa718dc94147275053005d112e3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/bb383edb69e2aaa718dc94147275053005d112e3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=bb383edb69e2aaa718dc94147275053005d112e3", "patch": "@@ -15,7 +15,8 @@\n \n     function updateScrapedExample(example) {\n         var locs = JSON.parse(example.attributes.getNamedItem(\"data-locs\").textContent);\n-        var offset = parseInt(example.attributes.getNamedItem(\"data-offset\").textContent);\n+        var first_line_no = example.querySelector('.line-numbers > span:first-child');\n+        var offset = parseInt(first_line_no.innerHTML) - 1;\n \n         var locIndex = 0;\n         var highlights = example.querySelectorAll('.highlight');\n@@ -68,11 +69,8 @@\n             example.querySelector('.next').remove();\n         }\n \n-        var codeEl = example.querySelector('.rust');\n-        var codeOverflows = codeEl.scrollHeight > codeEl.clientHeight;\n         var expandButton = example.querySelector('.expand');\n-        if (codeOverflows) {\n-            // If file is larger than default height, give option to expand the viewer\n+        if (expandButton) {\n             expandButton.addEventListener('click', function () {\n                 if (hasClass(example, \"expanded\")) {\n                     removeClass(example, \"expanded\");\n@@ -81,10 +79,6 @@\n                     addClass(example, \"expanded\");\n                 }\n             });\n-        } else {\n-            // Otherwise remove expansion buttons\n-            addClass(example, 'expanded');\n-            expandButton.remove();\n         }\n \n         // Start with the first example in view"}]}