{"sha": "931d99f61f93e244a60fb0a65198382ef9d66a75", "node_id": "C_kwDOAAsO6NoAKDkzMWQ5OWY2MWY5M2UyNDRhNjBmYjBhNjUxOTgzODJlZjlkNjZhNzU", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-15T21:40:03Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:23Z"}, "message": "Make overflow handling more precise", "tree": {"sha": "adfd2dc3bd7e65134e64b5a64f24b63e84195f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adfd2dc3bd7e65134e64b5a64f24b63e84195f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/931d99f61f93e244a60fb0a65198382ef9d66a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/931d99f61f93e244a60fb0a65198382ef9d66a75", "html_url": "https://github.com/rust-lang/rust/commit/931d99f61f93e244a60fb0a65198382ef9d66a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/931d99f61f93e244a60fb0a65198382ef9d66a75/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be9013f02b629ec7b6d40a5a4ff7966e2df751f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/be9013f02b629ec7b6d40a5a4ff7966e2df751f6", "html_url": "https://github.com/rust-lang/rust/commit/be9013f02b629ec7b6d40a5a4ff7966e2df751f6"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "d4111fa313aa0b2ebb09a2f6c54607b05b7456ef", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/931d99f61f93e244a60fb0a65198382ef9d66a75/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931d99f61f93e244a60fb0a65198382ef9d66a75/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=931d99f61f93e244a60fb0a65198382ef9d66a75", "patch": "@@ -73,16 +73,26 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                 });\n \n                 if value_target.is_some() || overflow_target.is_some() {\n-                    let (val, mut overflow) = self.binary_op(state, *op, left, right);\n-\n-                    if !self.propagate_overflow {\n-                        overflow = FlatSet::Top;\n-                    }\n+                    let (val, overflow) = self.binary_op(state, *op, left, right);\n \n                     if let Some(value_target) = value_target {\n                         state.assign_idx(value_target, ValueOrPlaceOrRef::Value(val), self.map());\n                     }\n                     if let Some(overflow_target) = overflow_target {\n+                        let overflow = match overflow {\n+                            FlatSet::Top => FlatSet::Top,\n+                            FlatSet::Elem(overflow) => {\n+                                if overflow && !self.propagate_overflow {\n+                                    FlatSet::Top\n+                                } else {\n+                                    self.wrap_scalar(\n+                                        Scalar::from_bool(overflow),\n+                                        self.tcx.types.bool,\n+                                    )\n+                                }\n+                            }\n+                            FlatSet::Bottom => FlatSet::Bottom,\n+                        };\n                         state.assign_idx(\n                             overflow_target,\n                             ValueOrPlaceOrRef::Value(overflow),\n@@ -120,8 +130,8 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                 }\n             }\n             Rvalue::BinaryOp(op, box (left, right)) => {\n+                // Overflows must be ignored here.\n                 let (val, _overflow) = self.binary_op(state, *op, left, right);\n-                // FIXME: Just ignore overflow here?\n                 ValueOrPlaceOrRef::Value(val)\n             }\n             Rvalue::UnaryOp(op, operand) => match self.eval_operand(operand, state) {\n@@ -230,16 +240,13 @@ impl<'tcx> ConstAnalysis<'tcx> {\n         op: BinOp,\n         left: &Operand<'tcx>,\n         right: &Operand<'tcx>,\n-    ) -> (FlatSet<ScalarTy<'tcx>>, FlatSet<ScalarTy<'tcx>>) {\n+    ) -> (FlatSet<ScalarTy<'tcx>>, FlatSet<bool>) {\n         let left = self.eval_operand(left, state);\n         let right = self.eval_operand(right, state);\n         match (left, right) {\n             (FlatSet::Elem(left), FlatSet::Elem(right)) => {\n                 match self.ecx.overflowing_binary_op(op, &left, &right) {\n-                    Ok((val, overflow, ty)) => (\n-                        self.wrap_scalar(val, ty),\n-                        self.wrap_scalar(Scalar::from_bool(overflow), self.tcx.types.bool),\n-                    ),\n+                    Ok((val, overflow, ty)) => (self.wrap_scalar(val, ty), FlatSet::Elem(overflow)),\n                     _ => (FlatSet::Top, FlatSet::Top),\n                 }\n             }"}]}