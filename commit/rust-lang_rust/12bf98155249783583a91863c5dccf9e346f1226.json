{"sha": "12bf98155249783583a91863c5dccf9e346f1226", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYmY5ODE1NTI0OTc4MzU4M2E5MTg2M2M1ZGNjZjllMzQ2ZjEyMjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-01T23:09:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-01T23:09:28Z"}, "message": "Rollup merge of #60428 - wesleywiser:refactor_const_eval, r=oli-obk\n\nRefactor `eval_body_using_ecx` so that it doesn't need to query for MIR\n\nThis is the first step toward removing the `mir` field of `ConstPropagator` which will eventually allow us to actually const propagate in MIR.\n\nr? @oli-obk", "tree": {"sha": "64974234cd5d3dceca6ff8a47f736b4711deb3b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64974234cd5d3dceca6ff8a47f736b4711deb3b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12bf98155249783583a91863c5dccf9e346f1226", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcyicoCRBK7hj4Ov3rIwAAdHIIAAFwwG/LdqKQKjFHx9k0o28O\n84KJUeSCKqx4puEL8Gro4AYvfuphuaePsSl8RZEyfRnou44SJ1bmjC4nBcUL8nmq\nuvX9YG0jE1q/2NnCIF7fDC4IBowFkJiNCJcTyxoj8ZnZQ47/2q+2dzY4Br3o7kbb\nO9D+KDlkSLUVT+8rVBHsmL3dTtVgJN2A9torBop/46C0s7c+9sEdkkuKMxOp1CYb\nJFYz2QT/eNQ6owlmvd2UHbKlbnDlobAn7BX71sR5SEeZjsiKDEbHHDNi/Q+96UR8\ntOO5Z8bkyvOVQc8fY3vJteFSBMO+SCfRev9w9378ITtxyKOJDVDzVkX3ulI6hRc=\n=rxk7\n-----END PGP SIGNATURE-----\n", "payload": "tree 64974234cd5d3dceca6ff8a47f736b4711deb3b5\nparent a7cbd92d133b97cef7cdeeb2ba15c38db872e552\nparent eadf48e796cc6913d064b683a8d4708ce8d447cc\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556752168 +0200\ncommitter GitHub <noreply@github.com> 1556752168 +0200\n\nRollup merge of #60428 - wesleywiser:refactor_const_eval, r=oli-obk\n\nRefactor `eval_body_using_ecx` so that it doesn't need to query for MIR\n\nThis is the first step toward removing the `mir` field of `ConstPropagator` which will eventually allow us to actually const propagate in MIR.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12bf98155249783583a91863c5dccf9e346f1226", "html_url": "https://github.com/rust-lang/rust/commit/12bf98155249783583a91863c5dccf9e346f1226", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12bf98155249783583a91863c5dccf9e346f1226/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7cbd92d133b97cef7cdeeb2ba15c38db872e552", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7cbd92d133b97cef7cdeeb2ba15c38db872e552", "html_url": "https://github.com/rust-lang/rust/commit/a7cbd92d133b97cef7cdeeb2ba15c38db872e552"}, {"sha": "eadf48e796cc6913d064b683a8d4708ce8d447cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/eadf48e796cc6913d064b683a8d4708ce8d447cc", "html_url": "https://github.com/rust-lang/rust/commit/eadf48e796cc6913d064b683a8d4708ce8d447cc"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "681a204d76e1d64d4778eda5da65cb50f4b6bb54", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/12bf98155249783583a91863c5dccf9e346f1226/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12bf98155249783583a91863c5dccf9e346f1226/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=12bf98155249783583a91863c5dccf9e346f1226", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n     let span = tcx.def_span(cid.instance.def_id());\n     let mut ecx = mk_eval_cx(tcx, span, param_env);\n-    eval_body_using_ecx(&mut ecx, cid, Some(mir), param_env)\n+    eval_body_using_ecx(&mut ecx, cid, mir, param_env)\n }\n \n fn mplace_to_const<'tcx>(\n@@ -107,37 +107,15 @@ fn op_to_const<'tcx>(\n     ty::Const { val, ty: op.layout.ty }\n }\n \n-fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    cid: GlobalId<'tcx>,\n-    mir: Option<&'mir mir::Mir<'tcx>>,\n-    param_env: ty::ParamEnv<'tcx>,\n-) -> (EvalResult<'tcx, MPlaceTy<'tcx>>, CompileTimeEvalContext<'a, 'mir, 'tcx>) {\n-    // we start out with the best span we have\n-    // and try improving it down the road when more information is available\n-    let span = tcx.def_span(cid.instance.def_id());\n-    let span = mir.map(|mir| mir.span).unwrap_or(span);\n-    let mut ecx = InterpretCx::new(tcx.at(span), param_env, CompileTimeInterpreter::new());\n-    let r = eval_body_using_ecx(&mut ecx, cid, mir, param_env);\n-    (r, ecx)\n-}\n-\n // Returns a pointer to where the result lives\n fn eval_body_using_ecx<'mir, 'tcx>(\n     ecx: &mut CompileTimeEvalContext<'_, 'mir, 'tcx>,\n     cid: GlobalId<'tcx>,\n-    mir: Option<&'mir mir::Mir<'tcx>>,\n+    mir: &'mir mir::Mir<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n     debug!(\"eval_body_using_ecx: {:?}, {:?}\", cid, param_env);\n     let tcx = ecx.tcx.tcx;\n-    let mut mir = match mir {\n-        Some(mir) => mir,\n-        None => ecx.load_mir(cid.instance.def)?,\n-    };\n-    if let Some(index) = cid.promoted {\n-        mir = &mir.promoted[index];\n-    }\n     let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n     assert!(!layout.is_unsized());\n     let ret = ecx.allocate(layout, MemoryKind::Stack);\n@@ -618,8 +596,19 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n         return Err(ErrorHandled::Reported);\n     }\n \n-    let (res, ecx) = eval_body_and_ecx(tcx, cid, None, key.param_env);\n-    res.and_then(|place| {\n+    let span = tcx.def_span(cid.instance.def_id());\n+    let mut ecx = InterpretCx::new(tcx.at(span), key.param_env, CompileTimeInterpreter::new());\n+\n+    let res = ecx.load_mir(cid.instance.def);\n+    res.map(|mir| {\n+        if let Some(index) = cid.promoted {\n+            &mir.promoted[index]\n+        } else {\n+            mir\n+        }\n+    }).and_then(\n+        |mir| eval_body_using_ecx(&mut ecx, cid, mir, key.param_env)\n+    ).and_then(|place| {\n         Ok(RawConst {\n             alloc_id: place.to_ptr().expect(\"we allocated this ptr!\").alloc_id,\n             ty: place.layout.ty"}, {"sha": "2465adf46cdf436781ddef8c5b36154a38fbf54d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12bf98155249783583a91863c5dccf9e346f1226/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12bf98155249783583a91863c5dccf9e346f1226/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=12bf98155249783583a91863c5dccf9e346f1226", "patch": "@@ -301,7 +301,8 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                 // cannot use `const_eval` here, because that would require having the MIR\n                 // for the current function available, but we're producing said MIR right now\n                 let res = self.use_ecx(source_info, |this| {\n-                    eval_promoted(this.tcx, cid, this.mir, this.param_env)\n+                    let mir = &this.mir.promoted[promoted];\n+                    eval_promoted(this.tcx, cid, mir, this.param_env)\n                 })?;\n                 trace!(\"evaluated promoted {:?} to {:?}\", promoted, res);\n                 Some((res.into(), source_info.span))"}]}