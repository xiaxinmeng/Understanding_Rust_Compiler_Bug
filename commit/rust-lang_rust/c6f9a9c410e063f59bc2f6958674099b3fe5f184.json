{"sha": "c6f9a9c410e063f59bc2f6958674099b3fe5f184", "node_id": "C_kwDOAAsO6NoAKGM2ZjlhOWM0MTBlMDYzZjU5YmMyZjY5NTg2NzQwOTliM2ZlNWYxODQ", "commit": {"author": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-17T14:18:19Z"}, "committer": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-17T14:18:19Z"}, "message": "Moved structs to rustc_expand::errors, added several more migrations, fixed slug name", "tree": {"sha": "5952411a6f83af897bde1581f89307aed87e29e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5952411a6f83af897bde1581f89307aed87e29e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6f9a9c410e063f59bc2f6958674099b3fe5f184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f9a9c410e063f59bc2f6958674099b3fe5f184", "html_url": "https://github.com/rust-lang/rust/commit/c6f9a9c410e063f59bc2f6958674099b3fe5f184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6f9a9c410e063f59bc2f6958674099b3fe5f184/comments", "author": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ce216def236055f5bee03d06085d0ec9c270a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/72ce216def236055f5bee03d06085d0ec9c270a9", "html_url": "https://github.com/rust-lang/rust/commit/72ce216def236055f5bee03d06085d0ec9c270a9"}], "stats": {"total": 106, "additions": 70, "deletions": 36}, "files": [{"sha": "ee76a4f45005d1c5ed71db9903ce3d5e541b14f3", "filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl?ref=c6f9a9c410e063f59bc2f6958674099b3fe5f184", "patch": "@@ -10,5 +10,13 @@ expand_expr_repeat_no_syntax_vars =\n expand_must_repeat_once = \n     this must repeat at least once\n \n-count_repetition_misplaced =\n-    `count` can not be placed inside the inner-most repetition\n\\ No newline at end of file\n+expand_count_repetition_misplaced =\n+    `count` can not be placed inside the inner-most repetition\n+\n+expand_meta_var_expr_unrecognized_var =\n+    variable `{$key}` is not recognized in meta-variable expression\n+\n+expand_var_still_repeating =\n+    variable '{$ident}' is still repeating at this depth\n+\n+expand_meta_var_dif_seq_matchers = {$msg}\n\\ No newline at end of file"}, {"sha": "356f9dfdb3b2e79223109779322ac398108523eb", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=c6f9a9c410e063f59bc2f6958674099b3fe5f184", "patch": "@@ -8,7 +8,7 @@ use rustc_error_messages::FluentValue;\n use rustc_hir as hir;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n use rustc_span::{edition::Edition, Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::fmt;\n@@ -87,6 +87,7 @@ into_diagnostic_arg_using_display!(\n     hir::Target,\n     Edition,\n     Ident,\n+    MacroRulesNormalizedIdent,\n );\n \n impl IntoDiagnosticArg for bool {"}, {"sha": "f8b8750a789659998522a1800fa41f6ae881e796", "filename": "compiler/rustc_expand/src/errors.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=c6f9a9c410e063f59bc2f6958674099b3fe5f184", "patch": "@@ -0,0 +1,50 @@\n+use rustc_macros::SessionDiagnostic;\n+use rustc_span::Span;\n+use rustc_span::symbol::{MacroRulesNormalizedIdent};\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::expr_repeat_no_syntax_vars)]\n+pub(crate) struct NoSyntaxVarsExprRepeat {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::must_repeat_once)]\n+pub(crate) struct MustRepeatOnce {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::count_repetition_misplaced)]\n+pub(crate) struct CountRepetitionMisplaced {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::meta_var_expr_unrecognized_var)]\n+pub(crate) struct MetaVarExprUnrecognizedVar {\n+    #[primary_span]\n+    pub span: Span,\n+    pub key: MacroRulesNormalizedIdent,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::var_still_repeating)]\n+pub(crate) struct VarStillRepeating {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ident: MacroRulesNormalizedIdent,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(expand::var_still_repeating)]\n+pub(crate) struct MetaVarsDifSeqMatchers {\n+    #[primary_span]\n+    pub span: Span,\n+    pub msg: String,\n+}\n+\n+"}, {"sha": "e1dde1672c1905daa3677cbbd9d600ff32503fc9", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=c6f9a9c410e063f59bc2f6958674099b3fe5f184", "patch": "@@ -25,6 +25,7 @@ pub mod base;\n pub mod build;\n #[macro_use]\n pub mod config;\n+pub mod errors;\n pub mod expand;\n pub mod module;\n pub mod proc_macro;"}, {"sha": "bec6d1a2df7d873301f1d9ebe3568fb8143f574e", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 7, "deletions": 33, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f9a9c410e063f59bc2f6958674099b3fe5f184/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=c6f9a9c410e063f59bc2f6958674099b3fe5f184", "patch": "@@ -1,4 +1,8 @@\n use crate::base::ExtCtxt;\n+use crate::errors::{\n+    CountRepetitionMisplaced, MetaVarExprUnrecognizedVar, MetaVarsDifSeqMatchers, MustRepeatOnce,\n+    NoSyntaxVarsExprRepeat, VarStillRepeating,\n+};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, MatchedTokenTree, NamedMatch};\n use crate::mbe::{self, MetaVarExpr};\n use rustc_ast::mut_visit::{self, MutVisitor};\n@@ -7,7 +11,6 @@ use rustc_ast::tokenstream::{DelimSpan, Spacing, TokenStream, TokenTree};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, PResult};\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n-use rustc_macros::SessionDiagnostic;\n use rustc_span::hygiene::{LocalExpnId, Transparency};\n use rustc_span::symbol::{sym, Ident, MacroRulesNormalizedIdent};\n use rustc_span::Span;\n@@ -54,20 +57,6 @@ impl<'a> Iterator for Frame<'a> {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error(expand::expr_repeat_no_syntax_vars)]\n-struct NoSyntaxVarsExprRepeat {\n-    #[primary_span]\n-    span: Span,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[error(expand::must_repeat_once)]\n-struct MustRepeatOnce {\n-    #[primary_span]\n-    span: Span,\n-}\n-\n /// This can do Macro-By-Example transcription.\n /// - `interp` is a map of meta-variables to the tokens (non-terminals) they matched in the\n ///   invocation. We are assuming we already know there is a match.\n@@ -188,7 +177,7 @@ pub(super) fn transcribe<'a>(\n                         // happens when two meta-variables are used in the same repetition in a\n                         // sequence, but they come from different sequence matchers and repeat\n                         // different amounts.\n-                        return Err(cx.struct_span_err(seq.span(), &msg));\n+                        return Err(cx.create_err(MetaVarsDifSeqMatchers { span: seq.span(), msg }));\n                     }\n \n                     LockstepIterSize::Constraint(len, _) => {\n@@ -247,10 +236,7 @@ pub(super) fn transcribe<'a>(\n                         }\n                         MatchedSeq(..) => {\n                             // We were unable to descend far enough. This is an error.\n-                            return Err(cx.struct_span_err(\n-                                sp, /* blame the macro writer */\n-                                &format!(\"variable '{}' is still repeating at this depth\", ident),\n-                            ));\n+                            return Err(cx.create_err(VarStillRepeating { span: sp, ident }));\n                         }\n                     }\n                 } else {\n@@ -428,13 +414,6 @@ fn lockstep_iter_size(\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error(expand::count_repetition_misplaced)]\n-struct CountRepetitionMisplaced {\n-    #[primary_span]\n-    span: Span,\n-}\n-\n /// Used solely by the `count` meta-variable expression, counts the outer-most repetitions at a\n /// given optional nested depth.\n ///\n@@ -511,12 +490,7 @@ where\n {\n     let span = ident.span;\n     let key = MacroRulesNormalizedIdent::new(ident);\n-    interp.get(&key).ok_or_else(|| {\n-        cx.struct_span_err(\n-            span,\n-            &format!(\"variable `{}` is not recognized in meta-variable expression\", key),\n-        )\n-    })\n+    interp.get(&key).ok_or_else(|| cx.create_err(MetaVarExprUnrecognizedVar { span, key }))\n }\n \n /// Used by meta-variable expressions when an user input is out of the actual declared bounds. For"}]}