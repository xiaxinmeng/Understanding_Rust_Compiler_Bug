{"sha": "091239ee6081d266ae59cc0660cc177994eba8d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MTIzOWVlNjA4MWQyNjZhZTU5Y2MwNjYwY2MxNzc5OTRlYmE4ZDA=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-11T20:06:41Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T13:44:34Z"}, "message": "introduce newtype'd `Predicate<'tcx>`", "tree": {"sha": "032e17a25a951dc9b1ac86acc7544a00b385f10f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/032e17a25a951dc9b1ac86acc7544a00b385f10f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091239ee6081d266ae59cc0660cc177994eba8d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091239ee6081d266ae59cc0660cc177994eba8d0", "html_url": "https://github.com/rust-lang/rust/commit/091239ee6081d266ae59cc0660cc177994eba8d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091239ee6081d266ae59cc0660cc177994eba8d0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2722522fac927b9bd7c512f993e63afd3754cf4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2722522fac927b9bd7c512f993e63afd3754cf4e", "html_url": "https://github.com/rust-lang/rust/commit/2722522fac927b9bd7c512f993e63afd3754cf4e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "0a02aa7533c176e4ebd13ec012f192e379a599f0", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091239ee6081d266ae59cc0660cc177994eba8d0/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091239ee6081d266ae59cc0660cc177994eba8d0/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=091239ee6081d266ae59cc0660cc177994eba8d0", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FutureNotSend {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n                                     infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred, _) = obligation.predicate {\n+                                    if let Trait(trait_pred, _) = obligation.predicate.kind() {\n                                         let trait_ref = trait_pred.to_poly_trait_ref();\n                                         db.note(&*format!(\n                                             \"`{}` doesn't implement `{}`\","}, {"sha": "810a226b50d2a1e454834042404d54efce7a7639", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/091239ee6081d266ae59cc0660cc177994eba8d0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091239ee6081d266ae59cc0660cc177994eba8d0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=091239ee6081d266ae59cc0660cc177994eba8d0", "patch": "@@ -1496,8 +1496,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             if let ty::Opaque(def_id, _) = ret_ty.kind {\n                 // one of the associated types must be Self\n                 for predicate in cx.tcx.predicates_of(def_id).predicates {\n-                    match predicate {\n-                        (ty::PredicateKind::Projection(poly_projection_predicate), _) => {\n+                    match predicate.0.kind() {\n+                        ty::PredicateKind::Projection(poly_projection_predicate) => {\n                             let binder = poly_projection_predicate.ty();\n                             let associated_type = binder.skip_binder();\n \n@@ -1506,7 +1506,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                                 return;\n                             }\n                         },\n-                        (_, _) => {},\n+                        _ => {},\n                     }\n                 }\n             }"}, {"sha": "60c5360054334123628cb87edd9c14ec74b60000", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091239ee6081d266ae59cc0660cc177994eba8d0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091239ee6081d266ae59cc0660cc177994eba8d0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=091239ee6081d266ae59cc0660cc177994eba8d0", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds.iter().copied())\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n-                if let ty::PredicateKind::Trait(poly_trait_ref, _) = obligation.predicate {\n+                if let ty::PredicateKind::Trait(poly_trait_ref, _) = obligation.predicate.kind() {\n                     if poly_trait_ref.def_id() == sized_trait || poly_trait_ref.skip_binder().has_escaping_bound_vars()\n                     {\n                         return None;"}, {"sha": "f22473275c466ea3bb020f3dac3c123150e9ac6b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091239ee6081d266ae59cc0660cc177994eba8d0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091239ee6081d266ae59cc0660cc177994eba8d0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=091239ee6081d266ae59cc0660cc177994eba8d0", "patch": "@@ -1299,7 +1299,7 @@ pub fn is_must_use_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> boo\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n-                if let ty::PredicateKind::Trait(ref poly_trait_predicate, _) = predicate {\n+                if let ty::PredicateKind::Trait(ref poly_trait_predicate, _) = predicate.kind() {\n                     if must_use_attr(&cx.tcx.get_attrs(poly_trait_predicate.skip_binder().trait_ref.def_id)).is_some() {\n                         return true;\n                     }"}]}