{"sha": "2dfb246d8e8db3280326330b9ca67aee5d3214e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZmIyNDZkOGU4ZGIzMjgwMzI2MzMwYjljYTY3YWVlNWQzMjE0ZTk=", "commit": {"author": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-05-04T21:39:38Z"}, "committer": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-05-04T21:39:38Z"}, "message": "refactor unseparated_literal_suffix", "tree": {"sha": "e4a8f26f6f834c3d4f5204b4766ac346d74ae858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a8f26f6f834c3d4f5204b4766ac346d74ae858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dfb246d8e8db3280326330b9ca67aee5d3214e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfb246d8e8db3280326330b9ca67aee5d3214e9", "html_url": "https://github.com/rust-lang/rust/commit/2dfb246d8e8db3280326330b9ca67aee5d3214e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dfb246d8e8db3280326330b9ca67aee5d3214e9/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1567f4466388df8377512580d72513e1e4e0e48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1567f4466388df8377512580d72513e1e4e0e48", "html_url": "https://github.com/rust-lang/rust/commit/b1567f4466388df8377512580d72513e1e4e0e48"}], "stats": {"total": 44, "additions": 15, "deletions": 29}, "files": [{"sha": "98b0f7b56644b982b004012be544dc381d8a0347", "filename": "clippy_lints/src/misc_early/mixed_case_hex_literals.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dfb246d8e8db3280326330b9ca67aee5d3214e9/clippy_lints%2Fsrc%2Fmisc_early%2Fmixed_case_hex_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfb246d8e8db3280326330b9ca67aee5d3214e9/clippy_lints%2Fsrc%2Fmisc_early%2Fmixed_case_hex_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmixed_case_hex_literals.rs?ref=2dfb246d8e8db3280326330b9ca67aee5d3214e9", "patch": "@@ -4,7 +4,12 @@ use rustc_lint::EarlyContext;\n \n use super::MIXED_CASE_HEX_LITERALS;\n \n-pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, maybe_last_sep_idx: usize, lit_snip: String) {\n+pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, suffix: &str, lit_snip: String) {\n+    let maybe_last_sep_idx = if let Some(val) = lit_snip.len().checked_sub(suffix.len() + 1) {\n+        val\n+    } else {\n+        return; // It's useless so shouldn't lint.\n+    };\n     if maybe_last_sep_idx <= 2 {\n         // It's meaningless or causes range error.\n         return;"}, {"sha": "146d0c367a8538dc18ed2df4a688723320bd3cbe", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2dfb246d8e8db3280326330b9ca67aee5d3214e9/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfb246d8e8db3280326330b9ca67aee5d3214e9/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=2dfb246d8e8db3280326330b9ca67aee5d3214e9", "patch": "@@ -7,12 +7,11 @@ mod unneeded_wildcard_pattern;\n mod unseparated_literal_suffix;\n mod zero_prefixed_literal;\n \n-use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint;\n use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{Expr, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -333,34 +332,17 @@ impl MiscEarlyLints {\n                 LitIntType::Unsigned(ty) => ty.name_str(),\n                 LitIntType::Unsuffixed => \"\",\n             };\n-\n-            let maybe_last_sep_idx = if let Some(val) = lit_snip.len().checked_sub(suffix.len() + 1) {\n-                val\n-            } else {\n-                return; // It's useless so shouldn't lint.\n-            };\n-            // Do not lint when literal is unsuffixed.\n-            if !suffix.is_empty() && lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n-                span_lint_and_sugg(\n-                    cx,\n-                    UNSEPARATED_LITERAL_SUFFIX,\n-                    lit.span,\n-                    \"integer type suffix should be separated by an underscore\",\n-                    \"add an underscore\",\n-                    format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-\n+            unseparated_literal_suffix::check(cx, lit, &lit_snip, suffix, \"integer\");\n             if lit_snip.starts_with(\"0x\") {\n-                mixed_case_hex_literals::check(cx, lit, maybe_last_sep_idx, lit_snip)\n+                mixed_case_hex_literals::check(cx, lit, suffix, lit_snip)\n             } else if lit_snip.starts_with(\"0b\") || lit_snip.starts_with(\"0o\") {\n                 /* nothing to do */\n             } else if value != 0 && lit_snip.starts_with('0') {\n                 zero_prefixed_literal::check(cx, lit, lit_snip)\n             }\n         } else if let LitKind::Float(_, LitFloatType::Suffixed(float_ty)) = lit.kind {\n-            unseparated_literal_suffix::check(cx, lit, float_ty, lit_snip)\n+            let suffix = float_ty.name_str();\n+            unseparated_literal_suffix::check(cx, lit, &lit_snip, suffix, \"float\")\n         }\n     }\n }"}, {"sha": "1ffdd4cf6762126a5b2ee8acd788b4dd48cf67e5", "filename": "clippy_lints/src/misc_early/unseparated_literal_suffix.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2dfb246d8e8db3280326330b9ca67aee5d3214e9/clippy_lints%2Fsrc%2Fmisc_early%2Funseparated_literal_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dfb246d8e8db3280326330b9ca67aee5d3214e9/clippy_lints%2Fsrc%2Fmisc_early%2Funseparated_literal_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funseparated_literal_suffix.rs?ref=2dfb246d8e8db3280326330b9ca67aee5d3214e9", "patch": "@@ -1,24 +1,23 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_ast::ast::FloatTy;\n use rustc_ast::ast::Lit;\n use rustc_errors::Applicability;\n use rustc_lint::EarlyContext;\n \n use super::UNSEPARATED_LITERAL_SUFFIX;\n \n-pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, float_ty: FloatTy, lit_snip: String) {\n-    let suffix = float_ty.name_str();\n+pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &String, suffix: &str, sugg_type: &str) {\n     let maybe_last_sep_idx = if let Some(val) = lit_snip.len().checked_sub(suffix.len() + 1) {\n         val\n     } else {\n         return; // It's useless so shouldn't lint.\n     };\n-    if lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n+    // Do not lint when literal is unsuffixed.\n+    if !suffix.is_empty() && lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n         span_lint_and_sugg(\n             cx,\n             UNSEPARATED_LITERAL_SUFFIX,\n             lit.span,\n-            \"float type suffix should be separated by an underscore\",\n+            &format!(\"{} type suffix should be separated by an underscore\", sugg_type),\n             \"add an underscore\",\n             format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n             Applicability::MachineApplicable,"}]}