{"sha": "aa69757a01c26cfad12498053c55cbc3d66a4bdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNjk3NTdhMDFjMjZjZmFkMTI0OTgwNTNjNTVjYmMzZDY2YTRiZGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T20:27:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T21:33:41Z"}, "message": "More principled indentation trimming in fixtures", "tree": {"sha": "0337d53010edd2d5d09ab3ceffb0945b8eb4ae55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0337d53010edd2d5d09ab3ceffb0945b8eb4ae55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa69757a01c26cfad12498053c55cbc3d66a4bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa69757a01c26cfad12498053c55cbc3d66a4bdb", "html_url": "https://github.com/rust-lang/rust/commit/aa69757a01c26cfad12498053c55cbc3d66a4bdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa69757a01c26cfad12498053c55cbc3d66a4bdb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f69e75c84014a6173798e95af0baa48df2607e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f69e75c84014a6173798e95af0baa48df2607e", "html_url": "https://github.com/rust-lang/rust/commit/f2f69e75c84014a6173798e95af0baa48df2607e"}], "stats": {"total": 1099, "additions": 541, "deletions": 558}, "files": [{"sha": "19ce81d99e3c515bd59d6e5eded7985fe8b5edb7", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -986,7 +986,6 @@ fn main() {\n \",\n             r\"\n \n-\n pub(crate) fn bar() {\n     ${0:todo!()}\n }\","}, {"sha": "d1cafa7d9db131a4778ff3cd029864a5131992b0", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 47, "deletions": 45, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -488,16 +488,17 @@ mod tests {\n         check_assist(\n             auto_import,\n             r\"\n-                    //- /lib.rs crate:crate_with_macro\n-                    #[macro_export]\n-                    macro_rules! foo {\n-                        () => ()\n-                    }\n+//- /lib.rs crate:crate_with_macro\n+#[macro_export]\n+macro_rules! foo {\n+    () => ()\n+}\n \n-                    //- /main.rs crate:main deps:crate_with_macro\n-                    fn main() {\n-                        foo<|>\n-                    }\",\n+//- /main.rs crate:main deps:crate_with_macro\n+fn main() {\n+    foo<|>\n+}\n+\",\n             r\"use crate_with_macro::foo;\n \n fn main() {\n@@ -847,13 +848,14 @@ fn main() {\n         check_assist(\n             auto_import,\n             r\"\n-                    //- /lib.rs crate:dep\n-                    pub struct Struct;\n+//- /lib.rs crate:dep\n+pub struct Struct;\n \n-                    //- /main.rs crate:main deps:dep\n-                    fn main() {\n-                        Struct<|>\n-                    }\",\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    Struct<|>\n+}\n+\",\n             r\"use dep::Struct;\n \n fn main() {\n@@ -869,20 +871,22 @@ fn main() {\n         check_assist(\n             auto_import,\n             r\"\n-                    //- /lib.rs crate:dep\n-                    pub mod fmt {\n-                        pub trait Display {}\n-                    }\n+//- /lib.rs crate:dep\n+pub mod fmt {\n+    pub trait Display {}\n+}\n \n-                    pub fn panic_fmt() {}\n+pub fn panic_fmt() {}\n \n-                    //- /main.rs crate:main deps:dep\n-                    struct S;\n+//- /main.rs crate:main deps:dep\n+struct S;\n \n-                    impl f<|>mt::Display for S {}\",\n+impl f<|>mt::Display for S {}\n+\",\n             r\"use dep::fmt;\n \n struct S;\n+\n impl fmt::Display for S {}\n \",\n         );\n@@ -894,21 +898,20 @@ impl fmt::Display for S {}\n         check_assist(\n             auto_import,\n             r\"\n-                    //- /lib.rs crate:dep\n-\n-                    macro_rules! mac {\n-                        () => {\n-                            pub struct Cheese;\n-                        };\n-                    }\n-\n-                    mac!();\n+//- /lib.rs crate:dep\n+macro_rules! mac {\n+    () => {\n+        pub struct Cheese;\n+    };\n+}\n \n-                    //- /main.rs crate:main deps:dep\n+mac!();\n \n-                    fn main() {\n-                        Cheese<|>;\n-                    }\",\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    Cheese<|>;\n+}\n+\",\n             r\"use dep::Cheese;\n \n fn main() {\n@@ -924,16 +927,15 @@ fn main() {\n         check_assist(\n             auto_import,\n             r\"\n-                    //- /lib.rs crate:dep\n-\n-                    pub struct FMT;\n-                    pub struct fmt;\n-\n-                    //- /main.rs crate:main deps:dep\n+//- /lib.rs crate:dep\n+pub struct FMT;\n+pub struct fmt;\n \n-                    fn main() {\n-                        FMT<|>;\n-                    }\",\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    FMT<|>;\n+}\n+\",\n             r\"use dep::FMT;\n \n fn main() {"}, {"sha": "54601d1f39901ecd653b7ebff381b570ffe19aed", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 80, "deletions": 77, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -255,15 +255,14 @@ mod tests {\n         check_assist(\n             fix_visibility,\n             r\"\n-              //- /main.rs\n-              mod foo;\n-              fn main() { foo::Foo<|> }\n+//- /main.rs\n+mod foo;\n+fn main() { foo::Foo<|> }\n \n-              //- /foo.rs\n-              struct Foo;\n-              \",\n+//- /foo.rs\n+struct Foo;\n+\",\n             r\"$0pub(crate) struct Foo;\n-\n \",\n         );\n     }\n@@ -279,14 +278,14 @@ mod tests {\n         );\n         check_assist(\n             fix_visibility,\n-            r\"//- /lib.rs\n-              mod foo;\n-              fn main() { foo::Foo { <|>bar: () }; }\n-              //- /foo.rs\n-              pub struct Foo { bar: () }\n-              \",\n+            r\"\n+//- /lib.rs\n+mod foo;\n+fn main() { foo::Foo { <|>bar: () }; }\n+//- /foo.rs\n+pub struct Foo { bar: () }\n+\",\n             r\"pub struct Foo { $0pub(crate) bar: () }\n-\n \",\n         );\n         check_assist_not_applicable(\n@@ -296,12 +295,13 @@ mod tests {\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n-            r\"//- /lib.rs\n-              mod foo;\n-              fn main() { foo::Foo { <|>bar: () }; }\n-              //- /foo.rs\n-              pub struct Foo { pub bar: () }\n-              \",\n+            r\"\n+//- /lib.rs\n+mod foo;\n+fn main() { foo::Foo { <|>bar: () }; }\n+//- /foo.rs\n+pub struct Foo { pub bar: () }\n+\",\n         );\n     }\n \n@@ -316,14 +316,14 @@ mod tests {\n         );\n         check_assist(\n             fix_visibility,\n-            r\"//- /lib.rs\n-              mod foo;\n-              fn main() { foo::Foo::Bar { <|>bar: () }; }\n-              //- /foo.rs\n-              pub enum Foo { Bar { bar: () } }\n-              \",\n+            r\"\n+//- /lib.rs\n+mod foo;\n+fn main() { foo::Foo::Bar { <|>bar: () }; }\n+//- /foo.rs\n+pub enum Foo { Bar { bar: () } }\n+\",\n             r\"pub enum Foo { Bar { $0pub(crate) bar: () } }\n-\n \",\n         );\n         check_assist_not_applicable(\n@@ -333,12 +333,13 @@ mod tests {\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n-            r\"//- /lib.rs\n-              mod foo;\n-              fn main() { foo::Foo { <|>bar: () }; }\n-              //- /foo.rs\n-              pub struct Foo { pub bar: () }\n-              \",\n+            r\"\n+//- /lib.rs\n+mod foo;\n+fn main() { foo::Foo { <|>bar: () }; }\n+//- /foo.rs\n+pub struct Foo { pub bar: () }\n+\",\n         );\n     }\n \n@@ -355,14 +356,14 @@ mod tests {\n         );\n         check_assist(\n             fix_visibility,\n-            r\"//- /lib.rs\n-              mod foo;\n-              fn main() { foo::Foo { <|>bar: () }; }\n-              //- /foo.rs\n-              pub union Foo { bar: () }\n-              \",\n+            r\"\n+//- /lib.rs\n+mod foo;\n+fn main() { foo::Foo { <|>bar: () }; }\n+//- /foo.rs\n+pub union Foo { bar: () }\n+\",\n             r\"pub union Foo { $0pub(crate) bar: () }\n-\n \",\n         );\n         check_assist_not_applicable(\n@@ -372,12 +373,13 @@ mod tests {\n         );\n         check_assist_not_applicable(\n             fix_visibility,\n-            r\"//- /lib.rs\n-              mod foo;\n-              fn main() { foo::Foo { <|>bar: () }; }\n-              //- /foo.rs\n-              pub union Foo { pub bar: () }\n-              \",\n+            r\"\n+//- /lib.rs\n+mod foo;\n+fn main() { foo::Foo { <|>bar: () }; }\n+//- /foo.rs\n+pub union Foo { pub bar: () }\n+\",\n         );\n     }\n \n@@ -458,19 +460,18 @@ mod tests {\n         check_assist(\n             fix_visibility,\n             r\"\n-            //- /main.rs\n-            mod foo;\n-            fn main() { foo::bar<|>::baz(); }\n+//- /main.rs\n+mod foo;\n+fn main() { foo::bar<|>::baz(); }\n \n-            //- /foo.rs\n-            mod bar {\n-                pub fn baz() {}\n-            }\n-            \",\n+//- /foo.rs\n+mod bar {\n+    pub fn baz() {}\n+}\n+\",\n             r\"$0pub(crate) mod bar {\n     pub fn baz() {}\n }\n-\n \",\n         );\n \n@@ -486,17 +487,15 @@ mod tests {\n         check_assist(\n             fix_visibility,\n             r\"\n-            //- /main.rs\n-            mod foo;\n-            fn main() { foo::bar<|>::baz(); }\n-\n-            //- /foo.rs\n-            mod bar;\n-\n-            //- /foo/bar.rs\n-            pub fn baz() {}\n-            }\n-            \",\n+//- /main.rs\n+mod foo;\n+fn main() { foo::bar<|>::baz(); }\n+\n+//- /foo.rs\n+mod bar;\n+//- /foo/bar.rs\n+pub fn baz() {}\n+\",\n             r\"$0pub(crate) mod bar;\n \",\n         );\n@@ -506,14 +505,16 @@ mod tests {\n     fn fix_visibility_of_module_declaration_in_other_file() {\n         check_assist(\n             fix_visibility,\n-            r\"//- /main.rs\n-              mod foo;\n-              fn main() { foo::bar<|>>::baz(); }\n+            r\"\n+//- /main.rs\n+mod foo;\n+fn main() { foo::bar<|>>::baz(); }\n \n-              //- /foo.rs\n-              mod bar {\n-                  pub fn baz() {}\n-              }\",\n+//- /foo.rs\n+mod bar {\n+    pub fn baz() {}\n+}\n+\",\n             r\"$0pub(crate) mod bar {\n     pub fn baz() {}\n }\n@@ -525,10 +526,12 @@ mod tests {\n     fn adds_pub_when_target_is_in_another_crate() {\n         check_assist(\n             fix_visibility,\n-            r\"//- /main.rs crate:a deps:foo\n-              foo::Bar<|>\n-              //- /lib.rs crate:foo\n-              struct Bar;\",\n+            r\"\n+//- /main.rs crate:a deps:foo\n+foo::Bar<|>\n+//- /lib.rs crate:foo\n+struct Bar;\n+\",\n             r\"$0pub struct Bar;\n \",\n         )"}, {"sha": "1e3a31602c7426067b4133179e03cd1f4608a1e9", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -145,12 +145,12 @@ mod tests {\n     use crate::mock_analysis::analysis_and_position;\n \n     fn check_hierarchy(\n-        fixture: &str,\n+        ra_fixture: &str,\n         expected: &str,\n         expected_incoming: &[&str],\n         expected_outgoing: &[&str],\n     ) {\n-        let (analysis, pos) = analysis_and_position(fixture);\n+        let (analysis, pos) = analysis_and_position(ra_fixture);\n \n         let mut navs = analysis.call_hierarchy(pos).unwrap().unwrap().info;\n         assert_eq!(navs.len(), 1);\n@@ -177,12 +177,12 @@ mod tests {\n     fn test_call_hierarchy_on_ref() {\n         check_hierarchy(\n             r#\"\n-            //- /lib.rs\n-            fn callee() {}\n-            fn caller() {\n-                call<|>ee();\n-            }\n-            \"#,\n+//- /lib.rs\n+fn callee() {}\n+fn caller() {\n+    call<|>ee();\n+}\n+\"#,\n             \"callee FN_DEF FileId(1) 0..14 3..9\",\n             &[\"caller FN_DEF FileId(1) 15..44 18..24 : [33..39]\"],\n             &[],\n@@ -193,12 +193,12 @@ mod tests {\n     fn test_call_hierarchy_on_def() {\n         check_hierarchy(\n             r#\"\n-            //- /lib.rs\n-            fn call<|>ee() {}\n-            fn caller() {\n-                callee();\n-            }\n-            \"#,\n+//- /lib.rs\n+fn call<|>ee() {}\n+fn caller() {\n+    callee();\n+}\n+\"#,\n             \"callee FN_DEF FileId(1) 0..14 3..9\",\n             &[\"caller FN_DEF FileId(1) 15..44 18..24 : [33..39]\"],\n             &[],\n@@ -209,13 +209,13 @@ mod tests {\n     fn test_call_hierarchy_in_same_fn() {\n         check_hierarchy(\n             r#\"\n-            //- /lib.rs\n-            fn callee() {}\n-            fn caller() {\n-                call<|>ee();\n-                callee();\n-            }\n-            \"#,\n+//- /lib.rs\n+fn callee() {}\n+fn caller() {\n+    call<|>ee();\n+    callee();\n+}\n+\"#,\n             \"callee FN_DEF FileId(1) 0..14 3..9\",\n             &[\"caller FN_DEF FileId(1) 15..58 18..24 : [33..39, 47..53]\"],\n             &[],\n@@ -226,20 +226,20 @@ mod tests {\n     fn test_call_hierarchy_in_different_fn() {\n         check_hierarchy(\n             r#\"\n-            //- /lib.rs\n-            fn callee() {}\n-            fn caller1() {\n-                call<|>ee();\n-            }\n+//- /lib.rs\n+fn callee() {}\n+fn caller1() {\n+    call<|>ee();\n+}\n \n-            fn caller2() {\n-                callee();\n-            }\n-            \"#,\n+fn caller2() {\n+    callee();\n+}\n+\"#,\n             \"callee FN_DEF FileId(1) 0..14 3..9\",\n             &[\n                 \"caller1 FN_DEF FileId(1) 15..45 18..25 : [34..40]\",\n-                \"caller2 FN_DEF FileId(1) 46..76 49..56 : [65..71]\",\n+                \"caller2 FN_DEF FileId(1) 47..77 50..57 : [66..72]\",\n             ],\n             &[],\n         );\n@@ -249,26 +249,26 @@ mod tests {\n     fn test_call_hierarchy_in_tests_mod() {\n         check_hierarchy(\n             r#\"\n-            //- /lib.rs cfg:test\n-            fn callee() {}\n-            fn caller1() {\n-                call<|>ee();\n-            }\n+//- /lib.rs cfg:test\n+fn callee() {}\n+fn caller1() {\n+    call<|>ee();\n+}\n \n-            #[cfg(test)]\n-            mod tests {\n-                use super::*;\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n \n-                #[test]\n-                fn test_caller() {\n-                    callee();\n-                }\n-            }\n-            \"#,\n+    #[test]\n+    fn test_caller() {\n+        callee();\n+    }\n+}\n+\"#,\n             \"callee FN_DEF FileId(1) 0..14 3..9\",\n             &[\n                 \"caller1 FN_DEF FileId(1) 15..45 18..25 : [34..40]\",\n-                \"test_caller FN_DEF FileId(1) 93..147 108..119 : [132..138]\",\n+                \"test_caller FN_DEF FileId(1) 95..149 110..121 : [134..140]\",\n             ],\n             &[],\n         );\n@@ -278,19 +278,19 @@ mod tests {\n     fn test_call_hierarchy_in_different_files() {\n         check_hierarchy(\n             r#\"\n-            //- /lib.rs\n-            mod foo;\n-            use foo::callee;\n+//- /lib.rs\n+mod foo;\n+use foo::callee;\n \n-            fn caller() {\n-                call<|>ee();\n-            }\n+fn caller() {\n+    call<|>ee();\n+}\n \n-            //- /foo/mod.rs\n-            pub fn callee() {}\n-            \"#,\n+//- /foo/mod.rs\n+pub fn callee() {}\n+\"#,\n             \"callee FN_DEF FileId(2) 0..18 7..13\",\n-            &[\"caller FN_DEF FileId(1) 26..55 29..35 : [44..50]\"],\n+            &[\"caller FN_DEF FileId(1) 27..56 30..36 : [45..51]\"],\n             &[],\n         );\n     }\n@@ -299,13 +299,13 @@ mod tests {\n     fn test_call_hierarchy_outgoing() {\n         check_hierarchy(\n             r#\"\n-            //- /lib.rs\n-            fn callee() {}\n-            fn call<|>er() {\n-                callee();\n-                callee();\n-            }\n-            \"#,\n+//- /lib.rs\n+fn callee() {}\n+fn call<|>er() {\n+    callee();\n+    callee();\n+}\n+\"#,\n             \"caller FN_DEF FileId(1) 15..58 18..24\",\n             &[],\n             &[\"callee FN_DEF FileId(1) 0..14 3..9 : [33..39, 47..53]\"],\n@@ -316,43 +316,43 @@ mod tests {\n     fn test_call_hierarchy_outgoing_in_different_files() {\n         check_hierarchy(\n             r#\"\n-            //- /lib.rs\n-            mod foo;\n-            use foo::callee;\n+//- /lib.rs\n+mod foo;\n+use foo::callee;\n \n-            fn call<|>er() {\n-                callee();\n-            }\n+fn call<|>er() {\n+    callee();\n+}\n \n-            //- /foo/mod.rs\n-            pub fn callee() {}\n-            \"#,\n-            \"caller FN_DEF FileId(1) 26..55 29..35\",\n+//- /foo/mod.rs\n+pub fn callee() {}\n+\"#,\n+            \"caller FN_DEF FileId(1) 27..56 30..36\",\n             &[],\n-            &[\"callee FN_DEF FileId(2) 0..18 7..13 : [44..50]\"],\n+            &[\"callee FN_DEF FileId(2) 0..18 7..13 : [45..51]\"],\n         );\n     }\n \n     #[test]\n     fn test_call_hierarchy_incoming_outgoing() {\n         check_hierarchy(\n             r#\"\n-            //- /lib.rs\n-            fn caller1() {\n-                call<|>er2();\n-            }\n+//- /lib.rs\n+fn caller1() {\n+    call<|>er2();\n+}\n \n-            fn caller2() {\n-                caller3();\n-            }\n+fn caller2() {\n+    caller3();\n+}\n \n-            fn caller3() {\n+fn caller3() {\n \n-            }\n-            \"#,\n-            \"caller2 FN_DEF FileId(1) 32..63 35..42\",\n+}\n+\"#,\n+            \"caller2 FN_DEF FileId(1) 33..64 36..43\",\n             &[\"caller1 FN_DEF FileId(1) 0..31 3..10 : [19..26]\"],\n-            &[\"caller3 FN_DEF FileId(1) 64..80 67..74 : [51..58]\"],\n+            &[\"caller3 FN_DEF FileId(1) 66..83 69..76 : [52..59]\"],\n         );\n     }\n }"}, {"sha": "4c33f41d4f9913a47482146df68baf93056bc6b6", "filename": "crates/ra_ide/src/completion/complete_macro_in_item_position.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -42,8 +42,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"foo!(\u2026)\",\n-                source_range: 46..46,\n-                delete: 46..46,\n+                source_range: 48..48,\n+                delete: 48..48,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n@@ -82,8 +82,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"vec![\u2026]\",\n-                source_range: 280..280,\n-                delete: 280..280,\n+                source_range: 282..282,\n+                delete: 282..282,\n                 insert: \"vec![$0]\",\n                 kind: Macro,\n                 detail: \"macro_rules! vec\",\n@@ -119,8 +119,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"foo! {\u2026}\",\n-                source_range: 163..163,\n-                delete: 163..163,\n+                source_range: 164..164,\n+                delete: 164..164,\n                 insert: \"foo! {$0}\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n@@ -130,8 +130,8 @@ mod tests {\n             },\n             CompletionItem {\n                 label: \"main()\",\n-                source_range: 163..163,\n-                delete: 163..163,\n+                source_range: 164..164,\n+                delete: 164..164,\n                 insert: \"main()$0\",\n                 kind: Function,\n                 lookup: \"main\","}, {"sha": "d3a1cbc1da7ba7966d15143d951d01bd2098e5e8", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -541,8 +541,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"m()\",\n-                source_range: 100..100,\n-                delete: 100..100,\n+                source_range: 102..102,\n+                delete: 102..102,\n                 insert: \"m()$0\",\n                 kind: Function,\n                 lookup: \"m\",\n@@ -577,8 +577,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"m()\",\n-                source_range: 105..105,\n-                delete: 105..105,\n+                source_range: 107..107,\n+                delete: 107..107,\n                 insert: \"m()$0\",\n                 kind: Method,\n                 lookup: \"m\",\n@@ -613,8 +613,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"C\",\n-                source_range: 107..107,\n-                delete: 107..107,\n+                source_range: 109..109,\n+                delete: 109..109,\n                 insert: \"C\",\n                 kind: Const,\n                 detail: \"const C: i32 = 42;\",\n@@ -648,8 +648,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"T\",\n-                source_range: 101..101,\n-                delete: 101..101,\n+                source_range: 103..103,\n+                delete: 103..103,\n                 insert: \"T\",\n                 kind: TypeAlias,\n                 detail: \"type T = i32;\",\n@@ -688,24 +688,24 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"PUBLIC_CONST\",\n-                source_range: 302..302,\n-                delete: 302..302,\n+                source_range: 304..304,\n+                delete: 304..304,\n                 insert: \"PUBLIC_CONST\",\n                 kind: Const,\n                 detail: \"pub(super) const PUBLIC_CONST: u32 = 1;\",\n             },\n             CompletionItem {\n                 label: \"PublicType\",\n-                source_range: 302..302,\n-                delete: 302..302,\n+                source_range: 304..304,\n+                delete: 304..304,\n                 insert: \"PublicType\",\n                 kind: TypeAlias,\n                 detail: \"pub(super) type PublicType = u32;\",\n             },\n             CompletionItem {\n                 label: \"public_method()\",\n-                source_range: 302..302,\n-                delete: 302..302,\n+                source_range: 304..304,\n+                delete: 304..304,\n                 insert: \"public_method()$0\",\n                 kind: Function,\n                 lookup: \"public_method\",\n@@ -737,8 +737,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"m()\",\n-                source_range: 100..100,\n-                delete: 100..100,\n+                source_range: 102..102,\n+                delete: 102..102,\n                 insert: \"m()$0\",\n                 kind: Function,\n                 lookup: \"m\",\n@@ -773,8 +773,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"m()\",\n-                source_range: 101..101,\n-                delete: 101..101,\n+                source_range: 103..103,\n+                delete: 103..103,\n                 insert: \"m()$0\",\n                 kind: Function,\n                 lookup: \"m\",\n@@ -834,8 +834,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"m()\",\n-                source_range: 73..73,\n-                delete: 73..73,\n+                source_range: 74..74,\n+                delete: 74..74,\n                 insert: \"m()$0\",\n                 kind: Function,\n                 lookup: \"m\",\n@@ -870,8 +870,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"m()\",\n-                source_range: 99..99,\n-                delete: 99..99,\n+                source_range: 101..101,\n+                delete: 101..101,\n                 insert: \"m()$0\",\n                 kind: Function,\n                 lookup: \"m\",\n@@ -906,8 +906,8 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"m()\",\n-                source_range: 110..110,\n-                delete: 110..110,\n+                source_range: 112..112,\n+                delete: 112..112,\n                 insert: \"m()$0\",\n                 kind: Function,\n                 lookup: \"m\",\n@@ -950,67 +950,67 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"C2\",\n-                source_range: 219..219,\n-                delete: 219..219,\n+                source_range: 221..221,\n+                delete: 221..221,\n                 insert: \"C2\",\n                 kind: Const,\n                 detail: \"const C2: ();\",\n             },\n             CompletionItem {\n                 label: \"CONST\",\n-                source_range: 219..219,\n-                delete: 219..219,\n+                source_range: 221..221,\n+                delete: 221..221,\n                 insert: \"CONST\",\n                 kind: Const,\n                 detail: \"const CONST: u8;\",\n             },\n             CompletionItem {\n                 label: \"SubTy\",\n-                source_range: 219..219,\n-                delete: 219..219,\n+                source_range: 221..221,\n+                delete: 221..221,\n                 insert: \"SubTy\",\n                 kind: TypeAlias,\n                 detail: \"type SubTy;\",\n             },\n             CompletionItem {\n                 label: \"Ty\",\n-                source_range: 219..219,\n-                delete: 219..219,\n+                source_range: 221..221,\n+                delete: 221..221,\n                 insert: \"Ty\",\n                 kind: TypeAlias,\n                 detail: \"type Ty;\",\n             },\n             CompletionItem {\n                 label: \"func()\",\n-                source_range: 219..219,\n-                delete: 219..219,\n+                source_range: 221..221,\n+                delete: 221..221,\n                 insert: \"func()$0\",\n                 kind: Function,\n                 lookup: \"func\",\n                 detail: \"fn func()\",\n             },\n             CompletionItem {\n                 label: \"method()\",\n-                source_range: 219..219,\n-                delete: 219..219,\n+                source_range: 221..221,\n+                delete: 221..221,\n                 insert: \"method()$0\",\n                 kind: Method,\n                 lookup: \"method\",\n                 detail: \"fn method(&self)\",\n             },\n             CompletionItem {\n                 label: \"subfunc()\",\n-                source_range: 219..219,\n-                delete: 219..219,\n+                source_range: 221..221,\n+                delete: 221..221,\n                 insert: \"subfunc()$0\",\n                 kind: Function,\n                 lookup: \"subfunc\",\n                 detail: \"fn subfunc()\",\n             },\n             CompletionItem {\n                 label: \"submethod()\",\n-                source_range: 219..219,\n-                delete: 219..219,\n+                source_range: 221..221,\n+                delete: 221..221,\n                 insert: \"submethod()$0\",\n                 kind: Method,\n                 lookup: \"submethod\",\n@@ -1055,67 +1055,67 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"C2\",\n-                source_range: 365..365,\n-                delete: 365..365,\n+                source_range: 367..367,\n+                delete: 367..367,\n                 insert: \"C2\",\n                 kind: Const,\n                 detail: \"const C2: () = ();\",\n             },\n             CompletionItem {\n                 label: \"CONST\",\n-                source_range: 365..365,\n-                delete: 365..365,\n+                source_range: 367..367,\n+                delete: 367..367,\n                 insert: \"CONST\",\n                 kind: Const,\n                 detail: \"const CONST: u8 = 0;\",\n             },\n             CompletionItem {\n                 label: \"SubTy\",\n-                source_range: 365..365,\n-                delete: 365..365,\n+                source_range: 367..367,\n+                delete: 367..367,\n                 insert: \"SubTy\",\n                 kind: TypeAlias,\n                 detail: \"type SubTy;\",\n             },\n             CompletionItem {\n                 label: \"Ty\",\n-                source_range: 365..365,\n-                delete: 365..365,\n+                source_range: 367..367,\n+                delete: 367..367,\n                 insert: \"Ty\",\n                 kind: TypeAlias,\n                 detail: \"type Ty;\",\n             },\n             CompletionItem {\n                 label: \"func()\",\n-                source_range: 365..365,\n-                delete: 365..365,\n+                source_range: 367..367,\n+                delete: 367..367,\n                 insert: \"func()$0\",\n                 kind: Function,\n                 lookup: \"func\",\n                 detail: \"fn func()\",\n             },\n             CompletionItem {\n                 label: \"method()\",\n-                source_range: 365..365,\n-                delete: 365..365,\n+                source_range: 367..367,\n+                delete: 367..367,\n                 insert: \"method()$0\",\n                 kind: Method,\n                 lookup: \"method\",\n                 detail: \"fn method(&self)\",\n             },\n             CompletionItem {\n                 label: \"subfunc()\",\n-                source_range: 365..365,\n-                delete: 365..365,\n+                source_range: 367..367,\n+                delete: 367..367,\n                 insert: \"subfunc()$0\",\n                 kind: Function,\n                 lookup: \"subfunc\",\n                 detail: \"fn subfunc()\",\n             },\n             CompletionItem {\n                 label: \"submethod()\",\n-                source_range: 365..365,\n-                delete: 365..365,\n+                source_range: 367..367,\n+                delete: 367..367,\n                 insert: \"submethod()$0\",\n                 kind: Method,\n                 lookup: \"submethod\","}, {"sha": "aa2b07a2f1f6a76a7153a9843cd898e8c46965e5", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -781,46 +781,46 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"bar!(\u2026)\",\n-                source_range: 252..252,\n-                delete: 252..252,\n+                source_range: 256..256,\n+                delete: 256..256,\n                 insert: \"bar!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! bar\",\n             },\n             CompletionItem {\n                 label: \"baz!(\u2026)\",\n-                source_range: 252..252,\n-                delete: 252..252,\n+                source_range: 256..256,\n+                delete: 256..256,\n                 insert: \"baz!($0)\",\n                 kind: Macro,\n                 detail: \"#[macro_export]\\nmacro_rules! baz\",\n             },\n             CompletionItem {\n                 label: \"foo!(\u2026)\",\n-                source_range: 252..252,\n-                delete: 252..252,\n+                source_range: 256..256,\n+                delete: 256..256,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n             },\n             CompletionItem {\n                 label: \"m1\",\n-                source_range: 252..252,\n-                delete: 252..252,\n+                source_range: 256..256,\n+                delete: 256..256,\n                 insert: \"m1\",\n                 kind: Module,\n             },\n             CompletionItem {\n                 label: \"m2\",\n-                source_range: 252..252,\n-                delete: 252..252,\n+                source_range: 256..256,\n+                delete: 256..256,\n                 insert: \"m2\",\n                 kind: Module,\n             },\n             CompletionItem {\n                 label: \"main()\",\n-                source_range: 252..252,\n-                delete: 252..252,\n+                source_range: 256..256,\n+                delete: 256..256,\n                 insert: \"main()$0\",\n                 kind: Function,\n                 lookup: \"main\",\n@@ -850,16 +850,16 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"foo!(\u2026)\",\n-                source_range: 49..49,\n-                delete: 49..49,\n+                source_range: 50..50,\n+                delete: 50..50,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n             },\n             CompletionItem {\n                 label: \"foo()\",\n-                source_range: 49..49,\n-                delete: 49..49,\n+                source_range: 50..50,\n+                delete: 50..50,\n                 insert: \"foo()$0\",\n                 kind: Function,\n                 lookup: \"foo\",\n@@ -889,16 +889,16 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"foo!(\u2026)\",\n-                source_range: 57..57,\n-                delete: 57..57,\n+                source_range: 58..58,\n+                delete: 58..58,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n             },\n             CompletionItem {\n                 label: \"main()\",\n-                source_range: 57..57,\n-                delete: 57..57,\n+                source_range: 58..58,\n+                delete: 58..58,\n                 insert: \"main()$0\",\n                 kind: Function,\n                 lookup: \"main\",\n@@ -928,16 +928,16 @@ mod tests {\n         [\n             CompletionItem {\n                 label: \"foo!(\u2026)\",\n-                source_range: 50..50,\n-                delete: 50..50,\n+                source_range: 51..51,\n+                delete: 51..51,\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n             },\n             CompletionItem {\n                 label: \"main()\",\n-                source_range: 50..50,\n-                delete: 50..50,\n+                source_range: 51..51,\n+                delete: 51..51,\n                 insert: \"main()$0\",\n                 kind: Function,\n                 lookup: \"main\","}, {"sha": "8cb0700b9424ee71f350866f59364c6b9592a47c", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -283,7 +283,7 @@ fn check_struct_shorthand_initialization(\n mod tests {\n     use insta::assert_debug_snapshot;\n     use ra_syntax::SourceFile;\n-    use stdx::SepBy;\n+    use stdx::trim_indent;\n     use test_utils::assert_eq_text;\n \n     use crate::mock_analysis::{analysis_and_position, single_file};\n@@ -325,6 +325,8 @@ mod tests {\n     ///  * this diagnostic touches the input cursor position\n     ///  * that the contents of the file containing the cursor match `after` after the diagnostic fix is applied\n     fn check_apply_diagnostic_fix_from_position(fixture: &str, after: &str) {\n+        let after = trim_indent(after);\n+\n         let (analysis, file_position) = analysis_and_position(fixture);\n         let diagnostic = analysis.diagnostics(file_position.file_id).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n@@ -336,21 +338,6 @@ mod tests {\n             actual\n         };\n \n-        // Strip indent and empty lines from `after`, to match the behaviour of\n-        // `parse_fixture` called from `analysis_and_position`.\n-        let margin = fixture\n-            .lines()\n-            .filter(|it| it.trim_start().starts_with(\"//-\"))\n-            .map(|it| it.len() - it.trim_start().len())\n-            .next()\n-            .expect(\"empty fixture\");\n-        let after = after\n-            .lines()\n-            .filter_map(|line| if line.len() > margin { Some(&line[margin..]) } else { None })\n-            .sep_by(\"\\n\")\n-            .suffix(\"\\n\")\n-            .to_string();\n-\n         assert_eq_text!(&after, &actual);\n         assert!(\n             diagnostic.range.start() <= file_position.offset\n@@ -400,7 +387,6 @@ mod tests {\n                 }\n                 x / y<|>\n             }\n-\n             //- /core/lib.rs\n             pub mod result {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n@@ -431,7 +417,6 @@ mod tests {\n                 }\n                 <|>x\n             }\n-\n             //- /core/lib.rs\n             pub mod result {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n@@ -464,7 +449,6 @@ mod tests {\n                 }\n                 x <|>/ y\n             }\n-\n             //- /core/lib.rs\n             pub mod result {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n@@ -474,6 +458,7 @@ mod tests {\n             use core::result::Result::{self, Ok, Err};\n \n             type MyResult<T> = Result<T, ()>;\n+\n             fn div(x: i32, y: i32) -> MyResult<i32> {\n                 if y == 0 {\n                     return Err(());"}, {"sha": "bea7fbfa77f6d1dee79a81767be97b61a2f19997", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -192,27 +192,27 @@ mod tests {\n     #[test]\n     fn goto_def_for_module_declaration() {\n         check_goto(\n-            \"\n-            //- /lib.rs\n-            mod <|>foo;\n+            r#\"\n+//- /lib.rs\n+mod <|>foo;\n \n-            //- /foo.rs\n-            // empty\n-            \",\n-            \"foo SOURCE_FILE FileId(2) 0..10\",\n-            \"// empty\\n\\n\",\n+//- /foo.rs\n+// empty\n+\"#,\n+            \"foo SOURCE_FILE FileId(2) 0..9\",\n+            \"// empty\\n\",\n         );\n \n         check_goto(\n-            \"\n-            //- /lib.rs\n-            mod <|>foo;\n+            r#\"\n+//- /lib.rs\n+mod <|>foo;\n \n-            //- /foo/mod.rs\n-            // empty\n-            \",\n-            \"foo SOURCE_FILE FileId(2) 0..10\",\n-            \"// empty\\n\\n\",\n+//- /foo/mod.rs\n+// empty\n+\"#,\n+            \"foo SOURCE_FILE FileId(2) 0..9\",\n+            \"// empty\\n\",\n         );\n     }\n \n@@ -254,14 +254,14 @@ mod tests {\n     #[test]\n     fn goto_def_for_use_alias() {\n         check_goto(\n-            \"\n-            //- /lib.rs\n-            use foo as bar<|>;\n-\n+            r#\"\n+//- /lib.rs\n+use foo as bar<|>;\n \n-            //- /foo/lib.rs\n-            #[macro_export]\n-            macro_rules! foo { () => { () } }\",\n+//- /foo/lib.rs\n+#[macro_export]\n+macro_rules! foo { () => { () } }\n+\"#,\n             \"SOURCE_FILE FileId(2) 0..50\",\n             \"#[macro_export]\\nmacro_rules! foo { () => { () } }\\n\",\n         );\n@@ -302,39 +302,39 @@ mod tests {\n     #[test]\n     fn goto_def_for_macro_defined_fn_with_arg() {\n         check_goto(\n-            \"\n-            //- /lib.rs\n-            macro_rules! define_fn {\n-                ($name:ident) => (fn $name() {})\n-            }\n+            r#\"\n+//- /lib.rs\n+macro_rules! define_fn {\n+    ($name:ident) => (fn $name() {})\n+}\n \n-            define_fn!(foo);\n+define_fn!(foo);\n \n-            fn bar() {\n-               <|>foo();\n-            }\n-            \",\n-            \"foo FN_DEF FileId(1) 64..80 75..78\",\n+fn bar() {\n+   <|>foo();\n+}\n+\"#,\n+            \"foo FN_DEF FileId(1) 65..81 76..79\",\n             \"define_fn!(foo);|foo\",\n         );\n     }\n \n     #[test]\n     fn goto_def_for_macro_defined_fn_no_arg() {\n         check_goto(\n-            \"\n-            //- /lib.rs\n-            macro_rules! define_fn {\n-                () => (fn foo() {})\n-            }\n+            r#\"\n+//- /lib.rs\n+macro_rules! define_fn {\n+    () => (fn foo() {})\n+}\n \n-            define_fn!();\n+define_fn!();\n \n-            fn bar() {\n-               <|>foo();\n-            }\n-            \",\n-            \"foo FN_DEF FileId(1) 51..64 51..64\",\n+fn bar() {\n+   <|>foo();\n+}\n+\"#,\n+            \"foo FN_DEF FileId(1) 52..65 52..65\",\n             \"define_fn!();|define_fn!();\",\n         );\n     }\n@@ -804,40 +804,40 @@ mod tests {\n     #[test]\n     fn goto_within_macro() {\n         check_goto(\n-            \"\n-            //- /lib.rs\n-            macro_rules! id {\n-                ($($tt:tt)*) => ($($tt)*)\n-            }\n+            r#\"\n+//- /lib.rs\n+macro_rules! id {\n+    ($($tt:tt)*) => ($($tt)*)\n+}\n \n-            fn foo() {\n-                let x = 1;\n-                id!({\n-                    let y = <|>x;\n-                    let z = y;\n-                });\n-            }\n-            \",\n-            \"x BIND_PAT FileId(1) 69..70\",\n+fn foo() {\n+    let x = 1;\n+    id!({\n+        let y = <|>x;\n+        let z = y;\n+    });\n+}\n+\"#,\n+            \"x BIND_PAT FileId(1) 70..71\",\n             \"x\",\n         );\n \n         check_goto(\n-            \"\n-            //- /lib.rs\n-            macro_rules! id {\n-                ($($tt:tt)*) => ($($tt)*)\n-            }\n+            r#\"\n+//- /lib.rs\n+macro_rules! id {\n+    ($($tt:tt)*) => ($($tt)*)\n+}\n \n-            fn foo() {\n-                let x = 1;\n-                id!({\n-                    let y = x;\n-                    let z = <|>y;\n-                });\n-            }\n-            \",\n-            \"y BIND_PAT FileId(1) 98..99\",\n+fn foo() {\n+    let x = 1;\n+    id!({\n+        let y = x;\n+        let z = <|>y;\n+    });\n+}\n+\"#,\n+            \"y BIND_PAT FileId(1) 99..100\",\n             \"y\",\n         );\n     }"}, {"sha": "a898f2e4a0e74b6562e9367b6522c08cce071d56", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -2106,51 +2106,51 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n-            [\n-                GoToType(\n-                    [\n-                        HoverGotoTypeData {\n-                            mod_path: \"B\",\n-                            nav: NavigationTarget {\n-                                file_id: FileId(\n-                                    1,\n-                                ),\n-                                full_range: 41..54,\n-                                name: \"B\",\n-                                kind: STRUCT_DEF,\n-                                focus_range: Some(\n-                                    48..49,\n-                                ),\n-                                container_name: None,\n-                                description: Some(\n-                                    \"struct B\",\n-                                ),\n-                                docs: None,\n-                            },\n+        [\n+            GoToType(\n+                [\n+                    HoverGotoTypeData {\n+                        mod_path: \"B\",\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 42..55,\n+                            name: \"B\",\n+                            kind: STRUCT_DEF,\n+                            focus_range: Some(\n+                                49..50,\n+                            ),\n+                            container_name: None,\n+                            description: Some(\n+                                \"struct B\",\n+                            ),\n+                            docs: None,\n                         },\n-                        HoverGotoTypeData {\n-                            mod_path: \"Foo\",\n-                            nav: NavigationTarget {\n-                                file_id: FileId(\n-                                    1,\n-                                ),\n-                                full_range: 0..12,\n-                                name: \"Foo\",\n-                                kind: TRAIT_DEF,\n-                                focus_range: Some(\n-                                    6..9,\n-                                ),\n-                                container_name: None,\n-                                description: Some(\n-                                    \"trait Foo\",\n-                                ),\n-                                docs: None,\n-                            },\n+                    },\n+                    HoverGotoTypeData {\n+                        mod_path: \"Foo\",\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            full_range: 0..12,\n+                            name: \"Foo\",\n+                            kind: TRAIT_DEF,\n+                            focus_range: Some(\n+                                6..9,\n+                            ),\n+                            container_name: None,\n+                            description: Some(\n+                                \"trait Foo\",\n+                            ),\n+                            docs: None,\n                         },\n-                    ],\n-                ),\n-            ]\n-            \"###);\n+                    },\n+                ],\n+            ),\n+        ]\n+        \"###);\n     }\n \n     #[test]"}, {"sha": "4a96d65056d07f63f01d7bede334bbd5664029e5", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -427,8 +427,8 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(2) 16..50 27..30 Other\",\n-            &[\"FileId(1) 52..55 StructLiteral\", \"FileId(3) 77..80 StructLiteral\"],\n+            \"Foo STRUCT_DEF FileId(2) 17..51 28..31 Other\",\n+            &[\"FileId(1) 53..56 StructLiteral\", \"FileId(3) 79..82 StructLiteral\"],\n         );\n     }\n \n@@ -455,7 +455,7 @@ mod tests {\n \n         let (analysis, pos) = analysis_and_position(code);\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n-        check_result(refs, \"foo SOURCE_FILE FileId(2) 0..35 Other\", &[\"FileId(1) 13..16 Other\"]);\n+        check_result(refs, \"foo SOURCE_FILE FileId(2) 0..35 Other\", &[\"FileId(1) 14..17 Other\"]);\n     }\n \n     #[test]\n@@ -483,7 +483,7 @@ mod tests {\n         check_result(\n             refs,\n             \"Foo STRUCT_DEF FileId(3) 0..41 18..21 Other\",\n-            &[\"FileId(2) 20..23 Other\", \"FileId(2) 46..49 StructLiteral\"],\n+            &[\"FileId(2) 20..23 Other\", \"FileId(2) 47..50 StructLiteral\"],\n         );\n     }\n \n@@ -510,15 +510,15 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"quux FN_DEF FileId(1) 18..34 25..29 Other\",\n+            \"quux FN_DEF FileId(1) 19..35 26..30 Other\",\n             &[\"FileId(2) 16..20 StructLiteral\", \"FileId(3) 16..20 StructLiteral\"],\n         );\n \n         let refs =\n             analysis.find_all_refs(pos, Some(SearchScope::single_file(bar))).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"quux FN_DEF FileId(1) 18..34 25..29 Other\",\n+            \"quux FN_DEF FileId(1) 19..35 26..30 Other\",\n             &[\"FileId(3) 16..20 StructLiteral\"],\n         );\n     }\n@@ -637,8 +637,8 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"f FN_DEF FileId(1) 25..34 28..29 Other\",\n-            &[\"FileId(2) 11..12 Other\", \"FileId(2) 27..28 StructLiteral\"],\n+            \"f FN_DEF FileId(1) 26..35 29..30 Other\",\n+            &[\"FileId(2) 11..12 Other\", \"FileId(2) 28..29 StructLiteral\"],\n         );\n     }\n "}, {"sha": "f569a3f17137145b1e2430b9ff7d867ada256d85", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -310,11 +310,11 @@ mod tests {\n                     file_id: FileId(\n                         1,\n                     ),\n-                    full_range: 22..46,\n+                    full_range: 23..47,\n                     name: \"test_foo\",\n                     kind: FN_DEF,\n                     focus_range: Some(\n-                        33..41,\n+                        34..42,\n                     ),\n                     container_name: None,\n                     description: None,\n@@ -335,11 +335,11 @@ mod tests {\n                     file_id: FileId(\n                         1,\n                     ),\n-                    full_range: 47..81,\n+                    full_range: 49..83,\n                     name: \"test_foo\",\n                     kind: FN_DEF,\n                     focus_range: Some(\n-                        68..76,\n+                        70..78,\n                     ),\n                     container_name: None,\n                     description: None,\n@@ -360,11 +360,11 @@ mod tests {\n                     file_id: FileId(\n                         1,\n                     ),\n-                    full_range: 82..104,\n+                    full_range: 85..107,\n                     name: \"bench\",\n                     kind: FN_DEF,\n                     focus_range: Some(\n-                        94..99,\n+                        97..102,\n                     ),\n                     container_name: None,\n                     description: None,\n@@ -424,7 +424,7 @@ mod tests {\n                     file_id: FileId(\n                         1,\n                     ),\n-                    full_range: 22..64,\n+                    full_range: 23..65,\n                     name: \"foo\",\n                     kind: FN_DEF,\n                     focus_range: None,\n@@ -489,7 +489,7 @@ mod tests {\n                     file_id: FileId(\n                         1,\n                     ),\n-                    full_range: 51..105,\n+                    full_range: 52..106,\n                     name: \"foo\",\n                     kind: FN_DEF,\n                     focus_range: None,"}, {"sha": "58839b14aa03a53a81acb0ec3b45dce36a97e0f0", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -178,14 +178,8 @@ fn main() {}\n pub use std::collections::HashMap;\n \"#,\n                 \"range\": {\n-                    \"end\": {\n-                        \"character\": 0,\n-                        \"line\": 7\n-                    },\n-                    \"start\": {\n-                        \"character\": 0,\n-                        \"line\": 0\n-                    }\n+                    \"end\": { \"character\": 0, \"line\": 6 },\n+                    \"start\": { \"character\": 0, \"line\": 0 }\n                 }\n             }\n         ]),\n@@ -244,14 +238,8 @@ fn main() {}\n pub use std::collections::HashMap;\n \"#,\n                 \"range\": {\n-                    \"end\": {\n-                        \"character\": 0,\n-                        \"line\": 10\n-                    },\n-                    \"start\": {\n-                        \"character\": 0,\n-                        \"line\": 0\n-                    }\n+                    \"end\": { \"character\": 0, \"line\": 9 },\n+                    \"start\": { \"character\": 0, \"line\": 0 }\n                 }\n             }\n         ]),"}, {"sha": "08ac6f70f397ff8fc13ac68c2d404788abc075e6", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -128,3 +128,85 @@ pub fn split_delim(haystack: &str, delim: char) -> Option<(&str, &str)> {\n     let idx = haystack.find(delim)?;\n     Some((&haystack[..idx], &haystack[idx + delim.len_utf8()..]))\n }\n+\n+pub fn trim_indent(mut text: &str) -> String {\n+    if text.starts_with('\\n') {\n+        text = &text[1..];\n+    }\n+    let indent = text\n+        .lines()\n+        .filter(|it| !it.trim().is_empty())\n+        .map(|it| it.len() - it.trim_start().len())\n+        .min()\n+        .unwrap_or(0);\n+    lines_with_ends(text)\n+        .map(\n+            |line| {\n+                if line.len() <= indent {\n+                    line.trim_start_matches(' ')\n+                } else {\n+                    &line[indent..]\n+                }\n+            },\n+        )\n+        .collect()\n+}\n+\n+pub fn lines_with_ends(text: &str) -> LinesWithEnds {\n+    LinesWithEnds { text }\n+}\n+\n+pub struct LinesWithEnds<'a> {\n+    text: &'a str,\n+}\n+\n+impl<'a> Iterator for LinesWithEnds<'a> {\n+    type Item = &'a str;\n+    fn next(&mut self) -> Option<&'a str> {\n+        if self.text.is_empty() {\n+            return None;\n+        }\n+        let idx = self.text.find('\\n').map_or(self.text.len(), |it| it + 1);\n+        let (res, next) = self.text.split_at(idx);\n+        self.text = next;\n+        Some(res)\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_trim_indent() {\n+        assert_eq!(trim_indent(\"\"), \"\");\n+        assert_eq!(\n+            trim_indent(\n+                \"\n+            hello\n+            world\n+\"\n+            ),\n+            \"hello\\nworld\\n\"\n+        );\n+        assert_eq!(\n+            trim_indent(\n+                \"\n+            hello\n+            world\"\n+            ),\n+            \"hello\\nworld\"\n+        );\n+        assert_eq!(trim_indent(\"    hello\\n    world\\n\"), \"hello\\nworld\\n\");\n+        assert_eq!(\n+            trim_indent(\n+                \"\n+            fn main() {\n+                return 92;\n+            }\n+        \"\n+            ),\n+            \"fn main() {\\n    return 92;\\n}\\n\"\n+        );\n+    }\n+}"}, {"sha": "8747fa4a52b09439c82b3716ad3e7cb2a925780b", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 17, "deletions": 93, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -2,7 +2,7 @@\n //! rust-analyzer database from a single string.\n \n use rustc_hash::FxHashMap;\n-use stdx::split_delim;\n+use stdx::{lines_with_ends, split_delim, trim_indent};\n \n #[derive(Debug, Eq, PartialEq)]\n pub struct Fixture {\n@@ -26,42 +26,30 @@ impl Fixture {\n     ///  // - other meta\n     ///  ```\n     pub fn parse(ra_fixture: &str) -> Vec<Fixture> {\n-        let fixture = indent_first_line(ra_fixture);\n-        let margin = fixture_margin(&fixture);\n-\n-        let mut lines = fixture\n-        .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n-        .enumerate()\n-        .filter_map(|(ix, line)| {\n-            if line.len() >= margin {\n-                assert!(line[..margin].trim().is_empty());\n-                let line_content = &line[margin..];\n-                if !line_content.starts_with(\"//-\") {\n-                    assert!(\n-                        !line_content.contains(\"//-\"),\n-                        r#\"Metadata line {} has invalid indentation. All metadata lines need to have the same indentation.\n-The offending line: {:?}\"#,\n-                        ix,\n-                        line\n-                    );\n-                }\n-                Some(line_content)\n-            } else {\n-                assert!(line.trim().is_empty());\n-                None\n-            }\n-        });\n+        let fixture = trim_indent(ra_fixture);\n \n         let mut res: Vec<Fixture> = Vec::new();\n-        for line in lines.by_ref() {\n+\n+        for (ix, line) in lines_with_ends(&fixture).enumerate() {\n+            if line.contains(\"//-\") {\n+                assert!(\n+                    line.starts_with(\"//-\"),\n+                    \"Metadata line {} has invalid indentation. \\\n+                     All metadata lines need to have the same indentation.\\n\\\n+                     The offending line: {:?}\",\n+                    ix,\n+                    line\n+                );\n+            }\n+\n             if line.starts_with(\"//-\") {\n                 let meta = Fixture::parse_meta_line(line);\n                 res.push(meta)\n             } else if let Some(entry) = res.last_mut() {\n                 entry.text.push_str(line);\n-                entry.text.push('\\n');\n             }\n         }\n+\n         res\n     }\n \n@@ -118,51 +106,6 @@ The offending line: {:?}\"#,\n     }\n }\n \n-/// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n-/// This allows fixtures to start off in a different indentation, e.g. to align the first line with\n-/// the other lines visually:\n-/// ```\n-/// let fixture = \"//- /lib.rs\n-///                mod foo;\n-///                //- /foo.rs\n-///                fn bar() {}\n-/// \";\n-/// assert_eq!(fixture_margin(fixture),\n-/// \"               //- /lib.rs\n-///                mod foo;\n-///                //- /foo.rs\n-///                fn bar() {}\n-/// \")\n-/// ```\n-fn indent_first_line(fixture: &str) -> String {\n-    if fixture.is_empty() {\n-        return String::new();\n-    }\n-    let mut lines = fixture.lines();\n-    let first_line = lines.next().unwrap();\n-    if first_line.contains(\"//-\") {\n-        let rest = lines.collect::<Vec<_>>().join(\"\\n\");\n-        let fixed_margin = fixture_margin(&rest);\n-        let fixed_indent = fixed_margin - indent_len(first_line);\n-        format!(\"\\n{}{}\\n{}\", \" \".repeat(fixed_indent), first_line, rest)\n-    } else {\n-        fixture.to_owned()\n-    }\n-}\n-\n-fn fixture_margin(fixture: &str) -> usize {\n-    fixture\n-        .lines()\n-        .filter(|it| it.trim_start().starts_with(\"//-\"))\n-        .map(indent_len)\n-        .next()\n-        .expect(\"empty fixture\")\n-}\n-\n-fn indent_len(s: &str) -> usize {\n-    s.len() - s.trim_start().len()\n-}\n-\n #[test]\n #[should_panic]\n fn parse_fixture_checks_further_indented_metadata() {\n@@ -178,25 +121,6 @@ fn parse_fixture_checks_further_indented_metadata() {\n     );\n }\n \n-#[test]\n-fn parse_fixture_can_handle_dedented_first_line() {\n-    let fixture = \"//- /lib.rs\n-                   mod foo;\n-                   //- /foo.rs\n-                   struct Bar;\n-\";\n-    assert_eq!(\n-        Fixture::parse(fixture),\n-        Fixture::parse(\n-            \"//- /lib.rs\n-mod foo;\n-//- /foo.rs\n-struct Bar;\n-\"\n-        )\n-    )\n-}\n-\n #[test]\n fn parse_fixture_gets_full_meta() {\n     let parsed = Fixture::parse(\n@@ -208,7 +132,7 @@ fn parse_fixture_gets_full_meta() {\n     assert_eq!(1, parsed.len());\n \n     let meta = &parsed[0];\n-    assert_eq!(\"mod m;\\n\\n\", meta.text);\n+    assert_eq!(\"mod m;\\n\", meta.text);\n \n     assert_eq!(\"foo\", meta.crate_name.as_ref().unwrap());\n     assert_eq!(\"/lib.rs\", meta.path);"}, {"sha": "eaeeeb97b19054b8aaf2b4e436a17a9c687dfcc7", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa69757a01c26cfad12498053c55cbc3d66a4bdb/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=aa69757a01c26cfad12498053c55cbc3d66a4bdb", "patch": "@@ -43,7 +43,7 @@ macro_rules! assert_eq_text {\n             if left.trim() == right.trim() {\n                 eprintln!(\"Left:\\n{:?}\\n\\nRight:\\n{:?}\\n\\nWhitespace difference\\n\", left, right);\n             } else {\n-                let changeset = $crate::__Changeset::new(right, left, \"\\n\");\n+                let changeset = $crate::__Changeset::new(left, right, \"\\n\");\n                 eprintln!(\"Left:\\n{}\\n\\nRight:\\n{}\\n\\nDiff:\\n{}\\n\", left, right, changeset);\n             }\n             eprintln!($($tt)*);"}]}