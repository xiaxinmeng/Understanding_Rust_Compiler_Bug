{"sha": "93c32b55e2f03bc88d3d1601626bcd9059924005", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYzMyYjU1ZTJmMDNiYzg4ZDNkMTYwMTYyNmJjZDkwNTk5MjQwMDU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-09T15:13:16Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-20T20:18:21Z"}, "message": "trans: split trans_consume off from trans_operand.", "tree": {"sha": "310fc7f9253418bf17dd807dcf5d13d1fa6578fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/310fc7f9253418bf17dd807dcf5d13d1fa6578fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93c32b55e2f03bc88d3d1601626bcd9059924005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93c32b55e2f03bc88d3d1601626bcd9059924005", "html_url": "https://github.com/rust-lang/rust/commit/93c32b55e2f03bc88d3d1601626bcd9059924005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93c32b55e2f03bc88d3d1601626bcd9059924005/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5522e678bcefe14cc2ab3d0ab329b7059ce52b36", "url": "https://api.github.com/repos/rust-lang/rust/commits/5522e678bcefe14cc2ab3d0ab329b7059ce52b36", "html_url": "https://github.com/rust-lang/rust/commit/5522e678bcefe14cc2ab3d0ab329b7059ce52b36"}], "stats": {"total": 90, "additions": 50, "deletions": 40}, "files": [{"sha": "980db76d632c12da936f2df4d4f217c109dc5fc2", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 50, "deletions": 40, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/93c32b55e2f03bc88d3d1601626bcd9059924005/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c32b55e2f03bc88d3d1601626bcd9059924005/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=93c32b55e2f03bc88d3d1601626bcd9059924005", "patch": "@@ -164,56 +164,66 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         OperandRef { val: val, ty: ty }\n     }\n \n-    pub fn trans_operand(&mut self,\n+    pub fn trans_consume(&mut self,\n                          bcx: &BlockAndBuilder<'bcx, 'tcx>,\n-                         operand: &mir::Operand<'tcx>)\n+                         lvalue: &mir::Lvalue<'tcx>)\n                          -> OperandRef<'tcx>\n     {\n-        debug!(\"trans_operand(operand={:?})\", operand);\n+        debug!(\"trans_consume(lvalue={:?})\", lvalue);\n \n-        match *operand {\n-            mir::Operand::Consume(ref lvalue) => {\n-                // watch out for temporaries that do not have an\n-                // alloca; they are handled somewhat differently\n-                if let &mir::Lvalue::Temp(index) = lvalue {\n-                    match self.temps[index] {\n-                        TempRef::Operand(Some(o)) => {\n-                            return o;\n-                        }\n-                        TempRef::Operand(None) => {\n-                            bug!(\"use of {:?} before def\", lvalue);\n-                        }\n-                        TempRef::Lvalue(..) => {\n-                            // use path below\n-                        }\n-                    }\n+        // watch out for temporaries that do not have an\n+        // alloca; they are handled somewhat differently\n+        if let &mir::Lvalue::Temp(index) = lvalue {\n+            match self.temps[index] {\n+                TempRef::Operand(Some(o)) => {\n+                    return o;\n+                }\n+                TempRef::Operand(None) => {\n+                    bug!(\"use of {:?} before def\", lvalue);\n                 }\n+                TempRef::Lvalue(..) => {\n+                    // use path below\n+                }\n+            }\n+        }\n \n-                // Moves out of pair fields are trivial.\n-                if let &mir::Lvalue::Projection(ref proj) = lvalue {\n-                    if let mir::Lvalue::Temp(index) = proj.base {\n-                        let temp_ref = &self.temps[index];\n-                        if let &TempRef::Operand(Some(o)) = temp_ref {\n-                            match (o.val, &proj.elem) {\n-                                (OperandValue::Pair(a, b),\n-                                 &mir::ProjectionElem::Field(ref f, ty)) => {\n-                                    let llval = [a, b][f.index()];\n-                                    return OperandRef {\n-                                        val: OperandValue::Immediate(llval),\n-                                        ty: bcx.monomorphize(&ty)\n-                                    };\n-                                }\n-                                _ => {}\n-                            }\n+        // Moves out of pair fields are trivial.\n+        if let &mir::Lvalue::Projection(ref proj) = lvalue {\n+            if let mir::Lvalue::Temp(index) = proj.base {\n+                let temp_ref = &self.temps[index];\n+                if let &TempRef::Operand(Some(o)) = temp_ref {\n+                    match (o.val, &proj.elem) {\n+                        (OperandValue::Pair(a, b),\n+                         &mir::ProjectionElem::Field(ref f, ty)) => {\n+                            let llval = [a, b][f.index()];\n+                            return OperandRef {\n+                                val: OperandValue::Immediate(llval),\n+                                ty: bcx.monomorphize(&ty)\n+                            };\n                         }\n+                        _ => {}\n                     }\n                 }\n+            }\n+        }\n+\n+        // for most lvalues, to consume them we just load them\n+        // out from their home\n+        let tr_lvalue = self.trans_lvalue(bcx, lvalue);\n+        let ty = tr_lvalue.ty.to_ty(bcx.tcx());\n+        self.trans_load(bcx, tr_lvalue.llval, ty)\n+    }\n \n-                // for most lvalues, to consume them we just load them\n-                // out from their home\n-                let tr_lvalue = self.trans_lvalue(bcx, lvalue);\n-                let ty = tr_lvalue.ty.to_ty(bcx.tcx());\n-                self.trans_load(bcx, tr_lvalue.llval, ty)\n+    pub fn trans_operand(&mut self,\n+                         bcx: &BlockAndBuilder<'bcx, 'tcx>,\n+                         operand: &mir::Operand<'tcx>)\n+                         -> OperandRef<'tcx>\n+    {\n+        debug!(\"trans_operand(operand={:?})\", operand);\n+\n+        match *operand {\n+            mir::Operand::Consume(ref lvalue) => {\n+                self.trans_consume(bcx, lvalue)\n             }\n \n             mir::Operand::Constant(ref constant) => {"}]}