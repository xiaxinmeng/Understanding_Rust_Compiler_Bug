{"sha": "348d398b1caeda66a85c9992e79a04e0ccbe3291", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0OGQzOThiMWNhZWRhNjZhODVjOTk5MmU3OWEwNGUwY2NiZTMyOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-16T04:49:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-16T04:49:53Z"}, "message": "Auto merge of #4395 - lzutao:rustup-63586, r=phansch\n\nRustup \"Remove `Spanned` from `{ast,hir}::FieldPat`\"\n\nRustup https://github.com/rust-lang/rust/pull/63586\n\nchangelog: none", "tree": {"sha": "95239cca279a4707afdb894bfab3afb88cca8de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95239cca279a4707afdb894bfab3afb88cca8de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/348d398b1caeda66a85c9992e79a04e0ccbe3291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/348d398b1caeda66a85c9992e79a04e0ccbe3291", "html_url": "https://github.com/rust-lang/rust/commit/348d398b1caeda66a85c9992e79a04e0ccbe3291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/348d398b1caeda66a85c9992e79a04e0ccbe3291/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f95c87ecea0a885c8dd16c19a38dc3b46ab0754b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f95c87ecea0a885c8dd16c19a38dc3b46ab0754b", "html_url": "https://github.com/rust-lang/rust/commit/f95c87ecea0a885c8dd16c19a38dc3b46ab0754b"}, {"sha": "65b906a8fced2f0fb8c56f8f6209e258406d8a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b906a8fced2f0fb8c56f8f6209e258406d8a36", "html_url": "https://github.com/rust-lang/rust/commit/65b906a8fced2f0fb8c56f8f6209e258406d8a36"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "64239bb4dd425e7049fb0213351fa257fd3c07bc", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=348d398b1caeda66a85c9992e79a04e0ccbe3291", "patch": "@@ -300,7 +300,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> FxHashMap<LocalI\n             },\n             PatKind::Struct(_, ref fields, _) => {\n                 for pat in fields {\n-                    bindings_impl(cx, &pat.node.pat, map);\n+                    bindings_impl(cx, &pat.pat, map);\n                 }\n             },\n             PatKind::Tuple(ref fields, _) => {"}, {"sha": "1dcdaac9b862a3ef82b97a01421a7eee0d3b7790", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=348d398b1caeda66a85c9992e79a04e0ccbe3291", "patch": "@@ -31,8 +31,8 @@ declare_lint_pass!(DbgMacro => [DBG_MACRO]);\n \n impl EarlyLintPass for DbgMacro {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n-        if mac.node.path == sym!(dbg) {\n-            if let Some(sugg) = tts_span(mac.node.tts.clone()).and_then(|span| snippet_opt(cx, span)) {\n+        if mac.path == sym!(dbg) {\n+            if let Some(sugg) = tts_span(mac.tts.clone()).and_then(|span| snippet_opt(cx, span)) {\n                 span_lint_and_sugg(\n                     cx,\n                     DBG_MACRO,"}, {"sha": "b998d3f8a331acf01eeee09a40e7e3647f535854", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=348d398b1caeda66a85c9992e79a04e0ccbe3291", "patch": "@@ -234,7 +234,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                 .name;\n \n             for field in pfields {\n-                if let PatKind::Wild = field.node.pat.node {\n+                if let PatKind::Wild = field.pat.node {\n                     wilds += 1;\n                 }\n             }\n@@ -252,7 +252,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                 let mut normal = vec![];\n \n                 for field in pfields {\n-                    match field.node.pat.node {\n+                    match field.pat.node {\n                         PatKind::Wild => {},\n                         _ => {\n                             if let Ok(n) = cx.sess().source_map().span_to_snippet(field.span) {\n@@ -262,7 +262,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                     }\n                 }\n                 for field in pfields {\n-                    if let PatKind::Wild = field.node.pat.node {\n+                    if let PatKind::Wild = field.pat.node {\n                         wilds -= 1;\n                         if wilds > 0 {\n                             span_lint("}, {"sha": "fc614b08a1f5c001d2f216516ea1c1b363ed81e0", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=348d398b1caeda66a85c9992e79a04e0ccbe3291", "patch": "@@ -131,8 +131,8 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             PatKind::Ident(_, ident, _) => self.check_ident(ident),\n             PatKind::Struct(_, ref fields, _) => {\n                 for field in fields {\n-                    if !field.node.is_shorthand {\n-                        self.visit_pat(&field.node.pat);\n+                    if !field.is_shorthand {\n+                        self.visit_pat(&field.pat);\n                     }\n                 }\n             },"}, {"sha": "b30f8d415b18f61642755e50e90dbac07e851db4", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=348d398b1caeda66a85c9992e79a04e0ccbe3291", "patch": "@@ -190,20 +190,20 @@ fn check_pat<'a, 'tcx>(\n             if let Some(init_struct) = init {\n                 if let ExprKind::Struct(_, ref efields, _) = init_struct.node {\n                     for field in pfields {\n-                        let name = field.node.ident.name;\n+                        let name = field.ident.name;\n                         let efield = efields\n                             .iter()\n                             .find_map(|f| if f.ident.name == name { Some(&*f.expr) } else { None });\n-                        check_pat(cx, &field.node.pat, efield, span, bindings);\n+                        check_pat(cx, &field.pat, efield, span, bindings);\n                     }\n                 } else {\n                     for field in pfields {\n-                        check_pat(cx, &field.node.pat, init, span, bindings);\n+                        check_pat(cx, &field.pat, init, span, bindings);\n                     }\n                 }\n             } else {\n                 for field in pfields {\n-                    check_pat(cx, &field.node.pat, None, span, bindings);\n+                    check_pat(cx, &field.pat, None, span, bindings);\n                 }\n             }\n         },"}, {"sha": "309b5165c69e1b1c26016b73a9151e11bbb0ac94", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=348d398b1caeda66a85c9992e79a04e0ccbe3291", "patch": "@@ -420,11 +420,11 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n             println!(\"{}ignore leftover fields: {}\", ind, ignore);\n             println!(\"{}fields:\", ind);\n             for field in fields {\n-                println!(\"{}  field name: {}\", ind, field.node.ident.name);\n-                if field.node.is_shorthand {\n+                println!(\"{}  field name: {}\", ind, field.ident.name);\n+                if field.is_shorthand {\n                     println!(\"{}  in shorthand notation\", ind);\n                 }\n-                print_pat(cx, &field.node.pat, indent + 1);\n+                print_pat(cx, &field.pat, indent + 1);\n             }\n         },\n         hir::PatKind::TupleStruct(ref path, ref fields, opt_dots_position) => {"}, {"sha": "9981799ed1d5d51332e71dd64aa4b36c4306911b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=348d398b1caeda66a85c9992e79a04e0ccbe3291", "patch": "@@ -783,7 +783,7 @@ pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat) -> bool {\n             if is_enum_variant(cx, qpath, pat.hir_id) {\n                 true\n             } else {\n-                are_refutable(cx, fields.iter().map(|field| &*field.node.pat))\n+                are_refutable(cx, fields.iter().map(|field| &*field.pat))\n             }\n         },\n         PatKind::TupleStruct(ref qpath, ref pats, _) => {"}, {"sha": "bcf688c1914c39caaae627a6190ecc8cb04196c0", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348d398b1caeda66a85c9992e79a04e0ccbe3291/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=348d398b1caeda66a85c9992e79a04e0ccbe3291", "patch": "@@ -183,9 +183,9 @@ declare_lint_pass!(Write => [\n \n impl EarlyLintPass for Write {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &Mac) {\n-        if mac.node.path == sym!(println) {\n+        if mac.path == sym!(println) {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `println!`\");\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.node.tts, false) {\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n                 if fmt_str.contents.is_empty() {\n                     span_lint_and_sugg(\n                         cx,\n@@ -198,9 +198,9 @@ impl EarlyLintPass for Write {\n                     );\n                 }\n             }\n-        } else if mac.node.path == sym!(print) {\n+        } else if mac.path == sym!(print) {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `print!`\");\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.node.tts, false) {\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n@@ -211,7 +211,7 @@ impl EarlyLintPass for Write {\n                             err.multipart_suggestion(\n                                 \"use `println!` instead\",\n                                 vec![\n-                                    (mac.node.path.span, String::from(\"println\")),\n+                                    (mac.path.span, String::from(\"println\")),\n                                     (fmt_str.newline_span(), String::new()),\n                                 ],\n                                 Applicability::MachineApplicable,\n@@ -220,8 +220,8 @@ impl EarlyLintPass for Write {\n                     );\n                 }\n             }\n-        } else if mac.node.path == sym!(write) {\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.node.tts, true) {\n+        } else if mac.path == sym!(write) {\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, true) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n@@ -232,7 +232,7 @@ impl EarlyLintPass for Write {\n                             err.multipart_suggestion(\n                                 \"use `writeln!()` instead\",\n                                 vec![\n-                                    (mac.node.path.span, String::from(\"writeln\")),\n+                                    (mac.path.span, String::from(\"writeln\")),\n                                     (fmt_str.newline_span(), String::new()),\n                                 ],\n                                 Applicability::MachineApplicable,\n@@ -241,8 +241,8 @@ impl EarlyLintPass for Write {\n                     )\n                 }\n             }\n-        } else if mac.node.path == sym!(writeln) {\n-            if let (Some(fmt_str), expr) = check_tts(cx, &mac.node.tts, true) {\n+        } else if mac.path == sym!(writeln) {\n+            if let (Some(fmt_str), expr) = check_tts(cx, &mac.tts, true) {\n                 if fmt_str.contents.is_empty() {\n                     let mut applicability = Applicability::MachineApplicable;\n                     let suggestion = expr.map_or_else("}]}