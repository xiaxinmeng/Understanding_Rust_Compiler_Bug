{"sha": "54aa418a6082b364b90feee70b07381ea266c4d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YWE0MThhNjA4MmIzNjRiOTBmZWVlNzBiMDczODFlYTI2NmM0ZDU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-17T11:30:48Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-09T09:50:55Z"}, "message": "Reduce the number of drop-flag assignments in unwind paths", "tree": {"sha": "68ca37739e63299418e01661411b0f36786f1f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68ca37739e63299418e01661411b0f36786f1f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54aa418a6082b364b90feee70b07381ea266c4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54aa418a6082b364b90feee70b07381ea266c4d5", "html_url": "https://github.com/rust-lang/rust/commit/54aa418a6082b364b90feee70b07381ea266c4d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54aa418a6082b364b90feee70b07381ea266c4d5/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "611988551fba1bcbb33ae2e1e0171cb8d2e70d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/611988551fba1bcbb33ae2e1e0171cb8d2e70d5a", "html_url": "https://github.com/rust-lang/rust/commit/611988551fba1bcbb33ae2e1e0171cb8d2e70d5a"}], "stats": {"total": 51, "additions": 12, "deletions": 39}, "files": [{"sha": "8f14c48e6dd0097145e59865ac8b9e2eb8bb0730", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54aa418a6082b364b90feee70b07381ea266c4d5/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54aa418a6082b364b90feee70b07381ea266c4d5/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=54aa418a6082b364b90feee70b07381ea266c4d5", "patch": "@@ -361,17 +361,14 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn gather_terminator(&mut self, term: &Terminator<'tcx>) {\n         match term.kind {\n             TerminatorKind::Goto { target: _ }\n+            | TerminatorKind::Return\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdges { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Unreachable => {}\n \n-            TerminatorKind::Return => {\n-                self.gather_move(Place::return_place());\n-            }\n-\n             TerminatorKind::Assert { ref cond, .. } => {\n                 self.gather_operand(cond);\n             }"}, {"sha": "2d7d3a0ccae141866a3becb301ad07b39d3b8235", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/54aa418a6082b364b90feee70b07381ea266c4d5/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54aa418a6082b364b90feee70b07381ea266c4d5/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=54aa418a6082b364b90feee70b07381ea266c4d5", "patch": "@@ -163,8 +163,6 @@ where\n                     .patch_terminator(bb, TerminatorKind::Goto { target: self.succ });\n             }\n             DropStyle::Static => {\n-                let loc = self.terminator_loc(bb);\n-                self.elaborator.clear_drop_flag(loc, self.path, DropFlagMode::Deep);\n                 self.elaborator.patch().patch_terminator(\n                     bb,\n                     TerminatorKind::Drop {\n@@ -175,9 +173,7 @@ where\n                 );\n             }\n             DropStyle::Conditional => {\n-                let unwind = self.unwind; // FIXME(#43234)\n-                let succ = self.succ;\n-                let drop_bb = self.complete_drop(Some(DropFlagMode::Deep), succ, unwind);\n+                let drop_bb = self.complete_drop(self.succ, self.unwind);\n                 self.elaborator\n                     .patch()\n                     .patch_terminator(bb, TerminatorKind::Goto { target: drop_bb });\n@@ -249,7 +245,7 @@ where\n                 // our own drop flag.\n                 path: self.path,\n             }\n-            .complete_drop(None, succ, unwind)\n+            .complete_drop(succ, unwind)\n         }\n     }\n \n@@ -278,13 +274,7 @@ where\n         // Clear the \"master\" drop flag at the end. This is needed\n         // because the \"master\" drop protects the ADT's discriminant,\n         // which is invalidated after the ADT is dropped.\n-        let (succ, unwind) = (self.succ, self.unwind); // FIXME(#43234)\n-        (\n-            self.drop_flag_reset_block(DropFlagMode::Shallow, succ, unwind),\n-            unwind.map(|unwind| {\n-                self.drop_flag_reset_block(DropFlagMode::Shallow, unwind, Unwind::InCleanup)\n-            }),\n-        )\n+        (self.drop_flag_reset_block(DropFlagMode::Shallow, self.succ, self.unwind), self.unwind)\n     }\n \n     /// Creates a full drop ladder, consisting of 2 connected half-drop-ladders\n@@ -820,11 +810,7 @@ where\n                     self.open_drop_for_adt(def, substs)\n                 }\n             }\n-            ty::Dynamic(..) => {\n-                let unwind = self.unwind; // FIXME(#43234)\n-                let succ = self.succ;\n-                self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n-            }\n+            ty::Dynamic(..) => self.complete_drop(self.succ, self.unwind),\n             ty::Array(ety, size) => {\n                 let size = size.try_eval_usize(self.tcx(), self.elaborator.param_env());\n                 self.open_drop_for_array(ety, size)\n@@ -835,20 +821,10 @@ where\n         }\n     }\n \n-    fn complete_drop(\n-        &mut self,\n-        drop_mode: Option<DropFlagMode>,\n-        succ: BasicBlock,\n-        unwind: Unwind,\n-    ) -> BasicBlock {\n-        debug!(\"complete_drop({:?},{:?})\", self, drop_mode);\n+    fn complete_drop(&mut self, succ: BasicBlock, unwind: Unwind) -> BasicBlock {\n+        debug!(\"complete_drop(succ={:?}, unwind={:?})\", succ, unwind);\n \n         let drop_block = self.drop_block(succ, unwind);\n-        let drop_block = if let Some(mode) = drop_mode {\n-            self.drop_flag_reset_block(mode, drop_block, unwind)\n-        } else {\n-            drop_block\n-        };\n \n         self.drop_flag_test_block(drop_block, succ, unwind)\n     }\n@@ -861,6 +837,11 @@ where\n     ) -> BasicBlock {\n         debug!(\"drop_flag_reset_block({:?},{:?})\", self, mode);\n \n+        if unwind.is_cleanup() {\n+            // The drop flag isn't read again on the unwind path, so don't\n+            // bother setting it.\n+            return succ;\n+        }\n         let block = self.new_block(unwind, TerminatorKind::Goto { target: succ });\n         let block_start = Location { block, statement_index: 0 };\n         self.elaborator.clear_drop_flag(block_start, self.path, mode);\n@@ -969,11 +950,6 @@ where\n         self.elaborator.patch().new_temp(ty, self.source_info.span)\n     }\n \n-    fn terminator_loc(&mut self, bb: BasicBlock) -> Location {\n-        let body = self.elaborator.body();\n-        self.elaborator.patch().terminator_loc(body, bb)\n-    }\n-\n     fn constant_usize(&self, val: u16) -> Operand<'tcx> {\n         Operand::Constant(box Constant {\n             span: self.source_info.span,"}]}