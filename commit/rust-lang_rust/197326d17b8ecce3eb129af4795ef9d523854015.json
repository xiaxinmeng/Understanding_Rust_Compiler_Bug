{"sha": "197326d17b8ecce3eb129af4795ef9d523854015", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NzMyNmQxN2I4ZWNjZTNlYjEyOWFmNDc5NWVmOWQ1MjM4NTQwMTU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-24T04:48:31Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-24T06:31:55Z"}, "message": "Resolve: include normal modules in the ribs", "tree": {"sha": "2d98bcf1b1f2d478e6539ff7c45eb80cf38b7af3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d98bcf1b1f2d478e6539ff7c45eb80cf38b7af3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/197326d17b8ecce3eb129af4795ef9d523854015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/197326d17b8ecce3eb129af4795ef9d523854015", "html_url": "https://github.com/rust-lang/rust/commit/197326d17b8ecce3eb129af4795ef9d523854015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/197326d17b8ecce3eb129af4795ef9d523854015/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3929b2c8a472244d448feb24f52bf91246d3e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3929b2c8a472244d448feb24f52bf91246d3e82", "html_url": "https://github.com/rust-lang/rust/commit/d3929b2c8a472244d448feb24f52bf91246d3e82"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "aa529de085ea9dcc71d39037a4b5d27a653f05bb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/197326d17b8ecce3eb129af4795ef9d523854015/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/197326d17b8ecce3eb129af4795ef9d523854015/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=197326d17b8ecce3eb129af4795ef9d523854015", "patch": "@@ -731,8 +731,8 @@ enum RibKind<'a> {\n     // We're in a constant item. Can't refer to dynamic stuff.\n     ConstantItemRibKind,\n \n-    // We passed through an anonymous module.\n-    AnonymousModuleRibKind(Module<'a>),\n+    // We passed through a module.\n+    ModuleRibKind(Module<'a>),\n }\n \n #[derive(Copy, Clone)]\n@@ -1653,16 +1653,20 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn with_scope<F>(&mut self, id: NodeId, f: F)\n         where F: FnOnce(&mut Resolver)\n     {\n-        let orig_module = self.current_module;\n+        if let Some(module) = self.current_module.module_children.borrow().get(&id) {\n+            // Move down in the graph.\n+            let orig_module = ::std::mem::replace(&mut self.current_module, module);\n+            self.value_ribs.push(Rib::new(ModuleRibKind(module)));\n+            self.type_ribs.push(Rib::new(ModuleRibKind(module)));\n \n-        // Move down in the graph.\n-        if let Some(module) = orig_module.module_children.borrow().get(&id) {\n-            self.current_module = module;\n-        }\n+            f(self);\n \n-        f(self);\n-\n-        self.current_module = orig_module;\n+            self.current_module = orig_module;\n+            self.value_ribs.pop();\n+            self.type_ribs.pop();\n+        } else {\n+            f(self);\n+        }\n     }\n \n     /// Searches the current set of local scopes for labels.\n@@ -2239,8 +2243,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         if let Some(anonymous_module) = anonymous_module {\n             debug!(\"(resolving block) found anonymous module, moving down\");\n-            self.value_ribs.push(Rib::new(AnonymousModuleRibKind(anonymous_module)));\n-            self.type_ribs.push(Rib::new(AnonymousModuleRibKind(anonymous_module)));\n+            self.value_ribs.push(Rib::new(ModuleRibKind(anonymous_module)));\n+            self.type_ribs.push(Rib::new(ModuleRibKind(anonymous_module)));\n             self.current_module = anonymous_module;\n         } else {\n             self.value_ribs.push(Rib::new(NormalRibKind));\n@@ -2817,7 +2821,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Def::Local(_, node_id) => {\n                 for rib in ribs {\n                     match rib.kind {\n-                        NormalRibKind | AnonymousModuleRibKind(..) => {\n+                        NormalRibKind | ModuleRibKind(..) => {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n@@ -2866,7 +2870,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | MethodRibKind | ClosureRibKind(..) |\n-                        AnonymousModuleRibKind(..) => {\n+                        ModuleRibKind(..) => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind => {\n@@ -3024,7 +3028,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 }\n             }\n \n-            if let AnonymousModuleRibKind(module) = self.get_ribs(namespace)[i].kind {\n+            if let ModuleRibKind(module) = self.get_ribs(namespace)[i].kind {\n                 if let Success(binding) = self.resolve_name_in_module(module,\n                                                                       ident.unhygienic_name,\n                                                                       namespace,\n@@ -3034,6 +3038,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         return Some(LocalDef::from_def(def));\n                     }\n                 }\n+                // We can only see through anonymous modules\n+                if module.def.is_some() { return None; }\n             }\n         }\n "}, {"sha": "344a1117254601a9ba4d545710e2f62076c901ff", "filename": "src/test/compile-fail/issue-31845.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/197326d17b8ecce3eb129af4795ef9d523854015/src%2Ftest%2Fcompile-fail%2Fissue-31845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/197326d17b8ecce3eb129af4795ef9d523854015/src%2Ftest%2Fcompile-fail%2Fissue-31845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31845.rs?ref=197326d17b8ecce3eb129af4795ef9d523854015", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks lexical scopes cannot see through normal module boundries\n+\n+fn f() {\n+    fn g() {}\n+    mod foo {\n+        fn h() {\n+           g(); //~ ERROR unresolved name\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}