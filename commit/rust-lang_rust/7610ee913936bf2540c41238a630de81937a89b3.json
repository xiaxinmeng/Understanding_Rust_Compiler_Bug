{"sha": "7610ee913936bf2540c41238a630de81937a89b3", "node_id": "C_kwDOAAsO6NoAKDc2MTBlZTkxMzkzNmJmMjU0MGM0MTIzOGE2MzBkZTgxOTM3YTg5YjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T22:51:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T22:51:52Z"}, "message": "Auto merge of #13512 - Veykril:startup-commands, r=Veykril\n\nAlways set up VSCode commands", "tree": {"sha": "bc55804230e4407cbe40f0b39e814a72bc6b4007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc55804230e4407cbe40f0b39e814a72bc6b4007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7610ee913936bf2540c41238a630de81937a89b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7610ee913936bf2540c41238a630de81937a89b3", "html_url": "https://github.com/rust-lang/rust/commit/7610ee913936bf2540c41238a630de81937a89b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7610ee913936bf2540c41238a630de81937a89b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e69014a81ee82f4f5dea0bf80670dda2bc04c786", "url": "https://api.github.com/repos/rust-lang/rust/commits/e69014a81ee82f4f5dea0bf80670dda2bc04c786", "html_url": "https://github.com/rust-lang/rust/commit/e69014a81ee82f4f5dea0bf80670dda2bc04c786"}, {"sha": "2071d00fd25cee25fe881255d78e478f72749c7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2071d00fd25cee25fe881255d78e478f72749c7d", "html_url": "https://github.com/rust-lang/rust/commit/2071d00fd25cee25fe881255d78e478f72749c7d"}], "stats": {"total": 267, "additions": 139, "deletions": 128}, "files": [{"sha": "312087e4cffef9d6c7d5e74a7590a3d2837522a1", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 62, "deletions": 67, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/7610ee913936bf2540c41238a630de81937a89b3/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7610ee913936bf2540c41238a630de81937a89b3/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=7610ee913936bf2540c41238a630de81937a89b3", "patch": "@@ -3,7 +3,7 @@ import * as lc from \"vscode-languageclient\";\n import * as ra from \"./lsp_ext\";\n import * as path from \"path\";\n \n-import { Ctx, Cmd } from \"./ctx\";\n+import { Ctx, Cmd, CtxInit } from \"./ctx\";\n import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n import { spawnSync } from \"child_process\";\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n@@ -16,14 +16,14 @@ import { LINKED_COMMANDS } from \"./client\";\n export * from \"./ast_inspector\";\n export * from \"./run\";\n \n-export function analyzerStatus(ctx: Ctx): Cmd {\n+export function analyzerStatus(ctx: CtxInit): Cmd {\n     const tdcp = new (class implements vscode.TextDocumentContentProvider {\n         readonly uri = vscode.Uri.parse(\"rust-analyzer-status://status\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n         async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n             if (!vscode.window.activeTextEditor) return \"\";\n-            const client = await ctx.getClient();\n+            const client = ctx.client;\n \n             const params: ra.AnalyzerStatusParams = {};\n             const doc = ctx.activeRustEditor?.document;\n@@ -52,22 +52,17 @@ export function analyzerStatus(ctx: Ctx): Cmd {\n     };\n }\n \n-export function memoryUsage(ctx: Ctx): Cmd {\n+export function memoryUsage(ctx: CtxInit): Cmd {\n     const tdcp = new (class implements vscode.TextDocumentContentProvider {\n         readonly uri = vscode.Uri.parse(\"rust-analyzer-memory://memory\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n         provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n             if (!vscode.window.activeTextEditor) return \"\";\n \n-            return ctx\n-                .getClient()\n-                .then((it) => it.sendRequest(ra.memoryUsage))\n-                .then((mem: any) => {\n-                    return (\n-                        \"Per-query memory usage:\\n\" + mem + \"\\n(note: database has been cleared)\"\n-                    );\n-                });\n+            return ctx.client.sendRequest(ra.memoryUsage).then((mem: any) => {\n+                return \"Per-query memory usage:\\n\" + mem + \"\\n(note: database has been cleared)\";\n+            });\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n@@ -86,18 +81,18 @@ export function memoryUsage(ctx: Ctx): Cmd {\n     };\n }\n \n-export function shuffleCrateGraph(ctx: Ctx): Cmd {\n+export function shuffleCrateGraph(ctx: CtxInit): Cmd {\n     return async () => {\n-        return ctx.getClient().then((it) => it.sendRequest(ra.shuffleCrateGraph));\n+        return ctx.client.sendRequest(ra.shuffleCrateGraph);\n     };\n }\n \n-export function matchingBrace(ctx: Ctx): Cmd {\n+export function matchingBrace(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n \n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n \n         const response = await client.sendRequest(ra.matchingBrace, {\n             textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n@@ -114,12 +109,12 @@ export function matchingBrace(ctx: Ctx): Cmd {\n     };\n }\n \n-export function joinLines(ctx: Ctx): Cmd {\n+export function joinLines(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n \n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n \n         const items: lc.TextEdit[] = await client.sendRequest(ra.joinLines, {\n             ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n@@ -134,19 +129,19 @@ export function joinLines(ctx: Ctx): Cmd {\n     };\n }\n \n-export function moveItemUp(ctx: Ctx): Cmd {\n+export function moveItemUp(ctx: CtxInit): Cmd {\n     return moveItem(ctx, ra.Direction.Up);\n }\n \n-export function moveItemDown(ctx: Ctx): Cmd {\n+export function moveItemDown(ctx: CtxInit): Cmd {\n     return moveItem(ctx, ra.Direction.Down);\n }\n \n-export function moveItem(ctx: Ctx, direction: ra.Direction): Cmd {\n+export function moveItem(ctx: CtxInit, direction: ra.Direction): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n \n         const lcEdits = await client.sendRequest(ra.moveItem, {\n             range: client.code2ProtocolConverter.asRange(editor.selection),\n@@ -161,13 +156,13 @@ export function moveItem(ctx: Ctx, direction: ra.Direction): Cmd {\n     };\n }\n \n-export function onEnter(ctx: Ctx): Cmd {\n+export function onEnter(ctx: CtxInit): Cmd {\n     async function handleKeypress() {\n         const editor = ctx.activeRustEditor;\n \n         if (!editor) return false;\n \n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n         const lcEdits = await client\n             .sendRequest(ra.onEnter, {\n                 textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n@@ -193,13 +188,13 @@ export function onEnter(ctx: Ctx): Cmd {\n     };\n }\n \n-export function parentModule(ctx: Ctx): Cmd {\n+export function parentModule(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = vscode.window.activeTextEditor;\n         if (!editor) return;\n         if (!(isRustDocument(editor.document) || isCargoTomlDocument(editor.document))) return;\n \n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n \n         const locations = await client.sendRequest(ra.parentModule, {\n             textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n@@ -230,12 +225,12 @@ export function parentModule(ctx: Ctx): Cmd {\n     };\n }\n \n-export function openCargoToml(ctx: Ctx): Cmd {\n+export function openCargoToml(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n \n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n         const response = await client.sendRequest(ra.openCargoToml, {\n             textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n         });\n@@ -251,12 +246,12 @@ export function openCargoToml(ctx: Ctx): Cmd {\n     };\n }\n \n-export function ssr(ctx: Ctx): Cmd {\n+export function ssr(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = vscode.window.activeTextEditor;\n         if (!editor) return;\n \n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n \n         const position = editor.selection.active;\n         const selections = editor.selections;\n@@ -308,7 +303,7 @@ export function ssr(ctx: Ctx): Cmd {\n     };\n }\n \n-export function serverVersion(ctx: Ctx): Cmd {\n+export function serverVersion(ctx: CtxInit): Cmd {\n     return async () => {\n         if (!ctx.serverPath) {\n             void vscode.window.showWarningMessage(`rust-analyzer server is not running`);\n@@ -324,7 +319,7 @@ export function serverVersion(ctx: Ctx): Cmd {\n // Opens the virtual file that will show the syntax tree\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n-export function syntaxTree(ctx: Ctx): Cmd {\n+export function syntaxTree(ctx: CtxInit): Cmd {\n     const tdcp = new (class implements vscode.TextDocumentContentProvider {\n         readonly uri = vscode.Uri.parse(\"rust-analyzer-syntax-tree://syntaxtree/tree.rast\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n@@ -360,7 +355,7 @@ export function syntaxTree(ctx: Ctx): Cmd {\n         ): Promise<string> {\n             const rustEditor = ctx.activeRustEditor;\n             if (!rustEditor) return \"\";\n-            const client = await ctx.getClient();\n+            const client = ctx.client;\n \n             // When the range based query is enabled we take the range of the selection\n             const range =\n@@ -407,7 +402,7 @@ export function syntaxTree(ctx: Ctx): Cmd {\n // Opens the virtual file that will show the HIR of the function containing the cursor position\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n-export function viewHir(ctx: Ctx): Cmd {\n+export function viewHir(ctx: CtxInit): Cmd {\n     const tdcp = new (class implements vscode.TextDocumentContentProvider {\n         readonly uri = vscode.Uri.parse(\"rust-analyzer-hir://viewHir/hir.rs\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n@@ -444,7 +439,7 @@ export function viewHir(ctx: Ctx): Cmd {\n             const rustEditor = ctx.activeRustEditor;\n             if (!rustEditor) return \"\";\n \n-            const client = await ctx.getClient();\n+            const client = ctx.client;\n             const params = {\n                 textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n                     rustEditor.document\n@@ -473,7 +468,7 @@ export function viewHir(ctx: Ctx): Cmd {\n     };\n }\n \n-export function viewFileText(ctx: Ctx): Cmd {\n+export function viewFileText(ctx: CtxInit): Cmd {\n     const tdcp = new (class implements vscode.TextDocumentContentProvider {\n         readonly uri = vscode.Uri.parse(\"rust-analyzer-file-text://viewFileText/file.rs\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n@@ -509,7 +504,7 @@ export function viewFileText(ctx: Ctx): Cmd {\n         ): Promise<string> {\n             const rustEditor = ctx.activeRustEditor;\n             if (!rustEditor) return \"\";\n-            const client = await ctx.getClient();\n+            const client = ctx.client;\n \n             const params = client.code2ProtocolConverter.asTextDocumentIdentifier(\n                 rustEditor.document\n@@ -536,7 +531,7 @@ export function viewFileText(ctx: Ctx): Cmd {\n     };\n }\n \n-export function viewItemTree(ctx: Ctx): Cmd {\n+export function viewItemTree(ctx: CtxInit): Cmd {\n     const tdcp = new (class implements vscode.TextDocumentContentProvider {\n         readonly uri = vscode.Uri.parse(\"rust-analyzer-item-tree://viewItemTree/itemtree.rs\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n@@ -572,7 +567,7 @@ export function viewItemTree(ctx: Ctx): Cmd {\n         ): Promise<string> {\n             const rustEditor = ctx.activeRustEditor;\n             if (!rustEditor) return \"\";\n-            const client = await ctx.getClient();\n+            const client = ctx.client;\n \n             const params = {\n                 textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n@@ -601,7 +596,7 @@ export function viewItemTree(ctx: Ctx): Cmd {\n     };\n }\n \n-function crateGraph(ctx: Ctx, full: boolean): Cmd {\n+function crateGraph(ctx: CtxInit, full: boolean): Cmd {\n     return async () => {\n         const nodeModulesPath = vscode.Uri.file(path.join(ctx.extensionPath, \"node_modules\"));\n \n@@ -618,7 +613,7 @@ function crateGraph(ctx: Ctx, full: boolean): Cmd {\n         const params = {\n             full: full,\n         };\n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n         const dot = await client.sendRequest(ra.viewCrateGraph, params);\n         const uri = panel.webview.asWebviewUri(nodeModulesPath);\n \n@@ -664,18 +659,18 @@ function crateGraph(ctx: Ctx, full: boolean): Cmd {\n     };\n }\n \n-export function viewCrateGraph(ctx: Ctx): Cmd {\n+export function viewCrateGraph(ctx: CtxInit): Cmd {\n     return crateGraph(ctx, false);\n }\n \n-export function viewFullCrateGraph(ctx: Ctx): Cmd {\n+export function viewFullCrateGraph(ctx: CtxInit): Cmd {\n     return crateGraph(ctx, true);\n }\n \n // Opens the virtual file that will show the syntax tree\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n-export function expandMacro(ctx: Ctx): Cmd {\n+export function expandMacro(ctx: CtxInit): Cmd {\n     function codeFormat(expanded: ra.ExpandedMacro): string {\n         let result = `// Recursive expansion of ${expanded.name}! macro\\n`;\n         result += \"// \" + \"=\".repeat(result.length - 3);\n@@ -691,7 +686,7 @@ export function expandMacro(ctx: Ctx): Cmd {\n         async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n             const editor = vscode.window.activeTextEditor;\n             if (!editor) return \"\";\n-            const client = await ctx.getClient();\n+            const client = ctx.client;\n \n             const position = editor.selection.active;\n \n@@ -723,8 +718,8 @@ export function expandMacro(ctx: Ctx): Cmd {\n     };\n }\n \n-export function reloadWorkspace(ctx: Ctx): Cmd {\n-    return async () => (await ctx.getClient()).sendRequest(ra.reloadWorkspace);\n+export function reloadWorkspace(ctx: CtxInit): Cmd {\n+    return async () => ctx.client.sendRequest(ra.reloadWorkspace);\n }\n \n async function showReferencesImpl(\n@@ -743,13 +738,13 @@ async function showReferencesImpl(\n     }\n }\n \n-export function showReferences(ctx: Ctx): Cmd {\n+export function showReferences(ctx: CtxInit): Cmd {\n     return async (uri: string, position: lc.Position, locations: lc.Location[]) => {\n-        await showReferencesImpl(await ctx.getClient(), uri, position, locations);\n+        await showReferencesImpl(ctx.client, uri, position, locations);\n     };\n }\n \n-export function applyActionGroup(_ctx: Ctx): Cmd {\n+export function applyActionGroup(_ctx: CtxInit): Cmd {\n     return async (actions: { label: string; arguments: lc.CodeAction }[]) => {\n         const selectedAction = await vscode.window.showQuickPick(actions);\n         if (!selectedAction) return;\n@@ -760,9 +755,9 @@ export function applyActionGroup(_ctx: Ctx): Cmd {\n     };\n }\n \n-export function gotoLocation(ctx: Ctx): Cmd {\n+export function gotoLocation(ctx: CtxInit): Cmd {\n     return async (locationLink: lc.LocationLink) => {\n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n         const uri = client.protocol2CodeConverter.asUri(locationLink.targetUri);\n         let range = client.protocol2CodeConverter.asRange(locationLink.targetSelectionRange);\n         // collapse the range to a cursor position\n@@ -772,13 +767,13 @@ export function gotoLocation(ctx: Ctx): Cmd {\n     };\n }\n \n-export function openDocs(ctx: Ctx): Cmd {\n+export function openDocs(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = vscode.window.activeTextEditor;\n         if (!editor) {\n             return;\n         }\n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n \n         const position = editor.selection.active;\n         const textDocument = { uri: editor.document.uri.toString() };\n@@ -791,16 +786,16 @@ export function openDocs(ctx: Ctx): Cmd {\n     };\n }\n \n-export function cancelFlycheck(ctx: Ctx): Cmd {\n+export function cancelFlycheck(ctx: CtxInit): Cmd {\n     return async () => {\n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n         await client.sendRequest(ra.cancelFlycheck);\n     };\n }\n \n-export function resolveCodeAction(ctx: Ctx): Cmd {\n+export function resolveCodeAction(ctx: CtxInit): Cmd {\n     return async (params: lc.CodeAction) => {\n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n         params.command = undefined;\n         const item = await client?.sendRequest(lc.CodeActionResolveRequest.type, params);\n         if (!item?.edit) {\n@@ -825,13 +820,13 @@ export function resolveCodeAction(ctx: Ctx): Cmd {\n     };\n }\n \n-export function applySnippetWorkspaceEditCommand(_ctx: Ctx): Cmd {\n+export function applySnippetWorkspaceEditCommand(_ctx: CtxInit): Cmd {\n     return async (edit: vscode.WorkspaceEdit) => {\n         await applySnippetWorkspaceEdit(edit);\n     };\n }\n \n-export function run(ctx: Ctx): Cmd {\n+export function run(ctx: CtxInit): Cmd {\n     let prevRunnable: RunnableQuickPick | undefined;\n \n     return async () => {\n@@ -845,11 +840,11 @@ export function run(ctx: Ctx): Cmd {\n     };\n }\n \n-export function peekTests(ctx: Ctx): Cmd {\n+export function peekTests(ctx: CtxInit): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n-        const client = await ctx.getClient();\n+        const client = ctx.client;\n \n         await vscode.window.withProgress(\n             {\n@@ -878,7 +873,7 @@ export function peekTests(ctx: Ctx): Cmd {\n     };\n }\n \n-export function runSingle(ctx: Ctx): Cmd {\n+export function runSingle(ctx: CtxInit): Cmd {\n     return async (runnable: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n         if (!editor) return;\n@@ -895,7 +890,7 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n-export function copyRunCommandLine(ctx: Ctx) {\n+export function copyRunCommandLine(ctx: CtxInit) {\n     let prevRunnable: RunnableQuickPick | undefined;\n     return async () => {\n         const item = await selectRunnable(ctx, prevRunnable);\n@@ -907,7 +902,7 @@ export function copyRunCommandLine(ctx: Ctx) {\n     };\n }\n \n-export function debug(ctx: Ctx): Cmd {\n+export function debug(ctx: CtxInit): Cmd {\n     let prevDebuggee: RunnableQuickPick | undefined;\n \n     return async () => {\n@@ -920,13 +915,13 @@ export function debug(ctx: Ctx): Cmd {\n     };\n }\n \n-export function debugSingle(ctx: Ctx): Cmd {\n+export function debugSingle(ctx: CtxInit): Cmd {\n     return async (config: ra.Runnable) => {\n         await startDebugSession(ctx, config);\n     };\n }\n \n-export function newDebugConfig(ctx: Ctx): Cmd {\n+export function newDebugConfig(ctx: CtxInit): Cmd {\n     return async () => {\n         const item = await selectRunnable(ctx, undefined, true, false);\n         if (!item) return;"}, {"sha": "d198d4e93834804830c9fba80b395c7f01b17432", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 61, "deletions": 41, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/7610ee913936bf2540c41238a630de81937a89b3/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7610ee913936bf2540c41238a630de81937a89b3/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=7610ee913936bf2540c41238a630de81937a89b3", "patch": "@@ -10,6 +10,7 @@ import { PersistentState } from \"./persistent_state\";\n import { bootstrap } from \"./bootstrap\";\n \n export type Workspace =\n+    | { kind: \"Empty\" }\n     | {\n           kind: \"Workspace Folder\";\n       }\n@@ -19,15 +20,20 @@ export type Workspace =\n       };\n \n export type CommandFactory = {\n-    enabled: (ctx: Ctx) => Cmd;\n+    enabled: (ctx: CtxInit) => Cmd;\n     disabled?: (ctx: Ctx) => Cmd;\n };\n \n+export type CtxInit = Ctx & {\n+    readonly client: lc.LanguageClient;\n+};\n+\n export class Ctx {\n     readonly statusBar: vscode.StatusBarItem;\n     readonly config: Config;\n+    readonly workspace: Workspace;\n \n-    private client: lc.LanguageClient | undefined;\n+    private _client: lc.LanguageClient | undefined;\n     private _serverPath: string | undefined;\n     private traceOutputChannel: vscode.OutputChannel | undefined;\n     private outputChannel: vscode.OutputChannel | undefined;\n@@ -36,18 +42,17 @@ export class Ctx {\n     private commandFactories: Record<string, CommandFactory>;\n     private commandDisposables: Disposable[];\n \n-    workspace: Workspace;\n+    get client() {\n+        return this._client;\n+    }\n \n     constructor(\n         readonly extCtx: vscode.ExtensionContext,\n-        workspace: Workspace,\n-        commandFactories: Record<string, CommandFactory>\n+        commandFactories: Record<string, CommandFactory>,\n+        workspace: Workspace\n     ) {\n         extCtx.subscriptions.push(this);\n         this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n-        this.statusBar.text = \"rust-analyzer\";\n-        this.statusBar.tooltip = \"ready\";\n-        this.statusBar.command = \"rust-analyzer.analyzerStatus\";\n         this.statusBar.show();\n         this.workspace = workspace;\n         this.clientSubscriptions = [];\n@@ -57,7 +62,10 @@ export class Ctx {\n         this.state = new PersistentState(extCtx.globalState);\n         this.config = new Config(extCtx);\n \n-        this.updateCommands();\n+        this.updateCommands(\"disable\");\n+        this.setServerStatus({\n+            health: \"stopped\",\n+        });\n     }\n \n     dispose() {\n@@ -67,16 +75,11 @@ export class Ctx {\n         this.commandDisposables.forEach((disposable) => disposable.dispose());\n     }\n \n-    clientFetcher() {\n-        const self = this;\n-        return {\n-            get client(): lc.LanguageClient | undefined {\n-                return self.client;\n-            },\n-        };\n-    }\n+    private async getOrCreateClient() {\n+        if (this.workspace.kind === \"Empty\") {\n+            return;\n+        }\n \n-    async getClient() {\n         if (!this.traceOutputChannel) {\n             this.traceOutputChannel = vscode.window.createOutputChannel(\n                 \"Rust Analyzer Language Server Trace\"\n@@ -88,7 +91,7 @@ export class Ctx {\n             this.pushExtCleanup(this.outputChannel);\n         }\n \n-        if (!this.client) {\n+        if (!this._client) {\n             this._serverPath = await bootstrap(this.extCtx, this.config, this.state).catch(\n                 (err) => {\n                     let message = \"bootstrap error. \";\n@@ -125,47 +128,55 @@ export class Ctx {\n \n             const initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n \n-            this.client = await createClient(\n+            this._client = await createClient(\n                 this.traceOutputChannel,\n                 this.outputChannel,\n                 initializationOptions,\n                 serverOptions\n             );\n             this.pushClientCleanup(\n-                this.client.onNotification(ra.serverStatus, (params) =>\n+                this._client.onNotification(ra.serverStatus, (params) =>\n                     this.setServerStatus(params)\n                 )\n             );\n         }\n-        return this.client;\n+        return this._client;\n     }\n \n     async activate() {\n         log.info(\"Activating language client\");\n-        const client = await this.getClient();\n+        const client = await this.getOrCreateClient();\n+        if (!client) {\n+            return;\n+        }\n         await client.start();\n         this.updateCommands();\n-        return client;\n     }\n \n     async deactivate() {\n+        if (!this._client) {\n+            return;\n+        }\n         log.info(\"Deactivating language client\");\n-        await this.client?.stop();\n-        this.updateCommands();\n+        this.updateCommands(\"disable\");\n+        await this._client.stop();\n     }\n \n     async stop() {\n+        if (!this._client) {\n+            return;\n+        }\n         log.info(\"Stopping language client\");\n+        this.updateCommands(\"disable\");\n         await this.disposeClient();\n-        this.updateCommands();\n     }\n \n     private async disposeClient() {\n         this.clientSubscriptions?.forEach((disposable) => disposable.dispose());\n         this.clientSubscriptions = [];\n-        await this.client?.dispose();\n+        await this._client?.dispose();\n         this._serverPath = undefined;\n-        this.client = undefined;\n+        this._client = undefined;\n     }\n \n     get activeRustEditor(): RustEditor | undefined {\n@@ -185,21 +196,30 @@ export class Ctx {\n         return this._serverPath;\n     }\n \n-    private updateCommands() {\n+    private updateCommands(forceDisable?: \"disable\") {\n         this.commandDisposables.forEach((disposable) => disposable.dispose());\n         this.commandDisposables = [];\n-        const fetchFactory = (factory: CommandFactory, fullName: string) => {\n-            return this.client && this.client.isRunning()\n-                ? factory.enabled\n-                : factory.disabled ||\n-                      ((_) => () =>\n-                          vscode.window.showErrorMessage(\n-                              `command ${fullName} failed: rust-analyzer server is not running`\n-                          ));\n+\n+        const clientRunning = (!forceDisable && this._client?.isRunning()) ?? false;\n+        const isClientRunning = function (_ctx: Ctx): _ctx is CtxInit {\n+            return clientRunning;\n         };\n+\n         for (const [name, factory] of Object.entries(this.commandFactories)) {\n             const fullName = `rust-analyzer.${name}`;\n-            const callback = fetchFactory(factory, fullName)(this);\n+            let callback;\n+            if (isClientRunning(this)) {\n+                // we asserted that `client` is defined\n+                callback = factory.enabled(this);\n+            } else if (factory.disabled) {\n+                callback = factory.disabled(this);\n+            } else {\n+                callback = () =>\n+                    vscode.window.showErrorMessage(\n+                        `command ${fullName} failed: rust-analyzer server is not running`\n+                    );\n+            }\n+\n             this.commandDisposables.push(vscode.commands.registerCommand(fullName, callback));\n         }\n     }\n@@ -209,7 +229,7 @@ export class Ctx {\n         const statusBar = this.statusBar;\n         switch (status.health) {\n             case \"ok\":\n-                statusBar.tooltip = (status.message ?? \"Ready\") + \"Click to stop.\";\n+                statusBar.tooltip = (status.message ?? \"Ready\") + \"\\nClick to stop server.\";\n                 statusBar.command = \"rust-analyzer.stopServer\";\n                 statusBar.color = undefined;\n                 statusBar.backgroundColor = undefined;\n@@ -235,7 +255,7 @@ export class Ctx {\n                 icon = \"$(error) \";\n                 break;\n             case \"stopped\":\n-                statusBar.tooltip = \"Server is stopped. Click to start.\";\n+                statusBar.tooltip = \"Server is stopped.\\nClick to start.\";\n                 statusBar.command = \"rust-analyzer.startServer\";\n                 statusBar.color = undefined;\n                 statusBar.backgroundColor = undefined;"}, {"sha": "54e0c16e5e08b3c1a57cff440637f0c57d22620d", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7610ee913936bf2540c41238a630de81937a89b3/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7610ee913936bf2540c41238a630de81937a89b3/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=7610ee913936bf2540c41238a630de81937a89b3", "patch": "@@ -10,7 +10,6 @@ import { setContextValue } from \"./util\";\n const RUST_PROJECT_CONTEXT_NAME = \"inRustProject\";\n \n export interface RustAnalyzerExtensionApi {\n-    // FIXME: this should be non-optional\n     readonly client?: lc.LanguageClient;\n }\n \n@@ -42,22 +41,18 @@ export async function activate(\n         isRustDocument(document)\n     );\n \n-    if (folders.length === 0 && rustDocuments.length === 0) {\n-        // FIXME: Ideally we would choose not to activate at all (and avoid registering\n-        // non-functional editor commands), but VS Code doesn't seem to have a good way of doing\n-        // that\n-        return {};\n-    }\n-\n+    // FIXME: This can change over time\n     const workspace: Workspace =\n         folders.length === 0\n-            ? {\n-                  kind: \"Detached Files\",\n-                  files: rustDocuments,\n-              }\n+            ? rustDocuments.length === 0\n+                ? { kind: \"Empty\" }\n+                : {\n+                      kind: \"Detached Files\",\n+                      files: rustDocuments,\n+                  }\n             : { kind: \"Workspace Folder\" };\n \n-    const ctx = new Ctx(context, workspace, createCommands());\n+    const ctx = new Ctx(context, createCommands(), workspace);\n     // VS Code doesn't show a notification when an extension fails to activate\n     // so we do it ourselves.\n     const api = await activateServer(ctx).catch((err) => {\n@@ -77,16 +72,16 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n \n     vscode.workspace.onDidChangeConfiguration(\n         async (_) => {\n-            await ctx\n-                .clientFetcher()\n-                .client?.sendNotification(\"workspace/didChangeConfiguration\", { settings: \"\" });\n+            await ctx.client?.sendNotification(\"workspace/didChangeConfiguration\", {\n+                settings: \"\",\n+            });\n         },\n         null,\n         ctx.subscriptions\n     );\n \n     await ctx.activate();\n-    return ctx.clientFetcher();\n+    return ctx;\n }\n \n function createCommands(): Record<string, CommandFactory> {\n@@ -123,6 +118,7 @@ function createCommands(): Record<string, CommandFactory> {\n                     health: \"stopped\",\n                 });\n             },\n+            disabled: (_) => async () => {},\n         },\n \n         analyzerStatus: { enabled: commands.analyzerStatus },"}, {"sha": "35627e2fc6beb1b60a1d58ab4712877dc23a6678", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7610ee913936bf2540c41238a630de81937a89b3/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7610ee913936bf2540c41238a630de81937a89b3/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=7610ee913936bf2540c41238a630de81937a89b3", "patch": "@@ -3,7 +3,7 @@ import * as lc from \"vscode-languageclient\";\n import * as ra from \"./lsp_ext\";\n import * as tasks from \"./tasks\";\n \n-import { Ctx } from \"./ctx\";\n+import { CtxInit } from \"./ctx\";\n import { makeDebugConfig } from \"./debug\";\n import { Config, RunnableEnvCfg } from \"./config\";\n \n@@ -12,15 +12,15 @@ const quickPickButtons = [\n ];\n \n export async function selectRunnable(\n-    ctx: Ctx,\n+    ctx: CtxInit,\n     prevRunnable?: RunnableQuickPick,\n     debuggeeOnly = false,\n     showButtons: boolean = true\n ): Promise<RunnableQuickPick | undefined> {\n     const editor = ctx.activeRustEditor;\n     if (!editor) return;\n \n-    const client = await ctx.getClient();\n+    const client = ctx.client;\n     const textDocument: lc.TextDocumentIdentifier = {\n         uri: editor.document.uri.toString(),\n     };"}]}