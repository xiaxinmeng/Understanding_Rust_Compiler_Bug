{"sha": "c9a86879515ed1677196f4d3585ec7a5935d2712", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YTg2ODc5NTE1ZWQxNjc3MTk2ZjRkMzU4NWVjN2E1OTM1ZDI3MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-01T12:52:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-01T12:52:54Z"}, "message": "Auto merge of #57916 - Zoxc:incr-passes4, r=michaelwoerister\n\nMisc performance tweaks\n\nr? @michaelwoerister", "tree": {"sha": "50ecc98712f2aed09ca12aa34f4c461eae101aae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50ecc98712f2aed09ca12aa34f4c461eae101aae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a86879515ed1677196f4d3585ec7a5935d2712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a86879515ed1677196f4d3585ec7a5935d2712", "html_url": "https://github.com/rust-lang/rust/commit/c9a86879515ed1677196f4d3585ec7a5935d2712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a86879515ed1677196f4d3585ec7a5935d2712/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aa250635e9fd2646116726c88a31c15eb4ab74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa250635e9fd2646116726c88a31c15eb4ab74e", "html_url": "https://github.com/rust-lang/rust/commit/1aa250635e9fd2646116726c88a31c15eb4ab74e"}, {"sha": "ee229f7fd060b9ff3cd5df4556dd550a3df0b62f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee229f7fd060b9ff3cd5df4556dd550a3df0b62f", "html_url": "https://github.com/rust-lang/rust/commit/ee229f7fd060b9ff3cd5df4556dd550a3df0b62f"}], "stats": {"total": 253, "additions": 136, "deletions": 117}, "files": [{"sha": "cda469657ed873cb74b696511b890161a933753c", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -479,6 +479,7 @@ define_dep_nodes!( <'tcx>\n     [] CheckModPrivacy(DefId),\n     [] CheckModIntrinsics(DefId),\n     [] CheckModLiveness(DefId),\n+    [] CheckModImplWf(DefId),\n     [] CollectModItemTypes(DefId),\n \n     [] Reachability,"}, {"sha": "a2947fa0d8c1ff32a8a298106697d4f1c112330d", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -7,7 +7,6 @@\n \n use ty::TyCtxt;\n use ty::query::Providers;\n-use ty::query::queries;\n \n use hir;\n use hir::def_id::DefId;\n@@ -355,7 +354,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckAttrVisitor<'a, 'tcx> {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_attrs::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_attrs(tcx.hir().local_def_id(module));\n     }\n }\n "}, {"sha": "29d3713900ad9ea9e8259d9d37ec7eaecc218cd0", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -2,7 +2,7 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use ty::{self, Ty, TyCtxt};\n use ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n-use ty::query::{Providers, queries};\n+use ty::query::Providers;\n \n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -12,7 +12,7 @@ use hir;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_intrinsics::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_intrinsics(tcx.hir().local_def_id(module));\n     }\n }\n "}, {"sha": "0724d3a262d2812ee6079d94617ed8d23f6c0f5c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -100,7 +100,7 @@ use self::VarKind::*;\n use hir::def::*;\n use hir::Node;\n use ty::{self, TyCtxt};\n-use ty::query::{Providers, queries};\n+use ty::query::Providers;\n use lint;\n use errors::Applicability;\n use util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n@@ -187,7 +187,7 @@ fn check_mod_liveness<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_liveness::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_liveness(tcx.hir().local_def_id(module));\n     }\n     tcx.sess.abort_if_errors();\n }"}, {"sha": "3717ee7143c550ed5383b9a54a1cbc78fa8b204c", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -9,7 +9,6 @@ use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use ty::query::Providers;\n-use ty::query::queries;\n use middle::privacy::AccessLevels;\n use session::{DiagnosticMessageId, Session};\n use syntax::symbol::Symbol;\n@@ -459,7 +458,7 @@ impl<'a, 'tcx> Index<'tcx> {\n \n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_unstable_api_usage::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_unstable_api_usage(tcx.hir().local_def_id(module));\n     }\n }\n "}, {"sha": "495cce4d2feac560f3417898f5370f00f46805a6", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -51,7 +51,7 @@ pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, key: Self::Key) -> Cow<'static, str>;\n \n     #[inline]\n-    fn cache_on_disk(_: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _: Self::Key) -> bool {\n         false\n     }\n \n@@ -136,6 +136,15 @@ impl<'tcx> QueryDescription<'tcx> for queries::check_mod_liveness<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::check_mod_impl_wf<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: DefId,\n+    ) -> Cow<'static, str> {\n+        format!(\"checking that impls are well-formed in {}\", key.describe_as_module(tcx)).into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::collect_mod_item_types<'tcx> {\n     fn describe(\n         tcx: TyCtxt<'_, '_, '_>,\n@@ -378,7 +387,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n     }\n \n     #[inline]\n-    fn cache_on_disk(_key: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _key: Self::Key) -> bool {\n         true\n     }\n \n@@ -398,7 +407,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval_raw<'tcx> {\n     }\n \n     #[inline]\n-    fn cache_on_disk(_key: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _key: Self::Key) -> bool {\n         true\n     }\n \n@@ -422,7 +431,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n     }\n \n     #[inline]\n-    fn cache_on_disk(_: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _: Self::Key) -> bool {\n         true\n     }\n \n@@ -496,7 +505,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_sta\n     }\n \n     #[inline]\n-    fn cache_on_disk(_: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _: Self::Key) -> bool {\n         true\n     }\n \n@@ -530,7 +539,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::codegen_fulfill_obligation<'tcx>\n     }\n \n     #[inline]\n-    fn cache_on_disk(_: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _: Self::Key) -> bool {\n         true\n     }\n \n@@ -868,7 +877,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::features_query<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n     #[inline]\n-    fn cache_on_disk(def_id: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, def_id: Self::Key) -> bool {\n         def_id.is_local()\n     }\n \n@@ -885,7 +894,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n     #[inline]\n-    fn cache_on_disk(def_id: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, def_id: Self::Key) -> bool {\n         def_id.is_local()\n     }\n \n@@ -924,7 +933,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx>\n \n impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n     #[inline]\n-    fn cache_on_disk(def_id: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, def_id: Self::Key) -> bool {\n         def_id.is_local()\n     }\n \n@@ -974,10 +983,10 @@ impl<'tcx> QueryDescription<'tcx> for queries::backend_optimization_level<'tcx>\n }\n \n macro_rules! impl_disk_cacheable_query(\n-    ($query_name:ident, |$key:tt| $cond:expr) => {\n+    ($query_name:ident, |$tcx:tt, $key:tt| $cond:expr) => {\n         impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {\n             #[inline]\n-            fn cache_on_disk($key: Self::Key) -> bool {\n+            fn cache_on_disk($tcx: TyCtxt<'_, 'tcx, 'tcx>, $key: Self::Key) -> bool {\n                 $cond\n             }\n \n@@ -991,14 +1000,17 @@ macro_rules! impl_disk_cacheable_query(\n     }\n );\n \n-impl_disk_cacheable_query!(unsafety_check_result, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(borrowck, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(mir_borrowck, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(mir_const_qualif, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(check_match, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(def_symbol_name, |_| true);\n-impl_disk_cacheable_query!(type_of, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(predicates_of, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(used_trait_imports, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(codegen_fn_attrs, |_| true);\n-impl_disk_cacheable_query!(specialization_graph_of, |_| true);\n+impl_disk_cacheable_query!(mir_borrowck, |tcx, def_id| {\n+    def_id.is_local() && tcx.is_closure(def_id)\n+});\n+\n+impl_disk_cacheable_query!(unsafety_check_result, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(borrowck, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(mir_const_qualif, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(check_match, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(def_symbol_name, |_, _| true);\n+impl_disk_cacheable_query!(type_of, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(predicates_of, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(used_trait_imports, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(codegen_fn_attrs, |_, _| true);\n+impl_disk_cacheable_query!(specialization_graph_of, |_, _| true);"}, {"sha": "d4884e712b86067adba9e040f716c7b70f94c767", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -270,6 +270,8 @@ define_queries! { <'tcx>\n \n         [] fn check_mod_liveness: CheckModLiveness(DefId) -> (),\n \n+        [] fn check_mod_impl_wf: CheckModImplWf(DefId) -> (),\n+\n         [] fn collect_mod_item_types: CollectModItemTypes(DefId) -> (),\n \n         /// Caches CoerceUnsized kinds for impls on custom types."}, {"sha": "a3f49de0d078b4ca4ae6694ca22f5240dcd0239a", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -230,7 +230,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 assert!(cache.active.is_empty());\n                 for (key, entry) in cache.results.iter() {\n                     use ty::query::config::QueryDescription;\n-                    if const_eval::cache_on_disk(key.clone()) {\n+                    if const_eval::cache_on_disk(tcx, key.clone()) {\n                         if let Ok(ref value) = entry.value {\n                             let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n \n@@ -1086,7 +1086,7 @@ fn encode_query_results<'enc, 'a, 'tcx, Q, E>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let map = Q::query_cache(tcx).borrow();\n     assert!(map.active.is_empty());\n     for (key, entry) in map.results.iter() {\n-        if Q::cache_on_disk(key.clone()) {\n+        if Q::cache_on_disk(tcx, key.clone()) {\n             let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n \n             // Record position of the cache entry"}, {"sha": "69bff8d25b0243cdeeef3dee8bd8659b2c699a52", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -434,7 +434,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         debug_assert!(self.dep_graph.is_green(dep_node));\n \n         // First we try to load the result from the on-disk cache\n-        let result = if Q::cache_on_disk(key.clone()) &&\n+        let result = if Q::cache_on_disk(self.global_tcx(), key.clone()) &&\n                         self.sess.opts.debugging_opts.incremental_queries {\n             let result = Q::try_load_from_disk(self.global_tcx(), prev_dep_node_index);\n \n@@ -969,20 +969,20 @@ macro_rules! define_queries_inner {\n             fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>) -> Self::Value {\n                 handle_cycle_error!([$($modifiers)*][tcx])\n             }\n+        })*\n+\n+        #[derive(Copy, Clone)]\n+        pub struct TyCtxtEnsure<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+            pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         }\n \n-        impl<'a, $tcx, 'lcx> queries::$name<$tcx> {\n-            /// Ensure that either this query has all green inputs or been executed.\n-            /// Executing query::ensure(D) is considered a read of the dep-node D.\n-            ///\n-            /// This function is particularly useful when executing passes for their\n-            /// side-effects -- e.g., in order to report errors for erroneous programs.\n-            ///\n-            /// Note: The optimization is only available during incr. comp.\n-            pub fn ensure(tcx: TyCtxt<'a, $tcx, 'lcx>, key: $K) -> () {\n-                tcx.ensure_query::<queries::$name<'_>>(key);\n-            }\n-        })*\n+        impl<'a, $tcx, 'lcx> TyCtxtEnsure<'a, $tcx, 'lcx> {\n+            $($(#[$attr])*\n+            #[inline(always)]\n+            pub fn $name(self, key: $K) {\n+                self.tcx.ensure_query::<queries::$name<'_>>(key)\n+            })*\n+        }\n \n         #[derive(Copy, Clone)]\n         pub struct TyCtxtAt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n@@ -999,6 +999,15 @@ macro_rules! define_queries_inner {\n         }\n \n         impl<'a, $tcx, 'lcx> TyCtxt<'a, $tcx, 'lcx> {\n+            /// Return a transparent wrapper for `TyCtxt` which ensures queries\n+            /// are executed instead of returing their result\n+            #[inline(always)]\n+            pub fn ensure(self) -> TyCtxtEnsure<'a, $tcx, 'lcx> {\n+                TyCtxtEnsure {\n+                    tcx: self,\n+                }\n+            }\n+\n             /// Return a transparent wrapper for `TyCtxt` which uses\n             /// `span` as the location of queries performed through it.\n             #[inline(always)]\n@@ -1251,6 +1260,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CheckModPrivacy => { force!(check_mod_privacy, def_id!()); }\n         DepKind::CheckModIntrinsics => { force!(check_mod_intrinsics, def_id!()); }\n         DepKind::CheckModLiveness => { force!(check_mod_liveness, def_id!()); }\n+        DepKind::CheckModImplWf => { force!(check_mod_impl_wf, def_id!()); }\n         DepKind::CollectModItemTypes => { force!(collect_mod_item_types, def_id!()); }\n         DepKind::Reachability => { force!(reachable_set, LOCAL_CRATE); }\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }\n@@ -1433,7 +1443,7 @@ macro_rules! impl_load_from_cache {\n                 match self.kind {\n                     $(DepKind::$dep_kind => {\n                         let def_id = self.extract_def_id(tcx).unwrap();\n-                        queries::$query_name::cache_on_disk(def_id)\n+                        queries::$query_name::cache_on_disk(tcx.global_tcx(), def_id)\n                     })*\n                     _ => false\n                 }"}, {"sha": "2fe47b2f032f87aab4107521d4dfbaf7af95105f", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -402,7 +402,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         };\n \n-        ty::query::queries::coherent_trait::ensure(self, drop_trait);\n+        self.ensure().coherent_trait(drop_trait);\n \n         let mut dtor_did = None;\n         let ty = self.type_of(adt_did);"}, {"sha": "e40c2b450892244c993bc3242a34d13e04cd7f1b", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -57,7 +57,7 @@ pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.par_body_owners(|body_owner_def_id| {\n-        tcx.borrowck(body_owner_def_id);\n+        tcx.ensure().borrowck(body_owner_def_id);\n     });\n }\n \n@@ -121,7 +121,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n     // Note that `mir_validated` is a \"stealable\" result; the\n     // thief, `optimized_mir()`, forces borrowck, so we know that\n     // is not yet stolen.\n-    ty::query::queries::mir_validated::ensure(tcx, owner_def_id);\n+    tcx.ensure().mir_validated(owner_def_id);\n \n     // option dance because you can't capture an uninitialized variable\n     // by mut-ref."}, {"sha": "d3412ec2dd93d64b51627d870f492121e32d37d1", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -1283,7 +1283,7 @@ where\n \n             time(sess,\n                  \"MIR borrow checking\",\n-                 || tcx.par_body_owners(|def_id| { tcx.mir_borrowck(def_id); }));\n+                 || tcx.par_body_owners(|def_id| { tcx.ensure().mir_borrowck(def_id); }));\n \n             time(sess, \"dumping chalk-like clauses\", || {\n                 rustc_traits::lowering::dump_program_clauses(tcx);"}, {"sha": "8d10227cd590187c9ef75a3d32cc84b6d5ac2980", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -28,22 +28,10 @@ use syntax::ast;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-struct OuterVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n-\n-impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n-    }\n-\n-    fn visit_body(&mut self, body: &'tcx hir::Body) {\n-        intravisit::walk_body(self, body);\n-        let def_id = self.tcx.hir().body_owner_def_id(body.id());\n-        let _ = self.tcx.check_match(def_id);\n-    }\n-}\n-\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.hir().krate().visit_all_item_likes(&mut OuterVisitor { tcx }.as_deep_visitor());\n+    for def_id in tcx.body_owners() {\n+        tcx.ensure().check_match(def_id);\n+    }\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "6ba35052c8aad7cebba75e8997e60af331826fa4", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -228,10 +228,10 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Mir<'tcx> {\n     // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n-    let _ = tcx.mir_borrowck(def_id);\n+    tcx.ensure().mir_borrowck(def_id);\n \n     if tcx.use_ast_borrowck() {\n-        let _ = tcx.borrowck(def_id);\n+        tcx.ensure().borrowck(def_id);\n     }\n \n     let mut mir = tcx.mir_validated(def_id).steal();"}, {"sha": "f05a7be7d75137c52a99c4158be99c0c9c6a7608", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -3,7 +3,6 @@ use self::Context::*;\n use rustc::session::Session;\n \n use rustc::ty::query::Providers;\n-use rustc::ty::query::queries;\n use rustc::ty::TyCtxt;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::Map;\n@@ -48,7 +47,7 @@ struct CheckLoopVisitor<'a, 'hir: 'a> {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_loops::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_loops(tcx.hir().local_def_id(module));\n     }\n }\n "}, {"sha": "7f2b82f7e0155d217ffb6d6d0ebadcdd16d83f48", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -22,7 +22,7 @@ use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt, Ty, TraitRef, TypeFoldable, GenericParamDefKind};\n use rustc::ty::fold::TypeVisitor;\n-use rustc::ty::query::{Providers, queries};\n+use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeSet;\n use rustc_data_structures::fx::FxHashSet;\n@@ -1722,7 +1722,7 @@ fn privacy_access_levels<'tcx>(\n     let krate = tcx.hir().krate();\n \n     for &module in krate.modules.keys() {\n-        queries::check_mod_privacy::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_privacy(tcx.hir().local_def_id(module));\n     }\n \n     // Build up a set of all exported items in the AST. This is a set of all"}, {"sha": "48475b3dcb802b0af0786dacd1a09d8f06df87e2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -109,7 +109,6 @@ use rustc::ty::{\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::query::Providers;\n-use rustc::ty::query::queries;\n use rustc::ty::subst::{UnpackedKind, Subst, Substs, UserSelfTy, UserSubsts};\n use rustc::ty::util::{Representability, IntTypeExt, Discr};\n use rustc::ty::layout::VariantIdx;\n@@ -696,14 +695,14 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-        tcx.hir().krate().visit_all_item_likes(&mut visit.as_deep_visitor());\n+        tcx.hir().krate().visit_all_item_likes(&mut visit);\n     })\n }\n \n pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         for &module in tcx.hir().krate().modules.keys() {\n-            queries::check_mod_item_types::ensure(tcx, tcx.hir().local_def_id(module));\n+            tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n         }\n     })\n }\n@@ -722,7 +721,7 @@ fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum\n     debug_assert!(crate_num == LOCAL_CRATE);\n     Ok(tcx.sess.track_errors(|| {\n         tcx.par_body_owners(|body_owner_def_id| {\n-            ty::query::queries::typeck_tables_of::ensure(tcx, body_owner_def_id);\n+            tcx.ensure().typeck_tables_of(body_owner_def_id);\n         });\n     })?)\n }"}, {"sha": "97881708b0a076233ce1aa0e93121ba0fd384f1c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -14,7 +14,7 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax_pos::Span;\n use errors::{DiagnosticBuilder, DiagnosticId};\n \n-use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n /// Helper type of a temporary returned by `.for_item(...)`.\n@@ -1015,30 +1015,23 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     }\n }\n \n-impl<'a, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n-        NestedVisitorMap::None\n-    }\n-\n-    fn visit_item(&mut self, i: &hir::Item) {\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n+    fn visit_item(&mut self, i: &'tcx hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n         let def_id = self.tcx.hir().local_def_id(i.id);\n-        ty::query::queries::check_item_well_formed::ensure(self.tcx, def_id);\n-        intravisit::walk_item(self, i);\n+        self.tcx.ensure().check_item_well_formed(def_id);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'v hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n         let def_id = self.tcx.hir().local_def_id(trait_item.id);\n-        ty::query::queries::check_trait_item_well_formed::ensure(self.tcx, def_id);\n-        intravisit::walk_trait_item(self, trait_item)\n+        self.tcx.ensure().check_trait_item_well_formed(def_id);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'v hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n         let def_id = self.tcx.hir().local_def_id(impl_item.id);\n-        ty::query::queries::check_impl_item_well_formed::ensure(self.tcx, def_id);\n-        intravisit::walk_impl_item(self, impl_item)\n+        self.tcx.ensure().check_impl_item_well_formed(def_id);\n     }\n }\n "}, {"sha": "853c4c85d3f3b234bb3cc67417b5ee416fb2e8cc", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -9,6 +9,7 @@ use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::traits;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::query::Providers;\n+use rustc::util::common::time;\n \n use syntax::ast;\n \n@@ -132,20 +133,22 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     for &impl_id in impls {\n         check_impl_overlap(tcx, impl_id);\n     }\n-    builtin::check_trait(tcx, def_id);\n+    use rustc::util::common::time;\n+    time(tcx.sess, \"builtin::check_trait checking\", ||\n+          builtin::check_trait(tcx, def_id));\n }\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &trait_def_id in tcx.hir().krate().trait_impls.keys() {\n-        ty::query::queries::coherent_trait::ensure(tcx, trait_def_id);\n+        tcx.ensure().coherent_trait(trait_def_id);\n     }\n \n-    unsafety::check(tcx);\n-    orphan::check(tcx);\n+    time(tcx.sess, \"unsafety checking\", || unsafety::check(tcx));\n+    time(tcx.sess, \"orphan checking\", || orphan::check(tcx));\n \n     // these queries are executed for side-effects (error reporting):\n-    ty::query::queries::crate_inherent_impls::ensure(tcx, LOCAL_CRATE);\n-    ty::query::queries::crate_inherent_impls_overlap_check::ensure(tcx, LOCAL_CRATE);\n+    tcx.ensure().crate_inherent_impls(LOCAL_CRATE);\n+    tcx.ensure().crate_inherent_impls_overlap_check(LOCAL_CRATE);\n }\n \n /// Overlap: No two impls for the same trait are implemented for the"}, {"sha": "b0b266a61a5b69cada8aad2ec27bf5e78858e8e2", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -23,7 +23,6 @@ use middle::resolve_lifetime as rl;\n use middle::weak_lang_items;\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n-use rustc::ty::query::queries;\n use rustc::ty::subst::Substs;\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n@@ -58,7 +57,7 @@ struct OnlySelfBounds(bool);\n \n pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::collect_mod_item_types::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().collect_mod_item_types(tcx.hir().local_def_id(module));\n     }\n }\n "}, {"sha": "07f5fca6fe68e293829b830bf4ffc8d6af09da7b", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -13,6 +13,7 @@ use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TyCtxt};\n+use rustc::ty::query::Providers;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n@@ -52,7 +53,23 @@ pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n-    tcx.hir().krate().visit_all_item_likes(&mut ImplWfCheck { tcx });\n+    for &module in tcx.hir().krate().modules.keys() {\n+        tcx.ensure().check_mod_impl_wf(tcx.hir().local_def_id(module));\n+    }\n+}\n+\n+fn check_mod_impl_wf<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_item_likes_in_module(\n+        module_def_id,\n+        &mut ImplWfCheck { tcx }\n+    );\n+}\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        check_mod_impl_wf,\n+        ..*providers\n+    };\n }\n \n struct ImplWfCheck<'a, 'tcx: 'a> {"}, {"sha": "d5e870bb28d754061dd96acd3c849a4000083d6c", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -318,6 +318,7 @@ pub fn provide(providers: &mut Providers) {\n     check::provide(providers);\n     variance::provide(providers);\n     outlives::provide(providers);\n+    impl_wf_check::provide(providers);\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n@@ -333,10 +334,12 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n \n     })?;\n \n-    tcx.sess.track_errors(|| {\n-        time(tcx.sess, \"outlives testing\", ||\n-            outlives::test::test_inferred_outlives(tcx));\n-    })?;\n+    if tcx.features().rustc_attrs {\n+        tcx.sess.track_errors(|| {\n+            time(tcx.sess, \"outlives testing\", ||\n+                outlives::test::test_inferred_outlives(tcx));\n+        })?;\n+    }\n \n     tcx.sess.track_errors(|| {\n         time(tcx.sess, \"impl wf inference\", ||\n@@ -348,10 +351,12 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n           coherence::check_coherence(tcx));\n     })?;\n \n-    tcx.sess.track_errors(|| {\n-        time(tcx.sess, \"variance testing\", ||\n-             variance::test::test_variance(tcx));\n-    })?;\n+    if tcx.features().rustc_attrs {\n+        tcx.sess.track_errors(|| {\n+            time(tcx.sess, \"variance testing\", ||\n+                variance::test::test_variance(tcx));\n+        })?;\n+    }\n \n     time(tcx.sess, \"wf checking\", || check::check_wf_new(tcx))?;\n "}, {"sha": "f7ff3eb3ac9ff7bf2dac3680d4aef78337c68263", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.rs?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -5,4 +5,4 @@\n #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n \n-fn main() {} //~ ERROR []\n+fn main() {}"}, {"sha": "2b90699384b489c5b5d02ae2bb20db65f40e7ba0", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs-1.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9a86879515ed1677196f4d3585ec7a5935d2712/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs-1.stderr?ref=c9a86879515ed1677196f4d3585ec7a5935d2712", "patch": "@@ -14,13 +14,6 @@ LL | #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for ru\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error[E0208]: []\n-  --> $DIR/feature-gate-rustc-attrs-1.rs:8:1\n-   |\n-LL | fn main() {} //~ ERROR []\n-   | ^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0208, E0658.\n-For more information about an error, try `rustc --explain E0208`.\n+For more information about this error, try `rustc --explain E0658`."}]}