{"sha": "831bd969674fd8afa751b13db543d58b2176c98c", "node_id": "C_kwDOAAsO6NoAKDgzMWJkOTY5Njc0ZmQ4YWZhNzUxYjEzZGI1NDNkNThiMjE3NmM5OGM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-11T07:14:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-11T07:14:31Z"}, "message": "rustc_log: add env var to set verbose entry/exit behavior", "tree": {"sha": "d6a80505b62accf8a338b3a47d819db222583171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6a80505b62accf8a338b3a47d819db222583171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/831bd969674fd8afa751b13db543d58b2176c98c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/831bd969674fd8afa751b13db543d58b2176c98c", "html_url": "https://github.com/rust-lang/rust/commit/831bd969674fd8afa751b13db543d58b2176c98c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/831bd969674fd8afa751b13db543d58b2176c98c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53f1e8fbf891cf84fcb11eb078a27e528df795a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53f1e8fbf891cf84fcb11eb078a27e528df795a", "html_url": "https://github.com/rust-lang/rust/commit/d53f1e8fbf891cf84fcb11eb078a27e528df795a"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "c152815eeca68e408d9f470021f73992f6b56bc0", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/831bd969674fd8afa751b13db543d58b2176c98c/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831bd969674fd8afa751b13db543d58b2176c98c/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=831bd969674fd8afa751b13db543d58b2176c98c", "patch": "@@ -67,11 +67,24 @@ pub fn init_env_logger(env: &str) -> Result<(), Error> {\n         Err(VarError::NotUnicode(_value)) => return Err(Error::NonUnicodeColorValue),\n     };\n \n+    let verbose_entry_exit = match env::var_os(String::from(env) + \"_ENTRY_EXIT\") {\n+        None => false,\n+        Some(v) => {\n+            if &v == \"0\" {\n+                false\n+            } else {\n+                true\n+            }\n+        }\n+    };\n+\n     let layer = tracing_tree::HierarchicalLayer::default()\n         .with_writer(io::stderr)\n         .with_indent_lines(true)\n         .with_ansi(color_logs)\n         .with_targets(true)\n+        .with_verbose_exit(verbose_entry_exit)\n+        .with_verbose_entry(verbose_entry_exit)\n         .with_indent_amount(2);\n     #[cfg(parallel_compiler)]\n     let layer = layer.with_thread_ids(true).with_thread_names(true);"}]}