{"sha": "8650df5dea7a27852a7fa6bd2585905abb521db7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NTBkZjVkZWE3YTI3ODUyYTdmYTZiZDI1ODU5MDVhYmI1MjFkYjc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-11T17:04:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-11T17:04:20Z"}, "message": "Rollup merge of #73230 - Amanieu:asm-unused2, r=petrochenkov\n\nSuggest including unused asm arguments in a comment to avoid error\n\nWe require all arguments to an `asm!` to be used in the template string, just like format strings. However in some cases (e.g. `black_box`) it may be desirable to have `asm!` arguments that are not used in the template string.\n\nCurrently this is a hard error rather than a lint since `#[allow]` does not work on macros (#63221), so this PR suggests using the unused arguments in an asm comment as a workaround.\n\nr? @petrochenkov", "tree": {"sha": "df7e39d8ffe113bd11f9cf75a54bec2157d219b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df7e39d8ffe113bd11f9cf75a54bec2157d219b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8650df5dea7a27852a7fa6bd2585905abb521db7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe4mQUCRBK7hj4Ov3rIwAAdHIIAEaf0jkYiAR28jn/PrHkt47d\nj0+NqvhfV0aHeIENWmod4qVcIWNz0qVt6OSZMz7jr7bC3c6Uhuwoxjk0nrLsvCA4\nVWZ+nabylJ75FzA93z2x2T2rwpCk7Ae/tOkWdefhLabsEs9wDtL3PQ9guPA4O1MB\nHrTF39royLqjJLi7zmQBykp15gq1x0SlVyfe6fnkjirzPm/1E+oJz1c9W8mhF58n\nKGvScQi+HfXx1ZN2i07CugUIIcsFRlWH5AE23mrYujfl79fSUxMPc2oMTAScKqnS\nQFj+9toPHgVYbz9ymfdYo1AXENbvcLBq54BQjp0NdH3iou57HCRyhIb+qG0m2AE=\n=djr+\n-----END PGP SIGNATURE-----\n", "payload": "tree df7e39d8ffe113bd11f9cf75a54bec2157d219b8\nparent 6b418b307c0222ecceb3d82b46621a377b592c79\nparent ddacc671901359ef1cd95722af0ff23a7ca6e212\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591895060 +0200\ncommitter GitHub <noreply@github.com> 1591895060 +0200\n\nRollup merge of #73230 - Amanieu:asm-unused2, r=petrochenkov\n\nSuggest including unused asm arguments in a comment to avoid error\n\nWe require all arguments to an `asm!` to be used in the template string, just like format strings. However in some cases (e.g. `black_box`) it may be desirable to have `asm!` arguments that are not used in the template string.\n\nCurrently this is a hard error rather than a lint since `#[allow]` does not work on macros (#63221), so this PR suggests using the unused arguments in an asm comment as a workaround.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8650df5dea7a27852a7fa6bd2585905abb521db7", "html_url": "https://github.com/rust-lang/rust/commit/8650df5dea7a27852a7fa6bd2585905abb521db7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8650df5dea7a27852a7fa6bd2585905abb521db7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b418b307c0222ecceb3d82b46621a377b592c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b418b307c0222ecceb3d82b46621a377b592c79", "html_url": "https://github.com/rust-lang/rust/commit/6b418b307c0222ecceb3d82b46621a377b592c79"}, {"sha": "ddacc671901359ef1cd95722af0ff23a7ca6e212", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddacc671901359ef1cd95722af0ff23a7ca6e212", "html_url": "https://github.com/rust-lang/rust/commit/ddacc671901359ef1cd95722af0ff23a7ca6e212"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "fbb40f1d2f3d4b07e8ea1e476f33cfa71af87c54", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=8650df5dea7a27852a7fa6bd2585905abb521db7", "patch": "@@ -201,7 +201,7 @@ fn mul(a: u64, b: u64) -> u128 {\n         );\n     }\n \n-    (hi as u128) << 64 + lo as u128\n+    ((hi as u128) << 64) + lo as u128\n }\n ```\n \n@@ -382,7 +382,9 @@ The macro will initially be supported only on ARM, AArch64, x86, x86-64 and RISC\n \n The assembler template uses the same syntax as [format strings][format-syntax] (i.e. placeholders are specified by curly braces). The corresponding arguments are accessed in order, by index, or by name. However, implicit named arguments (introduced by [RFC #2795][rfc-2795]) are not supported.\n \n-As with format strings, named arguments must appear after positional arguments. Explicit register operands must appear at the end of the operand list, after any named arguments if any. Explicit register operands cannot be used by placeholders in the template string. All other operands must appear at least once in the template string, otherwise a compiler error is generated.\n+As with format strings, named arguments must appear after positional arguments. Explicit register operands must appear at the end of the operand list, after named arguments if any.\n+\n+Explicit register operands cannot be used by placeholders in the template string. All other named and positional operands must appear at least once in the template string, otherwise a compiler error is generated.\n \n The exact assembly code syntax is target-specific and opaque to the compiler except for the way operands are substituted into the template string to form the code passed to the assembler.\n "}, {"sha": "480ee97f20552c7e2b2a1d33980859734e3b3c4f", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=8650df5dea7a27852a7fa6bd2585905abb521db7", "patch": "@@ -391,7 +391,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         used[*pos] = true;\n     }\n \n-    let named_pos: FxHashSet<usize> = args.named_args.values().cloned().collect();\n+    let named_pos: FxHashMap<usize, Symbol> =\n+        args.named_args.iter().map(|(&sym, &idx)| (idx, sym)).collect();\n     let mut arg_spans = parser.arg_places.iter().map(|span| template_span.from_inner(*span));\n     let mut template = vec![];\n     for piece in unverified_pieces {\n@@ -405,7 +406,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n                 let operand_idx = match arg.position {\n                     parse::ArgumentIs(idx) | parse::ArgumentImplicitlyIs(idx) => {\n                         if idx >= args.operands.len()\n-                            || named_pos.contains(&idx)\n+                            || named_pos.contains_key(&idx)\n                             || args.reg_args.contains(&idx)\n                         {\n                             let msg = format!(\"invalid reference to argument at index {}\", idx);\n@@ -426,7 +427,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n                             };\n                             err.note(&msg);\n \n-                            if named_pos.contains(&idx) {\n+                            if named_pos.contains_key(&idx) {\n                                 err.span_label(args.operands[idx].1, \"named argument\");\n                                 err.span_note(\n                                     args.operands[idx].1,\n@@ -480,27 +481,31 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         }\n     }\n \n-    let operands = args.operands;\n-    let unused_operands: Vec<_> = used\n-        .into_iter()\n-        .enumerate()\n-        .filter(|&(_, used)| !used)\n-        .map(|(idx, _)| {\n-            if named_pos.contains(&idx) {\n-                // named argument\n-                (operands[idx].1, \"named argument never used\")\n+    let mut unused_operands = vec![];\n+    let mut help_str = String::new();\n+    for (idx, used) in used.into_iter().enumerate() {\n+        if !used {\n+            let msg = if let Some(sym) = named_pos.get(&idx) {\n+                help_str.push_str(&format!(\" {{{}}}\", sym));\n+                \"named argument never used\"\n             } else {\n-                // positional argument\n-                (operands[idx].1, \"argument never used\")\n-            }\n-        })\n-        .collect();\n+                help_str.push_str(&format!(\" {{{}}}\", idx));\n+                \"argument never used\"\n+            };\n+            unused_operands.push((args.operands[idx].1, msg));\n+        }\n+    }\n     match unused_operands.len() {\n         0 => {}\n         1 => {\n             let (sp, msg) = unused_operands.into_iter().next().unwrap();\n             let mut err = ecx.struct_span_err(sp, msg);\n             err.span_label(sp, msg);\n+            err.help(&format!(\n+                \"if this argument is intentionally unused, \\\n+                 consider using it in an asm comment: `\\\"/*{} */\\\"`\",\n+                help_str\n+            ));\n             err.emit();\n         }\n         _ => {\n@@ -511,6 +516,11 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n             for (sp, msg) in unused_operands {\n                 err.span_label(sp, msg);\n             }\n+            err.help(&format!(\n+                \"if these arguments are intentionally unused, \\\n+                 consider using them in an asm comment: `\\\"/*{} */\\\"`\",\n+                help_str\n+            ));\n             err.emit();\n         }\n     }\n@@ -521,7 +531,8 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         parser.line_spans.iter().map(|span| template_span.from_inner(*span)).collect()\n     };\n \n-    let inline_asm = ast::InlineAsm { template, operands, options: args.options, line_spans };\n+    let inline_asm =\n+        ast::InlineAsm { template, operands: args.operands, options: args.options, line_spans };\n     P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         kind: ast::ExprKind::InlineAsm(P(inline_asm)),"}, {"sha": "21ce8c6236d062afbf5cf42c0a12f16c704b4355", "filename": "src/test/ui/asm/bad-template.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs?ref=8650df5dea7a27852a7fa6bd2585905abb521db7", "patch": "@@ -22,5 +22,7 @@ fn main() {\n         //~^ ERROR invalid reference to argument at index 0\n         asm!(\"{:foo}\", in(reg) foo);\n         //~^ ERROR asm template modifier must be a single character\n+        asm!(\"\", in(reg) 0, in(reg) 1);\n+        //~^ ERROR multiple unused asm arguments\n     }\n }"}, {"sha": "1aea7467ed0a761d0abde005ee059de567d5ae2d", "filename": "src/test/ui/asm/bad-template.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr?ref=8650df5dea7a27852a7fa6bd2585905abb521db7", "patch": "@@ -19,6 +19,8 @@ error: argument never used\n    |\n LL |         asm!(\"{1}\", in(reg) foo);\n    |                     ^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n   --> $DIR/bad-template.rs:13:15\n@@ -46,6 +48,8 @@ error: named argument never used\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |                    ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n   --> $DIR/bad-template.rs:18:15\n@@ -60,6 +64,8 @@ error: named argument never used\n    |\n LL |         asm!(\"{1}\", a = in(reg) foo);\n    |                     ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:21:15\n@@ -82,5 +88,15 @@ error: asm template modifier must be a single character\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |                 ^^^\n \n-error: aborting due to 10 previous errors\n+error: multiple unused asm arguments\n+  --> $DIR/bad-template.rs:25:18\n+   |\n+LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n+   |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n+   |                  |\n+   |                  argument never used\n+   |\n+   = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "583a10570360bf6d0af09b7e21e202db94a549b1", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8650df5dea7a27852a7fa6bd2585905abb521db7/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=8650df5dea7a27852a7fa6bd2585905abb521db7", "patch": "@@ -127,6 +127,8 @@ error: argument never used\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n   --> $DIR/parse-error.rs:47:18"}]}