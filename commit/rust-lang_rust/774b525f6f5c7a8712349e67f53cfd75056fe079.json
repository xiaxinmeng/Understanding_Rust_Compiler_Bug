{"sha": "774b525f6f5c7a8712349e67f53cfd75056fe079", "node_id": "C_kwDOAAsO6NoAKDc3NGI1MjVmNmY1YzdhODcxMjM0OWU2N2Y1M2NmZDc1MDU2ZmUwNzk", "commit": {"author": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-05-04T18:49:05Z"}, "committer": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-05-04T19:03:01Z"}, "message": "rustdoc-json: Add tests for all three HRTB fields", "tree": {"sha": "bf603437488516d452e228a22284d1e53da2004d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf603437488516d452e228a22284d1e53da2004d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774b525f6f5c7a8712349e67f53cfd75056fe079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774b525f6f5c7a8712349e67f53cfd75056fe079", "html_url": "https://github.com/rust-lang/rust/commit/774b525f6f5c7a8712349e67f53cfd75056fe079", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774b525f6f5c7a8712349e67f53cfd75056fe079/comments", "author": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f15ce5f9748d523f3c1835da12b05b15648aa68", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f15ce5f9748d523f3c1835da12b05b15648aa68", "html_url": "https://github.com/rust-lang/rust/commit/1f15ce5f9748d523f3c1835da12b05b15648aa68"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "646f720e66396441d2dbe9d9f9b2355ab251251b", "filename": "src/test/rustdoc-json/fn_pointer/generics.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/774b525f6f5c7a8712349e67f53cfd75056fe079/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774b525f6f5c7a8712349e67f53cfd75056fe079/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fgenerics.rs?ref=774b525f6f5c7a8712349e67f53cfd75056fe079", "patch": "@@ -0,0 +1,14 @@\n+// ignore-tidy-linelength\n+\n+#![feature(no_core)]\n+#![no_core]\n+\n+// @count generics.json \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[*]\" 1\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][0]\" '\"val\"'\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.inputs[0][1].inner.lifetime\" \\\"\\'c\\\"\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.decl.output\" '{ \"kind\": \"primitive\", \"inner\": \"i32\" }'\n+// @count - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].name\" \\\"\\'c\\\"\n+// @is - \"$.index[*][?(@.name=='WithHigherRankTraitBounds')].inner.type.inner.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+pub type WithHigherRankTraitBounds = for<'c> fn(val: &'c i32) -> i32;"}, {"sha": "69150443c29dc9059a3c2c0c10c807bcf3c94844", "filename": "src/test/rustdoc-json/fns/generic_args.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/774b525f6f5c7a8712349e67f53cfd75056fe079/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774b525f6f5c7a8712349e67f53cfd75056fe079/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgeneric_args.rs?ref=774b525f6f5c7a8712349e67f53cfd75056fe079", "patch": "@@ -6,6 +6,9 @@\n // @set foo = generic_args.json \"$.index[*][?(@.name=='Foo')].id\"\n pub trait Foo {}\n \n+// @set generic_foo = generic_args.json \"$.index[*][?(@.name=='GenericFoo')].id\"\n+pub trait GenericFoo<'a> {}\n+\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.where_predicates\" \"[]\"\n // @count - \"$.index[*][?(@.name=='generics')].inner.generics.params[*]\" 1\n // @is - \"$.index[*][?(@.name=='generics')].inner.generics.params[0].name\" '\"F\"'\n@@ -29,19 +32,40 @@ pub fn generics<F: Foo>(f: F) {}\n // @is - \"$.index[*][?(@.name=='impl_trait')].inner.decl.inputs[0][1].inner[0].trait_bound.trait.inner.id\" $foo\n pub fn impl_trait(f: impl Foo) {}\n \n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 1\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[*]\" 3\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].name\" '\"F\"'\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.params[0].kind\" '{\"type\": {\"bounds\": [], \"default\": null, \"synthetic\": false}}'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 1\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[*]\" 3\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][0]\" '\"f\"'\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].kind\" '\"generic\"'\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.decl.inputs[0][1].inner\" '\"F\"'\n-// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 1\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[*]\" 3\n+\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.type\" '{\"inner\": \"F\", \"kind\": \"generic\"}'\n // @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[*]\" 1\n // @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[0].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n-pub fn where_clase<F>(f: F)\n+\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.type\" '{\"inner\": \"G\", \"kind\": \"generic\"}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $generic_foo\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].name\" \\\"\\'a\\\"\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.bounds[0].trait_bound.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[1].bound_predicate.generic_params\" \"[]\"\n+\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.lifetime\" \\\"\\'b\\\"\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.type.inner.type\" '{\"inner\": \"H\", \"kind\": \"generic\"}'\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.trait.inner.id\" $foo\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.bounds[0].trait_bound.generic_params\" \"[]\"\n+// @count - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[*]\" 1\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].name\" \\\"\\'b\\\"\n+// @is - \"$.index[*][?(@.name=='where_clase')].inner.generics.where_predicates[2].bound_predicate.generic_params[0].kind\" '{ \"lifetime\": { \"outlives\": [] } }'\n+pub fn where_clase<F, G, H>(f: F, g: G, h: H)\n where\n     F: Foo,\n+    G: for<'a> GenericFoo<'a>,\n+    for<'b> &'b H: Foo,\n {\n }"}]}