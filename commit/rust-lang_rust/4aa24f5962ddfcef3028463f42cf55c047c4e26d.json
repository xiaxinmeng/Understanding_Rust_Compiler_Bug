{"sha": "4aa24f5962ddfcef3028463f42cf55c047c4e26d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYTI0ZjU5NjJkZGZjZWYzMDI4NDYzZjQyY2Y1NWMwNDdjNGUyNmQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-07-24T21:48:58Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-07-24T21:48:58Z"}, "message": "Merge pull request #158 from marcusklaas/modules\n\nUse new module code from libsyntax", "tree": {"sha": "3e494559d90a2a562ac82803a88fae8f6429c72a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e494559d90a2a562ac82803a88fae8f6429c72a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa24f5962ddfcef3028463f42cf55c047c4e26d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa24f5962ddfcef3028463f42cf55c047c4e26d", "html_url": "https://github.com/rust-lang/rust/commit/4aa24f5962ddfcef3028463f42cf55c047c4e26d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa24f5962ddfcef3028463f42cf55c047c4e26d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fc8c3783699dfb25a68ad922c0853f0326de19f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc8c3783699dfb25a68ad922c0853f0326de19f", "html_url": "https://github.com/rust-lang/rust/commit/0fc8c3783699dfb25a68ad922c0853f0326de19f"}, {"sha": "3aa03dcc25ce3b723fe691fc1b97f3dbc5dac36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa03dcc25ce3b723fe691fc1b97f3dbc5dac36a", "html_url": "https://github.com/rust-lang/rust/commit/3aa03dcc25ce3b723fe691fc1b97f3dbc5dac36a"}], "stats": {"total": 113, "additions": 49, "deletions": 64}, "files": [{"sha": "5c042ddaf5e3b0ecfea78e600b46d4a09b5bdf27", "filename": "src/comment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4aa24f5962ddfcef3028463f42cf55c047c4e26d/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa24f5962ddfcef3028463f42cf55c047c4e26d/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=4aa24f5962ddfcef3028463f42cf55c047c4e26d", "patch": "@@ -101,10 +101,10 @@ fn format_comments() {\n                                12));\n \n     let input = \"// comment\";\n-    let expected_output = \"/* com\\n                                                                      \\\n-                           * men\\n                                                                      \\\n-                           * t */\";\n-    assert_eq!(expected_output, rewrite_comment(input, true, 9, 69));\n+    let expected = \"/* com\\n                                                                      \\\n+                    * men\\n                                                                      * \\\n+                    t */\";\n+    assert_eq!(expected, rewrite_comment(input, true, 9, 69));\n \n     assert_eq!(\"/* trimmed */\", rewrite_comment(\"/*   trimmed    */\", true, 100, 100));\n }"}, {"sha": "c5b6f497de5260f28964fac7eed75308fef6c19b", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa24f5962ddfcef3028463f42cf55c047c4e26d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa24f5962ddfcef3028463f42cf55c047c4e26d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4aa24f5962ddfcef3028463f42cf55c047c4e26d", "patch": "@@ -347,9 +347,11 @@ fn rewrite_binary_op(context: &RewriteContext,\n     result.push(' ');\n     result.push_str(&operator_str);\n \n+    // 1 = space between operator and rhs\n+    let used_width = result.len() + operator_str.len() + 1;\n     let remaining_width = match result.rfind('\\n') {\n-        Some(idx) => (offset + width + idx).checked_sub(result.len()).unwrap_or(0),\n-        None => width.checked_sub(result.len()).unwrap_or(0)\n+        Some(idx) => (offset + width + idx).checked_sub(used_width).unwrap_or(0),\n+        None => width.checked_sub(used_width).unwrap_or(0)\n     };\n \n     // Get \"full width\" rhs and see if it fits on the current line. This"}, {"sha": "09592e9c8b2f80a894fe4c99a1479fb9bb569f9c", "filename": "src/visitor.rs", "status": "modified", "additions": 36, "deletions": 58, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4aa24f5962ddfcef3028463f42cf55c047c4e26d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa24f5962ddfcef3028463f42cf55c047c4e26d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=4aa24f5962ddfcef3028463f42cf55c047c4e26d", "patch": "@@ -11,13 +11,11 @@\n use syntax::ast;\n use syntax::codemap::{self, CodeMap, Span, BytePos};\n use syntax::visit;\n-use syntax::parse::token;\n-use syntax::attr;\n+use syntax::parse::{token, parser};\n use std::path::PathBuf;\n \n use utils;\n use config::Config;\n-use comment::FindUncommented;\n \n use changes::ChangeSet;\n use rewrite::{Rewrite, RewriteContext};\n@@ -363,68 +361,48 @@ impl<'a> FmtVisitor<'a> {\n \n     fn format_mod(&mut self, m: &ast::Mod, s: Span, ident: ast::Ident, attrs: &[ast::Attribute]) {\n         debug!(\"FmtVisitor::format_mod: ident: {:?}, span: {:?}\", ident, s);\n+\n         // Decide whether this is an inline mod or an external mod.\n-        // There isn't any difference between inline and external mod in AST,\n-        // so we use the trick of searching for an opening brace.\n-        // We can't use the inner span of the mod since it is weird when it\n-        // is empty (no items).\n-        // FIXME Use the inner span once rust-lang/rust#26755 is fixed.\n-        let open_brace = self.codemap.span_to_snippet(s).unwrap().find_uncommented(\"{\");\n-        match open_brace {\n-            None => {\n-                debug!(\"FmtVisitor::format_mod: external mod\");\n-                let file_path = self.module_file(ident, attrs, s);\n-                let filename = file_path.to_str().unwrap();\n-                if self.changes.is_changed(filename) {\n-                    // The file has already been reformatted, do nothing\n-                } else {\n-                    self.format_separate_mod(m, filename);\n-                }\n-                // TODO Should rewrite properly `mod X;`\n-            }\n-            Some(open_brace) => {\n-                debug!(\"FmtVisitor::format_mod: internal mod\");\n-                debug!(\"... open_brace: {}, str: {:?}\",\n-                       open_brace,\n-                       self.codemap.span_to_snippet(s));\n-                // Format everything until opening brace\n-                // TODO Shoud rewrite properly\n-                self.format_missing(s.lo + BytePos(open_brace as u32));\n-                self.block_indent += self.config.tab_spaces;\n-                visit::walk_mod(self, m);\n-                debug!(\"... last_pos after: {:?}\", self.last_pos);\n-                self.block_indent -= self.config.tab_spaces;\n+        let local_file_name = self.codemap.span_to_filename(s);\n+        let is_internal = local_file_name == self.codemap.span_to_filename(m.inner);\n+\n+        // TODO Should rewrite properly `mod X;`\n+\n+        if is_internal {\n+            debug!(\"FmtVisitor::format_mod: internal mod\");\n+            self.block_indent += self.config.tab_spaces;\n+            visit::walk_mod(self, m);\n+            debug!(\"... last_pos after: {:?}\", self.last_pos);\n+            self.block_indent -= self.config.tab_spaces;\n+        } else {\n+            debug!(\"FmtVisitor::format_mod: external mod\");\n+            let file_path = self.module_file(ident, attrs, local_file_name);\n+            let filename = file_path.to_str().unwrap();\n+            if self.changes.is_changed(filename) {\n+                // The file has already been reformatted, do nothing\n+            } else {\n+                self.format_separate_mod(m, filename);\n             }\n         }\n-        self.format_missing(s.hi);\n+\n         debug!(\"FmtVisitor::format_mod: exit\");\n     }\n \n     /// Find the file corresponding to an external mod\n-    /// Same algorithm as syntax::parse::eval_src_mod\n-    fn module_file(&self, id: ast::Ident, outer_attrs: &[ast::Attribute], id_sp: Span) -> PathBuf {\n-        // FIXME use libsyntax once rust-lang/rust#26750 is merged\n-        let mut prefix = PathBuf::from(&self.codemap.span_to_filename(id_sp));\n-        prefix.pop();\n-        let mod_string = token::get_ident(id);\n-        match attr::first_attr_value_str_by_name(outer_attrs, \"path\") {\n-            Some(d) => prefix.join(&*d),\n-            None => {\n-                let default_path_str = format!(\"{}.rs\", mod_string);\n-                let secondary_path_str = format!(\"{}/mod.rs\", mod_string);\n-                let default_path = prefix.join(&default_path_str);\n-                let secondary_path = prefix.join(&secondary_path_str);\n-                let default_exists = self.codemap.file_exists(&default_path);\n-                let secondary_exists = self.codemap.file_exists(&secondary_path);\n-                if default_exists {\n-                    default_path\n-                } else if secondary_exists {\n-                    secondary_path\n-                } else {\n-                    // Should never appens since rustc parsed everything sucessfully\n-                    panic!(\"Didn't found module {}\", mod_string);\n-                }\n-            }\n+    fn module_file(&self, id: ast::Ident, attrs: &[ast::Attribute], filename: String) -> PathBuf {\n+        let dir_path = {\n+            let mut path = PathBuf::from(&filename);\n+            path.pop();\n+            path\n+        };\n+\n+        if let Some(path) = parser::Parser::submod_path_from_attr(attrs, &dir_path) {\n+            return path;\n+        }\n+\n+        match parser::Parser::default_submod_path(id, &dir_path, &self.codemap).result {\n+            Ok(parser::ModulePathSuccess { path, .. }) => path,\n+            _ => panic!(\"Couldn't find module {}\", token::get_ident(id))\n         }\n     }\n "}, {"sha": "f71ebcc9035b054600e1a56c3ebaa2959e5a198e", "filename": "tests/source/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa24f5962ddfcef3028463f42cf55c047c4e26d/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa24f5962ddfcef3028463f42cf55c047c4e26d/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=4aa24f5962ddfcef3028463f42cf55c047c4e26d", "patch": "@@ -7,6 +7,8 @@ fn foo() -> bool {\n     let very_long_variable_name = ( a +  first +   simple + test   );\n     let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB + b + c);\n \n+    let is_internalxxxx = self.codemap.span_to_filename(s) == self.codemap.span_to_filename(m.inner);\n+\n     let some_val = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa * bbbb / (bbbbbb -\n         function_call(x, *very_long_pointer, y))\n     + 1000;"}, {"sha": "5b82dc6a8b5a22d2077e24cda50a29c7430ad4e3", "filename": "tests/target/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4aa24f5962ddfcef3028463f42cf55c047c4e26d/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa24f5962ddfcef3028463f42cf55c047c4e26d/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=4aa24f5962ddfcef3028463f42cf55c047c4e26d", "patch": "@@ -8,6 +8,9 @@ fn foo() -> bool {\n     let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB +\n                                    b + c);\n \n+    let is_internalxxxx = self.codemap.span_to_filename(s) ==\n+                          self.codemap.span_to_filename(m.inner);\n+\n     let some_val = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa * bbbb /\n                    (bbbbbb - function_call(x, *very_long_pointer, y)) + 1000;\n "}]}