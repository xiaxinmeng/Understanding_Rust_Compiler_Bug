{"sha": "cec676d08236076a48a9fdae28cf0e716ae99b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzY3NmQwODIzNjA3NmE0OGE5ZmRhZTI4Y2YwZTcxNmFlOTliMTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-15T09:26:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-15T09:26:58Z"}, "message": "Merge #7975\n\n7975: Provide regions in file structure r=ivan770 a=ivan770\n\nCloses #7913 \r\n\r\nhttps://user-images.githubusercontent.com/14003886/110819163-96b3c080-8296-11eb-993e-a7cdb574a12d.mp4\r\n\r\n\n\nCo-authored-by: ivan770 <leshenko.ivan770@gmail.com>", "tree": {"sha": "6fb2e73e2d8ba57779f986fd02856e9fda30679e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fb2e73e2d8ba57779f986fd02856e9fda30679e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec676d08236076a48a9fdae28cf0e716ae99b16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTyhiCRBK7hj4Ov3rIwAAdHIIAJSVPw2975FRAWkEdW684fSc\nZUZE3wndJJ91qU8f2qwe5zfHjMZAF6WQbeknBVCXGrUvlmN/n2uvXgdQLWG2ix6M\n5CLKZKupDByqWCymTlD9AnXPzdB1udG5PHG8l9Hzq4tt0LNMHc5oSvqbHa9tmJ3Q\nQbNjaCeNOGEEEl6rfxwQkJGGIByy2zkBjcjLfkvQbHOxU876XSrerohpsIumceKG\nSnJdFVIqHcrVOlt7vGaOfWRWaoPeYdy8vJJUimXZZ+tmxnKU0y90n9/ihrVcAzis\nW9HA8LsTL1zU+tSpAHRF8pHBH2A3ezgJig4UxiT5ZCbwoGxG/EIqnVi1nyIfM+8=\n=BSD7\n-----END PGP SIGNATURE-----\n", "payload": "tree 6fb2e73e2d8ba57779f986fd02856e9fda30679e\nparent de360275416ca095102f2b17d6ca1de3bd091fdb\nparent d6977550dd3cdfa012d30c12d8b89776070ab7af\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615800418 +0000\ncommitter GitHub <noreply@github.com> 1615800418 +0000\n\nMerge #7975\n\n7975: Provide regions in file structure r=ivan770 a=ivan770\n\nCloses #7913 \r\n\r\nhttps://user-images.githubusercontent.com/14003886/110819163-96b3c080-8296-11eb-993e-a7cdb574a12d.mp4\r\n\r\n\n\nCo-authored-by: ivan770 <leshenko.ivan770@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec676d08236076a48a9fdae28cf0e716ae99b16", "html_url": "https://github.com/rust-lang/rust/commit/cec676d08236076a48a9fdae28cf0e716ae99b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec676d08236076a48a9fdae28cf0e716ae99b16/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de360275416ca095102f2b17d6ca1de3bd091fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/de360275416ca095102f2b17d6ca1de3bd091fdb", "html_url": "https://github.com/rust-lang/rust/commit/de360275416ca095102f2b17d6ca1de3bd091fdb"}, {"sha": "d6977550dd3cdfa012d30c12d8b89776070ab7af", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6977550dd3cdfa012d30c12d8b89776070ab7af", "html_url": "https://github.com/rust-lang/rust/commit/d6977550dd3cdfa012d30c12d8b89776070ab7af"}], "stats": {"total": 257, "additions": 207, "deletions": 50}, "files": [{"sha": "fd317874e04dfcdfdd409f65b299406167165dc4", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=cec676d08236076a48a9fdae28cf0e716ae99b16", "patch": "@@ -1,7 +1,7 @@\n use hir::Semantics;\n use ide_db::{\n     base_db::{FileId, FilePosition, FileRange, SourceDatabase},\n-    RootDatabase, SymbolKind,\n+    RootDatabase, StructureNodeKind, SymbolKind,\n };\n use syntax::TextRange;\n \n@@ -80,15 +80,17 @@ pub(crate) fn annotations(\n         .filter(|node| {\n             matches!(\n                 node.kind,\n-                SymbolKind::Trait\n-                    | SymbolKind::Struct\n-                    | SymbolKind::Enum\n-                    | SymbolKind::Union\n-                    | SymbolKind::Const\n+                StructureNodeKind::SymbolKind(SymbolKind::Trait)\n+                    | StructureNodeKind::SymbolKind(SymbolKind::Struct)\n+                    | StructureNodeKind::SymbolKind(SymbolKind::Enum)\n+                    | StructureNodeKind::SymbolKind(SymbolKind::Union)\n+                    | StructureNodeKind::SymbolKind(SymbolKind::Const)\n             )\n         })\n         .for_each(|node| {\n-            if config.annotate_impls && node.kind != SymbolKind::Const {\n+            if config.annotate_impls\n+                && node.kind != StructureNodeKind::SymbolKind(SymbolKind::Const)\n+            {\n                 annotations.push(Annotation {\n                     range: node.node_range,\n                     kind: AnnotationKind::HasImpls {"}, {"sha": "c21b3fa770eda898f72c102338c16ba40db393eb", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 183, "deletions": 41, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=cec676d08236076a48a9fdae28cf0e716ae99b16", "patch": "@@ -1,7 +1,8 @@\n-use ide_db::SymbolKind;\n+use ide_db::{StructureNodeKind, SymbolKind};\n use syntax::{\n     ast::{self, AttrsOwner, GenericParamsOwner, NameOwner},\n-    match_ast, AstNode, SourceFile, SyntaxNode, TextRange, WalkEvent,\n+    match_ast, AstNode, AstToken, NodeOrToken, SourceFile, SyntaxNode, SyntaxToken, TextRange,\n+    WalkEvent,\n };\n \n #[derive(Debug, Clone)]\n@@ -10,7 +11,7 @@ pub struct StructureNode {\n     pub label: String,\n     pub navigation_range: TextRange,\n     pub node_range: TextRange,\n-    pub kind: SymbolKind,\n+    pub kind: StructureNodeKind,\n     pub detail: Option<String>,\n     pub deprecated: bool,\n }\n@@ -32,34 +33,46 @@ pub(crate) fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n \n-    for event in file.syntax().preorder() {\n+    for event in file.syntax().preorder_with_tokens() {\n         match event {\n-            WalkEvent::Enter(node) => {\n+            WalkEvent::Enter(NodeOrToken::Node(node)) => {\n                 if let Some(mut symbol) = structure_node(&node) {\n                     symbol.parent = stack.last().copied();\n                     stack.push(res.len());\n                     res.push(symbol);\n                 }\n             }\n-            WalkEvent::Leave(node) => {\n+            WalkEvent::Leave(NodeOrToken::Node(node)) => {\n                 if structure_node(&node).is_some() {\n                     stack.pop().unwrap();\n                 }\n             }\n+            WalkEvent::Enter(NodeOrToken::Token(token)) => {\n+                if let Some(mut symbol) = structure_token(token) {\n+                    symbol.parent = stack.last().copied();\n+                    stack.push(res.len());\n+                    res.push(symbol);\n+                }\n+            }\n+            WalkEvent::Leave(NodeOrToken::Token(token)) => {\n+                if structure_token(token).is_some() {\n+                    stack.pop().unwrap();\n+                }\n+            }\n         }\n     }\n     res\n }\n \n fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n-    fn decl<N: NameOwner + AttrsOwner>(node: N, kind: SymbolKind) -> Option<StructureNode> {\n+    fn decl<N: NameOwner + AttrsOwner>(node: N, kind: StructureNodeKind) -> Option<StructureNode> {\n         decl_with_detail(&node, None, kind)\n     }\n \n     fn decl_with_type_ref<N: NameOwner + AttrsOwner>(\n         node: &N,\n         type_ref: Option<ast::Type>,\n-        kind: SymbolKind,\n+        kind: StructureNodeKind,\n     ) -> Option<StructureNode> {\n         let detail = type_ref.map(|type_ref| {\n             let mut detail = String::new();\n@@ -72,7 +85,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n     fn decl_with_detail<N: NameOwner + AttrsOwner>(\n         node: &N,\n         detail: Option<String>,\n-        kind: SymbolKind,\n+        kind: StructureNodeKind,\n     ) -> Option<StructureNode> {\n         let name = node.name()?;\n \n@@ -120,18 +133,18 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     collapse_ws(ret_type.syntax(), &mut detail);\n                 }\n \n-                decl_with_detail(&it, Some(detail), SymbolKind::Function)\n+                decl_with_detail(&it, Some(detail), StructureNodeKind::SymbolKind(SymbolKind::Function))\n             },\n-            ast::Struct(it) => decl(it, SymbolKind::Struct),\n-            ast::Union(it) => decl(it, SymbolKind::Union),\n-            ast::Enum(it) => decl(it, SymbolKind::Enum),\n-            ast::Variant(it) => decl(it, SymbolKind::Variant),\n-            ast::Trait(it) => decl(it, SymbolKind::Trait),\n-            ast::Module(it) => decl(it, SymbolKind::Module),\n-            ast::TypeAlias(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::TypeAlias),\n-            ast::RecordField(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::Field),\n-            ast::Const(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::Const),\n-            ast::Static(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::Static),\n+            ast::Struct(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Struct)),\n+            ast::Union(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Union)),\n+            ast::Enum(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Enum)),\n+            ast::Variant(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Variant)),\n+            ast::Trait(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Trait)),\n+            ast::Module(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Module)),\n+            ast::TypeAlias(it) => decl_with_type_ref(&it, it.ty(), StructureNodeKind::SymbolKind(SymbolKind::TypeAlias)),\n+            ast::RecordField(it) => decl_with_type_ref(&it, it.ty(), StructureNodeKind::SymbolKind(SymbolKind::Field)),\n+            ast::Const(it) => decl_with_type_ref(&it, it.ty(), StructureNodeKind::SymbolKind(SymbolKind::Const)),\n+            ast::Static(it) => decl_with_type_ref(&it, it.ty(), StructureNodeKind::SymbolKind(SymbolKind::Static)),\n             ast::Impl(it) => {\n                 let target_type = it.self_ty()?;\n                 let target_trait = it.trait_();\n@@ -147,18 +160,38 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     label,\n                     navigation_range: target_type.syntax().text_range(),\n                     node_range: it.syntax().text_range(),\n-                    kind: SymbolKind::Impl,\n+                    kind: StructureNodeKind::SymbolKind(SymbolKind::Impl),\n                     detail: None,\n                     deprecated: false,\n                 };\n                 Some(node)\n             },\n-            ast::MacroRules(it) => decl(it, SymbolKind::Macro),\n+            ast::MacroRules(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Macro)),\n             _ => None,\n         }\n     }\n }\n \n+fn structure_token(token: SyntaxToken) -> Option<StructureNode> {\n+    if let Some(comment) = ast::Comment::cast(token) {\n+        let text = comment.text().trim();\n+\n+        if let Some(region_name) = text.strip_prefix(\"// region:\").map(str::trim) {\n+            return Some(StructureNode {\n+                parent: None,\n+                label: region_name.to_string(),\n+                navigation_range: comment.syntax().text_range(),\n+                node_range: comment.syntax().text_range(),\n+                kind: StructureNodeKind::Region,\n+                detail: None,\n+                deprecated: false,\n+            });\n+        }\n+    }\n+\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -217,6 +250,16 @@ fn obsolete() {}\n \n #[deprecated(note = \"for awhile\")]\n fn very_obsolete() {}\n+\n+// region: Some region name\n+// endregion\n+\n+// region: dontpanic\n+mod m {\n+fn f() {}\n+// endregion\n+fn g() {}\n+}\n \"#,\n             expect![[r#\"\n                 [\n@@ -225,7 +268,9 @@ fn very_obsolete() {}\n                         label: \"Foo\",\n                         navigation_range: 8..11,\n                         node_range: 1..26,\n-                        kind: Struct,\n+                        kind: SymbolKind(\n+                            Struct,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -236,7 +281,9 @@ fn very_obsolete() {}\n                         label: \"x\",\n                         navigation_range: 18..19,\n                         node_range: 18..24,\n-                        kind: Field,\n+                        kind: SymbolKind(\n+                            Field,\n+                        ),\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -247,7 +294,9 @@ fn very_obsolete() {}\n                         label: \"m\",\n                         navigation_range: 32..33,\n                         node_range: 28..158,\n-                        kind: Module,\n+                        kind: SymbolKind(\n+                            Module,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -258,7 +307,9 @@ fn very_obsolete() {}\n                         label: \"bar1\",\n                         navigation_range: 43..47,\n                         node_range: 40..52,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -271,7 +322,9 @@ fn very_obsolete() {}\n                         label: \"bar2\",\n                         navigation_range: 60..64,\n                         node_range: 57..81,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn<T>(t: T) -> T\",\n                         ),\n@@ -284,7 +337,9 @@ fn very_obsolete() {}\n                         label: \"bar3\",\n                         navigation_range: 89..93,\n                         node_range: 86..156,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn<A, B>(a: A, b: B) -> Vec< u32 >\",\n                         ),\n@@ -295,7 +350,9 @@ fn very_obsolete() {}\n                         label: \"E\",\n                         navigation_range: 165..166,\n                         node_range: 160..180,\n-                        kind: Enum,\n+                        kind: SymbolKind(\n+                            Enum,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -306,7 +363,9 @@ fn very_obsolete() {}\n                         label: \"X\",\n                         navigation_range: 169..170,\n                         node_range: 169..170,\n-                        kind: Variant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -317,7 +376,9 @@ fn very_obsolete() {}\n                         label: \"Y\",\n                         navigation_range: 172..173,\n                         node_range: 172..178,\n-                        kind: Variant,\n+                        kind: SymbolKind(\n+                            Variant,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -326,7 +387,9 @@ fn very_obsolete() {}\n                         label: \"T\",\n                         navigation_range: 186..187,\n                         node_range: 181..193,\n-                        kind: TypeAlias,\n+                        kind: SymbolKind(\n+                            TypeAlias,\n+                        ),\n                         detail: Some(\n                             \"()\",\n                         ),\n@@ -337,7 +400,9 @@ fn very_obsolete() {}\n                         label: \"S\",\n                         navigation_range: 201..202,\n                         node_range: 194..213,\n-                        kind: Static,\n+                        kind: SymbolKind(\n+                            Static,\n+                        ),\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -348,7 +413,9 @@ fn very_obsolete() {}\n                         label: \"C\",\n                         navigation_range: 220..221,\n                         node_range: 214..232,\n-                        kind: Const,\n+                        kind: SymbolKind(\n+                            Const,\n+                        ),\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -359,7 +426,9 @@ fn very_obsolete() {}\n                         label: \"impl E\",\n                         navigation_range: 239..240,\n                         node_range: 234..243,\n-                        kind: Impl,\n+                        kind: SymbolKind(\n+                            Impl,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -368,7 +437,9 @@ fn very_obsolete() {}\n                         label: \"impl fmt::Debug for E\",\n                         navigation_range: 265..266,\n                         node_range: 245..269,\n-                        kind: Impl,\n+                        kind: SymbolKind(\n+                            Impl,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -377,7 +448,9 @@ fn very_obsolete() {}\n                         label: \"mc\",\n                         navigation_range: 284..286,\n                         node_range: 271..303,\n-                        kind: Macro,\n+                        kind: SymbolKind(\n+                            Macro,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -386,7 +459,9 @@ fn very_obsolete() {}\n                         label: \"mcexp\",\n                         navigation_range: 334..339,\n                         node_range: 305..356,\n-                        kind: Macro,\n+                        kind: SymbolKind(\n+                            Macro,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -395,7 +470,9 @@ fn very_obsolete() {}\n                         label: \"mcexp\",\n                         navigation_range: 387..392,\n                         node_range: 358..409,\n-                        kind: Macro,\n+                        kind: SymbolKind(\n+                            Macro,\n+                        ),\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -404,7 +481,9 @@ fn very_obsolete() {}\n                         label: \"obsolete\",\n                         navigation_range: 428..436,\n                         node_range: 411..441,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -415,12 +494,75 @@ fn very_obsolete() {}\n                         label: \"very_obsolete\",\n                         navigation_range: 481..494,\n                         node_range: 443..499,\n-                        kind: Function,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n                         detail: Some(\n                             \"fn()\",\n                         ),\n                         deprecated: true,\n                     },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"Some region name\",\n+                        navigation_range: 501..528,\n+                        node_range: 501..528,\n+                        kind: Region,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: None,\n+                        label: \"m\",\n+                        navigation_range: 568..569,\n+                        node_range: 543..606,\n+                        kind: SymbolKind(\n+                            Module,\n+                        ),\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: Some(\n+                            20,\n+                        ),\n+                        label: \"dontpanic\",\n+                        navigation_range: 543..563,\n+                        node_range: 543..563,\n+                        kind: Region,\n+                        detail: None,\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: Some(\n+                            20,\n+                        ),\n+                        label: \"f\",\n+                        navigation_range: 575..576,\n+                        node_range: 572..581,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n+                        detail: Some(\n+                            \"fn()\",\n+                        ),\n+                        deprecated: false,\n+                    },\n+                    StructureNode {\n+                        parent: Some(\n+                            20,\n+                        ),\n+                        label: \"g\",\n+                        navigation_range: 598..599,\n+                        node_range: 582..604,\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n+                        detail: Some(\n+                            \"fn()\",\n+                        ),\n+                        deprecated: false,\n+                    },\n                 ]\n             \"#]],\n         );"}, {"sha": "e8cafba433e9a44ce61bc384730fa925c03b8186", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=cec676d08236076a48a9fdae28cf0e716ae99b16", "patch": "@@ -135,6 +135,12 @@ fn line_index(db: &dyn LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n     Arc::new(LineIndex::new(&*text))\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub enum StructureNodeKind {\n+    SymbolKind(SymbolKind),\n+    Region,\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum SymbolKind {\n     Const,"}, {"sha": "ff1929d58f83cda412e1584368f34c99a3a11483", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=cec676d08236076a48a9fdae28cf0e716ae99b16", "patch": "@@ -289,7 +289,7 @@ pub(crate) fn handle_document_symbol(\n         let doc_symbol = lsp_types::DocumentSymbol {\n             name: symbol.label,\n             detail: symbol.detail,\n-            kind: to_proto::symbol_kind(symbol.kind),\n+            kind: to_proto::structure_node_kind(symbol.kind),\n             tags: Some(tags),\n             deprecated: Some(symbol.deprecated),\n             range: to_proto::range(&line_index, symbol.node_range),"}, {"sha": "ab742a17ceb2d6075851f14b786edba4aa498555", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec676d08236076a48a9fdae28cf0e716ae99b16/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=cec676d08236076a48a9fdae28cf0e716ae99b16", "patch": "@@ -11,7 +11,7 @@ use ide::{\n     Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable, Severity, SourceChange,\n     TextEdit, TextRange, TextSize,\n };\n-use ide_db::SymbolKind;\n+use ide_db::{StructureNodeKind, SymbolKind};\n use itertools::Itertools;\n use serde_json::to_value;\n \n@@ -63,6 +63,13 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n     }\n }\n \n+pub(crate) fn structure_node_kind(kind: StructureNodeKind) -> lsp_types::SymbolKind {\n+    match kind {\n+        StructureNodeKind::SymbolKind(symbol) => symbol_kind(symbol),\n+        StructureNodeKind::Region => lsp_types::SymbolKind::Namespace,\n+    }\n+}\n+\n pub(crate) fn document_highlight_kind(\n     reference_access: ReferenceAccess,\n ) -> lsp_types::DocumentHighlightKind {"}]}