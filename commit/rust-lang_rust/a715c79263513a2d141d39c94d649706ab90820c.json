{"sha": "a715c79263513a2d141d39c94d649706ab90820c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MTVjNzkyNjM1MTNhMmQxNDFkMzljOTRkNjQ5NzA2YWI5MDgyMGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-21T19:24:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-21T19:24:46Z"}, "message": "Rustup to rustc 1.35.0-nightly (82e2f3ec2 2019-03-20)", "tree": {"sha": "f7ee419659963515ca8215a342075fb818420e4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7ee419659963515ca8215a342075fb818420e4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a715c79263513a2d141d39c94d649706ab90820c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a715c79263513a2d141d39c94d649706ab90820c", "html_url": "https://github.com/rust-lang/rust/commit/a715c79263513a2d141d39c94d649706ab90820c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a715c79263513a2d141d39c94d649706ab90820c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788d8cec93461833186d9d838df85687adfd4f2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/788d8cec93461833186d9d838df85687adfd4f2d", "html_url": "https://github.com/rust-lang/rust/commit/788d8cec93461833186d9d838df85687adfd4f2d"}], "stats": {"total": 164, "additions": 141, "deletions": 23}, "files": [{"sha": "3dc134521173cf36623a2c089e4c034fb7cb1a21", "filename": "example/alloc_example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a715c79263513a2d141d39c94d649706ab90820c/example%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a715c79263513a2d141d39c94d649706ab90820c/example%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_example.rs?ref=a715c79263513a2d141d39c94d649706ab90820c", "patch": "@@ -1,10 +1,10 @@\n-#![feature(start, box_syntax, alloc_system, core_intrinsics, alloc, alloc_error_handler)]\n+#![feature(start, box_syntax, alloc_system, core_intrinsics, alloc, alloc_prelude, alloc_error_handler)]\n #![no_std]\n \n extern crate alloc;\n extern crate alloc_system;\n \n-use alloc::prelude::*;\n+use alloc::prelude::v1::*;\n \n use alloc_system::System;\n "}, {"sha": "016667bf8810905ee647ebf3a19cc2d4f1935694", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 130, "deletions": 12, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/a715c79263513a2d141d39c94d649706ab90820c/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/a715c79263513a2d141d39c94d649706ab90820c/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=a715c79263513a2d141d39c94d649706ab90820c", "patch": "@@ -54,14 +54,16 @@ index d0ee5fa..d02c454 100644\n  macro_rules! ptr_width {\n      () => { 2 }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index 91161ca..759497f 100644\n+index ae6d807..4414e07 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n-@@ -518,80 +469,6 @@ impl Duration {\n-         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n+@@ -534,198 +534,6 @@ impl Duration {\n+     pub const fn as_secs_f32(&self) -> f32 {\n+         (self.secs as f32) + (self.nanos as f32) / (NANOS_PER_SEC as f32)\n      }\n- \n--    /// Creates a new `Duration` from the specified number of seconds.\n+-\n+-    /// Creates a new `Duration` from the specified number of seconds represented\n+-    /// as `f64`.\n -    ///\n -    /// # Panics\n -    /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n@@ -71,12 +73,14 @@ index 91161ca..759497f 100644\n -    /// #![feature(duration_float)]\n -    /// use std::time::Duration;\n -    ///\n--    /// let dur = Duration::from_float_secs(2.7);\n+-    /// let dur = Duration::from_secs_f64(2.7);\n -    /// assert_eq!(dur, Duration::new(2, 700_000_000));\n -    /// ```\n -    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n -    #[inline]\n--    pub fn from_float_secs(secs: f64) -> Duration {\n+-    pub fn from_secs_f64(secs: f64) -> Duration {\n+-        const MAX_NANOS_F64: f64 =\n+-            ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n -        let nanos =  secs * (NANOS_PER_SEC as f64);\n -        if !nanos.is_finite() {\n -            panic!(\"got non-finite value when converting float to duration\");\n@@ -94,6 +98,42 @@ index 91161ca..759497f 100644\n -        }\n -    }\n -\n+-    /// Creates a new `Duration` from the specified number of seconds represented\n+-    /// as `f32`.\n+-    ///\n+-    /// # Panics\n+-    /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n+-    ///\n+-    /// # Examples\n+-    /// ```\n+-    /// #![feature(duration_float)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let dur = Duration::from_secs_f32(2.7);\n+-    /// assert_eq!(dur, Duration::new(2, 700_000_000));\n+-    /// ```\n+-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+-    #[inline]\n+-    pub fn from_secs_f32(secs: f32) -> Duration {\n+-        const MAX_NANOS_F32: f32 =\n+-            ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f32;\n+-        let nanos =  secs * (NANOS_PER_SEC as f32);\n+-        if !nanos.is_finite() {\n+-            panic!(\"got non-finite value when converting float to duration\");\n+-        }\n+-        if nanos >= MAX_NANOS_F32 {\n+-            panic!(\"overflow when converting float to duration\");\n+-        }\n+-        if nanos < 0.0 {\n+-            panic!(\"underflow when converting float to duration\");\n+-        }\n+-        let nanos =  nanos as u128;\n+-        Duration {\n+-            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+-            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+-        }\n+-    }\n+-\n -    /// Multiplies `Duration` by `f64`.\n -    ///\n -    /// # Panics\n@@ -111,7 +151,29 @@ index 91161ca..759497f 100644\n -    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n -    #[inline]\n -    pub fn mul_f64(self, rhs: f64) -> Duration {\n--        Duration::from_float_secs(rhs * self.as_float_secs())\n+-        Duration::from_secs_f64(rhs * self.as_secs_f64())\n+-    }\n+-\n+-    /// Multiplies `Duration` by `f32`.\n+-    ///\n+-    /// # Panics\n+-    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+-    ///\n+-    /// # Examples\n+-    /// ```\n+-    /// #![feature(duration_float)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let dur = Duration::new(2, 700_000_000);\n+-    /// // note that due to rounding errors result is slightly different\n+-    /// // from 8.478 and 847800.0\n+-    /// assert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_640));\n+-    /// assert_eq!(dur.mul_f32(3.14e5), Duration::new(847799, 969_120_256));\n+-    /// ```\n+-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+-    #[inline]\n+-    pub fn mul_f32(self, rhs: f32) -> Duration {\n+-        Duration::from_secs_f32(rhs * self.as_secs_f32())\n -    }\n -\n -    /// Divide `Duration` by `f64`.\n@@ -132,12 +194,68 @@ index 91161ca..759497f 100644\n -    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n -    #[inline]\n -    pub fn div_f64(self, rhs: f64) -> Duration {\n--        Duration::from_float_secs(self.as_float_secs() / rhs)\n+-        Duration::from_secs_f64(self.as_secs_f64() / rhs)\n+-    }\n+-\n+-    /// Divide `Duration` by `f32`.\n+-    ///\n+-    /// # Panics\n+-    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+-    ///\n+-    /// # Examples\n+-    /// ```\n+-    /// #![feature(duration_float)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let dur = Duration::new(2, 700_000_000);\n+-    /// // note that due to rounding errors result is slightly\n+-    /// // different from 0.859_872_611\n+-    /// assert_eq!(dur.div_f32(3.14), Duration::new(0, 859_872_576));\n+-    /// // note that truncation is used, not rounding\n+-    /// assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_598));\n+-    /// ```\n+-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+-    #[inline]\n+-    pub fn div_f32(self, rhs: f32) -> Duration {\n+-        Duration::from_secs_f32(self.as_secs_f32() / rhs)\n+-    }\n+-\n+-    /// Divide `Duration` by `Duration` and return `f64`.\n+-    ///\n+-    /// # Examples\n+-    /// ```\n+-    /// #![feature(duration_float)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let dur1 = Duration::new(2, 700_000_000);\n+-    /// let dur2 = Duration::new(5, 400_000_000);\n+-    /// assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n+-    /// ```\n+-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+-    #[inline]\n+-    pub fn div_duration_f64(self, rhs: Duration) -> f64 {\n+-        self.as_secs_f64() / rhs.as_secs_f64()\n -    }\n -\n-     /// Divide `Duration` by `Duration` and return `f64`.\n-     ///\n-     /// # Examples\n+-    /// Divide `Duration` by `Duration` and return `f32`.\n+-    ///\n+-    /// # Examples\n+-    /// ```\n+-    /// #![feature(duration_float)]\n+-    /// use std::time::Duration;\n+-    ///\n+-    /// let dur1 = Duration::new(2, 700_000_000);\n+-    /// let dur2 = Duration::new(5, 400_000_000);\n+-    /// assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n+-    /// ```\n+-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+-    #[inline]\n+-    pub fn div_duration_f32(self, rhs: Duration) -> f32 {\n+-        self.as_secs_f32() / rhs.as_secs_f32()\n+-    }\n+ }\n+ \n+ #[stable(feature = \"duration\", since = \"1.3.0\")]\n diff --git a/src/libstd/num.rs b/src/libstd/num.rs\n index 828d572..bc04fb1 100644\n --- a/src/libstd/num.rs"}, {"sha": "2768e9fea5b65c814bf04d5045aaf12b6d3ab9a8", "filename": "src/constant.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a715c79263513a2d141d39c94d649706ab90820c/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a715c79263513a2d141d39c94d649706ab90820c/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a715c79263513a2d141d39c94d649706ab90820c", "patch": "@@ -3,7 +3,7 @@ use std::borrow::Cow;\n use rustc::mir::interpret::{\n     read_target_uint, AllocId, AllocKind, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n-use rustc::ty::{Const, LazyConst};\n+use rustc::ty::Const;\n use rustc_mir::interpret::{\n     EvalContext, ImmTy, MPlaceTy, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer,\n     StackPopCleanup,\n@@ -76,26 +76,26 @@ pub fn trans_constant<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n-    let const_ = fx.monomorphize(&constant.literal);\n-    let const_ = force_eval_const(fx, const_);\n+    let const_ = force_eval_const(fx, &constant.literal);\n     trans_const_value(fx, const_)\n }\n \n pub fn force_eval_const<'a, 'tcx: 'a>(\n-    fx: &FunctionCx<'a, 'tcx, impl Backend>,\n-    const_: &'tcx LazyConst<'tcx>,\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    const_: &'tcx Const,\n ) -> Const<'tcx> {\n-    match *const_ {\n-        LazyConst::Unevaluated(def_id, ref substs) => {\n+    match const_.val {\n+        ConstValue::Unevaluated(def_id, ref substs) => {\n             let param_env = ParamEnv::reveal_all();\n+            let substs = fx.monomorphize(substs);\n             let instance = Instance::resolve(fx.tcx, param_env, def_id, substs).unwrap();\n             let cid = GlobalId {\n                 instance,\n                 promoted: None,\n             };\n             fx.tcx.const_eval(param_env.and(cid)).unwrap()\n         }\n-        LazyConst::Evaluated(const_) => const_,\n+        _ => *fx.monomorphize(&const_),\n     }\n }\n \n@@ -152,7 +152,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n                 span: DUMMY_SP,\n                 ty: const_.ty,\n                 user_ty: None,\n-                literal: fx.tcx.mk_lazy_const(LazyConst::Evaluated(const_)),\n+                literal: fx.tcx.mk_const(const_),\n             })),\n             None,\n         )?;"}]}