{"sha": "145e6204bcca9c085fc6aa155f16a89c3a601eb0", "node_id": "C_kwDOAAsO6NoAKDE0NWU2MjA0YmNjYTljMDg1ZmM2YWExNTVmMTZhODljM2E2MDFlYjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T18:59:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T18:59:20Z"}, "message": "Rollup merge of #108947 - compiler-errors:ct-infer-no-shapeshifting, r=BoxyUwU\n\nDon't even try to combine consts with incompatible types\n\n~I left a more detailed explanation for why this fixes this issue in the UI test, but in general, we should not try to unify const infer vars and rigid consts if they have incompatible types. That's because we don't want something like a `ConstArgHasType` predicate to suddenly go from passing to failing, or vice versa, due to a shallow resolve.~\n\n1. Use the `type_of` for a parameter in `try_eval_lit_or_param`, instead of the \"expected\" type from a `WithOptConstParam` def id.\n2. Don't combine consts that have incompatible types.\n\nFixes #108781", "tree": {"sha": "991b68c802e6c4d2e874668ed992680cc2392721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991b68c802e6c4d2e874668ed992680cc2392721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/145e6204bcca9c085fc6aa155f16a89c3a601eb0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkC34ICRBK7hj4Ov3rIwAA1kkIAGLZhSM6W+OUUa9b4NR7tn7f\nZGzOemu/6B4YctSNUU+HGAiy52X7XBUoLgLc+nEAz5RH1Yh0+pjT0x/zWNybdwT8\n4aInnxxlINCpNL9GxCWmTorSkdR2Cw6HjjGCJhg62Jtno2S+yoDkMovWdDrO1GRz\n50PjNypqC+glIHWtaiAnogJA1giumfbRowHk22D7jfNMfPTxWeCQabqRXA07egv3\ngVnBylfE7zIZiLbnzPA/h3Qu10h6L/vnDrHIWgvckD0Sh5QEehTO04V4VK921SKa\n9QSU3Jtg6Lz6ndRcsEzKOEXlKwA4aRhwsZd3dX5OkmPPlUi31dKgEJUqMmIawDs=\n=ZfGv\n-----END PGP SIGNATURE-----\n", "payload": "tree 991b68c802e6c4d2e874668ed992680cc2392721\nparent 772b1ce74524854b290191768373c700f7d38c75\nparent f7146136d79a4fb78c482797e50724bb4483a337\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678474760 +0100\ncommitter GitHub <noreply@github.com> 1678474760 +0100\n\nRollup merge of #108947 - compiler-errors:ct-infer-no-shapeshifting, r=BoxyUwU\n\nDon't even try to combine consts with incompatible types\n\n~I left a more detailed explanation for why this fixes this issue in the UI test, but in general, we should not try to unify const infer vars and rigid consts if they have incompatible types. That's because we don't want something like a `ConstArgHasType` predicate to suddenly go from passing to failing, or vice versa, due to a shallow resolve.~\n\n1. Use the `type_of` for a parameter in `try_eval_lit_or_param`, instead of the \"expected\" type from a `WithOptConstParam` def id.\n2. Don't combine consts that have incompatible types.\n\nFixes #108781\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/145e6204bcca9c085fc6aa155f16a89c3a601eb0", "html_url": "https://github.com/rust-lang/rust/commit/145e6204bcca9c085fc6aa155f16a89c3a601eb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/145e6204bcca9c085fc6aa155f16a89c3a601eb0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "772b1ce74524854b290191768373c700f7d38c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/772b1ce74524854b290191768373c700f7d38c75", "html_url": "https://github.com/rust-lang/rust/commit/772b1ce74524854b290191768373c700f7d38c75"}, {"sha": "f7146136d79a4fb78c482797e50724bb4483a337", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7146136d79a4fb78c482797e50724bb4483a337", "html_url": "https://github.com/rust-lang/rust/commit/f7146136d79a4fb78c482797e50724bb4483a337"}], "stats": {"total": 108, "additions": 74, "deletions": 34}, "files": [{"sha": "a2332797e8680d6c810ce960c4e5ef78809cd218", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -34,7 +34,6 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::infer::canonical::OriginalQueryValues;\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::traits::query::NoSolution;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n@@ -171,9 +170,9 @@ impl<'tcx> InferCtxt<'tcx> {\n         //\n         // This probe is probably not strictly necessary but it seems better to be safe and not accidentally find\n         // ourselves with a check to find bugs being required for code to compile because it made inference progress.\n-        self.probe(|_| {\n+        let compatible_types = self.probe(|_| {\n             if a.ty() == b.ty() {\n-                return;\n+                return Ok(());\n             }\n \n             // We don't have access to trait solving machinery in `rustc_infer` so the logic for determining if the\n@@ -183,15 +182,24 @@ impl<'tcx> InferCtxt<'tcx> {\n                 (relation.param_env(), a.ty(), b.ty()),\n                 &mut OriginalQueryValues::default(),\n             );\n-\n-            if let Err(NoSolution) = self.tcx.check_tys_might_be_eq(canonical) {\n+            self.tcx.check_tys_might_be_eq(canonical).map_err(|_| {\n                 self.tcx.sess.delay_span_bug(\n                     DUMMY_SP,\n                     &format!(\"cannot relate consts of different types (a={:?}, b={:?})\", a, b,),\n-                );\n-            }\n+                )\n+            })\n         });\n \n+        // If the consts have differing types, just bail with a const error with\n+        // the expected const's type. Specifically, we don't want const infer vars\n+        // to do any type shapeshifting before and after resolution.\n+        if let Err(guar) = compatible_types {\n+            return Ok(self.tcx.const_error_with_guaranteed(\n+                if relation.a_is_expected() { a.ty() } else { b.ty() },\n+                guar,\n+            ));\n+        }\n+\n         match (a.kind(), b.kind()) {\n             (\n                 ty::ConstKind::Infer(InferConst::Var(a_vid)),"}, {"sha": "42101f6b93152a446030f803285b5c29f101f38d", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -135,6 +135,9 @@ impl<'tcx> Const<'tcx> {\n                 _,\n                 &hir::Path { res: Res::Def(DefKind::ConstParam, def_id), .. },\n             )) => {\n+                // Use the type from the param's definition, since we can resolve it,\n+                // not the expected parameter type from WithOptConstParam.\n+                let param_ty = tcx.type_of(def_id).subst_identity();\n                 match tcx.named_bound_var(expr.hir_id) {\n                     Some(rbv::ResolvedArg::EarlyBound(_)) => {\n                         // Find the name and index of the const parameter by indexing the generics of\n@@ -143,14 +146,14 @@ impl<'tcx> Const<'tcx> {\n                         let generics = tcx.generics_of(item_def_id);\n                         let index = generics.param_def_id_to_index[&def_id];\n                         let name = tcx.item_name(def_id);\n-                        Some(tcx.mk_const(ty::ParamConst::new(index, name), ty))\n+                        Some(tcx.mk_const(ty::ParamConst::new(index, name), param_ty))\n                     }\n                     Some(rbv::ResolvedArg::LateBound(debruijn, index, _)) => Some(tcx.mk_const(\n                         ty::ConstKind::Bound(debruijn, ty::BoundVar::from_u32(index)),\n-                        ty,\n+                        param_ty,\n                     )),\n                     Some(rbv::ResolvedArg::Error(guar)) => {\n-                        Some(tcx.const_error_with_guaranteed(ty, guar))\n+                        Some(tcx.const_error_with_guaranteed(param_ty, guar))\n                     }\n                     arg => bug!(\"unexpected bound var resolution for {:?}: {arg:?}\", expr.hir_id),\n                 }"}, {"sha": "fcfb60b26030f4d5696d8bce23aa16d543577d3e", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -99,10 +99,10 @@ pub fn translate_substs<'tcx>(\n             }\n \n             fulfill_implication(infcx, param_env, source_trait_ref, target_impl).unwrap_or_else(\n-                |_| {\n+                |()| {\n                     bug!(\n-                        \"When translating substitutions for specialization, the expected \\\n-                         specialization failed to hold\"\n+                        \"When translating substitutions from {source_impl:?} to {target_impl:?}, \\\n+                        the expected specialization failed to hold\"\n                     )\n                 },\n             )"}, {"sha": "daa13277be0a08a32d3237ad781733a36a10f197", "filename": "tests/ui/const-generics/type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fconst-generics%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fconst-generics%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_mismatch.rs?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -1,5 +1,6 @@\n fn foo<const N: usize>() -> [u8; N] {\n     bar::<N>() //~ ERROR mismatched types\n+    //~^ ERROR the constant `N` is not of type `u8`\n }\n \n fn bar<const N: u8>() -> [u8; N] {}"}, {"sha": "6d8955e411ec39eaf29df0ca33d8c0b8355baf82", "filename": "tests/ui/const-generics/type_mismatch.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -1,23 +1,35 @@\n+error: the constant `N` is not of type `u8`\n+  --> $DIR/type_mismatch.rs:2:5\n+   |\n+LL |     bar::<N>()\n+   |     ^^^^^^^^\n+   |\n+note: required by a bound in `bar`\n+  --> $DIR/type_mismatch.rs:6:8\n+   |\n+LL | fn bar<const N: u8>() -> [u8; N] {}\n+   |        ^^^^^^^^^^^ required by this bound in `bar`\n+\n error[E0308]: mismatched types\n   --> $DIR/type_mismatch.rs:2:11\n    |\n LL |     bar::<N>()\n    |           ^ expected `u8`, found `usize`\n \n error[E0308]: mismatched types\n-  --> $DIR/type_mismatch.rs:5:26\n+  --> $DIR/type_mismatch.rs:6:26\n    |\n LL | fn bar<const N: u8>() -> [u8; N] {}\n    |    ---                   ^^^^^^^ expected `[u8; N]`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n error[E0308]: mismatched types\n-  --> $DIR/type_mismatch.rs:5:31\n+  --> $DIR/type_mismatch.rs:6:31\n    |\n LL | fn bar<const N: u8>() -> [u8; N] {}\n    |                               ^ expected `usize`, found `u8`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "917abaed15e06e741caa2ec38b389eda67cfa18c", "filename": "tests/ui/const-generics/type_not_in_scope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -6,6 +6,5 @@ impl X {\n }\n fn getn<const N: cfg_attr>() -> [u8; N] {}\n //~^ ERROR expected type, found built-in attribute `cfg_attr`\n-//~| ERROR mismatched types\n \n fn main() {}"}, {"sha": "5eb81ca0522412278bad70464974644eab16782b", "filename": "tests/ui/const-generics/type_not_in_scope.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -10,15 +10,7 @@ error[E0573]: expected type, found built-in attribute `cfg_attr`\n LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n    |                  ^^^^^^^^ not a type\n \n-error[E0308]: mismatched types\n-  --> $DIR/type_not_in_scope.rs:7:33\n-   |\n-LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n-   |    ----                         ^^^^^^^ expected `[u8; N]`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0412, E0573.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0412, E0573.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "582b480aa25be35832fb29bc8f1a0c43efc5dfbd", "filename": "tests/ui/specialization/min_specialization/bad-const-wf-doesnt-specialize.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.rs?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -0,0 +1,12 @@\n+#![feature(min_specialization)]\n+\n+// An impl that has an erroneous const substitution should not specialize one\n+// that is well-formed.\n+\n+struct S<const L: usize>;\n+\n+impl<const N: i32> Copy for S<N> {}\n+impl<const M: usize> Copy for S<M> {}\n+//~^ ERROR conflicting implementations of trait `Copy` for type `S<_>`\n+\n+fn main() {}"}, {"sha": "a3906a9a22fecee28315ba2a9aa6c11855764fff", "filename": "tests/ui/specialization/min_specialization/bad-const-wf-doesnt-specialize.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fbad-const-wf-doesnt-specialize.stderr?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `Copy` for type `S<_>`\n+  --> $DIR/bad-const-wf-doesnt-specialize.rs:9:1\n+   |\n+LL | impl<const N: i32> Copy for S<N> {}\n+   | -------------------------------- first implementation here\n+LL | impl<const M: usize> Copy for S<M> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `S<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "2b966609108bf97bea60e3ed87d551c150641cf8", "filename": "tests/ui/transmutability/issue-101739-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fissue-101739-1.rs?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -6,7 +6,7 @@ mod assert {\n     pub fn is_transmutable<Src, Context, const ASSUME_ALIGNMENT: bool>()\n     where\n         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>, //~ ERROR cannot find type `Dst` in this scope\n-        //~^ ERROR mismatched types\n+        //~^ the constant `ASSUME_ALIGNMENT` is not of type `Assume`\n     {\n     }\n }"}, {"sha": "f0fa93722b89bf48960026be3df02a186bcdf4f6", "filename": "tests/ui/transmutability/issue-101739-1.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/145e6204bcca9c085fc6aa155f16a89c3a601eb0/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fissue-101739-1.stderr?ref=145e6204bcca9c085fc6aa155f16a89c3a601eb0", "patch": "@@ -4,13 +4,15 @@ error[E0412]: cannot find type `Dst` in this scope\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n    |         ^^^ not found in this scope\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-101739-1.rs:8:50\n+error: the constant `ASSUME_ALIGNMENT` is not of type `Assume`\n+  --> $DIR/issue-101739-1.rs:8:14\n    |\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n-   |                                                  ^^^^^^^^^^^^^^^^ expected `Assume`, found `bool`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: required by a bound in `BikeshedIntrinsicFrom`\n+  --> $SRC_DIR/core/src/mem/transmutability.rs:LL:COL\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0412.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0412`."}]}