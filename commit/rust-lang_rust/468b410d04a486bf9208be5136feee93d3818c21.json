{"sha": "468b410d04a486bf9208be5136feee93d3818c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OGI0MTBkMDRhNDg2YmY5MjA4YmU1MTM2ZmVlZTkzZDM4MThjMjE=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2015-09-06T19:03:09Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2015-09-06T19:03:09Z"}, "message": "de-closured the item name getter", "tree": {"sha": "cebed1afb0793494d7abf5dc0cdc0af9809dda56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cebed1afb0793494d7abf5dc0cdc0af9809dda56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/468b410d04a486bf9208be5136feee93d3818c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/468b410d04a486bf9208be5136feee93d3818c21", "html_url": "https://github.com/rust-lang/rust/commit/468b410d04a486bf9208be5136feee93d3818c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/468b410d04a486bf9208be5136feee93d3818c21/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e6099ad7eb145c8fb2704d267eeaa3fdba2a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e6099ad7eb145c8fb2704d267eeaa3fdba2a2f", "html_url": "https://github.com/rust-lang/rust/commit/87e6099ad7eb145c8fb2704d267eeaa3fdba2a2f"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "45b9c844af342b4b2cd7eb8cb9c060a9da074923", "filename": "src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/468b410d04a486bf9208be5136feee93d3818c21/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468b410d04a486bf9208be5136feee93d3818c21/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=468b410d04a486bf9208be5136feee93d3818c21", "patch": "@@ -5,7 +5,7 @@ use syntax::codemap::{Span, Spanned};\n use rustc::middle::def_id::DefId;\n use rustc::middle::ty::{self, MethodTraitItemId, ImplOrTraitItemId};\n \n-use utils::{snippet, span_lint, walk_ptrs_ty, with_item_name};\n+use utils::{get_item_name, snippet, span_lint, walk_ptrs_ty};\n \n declare_lint!(pub LEN_ZERO, Warn,\n               \"checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` \\\n@@ -91,8 +91,8 @@ fn is_self_sig(sig: &MethodSig) -> bool {\n \n fn check_cmp(cx: &Context, span: Span, left: &Expr, right: &Expr, op: &str) {    \n     // check if we are in an is_empty() method \n-    if let Some(true) = with_item_name(cx, left, |n| n == \"is_empty\") {\n-        return;\n+    if let Some(name) = get_item_name(cx, left) {\n+        if name == \"is_empty\" { return; }\n     }\n     match (&left.node, &right.node) {\n         (&ExprLit(ref lit), &ExprMethodCall(ref method, _, ref args)) =>"}, {"sha": "8891b000b59237e4a23bbec4bf89e502562a1f10", "filename": "src/misc.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/468b410d04a486bf9208be5136feee93d3818c21/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468b410d04a486bf9208be5136feee93d3818c21/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=468b410d04a486bf9208be5136feee93d3818c21", "patch": "@@ -7,7 +7,7 @@ use syntax::codemap::{Span, Spanned};\n use rustc_front::visit::FnKind;\n use rustc::middle::ty;\n \n-use utils::{match_path, snippet, span_lint, walk_ptrs_ty, with_item_name};\n+use utils::{get_item_name, match_path, snippet, span_lint, walk_ptrs_ty};\n use consts::constant;\n \n declare_lint!(pub TOPLEVEL_REF_ARG, Warn,\n@@ -92,11 +92,12 @@ impl LintPass for FloatCmp {\n                         false, |c| c.0.as_float().map_or(false, |f| f == 0.0)) {\n                     return;\n                 }\n-                if let Some(true) = with_item_name(cx, expr, |name|\n-                        name == \"eq\" || name == \"ne\" ||\n-                        name.as_str().starts_with(\"eq_\") ||\n-                        name.as_str().ends_with(\"_eq\")) {\n-                    return;\n+                if let Some(name) = get_item_name(cx, expr) {\n+                    if name == \"eq\" || name == \"ne\" ||\n+                            name.as_str().starts_with(\"eq_\") ||\n+                            name.as_str().ends_with(\"_eq\") {\n+                        return;\n+                    }\n                 }\n                 span_lint(cx, FLOAT_CMP, expr.span, &format!(\n                     \"{}-comparison of f32 or f64 detected. Consider changing this to \\"}, {"sha": "d6e529048c9b62a717ff7099fea8dade1e7c1276", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/468b410d04a486bf9208be5136feee93d3818c21/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468b410d04a486bf9208be5136feee93d3818c21/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=468b410d04a486bf9208be5136feee93d3818c21", "patch": "@@ -100,14 +100,14 @@ pub fn match_path(path: &Path, segments: &[&str]) -> bool {\n         |(a, b)| &a.identifier.name == b)\n }\n \n-pub fn with_item_name<T, F>(cx: &Context, expr: &Expr, f: F) -> Option<T>\n-where F: FnOnce(Name) -> T {\n+/// get the name of the item the expression is in, if available\n+pub fn get_item_name(cx: &Context, expr: &Expr) -> Option<Name> {\n     let parent_id = cx.tcx.map.get_parent(expr.id);\n     match cx.tcx.map.find(parent_id) {\n         Some(NodeItem(&Item{ ref ident, .. })) |\n         Some(NodeTraitItem(&TraitItem{ id: _, ref ident, .. })) |\n         Some(NodeImplItem(&ImplItem{ id: _, ref ident, .. })) => {\n-            Some(f(ident.name))\n+            Some(ident.name)\n         },\n         _ => None,\n     }"}]}