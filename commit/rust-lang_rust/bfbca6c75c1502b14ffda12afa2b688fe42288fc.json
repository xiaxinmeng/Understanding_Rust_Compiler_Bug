{"sha": "bfbca6c75c1502b14ffda12afa2b688fe42288fc", "node_id": "C_kwDOAAsO6NoAKGJmYmNhNmM3NWMxNTAyYjE0ZmZkYTEyYWZhMmI2ODhmZTQyMjg4ZmM", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-09T17:03:30Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-09T17:03:30Z"}, "message": "Completely remove tracking of references for now", "tree": {"sha": "7821af0d6d87c75d5314f2ecfd07c59b2d22014f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7821af0d6d87c75d5314f2ecfd07c59b2d22014f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfbca6c75c1502b14ffda12afa2b688fe42288fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbca6c75c1502b14ffda12afa2b688fe42288fc", "html_url": "https://github.com/rust-lang/rust/commit/bfbca6c75c1502b14ffda12afa2b688fe42288fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfbca6c75c1502b14ffda12afa2b688fe42288fc/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3997893ccb56dde4671cf7213faf9581714da402", "url": "https://api.github.com/repos/rust-lang/rust/commits/3997893ccb56dde4671cf7213faf9581714da402", "html_url": "https://github.com/rust-lang/rust/commit/3997893ccb56dde4671cf7213faf9581714da402"}], "stats": {"total": 941, "additions": 218, "deletions": 723}, "files": [{"sha": "f428cd5ee8223ef7082f7cc1f2a955e784f379a5", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 37, "deletions": 135, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -13,11 +13,10 @@\n //! can be registered. The [`State`] can be queried to retrieve the abstract value stored for a\n //! certain place by passing the map.\n //!\n-//! This framework is currently experimental. In particular, the features related to references are\n-//! currently guarded behind `-Zunsound-mir-opts`, because their correctness relies on Stacked\n-//! Borrows. Also, only places with scalar types can be tracked currently. This is because scalar\n-//! types are indivisible, which simplifies the current implementation. But this limitation could be\n-//! lifted in the future.\n+//! This framework is currently experimental. Originally, it supported shared references and enum\n+//! variants. However, it was discovered that both of these were unsound, and especially references\n+//! had subtle but serious issues. In the future, they could be added back in, but we should clarify\n+//! the rules for optimizations that rely on the aliasing model first.\n //!\n //!\n //! # Notes\n@@ -28,29 +27,17 @@\n //! - The assignment logic in `State::assign_place_idx` assumes that the places are non-overlapping,\n //! or identical. Note that this refers to place expressions, not memory locations.\n //!\n-//! - Since pointers (and mutable references) are not tracked, but can be used to change the\n-//! underlying values, we are conservative and immediately flood the referenced place upon creation\n-//! of the pointer. Also, we have to uphold the invariant that the place must stay that way as long\n-//! as this mutable access could exist. However...\n-//!\n-//! - Without an aliasing model like Stacked Borrows (i.e., `-Zunsound-mir-opts` is not given),\n-//! such mutable access is never revoked. And even shared references could be used to obtain the\n-//! address of a value an modify it. When not assuming Stacked Borrows, we prevent such places from\n-//! being tracked at all. This means that the analysis itself can assume that writes to a *tracked*\n-//! place always invalidate all other means of mutable access, regardless of the aliasing model.\n-//!\n-//! - Likewise, the analysis itself assumes that if the value of a *tracked* place behind a shared\n-//! reference is changed, the reference may not be used to access that value anymore. This is true\n-//! for all places if the referenced type is `Freeze` and we assume Stacked Borrows. If we are not\n-//! assuming Stacking Borrows (or if the referenced type could be `!Freeze`), we again prevent such\n-//! places from being tracked at all, making this assertion trivially true.\n+//! - Currently, places that have their reference taken cannot be tracked. Although this would be\n+//! possible, it has to rely on some aliasing model, which we are not ready to commit to yet.\n+//! Because of that, we can assume that the only way to change the value behind a tracked place is\n+//! by direct assignment.\n \n use std::fmt::{Debug, Formatter};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::tcx::PlaceTy;\n-use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n@@ -96,10 +83,7 @@ pub trait ValueAnalysis<'tcx> {\n                 state.flood_with(place.as_ref(), self.map(), Self::Value::bottom());\n             }\n             StatementKind::Retag(..) => {\n-                // A retag modifies the provenance of references. Currently references are only\n-                // tracked if `-Zunsound-mir-opts` is given, but this might change in the future.\n-                // However, it is still unclear how retags should be handled:\n-                // https://github.com/rust-lang/rust/pull/101168#discussion_r985304895\n+                // We don't track references.\n             }\n             StatementKind::Nop\n             | StatementKind::FakeRead(..)\n@@ -156,29 +140,23 @@ pub trait ValueAnalysis<'tcx> {\n         &self,\n         rvalue: &Rvalue<'tcx>,\n         state: &mut State<Self::Value>,\n-    ) -> ValueOrPlaceOrRef<Self::Value> {\n+    ) -> ValueOrPlace<Self::Value> {\n         self.super_rvalue(rvalue, state)\n     }\n \n     fn super_rvalue(\n         &self,\n         rvalue: &Rvalue<'tcx>,\n         state: &mut State<Self::Value>,\n-    ) -> ValueOrPlaceOrRef<Self::Value> {\n+    ) -> ValueOrPlace<Self::Value> {\n         match rvalue {\n-            Rvalue::Use(operand) => self.handle_operand(operand, state).into(),\n-            Rvalue::Ref(_, BorrowKind::Shared, place) => self\n-                .map()\n-                .find(place.as_ref())\n-                .map(ValueOrPlaceOrRef::Ref)\n-                .unwrap_or(ValueOrPlaceOrRef::top()),\n-            Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n-                // This is not a `&x` reference and could be used for modification.\n-                state.flood(place.as_ref(), self.map());\n-                ValueOrPlaceOrRef::top()\n-            }\n+            Rvalue::Use(operand) => self.handle_operand(operand, state),\n             Rvalue::CopyForDeref(place) => {\n-                self.handle_operand(&Operand::Copy(*place), state).into()\n+                self.handle_operand(&Operand::Copy(*place), state)\n+            }\n+            Rvalue::Ref(..) | Rvalue::AddressOf(..) => {\n+                // We don't track such places.\n+                ValueOrPlace::top()\n             }\n             Rvalue::Repeat(..)\n             | Rvalue::ThreadLocalRef(..)\n@@ -192,7 +170,7 @@ pub trait ValueAnalysis<'tcx> {\n             | Rvalue::Aggregate(..)\n             | Rvalue::ShallowInitBox(..) => {\n                 // No modification is possible through these r-values.\n-                ValueOrPlaceOrRef::top()\n+                ValueOrPlace::top()\n             }\n         }\n     }\n@@ -247,14 +225,13 @@ pub trait ValueAnalysis<'tcx> {\n         self.super_terminator(terminator, state)\n     }\n \n-    fn super_terminator(&self, terminator: &Terminator<'tcx>, state: &mut State<Self::Value>) {\n+    fn super_terminator(&self, terminator: &Terminator<'tcx>, _state: &mut State<Self::Value>) {\n         match &terminator.kind {\n             TerminatorKind::Call { .. } | TerminatorKind::InlineAsm { .. } => {\n                 // Effect is applied by `handle_call_return`.\n             }\n-            TerminatorKind::Drop { place, .. } => {\n-                // Place can still be accessed after drop, and drop has mutable access to it.\n-                state.flood(place.as_ref(), self.map());\n+            TerminatorKind::Drop { .. } => {\n+                // We don't track dropped places.\n             }\n             TerminatorKind::DropAndReplace { .. } | TerminatorKind::Yield { .. } => {\n                 // They would have an effect, but are not allowed in this phase.\n@@ -522,17 +499,17 @@ impl<V: Clone + HasTop + HasBottom> State<V> {\n         }\n     }\n \n-    pub fn assign(&mut self, target: PlaceRef<'_>, result: ValueOrPlaceOrRef<V>, map: &Map) {\n+    pub fn assign(&mut self, target: PlaceRef<'_>, result: ValueOrPlace<V>, map: &Map) {\n         if let Some(target) = map.find(target) {\n             self.assign_idx(target, result, map);\n         } else {\n             // We don't track this place nor any projections, assignment can be ignored.\n         }\n     }\n \n-    pub fn assign_idx(&mut self, target: PlaceIndex, result: ValueOrPlaceOrRef<V>, map: &Map) {\n+    pub fn assign_idx(&mut self, target: PlaceIndex, result: ValueOrPlace<V>, map: &Map) {\n         match result {\n-            ValueOrPlaceOrRef::Value(value) => {\n+            ValueOrPlace::Value(value) => {\n                 // First flood the target place in case we also track any projections (although\n                 // this scenario is currently not well-supported by the API).\n                 self.flood_idx(target, map);\n@@ -541,21 +518,7 @@ impl<V: Clone + HasTop + HasBottom> State<V> {\n                     values[value_index] = value;\n                 }\n             }\n-            ValueOrPlaceOrRef::Place(source) => self.assign_place_idx(target, source, map),\n-            ValueOrPlaceOrRef::Ref(source) => {\n-                let StateData::Reachable(values) = &mut self.0 else { return };\n-                if let Some(value_index) = map.places[target].value_index {\n-                    values[value_index] = V::top();\n-                }\n-                // Instead of tracking of *where* a reference points to (as in, which memory\n-                // location), we track *what* it points to (as in, what do we know about the\n-                // target). For an assignment `x = &y`, we thus copy the info of `y` to `*x`.\n-                if let Some(target_deref) = map.apply(target, TrackElem::Deref) {\n-                    // We know here that `*x` is `Freeze`, because we only track through\n-                    // dereferences if the target type is `Freeze`.\n-                    self.assign_place_idx(target_deref, source, map);\n-                }\n-            }\n+            ValueOrPlace::Place(source) => self.assign_place_idx(target, source, map),\n         }\n     }\n \n@@ -625,45 +588,27 @@ impl Map {\n         filter: impl FnMut(Ty<'tcx>) -> bool,\n     ) -> Self {\n         let mut map = Self::new();\n-\n-        // If `-Zunsound-mir-opts` is given, tracking through references, and tracking of places\n-        // that have their reference taken is allowed. This would be \"unsound\" in the sense that\n-        // the correctness relies on an aliasing model similar to Stacked Borrows (which is\n-        // not yet guaranteed).\n-        if tcx.sess.opts.unstable_opts.unsound_mir_opts {\n-            // We might want to add additional limitations. If a struct has 10 boxed fields of\n-            // itself, there will currently be `10.pow(max_derefs)` tracked places.\n-            map.register_with_filter(tcx, body, 2, filter, &FxHashSet::default());\n-        } else {\n-            map.register_with_filter(tcx, body, 0, filter, &escaped_places(body));\n-        }\n-\n+        map.register_with_filter(tcx, body, filter, &escaped_places(body));\n         debug!(\"registered {} places ({} nodes in total)\", map.value_count, map.places.len());\n         map\n     }\n \n-    /// Register all non-excluded places that pass the filter, up to a certain dereference depth.\n+    /// Register all non-excluded places that pass the filter.\n     fn register_with_filter<'tcx>(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n-        max_derefs: u32,\n         mut filter: impl FnMut(Ty<'tcx>) -> bool,\n         exclude: &FxHashSet<Place<'tcx>>,\n     ) {\n-        // This is used to tell whether a type is `Freeze`.\n-        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n-\n         let mut projection = Vec::new();\n         for (local, decl) in body.local_decls.iter_enumerated() {\n             self.register_with_filter_rec(\n                 tcx,\n-                max_derefs,\n                 local,\n                 &mut projection,\n                 decl.ty,\n                 &mut filter,\n-                param_env,\n                 exclude,\n             );\n         }\n@@ -672,12 +617,10 @@ impl Map {\n     fn register_with_filter_rec<'tcx>(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n-        max_derefs: u32,\n         local: Local,\n         projection: &mut Vec<PlaceElem<'tcx>>,\n         ty: Ty<'tcx>,\n         filter: &mut impl FnMut(Ty<'tcx>) -> bool,\n-        param_env: ty::ParamEnv<'tcx>,\n         exclude: &FxHashSet<Place<'tcx>>,\n     ) {\n         if exclude.contains(&Place { local, projection: tcx.intern_place_elems(projection) }) {\n@@ -689,34 +632,14 @@ impl Map {\n             // This might fail if `ty` is not scalar.\n             let _ = self.register_with_ty(local, projection, ty);\n         }\n-\n-        if max_derefs > 0 {\n-            if let Some(ty::TypeAndMut { ty: deref_ty, .. }) = ty.builtin_deref(false) {\n-                // Values behind references can only be tracked if the target is `Freeze`.\n-                if deref_ty.is_freeze(tcx, param_env) {\n-                    projection.push(PlaceElem::Deref);\n-                    self.register_with_filter_rec(\n-                        tcx,\n-                        max_derefs - 1,\n-                        local,\n-                        projection,\n-                        deref_ty,\n-                        filter,\n-                        param_env,\n-                        exclude,\n-                    );\n-                    projection.pop();\n-                }\n-            }\n-        }\n         iter_fields(ty, tcx, |variant, field, ty| {\n             if variant.is_some() {\n                 // Downcasts are currently not supported.\n                 return;\n             }\n             projection.push(PlaceElem::Field(field, ty));\n             self.register_with_filter_rec(\n-                tcx, max_derefs, local, projection, ty, filter, param_env, exclude,\n+                tcx, local, projection, ty, filter, exclude,\n             );\n             projection.pop();\n         });\n@@ -875,7 +798,7 @@ impl<'a> Iterator for Children<'a> {\n     }\n }\n \n-/// Used as the result of an operand.\n+/// Used as the result of an operand or r-value.\n pub enum ValueOrPlace<V> {\n     Value(V),\n     Place(PlaceIndex),\n@@ -887,34 +810,11 @@ impl<V: HasTop> ValueOrPlace<V> {\n     }\n }\n \n-/// Used as the result of an r-value.\n-pub enum ValueOrPlaceOrRef<V> {\n-    Value(V),\n-    Place(PlaceIndex),\n-    Ref(PlaceIndex),\n-}\n-\n-impl<V: HasTop> ValueOrPlaceOrRef<V> {\n-    pub fn top() -> Self {\n-        ValueOrPlaceOrRef::Value(V::top())\n-    }\n-}\n-\n-impl<V> From<ValueOrPlace<V>> for ValueOrPlaceOrRef<V> {\n-    fn from(x: ValueOrPlace<V>) -> Self {\n-        match x {\n-            ValueOrPlace::Value(value) => ValueOrPlaceOrRef::Value(value),\n-            ValueOrPlace::Place(place) => ValueOrPlaceOrRef::Place(place),\n-        }\n-    }\n-}\n-\n /// The set of projection elements that can be used by a tracked place.\n ///\n-/// For now, downcast is not allowed due to aliasing between variants (see #101168).\n+/// Although only field projections are currently allowed, this could change in the future.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum TrackElem {\n-    Deref,\n     Field(Field),\n }\n \n@@ -923,7 +823,6 @@ impl<V, T> TryFrom<ProjectionElem<V, T>> for TrackElem {\n \n     fn try_from(value: ProjectionElem<V, T>) -> Result<Self, Self::Error> {\n         match value {\n-            ProjectionElem::Deref => Ok(TrackElem::Deref),\n             ProjectionElem::Field(field, _) => Ok(TrackElem::Field(field)),\n             _ => Err(()),\n         }\n@@ -962,15 +861,19 @@ fn iter_fields<'tcx>(\n \n /// Returns all places, that have their reference or address taken.\n ///\n-/// This includes shared references.\n+/// This includes shared references, and also drops and `InlineAsm` out parameters.\n fn escaped_places<'tcx>(body: &Body<'tcx>) -> FxHashSet<Place<'tcx>> {\n     struct Collector<'tcx> {\n         result: FxHashSet<Place<'tcx>>,\n     }\n \n     impl<'tcx> Visitor<'tcx> for Collector<'tcx> {\n         fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n-            if context.is_borrow() || context.is_address_of() {\n+            if context.is_borrow()\n+                || context.is_address_of()\n+                || context.is_drop()\n+                || context == PlaceContext::MutatingUse(MutatingUseContext::AsmOutput)\n+            {\n                 self.result.insert(*place);\n             }\n         }\n@@ -1032,7 +935,6 @@ fn debug_with_context_rec<V: Debug + Eq>(\n     for child in map.children(place) {\n         let info_elem = map.places[child].proj_elem.unwrap();\n         let child_place_str = match info_elem {\n-            TrackElem::Deref => format!(\"*{}\", place_str),\n             TrackElem::Field(field) => {\n                 if place_str.starts_with(\"*\") {\n                     format!(\"({}).{}\", place_str, field.index())"}, {"sha": "e88125777f142e2b32a0931da815b2fdfe7f612c", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{\n-    Map, State, TrackElem, ValueAnalysis, ValueOrPlace, ValueOrPlaceOrRef,\n+    Map, State, TrackElem, ValueAnalysis, ValueOrPlace,\n };\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n use rustc_span::DUMMY_SP;\n@@ -100,7 +100,7 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                     let (val, overflow) = self.binary_op(state, *op, left, right);\n \n                     if let Some(value_target) = value_target {\n-                        state.assign_idx(value_target, ValueOrPlaceOrRef::Value(val), self.map());\n+                        state.assign_idx(value_target, ValueOrPlace::Value(val), self.map());\n                     }\n                     if let Some(overflow_target) = overflow_target {\n                         let overflow = match overflow {\n@@ -117,7 +117,7 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                         };\n                         state.assign_idx(\n                             overflow_target,\n-                            ValueOrPlaceOrRef::Value(overflow),\n+                            ValueOrPlace::Value(overflow),\n                             self.map(),\n                         );\n                     }\n@@ -131,7 +131,7 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n         &self,\n         rvalue: &Rvalue<'tcx>,\n         state: &mut State<Self::Value>,\n-    ) -> ValueOrPlaceOrRef<Self::Value> {\n+    ) -> ValueOrPlace<Self::Value> {\n         match rvalue {\n             Rvalue::Cast(\n                 kind @ (CastKind::IntToInt\n@@ -150,23 +150,23 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                     }\n                     _ => unreachable!(),\n                 }\n-                .map(|result| ValueOrPlaceOrRef::Value(self.wrap_immediate(result, *ty)))\n-                .unwrap_or(ValueOrPlaceOrRef::top()),\n-                _ => ValueOrPlaceOrRef::top(),\n+                .map(|result| ValueOrPlace::Value(self.wrap_immediate(result, *ty)))\n+                .unwrap_or(ValueOrPlace::top()),\n+                _ => ValueOrPlace::top(),\n             },\n             Rvalue::BinaryOp(op, box (left, right)) => {\n                 // Overflows must be ignored here.\n                 let (val, _overflow) = self.binary_op(state, *op, left, right);\n-                ValueOrPlaceOrRef::Value(val)\n+                ValueOrPlace::Value(val)\n             }\n             Rvalue::UnaryOp(op, operand) => match self.eval_operand(operand, state) {\n                 FlatSet::Elem(value) => self\n                     .ecx\n                     .unary_op(*op, &value)\n-                    .map(|val| ValueOrPlaceOrRef::Value(self.wrap_immty(val)))\n-                    .unwrap_or(ValueOrPlaceOrRef::Value(FlatSet::Top)),\n-                FlatSet::Bottom => ValueOrPlaceOrRef::Value(FlatSet::Bottom),\n-                FlatSet::Top => ValueOrPlaceOrRef::Value(FlatSet::Top),\n+                    .map(|val| ValueOrPlace::Value(self.wrap_immty(val)))\n+                    .unwrap_or(ValueOrPlace::Value(FlatSet::Top)),\n+                FlatSet::Bottom => ValueOrPlace::Value(FlatSet::Bottom),\n+                FlatSet::Top => ValueOrPlace::Value(FlatSet::Top),\n             },\n             _ => self.super_rvalue(rvalue, state),\n         }"}, {"sha": "bf9ab8669380a98a4a3cf1e43e83b4a3635d3a47", "filename": "src/test/mir-opt/dataflow-const-prop/cast.main.DataflowConstProp.diff", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fcast.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fcast.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fcast.main.DataflowConstProp.diff?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -4,9 +4,8 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/cast.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/cast.rs:+1:9: +1:10\n-      let mut _3: u8;                      // in scope 0 at $DIR/cast.rs:+2:13: +2:22\n-      let mut _4: i32;                     // in scope 0 at $DIR/cast.rs:+2:13: +2:16\n-      let mut _5: &i32;                    // in scope 0 at $DIR/cast.rs:+2:14: +2:16\n+      let mut _3: u8;                      // in scope 0 at $DIR/cast.rs:+2:13: +2:20\n+      let mut _4: i32;                     // in scope 0 at $DIR/cast.rs:+2:13: +2:14\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/cast.rs:+1:9: +1:10\n           let _2: u8;                      // in scope 1 at $DIR/cast.rs:+2:9: +2:10\n@@ -19,19 +18,16 @@\n           StorageLive(_1);                 // scope 0 at $DIR/cast.rs:+1:9: +1:10\n           _1 = const 257_i32;              // scope 0 at $DIR/cast.rs:+1:13: +1:16\n           StorageLive(_2);                 // scope 1 at $DIR/cast.rs:+2:9: +2:10\n-          StorageLive(_3);                 // scope 1 at $DIR/cast.rs:+2:13: +2:22\n-          StorageLive(_4);                 // scope 1 at $DIR/cast.rs:+2:13: +2:16\n-          StorageLive(_5);                 // scope 1 at $DIR/cast.rs:+2:14: +2:16\n-          _5 = &_1;                        // scope 1 at $DIR/cast.rs:+2:14: +2:16\n--         _4 = (*_5);                      // scope 1 at $DIR/cast.rs:+2:13: +2:16\n--         _3 = move _4 as u8 (IntToInt);   // scope 1 at $DIR/cast.rs:+2:13: +2:22\n-+         _4 = const 257_i32;              // scope 1 at $DIR/cast.rs:+2:13: +2:16\n-+         _3 = const 1_u8;                 // scope 1 at $DIR/cast.rs:+2:13: +2:22\n-          StorageDead(_4);                 // scope 1 at $DIR/cast.rs:+2:21: +2:22\n--         _2 = Add(move _3, const 1_u8);   // scope 1 at $DIR/cast.rs:+2:13: +2:26\n-+         _2 = const 2_u8;                 // scope 1 at $DIR/cast.rs:+2:13: +2:26\n-          StorageDead(_3);                 // scope 1 at $DIR/cast.rs:+2:25: +2:26\n-          StorageDead(_5);                 // scope 1 at $DIR/cast.rs:+2:26: +2:27\n+          StorageLive(_3);                 // scope 1 at $DIR/cast.rs:+2:13: +2:20\n+          StorageLive(_4);                 // scope 1 at $DIR/cast.rs:+2:13: +2:14\n+-         _4 = _1;                         // scope 1 at $DIR/cast.rs:+2:13: +2:14\n+-         _3 = move _4 as u8 (IntToInt);   // scope 1 at $DIR/cast.rs:+2:13: +2:20\n++         _4 = const 257_i32;              // scope 1 at $DIR/cast.rs:+2:13: +2:14\n++         _3 = const 1_u8;                 // scope 1 at $DIR/cast.rs:+2:13: +2:20\n+          StorageDead(_4);                 // scope 1 at $DIR/cast.rs:+2:19: +2:20\n+-         _2 = Add(move _3, const 1_u8);   // scope 1 at $DIR/cast.rs:+2:13: +2:24\n++         _2 = const 2_u8;                 // scope 1 at $DIR/cast.rs:+2:13: +2:24\n+          StorageDead(_3);                 // scope 1 at $DIR/cast.rs:+2:23: +2:24\n           _0 = const ();                   // scope 0 at $DIR/cast.rs:+0:11: +3:2\n           StorageDead(_2);                 // scope 1 at $DIR/cast.rs:+3:1: +3:2\n           StorageDead(_1);                 // scope 0 at $DIR/cast.rs:+3:1: +3:2"}, {"sha": "484403f7f0ec41d5d4c3f1aa1ef2018cd5a6bc78", "filename": "src/test/mir-opt/dataflow-const-prop/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fcast.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -1,8 +1,7 @@\n // unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR cast.main.DataflowConstProp.diff\n fn main() {\n     let a = 257;\n-    let b = *&a as u8 + 1;\n+    let b = a as u8 + 1;\n }"}, {"sha": "0738a4ee53b8649615ff8ad424b8bea56ae83810", "filename": "src/test/mir-opt/dataflow-const-prop/checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -1,5 +1,5 @@\n // unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts -Coverflow-checks=on\n+// compile-flags: -Coverflow-checks=on\n \n // EMIT_MIR checked.main.DataflowConstProp.diff\n #[allow(arithmetic_overflow)]"}, {"sha": "26808c70fbf2c42a711020001ff4790f24320c1e", "filename": "src/test/mir-opt/dataflow-const-prop/if.main.DataflowConstProp.diff", "status": "modified", "additions": 63, "deletions": 71, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -4,29 +4,27 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/if.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/if.rs:+1:9: +1:10\n-      let mut _3: bool;                    // in scope 0 at $DIR/if.rs:+2:16: +2:24\n-      let mut _4: i32;                     // in scope 0 at $DIR/if.rs:+2:16: +2:19\n-      let mut _5: &i32;                    // in scope 0 at $DIR/if.rs:+2:17: +2:19\n-      let mut _7: i32;                     // in scope 0 at $DIR/if.rs:+3:13: +3:14\n-      let mut _9: bool;                    // in scope 0 at $DIR/if.rs:+5:16: +5:24\n-      let mut _10: i32;                    // in scope 0 at $DIR/if.rs:+5:16: +5:19\n-      let mut _11: &i32;                   // in scope 0 at $DIR/if.rs:+5:17: +5:19\n-      let mut _12: i32;                    // in scope 0 at $DIR/if.rs:+5:38: +5:39\n-      let mut _14: i32;                    // in scope 0 at $DIR/if.rs:+6:13: +6:14\n+      let mut _3: bool;                    // in scope 0 at $DIR/if.rs:+2:16: +2:22\n+      let mut _4: i32;                     // in scope 0 at $DIR/if.rs:+2:16: +2:17\n+      let mut _6: i32;                     // in scope 0 at $DIR/if.rs:+3:13: +3:14\n+      let mut _8: bool;                    // in scope 0 at $DIR/if.rs:+5:16: +5:22\n+      let mut _9: i32;                     // in scope 0 at $DIR/if.rs:+5:16: +5:17\n+      let mut _10: i32;                    // in scope 0 at $DIR/if.rs:+5:36: +5:37\n+      let mut _12: i32;                    // in scope 0 at $DIR/if.rs:+6:13: +6:14\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/if.rs:+1:9: +1:10\n           let _2: i32;                     // in scope 1 at $DIR/if.rs:+2:9: +2:10\n           scope 2 {\n               debug b => _2;               // in scope 2 at $DIR/if.rs:+2:9: +2:10\n-              let _6: i32;                 // in scope 2 at $DIR/if.rs:+3:9: +3:10\n+              let _5: i32;                 // in scope 2 at $DIR/if.rs:+3:9: +3:10\n               scope 3 {\n-                  debug c => _6;           // in scope 3 at $DIR/if.rs:+3:9: +3:10\n-                  let _8: i32;             // in scope 3 at $DIR/if.rs:+5:9: +5:10\n+                  debug c => _5;           // in scope 3 at $DIR/if.rs:+3:9: +3:10\n+                  let _7: i32;             // in scope 3 at $DIR/if.rs:+5:9: +5:10\n                   scope 4 {\n-                      debug d => _8;       // in scope 4 at $DIR/if.rs:+5:9: +5:10\n-                      let _13: i32;        // in scope 4 at $DIR/if.rs:+6:9: +6:10\n+                      debug d => _7;       // in scope 4 at $DIR/if.rs:+5:9: +5:10\n+                      let _11: i32;        // in scope 4 at $DIR/if.rs:+6:9: +6:10\n                       scope 5 {\n-                          debug e => _13;  // in scope 5 at $DIR/if.rs:+6:9: +6:10\n+                          debug e => _11;  // in scope 5 at $DIR/if.rs:+6:9: +6:10\n                       }\n                   }\n               }\n@@ -37,81 +35,75 @@\n           StorageLive(_1);                 // scope 0 at $DIR/if.rs:+1:9: +1:10\n           _1 = const 1_i32;                // scope 0 at $DIR/if.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/if.rs:+2:9: +2:10\n-          StorageLive(_3);                 // scope 1 at $DIR/if.rs:+2:16: +2:24\n-          StorageLive(_4);                 // scope 1 at $DIR/if.rs:+2:16: +2:19\n-          StorageLive(_5);                 // scope 1 at $DIR/if.rs:+2:17: +2:19\n-          _5 = &_1;                        // scope 1 at $DIR/if.rs:+2:17: +2:19\n--         _4 = (*_5);                      // scope 1 at $DIR/if.rs:+2:16: +2:19\n--         _3 = Eq(move _4, const 1_i32);   // scope 1 at $DIR/if.rs:+2:16: +2:24\n-+         _4 = const 1_i32;                // scope 1 at $DIR/if.rs:+2:16: +2:19\n-+         _3 = const true;                 // scope 1 at $DIR/if.rs:+2:16: +2:24\n-          StorageDead(_5);                 // scope 1 at $DIR/if.rs:+2:23: +2:24\n-          StorageDead(_4);                 // scope 1 at $DIR/if.rs:+2:23: +2:24\n--         switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:24\n-+         switchInt(const true) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:24\n+          StorageLive(_3);                 // scope 1 at $DIR/if.rs:+2:16: +2:22\n+          StorageLive(_4);                 // scope 1 at $DIR/if.rs:+2:16: +2:17\n+-         _4 = _1;                         // scope 1 at $DIR/if.rs:+2:16: +2:17\n+-         _3 = Eq(move _4, const 1_i32);   // scope 1 at $DIR/if.rs:+2:16: +2:22\n++         _4 = const 1_i32;                // scope 1 at $DIR/if.rs:+2:16: +2:17\n++         _3 = const true;                 // scope 1 at $DIR/if.rs:+2:16: +2:22\n+          StorageDead(_4);                 // scope 1 at $DIR/if.rs:+2:21: +2:22\n+-         switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:22\n++         switchInt(const true) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:22\n       }\n   \n       bb1: {\n-          _2 = const 2_i32;                // scope 1 at $DIR/if.rs:+2:27: +2:28\n-          goto -> bb3;                     // scope 1 at $DIR/if.rs:+2:13: +2:41\n+          _2 = const 2_i32;                // scope 1 at $DIR/if.rs:+2:25: +2:26\n+          goto -> bb3;                     // scope 1 at $DIR/if.rs:+2:13: +2:39\n       }\n   \n       bb2: {\n-          _2 = const 3_i32;                // scope 1 at $DIR/if.rs:+2:38: +2:39\n-          goto -> bb3;                     // scope 1 at $DIR/if.rs:+2:13: +2:41\n+          _2 = const 3_i32;                // scope 1 at $DIR/if.rs:+2:36: +2:37\n+          goto -> bb3;                     // scope 1 at $DIR/if.rs:+2:13: +2:39\n       }\n   \n       bb3: {\n-          StorageDead(_3);                 // scope 1 at $DIR/if.rs:+2:40: +2:41\n-          StorageLive(_6);                 // scope 2 at $DIR/if.rs:+3:9: +3:10\n-          StorageLive(_7);                 // scope 2 at $DIR/if.rs:+3:13: +3:14\n--         _7 = _2;                         // scope 2 at $DIR/if.rs:+3:13: +3:14\n--         _6 = Add(move _7, const 1_i32);  // scope 2 at $DIR/if.rs:+3:13: +3:18\n-+         _7 = const 2_i32;                // scope 2 at $DIR/if.rs:+3:13: +3:14\n-+         _6 = const 3_i32;                // scope 2 at $DIR/if.rs:+3:13: +3:18\n-          StorageDead(_7);                 // scope 2 at $DIR/if.rs:+3:17: +3:18\n-          StorageLive(_8);                 // scope 3 at $DIR/if.rs:+5:9: +5:10\n-          StorageLive(_9);                 // scope 3 at $DIR/if.rs:+5:16: +5:24\n-          StorageLive(_10);                // scope 3 at $DIR/if.rs:+5:16: +5:19\n-          StorageLive(_11);                // scope 3 at $DIR/if.rs:+5:17: +5:19\n-          _11 = &_1;                       // scope 3 at $DIR/if.rs:+5:17: +5:19\n--         _10 = (*_11);                    // scope 3 at $DIR/if.rs:+5:16: +5:19\n--         _9 = Eq(move _10, const 1_i32);  // scope 3 at $DIR/if.rs:+5:16: +5:24\n-+         _10 = const 1_i32;               // scope 3 at $DIR/if.rs:+5:16: +5:19\n-+         _9 = const true;                 // scope 3 at $DIR/if.rs:+5:16: +5:24\n-          StorageDead(_11);                // scope 3 at $DIR/if.rs:+5:23: +5:24\n-          StorageDead(_10);                // scope 3 at $DIR/if.rs:+5:23: +5:24\n--         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:24\n-+         switchInt(const true) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:24\n+          StorageDead(_3);                 // scope 1 at $DIR/if.rs:+2:38: +2:39\n+          StorageLive(_5);                 // scope 2 at $DIR/if.rs:+3:9: +3:10\n+          StorageLive(_6);                 // scope 2 at $DIR/if.rs:+3:13: +3:14\n+-         _6 = _2;                         // scope 2 at $DIR/if.rs:+3:13: +3:14\n+-         _5 = Add(move _6, const 1_i32);  // scope 2 at $DIR/if.rs:+3:13: +3:18\n++         _6 = const 2_i32;                // scope 2 at $DIR/if.rs:+3:13: +3:14\n++         _5 = const 3_i32;                // scope 2 at $DIR/if.rs:+3:13: +3:18\n+          StorageDead(_6);                 // scope 2 at $DIR/if.rs:+3:17: +3:18\n+          StorageLive(_7);                 // scope 3 at $DIR/if.rs:+5:9: +5:10\n+          StorageLive(_8);                 // scope 3 at $DIR/if.rs:+5:16: +5:22\n+          StorageLive(_9);                 // scope 3 at $DIR/if.rs:+5:16: +5:17\n+-         _9 = _1;                         // scope 3 at $DIR/if.rs:+5:16: +5:17\n+-         _8 = Eq(move _9, const 1_i32);   // scope 3 at $DIR/if.rs:+5:16: +5:22\n++         _9 = const 1_i32;                // scope 3 at $DIR/if.rs:+5:16: +5:17\n++         _8 = const true;                 // scope 3 at $DIR/if.rs:+5:16: +5:22\n+          StorageDead(_9);                 // scope 3 at $DIR/if.rs:+5:21: +5:22\n+-         switchInt(move _8) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:22\n++         switchInt(const true) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:22\n       }\n   \n       bb4: {\n--         _8 = _1;                         // scope 3 at $DIR/if.rs:+5:27: +5:28\n-+         _8 = const 1_i32;                // scope 3 at $DIR/if.rs:+5:27: +5:28\n-          goto -> bb6;                     // scope 3 at $DIR/if.rs:+5:13: +5:45\n+-         _7 = _1;                         // scope 3 at $DIR/if.rs:+5:25: +5:26\n++         _7 = const 1_i32;                // scope 3 at $DIR/if.rs:+5:25: +5:26\n+          goto -> bb6;                     // scope 3 at $DIR/if.rs:+5:13: +5:43\n       }\n   \n       bb5: {\n-          StorageLive(_12);                // scope 3 at $DIR/if.rs:+5:38: +5:39\n-          _12 = _1;                        // scope 3 at $DIR/if.rs:+5:38: +5:39\n-          _8 = Add(move _12, const 1_i32); // scope 3 at $DIR/if.rs:+5:38: +5:43\n-          StorageDead(_12);                // scope 3 at $DIR/if.rs:+5:42: +5:43\n-          goto -> bb6;                     // scope 3 at $DIR/if.rs:+5:13: +5:45\n+          StorageLive(_10);                // scope 3 at $DIR/if.rs:+5:36: +5:37\n+          _10 = _1;                        // scope 3 at $DIR/if.rs:+5:36: +5:37\n+          _7 = Add(move _10, const 1_i32); // scope 3 at $DIR/if.rs:+5:36: +5:41\n+          StorageDead(_10);                // scope 3 at $DIR/if.rs:+5:40: +5:41\n+          goto -> bb6;                     // scope 3 at $DIR/if.rs:+5:13: +5:43\n       }\n   \n       bb6: {\n-          StorageDead(_9);                 // scope 3 at $DIR/if.rs:+5:44: +5:45\n-          StorageLive(_13);                // scope 4 at $DIR/if.rs:+6:9: +6:10\n-          StorageLive(_14);                // scope 4 at $DIR/if.rs:+6:13: +6:14\n--         _14 = _8;                        // scope 4 at $DIR/if.rs:+6:13: +6:14\n--         _13 = Add(move _14, const 1_i32); // scope 4 at $DIR/if.rs:+6:13: +6:18\n-+         _14 = const 1_i32;               // scope 4 at $DIR/if.rs:+6:13: +6:14\n-+         _13 = const 2_i32;               // scope 4 at $DIR/if.rs:+6:13: +6:18\n-          StorageDead(_14);                // scope 4 at $DIR/if.rs:+6:17: +6:18\n+          StorageDead(_8);                 // scope 3 at $DIR/if.rs:+5:42: +5:43\n+          StorageLive(_11);                // scope 4 at $DIR/if.rs:+6:9: +6:10\n+          StorageLive(_12);                // scope 4 at $DIR/if.rs:+6:13: +6:14\n+-         _12 = _7;                        // scope 4 at $DIR/if.rs:+6:13: +6:14\n+-         _11 = Add(move _12, const 1_i32); // scope 4 at $DIR/if.rs:+6:13: +6:18\n++         _12 = const 1_i32;               // scope 4 at $DIR/if.rs:+6:13: +6:14\n++         _11 = const 2_i32;               // scope 4 at $DIR/if.rs:+6:13: +6:18\n+          StorageDead(_12);                // scope 4 at $DIR/if.rs:+6:17: +6:18\n           _0 = const ();                   // scope 0 at $DIR/if.rs:+0:11: +7:2\n-          StorageDead(_13);                // scope 4 at $DIR/if.rs:+7:1: +7:2\n-          StorageDead(_8);                 // scope 3 at $DIR/if.rs:+7:1: +7:2\n-          StorageDead(_6);                 // scope 2 at $DIR/if.rs:+7:1: +7:2\n+          StorageDead(_11);                // scope 4 at $DIR/if.rs:+7:1: +7:2\n+          StorageDead(_7);                 // scope 3 at $DIR/if.rs:+7:1: +7:2\n+          StorageDead(_5);                 // scope 2 at $DIR/if.rs:+7:1: +7:2\n           StorageDead(_2);                 // scope 1 at $DIR/if.rs:+7:1: +7:2\n           StorageDead(_1);                 // scope 0 at $DIR/if.rs:+7:1: +7:2\n           return;                          // scope 0 at $DIR/if.rs:+7:2: +7:2"}, {"sha": "34fc35790c17f199cfb86d9c448da9086fae507a", "filename": "src/test/mir-opt/dataflow-const-prop/if.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -1,12 +1,11 @@\n // unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR if.main.DataflowConstProp.diff\n fn main() {\n     let a = 1;\n-    let b = if *&a == 1 { 2 } else { 3 };\n+    let b = if a == 1 { 2 } else { 3 };\n     let c = b + 1;\n \n-    let d = if *&a == 1 { a } else { a + 1 };\n+    let d = if a == 1 { a } else { a + 1 };\n     let e = d + 1;\n }"}, {"sha": "2f2d9d0102d1232030ee6c2d66d4489f19ef6090", "filename": "src/test/mir-opt/dataflow-const-prop/inherit_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Coverflow-checks=off -Zunsound-mir-opts\n+// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR inherit_overflow.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "d75e2a28bef6b61b26ffac6675431e16079c1dfa", "filename": "src/test/mir-opt/dataflow-const-prop/issue_81605.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fissue_81605.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -1,5 +1,4 @@\n // unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR issue_81605.f.DataflowConstProp.diff\n fn f() -> usize {"}, {"sha": "177736d62cd905075d1d0cc7bfa5fa8a17cf4bad", "filename": "src/test/mir-opt/dataflow-const-prop/promoted.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.main.DataflowConstProp.diff?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,29 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/promoted.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/promoted.rs:+2:9: +2:10\n-      let mut _2: &i32;                    // in scope 0 at $DIR/promoted.rs:+2:14: +2:17\n-      let _3: i32;                         // in scope 0 at $DIR/promoted.rs:+2:15: +2:17\n-      let mut _4: &i32;                    // in scope 0 at $DIR/promoted.rs:+2:14: +2:17\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/promoted.rs:+2:9: +2:10\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/promoted.rs:+2:9: +2:10\n-          StorageLive(_2);                 // scope 0 at $DIR/promoted.rs:+2:14: +2:17\n-          _4 = const _;                    // scope 0 at $DIR/promoted.rs:+2:14: +2:17\n-                                           // mir::Constant\n-                                           // + span: $DIR/promoted.rs:7:14: 7:17\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &(*_4);                     // scope 0 at $DIR/promoted.rs:+2:14: +2:17\n-          _1 = (*_2);                      // scope 0 at $DIR/promoted.rs:+2:13: +2:17\n-          StorageDead(_2);                 // scope 0 at $DIR/promoted.rs:+2:17: +2:18\n-          _0 = const ();                   // scope 0 at $DIR/promoted.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/promoted.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/promoted.rs:+3:2: +3:2\n-      }\n-  }\n-  "}, {"sha": "e5ca2f5b6072f7176670a0669cf2cc25e8773d3e", "filename": "src/test/mir-opt/dataflow-const-prop/promoted.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.rs?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,8 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n-\n-// EMIT_MIR promoted.main.DataflowConstProp.diff\n-fn main() {\n-    // This does not work because `&42` gets promoted.\n-    let a = *&42;\n-}"}, {"sha": "f500c827786f86c010742e96b1dd3d1db4d56ac4", "filename": "src/test/mir-opt/dataflow-const-prop/ref.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.main.DataflowConstProp.diff?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,89 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref.rs:+1:9: +1:10\n-      let mut _4: bool;                    // in scope 0 at $DIR/ref.rs:+3:16: +3:43\n-      let mut _5: u32;                     // in scope 0 at $DIR/ref.rs:+3:16: +3:38\n-      let mut _6: u32;                     // in scope 0 at $DIR/ref.rs:+3:16: +3:34\n-      let mut _7: bool;                    // in scope 0 at $DIR/ref.rs:+3:16: +3:38\n-      let _8: &i32;                        // in scope 0 at $DIR/ref.rs:+3:58: +3:60\n-      let mut _10: i32;                    // in scope 0 at $DIR/ref.rs:+4:13: +4:15\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/ref.rs:+1:9: +1:10\n-          let _2: i32;                     // in scope 1 at $DIR/ref.rs:+2:9: +2:10\n-          scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/ref.rs:+2:9: +2:10\n-              let _3: &i32;                // in scope 2 at $DIR/ref.rs:+3:9: +3:10\n-              scope 3 {\n-                  debug c => _3;           // in scope 3 at $DIR/ref.rs:+3:9: +3:10\n-                  let _9: i32;             // in scope 3 at $DIR/ref.rs:+4:9: +4:10\n-                  scope 4 {\n-                      debug d => _9;       // in scope 4 at $DIR/ref.rs:+4:9: +4:10\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref.rs:+1:9: +1:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/ref.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/ref.rs:+2:9: +2:10\n-          _2 = const 0_i32;                // scope 1 at $DIR/ref.rs:+2:13: +2:14\n-          StorageLive(_3);                 // scope 2 at $DIR/ref.rs:+3:9: +3:10\n-          StorageLive(_4);                 // scope 2 at $DIR/ref.rs:+3:16: +3:43\n-          StorageLive(_5);                 // scope 2 at $DIR/ref.rs:+3:16: +3:38\n-          StorageLive(_6);                 // scope 2 at $DIR/ref.rs:+3:16: +3:34\n-          _6 = id() -> bb1;                // scope 2 at $DIR/ref.rs:+3:16: +3:34\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref.rs:8:16: 8:32\n-                                           // + literal: Const { ty: fn() -> u32 {id}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n--         _7 = Eq(const 2_u32, const 0_u32); // scope 2 at $DIR/ref.rs:+3:16: +3:38\n--         assert(!move _7, \"attempt to calculate the remainder of `{}` with a divisor of zero\", _6) -> bb2; // scope 2 at $DIR/ref.rs:+3:16: +3:38\n-+         _7 = const false;                // scope 2 at $DIR/ref.rs:+3:16: +3:38\n-+         assert(!const false, \"attempt to calculate the remainder of `{}` with a divisor of zero\", _6) -> bb2; // scope 2 at $DIR/ref.rs:+3:16: +3:38\n-      }\n-  \n-      bb2: {\n-          _5 = Rem(move _6, const 2_u32);  // scope 2 at $DIR/ref.rs:+3:16: +3:38\n-          StorageDead(_6);                 // scope 2 at $DIR/ref.rs:+3:37: +3:38\n-          _4 = Eq(move _5, const 0_u32);   // scope 2 at $DIR/ref.rs:+3:16: +3:43\n-          StorageDead(_5);                 // scope 2 at $DIR/ref.rs:+3:42: +3:43\n-          switchInt(move _4) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/ref.rs:+3:16: +3:43\n-      }\n-  \n-      bb3: {\n-          _3 = &_1;                        // scope 2 at $DIR/ref.rs:+3:46: +3:48\n-          goto -> bb5;                     // scope 2 at $DIR/ref.rs:+3:13: +3:62\n-      }\n-  \n-      bb4: {\n-          StorageLive(_8);                 // scope 2 at $DIR/ref.rs:+3:58: +3:60\n-          _8 = &_2;                        // scope 2 at $DIR/ref.rs:+3:58: +3:60\n-          _3 = &(*_8);                     // scope 2 at $DIR/ref.rs:+3:58: +3:60\n-          StorageDead(_8);                 // scope 2 at $DIR/ref.rs:+3:61: +3:62\n-          goto -> bb5;                     // scope 2 at $DIR/ref.rs:+3:13: +3:62\n-      }\n-  \n-      bb5: {\n-          StorageDead(_4);                 // scope 2 at $DIR/ref.rs:+3:61: +3:62\n-          StorageLive(_9);                 // scope 3 at $DIR/ref.rs:+4:9: +4:10\n-          StorageLive(_10);                // scope 3 at $DIR/ref.rs:+4:13: +4:15\n--         _10 = (*_3);                     // scope 3 at $DIR/ref.rs:+4:13: +4:15\n--         _9 = Add(move _10, const 1_i32); // scope 3 at $DIR/ref.rs:+4:13: +4:19\n-+         _10 = const 0_i32;               // scope 3 at $DIR/ref.rs:+4:13: +4:15\n-+         _9 = const 1_i32;                // scope 3 at $DIR/ref.rs:+4:13: +4:19\n-          StorageDead(_10);                // scope 3 at $DIR/ref.rs:+4:18: +4:19\n-          _0 = const ();                   // scope 0 at $DIR/ref.rs:+0:11: +5:2\n-          StorageDead(_9);                 // scope 3 at $DIR/ref.rs:+5:1: +5:2\n-          StorageDead(_3);                 // scope 2 at $DIR/ref.rs:+5:1: +5:2\n-          StorageDead(_2);                 // scope 1 at $DIR/ref.rs:+5:1: +5:2\n-          StorageDead(_1);                 // scope 0 at $DIR/ref.rs:+5:1: +5:2\n-          return;                          // scope 0 at $DIR/ref.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "6c0e3063b0ab6494d48c767df2aed000565c1488", "filename": "src/test/mir-opt/dataflow-const-prop/ref.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.rs?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,10 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n-\n-// EMIT_MIR ref.main.DataflowConstProp.diff\n-fn main() {\n-    let a = 0;\n-    let b = 0;\n-    let c = if std::process::id() % 2 == 0 { &a } else { &b };\n-    let d = *c + 1;\n-}"}, {"sha": "746082eee531afeb3131764321388aba1de682a7", "filename": "src/test/mir-opt/dataflow-const-prop/ref_mut.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.main.DataflowConstProp.diff?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,77 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_mut.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/ref_mut.rs:+1:9: +1:14\n-      let mut _7: &i32;                    // in scope 0 at $DIR/ref_mut.rs:+9:10: +9:12\n-      let _8: &i32;                        // in scope 0 at $DIR/ref_mut.rs:+9:10: +9:12\n-      let _9: i32;                         // in scope 0 at $DIR/ref_mut.rs:+9:11: +9:12\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/ref_mut.rs:+1:9: +1:14\n-          let _2: &mut i32;                // in scope 1 at $DIR/ref_mut.rs:+2:9: +2:10\n-          scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/ref_mut.rs:+2:9: +2:10\n-              let _3: i32;                 // in scope 2 at $DIR/ref_mut.rs:+4:9: +4:10\n-              scope 3 {\n-                  debug c => _3;           // in scope 3 at $DIR/ref_mut.rs:+4:9: +4:10\n-                  let _4: i32;             // in scope 3 at $DIR/ref_mut.rs:+6:9: +6:10\n-                  scope 4 {\n-                      debug d => _4;       // in scope 4 at $DIR/ref_mut.rs:+6:9: +6:10\n-                      let mut _5: &i32;    // in scope 4 at $DIR/ref_mut.rs:+7:9: +7:14\n-                      scope 5 {\n-                          debug e => _5;   // in scope 5 at $DIR/ref_mut.rs:+7:9: +7:14\n-                          let _6: &mut &i32; // in scope 5 at $DIR/ref_mut.rs:+8:9: +8:10\n-                          scope 6 {\n-                              debug f => _6; // in scope 6 at $DIR/ref_mut.rs:+8:9: +8:10\n-                              let _10: i32; // in scope 6 at $DIR/ref_mut.rs:+10:9: +10:10\n-                              let mut _11: &i32; // in scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n-                              scope 7 {\n-                                  debug g => _10; // in scope 7 at $DIR/ref_mut.rs:+10:9: +10:10\n-                              }\n-                          }\n-                      }\n-                  }\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_mut.rs:+1:9: +1:14\n-          _1 = const 0_i32;                // scope 0 at $DIR/ref_mut.rs:+1:17: +1:18\n-          StorageLive(_2);                 // scope 1 at $DIR/ref_mut.rs:+2:9: +2:10\n-          _2 = &mut _1;                    // scope 1 at $DIR/ref_mut.rs:+2:13: +2:19\n-          (*_2) = const 1_i32;             // scope 2 at $DIR/ref_mut.rs:+3:5: +3:11\n-          StorageLive(_3);                 // scope 2 at $DIR/ref_mut.rs:+4:9: +4:10\n-          _3 = _1;                         // scope 2 at $DIR/ref_mut.rs:+4:13: +4:14\n-          StorageLive(_4);                 // scope 3 at $DIR/ref_mut.rs:+6:9: +6:10\n-          _4 = const 0_i32;                // scope 3 at $DIR/ref_mut.rs:+6:13: +6:14\n-          StorageLive(_5);                 // scope 4 at $DIR/ref_mut.rs:+7:9: +7:14\n-          _5 = &_4;                        // scope 4 at $DIR/ref_mut.rs:+7:17: +7:19\n-          StorageLive(_6);                 // scope 5 at $DIR/ref_mut.rs:+8:9: +8:10\n-          _6 = &mut _5;                    // scope 5 at $DIR/ref_mut.rs:+8:13: +8:19\n-          StorageLive(_7);                 // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n-          StorageLive(_8);                 // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n-          _11 = const _;                   // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_mut.rs:14:10: 14:12\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _8 = &(*_11);                    // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n-          _7 = &(*_8);                     // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n-          (*_6) = move _7;                 // scope 6 at $DIR/ref_mut.rs:+9:5: +9:12\n-          StorageDead(_7);                 // scope 6 at $DIR/ref_mut.rs:+9:11: +9:12\n-          StorageDead(_8);                 // scope 6 at $DIR/ref_mut.rs:+9:12: +9:13\n-          StorageLive(_10);                // scope 6 at $DIR/ref_mut.rs:+10:9: +10:10\n-          _10 = (*_5);                     // scope 6 at $DIR/ref_mut.rs:+10:13: +10:15\n-          _0 = const ();                   // scope 0 at $DIR/ref_mut.rs:+0:11: +11:2\n-          StorageDead(_10);                // scope 6 at $DIR/ref_mut.rs:+11:1: +11:2\n-          StorageDead(_6);                 // scope 5 at $DIR/ref_mut.rs:+11:1: +11:2\n-          StorageDead(_5);                 // scope 4 at $DIR/ref_mut.rs:+11:1: +11:2\n-          StorageDead(_4);                 // scope 3 at $DIR/ref_mut.rs:+11:1: +11:2\n-          StorageDead(_3);                 // scope 2 at $DIR/ref_mut.rs:+11:1: +11:2\n-          StorageDead(_2);                 // scope 1 at $DIR/ref_mut.rs:+11:1: +11:2\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_mut.rs:+11:1: +11:2\n-          return;                          // scope 0 at $DIR/ref_mut.rs:+11:2: +11:2\n-      }\n-  }\n-  "}, {"sha": "57283439516906b4323094600f0653a4f1145693", "filename": "src/test/mir-opt/dataflow-const-prop/ref_mut.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.rs?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,16 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n-\n-// EMIT_MIR ref_mut.main.DataflowConstProp.diff\n-fn main() {\n-    let mut a = 0;\n-    let b = &mut a;\n-    *b = 1;\n-    let c = a;\n-\n-    let d = 0;\n-    let mut e = &d;\n-    let f = &mut e;\n-    *f = &1;\n-    let g = *e;\n-}"}, {"sha": "81aa0a1a93d66bd96519f48e0c62debdf1b5716d", "filename": "src/test/mir-opt/dataflow-const-prop/ref_with_sb.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.main.DataflowConstProp.diff?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,56 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_with_sb.rs:+0:11: +0:11\n-      let mut _1: i32;                     // in scope 0 at $DIR/ref_with_sb.rs:+1:9: +1:14\n-      let _2: ();                          // in scope 0 at $DIR/ref_with_sb.rs:+2:5: +2:15\n-      let mut _3: &i32;                    // in scope 0 at $DIR/ref_with_sb.rs:+2:12: +2:14\n-      let _4: &i32;                        // in scope 0 at $DIR/ref_with_sb.rs:+2:12: +2:14\n-      let _5: ();                          // in scope 0 at $DIR/ref_with_sb.rs:+4:5: +4:20\n-      scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/ref_with_sb.rs:+1:9: +1:14\n-          let _6: i32;                     // in scope 1 at $DIR/ref_with_sb.rs:+7:9: +7:10\n-          scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/ref_with_sb.rs:+7:9: +7:10\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_with_sb.rs:+1:9: +1:14\n-          _1 = const 0_i32;                // scope 0 at $DIR/ref_with_sb.rs:+1:17: +1:18\n-          StorageLive(_2);                 // scope 1 at $DIR/ref_with_sb.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 1 at $DIR/ref_with_sb.rs:+2:12: +2:14\n-          StorageLive(_4);                 // scope 1 at $DIR/ref_with_sb.rs:+2:12: +2:14\n-          _4 = &_1;                        // scope 1 at $DIR/ref_with_sb.rs:+2:12: +2:14\n-          _3 = &(*_4);                     // scope 1 at $DIR/ref_with_sb.rs:+2:12: +2:14\n-          _2 = escape::<i32>(move _3) -> bb1; // scope 1 at $DIR/ref_with_sb.rs:+2:5: +2:15\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_with_sb.rs:13:5: 13:11\n-                                           // + literal: Const { ty: for<'a> fn(&'a i32) {escape::<i32>}, val: Value(<ZST>) }\n-      }\n-  \n-      bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/ref_with_sb.rs:+2:14: +2:15\n-          StorageDead(_4);                 // scope 1 at $DIR/ref_with_sb.rs:+2:15: +2:16\n-          StorageDead(_2);                 // scope 1 at $DIR/ref_with_sb.rs:+2:15: +2:16\n-          _1 = const 1_i32;                // scope 1 at $DIR/ref_with_sb.rs:+3:5: +3:10\n-          StorageLive(_5);                 // scope 1 at $DIR/ref_with_sb.rs:+4:5: +4:20\n-          _5 = some_function() -> bb2;     // scope 1 at $DIR/ref_with_sb.rs:+4:5: +4:20\n-                                           // mir::Constant\n-                                           // + span: $DIR/ref_with_sb.rs:15:5: 15:18\n-                                           // + literal: Const { ty: fn() {some_function}, val: Value(<ZST>) }\n-      }\n-  \n-      bb2: {\n-          StorageDead(_5);                 // scope 1 at $DIR/ref_with_sb.rs:+4:20: +4:21\n-          StorageLive(_6);                 // scope 1 at $DIR/ref_with_sb.rs:+7:9: +7:10\n--         _6 = _1;                         // scope 1 at $DIR/ref_with_sb.rs:+7:13: +7:14\n-+         _6 = const 1_i32;                // scope 1 at $DIR/ref_with_sb.rs:+7:13: +7:14\n-          _0 = const ();                   // scope 0 at $DIR/ref_with_sb.rs:+0:11: +8:2\n-          StorageDead(_6);                 // scope 1 at $DIR/ref_with_sb.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_with_sb.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/ref_with_sb.rs:+8:2: +8:2\n-      }\n-  }\n-  "}, {"sha": "060aa6ab79472bd9b36019d8db05ccd512efc67a", "filename": "src/test/mir-opt/dataflow-const-prop/ref_with_sb.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_with_sb.rs?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,19 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n-\n-#[inline(never)]\n-fn escape<T>(x: &T) {}\n-\n-#[inline(never)]\n-fn some_function() {}\n-\n-// EMIT_MIR ref_with_sb.main.DataflowConstProp.diff\n-fn main() {\n-    let mut a = 0;\n-    escape(&a);\n-    a = 1;\n-    some_function();\n-    // With `-Zunsound-mir-opt`, this should be propagated\n-    // (because we assume Stacked Borrows).\n-    let b = a;\n-}"}, {"sha": "158f187f15769fd0db91542b08e52d979ccb1e2e", "filename": "src/test/mir-opt/dataflow-const-prop/ref_without_sb.main.DataflowConstProp.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.main.DataflowConstProp.diff?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -10,9 +10,9 @@\n       let _5: ();                          // in scope 0 at $DIR/ref_without_sb.rs:+4:5: +4:20\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/ref_without_sb.rs:+1:9: +1:14\n-          let _6: i32;                     // in scope 1 at $DIR/ref_without_sb.rs:+7:9: +7:10\n+          let _6: i32;                     // in scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n           scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/ref_without_sb.rs:+7:9: +7:10\n+              debug b => _6;               // in scope 2 at $DIR/ref_without_sb.rs:+6:9: +6:10\n           }\n       }\n   \n@@ -44,12 +44,12 @@\n   \n       bb2: {\n           StorageDead(_5);                 // scope 1 at $DIR/ref_without_sb.rs:+4:20: +4:21\n-          StorageLive(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+7:9: +7:10\n-          _6 = _1;                         // scope 1 at $DIR/ref_without_sb.rs:+7:13: +7:14\n-          _0 = const ();                   // scope 0 at $DIR/ref_without_sb.rs:+0:11: +8:2\n-          StorageDead(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/ref_without_sb.rs:+8:2: +8:2\n+          StorageLive(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+6:9: +6:10\n+          _6 = _1;                         // scope 1 at $DIR/ref_without_sb.rs:+6:13: +6:14\n+          _0 = const ();                   // scope 0 at $DIR/ref_without_sb.rs:+0:11: +7:2\n+          StorageDead(_6);                 // scope 1 at $DIR/ref_without_sb.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/ref_without_sb.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/ref_without_sb.rs:+7:2: +7:2\n       }\n   }\n   "}, {"sha": "2fd480b0968af0ccf205074979abd093efa7aace", "filename": "src/test/mir-opt/dataflow-const-prop/ref_without_sb.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_without_sb.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -12,7 +12,6 @@ fn main() {\n     escape(&a);\n     a = 1;\n     some_function();\n-    // Without `-Zunsound-mir-opt`, this should not be propagated\n-    // (because we do not assume Stacked Borrows).\n+    // This should currently not be propagated.\n     let b = a;\n }"}, {"sha": "df08eff94cb27f8cca0ab7806512a76fc7244c43", "filename": "src/test/mir-opt/dataflow-const-prop/self_assign.main.DataflowConstProp.diff", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.main.DataflowConstProp.diff?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -20,16 +20,12 @@\n           StorageLive(_1);                 // scope 0 at $DIR/self_assign.rs:+1:9: +1:14\n           _1 = const 0_i32;                // scope 0 at $DIR/self_assign.rs:+1:17: +1:18\n           StorageLive(_2);                 // scope 1 at $DIR/self_assign.rs:+2:9: +2:10\n--         _2 = _1;                         // scope 1 at $DIR/self_assign.rs:+2:9: +2:10\n--         _1 = Add(move _2, const 1_i32);  // scope 1 at $DIR/self_assign.rs:+2:5: +2:14\n-+         _2 = const 0_i32;                // scope 1 at $DIR/self_assign.rs:+2:9: +2:10\n-+         _1 = const 1_i32;                // scope 1 at $DIR/self_assign.rs:+2:5: +2:14\n+          _2 = _1;                         // scope 1 at $DIR/self_assign.rs:+2:9: +2:10\n+          _1 = Add(move _2, const 1_i32);  // scope 1 at $DIR/self_assign.rs:+2:5: +2:14\n           StorageDead(_2);                 // scope 1 at $DIR/self_assign.rs:+2:13: +2:14\n           StorageLive(_3);                 // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n--         _3 = _1;                         // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n--         _1 = move _3;                    // scope 1 at $DIR/self_assign.rs:+3:5: +3:10\n-+         _3 = const 1_i32;                // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n-+         _1 = const 1_i32;                // scope 1 at $DIR/self_assign.rs:+3:5: +3:10\n+          _3 = _1;                         // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n+          _1 = move _3;                    // scope 1 at $DIR/self_assign.rs:+3:5: +3:10\n           StorageDead(_3);                 // scope 1 at $DIR/self_assign.rs:+3:9: +3:10\n           StorageLive(_4);                 // scope 1 at $DIR/self_assign.rs:+5:9: +5:14\n           _4 = &_1;                        // scope 1 at $DIR/self_assign.rs:+5:17: +5:19\n@@ -38,10 +34,8 @@\n           _4 = move _5;                    // scope 2 at $DIR/self_assign.rs:+6:5: +6:10\n           StorageDead(_5);                 // scope 2 at $DIR/self_assign.rs:+6:9: +6:10\n           StorageLive(_6);                 // scope 2 at $DIR/self_assign.rs:+7:9: +7:11\n--         _6 = (*_4);                      // scope 2 at $DIR/self_assign.rs:+7:9: +7:11\n--         _1 = move _6;                    // scope 2 at $DIR/self_assign.rs:+7:5: +7:11\n-+         _6 = const 1_i32;                // scope 2 at $DIR/self_assign.rs:+7:9: +7:11\n-+         _1 = const 1_i32;                // scope 2 at $DIR/self_assign.rs:+7:5: +7:11\n+          _6 = (*_4);                      // scope 2 at $DIR/self_assign.rs:+7:9: +7:11\n+          _1 = move _6;                    // scope 2 at $DIR/self_assign.rs:+7:5: +7:11\n           StorageDead(_6);                 // scope 2 at $DIR/self_assign.rs:+7:10: +7:11\n           _0 = const ();                   // scope 0 at $DIR/self_assign.rs:+0:11: +8:2\n           StorageDead(_4);                 // scope 1 at $DIR/self_assign.rs:+8:1: +8:2"}, {"sha": "8de2195f93ba4b3b3e9e94eb30c510b606377873", "filename": "src/test/mir-opt/dataflow-const-prop/self_assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -1,5 +1,4 @@\n // unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR self_assign.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "e3282762459a006fae285f5cb7db6daaa5aa7d5f", "filename": "src/test/mir-opt/dataflow-const-prop/self_assign_add.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fself_assign_add.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -1,5 +1,4 @@\n // unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR self_assign_add.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "2d0d70b6a742879a4f81868e6ca0e72e448409cb", "filename": "src/test/mir-opt/dataflow-const-prop/static_ref.main.DataflowConstProp.diff", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.main.DataflowConstProp.diff?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,53 +0,0 @@\n-- // MIR for `main` before DataflowConstProp\n-+ // MIR for `main` after DataflowConstProp\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/static_ref.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/static_ref.rs:+3:9: +3:10\n-      let mut _3: &i32;                    // in scope 0 at $DIR/static_ref.rs:+5:9: +5:11\n-      let _4: &i32;                        // in scope 0 at $DIR/static_ref.rs:+5:9: +5:11\n-      let _5: &i32;                        // in scope 0 at $DIR/static_ref.rs:+5:10: +5:11\n-      scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/static_ref.rs:+3:9: +3:10\n-          let mut _2: &i32;                // in scope 1 at $DIR/static_ref.rs:+4:9: +4:14\n-          scope 2 {\n-              debug r => _2;               // in scope 2 at $DIR/static_ref.rs:+4:9: +4:14\n-              let _6: i32;                 // in scope 2 at $DIR/static_ref.rs:+6:9: +6:10\n-              scope 3 {\n-                  debug y => _6;           // in scope 3 at $DIR/static_ref.rs:+6:9: +6:10\n-              }\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/static_ref.rs:+3:9: +3:10\n-          _1 = const 0_i32;                // scope 0 at $DIR/static_ref.rs:+3:13: +3:14\n-          StorageLive(_2);                 // scope 1 at $DIR/static_ref.rs:+4:9: +4:14\n-          _2 = &_1;                        // scope 1 at $DIR/static_ref.rs:+4:17: +4:19\n-          StorageLive(_3);                 // scope 2 at $DIR/static_ref.rs:+5:9: +5:11\n-          StorageLive(_4);                 // scope 2 at $DIR/static_ref.rs:+5:9: +5:11\n-          StorageLive(_5);                 // scope 2 at $DIR/static_ref.rs:+5:10: +5:11\n-          _5 = const {alloc1: &i32};       // scope 2 at $DIR/static_ref.rs:+5:10: +5:11\n-                                           // mir::Constant\n-                                           // + span: $DIR/static_ref.rs:10:10: 10:11\n-                                           // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n-          _4 = &(*_5);                     // scope 2 at $DIR/static_ref.rs:+5:9: +5:11\n-          _3 = &(*_4);                     // scope 2 at $DIR/static_ref.rs:+5:9: +5:11\n-          _2 = move _3;                    // scope 2 at $DIR/static_ref.rs:+5:5: +5:11\n-          StorageDead(_3);                 // scope 2 at $DIR/static_ref.rs:+5:10: +5:11\n-          StorageDead(_5);                 // scope 2 at $DIR/static_ref.rs:+5:11: +5:12\n-          StorageDead(_4);                 // scope 2 at $DIR/static_ref.rs:+5:11: +5:12\n-          StorageLive(_6);                 // scope 2 at $DIR/static_ref.rs:+6:9: +6:10\n-          _6 = (*_2);                      // scope 2 at $DIR/static_ref.rs:+6:13: +6:15\n-          _0 = const ();                   // scope 0 at $DIR/static_ref.rs:+0:11: +7:2\n-          StorageDead(_6);                 // scope 2 at $DIR/static_ref.rs:+7:1: +7:2\n-          StorageDead(_2);                 // scope 1 at $DIR/static_ref.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/static_ref.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/static_ref.rs:+7:2: +7:2\n-      }\n-  }\n-  \n-  alloc1 (static: P, size: 4, align: 4) {\n-      05 00 00 00                                     \u2502 ....\n-  }\n-  "}, {"sha": "90f20ae51ceb974d92ed26a34a53e02a013235fa", "filename": "src/test/mir-opt/dataflow-const-prop/static_ref.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3997893ccb56dde4671cf7213faf9581714da402/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstatic_ref.rs?ref=3997893ccb56dde4671cf7213faf9581714da402", "patch": "@@ -1,12 +0,0 @@\n-// unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n-\n-// EMIT_MIR static_ref.main.DataflowConstProp.diff\n-fn main() {\n-    // Currently, this will not propagate.\n-    static P: i32 = 5;\n-    let x = 0;\n-    let mut r = &x;\n-    r = &P;\n-    let y = *r;\n-}"}, {"sha": "8018400e798a7e8c9fb391122a10d56f2d29c0da", "filename": "src/test/mir-opt/dataflow-const-prop/terminator.main.DataflowConstProp.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.main.DataflowConstProp.diff?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -4,37 +4,37 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/terminator.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/terminator.rs:+1:9: +1:10\n-      let _2: ();                          // in scope 0 at $DIR/terminator.rs:+2:5: +2:15\n-      let mut _3: i32;                     // in scope 0 at $DIR/terminator.rs:+2:9: +2:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/terminator.rs:+2:9: +2:10\n+      let _2: ();                          // in scope 0 at $DIR/terminator.rs:+3:5: +3:15\n+      let mut _3: i32;                     // in scope 0 at $DIR/terminator.rs:+3:9: +3:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/terminator.rs:+3:9: +3:10\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/terminator.rs:+1:9: +1:10\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/terminator.rs:+1:9: +1:10\n           _1 = const 1_i32;                // scope 0 at $DIR/terminator.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/terminator.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 1 at $DIR/terminator.rs:+2:9: +2:14\n-          StorageLive(_4);                 // scope 1 at $DIR/terminator.rs:+2:9: +2:10\n--         _4 = _1;                         // scope 1 at $DIR/terminator.rs:+2:9: +2:10\n--         _3 = Add(move _4, const 1_i32);  // scope 1 at $DIR/terminator.rs:+2:9: +2:14\n-+         _4 = const 1_i32;                // scope 1 at $DIR/terminator.rs:+2:9: +2:10\n-+         _3 = const 2_i32;                // scope 1 at $DIR/terminator.rs:+2:9: +2:14\n-          StorageDead(_4);                 // scope 1 at $DIR/terminator.rs:+2:13: +2:14\n--         _2 = foo(move _3) -> bb1;        // scope 1 at $DIR/terminator.rs:+2:5: +2:15\n-+         _2 = foo(const 2_i32) -> bb1;    // scope 1 at $DIR/terminator.rs:+2:5: +2:15\n+          StorageLive(_2);                 // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n+          StorageLive(_3);                 // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n+          StorageLive(_4);                 // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n+-         _4 = _1;                         // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n+-         _3 = Add(move _4, const 1_i32);  // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n++         _4 = const 1_i32;                // scope 1 at $DIR/terminator.rs:+3:9: +3:10\n++         _3 = const 2_i32;                // scope 1 at $DIR/terminator.rs:+3:9: +3:14\n+          StorageDead(_4);                 // scope 1 at $DIR/terminator.rs:+3:13: +3:14\n+-         _2 = foo(move _3) -> bb1;        // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n++         _2 = foo(const 2_i32) -> bb1;    // scope 1 at $DIR/terminator.rs:+3:5: +3:15\n                                            // mir::Constant\n                                            // + span: $DIR/terminator.rs:9:5: 9:8\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/terminator.rs:+2:14: +2:15\n-          StorageDead(_2);                 // scope 1 at $DIR/terminator.rs:+2:15: +2:16\n-          _0 = const ();                   // scope 0 at $DIR/terminator.rs:+0:11: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/terminator.rs:+3:1: +3:2\n-          return;                          // scope 0 at $DIR/terminator.rs:+3:2: +3:2\n+          StorageDead(_3);                 // scope 1 at $DIR/terminator.rs:+3:14: +3:15\n+          StorageDead(_2);                 // scope 1 at $DIR/terminator.rs:+3:15: +3:16\n+          _0 = const ();                   // scope 0 at $DIR/terminator.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/terminator.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/terminator.rs:+4:2: +4:2\n       }\n   }\n   "}, {"sha": "d151f666a2dc2cb65aafac447c1ba5ba5b5a2ef8", "filename": "src/test/mir-opt/dataflow-const-prop/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fterminator.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -1,10 +1,10 @@\n // unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n \n fn foo(n: i32) {}\n \n // EMIT_MIR terminator.main.DataflowConstProp.diff\n fn main() {\n     let a = 1;\n+    // Checks that we propagate into terminators.\n     foo(a + 1);\n }"}, {"sha": "e028def00a116da1c3ab5b6be5830555bb299ee7", "filename": "src/test/mir-opt/dataflow-const-prop/tuple.main.DataflowConstProp.diff", "status": "modified", "additions": 53, "deletions": 64, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.main.DataflowConstProp.diff?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -4,26 +4,21 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/tuple.rs:+0:11: +0:11\n       let mut _1: (i32, i32);              // in scope 0 at $DIR/tuple.rs:+1:9: +1:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/tuple.rs:+3:13: +3:22\n-      let mut _5: i32;                     // in scope 0 at $DIR/tuple.rs:+3:13: +3:16\n-      let mut _6: i32;                     // in scope 0 at $DIR/tuple.rs:+3:19: +3:22\n-      let mut _7: &(i32, i32);             // in scope 0 at $DIR/tuple.rs:+5:9: +5:11\n-      let _8: &(i32, i32);                 // in scope 0 at $DIR/tuple.rs:+5:9: +5:11\n-      let mut _10: i32;                    // in scope 0 at $DIR/tuple.rs:+6:13: +6:22\n-      let mut _11: i32;                    // in scope 0 at $DIR/tuple.rs:+6:13: +6:16\n-      let mut _12: i32;                    // in scope 0 at $DIR/tuple.rs:+6:19: +6:22\n+      let mut _3: i32;                     // in scope 0 at $DIR/tuple.rs:+2:13: +2:22\n+      let mut _4: i32;                     // in scope 0 at $DIR/tuple.rs:+2:13: +2:16\n+      let mut _5: i32;                     // in scope 0 at $DIR/tuple.rs:+2:19: +2:22\n+      let mut _7: i32;                     // in scope 0 at $DIR/tuple.rs:+4:13: +4:22\n+      let mut _8: i32;                     // in scope 0 at $DIR/tuple.rs:+4:13: +4:16\n+      let mut _9: i32;                     // in scope 0 at $DIR/tuple.rs:+4:19: +4:22\n+      let mut _10: i32;                    // in scope 0 at $DIR/tuple.rs:+4:25: +4:26\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/tuple.rs:+1:9: +1:14\n-          let mut _2: &(i32, i32);         // in scope 1 at $DIR/tuple.rs:+2:9: +2:14\n+          let _2: i32;                     // in scope 1 at $DIR/tuple.rs:+2:9: +2:10\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/tuple.rs:+2:9: +2:14\n-              let _3: i32;                 // in scope 2 at $DIR/tuple.rs:+3:9: +3:10\n+              debug b => _2;               // in scope 2 at $DIR/tuple.rs:+2:9: +2:10\n+              let _6: i32;                 // in scope 2 at $DIR/tuple.rs:+4:9: +4:10\n               scope 3 {\n-                  debug c => _3;           // in scope 3 at $DIR/tuple.rs:+3:9: +3:10\n-                  let _9: i32;             // in scope 3 at $DIR/tuple.rs:+6:9: +6:10\n-                  scope 4 {\n-                      debug d => _9;       // in scope 4 at $DIR/tuple.rs:+6:9: +6:10\n-                  }\n+                  debug c => _6;           // in scope 3 at $DIR/tuple.rs:+4:9: +4:10\n               }\n           }\n       }\n@@ -33,54 +28,48 @@\n           Deinit(_1);                      // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n           (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n           (_1.1: i32) = const 2_i32;       // scope 0 at $DIR/tuple.rs:+1:17: +1:23\n-          StorageLive(_2);                 // scope 1 at $DIR/tuple.rs:+2:9: +2:14\n-          _2 = &_1;                        // scope 1 at $DIR/tuple.rs:+2:17: +2:19\n-          StorageLive(_3);                 // scope 2 at $DIR/tuple.rs:+3:9: +3:10\n-          StorageLive(_4);                 // scope 2 at $DIR/tuple.rs:+3:13: +3:22\n-          StorageLive(_5);                 // scope 2 at $DIR/tuple.rs:+3:13: +3:16\n--         _5 = (_1.0: i32);                // scope 2 at $DIR/tuple.rs:+3:13: +3:16\n-+         _5 = const 1_i32;                // scope 2 at $DIR/tuple.rs:+3:13: +3:16\n-          StorageLive(_6);                 // scope 2 at $DIR/tuple.rs:+3:19: +3:22\n--         _6 = ((*_2).1: i32);             // scope 2 at $DIR/tuple.rs:+3:19: +3:22\n--         _4 = Add(move _5, move _6);      // scope 2 at $DIR/tuple.rs:+3:13: +3:22\n-+         _6 = const 2_i32;                // scope 2 at $DIR/tuple.rs:+3:19: +3:22\n-+         _4 = const 3_i32;                // scope 2 at $DIR/tuple.rs:+3:13: +3:22\n-          StorageDead(_6);                 // scope 2 at $DIR/tuple.rs:+3:21: +3:22\n-          StorageDead(_5);                 // scope 2 at $DIR/tuple.rs:+3:21: +3:22\n--         _3 = Add(move _4, const 3_i32);  // scope 2 at $DIR/tuple.rs:+3:13: +3:26\n-+         _3 = const 6_i32;                // scope 2 at $DIR/tuple.rs:+3:13: +3:26\n-          StorageDead(_4);                 // scope 2 at $DIR/tuple.rs:+3:25: +3:26\n-          Deinit(_1);                      // scope 3 at $DIR/tuple.rs:+4:5: +4:15\n-          (_1.0: i32) = const 2_i32;       // scope 3 at $DIR/tuple.rs:+4:5: +4:15\n-          (_1.1: i32) = const 3_i32;       // scope 3 at $DIR/tuple.rs:+4:5: +4:15\n-          StorageLive(_7);                 // scope 3 at $DIR/tuple.rs:+5:9: +5:11\n-          StorageLive(_8);                 // scope 3 at $DIR/tuple.rs:+5:9: +5:11\n-          _8 = &_1;                        // scope 3 at $DIR/tuple.rs:+5:9: +5:11\n-          _7 = &(*_8);                     // scope 3 at $DIR/tuple.rs:+5:9: +5:11\n-          _2 = move _7;                    // scope 3 at $DIR/tuple.rs:+5:5: +5:11\n-          StorageDead(_7);                 // scope 3 at $DIR/tuple.rs:+5:10: +5:11\n-          StorageDead(_8);                 // scope 3 at $DIR/tuple.rs:+5:11: +5:12\n-          StorageLive(_9);                 // scope 3 at $DIR/tuple.rs:+6:9: +6:10\n-          StorageLive(_10);                // scope 3 at $DIR/tuple.rs:+6:13: +6:22\n-          StorageLive(_11);                // scope 3 at $DIR/tuple.rs:+6:13: +6:16\n--         _11 = (_1.0: i32);               // scope 3 at $DIR/tuple.rs:+6:13: +6:16\n-+         _11 = const 2_i32;               // scope 3 at $DIR/tuple.rs:+6:13: +6:16\n-          StorageLive(_12);                // scope 3 at $DIR/tuple.rs:+6:19: +6:22\n--         _12 = ((*_2).1: i32);            // scope 3 at $DIR/tuple.rs:+6:19: +6:22\n--         _10 = Add(move _11, move _12);   // scope 3 at $DIR/tuple.rs:+6:13: +6:22\n-+         _12 = const 3_i32;               // scope 3 at $DIR/tuple.rs:+6:19: +6:22\n-+         _10 = const 5_i32;               // scope 3 at $DIR/tuple.rs:+6:13: +6:22\n-          StorageDead(_12);                // scope 3 at $DIR/tuple.rs:+6:21: +6:22\n-          StorageDead(_11);                // scope 3 at $DIR/tuple.rs:+6:21: +6:22\n--         _9 = Add(move _10, const 4_i32); // scope 3 at $DIR/tuple.rs:+6:13: +6:26\n-+         _9 = const 9_i32;                // scope 3 at $DIR/tuple.rs:+6:13: +6:26\n-          StorageDead(_10);                // scope 3 at $DIR/tuple.rs:+6:25: +6:26\n-          _0 = const ();                   // scope 0 at $DIR/tuple.rs:+0:11: +7:2\n-          StorageDead(_9);                 // scope 3 at $DIR/tuple.rs:+7:1: +7:2\n-          StorageDead(_3);                 // scope 2 at $DIR/tuple.rs:+7:1: +7:2\n-          StorageDead(_2);                 // scope 1 at $DIR/tuple.rs:+7:1: +7:2\n-          StorageDead(_1);                 // scope 0 at $DIR/tuple.rs:+7:1: +7:2\n-          return;                          // scope 0 at $DIR/tuple.rs:+7:2: +7:2\n+          StorageLive(_2);                 // scope 1 at $DIR/tuple.rs:+2:9: +2:10\n+          StorageLive(_3);                 // scope 1 at $DIR/tuple.rs:+2:13: +2:22\n+          StorageLive(_4);                 // scope 1 at $DIR/tuple.rs:+2:13: +2:16\n+-         _4 = (_1.0: i32);                // scope 1 at $DIR/tuple.rs:+2:13: +2:16\n++         _4 = const 1_i32;                // scope 1 at $DIR/tuple.rs:+2:13: +2:16\n+          StorageLive(_5);                 // scope 1 at $DIR/tuple.rs:+2:19: +2:22\n+-         _5 = (_1.1: i32);                // scope 1 at $DIR/tuple.rs:+2:19: +2:22\n+-         _3 = Add(move _4, move _5);      // scope 1 at $DIR/tuple.rs:+2:13: +2:22\n++         _5 = const 2_i32;                // scope 1 at $DIR/tuple.rs:+2:19: +2:22\n++         _3 = const 3_i32;                // scope 1 at $DIR/tuple.rs:+2:13: +2:22\n+          StorageDead(_5);                 // scope 1 at $DIR/tuple.rs:+2:21: +2:22\n+          StorageDead(_4);                 // scope 1 at $DIR/tuple.rs:+2:21: +2:22\n+-         _2 = Add(move _3, const 3_i32);  // scope 1 at $DIR/tuple.rs:+2:13: +2:26\n++         _2 = const 6_i32;                // scope 1 at $DIR/tuple.rs:+2:13: +2:26\n+          StorageDead(_3);                 // scope 1 at $DIR/tuple.rs:+2:25: +2:26\n+          Deinit(_1);                      // scope 2 at $DIR/tuple.rs:+3:5: +3:15\n+          (_1.0: i32) = const 2_i32;       // scope 2 at $DIR/tuple.rs:+3:5: +3:15\n+          (_1.1: i32) = const 3_i32;       // scope 2 at $DIR/tuple.rs:+3:5: +3:15\n+          StorageLive(_6);                 // scope 2 at $DIR/tuple.rs:+4:9: +4:10\n+          StorageLive(_7);                 // scope 2 at $DIR/tuple.rs:+4:13: +4:22\n+          StorageLive(_8);                 // scope 2 at $DIR/tuple.rs:+4:13: +4:16\n+-         _8 = (_1.0: i32);                // scope 2 at $DIR/tuple.rs:+4:13: +4:16\n++         _8 = const 2_i32;                // scope 2 at $DIR/tuple.rs:+4:13: +4:16\n+          StorageLive(_9);                 // scope 2 at $DIR/tuple.rs:+4:19: +4:22\n+-         _9 = (_1.1: i32);                // scope 2 at $DIR/tuple.rs:+4:19: +4:22\n+-         _7 = Add(move _8, move _9);      // scope 2 at $DIR/tuple.rs:+4:13: +4:22\n++         _9 = const 3_i32;                // scope 2 at $DIR/tuple.rs:+4:19: +4:22\n++         _7 = const 5_i32;                // scope 2 at $DIR/tuple.rs:+4:13: +4:22\n+          StorageDead(_9);                 // scope 2 at $DIR/tuple.rs:+4:21: +4:22\n+          StorageDead(_8);                 // scope 2 at $DIR/tuple.rs:+4:21: +4:22\n+          StorageLive(_10);                // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n+-         _10 = _2;                        // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n+-         _6 = Add(move _7, move _10);     // scope 2 at $DIR/tuple.rs:+4:13: +4:26\n++         _10 = const 6_i32;               // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n++         _6 = const 11_i32;               // scope 2 at $DIR/tuple.rs:+4:13: +4:26\n+          StorageDead(_10);                // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n+          StorageDead(_7);                 // scope 2 at $DIR/tuple.rs:+4:25: +4:26\n+          _0 = const ();                   // scope 0 at $DIR/tuple.rs:+0:11: +5:2\n+          StorageDead(_6);                 // scope 2 at $DIR/tuple.rs:+5:1: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/tuple.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/tuple.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/tuple.rs:+5:2: +5:2\n       }\n   }\n   "}, {"sha": "92c70eab0ff6f67d7b4af693a6068e67384f4090", "filename": "src/test/mir-opt/dataflow-const-prop/tuple.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbca6c75c1502b14ffda12afa2b688fe42288fc/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Ftuple.rs?ref=bfbca6c75c1502b14ffda12afa2b688fe42288fc", "patch": "@@ -1,12 +1,9 @@\n // unit-test: DataflowConstProp\n-// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR tuple.main.DataflowConstProp.diff\n fn main() {\n     let mut a = (1, 2);\n-    let mut b = &a;\n-    let c = a.0 + b.1 + 3;\n+    let b = a.0 + a.1 + 3;\n     a = (2, 3);\n-    b = &a;\n-    let d = a.0 + b.1 + 4;\n+    let c = a.0 + a.1 + b;\n }"}]}