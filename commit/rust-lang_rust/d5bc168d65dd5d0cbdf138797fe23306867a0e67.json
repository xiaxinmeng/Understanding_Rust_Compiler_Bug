{"sha": "d5bc168d65dd5d0cbdf138797fe23306867a0e67", "node_id": "C_kwDOAAsO6NoAKGQ1YmMxNjhkNjVkZDVkMGNiZGYxMzg3OTdmZTIzMzA2ODY3YTBlNjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-19T09:42:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-19T09:42:20Z"}, "message": "Rollup merge of #93051 - m-ou-se:is-some-with, r=yaahc\n\nAdd Option::is_some_with and Result::is_{ok,err}_with\n\nSee https://github.com/rust-lang/rust/issues/62358#issuecomment-1015827777", "tree": {"sha": "0ee230724c10223e30a4fe628748d36b1578475a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ee230724c10223e30a4fe628748d36b1578475a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5bc168d65dd5d0cbdf138797fe23306867a0e67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh59z8CRBK7hj4Ov3rIwAAZYoIAII/TXHYvcBMzt4k95K/nG/9\nH8IUNAiqykoY3AhaVAm/4RH91YzU6aax2nLcg3zsj3q/gfmr3A5v6oxtpvQViSx5\nsbV+lAuaxldVKzTnv66dmtldw0DlG0CY5gpps4M0IcqioWLo4/EFTKXz5Fo8IUPP\nyrRqpn76poeQ8JAXBovgK5qwtcSVZV9jZy3dQQbMsJCiZGVfr/986Z7ojAxLRs6O\n361KM5NhamDtF227Q+/AcwamAsJqC4tDtlb41G2nZS77vRCSTFny3qd2AyB6wvLg\nELTxTQwC7vOP2hFwNS7G0BTzYwIehMrl1t8ZAcmx1CqXP4R2JIPQ4IB3ZYXi8bk=\n=qL6W\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ee230724c10223e30a4fe628748d36b1578475a\nparent 0b9056c38aef4c4ffc3140802c70d6c3513dec06\nparent 5fee3e7a9c65445e3585eb4a162c774c788a02d5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642585340 +0100\ncommitter GitHub <noreply@github.com> 1642585340 +0100\n\nRollup merge of #93051 - m-ou-se:is-some-with, r=yaahc\n\nAdd Option::is_some_with and Result::is_{ok,err}_with\n\nSee https://github.com/rust-lang/rust/issues/62358#issuecomment-1015827777\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5bc168d65dd5d0cbdf138797fe23306867a0e67", "html_url": "https://github.com/rust-lang/rust/commit/d5bc168d65dd5d0cbdf138797fe23306867a0e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5bc168d65dd5d0cbdf138797fe23306867a0e67/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9056c38aef4c4ffc3140802c70d6c3513dec06", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9056c38aef4c4ffc3140802c70d6c3513dec06", "html_url": "https://github.com/rust-lang/rust/commit/0b9056c38aef4c4ffc3140802c70d6c3513dec06"}, {"sha": "5fee3e7a9c65445e3585eb4a162c774c788a02d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fee3e7a9c65445e3585eb4a162c774c788a02d5", "html_url": "https://github.com/rust-lang/rust/commit/5fee3e7a9c65445e3585eb4a162c774c788a02d5"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "611f4ab38ab334d713b677b6d3a4fc75277bf4be", "filename": "library/core/src/option.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d5bc168d65dd5d0cbdf138797fe23306867a0e67/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bc168d65dd5d0cbdf138797fe23306867a0e67/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=d5bc168d65dd5d0cbdf138797fe23306867a0e67", "patch": "@@ -551,6 +551,29 @@ impl<T> Option<T> {\n         matches!(*self, Some(_))\n     }\n \n+    /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(is_some_with)]\n+    ///\n+    /// let x: Option<u32> = Some(2);\n+    /// assert_eq!(x.is_some_with(|&x| x > 1), true);\n+    ///\n+    /// let x: Option<u32> = Some(0);\n+    /// assert_eq!(x.is_some_with(|&x| x > 1), false);\n+    ///\n+    /// let x: Option<u32> = None;\n+    /// assert_eq!(x.is_some_with(|&x| x > 1), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n+    pub fn is_some_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+        matches!(self, Some(x) if f(x))\n+    }\n+\n     /// Returns `true` if the option is a [`None`] value.\n     ///\n     /// # Examples"}, {"sha": "fbd6d419236ae110240b9eb4b91ebfd113d3d0dd", "filename": "library/core/src/result.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d5bc168d65dd5d0cbdf138797fe23306867a0e67/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5bc168d65dd5d0cbdf138797fe23306867a0e67/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=d5bc168d65dd5d0cbdf138797fe23306867a0e67", "patch": "@@ -542,6 +542,29 @@ impl<T, E> Result<T, E> {\n         matches!(*self, Ok(_))\n     }\n \n+    /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(is_some_with)]\n+    ///\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.is_ok_with(|&x| x > 1), true);\n+    ///\n+    /// let x: Result<u32, &str> = Ok(0);\n+    /// assert_eq!(x.is_ok_with(|&x| x > 1), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"hey\");\n+    /// assert_eq!(x.is_ok_with(|&x| x > 1), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n+    pub fn is_ok_with(&self, f: impl FnOnce(&T) -> bool) -> bool {\n+        matches!(self, Ok(x) if f(x))\n+    }\n+\n     /// Returns `true` if the result is [`Err`].\n     ///\n     /// # Examples\n@@ -563,6 +586,30 @@ impl<T, E> Result<T, E> {\n         !self.is_ok()\n     }\n \n+    /// Returns `true` if the result is [`Err`] wrapping a value matching the predicate.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(is_some_with)]\n+    /// use std::io::{Error, ErrorKind};\n+    ///\n+    /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::NotFound, \"!\"));\n+    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), true);\n+    ///\n+    /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::PermissionDenied, \"!\"));\n+    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), false);\n+    ///\n+    /// let x: Result<u32, Error> = Ok(123);\n+    /// assert_eq!(x.is_err_with(|x| x.kind() == ErrorKind::NotFound), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n+    pub fn is_err_with(&self, f: impl FnOnce(&E) -> bool) -> bool {\n+        matches!(self, Err(x) if f(x))\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////"}]}