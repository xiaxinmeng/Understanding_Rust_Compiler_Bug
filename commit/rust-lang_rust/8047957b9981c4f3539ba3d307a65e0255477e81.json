{"sha": "8047957b9981c4f3539ba3d307a65e0255477e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNDc5NTdiOTk4MWM0ZjM1MzliYTNkMzA3YTY1ZTAyNTU0NzdlODE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-07T20:37:40Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-07T20:37:40Z"}, "message": "Construct the wrappers to native functions. Hello world now works :-)", "tree": {"sha": "1eefefda4880b4bbe8d64ec4af5a21561123c7ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eefefda4880b4bbe8d64ec4af5a21561123c7ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8047957b9981c4f3539ba3d307a65e0255477e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8047957b9981c4f3539ba3d307a65e0255477e81", "html_url": "https://github.com/rust-lang/rust/commit/8047957b9981c4f3539ba3d307a65e0255477e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8047957b9981c4f3539ba3d307a65e0255477e81/comments", "author": null, "committer": null, "parents": [{"sha": "90f299e710c49d689d5bc815e32db375cca00394", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f299e710c49d689d5bc815e32db375cca00394", "html_url": "https://github.com/rust-lang/rust/commit/90f299e710c49d689d5bc815e32db375cca00394"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "61715fd2e329ea1015a993f167a7547e4c37f911", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8047957b9981c4f3539ba3d307a65e0255477e81/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8047957b9981c4f3539ba3d307a65e0255477e81/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8047957b9981c4f3539ba3d307a65e0255477e81", "patch": "@@ -4972,11 +4972,6 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n     let str s = cx.names.next(\"_rust_wrapper\") + sep() + name;\n     let ValueRef wrapper_fn = decl_fastcall_fn(cx.llmod, s, wrapper_type);\n \n-    // Build the wrapper.\n-    auto fcx = new_fn_ctxt(cx, wrapper_fn);\n-    auto bcx = new_top_block_ctxt(fcx);\n-    bcx.build.RetVoid();\n-\n     // Declare the global constant pair that points to it.\n     auto wrapper_pair_type = T_fn_pair(cx.tn, wrapper_type);\n     let str ps = cx.names.next(\"_rust_wrapper_pair\") + sep() + name;\n@@ -4985,7 +4980,40 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n \n     // Declare the function itself.\n     auto llfty = get_pair_fn_ty(node_type(cx, ann));\n-    decl_cdecl_fn(cx.llmod, name, llfty);\n+    auto function = decl_cdecl_fn(cx.llmod, name, llfty);\n+\n+    // Build the wrapper.\n+    auto fcx = new_fn_ctxt(cx, wrapper_fn);\n+    auto bcx = new_top_block_ctxt(fcx);\n+    auto fn_type = node_ann_type(cx, ann);\n+\n+    let vec[ValueRef] call_args = vec();\n+    auto abi = ty.ty_fn_abi(fn_type);\n+    auto arg_n = 3u;\n+    alt (abi) {\n+        case (ast.native_abi_rust) {\n+            call_args += vec(fcx.lltaskptr);\n+            auto num_ty_param = ty.count_ty_params(plain_ty(fn_type.struct));\n+            for each (uint i in _uint.range(0u, num_ty_param)) {\n+                auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n+                check (llarg as int != 0);\n+                call_args += vec(llarg);\n+                arg_n += 1u;\n+            }\n+        }\n+        case (ast.native_abi_cdecl) {\n+        }\n+    }\n+    auto args = ty.ty_fn_args(fn_type);\n+    for (ty.arg arg in args) {\n+        auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n+        check (llarg as int != 0);\n+        call_args += vec(llarg);\n+        arg_n += 1u;\n+    }\n+    auto r = bcx.build.Call(function, call_args);\n+    bcx.build.Store(r, fcx.llretptr);\n+    bcx.build.RetVoid();\n }\n \n fn collect_native_item(&@crate_ctxt cx, @ast.native_item i) -> @crate_ctxt {"}, {"sha": "62d9a2f057b202ef234cb91c7d8b4b6d2a04d559", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8047957b9981c4f3539ba3d307a65e0255477e81/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8047957b9981c4f3539ba3d307a65e0255477e81/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=8047957b9981c4f3539ba3d307a65e0255477e81", "patch": "@@ -645,6 +645,13 @@ fn ty_fn_proto(@t fty) -> ast.proto {\n     fail;\n }\n \n+fn ty_fn_abi(@t fty) -> ast.native_abi {\n+    alt (fty.struct) {\n+        case (ty.ty_native_fn(?a, _, _)) { ret a; }\n+    }\n+    fail;\n+}\n+\n fn ty_fn_ret(@t fty) -> @t {\n     alt (fty.struct) {\n         case (ty.ty_fn(_, _, ?r)) { ret r; }"}]}