{"sha": "fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNmRjOTU3ZDZmY2Q2NGYwMWZiYWY0M2VkOWIwNTlhZTY5NWU1YjQ=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-21T10:15:26Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-22T00:38:40Z"}, "message": "Remove remaining address space related code", "tree": {"sha": "57e5aec775a039247028df2f496e0f91e949dd27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57e5aec775a039247028df2f496e0f91e949dd27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "html_url": "https://github.com/rust-lang/rust/commit/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4/comments", "author": null, "committer": null, "parents": [{"sha": "761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "url": "https://api.github.com/repos/rust-lang/rust/commits/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54", "html_url": "https://github.com/rust-lang/rust/commit/761fc16c60507c1d8f1d56ccc3ae9b7fd4edbc54"}], "stats": {"total": 37, "additions": 4, "deletions": 33}, "files": [{"sha": "a6e8cf666daea630eb0dbd68391ac30ea5f525ad", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "patch": "@@ -1389,19 +1389,15 @@ pub fn compile_submatch(bcx: block,\n     if any_box_pat(m, col) {\n         bcx = root_pats_as_necessary(bcx, m, col, val);\n         let llbox = Load(bcx, val);\n-        let box_no_addrspace = non_gc_box_cast(bcx, llbox);\n-        let unboxed =\n-            GEPi(bcx, box_no_addrspace, [0u, abi::box_field_body]);\n+        let unboxed = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n         compile_submatch(bcx, enter_box(bcx, dm, m, col, val),\n                          vec::append(~[unboxed], vals_left), chk);\n         return;\n     }\n \n     if any_uniq_pat(m, col) {\n         let llbox = Load(bcx, val);\n-        let box_no_addrspace = non_gc_box_cast(bcx, llbox);\n-        let unboxed =\n-            GEPi(bcx, box_no_addrspace, [0u, abi::box_field_body]);\n+        let unboxed = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n         compile_submatch(bcx, enter_uniq(bcx, dm, m, col, val),\n                          vec::append(~[unboxed], vals_left), chk);\n         return;"}, {"sha": "7132af24d45a44defe3994730fb938d80504a8ed", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "patch": "@@ -279,18 +279,6 @@ pub fn malloc_raw_dyn(bcx: block,\n     r\n }\n \n-/**\n-* Get the type of a box in the default address space.\n-*\n-* Shared box pointers live in address space 1 so the GC strategy can find\n-* them. Before taking a pointer to the inside of a box it should be cast into\n-* address space 0. Otherwise the resulting (non-box) pointer will be in the\n-* wrong address space and thus be the wrong type.\n-*/\n-pub fn non_gc_box_cast(_: block, val: ValueRef) -> ValueRef {\n-    val\n-}\n-\n // malloc_raw: expects an unboxed type and returns a pointer to\n // enough space for a box of that type.  This includes a rust_opaque_box\n // header.\n@@ -312,8 +300,7 @@ pub fn malloc_general_dyn(bcx: block, t: ty::t, heap: heap, size: ValueRef)\n     -> MallocResult {\n     let _icx = push_ctxt(\"malloc_general\");\n     let Result {bcx: bcx, val: llbox} = malloc_raw_dyn(bcx, t, heap, size);\n-    let non_gc_box = non_gc_box_cast(bcx, llbox);\n-    let body = GEPi(bcx, non_gc_box, [0u, abi::box_field_body]);\n+    let body = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n \n     MallocResult { bcx: bcx, box: llbox, body: body }\n }\n@@ -1829,16 +1816,6 @@ pub fn trans_closure(ccx: @mut CrateContext,\n         set_fixed_stack_segment(fcx.llfn);\n     }\n \n-    // Set GC for function.\n-    if ccx.sess.opts.gc {\n-        do str::as_c_str(\"generic\") |strategy| {\n-            unsafe {\n-                llvm::LLVMSetGC(fcx.llfn, strategy);\n-            }\n-        }\n-        ccx.uses_gc = true;\n-    }\n-\n     // Create the first basic block in the function and keep a handle on it to\n     //  pass to finish_fn later.\n     let bcx_top = top_scope_block(fcx, body.info());"}, {"sha": "b35ec1c09b43c81bab478168be6a24cda71b49e5", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "patch": "@@ -375,8 +375,6 @@ pub fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n       ty::ty_box(body_mt) => {\n         let v = Load(bcx, v);\n         let body = GEPi(bcx, v, [0u, abi::box_field_body]);\n-        // Cast away the addrspace of the box pointer.\n-        let body = PointerCast(bcx, body, type_of(ccx, body_mt.ty).ptr_to());\n         let bcx = drop_ty(bcx, body, body_mt.ty);\n         trans_free(bcx, v)\n       }"}, {"sha": "d543b2cc61c067eea85b9223acd2361bda678aac", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "patch": "@@ -64,7 +64,7 @@ pub fn get_alloc(bcx: block, vptr: ValueRef) -> ValueRef {\n }\n \n pub fn get_bodyptr(bcx: block, vptr: ValueRef) -> ValueRef {\n-    base::non_gc_box_cast(bcx, GEPi(bcx, vptr, [0u, abi::box_field_body]))\n+    GEPi(bcx, vptr, [0u, abi::box_field_body])\n }\n \n pub fn get_dataptr(bcx: block, vptr: ValueRef) -> ValueRef {"}]}