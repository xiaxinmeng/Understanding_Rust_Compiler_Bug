{"sha": "a5655b81a3bad56beaa161662177192681832532", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NjU1YjgxYTNiYWQ1NmJlYWExNjE2NjIxNzcxOTI2ODE4MzI1MzI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-31T10:09:10Z"}, "committer": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2018-04-25T20:54:33Z"}, "message": "Move description of the Error trait to its own doc-comment\n\n\u2026 rather than the module\u2019s.\n\nRemove code definition of the Error trait from its doc-comment\n\nIt was out of date, and rustdoc already shows the same information.\n\nAdd a default impl for Error::description and document it as deprecated.\n\nIt is redundant with Display while being much less flexible for implementors.\n\nThis is only a \"soft\" deprecation: it is not worth the hassle of a warning to existing users.\n\nTweak Error trait docs to reflect actual requirements", "tree": {"sha": "9898ead30bb6b0f3c0c2eaec5ce4b95ff1c4def3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9898ead30bb6b0f3c0c2eaec5ce4b95ff1c4def3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5655b81a3bad56beaa161662177192681832532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5655b81a3bad56beaa161662177192681832532", "html_url": "https://github.com/rust-lang/rust/commit/a5655b81a3bad56beaa161662177192681832532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5655b81a3bad56beaa161662177192681832532/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5", "html_url": "https://github.com/rust-lang/rust/commit/25749ad66de71ffb46e6b04fb0cccf1ae4fc5ed5"}], "stats": {"total": 63, "additions": 24, "deletions": 39}, "files": [{"sha": "0954649653c17a682a3dd329bb51be949d02f796", "filename": "src/libstd/error.rs", "status": "modified", "additions": 24, "deletions": 39, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a5655b81a3bad56beaa161662177192681832532/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5655b81a3bad56beaa161662177192681832532/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=a5655b81a3bad56beaa161662177192681832532", "patch": "@@ -9,34 +9,6 @@\n // except according to those terms.\n \n //! Traits for working with Errors.\n-//!\n-//! # The `Error` trait\n-//!\n-//! `Error` is a trait representing the basic expectations for error values,\n-//! i.e. values of type `E` in [`Result<T, E>`]. At a minimum, errors must provide\n-//! a description, but they may optionally provide additional detail (via\n-//! [`Display`]) and cause chain information:\n-//!\n-//! ```\n-//! use std::fmt::Display;\n-//!\n-//! trait Error: Display {\n-//!     fn description(&self) -> &str;\n-//!\n-//!     fn cause(&self) -> Option<&Error> { None }\n-//! }\n-//! ```\n-//!\n-//! The [`cause`] method is generally used when errors cross \"abstraction\n-//! boundaries\", i.e.  when a one module must report an error that is \"caused\"\n-//! by an error from a lower-level module. This setup makes it possible for the\n-//! high-level module to provide its own errors that do not commit to any\n-//! particular implementation, but also reveal some of its implementation for\n-//! debugging via [`cause`] chains.\n-//!\n-//! [`Result<T, E>`]: ../result/enum.Result.html\n-//! [`Display`]: ../fmt/trait.Display.html\n-//! [`cause`]: trait.Error.html#method.cause\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -63,33 +35,46 @@ use num;\n use str;\n use string;\n \n-/// Base functionality for all errors in Rust.\n+/// `Error` is a trait representing the basic expectations for error values,\n+/// i.e. values of type `E` in [`Result<T, E>`]. Errors must describe\n+/// themselves through the [`Display`] and [`Debug`] traits, and may provide\n+/// cause chain information:\n+///\n+/// The [`cause`] method is generally used when errors cross \"abstraction\n+/// boundaries\", i.e.  when a one module must report an error that is \"caused\"\n+/// by an error from a lower-level module. This setup makes it possible for the\n+/// high-level module to provide its own errors that do not commit to any\n+/// particular implementation, but also reveal some of its implementation for\n+/// debugging via [`cause`] chains.\n+///\n+/// [`Result<T, E>`]: ../result/enum.Result.html\n+/// [`Display`]: ../fmt/trait.Display.html\n+/// [`cause`]: trait.Error.html#method.cause\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {\n-    /// A short description of the error.\n+    /// **This method is soft-deprecated.**\n     ///\n-    /// The description should only be used for a simple message.\n-    /// It should not contain newlines or sentence-ending punctuation,\n-    /// to facilitate embedding in larger user-facing strings.\n-    /// For showing formatted error messages with more information see\n-    /// [`Display`].\n+    /// Although using it won\u2019t cause compilation warning,\n+    /// new code should use [`Display`] instead\n+    /// and new `impl`s can omit it.\n     ///\n     /// [`Display`]: ../fmt/trait.Display.html\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::error::Error;\n-    ///\n     /// match \"xc\".parse::<u32>() {\n     ///     Err(e) => {\n-    ///         println!(\"Error: {}\", e.description());\n+    ///         // Print `e` itself, not `e.description()`.\n+    ///         println!(\"Error: {}\", e);\n     ///     }\n     ///     _ => println!(\"No error\"),\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn description(&self) -> &str;\n+    fn description(&self) -> &str {\n+        \"\"\n+    }\n \n     /// The lower-level cause of this error, if any.\n     ///"}]}