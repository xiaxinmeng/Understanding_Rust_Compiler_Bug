{"sha": "20c356263d14df237aa915dc255d55a6158a197d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYzM1NjI2M2QxNGRmMjM3YWE5MTVkYzI1NWQ1NWE2MTU4YTE5N2Q=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-14T05:16:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-14T05:16:20Z"}, "message": "Rollup merge of #66351 - JohnTitor:tweak-range-err-msg, r=Centril\n\nTweak non-char/numeric in range pattern diagnostic\n\nFixes #66283\n\nr? @estebank", "tree": {"sha": "0a5f3964fe7890db0e2737b41e5769dda12da5cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a5f3964fe7890db0e2737b41e5769dda12da5cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20c356263d14df237aa915dc255d55a6158a197d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzOMkCRBK7hj4Ov3rIwAAdHIIAGKNk/DG/RG2/o9TNoCx/Nvk\nibFawFcDaiueRT+d0ikzvPxttad4T1oJpG1o2W0LLAFr1kTrTIlxLDvYvlfyPVP6\nRCWx8e93WZO5xk6zs73dunKpd7LS3diQshtbcu2sF8KEF3n339UVvBMO3oUXgxdt\nAxv1osmwW6yr7jWXye9GOp5YIYPpTQMIZxMm0aMC5ImnEFJdQ+ftWkKTaz9tS1Le\nF2FkL0pdLN9fOXD+TruKjCyMHL18/hryVIb/7e7FiXahmdPLPkNjkDdIZ2sjYvjg\n65UXUAxOv3pxhI4CGK2tGYhtWEthT3FI6eKj19lBRR1z2P/QLz5d2HDq2L4Nce8=\n=H41H\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a5f3964fe7890db0e2737b41e5769dda12da5cb\nparent 2acbd3dd54ea06f05514c605f09bc41061a695d7\nparent 030fa9a337cb7f224c1d74fda04304c69e07787a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573708580 +0900\ncommitter GitHub <noreply@github.com> 1573708580 +0900\n\nRollup merge of #66351 - JohnTitor:tweak-range-err-msg, r=Centril\n\nTweak non-char/numeric in range pattern diagnostic\n\nFixes #66283\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20c356263d14df237aa915dc255d55a6158a197d", "html_url": "https://github.com/rust-lang/rust/commit/20c356263d14df237aa915dc255d55a6158a197d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20c356263d14df237aa915dc255d55a6158a197d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2acbd3dd54ea06f05514c605f09bc41061a695d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2acbd3dd54ea06f05514c605f09bc41061a695d7", "html_url": "https://github.com/rust-lang/rust/commit/2acbd3dd54ea06f05514c605f09bc41061a695d7"}, {"sha": "030fa9a337cb7f224c1d74fda04304c69e07787a", "url": "https://api.github.com/repos/rust-lang/rust/commits/030fa9a337cb7f224c1d74fda04304c69e07787a", "html_url": "https://github.com/rust-lang/rust/commit/030fa9a337cb7f224c1d74fda04304c69e07787a"}], "stats": {"total": 229, "additions": 123, "deletions": 106}, "files": [{"sha": "9421dbc2b2c766cfd8183a7a511a1ebc2e0f546f", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 61, "deletions": 29, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/20c356263d14df237aa915dc255d55a6158a197d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c356263d14df237aa915dc255d55a6158a197d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=20c356263d14df237aa915dc255d55a6158a197d", "patch": "@@ -362,37 +362,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || ty.is_char()\n             || ty.references_error()\n         };\n-        let lhs_compat = numeric_or_char(lhs_ty);\n-        let rhs_compat = numeric_or_char(rhs_ty);\n-\n-        if !lhs_compat || !rhs_compat {\n-            let span = if !lhs_compat && !rhs_compat {\n-                span\n-            } else if !lhs_compat {\n-                begin.span\n-            } else {\n-                end.span\n-            };\n+        let lhs_fail = !numeric_or_char(lhs_ty);\n+        let rhs_fail = !numeric_or_char(rhs_ty);\n \n-            let mut err = struct_span_err!(\n-                self.tcx.sess,\n-                span,\n-                E0029,\n-                \"only char and numeric types are allowed in range patterns\"\n+        if lhs_fail || rhs_fail {\n+            self.emit_err_pat_range(\n+                span, begin.span, end.span, lhs_fail, rhs_fail, lhs_ty, rhs_ty\n             );\n-            err.span_label(span, \"ranges require char or numeric types\");\n-            err.note(&format!(\"start type: {}\", self.ty_to_string(lhs_ty)));\n-            err.note(&format!(\"end type: {}\", self.ty_to_string(rhs_ty)));\n-            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                err.note(\n-                    \"In a match expression, only numbers and characters can be matched \\\n-                        against a range. This is because the compiler checks that the range \\\n-                        is non-empty at compile-time, and is unable to evaluate arbitrary \\\n-                        comparison functions. If you want to capture values of an orderable \\\n-                        type between two end-points, you can use a guard.\"\n-                    );\n-            }\n-            err.emit();\n             return None;\n         }\n \n@@ -406,6 +382,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         Some(common_type)\n     }\n \n+    fn emit_err_pat_range(\n+        &self,\n+        span: Span,\n+        begin_span: Span,\n+        end_span: Span,\n+        lhs_fail: bool,\n+        rhs_fail: bool,\n+        lhs_ty: Ty<'tcx>,\n+        rhs_ty: Ty<'tcx>,\n+    ) {\n+        let span = if lhs_fail && rhs_fail {\n+            span\n+        } else if lhs_fail {\n+            begin_span\n+        } else {\n+            end_span\n+        };\n+\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            span,\n+            E0029,\n+            \"only char and numeric types are allowed in range patterns\"\n+        );\n+        let msg = |ty| {\n+            format!(\"this is of type `{}` but it should be `char` or numeric\", ty)\n+        };\n+        let mut one_side_err = |first_span, first_ty, second_span, second_ty: Ty<'_>| {\n+            err.span_label(first_span, &msg(first_ty));\n+            if !second_ty.references_error() {\n+                err.span_label(\n+                    second_span,\n+                    &format!(\"this is of type `{}`\", second_ty)\n+                );\n+            }\n+        };\n+        if lhs_fail && rhs_fail {\n+            err.span_label(begin_span, &msg(lhs_ty));\n+            err.span_label(end_span, &msg(rhs_ty));\n+        } else if lhs_fail {\n+            one_side_err(begin_span, lhs_ty, end_span, rhs_ty);\n+        } else {\n+            one_side_err(end_span, rhs_ty, begin_span, lhs_ty);\n+        }\n+        if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+            err.note(\n+                \"In a match expression, only numbers and characters can be matched \\\n+                    against a range. This is because the compiler checks that the range \\\n+                    is non-empty at compile-time, and is unable to evaluate arbitrary \\\n+                    comparison functions. If you want to capture values of an orderable \\\n+                    type between two end-points, you can use a guard.\"\n+                );\n+        }\n+        err.emit();\n+    }\n+\n     fn check_pat_ident(\n         &self,\n         pat: &Pat,"}, {"sha": "ec146ca86f596e446a67ed524e3a381cd57a7c77", "filename": "src/test/ui/error-codes/E0029-teach.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr?ref=20c356263d14df237aa915dc255d55a6158a197d", "patch": "@@ -2,10 +2,11 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029-teach.rs:7:9\n    |\n LL |         \"hello\" ..= \"world\" => {}\n-   |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n+   |         -------^^^^^-------\n+   |         |           |\n+   |         |           this is of type `&'static str` but it should be `char` or numeric\n+   |         this is of type `&'static str` but it should be `char` or numeric\n    |\n-   = note: start type: &'static str\n-   = note: end type: &'static str\n    = note: In a match expression, only numbers and characters can be matched against a range. This is because the compiler checks that the range is non-empty at compile-time, and is unable to evaluate arbitrary comparison functions. If you want to capture values of an orderable type between two end-points, you can use a guard.\n \n error: aborting due to previous error"}, {"sha": "e54722ae7b9b8c04276bc0ca3ebadaeba5c69068", "filename": "src/test/ui/error-codes/E0029.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr?ref=20c356263d14df237aa915dc255d55a6158a197d", "patch": "@@ -2,10 +2,10 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029.rs:5:9\n    |\n LL |         \"hello\" ..= \"world\" => {}\n-   |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: &'static str\n-   = note: end type: &'static str\n+   |         -------^^^^^-------\n+   |         |           |\n+   |         |           this is of type `&'static str` but it should be `char` or numeric\n+   |         this is of type `&'static str` but it should be `char` or numeric\n \n error: aborting due to previous error\n "}, {"sha": "252d4cbf162415f67159b94f0a9a5af59cc4aeb6", "filename": "src/test/ui/match/match-range-fail.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs?ref=20c356263d14df237aa915dc255d55a6158a197d", "patch": "@@ -3,15 +3,16 @@ fn main() {\n         \"bar\" ..= \"foo\" => { }\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n-    //~| start type: &'static str\n-    //~| end type: &'static str\n \n     match \"wow\" {\n         10 ..= \"what\" => ()\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n-    //~| start type: {integer}\n-    //~| end type: &'static str\n+\n+    match \"wow\" {\n+        true ..= \"what\" => {}\n+    };\n+    //~^^ ERROR only char and numeric types are allowed in range\n \n     match 5 {\n         'c' ..= 100 => { }"}, {"sha": "25fa9c2f6182e8e58a47a1fe31dfc03bb16a98ba", "filename": "src/test/ui/match/match-range-fail.stderr", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr?ref=20c356263d14df237aa915dc255d55a6158a197d", "patch": "@@ -2,30 +2,38 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/match-range-fail.rs:3:9\n    |\n LL |         \"bar\" ..= \"foo\" => { }\n-   |         ^^^^^^^^^^^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: &'static str\n-   = note: end type: &'static str\n+   |         -----^^^^^-----\n+   |         |         |\n+   |         |         this is of type `&'static str` but it should be `char` or numeric\n+   |         this is of type `&'static str` but it should be `char` or numeric\n \n error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/match-range-fail.rs:10:16\n+  --> $DIR/match-range-fail.rs:8:16\n    |\n LL |         10 ..= \"what\" => ()\n-   |                ^^^^^^ ranges require char or numeric types\n+   |         --     ^^^^^^ this is of type `&'static str` but it should be `char` or numeric\n+   |         |\n+   |         this is of type `{integer}`\n+\n+error[E0029]: only char and numeric types are allowed in range patterns\n+  --> $DIR/match-range-fail.rs:13:9\n    |\n-   = note: start type: {integer}\n-   = note: end type: &'static str\n+LL |         true ..= \"what\" => {}\n+   |         ----^^^^^------\n+   |         |        |\n+   |         |        this is of type `&'static str` but it should be `char` or numeric\n+   |         this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n-  --> $DIR/match-range-fail.rs:17:9\n+  --> $DIR/match-range-fail.rs:18:9\n    |\n LL |         'c' ..= 100 => { }\n    |         ^^^^^^^^^^^ expected integer, found char\n    |\n    = note: expected type `{integer}`\n               found type `char`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0029, E0308.\n For more information about an error, try `rustc --explain E0029`."}, {"sha": "160ab18e34a54a1657714a9558bbbe2f3499f377", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 24, "deletions": 48, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=20c356263d14df237aa915dc255d55a6158a197d", "patch": "@@ -401,19 +401,17 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:19:12\n    |\n LL |     if let true..Y = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: u8\n+   |            ^^^^  - this is of type `u8`\n+   |            |\n+   |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:20:15\n    |\n LL |     if let X..true = 0 {}\n-   |               ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: u8\n-   = note: end type: bool\n+   |            -  ^^^^ this is of type `bool` but it should be `char` or numeric\n+   |            |\n+   |            this is of type `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:21:12\n@@ -437,19 +435,17 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:32:12\n    |\n LL |     if let true..=Y = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: u8\n+   |            ^^^^   - this is of type `u8`\n+   |            |\n+   |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:33:16\n    |\n LL |     if let X..=true = 0 {}\n-   |                ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: u8\n-   = note: end type: bool\n+   |            -   ^^^^ this is of type `bool` but it should be `char` or numeric\n+   |            |\n+   |            this is of type `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:34:12\n@@ -473,19 +469,17 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:45:12\n    |\n LL |     if let true...Y = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: u8\n+   |            ^^^^   - this is of type `u8`\n+   |            |\n+   |            this is of type `bool` but it should be `char` or numeric\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:47:16\n    |\n LL |     if let X...true = 0 {}\n-   |                ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: u8\n-   = note: end type: bool\n+   |            -   ^^^^ this is of type `bool` but it should be `char` or numeric\n+   |            |\n+   |            this is of type `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:49:12\n@@ -509,10 +503,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:60:12\n    |\n LL |     if let true.. = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: [type error]\n+   |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:62:12\n@@ -527,10 +518,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:70:12\n    |\n LL |     if let true..= = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: [type error]\n+   |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:72:12\n@@ -545,10 +533,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:82:12\n    |\n LL |     if let true... = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: bool\n-   = note: end type: [type error]\n+   |            ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:85:12\n@@ -563,10 +548,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:94:14\n    |\n LL |     if let ..true = 0 {}\n-   |              ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: bool\n+   |              ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:96:12\n@@ -581,10 +563,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:104:15\n    |\n LL |     if let ..=true = 0 {}\n-   |               ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: bool\n+   |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:106:12\n@@ -599,10 +578,7 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:116:15\n    |\n LL |     if let ...true = 0 {}\n-   |               ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: bool\n+   |               ^^^^ this is of type `bool` but it should be `char` or numeric\n \n error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:119:12"}, {"sha": "78768d282e7c44c1825afdefe05fa288325adba9", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr?ref=20c356263d14df237aa915dc255d55a6158a197d", "patch": "@@ -7,11 +7,11 @@ LL |     Arith = 1 + 1,\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/patkind-litrange-no-expr.rs:20:13\n    |\n+LL |                 $( $value ..= 42 => Some($name::$variant), )* // PatKind::Range\n+   |                               -- this is of type `{integer}`\n+...\n LL |     Arith = 1 + 1,\n-   |             ^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {integer}\n-   = note: end type: {integer}\n+   |             ^^^^^ this is of type `_` but it should be `char` or numeric\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7a74a37021bdbe064fac8959030863db732bfc22", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20c356263d14df237aa915dc255d55a6158a197d/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=20c356263d14df237aa915dc255d55a6158a197d", "patch": "@@ -8,10 +8,9 @@ error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/qualified-path-params.rs:22:15\n    |\n LL |         0 ..= <S as Tr>::A::f::<u8> => {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {integer}\n-   = note: end type: fn() {S::f::<u8>}\n+   |         -     ^^^^^^^^^^^^^^^^^^^^^ this is of type `fn() {S::f::<u8>}` but it should be `char` or numeric\n+   |         |\n+   |         this is of type `{integer}`\n \n error: aborting due to 2 previous errors\n "}]}