{"sha": "5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNjJiMjcxNmZiM2YxMWJjYmUwMGJkMzJjYTJjYTJiOWRlOTRhMTE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-26T03:05:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-26T03:05:56Z"}, "message": "Rollup merge of #41463 - SergioBenitez:master, r=alexcrichton\n\nAdd internal accessor methods to io::{Chain, Take}.\n\nResolves #29067.", "tree": {"sha": "23e730680bc0fd676a8b8455315e96ffc0544ca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e730680bc0fd676a8b8455315e96ffc0544ca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11", "html_url": "https://github.com/rust-lang/rust/commit/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a320c32edfae57ed81cc4ec8aae403a27c38ede", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a320c32edfae57ed81cc4ec8aae403a27c38ede", "html_url": "https://github.com/rust-lang/rust/commit/2a320c32edfae57ed81cc4ec8aae403a27c38ede"}, {"sha": "c168d8bb07392ca6c5e30c2cde1458c9e32bf03b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c168d8bb07392ca6c5e30c2cde1458c9e32bf03b", "html_url": "https://github.com/rust-lang/rust/commit/c168d8bb07392ca6c5e30c2cde1458c9e32bf03b"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "4a5d850d66dc7851922e38890b95084c6666c23b", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11", "patch": "@@ -160,6 +160,7 @@\n     - [linked_list_extras](library-features/linked-list-extras.md)\n     - [lookup_host](library-features/lookup-host.md)\n     - [manually_drop](library-features/manually-drop.md)\n+    - [more_io_inner_methods](library-features/more-io-inner-methods.md)\n     - [mpsc_select](library-features/mpsc-select.md)\n     - [n16](library-features/n16.md)\n     - [never_type_impls](library-features/never-type-impls.md)"}, {"sha": "c84f40e7ee551ffa53a4e3abb710f7cfef45432d", "filename": "src/doc/unstable-book/src/library-features/more-io-inner-methods.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fmore-io-inner-methods.md?ref=5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11", "patch": "@@ -0,0 +1,11 @@\n+# `more_io_inner_methods`\n+\n+The tracking issue for this feature is: [#41519]\n+\n+[#41519]: https://github.com/rust-lang/rust/issues/41519\n+\n+------------------------\n+\n+This feature enables several internal accessor methods on structures in\n+`std::io` including `Take::{get_ref, get_mut}` and `Chain::{into_inner, get_ref,\n+get_mut}`."}, {"sha": "e2832873e2e674a83d2e80d67503fd2ff83471ce", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=5f62b2716fb3f11bcbe00bd32ca2ca2b9de94a11", "patch": "@@ -1504,6 +1504,87 @@ pub struct Chain<T, U> {\n     done_first: bool,\n }\n \n+impl<T, U> Chain<T, U> {\n+    /// Consumes the `Chain`, returning the wrapped readers.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// # use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut foo_file = File::open(\"foo.txt\")?;\n+    /// let mut bar_file = File::open(\"bar.txt\")?;\n+    ///\n+    /// let chain = foo_file.chain(bar_file);\n+    /// let (foo_file, bar_file) = chain.into_inner();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn into_inner(self) -> (T, U) {\n+        (self.first, self.second)\n+    }\n+\n+    /// Gets references to the underlying readers in this `Chain`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// # use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut foo_file = File::open(\"foo.txt\")?;\n+    /// let mut bar_file = File::open(\"bar.txt\")?;\n+    ///\n+    /// let chain = foo_file.chain(bar_file);\n+    /// let (foo_file, bar_file) = chain.get_ref();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn get_ref(&self) -> (&T, &U) {\n+        (&self.first, &self.second)\n+    }\n+\n+    /// Gets mutable references to the underlying readers in this `Chain`.\n+    ///\n+    /// Care should be taken to avoid modifying the internal I/O state of the\n+    /// underlying readers as doing so may corrupt the internal state of this\n+    /// `Chain`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// # use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut foo_file = File::open(\"foo.txt\")?;\n+    /// let mut bar_file = File::open(\"bar.txt\")?;\n+    ///\n+    /// let mut chain = foo_file.chain(bar_file);\n+    /// let (foo_file, bar_file) = chain.get_mut();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn get_mut(&mut self) -> (&mut T, &mut U) {\n+        (&mut self.first, &mut self.second)\n+    }\n+}\n+\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl<T: fmt::Debug, U: fmt::Debug> fmt::Debug for Chain<T, U> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -1616,6 +1697,64 @@ impl<T> Take<T> {\n     pub fn into_inner(self) -> T {\n         self.inner\n     }\n+\n+    /// Gets a reference to the underlying reader.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    ///\n+    /// let mut buffer = [0; 5];\n+    /// let mut handle = file.take(5);\n+    /// handle.read(&mut buffer)?;\n+    ///\n+    /// let file = handle.get_ref();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn get_ref(&self) -> &T {\n+        &self.inner\n+    }\n+\n+    /// Gets a mutable reference to the underlying reader.\n+    ///\n+    /// Care should be taken to avoid modifying the internal I/O state of the\n+    /// underlying reader as doing so may corrupt the internal limit of this\n+    /// `Take`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(more_io_inner_methods)]\n+    ///\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    ///\n+    /// let mut buffer = [0; 5];\n+    /// let mut handle = file.take(5);\n+    /// handle.read(&mut buffer)?;\n+    ///\n+    /// let file = handle.get_mut();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"more_io_inner_methods\", issue=\"41519\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        &mut self.inner\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}