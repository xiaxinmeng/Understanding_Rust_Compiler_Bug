{"sha": "4158e58d79af7a538944c0acffbc0718551f221a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNThlNThkNzlhZjdhNTM4OTQ0YzBhY2ZmYmMwNzE4NTUxZjIyMWE=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-30T16:48:07Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-01T16:59:12Z"}, "message": "Enhance some comments", "tree": {"sha": "f406daa8bc335f39c3fc1c3da533f8ce998b9725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f406daa8bc335f39c3fc1c3da533f8ce998b9725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4158e58d79af7a538944c0acffbc0718551f221a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4158e58d79af7a538944c0acffbc0718551f221a", "html_url": "https://github.com/rust-lang/rust/commit/4158e58d79af7a538944c0acffbc0718551f221a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4158e58d79af7a538944c0acffbc0718551f221a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "354e510f7d9e9f19b5f3ff55da83658a260bca4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/354e510f7d9e9f19b5f3ff55da83658a260bca4f", "html_url": "https://github.com/rust-lang/rust/commit/354e510f7d9e9f19b5f3ff55da83658a260bca4f"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "c2b702f265b66715c05bd8f93f3f10920789a1ac", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4158e58d79af7a538944c0acffbc0718551f221a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4158e58d79af7a538944c0acffbc0718551f221a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=4158e58d79af7a538944c0acffbc0718551f221a", "patch": "@@ -584,6 +584,8 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 if borrowed_place_has_mut_interior {\n                     // Locals without StorageDead follow the \"enclosing scope\" rule, meaning\n                     // they are essentially anonymous static items themselves.\n+                    // Note: This is only sound if every local that has a `StorageDead` has a\n+                    // `StorageDead` in every control flow path leading to a `return` terminator.\n                     if self.local_has_storage_dead(place.local) {\n                         self.check_op(ops::CellBorrowBehindRef);\n                     } else {"}, {"sha": "f1ef541319a4bd277fa010e475c46f929c4639a8", "filename": "src/test/ui/consts/std/cell.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4158e58d79af7a538944c0acffbc0718551f221a/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4158e58d79af7a538944c0acffbc0718551f221a/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.rs?ref=4158e58d79af7a538944c0acffbc0718551f221a", "patch": "@@ -2,23 +2,28 @@\n \n use std::cell::*;\n \n-// not ok, because this would create a silent constant with interior mutability.\n-// the rules could be relaxed in the future\n+// not ok, because this creates a dangling pointer, just like `let x = Cell::new(42).as_ptr()` would\n static FOO: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n //~^ ERROR encountered dangling pointer\n const FOO_CONST: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n //~^ ERROR encountered dangling pointer\n \n+// Ok, these are just base values and it is the `Wrap` author's job to uphold `Send` and `Sync`\n+// invariants, since they used `unsafe impl`.\n static FOO3: Wrap<Cell<u32>> = Wrap(Cell::new(42));\n const FOO3_CONST: Wrap<Cell<u32>> = Wrap(Cell::new(42));\n \n-// ok\n+// ok, we are referring to the memory of another static item.\n static FOO4: Wrap<*mut u32> = Wrap(FOO3.0.as_ptr());\n+\n+// not ok, the use of a constant here is equivalent to an inline declaration of the value, so\n+// its memory will get freed before the constant is finished evaluating, thus creating a dangling\n+// pointer. This would happen exactly the same at runtime.\n const FOO4_CONST: Wrap<*mut u32> = Wrap(FOO3_CONST.0.as_ptr());\n //~^ ERROR encountered dangling pointer\n \n-// not ok, because the `as_ptr` call takes a reference to a type with interior mutability\n-// which is not allowed in constants\n+// not ok, because the `as_ptr` call takes a reference to a temporary that will get freed\n+// before the constant is finished evaluating.\n const FOO2: *mut u32 = Cell::new(42).as_ptr();\n //~^ ERROR encountered dangling pointer\n "}, {"sha": "355c326f0b6f12d6038f33c929e3ddc6f75df195", "filename": "src/test/ui/consts/std/cell.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4158e58d79af7a538944c0acffbc0718551f221a/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4158e58d79af7a538944c0acffbc0718551f221a/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fcell.stderr?ref=4158e58d79af7a538944c0acffbc0718551f221a", "patch": "@@ -1,23 +1,23 @@\n error: encountered dangling pointer in final constant\n-  --> $DIR/cell.rs:7:1\n+  --> $DIR/cell.rs:6:1\n    |\n LL | static FOO: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: encountered dangling pointer in final constant\n-  --> $DIR/cell.rs:9:1\n+  --> $DIR/cell.rs:8:1\n    |\n LL | const FOO_CONST: Wrap<*mut u32> = Wrap(Cell::new(42).as_ptr());\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: encountered dangling pointer in final constant\n-  --> $DIR/cell.rs:17:1\n+  --> $DIR/cell.rs:22:1\n    |\n LL | const FOO4_CONST: Wrap<*mut u32> = Wrap(FOO3_CONST.0.as_ptr());\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: encountered dangling pointer in final constant\n-  --> $DIR/cell.rs:22:1\n+  --> $DIR/cell.rs:27:1\n    |\n LL | const FOO2: *mut u32 = Cell::new(42).as_ptr();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}