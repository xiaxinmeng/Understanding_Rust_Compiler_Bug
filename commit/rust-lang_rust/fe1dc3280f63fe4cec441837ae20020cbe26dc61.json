{"sha": "fe1dc3280f63fe4cec441837ae20020cbe26dc61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMWRjMzI4MGY2M2ZlNGNlYzQ0MTgzN2FlMjAwMjBjYmUyNmRjNjE=", "commit": {"author": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-05-29T07:04:47Z"}, "committer": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-06-01T08:28:58Z"}, "message": "compiletest: improve exit code handling with adb_run_wrapper", "tree": {"sha": "58b371e5d7fa68953e78fed51284289fe40775b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58b371e5d7fa68953e78fed51284289fe40775b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe1dc3280f63fe4cec441837ae20020cbe26dc61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1dc3280f63fe4cec441837ae20020cbe26dc61", "html_url": "https://github.com/rust-lang/rust/commit/fe1dc3280f63fe4cec441837ae20020cbe26dc61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe1dc3280f63fe4cec441837ae20020cbe26dc61/comments", "author": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ea8274fcaf1585b597f80a3c9d2bbef83549932", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea8274fcaf1585b597f80a3c9d2bbef83549932", "html_url": "https://github.com/rust-lang/rust/commit/0ea8274fcaf1585b597f80a3c9d2bbef83549932"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "61371dd94d6c7292fd6204b2dffb4f53a199ff58", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fe1dc3280f63fe4cec441837ae20020cbe26dc61/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1dc3280f63fe4cec441837ae20020cbe26dc61/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=fe1dc3280f63fe4cec441837ae20020cbe26dc61", "patch": "@@ -753,6 +753,99 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n             copy_result.out, copy_result.err));\n     }\n \n+    logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n+\n+   \n+    let mut runargs = ~[];\n+    let mut exitcode : int = 1;\n+    let mut maxtry = 10;\n+\n+    // sometimes code generates exit code 1 which is \"1 : General unknown error\"\n+    // in this case, force to retry\n+//    while exitcode == 1 && maxtry > 0 {\n+        // since adb shell doesnot forward internal result (exit code) and \n+        // distingush stderr and stdout, adb_run_wrapper is used\n+\n+        runargs.push(~\"shell\");\n+        runargs.push(fmt!(\"%s/adb_run_wrapper.sh\", config.adb_test_dir));\n+        runargs.push(fmt!(\"%s\", prog_short));\n+\n+        for args.args.each |tv| {\n+            runargs.push(tv.to_owned());\n+        }\n+\n+        procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+        // get exitcode of result\n+        runargs = ~[];\n+\n+        runargs.push(~\"shell\");\n+        runargs.push(~\"cat\");\n+        runargs.push(fmt!(\"%s/%s.exitcode\", config.adb_test_dir, prog_short));\n+\n+        let procsrv::Result{ out: exitcode_out, err: exitcode_err, status: exitcode_status } =\n+            procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")],\n+                         Some(~\"\"));\n+\n+        exitcode = 0;\n+        for str::each_char(exitcode_out) |c| {\n+            if !char::is_digit(c) { break; }\n+            exitcode = exitcode * 10 + match c {\n+                '0' .. '9' => c as int - ('0' as int),\n+                _ => 0,\n+            }\n+        }\n+        maxtry = maxtry - 1;\n+//        unsafe { libc::sleep(1); }\n+//    }\n+\n+    // get stdout of result\n+    runargs = ~[]; \n+    runargs.push(~\"shell\");\n+    runargs.push(~\"cat\");\n+    runargs.push(fmt!(\"%s/%s.stdout\", config.adb_test_dir, prog_short));\n+\n+    let procsrv::Result{ out: stdout_out, err: stdout_err, status: stdout_status } =\n+            procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")],\n+                         Some(~\"\"));\n+\n+    // get stderr of result\n+    runargs = ~[]; \n+    runargs.push(~\"shell\");\n+    runargs.push(~\"cat\");\n+    runargs.push(fmt!(\"%s/%s.stderr\", config.adb_test_dir, prog_short));\n+\n+    let procsrv::Result{ out: stderr_out, err: stderr_err, status: stderr_status } =\n+            procsrv::run(\"\", config.adb_path, runargs, ~[(~\"\",~\"\")],\n+                         Some(~\"\"));\n+\n+    dump_output(config, testfile, stdout_out, stderr_out);\n+\n+    ProcRes {status: exitcode, stdout: stdout_out, stderr: stderr_out, cmdline: cmdline }\n+}\n+\n+fn _arm_exec_compiled_test2(config: &config, props: &TestProps,\n+                      testfile: &Path) -> ProcRes {\n+\n+    let args = make_run_args(config, props, testfile);\n+    let cmdline = make_cmdline(\"\", args.prog, args.args);\n+\n+    // get bare program string\n+    let mut tvec = ~[];\n+    for str::each_split_char(args.prog, '/') |ts| { tvec.push(ts.to_owned()) }\n+    let prog_short = tvec.pop();\n+\n+    // copy to target\n+    let copy_result = procsrv::run(\"\", config.adb_path,\n+        [~\"push\", copy args.prog, copy config.adb_test_dir],\n+        ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+    if config.verbose {\n+        io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n+            config.target, args.prog,\n+            copy_result.out, copy_result.err));\n+    }\n+\n     // execute program\n     logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n "}]}