{"sha": "d7ddb2abba435aae10d4357ae299876795749265", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZGRiMmFiYmE0MzVhYWUxMGQ0MzU3YWUyOTk4NzY3OTU3NDkyNjU=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-28T08:42:21Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-28T08:42:21Z"}, "message": "Add `use_self` comment", "tree": {"sha": "ac6cd9c3204b1f7d6e6f946b1dcb42a9d2a77fc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac6cd9c3204b1f7d6e6f946b1dcb42a9d2a77fc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7ddb2abba435aae10d4357ae299876795749265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ddb2abba435aae10d4357ae299876795749265", "html_url": "https://github.com/rust-lang/rust/commit/d7ddb2abba435aae10d4357ae299876795749265", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7ddb2abba435aae10d4357ae299876795749265/comments", "author": null, "committer": null, "parents": [{"sha": "8eeb3feadfb48298dcbf1e141626da65fb9458da", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eeb3feadfb48298dcbf1e141626da65fb9458da", "html_url": "https://github.com/rust-lang/rust/commit/8eeb3feadfb48298dcbf1e141626da65fb9458da"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "79da4c7d288d51afba0f642afa3a6c07a0f63dfb", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7ddb2abba435aae10d4357ae299876795749265/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7ddb2abba435aae10d4357ae299876795749265/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=d7ddb2abba435aae10d4357ae299876795749265", "patch": "@@ -130,6 +130,10 @@ fn check_trait_method_impl_decl<'a, 'tcx: 'a>(\n         None\n     };\n \n+    // `impl_decl_ty` (of type `hir::Ty`) represents the type declared in the signature.\n+    // `impl_ty` (of type `ty:TyS`) is the concrete type that the compiler has determined for\n+    // that declaration.  We use `impl_decl_ty` to see if the type was declared as `Self`\n+    // and use `impl_ty` to check its concrete type.\n     for (impl_decl_ty, (impl_ty, trait_ty)) in impl_decl.inputs.iter().chain(output_ty).zip(\n         impl_method_sig\n             .inputs_and_output"}]}