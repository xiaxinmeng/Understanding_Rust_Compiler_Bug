{"sha": "e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Y2NjNjgyNTQyZjlkNzdjNmMwMmJmNmU0NTIwNTM2YjdjNzY3YzU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-11T14:06:43Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-11T14:08:37Z"}, "message": "Thread `pure_wrt_drop` field through lifetime and type parameters.", "tree": {"sha": "e3ac9bb552d4455a3f99c25c96df5f57ce516ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ac9bb552d4455a3f99c25c96df5f57ce516ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "html_url": "https://github.com/rust-lang/rust/commit/e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb68be68106c655486a6a9d68780bd1b7cc9cd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb68be68106c655486a6a9d68780bd1b7cc9cd3", "html_url": "https://github.com/rust-lang/rust/commit/4bb68be68106c655486a6a9d68780bd1b7cc9cd3"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "3a06c6f3b96577df264f046ba431a9d19631b22c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "patch": "@@ -408,6 +408,7 @@ impl<'a> LoweringContext<'a> {\n             bounds: self.lower_bounds(&tp.bounds),\n             default: tp.default.as_ref().map(|x| self.lower_ty(x)),\n             span: tp.span,\n+            pure_wrt_drop: tp.attrs.iter().any(|attr| attr.check_name(\"may_dangle\")),\n         }\n     }\n \n@@ -427,6 +428,7 @@ impl<'a> LoweringContext<'a> {\n         hir::LifetimeDef {\n             lifetime: self.lower_lifetime(&l.lifetime),\n             bounds: self.lower_lifetimes(&l.bounds),\n+            pure_wrt_drop: l.attrs.iter().any(|attr| attr.check_name(\"may_dangle\")),\n         }\n     }\n "}, {"sha": "3ecb731b5ed74baf19417d4e8767d14d57d76f96", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "patch": "@@ -95,6 +95,7 @@ impl fmt::Debug for Lifetime {\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n     pub bounds: HirVec<Lifetime>,\n+    pub pure_wrt_drop: bool,\n }\n \n /// A \"Path\" is essentially Rust's notion of a name; for instance:\n@@ -290,6 +291,7 @@ pub struct TyParam {\n     pub bounds: TyParamBounds,\n     pub default: Option<P<Ty>>,\n     pub span: Span,\n+    pub pure_wrt_drop: bool,\n }\n \n /// Represents lifetimes and type parameters attached to a declaration"}, {"sha": "f4b19cdc8ad12e846dc153db501e4835ab628ef2", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "patch": "@@ -1226,16 +1226,17 @@ impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> {\n                          lifetime: hir::Lifetime,\n                          region_names: &HashSet<ast::Name>)\n                          -> hir::HirVec<hir::TyParam> {\n-        ty_params.iter().map(|ty_param| {\n-            let bounds = self.rebuild_ty_param_bounds(ty_param.bounds.clone(),\n+        ty_params.into_iter().map(|ty_param| {\n+            let bounds = self.rebuild_ty_param_bounds(ty_param.bounds,\n                                                       lifetime,\n                                                       region_names);\n             hir::TyParam {\n                 name: ty_param.name,\n                 id: ty_param.id,\n                 bounds: bounds,\n-                default: ty_param.default.clone(),\n+                default: ty_param.default,\n                 span: ty_param.span,\n+                pure_wrt_drop: ty_param.pure_wrt_drop,\n             }\n         }).collect()\n     }\n@@ -1295,7 +1296,9 @@ impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> {\n         let mut lifetimes = Vec::new();\n         for lt in add {\n             lifetimes.push(hir::LifetimeDef { lifetime: *lt,\n-                                              bounds: hir::HirVec::new() });\n+                                              bounds: hir::HirVec::new(),\n+                                              pure_wrt_drop: false,\n+            });\n         }\n         for lt in &generics.lifetimes {\n             if keep.contains(&lt.lifetime.name) ||"}, {"sha": "e1d8839bb37d890b3e46c72f0e17e136bc8f2bff", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "patch": "@@ -680,6 +680,11 @@ pub struct TypeParameterDef<'tcx> {\n     pub default_def_id: DefId, // for use in error reporing about defaults\n     pub default: Option<Ty<'tcx>>,\n     pub object_lifetime_default: ObjectLifetimeDefault<'tcx>,\n+\n+    /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute\n+    /// on generic parameter `T`, asserts data behind the parameter\n+    /// `T` won't be accessed during the parent type's `Drop` impl.\n+    pub pure_wrt_drop: bool,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n@@ -688,6 +693,11 @@ pub struct RegionParameterDef<'tcx> {\n     pub def_id: DefId,\n     pub index: u32,\n     pub bounds: Vec<&'tcx ty::Region>,\n+\n+    /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute\n+    /// on generic parameter `'a`, asserts data of lifetime `'a`\n+    /// won't be accessed during the parent type's `Drop` impl.\n+    pub pure_wrt_drop: bool,\n }\n \n impl<'tcx> RegionParameterDef<'tcx> {"}, {"sha": "40eb6d71280a67b5435d82e6ddf8ca4b193ff717", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "patch": "@@ -716,6 +716,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n             default: self.default.fold_with(folder),\n             default_def_id: self.default_def_id,\n             object_lifetime_default: self.object_lifetime_default.fold_with(folder),\n+            pure_wrt_drop: self.pure_wrt_drop,\n         }\n     }\n \n@@ -754,6 +755,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::RegionParameterDef<'tcx> {\n             def_id: self.def_id,\n             index: self.index,\n             bounds: self.bounds.fold_with(folder),\n+            pure_wrt_drop: self.pure_wrt_drop,\n         }\n     }\n "}, {"sha": "6e47f4ed8c6be5377805af332ded522cef221672", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ccc682542f9d77c6c02bf6e4520536b7c767c5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "patch": "@@ -1482,6 +1482,7 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                             default_def_id: tcx.map.local_def_id(parent),\n                             default: None,\n                             object_lifetime_default: ty::ObjectLifetimeDefault::BaseDefault,\n+                            pure_wrt_drop: false,\n                         };\n                         tcx.ty_param_defs.borrow_mut().insert(param_id, def.clone());\n                         opt_self = Some(def);\n@@ -1526,7 +1527,8 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 def_id: tcx.map.local_def_id(l.lifetime.id),\n                 bounds: l.bounds.iter().map(|l| {\n                     ast_region_to_region(tcx, l)\n-                }).collect()\n+                }).collect(),\n+                pure_wrt_drop: l.pure_wrt_drop,\n             }\n         }).collect::<Vec<_>>();\n \n@@ -1926,6 +1928,7 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         default_def_id: ccx.tcx.map.local_def_id(parent),\n         default: default,\n         object_lifetime_default: object_lifetime_default,\n+        pure_wrt_drop: param.pure_wrt_drop,\n     };\n \n     if def.name == keywords::SelfType.name() {"}]}