{"sha": "50ed1a507e2332ab5da715798a9f3fd1532bc8e1", "node_id": "C_kwDOAAsO6NoAKDUwZWQxYTUwN2UyMzMyYWI1ZGE3MTU3OThhOWYzZmQxNTMyYmM4ZTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T11:56:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T11:56:11Z"}, "message": "Auto merge of #12252 - Veykril:config, r=Veykril\n\ninternal: Make VSCode config more GUI edit friendly", "tree": {"sha": "0949ab58432188e072576ad3e1d11b9d5cd859db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0949ab58432188e072576ad3e1d11b9d5cd859db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ed1a507e2332ab5da715798a9f3fd1532bc8e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ed1a507e2332ab5da715798a9f3fd1532bc8e1", "html_url": "https://github.com/rust-lang/rust/commit/50ed1a507e2332ab5da715798a9f3fd1532bc8e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ed1a507e2332ab5da715798a9f3fd1532bc8e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06448c5548d5d15c1dbbb5d89ba951504762a05e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06448c5548d5d15c1dbbb5d89ba951504762a05e", "html_url": "https://github.com/rust-lang/rust/commit/06448c5548d5d15c1dbbb5d89ba951504762a05e"}, {"sha": "622defb3733d6d1c64d87fc488622ce5cc0875c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/622defb3733d6d1c64d87fc488622ce5cc0875c0", "html_url": "https://github.com/rust-lang/rust/commit/622defb3733d6d1c64d87fc488622ce5cc0875c0"}], "stats": {"total": 227, "additions": 106, "deletions": 121}, "files": [{"sha": "3e5561ad38925f3439f29da0fd5eb79ac06c77b0", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 53, "deletions": 54, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/50ed1a507e2332ab5da715798a9f3fd1532bc8e1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ed1a507e2332ab5da715798a9f3fd1532bc8e1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=50ed1a507e2332ab5da715798a9f3fd1532bc8e1", "patch": "@@ -109,7 +109,8 @@ config_data! {\n         ///\n         /// Set to `\"all\"` to pass `--all-features` to cargo.\n         checkOnSave_features: Option<CargoFeatures>      = \"null\",\n-        /// Do not activate the `default` feature.\n+        /// Whether to pass `--no-default-features` to cargo. Defaults to\n+        /// `#rust-analyzer.cargo.noDefaultFeatures#`.\n         checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n         /// Override the command rust-analyzer uses to  run build scripts and\n         /// build procedural macros. The command is required to output json\n@@ -134,7 +135,7 @@ config_data! {\n         /// with `self` prefixed to them when inside a method.\n         completion_autoself_enable: bool        = \"true\",\n         /// Whether to add parenthesis and argument snippets when completing function.\n-        completion_callable_snippets: Option<CallableCompletionDef>  = \"\\\"fill_arguments\\\"\",\n+        completion_callable_snippets: CallableCompletionDef  = \"\\\"fill_arguments\\\"\",\n         /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n         completion_postfix_enable: bool         = \"true\",\n         /// Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.\n@@ -1030,10 +1031,11 @@ impl Config {\n                 && completion_item_edit_resolve(&self.caps),\n             enable_self_on_the_fly: self.data.completion_autoself_enable,\n             enable_private_editable: self.data.completion_privateEditable_enable,\n-            callable: self.data.completion_callable_snippets.map(|it| match it {\n-                CallableCompletionDef::FillArguments => CallableSnippets::FillArguments,\n-                CallableCompletionDef::AddParentheses => CallableSnippets::AddParentheses,\n-            }),\n+            callable: match self.data.completion_callable_snippets {\n+                CallableCompletionDef::FillArguments => Some(CallableSnippets::FillArguments),\n+                CallableCompletionDef::AddParentheses => Some(CallableSnippets::AddParentheses),\n+                CallableCompletionDef::None => None,\n+            },\n             insert_use: self.insert_use_config(),\n             snippet_cap: SnippetCap::new(try_or_def!(\n                 self.caps\n@@ -1385,6 +1387,7 @@ enum ImportGranularityDef {\n enum CallableCompletionDef {\n     FillArguments,\n     AddParentheses,\n+    None,\n }\n \n #[derive(Deserialize, Debug, Clone)]\n@@ -1662,16 +1665,16 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"type\": \"string\",\n             \"enum\": [\"workspace\", \"workspace_and_dependencies\"],\n             \"enumDescriptions\": [\n-                \"Search in current workspace only\",\n-                \"Search in current workspace and dependencies\"\n+                \"Search in current workspace only.\",\n+                \"Search in current workspace and dependencies.\"\n             ],\n         },\n         \"WorkspaceSymbolSearchKindDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"only_types\", \"all_symbols\"],\n             \"enumDescriptions\": [\n-                \"Search for types only\",\n-                \"Search for all symbols kinds\"\n+                \"Search for types only.\",\n+                \"Search for all symbols kinds.\"\n             ],\n         },\n         \"ParallelCachePrimingNumThreads\" => set! {\n@@ -1680,47 +1683,46 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"maximum\": 255\n         },\n         \"LifetimeElisionDef\" => set! {\n-            \"anyOf\": [\n-                {\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"always\",\n-                        \"never\",\n-                        \"skip_trivial\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"Always show lifetime elision hints.\",\n-                        \"Never show lifetime elision hints.\",\n-                        \"Only show lifetime elision hints if a return type is involved.\"\n-                    ]\n-                },\n-                { \"type\": \"boolean\" }\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"always\",\n+                \"never\",\n+                \"skip_trivial\"\n             ],\n+            \"enumDescriptions\": [\n+                \"Always show lifetime elision hints.\",\n+                \"Never show lifetime elision hints.\",\n+                \"Only show lifetime elision hints if a return type is involved.\"\n+            ]\n         },\n         \"ReborrowHintsDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"always\",\n+                \"never\",\n+                \"mutable\"\n+            ],\n+            \"enumDescriptions\": [\n+                \"Always show reborrow hints.\",\n+                \"Never show reborrow hints.\",\n+                \"Only show mutable reborrow hints.\"\n+            ]\n+        },\n+        \"CargoFeatures\" => set! {\n             \"anyOf\": [\n                 {\n                     \"type\": \"string\",\n                     \"enum\": [\n-                        \"always\",\n-                        \"never\",\n-                        \"mutable\"\n+                        \"all\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"Always show reborrow hints.\",\n-                        \"Never show reborrow hints.\",\n-                        \"Only show mutable reborrow hints.\"\n+                        \"Pass `--all-features` to cargo\",\n                     ]\n                 },\n-                { \"type\": \"boolean\" }\n-            ],\n-        },\n-        \"CargoFeatures\" => set! {\n-            \"type\": [\"string\", \"array\"],\n-            \"items\": { \"type\": \"string\" },\n-            \"enum\": [\"all\"],\n-            \"enumDescriptions\": [\n-                \"Pass `--all-features` to cargo\",\n+                {\n+                    \"type\": \"array\",\n+                    \"items\": { \"type\": \"string\" }\n+                }\n             ],\n         },\n         \"Option<CargoFeatures>\" => set! {\n@@ -1741,21 +1743,18 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 { \"type\": \"null\" }\n             ],\n         },\n-        \"Option<CallableCompletionDef>\" => set! {\n-            \"anyOf\": [\n-                {\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"fill_arguments\",\n-                        \"add_parentheses\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"Add call parentheses and pre-fill arguments\",\n-                        \"Add call parentheses\"\n-                    ]\n-                },\n-                { \"type\": \"null\" }\n+        \"CallableCompletionDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"fill_arguments\",\n+                \"add_parentheses\",\n+                \"none\",\n             ],\n+            \"enumDescriptions\": [\n+                \"Add call parentheses and pre-fill arguments.\",\n+                \"Add call parentheses.\",\n+                \"Do no snippet completions for callables.\"\n+            ]\n         },\n         \"SignatureDetail\" => set! {\n             \"type\": \"string\","}, {"sha": "f2c8cb95c9b2edaff7fc051fd1f598b931bf44dd", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ed1a507e2332ab5da715798a9f3fd1532bc8e1/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/50ed1a507e2332ab5da715798a9f3fd1532bc8e1/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=50ed1a507e2332ab5da715798a9f3fd1532bc8e1", "patch": "@@ -104,7 +104,8 @@ Set to `\"all\"` to pass `--all-features` to cargo.\n [[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n +\n --\n-Do not activate the `default` feature.\n+Whether to pass `--no-default-features` to cargo. Defaults to\n+`#rust-analyzer.cargo.noDefaultFeatures#`.\n --\n [[rust-analyzer.checkOnSave.overrideCommand]]rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n +"}, {"sha": "08c5e729720818909b740b5d38899703ac591c86", "filename": "editors/code/package.json", "status": "modified", "additions": 51, "deletions": 66, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/50ed1a507e2332ab5da715798a9f3fd1532bc8e1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/50ed1a507e2332ab5da715798a9f3fd1532bc8e1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=50ed1a507e2332ab5da715798a9f3fd1532bc8e1", "patch": "@@ -423,18 +423,22 @@\n                 \"rust-analyzer.cargo.features\": {\n                     \"markdownDescription\": \"List of features to activate.\\n\\nSet this to `\\\"all\\\"` to pass `--all-features` to cargo.\",\n                     \"default\": [],\n-                    \"type\": [\n-                        \"string\",\n-                        \"array\"\n-                    ],\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    },\n-                    \"enum\": [\n-                        \"all\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"Pass `--all-features` to cargo\"\n+                    \"anyOf\": [\n+                        {\n+                            \"type\": \"string\",\n+                            \"enum\": [\n+                                \"all\"\n+                            ],\n+                            \"enumDescriptions\": [\n+                                \"Pass `--all-features` to cargo\"\n+                            ]\n+                        },\n+                        {\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"type\": \"string\"\n+                            }\n+                        }\n                     ]\n                 },\n                 \"rust-analyzer.cargo.noDefaultFeatures\": {\n@@ -513,7 +517,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n-                    \"markdownDescription\": \"Do not activate the `default` feature.\",\n+                    \"markdownDescription\": \"Whether to pass `--no-default-features` to cargo. Defaults to\\n`#rust-analyzer.cargo.noDefaultFeatures#`.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -552,21 +556,16 @@\n                 \"rust-analyzer.completion.callable.snippets\": {\n                     \"markdownDescription\": \"Whether to add parenthesis and argument snippets when completing function.\",\n                     \"default\": \"fill_arguments\",\n-                    \"anyOf\": [\n-                        {\n-                            \"type\": \"string\",\n-                            \"enum\": [\n-                                \"fill_arguments\",\n-                                \"add_parentheses\"\n-                            ],\n-                            \"enumDescriptions\": [\n-                                \"Add call parentheses and pre-fill arguments\",\n-                                \"Add call parentheses\"\n-                            ]\n-                        },\n-                        {\n-                            \"type\": \"null\"\n-                        }\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"fill_arguments\",\n+                        \"add_parentheses\",\n+                        \"none\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Add call parentheses and pre-fill arguments.\",\n+                        \"Add call parentheses.\",\n+                        \"Do no snippet completions for callables.\"\n                     ]\n                 },\n                 \"rust-analyzer.completion.postfix.enable\": {\n@@ -797,23 +796,16 @@\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\",\n-                    \"anyOf\": [\n-                        {\n-                            \"type\": \"string\",\n-                            \"enum\": [\n-                                \"always\",\n-                                \"never\",\n-                                \"skip_trivial\"\n-                            ],\n-                            \"enumDescriptions\": [\n-                                \"Always show lifetime elision hints.\",\n-                                \"Never show lifetime elision hints.\",\n-                                \"Only show lifetime elision hints if a return type is involved.\"\n-                            ]\n-                        },\n-                        {\n-                            \"type\": \"boolean\"\n-                        }\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"always\",\n+                        \"never\",\n+                        \"skip_trivial\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Always show lifetime elision hints.\",\n+                        \"Never show lifetime elision hints.\",\n+                        \"Only show lifetime elision hints if a return type is involved.\"\n                     ]\n                 },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames\": {\n@@ -838,23 +830,16 @@\n                 \"rust-analyzer.inlayHints.reborrowHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for compiler inserted reborrows.\",\n                     \"default\": \"never\",\n-                    \"anyOf\": [\n-                        {\n-                            \"type\": \"string\",\n-                            \"enum\": [\n-                                \"always\",\n-                                \"never\",\n-                                \"mutable\"\n-                            ],\n-                            \"enumDescriptions\": [\n-                                \"Always show reborrow hints.\",\n-                                \"Never show reborrow hints.\",\n-                                \"Only show mutable reborrow hints.\"\n-                            ]\n-                        },\n-                        {\n-                            \"type\": \"boolean\"\n-                        }\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"always\",\n+                        \"never\",\n+                        \"mutable\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Always show reborrow hints.\",\n+                        \"Never show reborrow hints.\",\n+                        \"Only show mutable reborrow hints.\"\n                     ]\n                 },\n                 \"rust-analyzer.inlayHints.renderColons\": {\n@@ -1065,8 +1050,8 @@\n                         \"all_symbols\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"Search for types only\",\n-                        \"Search for all symbols kinds\"\n+                        \"Search for types only.\",\n+                        \"Search for all symbols kinds.\"\n                     ]\n                 },\n                 \"rust-analyzer.workspace.symbol.search.limit\": {\n@@ -1084,8 +1069,8 @@\n                         \"workspace_and_dependencies\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"Search in current workspace only\",\n-                        \"Search in current workspace and dependencies\"\n+                        \"Search in current workspace only.\",\n+                        \"Search in current workspace and dependencies.\"\n                     ]\n                 },\n                 \"$generated-end\": {}"}]}