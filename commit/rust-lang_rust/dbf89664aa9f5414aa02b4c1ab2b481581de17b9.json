{"sha": "dbf89664aa9f5414aa02b4c1ab2b481581de17b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZjg5NjY0YWE5ZjU0MTRhYTAyYjRjMWFiMmI0ODE1ODFkZTE3Yjk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-28T02:36:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-14T21:52:06Z"}, "message": "core::rt: Move the implementation of IdleWatcher to its own file", "tree": {"sha": "908608985d9068a94ac11217482e0a42cff67d6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/908608985d9068a94ac11217482e0a42cff67d6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf89664aa9f5414aa02b4c1ab2b481581de17b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf89664aa9f5414aa02b4c1ab2b481581de17b9", "html_url": "https://github.com/rust-lang/rust/commit/dbf89664aa9f5414aa02b4c1ab2b481581de17b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf89664aa9f5414aa02b4c1ab2b481581de17b9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9138feab1509e930a811d5b727e5cad61e369852", "url": "https://api.github.com/repos/rust-lang/rust/commits/9138feab1509e930a811d5b727e5cad61e369852", "html_url": "https://github.com/rust-lang/rust/commit/9138feab1509e930a811d5b727e5cad61e369852"}], "stats": {"total": 155, "additions": 86, "deletions": 69}, "files": [{"sha": "aba5b3df9370e1b4537f35ce35e6a0bffbfbce90", "filename": "src/libcore/rt/uv/idle.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/dbf89664aa9f5414aa02b4c1ab2b481581de17b9/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf89664aa9f5414aa02b4c1ab2b481581de17b9/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fidle.rs?ref=dbf89664aa9f5414aa02b4c1ab2b481581de17b9", "patch": "@@ -0,0 +1,83 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use libc::c_int;\n+use option::{Option, Some, None};\n+use rt::uv::uvll;\n+use rt::uv::{Watcher, Callback, Loop, UvError, NativeHandle};\n+use rt::uv::status_to_maybe_uv_error;\n+\n+pub struct IdleWatcher(*uvll::uv_idle_t);\n+impl Watcher for IdleWatcher { }\n+\n+pub type IdleCallback = ~fn(IdleWatcher, Option<UvError>);\n+impl Callback for IdleCallback { }\n+\n+pub impl IdleWatcher {\n+    fn new(loop_: &mut Loop) -> IdleWatcher {\n+        unsafe {\n+            let handle = uvll::idle_new();\n+            assert!(handle.is_not_null());\n+            assert!(0 == uvll::idle_init(loop_.native_handle(), handle));\n+            let mut watcher: IdleWatcher = NativeHandle::from_native_handle(handle);\n+            watcher.install_watcher_data();\n+            return watcher\n+        }\n+    }\n+\n+    fn start(&mut self, cb: IdleCallback) {\n+        {\n+            let data = self.get_watcher_data();\n+            data.idle_cb = Some(cb);\n+        }\n+\n+        unsafe {\n+            assert!(0 == uvll::idle_start(self.native_handle(), idle_cb))\n+        };\n+\n+        extern fn idle_cb(handle: *uvll::uv_idle_t, status: c_int) {\n+            let mut idle_watcher: IdleWatcher = NativeHandle::from_native_handle(handle);\n+            let data = idle_watcher.get_watcher_data();\n+            let cb: &IdleCallback = data.idle_cb.get_ref();\n+            let status = status_to_maybe_uv_error(handle, status);\n+            (*cb)(idle_watcher, status);\n+        }\n+    }\n+\n+    fn stop(&mut self) {\n+        // NB: Not resetting the Rust idle_cb to None here because `stop` is likely\n+        // called from *within* the idle callback, causing a use after free\n+\n+        unsafe {\n+            assert!(0 == uvll::idle_stop(self.native_handle()));\n+        }\n+    }\n+\n+    fn close(self) {\n+        unsafe { uvll::close(self.native_handle(), close_cb) };\n+\n+        extern fn close_cb(handle: *uvll::uv_idle_t) {\n+            unsafe {\n+                let mut idle_watcher: IdleWatcher = NativeHandle::from_native_handle(handle);\n+                idle_watcher.drop_watcher_data();\n+                uvll::idle_delete(handle);\n+            }\n+        }\n+    }\n+}\n+\n+impl NativeHandle<*uvll::uv_idle_t> for IdleWatcher {\n+    fn from_native_handle(handle: *uvll::uv_idle_t) -> IdleWatcher {\n+        IdleWatcher(handle)\n+    }\n+    fn native_handle(&self) -> *uvll::uv_idle_t {\n+        match self { &IdleWatcher(ptr) => ptr }\n+    }\n+}"}, {"sha": "79eda96a25fe90856be2e2cf134f83aba78e70e3", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 2, "deletions": 69, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/dbf89664aa9f5414aa02b4c1ab2b481581de17b9/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf89664aa9f5414aa02b4c1ab2b481581de17b9/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=dbf89664aa9f5414aa02b4c1ab2b481581de17b9", "patch": "@@ -54,7 +54,7 @@ use rt::io::IoError;\n pub use self::file::{FsRequest, FsCallback};\n pub use self::net::{StreamWatcher, TcpWatcher};\n pub use self::net::{ReadCallback, AllocCallback, ConnectionCallback, ConnectCallback};\n-\n+pub use self::idle::{IdleWatcher, IdleCallback};\n \n /// The implementation of `rtio` for libuv\n pub mod uvio;\n@@ -64,6 +64,7 @@ pub mod uvll;\n \n pub mod file;\n pub mod net;\n+pub mod idle;\n \n /// A trait for callbacks to implement. Provides a little extra type safety\n /// for generic, unsafe interop functions like `set_watcher_callback`.\n@@ -120,74 +121,6 @@ impl NativeHandle<*uvll::uv_loop_t> for Loop {\n     }\n }\n \n-pub struct IdleWatcher(*uvll::uv_idle_t);\n-impl Watcher for IdleWatcher { }\n-\n-pub type IdleCallback = ~fn(IdleWatcher, Option<UvError>);\n-impl Callback for IdleCallback { }\n-\n-pub impl IdleWatcher {\n-    fn new(loop_: &mut Loop) -> IdleWatcher {\n-        unsafe {\n-            let handle = uvll::idle_new();\n-            assert!(handle.is_not_null());\n-            assert!(0 == uvll::idle_init(loop_.native_handle(), handle));\n-            let mut watcher: IdleWatcher = NativeHandle::from_native_handle(handle);\n-            watcher.install_watcher_data();\n-            return watcher\n-        }\n-    }\n-\n-    fn start(&mut self, cb: IdleCallback) {\n-        {\n-            let data = self.get_watcher_data();\n-            data.idle_cb = Some(cb);\n-        }\n-\n-        unsafe {\n-            assert!(0 == uvll::idle_start(self.native_handle(), idle_cb))\n-        };\n-\n-        extern fn idle_cb(handle: *uvll::uv_idle_t, status: c_int) {\n-            let mut idle_watcher: IdleWatcher = NativeHandle::from_native_handle(handle);\n-            let data = idle_watcher.get_watcher_data();\n-            let cb: &IdleCallback = data.idle_cb.get_ref();\n-            let status = status_to_maybe_uv_error(handle, status);\n-            (*cb)(idle_watcher, status);\n-        }\n-    }\n-\n-    fn stop(&mut self) {\n-        // NB: Not resetting the Rust idl_cb to None here because `stop` is likely\n-        // called from *within* the idle callback, which would cause a use after free\n-\n-        unsafe {\n-            assert!(0 == uvll::idle_stop(self.native_handle()));\n-        }\n-    }\n-\n-    fn close(self) {\n-        unsafe { uvll::close(self.native_handle(), close_cb) };\n-\n-        extern fn close_cb(handle: *uvll::uv_idle_t) {\n-            unsafe {\n-                let mut idle_watcher: IdleWatcher = NativeHandle::from_native_handle(handle);\n-                idle_watcher.drop_watcher_data();\n-                uvll::idle_delete(handle);\n-            }\n-        }\n-    }\n-}\n-\n-impl NativeHandle<*uvll::uv_idle_t> for IdleWatcher {\n-    fn from_native_handle(handle: *uvll::uv_idle_t) -> IdleWatcher {\n-        IdleWatcher(handle)\n-    }\n-    fn native_handle(&self) -> *uvll::uv_idle_t {\n-        match self { &IdleWatcher(ptr) => ptr }\n-    }\n-}\n-\n /// Callbacks used by StreamWatchers, set as custom data on the foreign handle\n struct WatcherData {\n     read_cb: Option<ReadCallback>,"}, {"sha": "0c52bca0dc83a7d8d7737abe7b2de911a2a511d8", "filename": "src/libcore/rt/uv/uvio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbf89664aa9f5414aa02b4c1ab2b481581de17b9/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf89664aa9f5414aa02b4c1ab2b481581de17b9/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=dbf89664aa9f5414aa02b4c1ab2b481581de17b9", "patch": "@@ -17,6 +17,7 @@ use cast::transmute;\n use rt::io::IoError;\n use rt::io::net::ip::IpAddr;\n use rt::uv::*;\n+use rt::uv::idle::IdleWatcher;\n use rt::rtio::*;\n use rt::sched::{Scheduler, local_sched};\n use rt::io::{standard_error, OtherIoError};"}]}