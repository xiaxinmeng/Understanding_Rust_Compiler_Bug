{"sha": "375c87820f97c03fec4ec1a23803b00df1b1d5dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NWM4NzgyMGY5N2MwM2ZlYzRlYzFhMjM4MDNiMDBkZjFiMWQ1ZGM=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-09T19:47:32Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-09T19:47:32Z"}, "message": "rewrite_string: detect when a url is being split and place the new line\nafter it", "tree": {"sha": "b91bef83b43c6cfa1f605747d32d350debcd8984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b91bef83b43c6cfa1f605747d32d350debcd8984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375c87820f97c03fec4ec1a23803b00df1b1d5dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlu9Bw4ACgkQbVYg2Qgh\nATN/pwgArcss8dO12I+G1ywhqffOufd3lljY5E3MuQ2ANTtI1r2fB7zL+bwKhiiU\nbT1/PwrGZAuhaf7ssG0wqJ6DkINWcSgSLhtMC8irMJE2WElHJv3qW8VvdwSXpHHN\nQwKh9Wz2xemKayFTP0JWRuku18cLnk0wQaSldOiJAEBQe2PvHGoeZB3d0Q+DlRGO\nF0M3QzemG28KUyM6wuzOYru6MkKRdyPtE1ovrdx1f5SYqRETBeMIlaMeu0lHnqSZ\n0GwFs8cpOsvE/PDkNM+JzmM06Npps+TKp53aM9/Ta8uW9PRuQ/OOW3Pg+vpMDS/7\neZNUhJW/ofo0/OwKj8soQE0Tyx1ywg==\n=67XF\n-----END PGP SIGNATURE-----", "payload": "tree b91bef83b43c6cfa1f605747d32d350debcd8984\nparent c0b7222e2d33843102060d222fbe60a55ec438b5\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539114452 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539114452 +0200\n\nrewrite_string: detect when a url is being split and place the new line\nafter it\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375c87820f97c03fec4ec1a23803b00df1b1d5dc", "html_url": "https://github.com/rust-lang/rust/commit/375c87820f97c03fec4ec1a23803b00df1b1d5dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375c87820f97c03fec4ec1a23803b00df1b1d5dc/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b7222e2d33843102060d222fbe60a55ec438b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b7222e2d33843102060d222fbe60a55ec438b5", "html_url": "https://github.com/rust-lang/rust/commit/c0b7222e2d33843102060d222fbe60a55ec438b5"}], "stats": {"total": 149, "additions": 147, "deletions": 2}, "files": [{"sha": "2fe13db2139cf46d1077af470c9be1dacbedc2a4", "filename": "src/string.rs", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/375c87820f97c03fec4ec1a23803b00df1b1d5dc/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c87820f97c03fec4ec1a23803b00df1b1d5dc/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=375c87820f97c03fec4ec1a23803b00df1b1d5dc", "patch": "@@ -158,6 +158,31 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     wrap_str(result, fmt.config.max_width(), fmt.shape)\n }\n \n+/// Returns the index to the end of the url if the given string includes an\n+/// URL or alike. Otherwise, returns None;\n+fn detect_url(s: &[&str], index: usize) -> Option<usize> {\n+    let start = match s[..=index].iter().rposition(|g| is_whitespace(g)) {\n+        Some(pos) => pos + 1,\n+        None => 0,\n+    };\n+    if s.len() < start + 8 {\n+        return None;\n+    }\n+    let prefix = s[start..start + 8].join(\"\");\n+    if prefix.starts_with(\"https://\")\n+        || prefix.starts_with(\"http://\")\n+        || prefix.starts_with(\"ftp://\")\n+        || prefix.starts_with(\"file://\")\n+    {\n+        match s[index..].iter().position(|g| is_whitespace(g)) {\n+            Some(pos) => Some(index + pos - 1),\n+            None => Some(s.len() - 1),\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n /// Trims whitespaces to the right except for the line feed character.\n fn trim_right_but_line_feed(trim_end: bool, result: String) -> String {\n     let whitespace_except_line_feed = |c: char| c.is_whitespace() && c != '\\n';\n@@ -193,13 +218,16 @@ enum SnippetState {\n     EndWithLineFeed(String, usize),\n }\n \n+fn not_whitespace_except_line_feed(g: &str) -> bool {\n+    is_line_feed(g) || !is_whitespace(g)\n+}\n+\n /// Break the input string at a boundary character around the offset `max_chars`. A boundary\n /// character is either a punctuation or a whitespace.\n fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]) -> SnippetState {\n     let break_at = |index /* grapheme at index is included */| {\n         // Take in any whitespaces to the left/right of `input[index]` while\n         // preserving line feeds\n-        let not_whitespace_except_line_feed = |g| is_line_feed(g) || !is_whitespace(g);\n         let index_minus_ws = input[0..=index]\n             .iter()\n             .rposition(|grapheme| not_whitespace_except_line_feed(grapheme))\n@@ -258,6 +286,24 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n         // - extra whitespaces to the right can be trimmed\n         return break_at(max_chars - 1);\n     }\n+    if let Some(url_index_end) = detect_url(input, max_chars) {\n+        let index_plus_ws = url_index_end + input[url_index_end..]\n+            .iter()\n+            .skip(1)\n+            .position(|grapheme| not_whitespace_except_line_feed(grapheme))\n+            .unwrap_or(0);\n+        return if trim_end {\n+            SnippetState::LineEnd(\n+                input[..=url_index_end].join(\"\").to_string(),\n+                index_plus_ws + 1,\n+            )\n+        } else {\n+            return SnippetState::LineEnd(\n+                input[..=index_plus_ws].join(\"\").to_string(),\n+                index_plus_ws + 1,\n+            );\n+        };\n+    }\n     match input[0..max_chars]\n         .iter()\n         .rposition(|grapheme| is_whitespace(grapheme))\n@@ -303,7 +349,7 @@ fn is_punctuation(grapheme: &str) -> bool {\n \n #[cfg(test)]\n mod test {\n-    use super::{break_string, rewrite_string, SnippetState, StringFormat};\n+    use super::{break_string, detect_url, rewrite_string, SnippetState, StringFormat};\n     use config::Config;\n     use shape::{Indent, Shape};\n     use unicode_segmentation::UnicodeSegmentation;\n@@ -610,4 +656,31 @@ mod test {\n             Some(\"Vestibulum\\\\\\n    // ac lacus.\".to_string())\n         );\n     }\n+\n+    #[test]\n+    fn detect_urls() {\n+        let string = \"aaa http://example.org something\";\n+        let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n+        assert_eq!(detect_url(&graphemes, 8), Some(21));\n+\n+        let string = \"https://example.org something\";\n+        let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n+        assert_eq!(detect_url(&graphemes, 0), Some(18));\n+\n+        let string = \"aaa ftp://example.org something\";\n+        let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n+        assert_eq!(detect_url(&graphemes, 8), Some(20));\n+\n+        let string = \"aaa file://example.org something\";\n+        let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n+        assert_eq!(detect_url(&graphemes, 8), Some(21));\n+\n+        let string = \"aaa http not an url\";\n+        let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n+        assert_eq!(detect_url(&graphemes, 6), None);\n+\n+        let string = \"aaa file://example.org\";\n+        let graphemes = UnicodeSegmentation::graphemes(&*string, false).collect::<Vec<&str>>();\n+        assert_eq!(detect_url(&graphemes, 8), Some(21));\n+    }\n }"}, {"sha": "f99c2cc5ff9cf8ff851434b903dbfd06836eb07a", "filename": "tests/source/itemized-blocks/rewrite_fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/375c87820f97c03fec4ec1a23803b00df1b1d5dc/tests%2Fsource%2Fitemized-blocks%2Frewrite_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c87820f97c03fec4ec1a23803b00df1b1d5dc/tests%2Fsource%2Fitemized-blocks%2Frewrite_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitemized-blocks%2Frewrite_fail.rs?ref=375c87820f97c03fec4ec1a23803b00df1b1d5dc", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-max_width: 50\n+\n+// This example shows how to configure fern to output really nicely colored logs\n+// - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \n+//   - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \n+//     - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \n+//     - when the log level is info, the level name is green and the rest of the line is white\n+//   - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \n+//   - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa \n+fn func1() {}"}, {"sha": "2eaaafbbc4aa622d091f4e3f69599d3dbf9c57d0", "filename": "tests/source/itemized-blocks/urls.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/375c87820f97c03fec4ec1a23803b00df1b1d5dc/tests%2Fsource%2Fitemized-blocks%2Furls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c87820f97c03fec4ec1a23803b00df1b1d5dc/tests%2Fsource%2Fitemized-blocks%2Furls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitemized-blocks%2Furls.rs?ref=375c87820f97c03fec4ec1a23803b00df1b1d5dc", "patch": "@@ -0,0 +1,22 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-max_width: 79\n+\n+//! CMSIS: Cortex Microcontroller Software Interface Standard\n+//!\n+//! The version 5 of the standard can be found at:\n+//!\n+//! http://arm-software.github.io/CMSIS_5/Core/html/index.html\n+//!\n+//! The API reference of the standard can be found at:\n+//!\n+//! - example -- http://example.org -- something something something something something something\n+//! - something something something something something something more -- http://example.org\n+//! - http://example.org/something/something/something/something/something/something and the rest\n+//! - Core function access -- http://arm-software.github.io/CMSIS_5/Core/html/group__Core__Register__gr.html\n+//! - Intrinsic functions for CPU instructions -- http://arm-software.github.io/CMSIS_5/Core/html/group__intrinsic__CPU__gr.html\n+//! - Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Vestibulum sem lacus, commodo vitae.\n+//!\n+//! The reference C implementation used as the base of this Rust port can be\n+//! found at\n+//!\n+//! https://github.com/ARM-software/CMSIS_5/blob/5.3.0/CMSIS/Core/Include/cmsis_gcc.h"}, {"sha": "a118ef6faa18487b869370d019a03413c7cfb6dd", "filename": "tests/target/itemized-blocks/rewrite_fail.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/375c87820f97c03fec4ec1a23803b00df1b1d5dc/tests%2Ftarget%2Fitemized-blocks%2Frewrite_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c87820f97c03fec4ec1a23803b00df1b1d5dc/tests%2Ftarget%2Fitemized-blocks%2Frewrite_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitemized-blocks%2Frewrite_fail.rs?ref=375c87820f97c03fec4ec1a23803b00df1b1d5dc", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-max_width: 50\n+\n+// This example shows how to configure fern to\n+// output really nicely colored logs\n+// - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+//   - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+//     - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+//     - when the log level is info, the level\n+//       name is green and the rest of the line is\n+//       white\n+//   - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+//   - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+fn func1() {}"}, {"sha": "bc46ea47e164f0035a1b79a8beca1803dde86661", "filename": "tests/target/itemized-blocks/urls.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/375c87820f97c03fec4ec1a23803b00df1b1d5dc/tests%2Ftarget%2Fitemized-blocks%2Furls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375c87820f97c03fec4ec1a23803b00df1b1d5dc/tests%2Ftarget%2Fitemized-blocks%2Furls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitemized-blocks%2Furls.rs?ref=375c87820f97c03fec4ec1a23803b00df1b1d5dc", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-max_width: 79\n+\n+//! CMSIS: Cortex Microcontroller Software Interface Standard\n+//!\n+//! The version 5 of the standard can be found at:\n+//!\n+//! http://arm-software.github.io/CMSIS_5/Core/html/index.html\n+//!\n+//! The API reference of the standard can be found at:\n+//!\n+//! - example -- http://example.org -- something something something something\n+//!   something something\n+//! - something something something something something something more -- http://example.org\n+//! - http://example.org/something/something/something/something/something/something\n+//!   and the rest\n+//! - Core function access -- http://arm-software.github.io/CMSIS_5/Core/html/group__Core__Register__gr.html\n+//! - Intrinsic functions for CPU instructions -- http://arm-software.github.io/CMSIS_5/Core/html/group__intrinsic__CPU__gr.html\n+//! - Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Vestibulum sem\n+//!   lacus, commodo vitae.\n+//!\n+//! The reference C implementation used as the base of this Rust port can be\n+//! found at\n+//!\n+//! https://github.com/ARM-software/CMSIS_5/blob/5.3.0/CMSIS/Core/Include/cmsis_gcc.h"}]}