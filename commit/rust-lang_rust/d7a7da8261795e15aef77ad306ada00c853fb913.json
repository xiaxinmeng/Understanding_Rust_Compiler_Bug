{"sha": "d7a7da8261795e15aef77ad306ada00c853fb913", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTdkYTgyNjE3OTVlMTVhZWY3N2FkMzA2YWRhMDBjODUzZmI5MTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T07:39:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T07:39:12Z"}, "message": "don't add macro braces in use items", "tree": {"sha": "52e9b89dcbe748c3d1c2136b8d91cd6135c5f129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e9b89dcbe748c3d1c2136b8d91cd6135c5f129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a7da8261795e15aef77ad306ada00c853fb913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a7da8261795e15aef77ad306ada00c853fb913", "html_url": "https://github.com/rust-lang/rust/commit/d7a7da8261795e15aef77ad306ada00c853fb913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a7da8261795e15aef77ad306ada00c853fb913/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e38cdf6e56d963525fcc656b80965e7114756496", "url": "https://api.github.com/repos/rust-lang/rust/commits/e38cdf6e56d963525fcc656b80965e7114756496", "html_url": "https://github.com/rust-lang/rust/commit/e38cdf6e56d963525fcc656b80965e7114756496"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "f7e98e6df2dec61f60eb51f079e68ead31cfc45b", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 53, "deletions": 17, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d7a7da8261795e15aef77ad306ada00c853fb913/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a7da8261795e15aef77ad306ada00c853fb913/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=d7a7da8261795e15aef77ad306ada00c853fb913", "patch": "@@ -164,27 +164,32 @@ impl Completions {\n         name: Option<String>,\n         macro_: hir::MacroDef,\n     ) {\n+        let name = match name {\n+            Some(it) => it,\n+            None => return,\n+        };\n+\n         let ast_node = macro_.source(ctx.db).ast;\n-        if let Some(name) = name {\n-            let detail = macro_label(&ast_node);\n+        let detail = macro_label(&ast_node);\n+\n+        let docs = macro_.docs(ctx.db);\n+        let macro_declaration = format!(\"{}!\", name);\n+\n+        let mut builder =\n+            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), &macro_declaration)\n+                .kind(CompletionItemKind::Macro)\n+                .set_documentation(docs.clone())\n+                .detail(detail);\n \n-            let docs = macro_.docs(ctx.db);\n+        builder = if ctx.use_item_syntax.is_some() {\n+            builder.insert_text(name)\n+        } else {\n             let macro_braces_to_insert =\n                 self.guess_macro_braces(&name, docs.as_ref().map_or(\"\", |s| s.as_str()));\n-            let macro_declaration = name + \"!\";\n-\n-            let builder = CompletionItem::new(\n-                CompletionKind::Reference,\n-                ctx.source_range(),\n-                &macro_declaration,\n-            )\n-            .kind(CompletionItemKind::Macro)\n-            .set_documentation(docs)\n-            .detail(detail)\n-            .insert_snippet(macro_declaration + macro_braces_to_insert);\n+            builder.insert_snippet(macro_declaration + macro_braces_to_insert)\n+        };\n \n-            self.add(builder);\n-        }\n+        self.add(builder);\n     }\n \n     fn add_function_with_name(\n@@ -281,10 +286,11 @@ fn has_non_default_type_params(def: hir::GenericDef, db: &db::RootDatabase) -> b\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot;\n     use test_utils::covers;\n \n+    use crate::completion::{do_completion, CompletionItem, CompletionKind};\n+\n     fn do_reference_completion(code: &str) -> Vec<CompletionItem> {\n         do_completion(code, CompletionKind::Reference)\n     }\n@@ -576,4 +582,34 @@ mod tests {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn dont_insert_macro_call_braces_in_use() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                //- /main.rs\n+                use foo::<|>;\n+\n+                //- /foo/lib.rs\n+                #[macro_export]\n+                macro_rules frobnicate {\n+                    () => ()\n+                }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"frobnicate!\",\n+                source_range: [9; 9),\n+                delete: [9; 9),\n+                insert: \"frobnicate\",\n+                kind: Macro,\n+                detail: \"#[macro_export]\\nmacro_rules! frobnicate\",\n+            },\n+        ]\n+        \"###\n+        )\n+    }\n }"}]}