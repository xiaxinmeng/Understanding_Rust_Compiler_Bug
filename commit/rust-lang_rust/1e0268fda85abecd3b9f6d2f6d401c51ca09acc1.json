{"sha": "1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMDI2OGZkYTg1YWJlY2QzYjlmNmQyZjZkNDAxYzUxY2EwOWFjYzE=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-09-20T21:59:23Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-09-20T21:59:23Z"}, "message": "avoid linting `ptr_arg` if `.capacity()` is called. Also suggest removing `.as_str()` where applicable.\n\nTHis fixes #2070.\n\nAlso fixes a few formatting mishaps", "tree": {"sha": "5bf8a9331def63e92e1a05800773a11c742027f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bf8a9331def63e92e1a05800773a11c742027f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "html_url": "https://github.com/rust-lang/rust/commit/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3df3bc68177e392ebc8876c62760ec79419ead2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3df3bc68177e392ebc8876c62760ec79419ead2", "html_url": "https://github.com/rust-lang/rust/commit/c3df3bc68177e392ebc8876c62760ec79419ead2"}], "stats": {"total": 257, "additions": 154, "deletions": 103}, "files": [{"sha": "53e3cc9ff6a450291f179da88c89d36f14b191ad", "filename": "Cargo.lock", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "patch": "@@ -9,8 +9,8 @@ dependencies = [\n  \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -28,22 +28,22 @@ name = \"backtrace\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace-sys 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"backtrace-sys\"\n-version = \"0.1.12\"\n+version = \"0.1.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -61,11 +61,16 @@ name = \"cargo_metadata\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cc\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"cfg-if\"\n version = \"0.1.2\"\n@@ -82,8 +87,8 @@ dependencies = [\n  \"duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -137,11 +142,6 @@ dependencies = [\n  \"backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"gcc\"\n-version = \"0.3.53\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"getopts\"\n version = \"0.2.15\"\n@@ -157,7 +157,7 @@ dependencies = [\n \n [[package]]\n name = \"itoa\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -181,7 +181,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.30\"\n+version = \"0.2.31\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -199,7 +199,7 @@ name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -209,7 +209,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -289,12 +289,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.14\"\n+version = \"1.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.14\"\n+version = \"1.0.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -317,9 +317,9 @@ version = \"1.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itoa 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -328,7 +328,7 @@ version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -364,7 +364,7 @@ name = \"toml\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -408,25 +408,25 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [metadata]\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n \"checksum backtrace 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99f2ce94e22b8e664d95c57fff45b98a966c2252b60691d0b7aeeccd88d70983\"\n-\"checksum backtrace-sys 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afccc5772ba333abccdf60d55200fa3406f8c59dcf54d5f7998c9107d3799c7c\"\n+\"checksum backtrace-sys 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c63ea141ef8fdb10409d0f5daf30ac51f84ef43bff66f16627773d2a292cd189\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n+\"checksum cc 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7db2f146208d7e0fbee761b09cd65a7f51ccc38705d4e7262dad4d73b12a76b1\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum compiletest_rs 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2741d378feb7a434dba54228c89a70b4e427fee521de67cdda3750b8a0265f5a\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e45aa15fe0a8a8f511e6d834626afd55e49b62e5c8802e18328a87e8a8f6065c\"\n \"checksum either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18785c1ba806c258137c937e44ada9ee7e69a37e3c72077542cd2f069d78562a\"\n \"checksum error-chain 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6930e04918388a9a2e41d518c25cf679ccafe26733fb4127dbf21993f2575d46\"\n-\"checksum gcc 0.3.53 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8310f7e9c890398b0e80e301c4f474e9918d2b27fca8f48486ca775fa9ffc5a\"\n \"checksum getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65922871abd2f101a2eb0eaebadc66668e54a87ad9c3dd82520b5f86ede5eff9\"\n \"checksum itertools 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22c285d60139cf413244894189ca52debcfd70b57966feed060da76802e415a0\"\n-\"checksum itoa 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac17257442c2ed77dbc9fd555cf83c58b0c7f7d0e8f2ae08c0ac05c72842e1f6\"\n+\"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n \"checksum lazycell 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b585b7a6811fb03aa10e74b278a0f00f8dd9b45dc681f148bb29fa5cb61859b\"\n-\"checksum libc 0.2.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2370ca07ec338939e356443dac2296f581453c35fe1e3a3ed06023c49435f915\"\n+\"checksum libc 0.2.31 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1419b2939a0bc44b77feb34661583c7546b532b192feab36249ab584b86856c\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"100aabe6b8ff4e4a7e32c1c13523379802df0772b82466207ac25b013f193376\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n@@ -442,8 +442,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\"checksum serde 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcb6a7637a47663ee073391a139ed07851f27ed2532c2abc88c6bf27a16cdf34\"\n-\"checksum serde_derive 1.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"812ff66056fd9a9a5b7c119714243b0862cf98340e7d4b5ee05a932c40d5ea6c\"\n+\"checksum serde 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a7046c9d4c6c522d10b2d098f9bebe2bef227e0e74044d8c1bfcf6b476af799\"\n+\"checksum serde_derive 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1afcaae083fd1c46952a315062326bc9957f182358eb7da03b57ef1c688f7aa9\"\n \"checksum serde_derive_internals 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd381f6d01a6616cdba8530492d453b7761b456ba974e98768a18cad2cd76f58\"\n \"checksum serde_json 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d243424e06f9f9c39e3cd36147470fd340db785825e367625f79298a6ac6b7ac\"\n \"checksum shared_child 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"099b38928dbe4a0a01fcd8c233183072f14a7d126a34bed05880869be66e14cc\""}, {"sha": "b656fed1cfbc20531899fb332960a3f6b2561790", "filename": "clippy_lints/src/literal_digit_grouping.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs?ref=1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "patch": "@@ -279,12 +279,19 @@ impl LiteralDigitGrouping {\n                         let fractional_part = &parts[1].chars().rev().collect::<String>();\n                         let _ = Self::do_lint(fractional_part)\n                             .map(|fractional_group_size| {\n-                                let consistent = Self::parts_consistent(integral_group_size, fractional_group_size, parts[0].len(), parts[1].len());\n+                                let consistent = Self::parts_consistent(integral_group_size,\n+                                                                        fractional_group_size,\n+                                                                        parts[0].len(),\n+                                                                        parts[1].len());\n                                 if !consistent {\n-                                    WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(), cx, &lit.span);\n+                                    WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n+                                                                                   cx,\n+                                                                                   &lit.span);\n                                 }\n                             })\n-                            .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(), cx, &lit.span));\n+                            .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(),\n+                                                                         cx,\n+                                                                         &lit.span));\n                     }\n                 })\n                 .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(), cx, &lit.span));\n@@ -332,7 +339,8 @@ impl LiteralDigitGrouping {\n                 .windows(2)\n                 .all(|ps| ps[1] - ps[0] == group_size + 1)\n                 // number of digits to the left of the last group cannot be bigger than group size.\n-                && (digits.len() - underscore_positions.last().expect(\"there's at least one element\") <= group_size + 1);\n+                && (digits.len() - underscore_positions.last()\n+                                                       .expect(\"there's at least one element\") <= group_size + 1);\n \n             if !consistent {\n                 return Err(WarningType::InconsistentDigitGrouping);"}, {"sha": "2ad6c36ab5f03618cd5562d08be2c8c950b419e4", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "patch": "@@ -15,16 +15,7 @@\n // *rustc*'s\n // [`missing_doc`].\n //\n-// [`missing_doc`]:\n-// https://github.\n-// com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.\n-//\n-//\n-//\n-//\n-//\n-//\n-// rs#L246\n+// [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n //\n \n use rustc::hir;"}, {"sha": "078e208467aa5da032938e4f0ff64a2e579f5200", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "patch": "@@ -124,7 +124,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             else if args.len() == 2 && match_def_path(cx.tcx, fun_id, &paths::FMT_ARGUMENTV1_NEW) {\n                 if let ExprPath(ref qpath) = args[1].node {\n                     if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, args[1].hir_id)) {\n-                        if match_def_path(cx.tcx, def_id, &paths::DEBUG_FMT_METHOD) && !is_in_debug_impl(cx, expr) && is_expn_of(expr.span, \"panic\").is_none() {\n+                        if match_def_path(cx.tcx, def_id, &paths::DEBUG_FMT_METHOD)\n+                                && !is_in_debug_impl(cx, expr) && is_expn_of(expr.span, \"panic\").is_none() {\n                             span_lint(cx, USE_DEBUG, args[0].span, \"use of `Debug`-based formatting\");\n                         }\n                     }"}, {"sha": "69ba0d8bccf420d576b2b535bf964ba1745f58bd", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 64, "deletions": 47, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "patch": "@@ -1,5 +1,6 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n+use std::borrow::Cow;\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::map::NodeItem;\n@@ -163,44 +164,48 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n                 ], {\n                     ty_snippet = snippet_opt(cx, parameters.types[0].span);\n                 });\n-                let spans = get_spans(cx, opt_body_id, idx, \"to_owned\");\n-                span_lint_and_then(\n-                    cx,\n-                    PTR_ARG,\n-                    arg.span,\n-                    \"writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used \\\n-                     with non-Vec-based slices.\",\n-                    |db| {\n-                        if let Some(ref snippet) = ty_snippet {\n-                            db.span_suggestion(arg.span,\n-                                               \"change this to\",\n-                                               format!(\"&[{}]\", snippet));\n+                if let Ok(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_owned()\")]) {\n+                    span_lint_and_then(\n+                        cx,\n+                        PTR_ARG,\n+                        arg.span,\n+                        \"writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used \\\n+                         with non-Vec-based slices.\",\n+                        |db| {\n+                            if let Some(ref snippet) = ty_snippet {\n+                                db.span_suggestion(arg.span,\n+                                                   \"change this to\",\n+                                                   format!(\"&[{}]\", snippet));\n+                            }\n+                            for (clonespan, suggestion) in spans {\n+                                db.span_suggestion(clonespan,\n+                                                   &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(),\n+                                                        |x| Cow::Owned(format!(\"change `{}` to\", x))),\n+                                                   suggestion.into());\n+                            }\n                         }\n-                        for (clonespan, suggestion) in spans {\n-                            db.span_suggestion(clonespan,\n-                                               \"change the `.clone()` to\",\n-                                               suggestion);\n-                        }\n-                    }\n-                );\n+                    );\n+                }\n             } else if match_type(cx, ty, &paths::STRING) {\n-                let spans = get_spans(cx, opt_body_id, idx, \"to_string\");\n-                span_lint_and_then(\n-                    cx,\n-                    PTR_ARG,\n-                    arg.span,\n-                    \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n-                    |db| {\n-                        db.span_suggestion(arg.span,\n-                                           \"change this to\",\n-                                           \"&str\".into());\n-                        for (clonespan, suggestion) in spans {\n-                            db.span_suggestion_short(clonespan,\n-                                               \"change the `.clone` to \",\n-                                               suggestion);\n+                if let Ok(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n+                    span_lint_and_then(\n+                        cx,\n+                        PTR_ARG,\n+                        arg.span,\n+                        \"writing `&String` instead of `&str` involves a new object where a slice will do.\",\n+                        |db| {\n+                            db.span_suggestion(arg.span,\n+                                               \"change this to\",\n+                                               \"&str\".into());\n+                            for (clonespan, suggestion) in spans {\n+                                db.span_suggestion_short(clonespan,\n+                                                   &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(),\n+                                                        |x| Cow::Owned(format!(\"change `{}` to\", x))),\n+                                                   suggestion.into());\n+                            }\n                         }\n-                    }\n-                );\n+                    );\n+                }\n             }\n         }\n     }\n@@ -229,38 +234,50 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n     }\n }\n \n-fn get_spans(cx: &LateContext, opt_body_id: Option<BodyId>, idx: usize, fn_name: &'static str) -> Vec<(Span, String)> {\n+fn get_spans(cx: &LateContext, opt_body_id: Option<BodyId>, idx: usize, replacements: &'static [(&'static str, &'static str)]) -> Result<Vec<(Span, Cow<'static, str>)>, ()> {\n     if let Some(body) = opt_body_id.map(|id| cx.tcx.hir.body(id)) {\n-        get_binding_name(&body.arguments[idx]).map_or_else(Vec::new,\n-                                                |name| extract_clone_suggestions(cx, name, fn_name, body))\n+        get_binding_name(&body.arguments[idx]).map_or_else(|| Ok(vec![]),\n+                                                |name| extract_clone_suggestions(cx, name, replacements, body))\n     } else {\n-        vec![]\n+        Ok(vec![])\n     }\n }\n \n-fn extract_clone_suggestions<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, fn_name: &'static str, body: &'tcx Body) -> Vec<(Span, String)> {\n+fn extract_clone_suggestions<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, replace: &'static [(&'static str, &'static str)], body: &'tcx Body) -> Result<Vec<(Span, Cow<'static, str>)>, ()> {\n     let mut visitor = PtrCloneVisitor {\n         cx,\n         name,\n-        fn_name,\n-        spans: vec![]\n+        replace,\n+        spans: vec![],\n+        abort: false,\n     };\n     visitor.visit_body(body);\n-    visitor.spans\n+    if visitor.abort { Err(()) } else { Ok(visitor.spans) }\n }\n \n struct PtrCloneVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     name: Name,\n-    fn_name: &'static str,\n-    spans: Vec<(Span, String)>,\n+    replace: &'static [(&'static str, &'static str)],\n+    spans: Vec<(Span, Cow<'static, str>)>,\n+    abort: bool,\n }\n \n impl<'a, 'tcx: 'a> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n+        if self.abort { return; }\n         if let ExprMethodCall(ref seg, _, ref args) = expr.node {\n-            if args.len() == 1 && match_var(&args[0], self.name) && seg.name == \"clone\" {\n-                self.spans.push((expr.span, format!(\"{}.{}()\", snippet(self.cx, args[0].span, \"_\"), self.fn_name)));\n+            if args.len() == 1 && match_var(&args[0], self.name) {\n+                if seg.name == \"capacity\" {\n+                    self.abort = true;\n+                    return;\n+                }\n+                for &(fn_name, suffix) in self.replace {\n+                    if seg.name == fn_name {\n+                        self.spans.push((expr.span, snippet(self.cx, args[0].span, \"_\") + suffix));\n+                        return;\n+                    }\n+                }\n             }\n             return;\n         }"}, {"sha": "4145f74e936884088d1286e2a15f3697f2239ebf", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "patch": "@@ -82,7 +82,8 @@ macro_rules! define_Conf {\n             #[serde(rename_all=\"kebab-case\")]\n             #[serde(deny_unknown_fields)]\n             pub struct Conf {\n-                $(#[$doc] #[serde(default=$rust_name_str)] #[serde(with=$rust_name_str)] pub $rust_name: define_Conf!(TY $($ty)+),)+\n+                $(#[$doc] #[serde(default=$rust_name_str)] #[serde(with=$rust_name_str)]\n+                          pub $rust_name: define_Conf!(TY $($ty)+),)+\n                 #[allow(dead_code)]\n                 #[serde(default)]\n                 third_party: Option<::toml::Value>,\n@@ -91,10 +92,12 @@ macro_rules! define_Conf {\n                 mod $rust_name {\n                     use serde;\n                     use serde::Deserialize;\n-                    pub fn deserialize<'de, D: serde::Deserializer<'de>>(deserializer: D) -> Result<define_Conf!(TY $($ty)+), D::Error> {\n+                    pub fn deserialize<'de, D: serde::Deserializer<'de>>(deserializer: D)\n+                    -> Result<define_Conf!(TY $($ty)+), D::Error> {\n                         type T = define_Conf!(TY $($ty)+);\n                         Ok(T::deserialize(deserializer).unwrap_or_else(|e| {\n-                            ::utils::conf::ERRORS.lock().expect(\"no threading here\").push(::utils::conf::Error::Toml(e.to_string()));\n+                            ::utils::conf::ERRORS.lock().expect(\"no threading here\")\n+                                                        .push(::utils::conf::Error::Toml(e.to_string()));\n                             super::$rust_name()\n                         }))\n                     }"}, {"sha": "127ae7037021d741feb8f4677d9027e31afe51f7", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "patch": "@@ -55,3 +55,15 @@ fn str_cloned(x: &String) -> String {\n              .clone();\n     x.clone()\n }\n+\n+fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n+    let a = x.capacity();\n+    let b = y.clone();\n+    let c = y.as_str();\n+}\n+\n+fn false_positive_capacity_too(x: &String) -> String {\n+    if x.capacity() > 1024 { panic!(\"Too large!\"); }\n+    x.clone()\n+}\n+"}, {"sha": "e9ada9f8aaa8520efb7863083f61785dc0322ed8", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e0268fda85abecd3b9f6d2f6d401c51ca09acc1/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=1e0268fda85abecd3b9f6d2f6d401c51ca09acc1", "patch": "@@ -28,11 +28,11 @@ help: change this to\n    |\n 40 | fn cloned(x: &[u8]) -> Vec<u8> {\n    |              ^^^^^\n-help: change the `.clone()` to\n+help: change `x.clone()` to\n    |\n 41 |     let e = x.to_owned();\n    |             ^^^^^^^^^^^^\n-help: change the `.clone()` to\n+help: change `x.clone()` to\n    |\n 46 |     x.to_owned()\n    |     ^^^^^^^^^^^^\n@@ -47,18 +47,37 @@ help: change this to\n    |\n 49 | fn str_cloned(x: &str) -> String {\n    |                  ^^^^\n-help: change the `.clone` to \n+help: change `x.clone()` to\n    |\n 50 |     let a = x.to_string();\n    |             ^^^^^^^^^^^^^\n-help: change the `.clone` to \n+help: change `x.clone()` to\n    |\n 51 |     let b = x.to_string();\n    |             ^^^^^^^^^^^^^\n-help: change the `.clone` to \n+help: change `x.clone()` to\n    |\n 56 |     x.to_string()\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: writing `&String` instead of `&str` involves a new object where a slice will do.\n+  --> $DIR/ptr_arg.rs:59:44\n+   |\n+59 | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n+   |                                            ^^^^^^^\n+   |\n+help: change this to\n+   |\n+59 | fn false_positive_capacity(x: &Vec<u8>, y: &str) {\n+   |                                            ^^^^\n+help: change `y.clone()` to\n+   |\n+61 |     let b = y.to_string();\n+   |             ^^^^^^^^^^^^^\n+help: change `y.as_str()` to\n+   |\n+62 |     let c = y;\n+   |             ^\n+\n+error: aborting due to 6 previous errors\n "}]}