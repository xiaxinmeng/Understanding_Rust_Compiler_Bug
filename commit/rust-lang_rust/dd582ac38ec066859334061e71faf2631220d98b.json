{"sha": "dd582ac38ec066859334061e71faf2631220d98b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNTgyYWMzOGVjMDY2ODU5MzM0MDYxZTcxZmFmMjYzMTIyMGQ5OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-05T10:07:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-05T10:07:47Z"}, "message": "Auto merge of #47214 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\n- Successful merges: #47030, #47033, #47110, #47149, #47150, #47160, #47162, #47182, #47198, #47199\n- Failed merges:", "tree": {"sha": "c77ea210e9d64e5e93e4460daffa6629d0e21bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c77ea210e9d64e5e93e4460daffa6629d0e21bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd582ac38ec066859334061e71faf2631220d98b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd582ac38ec066859334061e71faf2631220d98b", "html_url": "https://github.com/rust-lang/rust/commit/dd582ac38ec066859334061e71faf2631220d98b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd582ac38ec066859334061e71faf2631220d98b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c", "html_url": "https://github.com/rust-lang/rust/commit/8a11b8cdd7cc7214c2bb9e77a6c961dd4dad9b7c"}, {"sha": "3fcb99575962660be1989e7176dd36444f6fa41b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcb99575962660be1989e7176dd36444f6fa41b", "html_url": "https://github.com/rust-lang/rust/commit/3fcb99575962660be1989e7176dd36444f6fa41b"}], "stats": {"total": 269, "additions": 162, "deletions": 107}, "files": [{"sha": "a4e6f22ba3db4c6a043b43b30b823cfe66e39784", "filename": "RELEASES.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -38,7 +38,6 @@ Stabilized APIs\n \n Cargo\n -----\n-- [Cargo now supports alternative registries][cargo/4506]\n - [Cargo now supports uninstallation of multiple packages][cargo/4561]\n   eg. `cargo uninstall foo bar` uninstalls `foo` and `bar`.\n - [Added unit test checking to `cargo check`][cargo/4592]\n@@ -49,7 +48,6 @@ Misc\n ----\n - [Releases now ship with the Cargo book documentation.][45692]\n - [rustdoc now prints rendering warnings on every run.][45324]\n-- [Release tarballs now come with rustfmt][45903]\n \n Compatibility Notes\n -------------------\n@@ -83,9 +81,7 @@ Compatibility Notes\n [45852]: https://github.com/rust-lang/rust/issues/45852\n [45853]: https://github.com/rust-lang/rust/pull/45853\n [45887]: https://github.com/rust-lang/rust/pull/45887\n-[45903]: https://github.com/rust-lang/rust/pull/45903\n [45920]: https://github.com/rust-lang/rust/pull/45920\n-[cargo/4506]: https://github.com/rust-lang/cargo/pull/4506\n [cargo/4561]: https://github.com/rust-lang/cargo/pull/4561\n [cargo/4592]: https://github.com/rust-lang/cargo/pull/4592\n [cargo/4637]: https://github.com/rust-lang/cargo/pull/4637"}, {"sha": "a8b43ad3c3080f7e015eb0508a293f599b49ab91", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -21,9 +21,10 @@\n use std::collections::HashMap;\n use std::env;\n use std::ffi::{OsString, OsStr};\n-use std::fs;\n-use std::process::Command;\n+use std::fs::{self, File};\n+use std::io::Read;\n use std::path::PathBuf;\n+use std::process::Command;\n \n use build_helper::output;\n \n@@ -234,4 +235,14 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n     if let Some(ref s) = build.config.ccache {\n         cmd_finder.must_have(s);\n     }\n+\n+    if build.config.channel == \"stable\" {\n+        let mut stage0 = String::new();\n+        t!(t!(File::open(build.src.join(\"src/stage0.txt\")))\n+            .read_to_string(&mut stage0));\n+        if stage0.contains(\"\\ndev:\") {\n+            panic!(\"bootstrapping from a dev compiler in a stable release, but \\\n+                    should only be bootstrapping from a released compiler!\");\n+        }\n+    }\n }"}, {"sha": "2807bbaca0c893c5c5879d79aa417b8efbf5aa67", "filename": "src/liballoc/btree/set.rs", "status": "modified", "additions": 68, "deletions": 72, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Fliballoc%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Fliballoc%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fset.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -228,43 +228,7 @@ impl<T: Ord> BTreeSet<T> {\n     pub fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n     }\n-}\n-\n-impl<T> BTreeSet<T> {\n-    /// Gets an iterator that visits the values in the `BTreeSet` in ascending order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();\n-    /// let mut set_iter = set.iter();\n-    /// assert_eq!(set_iter.next(), Some(&1));\n-    /// assert_eq!(set_iter.next(), Some(&2));\n-    /// assert_eq!(set_iter.next(), Some(&3));\n-    /// assert_eq!(set_iter.next(), None);\n-    /// ```\n-    ///\n-    /// Values returned by the iterator are returned in ascending order:\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();\n-    /// let mut set_iter = set.iter();\n-    /// assert_eq!(set_iter.next(), Some(&1));\n-    /// assert_eq!(set_iter.next(), Some(&2));\n-    /// assert_eq!(set_iter.next(), Some(&3));\n-    /// assert_eq!(set_iter.next(), None);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n-        Iter { iter: self.map.keys() }\n-    }\n-}\n \n-impl<T: Ord> BTreeSet<T> {\n     /// Constructs a double-ended iterator over a sub-range of elements in the set.\n     /// The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n     /// yield elements from min (inclusive) to max (exclusive).\n@@ -293,9 +257,7 @@ impl<T: Ord> BTreeSet<T> {\n     {\n         Range { iter: self.map.range(range) }\n     }\n-}\n \n-impl<T: Ord> BTreeSet<T> {\n     /// Visits the values representing the difference,\n     /// i.e. the values that are in `self` but not in `other`,\n     /// in ascending order.\n@@ -408,40 +370,6 @@ impl<T: Ord> BTreeSet<T> {\n         }\n     }\n \n-    /// Returns the number of elements in the set.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let mut v = BTreeSet::new();\n-    /// assert_eq!(v.len(), 0);\n-    /// v.insert(1);\n-    /// assert_eq!(v.len(), 1);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn len(&self) -> usize {\n-        self.map.len()\n-    }\n-\n-    /// Returns `true` if the set contains no elements.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let mut v = BTreeSet::new();\n-    /// assert!(v.is_empty());\n-    /// v.insert(1);\n-    /// assert!(!v.is_empty());\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn is_empty(&self) -> bool {\n-        self.len() == 0\n-    }\n-\n     /// Clears the set, removing all values.\n     ///\n     /// # Examples\n@@ -724,6 +652,74 @@ impl<T: Ord> BTreeSet<T> {\n     }\n }\n \n+impl<T> BTreeSet<T> {\n+    /// Gets an iterator that visits the values in the `BTreeSet` in ascending order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();\n+    /// let mut set_iter = set.iter();\n+    /// assert_eq!(set_iter.next(), Some(&1));\n+    /// assert_eq!(set_iter.next(), Some(&2));\n+    /// assert_eq!(set_iter.next(), Some(&3));\n+    /// assert_eq!(set_iter.next(), None);\n+    /// ```\n+    ///\n+    /// Values returned by the iterator are returned in ascending order:\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();\n+    /// let mut set_iter = set.iter();\n+    /// assert_eq!(set_iter.next(), Some(&1));\n+    /// assert_eq!(set_iter.next(), Some(&2));\n+    /// assert_eq!(set_iter.next(), Some(&3));\n+    /// assert_eq!(set_iter.next(), None);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn iter(&self) -> Iter<T> {\n+        Iter { iter: self.map.keys() }\n+    }\n+\n+    /// Returns the number of elements in the set.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut v = BTreeSet::new();\n+    /// assert_eq!(v.len(), 0);\n+    /// v.insert(1);\n+    /// assert_eq!(v.len(), 1);\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn len(&self) -> usize {\n+        self.map.len()\n+    }\n+\n+    /// Returns `true` if the set contains no elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut v = BTreeSet::new();\n+    /// assert!(v.is_empty());\n+    /// v.insert(1);\n+    /// assert!(!v.is_empty());\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> BTreeSet<T> {"}, {"sha": "1d5e7b73be557c17403377e9bbda5a35d47cdf01", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -21,7 +21,7 @@\n #![feature(core_intrinsics)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(any(unix, target_os = \"redox\"), feature(libc))]\n+#![cfg_attr(any(unix, target_os = \"cloudabi\", target_os = \"redox\"), feature(libc))]\n #![rustc_alloc_kind = \"lib\"]\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n@@ -116,7 +116,7 @@ unsafe impl Alloc for System {\n     }\n }\n \n-#[cfg(any(unix, target_os = \"redox\"))]\n+#[cfg(any(unix, target_os = \"cloudabi\", target_os = \"redox\"))]\n mod platform {\n     extern crate libc;\n \n@@ -213,6 +213,16 @@ mod platform {\n             struct Stderr;\n \n             impl Write for Stderr {\n+                #[cfg(target_os = \"cloudabi\")]\n+                fn write_str(&mut self, _: &str) -> fmt::Result {\n+                    // CloudABI does not have any reserved file descriptor\n+                    // numbers. We should not attempt to write to file\n+                    // descriptor #2, as it may be associated with any kind of\n+                    // resource.\n+                    Ok(())\n+                }\n+\n+                #[cfg(not(target_os = \"cloudabi\"))]\n                 fn write_str(&mut self, s: &str) -> fmt::Result {\n                     unsafe {\n                         libc::write(libc::STDERR_FILENO,"}, {"sha": "f00128a8147de4231622539c01c3c87ba33937ad", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -330,6 +330,7 @@ macro_rules! debug_assert_ne {\n /// // The prefered method of quick returning Errors\n /// fn write_to_file_question() -> Result<(), MyError> {\n ///     let mut file = File::create(\"my_best_friends.txt\")?;\n+///     file.write_all(b\"This is a list of my best friends.\")?;\n ///     Ok(())\n /// }\n ///"}, {"sha": "93f6a0214d77d487b67edf144bce2d8875dc167a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -1024,7 +1024,7 @@ impl<T: ::fmt::Debug> ::fmt::Debug for ManuallyDrop<T> {\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: Clone> Clone for ManuallyDrop<T> {\n     fn clone(&self) -> Self {\n         ManuallyDrop::new(self.deref().clone())\n@@ -1035,14 +1035,14 @@ impl<T: Clone> Clone for ManuallyDrop<T> {\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: Default> Default for ManuallyDrop<T> {\n     fn default() -> Self {\n         ManuallyDrop::new(Default::default())\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: PartialEq> PartialEq for ManuallyDrop<T> {\n     fn eq(&self, other: &Self) -> bool {\n         self.deref().eq(other)\n@@ -1053,10 +1053,10 @@ impl<T: PartialEq> PartialEq for ManuallyDrop<T> {\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: Eq> Eq for ManuallyDrop<T> {}\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: PartialOrd> PartialOrd for ManuallyDrop<T> {\n     fn partial_cmp(&self, other: &Self) -> Option<::cmp::Ordering> {\n         self.deref().partial_cmp(other)\n@@ -1079,14 +1079,14 @@ impl<T: PartialOrd> PartialOrd for ManuallyDrop<T> {\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: Ord> Ord for ManuallyDrop<T> {\n     fn cmp(&self, other: &Self) -> ::cmp::Ordering {\n         self.deref().cmp(other)\n     }\n }\n \n-#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+#[stable(feature = \"manually_drop_impls\", since = \"1.22.0\")]\n impl<T: ::hash::Hash> ::hash::Hash for ManuallyDrop<T> {\n     fn hash<H: ::hash::Hasher>(&self, state: &mut H) {\n         self.deref().hash(state);"}, {"sha": "765b369e4b25dac04d389f06688fc4b3a80ba471", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -1997,7 +1997,9 @@ mod traits {\n         }\n     }\n \n-    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[unstable(feature = \"inclusive_range\",\n+               reason = \"recently added, follows RFC\",\n+               issue = \"28237\")]\n     impl SliceIndex<str> for ops::RangeInclusive<usize> {\n         type Output = str;\n         #[inline]\n@@ -2040,7 +2042,9 @@ mod traits {\n \n \n \n-    #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n+    #[unstable(feature = \"inclusive_range\",\n+               reason = \"recently added, follows RFC\",\n+               issue = \"28237\")]\n     impl SliceIndex<str> for ops::RangeToInclusive<usize> {\n         type Output = str;\n         #[inline]"}, {"sha": "3da9e9c87dde3330ebad342c33908b3f9c0593b1", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -944,6 +944,7 @@ macro_rules! atomic_int {\n      $stable_cxchg:meta,\n      $stable_debug:meta,\n      $stable_access:meta,\n+     $stable_from:meta,\n      $s_int_type:expr, $int_ref:expr,\n      $int_type:ident $atomic_type:ident $atomic_init:ident) => {\n         /// An integer type which can be safely shared between threads.\n@@ -978,7 +979,7 @@ macro_rules! atomic_int {\n             }\n         }\n \n-        #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n+        #[$stable_from]\n         impl From<$int_type> for $atomic_type {\n             #[inline]\n             fn from(v: $int_type) -> Self { Self::new(v) }\n@@ -1375,6 +1376,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i8\", \"../../../std/primitive.i8.html\",\n     i8 AtomicI8 ATOMIC_I8_INIT\n }\n@@ -1384,6 +1386,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u8\", \"../../../std/primitive.u8.html\",\n     u8 AtomicU8 ATOMIC_U8_INIT\n }\n@@ -1393,6 +1396,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i16\", \"../../../std/primitive.i16.html\",\n     i16 AtomicI16 ATOMIC_I16_INIT\n }\n@@ -1402,6 +1406,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u16\", \"../../../std/primitive.u16.html\",\n     u16 AtomicU16 ATOMIC_U16_INIT\n }\n@@ -1411,6 +1416,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i32\", \"../../../std/primitive.i32.html\",\n     i32 AtomicI32 ATOMIC_I32_INIT\n }\n@@ -1420,6 +1426,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u32\", \"../../../std/primitive.u32.html\",\n     u32 AtomicU32 ATOMIC_U32_INIT\n }\n@@ -1429,6 +1436,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i64\", \"../../../std/primitive.i64.html\",\n     i64 AtomicI64 ATOMIC_I64_INIT\n }\n@@ -1438,6 +1446,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u64\", \"../../../std/primitive.u64.html\",\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n@@ -1447,6 +1456,7 @@ atomic_int!{\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n+    stable(feature = \"atomic_from\", since = \"1.23.0\"),\n     \"isize\", \"../../../std/primitive.isize.html\",\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n@@ -1456,6 +1466,7 @@ atomic_int!{\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n+    stable(feature = \"atomic_from\", since = \"1.23.0\"),\n     \"usize\", \"../../../std/primitive.usize.html\",\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }"}, {"sha": "4300c97d0ff662ca0fb8ebb4d74af760b09ee744", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -247,13 +247,27 @@ impl Span {\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn join(&self, other: Span) -> Option<Span> {\n         let self_loc = __internal::lookup_char_pos(self.0.lo());\n-        let other_loc = __internal::lookup_char_pos(self.0.lo());\n+        let other_loc = __internal::lookup_char_pos(other.0.lo());\n \n         if self_loc.file.name != other_loc.file.name { return None }\n \n         Some(Span(self.0.to(other.0)))\n     }\n \n+    /// Creates a new span with the same line/column information as `self` but\n+    /// that resolves symbols as though it were at `other`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn resolved_at(&self, other: Span) -> Span {\n+        Span(self.0.with_ctxt(other.0.ctxt()))\n+    }\n+\n+    /// Creates a new span with the same name resolution behavior as `self` but\n+    /// with the line/column information of `other`.\n+    #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+    pub fn located_at(&self, other: Span) -> Span {\n+        other.resolved_at(*self)\n+    }\n+\n     diagnostic_method!(error, Level::Error);\n     diagnostic_method!(warning, Level::Warning);\n     diagnostic_method!(note, Level::Note);"}, {"sha": "4cd52ebb26df5ba244e1d9e8bee97d235593611a", "filename": "src/librustc_back/target/cloudabi_base.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibrustc_back%2Ftarget%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibrustc_back%2Ftarget%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fcloudabi_base.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -27,6 +27,18 @@ pub fn opts() -> TargetOptions {\n         linker_is_gnu: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n+        // As CloudABI only supports static linkage, there is no need\n+        // for dynamic TLS. The C library therefore does not provide\n+        // __tls_get_addr(), which is normally used to perform dynamic\n+        // TLS lookups by programs that make use of dlopen(). Only the\n+        // \"local-exec\" and \"initial-exec\" TLS models can be used.\n+        //\n+        // \"local-exec\" is more efficient than \"initial-exec\", as the\n+        // latter has one more level of indirection: it accesses the GOT\n+        // (Global Offset Table) to obtain the effective address of a\n+        // thread-local variable. Using a GOT is useful only when doing\n+        // dynamic linking.\n+        tls_model: \"local-exec\".to_string(),\n         relro_level: RelroLevel::Full,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()"}, {"sha": "a19fe825f21fa06344710ac9de67e2b33a371137", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -706,7 +706,7 @@ impl From<CString> for Box<CStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Arc<CStr> {\n     #[inline]\n     fn from(s: CString) -> Arc<CStr> {\n@@ -715,7 +715,7 @@ impl From<CString> for Arc<CStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a CStr> for Arc<CStr> {\n     #[inline]\n     fn from(s: &CStr) -> Arc<CStr> {\n@@ -724,7 +724,7 @@ impl<'a> From<&'a CStr> for Arc<CStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Rc<CStr> {\n     #[inline]\n     fn from(s: CString) -> Rc<CStr> {\n@@ -733,7 +733,7 @@ impl From<CString> for Rc<CStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a CStr> for Rc<CStr> {\n     #[inline]\n     fn from(s: &CStr) -> Rc<CStr> {"}, {"sha": "109173d31c501ee15bcd50cb0fb0127a8864caa5", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -594,7 +594,7 @@ impl From<OsString> for Box<OsStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Arc<OsStr> {\n     #[inline]\n     fn from(s: OsString) -> Arc<OsStr> {\n@@ -603,7 +603,7 @@ impl From<OsString> for Arc<OsStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a OsStr> for Arc<OsStr> {\n     #[inline]\n     fn from(s: &OsStr) -> Arc<OsStr> {\n@@ -612,7 +612,7 @@ impl<'a> From<&'a OsStr> for Arc<OsStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Rc<OsStr> {\n     #[inline]\n     fn from(s: OsString) -> Rc<OsStr> {\n@@ -621,7 +621,7 @@ impl From<OsString> for Rc<OsStr> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a OsStr> for Rc<OsStr> {\n     #[inline]\n     fn from(s: &OsStr) -> Rc<OsStr> {"}, {"sha": "bed9efcb8469d358ab33c5c4e01bfdbade037b48", "filename": "src/libstd/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -1454,7 +1454,7 @@ impl<'a> From<PathBuf> for Cow<'a, Path> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n@@ -1463,7 +1463,7 @@ impl From<PathBuf> for Arc<Path> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Arc<Path> {\n     #[inline]\n     fn from(s: &Path) -> Arc<Path> {\n@@ -1472,7 +1472,7 @@ impl<'a> From<&'a Path> for Arc<Path> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n@@ -1481,7 +1481,7 @@ impl From<PathBuf> for Rc<Path> {\n     }\n }\n \n-#[stable(feature = \"shared_from_slice2\", since = \"1.23.0\")]\n+#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Rc<Path> {\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {"}, {"sha": "33e8a87a0b62c801d87b8ac0db569463e50269a0", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -68,8 +68,8 @@\n //! assert_eq!(b\"Oh no, a typo!\\n\", output.stdout.as_slice());\n //! ```\n //!\n-//! Note that [`ChildStderr`] and [`ChildStdout`] implement [`Write`] and\n-//! [`ChildStdin`] implements [`Read`]:\n+//! Note that [`ChildStderr`] and [`ChildStdout`] implement [`Read`] and\n+//! [`ChildStdin`] implements [`Write`]:\n //!\n //! ```no_run\n //! use std::process::{Command, Stdio};"}, {"sha": "3b4904c98e8717813c1b0f3301201f885b8b919d", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -382,7 +382,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {\n     }\n }\n \n-#[stable(feature = \"mutex_from\", since = \"1.22.0\")]\n+#[stable(feature = \"mutex_from\", since = \"1.24.0\")]\n impl<T> From<T> for Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     /// This is equivalent to [`Mutex::new`]."}, {"sha": "0f3f4e50f7e321ec2e59d60a9fc9903a873ce29d", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd582ac38ec066859334061e71faf2631220d98b/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=dd582ac38ec066859334061e71faf2631220d98b", "patch": "@@ -457,7 +457,7 @@ impl<T: Default> Default for RwLock<T> {\n     }\n }\n \n-#[stable(feature = \"rw_lock_from\", since = \"1.22.0\")]\n+#[stable(feature = \"rw_lock_from\", since = \"1.24.0\")]\n impl<T> From<T> for RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n     /// This is equivalent to [`RwLock::new`]."}]}