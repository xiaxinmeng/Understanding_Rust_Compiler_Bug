{"sha": "b2e899f843fd94ed3188f4feceb84c74039a30e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZTg5OWY4NDNmZDk0ZWQzMTg4ZjRmZWNlYjg0Yzc0MDM5YTMwZTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T13:42:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T13:42:21Z"}, "message": "move into `provide` methods", "tree": {"sha": "9a343175ed8b09196e60eaa8e9b28af0b7f7a134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a343175ed8b09196e60eaa8e9b28af0b7f7a134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e899f843fd94ed3188f4feceb84c74039a30e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e899f843fd94ed3188f4feceb84c74039a30e2", "html_url": "https://github.com/rust-lang/rust/commit/b2e899f843fd94ed3188f4feceb84c74039a30e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e899f843fd94ed3188f4feceb84c74039a30e2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f7e02fb6ba3baa30bbbcf373f64ce0c48b1893", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f7e02fb6ba3baa30bbbcf373f64ce0c48b1893", "html_url": "https://github.com/rust-lang/rust/commit/c3f7e02fb6ba3baa30bbbcf373f64ce0c48b1893"}], "stats": {"total": 102, "additions": 73, "deletions": 29}, "files": [{"sha": "eddfee95c8f3778bee9a4926e1d53564ecb92efb", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=b2e899f843fd94ed3188f4feceb84c74039a30e2", "patch": "@@ -13,13 +13,22 @@ use rustc::infer::canonical::{Canonical, QueryResult};\n use rustc::traits::query::dropck_outlives::{DropckOutlivesResult, DtorckConstraint};\n use rustc::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc::traits::{FulfillmentContext, Normalized, ObligationCause};\n+use rustc::ty::query::Providers;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use syntax::codemap::{Span, DUMMY_SP};\n \n-crate fn dropck_outlives<'tcx>(\n+crate fn provide(p: &mut Providers) {\n+    *p = Providers {\n+        dropck_outlives,\n+        adt_dtorck_constraint,\n+        ..*p\n+    };\n+}\n+\n+fn dropck_outlives<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalTyGoal<'tcx>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {"}, {"sha": "e8a3447902fd357de4a93de6b63224130187a922", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=b2e899f843fd94ed3188f4feceb84c74039a30e2", "patch": "@@ -11,10 +11,18 @@\n use rustc::traits::{EvaluationResult, Obligation, ObligationCause,\n                     OverflowError, SelectionContext, TraitQueryMode};\n use rustc::traits::query::CanonicalPredicateGoal;\n+use rustc::ty::query::Providers;\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n use syntax::codemap::DUMMY_SP;\n \n-crate fn evaluate_obligation<'tcx>(\n+crate fn provide(p: &mut Providers) {\n+    *p = Providers {\n+        evaluate_obligation,\n+        ..*p\n+    };\n+}\n+\n+fn evaluate_obligation<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalPredicateGoal<'tcx>,\n ) -> Result<EvaluationResult, OverflowError> {"}, {"sha": "1da3907915a0724a78d8e1547fe94c0f307ce889", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=b2e899f843fd94ed3188f4feceb84c74039a30e2", "patch": "@@ -39,22 +39,10 @@ mod type_op;\n use rustc::ty::query::Providers;\n \n pub fn provide(p: &mut Providers) {\n-    *p = Providers {\n-        dropck_outlives: dropck_outlives::dropck_outlives,\n-        adt_dtorck_constraint: dropck_outlives::adt_dtorck_constraint,\n-        normalize_projection_ty: normalize_projection_ty::normalize_projection_ty,\n-        normalize_ty_after_erasing_regions:\n-            normalize_erasing_regions::normalize_ty_after_erasing_regions,\n-        program_clauses_for: lowering::program_clauses_for,\n-        program_clauses_for_env: lowering::program_clauses_for_env,\n-        evaluate_obligation: evaluate_obligation::evaluate_obligation,\n-        type_op_eq: type_op::type_op_eq,\n-        type_op_prove_predicate: type_op::type_op_prove_predicate,\n-        type_op_subtype: type_op::type_op_subtype,\n-        type_op_normalize_ty: type_op::type_op_normalize_ty,\n-        type_op_normalize_predicate: type_op::type_op_normalize_predicate,\n-        type_op_normalize_fn_sig: type_op::type_op_normalize_fn_sig,\n-        type_op_normalize_poly_fn_sig: type_op::type_op_normalize_poly_fn_sig,\n-        ..*p\n-    };\n+    dropck_outlives::provide(p);\n+    evaluate_obligation::provide(p);\n+    lowering::provide(p);\n+    normalize_projection_ty::provide(p);\n+    normalize_erasing_regions::provide(p);\n+    type_op::provide(p);\n }"}, {"sha": "16aa63d6999972906213e0259cd7d9f8d9b43704", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=b2e899f843fd94ed3188f4feceb84c74039a30e2", "patch": "@@ -14,6 +14,7 @@ use rustc::hir::map::definitions::DefPathData;\n use rustc::hir::{self, ImplPolarity};\n use rustc::traits::{Clause, Clauses, DomainGoal, Goal, PolyDomainGoal, ProgramClause,\n                     WhereClause, FromEnv, WellFormed};\n+use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Slice, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -22,6 +23,14 @@ use syntax::ast;\n \n use std::iter;\n \n+crate fn provide(p: &mut Providers) {\n+    *p = Providers {\n+        program_clauses_for,\n+        program_clauses_for_env,\n+        ..*p\n+    };\n+}\n+\n crate trait Lower<T> {\n     /// Lower a rustc construct (e.g. `ty::TraitPredicate`) to a chalk-like type.\n     fn lower(&self) -> T;"}, {"sha": "a85983d0e9a8164a6b9c5c27b8d337bc979c370c", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=b2e899f843fd94ed3188f4feceb84c74039a30e2", "patch": "@@ -10,10 +10,18 @@\n \n use rustc::traits::{Normalized, ObligationCause};\n use rustc::traits::query::NoSolution;\n+use rustc::ty::query::Providers;\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use std::sync::atomic::Ordering;\n \n-crate fn normalize_ty_after_erasing_regions<'tcx>(\n+crate fn provide(p: &mut Providers) {\n+    *p = Providers {\n+        normalize_ty_after_erasing_regions,\n+        ..*p\n+    };\n+}\n+\n+fn normalize_ty_after_erasing_regions<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Ty<'tcx> {"}, {"sha": "1a8899ad8e03fd76c0d050759f1fa730df3385a1", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=b2e899f843fd94ed3188f4feceb84c74039a30e2", "patch": "@@ -12,13 +12,21 @@ use rustc::infer::canonical::{Canonical, QueryResult};\n use rustc::infer::InferOk;\n use rustc::traits::query::{normalize::NormalizationResult, CanonicalProjectionGoal, NoSolution};\n use rustc::traits::{self, ObligationCause, SelectionContext};\n+use rustc::ty::query::Providers;\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n use rustc_data_structures::sync::Lrc;\n use std::sync::atomic::Ordering;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::DUMMY_SP;\n \n-crate fn normalize_projection_ty<'tcx>(\n+crate fn provide(p: &mut Providers) {\n+    *p = Providers {\n+        normalize_projection_ty,\n+        ..*p\n+    };\n+}\n+\n+fn normalize_projection_ty<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {"}, {"sha": "9e8640a32de5b5ed7b5ef415a9d1a40753b90dd3", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e899f843fd94ed3188f4feceb84c74039a30e2/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=b2e899f843fd94ed3188f4feceb84c74039a30e2", "patch": "@@ -16,11 +16,25 @@ use rustc::traits::query::type_op::prove_predicate::ProvePredicate;\n use rustc::traits::query::type_op::subtype::Subtype;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{Obligation, Normalized, ObligationCause};\n+use rustc::ty::query::Providers;\n use rustc::ty::{FnSig, Lift, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::sync::Lrc;\n use std::fmt;\n \n-crate fn type_op_eq<'tcx>(\n+crate fn provide(p: &mut Providers) {\n+    *p = Providers {\n+        type_op_eq,\n+        type_op_prove_predicate,\n+        type_op_subtype,\n+        type_op_normalize_ty,\n+        type_op_normalize_predicate,\n+        type_op_normalize_fn_sig,\n+        type_op_normalize_poly_fn_sig,\n+        ..*p\n+    };\n+}\n+\n+fn type_op_eq<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Eq<'tcx>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n@@ -44,39 +58,39 @@ where\n     Ok(InferOk { value, obligations }) // ugh we should merge these two structs\n }\n \n-crate fn type_op_normalize_ty(\n+fn type_op_normalize_ty(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Normalize<'tcx, Ty<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Ty<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-crate fn type_op_normalize_predicate(\n+fn type_op_normalize_predicate(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Normalize<'tcx, Predicate<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Predicate<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-crate fn type_op_normalize_fn_sig(\n+fn type_op_normalize_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Normalize<'tcx, FnSig<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, FnSig<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-crate fn type_op_normalize_poly_fn_sig(\n+fn type_op_normalize_poly_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Normalize<'tcx, PolyFnSig<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, PolyFnSig<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-crate fn type_op_subtype<'tcx>(\n+fn type_op_subtype<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Subtype<'tcx>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n@@ -95,7 +109,7 @@ crate fn type_op_subtype<'tcx>(\n     )\n }\n \n-crate fn type_op_prove_predicate<'tcx>(\n+fn type_op_prove_predicate<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ProvePredicate<'tcx>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {"}]}