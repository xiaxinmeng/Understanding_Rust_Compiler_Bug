{"sha": "d2480ecb9f037d575a25496682f55295677cd980", "node_id": "C_kwDOAAsO6NoAKGQyNDgwZWNiOWYwMzdkNTc1YTI1NDk2NjgyZjU1Mjk1Njc3Y2Q5ODA", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-12-01T12:16:43Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-12-01T12:17:20Z"}, "message": "ide: hack to make self not unresolved reference in async trait wrapped impl's", "tree": {"sha": "0d19bb155320b301a33f14759fda7cb66b804660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d19bb155320b301a33f14759fda7cb66b804660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2480ecb9f037d575a25496682f55295677cd980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2480ecb9f037d575a25496682f55295677cd980", "html_url": "https://github.com/rust-lang/rust/commit/d2480ecb9f037d575a25496682f55295677cd980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2480ecb9f037d575a25496682f55295677cd980/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5ad6c8c5f783cd247a42d77a58d21afc91c6984", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ad6c8c5f783cd247a42d77a58d21afc91c6984", "html_url": "https://github.com/rust-lang/rust/commit/c5ad6c8c5f783cd247a42d77a58d21afc91c6984"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "fa9fe1aef818f28183ad727499b1ae6640769a0c", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2480ecb9f037d575a25496682f55295677cd980/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2480ecb9f037d575a25496682f55295677cd980/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=d2480ecb9f037d575a25496682f55295677cd980", "patch": "@@ -281,8 +281,16 @@ fn highlight_name_ref(\n                 return if syntactic_name_ref_highlighting {\n                     highlight_name_ref_by_syntax(name_ref, sema, krate)\n                 } else {\n-                    HlTag::UnresolvedReference.into()\n-                }\n+                    // Some popular proc macros (namely async_trait) will rewrite `self` in such a way that it no\n+                    // longer resolves via NameRefClass. If we can't be resolved, but we know we're a self token,\n+                    // within a function with a self param, pretend to still be `self`, rather than\n+                    // an unresolved reference.\n+                    if name_ref.self_token().is_some() && is_in_fn_with_self_param(&name_ref) {\n+                        HlTag::Symbol(SymbolKind::SelfParam).into()\n+                    } else {\n+                        HlTag::UnresolvedReference.into()\n+                    }\n+                };\n             }\n         };\n         let mut h = match name_class {\n@@ -751,3 +759,11 @@ fn is_child_of_impl(token: &SyntaxToken) -> bool {\n         _ => false,\n     }\n }\n+\n+fn is_in_fn_with_self_param<N: AstNode>(node: &N) -> bool {\n+    node.syntax()\n+        .ancestors()\n+        .find_map(ast::Fn::cast)\n+        .and_then(|s| s.param_list()?.self_param())\n+        .is_some()\n+}"}]}