{"sha": "091380021a8f05bb3b533209e588a9f7c0e9486b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MTM4MDAyMWE4ZjA1YmIzYjUzMzIwOWU1ODhhOWY3YzBlOTQ4NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-06T21:34:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-06T21:34:12Z"}, "message": "Auto merge of #59760 - Centril:rollup-4b9x7ue, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #59738 (Move match_path from DefId to lint::LateContext)\n - #59740 (Use for_each to extend collections)\n - #59751 (Tiny docs fix)\n - #59754 (Update books)\n - #59755 (Update miri)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9e8cf1fceb25e7ec236ae728b20ead419139a0ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e8cf1fceb25e7ec236ae728b20ead419139a0ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091380021a8f05bb3b533209e588a9f7c0e9486b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091380021a8f05bb3b533209e588a9f7c0e9486b", "html_url": "https://github.com/rust-lang/rust/commit/091380021a8f05bb3b533209e588a9f7c0e9486b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091380021a8f05bb3b533209e588a9f7c0e9486b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8159f389f6cc8ec3e3ea009222d6926da77371ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8159f389f6cc8ec3e3ea009222d6926da77371ec", "html_url": "https://github.com/rust-lang/rust/commit/8159f389f6cc8ec3e3ea009222d6926da77371ec"}, {"sha": "4601ff017fcccd8eb2874d09b58c86ba675f1188", "url": "https://api.github.com/repos/rust-lang/rust/commits/4601ff017fcccd8eb2874d09b58c86ba675f1188", "html_url": "https://github.com/rust-lang/rust/commit/4601ff017fcccd8eb2874d09b58c86ba675f1188"}], "stats": {"total": 263, "additions": 129, "deletions": 134}, "files": [{"sha": "7989c723607ef5b13b57208022259e6c771e11d0", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1 +1 @@\n-Subproject commit 07fd3880ea0874d82b1d9ed30ad3427ec98b4e8a\n+Subproject commit 7989c723607ef5b13b57208022259e6c771e11d0"}, {"sha": "c02e0e7754a76886e55b976a3a4fac20100cd35d", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1 +1 @@\n-Subproject commit f1ff93b66844493a7b03101c7df66ac958c62418\n+Subproject commit c02e0e7754a76886e55b976a3a4fac20100cd35d"}, {"sha": "98f90ff4de8e588f651f0fb493b5c7496551cd59", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1 +1 @@\n-Subproject commit 27ad493a10364e907ec476e2ad61e8a1614b57e1\n+Subproject commit 98f90ff4de8e588f651f0fb493b5c7496551cd59"}, {"sha": "8c142a3d317c6f12476e44a4147a473e3f285250", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1177,9 +1177,7 @@ impl<T: Ord> BinaryHeap<T> {\n \n         self.reserve(lower);\n \n-        for elem in iterator {\n-            self.push(elem);\n-        }\n+        iterator.for_each(move |elem| self.push(elem));\n     }\n }\n "}, {"sha": "6b079fc87cc78905f431a097a2aa8aaee7a33f3b", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1727,9 +1727,9 @@ impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     #[inline]\n     fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {\n-        for (k, v) in iter {\n+        iter.into_iter().for_each(move |(k, v)| {\n             self.insert(k, v);\n-        }\n+        });\n     }\n }\n "}, {"sha": "16a96ca19b82462b4a99f2e234f3e1c85b630e4f", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -883,9 +883,9 @@ impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n impl<T: Ord> Extend<T> for BTreeSet<T> {\n     #[inline]\n     fn extend<Iter: IntoIterator<Item = T>>(&mut self, iter: Iter) {\n-        for elem in iter {\n+        iter.into_iter().for_each(move |elem| {\n             self.insert(elem);\n-        }\n+        });\n     }\n }\n "}, {"sha": "d6d84a4f083d060ca380ffccca8cece42deccc11", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1107,9 +1107,7 @@ impl<T> Extend<T> for LinkedList<T> {\n \n impl<I: IntoIterator> SpecExtend<I> for LinkedList<I::Item> {\n     default fn spec_extend(&mut self, iter: I) {\n-        for elt in iter {\n-            self.push_back(elt);\n-        }\n+        iter.into_iter().for_each(move |elt| self.push_back(elt));\n     }\n }\n "}, {"sha": "4bea615ab861face0477a12fc36446c2f32874c2", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -2677,9 +2677,7 @@ impl<'a, T> IntoIterator for &'a mut VecDeque<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> Extend<A> for VecDeque<A> {\n     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n-        for elt in iter {\n-            self.push_back(elt);\n-        }\n+        iter.into_iter().for_each(move |elt| self.push_back(elt));\n     }\n }\n "}, {"sha": "10b6cc61d996a5480896482419b9091a4126e7aa", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -2,7 +2,7 @@\n // after wrap-adding 0x1F:\n //\n //     b'a' + 0x1F == 0x80 == 0b1000_0000\n-//     b'z' + 0x1F == 0x98 == 0b10011000\n+//     b'z' + 0x1F == 0x98 == 0b1001_1000\n //\n // Lower-case ASCII 'z' is the last byte that has its highest bit unset\n // after wrap-adding 0x05:"}, {"sha": "1e0f1ed578aaed4a99016f92b92bf0ba1e377aeb", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -160,9 +160,7 @@ impl iter::FromIterator<TokenTree> for TokenStream {\n impl iter::FromIterator<TokenStream> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self {\n         let mut builder = bridge::client::TokenStreamBuilder::new();\n-        for stream in streams {\n-            builder.push(stream.0);\n-        }\n+        streams.into_iter().for_each(|stream| builder.push(stream.0));\n         TokenStream(builder.build())\n     }\n }"}, {"sha": "8536f38e48c6d5e0b3483ff9aa65aee8a98b3518", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 2, "deletions": 104, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1,10 +1,9 @@\n-use crate::ty::{self, print::Printer, subst::Kind, Ty, TyCtxt};\n-use crate::hir::map::definitions::{DisambiguatedDefPathData, FIRST_FREE_HIGH_DEF_INDEX};\n+use crate::ty::{self, TyCtxt};\n+use crate::hir::map::definitions::FIRST_FREE_HIGH_DEF_INDEX;\n use rustc_data_structures::indexed_vec::Idx;\n use serialize;\n use std::fmt;\n use std::u32;\n-use syntax::symbol::{LocalInternedString, Symbol};\n \n newtype_index! {\n     pub struct CrateId {\n@@ -252,107 +251,6 @@ impl DefId {\n             format!(\"module `{}`\", tcx.def_path_str(*self))\n         }\n     }\n-\n-    /// Check if a `DefId`'s path matches the given absolute type path usage.\n-    // Uplifted from rust-lang/rust-clippy\n-    pub fn match_path<'a, 'tcx>(self, tcx: TyCtxt<'a, 'tcx, 'tcx>, path: &[&str]) -> bool {\n-        pub struct AbsolutePathPrinter<'a, 'tcx> {\n-            pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        }\n-\n-        impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n-            type Error = !;\n-\n-            type Path = Vec<LocalInternedString>;\n-            type Region = ();\n-            type Type = ();\n-            type DynExistential = ();\n-\n-            fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n-                self.tcx\n-            }\n-\n-            fn print_region(self, _region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n-                Ok(())\n-            }\n-\n-            fn print_type(self, _ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n-                Ok(())\n-            }\n-\n-            fn print_dyn_existential(\n-                self,\n-                _predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n-                ) -> Result<Self::DynExistential, Self::Error> {\n-                Ok(())\n-            }\n-\n-            fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-                Ok(vec![self.tcx.original_crate_name(cnum).as_str()])\n-            }\n-\n-            fn path_qualified(\n-                self,\n-                self_ty: Ty<'tcx>,\n-                trait_ref: Option<ty::TraitRef<'tcx>>,\n-                ) -> Result<Self::Path, Self::Error> {\n-                if trait_ref.is_none() {\n-                    if let ty::Adt(def, substs) = self_ty.sty {\n-                        return self.print_def_path(def.did, substs);\n-                    }\n-                }\n-\n-                // This shouldn't ever be needed, but just in case:\n-                Ok(vec![match trait_ref {\n-                    Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)).as_str(),\n-                    None => Symbol::intern(&format!(\"<{}>\", self_ty)).as_str(),\n-                }])\n-            }\n-\n-            fn path_append_impl(\n-                self,\n-                print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-                _disambiguated_data: &DisambiguatedDefPathData,\n-                self_ty: Ty<'tcx>,\n-                trait_ref: Option<ty::TraitRef<'tcx>>,\n-                ) -> Result<Self::Path, Self::Error> {\n-                let mut path = print_prefix(self)?;\n-\n-                // This shouldn't ever be needed, but just in case:\n-                path.push(match trait_ref {\n-                    Some(trait_ref) => {\n-                        Symbol::intern(&format!(\"<impl {} for {}>\", trait_ref, self_ty)).as_str()\n-                    },\n-                    None => Symbol::intern(&format!(\"<impl {}>\", self_ty)).as_str(),\n-                });\n-\n-                Ok(path)\n-            }\n-\n-            fn path_append(\n-                self,\n-                print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-                disambiguated_data: &DisambiguatedDefPathData,\n-                ) -> Result<Self::Path, Self::Error> {\n-                let mut path = print_prefix(self)?;\n-                path.push(disambiguated_data.data.as_interned_str().as_str());\n-                Ok(path)\n-            }\n-\n-            fn path_generic_args(\n-                self,\n-                print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-                _args: &[Kind<'tcx>],\n-                ) -> Result<Self::Path, Self::Error> {\n-                print_prefix(self)\n-            }\n-        }\n-\n-        let names = AbsolutePathPrinter { tcx }.print_def_path(self, &[]).unwrap();\n-\n-        names.len() == path.len()\n-            && names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n-    }\n }\n \n impl serialize::UseSpecializedEncodable for DefId {}"}, {"sha": "15ea6403e38bab7f7b85c4848a4f69e629fc5966", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 111, "deletions": 2, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -25,7 +25,7 @@ use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::middle::privacy::AccessLevels;\n use crate::rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use crate::session::{config, early_error, Session};\n-use crate::ty::{self, TyCtxt, Ty};\n+use crate::ty::{self, print::Printer, subst::Kind, TyCtxt, Ty};\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::util::nodemap::FxHashMap;\n use crate::util::common::time;\n@@ -36,9 +36,10 @@ use syntax::edition;\n use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n use errors::DiagnosticBuilder;\n use crate::hir;\n-use crate::hir::def_id::{DefId, LOCAL_CRATE};\n+use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use crate::hir::intravisit as hir_visit;\n use crate::hir::intravisit::Visitor;\n+use crate::hir::map::{definitions::DisambiguatedDefPathData, DefPathData};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n \n@@ -752,6 +753,114 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n     pub fn current_lint_root(&self) -> hir::HirId {\n         self.last_node_with_lint_attrs\n     }\n+\n+    /// Check if a `DefId`'s path matches the given absolute type path usage.\n+    // Uplifted from rust-lang/rust-clippy\n+    pub fn match_path(&self, def_id: DefId, path: &[&str]) -> bool {\n+        pub struct AbsolutePathPrinter<'a, 'tcx> {\n+            pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        }\n+\n+        impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n+            type Error = !;\n+\n+            type Path = Vec<LocalInternedString>;\n+            type Region = ();\n+            type Type = ();\n+            type DynExistential = ();\n+\n+            fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+                self.tcx\n+            }\n+\n+            fn print_region(self, _region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n+                Ok(())\n+            }\n+\n+            fn print_type(self, _ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n+                Ok(())\n+            }\n+\n+            fn print_dyn_existential(\n+                self,\n+                _predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+                ) -> Result<Self::DynExistential, Self::Error> {\n+                Ok(())\n+            }\n+\n+            fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n+                Ok(vec![self.tcx.original_crate_name(cnum).as_str()])\n+            }\n+\n+            fn path_qualified(\n+                self,\n+                self_ty: Ty<'tcx>,\n+                trait_ref: Option<ty::TraitRef<'tcx>>,\n+                ) -> Result<Self::Path, Self::Error> {\n+                if trait_ref.is_none() {\n+                    if let ty::Adt(def, substs) = self_ty.sty {\n+                        return self.print_def_path(def.did, substs);\n+                    }\n+                }\n+\n+                // This shouldn't ever be needed, but just in case:\n+                Ok(vec![match trait_ref {\n+                    Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)).as_str(),\n+                    None => Symbol::intern(&format!(\"<{}>\", self_ty)).as_str(),\n+                }])\n+            }\n+\n+            fn path_append_impl(\n+                self,\n+                print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+                _disambiguated_data: &DisambiguatedDefPathData,\n+                self_ty: Ty<'tcx>,\n+                trait_ref: Option<ty::TraitRef<'tcx>>,\n+                ) -> Result<Self::Path, Self::Error> {\n+                let mut path = print_prefix(self)?;\n+\n+                // This shouldn't ever be needed, but just in case:\n+                path.push(match trait_ref {\n+                    Some(trait_ref) => {\n+                        Symbol::intern(&format!(\"<impl {} for {}>\", trait_ref, self_ty)).as_str()\n+                    },\n+                    None => Symbol::intern(&format!(\"<impl {}>\", self_ty)).as_str(),\n+                });\n+\n+                Ok(path)\n+            }\n+\n+            fn path_append(\n+                self,\n+                print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+                disambiguated_data: &DisambiguatedDefPathData,\n+                ) -> Result<Self::Path, Self::Error> {\n+                let mut path = print_prefix(self)?;\n+\n+                // Skip `::{{constructor}}` on tuple/unit structs.\n+                match disambiguated_data.data {\n+                    DefPathData::Ctor => return Ok(path),\n+                    _ => {}\n+                }\n+\n+                path.push(disambiguated_data.data.as_interned_str().as_str());\n+                Ok(path)\n+            }\n+\n+            fn path_generic_args(\n+                self,\n+                print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+                _args: &[Kind<'tcx>],\n+                ) -> Result<Self::Path, Self::Error> {\n+                print_prefix(self)\n+            }\n+        }\n+\n+        let names = AbsolutePathPrinter { tcx: self.tcx }.print_def_path(def_id, &[]).unwrap();\n+\n+        names.len() == path.len()\n+            && names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n+    }\n }\n \n impl<'a, 'tcx> LayoutOf for LateContext<'a, 'tcx> {"}, {"sha": "0bafa93011ec4d1be96dc8d9250d38cebd7b0d0a", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -100,7 +100,7 @@ fn lint_ty_kind_usage(cx: &LateContext<'_, '_>, segment: &PathSegment) -> bool {\n     if segment.ident.as_str() == \"TyKind\" {\n         if let Some(def) = segment.def {\n             if let Some(did) = def.opt_def_id() {\n-                return did.match_path(cx.tcx, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"]);\n+                return cx.match_path(did, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"]);\n             }\n         }\n     }"}, {"sha": "1bbda9b5bcb1aa2e5d7f81b863a62f35c892705c", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1551,9 +1551,7 @@ impl<P: AsRef<Path>> iter::FromIterator<P> for PathBuf {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<P: AsRef<Path>> iter::Extend<P> for PathBuf {\n     fn extend<I: IntoIterator<Item = P>>(&mut self, iter: I) {\n-        for p in iter {\n-            self.push(p.as_ref())\n-        }\n+        iter.into_iter().for_each(move |p| self.push(p.as_ref()));\n     }\n }\n "}, {"sha": "f17020de44ec538ecbbf88f7e7aea934f6685cf0", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -388,9 +388,7 @@ impl Extend<CodePoint> for Wtf8Buf {\n         let (low, _high) = iterator.size_hint();\n         // Lower bound of one byte per code point (ASCII only)\n         self.bytes.reserve(low);\n-        for code_point in iterator {\n-            self.push(code_point);\n-        }\n+        iterator.for_each(move |code_point| self.push(code_point));\n     }\n }\n "}, {"sha": "0e4f9634a6850c6c10747cda0b56192ec8c00717", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1 +1 @@\n-Subproject commit 82f9a0173011b96411d315b332754ee6b35cf00f\n+Subproject commit 0e4f9634a6850c6c10747cda0b56192ec8c00717"}]}