{"sha": "b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "node_id": "C_kwDOAAsO6NoAKGIxY2YxZTdiNmFjZWNmZGY3NzNkZDI0YzA5Y2I0Y2YyNzUwNzQ4MWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-20T23:59:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-20T23:59:07Z"}, "message": "Auto merge of #10303 - pvdrz:pub_crate_missing_docs, r=giraffate\n\nAdd configuration to lint missing docs of `pub(crate)` items\n\nFixes this: https://github.com/rust-lang/rust-clippy/issues/5736#issuecomment-1412442404\n\nTODO:\n- [x] Needs docs\n- [x] Needs better names\n- [x] Should `pub` items be checked to when this new option is enabled? I'm saying no because `missing_docs` already exists\n\n`@flip1995` I'd like to get some input from you :)\n\n---\n\nchangelog: Enhancement: [`missing_docs_in_private_items`]: Added new configuration `missing-docs-in-crate-items` to lint on items visible within the current crate. For example, `pub(crate)` items.\n[#10303](https://github.com/rust-lang/rust-clippy/pull/10303)\n<!-- changelog_checked -->", "tree": {"sha": "4af682816e1539c1698092e6e59b5cbfed129968", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af682816e1539c1698092e6e59b5cbfed129968"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "html_url": "https://github.com/rust-lang/rust/commit/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "574c8aeeb5320a672c4956a8749d577637ad7712", "url": "https://api.github.com/repos/rust-lang/rust/commits/574c8aeeb5320a672c4956a8749d577637ad7712", "html_url": "https://github.com/rust-lang/rust/commit/574c8aeeb5320a672c4956a8749d577637ad7712"}, {"sha": "790f28b1533cbc1aec7ee343b98ea5d570f9928e", "url": "https://api.github.com/repos/rust-lang/rust/commits/790f28b1533cbc1aec7ee343b98ea5d570f9928e", "html_url": "https://github.com/rust-lang/rust/commit/790f28b1533cbc1aec7ee343b98ea5d570f9928e"}], "stats": {"total": 162, "additions": 152, "deletions": 10}, "files": [{"sha": "f74431bee82d75c21de795ef24c67d4fcfb80be7", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "patch": "@@ -53,6 +53,7 @@ Please use that command to update the file and do not edit it by hand.\n | [ignore-interior-mutability](#ignore-interior-mutability) | `[\"bytes::Bytes\"]` |\n | [allow-mixed-uninlined-format-args](#allow-mixed-uninlined-format-args) | `true` |\n | [suppress-restriction-lint-in-const](#suppress-restriction-lint-in-const) | `false` |\n+| [missing-docs-in-crate-items](#missing-docs-in-crate-items) | `false` |\n \n ### arithmetic-side-effects-allowed\n Suppress checking of the passed type names in all types of operations.\n@@ -540,4 +541,13 @@ if no suggestion can be made.\n * [indexing_slicing](https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing)\n \n \n+### missing-docs-in-crate-items\n+Whether to **only** check for missing documentation in items visible within the current\n+crate. For example, `pub(crate)` items.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [missing_docs_in_private_items](https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items)\n+\n+\n "}, {"sha": "7336fa19b12614fb188126815fb09725c2294570", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "patch": "@@ -668,12 +668,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n+    let missing_docs_in_crate_items = conf.missing_docs_in_crate_items;\n     store.register_late_pass(move |_| Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n     store.register_late_pass(|_| Box::new(neg_multiply::NegMultiply));\n     store.register_late_pass(|_| Box::new(mem_forget::MemForget));\n     store.register_late_pass(|_| Box::new(let_if_seq::LetIfSeq));\n     store.register_late_pass(|_| Box::new(mixed_read_write_in_expression::EvalOrderDependence));\n-    store.register_late_pass(|_| Box::new(missing_doc::MissingDoc::new()));\n+    store.register_late_pass(move |_| Box::new(missing_doc::MissingDoc::new(missing_docs_in_crate_items)));\n     store.register_late_pass(|_| Box::new(missing_inline::MissingInline));\n     store.register_late_pass(move |_| Box::new(exhaustive_items::ExhaustiveItems));\n     store.register_late_pass(|_| Box::new(match_result_ok::MatchResultOk));"}, {"sha": "9659ca8ced2efcdb36a44ebbcdf85c5690921efc", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "patch": "@@ -8,11 +8,12 @@\n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::is_from_proc_macro;\n+use hir::def_id::LocalDefId;\n use if_chain::if_chain;\n use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::ty::DefIdTree;\n+use rustc_middle::ty::{DefIdTree, Visibility};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::Span;\n@@ -35,6 +36,9 @@ declare_clippy_lint! {\n }\n \n pub struct MissingDoc {\n+    /// Whether to **only** check for missing documentation in items visible within the current\n+    /// crate. For example, `pub(crate)` items.\n+    crate_items_only: bool,\n     /// Stack of whether #[doc(hidden)] is set\n     /// at each level which has lint attributes.\n     doc_hidden_stack: Vec<bool>,\n@@ -43,14 +47,15 @@ pub struct MissingDoc {\n impl Default for MissingDoc {\n     #[must_use]\n     fn default() -> Self {\n-        Self::new()\n+        Self::new(false)\n     }\n }\n \n impl MissingDoc {\n     #[must_use]\n-    pub fn new() -> Self {\n+    pub fn new(crate_items_only: bool) -> Self {\n         Self {\n+            crate_items_only,\n             doc_hidden_stack: vec![false],\n         }\n     }\n@@ -76,6 +81,7 @@ impl MissingDoc {\n     fn check_missing_docs_attrs(\n         &self,\n         cx: &LateContext<'_>,\n+        def_id: LocalDefId,\n         attrs: &[ast::Attribute],\n         sp: Span,\n         article: &'static str,\n@@ -96,6 +102,13 @@ impl MissingDoc {\n             return;\n         }\n \n+        if self.crate_items_only && def_id != CRATE_DEF_ID {\n+            let vis = cx.tcx.visibility(def_id);\n+            if vis == Visibility::Public || vis != Visibility::Restricted(CRATE_DEF_ID.into()) {\n+                return;\n+            }\n+        }\n+\n         let has_doc = attrs\n             .iter()\n             .any(|a| a.doc_str().is_some() || Self::has_include(a.meta()));\n@@ -124,7 +137,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n-        self.check_missing_docs_attrs(cx, attrs, cx.tcx.def_span(CRATE_DEF_ID), \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, CRATE_DEF_ID, attrs, cx.tcx.def_span(CRATE_DEF_ID), \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {\n@@ -160,7 +173,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n         if !is_from_proc_macro(cx, it) {\n-            self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n+            self.check_missing_docs_attrs(cx, it.owner_id.def_id, attrs, it.span, article, desc);\n         }\n     }\n \n@@ -169,7 +182,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let attrs = cx.tcx.hir().attrs(trait_item.hir_id());\n         if !is_from_proc_macro(cx, trait_item) {\n-            self.check_missing_docs_attrs(cx, attrs, trait_item.span, article, desc);\n+            self.check_missing_docs_attrs(cx, trait_item.owner_id.def_id, attrs, trait_item.span, article, desc);\n         }\n     }\n \n@@ -186,23 +199,23 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         let (article, desc) = cx.tcx.article_and_description(impl_item.owner_id.to_def_id());\n         let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n         if !is_from_proc_macro(cx, impl_item) {\n-            self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n+            self.check_missing_docs_attrs(cx, impl_item.owner_id.def_id, attrs, impl_item.span, article, desc);\n         }\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n             let attrs = cx.tcx.hir().attrs(sf.hir_id);\n             if !is_from_proc_macro(cx, sf) {\n-                self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");\n+                self.check_missing_docs_attrs(cx, sf.def_id, attrs, sf.span, \"a\", \"struct field\");\n             }\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n         let attrs = cx.tcx.hir().attrs(v.hir_id);\n         if !is_from_proc_macro(cx, v) {\n-            self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n+            self.check_missing_docs_attrs(cx, v.def_id, attrs, v.span, \"a\", \"variant\");\n         }\n     }\n }"}, {"sha": "c3c73ac6e378e697c8b666aba691111bdd53a07f", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "patch": "@@ -454,6 +454,11 @@ define_Conf! {\n     /// configuration will cause restriction lints to trigger even\n     /// if no suggestion can be made.\n     (suppress_restriction_lint_in_const: bool = false),\n+    /// Lint: MISSING_DOCS_IN_PRIVATE_ITEMS.\n+    ///\n+    /// Whether to **only** check for missing documentation in items visible within the current\n+    /// crate. For example, `pub(crate)` items.\n+    (missing_docs_in_crate_items: bool = false),\n }\n \n /// Search for the configuration file."}, {"sha": "ec210a987830588e5bd6fb52b5bb5b50a307fc4a", "filename": "tests/ui-toml/pub_crate_missing_docs/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fclippy.toml?ref=b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "patch": "@@ -0,0 +1 @@\n+missing-docs-in-crate-items = true"}, {"sha": "830d71f61dd50b50cf22dc4991d515d452e5e412", "filename": "tests/ui-toml/pub_crate_missing_docs/pub_crate_missing_doc.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.rs?ref=b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "patch": "@@ -0,0 +1,59 @@\n+//! this is crate\n+#![allow(missing_docs)]\n+#![warn(clippy::missing_docs_in_private_items)]\n+\n+/// this is mod\n+mod my_mod {\n+    /// some docs\n+    fn priv_with_docs() {}\n+    fn priv_no_docs() {}\n+    /// some docs\n+    pub(crate) fn crate_with_docs() {}\n+    pub(crate) fn crate_no_docs() {}\n+    /// some docs\n+    pub(super) fn super_with_docs() {}\n+    pub(super) fn super_no_docs() {}\n+\n+    mod my_sub {\n+        /// some docs\n+        fn sub_priv_with_docs() {}\n+        fn sub_priv_no_docs() {}\n+        /// some docs\n+        pub(crate) fn sub_crate_with_docs() {}\n+        pub(crate) fn sub_crate_no_docs() {}\n+        /// some docs\n+        pub(super) fn sub_super_with_docs() {}\n+        pub(super) fn sub_super_no_docs() {}\n+    }\n+\n+    /// some docs\n+    pub(crate) struct CrateStructWithDocs {\n+        /// some docs\n+        pub(crate) crate_field_with_docs: (),\n+        pub(crate) crate_field_no_docs: (),\n+        /// some docs\n+        priv_field_with_docs: (),\n+        priv_field_no_docs: (),\n+    }\n+\n+    pub(crate) struct CrateStructNoDocs {\n+        /// some docs\n+        pub(crate) crate_field_with_docs: (),\n+        pub(crate) crate_field_no_docs: (),\n+        /// some docs\n+        priv_field_with_docs: (),\n+        priv_field_no_docs: (),\n+    }\n+}\n+\n+/// some docs\n+type CrateTypedefWithDocs = String;\n+type CrateTypedefNoDocs = String;\n+/// some docs\n+pub type PubTypedefWithDocs = String;\n+pub type PubTypedefNoDocs = String;\n+\n+fn main() {\n+    my_mod::crate_with_docs();\n+    my_mod::crate_no_docs();\n+}"}, {"sha": "a474187050c17c7a7d0c0da70606ade5f618b6c3", "filename": "tests/ui-toml/pub_crate_missing_docs/pub_crate_missing_doc.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.stderr?ref=b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "patch": "@@ -0,0 +1,52 @@\n+error: missing documentation for a function\n+  --> $DIR/pub_crate_missing_doc.rs:12:5\n+   |\n+LL |     pub(crate) fn crate_no_docs() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::missing-docs-in-private-items` implied by `-D warnings`\n+\n+error: missing documentation for a function\n+  --> $DIR/pub_crate_missing_doc.rs:15:5\n+   |\n+LL |     pub(super) fn super_no_docs() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+  --> $DIR/pub_crate_missing_doc.rs:23:9\n+   |\n+LL |         pub(crate) fn sub_crate_no_docs() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a struct field\n+  --> $DIR/pub_crate_missing_doc.rs:33:9\n+   |\n+LL |         pub(crate) crate_field_no_docs: (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a struct\n+  --> $DIR/pub_crate_missing_doc.rs:39:5\n+   |\n+LL | /     pub(crate) struct CrateStructNoDocs {\n+LL | |         /// some docs\n+LL | |         pub(crate) crate_field_with_docs: (),\n+LL | |         pub(crate) crate_field_no_docs: (),\n+...  |\n+LL | |         priv_field_no_docs: (),\n+LL | |     }\n+   | |_____^\n+\n+error: missing documentation for a struct field\n+  --> $DIR/pub_crate_missing_doc.rs:42:9\n+   |\n+LL |         pub(crate) crate_field_no_docs: (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a type alias\n+  --> $DIR/pub_crate_missing_doc.rs:51:1\n+   |\n+LL | type CrateTypedefNoDocs = String;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "6a246afac76e056a05b9e89b8c2bb9043011dac7", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1cf1e7b6acecfdf773dd24c09cb4cf27507481f/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=b1cf1e7b6acecfdf773dd24c09cb4cf27507481f", "patch": "@@ -33,6 +33,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            max-struct-bools\n            max-suggested-slice-pattern-length\n            max-trait-bounds\n+           missing-docs-in-crate-items\n            msrv\n            pass-by-value-size-limit\n            single-char-binding-names-threshold"}]}