{"sha": "97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZDA4MmM2Y2RjMDVjMGFjN2YzN2Y3YTBjMGIzYTJmOWZlNjk4ZTM=", "commit": {"author": {"name": "Thomas Garcia", "email": "thomasjgarcia1@gmail.com", "date": "2016-07-21T08:03:40Z"}, "committer": {"name": "Thomas Garcia", "email": "thomasjgarcia1@gmail.com", "date": "2016-07-21T08:03:40Z"}, "message": "Make vec::Drain and binary_heap::Drain covariant", "tree": {"sha": "04891668f3286fdd9e798782eebfa71301efc4b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04891668f3286fdd9e798782eebfa71301efc4b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "html_url": "https://github.com/rust-lang/rust/commit/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3/comments", "author": {"login": "tomgarcia", "id": 8011577, "node_id": "MDQ6VXNlcjgwMTE1Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8011577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomgarcia", "html_url": "https://github.com/tomgarcia", "followers_url": "https://api.github.com/users/tomgarcia/followers", "following_url": "https://api.github.com/users/tomgarcia/following{/other_user}", "gists_url": "https://api.github.com/users/tomgarcia/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomgarcia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomgarcia/subscriptions", "organizations_url": "https://api.github.com/users/tomgarcia/orgs", "repos_url": "https://api.github.com/users/tomgarcia/repos", "events_url": "https://api.github.com/users/tomgarcia/events{/privacy}", "received_events_url": "https://api.github.com/users/tomgarcia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomgarcia", "id": 8011577, "node_id": "MDQ6VXNlcjgwMTE1Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8011577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomgarcia", "html_url": "https://github.com/tomgarcia", "followers_url": "https://api.github.com/users/tomgarcia/followers", "following_url": "https://api.github.com/users/tomgarcia/following{/other_user}", "gists_url": "https://api.github.com/users/tomgarcia/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomgarcia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomgarcia/subscriptions", "organizations_url": "https://api.github.com/users/tomgarcia/orgs", "repos_url": "https://api.github.com/users/tomgarcia/repos", "events_url": "https://api.github.com/users/tomgarcia/events{/privacy}", "received_events_url": "https://api.github.com/users/tomgarcia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936bfea94b800551c972e5689ae7da86d3d601de", "url": "https://api.github.com/repos/rust-lang/rust/commits/936bfea94b800551c972e5689ae7da86d3d601de", "html_url": "https://github.com/rust-lang/rust/commit/936bfea94b800551c972e5689ae7da86d3d601de"}], "stats": {"total": 88, "additions": 40, "deletions": 48}, "files": [{"sha": "f6ca90234c5b4f2f0318230aa26d26bb1fe302a9", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "patch": "@@ -1016,12 +1016,12 @@ impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// An iterator that drains a `BinaryHeap`.\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-pub struct Drain<'a, T: 'a> {\n-    iter: vec::Drain<'a, T>,\n+pub struct Drain<T> {\n+    iter: vec::Drain<T>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: 'a> Iterator for Drain<'a, T> {\n+impl<T> Iterator for Drain<T> {\n     type Item = T;\n \n     #[inline]\n@@ -1036,15 +1036,15 @@ impl<'a, T: 'a> Iterator for Drain<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> {\n+impl<T> DoubleEndedIterator for Drain<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}\n+impl<T> ExactSizeIterator for Drain<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {"}, {"sha": "f4855cce3b4a2280891d18805c32268c3c4b7b88", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "patch": "@@ -74,6 +74,7 @@ use core::ops::{Index, IndexMut};\n use core::ops;\n use core::ptr;\n use core::slice;\n+use super::vec_deque::VecDeque;\n \n use super::SpecExtend;\n use super::range::RangeArgument;\n@@ -843,20 +844,20 @@ impl<T> Vec<T> {\n         let end = *range.end().unwrap_or(&len);\n         assert!(start <= end);\n         assert!(end <= len);\n+        let mut drain_vec = VecDeque::new();\n \n         unsafe {\n-            // set self.vec length's to start, to be safe in case Drain is leaked\n-            self.set_len(start);\n-            // Use the borrow in the IterMut to indicate borrowing behavior of the\n-            // whole Drain iterator (like &mut T).\n-            let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().offset(start as isize),\n-                                                        end - start);\n-            Drain {\n-                tail_start: end,\n-                tail_len: len - end,\n-                iter: range_slice.iter_mut(),\n-                vec: self as *mut _,\n+            for i in start..end {\n+                    let p = self.as_ptr().offset(i as isize);\n+                    drain_vec.push_back(ptr::read(p));\n             }\n+            let src = self.as_ptr().offset(end as isize);\n+            let dst = self.as_mut_ptr().offset(start as isize);\n+            ptr::copy(src, dst, len - end);\n+            self.set_len(len - (end - start));\n+        }\n+        Drain {\n+            deque: drain_vec\n         }\n     }\n \n@@ -1755,64 +1756,43 @@ impl<T> Drop for IntoIter<T> {\n /// [`drain`]: struct.Vec.html#method.drain\n /// [`Vec`]: struct.Vec.html\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-pub struct Drain<'a, T: 'a> {\n-    /// Index of tail to preserve\n-    tail_start: usize,\n-    /// Length of tail\n-    tail_len: usize,\n+pub struct Drain<T> {\n     /// Current remaining range to remove\n-    iter: slice::IterMut<'a, T>,\n-    vec: *mut Vec<T>,\n+    deque: VecDeque<T>\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n+unsafe impl<T: Sync> Sync for Drain<T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-unsafe impl<'a, T: Send> Send for Drain<'a, T> {}\n+unsafe impl<T: Send> Send for Drain<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Iterator for Drain<'a, T> {\n+impl<T> Iterator for Drain<T> {\n     type Item = T;\n \n     #[inline]\n     fn next(&mut self) -> Option<T> {\n-        self.iter.next().map(|elt| unsafe { ptr::read(elt as *const _) })\n+        self.deque.pop_front()\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.size_hint()\n+        (self.deque.len(), Some(self.deque.len()))\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n+impl<T> DoubleEndedIterator for Drain<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n-        self.iter.next_back().map(|elt| unsafe { ptr::read(elt as *const _) })\n+        self.deque.pop_back()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Drop for Drain<'a, T> {\n+impl<T> Drop for Drain<T> {\n     fn drop(&mut self) {\n-        // exhaust self first\n-        while let Some(_) = self.next() {}\n-\n-        if self.tail_len > 0 {\n-            unsafe {\n-                let source_vec = &mut *self.vec;\n-                // memmove back untouched tail, update to new length\n-                let start = source_vec.len();\n-                let tail = self.tail_start;\n-                let src = source_vec.as_ptr().offset(tail as isize);\n-                let dst = source_vec.as_mut_ptr().offset(start as isize);\n-                ptr::copy(src, dst, self.tail_len);\n-                source_vec.set_len(start + self.tail_len);\n-            }\n-        }\n     }\n }\n \n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> ExactSizeIterator for Drain<'a, T> {}\n+impl<T> ExactSizeIterator for Drain<T> {}"}, {"sha": "39efc9fc22c39efb97d78bcc8cb100743978fb99", "filename": "src/libcollectionstest/binary_heap.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3/src%2Flibcollectionstest%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3/src%2Flibcollectionstest%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbinary_heap.rs?ref=97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::collections::BinaryHeap;\n+use std::collections::binary_heap::Drain;\n \n #[test]\n fn test_iterator() {\n@@ -292,3 +293,8 @@ fn test_extend_specialization() {\n \n     assert_eq!(a.into_sorted_vec(), [-20, -10, 1, 2, 3, 3, 5, 43]);\n }\n+\n+#[allow(dead_code)]\n+fn assert_covariance() {\n+    fn drain<'new>(d: Drain<&'static str>) -> Drain<&'new str> { d }\n+}"}, {"sha": "01656b44a8495a5e88a9bd320f74a18cda49411e", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=97d082c6cdc05c0ac7f37f7a0c0b3a2f9fe698e3", "patch": "@@ -11,6 +11,7 @@\n use std::borrow::Cow;\n use std::iter::{FromIterator, repeat};\n use std::mem::size_of;\n+use std::vec::Drain;\n \n use test::Bencher;\n \n@@ -510,6 +511,11 @@ fn test_cow_from() {\n     }\n }\n \n+#[allow(dead_code)]\n+fn assert_covariance() {\n+    fn drain<'new>(d: Drain<&'static str>) -> Drain<&'new str> { d }\n+}\n+\n #[bench]\n fn bench_new(b: &mut Bencher) {\n     b.iter(|| {"}]}