{"sha": "2f171ca78d306d105a9e36f8e509039d6a034c8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMTcxY2E3OGQzMDZkMTA1YTllMzZmOGU1MDkwMzlkNmEwMzRjOGU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-09T18:04:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-09T18:04:39Z"}, "message": "Show completions for enum variant with self prefix if inside impl", "tree": {"sha": "6a2afbb343a591a42a3892c1075f151f41486259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a2afbb343a591a42a3892c1075f151f41486259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f171ca78d306d105a9e36f8e509039d6a034c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f171ca78d306d105a9e36f8e509039d6a034c8e", "html_url": "https://github.com/rust-lang/rust/commit/2f171ca78d306d105a9e36f8e509039d6a034c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f171ca78d306d105a9e36f8e509039d6a034c8e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69", "html_url": "https://github.com/rust-lang/rust/commit/12c7b66a7c6963d42ab5f33a9ac3f0b30e351b69"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "fb67756bbfca2760edc5f7f498b1d2eb4be3dfa1", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f171ca78d306d105a9e36f8e509039d6a034c8e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f171ca78d306d105a9e36f8e509039d6a034c8e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=2f171ca78d306d105a9e36f8e509039d6a034c8e", "patch": "@@ -2,7 +2,7 @@\n \n use std::iter;\n \n-use hir::{Adt, ModuleDef, ScopeDef, Type};\n+use hir::{known, Adt, ModuleDef, ScopeDef, Type};\n use syntax::AstNode;\n use test_utils::mark;\n \n@@ -59,6 +59,18 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n             enum_data.module(ctx.db)\n         };\n \n+        if let Some(impl_) = ctx.impl_def.as_ref().and_then(|impl_| ctx.sema.to_def(impl_)) {\n+            if impl_.target_ty(ctx.db) == *ty {\n+                for &variant in &variants {\n+                    let self_path = hir::ModPath::from_segments(\n+                        hir::PathKind::Plain,\n+                        iter::once(known::SELF_TYPE).chain(iter::once(variant.name(ctx.db))),\n+                    );\n+                    acc.add_qualified_enum_variant(ctx, variant, self_path.clone());\n+                }\n+            }\n+        }\n+\n         for variant in variants {\n             if let Some(path) = module.find_use_path(ctx.db, ModuleDef::from(variant)) {\n                 // Variants with trivial paths are already added by the existing completion logic,\n@@ -728,6 +740,28 @@ fn f() -> m::E { V$0 }\n         )\n     }\n \n+    #[test]\n+    fn completes_enum_variant_impl() {\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n+impl Foo {\n+    fn foo() { let foo: Foo = Q$0 }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Self::Bar  ()\n+                ev Self::Baz  ()\n+                ev Self::Quux ()\n+                ev Foo::Bar   ()\n+                ev Foo::Baz   ()\n+                ev Foo::Quux  ()\n+                sp Self\n+                en Foo\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn dont_complete_attr() {\n         check("}]}