{"sha": "4a7483c9054a89949a74876ce2f5cb5f3eae235f", "node_id": "C_kwDOAAsO6NoAKDRhNzQ4M2M5MDU0YTg5OTQ5YTc0ODc2Y2UyZjVjYjVmM2VhZTIzNWY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-28T00:40:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-28T00:40:32Z"}, "message": "Rollup merge of #96377 - compiler-errors:infer-rustfix, r=petrochenkov\n\nmake `fn() -> _ { .. }` suggestion MachineApplicable\n\nThis might not be valid, but it would be nice to promote this to `MachineApplicable` so people can use rustfix here.\n\nAlso de65fcf009d07019689cfad7f327667e390a325d is to [restore the suggestion for `issue-77179.rs`](https://github.com/rust-lang/rust/commit/de65fcf009d07019689cfad7f327667e390a325d#diff-12e43fb5d6d12ec7cb5c6b48204a18d113cf5de0e12eb71a358b639bd9aadaf0R8). (though in this case, the code in that issue still doesn't compile, so it's not marked with rustfix).", "tree": {"sha": "57d7d6d255b4339f824f6a30a35b0e88644a6298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57d7d6d255b4339f824f6a30a35b0e88644a6298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a7483c9054a89949a74876ce2f5cb5f3eae235f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiaeKACRBK7hj4Ov3rIwAAV9kIAFud4Ba5/gQ1cmODUBulytMC\n4/eEst9ogd48XI0XGf7txC2DiBQ5Vd1KQ0y6pJOE0uEXd/0oEPtS19sMTwdgeavl\nU0BPfaGZ8hIxZaOIwEe3uEKL5yvweNXvPhYV3wbw/i7t5Fd+MCXGUQLeCNNdsffS\nB7LRKjspEymb+4CC9yz7P2HOxc8IgKS4a/85stEotyOzv80QK8oEQyBxvT0dLKAJ\nbQqkHoCZndkyVxgkzpFwTCDqwSQaC0JoX5AOGc7TcfnOjdWwT9qw08U3c0bTep2K\nTWB3AULHQgi0Vb8wV1S6PcmnkXdTY99VcyQ0wbMyL38NFHIo6QDfA3OiF607nnI=\n=8bIM\n-----END PGP SIGNATURE-----\n", "payload": "tree 57d7d6d255b4339f824f6a30a35b0e88644a6298\nparent 69a5d2481e856a5a18885390b8cf6950b9ff8dd3\nparent f9e7489f87f910c2ee87b7cf1052e368c1f191b6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1651106432 +0200\ncommitter GitHub <noreply@github.com> 1651106432 +0200\n\nRollup merge of #96377 - compiler-errors:infer-rustfix, r=petrochenkov\n\nmake `fn() -> _ { .. }` suggestion MachineApplicable\n\nThis might not be valid, but it would be nice to promote this to `MachineApplicable` so people can use rustfix here.\n\nAlso de65fcf009d07019689cfad7f327667e390a325d is to [restore the suggestion for `issue-77179.rs`](https://github.com/rust-lang/rust/commit/de65fcf009d07019689cfad7f327667e390a325d#diff-12e43fb5d6d12ec7cb5c6b48204a18d113cf5de0e12eb71a358b639bd9aadaf0R8). (though in this case, the code in that issue still doesn't compile, so it's not marked with rustfix).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7483c9054a89949a74876ce2f5cb5f3eae235f", "html_url": "https://github.com/rust-lang/rust/commit/4a7483c9054a89949a74876ce2f5cb5f3eae235f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a7483c9054a89949a74876ce2f5cb5f3eae235f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a5d2481e856a5a18885390b8cf6950b9ff8dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/69a5d2481e856a5a18885390b8cf6950b9ff8dd3", "html_url": "https://github.com/rust-lang/rust/commit/69a5d2481e856a5a18885390b8cf6950b9ff8dd3"}, {"sha": "f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e7489f87f910c2ee87b7cf1052e368c1f191b6", "html_url": "https://github.com/rust-lang/rust/commit/f9e7489f87f910c2ee87b7cf1052e368c1f191b6"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "8c8a2650fd65790cd91a3d34d3b23d4db2e8fd43", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=4a7483c9054a89949a74876ce2f5cb5f3eae235f", "patch": "@@ -3,8 +3,8 @@\n use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::TyKind::*;\n use crate::ty::{\n-    ConstKind, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, InferTy,\n-    ProjectionTy, Term, Ty, TyCtxt, TypeAndMut,\n+    ConstKind, DefIdTree, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef,\n+    InferTy, ProjectionTy, Term, Ty, TyCtxt, TypeAndMut,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -74,10 +74,10 @@ impl<'tcx> Ty<'tcx> {\n     }\n \n     /// Whether the type can be safely suggested during error recovery.\n-    pub fn is_suggestable(self) -> bool {\n-        fn generic_arg_is_suggestible(arg: GenericArg<'_>) -> bool {\n+    pub fn is_suggestable(self, tcx: TyCtxt<'tcx>) -> bool {\n+        fn generic_arg_is_suggestible<'tcx>(arg: GenericArg<'tcx>, tcx: TyCtxt<'tcx>) -> bool {\n             match arg.unpack() {\n-                GenericArgKind::Type(ty) => ty.is_suggestable(),\n+                GenericArgKind::Type(ty) => ty.is_suggestable(tcx),\n                 GenericArgKind::Const(c) => const_is_suggestable(c.val()),\n                 _ => true,\n             }\n@@ -99,36 +99,46 @@ impl<'tcx> Ty<'tcx> {\n         // temporary, so I'll leave this as a fixme.\n \n         match self.kind() {\n-            Opaque(..)\n-            | FnDef(..)\n+            FnDef(..)\n             | Closure(..)\n             | Infer(..)\n             | Generator(..)\n             | GeneratorWitness(..)\n             | Bound(_, _)\n             | Placeholder(_)\n             | Error(_) => false,\n+            Opaque(did, substs) => {\n+                let parent = tcx.parent(*did).expect(\"opaque types always have a parent\");\n+                if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = tcx.def_kind(parent)\n+                    && let Opaque(parent_did, _) = tcx.type_of(parent).kind()\n+                    && parent_did == did\n+                {\n+                    substs.iter().all(|a| generic_arg_is_suggestible(a, tcx))\n+                } else {\n+                    false\n+                }\n+            }\n             Dynamic(dty, _) => dty.iter().all(|pred| match pred.skip_binder() {\n                 ExistentialPredicate::Trait(ExistentialTraitRef { substs, .. }) => {\n-                    substs.iter().all(generic_arg_is_suggestible)\n+                    substs.iter().all(|a| generic_arg_is_suggestible(a, tcx))\n                 }\n                 ExistentialPredicate::Projection(ExistentialProjection {\n                     substs, term, ..\n                 }) => {\n                     let term_is_suggestable = match term {\n-                        Term::Ty(ty) => ty.is_suggestable(),\n+                        Term::Ty(ty) => ty.is_suggestable(tcx),\n                         Term::Const(c) => const_is_suggestable(c.val()),\n                     };\n-                    term_is_suggestable && substs.iter().all(generic_arg_is_suggestible)\n+                    term_is_suggestable && substs.iter().all(|a| generic_arg_is_suggestible(a, tcx))\n                 }\n                 _ => true,\n             }),\n             Projection(ProjectionTy { substs: args, .. }) | Adt(_, args) => {\n-                args.iter().all(generic_arg_is_suggestible)\n+                args.iter().all(|a| generic_arg_is_suggestible(a, tcx))\n             }\n-            Tuple(args) => args.iter().all(|ty| ty.is_suggestable()),\n-            Slice(ty) | RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => ty.is_suggestable(),\n-            Array(ty, c) => ty.is_suggestable() && const_is_suggestable(c.val()),\n+            Tuple(args) => args.iter().all(|ty| ty.is_suggestable(tcx)),\n+            Slice(ty) | RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => ty.is_suggestable(tcx),\n+            Array(ty, c) => ty.is_suggestable(tcx) && const_is_suggestable(c.val()),\n             _ => true,\n         }\n     }"}, {"sha": "794e711b6c83106940755fd831f3d6aed117eb2a", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=4a7483c9054a89949a74876ce2f5cb5f3eae235f", "patch": "@@ -86,7 +86,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let param_type = tcx.infer_ctxt().enter(|infcx| {\n                             infcx.resolve_numeric_literals_with_default(tcx.type_of(param.def_id))\n                         });\n-                        if param_type.is_suggestable() {\n+                        if param_type.is_suggestable(tcx) {\n                             err.span_suggestion(\n                                 tcx.def_span(src_def_id),\n                                 \"consider changing this type parameter to be a `const` generic\","}, {"sha": "3e36ffa7fe0d2f4291dfae5a032f7cb9752ca61f", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=4a7483c9054a89949a74876ce2f5cb5f3eae235f", "patch": "@@ -2466,7 +2466,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     span,\n                     ty,\n                     opt_sugg: Some((span, Applicability::MachineApplicable))\n-                        .filter(|_| ty.is_suggestable()),\n+                        .filter(|_| ty.is_suggestable(tcx)),\n                 });\n \n                 ty"}, {"sha": "8db9da7fcb23a67d0f47cc9b625563783699bd1b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=4a7483c9054a89949a74876ce2f5cb5f3eae235f", "patch": "@@ -525,7 +525,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.resolve_numeric_literals_with_default(self.resolve_vars_if_possible(found));\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n-        match (&fn_decl.output, found.is_suggestable(), can_suggest, expected.is_unit()) {\n+        match (&fn_decl.output, found.is_suggestable(self.tcx), can_suggest, expected.is_unit()) {\n             (&hir::FnRetTy::DefaultReturn(span), true, true, true) => {\n                 err.span_suggestion(\n                     span,"}, {"sha": "0ccc2b6b182c4c6ecb66b7919f38507fce125ca7", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7483c9054a89949a74876ce2f5cb5f3eae235f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4a7483c9054a89949a74876ce2f5cb5f3eae235f", "patch": "@@ -41,7 +41,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, Ty, TyCtxt};\n-use rustc_middle::ty::{ReprOptions, ToPredicate, TypeFoldable};\n+use rustc_middle::ty::{ReprOptions, ToPredicate};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -2004,28 +2004,29 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n             visitor.visit_ty(ty);\n             let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n             let ret_ty = fn_sig.skip_binder().output();\n-            if !ret_ty.references_error() {\n-                if !ret_ty.is_closure() {\n-                    let ret_ty_str = match ret_ty.kind() {\n-                        // Suggest a function pointer return type instead of a unique function definition\n-                        // (e.g. `fn() -> i32` instead of `fn() -> i32 { f }`, the latter of which is invalid\n-                        // syntax)\n-                        ty::FnDef(..) => ret_ty.fn_sig(tcx).to_string(),\n-                        _ => ret_ty.to_string(),\n-                    };\n+            if ret_ty.is_suggestable(tcx) {\n+                diag.span_suggestion(\n+                    ty.span,\n+                    \"replace with the correct return type\",\n+                    ret_ty.to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+            } else if matches!(ret_ty.kind(), ty::FnDef(..)) {\n+                let fn_sig = ret_ty.fn_sig(tcx);\n+                if fn_sig.skip_binder().inputs_and_output.iter().all(|t| t.is_suggestable(tcx)) {\n                     diag.span_suggestion(\n                         ty.span,\n                         \"replace with the correct return type\",\n-                        ret_ty_str,\n-                        Applicability::MaybeIncorrect,\n+                        fn_sig.to_string(),\n+                        Applicability::MachineApplicable,\n                     );\n-                } else {\n-                    // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n-                    // to prevent the user from getting a papercut while trying to use the unique closure\n-                    // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n-                    diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n-                    diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n                 }\n+            } else if ret_ty.is_closure() {\n+                // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n+                // to prevent the user from getting a papercut while trying to use the unique closure\n+                // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n+                diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n+                diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n             }\n             diag.emit();\n "}]}