{"sha": "c9a02c2e427fa22c8a86f7818dcde17e53151c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YTAyYzJlNDI3ZmEyMmM4YTg2Zjc4MThkY2RlMTdlNTMxNTFjMzA=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-29T12:14:52Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-29T14:23:13Z"}, "message": "use .copied() instead of .map(|x| *x) on iterators", "tree": {"sha": "fe98199cffe0ef210984db1d626b6280ce262553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe98199cffe0ef210984db1d626b6280ce262553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a02c2e427fa22c8a86f7818dcde17e53151c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a02c2e427fa22c8a86f7818dcde17e53151c30", "html_url": "https://github.com/rust-lang/rust/commit/c9a02c2e427fa22c8a86f7818dcde17e53151c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a02c2e427fa22c8a86f7818dcde17e53151c30/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f9bddc7fea3ca1d49f39f22bb937a84ed32f84e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9bddc7fea3ca1d49f39f22bb937a84ed32f84e", "html_url": "https://github.com/rust-lang/rust/commit/3f9bddc7fea3ca1d49f39f22bb937a84ed32f84e"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "d8be4194c9e1694937f2fff954ef1886e4cee0e9", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -20,7 +20,7 @@ use std::cmp::Ord;\n \n fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n     debug_assert!(!ich::IGNORED_ATTRIBUTES.is_empty());\n-    ich::IGNORED_ATTRIBUTES.iter().map(|&s| s).collect()\n+    ich::IGNORED_ATTRIBUTES.iter().copied().collect()\n }\n \n /// This is the context state available during incr. comp. hashing. It contains"}, {"sha": "1d043f5dcdefacd7198e2f2b3b9367cf0c358334", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -635,7 +635,7 @@ impl<'tcx> ScopeTree {\n     /// Used to sanity check visit_expr call count when\n     /// calculating generator interiors.\n     pub fn body_expr_count(&self, body_id: hir::BodyId) -> Option<usize> {\n-        self.body_expr_count.get(&body_id).map(|r| *r)\n+        self.body_expr_count.get(&body_id).copied()\n     }\n }\n "}, {"sha": "23ec924573cdc41767dd2a2b803547b3caf591f9", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -1179,7 +1179,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let from_err_expr =\n                 self.wrap_in_try_constructor(sym::from_error, unstable_span, from_expr, try_span);\n             let thin_attrs = ThinVec::from(attrs);\n-            let catch_scope = self.catch_scopes.last().map(|x| *x);\n+            let catch_scope = self.catch_scopes.last().copied();\n             let ret_expr = if let Some(catch_node) = catch_scope {\n                 let target_id = Ok(self.lower_node_id(catch_node));\n                 self.arena.alloc(self.expr("}, {"sha": "9092caef60a93b7dfbf2eae528cfb4ca7a661001", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -359,7 +359,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             refs.sort();\n             refs.dedup();\n             let (arg_list, mut sp) = if refs.len() == 1 {\n-                let spans: Vec<_> = spans.into_iter().filter_map(|sp| sp.map(|sp| *sp)).collect();\n+                let spans: Vec<_> = spans.into_iter().filter_map(|sp| sp.copied()).collect();\n                 (\n                     format!(\"argument {}\", refs[0]),\n                     if spans.is_empty() {"}, {"sha": "3607e59a52cb43e188ff83d84f27166237f50193", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -970,7 +970,7 @@ fn check_matcher_core(\n                                         msg,\n                                         ts[..ts.len() - 1]\n                                             .iter()\n-                                            .map(|s| *s)\n+                                            .copied()\n                                             .collect::<Vec<_>>()\n                                             .join(\", \"),\n                                         ts[ts.len() - 1],"}, {"sha": "79dc4364a616476015919863f35b4a3f1d29aba8", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -503,7 +503,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             },\n             proc_macro_data,\n             proc_macro_stability: if is_proc_macro {\n-                tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).map(|stab| *stab)\n+                tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied()\n             } else {\n                 None\n             },"}, {"sha": "53e10f86a2cecd511060c7b6ecf0c0ae3624cff2", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -305,7 +305,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let mut caller_iter = caller_args\n                             .iter()\n                             .filter(|op| !rust_abi || !op.layout.is_zst())\n-                            .map(|op| *op);\n+                            .copied();\n \n                         // Now we have to spread them out across the callee's locals,\n                         // taking into account the `spread_arg`.  If we could write"}, {"sha": "46d49b6b4933f863464a1635ad1fe97754cf94b6", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -187,13 +187,12 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                 if let Some((adt_def, index)) = adt_data {\n                     let substs = cx.tables().node_substs(fun.hir_id);\n                     let user_provided_types = cx.tables().user_provided_types();\n-                    let user_ty =\n-                        user_provided_types.get(fun.hir_id).map(|u_ty| *u_ty).map(|mut u_ty| {\n-                            if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {\n-                                *did = adt_def.did;\n-                            }\n-                            u_ty\n-                        });\n+                    let user_ty = user_provided_types.get(fun.hir_id).copied().map(|mut u_ty| {\n+                        if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {\n+                            *did = adt_def.did;\n+                        }\n+                        u_ty\n+                    });\n                     debug!(\"make_mirror_unadjusted: (call) user_ty={:?}\", user_ty);\n \n                     let field_refs = args\n@@ -329,7 +328,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             ty::Adt(adt, substs) => match adt.adt_kind() {\n                 AdtKind::Struct | AdtKind::Union => {\n                     let user_provided_types = cx.tables().user_provided_types();\n-                    let user_ty = user_provided_types.get(expr.hir_id).map(|u_ty| *u_ty);\n+                    let user_ty = user_provided_types.get(expr.hir_id).copied();\n                     debug!(\"make_mirror_unadjusted: (struct/union) user_ty={:?}\", user_ty);\n                     ExprKind::Adt {\n                         adt_def: adt,\n@@ -351,7 +350,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n \n                             let index = adt.variant_index_with_id(variant_id);\n                             let user_provided_types = cx.tables().user_provided_types();\n-                            let user_ty = user_provided_types.get(expr.hir_id).map(|u_ty| *u_ty);\n+                            let user_ty = user_provided_types.get(expr.hir_id).copied();\n                             debug!(\"make_mirror_unadjusted: (variant) user_ty={:?}\", user_ty);\n                             ExprKind::Adt {\n                                 adt_def: adt,\n@@ -570,7 +569,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n         }\n         hir::ExprKind::Type(ref source, ref ty) => {\n             let user_provided_types = cx.tables.user_provided_types();\n-            let user_ty = user_provided_types.get(ty.hir_id).map(|u_ty| *u_ty);\n+            let user_ty = user_provided_types.get(ty.hir_id).copied();\n             debug!(\"make_mirror_unadjusted: (type) user_ty={:?}\", user_ty);\n             if source.is_syntactic_place_expr() {\n                 ExprKind::PlaceTypeAscription { source: source.to_ref(), user_ty }\n@@ -605,7 +604,7 @@ fn user_substs_applied_to_res<'tcx>(\n         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n         | Res::Def(DefKind::Const, _)\n         | Res::Def(DefKind::AssocConst, _) => {\n-            cx.tables().user_provided_types().get(hir_id).map(|u_ty| *u_ty)\n+            cx.tables().user_provided_types().get(hir_id).copied()\n         }\n \n         // A unit struct/variant which is used as a value (e.g.,\n@@ -744,7 +743,7 @@ fn convert_path_expr<'a, 'tcx>(\n \n         Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {\n             let user_provided_types = cx.tables.user_provided_types();\n-            let user_provided_type = user_provided_types.get(expr.hir_id).map(|u_ty| *u_ty);\n+            let user_provided_type = user_provided_types.get(expr.hir_id).copied();\n             debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);\n             let ty = cx.tables().node_type(expr.hir_id);\n             match ty.kind {"}, {"sha": "90e4f53647846c531656230704a4cf92c986b5f5", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -411,7 +411,7 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n     }\n \n     fn iter(&self) -> impl Iterator<Item = &Pat<'tcx>> {\n-        self.0.iter().map(|p| *p)\n+        self.0.iter().copied()\n     }\n \n     // If the first pattern is an or-pattern, expand this pattern. Otherwise, return `None`."}, {"sha": "3b665e1d6dc05c0731daea4f12dde3ae821967c3", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -206,7 +206,7 @@ impl SourceMap {\n         &self,\n         stable_id: StableSourceFileId,\n     ) -> Option<Lrc<SourceFile>> {\n-        self.files.borrow().stable_id_to_source_file.get(&stable_id).map(|sf| sf.clone())\n+        self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()\n     }\n \n     fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {"}, {"sha": "97ed50b3500c0a0c8dd0589a1c50d723ac82b035", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     .skip_binder()\n                                     .get(0)\n                                     .filter(|ty| ty.is_region_ptr() && !rcvr_ty.is_region_ptr())\n-                                    .map(|ty| *ty)\n+                                    .copied()\n                                     .unwrap_or(rcvr_ty),\n                             };\n                             print_disambiguation_help("}, {"sha": "d025f81153f70f5e169b018232140e370d345e91", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -1315,7 +1315,7 @@ fn check_fn<'a, 'tcx>(\n         fcx.require_type_is_sized(yield_ty, span, traits::SizedYieldType);\n \n         // Resume type defaults to `()` if the generator has no argument.\n-        let resume_ty = fn_sig.inputs().get(0).map(|ty| *ty).unwrap_or_else(|| tcx.mk_unit());\n+        let resume_ty = fn_sig.inputs().get(0).copied().unwrap_or_else(|| tcx.mk_unit());\n \n         fcx.resume_yield_tys = Some((resume_ty, yield_ty));\n     }"}, {"sha": "7ec3686c013d5800df93a85543159ccc8ded96c3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -2236,7 +2236,7 @@ fn from_target_feature(\n             };\n \n             // Only allow features whose feature gates have been enabled.\n-            let allowed = match feature_gate.as_ref().map(|s| *s) {\n+            let allowed = match feature_gate.as_ref().copied() {\n                 Some(sym::arm_target_feature) => rust_features.arm_target_feature,\n                 Some(sym::aarch64_target_feature) => rust_features.aarch64_target_feature,\n                 Some(sym::hexagon_target_feature) => rust_features.hexagon_target_feature,"}, {"sha": "f7b6e0fce5a2109b850e52c82a9cac3afa7adf28", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -25,7 +25,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n             hir::ItemKind::Struct(..) | hir::ItemKind::Enum(..) | hir::ItemKind::Union(..) => {\n                 let crate_map = tcx.inferred_outlives_crate(LOCAL_CRATE);\n \n-                let predicates = crate_map.predicates.get(&item_def_id).map(|p| *p).unwrap_or(&[]);\n+                let predicates = crate_map.predicates.get(&item_def_id).copied().unwrap_or(&[]);\n \n                 if tcx.has_attr(item_def_id, sym::rustc_outlives) {\n                     let mut pred: Vec<String> = predicates"}, {"sha": "ddde11b38448bbf88e094ce3c53f600efc00f6ee", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -79,5 +79,5 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n     // Everything else must be inferred.\n \n     let crate_map = tcx.crate_variances(LOCAL_CRATE);\n-    crate_map.variances.get(&item_def_id).map(|p| *p).unwrap_or(&[])\n+    crate_map.variances.get(&item_def_id).copied().unwrap_or(&[])\n }"}, {"sha": "5c975c6272b97d99bcc2aa10c002dffbdc978ef2", "filename": "src/libtest/test_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibtest%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a02c2e427fa22c8a86f7818dcde17e53151c30/src%2Flibtest%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftest_result.rs?ref=c9a02c2e427fa22c8a86f7818dcde17e53151c30", "patch": "@@ -40,7 +40,7 @@ pub fn calc_result<'a>(\n             let maybe_panic_str = err\n                 .downcast_ref::<String>()\n                 .map(|e| &**e)\n-                .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e));\n+                .or_else(|| err.downcast_ref::<&'static str>().copied());\n \n             if maybe_panic_str.map(|e| e.contains(msg)).unwrap_or(false) {\n                 TestResult::TrOk"}]}