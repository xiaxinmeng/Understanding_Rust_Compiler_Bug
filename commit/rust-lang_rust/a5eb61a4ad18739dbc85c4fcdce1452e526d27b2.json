{"sha": "a5eb61a4ad18739dbc85c4fcdce1452e526d27b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZWI2MWE0YWQxODczOWRiYzg1YzRmY2RjZTE0NTJlNTI2ZDI3YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-10T09:34:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-10T09:34:31Z"}, "message": "Auto merge of #902 - RalfJung:ldexp, r=RalfJung\n\nuse apfloat for ldexp", "tree": {"sha": "c2fa036482e34f79e148883b90e8788f95e949d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2fa036482e34f79e148883b90e8788f95e949d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5eb61a4ad18739dbc85c4fcdce1452e526d27b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5eb61a4ad18739dbc85c4fcdce1452e526d27b2", "html_url": "https://github.com/rust-lang/rust/commit/a5eb61a4ad18739dbc85c4fcdce1452e526d27b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5eb61a4ad18739dbc85c4fcdce1452e526d27b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8", "html_url": "https://github.com/rust-lang/rust/commit/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8"}, {"sha": "04892d915512abe85d7a663b68dc62ef802eef30", "url": "https://api.github.com/repos/rust-lang/rust/commits/04892d915512abe85d7a663b68dc62ef802eef30", "html_url": "https://github.com/rust-lang/rust/commit/04892d915512abe85d7a663b68dc62ef802eef30"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "0288773044ac5f170b0cd4220652a66268bebc1c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a5eb61a4ad18739dbc85c4fcdce1452e526d27b2/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5eb61a4ad18739dbc85c4fcdce1452e526d27b2/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=a5eb61a4ad18739dbc85c4fcdce1452e526d27b2", "patch": "@@ -1,3 +1,6 @@\n+use std::convert::TryInto;\n+\n+use rustc_apfloat::Float;\n use rustc::ty::layout::{Align, LayoutOf, Size};\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n@@ -577,7 +580,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 };\n                 this.write_scalar(Scalar::from_u64(f.to_bits()), dest)?;\n             }\n-            // underscore case for windows\n+            // underscore case for windows, here and below\n+            // (see https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/floating-point-primitives?view=vs-2019)\n             \"_hypot\" | \"hypot\" | \"atan2\" => {\n                 // FIXME: Using host floats.\n                 let f1 = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n@@ -589,16 +593,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 };\n                 this.write_scalar(Scalar::from_u64(n.to_bits()), dest)?;\n             }\n-            // underscore case for windows\n-            \"_ldexp\" | \"ldexp\" => {\n-                // FIXME: Using host floats.\n-                let x = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n+            // For radix-2 (binary) systems, `ldexp` and `scalbn` are the same.\n+            \"_ldexp\" | \"ldexp\" | \"scalbn\" => {\n+                let x = this.read_scalar(args[0])?.to_f64()?;\n                 let exp = this.read_scalar(args[1])?.to_i32()?;\n-                extern {\n-                    fn ldexp(x: f64, n: i32) -> f64;\n-                }\n-                let n = unsafe { ldexp(x, exp) };\n-                this.write_scalar(Scalar::from_u64(n.to_bits()), dest)?;\n+\n+                // Saturating cast to i16. Even those are outside the valid exponent range to\n+                // `scalbn` below will do its over/underflow handling.\n+                let exp = if exp > i16::max_value() as i32 {\n+                    i16::max_value()\n+                } else if exp < i16::min_value() as i32 {\n+                    i16::min_value()\n+                } else {\n+                    exp.try_into().unwrap()\n+                };\n+\n+                let res = x.scalbn(exp);\n+                this.write_scalar(Scalar::from_f64(res), dest)?;\n             }\n \n             // Some things needed for `sys::thread` initialization to go through."}, {"sha": "f435611b2b698732755fd3930566c5f087b8cc7a", "filename": "tests/run-pass/intrinsics-math.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a5eb61a4ad18739dbc85c4fcdce1452e526d27b2/tests%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5eb61a4ad18739dbc85c4fcdce1452e526d27b2/tests%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-math.rs?ref=a5eb61a4ad18739dbc85c4fcdce1452e526d27b2", "patch": "@@ -16,6 +16,13 @@ macro_rules! assert_approx_eq {\n     })\n }\n \n+fn ldexp(a: f64, b: i32) -> f64 {\n+    extern {\n+        fn ldexp(x: f64, n: i32) -> f64;\n+    }\n+    unsafe { ldexp(a, b) }\n+}\n+\n pub fn main() {\n     use std::f32;\n     use std::f64;\n@@ -88,8 +95,7 @@ pub fn main() {\n     assert_eq!(3.3_f32.round(), 3.0);\n     assert_eq!(3.3_f64.round(), 3.0);\n \n-    extern {\n-        fn ldexp(x: f64, n: i32) -> f64;\n-    }\n-    unsafe { assert_approx_eq!(ldexp(0.65f64, 3i32), 5.2f64); }\n+    assert_eq!(ldexp(0.65f64, 3i32), 5.2f64);\n+    assert_eq!(ldexp(1.42, 0xFFFF), f64::INFINITY);\n+    assert_eq!(ldexp(1.42, -0xFFFF), 0f64);\n }"}]}