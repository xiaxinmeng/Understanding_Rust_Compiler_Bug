{"sha": "d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZGNkMTlkMjZhZThlZDhhMzgzNmRlZmIzZTdmNDE2NmNhMTc4Yjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-24T22:27:01Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-24T22:29:26Z"}, "message": "librustc: Make references to functions not have static lifetime.\n\nThis breaks code like:\n\n    struct A<'a> {\n        func: &'a fn() -> Option<int>\n    }\n\n    fn foo() -> Option<int> { ... }\n\n    fn create() -> A<'static> {\n        A {\n            func: &foo\n        }\n    }\n\nChange this code to not take functions by reference. For example:\n\n    struct A {\n        func: extern \"Rust\" fn() -> Option<int>\n    }\n\n    fn foo() -> Option<int> { ... }\n\n    fn create() -> A {\n        A {\n            func: foo\n        }\n    }\n\nCloses #13595.\n\n[breaking-change]", "tree": {"sha": "d255b9a5b95416b6dfb6102491d65e89b9970097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d255b9a5b95416b6dfb6102491d65e89b9970097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8", "html_url": "https://github.com/rust-lang/rust/commit/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e", "html_url": "https://github.com/rust-lang/rust/commit/d3f66bd5b4c7066b1405c46a2fcdd9646761bc1e"}], "stats": {"total": 98, "additions": 95, "deletions": 3}, "files": [{"sha": "257d4254d260e8ab1dec3451c8b09b714bc1c9ba", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8", "patch": "@@ -500,11 +500,11 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                id, expr_ty.repr(self.tcx()), def);\n \n         match def {\n-          def::DefStruct(..) | def::DefVariant(..) => {\n+          def::DefStruct(..) | def::DefVariant(..) | def::DefFn(..) |\n+          def::DefStaticMethod(..) => {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n-          def::DefFn(..) | def::DefStaticMethod(..) | def::DefMod(_) |\n-          def::DefForeignMod(_) | def::DefStatic(_, false) |\n+          def::DefMod(_) | def::DefForeignMod(_) | def::DefStatic(_, false) |\n           def::DefUse(_) | def::DefTrait(_) | def::DefTy(_) | def::DefPrimTy(_) |\n           def::DefTyParam(..) | def::DefTyParamBinder(..) | def::DefRegion(_) |\n           def::DefLabel(_) | def::DefSelfTy(..) | def::DefMethod(..) => {"}, {"sha": "c0d430908a137a32dad184070512f61bbadba296", "filename": "src/test/compile-fail/static-reference-to-fn-1.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-1.rs?ref=d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A<'a> {\n+    func: &'a fn() -> Option<int>\n+}\n+\n+impl<'a> A<'a> {\n+    fn call(&self) -> Option<int> {\n+        (*self.func)()\n+    }\n+}\n+\n+fn foo() -> Option<int> {\n+    None\n+}\n+\n+fn create() -> A<'static> {\n+    A {\n+        func: &foo, //~ ERROR borrowed value does not live long enough\n+    }\n+}\n+\n+fn main() {\n+    let a = create();\n+    a.call();\n+}"}, {"sha": "3a0f0a193cfe11f11ed7364ec9afc2278ed5fb3b", "filename": "src/test/compile-fail/static-reference-to-fn-2.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs?ref=d1dcd19d26ae8ed8a3836defb3e7f4166ca178b8", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct StateMachineIter<'a> {\n+    statefn: &'a fn(&mut StateMachineIter<'a>) -> Option<&'static str>\n+}\n+\n+impl<'a> Iterator<&'static str> for StateMachineIter<'a> {\n+    fn next(&mut self) -> Option<&'static str> {\n+        return  (*self.statefn)(self);\n+    }\n+}\n+\n+fn state1(self_: &mut StateMachineIter) -> Option<&'static str> {\n+    self_.statefn = &state2;\n+    //~^ ERROR borrowed value does not live long enough\n+    return Some(\"state1\");\n+}\n+\n+fn state2(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n+    self_.statefn = &state3;\n+    //~^ ERROR borrowed value does not live long enough\n+    return Some(\"state2\");\n+}\n+\n+fn state3(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n+    self_.statefn = &finished;\n+    //~^ ERROR borrowed value does not live long enough\n+    return Some(\"state3\");\n+}\n+\n+fn finished(_: &mut StateMachineIter) -> Option<(&'static str)> {\n+    return None;\n+}\n+\n+fn state_iter() -> StateMachineIter<'static> {\n+    StateMachineIter {\n+        statefn: &state1 //~ ERROR borrowed value does not live long enough\n+    }\n+}\n+\n+\n+fn main() {\n+    let mut it = state_iter();\n+    println!(\"{}\",it.next());\n+    println!(\"{}\",it.next());\n+    println!(\"{}\",it.next());\n+    println!(\"{}\",it.next());\n+    println!(\"{}\",it.next());\n+}\n+"}]}