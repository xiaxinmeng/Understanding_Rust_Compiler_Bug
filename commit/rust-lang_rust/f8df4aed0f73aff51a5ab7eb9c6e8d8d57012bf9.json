{"sha": "f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZGY0YWVkMGY3M2FmZjUxYTVhYjdlYjljNmU4ZDhkNTcwMTJiZjk=", "commit": {"author": {"name": "Enrico Schmitz", "email": "enrico@schmitz.link", "date": "2017-03-20T22:51:14Z"}, "committer": {"name": "Enrico Schmitz", "email": "enrico@schmitz.link", "date": "2017-03-20T23:22:19Z"}, "message": "Fix for rustc 1.17.0-nightly (6eb9960d3 2017-03-19)", "tree": {"sha": "5d65c5a07b6fcfc0cc2d4d540b7fe8e457eb4492", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d65c5a07b6fcfc0cc2d4d540b7fe8e457eb4492"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "html_url": "https://github.com/rust-lang/rust/commit/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/comments", "author": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a04fe9652d3cd803c5e609479afca5665820bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a04fe9652d3cd803c5e609479afca5665820bbb", "html_url": "https://github.com/rust-lang/rust/commit/2a04fe9652d3cd803c5e609479afca5665820bbb"}], "stats": {"total": 82, "additions": 38, "deletions": 44}, "files": [{"sha": "8945e4f6c26f855d5cb173790fb998b58a09d996", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "patch": "@@ -86,8 +86,8 @@ impl LintPass for AttrPass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n     fn check_attribute(&mut self, cx: &LateContext<'a, 'tcx>, attr: &'tcx Attribute) {\n-        if let MetaItemKind::List(ref items) = attr.value.node {\n-            if items.is_empty() || attr.name() != \"deprecated\" {\n+        if let Some(ref items) = attr.meta_item_list() {\n+            if items.is_empty() || attr.name().map_or(true, |n| n != \"deprecated\") {\n                 return;\n             }\n             for item in items {\n@@ -110,31 +110,33 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n             ItemExternCrate(_) |\n             ItemUse(_, _) => {\n                 for attr in &item.attrs {\n-                    if let MetaItemKind::List(ref lint_list) = attr.value.node {\n-                        match &*attr.name().as_str() {\n-                            \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                                // whitelist `unused_imports` and `deprecated`\n-                                for lint in lint_list {\n-                                    if is_word(lint, \"unused_imports\") || is_word(lint, \"deprecated\") {\n-                                        if let ItemUse(_, _) = item.node {\n-                                            return;\n+                    if let Some(ref lint_list) = attr.meta_item_list() {\n+                        if let Some(name) = attr.name() {\n+                            match &*name.as_str() {\n+                                \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n+                                    // whitelist `unused_imports` and `deprecated`\n+                                    for lint in lint_list {\n+                                        if is_word(lint, \"unused_imports\") || is_word(lint, \"deprecated\") {\n+                                            if let ItemUse(_, _) = item.node {\n+                                                return;\n+                                            }\n                                         }\n                                     }\n-                                }\n-                                if let Some(mut sugg) = snippet_opt(cx, attr.span) {\n-                                    if sugg.len() > 1 {\n-                                        span_lint_and_then(cx,\n-                                                           USELESS_ATTRIBUTE,\n-                                                           attr.span,\n-                                                           \"useless lint attribute\",\n-                                                           |db| {\n-                                            sugg.insert(1, '!');\n-                                            db.span_suggestion(attr.span, \"if you just forgot a `!`, use\", sugg);\n-                                        });\n+                                    if let Some(mut sugg) = snippet_opt(cx, attr.span) {\n+                                        if sugg.len() > 1 {\n+                                            span_lint_and_then(cx,\n+                                                               USELESS_ATTRIBUTE,\n+                                                               attr.span,\n+                                                               \"useless lint attribute\",\n+                                                               |db| {\n+                                                sugg.insert(1, '!');\n+                                                db.span_suggestion(attr.span, \"if you just forgot a `!`, use\", sugg);\n+                                            });\n+                                        }\n                                     }\n-                                }\n-                            },\n-                            _ => {},\n+                                },\n+                                _ => {},\n+                            }\n                         }\n                     }\n                 }\n@@ -218,8 +220,8 @@ fn check_attrs(cx: &LateContext, span: Span, name: &Name, attrs: &[Attribute]) {\n     }\n \n     for attr in attrs {\n-        if let MetaItemKind::List(ref values) = attr.value.node {\n-            if values.len() != 1 || attr.name() != \"inline\" {\n+        if let Some(ref values) = attr.meta_item_list() {\n+            if values.len() != 1 || attr.name().map_or(true, |n| n != \"inline\") {\n                 continue;\n             }\n             if is_word(&values[0], \"always\") {"}, {"sha": "816ec8b6b172291d6c3bcb12879c5e5bba268eb4", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "patch": "@@ -89,11 +89,9 @@ pub fn check_attrs<'a>(cx: &EarlyContext, valid_idents: &[String], attrs: &'a [a\n \n     for attr in attrs {\n         if attr.is_sugared_doc {\n-            if let ast::MetaItemKind::NameValue(ref doc) = attr.value.node {\n-                if let ast::LitKind::Str(ref doc, _) = doc.node {\n+            if let Some(ref doc) = attr.value_str() {\n                     let doc = (*doc.as_str()).to_owned();\n                     docs.extend_from_slice(&strip_doc_comment_decoration((doc, attr.span)));\n-                }\n             }\n         }\n     }"}, {"sha": "c78804240eeb2e23d224430d3de8d18f0e160abd", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "patch": "@@ -9,7 +9,6 @@\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]\n #![feature(conservative_impl_trait)]\n-#![feature(collections_bound)]\n \n #![allow(indexing_slicing, shadow_reuse, unknown_lints, missing_docs_in_private_items)]\n #![allow(needless_lifetimes)]"}, {"sha": "75cc588119f50eccfa1ae4f87399a5baf20e57f7", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "patch": "@@ -77,7 +77,7 @@ impl MissingDoc {\n             return;\n         }\n \n-        let has_doc = attrs.iter().any(|a| a.is_value_str() && a.name() == \"doc\");\n+        let has_doc = attrs.iter().any(|a| a.is_value_str() && a.name().map_or(false, |n| n == \"doc\"));\n         if !has_doc {\n             cx.span_lint(MISSING_DOCS_IN_PRIVATE_ITEMS,\n                          sp,"}, {"sha": "a2639d355266a3bfb0d6c6a5b1ad288099f2dad9", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "patch": "@@ -150,8 +150,8 @@ impl EarlyLintPass for ReturnPass {\n }\n \n fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n-    if let ast::MetaItemKind::List(_) = attr.value.node {\n-        attr.name() == \"cfg\"\n+    if attr.meta_item_list().is_some() {\n+       attr.name().map_or(false, |n| n == \"cfg\")\n     } else {\n         false\n     }"}, {"sha": "992fdab80b0ba5e23c616c2fa12cc067d93ccc7b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "patch": "@@ -678,17 +678,13 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n         if attr.is_sugared_doc {\n             continue;\n         }\n-        if let ast::MetaItemKind::NameValue(ref value) = attr.value.node {\n-            if attr.name() == name {\n-                if let LitKind::Str(ref s, _) = value.node {\n-                    if let Ok(value) = FromStr::from_str(&*s.as_str()) {\n-                        attr::mark_used(attr);\n-                        f(value)\n-                    } else {\n-                        sess.span_err(value.span, \"not a number\");\n-                    }\n+        if let Some(ref value) = attr.value_str() {\n+            if attr.name().map_or(false, |n| n == name) {\n+                if let Ok(value) = FromStr::from_str(&*value.as_str()) {\n+                    attr::mark_used(attr);\n+                    f(value)\n                 } else {\n-                    unreachable!()\n+                    sess.span_err(attr.span, \"not a number\");\n                 }\n             }\n         }"}, {"sha": "506926501a2721c9f10180634b736d869732c123", "filename": "tests/matches.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=f8df4aed0f73aff51a5ab7eb9c6e8d8d57012bf9", "patch": "@@ -1,5 +1,4 @@\n #![feature(rustc_private)]\n-#![feature(collections_bound)]\n \n extern crate clippy_lints;\n extern crate syntax;"}]}