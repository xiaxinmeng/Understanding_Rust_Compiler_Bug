{"sha": "7225f668874779f9791fec778e2502e45b311e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMjVmNjY4ODc0Nzc5Zjk3OTFmZWM3NzhlMjUwMmU0NWIzMTFlMzc=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-08-27T20:58:01Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-09-01T01:41:57Z"}, "message": "Adds two source span utility functions used in source-based coverage\n\n`span.is_empty()` - returns true if `lo()` and `hi()` are equal. This is\nnot only a convenience, but makes it clear that a `Span` can be empty\n(that is, retrieving the source for an empty `Span` will return an empty\nstring), and codifies the (otherwise undocumented--in the rustc_span\npackage, at least) fact that `Span` is a half-open interval (where\n`hi()` is the open end).\n\n`source_map.lookup_file_span()` - returns an enclosing `Span`\nrepresenting the start and end positions of the file enclosing the given\n`BytePos`. This gives developers a clear way to quickly determine if any\nany other `BytePos` or `Span` is also from the same file (for example,\nby simply calling `file_span.contains(span)`).\n\nThis results in much simpler code and is much more runtime efficient\ncompared with the obvious alternative: calling `source_map.lookup_line()`\nfor any two `Span`'s byte positions, handle both arms of the `Result`\n(both contain the file), and then compare files. It is also more\nefficient than the non-public method `lookup_source_file_idx()` for each\n`BytePos`, because, while comparing the internal source file indexes\nwould be efficient, looking up the source file index for every `BytePos`\nor `Span` to be compared requires a binary search (worst case\nperformance being O(log n) for every lookup).\n\n`source_map.lookup_file_span()` performs the binary search only once, to\nget the `file_span` result that can be used to compare to any number of\nother `BytePos` or `Span` values and those comparisons are always O(1).", "tree": {"sha": "99dbe88860234dfb70c7d987da1020ed5bc4d615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99dbe88860234dfb70c7d987da1020ed5bc4d615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7225f668874779f9791fec778e2502e45b311e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7225f668874779f9791fec778e2502e45b311e37", "html_url": "https://github.com/rust-lang/rust/commit/7225f668874779f9791fec778e2502e45b311e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7225f668874779f9791fec778e2502e45b311e37/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fbf49ce0e2274d0acf798f6e703747674feec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbf49ce0e2274d0acf798f6e703747674feec3", "html_url": "https://github.com/rust-lang/rust/commit/85fbf49ce0e2274d0acf798f6e703747674feec3"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "b478a1d15c5065cc574c0e49b8d141f5319c13c0", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7225f668874779f9791fec778e2502e45b311e37/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7225f668874779f9791fec778e2502e45b311e37/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=7225f668874779f9791fec778e2502e45b311e37", "patch": "@@ -400,6 +400,13 @@ impl Span {\n         span.with_lo(span.hi)\n     }\n \n+    #[inline]\n+    /// Returns true if hi == lo\n+    pub fn is_empty(&self) -> bool {\n+        let span = self.data();\n+        span.hi == span.lo\n+    }\n+\n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n         if self.is_dummy() { other } else { self }"}, {"sha": "37596b8ef6fcaadf1639eee2ad32b07f8f97a39a", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7225f668874779f9791fec778e2502e45b311e37/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7225f668874779f9791fec778e2502e45b311e37/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=7225f668874779f9791fec778e2502e45b311e37", "patch": "@@ -487,6 +487,15 @@ impl SourceMap {\n         }\n     }\n \n+    /// Returns a new `Span` covering the start and end `BytePos`s of the file containing the given\n+    /// `pos`. This can be used to quickly determine if another `BytePos` or `Span` is from the same\n+    /// file.\n+    pub fn lookup_file_span(&self, pos: BytePos) -> Span {\n+        let idx = self.lookup_source_file_idx(pos);\n+        let SourceFile { start_pos, end_pos, .. } = *(*self.files.borrow().source_files)[idx];\n+        Span::with_root_ctxt(start_pos, end_pos)\n+    }\n+\n     /// Returns `Some(span)`, a union of the LHS and RHS span. The LHS must precede the RHS. If\n     /// there are gaps between LHS and RHS, the resulting union will cross these gaps.\n     /// For this to work,"}]}