{"sha": "14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "node_id": "C_kwDOAAsO6NoAKDE0ZDU0ZjBmNmViM2IwM2NiNWQ3MTk5NDlhMjU0MDRhOGZlNTYzZDk", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-29T16:14:22Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-05T13:50:17Z"}, "message": "Use Span::from_expansion instead of in_macro", "tree": {"sha": "dc7eda321ca17a70ffc86e2429c493010f06e05b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc7eda321ca17a70ffc86e2429c493010f06e05b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "html_url": "https://github.com/rust-lang/rust/commit/14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a4ab7f3f21ae78cd1c274c4647fd38eef7d43d", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a4ab7f3f21ae78cd1c274c4647fd38eef7d43d", "html_url": "https://github.com/rust-lang/rust/commit/84a4ab7f3f21ae78cd1c274c4647fd38eef7d43d"}], "stats": {"total": 301, "additions": 137, "deletions": 164}, "files": [{"sha": "a1e6b7224ff3a897ee0c7a5dd442807c105b3ce3", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n-use clippy_utils::{eq_expr_value, get_trait_def_id, in_macro, paths};\n+use clippy_utils::{eq_expr_value, get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -453,22 +453,20 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n-        if in_macro(e.span) {\n-            return;\n-        }\n-        match &e.kind {\n-            ExprKind::Binary(binop, _, _) if binop.node == BinOpKind::Or || binop.node == BinOpKind::And => {\n-                self.bool_expr(e);\n-            },\n-            ExprKind::Unary(UnOp::Not, inner) => {\n-                if self.cx.typeck_results().node_types()[inner.hir_id].is_bool() {\n+        if !e.span.from_expansion() {\n+            match &e.kind {\n+                ExprKind::Binary(binop, _, _) if binop.node == BinOpKind::Or || binop.node == BinOpKind::And => {\n                     self.bool_expr(e);\n-                } else {\n-                    walk_expr(self, e);\n-                }\n-            },\n-            _ => walk_expr(self, e),\n+                },\n+                ExprKind::Unary(UnOp::Not, inner) => {\n+                    if self.cx.typeck_results().node_types()[inner.hir_id].is_bool() {\n+                        self.bool_expr(e);\n+                    }\n+                },\n+                _ => {},\n+            }\n         }\n+        walk_expr(self, e);\n     }\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "f57da62da5f4b728abca063bfc6c70afb8ff5184", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_then};\n use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, snippet, snippet_opt};\n use clippy_utils::{\n-    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, in_macro, is_else_clause,\n-    is_lint_allowed, search_same, ContainsName, SpanlessEq, SpanlessHash,\n+    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, is_else_clause, is_lint_allowed,\n+    search_same, ContainsName, SpanlessEq, SpanlessHash,\n };\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n@@ -623,7 +623,7 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>]) {\n \n     let eq: &dyn Fn(&&Expr<'_>, &&Expr<'_>) -> bool = &|&lhs, &rhs| -> bool {\n         // Do not lint if any expr originates from a macro\n-        if in_macro(lhs.span) || in_macro(rhs.span) {\n+        if lhs.span.from_expansion() || rhs.span.from_expansion() {\n             return false;\n         }\n         // Do not spawn warning if `IFS_SAME_COND` already produced it."}, {"sha": "54647ba823e7e9b3763258d29c7f6a6b7a38c707", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_sugg};\n use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::ty::{has_drop, is_copy};\n-use clippy_utils::{any_parent_is_automatically_derived, contains_name, in_macro, match_def_path, paths};\n+use clippy_utils::{any_parent_is_automatically_derived, contains_name, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -78,7 +78,7 @@ impl_lint_pass!(Default => [DEFAULT_TRAIT_ACCESS, FIELD_REASSIGN_WITH_DEFAULT]);\n impl LateLintPass<'_> for Default {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if !in_macro(expr.span);\n+            if !expr.span.from_expansion();\n             // Avoid cases already linted by `field_reassign_with_default`\n             if !self.reassigned_linted.contains(&expr.span);\n             if let ExprKind::Call(path, ..) = expr.kind;\n@@ -125,7 +125,7 @@ impl LateLintPass<'_> for Default {\n                 if let StmtKind::Local(local) = stmt.kind;\n                 if let Some(expr) = local.init;\n                 if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n-                if !in_macro(expr.span);\n+                if !expr.span.from_expansion();\n                 // only take bindings to identifiers\n                 if let PatKind::Binding(_, binding_id, ident, _) = local.pat.kind;\n                 // only when assigning `... = Default::default()`"}, {"sha": "975353add087f4bfaebed55d8db414877e44e0b0", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::peel_mid_ty_refs;\n-use clippy_utils::{get_parent_node, in_macro, is_lint_allowed};\n+use clippy_utils::{get_parent_node, is_lint_allowed};\n use rustc_ast::util::parser::PREC_PREFIX;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, HirId, MatchSource, Mutability, Node, UnOp};\n@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n         }\n \n         // Stop processing sub expressions when a macro call is seen\n-        if in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             if let Some((state, data)) = self.state.take() {\n                 report(cx, expr, state, data);\n             }"}, {"sha": "01ec306e5e1898eb0ae7ae9ad1fecbc8a6a968a7", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{in_macro, is_automatically_derived, is_default_equivalent, remove_blocks};\n+use clippy_utils::{is_automatically_derived, is_default_equivalent, remove_blocks};\n use rustc_hir::{\n     def::{DefKind, Res},\n     Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, TyKind,\n@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             }) = item.kind;\n             if let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !is_automatically_derived(attrs);\n-            if !in_macro(item.span);\n+            if !item.span.from_expansion();\n             if let Some(def_id) = trait_ref.trait_def_id();\n             if cx.tcx.is_diagnostic_item(sym::Default, def_id);\n             if let impl_item_hir = child.id.hir_id();"}, {"sha": "c034c849b55a09541ea324da1eb1b20617c2417b", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,9 +1,7 @@\n use clippy_utils::diagnostics::{multispan_sugg, span_lint, span_lint_and_then};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::{implements_trait, is_copy};\n-use clippy_utils::{\n-    ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, in_macro, is_expn_of, is_in_test_function,\n-};\n+use clippy_utils::{ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, is_expn_of, is_in_test_function};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, StmtKind};\n@@ -102,7 +100,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n             }\n             let macro_with_not_op = |expr_kind: &ExprKind<'_>| {\n                 if let ExprKind::Unary(_, expr) = *expr_kind {\n-                    in_macro(expr.span)\n+                    expr.span.from_expansion()\n                 } else {\n                     false\n                 }"}, {"sha": "06171702f75b0e015675d865b8126a07d42a463e", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::in_macro;\n use rustc_ast::ast::{AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -135,7 +134,7 @@ fn is_bool_ty(ty: &Ty) -> bool {\n \n impl EarlyLintPass for ExcessiveBools {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if in_macro(item.span) {\n+        if item.span.from_expansion() {\n             return;\n         }\n         match &item.kind {"}, {"sha": "ecbbbc5bc64d007463ff3e06184460ee511f0b0d", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher;\n-use clippy_utils::{in_macro, SpanlessEq};\n+use clippy_utils::SpanlessEq;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -39,7 +39,7 @@ declare_lint_pass!(ImplicitSaturatingSub => [IMPLICIT_SATURATING_SUB]);\n \n impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n         if_chain! {"}, {"sha": "52c92b3b122943bd5fda0afa43bb494792ee08ec", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_macro;\n use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n@@ -66,7 +65,7 @@ declare_lint_pass!(InconsistentStructConstructor => [INCONSISTENT_STRUCT_CONSTRU\n impl LateLintPass<'_> for InconsistentStructConstructor {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n-            if !in_macro(expr.span);\n+            if !expr.span.from_expansion();\n             if let ExprKind::Struct(qpath, fields, base) = expr.kind;\n             let ty = cx.typeck_results().expr_ty(expr);\n             if let Some(adt_def) = ty.ty_adt_def();"}, {"sha": "bd0b29643095b53479502f29327e7a21c486ed52", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,7 +1,7 @@\n //! lint on inherent implementations\n \n use clippy_utils::diagnostics::span_lint_and_note;\n-use clippy_utils::{in_macro, is_lint_allowed};\n+use clippy_utils::is_lint_allowed;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{def_id::LocalDefId, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -123,8 +123,10 @@ fn get_impl_span(cx: &LateContext<'_>, id: LocalDefId) -> Option<Span> {\n         ..\n     }) = cx.tcx.hir().get(id)\n     {\n-        (!in_macro(span) && impl_item.generics.params.is_empty() && !is_lint_allowed(cx, MULTIPLE_INHERENT_IMPL, id))\n-            .then(|| span)\n+        (!span.from_expansion()\n+            && impl_item.generics.params.is_empty()\n+            && !is_lint_allowed(cx, MULTIPLE_INHERENT_IMPL, id))\n+        .then(|| span)\n     } else {\n         None\n     }"}, {"sha": "6565d5a6d70384780fddb0617b3f927d01bb9287", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{in_macro, trait_ref_of_method};\n+use clippy_utils::trait_ref_of_method;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::intravisit::{\n     walk_fn_decl, walk_generic_param, walk_generics, walk_item, walk_param_bound, walk_poly_trait_ref, walk_ty,\n@@ -128,7 +128,7 @@ fn check_fn_inner<'tcx>(\n     span: Span,\n     report_extra_lifetimes: bool,\n ) {\n-    if in_macro(span) || has_where_lifetimes(cx, &generics.where_clause) {\n+    if span.from_expansion() || has_where_lifetimes(cx, &generics.where_clause) {\n         return;\n     }\n "}, {"sha": "0e36ab085a3696db60018097f723e78010387fa2", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -2,11 +2,8 @@\n //! floating-point literal expressions.\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::numeric_literal::{NumericLiteral, Radix};\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{\n-    in_macro,\n-    numeric_literal::{NumericLiteral, Radix},\n-};\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;\n@@ -283,7 +280,7 @@ impl LiteralDigitGrouping {\n                         | WarningType::InconsistentDigitGrouping\n                         | WarningType::UnusualByteGroupings\n                         | WarningType::LargeDigitGroups => {\n-                            !in_macro(lit.span)\n+                            !lit.span.from_expansion()\n                         }\n                         WarningType::DecimalRepresentation | WarningType::MistypedLiteralSuffix => {\n                             true"}, {"sha": "bccdc3be5e93e1524ea8e19fbe9424e25558ed7b", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_macro;\n use clippy_utils::source::snippet;\n use hir::def::{DefKind, Res};\n use if_chain::if_chain;\n@@ -9,6 +8,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::hygiene::ExpnKind;\n use rustc_span::{edition::Edition, sym, Span};\n \n declare_clippy_lint! {\n@@ -213,3 +213,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         }\n     }\n }\n+\n+fn in_macro(span: Span) -> bool {\n+    span.from_expansion() && !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n+}"}, {"sha": "f9030564588d2da1284ed861b73a87a28094153f", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -8,9 +8,9 @@ use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type, peel_mid_ty_refs};\n use clippy_utils::visitors::is_local_used;\n use clippy_utils::{\n-    get_parent_expr, in_macro, is_expn_of, is_lang_ctor, is_lint_allowed, is_refutable, is_unit_expr, is_wild,\n-    meets_msrv, msrvs, path_to_local, path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns,\n-    remove_blocks, strip_pat_refs,\n+    get_parent_expr, is_expn_of, is_lang_ctor, is_lint_allowed, is_refutable, is_unit_expr, is_wild, meets_msrv, msrvs,\n+    path_to_local, path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns, remove_blocks,\n+    strip_pat_refs,\n };\n use clippy_utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use core::array;\n@@ -26,7 +26,6 @@ use rustc_hir::{\n };\n use rustc_hir::{HirIdMap, HirIdSet};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty, TyS, VariantDef};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -602,7 +601,7 @@ impl_lint_pass!(Matches => [\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if in_external_macro(cx.sess(), expr.span) || in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n \n@@ -641,8 +640,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n \n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n         if_chain! {\n-            if !in_external_macro(cx.sess(), local.span);\n-            if !in_macro(local.span);\n+            if !local.span.from_expansion();\n             if let Some(expr) = local.init;\n             if let ExprKind::Match(target, arms, MatchSource::Normal) = expr.kind;\n             if arms.len() == 1 && arms[0].guard.is_none();\n@@ -677,8 +675,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n \n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {\n         if_chain! {\n-            if !in_external_macro(cx.sess(), pat.span);\n-            if !in_macro(pat.span);\n+            if !pat.span.from_expansion();\n             if let PatKind::Struct(QPath::Resolved(_, path), fields, true) = pat.kind;\n             if let Some(def_id) = path.res.opt_def_id();\n             let ty = cx.tcx.type_of(def_id);\n@@ -705,7 +702,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n #[rustfmt::skip]\n fn check_single_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if arms.len() == 2 && arms[0].guard.is_none() && arms[1].guard.is_none() {\n-        if in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             // Don't lint match expressions present in\n             // macro_rules! block\n             return;\n@@ -1448,7 +1445,7 @@ fn find_bool_lit(ex: &ExprKind<'_>, is_if_let: bool) -> Option<bool> {\n \n #[allow(clippy::too_many_lines)]\n fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n-    if in_macro(expr.span) || arms.len() != 1 || is_refutable(cx, arms[0].pat) {\n+    if expr.span.from_expansion() || arms.len() != 1 || is_refutable(cx, arms[0].pat) {\n         return;\n     }\n "}, {"sha": "cf721fc65db855d7c763dcea8961ce3ea42b4a12", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_non_aggregate_primitive_type;\n-use clippy_utils::{in_macro, is_default_equivalent, is_lang_ctor, match_def_path, meets_msrv, msrvs, paths};\n+use clippy_utils::{is_default_equivalent, is_lang_ctor, match_def_path, meets_msrv, msrvs, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n@@ -213,7 +213,7 @@ fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<\n             expr_span,\n             \"replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\",\n             |diag| {\n-                if !in_macro(expr_span) {\n+                if !expr_span.from_expansion() {\n                     let suggestion = format!(\"std::mem::take({})\", snippet(cx, dest.span, \"\"));\n \n                     diag.span_suggestion("}, {"sha": "b7690cf9222cc8be9162ee59b8cff744b686a0e4", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,7 +1,7 @@\n use super::{contains_return, BIND_INSTEAD_OF_MAP};\n use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n-use clippy_utils::{in_macro, remove_blocks, visitors::find_all_ret_expressions};\n+use clippy_utils::{remove_blocks, visitors::find_all_ret_expressions};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -106,7 +106,7 @@ pub(crate) trait BindInsteadOfMap {\n         let mut suggs = Vec::new();\n         let can_sugg: bool = find_all_ret_expressions(cx, closure_expr, |ret_expr| {\n             if_chain! {\n-                if !in_macro(ret_expr.span);\n+                if !ret_expr.span.from_expansion();\n                 if let hir::ExprKind::Call(func_path, [arg]) = ret_expr.kind;\n                 if let hir::ExprKind::Path(QPath::Resolved(_, path)) = func_path.kind;\n                 if Self::is_variant(cx, path.res);"}, {"sha": "6c4272f9e654adaeba3e3b4cb234cf7d1e941ad0", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -68,7 +68,7 @@ use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::ty::{contains_adt_constructor, contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n-use clippy_utils::{contains_return, get_trait_def_id, in_macro, iter_input_pats, meets_msrv, msrvs, paths, return_ty};\n+use clippy_utils::{contains_return, get_trait_def_id, iter_input_pats, meets_msrv, msrvs, paths, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -1900,7 +1900,7 @@ macro_rules! method_call {\n \n impl<'tcx> LateLintPass<'tcx> for Methods {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "c8a8750c2ff76c27b04a091ebaa96b1304e62d8e", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_macro;\n use if_chain::if_chain;\n use rustc_ast::ast::{BindingMode, Lifetime, Mutability, Param, PatKind, Path, TyKind};\n use rustc_errors::Applicability;\n@@ -78,7 +77,7 @@ fn check_param_inner(cx: &EarlyContext<'_>, path: &Path, span: Span, binding_mod\n             let self_param = match (binding_mode, mutbl) {\n                 (Mode::Ref(None), Mutability::Mut) => \"&mut self\".to_string(),\n                 (Mode::Ref(Some(lifetime)), Mutability::Mut) => {\n-                    if in_macro(lifetime.ident.span) {\n+                    if lifetime.ident.span.from_expansion() {\n                         applicability = Applicability::HasPlaceholders;\n                         \"&'_ mut self\".to_string()\n                     } else {\n@@ -87,7 +86,7 @@ fn check_param_inner(cx: &EarlyContext<'_>, path: &Path, span: Span, binding_mod\n                 },\n                 (Mode::Ref(None), Mutability::Not) => \"&self\".to_string(),\n                 (Mode::Ref(Some(lifetime)), Mutability::Not) => {\n-                    if in_macro(lifetime.ident.span) {\n+                    if lifetime.ident.span.from_expansion() {\n                         applicability = Applicability::HasPlaceholders;\n                         \"&'_ self\".to_string()\n                     } else {\n@@ -114,7 +113,7 @@ fn check_param_inner(cx: &EarlyContext<'_>, path: &Path, span: Span, binding_mod\n impl EarlyLintPass for NeedlessArbitrarySelfType {\n     fn check_param(&mut self, cx: &EarlyContext<'_>, p: &Param) {\n         // Bail out if the parameter it's not a receiver or was not written by the user\n-        if !p.is_self() || in_macro(p.span) {\n+        if !p.is_self() || p.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "ad981599473070cbdce18c69b66db3e01831f6b6", "filename": "clippy_lints/src/needless_bitwise_bool.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::in_macro;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -41,7 +40,7 @@ declare_lint_pass!(NeedlessBitwiseBool => [NEEDLESS_BITWISE_BOOL]);\n fn is_bitwise_operation(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n     if_chain! {\n-        if !in_macro(expr.span);\n+        if !expr.span.from_expansion();\n         if let (&ExprKind::Binary(ref op, _, right), &ty::Bool) = (&expr.kind, &ty.kind());\n         if op.node == BinOpKind::BitAnd || op.node == BinOpKind::BitOr;\n         if let ExprKind::Call(..) | ExprKind::MethodCall(..) | ExprKind::Binary(..) | ExprKind::Unary(..) = right.kind;"}, {"sha": "085be6650cc6926e658decac3e3c226995dfe29b", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -4,7 +4,7 @@\n \n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::{snippet_opt, snippet_with_applicability, snippet_with_context};\n-use clippy_utils::{get_parent_expr, in_macro, path_to_local};\n+use clippy_utils::{get_parent_expr, path_to_local};\n use if_chain::if_chain;\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_data_structures::fx::FxIndexMap;\n@@ -157,7 +157,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n             if let Some(opt_prev_pat) = self.ref_locals.get_mut(&id) {\n                 // This binding id has been seen before. Add this pattern to the list of changes.\n                 if let Some(prev_pat) = opt_prev_pat {\n-                    if in_macro(pat.span) {\n+                    if pat.span.from_expansion() {\n                         // Doesn't match the context of the previous pattern. Can't lint here.\n                         *opt_prev_pat = None;\n                     } else {\n@@ -174,7 +174,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n             }\n \n             if_chain! {\n-                if !in_macro(pat.span);\n+                if !pat.span.from_expansion();\n                 if let ty::Ref(_, tam, _) = *cx.typeck_results().pat_ty(pat).kind();\n                 // only lint immutable refs, because borrowed `&mut T` cannot be moved out\n                 if let ty::Ref(_, _, Mutability::Not) = *tam.kind();\n@@ -248,12 +248,12 @@ impl NeedlessBorrow {\n                             span,\n                             kind: ExprKind::Unary(UnOp::Deref, _),\n                             ..\n-                        }) if !in_macro(span) => {\n+                        }) if !span.from_expansion() => {\n                             // Remove explicit deref.\n                             let snip = snippet_with_context(cx, e.span, span.ctxt(), \"..\", &mut pat.app).0;\n                             pat.replacements.push((span, snip.into()));\n                         },\n-                        Some(parent) if !in_macro(parent.span) => {\n+                        Some(parent) if !parent.span.from_expansion() => {\n                             // Double reference might be needed at this point.\n                             if parent.precedence().order() == PREC_POSTFIX {\n                                 // Parentheses would be needed here, don't lint.\n@@ -264,7 +264,7 @@ impl NeedlessBorrow {\n                                 pat.replacements.push((e.span, format!(\"&{}\", snip)));\n                             }\n                         },\n-                        _ if !in_macro(e.span) => {\n+                        _ if !e.span.from_expansion() => {\n                             // Double reference might be needed at this point.\n                             pat.always_deref = false;\n                             let snip = snippet_with_applicability(cx, e.span, \"..\", &mut pat.app);"}, {"sha": "e88e98e6081e00ff84b1faa6e7b5cd0af4459890", "filename": "clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_macro;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n@@ -38,7 +37,7 @@ declare_lint_pass!(OptionNeedlessDeref=> [\n \n impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if expr.span.from_expansion() || in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n         let typeck = cx.typeck_results();"}, {"sha": "bab15217d52bf84a38a35bda5fecd45df7da813b", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -3,14 +3,16 @@ use std::{\n     hash::{Hash, Hasher},\n };\n \n-use clippy_utils::{diagnostics::span_lint_and_help, in_macro, is_direct_expn_of, source::snippet_opt};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::DefId;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::Span;\n+use rustc_span::hygiene::{ExpnKind, MacroKind};\n+use rustc_span::{Span, Symbol};\n use serde::{de, Deserialize};\n \n declare_clippy_lint! {\n@@ -37,7 +39,7 @@ declare_clippy_lint! {\n const BRACES: &[(&str, &str)] = &[(\"(\", \")\"), (\"{\", \"}\"), (\"[\", \"]\")];\n \n /// The (name, (open brace, close brace), source snippet)\n-type MacroInfo<'a> = (&'a str, &'a (String, String), String);\n+type MacroInfo<'a> = (Symbol, &'a (String, String), String);\n \n #[derive(Clone, Debug, Default)]\n pub struct MacroBraces {\n@@ -93,17 +95,16 @@ impl EarlyLintPass for MacroBraces {\n \n fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a MacroBraces) -> Option<MacroInfo<'a>> {\n     let unnested_or_local = || {\n-        let nested = in_macro(span.ctxt().outer_expn_data().call_site);\n-        !nested\n+        !span.ctxt().outer_expn_data().call_site.from_expansion()\n             || span\n                 .macro_backtrace()\n                 .last()\n                 .map_or(false, |e| e.macro_def_id.map_or(false, DefId::is_local))\n     };\n     if_chain! {\n-        // Make sure we are only one level deep otherwise there are to many FP's\n-        if in_macro(span);\n-        if let Some((name, braces)) = find_matching_macro(span, &mac_braces.macro_braces);\n+        if let ExpnKind::Macro(MacroKind::Bang, mac_name) = span.ctxt().outer_expn_data().kind;\n+        let name = &*mac_name.as_str();\n+        if let Some(braces) = mac_braces.macro_braces.get(name);\n         if let Some(snip) = snippet_opt(cx, span.ctxt().outer_expn_data().call_site);\n         // we must check only invocation sites\n         // https://github.com/rust-lang/rust-clippy/issues/7422\n@@ -114,14 +115,14 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n         if !c.starts_with(&format!(\"{}!{}\", name, braces.0));\n         if !mac_braces.done.contains(&span.ctxt().outer_expn_data().call_site);\n         then {\n-            Some((name, braces, snip))\n+            Some((mac_name, braces, snip))\n         } else {\n             None\n         }\n     }\n }\n \n-fn emit_help(cx: &EarlyContext<'_>, snip: String, braces: &(String, String), name: &str, span: Span) {\n+fn emit_help(cx: &EarlyContext<'_>, snip: String, braces: &(String, String), name: Symbol, span: Span) {\n     let with_space = &format!(\"! {}\", braces.0);\n     let without_space = &format!(\"!{}\", braces.0);\n     let mut help = snip;\n@@ -144,15 +145,6 @@ fn emit_help(cx: &EarlyContext<'_>, snip: String, braces: &(String, String), nam\n     );\n }\n \n-fn find_matching_macro(\n-    span: Span,\n-    braces: &FxHashMap<String, (String, String)>,\n-) -> Option<(&String, &(String, String))> {\n-    braces\n-        .iter()\n-        .find(|(macro_name, _)| is_direct_expn_of(span, macro_name).is_some())\n-}\n-\n fn macro_braces(conf: FxHashSet<MacroMatcher>) -> FxHashMap<String, (String, String)> {\n     let mut braces = vec![\n         macro_matcher!("}, {"sha": "ed5583799fe8c469e1e8aace3886a348972bbb65", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::higher;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{\n-    can_move_expr_to_closure, eager_or_lazy, in_constant, in_macro, is_else_clause, is_lang_ctor, peel_hir_expr_while,\n+    can_move_expr_to_closure, eager_or_lazy, in_constant, is_else_clause, is_lang_ctor, peel_hir_expr_while,\n     CaptureKind,\n };\n use if_chain::if_chain;\n@@ -126,7 +126,7 @@ fn format_option_in_sugg(cx: &LateContext<'_>, cond_expr: &Expr<'_>, as_ref: boo\n /// this construct is found, or None if this construct is not found.\n fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<OptionIfLetElseOccurence> {\n     if_chain! {\n-        if !in_macro(expr.span); // Don't lint macros, because it behaves weirdly\n+        if !expr.span.from_expansion(); // Don't lint macros, because it behaves weirdly\n         if !in_constant(cx, expr.hir_id);\n         if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else: Some(if_else) })\n             = higher::IfLet::hir(cx, expr);"}, {"sha": "2df34d6d9b9cf70a780c54352a3d04afdcac5d29", "filename": "clippy_lints/src/ptr_eq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_eq.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_macro;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -41,7 +40,7 @@ static LINT_MSG: &str = \"use `std::ptr::eq` when comparing raw pointers\";\n \n impl LateLintPass<'_> for PtrEq {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "0c460150087b1b6f35e385c7bfa54792bf639e70", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::get_parent_expr;\n use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::is_type_lang_item;\n-use clippy_utils::{get_parent_expr, in_macro};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n@@ -43,7 +43,7 @@ declare_lint_pass!(RedundantSlicing => [REDUNDANT_SLICING]);\n \n impl LateLintPass<'_> for RedundantSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "70dff5ad313bc79e971f675746369233b1b4d891", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_macro;\n use clippy_utils::source::{snippet_opt, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n use if_chain::if_chain;\n@@ -50,7 +49,7 @@ impl EarlyLintPass for DerefAddrOf {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::Deref, ref deref_target) = e.kind;\n             if let ExprKind::AddrOf(_, ref mutability, ref addrof_target) = without_parens(deref_target).kind;\n-            if !in_macro(addrof_target.span);\n+            if !addrof_target.span.from_expansion();\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if e.span.from_expansion() {"}, {"sha": "e5e55ee750593699d36839877c28d22dc323bc6a", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,6 +1,5 @@\n use clippy_utils::consts::{constant_context, Constant};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_macro;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n@@ -49,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n             if let ExprKind::MethodCall(path, _, [receiver, count], _) = &expr.kind;\n             if path.ident.name == sym!(repeat);\n             if constant_context(cx, cx.typeck_results()).expr(count) == Some(Constant::Int(1));\n-            if !in_macro(receiver.span);\n+            if !receiver.span.from_expansion();\n             then {\n                 let ty = cx.typeck_results().expr_ty(receiver).peel_refs();\n                 if ty.is_str() {"}, {"sha": "e2b1a33746e5f4cd5d9ddb161c423c987e2c382f", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{fn_def_id, in_macro, path_to_local_id};\n+use clippy_utils::{fn_def_id, path_to_local_id};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n@@ -90,8 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n             if !last_statement_borrows(cx, initexpr);\n             if !in_external_macro(cx.sess(), initexpr.span);\n             if !in_external_macro(cx.sess(), retexpr.span);\n-            if !in_external_macro(cx.sess(), local.span);\n-            if !in_macro(local.span);\n+            if !local.span.from_expansion();\n             then {\n                 span_lint_and_then(\n                     cx,"}, {"sha": "87aa02b65854e196b742101c7c95ae229ac23caa", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n-use clippy_utils::in_macro;\n use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind, VisibilityKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -110,7 +109,7 @@ fn track_uses(\n     single_use_usages: &mut Vec<(Symbol, Span, bool)>,\n     macros: &mut Vec<Symbol>,\n ) {\n-    if in_macro(item.span) || item.vis.kind.is_pub() {\n+    if item.span.from_expansion() || item.vis.kind.is_pub() {\n         return;\n     }\n "}, {"sha": "8bf40ec53122d4f348ff8e49acb0956383d18f64", "filename": "clippy_lints/src/strlen_on_c_strings.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::in_macro;\n use clippy_utils::paths;\n use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::ty::{is_type_diagnostic_item, is_type_ref_to_diagnostic_item};\n@@ -40,7 +39,7 @@ declare_lint_pass!(StrlenOnCStrings => [STRLEN_ON_C_STRINGS]);\n \n impl LateLintPass<'tcx> for StrlenOnCStrings {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if in_macro(expr.span) {\n+        if expr.span.from_expansion() {\n             return;\n         }\n "}, {"sha": "73bdcae9e392066b5eab3a9f36d72aff1ca81bec", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::{snippet, snippet_with_applicability};\n-use clippy_utils::{in_macro, SpanlessHash};\n+use clippy_utils::SpanlessHash;\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n@@ -93,7 +93,7 @@ fn get_trait_res_span_from_bound(bound: &GenericBound<'_>) -> Option<(Res, Span)\n \n impl TraitBounds {\n     fn check_type_repetition(self, cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n-        if in_macro(gen.span) {\n+        if gen.span.from_expansion() {\n             return;\n         }\n         let hash = |ty| -> u64 {\n@@ -107,7 +107,7 @@ impl TraitBounds {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref p) = bound;\n                 if p.bounds.len() as u64 <= self.max_trait_bounds;\n-                if !in_macro(p.span);\n+                if !p.span.from_expansion();\n                 let h = hash(p.bounded_ty);\n                 if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>());\n \n@@ -151,7 +151,7 @@ impl TraitBounds {\n }\n \n fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n-    if in_macro(gen.span) || gen.params.is_empty() || gen.where_clause.predicates.is_empty() {\n+    if gen.span.from_expansion() || gen.params.is_empty() || gen.where_clause.predicates.is_empty() {\n         return;\n     }\n \n@@ -170,7 +170,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n     for predicate in gen.where_clause.predicates {\n         if_chain! {\n             if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n-            if !in_macro(bound_predicate.span);\n+            if !bound_predicate.span.from_expansion();\n             if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n             if let Some(segment) = segments.first();\n             if let Some(trait_resolutions_direct) = map.get(&segment.ident);"}, {"sha": "cc450b1e599640fd5088b2d1707e2a728635a4db", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{differing_macro_contexts, get_parent_expr, in_macro, is_lang_ctor, match_def_path, paths};\n+use clippy_utils::{get_parent_expr, is_lang_ctor, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::ResultErr;\n@@ -10,7 +10,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n+use rustc_span::{hygiene, sym};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -93,15 +93,9 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n                 };\n \n                 let expr_err_ty = cx.typeck_results().expr_ty(err_arg);\n-                let differing_contexts = differing_macro_contexts(expr.span, err_arg.span);\n-\n-                let origin_snippet = if in_macro(expr.span) && in_macro(err_arg.span) && differing_contexts {\n-                    snippet(cx, err_arg.span.ctxt().outer_expn_data().call_site, \"_\")\n-                } else if err_arg.span.from_expansion() && !in_macro(expr.span) {\n-                    snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n-                } else {\n-                    snippet(cx, err_arg.span, \"_\")\n-                };\n+                let span = hygiene::walk_chain(err_arg.span, try_arg.span.ctxt());\n+                let mut applicability = Applicability::MachineApplicable;\n+                let origin_snippet = snippet_with_applicability(cx, span, \"_\", &mut applicability);\n                 let ret_prefix = if get_parent_expr(cx, expr).map_or(false, |e| matches!(e.kind, ExprKind::Ret(_))) {\n                     \"\" // already returns\n                 } else {\n@@ -120,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n                     \"returning an `Err(_)` with the `?` operator\",\n                     \"try this\",\n                     suggestion,\n-                    Applicability::MachineApplicable\n+                    applicability,\n                 );\n             }\n         }"}, {"sha": "99b33e5433fb6454490f97d6063e3eb62f08dc9a", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::is_lint_allowed;\n use clippy_utils::source::{indent_of, reindent_multiline, snippet};\n-use clippy_utils::{in_macro, is_lint_allowed};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Block, BlockCheckMode, Expr, ExprKind, HirId, Local, UnsafeSource};\n@@ -134,7 +134,7 @@ impl UndocumentedUnsafeBlocks {\n \n         let enclosing_scope_span = map.opt_span(enclosing_hir_id)?;\n \n-        let between_span = if in_macro(block_span) {\n+        let between_span = if block_span.from_expansion() {\n             self.macro_expansion = true;\n             enclosing_scope_span.with_hi(block_span.hi())\n         } else {"}, {"sha": "fcfa84031776f6c296f87b222b32f1689b83c062", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet;\n-use clippy_utils::{contains_return, in_macro, is_lang_ctor, return_ty, visitors::find_all_ret_expressions};\n+use clippy_utils::{contains_return, is_lang_ctor, return_ty, visitors::find_all_ret_expressions};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -116,7 +116,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         let mut suggs = Vec::new();\n         let can_sugg = find_all_ret_expressions(cx, &body.value, |ret_expr| {\n             if_chain! {\n-                if !in_macro(ret_expr.span);\n+                if !ret_expr.span.from_expansion();\n                 // Check if a function call.\n                 if let ExprKind::Call(func, [arg]) = ret_expr.kind;\n                 // Check if OPTION_SOME or RESULT_OK, depending on return type."}, {"sha": "09aad296f03787f069702f8900abb09609fca8a0", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::ty::same_type_and_consts;\n-use clippy_utils::{in_macro, meets_msrv, msrvs};\n+use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -197,7 +197,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n \n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n         if_chain! {\n-            if !in_macro(hir_ty.span);\n+            if !hir_ty.span.from_expansion();\n             if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check {\n                 impl_id,\n@@ -214,8 +214,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             };\n             if same_type_and_consts(ty, cx.tcx.type_of(impl_id));\n             let hir = cx.tcx.hir();\n-            let id = hir.get_parent_node(hir_ty.hir_id);\n-            if !hir.opt_span(id).map_or(false, in_macro);\n+            // prevents false positive on `#[derive(serde::Deserialize)]`\n+            if !hir.span(hir.get_parent_node(hir_ty.hir_id)).in_derive_expansion();\n             then {\n                 span_lint(cx, hir_ty.span);\n             }\n@@ -224,7 +224,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n \n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n-            if !in_macro(expr.span);\n+            if !expr.span.from_expansion();\n             if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n             if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);"}, {"sha": "2f3e525fdcfbef4dc7cb7317e259a5d4f38f55cd", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_test_module_or_function;\n use clippy_utils::source::{snippet, snippet_with_applicability};\n-use clippy_utils::{in_macro, is_test_module_or_function};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -196,7 +196,7 @@ impl LateLintPass<'_> for WildcardImports {\n \n impl WildcardImports {\n     fn check_exceptions(&self, item: &Item<'_>, segments: &[PathSegment<'_>]) -> bool {\n-        in_macro(item.span)\n+        item.span.from_expansion()\n             || is_prelude_import(segments)\n             || (is_super_only_import(segments) && self.test_modules_deep > 0)\n     }"}, {"sha": "7799fd527cc08b11256cb0c90764439df3fcefef", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -250,12 +250,6 @@ pub fn is_lang_ctor(cx: &LateContext<'_>, qpath: &QPath<'_>, lang_item: LangItem\n     false\n }\n \n-/// Returns `true` if this `span` was expanded by any macro.\n-#[must_use]\n-pub fn in_macro(span: Span) -> bool {\n-    span.from_expansion() && !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n-}\n-\n pub fn is_unit_expr(expr: &Expr<'_>) -> bool {\n     matches!(\n         expr.kind,"}, {"sha": "07883fdc4542328f3681c5df93316a1fe7c6234a", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -179,7 +179,7 @@ impl<'tcx> Visitor<'tcx> for ReturnBreakContinueMacroVisitor {\n             // desugaring, as this will detect a break if there's a while loop\n             // or a for loop inside the expression.\n             _ => {\n-                if utils::in_macro(ex.span) {\n+                if ex.span.from_expansion() {\n                     self.seen_return_break_continue = true;\n                 } else {\n                     rustc_hir::intravisit::walk_expr(self, ex);"}, {"sha": "e064fd188c8a68e2942a317d6ea73ab0d5063613", "filename": "tests/ui-internal/if_chain_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui-internal%2Fif_chain_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui-internal%2Fif_chain_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fif_chain_style.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::if_chain_style)]\n-#![allow(clippy::no_effect)]\n+#![allow(clippy::no_effect, clippy::nonminimal_bool)]\n \n extern crate if_chain;\n "}, {"sha": "6c2a25c37d8d73f6a1bd5960dbe8a8db954c91f7", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -2,7 +2,9 @@\n // [edition2018] edition:2018\n // [edition2021] edition:2021\n // run-rustfix\n+\n #![warn(clippy::manual_assert)]\n+#![allow(clippy::nonminimal_bool)]\n \n fn main() {\n     let a = vec![1, 2, 3];"}, {"sha": "77511631e449a9c4768780d531694aafdf144909", "filename": "tests/ui/manual_assert.edition2018.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.stderr?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,5 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:22:5\n+  --> $DIR/manual_assert.rs:24:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n@@ -9,47 +9,47 @@ LL | |     }\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:25:5\n+  --> $DIR/manual_assert.rs:27:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:42:5\n+  --> $DIR/manual_assert.rs:44:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:45:5\n+  --> $DIR/manual_assert.rs:47:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:48:5\n+  --> $DIR/manual_assert.rs:50:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:51:5\n+  --> $DIR/manual_assert.rs:53:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:54:5\n+  --> $DIR/manual_assert.rs:56:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");"}, {"sha": "6c2a25c37d8d73f6a1bd5960dbe8a8db954c91f7", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -2,7 +2,9 @@\n // [edition2018] edition:2018\n // [edition2021] edition:2021\n // run-rustfix\n+\n #![warn(clippy::manual_assert)]\n+#![allow(clippy::nonminimal_bool)]\n \n fn main() {\n     let a = vec![1, 2, 3];"}, {"sha": "77511631e449a9c4768780d531694aafdf144909", "filename": "tests/ui/manual_assert.edition2021.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.stderr?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -1,5 +1,5 @@\n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:22:5\n+  --> $DIR/manual_assert.rs:24:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n@@ -9,47 +9,47 @@ LL | |     }\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:25:5\n+  --> $DIR/manual_assert.rs:27:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n    | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:42:5\n+  --> $DIR/manual_assert.rs:44:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n    | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:45:5\n+  --> $DIR/manual_assert.rs:47:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:48:5\n+  --> $DIR/manual_assert.rs:50:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:51:5\n+  --> $DIR/manual_assert.rs:53:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n    | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n-  --> $DIR/manual_assert.rs:54:5\n+  --> $DIR/manual_assert.rs:56:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");"}, {"sha": "6c2a25c37d8d73f6a1bd5960dbe8a8db954c91f7", "filename": "tests/ui/manual_assert.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.fixed?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -2,7 +2,9 @@\n // [edition2018] edition:2018\n // [edition2021] edition:2021\n // run-rustfix\n+\n #![warn(clippy::manual_assert)]\n+#![allow(clippy::nonminimal_bool)]\n \n fn main() {\n     let a = vec![1, 2, 3];"}, {"sha": "d3e0897488f0c1ce8f315c4f8e4cf367e2f6ee76", "filename": "tests/ui/manual_assert.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d54f0f6eb3b03cb5d719949a25404a8fe563d9/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=14d54f0f6eb3b03cb5d719949a25404a8fe563d9", "patch": "@@ -2,7 +2,9 @@\n // [edition2018] edition:2018\n // [edition2021] edition:2021\n // run-rustfix\n+\n #![warn(clippy::manual_assert)]\n+#![allow(clippy::nonminimal_bool)]\n \n fn main() {\n     let a = vec![1, 2, 3];"}]}