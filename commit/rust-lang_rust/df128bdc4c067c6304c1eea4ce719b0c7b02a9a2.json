{"sha": "df128bdc4c067c6304c1eea4ce719b0c7b02a9a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMTI4YmRjNGMwNjdjNjMwNGMxZWVhNGNlNzE5YjBjN2IwMmE5YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-20T08:47:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-20T08:47:25Z"}, "message": "Auto merge of #31620 - alexcrichton:fix-out-of-tree-builds, r=brson\n\nThis removes creating some extraneous directories and also fixes some submodule management with out of tree builds.\n\nCloses #31619", "tree": {"sha": "05585fc1ea6340f0cc9668d582336f01af678c8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05585fc1ea6340f0cc9668d582336f01af678c8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2", "html_url": "https://github.com/rust-lang/rust/commit/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ffad7a38d4a203b5c1f97db52ff45849a66b32", "html_url": "https://github.com/rust-lang/rust/commit/d3ffad7a38d4a203b5c1f97db52ff45849a66b32"}, {"sha": "5aef0e8fac85fbc1a2ac580f43ea007dd013a777", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aef0e8fac85fbc1a2ac580f43ea007dd013a777", "html_url": "https://github.com/rust-lang/rust/commit/5aef0e8fac85fbc1a2ac580f43ea007dd013a777"}], "stats": {"total": 195, "additions": 100, "deletions": 95}, "files": [{"sha": "e1113fba46b7c329ba0baf60c131be66a8d3936b", "filename": "configure", "status": "modified", "additions": 85, "deletions": 81, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2/configure", "raw_url": "https://github.com/rust-lang/rust/raw/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=df128bdc4c067c6304c1eea4ce719b0c7b02a9a2", "patch": "@@ -1327,97 +1327,101 @@ then\n     fi\n fi\n \n-step_msg \"making directories\"\n+if [ -z \"$CFG_ENABLE_RUSTBUILD\" ]; then\n \n-for i in \\\n-    doc doc/std doc/extra \\\n-    dl tmp dist\n-do\n-    make_dir $i\n-done\n+  step_msg \"making directories\"\n \n-for t in $CFG_HOST\n-do\n-    make_dir $t/llvm\n-done\n+  for i in \\\n+      doc doc/std doc/extra \\\n+      dl tmp dist\n+  do\n+      make_dir $i\n+  done\n \n-for t in $CFG_HOST\n-do\n-    make_dir $t/rustllvm\n-done\n+  for t in $CFG_HOST\n+  do\n+      make_dir $t/llvm\n+  done\n \n-for t in $CFG_TARGET\n-do\n-  make_dir $t/rt\n-  for s in 0 1 2 3\n+  for t in $CFG_HOST\n   do\n-    make_dir $t/rt/stage$s\n-    make_dir $t/rt/jemalloc\n-    make_dir $t/rt/compiler-rt\n-    for i in                                          \\\n-      isaac sync test \\\n-      arch/i386 arch/x86_64 arch/arm arch/aarch64 arch/mips arch/powerpc\n-    do\n-      make_dir $t/rt/stage$s/$i\n-    done\n+      make_dir $t/rustllvm\n   done\n-done\n \n-for h in $CFG_HOST\n-do\n-    for t in $CFG_TARGET\n+  for t in $CFG_TARGET\n+  do\n+    make_dir $t/rt\n+    for s in 0 1 2 3\n     do\n-        # host bin dir stage0\n-        make_dir $h/stage0/bin\n-\n-        # host lib dir stage0\n-        make_dir $h/stage0/lib\n-\n-        # host test dir stage0\n-        make_dir $h/stage0/test\n-\n-        # target bin dir stage0\n-        make_dir $h/stage0/lib/rustlib/$t/bin\n-\n-        # target lib dir stage0\n-        make_dir $h/stage0/lib/rustlib/$t/lib\n-\n-        for i in 1 2 3\n-        do\n-            # host bin dir\n-            make_dir $h/stage$i/bin\n-\n-            # host lib dir\n-            make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE\n-\n-            # host test dir\n-            make_dir $h/stage$i/test\n-\n-            # target bin dir\n-            make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/bin\n-\n-            # target lib dir\n-            make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/lib\n-        done\n+      make_dir $t/rt/stage$s\n+      make_dir $t/rt/jemalloc\n+      make_dir $t/rt/compiler-rt\n+      for i in                                          \\\n+        isaac sync test \\\n+        arch/i386 arch/x86_64 arch/arm arch/aarch64 arch/mips arch/powerpc\n+      do\n+        make_dir $t/rt/stage$s/$i\n+      done\n     done\n+  done\n \n-    make_dir $h/test/run-pass\n-    make_dir $h/test/run-pass-valgrind\n-    make_dir $h/test/run-pass-fulldeps\n-    make_dir $h/test/run-fail\n-    make_dir $h/test/run-fail-fulldeps\n-    make_dir $h/test/compile-fail\n-    make_dir $h/test/parse-fail\n-    make_dir $h/test/compile-fail-fulldeps\n-    make_dir $h/test/bench\n-    make_dir $h/test/perf\n-    make_dir $h/test/pretty\n-    make_dir $h/test/debuginfo-gdb\n-    make_dir $h/test/debuginfo-lldb\n-    make_dir $h/test/codegen\n-    make_dir $h/test/codegen-units\n-    make_dir $h/test/rustdoc\n-done\n+  for h in $CFG_HOST\n+  do\n+      for t in $CFG_TARGET\n+      do\n+          # host bin dir stage0\n+          make_dir $h/stage0/bin\n+\n+          # host lib dir stage0\n+          make_dir $h/stage0/lib\n+\n+          # host test dir stage0\n+          make_dir $h/stage0/test\n+\n+          # target bin dir stage0\n+          make_dir $h/stage0/lib/rustlib/$t/bin\n+\n+          # target lib dir stage0\n+          make_dir $h/stage0/lib/rustlib/$t/lib\n+\n+          for i in 1 2 3\n+          do\n+              # host bin dir\n+              make_dir $h/stage$i/bin\n+\n+              # host lib dir\n+              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE\n+\n+              # host test dir\n+              make_dir $h/stage$i/test\n+\n+              # target bin dir\n+              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/bin\n+\n+              # target lib dir\n+              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/lib\n+          done\n+      done\n+\n+      make_dir $h/test/run-pass\n+      make_dir $h/test/run-pass-valgrind\n+      make_dir $h/test/run-pass-fulldeps\n+      make_dir $h/test/run-fail\n+      make_dir $h/test/run-fail-fulldeps\n+      make_dir $h/test/compile-fail\n+      make_dir $h/test/parse-fail\n+      make_dir $h/test/compile-fail-fulldeps\n+      make_dir $h/test/bench\n+      make_dir $h/test/perf\n+      make_dir $h/test/pretty\n+      make_dir $h/test/debuginfo-gdb\n+      make_dir $h/test/debuginfo-lldb\n+      make_dir $h/test/codegen\n+      make_dir $h/test/codegen-units\n+      make_dir $h/test/rustdoc\n+  done\n+\n+fi\n \n # Configure submodules\n step_msg \"configuring submodules\""}, {"sha": "339f91f14a24e9cbc1c2e6bf3c76bc10afcb6448", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df128bdc4c067c6304c1eea4ce719b0c7b02a9a2/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=df128bdc4c067c6304c1eea4ce719b0c7b02a9a2", "patch": "@@ -160,24 +160,25 @@ impl Build {\n         if fs::metadata(self.src.join(\".git\")).is_err() {\n             return\n         }\n-        let out = output(Command::new(\"git\").arg(\"submodule\").arg(\"status\"));\n+        let git_submodule = || {\n+            let mut cmd = Command::new(\"git\");\n+            cmd.current_dir(&self.src).arg(\"submodule\");\n+            return cmd\n+        };\n+        let out = output(git_submodule().arg(\"status\"));\n         if !out.lines().any(|l| l.starts_with(\"+\") || l.starts_with(\"-\")) {\n             return\n         }\n \n-        self.run(Command::new(\"git\").arg(\"submodule\").arg(\"sync\"));\n-        self.run(Command::new(\"git\").arg(\"submodule\").arg(\"init\"));\n-        self.run(Command::new(\"git\").arg(\"submodule\").arg(\"update\"));\n-        self.run(Command::new(\"git\").arg(\"submodule\").arg(\"update\")\n-                                    .arg(\"--recursive\"));\n-        self.run(Command::new(\"git\").arg(\"submodule\").arg(\"status\")\n-                                    .arg(\"--recursive\"));\n-        self.run(Command::new(\"git\").arg(\"submodule\").arg(\"foreach\")\n-                                    .arg(\"--recursive\")\n-                                    .arg(\"git\").arg(\"clean\").arg(\"-fdx\"));\n-        self.run(Command::new(\"git\").arg(\"submodule\").arg(\"foreach\")\n-                                    .arg(\"--recursive\")\n-                                    .arg(\"git\").arg(\"checkout\").arg(\".\"));\n+        self.run(git_submodule().arg(\"sync\"));\n+        self.run(git_submodule().arg(\"init\"));\n+        self.run(git_submodule().arg(\"update\"));\n+        self.run(git_submodule().arg(\"update\").arg(\"--recursive\"));\n+        self.run(git_submodule().arg(\"status\").arg(\"--recursive\"));\n+        self.run(git_submodule().arg(\"foreach\").arg(\"--recursive\")\n+                                .arg(\"git\").arg(\"clean\").arg(\"-fdx\"));\n+        self.run(git_submodule().arg(\"foreach\").arg(\"--recursive\")\n+                                .arg(\"git\").arg(\"checkout\").arg(\".\"));\n     }\n \n     /// Clear out `dir` if our build has been flagged as dirty, and also set"}]}