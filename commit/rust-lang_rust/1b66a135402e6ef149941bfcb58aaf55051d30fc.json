{"sha": "1b66a135402e6ef149941bfcb58aaf55051d30fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNjZhMTM1NDAyZTZlZjE0OTk0MWJmY2I1OGFhZjU1MDUxZDMwZmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-30T08:52:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-30T08:52:55Z"}, "message": "Rollup merge of #61244 - RalfJung:box, r=rkruppe\n\nBox::into_vec: use Box::into_raw instead of mem::forget\n\n`Box::into_raw` does, in one step, turn the `Box` into a raw ptr and avoid deallocation.  Seems cleaner than separating the two.\n\nAlso, `mem::forget` gets the `Box` with a `noalias` argument, but it is not actually correct that this is an exclusive pointer. So a stricter version of Stacked Borrows would complain here. (I can't actually make Stacked Borrows that strict yet though due to other issues.)", "tree": {"sha": "c3e810069369587054a090f9dc6c0247eff8eee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3e810069369587054a090f9dc6c0247eff8eee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b66a135402e6ef149941bfcb58aaf55051d30fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc75nnCRBK7hj4Ov3rIwAAdHIIAAsn0rJgotnH0la03+4qBsil\neivHvlk/O14qcW7HZL770QPvSi2cGJABBDkowgbUwyrAUTgiFM705flRE+Ut0fH4\nUOp10WYsjQxkUR5bLCtpGrJYpIsXEsbXJCqtjNZL6MHiIX2vx2e+tBqXCxZM4Mt7\nCzZXnv0JE3W6z1/hE9+Fp0Tvvpmewqt4XbIwBH3YZh+Dk+0Bg4Lk+hUwyGBlstM5\nQybRBapQyuxTGfssiqSL6WnIPt8dAKodHwGEOcFtPXjXgHL8gJbMAwmr5w1JZIgw\n2ZeRyTWtyODaP+UzC3JwuoNCWlxLUTHim7MgXfhJHu2Babp964ufAa0ggC5p3OI=\n=o8mZ\n-----END PGP SIGNATURE-----\n", "payload": "tree c3e810069369587054a090f9dc6c0247eff8eee2\nparent 6351267c1fc78ddfd9119f5378e1f79c734da994\nparent 645f685e1b05f3f62de26ea1579861e83cbd0d74\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559206375 +0200\ncommitter GitHub <noreply@github.com> 1559206375 +0200\n\nRollup merge of #61244 - RalfJung:box, r=rkruppe\n\nBox::into_vec: use Box::into_raw instead of mem::forget\n\n`Box::into_raw` does, in one step, turn the `Box` into a raw ptr and avoid deallocation.  Seems cleaner than separating the two.\n\nAlso, `mem::forget` gets the `Box` with a `noalias` argument, but it is not actually correct that this is an exclusive pointer. So a stricter version of Stacked Borrows would complain here. (I can't actually make Stacked Borrows that strict yet though due to other issues.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b66a135402e6ef149941bfcb58aaf55051d30fc", "html_url": "https://github.com/rust-lang/rust/commit/1b66a135402e6ef149941bfcb58aaf55051d30fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b66a135402e6ef149941bfcb58aaf55051d30fc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6351267c1fc78ddfd9119f5378e1f79c734da994", "url": "https://api.github.com/repos/rust-lang/rust/commits/6351267c1fc78ddfd9119f5378e1f79c734da994", "html_url": "https://github.com/rust-lang/rust/commit/6351267c1fc78ddfd9119f5378e1f79c734da994"}, {"sha": "645f685e1b05f3f62de26ea1579861e83cbd0d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/645f685e1b05f3f62de26ea1579861e83cbd0d74", "html_url": "https://github.com/rust-lang/rust/commit/645f685e1b05f3f62de26ea1579861e83cbd0d74"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "aeb7f90d3e60e946d0d0e8efc19948bb8b2ef6a0", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b66a135402e6ef149941bfcb58aaf55051d30fc/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b66a135402e6ef149941bfcb58aaf55051d30fc/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=1b66a135402e6ef149941bfcb58aaf55051d30fc", "patch": "@@ -137,17 +137,16 @@ pub use hack::to_vec;\n // `core::slice::SliceExt` - we need to supply these functions for the\n // `test_permutations` test\n mod hack {\n-    use core::mem;\n-\n     use crate::boxed::Box;\n     use crate::vec::Vec;\n     #[cfg(test)]\n     use crate::string::ToString;\n \n-    pub fn into_vec<T>(mut b: Box<[T]>) -> Vec<T> {\n+    pub fn into_vec<T>(b: Box<[T]>) -> Vec<T> {\n         unsafe {\n-            let xs = Vec::from_raw_parts(b.as_mut_ptr(), b.len(), b.len());\n-            mem::forget(b);\n+            let len = b.len();\n+            let b = Box::into_raw(b);\n+            let xs = Vec::from_raw_parts(b as *mut T, len, len);\n             xs\n         }\n     }"}]}