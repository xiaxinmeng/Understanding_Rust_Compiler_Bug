{"sha": "3d16c22864087c1ff765ffa60153368226f33968", "node_id": "C_kwDOAAsO6NoAKDNkMTZjMjI4NjQwODdjMWZmNzY1ZmZhNjAxNTMzNjgyMjZmMzM5Njg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-19T23:46:26Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-19T23:47:21Z"}, "message": "Be more hygenic with spans", "tree": {"sha": "c2864d01ca28e3c91881478a5a8ae0dad2d75389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2864d01ca28e3c91881478a5a8ae0dad2d75389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d16c22864087c1ff765ffa60153368226f33968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d16c22864087c1ff765ffa60153368226f33968", "html_url": "https://github.com/rust-lang/rust/commit/3d16c22864087c1ff765ffa60153368226f33968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d16c22864087c1ff765ffa60153368226f33968/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c9906c4bb0f622ea992ae5a50269a313798dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c9906c4bb0f622ea992ae5a50269a313798dd3", "html_url": "https://github.com/rust-lang/rust/commit/52c9906c4bb0f622ea992ae5a50269a313798dd3"}], "stats": {"total": 447, "additions": 181, "deletions": 266}, "files": [{"sha": "76333b755b747d540a1ad3d526070ac92b368613", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d16c22864087c1ff765ffa60153368226f33968/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d16c22864087c1ff765ffa60153368226f33968/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=3d16c22864087c1ff765ffa60153368226f33968", "patch": "@@ -821,16 +821,17 @@ fn non_exhaustive_match<'p, 'tcx>(\n             ));\n         }\n         [only] => {\n-            let pre_indentation = if let (Some(snippet), true) = (\n-                sm.indentation_before(only.span),\n-                sm.is_multiline(sp.shrink_to_hi().with_hi(only.span.lo())),\n-            ) {\n-                format!(\"\\n{}\", snippet)\n+            let (pre_indentation, is_multiline) = if let Some(snippet) = sm.indentation_before(only.span)\n+                && let Ok(with_trailing) = sm.span_extend_while(only.span, |c| c.is_whitespace() || c == ',')\n+                && sm.is_multiline(with_trailing)\n+            {\n+                (format!(\"\\n{}\", snippet), true)\n             } else {\n-                \" \".to_string()\n+                (\" \".to_string(), false)\n             };\n             let comma = if matches!(only.body.kind, hir::ExprKind::Block(..))\n                 && only.span.eq_ctxt(only.body.span)\n+                && is_multiline\n             {\n                 \"\"\n             } else {"}, {"sha": "d429b4e8effbff3a5cb80f5b6c553487b3184c42", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "modified", "additions": 136, "deletions": 204, "changes": 340, "blob_url": "https://github.com/rust-lang/rust/blob/3d16c22864087c1ff765ffa60153368226f33968/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d16c22864087c1ff765ffa60153368226f33968/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=3d16c22864087c1ff765ffa60153368226f33968", "patch": "@@ -7,9 +7,8 @@ LL |     m!(0f32, f32::NEG_INFINITY..);\n    = note: the matched value is of type `f32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         _ => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, _ => todo!() }\n+   |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:17:8\n@@ -20,9 +19,8 @@ LL |     m!(0f32, ..f32::INFINITY);\n    = note: the matched value is of type `f32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         _ => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, _ => todo!() }\n+   |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:26:8\n@@ -33,9 +31,8 @@ LL |     m!('a', ..core::char::MAX);\n    = note: the matched value is of type `char`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         '\\u{10ffff}' => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, '\\u{10ffff}' => todo!() }\n+   |                                +++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:27:8\n@@ -46,9 +43,8 @@ LL |     m!('a', ..ALMOST_MAX);\n    = note: the matched value is of type `char`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         '\\u{10fffe}'..='\\u{10ffff}' => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, '\\u{10fffe}'..='\\u{10ffff}' => todo!() }\n+   |                                ++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'\\0'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8\n@@ -59,9 +55,8 @@ LL |     m!('a', ALMOST_MIN..);\n    = note: the matched value is of type `char`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         '\\0' => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, '\\0' => todo!() }\n+   |                                +++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:29:8\n@@ -72,9 +67,8 @@ LL |     m!('a', ..=ALMOST_MAX);\n    = note: the matched value is of type `char`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         '\\u{10ffff}' => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, '\\u{10ffff}' => todo!() }\n+   |                                +++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:30:8\n@@ -85,9 +79,8 @@ LL |     m!('a', ..=VAL | VAL_2..);\n    = note: the matched value is of type `char`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         'b' => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 'b' => todo!() }\n+   |                                ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `'b'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:31:8\n@@ -98,9 +91,8 @@ LL |     m!('a', ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `char`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         'b' => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 'b' => todo!() }\n+   |                                ++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12\n@@ -111,9 +103,8 @@ LL |         m!(0, ..u8::MAX);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `254_u8..=u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12\n@@ -124,9 +115,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         254_u8..=u8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 254_u8..=u8::MAX => todo!() }\n+   |                                +++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12\n@@ -137,9 +127,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         0_u8 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 0_u8 => todo!() }\n+   |                                +++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:44:12\n@@ -150,9 +139,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:45:12\n@@ -163,9 +151,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u8 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u8 => todo!() }\n+   |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:46:12\n@@ -176,9 +163,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u8 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u8 => todo!() }\n+   |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12\n@@ -189,9 +175,8 @@ LL |         m!(0, ..u16::MAX);\n    = note: the matched value is of type `u16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u16::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u16::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `65534_u16..=u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12\n@@ -202,9 +187,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `u16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         65534_u16..=u16::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 65534_u16..=u16::MAX => todo!() }\n+   |                                +++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12\n@@ -215,9 +199,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `u16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         0_u16 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 0_u16 => todo!() }\n+   |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:57:12\n@@ -228,9 +211,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `u16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u16::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u16::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:58:12\n@@ -241,9 +223,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `u16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u16 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u16 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:59:12\n@@ -254,9 +235,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `u16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u16 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u16 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12\n@@ -267,9 +247,8 @@ LL |         m!(0, ..u32::MAX);\n    = note: the matched value is of type `u32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u32::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u32::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `4294967294_u32..=u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12\n@@ -280,9 +259,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `u32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         4294967294_u32..=u32::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 4294967294_u32..=u32::MAX => todo!() }\n+   |                                ++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12\n@@ -293,9 +271,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `u32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         0_u32 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 0_u32 => todo!() }\n+   |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:70:12\n@@ -306,9 +283,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `u32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u32::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u32::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:71:12\n@@ -319,9 +295,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `u32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u32 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u32 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:72:12\n@@ -332,9 +307,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `u32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u32 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u32 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12\n@@ -345,9 +319,8 @@ LL |         m!(0, ..u64::MAX);\n    = note: the matched value is of type `u64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u64::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u64::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `18446744073709551614_u64..=u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12\n@@ -358,9 +331,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `u64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         18446744073709551614_u64..=u64::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 18446744073709551614_u64..=u64::MAX => todo!() }\n+   |                                ++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12\n@@ -371,9 +343,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `u64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         0_u64 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 0_u64 => todo!() }\n+   |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:83:12\n@@ -384,9 +355,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `u64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u64::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u64::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:84:12\n@@ -397,9 +367,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `u64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u64 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u64 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:85:12\n@@ -410,9 +379,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `u64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u64 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u64 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12\n@@ -423,9 +391,8 @@ LL |         m!(0, ..u128::MAX);\n    = note: the matched value is of type `u128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u128::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u128::MAX => todo!() }\n+   |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12\n@@ -436,9 +403,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `u128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         340282366920938463463374607431768211454_u128..=u128::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 340282366920938463463374607431768211454_u128..=u128::MAX => todo!() }\n+   |                                +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12\n@@ -449,9 +415,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `u128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         0_u128 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 0_u128 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:96:12\n@@ -462,9 +427,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `u128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u128::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u128::MAX => todo!() }\n+   |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:97:12\n@@ -475,9 +439,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `u128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u128 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u128 => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_u128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:98:12\n@@ -488,9 +451,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `u128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_u128 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_u128 => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12\n@@ -501,9 +463,8 @@ LL |         m!(0, ..i8::MAX);\n    = note: the matched value is of type `i8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `126_i8..=i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12\n@@ -514,9 +475,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `i8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         126_i8..=i8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 126_i8..=i8::MAX => todo!() }\n+   |                                +++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:111:12\n@@ -527,9 +487,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `i8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i8::MIN => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i8::MIN => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:112:12\n@@ -540,9 +499,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `i8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:113:12\n@@ -553,9 +511,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `i8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i8 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i8 => todo!() }\n+   |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i8` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:114:12\n@@ -566,9 +523,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `i8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i8 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i8 => todo!() }\n+   |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12\n@@ -579,9 +535,8 @@ LL |         m!(0, ..i16::MAX);\n    = note: the matched value is of type `i16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i16::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i16::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `32766_i16..=i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12\n@@ -592,9 +547,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `i16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         32766_i16..=i16::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 32766_i16..=i16::MAX => todo!() }\n+   |                                +++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i16::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:124:12\n@@ -605,9 +559,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `i16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i16::MIN => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i16::MIN => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i16::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:125:12\n@@ -618,9 +571,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `i16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i16::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i16::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:126:12\n@@ -631,9 +583,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `i16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i16 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i16 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i16` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:127:12\n@@ -644,9 +595,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `i16`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i16 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i16 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12\n@@ -657,9 +607,8 @@ LL |         m!(0, ..i32::MAX);\n    = note: the matched value is of type `i32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i32::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i32::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `2147483646_i32..=i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12\n@@ -670,9 +619,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `i32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         2147483646_i32..=i32::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 2147483646_i32..=i32::MAX => todo!() }\n+   |                                ++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i32::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:137:12\n@@ -683,9 +631,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `i32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i32::MIN => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i32::MIN => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i32::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:138:12\n@@ -696,9 +643,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `i32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i32::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i32::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:139:12\n@@ -709,9 +655,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `i32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i32 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i32 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i32` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:140:12\n@@ -722,9 +667,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `i32`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i32 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i32 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12\n@@ -735,9 +679,8 @@ LL |         m!(0, ..i64::MAX);\n    = note: the matched value is of type `i64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i64::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i64::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `9223372036854775806_i64..=i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12\n@@ -748,9 +691,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `i64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         9223372036854775806_i64..=i64::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 9223372036854775806_i64..=i64::MAX => todo!() }\n+   |                                +++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i64::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:150:12\n@@ -761,9 +703,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `i64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i64::MIN => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i64::MIN => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i64::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:151:12\n@@ -774,9 +715,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `i64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i64::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i64::MAX => todo!() }\n+   |                                +++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:152:12\n@@ -787,9 +727,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `i64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i64 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i64 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i64` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:153:12\n@@ -800,9 +739,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `i64`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i64 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i64 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12\n@@ -813,9 +751,8 @@ LL |         m!(0, ..i128::MAX);\n    = note: the matched value is of type `i128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i128::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i128::MAX => todo!() }\n+   |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12\n@@ -826,9 +763,8 @@ LL |         m!(0, ..ALMOST_MAX);\n    = note: the matched value is of type `i128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         170141183460469231731687303715884105726_i128..=i128::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 170141183460469231731687303715884105726_i128..=i128::MAX => todo!() }\n+   |                                +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i128::MIN` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:163:12\n@@ -839,9 +775,8 @@ LL |         m!(0, ALMOST_MIN..);\n    = note: the matched value is of type `i128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i128::MIN => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i128::MIN => todo!() }\n+   |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i128::MAX` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:164:12\n@@ -852,9 +787,8 @@ LL |         m!(0, ..=ALMOST_MAX);\n    = note: the matched value is of type `i128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i128::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i128::MAX => todo!() }\n+   |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:165:12\n@@ -865,9 +799,8 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    = note: the matched value is of type `i128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i128 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i128 => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `43_i128` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:166:12\n@@ -878,9 +811,8 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    = note: the matched value is of type `i128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         43_i128 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 43_i128 => todo!() }\n+   |                                ++++++++++++++++++++\n \n error: aborting due to 68 previous errors\n "}, {"sha": "f30ba05dff9e4343f4199e843086d8d5d9fe1e59", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.stderr", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3d16c22864087c1ff765ffa60153368226f33968/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d16c22864087c1ff765ffa60153368226f33968/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr?ref=3d16c22864087c1ff765ffa60153368226f33968", "patch": "@@ -7,9 +7,8 @@ LL |     m!(0u8, 0..255);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n   --> $DIR/exhaustiveness.rs:48:8\n@@ -20,9 +19,8 @@ LL |     m!(0u8, 0..=254);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u8` not covered\n   --> $DIR/exhaustiveness.rs:49:8\n@@ -33,9 +31,8 @@ LL |     m!(0u8, 1..=255);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         0_u8 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 0_u8 => todo!() }\n+   |                                +++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `42_u8` not covered\n   --> $DIR/exhaustiveness.rs:50:8\n@@ -46,9 +43,8 @@ LL |     m!(0u8, 0..42 | 43..=255);\n    = note: the matched value is of type `u8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         42_u8 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 42_u8 => todo!() }\n+   |                                ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/exhaustiveness.rs:51:8\n@@ -59,9 +55,8 @@ LL |     m!(0i8, -128..127);\n    = note: the matched value is of type `i8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n   --> $DIR/exhaustiveness.rs:52:8\n@@ -72,9 +67,8 @@ LL |     m!(0i8, -128..=126);\n    = note: the matched value is of type `i8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i8::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n   --> $DIR/exhaustiveness.rs:53:8\n@@ -85,9 +79,8 @@ LL |     m!(0i8, -127..=127);\n    = note: the matched value is of type `i8`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         i8::MIN => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, i8::MIN => todo!() }\n+   |                                ++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_i8` not covered\n   --> $DIR/exhaustiveness.rs:54:11\n@@ -111,9 +104,8 @@ LL |     m!(0u128, 0..=ALMOST_MAX);\n    = note: the matched value is of type `u128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         u128::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, u128::MAX => todo!() }\n+   |                                ++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `5_u128..=u128::MAX` not covered\n   --> $DIR/exhaustiveness.rs:60:8\n@@ -124,9 +116,8 @@ LL |     m!(0u128, 0..=4);\n    = note: the matched value is of type `u128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         5_u128..=u128::MAX => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 5_u128..=u128::MAX => todo!() }\n+   |                                +++++++++++++++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `0_u128` not covered\n   --> $DIR/exhaustiveness.rs:61:8\n@@ -137,9 +128,8 @@ LL |     m!(0u128, 1..=u128::MAX);\n    = note: the matched value is of type `u128`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         0_u128 => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, 0_u128 => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `(126_u8..=127_u8, false)` not covered\n   --> $DIR/exhaustiveness.rs:69:11"}, {"sha": "e3eb98ccdcda5db09855f90e47b628dcec81edf8", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3d16c22864087c1ff765ffa60153368226f33968/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d16c22864087c1ff765ffa60153368226f33968/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr?ref=3d16c22864087c1ff765ffa60153368226f33968", "patch": "@@ -39,9 +39,8 @@ LL |     m!(0usize, 0..=usize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         _ => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, _ => todo!() }\n+   |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:24:8\n@@ -54,9 +53,8 @@ LL |     m!(0usize, 0..5 | 5..=usize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         _ => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, _ => todo!() }\n+   |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:26:8\n@@ -69,9 +67,8 @@ LL |     m!(0usize, 0..usize::MAX | usize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         _ => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, _ => todo!() }\n+   |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n   --> $DIR/pointer-sized-int.rs:28:8\n@@ -82,9 +79,8 @@ LL |     m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::\n    = note: the matched value is of type `(usize, bool)`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         (_, _) => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, (_, _) => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:31:8\n@@ -97,9 +93,8 @@ LL |     m!(0isize, isize::MIN..=isize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         _ => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, _ => todo!() }\n+   |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:33:8\n@@ -112,9 +107,8 @@ LL |     m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         _ => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, _ => todo!() }\n+   |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:35:8\n@@ -127,9 +121,8 @@ LL |     m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         _ => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, _ => todo!() }\n+   |                                ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n   --> $DIR/pointer-sized-int.rs:37:8\n@@ -140,9 +133,8 @@ LL |     m!((0isize, true), (isize::MIN..5, true)\n    = note: the matched value is of type `(isize, bool)`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         match $s { $($t)+ => {}\n-LL ~         (_, _) => todo!() }\n-   |\n+LL |         match $s { $($t)+ => {}, (_, _) => todo!() }\n+   |                                +++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/pointer-sized-int.rs:41:11"}, {"sha": "89b4e06efdacd7c7afb34a730a817aae628ec1f3", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d16c22864087c1ff765ffa60153368226f33968/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d16c22864087c1ff765ffa60153368226f33968/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=3d16c22864087c1ff765ffa60153368226f33968", "patch": "@@ -12,8 +12,8 @@ LL | enum T { A, B }\n    = note: the matched value is of type `T`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL |     match x { T::B => { } A => todo!() }\n-   |                           ++++++++++++\n+LL |     match x { T::B => { }, A => todo!() }\n+   |                          ++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n   --> $DIR/non-exhaustive-match.rs:8:11"}]}