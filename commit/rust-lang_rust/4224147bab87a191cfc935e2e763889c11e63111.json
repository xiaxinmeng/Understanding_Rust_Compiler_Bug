{"sha": "4224147bab87a191cfc935e2e763889c11e63111", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMjQxNDdiYWI4N2ExOTFjZmM5MzVlMmU3NjM4ODljMTFlNjMxMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-20T09:46:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-20T09:46:49Z"}, "message": "auto merge of #13028 : thestinger/rust/vec_ng, r=huonw\n\nCloses #12771", "tree": {"sha": "bce8310ca888ec43d21ad9f24c14ff1947069763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce8310ca888ec43d21ad9f24c14ff1947069763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4224147bab87a191cfc935e2e763889c11e63111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4224147bab87a191cfc935e2e763889c11e63111", "html_url": "https://github.com/rust-lang/rust/commit/4224147bab87a191cfc935e2e763889c11e63111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4224147bab87a191cfc935e2e763889c11e63111/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a92dcb082851359bb5855ee642af3e3e1eda377f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92dcb082851359bb5855ee642af3e3e1eda377f", "html_url": "https://github.com/rust-lang/rust/commit/a92dcb082851359bb5855ee642af3e3e1eda377f"}, {"sha": "cdab8a76f40969556ee1b86b8f107ec38cc137f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdab8a76f40969556ee1b86b8f107ec38cc137f9", "html_url": "https://github.com/rust-lang/rust/commit/cdab8a76f40969556ee1b86b8f107ec38cc137f9"}], "stats": {"total": 615, "additions": 314, "deletions": 301}, "files": [{"sha": "a1f815df72e801efae7544a0471002f54f144dde", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -1575,7 +1575,7 @@ mod test_map {\n     use super::HashMap;\n     use std::iter::{Iterator,range_inclusive,range_step_inclusive};\n     use std::local_data;\n-    use std::vec_ng;\n+    use std::vec;\n \n     #[test]\n     fn test_create_capacity_zero() {\n@@ -1599,7 +1599,7 @@ mod test_map {\n         assert_eq!(*m.find(&2).unwrap(), 4);\n     }\n \n-    local_data_key!(drop_vector: vec_ng::Vec<int>)\n+    local_data_key!(drop_vector: vec::Vec<int>)\n \n     #[deriving(Hash, Eq)]\n     struct Dropable {\n@@ -1625,7 +1625,7 @@ mod test_map {\n \n     #[test]\n     fn test_drops() {\n-        local_data::set(drop_vector, vec_ng::Vec::from_elem(200, 0));\n+        local_data::set(drop_vector, vec::Vec::from_elem(200, 0));\n \n         {\n             let mut m = HashMap::new();"}, {"sha": "9d5e1a8f9edb589ba7c4772465b10619e7d7a880", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cmp;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[deriving(Show, Clone)]\n pub struct LogDirective {"}, {"sha": "fa8daf79812f671a72425e93e77a7c6cbf2b2fe4", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -126,7 +126,7 @@ use std::local_data;\n use std::os;\n use std::rt;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use sync::one::{Once, ONCE_INIT};\n "}, {"sha": "a55dedd594dcbc7d8ba2521492da1923358f2b7b", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -19,7 +19,7 @@ use std::libc;\n use std::mem;\n use std::rt::rtio;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use io::{IoResult, retry, keep_going};\n "}, {"sha": "cba24b478fc6f4f6191088d006b591c04c305398", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -28,8 +28,8 @@ use rand::Rng;\n use std::str;\n use std::uint;\n use std::{i64, u64};\n-use std::vec_ng;\n-use std::vec_ng::Vec;\n+use std::vec;\n+use std::vec::Vec;\n \n /**\n A `BigDigit` is a `BigUint`'s composing element.\n@@ -753,7 +753,7 @@ impl BigUint {\n     fn shl_unit(&self, n_unit: uint) -> BigUint {\n         if n_unit == 0 || self.is_zero() { return (*self).clone(); }\n \n-        return BigUint::new(vec_ng::append(Vec::from_elem(n_unit, ZERO_BIG_DIGIT),\n+        return BigUint::new(vec::append(Vec::from_elem(n_unit, ZERO_BIG_DIGIT),\n                                            self.data.as_slice()));\n     }\n \n@@ -1461,7 +1461,7 @@ mod biguint_tests {\n     use std::num::CheckedDiv;\n     use rand::{task_rng};\n     use std::u64;\n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     #[test]\n     fn test_from_slice() {\n@@ -2195,7 +2195,7 @@ mod bigint_tests {\n     use std::num::{ToPrimitive, FromPrimitive};\n     use rand::{task_rng};\n     use std::u64;\n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     #[test]\n     fn test_from_biguint() {"}, {"sha": "1e97d85aa1754dfe7c876ac71a8d2261075b9691", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -16,7 +16,7 @@ use std::cmp;\n use std::fmt;\n use std::from_str::FromStr;\n use std::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use bigint::{BigInt, BigUint, Sign, Plus, Minus};\n \n /// Represents the ratio between 2 numbers."}, {"sha": "e684c8b65281fe623962036751dbd404f9191a89", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -16,7 +16,7 @@ use metadata::filesearch;\n use lib::llvm::{ArchiveRef, llvm};\n \n use std::cast;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use std::io;\n use std::io::{fs, TempDir};\n use std::libc;"}, {"sha": "25802ac9d51b20d88e7f166788e000ae0d4f0b10", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -33,7 +33,7 @@ use std::ptr;\n use std::str;\n use std::io;\n use std::io::{fs, TempDir, Process};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use flate;\n use serialize::hex::ToHex;\n use syntax::abi;\n@@ -105,7 +105,7 @@ pub mod write {\n     use std::io::Process;\n     use std::libc::{c_uint, c_int};\n     use std::str;\n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     // On android, we by default compile for armv7 processors. This enables\n     // things like double word CAS instructions (rather than emulating them)"}, {"sha": "c870e69b32437f006e29ed210a10697d8c8e918f", "filename": "src/librustc/back/mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmips.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -11,7 +11,7 @@\n use back::target_strs;\n use driver::session::sess_os_to_meta_os;\n use metadata::loader::meta_section_name;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::abi;\n \n pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t {"}, {"sha": "ede7b7f3d42074aef4a09d93d89c856562cad812", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use metadata::filesearch;\n \n use collections::HashSet;\n use std::{os, slice};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::abi;\n \n fn not_win32(os: abi::Os) -> bool {"}, {"sha": "b07c0b2136fa95b07de421a99a8d702b1206da81", "filename": "src/librustc/back/target_strs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Ftarget_strs.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -10,7 +10,7 @@\n \n #[allow(non_camel_case_types)];\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub struct t {\n     module_asm: ~str,"}, {"sha": "0156ca12084128332195a8168616c5931fb8e8e5", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -37,8 +37,8 @@ use std::io::fs;\n use std::io::MemReader;\n use std::mem::drop;\n use std::os;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use syntax::ast;\n@@ -138,7 +138,7 @@ pub fn build_configuration(sess: &Session) -> ast::CrateConfig {\n     } else {\n         InternedString::new(\"nogc\")\n     });\n-    return vec_ng::append(user_cfg.move_iter().collect(),\n+    return vec::append(user_cfg.move_iter().collect(),\n                           default_cfg.as_slice());\n }\n \n@@ -835,7 +835,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> session::Options {\n \n         let level_short = level_name.slice_chars(0, 1);\n         let level_short = level_short.to_ascii().to_upper().into_str();\n-        let flags = vec_ng::append(matches.opt_strs(level_short)\n+        let flags = vec::append(matches.opt_strs(level_short)\n                                           .move_iter()\n                                           .collect(),\n                                    matches.opt_strs(level_name));"}, {"sha": "b7b7019a28bc2aa04c417cd836897e4048de25a6", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -28,7 +28,7 @@ use syntax::{abi, ast, codemap};\n use syntax;\n \n use std::cell::{Cell, RefCell};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::HashSet;\n \n pub struct Config {\n@@ -407,7 +407,7 @@ macro_rules! cgoptions(\n             }\n         }\n \n-        fn parse_list(slot: &mut ::std::vec_ng::Vec<~str>, v: Option<&str>)\n+        fn parse_list(slot: &mut ::std::vec::Vec<~str>, v: Option<&str>)\n                       -> bool {\n             match v {\n                 Some(s) => {"}, {"sha": "349451b4205ddd5b19711bb71f3b112da45c4c2d", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::fold::Folder;\n use syntax::{ast, fold, attr};\n use syntax::codemap;"}, {"sha": "bb6d3fe3b1080aa539a7190c5fef5d6468a21ea9", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -31,7 +31,7 @@ use syntax::parse::token;\n use driver::session::Session;\n \n use std::cell::Cell;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n /// This is a list of all known features since the beginning of time. This list\n /// can never shrink, it may only be expanded (in order to prevent old programs"}, {"sha": "8b403628f77f5948f577819dc4122f5149ef2418", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -11,8 +11,8 @@\n \n use driver::session::Session;\n \n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::DUMMY_SP;\n@@ -182,7 +182,7 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n             span: DUMMY_SP,\n         };\n \n-        let vis = vec_ng::append(vec!(vi2), module.view_items.as_slice());\n+        let vis = vec::append(vec!(vi2), module.view_items.as_slice());\n \n         // FIXME #2543: Bad copy.\n         let new_module = ast::Mod {"}, {"sha": "2b71b0919c63d3e5822e5552dda86546a046a903", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,8 +20,8 @@ use metadata::creader::Loader;\n \n use std::cell::RefCell;\n use std::slice;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::ast_util::*;\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n@@ -281,7 +281,7 @@ fn should_fail(i: @ast::Item) -> bool {\n fn add_test_module(cx: &TestCtxt, m: &ast::Mod) -> ast::Mod {\n     let testmod = mk_test_module(cx);\n     ast::Mod {\n-        items: vec_ng::append_one(m.items.clone(), testmod),\n+        items: vec::append_one(m.items.clone(), testmod),\n         ..(*m).clone()\n     }\n }"}, {"sha": "ba2760afe5d850dbd450d92f7a275e2e92dccec0", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -55,8 +55,8 @@ use std::io;\n use std::os;\n use std::str;\n use std::task;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::ast;\n use syntax::diagnostic::Emitter;\n use syntax::diagnostic;\n@@ -241,7 +241,7 @@ pub fn run_compiler(args: &[~str]) {\n         return;\n     }\n \n-    let lint_flags = vec_ng::append(matches.opt_strs(\"W\")\n+    let lint_flags = vec::append(matches.opt_strs(\"W\")\n                                            .move_iter()\n                                            .collect(),\n                                     matches.opt_strs(\"warn\"));"}, {"sha": "4133a742c60c7f31994fe782c594b819491e3b71", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -23,7 +23,7 @@ use metadata::loader;\n use metadata::loader::Os;\n \n use std::cell::RefCell;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::HashMap;\n use syntax::ast;\n use syntax::abi;"}, {"sha": "5ee01322913ce69cb9952f1bf634a95232e1153d", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,8 +20,8 @@ use middle::typeck;\n \n use reader = serialize::ebml::reader;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::diagnostic::expect;\n@@ -94,7 +94,7 @@ pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem>\n \n     // FIXME #1920: This path is not always correct if the crate is not linked\n     // into the root namespace.\n-    vec_ng::append(vec!(ast_map::PathMod(token::intern(cdata.name))),\n+    vec::append(vec!(ast_map::PathMod(token::intern(cdata.name))),\n                    path.as_slice())\n }\n "}, {"sha": "886e46dc2a09abee2fd5f65b8dc4335d4ce0fdc5", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -18,7 +18,7 @@ use metadata::decoder;\n use metadata::loader;\n \n use std::cell::RefCell;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use std::c_vec::CVec;\n use collections::HashMap;\n use syntax::ast;"}, {"sha": "449bda1eb5f4c9d59a48355d01098dcf2f15bfdb", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -33,7 +33,7 @@ use std::io;\n use std::io::extensions::u64_from_be_bytes;\n use std::option;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use serialize::ebml::reader;\n use serialize::ebml;\n use serialize::Decodable;"}, {"sha": "a50cb1cbdba7d3f09c02b2b2b1ee3f36fccbd2ed", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -32,7 +32,7 @@ use std::hash;\n use std::hash::Hash;\n use std::io::MemWriter;\n use std::str;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::HashMap;\n use syntax::abi::AbiSet;\n use syntax::ast::*;"}, {"sha": "666f44c685f272336427bbcb1fce1b72aa76a4ea", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -13,7 +13,7 @@\n use std::cell::RefCell;\n use std::os;\n use std::io::fs;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::HashSet;\n \n pub enum FileMatch { FileMatches, FileDoesntMatch }"}, {"sha": "6a1e3663a54ef41160507abd78eb4abaeac1ffeb", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -31,7 +31,7 @@ use std::io;\n use std::os::consts::{macos, freebsd, linux, android, win32};\n use std::str;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use collections::{HashMap, HashSet};\n use flate;"}, {"sha": "029edd73e9ffa0059d17a33c93f55591576d9b18", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use middle::ty;\n \n use std::str;\n use std::uint;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::abi::AbiSet;\n use syntax::abi;\n use syntax::ast;"}, {"sha": "7cec6532699674c760af2e5d33aece55b1199a0c", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -19,7 +19,7 @@ use std::io;\n use std::io::MemWriter;\n use std::str;\n use std::fmt;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use middle::ty::param_ty;\n use middle::ty;"}, {"sha": "5fea567fc7d4637735d69311defbd6e170db1fc7", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -37,7 +37,7 @@ use std::cast;\n use std::cell::RefCell;\n use std::io::Seek;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use serialize::ebml::reader;\n use serialize::ebml;"}, {"sha": "0399ce5954f40528b95073db964081f65e5cb8f3", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -23,7 +23,7 @@ use middle::borrowck::*;\n use middle::moves;\n use middle::ty;\n use middle::typeck::MethodCall;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::Span;"}, {"sha": "66be482eaefd6171e042909a10ef407f39e7085a", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -27,7 +27,7 @@ use middle::typeck::MethodCall;\n use util::common::indenter;\n use util::ppaux::{Repr};\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::ast_util::IdRange;"}, {"sha": "fc5763b8841cd34e642d3232d32c9ed0d6d054ae", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -12,8 +12,8 @@\n  * Computes the restrictions that result from a borrow.\n  */\n \n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use middle::borrowck::*;\n use mc = middle::mem_categorization;\n use middle::ty;\n@@ -174,7 +174,7 @@ impl<'a> RestrictionsContext<'a> {\n             Safe => Safe,\n             SafeIf(base_lp, base_vec) => {\n                 let lp = @LpExtend(base_lp, mc, elem);\n-                SafeIf(lp, vec_ng::append_one(base_vec,\n+                SafeIf(lp, vec::append_one(base_vec,\n                                               Restriction {\n                                                   loan_path: lp,\n                                                   set: restrictions"}, {"sha": "99e0ff6472f4657db3cc2c79592300cdc235ea3c", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -25,7 +25,7 @@ use std::cell::{Cell, RefCell};\n use collections::HashMap;\n use std::ops::{BitOr, BitAnd};\n use std::result::{Result};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util;"}, {"sha": "5b2cca047cc64a8cac346611baf24978b0690187", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -17,7 +17,7 @@ comments in the section \"Moves and initialization\" and in `doc.rs`.\n \n use std::cell::RefCell;\n use std::uint;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::{HashMap, HashSet};\n use middle::borrowck::*;\n use middle::dataflow::DataFlowContext;"}, {"sha": "8fee8b1bf9d48d99a751604aeb5dde57132b4651", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -12,7 +12,7 @@ use middle::cfg::*;\n use middle::graph;\n use middle::typeck;\n use middle::ty;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::opt_vec;"}, {"sha": "c6f114cfbc5c5b1e245ada46b45c893af9014524", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use middle::ty;\n use middle::typeck;\n use util::ppaux;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::*;\n use syntax::{ast_util, ast_map};\n use syntax::visit::Visitor;"}, {"sha": "fe4a58a62eb3731a5739a728be4d291e46201c67", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,8 +21,8 @@ use util::ppaux::ty_to_str;\n \n use std::cmp;\n use std::iter;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::ast::*;\n use syntax::ast_util::{unguarded_pat, walk_pat};\n use syntax::codemap::{DUMMY_SP, Span};\n@@ -569,10 +569,10 @@ fn specialize(cx: &MatchCheckCtxt,\n         Pat{id: pat_id, node: n, span: pat_span} =>\n             match n {\n             PatWild => {\n-                Some(vec_ng::append(Vec::from_elem(arity, wild()), r.tail()))\n+                Some(vec::append(Vec::from_elem(arity, wild()), r.tail()))\n             }\n             PatWildMulti => {\n-                Some(vec_ng::append(Vec::from_elem(arity, wild_multi()),\n+                Some(vec::append(Vec::from_elem(arity, wild_multi()),\n                                     r.tail()))\n             }\n             PatIdent(_, _, _) => {\n@@ -628,7 +628,7 @@ fn specialize(cx: &MatchCheckCtxt,\n                     }\n                     _ => {\n                         Some(\n-                            vec_ng::append(\n+                            vec::append(\n                                 Vec::from_elem(arity, wild()),\n                                 r.tail()\n                             )\n@@ -682,7 +682,7 @@ fn specialize(cx: &MatchCheckCtxt,\n                             Some(args) => args.iter().map(|x| *x).collect(),\n                             None => Vec::from_elem(arity, wild())\n                         };\n-                        Some(vec_ng::append(args, r.tail()))\n+                        Some(vec::append(args, r.tail()))\n                     }\n                     DefVariant(_, _, _) => None,\n \n@@ -695,7 +695,7 @@ fn specialize(cx: &MatchCheckCtxt,\n                             }\n                             None => new_args = Vec::from_elem(arity, wild())\n                         }\n-                        Some(vec_ng::append(new_args, r.tail()))\n+                        Some(vec::append(new_args, r.tail()))\n                     }\n                     _ => None\n                 }\n@@ -716,7 +716,7 @@ fn specialize(cx: &MatchCheckCtxt,\n                                     _ => wild()\n                                 }\n                             });\n-                            Some(vec_ng::append(args, r.tail()))\n+                            Some(vec::append(args, r.tail()))\n                         } else {\n                             None\n                         }\n@@ -747,15 +747,15 @@ fn specialize(cx: &MatchCheckCtxt,\n                                 _ => wild()\n                             }\n                         }).collect();\n-                        Some(vec_ng::append(args, r.tail()))\n+                        Some(vec::append(args, r.tail()))\n                     }\n                 }\n             }\n             PatTup(args) => {\n-                Some(vec_ng::append(args.iter().map(|x| *x).collect(), r.tail()))\n+                Some(vec::append(args.iter().map(|x| *x).collect(), r.tail()))\n             }\n             PatUniq(a) | PatRegion(a) => {\n-                Some(vec_ng::append(vec!(a), r.tail()))\n+                Some(vec::append(vec!(a), r.tail()))\n             }\n             PatLit(expr) => {\n                 let e_v = eval_const_expr(cx.tcx, expr);"}, {"sha": "0507c2541d6af6d293a6811b7ed9cb0229f81587", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -26,7 +26,7 @@ use syntax::{ast, ast_map, ast_util};\n use std::cell::RefCell;\n use collections::HashMap;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n //\n // This pass classifies expressions by their constant-ness."}, {"sha": "949eabb30dec03255770928dba81fa9c7dc37e36", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@\n use std::io;\n use std::uint;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::ast_util::IdRange;"}, {"sha": "58b8b55a2a03f3321f6694707ec76ce2612962bf", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -19,7 +19,7 @@ use middle::typeck;\n use util::nodemap::NodeSet;\n \n use collections::HashSet;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{local_def, def_id_of_def, is_local};"}, {"sha": "62e578886c5a746ea8873dea63a90b76a9bfe516", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -11,7 +11,7 @@\n \n use driver::session;\n use driver::session::Session;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::{Crate, Name, NodeId, Item, ItemFn};\n use syntax::ast_map;\n use syntax::attr;"}, {"sha": "af1d0c57237b58865b7c5a2a60533e685b3fa7ab", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -17,7 +17,7 @@ use middle::resolve;\n use middle::ty;\n use util::nodemap::{NodeMap, NodeSet};\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::codemap::Span;\n use syntax::{ast, ast_util};\n use syntax::visit;"}, {"sha": "8f2cbb4d241737a70e4811dfe970a108df8057f4", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -35,7 +35,7 @@ be indexed by the direction (see the type `Direction`).\n */\n \n use std::uint;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub struct Graph<N,E> {\n     priv nodes: Vec<Node<N>> ,"}, {"sha": "5c79020505a65231deaf849a1f50ef1cbfd18e04", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -16,7 +16,7 @@ use middle::typeck;\n use util::ppaux::{Repr, ty_to_str};\n use util::ppaux::UserString;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::codemap::Span;"}, {"sha": "6362bb93246d97c9ea38fb12763be25ac925c939", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -33,7 +33,7 @@ use syntax::visit;\n use collections::HashMap;\n use std::iter::Enumerate;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n // The actual lang items defined come at the end of this file in one handy table.\n // So you probably just want to nip down to the end."}, {"sha": "0bdc8384b0477fc384067d0d1411cf125bcfe9cc", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -58,7 +58,7 @@ use std::u16;\n use std::u32;\n use std::u64;\n use std::u8;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::SmallIntMap;\n use syntax::ast_map;\n use syntax::ast_util::IdVisitingOperation;\n@@ -1121,7 +1121,7 @@ fn check_deprecated_owned_vector(cx: &Context, e: &ast::Expr) {\n     match ty::get(t).sty {\n         ty::ty_vec(_, ty::vstore_uniq) => {\n             cx.span_lint(DeprecatedOwnedVector, e.span,\n-                         \"use of deprecated `~[]` vector; replaced by `std::vec_ng::Vec`\")\n+                         \"use of deprecated `~[]` vector; replaced by `std::vec::Vec`\")\n         }\n         _ => {}\n     }"}, {"sha": "ee526f81c281e899598bc798a75fe4fc71290198", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -116,7 +116,7 @@ use std::io;\n use std::rc::Rc;\n use std::str;\n use std::uint;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::parse::token::special_idents;"}, {"sha": "9efbd3a32d8c0624d422354e7f59438ae65d123c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -66,7 +66,7 @@ use middle::ty;\n use middle::typeck;\n use util::ppaux::{ty_to_str, region_ptr_to_str, Repr};\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::{MutImmutable, MutMutable};\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "0135b8d360b5a15856568e58d52cadedf066ac5e", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -138,7 +138,7 @@ use util::ppaux::UserString;\n use util::nodemap::{NodeMap, NodeSet};\n \n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::visit;"}, {"sha": "431f2820d6e1172e2e45fbbaadc8d54f6da1f64b", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -12,7 +12,7 @@\n use middle::resolve;\n \n use collections::HashMap;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::*;\n use syntax::ast_util::{path_to_ident, walk_pat};\n use syntax::codemap::Span;"}, {"sha": "e4f5b1758363d7e433d2b25d8b3793e38117f86c", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -13,7 +13,7 @@\n //! which are available for use externally when compiled as a library.\n \n use std::mem::replace;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use metadata::csearch;\n use middle::lint;"}, {"sha": "a0ca416380f9b7f292ce919017a7a0c104e882f3", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use middle::typeck;\n use middle::privacy;\n use util::nodemap::NodeSet;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::HashSet;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "c0218429bb1d062d286d2c7fd306c51b0e60b4b7", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -27,7 +27,7 @@ use middle::ty;\n use util::nodemap::NodeMap;\n \n use std::cell::RefCell;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::{HashMap, HashSet};\n use syntax::codemap::Span;\n use syntax::{ast, visit};"}, {"sha": "10f0002ea46365da69a8ccba617e8b91589038cd", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -34,7 +34,7 @@ use syntax::visit::Visitor;\n use std::cell::{Cell, RefCell};\n use std::uint;\n use std::mem::replace;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::{HashMap, HashSet};\n \n // Definition mapping"}, {"sha": "5d77d437bb9d19df8ed322f38c8446d0ba218760", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -18,7 +18,7 @@\n  */\n \n use driver::session::Session;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "25a2763ed2b90c03d767aa43924d6e10e2042b82", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -16,7 +16,7 @@ use middle::ty_fold::TypeFolder;\n use util::ppaux::Repr;\n \n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::codemap::Span;\n use syntax::opt_vec::OptVec;\n "}, {"sha": "060cb692bce93d16fbaed3a4d93fa8092c4f4cb8", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -225,8 +225,8 @@ use util::ppaux::{Repr, vec_map_to_str};\n \n use collections::HashMap;\n use std::cell::Cell;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::ast;\n use syntax::ast::Ident;\n use syntax::ast_util::path_to_ident;\n@@ -463,9 +463,9 @@ fn expand_nested_bindings<'r,'b>(\n     m.iter().map(|br| {\n         match br.pats.get(col).node {\n             ast::PatIdent(_, ref path, Some(inner)) => {\n-                let pats = vec_ng::append(\n+                let pats = vec::append(\n                     Vec::from_slice(br.pats.slice(0u, col)),\n-                    vec_ng::append(vec!(inner),\n+                    vec::append(vec!(inner),\n                                 br.pats.slice(col + 1u,\n                                            br.pats.len())).as_slice());\n \n@@ -513,8 +513,8 @@ fn enter_match<'r,'b>(\n         match e(*br.pats.get(col)) {\n             Some(sub) => {\n                 let pats =\n-                    vec_ng::append(\n-                        vec_ng::append(sub, br.pats.slice(0u, col)),\n+                    vec::append(\n+                        vec::append(sub, br.pats.slice(0u, col)),\n                         br.pats.slice(col + 1u, br.pats.len()));\n \n                 let this = *br.pats.get(col);\n@@ -1537,7 +1537,7 @@ fn compile_submatch_continue<'r,\n     let tcx = bcx.tcx();\n     let dm = tcx.def_map;\n \n-    let vals_left = vec_ng::append(Vec::from_slice(vals.slice(0u, col)),\n+    let vals_left = vec::append(Vec::from_slice(vals.slice(0u, col)),\n                                    vals.slice(col + 1u, vals.len()));\n     let ccx = bcx.fcx.ccx;\n     let mut pat_id = 0;\n@@ -1570,7 +1570,7 @@ fn compile_submatch_continue<'r,\n                                             col,\n                                             rec_fields.as_slice(),\n                                             val).as_slice(),\n-                        vec_ng::append(rec_vals,\n+                        vec::append(rec_vals,\n                                        vals_left.as_slice()).as_slice(),\n                         chk);\n             });\n@@ -1596,7 +1596,7 @@ fn compile_submatch_continue<'r,\n                                    col,\n                                    val,\n                                    n_tup_elts).as_slice(),\n-                         vec_ng::append(tup_vals,\n+                         vec::append(tup_vals,\n                                         vals_left.as_slice()).as_slice(),\n                          chk);\n         return;\n@@ -1622,7 +1622,7 @@ fn compile_submatch_continue<'r,\n         compile_submatch(bcx,\n                          enter_tuple_struct(bcx, dm, m, col, val,\n                                             struct_element_count).as_slice(),\n-                         vec_ng::append(llstructvals,\n+                         vec::append(llstructvals,\n                                         vals_left.as_slice()).as_slice(),\n                          chk);\n         return;\n@@ -1632,7 +1632,7 @@ fn compile_submatch_continue<'r,\n         let llbox = Load(bcx, val);\n         compile_submatch(bcx,\n                          enter_uniq(bcx, dm, m, col, val).as_slice(),\n-                         vec_ng::append(vec!(llbox),\n+                         vec::append(vec!(llbox),\n                                         vals_left.as_slice()).as_slice(),\n                          chk);\n         return;\n@@ -1642,7 +1642,7 @@ fn compile_submatch_continue<'r,\n         let loaded_val = Load(bcx, val);\n         compile_submatch(bcx,\n                          enter_region(bcx, dm, m, col, val).as_slice(),\n-                         vec_ng::append(vec!(loaded_val),\n+                         vec::append(vec!(loaded_val),\n                                         vals_left.as_slice()).as_slice(),\n                          chk);\n         return;\n@@ -1824,7 +1824,7 @@ fn compile_submatch_continue<'r,\n             lit(_) | range(_, _) => ()\n         }\n         let opt_ms = enter_opt(opt_cx, m, opt, col, size, val);\n-        let opt_vals = vec_ng::append(unpacked, vals_left.as_slice());\n+        let opt_vals = vec::append(unpacked, vals_left.as_slice());\n \n         match branch_chk {\n             None => {"}, {"sha": "7248792a51f5132f9ef48ae64b48f4c723c1ee66", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -57,8 +57,8 @@ use middle::trans::type_::Type;\n use middle::trans::type_of;\n use middle::ty;\n use middle::ty::Disr;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::abi::{X86, X86_64, Arm, Mips};\n use syntax::ast;\n use syntax::attr;\n@@ -226,7 +226,7 @@ fn represent_type_uncached(cx: &CrateContext, t: ty::t) -> Repr {\n             return General(ity, cases.map(|c| {\n                 let discr = vec!(ty_of_inttype(ity));\n                 mk_struct(cx,\n-                          vec_ng::append(discr, c.tys.as_slice()).as_slice(),\n+                          vec::append(discr, c.tys.as_slice()).as_slice(),\n                           false)\n             }))\n         }\n@@ -758,10 +758,10 @@ pub fn trans_const(ccx: &CrateContext, r: &Repr, discr: Disr,\n             let lldiscr = C_integral(ll_inttype(ccx, ity), discr as u64, true);\n             let contents = build_const_struct(ccx,\n                                               case,\n-                                              vec_ng::append(\n+                                              vec::append(\n                                                   vec!(lldiscr),\n                                                   vals).as_slice());\n-            C_struct(ccx, vec_ng::append(\n+            C_struct(ccx, vec::append(\n                         contents,\n                         &[padding(ccx, max_sz - case.size)]).as_slice(),\n                      false)"}, {"sha": "9624b58f56671c48cebad6de428bf9424d7d25b2", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -23,7 +23,7 @@ use middle::trans::type_of;\n use middle::trans::type_::Type;\n \n use std::c_str::ToCStr;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n \n // Take an inline assembly expression and splat it out via LLVM"}, {"sha": "20881eb243aadfe7880a16d17d45ef423af56e37", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -76,7 +76,7 @@ use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n use std::libc::c_uint;\n use std::local_data;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic, OsWin32};\n use syntax::ast_map::PathName;\n use syntax::ast_util::{local_def, is_local};"}, {"sha": "9b0718074294cc022cc406b905d9e757026bd020", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use middle::trans::type_::Type;\n \n use collections::HashMap;\n use std::libc::{c_uint, c_ulonglong, c_char};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::codemap::Span;\n \n pub struct Builder<'a> {"}, {"sha": "79fdd7371359115706157848dd45c956421f60d2", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -16,7 +16,7 @@ use middle::trans::cabi_x86_64;\n use middle::trans::cabi_arm;\n use middle::trans::cabi_mips;\n use middle::trans::type_::Type;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::abi::{X86, X86_64, Arm, Mips};\n \n #[deriving(Clone, Eq)]"}, {"sha": "94e2a50c620290093a1a0ed462b9bf24e65aacd3", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -18,7 +18,7 @@ use middle::trans::type_::Type;\n \n use std::cmp;\n use std::option::{None, Some};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n fn align_up_to(off: uint, a: uint) -> uint {\n     return (off + a - 1u) / a * a;"}, {"sha": "7e94bf8e666467fda75f4b543eccc2c942b3cb99", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -18,7 +18,7 @@ use middle::trans::context::CrateContext;\n use middle::trans::cabi::*;\n use middle::trans::type_::Type;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n fn align_up_to(off: uint, a: uint) -> uint {\n     return (off + a - 1u) / a * a;"}, {"sha": "243a9dffdc6d5c82b9a884370e94d50217c41e65", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use super::cabi::*;\n use super::common::*;\n use super::machine::*;\n use middle::trans::type_::Type;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn compute_abi_info(ccx: &CrateContext,\n                         atys: &[Type],"}, {"sha": "bf9c969b7ef761736ce748c35880c18491325e68", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,7 +21,7 @@ use middle::trans::context::CrateContext;\n use middle::trans::type_::Type;\n \n use std::cmp;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[deriving(Clone, Eq)]\n enum RegClass {"}, {"sha": "5af126615a118cf1604fc7037e96740189d1b0ee", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -49,8 +49,8 @@ use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n \n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::ast;\n use syntax::abi::AbiSet;\n use syntax::ast_map;\n@@ -233,7 +233,7 @@ fn resolve_default_method_vtables(bcx: &Block,\n         None => slice::from_elem(num_method_vtables, @Vec::new())\n     };\n \n-    let param_vtables = @(vec_ng::append((*trait_vtables_fixed).clone(),\n+    let param_vtables = @(vec::append((*trait_vtables_fixed).clone(),\n                                           method_vtables));\n \n     let self_vtables = resolve_param_vtables_under_param_substs("}, {"sha": "daeafe4c897b8d26479090a1cb901396c9285c76", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -27,7 +27,7 @@ use util::ppaux::Repr;\n use util::ppaux::ty_to_str;\n \n use arena::TypedArena;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_util;\n "}, {"sha": "cb01d187957e822bd4c496e06f504e7600bab766", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -35,7 +35,7 @@ use collections::HashMap;\n use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n use std::libc::{c_uint, c_longlong, c_ulonglong, c_char};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::Ident;\n use syntax::ast;\n use syntax::ast_map::{PathElem, PathName};"}, {"sha": "49f07e140a3dd160b017578d8e4a63b591ea8acd", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -34,8 +34,8 @@ use util::ppaux::{Repr, ty_to_str};\n use std::c_str::ToCStr;\n use std::libc::c_uint;\n use std::slice;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::{ast, ast_util};\n \n pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: ast::Lit)\n@@ -304,7 +304,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n         exprs.iter().map(|&e| const_expr(cx, e, is_local))\n              .fold((Vec::new(), true),\n                    |(l, all_inlineable), (val, inlineable)| {\n-                (vec_ng::append_one(l, val), all_inlineable && inlineable)\n+                (vec::append_one(l, val), all_inlineable && inlineable)\n              })\n     };\n     unsafe {"}, {"sha": "73869aa46222d1a1bf5bbace841b4699a2a7040a", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -33,7 +33,7 @@ use std::cell::{Cell, RefCell};\n use std::c_str::ToCStr;\n use std::libc::c_uint;\n use std::ptr;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::{HashMap, HashSet};\n use syntax::ast;\n use syntax::parse::token::InternedString;"}, {"sha": "dc4a6e37c3e07a4de17118763304f7428bdc8e2d", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -149,7 +149,7 @@ use std::libc::{c_uint, c_ulonglong, c_longlong};\n use std::ptr;\n use std::sync::atomics;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::codemap::{Span, Pos};\n use syntax::{abi, ast, codemap, ast_util, ast_map, opt_vec};\n use syntax::parse::token;"}, {"sha": "75b14c081f901d27fa2834eb743dff7e67216c91", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -71,7 +71,7 @@ use middle::trans::machine::llsize_of;\n use middle::trans::type_::Type;\n \n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::codemap;\n use syntax::print::pprust::{expr_to_str};"}, {"sha": "be9888a61d7fa82f51cc5f22b157951c04cf8329", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -27,7 +27,7 @@ use middle::ty::FnSig;\n use middle::ty;\n use std::cmp;\n use std::libc::c_uint;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::abi::{Cdecl, Aapcs, C, AbiSet, Win64};\n use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall, System};\n use syntax::codemap::Span;"}, {"sha": "e7ccb52108fee71938c32eed1416449354b54350", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -25,7 +25,7 @@ use middle::trans::machine;\n use middle::trans::machine::llsize_of;\n use middle::trans::type_::Type;\n use middle::ty;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::parse::token;"}, {"sha": "b248bf396452d0af8fb525263a61279bcf177ca6", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -34,8 +34,8 @@ use util::common::indenter;\n use util::ppaux::Repr;\n \n use std::c_str::ToCStr;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::parse::token;\n use syntax::{ast, ast_map, visit};\n \n@@ -324,7 +324,7 @@ fn combine_impl_and_methods_tps(bcx: &Block,\n     let node_substs = node_id_type_params(bcx, node);\n     debug!(\"rcvr_substs={:?}\", rcvr_substs.repr(ccx.tcx()));\n     let ty_substs\n-        = vec_ng::append(Vec::from_slice(rcvr_substs),\n+        = vec::append(Vec::from_slice(rcvr_substs),\n                          node_substs.tailn(node_substs.len() - n_m_tps));\n     debug!(\"n_m_tps={:?}\", n_m_tps);\n     debug!(\"node_substs={:?}\", node_substs.repr(ccx.tcx()));\n@@ -348,7 +348,7 @@ fn combine_impl_and_methods_tps(bcx: &Block,\n         None => @Vec::from_elem(node_substs.len(), @Vec::new())\n     };\n     let vtables\n-        = @vec_ng::append(Vec::from_slice(rcvr_origins.as_slice()),\n+        = @vec::append(Vec::from_slice(rcvr_origins.as_slice()),\n                           r_m_origins.tailn(r_m_origins.len() - n_m_tps));\n \n     (ty_substs, vtables)"}, {"sha": "aed1f1b24d06a9fc04e224e4574e4dd528d7d86a", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -23,7 +23,7 @@ use middle::ty;\n use middle::typeck;\n use util::ppaux::Repr;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::local_def;"}, {"sha": "833f33c720ad5a06f98d34dfdd21ba9a15af65f9", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -28,8 +28,8 @@ use util::ppaux::ty_to_str;\n use arena::TypedArena;\n use std::libc::c_uint;\n use std::option::{Some,None};\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::ast::DefId;\n use syntax::ast;\n use syntax::ast_map;\n@@ -134,7 +134,7 @@ impl<'a> Reflector<'a> {\n                                  -> (~str, Vec<ValueRef> ) {\n         match vstore {\n             ty::vstore_fixed(n) => {\n-                let extra = vec_ng::append(vec!(self.c_uint(n)),\n+                let extra = vec::append(vec!(self.c_uint(n)),\n                                            self.c_size_and_align(t)\n                                                .as_slice());\n                 (~\"fixed\", extra)\n@@ -184,7 +184,7 @@ impl<'a> Reflector<'a> {\n           }\n           ty::ty_vec(ref mt, vst) => {\n               let (name, extra) = self.vstore_name_and_extra(t, vst);\n-              let extra = vec_ng::append(extra, self.c_mt(mt).as_slice());\n+              let extra = vec::append(extra, self.c_mt(mt).as_slice());\n               self.visit(~\"evec_\" + name, extra.as_slice())\n           }\n           // Should remove mt from box and uniq.\n@@ -212,7 +212,7 @@ impl<'a> Reflector<'a> {\n           }\n \n           ty::ty_tup(ref tys) => {\n-              let extra = vec_ng::append(vec!(self.c_uint(tys.len())),\n+              let extra = vec::append(vec!(self.c_uint(tys.len())),\n                                          self.c_size_and_align(t).as_slice());\n               self.bracketed(\"tup\", extra.as_slice(), |this| {\n                   for (i, t) in tys.iter().enumerate() {\n@@ -260,15 +260,15 @@ impl<'a> Reflector<'a> {\n                       special_idents::unnamed_field.name;\n               }\n \n-              let extra = vec_ng::append(vec!(\n+              let extra = vec::append(vec!(\n                   self.c_slice(token::intern_and_get_ident(ty_to_str(tcx,\n                                                                      t))),\n                   self.c_bool(named_fields),\n                   self.c_uint(fields.len())\n               ), self.c_size_and_align(t).as_slice());\n               self.bracketed(\"class\", extra.as_slice(), |this| {\n                   for (i, field) in fields.iter().enumerate() {\n-                      let extra = vec_ng::append(vec!(\n+                      let extra = vec::append(vec!(\n                         this.c_uint(i),\n                         this.c_slice(token::get_ident(field.ident)),\n                         this.c_bool(named_fields)\n@@ -321,7 +321,7 @@ impl<'a> Reflector<'a> {\n                 llfdecl\n             };\n \n-            let enum_args = vec_ng::append(vec!(self.c_uint(variants.len()),\n+            let enum_args = vec::append(vec!(self.c_uint(variants.len()),\n                                                 make_get_disr()),\n                                            self.c_size_and_align(t)\n                                                .as_slice());"}, {"sha": "2a0c65216a7a298c2320f718525b866340238253", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,7 +21,7 @@ use syntax::abi::{X86, X86_64, Arm, Mips};\n use std::c_str::ToCStr;\n use std::cast;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use std::libc::{c_uint};\n "}, {"sha": "c8f8df17a74f65c6fb34db69eaffd8fee922e183", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -19,7 +19,7 @@ use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::opt_vec;\n "}, {"sha": "afdd9b55812dd9ca43e801ace76a67d2f475a2ac", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -40,8 +40,8 @@ use std::fmt;\n use std::hash::{Hash, sip};\n use std::ops;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use collections::{HashMap, HashSet};\n use syntax::ast::*;\n use syntax::ast_util::{is_local, lit_is_str};\n@@ -2901,7 +2901,7 @@ pub fn replace_closure_return_type(tcx: &ctxt, fn_type: t, ret_type: t) -> t {\n \n // Returns a vec of all the input and output types of fty.\n pub fn tys_in_fn_sig(sig: &FnSig) -> Vec<t> {\n-    vec_ng::append_one(sig.inputs.map(|a| *a), sig.output)\n+    vec::append_one(sig.inputs.map(|a| *a), sig.output)\n }\n \n // Type accessors for AST nodes\n@@ -3234,7 +3234,7 @@ pub fn method_call_type_param_defs(tcx: &ctxt, origin: typeck::MethodOrigin)\n             // trait itself.  This ought to be harmonized.\n             let trait_type_param_defs =\n                 lookup_trait_def(tcx, trt_id).generics.type_param_defs();\n-            Rc::new(vec_ng::append(\n+            Rc::new(vec::append(\n                 Vec::from_slice(trait_type_param_defs),\n                 ty::trait_method(tcx,\n                                  trt_id,"}, {"sha": "caec263389f017d77488d387da3cc401fc25fd50", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -13,7 +13,7 @@\n use middle::ty;\n use util::ppaux::Repr;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub trait TypeFolder {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt;"}, {"sha": "177cadbce463941605885e76315a12fa6e628969", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -60,7 +60,7 @@ use middle::typeck::rscope::{RegionScope};\n use middle::typeck::lookup_def_tcx;\n use util::ppaux::Repr;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::abi::AbiSet;\n use syntax::{ast, ast_util};\n use syntax::codemap::Span;"}, {"sha": "8ba2c63ecb10356a49beed6651e0885a6dc4d426", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use middle::typeck::infer;\n use middle::typeck::require_same_types;\n \n use collections::{HashMap, HashSet};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::parse::token;"}, {"sha": "0a95a89139899a91853129c735512ca7bb823661", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -97,8 +97,8 @@ use util::ppaux::Repr;\n \n use collections::HashSet;\n use std::result;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::ast::{DefId, SelfValue, SelfRegion};\n use syntax::ast::{SelfUniq, SelfStatic};\n use syntax::ast::{MutMutable, MutImmutable};\n@@ -1118,7 +1118,7 @@ impl<'a> LookupContext<'a> {\n         // Construct the full set of type parameters for the method,\n         // which is equal to the class tps + the method tps.\n         let all_substs = substs {\n-            tps: vec_ng::append(candidate.rcvr_substs.tps.clone(),\n+            tps: vec::append(candidate.rcvr_substs.tps.clone(),\n                                 m_substs.as_slice()),\n             regions: NonerasedRegions(all_regions),\n             self_ty: candidate.rcvr_substs.self_ty,"}, {"sha": "13808d6df1307885210940da2dde8ef92a934ad3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -119,8 +119,8 @@ use collections::HashMap;\n use std::mem::replace;\n use std::result;\n use std::slice;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use syntax::abi::AbiSet;\n use syntax::ast::{Provided, Required};\n use syntax::ast;\n@@ -910,7 +910,7 @@ fn compare_impl_method(tcx: &ty::ctxt,\n                 bound_region: ty::BrNamed(l.def_id, l.name)})).\n         collect();\n     let dummy_substs = ty::substs {\n-        tps: vec_ng::append(dummy_impl_tps, dummy_method_tps.as_slice()),\n+        tps: vec::append(dummy_impl_tps, dummy_method_tps.as_slice()),\n         regions: ty::NonerasedRegions(dummy_impl_regions),\n         self_ty: None };\n \n@@ -937,7 +937,7 @@ fn compare_impl_method(tcx: &ty::ctxt,\n                      self_ty: self_ty } = trait_substs.subst(tcx, &dummy_substs);\n         let substs = substs {\n             regions: trait_regions,\n-            tps: vec_ng::append(trait_tps, dummy_method_tps.as_slice()),\n+            tps: vec::append(trait_tps, dummy_method_tps.as_slice()),\n             self_ty: self_ty,\n         };\n         debug!(\"trait_fty (pre-subst): {} substs={}\","}, {"sha": "479a1e94b675cf545e42d287cbf5c72edc71d8bc", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use middle::ty_fold;\n use middle::ty_fold::TypeFolder;\n \n use collections::HashMap;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use util::ppaux::Repr;\n use util::ppaux;\n "}, {"sha": "9d181b27b4f7a8d69b64a161873a3ac0f2f8f0af", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -30,7 +30,7 @@ use util::ppaux::Repr;\n use collections::HashSet;\n use std::cell::RefCell;\n use std::result;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::Span;"}, {"sha": "e68fb5c7f131aae8e73dd2f6ebcc4e3513f28d2e", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -28,7 +28,7 @@ use middle::typeck::write_ty_to_tcx;\n use util::ppaux;\n use util::ppaux::Repr;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::print::pprust::pat_to_str;"}, {"sha": "c50f15ed8164a0f286186242fcaa4a0285a4d9b5", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -48,8 +48,8 @@ use syntax::visit;\n use collections::HashSet;\n use std::cell::RefCell;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n \n struct UniversalQuantificationResult {\n     monotype: t,\n@@ -347,7 +347,7 @@ impl<'a> CoherenceChecker<'a> {\n             // construct the polytype for the method based on the method_ty\n             let new_generics = ty::Generics {\n                 type_param_defs:\n-                    Rc::new(vec_ng::append(\n+                    Rc::new(vec::append(\n                         Vec::from_slice(impl_poly_type.generics\n                                                       .type_param_defs()),\n                             new_method_ty.generics.type_param_defs())),"}, {"sha": "6d15b3fd1f0a5c52360d06a5066fb6c41c6e7556", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -46,8 +46,8 @@ use util::ppaux;\n use util::ppaux::Repr;\n \n use std::rc::Rc;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n use collections::HashSet;\n \n use syntax::abi::AbiSet;\n@@ -330,7 +330,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         let substs = substs {\n             regions: ty::NonerasedRegions(rps_from_trait),\n             self_ty: Some(self_param),\n-            tps: vec_ng::append(non_shifted_trait_tps,\n+            tps: vec::append(non_shifted_trait_tps,\n                                 shifted_method_tps.as_slice())\n         };\n \n@@ -510,11 +510,11 @@ fn convert_methods(ccx: &CrateCtxt,\n                 // itself\n                 ty_param_bounds_and_ty {\n                     generics: ty::Generics {\n-                        type_param_defs: Rc::new(vec_ng::append(\n+                        type_param_defs: Rc::new(vec::append(\n                             Vec::from_slice(\n                                 rcvr_ty_generics.type_param_defs()),\n                             m_ty_generics.type_param_defs())),\n-                        region_param_defs: Rc::new(vec_ng::append(\n+                        region_param_defs: Rc::new(vec::append(\n                                 Vec::from_slice(rcvr_ty_generics.region_param_defs()),\n                                 m_ty_generics.region_param_defs())),\n                     },"}, {"sha": "5b52a3551dd38da38b615271be674c7d72294b60", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -63,7 +63,7 @@ use util::common::indent;\n use util::ppaux::Repr;\n \n use std::result;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::{Onceness, Purity};\n use syntax::ast;\n use syntax::opt_vec;"}, {"sha": "1f6708a6f5cd2a91a674f3316d725fd8c2f7c277", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -76,7 +76,7 @@ use middle::typeck::infer::region_inference::ProcessedErrors;\n use middle::typeck::infer::region_inference::SameRegions;\n use std::cell::{Cell, RefCell};\n use std::char::from_u32;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util;"}, {"sha": "ce344c9d561b440f388d1d6383f49d6968564487", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -46,7 +46,7 @@ use middle::typeck::infer::to_str::InferStr;\n use util::common::indenter;\n \n use collections::HashMap;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub trait LatticeValue {\n     fn sub(cf: &CombineFields, a: &Self, b: &Self) -> ures;"}, {"sha": "ccc589f0eef8e350a642791e9c072ebde52d6c1a", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -39,7 +39,7 @@ use middle::typeck::infer::unify::{ValsAndBindings, Root};\n use middle::typeck::infer::error_reporting::ErrorReporting;\n use std::cell::{Cell, RefCell};\n use std::result;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast::{MutImmutable, MutMutable};\n use syntax::ast;\n use syntax::codemap;"}, {"sha": "6019de0b2d93c1c7cab0872c2c4ee7c9b908f77c", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -27,7 +27,7 @@ use util::ppaux::{Repr};\n use std::cell::{Cell, RefCell};\n use std::uint;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::{HashMap, HashSet};\n use syntax::ast;\n use syntax::opt_vec;"}, {"sha": "929b4ac433c02131f771577ed55c9ff158a8c035", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -58,7 +58,7 @@ use middle::typeck::infer::unify::{Root, UnifyInferCtxtMethods};\n use util::common::{indent, indenter};\n use util::ppaux::ty_to_str;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n \n pub static resolve_nested_tvar: uint = 0b0000000001;"}, {"sha": "a5c95bbfd5ad4bc844291551f4755845fb7218b7", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -17,7 +17,7 @@ use middle::typeck::infer::{Bounds, uok, ures};\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::to_str::InferStr;\n use std::cell::RefCell;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n \n #[deriving(Clone)]"}, {"sha": "28e5559b32b8448acd4c9f73d11d5e81dbe18f15", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -72,7 +72,7 @@ use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n \n use std::cell::RefCell;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::List;\n use syntax::codemap::Span;\n use syntax::print::pprust::*;"}, {"sha": "3ead54ee9f553ba1ad942b2ef3fbd014c7a4ccd2", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -12,7 +12,7 @@\n use middle::ty;\n \n use std::cell::Cell;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::opt_vec::OptVec;"}, {"sha": "90bb1eb59a9bdbef1db6707e7c5336dcdd9558b6", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -197,7 +197,7 @@ use arena;\n use arena::Arena;\n use middle::ty;\n use std::fmt;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::opt_vec;"}, {"sha": "03f73f9ae9ed346e5495186168502802e0f32f70", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -16,7 +16,7 @@ use syntax::visit;\n use syntax::visit::Visitor;\n \n use std::local_data;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use time;\n "}, {"sha": "b6ddcd019509abb8a3a56716415c1f2032af3235", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -23,7 +23,7 @@ use middle::ty::{ty_uniq, ty_trait, ty_int, ty_uint, ty_unboxed_vec, ty_infer};\n use middle::ty;\n use middle::typeck;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::abi::AbiSet;\n use syntax::ast_map;\n use syntax::codemap::{Span, Pos};"}, {"sha": "afc061ba8135728df1cd8546215f2ade3e8fe774", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@\n use std::iter::range_step;\n use std::num::Zero;\n use std::slice::bytes::{MutableByteVector, copy_memory};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use serialize::hex::ToHex;\n \n /// Write a u32 into a vector, which must be 4 bytes long. The value is written in big-endian\n@@ -529,7 +529,7 @@ mod tests {\n     use super::{Digest, Sha256, FixedBuffer};\n     use std::num::Bounded;\n     use std::slice;\n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n     use self::rand::isaac::IsaacRng;\n     use self::rand::Rng;\n     use serialize::hex::FromHex;"}, {"sha": "6402ed1c9f8a00fba227e8a70e60c2e6d0f2c876", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -30,7 +30,7 @@ use core;\n use doctree;\n use visit_ast;\n use std::local_data;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub trait Clean<T> {\n     fn clean(&self) -> T;"}, {"sha": "bfc3555f16abb8c8c127992e56b7c8a2cefce602", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -39,7 +39,7 @@ use std::io;\n use std::io::{fs, File, BufferedWriter, MemWriter, BufferedReader};\n use std::str;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::{HashMap, HashSet};\n \n use sync::Arc;"}, {"sha": "db694a26a5677ba9602b786b425a94ef94079341", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -11,7 +11,7 @@\n //! Table-of-contents creation.\n \n use std::fmt;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n /// A (recursive) table of contents\n #[deriving(Eq)]"}, {"sha": "1ed0c57b85401186b921d52546a6aa8357e2881f", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::{str, io};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use collections::HashSet;\n "}, {"sha": "1398926827d27f27e835126e7bf684c771ed9a70", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -11,7 +11,7 @@\n //! Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for clean\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast_util;"}, {"sha": "4ff19393790ac6f066121a961101a22b9d7e3615", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -41,7 +41,7 @@ use std::cmp;\n use std::fmt;\n use std::fmt::Show;\n use std::option::{Option, Some, None};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n /// An identifier in the pre-release or build metadata. If the identifier can\n /// be parsed as a decimal value, it will be represented with `Numeric`."}, {"sha": "18692de2cb4f6f4c9bb7e50f1b05c1237f34a17b", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -17,7 +17,7 @@ Core encoding and decoding interfaces.\n use std::path;\n use std::rc::Rc;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub trait Encoder {\n     // Primitive types:"}, {"sha": "636327702308134ae66ed1c67cc7c3aed5f2cbab", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use cast;\n use fmt;\n use iter::Iterator;\n use slice::{ImmutableVector, MutableVector, Vector};\n-use vec_ng::Vec;\n+use vec::Vec;\n use option::{Option, Some, None};\n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n@@ -482,7 +482,7 @@ mod tests {\n     use super::*;\n     use str::from_char;\n     use char::from_u32;\n-    use vec_ng::Vec;\n+    use vec::Vec;\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => (&[$(Ascii{chr:$e}),*]);"}, {"sha": "3791aa38b82cdaf90123c8c31a718ef92369e2bc", "filename": "src/libstd/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fmod.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -71,7 +71,7 @@ use option::{Option, Some, None};\n use rc::Rc;\n use str::{Str, StrSlice};\n use slice::{Vector, ImmutableVector};\n-use vec_ng::Vec;\n+use vec::Vec;\n \n /// Reexport the `sip::hash` function as our default hasher.\n pub use hash = self::sip::hash;"}, {"sha": "870f33733f420b31a2f9ebb337a9900c8a1e3101", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -63,7 +63,7 @@ use result::{Ok, Err};\n use path;\n use path::{Path, GenericPath};\n use slice::{OwnedVector, ImmutableVector};\n-use vec_ng::Vec;\n+use vec::Vec;\n \n /// Unconstrained file access type that exposes read and write operations\n ///"}, {"sha": "302f899efda14026142158d87f6a733c40b17df1", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -84,6 +84,9 @@\n #[cfg(test)] pub use ops = realstd::ops;\n #[cfg(test)] pub use cmp = realstd::cmp;\n \n+#[cfg(stage0)]\n+pub use vec_ng = vec;\n+\n pub mod macros;\n \n mod rtdeps;\n@@ -120,7 +123,7 @@ pub mod char;\n pub mod tuple;\n \n pub mod slice;\n-pub mod vec_ng;\n+pub mod vec;\n pub mod str;\n \n pub mod ascii;"}, {"sha": "d183fae3ac6ee0c2babb1f59713f51189c2387fe", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -265,12 +265,12 @@ macro_rules! try(\n     ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n )\n \n-/// Create a `std::vec_ng::Vec` containing the arguments.\n+/// Create a `std::vec::Vec` containing the arguments.\n #[macro_export]\n macro_rules! vec(\n     ($($e:expr),*) => ({\n         // leading _ to allow empty construction without a warning.\n-        let mut _temp = ::std::vec_ng::Vec::new();\n+        let mut _temp = ::std::vec::Vec::new();\n         $(_temp.push($e);)*\n         _temp\n     })"}, {"sha": "a682a6141b1a6516c9cb740285be8c14e883069d", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -22,7 +22,7 @@ use rt::local::Local;\n use rt::task::Task;\n use raw;\n use slice::ImmutableVector;\n-use vec_ng::Vec;\n+use vec::Vec;\n \n // This has no meaning with out rtdebug also turned on.\n #[cfg(rtdebug)]"}, {"sha": "37aad3f94110524f2d20d97b507515922b8b42d6", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -101,7 +101,7 @@ use ptr::RawPtr;\n use from_str::FromStr;\n use slice;\n use slice::{OwnedVector, OwnedCloneableVector, ImmutableVector, MutableVector};\n-use vec_ng::Vec;\n+use vec::Vec;\n use default::Default;\n use raw::Repr;\n "}, {"sha": "5f4f4960a932679463e0fa6b21c531f9d5117f76", "filename": "src/libstd/vec.rs", "status": "renamed", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-//! A growable, owned vector\n+//! An owned, growable vector.\n \n use cast::{forget, transmute};\n use clone::Clone;\n@@ -30,18 +30,29 @@ use raw::Slice;\n use slice::{ImmutableEqVector, ImmutableVector, Items, MutItems, MutableVector};\n use slice::{MutableTotalOrdVector};\n \n-/// An owned, growable vector\n+/// An owned, growable vector.\n ///\n-/// `Vec<T>` is the replacement for the deprecated `~[T]` type. The API is\n-/// largely the same. The `vec!` macro is provided to make initialization\n-/// easier.\n+/// # Examples\n ///\n-/// # Example\n+/// ```rust\n+/// # use std::vec::Vec;\n+/// let mut vec = Vec::new();\n+/// vec.push(1);\n+/// vec.push(2);\n+///\n+/// assert_eq!(vec.len(), 2);\n+/// assert_eq!(vec.get(0), &1);\n+///\n+/// assert_eq!(vec.pop(), Some(2));\n+/// assert_eq!(vec.len(), 1);\n+/// ```\n+///\n+/// The `vec!` macro is provided to make initialization more convenient:\n ///\n /// ```rust\n /// let mut vec = vec!(1, 2, 3);\n /// vec.push(4);\n-/// println!(\"{}\", vec); // prints [1, 2, 3, 4]\n+/// assert_eq!(vec, vec!(1, 2, 3, 4));\n /// ```\n #[unsafe_no_drop_flag]\n pub struct Vec<T> {\n@@ -58,7 +69,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::vec_ng::Vec;\n+    /// # use std::vec::Vec;\n     /// let mut vec: Vec<int> = Vec::new();\n     /// ```\n     #[inline]\n@@ -74,7 +85,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::vec_ng::Vec;\n+    /// # use std::vec::Vec;\n     /// let vec: Vec<int> = Vec::with_capacity(10);\n     /// ```\n     pub fn with_capacity(capacity: uint) -> Vec<T> {\n@@ -87,7 +98,6 @@ impl<T> Vec<T> {\n         }\n     }\n \n-\n     /// Creates and initializes a `Vec`.\n     ///\n     /// Creates a `Vec` of size `length` and initializes the elements to the\n@@ -96,7 +106,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::vec_ng::Vec;\n+    /// # use std::vec::Vec;\n     /// let vec = Vec::from_fn(3, |idx| idx * 2);\n     /// assert_eq!(vec, vec!(0, 2, 4));\n     /// ```\n@@ -148,7 +158,7 @@ impl<T: Clone> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::vec_ng::Vec;\n+    /// # use std::vec::Vec;\n     /// let slice = [1, 2, 3];\n     /// let vec = Vec::from_slice(slice);\n     /// ```\n@@ -162,7 +172,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     /// ```rust\n-    /// # use std::vec_ng::Vec;\n+    /// # use std::vec::Vec;\n     /// let vec = Vec::from_elem(3, \"hi\");\n     /// println!(\"{}\", vec); // prints [hi, hi, hi]\n     /// ```\n@@ -344,7 +354,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::vec_ng::Vec;\n+    /// # use std::vec::Vec;\n     /// let vec: Vec<int> = Vec::with_capacity(10);\n     /// assert_eq!(vec.capacity(), 10);\n     /// ```\n@@ -363,7 +373,7 @@ impl<T> Vec<T> {\n      /// # Example\n      ///\n      /// ```rust\n-     /// # use std::vec_ng::Vec;\n+     /// # use std::vec::Vec;\n      /// let mut vec: Vec<int> = vec!(1);\n      /// vec.reserve_additional(10);\n      /// assert!(vec.capacity() >= 11);\n@@ -407,7 +417,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # use std::vec_ng::Vec;\n+    /// # use std::vec::Vec;\n     /// let mut vec: Vec<int> = Vec::with_capacity(10);\n     /// vec.reserve_exact(11);\n     /// assert_eq!(vec.capacity(), 11);\n@@ -767,13 +777,13 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     /// ```rust\n-    /// let mut v = ~[~\"foo\", ~\"bar\", ~\"baz\", ~\"qux\"];\n+    /// let mut v = vec!(~\"foo\", ~\"bar\", ~\"baz\", ~\"qux\");\n     ///\n     /// assert_eq!(v.swap_remove(1), Some(~\"bar\"));\n-    /// assert_eq!(v, ~[~\"foo\", ~\"qux\", ~\"baz\"]);\n+    /// assert_eq!(v, vec!(~\"foo\", ~\"qux\", ~\"baz\"));\n     ///\n     /// assert_eq!(v.swap_remove(0), Some(~\"foo\"));\n-    /// assert_eq!(v, ~[~\"baz\", ~\"qux\"]);\n+    /// assert_eq!(v, vec!(~\"baz\", ~\"qux\"));\n     ///\n     /// assert_eq!(v.swap_remove(2), None);\n     /// ```\n@@ -869,13 +879,13 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut v = ~[1, 2, 3];\n+    /// let mut v = vec!(1, 2, 3);\n     /// assert_eq!(v.remove(1), Some(2));\n-    /// assert_eq!(v, ~[1, 3]);\n+    /// assert_eq!(v, vec!(1, 3));\n     ///\n     /// assert_eq!(v.remove(4), None);\n     /// // v is unchanged:\n-    /// assert_eq!(v, ~[1, 3]);\n+    /// assert_eq!(v, vec!(1, 3));\n     /// ```\n     pub fn remove(&mut self, index: uint) -> Option<T> {\n         let len = self.len();\n@@ -1169,7 +1179,7 @@ impl<T:Eq> Vec<T> {\n ///\n /// ```rust\n /// let vec = vec!(1, 2);\n-/// let vec = std::vec_ng::append(vec, [3, 4]);\n+/// let vec = std::vec::append(vec, [3, 4]);\n /// assert_eq!(vec, vec!(1, 2, 3, 4));\n /// ```\n #[inline]\n@@ -1185,7 +1195,7 @@ pub fn append<T:Clone>(mut first: Vec<T>, second: &[T]) -> Vec<T> {\n ///\n /// ```rust\n /// let vec = vec!(1, 2);\n-/// let vec = std::vec_ng::append_one(vec, 3);\n+/// let vec = std::vec::append_one(vec, 3);\n /// assert_eq!(vec, vec!(1, 2, 3));\n /// ```\n #[inline]", "previous_filename": "src/libstd/vec_ng.rs"}, {"sha": "0547b374edbdb6fe5a655237da0fe5a093cbff74", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::fmt;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use std::fmt::Show;\n \n #[deriving(Eq)]"}, {"sha": "cbf5242271d6d26825aec07c7fa6b0ace81e3d87", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,7 +21,7 @@ use std::fmt;\n use std::fmt::Show;\n use std::option::Option;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n /// A pointer abstraction. FIXME(eddyb) #10676 use Rc<T> in the future.\n@@ -1157,7 +1157,7 @@ mod test {\n     use codemap::*;\n     use super::*;\n \n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     fn is_freeze<T: Freeze>() {}\n "}, {"sha": "d1b13d93856b216d8b4d6f01b8ef535a22eb398a", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -22,7 +22,7 @@ use std::cell::RefCell;\n use std::iter;\n use std::slice;\n use std::fmt;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[deriving(Clone, Eq)]\n pub enum PathElem {"}, {"sha": "b75a49b2097991ff5146ff25b0e97b320b8873b7", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -22,7 +22,7 @@ use visit;\n use std::cell::Cell;\n use std::cmp;\n use std::u32;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn path_name_i(idents: &[Ident]) -> ~str {\n     // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n@@ -711,7 +711,7 @@ mod test {\n     use ast::*;\n     use super::*;\n     use opt_vec;\n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     fn ident_to_segment(id : &Ident) -> PathSegment {\n         PathSegment {identifier:id.clone(),"}, {"sha": "8c6079b4d1a1c46c1b944dcc298cc0b8d7529a8e", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,7 +21,7 @@ use parse::token;\n use crateid::CrateId;\n \n use collections::HashSet;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub trait AttrMetaMethods {\n     // This could be changed to `fn check_name(&self, name: InternedString) ->"}, {"sha": "a52fbbe0c50460380692086903fc1e374b8e2f6b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -24,7 +24,7 @@ source code snippets, etc.\n use std::cell::RefCell;\n use std::cmp;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {"}, {"sha": "20463612886a89e22f749d0fa83fcec9fa434077", "filename": "src/libsyntax/crateid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -19,7 +19,7 @@ use std::fmt;\n /// to be `0.0`.\n \n use std::from_str::FromStr;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[deriving(Clone, Eq)]\n pub struct CrateId {"}, {"sha": "b8a4b6d34f46f66a8771080105effefe8a457fdd", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use parse;\n use parse::token::InternedString;\n use parse::token;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n enum State {\n     Asm,"}, {"sha": "e456b62e5e7e26da7843727e817ed8da75ee3df8", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use parse::token::{InternedString, intern, str_to_ident};\n use util::small_vector::SmallVector;\n \n use collections::HashMap;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n // new-style macro! tt code:\n //"}, {"sha": "7cf27e81ca070e0d0172fbfef5a087605436e031", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,7 +21,7 @@ use opt_vec::OptVec;\n use parse::token::special_idents;\n use parse::token;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub struct Field {\n     ident: ast::Ident,\n@@ -585,7 +585,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn expr_vec_ng(&self, sp: Span) -> @ast::Expr {\n         self.expr_call_global(sp,\n                               vec!(self.ident_of(\"std\"),\n-                                   self.ident_of(\"vec_ng\"),\n+                                   self.ident_of(\"vec\"),\n                                    self.ident_of(\"Vec\"),\n                                    self.ident_of(\"new\")),\n                               Vec::new())"}, {"sha": "174f36146aadf72cc13ddb4b8a817ccbf2e180b0", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -17,7 +17,7 @@ use ext::base;\n use ext::build::AstBuilder;\n \n use std::char;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) -> base::MacResult {\n     // Gather all argument expressions"}, {"sha": "e885119118c7ff03d074de10d5cab3fb6c6a29c1", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -26,7 +26,7 @@ use parse::token::InternedString;\n use parse::token;\n use parse;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_cfg(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) -> base::MacResult {\n     let mut p = parse::new_parser_from_tts(cx.parse_sess(),"}, {"sha": "2aeda30695e6dbaba050253652dc15814fbad2b5", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use ext::base;\n use opt_vec;\n use parse::token;\n use parse::token::{str_to_ident};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     -> base::MacResult {"}, {"sha": "a0aa1bb3710bf6534aac8cab70b936c7fb8d1840", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              span: Span,"}, {"sha": "80e56f0e407206c2a6ca8ef9384d1d46723d22f1", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                           span: Span,"}, {"sha": "caad6772b19de8eea7b28c91286c4b76bf2aeebf", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                            span: Span,"}, {"sha": "3292246bf0b87112f2f2b1a375ea108ebc7174d7", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n                                span: Span,"}, {"sha": "d8c2eea98961eeb70693757f8e975e85b7a420aa", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -16,7 +16,7 @@ use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n use std::cmp::{Ordering, Equal, Less, Greater};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n                                 span: Span,"}, {"sha": "e5e11ce878c9d9c2e7b3869d045a546d27192d13", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,7 +21,7 @@ use ext::deriving::generic::*;\n use parse::token::InternedString;\n use parse::token;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n                                  span: Span,"}, {"sha": "2015aa99717920f4668ed70504619a8d50a575bb", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                             span: Span,"}, {"sha": "0550e64bef8b1f3f76d81af2a0c99263d28fd03a", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -89,7 +89,7 @@ use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n use parse::token;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n                                  span: Span,"}, {"sha": "dce777aaaaefcd2233957ef58fae5cad4210756a", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -187,8 +187,8 @@ use codemap::Span;\n use opt_vec;\n use parse::token::InternedString;\n \n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n \n pub use self::ty::*;\n mod ty;\n@@ -407,7 +407,7 @@ impl<'a> TraitDef<'a> {\n         cx.item(\n             self.span,\n             ident,\n-            vec_ng::append(vec!(attr), self.attributes.as_slice()),\n+            vec::append(vec!(attr), self.attributes.as_slice()),\n             ast::ItemImpl(trait_generics, opt_trait_ref,\n                           self_type, methods.map(|x| *x)))\n     }"}, {"sha": "366647cc3713a9ed5b8c0b1599e07411669dec67", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                             span: Span,"}, {"sha": "35c1437a176719e20d5c6ee68a1e3fedbe654dfd", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -16,7 +16,7 @@ use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n use parse::token::InternedString;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                       span: Span,"}, {"sha": "4ae140406c3aa279372d718ab8dca0dbe9878dcb", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use ext::base::ExtCtxt;\n use ext::build::{AstBuilder};\n use ext::deriving::generic::*;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n                             span: Span,"}, {"sha": "d86fff5a4aafeee54c111f464b1237a8cb440e25", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -19,7 +19,7 @@ use ext::deriving::generic::*;\n use parse::token;\n \n use collections::HashMap;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_show(cx: &mut ExtCtxt,\n                             span: Span,"}, {"sha": "22d91956552ecea027cb949b790af1e4742488ae", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use ext::build::AstBuilder;\n use codemap::{Span,respan};\n use opt_vec;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n /// The types of pointers\n pub enum PtrTy<'a> {"}, {"sha": "d788bafc9b2046396e123c287337d46e6c89ba9b", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -14,7 +14,7 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                             span: Span,"}, {"sha": "bb9e5afaed4c30b270c81f41368d14392d984d5f", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -22,7 +22,7 @@ use ext::build::AstBuilder;\n use parse::token;\n \n use std::os;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_option_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     -> base::MacResult {"}, {"sha": "4134b23125ef0833c1dd1560aa2939d8c3739265", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -32,7 +32,7 @@ use util::small_vector::SmallVector;\n use std::cast;\n use std::unstable::dynamic_lib::DynamicLibrary;\n use std::os;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n     match e.node {\n@@ -979,7 +979,7 @@ mod test {\n     use visit;\n     use visit::Visitor;\n \n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     // a visitor that extracts the paths\n     // from a given thingy and puts them in a mutable"}, {"sha": "743fe7984801fca672a9b33be52913efdc311e14", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,7 +21,7 @@ use rsparse = parse;\n use std::fmt::parse;\n use collections::{HashMap, HashSet};\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[deriving(Eq)]\n enum ArgumentType {"}, {"sha": "ab5f3fbf3a6dcf4ec0f78ceae9fd1874529fa068", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use ast::{Ident, Mrk, Name, SyntaxContext};\n use std::cell::RefCell;\n use std::local_data;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use collections::HashMap;\n \n@@ -281,7 +281,7 @@ mod tests {\n     use super::{resolve, xorPush, new_mark_internal, new_sctable_internal};\n     use super::{new_rename_internal, marksof_internal, resolve_internal};\n     use super::{SCTable, EmptyCtxt, Mark, Rename, IllegalCtxt};\n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n     use collections::HashMap;\n \n     #[test] fn xorpush_test () {"}, {"sha": "5b66184b16c045601b2f986b0d5b99bdfbdca31e", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -17,7 +17,7 @@ use parse::token::*;\n use parse::token;\n use parse;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n /**\n *\n@@ -37,7 +37,7 @@ pub mod rt {\n     use parse;\n     use print::pprust;\n \n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     pub use ast::*;\n     pub use parse::token::*;"}, {"sha": "db59388e24ff23df3479c7b9eda4720683491038", "filename": "src/libsyntax/ext/registrar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fregistrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Fregistrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fregistrar.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use diagnostic;\n use visit;\n use visit::Visitor;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n struct MacroRegistrarContext {\n     registrars: Vec<(ast::NodeId, Span)> ,"}, {"sha": "f5c29840e48347fc522b4c248abff4eb061d7144", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -22,7 +22,7 @@ use parse::token::{Token, EOF, Nonterminal};\n use parse::token;\n \n use collections::HashMap;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "d283d6d71421a1892b60df474de90dac0217e8bc", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -28,7 +28,7 @@ use print;\n use util::small_vector::SmallVector;\n \n use std::cell::RefCell;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n struct ParserAnyMacro<'a> {\n     parser: RefCell<Parser<'a>>,"}, {"sha": "19af4eed4c3ecbf5536601c05b0537f65f42582f", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -18,7 +18,7 @@ use parse::token;\n use parse::lexer::TokenAndSpan;\n \n use std::cell::{Cell, RefCell};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n use collections::HashMap;\n \n ///an unzipping of `TokenTree`s"}, {"sha": "a54c3b6af01ff0136103eb431a33c373d03cc0b0", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -16,7 +16,7 @@ use parse::token;\n use opt_vec::OptVec;\n use util::small_vector::SmallVector;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n // We may eventually want to be able to fold over type parameters, too.\n pub trait Folder {"}, {"sha": "55261fd3267f342cd81af05a40e0e4d02223b669", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -17,7 +17,7 @@\n \n use std::default::Default;\n use std::slice;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[deriving(Clone, Encodable, Decodable, Hash)]\n pub enum OptVec<T> {"}, {"sha": "e86f6f5be81c96fc83f1d58d06e2c0ef554fa433", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use parse::token;\n use parse::parser::Parser;\n use parse::token::INTERPOLATED;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n // a parser that can parse attributes.\n pub trait ParserAttr {"}, {"sha": "9bc0fdd3078acb2f0c1b348ae648c6e6ced0e89a", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -20,7 +20,7 @@ use parse::token;\n use std::io;\n use std::str;\n use std::uint;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[deriving(Clone, Eq)]\n pub enum CommentStyle {"}, {"sha": "c34ef465dadf51fc3eaa8d3fa1faefa8b17ce68c", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -1005,7 +1005,7 @@ mod test {\n     use parse::token;\n     use parse::token::{str_to_ident};\n     use std::io::util;\n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     fn mk_sh() -> diagnostic::SpanHandler {\n         let emitter = diagnostic::EmitterWriter::new(~util::NullWriter);"}, {"sha": "7e8ca77eb04fb0dcc39c41cb590ec7ccf447c4f8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,7 +21,7 @@ use std::cell::RefCell;\n use std::io::File;\n use std::rc::Rc;\n use std::str;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub mod lexer;\n pub mod parser;\n@@ -279,7 +279,7 @@ mod test {\n     use std::io;\n     use std::io::MemWriter;\n     use std::str;\n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n     use codemap::{Span, BytePos, Spanned};\n     use opt_vec;\n     use ast;"}, {"sha": "0ded6abe14609ca60cad4defbc2681d5776cc3a8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -82,8 +82,8 @@ use std::cell::Cell;\n use collections::HashSet;\n use std::kinds::marker;\n use std::mem::replace;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n \n #[allow(non_camel_case_types)]\n #[deriving(Eq)]\n@@ -271,7 +271,7 @@ fn maybe_append(lhs: Vec<Attribute> , rhs: Option<Vec<Attribute> >)\n              -> Vec<Attribute> {\n     match rhs {\n         None => lhs,\n-        Some(ref attrs) => vec_ng::append(lhs, attrs.as_slice())\n+        Some(ref attrs) => vec::append(lhs, attrs.as_slice())\n     }\n }\n \n@@ -407,7 +407,7 @@ impl<'a> Parser<'a> {\n         } else if inedible.contains(&self.token) {\n             // leave it in the input\n         } else {\n-            let expected = vec_ng::append(edible.iter()\n+            let expected = vec::append(edible.iter()\n                                                 .map(|x| (*x).clone())\n                                                 .collect(),\n                                           inedible);\n@@ -449,7 +449,7 @@ impl<'a> Parser<'a> {\n         match e.node {\n             ExprPath(..) => {\n                 // might be unit-struct construction; check for recoverableinput error.\n-                let expected = vec_ng::append(edible.iter()\n+                let expected = vec::append(edible.iter()\n                                                     .map(|x| (*x).clone())\n                                                     .collect(),\n                                               inedible);\n@@ -472,7 +472,7 @@ impl<'a> Parser<'a> {\n         debug!(\"commit_stmt {:?}\", s);\n         let _s = s; // unused, but future checks might want to inspect `s`.\n         if self.last_token.as_ref().map_or(false, |t| is_ident_or_path(*t)) {\n-            let expected = vec_ng::append(edible.iter()\n+            let expected = vec::append(edible.iter()\n                                                 .map(|x| (*x).clone())\n                                                 .collect(),\n                                           inedible.as_slice());\n@@ -1113,7 +1113,7 @@ impl<'a> Parser<'a> {\n                 debug!(\"parse_trait_methods(): parsing provided method\");\n                 let (inner_attrs, body) =\n                     p.parse_inner_attrs_and_block();\n-                let attrs = vec_ng::append(attrs, inner_attrs.as_slice());\n+                let attrs = vec::append(attrs, inner_attrs.as_slice());\n                 Provided(@ast::Method {\n                     ident: ident,\n                     attrs: attrs,\n@@ -3852,7 +3852,7 @@ impl<'a> Parser<'a> {\n \n         let (inner_attrs, body) = self.parse_inner_attrs_and_block();\n         let hi = body.span.hi;\n-        let attrs = vec_ng::append(attrs, inner_attrs.as_slice());\n+        let attrs = vec::append(attrs, inner_attrs.as_slice());\n         @ast::Method {\n             ident: ident,\n             attrs: attrs,\n@@ -4084,7 +4084,7 @@ impl<'a> Parser<'a> {\n         while self.token != term {\n             let mut attrs = self.parse_outer_attributes();\n             if first {\n-                attrs = vec_ng::append(attrs_remaining.clone(),\n+                attrs = vec::append(attrs_remaining.clone(),\n                                        attrs.as_slice());\n                 first = false;\n             }\n@@ -4234,7 +4234,7 @@ impl<'a> Parser<'a> {\n                                      &path,\n                                      id_sp);\n         let (inner, next) = p0.parse_inner_attrs_and_next();\n-        let mod_attrs = vec_ng::append(outer_attrs, inner.as_slice());\n+        let mod_attrs = vec::append(outer_attrs, inner.as_slice());\n         let first_item_outer_attrs = next;\n         let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs);\n         {\n@@ -4559,7 +4559,7 @@ impl<'a> Parser<'a> {\n         match self.token {\n             INTERPOLATED(token::NtItem(item)) => {\n                 self.bump();\n-                let new_attrs = vec_ng::append(attrs, item.attrs.as_slice());\n+                let new_attrs = vec::append(attrs, item.attrs.as_slice());\n                 return IoviItem(@Item {\n                     attrs: new_attrs,\n                     ..(*item).clone()\n@@ -4987,7 +4987,7 @@ impl<'a> Parser<'a> {\n                                   mut extern_mod_allowed: bool,\n                                   macros_allowed: bool)\n                                   -> ParsedItemsAndViewItems {\n-        let mut attrs = vec_ng::append(first_item_attrs,\n+        let mut attrs = vec::append(first_item_attrs,\n                                        self.parse_outer_attributes()\n                                            .as_slice());\n         // First, parse view items.\n@@ -5069,7 +5069,7 @@ impl<'a> Parser<'a> {\n     fn parse_foreign_items(&mut self, first_item_attrs: Vec<Attribute> ,\n                            macros_allowed: bool)\n         -> ParsedItemsAndViewItems {\n-        let mut attrs = vec_ng::append(first_item_attrs,\n+        let mut attrs = vec::append(first_item_attrs,\n                                        self.parse_outer_attributes()\n                                            .as_slice());\n         let mut foreign_items = Vec::new();"}, {"sha": "43d686dc6cbb4de6c65f9e1ac6496c3570ff5ec8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -22,7 +22,7 @@ use std::char;\n use std::fmt;\n use std::local_data;\n use std::path::BytesContainer;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[allow(non_camel_case_types)]\n #[deriving(Clone, Encodable, Decodable, Eq, Hash, Show)]"}, {"sha": "c588e407e3071cd29cd8a50f3937673b1edeefdc", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -62,7 +62,7 @@\n  */\n \n use std::io;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[deriving(Clone, Eq)]\n pub enum Breaks {"}, {"sha": "5c23dd163d165a8892b3de35b7cf3a373ae5ba9e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -32,7 +32,7 @@ use std::char;\n use std::str;\n use std::io;\n use std::io::{IoResult, MemWriter};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n // The &mut State is stored here to prevent recursive type.\n pub enum AnnNode<'a> {\n@@ -2392,7 +2392,7 @@ mod test {\n     use codemap;\n     use parse::token;\n \n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     #[test]\n     fn test_fun_to_str() {"}, {"sha": "8a8bf1fdfb3202dfad4c6397d25da90df8e5c232", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -21,7 +21,7 @@ use std::cmp::Equiv;\n use std::fmt;\n use std::hash::Hash;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n pub struct Interner<T> {\n     priv map: RefCell<HashMap<T, Name>>,"}, {"sha": "13590542dacc88d4d348615dbd90248daff8e479", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use parse::{new_parser_from_source_str};\n use parse::parser::Parser;\n use parse::token;\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n // map a string to tts, using a made-up filename:\n pub fn string_to_tts(source_str: ~str) -> Vec<ast::TokenTree> {"}, {"sha": "72faaee64ff95e44f23e98fb947286c3c6dc3600", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use std::mem;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec::Vec;\n+use std::vec;\n \n /// A vector type optimized for cases where the size is almost always 0 or 1\n pub enum SmallVector<T> {\n@@ -114,7 +114,7 @@ impl<T> SmallVector<T> {\n pub enum MoveItems<T> {\n     priv ZeroIterator,\n     priv OneIterator(T),\n-    priv ManyIterator(vec_ng::MoveItems<T>),\n+    priv ManyIterator(vec::MoveItems<T>),\n }\n \n impl<T> Iterator<T> for MoveItems<T> {\n@@ -146,7 +146,7 @@ impl<T> Iterator<T> for MoveItems<T> {\n mod test {\n     use super::*;\n \n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     #[test]\n     fn test_len() {"}, {"sha": "408c9d635b68cffebf0ab37b32d6c7a3c0dbd483", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -15,7 +15,7 @@ use codemap::Span;\n use parse;\n use opt_vec;\n use opt_vec::OptVec;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n // Context-passing AST walker. Each overridden visit method has full control\n // over what happens with its node, it can do its own traversal of the node's"}, {"sha": "9a24e8ecfa9c3d8946e9ac8460966ecfb1a2a555", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -28,7 +28,7 @@ use std::hash::Hash;\n use std::io::BufReader;\n use std::from_str::FromStr;\n use std::uint;\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n use collections::HashMap;\n "}, {"sha": "1ae887a8332d91cdaaa22c41edeced5f0db08e6a", "filename": "src/test/compile-fail/issue-11873.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n fn main() {\n     let mut v = vec!(1);"}, {"sha": "1243ba1ce167078d4a3ce534f49f6972b4f1d108", "filename": "src/test/run-pass/overloaded-autoderef-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -10,7 +10,7 @@\n \n use std::cell::Cell;\n use std::ops::{Deref, DerefMut};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n #[deriving(Eq)]\n struct DerefCounter<T> {"}, {"sha": "24dde8ada18167d051a654730426da5f33afb365", "filename": "src/test/run-pass/overloaded-deref-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -10,7 +10,7 @@\n \n use std::cell::Cell;\n use std::ops::{Deref, DerefMut};\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n struct DerefCounter<T> {\n     count_imm: Cell<uint>,"}, {"sha": "e75bcb8b89e3d52533591b5af30292bda669551c", "filename": "src/test/run-pass/typeck_type_placeholder_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4224147bab87a191cfc935e2e763889c11e63111/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4224147bab87a191cfc935e2e763889c11e63111/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs?ref=4224147bab87a191cfc935e2e763889c11e63111", "patch": "@@ -14,7 +14,7 @@\n static CONSTEXPR: *int = &'static 413 as *_;\n \n pub fn main() {\n-    use std::vec_ng::Vec;\n+    use std::vec::Vec;\n \n     let x: Vec<_> = range(0u, 5).collect();\n     assert_eq!(x.as_slice(), &[0u,1,2,3,4]);"}]}