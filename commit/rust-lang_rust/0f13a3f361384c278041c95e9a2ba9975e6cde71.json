{"sha": "0f13a3f361384c278041c95e9a2ba9975e6cde71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMTNhM2YzNjEzODRjMjc4MDQxYzk1ZTlhMmJhOTk3NWU2Y2RlNzE=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-28T00:37:22Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-30T09:40:17Z"}, "message": "Use fresh FulfillmentContexts in select locations", "tree": {"sha": "1e0033df81ce933f446cb5a62ee1df8834e3506b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e0033df81ce933f446cb5a62ee1df8834e3506b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f13a3f361384c278041c95e9a2ba9975e6cde71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f13a3f361384c278041c95e9a2ba9975e6cde71", "html_url": "https://github.com/rust-lang/rust/commit/0f13a3f361384c278041c95e9a2ba9975e6cde71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f13a3f361384c278041c95e9a2ba9975e6cde71/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "html_url": "https://github.com/rust-lang/rust/commit/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "95a598ad115ae9f0304830a994fce63a8c11a3eb", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=0f13a3f361384c278041c95e9a2ba9975e6cde71", "patch": "@@ -283,7 +283,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n \n     fn check_static_type(&self, e: &ast::Expr) {\n         let ty = self.tcx.node_id_to_type(e.id);\n-        let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, None);\n+        let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, None, false);\n         let cause = traits::ObligationCause::new(e.span, e.id, traits::SharedStatic);\n         let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n         fulfill_cx.register_builtin_bound(&infcx, ty, ty::BoundSync, cause);"}, {"sha": "7d4553c8b146a3327d95cf31f5170e51a345add4", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=0f13a3f361384c278041c95e9a2ba9975e6cde71", "patch": "@@ -1031,7 +1031,7 @@ fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n                                               substs: trait_substs });\n \n     tcx.populate_implementations_for_trait_if_necessary(trait_ref.def_id());\n-    let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None);\n+    let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, false);\n \n     let mut selcx = traits::SelectionContext::new(&infcx, &infcx.parameter_environment);\n     let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),"}, {"sha": "04c29aaeb5a6fdd3a42b3b6e6fcdc01feac61daa", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=0f13a3f361384c278041c95e9a2ba9975e6cde71", "patch": "@@ -1019,7 +1019,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         raw_ty.adjust(self.tcx,\n                       expr.span,\n                       expr.id,\n-                      raw_ty,\n                       adjustment,\n                       |method_call| self.tables\n                                         .borrow()"}, {"sha": "a769ef8233e6828b0579d99cca8e17d20cb179ff", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=0f13a3f361384c278041c95e9a2ba9975e6cde71", "patch": "@@ -85,7 +85,7 @@ pub struct FulfillmentContext<'tcx> {\n     // particular node-id).\n     region_obligations: NodeMap<Vec<RegionObligation<'tcx>>>,\n \n-    errors_will_be_reported: bool,\n+    pub errors_will_be_reported: bool,\n }\n \n #[derive(Clone)]"}, {"sha": "c398a24f4f67c6659cd12834f75961f014c4569f", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=0f13a3f361384c278041c95e9a2ba9975e6cde71", "patch": "@@ -322,7 +322,7 @@ pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n            ty,\n            bound);\n \n-    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n+    let mut fulfill_cx = FulfillmentContext::new(false);\n \n     // We can use a dummy node-id here because we won't pay any mind\n     // to region obligations that arise (there shouldn't really be any\n@@ -438,7 +438,17 @@ pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     debug!(\"normalize_param_env(value={:?})\", value);\n \n     let mut selcx = &mut SelectionContext::new(infcx, closure_typer);\n-    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n+    // FIXME (@jroesch): I'm not sure if this is a bug or not, needs\n+    // further investigation. It appears that by reusing the fulfillment_cx\n+    // here we incur more obligations and later trip an asssertion on\n+    // regionck.rs line 337. The two possibilities I see is that\n+    // normalization is not actually fully happening and we\n+    // have a bug else where or that we are adding a duplicate\n+    // bound into the list causing its size to change. I think\n+    // we should probably land this refactor and then come\n+    // back to this is a follow-up patch.\n+    let mut fulfill_cx = FulfillmentContext::new(false);\n+    // let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n \n     let Normalized { value: normalized_value, obligations } =\n         project::normalize(selcx, cause, value);"}, {"sha": "8e5b6f4d4507f413de49d3d01990fbd6c32111ab", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0f13a3f361384c278041c95e9a2ba9975e6cde71", "patch": "@@ -4401,7 +4401,7 @@ impl<'tcx> TyS<'tcx> {\n                        -> bool\n     {\n         let tcx = param_env.tcx();\n-        let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env.clone()));\n+        let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env.clone()), false);\n \n         let is_impld = traits::type_known_to_meet_builtin_bound(&infcx, param_env,\n                                                                 self, bound, span);"}, {"sha": "806bcb2306bd16b2dadddfc7741fb246d45c0623", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0f13a3f361384c278041c95e9a2ba9975e6cde71", "patch": "@@ -295,8 +295,7 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n            -> Inherited<'a, 'tcx> {\n \n         Inherited {\n-            // I'm probably screwed here ... more boolean prop ... \n-            infcx: infer::new_infer_ctxt(tcx, tables, Some(param_env), false),\n+            infcx: infer::new_infer_ctxt(tcx, tables, Some(param_env), true),\n             locals: RefCell::new(NodeMap()),\n             tables: tables,\n             fn_sig_map: RefCell::new(NodeMap()),\n@@ -316,7 +315,8 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n         let mut fulfillment_cx = self.infcx.fulfillment_cx.borrow_mut();\n         assoc::normalize_associated_types_in(&self.infcx,\n                                              typer,\n-                                             &mut *fulfillment_cx, span,\n+                                             &mut fulfillment_cx,\n+                                             span,\n                                              body_id,\n                                              value)\n     }\n@@ -1560,7 +1560,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let raw_ty = self.infcx().shallow_resolve(raw_ty);\n         let resolve_ty = |ty: Ty<'tcx>| self.infcx().resolve_type_vars_if_possible(&ty);\n         raw_ty.adjust(self.tcx(), expr.span, expr.id, adjustment, |method_call| {\n-                                                   .method_map\n             self.inh.tables.borrow().method_map.get(&method_call)\n                                         .map(|method| resolve_ty(method.ty))\n         })"}, {"sha": "1219f2928c1c8d17704c8336ff989b2d3a8e739d", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f13a3f361384c278041c95e9a2ba9975e6cde71/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=0f13a3f361384c278041c95e9a2ba9975e6cde71", "patch": "@@ -531,7 +531,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                 }\n             };\n \n-            let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut(); \n+            let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n \n             // Register an obligation for `A: Trait<B>`.\n             let cause = traits::ObligationCause::misc(span, impl_did.node);\n@@ -633,7 +633,7 @@ pub fn check_coherence(crate_context: &CrateCtxt) {\n     CoherenceChecker {\n         crate_context: crate_context,\n         // XXXJAREDXXX: not sure if the bool is right here?\n-        inference_context: new_infer_ctxt(crate_context.tcx, &crate_context.tcx.tables, None, false),\n+        inference_context: new_infer_ctxt(crate_context.tcx, &crate_context.tcx.tables, None, true),\n         inherent_impls: RefCell::new(FnvHashMap()),\n     }.check(crate_context.tcx.map.krate());\n     unsafety::check(crate_context.tcx);"}]}