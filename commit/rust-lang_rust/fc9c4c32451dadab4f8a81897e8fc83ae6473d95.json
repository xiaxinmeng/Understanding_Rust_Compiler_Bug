{"sha": "fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOWM0YzMyNDUxZGFkYWI0ZjhhODE4OTdlOGZjODNhZTY0NzNkOTU=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-10T20:44:20Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-13T18:16:07Z"}, "message": "Front-end support for default impls in traits.", "tree": {"sha": "d54e7d2d8ecce561fb04375e31516ccaf1521aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d54e7d2d8ecce561fb04375e31516ccaf1521aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "html_url": "https://github.com/rust-lang/rust/commit/fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5563d732dfb4ebbf50ad221d8d4568319210a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5563d732dfb4ebbf50ad221d8d4568319210a65", "html_url": "https://github.com/rust-lang/rust/commit/d5563d732dfb4ebbf50ad221d8d4568319210a65"}], "stats": {"total": 320, "additions": 252, "deletions": 68}, "files": [{"sha": "f79f6cbcae2a0b82c62335700125039b795eceb6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -452,6 +452,15 @@ type ty_field = spanned<ty_field_>;\n type ty_method = {ident: ident, attrs: ~[attribute],\n                   decl: fn_decl, tps: ~[ty_param], span: span};\n \n+#[auto_serialize]\n+// A trait method is either required (meaning it doesn't have an\n+// implementation, just a signature) or provided (meaning it has a default\n+// implementation).\n+enum trait_method {\n+    required(ty_method),\n+    provided(@method),\n+}\n+\n #[auto_serialize]\n enum int_ty { ty_i, ty_char, ty_i8, ty_i16, ty_i32, ty_i64, }\n \n@@ -695,7 +704,7 @@ enum item_ {\n                /* dtor is optional */\n                option<class_dtor>\n                ),\n-    item_trait(~[ty_param], ~[ty_method]),\n+    item_trait(~[ty_param], ~[trait_method]),\n     item_impl(~[ty_param], option<@trait_ref> /* trait */,\n               @ty /* self */, ~[@method]),\n     item_mac(mac),"}, {"sha": "5675ecadf6285e6077ae2313cd6dac16b41661f4", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -511,6 +511,9 @@ fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n         visit_ty_method: fn@(_ty_m: ty_method) {\n         },\n \n+        visit_trait_method: fn@(_ty_m: trait_method) {\n+        },\n+\n         visit_class_item: fn@(c: @class_member) {\n             alt c.node {\n               instance_var(_, _, _, id,_) {"}, {"sha": "5a1eb7636ba36df85f0e20089fa41be8439e1bed", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -42,14 +42,14 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              mtc_rep, mtc_tok, mul, mutability, neg, noreturn, not, pat,\n              pat_box, pat_enum, pat_ident, pat_lit, pat_range, pat_rec,\n              pat_tup, pat_uniq, pat_wild, path, private, proto, proto_any,\n-             proto_bare, proto_block, proto_box, proto_uniq, public, pure_fn,\n-             purity, re_anon, re_named, region, rem, ret_style,\n-             return_val, shl, shr, stmt, stmt_decl,\n-             stmt_expr, stmt_semi, subtract, token_tree, trait_ref, tt_delim,\n-             tt_dotdotdot, tt_flat, tt_interpolate, ty, ty_, ty_bot, ty_box,\n-             ty_constr, ty_constr_, ty_constr_arg, ty_field, ty_fn, ty_infer,\n-             ty_mac, ty_method, ty_nil, ty_param, ty_path, ty_ptr, ty_rec,\n-             ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec, ty_vstore,\n+             proto_bare, proto_block, proto_box, proto_uniq, provided, public,\n+             pure_fn, purity, re_anon, re_named, region, rem, required,\n+             ret_style, return_val, shl, shr, stmt, stmt_decl, stmt_expr,\n+             stmt_semi, subtract, token_tree, trait_method, trait_ref,\n+             tt_delim, tt_dotdotdot, tt_flat, tt_interpolate, ty, ty_, ty_bot,\n+             ty_box, ty_constr, ty_constr_, ty_constr_arg, ty_field, ty_fn,\n+             ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_path, ty_ptr,\n+             ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec, ty_vstore,\n              unchecked_blk, uniq, unsafe_blk, unsafe_fn, variant, view_item,\n              view_item_, view_item_export, view_item_import, view_item_use,\n              view_path, view_path_glob, view_path_list, view_path_simple,\n@@ -275,7 +275,7 @@ class parser {\n              constraints: constrs};\n     }\n \n-    fn parse_ty_methods() -> ~[ty_method] {\n+    fn parse_trait_methods() -> ~[trait_method] {\n         do self.parse_unspanned_seq(token::LBRACE, token::RBRACE,\n                                     seq_sep_none()) |p| {\n             let attrs = p.parse_outer_attributes();\n@@ -284,12 +284,42 @@ class parser {\n             let ident = p.parse_method_name();\n             let tps = p.parse_ty_params();\n             let d = p.parse_ty_fn_decl(pur), fhi = p.last_span.hi;\n-            self.expect(token::SEMI);\n-            {ident: ident, attrs: attrs, decl: {purity: pur with d}, tps: tps,\n-             span: mk_sp(flo, fhi)}\n+            #debug[\"parse_trait_methods(): trait method ends in %s\",\n+                   token_to_str(self.reader, self.token)];\n+            alt self.token {\n+              token::SEMI {\n+                self.bump();\n+                required({ident: ident, attrs: attrs,\n+                          decl: {purity: pur with d}, tps: tps,\n+                          span: mk_sp(flo, fhi)})\n+              }\n+              token::LBRACE {\n+                self.bump();\n+                let (inner_attrs, body) =\n+                    self.parse_inner_attrs_and_block(true);\n+                let attrs = vec::append(attrs, inner_attrs);\n+                self.eat(token::RBRACE);\n+                provided(@{ident: ident,\n+                           attrs: attrs,\n+                           tps: tps,\n+                           decl: d,\n+                           body: body,\n+                           id: self.get_id(),\n+                           span: mk_sp(flo, fhi),\n+                           self_id: self.get_id(),\n+                           // Provided traits methods always public for now\n+                           vis: public})\n+              }\n+\n+              _ { self.fatal(\"expected ';' or '}` \\\n+                              but found `\"\n+                             + token_to_str(self.reader, self.token) + \"`\");\n+                }\n+            }\n         }\n     }\n \n+\n     fn parse_mt() -> mt {\n         let mutbl = self.parse_mutability();\n         let t = self.parse_ty(false);\n@@ -2127,7 +2157,7 @@ class parser {\n         let ident = self.parse_ident();\n         self.parse_region_param();\n         let tps = self.parse_ty_params();\n-        let meths = self.parse_ty_methods();\n+        let meths = self.parse_trait_methods();\n         (ident, item_trait(tps, meths), none)\n     }\n "}, {"sha": "c802e40dd05379b5cda742dfd9f55808d33782b5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -5,6 +5,7 @@ import pp::{break_offset, word, printer,\n             space, zerobreak, hardbreak, breaks, consistent,\n             inconsistent, eof};\n import diagnostic;\n+import ast::{required, provided};\n import ast_util::operator_prec;\n import dvec::{dvec, extensions};\n import parse::classify::*;\n@@ -593,7 +594,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n         print_type_params(s, tps);\n         word(s.s, \" \");\n         bopen(s);\n-        for methods.each |meth| { print_ty_method(s, meth); }\n+        for methods.each |meth| { print_trait_method(s, meth); }\n         bclose(s, item.span);\n       }\n       ast::item_mac({node: ast::mac_invoc_tt(pth, tts), _}) {\n@@ -647,6 +648,13 @@ fn print_ty_method(s: ps, m: ast::ty_method) {\n     word(s.s, \";\");\n }\n \n+fn print_trait_method(s: ps, m: ast::trait_method) {\n+    alt m {\n+      required(ty_m) { print_ty_method(s, ty_m) }\n+      provided(m)    { print_method(s, m) }\n+    }\n+}\n+\n fn print_method(s: ps, meth: @ast::method) {\n     hardbreak_if_not_bol(s);\n     maybe_print_comment(s, meth.span.lo);"}, {"sha": "be9f76650daa2001eb634d1677723cb61ffd29ee", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -62,6 +62,7 @@ type visitor<E> =\n       visit_constr: fn@(@path, span, node_id, E, vt<E>),\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id, E, vt<E>),\n       visit_ty_method: fn@(ty_method, E, vt<E>),\n+      visit_trait_method: fn@(trait_method, E, vt<E>),\n       visit_class_item: fn@(@class_member, E, vt<E>)};\n \n fn default_visitor<E>() -> visitor<E> {\n@@ -81,6 +82,7 @@ fn default_visitor<E>() -> visitor<E> {\n           visit_constr: |a,b,c,d,e|visit_constr::<E>(a, b, c, d, e),\n           visit_fn: |a,b,c,d,e,f,g|visit_fn::<E>(a, b, c, d, e, f, g),\n           visit_ty_method: |a,b,c|visit_ty_method::<E>(a, b, c),\n+          visit_trait_method: |a,b,c|visit_trait_method::<E>(a, b, c),\n           visit_class_item: |a,b,c|visit_class_item::<E>(a, b, c)};\n }\n \n@@ -160,7 +162,7 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n       item_trait(tps, methods) {\n         v.visit_ty_params(tps, e, v);\n         for methods.each |m| {\n-            v.visit_ty_method(m, e, v);\n+            v.visit_trait_method(m, e, v);\n         }\n       }\n       item_mac(m) { visit_mac(m, e, v) }\n@@ -317,6 +319,17 @@ fn visit_ty_method<E>(m: ty_method, e: E, v: vt<E>) {\n     v.visit_ty(m.decl.output, e, v);\n }\n \n+fn visit_trait_method<E>(m: trait_method, e: E, v: vt<E>) {\n+    alt m {\n+      required(ty_m) {\n+        v.visit_ty_method(ty_m, e, v)\n+      }\n+      provided(m) {\n+        visit_method_helper(m, e, v)\n+      }\n+    }\n+}\n+\n fn visit_block<E>(b: ast::blk, e: E, v: vt<E>) {\n     for b.node.view_items.each |vi| { v.visit_view_item(vi, e, v); }\n     for b.node.stmts.each |s| { v.visit_stmt(s, e, v); }\n@@ -465,6 +478,7 @@ type simple_visitor =\n       visit_constr: fn@(@path, span, node_id),\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id),\n       visit_ty_method: fn@(ty_method),\n+      visit_trait_method: fn@(trait_method),\n       visit_class_item: fn@(@class_member)};\n \n fn simple_ignore_ty(_t: @ty) {}\n@@ -487,6 +501,7 @@ fn default_simple_visitor() -> simple_visitor {\n           visit_fn: fn@(_fk: fn_kind, _d: fn_decl, _b: blk, _sp: span,\n                         _id: node_id) { },\n           visit_ty_method: fn@(_m: ty_method) { },\n+          visit_trait_method: fn@(_m: trait_method) { },\n           visit_class_item: fn@(_c: @class_member) {}\n          };\n }\n@@ -546,6 +561,11 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(ty);\n         visit_ty_method(ty, e, v);\n     }\n+    fn v_trait_method(f: fn@(trait_method), m: trait_method, &&e: (),\n+                      v: vt<()>) {\n+        f(m);\n+        visit_trait_method(m, e, v);\n+    }\n     fn v_ty_params(f: fn@(~[ty_param]),\n                    ps: ~[ty_param],\n                    &&e: (), v: vt<()>) {\n@@ -596,6 +616,8 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n                     v_fn(v.visit_fn, a, b, c, d, e, f, g),\n                 visit_ty_method: |a,b,c|\n                     v_ty_method(v.visit_ty_method, a, b, c),\n+                visit_trait_method: |a,b,c|\n+                    v_trait_method(v.visit_trait_method, a, b, c),\n                 visit_class_item: |a,b,c|\n                     v_class_item(v.visit_class_item, a, b, c)\n                });"}, {"sha": "74fd9e1c17ead18cce3164f217dc53251a6ae269", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -744,12 +744,21 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_name(ebml_w, item.ident);\n         let mut i = 0u;\n         for vec::each(*ty::trait_methods(tcx, local_def(item.id))) |mty| {\n-            ebml_w.start_tag(tag_item_trait_method);\n-            encode_name(ebml_w, mty.ident);\n-            encode_type_param_bounds(ebml_w, ecx, ms[i].tps);\n-            encode_type(ecx, ebml_w, ty::mk_fn(tcx, mty.fty));\n-            encode_family(ebml_w, purity_fn_family(mty.purity));\n-            ebml_w.end_tag();\n+            alt ms[i] {\n+              required(ty_m) {\n+                ebml_w.start_tag(tag_item_trait_method);\n+                encode_name(ebml_w, mty.ident);\n+                encode_type_param_bounds(ebml_w, ecx, ty_m.tps);\n+                encode_type(ecx, ebml_w, ty::mk_fn(tcx, mty.fty));\n+                encode_family(ebml_w, purity_fn_family(mty.purity));\n+                ebml_w.end_tag();\n+              }\n+              provided(m) {\n+                encode_info_for_method(ecx, ebml_w, path,\n+                                       should_inline(m.attrs), item.id,\n+                                       m, m.tps);\n+              }\n+            }\n             i += 1u;\n         }\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));"}, {"sha": "8efdfac95ea33a997b33c236ef2d015b548b88a9", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -1,6 +1,7 @@\n import syntax::{ast, ast_util, codemap, ast_map};\n import syntax::ast::*;\n import ast::{ident, fn_ident, def, def_id, node_id};\n+import ast::{required, provided};\n import syntax::ast_util::{local_def, def_id_of_def, new_def_hash,\n                           class_item_ident, path_to_ident};\n import pat_util::*;\n@@ -566,12 +567,8 @@ fn visit_item_with_scope(e: @env, i: @ast::item,\n       }\n       ast::item_trait(tps, methods) {\n         v.visit_ty_params(tps, sc, v);\n-        let isc = @cons(scope_method(i.id, tps), sc);\n         for methods.each |m| {\n-            v.visit_ty_params(m.tps, isc, v);\n-            let msc = @cons(scope_method(i.id, vec::append(tps, m.tps)), sc);\n-            for m.decl.inputs.each |a| { v.visit_ty(a.ty, msc, v); }\n-            v.visit_ty(m.decl.output, msc, v);\n+            visit_trait_method(m, i, tps, sc, v);\n         }\n       }\n       ast::item_class(tps, traits, members, ctor, m_dtor) {\n@@ -618,6 +615,27 @@ fn visit_item_with_scope(e: @env, i: @ast::item,\n     e.resolve_unexported = old_resolve_unexported;\n }\n \n+fn visit_trait_method(m: trait_method, i: @ast::item,\n+                      tps: ~[ast::ty_param], sc: scopes,\n+                      v: vt<scopes>) {\n+    alt m {\n+      required(ty_m) {\n+        let isc = @cons(scope_method(i.id, tps), sc);\n+        v.visit_ty_params(ty_m.tps, isc, v);\n+        let msc = @cons(scope_method(i.id, vec::append(tps, ty_m.tps)), sc);\n+        for ty_m.decl.inputs.each |a| { v.visit_ty(a.ty, msc, v); }\n+        v.visit_ty(ty_m.decl.output, msc, v);\n+      }\n+      provided(m) {\n+         v.visit_ty_params(m.tps, sc, v);\n+        let msc = @cons(scope_method(m.self_id, vec::append(tps, m.tps)),\n+                        sc);\n+        v.visit_fn(visit::fk_method(m.ident, ~[], m),\n+                   m.decl, m.body, m.span, m.id, msc, v);\n+      }\n+    }\n+}\n+\n fn visit_foreign_item_with_scope(ni: @ast::foreign_item, &&sc: scopes,\n                                 v: vt<scopes>) {\n     visit::visit_foreign_item(ni, @cons(scope_foreign_item(ni), sc), v);\n@@ -1785,7 +1803,16 @@ fn check_item(e: @env, i: @ast::item, &&x: (), v: vt<()>) {\n                       \"type parameter\");\n       }\n       ast::item_trait(_, methods) {\n-        ensure_unique(*e, i.span, methods, |m| m.ident,\n+        ensure_unique(*e, i.span, methods, |m| {\n+            alt m {\n+              required(ty_m) {\n+                ty_m.ident\n+              }\n+              provided(m) {\n+                m.ident\n+              }\n+            }\n+        },\n                       \"method\");\n       }\n       ast::item_impl(_, _, _, methods) {"}, {"sha": "138f021982a7e936ba2eecfec55576933e2fa198", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 47, "deletions": 22, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -26,6 +26,7 @@ import syntax::ast::{ty_param, ty_path, ty_str, ty_u, ty_u16, ty_u32, ty_u64};\n import syntax::ast::{ty_u8, ty_uint, variant, view_item, view_item_export};\n import syntax::ast::{view_item_import, view_item_use, view_path_glob};\n import syntax::ast::{view_path_list, view_path_simple};\n+import syntax::ast::{required, provided};\n import syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n import syntax::ast_util::{walk_pat};\n import syntax::attr::{attr_metas, contains_name};\n@@ -2928,21 +2929,33 @@ class Resolver {\n                         //\n                         // XXX: Do we need a node ID here?\n \n-                        do self.with_type_parameter_rib\n-                                (HasTypeParameters(&method.tps,\n+                        alt method {\n+                          required(ty_m) {\n+                            do self.with_type_parameter_rib\n+                                (HasTypeParameters(&ty_m.tps,\n                                                    item.id,\n                                                    type_parameters.len(),\n                                                    NormalRibKind))\n-                                || {\n+                            || {\n \n-                            // Resolve the method-specific type parameters.\n-                            self.resolve_type_parameters(method.tps, visitor);\n+                                // Resolve the method-specific type\n+                                // parameters.\n+                                self.resolve_type_parameters(ty_m.tps,\n+                                                             visitor);\n \n-                            for method.decl.inputs.each |argument| {\n-                                self.resolve_type(argument.ty, visitor);\n-                            }\n+                                for ty_m.decl.inputs.each |argument| {\n+                                    self.resolve_type(argument.ty, visitor);\n+                                }\n \n-                            self.resolve_type(method.decl.output, visitor);\n+                                self.resolve_type(ty_m.decl.output, visitor);\n+                            }\n+                          }\n+                          provided(m) {\n+                              self.resolve_method(NormalRibKind,\n+                                                  m,\n+                                                  type_parameters.len(),\n+                                                  visitor)\n+                          }\n                         }\n                     }\n                 }\n@@ -3242,19 +3255,10 @@ class Resolver {\n             for class_members.each |class_member| {\n                 alt class_member.node {\n                     class_method(method) {\n-                        let borrowed_method_type_parameters = &method.tps;\n-                        let type_parameters =\n-                            HasTypeParameters(borrowed_method_type_parameters,\n-                                              method.id,\n-                                              outer_type_parameter_count,\n-                                              NormalRibKind);\n-                        self.resolve_function(NormalRibKind,\n-                                              some(@method.decl),\n-                                              type_parameters,\n-                                              method.body,\n-                                              HasSelfBinding(method.self_id),\n-                                              NoCaptureClause,\n-                                              visitor);\n+                      self.resolve_method(NormalRibKind,\n+                                          method,\n+                                          outer_type_parameter_count,\n+                                          visitor);\n                     }\n                     instance_var(_, field_type, _, _, _) {\n                         self.resolve_type(field_type, visitor);\n@@ -3291,6 +3295,27 @@ class Resolver {\n         }\n     }\n \n+    // Does this really need to take a RibKind or is it always going\n+    // to be NormalRibKind?\n+    fn resolve_method(rib_kind: RibKind,\n+                      method: @method,\n+                      outer_type_parameter_count: uint,\n+                      visitor: ResolveVisitor) {\n+        let borrowed_method_type_parameters = &method.tps;\n+        let type_parameters =\n+            HasTypeParameters(borrowed_method_type_parameters,\n+                              method.id,\n+                              outer_type_parameter_count,\n+                              rib_kind);\n+        self.resolve_function(rib_kind,\n+                              some(@method.decl),\n+                              type_parameters,\n+                              method.body,\n+                              HasSelfBinding(method.self_id),\n+                              NoCaptureClause,\n+                              visitor);\n+    }\n+\n     fn resolve_implementation(id: node_id,\n                               span: span,\n                               type_parameters: ~[ty_param],"}, {"sha": "d8db0533156e2827d869ccb9c96d7a0e2a3f6a03", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -41,6 +41,7 @@ independently:\n import result::{result, extensions};\n import syntax::{ast, ast_util, ast_map};\n import ast::spanned;\n+import ast::{required, provided};\n import syntax::ast_map::node_id_to_str;\n import syntax::ast_util::{local_def, respan, split_class_items};\n import syntax::visit;"}, {"sha": "30c5c04dc0452be291bd1193c7112ab9381154af", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -147,8 +147,15 @@ fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id) {\n     let rp = tcx.region_paramd_items.contains_key(id);\n     alt check tcx.items.get(id) {\n       ast_map::node_item(@{node: ast::item_trait(_, ms), _}, _) {\n-        store_methods::<ast::ty_method>(ccx, id, ms, |m| {\n-            ty_of_ty_method(ccx, m, rp)\n+        store_methods::<ast::trait_method>(ccx, id, ms, |m| {\n+            alt m {\n+              required(ty_m) {\n+                ty_of_ty_method(ccx, ty_m, rp)\n+              }\n+              provided(m) {\n+                ty_of_method(ccx, m, rp)\n+              }\n+            }\n         });\n       }\n       ast_map::node_item(@{node: ast::item_class(_,_,its,_,_), _}, _) {"}, {"sha": "0d950b33fe7fa62f1db771a73852228ba2a64418", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -207,7 +207,14 @@ fn merge_method_attrs(\n             node: ast::item_trait(_, methods), _\n           }, _) {\n             par::seqmap(methods, |method| {\n-                (*method.ident, attr_parser::parse_desc(method.attrs))\n+                alt method {\n+                  ast::required(ty_m) {\n+                    (*ty_m.ident, attr_parser::parse_desc(ty_m.attrs))\n+                  }\n+                  ast::provided(m) {\n+                    (*m.ident, attr_parser::parse_desc(m.attrs))\n+                  }\n+                }\n             })\n           }\n           ast_map::node_item(@{"}, {"sha": "9db3f9a607e58d17fb0933380c81b044a7d7e700", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -11,6 +11,11 @@ enum page {\n     itempage(itemtag)\n }\n \n+enum implementation {\n+    required,\n+    provided,\n+}\n+\n /**\n  * Most rustdocs can be parsed into 'sections' according to their markdown\n  * headers\n@@ -91,7 +96,8 @@ type methoddoc = {\n     brief: option<str>,\n     desc: option<str>,\n     sections: ~[section],\n-    sig: option<str>\n+    sig: option<str>,\n+    implementation: implementation,\n };\n \n type impldoc = {"}, {"sha": "72b7150a72efa031d94abaf8cd341a8c69123663", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -185,17 +185,32 @@ fn should_extract_enum_variants() {\n \n fn traitdoc_from_trait(\n     itemdoc: doc::itemdoc,\n-    methods: ~[ast::ty_method]\n+    methods: ~[ast::trait_method]\n ) -> doc::traitdoc {\n     {\n         item: itemdoc,\n         methods: do par::seqmap(methods) |method| {\n-            {\n-                name: *method.ident,\n-                brief: none,\n-                desc: none,\n-                sections: ~[],\n-                sig: none\n+            alt method {\n+              ast::required(ty_m) {\n+                {\n+                    name: *ty_m.ident,\n+                    brief: none,\n+                    desc: none,\n+                    sections: ~[],\n+                    sig: none,\n+                    implementation: doc::required,\n+                }\n+              }\n+              ast::provided(m) {\n+                {\n+                    name: *m.ident,\n+                    brief: none,\n+                    desc: none,\n+                    sections: ~[],\n+                    sig: none,\n+                    implementation: doc::provided,\n+                }\n+              }\n             }\n         }\n     }\n@@ -227,7 +242,8 @@ fn impldoc_from_impl(\n                 brief: none,\n                 desc: none,\n                 sections: ~[],\n-                sig: none\n+                sig: none,\n+                implementation: doc::provided,\n             }\n         }\n     }"}, {"sha": "011420bdcf4b4536ce51ff966e1b1a7d60e158a7", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9c4c32451dadab4f8a81897e8fc83ae6473d95/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=fc9c4c32451dadab4f8a81897e8fc83ae6473d95", "patch": "@@ -171,14 +171,28 @@ fn get_method_sig(\n             node: ast::item_trait(_, methods), _\n           }, _) {\n             alt check vec::find(methods, |method| {\n-                *method.ident == method_name\n+                alt method {\n+                  ast::required(ty_m) { *ty_m.ident == method_name }\n+                  ast::provided(m) { *m.ident == method_name }\n+                }\n             }) {\n                 some(method) {\n-                    some(pprust::fun_to_str(\n-                        method.decl,\n-                        method.ident,\n-                        method.tps\n-                    ))\n+                  alt method {\n+                    ast::required(ty_m) {\n+                      some(pprust::fun_to_str(\n+                          ty_m.decl,\n+                          ty_m.ident,\n+                          ty_m.tps\n+                      ))\n+                    }\n+                    ast::provided(m) {\n+                      some(pprust::fun_to_str(\n+                          m.decl,\n+                          m.ident,\n+                          m.tps\n+                      ))\n+                    }\n+                  }\n                 }\n             }\n           }"}]}