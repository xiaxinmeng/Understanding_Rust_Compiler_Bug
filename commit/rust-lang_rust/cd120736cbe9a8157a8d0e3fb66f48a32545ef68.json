{"sha": "cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMTIwNzM2Y2JlOWE4MTU3YThkMGUzZmI2NmY0OGEzMjU0NWVmNjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-10T19:58:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-13T23:49:07Z"}, "message": "librustc: Allow moves out of `self`. r=nmatsakis", "tree": {"sha": "b996632e467b591f6d2cdde343017dc25ab3efbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b996632e467b591f6d2cdde343017dc25ab3efbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "html_url": "https://github.com/rust-lang/rust/commit/cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45848b20402cb3ad07dd0b0442155ca9c6b14f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/45848b20402cb3ad07dd0b0442155ca9c6b14f01", "html_url": "https://github.com/rust-lang/rust/commit/45848b20402cb3ad07dd0b0442155ca9c6b14f01"}], "stats": {"total": 208, "additions": 155, "deletions": 53}, "files": [{"sha": "8acba42f9a8e88753af4cbe3deb5ae43cd87455d", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -346,7 +346,8 @@ impl ast::def: tr {\n                                    did2_opt.map(|did2| did2.tr(xcx)),\n                                    p)\n           }\n-          ast::def_self(nid) => { ast::def_self(xcx.tr_id(nid)) }\n+          ast::def_self_ty(nid) => { ast::def_self_ty(xcx.tr_id(nid)) }\n+          ast::def_self(nid, i) => { ast::def_self(xcx.tr_id(nid), i) }\n           ast::def_mod(did) => { ast::def_mod(did.tr(xcx)) }\n           ast::def_foreign_mod(did) => { ast::def_foreign_mod(did.tr(xcx)) }\n           ast::def_const(did) => { ast::def_const(did.tr(xcx)) }"}, {"sha": "858cfb06d5120b33516e8e8bd7dbac7b9fd9b900", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -471,6 +471,9 @@ impl check_loan_ctxt {\n           // rvalues, I guess.\n           cat_special(sk_static_item) => {}\n \n+          // We allow moving out of explicit self only.\n+          cat_special(sk_self) => {}\n+\n           cat_deref(_, _, unsafe_ptr) => {}\n \n           // Nothing else."}, {"sha": "b1a34bbe2569b9e7f610236c58ec2a39f158d165", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -74,7 +74,9 @@ priv impl &preserve_ctxt {\n         let _i = indenter();\n \n         match cmt.cat {\n-          cat_special(sk_self) | cat_special(sk_heap_upvar) => {\n+          cat_special(sk_self) |\n+          cat_special(sk_implicit_self) |\n+          cat_special(sk_heap_upvar) => {\n             self.compare_scope(cmt, ty::re_scope(self.item_ub))\n           }\n           cat_special(sk_static_item) | cat_special(sk_method) => {"}, {"sha": "c481ef81477bb700c9145dc3e6a2e88b779fec60", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -110,8 +110,10 @@ use core::io::WriterUtil;\n use std::map::HashMap;\n use syntax::ast::*;\n use syntax::codemap::span;\n+use syntax::parse::token::special_idents;\n use syntax::print::pprust::{expr_to_str, block_to_str};\n-use syntax::visit::vt;\n+use syntax::visit::{fk_anon, fk_dtor, fk_fn_block, fk_item_fn, fk_method};\n+use syntax::visit::{vt};\n use syntax::{visit, ast_util};\n \n export check_crate;\n@@ -265,15 +267,15 @@ struct LocalInfo {\n enum VarKind {\n     Arg(node_id, ident, rmode),\n     Local(LocalInfo),\n-    Self,\n     ImplicitRet\n }\n \n fn relevant_def(def: def) -> Option<node_id> {\n     match def {\n       def_binding(nid, _) |\n       def_arg(nid, _) |\n-      def_local(nid, _) => Some(nid),\n+      def_local(nid, _) |\n+      def_self(nid, _) => Some(nid),\n \n       _ => None\n     }\n@@ -338,8 +340,7 @@ impl IrMaps {\n             Arg(node_id, _, _) => {\n                 self.variable_map.insert(node_id, v);\n             }\n-            Self | ImplicitRet => {\n-            }\n+            ImplicitRet => {}\n         }\n \n         debug!(\"%s is %?\", v.to_str(), vk);\n@@ -361,7 +362,6 @@ impl IrMaps {\n         match copy self.var_kinds[*var] {\n             Local(LocalInfo {ident: nm, _}) |\n             Arg(_, nm, _) => self.tcx.sess.str_of(nm),\n-            Self => ~\"self\",\n             ImplicitRet => ~\"<implicit-ret>\"\n         }\n     }\n@@ -404,7 +404,7 @@ impl IrMaps {\n             (*v).push(id);\n           }\n           Arg(_, _, by_ref) |\n-          Arg(_, _, by_val) | Self | ImplicitRet => {\n+          Arg(_, _, by_val) | ImplicitRet => {\n             debug!(\"--but it is not owned\");\n           }\n         }\n@@ -432,6 +432,31 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n         }\n     };\n \n+    // Add `self`, whether explicit or implicit.\n+    match fk {\n+        fk_method(_, _, method) => {\n+            match method.self_ty.node {\n+                sty_by_ref => {\n+                    fn_maps.add_variable(Arg(method.self_id,\n+                                             special_idents::self_,\n+                                             by_ref));\n+                }\n+                sty_value | sty_region(_) | sty_box(_) | sty_uniq(_) => {\n+                    fn_maps.add_variable(Arg(method.self_id,\n+                                             special_idents::self_,\n+                                             by_copy));\n+                }\n+                sty_static => {}\n+            }\n+        }\n+        fk_dtor(_, _, self_id, _) => {\n+            fn_maps.add_variable(Arg(self_id,\n+                                     special_idents::self_,\n+                                     by_copy));\n+        }\n+        fk_item_fn(*) | fk_anon(*) | fk_fn_block(*) => {}\n+    }\n+\n     // gather up the various local variables, significant expressions,\n     // and so forth:\n     visit::visit_fn(fk, decl, body, sp, id, fn_maps, v);\n@@ -1790,13 +1815,6 @@ impl @Liveness {\n                           copy or move mode\", self.tcx.sess.str_of(name)));\n                 return;\n               }\n-              Self => {\n-                self.tcx.sess.span_err(\n-                    move_span,\n-                    ~\"illegal move from self (cannot move out of a field of \\\n-                       self)\");\n-                return;\n-              }\n               Local(*) | ImplicitRet => {\n                 self.tcx.sess.span_bug(\n                     move_span,"}, {"sha": "8fc8104c98f33a2885cb50dacbadbec8f232f76a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -224,6 +224,7 @@ enum special_kind {\n     sk_method,\n     sk_static_item,\n     sk_self,\n+    sk_implicit_self,   // old by-reference `self`\n     sk_heap_upvar\n }\n \n@@ -566,7 +567,7 @@ impl &mem_categorization_ctxt {\n           ast::def_ty(_) | ast::def_prim_ty(_) |\n           ast::def_ty_param(*) | ast::def_struct(*) |\n           ast::def_typaram_binder(*) | ast::def_region(_) |\n-          ast::def_label(_) => {\n+          ast::def_label(_) | ast::def_self_ty(*) => {\n             @{id:id, span:span,\n               cat:cat_special(sk_static_item), lp:None,\n               mutbl:m_imm, ty:expr_ty}\n@@ -599,9 +600,15 @@ impl &mem_categorization_ctxt {\n               mutbl:m, ty:expr_ty}\n           }\n \n-          ast::def_self(_) => {\n+          ast::def_self(_, is_implicit) => {\n+            let special_kind = if is_implicit {\n+                sk_implicit_self\n+            } else {\n+                sk_self\n+            };\n+\n             @{id:id, span:span,\n-              cat:cat_special(sk_self), lp:None,\n+              cat:cat_special(special_kind), lp:None,\n               mutbl:m_imm, ty:expr_ty}\n           }\n \n@@ -975,6 +982,7 @@ impl &mem_categorization_ctxt {\n         match cat {\n           cat_special(sk_method) => ~\"method\",\n           cat_special(sk_static_item) => ~\"static_item\",\n+          cat_special(sk_implicit_self) => ~\"implicit-self\",\n           cat_special(sk_self) => ~\"self\",\n           cat_special(sk_heap_upvar) => ~\"heap-upvar\",\n           cat_stack_upvar(_) => ~\"stack-upvar\",\n@@ -1053,7 +1061,8 @@ impl &mem_categorization_ctxt {\n         match cmt.cat {\n           cat_special(sk_method) => ~\"method\",\n           cat_special(sk_static_item) => ~\"static item\",\n-          cat_special(sk_self) => ~\"self reference\",\n+          cat_special(sk_implicit_self) => ~\"self reference\",\n+          cat_special(sk_self) => ~\"self value\",\n           cat_special(sk_heap_upvar) => {\n               ~\"captured outer variable in a heap closure\"\n           }"}, {"sha": "93fe8817120cdd1ef0e317d7f4c3b8fe7192b10e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -16,14 +16,13 @@ use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n use middle::lang_items::LanguageItems;\n use middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n use middle::pat_util::{pat_bindings};\n-use syntax::ast::{_mod, add, arm};\n-use syntax::ast::{bitand, bitor, bitxor};\n-use syntax::ast::{binding_mode, blk, capture_clause, struct_dtor};\n-use syntax::ast::{crate, crate_num, decl_item};\n-use syntax::ast::{def, def_arg, def_binding, def_struct, def_const, def_fn};\n-use syntax::ast::{def_foreign_mod, def_id, def_label, def_local, def_mod};\n-use syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n-use syntax::ast::{def_typaram_binder, def_static_method};\n+use syntax::ast::{_mod, add, arm, binding_mode, bitand, bitor, bitxor, blk};\n+use syntax::ast::{capture_clause};\n+use syntax::ast::{crate, crate_num, decl_item, def, def_arg, def_binding};\n+use syntax::ast::{def_const, def_foreign_mod, def_fn, def_id, def_label};\n+use syntax::ast::{def_local, def_mod, def_prim_ty, def_region, def_self};\n+use syntax::ast::{def_self_ty, def_static_method, def_struct, def_ty};\n+use syntax::ast::{def_ty_param, def_typaram_binder};\n use syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n use syntax::ast::{expr_binary, expr_break, expr_cast, expr_field, expr_fn};\n use syntax::ast::{expr_fn_block, expr_index, expr_method_call, expr_path};\n@@ -40,13 +39,13 @@ use syntax::ast::{local, local_crate, lt, method, mode, module_ns, mul, ne};\n use syntax::ast::{neg, node_id, pat, pat_enum, pat_ident, path, prim_ty};\n use syntax::ast::{pat_box, pat_lit, pat_range, pat_rec, pat_struct};\n use syntax::ast::{pat_tup, pat_uniq, pat_wild, private, provided, public};\n-use syntax::ast::{required, rem, self_ty_, shl, shr, stmt_decl};\n-use syntax::ast::{struct_field, struct_variant_kind, sty_static, subtract};\n-use syntax::ast::{trait_ref, tuple_variant_kind, Ty, ty_bool, ty_char};\n-use syntax::ast::{ty_f, ty_f32, ty_f64, ty_float, ty_i, ty_i16, ty_i32};\n-use syntax::ast::{ty_i64, ty_i8, ty_int, ty_param, ty_path, ty_str, ty_u};\n-use syntax::ast::{ty_u16, ty_u32, ty_u64, ty_u8, ty_uint, type_value_ns};\n-use syntax::ast::{ty_param_bound, unnamed_field};\n+use syntax::ast::{required, rem, self_ty_, shl, shr, stmt_decl, struct_dtor};\n+use syntax::ast::{struct_field, struct_variant_kind, sty_by_ref, sty_static};\n+use syntax::ast::{subtract, trait_ref, tuple_variant_kind, Ty, ty_bool};\n+use syntax::ast::{ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i, ty_i16};\n+use syntax::ast::{ty_i32, ty_i64, ty_i8, ty_int, ty_param, ty_path, ty_str};\n+use syntax::ast::{ty_u, ty_u16, ty_u32, ty_u64, ty_u8, ty_uint};\n+use syntax::ast::{type_value_ns, ty_param_bound, unnamed_field};\n use syntax::ast::{variant, view_item, view_item_export, view_item_import};\n use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n use syntax::ast::{view_path_simple, visibility, anonymous, named};\n@@ -197,7 +196,7 @@ impl Mutability : cmp::Eq {\n \n enum SelfBinding {\n     NoSelfBinding,\n-    HasSelfBinding(node_id)\n+    HasSelfBinding(node_id, bool /* is implicit */)\n }\n \n enum CaptureClause {\n@@ -1753,7 +1752,7 @@ impl Resolver {\n           def_self(*) | def_arg(*) | def_local(*) |\n           def_prim_ty(*) | def_ty_param(*) | def_binding(*) |\n           def_use(*) | def_upvar(*) | def_region(*) |\n-          def_typaram_binder(*) | def_label(*) => {\n+          def_typaram_binder(*) | def_label(*) | def_self_ty(*) => {\n             fail fmt!(\"didn't expect `%?`\", def);\n           }\n         }\n@@ -3724,7 +3723,7 @@ impl Resolver {\n                 let self_type_rib = @Rib(NormalRibKind);\n                 (*self.type_ribs).push(self_type_rib);\n                 self_type_rib.bindings.insert(self.self_ident,\n-                                              dl_def(def_self(item.id)));\n+                                              dl_def(def_self_ty(item.id)));\n \n                 // Create a new rib for the trait-wide type parameters.\n                 do self.with_type_parameter_rib\n@@ -3985,8 +3984,9 @@ impl Resolver {\n                 NoSelfBinding => {\n                     // Nothing to do.\n                 }\n-                HasSelfBinding(self_node_id) => {\n-                    let def_like = dl_def(def_self(self_node_id));\n+                HasSelfBinding(self_node_id, is_implicit) => {\n+                    let def_like = dl_def(def_self(self_node_id,\n+                                                   is_implicit));\n                     (*function_value_rib).bindings.insert(self.self_ident,\n                                                           def_like);\n                 }\n@@ -4065,7 +4065,8 @@ impl Resolver {\n                                           NoTypeParameters,\n                                           (*destructor).node.body,\n                                           HasSelfBinding\n-                                            ((*destructor).node.self_id),\n+                                            ((*destructor).node.self_id,\n+                                             true),\n                                           NoCaptureClause,\n                                           visitor);\n                 }\n@@ -4088,7 +4089,8 @@ impl Resolver {\n         // we only have self ty if it is a non static method\n         let self_binding = match method.self_ty.node {\n           sty_static => { NoSelfBinding }\n-          _ => { HasSelfBinding(method.self_id) }\n+          sty_by_ref => { HasSelfBinding(method.self_id, true) }\n+          _ => { HasSelfBinding(method.self_id, false) }\n         };\n \n         self.resolve_function(rib_kind,"}, {"sha": "eb0d86b6d045ba7bbc1984db58fb6002c5a582f1", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -114,7 +114,8 @@ fn trans(bcx: block, expr: @ast::expr) -> Callee {\n             ast::def_mod(*) | ast::def_foreign_mod(*) |\n             ast::def_const(*) | ast::def_ty(*) | ast::def_prim_ty(*) |\n             ast::def_use(*) | ast::def_typaram_binder(*) |\n-            ast::def_region(*) | ast::def_label(*) | ast::def_ty_param(*) => {\n+            ast::def_region(*) | ast::def_label(*) | ast::def_ty_param(*) |\n+            ast::def_self_ty(*) => {\n                 bcx.tcx().sess.span_bug(\n                     ref_expr.span,\n                     fmt!(\"Cannot translate def %? \\"}, {"sha": "662469655332c66d6ec42e998467e959412954fe", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -828,7 +828,7 @@ fn trans_local_var(bcx: block,\n         ast::def_local(nid, _) | ast::def_binding(nid, _) => {\n             take_local(bcx, bcx.fcx.lllocals, nid, expr_id_opt)\n         }\n-        ast::def_self(nid) => {\n+        ast::def_self(nid, _) => {\n             let self_info: ValSelfData = match bcx.fcx.llself {\n                 Some(ref self_info) => *self_info,\n                 None => {"}, {"sha": "ab0fedb5e6bfb5e42843d441a424fd55845b0035", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -354,7 +354,7 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n             check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n             ty::mk_param(tcx, n, id)\n           }\n-          ast::def_self(_) => {\n+          ast::def_self_ty(_) => {\n             // n.b.: resolve guarantees that the self type only appears in a\n             // trait, which we rely upon in various places when creating\n             // substs"}, {"sha": "8af091fdb9ad06b7edb3c4f74c8170efb25e6277", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -2721,7 +2721,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n \n     match defn {\n       ast::def_arg(nid, _) | ast::def_local(nid, _) |\n-      ast::def_self(nid) | ast::def_binding(nid, _) => {\n+      ast::def_self(nid, _) | ast::def_binding(nid, _) => {\n         assert (fcx.inh.locals.contains_key(nid));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));\n         return no_params(typ);\n@@ -2774,6 +2774,9 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_label(*) => {\n         fcx.ccx.tcx.sess.span_bug(sp, ~\"expected value but found label\");\n       }\n+      ast::def_self_ty(*) => {\n+        fcx.ccx.tcx.sess.span_bug(sp, ~\"expected value but found self ty\");\n+      }\n     }\n }\n "}, {"sha": "41918d42da423a48999f304766df21f17301aba0", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -46,7 +46,7 @@ type rvt = visit::vt<@rcx>;\n fn encl_region_of_def(fcx: @fn_ctxt, def: ast::def) -> ty::Region {\n     let tcx = fcx.tcx();\n     match def {\n-        def_local(node_id, _) | def_arg(node_id, _) | def_self(node_id) |\n+        def_local(node_id, _) | def_arg(node_id, _) | def_self(node_id, _) |\n         def_binding(node_id, _) =>\n             return encl_region(tcx, node_id),\n         def_upvar(_, subdef, closure_id, body_id) => {"}, {"sha": "444f90c7f0458d756122d9f8c722fb1fb24f006c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -118,7 +118,8 @@ enum def {\n     def_static_method(/* method */ def_id,\n                       /* trait */  Option<def_id>,\n                       purity),\n-    def_self(node_id),\n+    def_self(node_id, bool /* is_implicit */),\n+    def_self_ty(node_id),\n     def_mod(def_id),\n     def_foreign_mod(def_id),\n     def_const(def_id),\n@@ -156,9 +157,15 @@ impl def : cmp::Eq {\n                     _ => false\n                 }\n             }\n-            def_self(e0a) => {\n+            def_self(e0a, e1a) => {\n                 match (*other) {\n-                    def_self(e0b) => e0a == e0b,\n+                    def_self(e0b, e1b) => e0a == e0b && e1a == e1b,\n+                    _ => false\n+                }\n+            }\n+            def_self_ty(e0a) => {\n+                match (*other) {\n+                    def_self_ty(e0b) => e0a == e0b,\n                     _ => false\n                 }\n             }"}, {"sha": "ef7bd1d892859f940aac6b26edf6432ede4320cb", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -71,8 +71,8 @@ pure fn def_id_of_def(d: def) -> def_id {\n       def_use(id) | def_struct(id) => {\n         id\n       }\n-      def_arg(id, _) | def_local(id, _) | def_self(id) |\n-      def_upvar(id, _, _, _) | def_binding(id, _) | def_region(id)\n+      def_arg(id, _) | def_local(id, _) | def_self(id, _) | def_self_ty(id)\n+      | def_upvar(id, _, _, _) | def_binding(id, _) | def_region(id)\n       | def_typaram_binder(id) | def_label(id) => {\n         local_def(id)\n       }\n@@ -384,7 +384,7 @@ impl inlined_item: inlined_item_utils {\n  referring to a def_self */\n fn is_self(d: ast::def) -> bool {\n   match d {\n-    def_self(_)           => true,\n+    def_self(*)           => true,\n     def_upvar(_, d, _, _) => is_self(*d),\n     _                     => false\n   }"}, {"sha": "ee09075c11ee95519427faa7c602afbf6ab50f80", "filename": "src/test/compile-fail/use-after-move-self-based-on-type.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -0,0 +1,19 @@\n+struct S {\n+    x: int,\n+    drop {}\n+}\n+\n+impl S {\n+    fn foo(self) -> int {\n+        self.bar();\n+        return self.x;  //~ ERROR use of moved variable\n+    }\n+\n+    fn bar(self) {}\n+}\n+\n+fn main() {\n+    let x = S { x: 1 };\n+    io::println(x.foo().to_str());\n+}\n+"}, {"sha": "7bc1979fb8f4fb2a5dc4807c325857640be09fea", "filename": "src/test/compile-fail/use-after-move-self.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -0,0 +1,18 @@\n+struct S {\n+    x: int\n+}\n+\n+impl S {\n+    fn foo(self) -> int {\n+        (move self).bar();\n+        return self.x;  //~ ERROR use of moved variable\n+    }\n+\n+    fn bar(self) {}\n+}\n+\n+fn main() {\n+    let x = S { x: 1 };\n+    io::println(x.foo().to_str());\n+}\n+"}, {"sha": "5598839e31dc6a61af23985c5c126fcccad600e6", "filename": "src/test/run-pass/move-self.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Ftest%2Frun-pass%2Fmove-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd120736cbe9a8157a8d0e3fb66f48a32545ef68/src%2Ftest%2Frun-pass%2Fmove-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-self.rs?ref=cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "patch": "@@ -0,0 +1,19 @@\n+struct S {\n+    x: ~str\n+}\n+\n+impl S {\n+    fn foo(self) {\n+        (move self).bar();\n+    }\n+\n+    fn bar(self) {\n+        io::println(self.x);\n+    }\n+}\n+\n+fn main() {\n+    let x = S { x: ~\"Hello!\" };\n+    x.foo();\n+}\n+"}]}