{"sha": "34ad52e84f79b190a166f71227c312e15e1003a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YWQ1MmU4NGY3OWIxOTBhMTY2ZjcxMjI3YzMxMmUxNWUxMDAzYTM=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-07T18:27:50Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:14:34Z"}, "message": "`pat_constructor` does not need `pcx` anymore", "tree": {"sha": "d3039055dab7bd1bcf5b07bfc39bc06967a20ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3039055dab7bd1bcf5b07bfc39bc06967a20ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ad52e84f79b190a166f71227c312e15e1003a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ad52e84f79b190a166f71227c312e15e1003a3", "html_url": "https://github.com/rust-lang/rust/commit/34ad52e84f79b190a166f71227c312e15e1003a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ad52e84f79b190a166f71227c312e15e1003a3/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3531c52bfe4a1b7c2c284c03f8eefec146698687", "url": "https://api.github.com/repos/rust-lang/rust/commits/3531c52bfe4a1b7c2c284c03f8eefec146698687", "html_url": "https://github.com/rust-lang/rust/commit/3531c52bfe4a1b7c2c284c03f8eefec146698687"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "77635f6ccb9f423bdce7535831f2b6692c79d949", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34ad52e84f79b190a166f71227c312e15e1003a3/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ad52e84f79b190a166f71227c312e15e1003a3/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=34ad52e84f79b190a166f71227c312e15e1003a3", "patch": "@@ -1632,7 +1632,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n \n     debug!(\"is_useful_expand_first_col: pcx={:#?}, expanding {:#?}\", pcx, v.head());\n \n-    if let Some(constructor) = pat_constructor(cx, v.head(), pcx) {\n+    if let Some(constructor) = pat_constructor(cx, v.head()) {\n         debug!(\"is_useful - expanding constructor: {:#?}\", constructor);\n         split_grouped_constructors(\n             cx.tcx,\n@@ -1651,7 +1651,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n         debug!(\"is_useful - expanding wildcard\");\n \n         let used_ctors: Vec<Constructor<'_>> =\n-            matrix.heads().filter_map(|p| pat_constructor(cx, p, pcx)).collect();\n+            matrix.heads().filter_map(|p| pat_constructor(cx, p)).collect();\n         debug!(\"used_ctors = {:#?}\", used_ctors);\n         // `all_ctors` are all the constructors for the given type, which\n         // should all be represented (or caught with the wild pattern `_`).\n@@ -1756,10 +1756,9 @@ fn is_useful_specialized<'p, 'a, 'tcx>(\n fn pat_constructor<'tcx>(\n     cx: &mut MatchCheckCtxt<'_, 'tcx>,\n     pat: &Pat<'tcx>,\n-    pcx: PatCtxt<'tcx>,\n ) -> Option<Constructor<'tcx>> {\n     match *pat.kind {\n-        PatKind::AscribeUserType { ref subpattern, .. } => pat_constructor(cx, subpattern, pcx),\n+        PatKind::AscribeUserType { ref subpattern, .. } => pat_constructor(cx, subpattern),\n         PatKind::Binding { .. } | PatKind::Wild => None,\n         PatKind::Leaf { .. } | PatKind::Deref { .. } => Some(Single),\n         PatKind::Variant { adt_def, variant_index, .. } => {\n@@ -1773,9 +1772,9 @@ fn pat_constructor<'tcx>(\n             end,\n             pat.span,\n         )),\n-        PatKind::Array { .. } => match pcx.ty.kind {\n+        PatKind::Array { .. } => match pat.ty.kind {\n             ty::Array(_, length) => Some(FixedLenSlice(length.eval_usize(cx.tcx, cx.param_env))),\n-            _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pcx.ty),\n+            _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pat.ty),\n         },\n         PatKind::Slice { ref prefix, ref slice, ref suffix } => {\n             let prefix = prefix.len() as u64;"}]}