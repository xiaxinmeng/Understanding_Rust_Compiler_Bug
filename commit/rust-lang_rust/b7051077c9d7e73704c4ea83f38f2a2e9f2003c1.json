{"sha": "b7051077c9d7e73704c4ea83f38f2a2e9f2003c1", "node_id": "C_kwDOAAsO6NoAKGI3MDUxMDc3YzlkN2U3MzcwNGM0ZWE4M2YzOGYyYTJlOWYyMDAzYzE", "commit": {"author": {"name": "dAxpeDDa", "email": "daxpedda@gmail.com", "date": "2022-06-30T15:45:34Z"}, "committer": {"name": "dAxpeDDa", "email": "daxpedda@gmail.com", "date": "2022-06-30T15:45:34Z"}, "message": "Fix false-positive in `equatable_if_let`", "tree": {"sha": "e58910874c603f100242c0bfbf0a1cda908d7044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e58910874c603f100242c0bfbf0a1cda908d7044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3qx/rJh59vdc2+v9Q9YqPqOI5G8FAmK9xR4ACgkQQ9YqPqOI\n5G8SEA/8Dice/K5+CqGvEdQEMDwlJH5+iEjlMYtY1L31cbWR1Ki+aKl6l58W/DPJ\nbq3x9vjyRzb9GLEiOL3KCoxBO23bw3sKMLMXR+VdIm2RK9Turf+skZwb3mnbr7+t\ndYEY02l9tV1Lh62g2p0zJnMQDve4xfy8diEqgXTiROqoieBy6SOh8XLsxz4qUDv/\nYLulje4pjbF8RJVk2bYCyB5Di117Pv+ExZk73KDsmxGIWmZiQcXLu4dId0tkWHlc\nlknbJfQmpeGXFenpj1mP2YJhQNlK2V9BEYHUv7251u2A8p5Mvf3lGx/dBI08TP5E\nyT56n3HgxAfMNKdcwPZz3FuIvG7lI4/F0qjbJyHjYAhxF4GcH2Zf1Hg+7WbVULBB\nXmc71cNheTJLjt34+wVFxTNXo4xoarv8YmG3iKvvqF/Ojg50+1XBBvetqoZ6PLMi\n2syYrobYMQfYCuPMjS+vXS/Gi6DrcNyw+2QRXlr0rxvWQOcK5QvrI+S1MIFt7qRW\nw/w2i2uC58lyFCQTFzAsGshxjGBIhO9obn839oSQB4lKb3qN4bWyV3qlHADTjBwK\nYtEVTlIYRn4nooZBCPiUhPgk18L4imQCE6Pd2j40csx/wwofnKVj9aSr5lFjFZyk\n6GgfiIo65iRGUN4/apSnnFJ7wcpvCZVjFeDC1ocdCUR/P6Mng7M=\n=A98G\n-----END PGP SIGNATURE-----", "payload": "tree e58910874c603f100242c0bfbf0a1cda908d7044\nparent 4198013522fffec070b741c4441e6bbc45ad998b\nauthor dAxpeDDa <daxpedda@gmail.com> 1656603934 +0200\ncommitter dAxpeDDa <daxpedda@gmail.com> 1656603934 +0200\n\nFix false-positive in `equatable_if_let`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1", "html_url": "https://github.com/rust-lang/rust/commit/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4198013522fffec070b741c4441e6bbc45ad998b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4198013522fffec070b741c4441e6bbc45ad998b", "html_url": "https://github.com/rust-lang/rust/commit/4198013522fffec070b741c4441e6bbc45ad998b"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "fdfb821ac7895becb9fa97f56463dad42f0b7632", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=b7051077c9d7e73704c4ea83f38f2a2e9f2003c1", "patch": "@@ -4,7 +4,8 @@ use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Pat, PatKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -67,6 +68,7 @@ fn is_structural_partial_eq<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, other: T\n impl<'tcx> LateLintPass<'tcx> for PatternEquality {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if_chain! {\n+            if !in_external_macro(cx.sess(), expr.span);\n             if let ExprKind::Let(let_expr) = expr.kind;\n             if unary_pattern(let_expr.pat);\n             let exp_ty = cx.typeck_results().expr_ty(let_expr.init);"}, {"sha": "83a0af6b87acad985fad701b01885bf3ba9f838c", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=b7051077c9d7e73704c4ea83f38f2a2e9f2003c1", "patch": "@@ -135,3 +135,8 @@ macro_rules! manual_rem_euclid {\n         let _: i32 = ((value % 4) + 4) % 4;\n     };\n }\n+\n+#[macro_export]\n+macro_rules! equatable_if_let {\n+    ($a:ident) => {{ if let 2 = $a {} }};\n+}"}, {"sha": "687efdada6e311f4efdf629ebfd0b46ac3bfa388", "filename": "tests/ui/equatable_if_let.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/tests%2Fui%2Fequatable_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/tests%2Fui%2Fequatable_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.fixed?ref=b7051077c9d7e73704c4ea83f38f2a2e9f2003c1", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n use std::cmp::Ordering;\n \n #[derive(PartialEq)]\n@@ -75,4 +79,6 @@ fn main() {\n     if \"abc\" == m1!(x) {\n         println!(\"OK\");\n     }\n+\n+    equatable_if_let!(a);\n }"}, {"sha": "8c467d14d2a9fb8028406835235a34483ec02c47", "filename": "tests/ui/equatable_if_let.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/tests%2Fui%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/tests%2Fui%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.rs?ref=b7051077c9d7e73704c4ea83f38f2a2e9f2003c1", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n use std::cmp::Ordering;\n \n #[derive(PartialEq)]\n@@ -75,4 +79,6 @@ fn main() {\n     if let m1!(x) = \"abc\" {\n         println!(\"OK\");\n     }\n+\n+    equatable_if_let!(a);\n }"}, {"sha": "9c4c3cc3682e631d7930d7c9b265b6ebab8afed0", "filename": "tests/ui/equatable_if_let.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/tests%2Fui%2Fequatable_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7051077c9d7e73704c4ea83f38f2a2e9f2003c1/tests%2Fui%2Fequatable_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.stderr?ref=b7051077c9d7e73704c4ea83f38f2a2e9f2003c1", "patch": "@@ -1,67 +1,67 @@\n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:49:8\n+  --> $DIR/equatable_if_let.rs:53:8\n    |\n LL |     if let 2 = a {}\n    |        ^^^^^^^^^ help: try: `a == 2`\n    |\n    = note: `-D clippy::equatable-if-let` implied by `-D warnings`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:50:8\n+  --> $DIR/equatable_if_let.rs:54:8\n    |\n LL |     if let Ordering::Greater = a.cmp(&b) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.cmp(&b) == Ordering::Greater`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:51:8\n+  --> $DIR/equatable_if_let.rs:55:8\n    |\n LL |     if let Some(2) = c {}\n    |        ^^^^^^^^^^^^^^^ help: try: `c == Some(2)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:52:8\n+  --> $DIR/equatable_if_let.rs:56:8\n    |\n LL |     if let Struct { a: 2, b: false } = d {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `d == (Struct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:53:8\n+  --> $DIR/equatable_if_let.rs:57:8\n    |\n LL |     if let Enum::TupleVariant(32, 64) = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::TupleVariant(32, 64)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:54:8\n+  --> $DIR/equatable_if_let.rs:58:8\n    |\n LL |     if let Enum::RecordVariant { a: 64, b: 32 } = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == (Enum::RecordVariant { a: 64, b: 32 })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:55:8\n+  --> $DIR/equatable_if_let.rs:59:8\n    |\n LL |     if let Enum::UnitVariant = e {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `e == Enum::UnitVariant`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:56:8\n+  --> $DIR/equatable_if_let.rs:60:8\n    |\n LL |     if let (Enum::UnitVariant, &Struct { a: 2, b: false }) = (e, &d) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(e, &d) == (Enum::UnitVariant, &Struct { a: 2, b: false })`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:66:8\n+  --> $DIR/equatable_if_let.rs:70:8\n    |\n LL |     if let NotStructuralEq::A = g {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `g == NotStructuralEq::A`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:68:8\n+  --> $DIR/equatable_if_let.rs:72:8\n    |\n LL |     if let Some(NotStructuralEq::A) = Some(g) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(g) == Some(NotStructuralEq::A)`\n \n error: this pattern matching can be expressed using equality\n-  --> $DIR/equatable_if_let.rs:75:8\n+  --> $DIR/equatable_if_let.rs:79:8\n    |\n LL |     if let m1!(x) = \"abc\" {\n    |        ^^^^^^^^^^^^^^^^^^ help: try: `\"abc\" == m1!(x)`"}]}