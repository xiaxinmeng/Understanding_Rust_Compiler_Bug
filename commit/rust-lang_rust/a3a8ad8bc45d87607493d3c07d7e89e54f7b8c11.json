{"sha": "a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYThhZDhiYzQ1ZDg3NjA3NDkzZDNjMDdkN2U4OWU1NGY3YjhjMTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-20T15:38:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-20T16:14:14Z"}, "message": "Don't rely on display names in inlay_hints", "tree": {"sha": "bd5c5ececd7060b608aeaaab2eb7c16334b2f226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5c5ececd7060b608aeaaab2eb7c16334b2f226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11", "html_url": "https://github.com/rust-lang/rust/commit/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f925735e64cb6aed85f28cacc0a91c1c1bc06bb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f925735e64cb6aed85f28cacc0a91c1c1bc06bb4", "html_url": "https://github.com/rust-lang/rust/commit/f925735e64cb6aed85f28cacc0a91c1c1bc06bb4"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "eda45f5b3fe29024e1c0c5b1292633916a7b8636", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             .filter(|variant_pat| is_variant_missing(&mut arms, variant_pat))\n             .map(|pat| make::match_arm(iter::once(pat), make::expr_empty_block()))\n             .collect::<Vec<_>>();\n-        if Some(enum_def) == FamousDefs(&ctx.sema, module.krate()).core_option_Option() {\n+        if Some(enum_def) == FamousDefs(&ctx.sema, Some(module.krate())).core_option_Option() {\n             // Match `Some` variant first.\n             mark::hit!(option_order);\n             variants.reverse()"}, {"sha": "674e5a1757156c73aac992354012cdea02207a42", "filename": "crates/assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11", "patch": "@@ -75,7 +75,7 @@ fn existing_from_impl(\n     let enum_ = variant.parent_enum(sema.db);\n     let krate = enum_.module(sema.db).krate();\n \n-    let from_trait = FamousDefs(sema, krate).core_convert_From()?;\n+    let from_trait = FamousDefs(sema, Some(krate)).core_convert_From()?;\n \n     let enum_type = enum_.ty(sema.db);\n "}, {"sha": "1a6b48b4563bb529473f21324321dd714d2e153a", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11", "patch": "@@ -275,7 +275,7 @@ impl TryEnum {\n /// somewhat similar to the known paths infra inside hir, but it different; We\n /// want to make sure that IDE specific paths don't become interesting inside\n /// the compiler itself as well.\n-pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Crate);\n+pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Option<Crate>);\n \n #[allow(non_snake_case)]\n impl FamousDefs<'_, '_> {\n@@ -362,6 +362,10 @@ pub mod prelude {\n pub use prelude::*;\n \"#;\n \n+    pub fn core(&self) -> Option<Crate> {\n+        self.find_crate(\"core\")\n+    }\n+\n     pub(crate) fn core_convert_From(&self) -> Option<Trait> {\n         self.find_trait(\"core:convert:From\")\n     }\n@@ -399,21 +403,20 @@ pub use prelude::*;\n         }\n     }\n \n+    fn find_crate(&self, name: &str) -> Option<Crate> {\n+        let krate = self.1?;\n+        let db = self.0.db;\n+        let res =\n+            krate.dependencies(db).into_iter().find(|dep| dep.name.to_string() == name)?.krate;\n+        Some(res)\n+    }\n+\n     fn find_def(&self, path: &str) -> Option<ScopeDef> {\n         let db = self.0.db;\n         let mut path = path.split(':');\n         let trait_ = path.next_back()?;\n         let std_crate = path.next()?;\n-        let std_crate = if self\n-            .1\n-            .display_name(db)\n-            .map(|name| name.to_string() == std_crate)\n-            .unwrap_or(false)\n-        {\n-            self.1\n-        } else {\n-            self.1.dependencies(db).into_iter().find(|dep| dep.name.to_string() == std_crate)?.krate\n-        };\n+        let std_crate = self.find_crate(std_crate)?;\n         let mut module = std_crate.root_module(db);\n         for segment in path {\n             module = module.children(db).find_map(|child| {"}, {"sha": "cccea129af6a78e837213e7063299e3c78f64fb3", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=a3a8ad8bc45d87607493d3c07d7e89e54f7b8c11", "patch": "@@ -99,6 +99,9 @@ fn get_chaining_hints(\n         return None;\n     }\n \n+    let krate = sema.scope(expr.syntax()).module().map(|it| it.krate());\n+    let famous_defs = FamousDefs(&sema, krate);\n+\n     let mut tokens = expr\n         .syntax()\n         .siblings_with_tokens(Direction::Next)\n@@ -128,7 +131,7 @@ fn get_chaining_hints(\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: InlayKind::ChainingHint,\n-            label: hint_iterator(sema, config, &ty).unwrap_or_else(|| {\n+            label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n                 ty.display_truncated(sema.db, config.max_length).to_string().into()\n             }),\n         });\n@@ -188,6 +191,9 @@ fn get_bind_pat_hints(\n         return None;\n     }\n \n+    let krate = sema.scope(pat.syntax()).module().map(|it| it.krate());\n+    let famous_defs = FamousDefs(&sema, krate);\n+\n     let ty = sema.type_of_pat(&pat.clone().into())?;\n \n     if should_not_display_type_hint(sema, &pat, &ty) {\n@@ -196,7 +202,7 @@ fn get_bind_pat_hints(\n     acc.push(InlayHint {\n         range: pat.syntax().text_range(),\n         kind: InlayKind::TypeHint,\n-        label: hint_iterator(sema, config, &ty)\n+        label: hint_iterator(sema, &famous_defs, config, &ty)\n             .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string().into()),\n     });\n \n@@ -206,6 +212,7 @@ fn get_bind_pat_hints(\n /// Checks if the type is an Iterator from std::iter and replaces its hint with an `impl Iterator<Item = Ty>`.\n fn hint_iterator(\n     sema: &Semantics<RootDatabase>,\n+    famous_defs: &FamousDefs,\n     config: &InlayHintsConfig,\n     ty: &hir::Type,\n ) -> Option<SmolStr> {\n@@ -214,11 +221,11 @@ fn hint_iterator(\n         .last()\n         .and_then(|strukt| strukt.as_adt())?;\n     let krate = strukt.krate(db)?;\n-    if krate.display_name(db).as_deref() != Some(\"core\") {\n+    if krate != famous_defs.core()? {\n         return None;\n     }\n-    let iter_trait = FamousDefs(sema, krate).core_iter_Iterator()?;\n-    let iter_mod = FamousDefs(sema, krate).core_iter()?;\n+    let iter_trait = famous_defs.core_iter_Iterator()?;\n+    let iter_mod = famous_defs.core_iter()?;\n     // assert this struct comes from `core::iter`\n     iter_mod.visibility_of(db, &strukt.into()).filter(|&vis| vis == hir::Visibility::Public)?;\n     if ty.impls_trait(db, iter_trait, &[]) {\n@@ -230,7 +237,7 @@ fn hint_iterator(\n             const LABEL_START: &str = \"impl Iterator<Item = \";\n             const LABEL_END: &str = \">\";\n \n-            let ty_display = hint_iterator(sema, config, &ty)\n+            let ty_display = hint_iterator(sema, famous_defs, config, &ty)\n                 .map(|assoc_type_impl| assoc_type_impl.to_string())\n                 .unwrap_or_else(|| {\n                     ty.display_truncated("}]}