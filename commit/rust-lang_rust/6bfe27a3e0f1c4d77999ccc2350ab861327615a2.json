{"sha": "6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZmUyN2EzZTBmMWM0ZDc3OTk5Y2NjMjM1MGFiODYxMzI3NjE1YTI=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-10-27T13:10:31Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-11-22T22:11:41Z"}, "message": "Drop support for cloudabi targets", "tree": {"sha": "9c062b62441db1cc37b6b272b2e1692ea24e3982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c062b62441db1cc37b6b272b2e1692ea24e3982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "html_url": "https://github.com/rust-lang/rust/commit/6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "html_url": "https://github.com/rust-lang/rust/commit/c643dd2ec8fed2852f5eee8f776d657293a6a8f2"}], "stats": {"total": 5432, "additions": 103, "deletions": 5329}, "files": [{"sha": "c832d5e5ebb9b5feb32db0cb4ec33736677536ea", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/alloc_system/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Falloc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Falloc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Falloc_system%2Flib.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -23,7 +23,7 @@\n     all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n     feature(integer_atomics, stdsimd)\n )]\n-#![cfg_attr(any(unix, target_os = \"cloudabi\", target_os = \"redox\"), feature(libc))]\n+#![cfg_attr(any(unix, target_os = \"redox\"), feature(libc))]\n // The minimum alignment guaranteed by the architecture. This value is used to\n // add fast paths for low alignment values.\n #[cfg(all(any(target_arch = \"x86\",\n@@ -69,7 +69,7 @@ const MIN_ALIGN: usize = 16;\n /// independently of the standard library\u2019s global allocator.\n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n pub struct System;\n-#[cfg(any(windows, unix, target_os = \"cloudabi\", target_os = \"redox\"))]\n+#[cfg(any(windows, unix, target_os = \"redox\"))]\n mod realloc_fallback {\n     use core::alloc::{GlobalAlloc, Layout};\n     use core::cmp;\n@@ -89,7 +89,7 @@ mod realloc_fallback {\n         }\n     }\n }\n-#[cfg(any(unix, target_os = \"cloudabi\", target_os = \"redox\"))]\n+#[cfg(any(unix, target_os = \"redox\"))]\n mod platform {\n     extern crate libc;\n     use core::ptr;"}, {"sha": "67f69b40e55cdefc74924db1aafdae42ef63b73e", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_cloudabi.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_cloudabi.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,16 +0,0 @@\n-use crate::spec::Target;\n-\n-pub fn target() -> Target {\n-    let mut base = super::cloudabi_base::opts();\n-    base.max_atomic_width = Some(128);\n-    base.unsupported_abis = super::arm_base::unsupported_abis();\n-    base.linker = Some(\"aarch64-unknown-cloudabi-cc\".to_string());\n-\n-    Target {\n-        llvm_target: \"aarch64-unknown-cloudabi\".to_string(),\n-        pointer_width: 64,\n-        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n-        arch: \"aarch64\".to_string(),\n-        options: base,\n-    }\n-}"}, {"sha": "d47ee541b25bab4dca5d2385c3cd7bf2c6a75763", "filename": "compiler/rustc_target/src/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,18 +0,0 @@\n-use crate::spec::{Target, TargetOptions};\n-\n-pub fn target() -> Target {\n-    let mut base = super::cloudabi_base::opts();\n-    base.cpu = \"cortex-a8\".to_string();\n-    base.max_atomic_width = Some(64);\n-    base.features = \"+v7,+vfp3,+neon\".to_string();\n-    base.unsupported_abis = super::arm_base::unsupported_abis();\n-    base.linker = Some(\"armv7-unknown-cloudabi-eabihf-cc\".to_string());\n-\n-    Target {\n-        llvm_target: \"armv7-unknown-cloudabi-eabihf\".to_string(),\n-        pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        arch: \"arm\".to_string(),\n-        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n-    }\n-}"}, {"sha": "20a095742ecf573ed24cb08bf719f9ed8c4ce806", "filename": "compiler/rustc_target/src/spec/cloudabi_base.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,36 +0,0 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions, TlsModel};\n-\n-pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            \"-Wl,-Bstatic\".to_string(),\n-            \"-Wl,--no-dynamic-linker\".to_string(),\n-            \"-Wl,--gc-sections\".to_string(),\n-        ],\n-    );\n-\n-    TargetOptions {\n-        os: \"cloudabi\".to_string(),\n-        executables: true,\n-        os_family: None,\n-        linker_is_gnu: true,\n-        pre_link_args: args,\n-        position_independent_executables: true,\n-        // As CloudABI only supports static linkage, there is no need\n-        // for dynamic TLS. The C library therefore does not provide\n-        // __tls_get_addr(), which is normally used to perform dynamic\n-        // TLS lookups by programs that make use of dlopen(). Only the\n-        // \"local-exec\" and \"initial-exec\" TLS models can be used.\n-        //\n-        // \"local-exec\" is more efficient than \"initial-exec\", as the\n-        // latter has one more level of indirection: it accesses the GOT\n-        // (Global Offset Table) to obtain the effective address of a\n-        // thread-local variable. Using a GOT is useful only when doing\n-        // dynamic linking.\n-        tls_model: TlsModel::LocalExec,\n-        relro_level: RelroLevel::Full,\n-        ..Default::default()\n-    }\n-}"}, {"sha": "0cdb9f9de56c446932c98bffc9c38fbe2af2713e", "filename": "compiler/rustc_target/src/spec/i686_unknown_cloudabi.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_cloudabi.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,20 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target};\n-\n-pub fn target() -> Target {\n-    let mut base = super::cloudabi_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = Some(64);\n-    base.linker = Some(\"i686-unknown-cloudabi-cc\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.stack_probes = true;\n-\n-    Target {\n-        llvm_target: \"i686-unknown-cloudabi\".to_string(),\n-        pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n-            f64:32:64-f80:32-n8:16:32-S128\"\n-            .to_string(),\n-        arch: \"x86\".to_string(),\n-        options: base,\n-    }\n-}"}, {"sha": "1bda33939b8c79ae5f510c322fa8e6074a276f09", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -54,7 +54,6 @@ mod apple_base;\n mod apple_sdk_base;\n mod arm_base;\n mod avr_gnu_base;\n-mod cloudabi_base;\n mod dragonfly_base;\n mod freebsd_base;\n mod fuchsia_base;\n@@ -628,11 +627,6 @@ supported_targets! {\n \n     (\"msp430-none-elf\", msp430_none_elf),\n \n-    (\"aarch64-unknown-cloudabi\", aarch64_unknown_cloudabi),\n-    (\"armv7-unknown-cloudabi-eabihf\", armv7_unknown_cloudabi_eabihf),\n-    (\"i686-unknown-cloudabi\", i686_unknown_cloudabi),\n-    (\"x86_64-unknown-cloudabi\", x86_64_unknown_cloudabi),\n-\n     (\"aarch64-unknown-hermit\", aarch64_unknown_hermit),\n     (\"x86_64-unknown-hermit\", x86_64_unknown_hermit),\n     (\"x86_64-unknown-hermit-kernel\", x86_64_unknown_hermit_kernel),"}, {"sha": "cf57f4ec624610efccb27a9bc263ec575b4d6e50", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_cloudabi.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_cloudabi.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,19 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target};\n-\n-pub fn target() -> Target {\n-    let mut base = super::cloudabi_base::opts();\n-    base.cpu = \"x86-64\".to_string();\n-    base.max_atomic_width = Some(64);\n-    base.linker = Some(\"x86_64-unknown-cloudabi-cc\".to_string());\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.stack_probes = true;\n-\n-    Target {\n-        llvm_target: \"x86_64-unknown-cloudabi\".to_string(),\n-        pointer_width: 64,\n-        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n-            .to_string(),\n-        arch: \"x86_64\".to_string(),\n-        options: base,\n-    }\n-}"}, {"sha": "a8ebb4b3219f79601c10a91feb431dd43317eb7d", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -32,7 +32,7 @@ pub unsafe extern \"C\" fn __rust_start_panic(_payload: usize) -> u32 {\n     abort();\n \n     cfg_if::cfg_if! {\n-        if #[cfg(any(unix, target_os = \"cloudabi\"))] {\n+        if #[cfg(unix)] {\n             unsafe fn abort() -> ! {\n                 libc::abort();\n             }"}, {"sha": "0b74a844fec6ee6d828f2bbd89161a1adb6b41ac", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -49,7 +49,6 @@ cfg_if::cfg_if! {\n         mod real_imp;\n     } else if #[cfg(any(\n         all(target_family = \"windows\", target_env = \"gnu\"),\n-        target_os = \"cloudabi\",\n         target_os = \"psp\",\n         target_family = \"unix\",\n         all(target_vendor = \"fortanix\", target_env = \"sgx\"),"}, {"sha": "a14ac63c7a8e4ee908cb955e8ab86ba55ef24445", "filename": "library/std/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -18,7 +18,6 @@ fn main() {\n         || target.contains(\"uwp\")\n         || target.contains(\"windows\")\n         || target.contains(\"fuchsia\")\n-        || target.contains(\"cloudabi\")\n         || (target.contains(\"sgx\") && target.contains(\"fortanix\"))\n         || target.contains(\"hermit\")\n         || target.contains(\"l4re\")"}, {"sha": "e2d4f2e6a56afd1bd5a876aa99f9549daa6f884d", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -8,7 +8,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n-#[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\", target_env = \"sgx\"))))]\n+#[cfg(all(test, not(any(target_os = \"emscripten\", target_env = \"sgx\"))))]\n mod tests;\n \n use crate::ffi::OsString;"}, {"sha": "325acf0b9793193a0bd8f67b28a9157af12f6598", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,6 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n-#[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\"))))]\n+#[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests;\n \n use crate::io::prelude::*;"}, {"sha": "2377a76a33de9799d7e2a1cd8d032246fddd186b", "filename": "library/std/src/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,4 +1,4 @@\n-#[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\", target_env = \"sgx\"))))]\n+#[cfg(all(test, not(any(target_os = \"emscripten\", target_env = \"sgx\"))))]\n mod tests;\n \n use crate::fmt;"}, {"sha": "77a11ac8201425bbec98212327784800b82e4f96", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -97,7 +97,7 @@\n #![stable(feature = \"process\", since = \"1.0.0\")]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n-#[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\", target_env = \"sgx\"))))]\n+#[cfg(all(test, not(any(target_os = \"emscripten\", target_env = \"sgx\"))))]\n mod tests;\n \n use crate::io::prelude::*;"}, {"sha": "2383277ad7284adb92ab4d66104e4d9ec59656e6", "filename": "library/std/src/sys/cloudabi/abi/bitflags.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fbitflags.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,47 +0,0 @@\n-// Copyright (c) 2018 Nuxi (https://nuxi.nl/) and contributors.\n-//\n-// Redistribution and use in source and binary forms, with or without\n-// modification, are permitted provided that the following conditions\n-// are met:\n-// 1. Redistributions of source code must retain the above copyright\n-//    notice, this list of conditions and the following disclaimer.\n-// 2. Redistributions in binary form must reproduce the above copyright\n-//    notice, this list of conditions and the following disclaimer in the\n-//    documentation and/or other materials provided with the distribution.\n-//\n-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n-// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n-// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n-// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n-// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n-// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n-// SUCH DAMAGE.\n-\n-#[cfg(feature = \"bitflags\")]\n-use bitflags::bitflags;\n-\n-// Minimal implementation of bitflags! in case we can't depend on the bitflags\n-// crate. Only implements `bits()` and a `from_bits_truncate()` that doesn't\n-// actually truncate.\n-#[cfg(not(feature = \"bitflags\"))]\n-macro_rules! bitflags {\n-  (\n-    $(#[$attr:meta])*\n-    pub struct $name:ident: $type:ty {\n-      $($(#[$const_attr:meta])* const $const:ident = $val:expr;)*\n-    }\n-  ) => {\n-    $(#[$attr])*\n-    #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-    pub struct $name { bits: $type }\n-    impl $name {\n-      $($(#[$const_attr])* pub const $const: $name = $name{ bits: $val };)*\n-      pub fn bits(&self) -> $type { self.bits }\n-      pub fn from_bits_truncate(bits: $type) -> Self { $name{ bits } }\n-    }\n-  }\n-}"}, {"sha": "d67f0f81a9fb00cb985ad451232420fc049217f2", "filename": "library/std/src/sys/cloudabi/abi/cloudabi.rs", "status": "removed", "additions": 0, "deletions": 2954, "changes": 2954, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,2954 +0,0 @@\n-// Copyright (c) 2016-2017 Nuxi <https://nuxi.nl/> and contributors.\n-//\n-// Redistribution and use in source and binary forms, with or without\n-// modification, are permitted provided that the following conditions\n-// are met:\n-// 1. Redistributions of source code must retain the above copyright\n-//    notice, this list of conditions and the following disclaimer.\n-// 2. Redistributions in binary form must reproduce the above copyright\n-//    notice, this list of conditions and the following disclaimer in the\n-//    documentation and/or other materials provided with the distribution.\n-//\n-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n-// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n-// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n-// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n-// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n-// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n-// SUCH DAMAGE.\n-//\n-// This file is automatically generated. Do not edit.\n-//\n-// Source: https://github.com/NuxiNL/cloudabi\n-\n-// Appease Rust's tidy.\n-// ignore-tidy-linelength\n-\n-//! **PLEASE NOTE: This entire crate including this\n-//! documentation is automatically generated from\n-//! [`cloudabi.txt`](https://github.com/NuxiNL/cloudabi/blob/master/cloudabi.txt)**\n-//!\n-//! # Nuxi CloudABI\n-//!\n-//! CloudABI is what you get if you take POSIX, add capability-based\n-//! security, and remove everything that's incompatible with that. The\n-//! result is a minimal ABI consisting of only 49 syscalls.\n-//!\n-//! CloudABI doesn't have its own kernel, but instead is implemented in existing\n-//! kernels: FreeBSD has CloudABI support for x86-64 and arm64, and [a patch-set\n-//! for NetBSD](https://github.com/NuxiNL/netbsd) and [a patch-set for\n-//! Linux](https://github.com/NuxiNL/linux) are available as well. This means that\n-//! CloudABI binaries can be executed on different operating systems, without any\n-//! modification.\n-//!\n-//! ## Capability-Based Security\n-//!\n-//! Capability-based security means that processes can only perform\n-//! actions that have no global impact. Processes cannot open files by\n-//! their absolute path, cannot open network connections, and cannot\n-//! observe global system state such as the process table.\n-//!\n-//! The capabilities of a process are fully determined by its set of open\n-//! file descriptors (fds). For example, files can only be opened if the\n-//! process already has a file descriptor to a directory the file is in.\n-//!\n-//! Unlike in POSIX, where processes are normally started with file\n-//! descriptors 0, 1, and 2 reserved for standard input, output, and\n-//! error, CloudABI does not reserve any file descriptor numbers for\n-//! specific purposes.\n-//!\n-//! In CloudABI, a process depends on its parent process to launch it with\n-//! the right set of resources, since the process will not be able to open\n-//! any new resources. For example, a simple static web server would need\n-//! to be started with a file descriptor to a [TCP\n-//! listener](https://github.com/NuxiNL/flower), and a file descriptor to\n-//! the directory for which to serve files. The web server will then be\n-//! unable to do anything other than reading files in that directory, and\n-//! process incoming network connections.\n-//!\n-//! So, unknown CloudABI binaries can safely be executed without the need\n-//! for containers, virtual machines, or other sandboxing technologies.\n-//!\n-//! Watch [Ed Schouten's Talk at\n-//! 32C3](https://www.youtube.com/watch?v=3N29vrPoDv8) for more\n-//! information about what capability-based security for UNIX means.\n-//!\n-//! ## Cloudlibc\n-//!\n-//! [Cloudlibc](https://github.com/NuxiNL/cloudlibc) is an implementation\n-//! of the C standard library, without all CloudABI-incompatible\n-//! functions. For example, Cloudlibc does not have `printf`, but does\n-//! have `fprintf`. It does not have `open`, but does have `openat`.\n-//!\n-//! ## CloudABI-Ports\n-//!\n-//! [CloudABI-Ports](https://github.com/NuxiNL/cloudabi-ports) is a\n-//! collection of ports of commonly used libraries and applications to\n-//! CloudABI. It contains software such as `zlib`, `libpng`, `boost`,\n-//! `memcached`, and much more. The software is patched to not depend on\n-//! any global state, such as files in `/etc` or `/dev`, using `open()`,\n-//! etc.\n-//!\n-//! ## Using CloudABI\n-//!\n-//! Instructions for using CloudABI (including kernel modules/patches,\n-//! toolchain, and ports) are available for several operating systems:\n-//!\n-//! - [Arch Linux](https://nuxi.nl/cloudabi/archlinux/)\n-//! - [Debian, Ubuntu, and other Debian derivatives](https://nuxi.nl/cloudabi/debian/)\n-//! - [FreeBSD, PC-BSD and DragonFly BSD](https://nuxi.nl/cloudabi/freebsd/)\n-//! - [Mac OS X](https://nuxi.nl/cloudabi/mac/)\n-//! - [NetBSD](https://nuxi.nl/cloudabi/netbsd/)\n-//!\n-//! ## Specification of the ABI\n-//!\n-//! The entire ABI is specified in a file called\n-//! [`cloudabi.txt`](https://github.com/NuxiNL/cloudabi/blob/master/cloudabi.txt),\n-//! from which all\n-//! [headers](https://github.com/NuxiNL/cloudabi/tree/master/headers)\n-//! and documentation (including the one you're reading now) is generated.\n-\n-#![no_std]\n-#![allow(non_camel_case_types)]\n-#![allow(deprecated)] // FIXME: using `mem::uninitialized()`\n-\n-include!(\"bitflags.rs\");\n-\n-/// File or memory access pattern advisory information.\n-#[repr(u8)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-#[non_exhaustive]\n-pub enum advice {\n-    /// The application expects that it will not access the\n-    /// specified data in the near future.\n-    DONTNEED = 1,\n-    /// The application expects to access the specified data\n-    /// once and then not reuse it thereafter.\n-    NOREUSE = 2,\n-    /// The application has no advice to give on its behavior\n-    /// with respect to the specified data.\n-    NORMAL = 3,\n-    /// The application expects to access the specified data\n-    /// in a random order.\n-    RANDOM = 4,\n-    /// The application expects to access the specified data\n-    /// sequentially from lower offsets to higher offsets.\n-    SEQUENTIAL = 5,\n-    /// The application expects to access the specified data\n-    /// in the near future.\n-    WILLNEED = 6,\n-}\n-\n-/// Enumeration describing the kind of value stored in [`auxv`].\n-#[repr(u32)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-#[non_exhaustive]\n-pub enum auxtype {\n-    /// Base address of the binary argument data provided to\n-    /// [`proc_exec()`](fn.proc_exec.html).\n-    ARGDATA = 256,\n-    /// Length of the binary argument data provided to\n-    /// [`proc_exec()`](fn.proc_exec.html).\n-    ARGDATALEN = 257,\n-    /// Base address at which the executable is placed in\n-    /// memory.\n-    BASE = 7,\n-    /// Base address of a buffer of random data that may be\n-    /// used for non-cryptographic purposes, for example as a\n-    /// canary for stack smashing protection.\n-    CANARY = 258,\n-    /// Length of a buffer of random data that may be used\n-    /// for non-cryptographic purposes, for example as a\n-    /// canary for stack smashing protection.\n-    CANARYLEN = 259,\n-    /// Number of CPUs that the system this process is running\n-    /// on has.\n-    NCPUS = 260,\n-    /// Terminator of the auxiliary vector.\n-    NULL = 0,\n-    /// Smallest memory object size for which individual\n-    /// memory protection controls can be configured.\n-    PAGESZ = 6,\n-    /// Address of the first ELF program header of the\n-    /// executable.\n-    PHDR = 3,\n-    /// Number of ELF program headers of the executable.\n-    PHNUM = 4,\n-    /// Identifier of the process.\n-    ///\n-    /// This environment does not provide any simple numerical\n-    /// process identifiers, for the reason that these are not\n-    /// useful in distributed contexts. Instead, processes are\n-    /// identified by a UUID.\n-    ///\n-    /// This record should point to sixteen bytes of binary\n-    /// data, containing a version 4 UUID (fully random).\n-    PID = 263,\n-    /// Address of the ELF header of the vDSO.\n-    ///\n-    /// The vDSO is a shared library that is mapped in the\n-    /// address space of the process. It provides entry points\n-    /// for every system call supported by the environment,\n-    /// all having a corresponding symbol that is prefixed\n-    /// with `cloudabi_sys_`. System calls should be invoked\n-    /// through these entry points.\n-    ///\n-    /// The first advantage of letting processes call into a\n-    /// vDSO to perform system calls instead of raising\n-    /// hardware traps is that it allows for easy emulation of\n-    /// executables on top of existing operating systems. The\n-    /// second advantage is that in cases where an operating\n-    /// system provides native support for CloudABI executables,\n-    /// it may still implement partial userspace\n-    /// implementations of these system calls to improve\n-    /// performance (e.g., [`clock_time_get()`](fn.clock_time_get.html)). It also provides\n-    /// a more dynamic way of adding, removing or replacing\n-    /// system calls.\n-    SYSINFO_EHDR = 262,\n-    /// Thread ID of the initial thread of the process.\n-    TID = 261,\n-}\n-\n-/// Identifiers for clocks.\n-#[repr(u32)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-#[non_exhaustive]\n-pub enum clockid {\n-    /// The system-wide monotonic clock, which is defined as a\n-    /// clock measuring real time, whose value cannot be\n-    /// adjusted and which cannot have negative clock jumps.\n-    ///\n-    /// The epoch of this clock is undefined. The absolute\n-    /// time value of this clock therefore has no meaning.\n-    MONOTONIC = 1,\n-    /// The CPU-time clock associated with the current\n-    /// process.\n-    PROCESS_CPUTIME_ID = 2,\n-    /// The system-wide clock measuring real time. Time value\n-    /// zero corresponds with 1970-01-01T00:00:00Z.\n-    REALTIME = 3,\n-    /// The CPU-time clock associated with the current thread.\n-    THREAD_CPUTIME_ID = 4,\n-}\n-\n-/// A userspace condition variable.\n-#[repr(C)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-pub struct condvar(pub u32);\n-/// The condition variable is in its initial state. There\n-/// are no threads waiting to be woken up. If the\n-/// condition variable has any other value, the kernel\n-/// must be called to wake up any sleeping threads.\n-pub const CONDVAR_HAS_NO_WAITERS: condvar = condvar(0);\n-\n-/// Identifier for a device containing a file system. Can be used\n-/// in combination with [`inode`] to uniquely identify a file on the\n-/// local system.\n-#[repr(C)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-pub struct device(pub u64);\n-\n-/// A reference to the offset of a directory entry.\n-#[repr(C)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-pub struct dircookie(pub u64);\n-/// Permanent reference to the first directory entry\n-/// within a directory.\n-pub const DIRCOOKIE_START: dircookie = dircookie(0);\n-\n-/// Error codes returned by system calls.\n-///\n-/// Not all of these error codes are returned by the system calls\n-/// provided by this environment, but are either used in userspace\n-/// exclusively or merely provided for alignment with POSIX.\n-#[repr(u16)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-#[non_exhaustive]\n-pub enum errno {\n-    /// No error occurred. System call completed successfully.\n-    SUCCESS = 0,\n-    /// Argument list too long.\n-    TOOBIG = 1,\n-    /// Permission denied.\n-    ACCES = 2,\n-    /// Address in use.\n-    ADDRINUSE = 3,\n-    /// Address not available.\n-    ADDRNOTAVAIL = 4,\n-    /// Address family not supported.\n-    AFNOSUPPORT = 5,\n-    /// Resource unavailable, or operation would block.\n-    AGAIN = 6,\n-    /// Connection already in progress.\n-    ALREADY = 7,\n-    /// Bad file descriptor.\n-    BADF = 8,\n-    /// Bad message.\n-    BADMSG = 9,\n-    /// Device or resource busy.\n-    BUSY = 10,\n-    /// Operation canceled.\n-    CANCELED = 11,\n-    /// No child processes.\n-    CHILD = 12,\n-    /// Connection aborted.\n-    CONNABORTED = 13,\n-    /// Connection refused.\n-    CONNREFUSED = 14,\n-    /// Connection reset.\n-    CONNRESET = 15,\n-    /// Resource deadlock would occur.\n-    DEADLK = 16,\n-    /// Destination address required.\n-    DESTADDRREQ = 17,\n-    /// Mathematics argument out of domain of function.\n-    DOM = 18,\n-    /// Reserved.\n-    DQUOT = 19,\n-    /// File exists.\n-    EXIST = 20,\n-    /// Bad address.\n-    FAULT = 21,\n-    /// File too large.\n-    FBIG = 22,\n-    /// Host is unreachable.\n-    HOSTUNREACH = 23,\n-    /// Identifier removed.\n-    IDRM = 24,\n-    /// Illegal byte sequence.\n-    ILSEQ = 25,\n-    /// Operation in progress.\n-    INPROGRESS = 26,\n-    /// Interrupted function.\n-    INTR = 27,\n-    /// Invalid argument.\n-    INVAL = 28,\n-    /// I/O error.\n-    IO = 29,\n-    /// Socket is connected.\n-    ISCONN = 30,\n-    /// Is a directory.\n-    ISDIR = 31,\n-    /// Too many levels of symbolic links.\n-    LOOP = 32,\n-    /// File descriptor value too large.\n-    MFILE = 33,\n-    /// Too many links.\n-    MLINK = 34,\n-    /// Message too large.\n-    MSGSIZE = 35,\n-    /// Reserved.\n-    MULTIHOP = 36,\n-    /// Filename too long.\n-    NAMETOOLONG = 37,\n-    /// Network is down.\n-    NETDOWN = 38,\n-    /// Connection aborted by network.\n-    NETRESET = 39,\n-    /// Network unreachable.\n-    NETUNREACH = 40,\n-    /// Too many files open in system.\n-    NFILE = 41,\n-    /// No buffer space available.\n-    NOBUFS = 42,\n-    /// No such device.\n-    NODEV = 43,\n-    /// No such file or directory.\n-    NOENT = 44,\n-    /// Executable file format error.\n-    NOEXEC = 45,\n-    /// No locks available.\n-    NOLCK = 46,\n-    /// Reserved.\n-    NOLINK = 47,\n-    /// Not enough space.\n-    NOMEM = 48,\n-    /// No message of the desired type.\n-    NOMSG = 49,\n-    /// Protocol not available.\n-    NOPROTOOPT = 50,\n-    /// No space left on device.\n-    NOSPC = 51,\n-    /// Function not supported.\n-    NOSYS = 52,\n-    /// The socket is not connected.\n-    NOTCONN = 53,\n-    /// Not a directory or a symbolic link to a directory.\n-    NOTDIR = 54,\n-    /// Directory not empty.\n-    NOTEMPTY = 55,\n-    /// State not recoverable.\n-    NOTRECOVERABLE = 56,\n-    /// Not a socket.\n-    NOTSOCK = 57,\n-    /// Not supported, or operation not supported on socket.\n-    NOTSUP = 58,\n-    /// Inappropriate I/O control operation.\n-    NOTTY = 59,\n-    /// No such device or address.\n-    NXIO = 60,\n-    /// Value too large to be stored in data type.\n-    OVERFLOW = 61,\n-    /// Previous owner died.\n-    OWNERDEAD = 62,\n-    /// Operation not permitted.\n-    PERM = 63,\n-    /// Broken pipe.\n-    PIPE = 64,\n-    /// Protocol error.\n-    PROTO = 65,\n-    /// Protocol not supported.\n-    PROTONOSUPPORT = 66,\n-    /// Protocol wrong type for socket.\n-    PROTOTYPE = 67,\n-    /// Result too large.\n-    RANGE = 68,\n-    /// Read-only file system.\n-    ROFS = 69,\n-    /// Invalid seek.\n-    SPIPE = 70,\n-    /// No such process.\n-    SRCH = 71,\n-    /// Reserved.\n-    STALE = 72,\n-    /// Connection timed out.\n-    TIMEDOUT = 73,\n-    /// Text file busy.\n-    TXTBSY = 74,\n-    /// Cross-device link.\n-    XDEV = 75,\n-    /// Extension: Capabilities insufficient.\n-    NOTCAPABLE = 76,\n-}\n-\n-bitflags! {\n-  /// The state of the file descriptor subscribed to with\n-  /// [`FD_READ`](enum.eventtype.html#variant.FD_READ) or [`FD_WRITE`](enum.eventtype.html#variant.FD_WRITE).\n-  #[repr(C)]\n-  pub struct eventrwflags: u16 {\n-    /// The peer of this socket has closed or disconnected.\n-    const HANGUP = 0x0001;\n-  }\n-}\n-\n-/// Type of a subscription to an event or its occurrence.\n-#[repr(u8)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-#[non_exhaustive]\n-pub enum eventtype {\n-    /// The time value of clock [`subscription.union.clock.clock_id`](struct.subscription_clock.html#structfield.clock_id)\n-    /// has reached timestamp [`subscription.union.clock.timeout`](struct.subscription_clock.html#structfield.timeout).\n-    CLOCK = 1,\n-    /// Condition variable [`subscription.union.condvar.condvar`](struct.subscription_condvar.html#structfield.condvar) has\n-    /// been woken up and [`subscription.union.condvar.lock`](struct.subscription_condvar.html#structfield.lock) has been\n-    /// acquired for writing.\n-    CONDVAR = 2,\n-    /// File descriptor [`subscription.union.fd_readwrite.fd`](struct.subscription_fd_readwrite.html#structfield.fd) has\n-    /// data available for reading. This event always triggers\n-    /// for regular files.\n-    FD_READ = 3,\n-    /// File descriptor [`subscription.union.fd_readwrite.fd`](struct.subscription_fd_readwrite.html#structfield.fd) has\n-    /// capacity available for writing. This event always\n-    /// triggers for regular files.\n-    FD_WRITE = 4,\n-    /// Lock [`subscription.union.lock.lock`](struct.subscription_lock.html#structfield.lock) has been acquired for\n-    /// reading.\n-    LOCK_RDLOCK = 5,\n-    /// Lock [`subscription.union.lock.lock`](struct.subscription_lock.html#structfield.lock) has been acquired for\n-    /// writing.\n-    LOCK_WRLOCK = 6,\n-    /// The process associated with process descriptor\n-    /// [`subscription.union.proc_terminate.fd`](struct.subscription_proc_terminate.html#structfield.fd) has terminated.\n-    PROC_TERMINATE = 7,\n-}\n-\n-/// Exit code generated by a process when exiting.\n-pub type exitcode = u32;\n-\n-/// A file descriptor number.\n-///\n-/// Unlike on POSIX-compliant systems, none of the file descriptor\n-/// numbers are reserved for a purpose (e.g., stdin, stdout,\n-/// stderr). Operating systems are not required to allocate new\n-/// file descriptors in ascending order.\n-#[repr(C)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-pub struct fd(pub u32);\n-/// Returned to the child process by [`proc_fork()`](fn.proc_fork.html).\n-pub const PROCESS_CHILD: fd = fd(0xffffffff);\n-/// Passed to [`mem_map()`](fn.mem_map.html) when creating a mapping to\n-/// anonymous memory.\n-pub const MAP_ANON_FD: fd = fd(0xffffffff);\n-\n-bitflags! {\n-  /// File descriptor flags.\n-  #[repr(C)]\n-  pub struct fdflags: u16 {\n-    /// Append mode: Data written to the file is always\n-    /// appended to the file's end.\n-    const APPEND   = 0x0001;\n-    /// Write according to synchronized I/O data integrity\n-    /// completion. Only the data stored in the file is\n-    /// synchronized.\n-    const DSYNC    = 0x0002;\n-    /// Non-blocking mode.\n-    const NONBLOCK = 0x0004;\n-    /// Synchronized read I/O operations.\n-    const RSYNC    = 0x0008;\n-    /// Write according to synchronized I/O file integrity\n-    /// completion. In addition to synchronizing the data\n-    /// stored in the file, the system may also synchronously\n-    /// update the file's metadata.\n-    const SYNC     = 0x0010;\n-  }\n-}\n-\n-bitflags! {\n-  /// Which file descriptor attributes to adjust.\n-  #[repr(C)]\n-  pub struct fdsflags: u16 {\n-    /// Adjust the file descriptor flags stored in\n-    /// [`fdstat.fs_flags`](struct.fdstat.html#structfield.fs_flags).\n-    const FLAGS  = 0x0001;\n-    /// Restrict the rights of the file descriptor to the\n-    /// rights stored in [`fdstat.fs_rights_base`](struct.fdstat.html#structfield.fs_rights_base) and\n-    /// [`fdstat.fs_rights_inheriting`](struct.fdstat.html#structfield.fs_rights_inheriting).\n-    const RIGHTS = 0x0002;\n-  }\n-}\n-\n-/// Relative offset within a file.\n-pub type filedelta = i64;\n-\n-/// Non-negative file size or length of a region within a file.\n-pub type filesize = u64;\n-\n-/// The type of a file descriptor or file.\n-#[repr(u8)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-#[non_exhaustive]\n-pub enum filetype {\n-    /// The type of the file descriptor or file is unknown or\n-    /// is different from any of the other types specified.\n-    UNKNOWN = 0,\n-    /// The file descriptor or file refers to a block device\n-    /// inode.\n-    BLOCK_DEVICE = 16,\n-    /// The file descriptor or file refers to a character\n-    /// device inode.\n-    CHARACTER_DEVICE = 17,\n-    /// The file descriptor or file refers to a directory\n-    /// inode.\n-    DIRECTORY = 32,\n-    /// The file descriptor refers to a process handle.\n-    PROCESS = 80,\n-    /// The file descriptor or file refers to a regular file\n-    /// inode.\n-    REGULAR_FILE = 96,\n-    /// The file descriptor refers to a shared memory object.\n-    SHARED_MEMORY = 112,\n-    /// The file descriptor or file refers to a datagram\n-    /// socket.\n-    SOCKET_DGRAM = 128,\n-    /// The file descriptor or file refers to a byte-stream\n-    /// socket.\n-    SOCKET_STREAM = 130,\n-    /// The file refers to a symbolic link inode.\n-    SYMBOLIC_LINK = 144,\n-}\n-\n-bitflags! {\n-  /// Which file attributes to adjust.\n-  #[repr(C)]\n-  pub struct fsflags: u16 {\n-    /// Adjust the last data access timestamp to the value\n-    /// stored in [`filestat.st_atim`](struct.filestat.html#structfield.st_atim).\n-    const ATIM     = 0x0001;\n-    /// Adjust the last data access timestamp to the time\n-    /// of clock [`REALTIME`](enum.clockid.html#variant.REALTIME).\n-    const ATIM_NOW = 0x0002;\n-    /// Adjust the last data modification timestamp to the\n-    /// value stored in [`filestat.st_mtim`](struct.filestat.html#structfield.st_mtim).\n-    const MTIM     = 0x0004;\n-    /// Adjust the last data modification timestamp to the\n-    /// time of clock [`REALTIME`](enum.clockid.html#variant.REALTIME).\n-    const MTIM_NOW = 0x0008;\n-    /// Truncate or extend the file to the size stored in\n-    /// [`filestat.st_size`](struct.filestat.html#structfield.st_size).\n-    const SIZE     = 0x0010;\n-  }\n-}\n-\n-/// File serial number that is unique within its file system.\n-#[repr(C)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-pub struct inode(pub u64);\n-\n-/// Number of hard links to an inode.\n-pub type linkcount = u32;\n-\n-/// A userspace read-recursive readers-writer lock, similar to a\n-/// Linux futex or a FreeBSD umtx.\n-#[repr(C)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-pub struct lock(pub u32);\n-/// Value indicating that the lock is in its initial\n-/// unlocked state.\n-pub const LOCK_UNLOCKED: lock = lock(0x00000000);\n-/// Bitmask indicating that the lock is write-locked. If\n-/// set, the lower 30 bits of the lock contain the\n-/// identifier of the thread that owns the write lock.\n-/// Otherwise, the lower 30 bits of the lock contain the\n-/// number of acquired read locks.\n-pub const LOCK_WRLOCKED: lock = lock(0x40000000);\n-/// Bitmask indicating that the lock is either read locked\n-/// or write locked, and that one or more threads have\n-/// their execution suspended, waiting to acquire the\n-/// lock. The last owner of the lock must call the\n-/// kernel to unlock.\n-///\n-/// When the lock is acquired for reading and this bit is\n-/// set, it means that one or more threads are attempting\n-/// to acquire this lock for writing. In that case, other\n-/// threads should only acquire additional read locks if\n-/// suspending execution would cause a deadlock. It is\n-/// preferred to suspend execution, as this prevents\n-/// starvation of writers.\n-pub const LOCK_KERNEL_MANAGED: lock = lock(0x80000000);\n-/// Value indicating that the lock is in an incorrect\n-/// state. A lock cannot be in its initial unlocked state,\n-/// while also managed by the kernel.\n-pub const LOCK_BOGUS: lock = lock(0x80000000);\n-\n-bitflags! {\n-  /// Flags determining the method of how paths are resolved.\n-  #[repr(C)]\n-  pub struct lookupflags: u32 {\n-    /// As long as the resolved path corresponds to a symbolic\n-    /// link, it is expanded.\n-    const SYMLINK_FOLLOW = 0x00000001;\n-  }\n-}\n-\n-bitflags! {\n-  /// Memory mapping flags.\n-  #[repr(C)]\n-  pub struct mflags: u8 {\n-    /// Instead of mapping the contents of the file provided,\n-    /// create a mapping to anonymous memory. The file\n-    /// descriptor argument must be set to [`MAP_ANON_FD`](constant.MAP_ANON_FD.html),\n-    /// and the offset must be set to zero.\n-    const ANON    = 0x01;\n-    /// Require that the mapping is performed at the base\n-    /// address provided.\n-    const FIXED   = 0x02;\n-    /// Changes are private.\n-    const PRIVATE = 0x04;\n-    /// Changes are shared.\n-    const SHARED  = 0x08;\n-  }\n-}\n-\n-bitflags! {\n-  /// Memory page protection options.\n-  ///\n-  /// This implementation enforces the `W^X` property: Pages cannot be\n-  /// mapped for execution while also mapped for writing.\n-  #[repr(C)]\n-  pub struct mprot: u8 {\n-    /// Page can be executed.\n-    const EXEC  = 0x01;\n-    /// Page can be written.\n-    const WRITE = 0x02;\n-    /// Page can be read.\n-    const READ  = 0x04;\n-  }\n-}\n-\n-bitflags! {\n-  /// Methods of synchronizing memory with physical storage.\n-  #[repr(C)]\n-  pub struct msflags: u8 {\n-    /// Performs asynchronous writes.\n-    const ASYNC      = 0x01;\n-    /// Invalidates cached data.\n-    const INVALIDATE = 0x02;\n-    /// Performs synchronous writes.\n-    const SYNC       = 0x04;\n-  }\n-}\n-\n-/// Specifies the number of threads sleeping on a condition\n-/// variable that should be woken up.\n-pub type nthreads = u32;\n-\n-bitflags! {\n-  /// Open flags used by [`file_open()`](fn.file_open.html).\n-  #[repr(C)]\n-  pub struct oflags: u16 {\n-    /// Create file if it does not exist.\n-    const CREAT     = 0x0001;\n-    /// Fail if not a directory.\n-    const DIRECTORY = 0x0002;\n-    /// Fail if file already exists.\n-    const EXCL      = 0x0004;\n-    /// Truncate file to size 0.\n-    const TRUNC     = 0x0008;\n-  }\n-}\n-\n-bitflags! {\n-  /// Flags provided to [`sock_recv()`](fn.sock_recv.html).\n-  #[repr(C)]\n-  pub struct riflags: u16 {\n-    /// Returns the message without removing it from the\n-    /// socket's receive queue.\n-    const PEEK    = 0x0004;\n-    /// On byte-stream sockets, block until the full amount\n-    /// of data can be returned.\n-    const WAITALL = 0x0010;\n-  }\n-}\n-\n-bitflags! {\n-  /// File descriptor rights, determining which actions may be\n-  /// performed.\n-  #[repr(C)]\n-  pub struct rights: u64 {\n-    /// The right to invoke [`fd_datasync()`](fn.fd_datasync.html).\n-    ///\n-    /// If [`FILE_OPEN`](struct.rights.html#associatedconstant.FILE_OPEN) is set, includes the right to\n-    /// invoke [`file_open()`](fn.file_open.html) with [`DSYNC`](struct.fdflags.html#associatedconstant.DSYNC).\n-    const FD_DATASYNC           = 0x0000000000000001;\n-    /// The right to invoke [`fd_read()`](fn.fd_read.html) and [`sock_recv()`](fn.sock_recv.html).\n-    ///\n-    /// If [`MEM_MAP`](struct.rights.html#associatedconstant.MEM_MAP) is set, includes the right to\n-    /// invoke [`mem_map()`](fn.mem_map.html) with memory protection option\n-    /// [`READ`](struct.mprot.html#associatedconstant.READ).\n-    ///\n-    /// If [`FD_SEEK`](struct.rights.html#associatedconstant.FD_SEEK) is set, includes the right to invoke\n-    /// [`fd_pread()`](fn.fd_pread.html).\n-    const FD_READ               = 0x0000000000000002;\n-    /// The right to invoke [`fd_seek()`](fn.fd_seek.html). This flag implies\n-    /// [`FD_TELL`](struct.rights.html#associatedconstant.FD_TELL).\n-    const FD_SEEK               = 0x0000000000000004;\n-    /// The right to invoke [`fd_stat_put()`](fn.fd_stat_put.html) with\n-    /// [`FLAGS`](struct.fdsflags.html#associatedconstant.FLAGS).\n-    const FD_STAT_PUT_FLAGS     = 0x0000000000000008;\n-    /// The right to invoke [`fd_sync()`](fn.fd_sync.html).\n-    ///\n-    /// If [`FILE_OPEN`](struct.rights.html#associatedconstant.FILE_OPEN) is set, includes the right to\n-    /// invoke [`file_open()`](fn.file_open.html) with [`RSYNC`](struct.fdflags.html#associatedconstant.RSYNC) and\n-    /// [`DSYNC`](struct.fdflags.html#associatedconstant.DSYNC).\n-    const FD_SYNC               = 0x0000000000000010;\n-    /// The right to invoke [`fd_seek()`](fn.fd_seek.html) in such a way that the\n-    /// file offset remains unaltered (i.e., [`CUR`](enum.whence.html#variant.CUR) with\n-    /// offset zero).\n-    const FD_TELL               = 0x0000000000000020;\n-    /// The right to invoke [`fd_write()`](fn.fd_write.html) and [`sock_send()`](fn.sock_send.html).\n-    ///\n-    /// If [`MEM_MAP`](struct.rights.html#associatedconstant.MEM_MAP) is set, includes the right to\n-    /// invoke [`mem_map()`](fn.mem_map.html) with memory protection option\n-    /// [`WRITE`](struct.mprot.html#associatedconstant.WRITE).\n-    ///\n-    /// If [`FD_SEEK`](struct.rights.html#associatedconstant.FD_SEEK) is set, includes the right to\n-    /// invoke [`fd_pwrite()`](fn.fd_pwrite.html).\n-    const FD_WRITE              = 0x0000000000000040;\n-    /// The right to invoke [`file_advise()`](fn.file_advise.html).\n-    const FILE_ADVISE           = 0x0000000000000080;\n-    /// The right to invoke [`file_allocate()`](fn.file_allocate.html).\n-    const FILE_ALLOCATE         = 0x0000000000000100;\n-    /// The right to invoke [`file_create()`](fn.file_create.html) with\n-    /// [`DIRECTORY`](enum.filetype.html#variant.DIRECTORY).\n-    const FILE_CREATE_DIRECTORY = 0x0000000000000200;\n-    /// If [`FILE_OPEN`](struct.rights.html#associatedconstant.FILE_OPEN) is set, the right to invoke\n-    /// [`file_open()`](fn.file_open.html) with [`CREAT`](struct.oflags.html#associatedconstant.CREAT).\n-    const FILE_CREATE_FILE      = 0x0000000000000400;\n-    /// The right to invoke [`file_link()`](fn.file_link.html) with the file\n-    /// descriptor as the source directory.\n-    const FILE_LINK_SOURCE      = 0x0000000000001000;\n-    /// The right to invoke [`file_link()`](fn.file_link.html) with the file\n-    /// descriptor as the target directory.\n-    const FILE_LINK_TARGET      = 0x0000000000002000;\n-    /// The right to invoke [`file_open()`](fn.file_open.html).\n-    const FILE_OPEN             = 0x0000000000004000;\n-    /// The right to invoke [`file_readdir()`](fn.file_readdir.html).\n-    const FILE_READDIR          = 0x0000000000008000;\n-    /// The right to invoke [`file_readlink()`](fn.file_readlink.html).\n-    const FILE_READLINK         = 0x0000000000010000;\n-    /// The right to invoke [`file_rename()`](fn.file_rename.html) with the file\n-    /// descriptor as the source directory.\n-    const FILE_RENAME_SOURCE    = 0x0000000000020000;\n-    /// The right to invoke [`file_rename()`](fn.file_rename.html) with the file\n-    /// descriptor as the target directory.\n-    const FILE_RENAME_TARGET    = 0x0000000000040000;\n-    /// The right to invoke [`file_stat_fget()`](fn.file_stat_fget.html).\n-    const FILE_STAT_FGET        = 0x0000000000080000;\n-    /// The right to invoke [`file_stat_fput()`](fn.file_stat_fput.html) with\n-    /// [`SIZE`](struct.fsflags.html#associatedconstant.SIZE).\n-    ///\n-    /// If [`FILE_OPEN`](struct.rights.html#associatedconstant.FILE_OPEN) is set, includes the right to\n-    /// invoke [`file_open()`](fn.file_open.html) with [`TRUNC`](struct.oflags.html#associatedconstant.TRUNC).\n-    const FILE_STAT_FPUT_SIZE   = 0x0000000000100000;\n-    /// The right to invoke [`file_stat_fput()`](fn.file_stat_fput.html) with\n-    /// [`ATIM`](struct.fsflags.html#associatedconstant.ATIM), [`ATIM_NOW`](struct.fsflags.html#associatedconstant.ATIM_NOW), [`MTIM`](struct.fsflags.html#associatedconstant.MTIM),\n-    /// and [`MTIM_NOW`](struct.fsflags.html#associatedconstant.MTIM_NOW).\n-    const FILE_STAT_FPUT_TIMES  = 0x0000000000200000;\n-    /// The right to invoke [`file_stat_get()`](fn.file_stat_get.html).\n-    const FILE_STAT_GET         = 0x0000000000400000;\n-    /// The right to invoke [`file_stat_put()`](fn.file_stat_put.html) with\n-    /// [`ATIM`](struct.fsflags.html#associatedconstant.ATIM), [`ATIM_NOW`](struct.fsflags.html#associatedconstant.ATIM_NOW), [`MTIM`](struct.fsflags.html#associatedconstant.MTIM),\n-    /// and [`MTIM_NOW`](struct.fsflags.html#associatedconstant.MTIM_NOW).\n-    const FILE_STAT_PUT_TIMES   = 0x0000000000800000;\n-    /// The right to invoke [`file_symlink()`](fn.file_symlink.html).\n-    const FILE_SYMLINK          = 0x0000000001000000;\n-    /// The right to invoke [`file_unlink()`](fn.file_unlink.html).\n-    const FILE_UNLINK           = 0x0000000002000000;\n-    /// The right to invoke [`mem_map()`](fn.mem_map.html) with [`mprot`] set to\n-    /// zero.\n-    const MEM_MAP               = 0x0000000004000000;\n-    /// If [`MEM_MAP`](struct.rights.html#associatedconstant.MEM_MAP) is set, the right to invoke\n-    /// [`mem_map()`](fn.mem_map.html) with [`EXEC`](struct.mprot.html#associatedconstant.EXEC).\n-    const MEM_MAP_EXEC          = 0x0000000008000000;\n-    /// If [`FD_READ`](struct.rights.html#associatedconstant.FD_READ) is set, includes the right to\n-    /// invoke [`poll()`](fn.poll.html) to subscribe to [`FD_READ`](enum.eventtype.html#variant.FD_READ).\n-    ///\n-    /// If [`FD_WRITE`](struct.rights.html#associatedconstant.FD_WRITE) is set, includes the right to\n-    /// invoke [`poll()`](fn.poll.html) to subscribe to [`FD_WRITE`](enum.eventtype.html#variant.FD_WRITE).\n-    const POLL_FD_READWRITE     = 0x0000000010000000;\n-    /// The right to invoke [`poll()`](fn.poll.html) to subscribe to\n-    /// [`PROC_TERMINATE`](enum.eventtype.html#variant.PROC_TERMINATE).\n-    const POLL_PROC_TERMINATE   = 0x0000000040000000;\n-    /// The right to invoke [`proc_exec()`](fn.proc_exec.html).\n-    const PROC_EXEC             = 0x0000000100000000;\n-    /// The right to invoke [`sock_shutdown()`](fn.sock_shutdown.html).\n-    const SOCK_SHUTDOWN         = 0x0000008000000000;\n-  }\n-}\n-\n-bitflags! {\n-  /// Flags returned by [`sock_recv()`](fn.sock_recv.html).\n-  #[repr(C)]\n-  pub struct roflags: u16 {\n-    /// Returned by [`sock_recv()`](fn.sock_recv.html): List of file descriptors\n-    /// has been truncated.\n-    const FDS_TRUNCATED  = 0x0001;\n-    /// Returned by [`sock_recv()`](fn.sock_recv.html): Message data has been\n-    /// truncated.\n-    const DATA_TRUNCATED = 0x0008;\n-  }\n-}\n-\n-/// Indicates whether an object is stored in private or shared\n-/// memory.\n-#[repr(u8)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-#[non_exhaustive]\n-pub enum scope {\n-    /// The object is stored in private memory.\n-    PRIVATE = 4,\n-    /// The object is stored in shared memory.\n-    SHARED = 8,\n-}\n-\n-bitflags! {\n-  /// Which channels on a socket need to be shut down.\n-  #[repr(C)]\n-  pub struct sdflags: u8 {\n-    /// Disables further receive operations.\n-    const RD = 0x01;\n-    /// Disables further send operations.\n-    const WR = 0x02;\n-  }\n-}\n-\n-bitflags! {\n-  /// Flags provided to [`sock_send()`](fn.sock_send.html). As there are currently no flags\n-  /// defined, it must be set to zero.\n-  #[repr(C)]\n-  pub struct siflags: u16 {\n-    const DEFAULT = 0;\n-  }\n-}\n-\n-/// Signal condition.\n-#[repr(u8)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-#[non_exhaustive]\n-pub enum signal {\n-    /// Process abort signal.\n-    ///\n-    /// Action: Terminates the process.\n-    ABRT = 1,\n-    /// Alarm clock.\n-    ///\n-    /// Action: Terminates the process.\n-    ALRM = 2,\n-    /// Access to an undefined portion of a memory object.\n-    ///\n-    /// Action: Terminates the process.\n-    BUS = 3,\n-    /// Child process terminated, stopped, or continued.\n-    ///\n-    /// Action: Ignored.\n-    CHLD = 4,\n-    /// Continue executing, if stopped.\n-    ///\n-    /// Action: Continues executing, if stopped.\n-    CONT = 5,\n-    /// Erroneous arithmetic operation.\n-    ///\n-    /// Action: Terminates the process.\n-    FPE = 6,\n-    /// Hangup.\n-    ///\n-    /// Action: Terminates the process.\n-    HUP = 7,\n-    /// Illegal instruction.\n-    ///\n-    /// Action: Terminates the process.\n-    ILL = 8,\n-    /// Terminate interrupt signal.\n-    ///\n-    /// Action: Terminates the process.\n-    INT = 9,\n-    /// Kill.\n-    ///\n-    /// Action: Terminates the process.\n-    KILL = 10,\n-    /// Write on a pipe with no one to read it.\n-    ///\n-    /// Action: Ignored.\n-    PIPE = 11,\n-    /// Terminal quit signal.\n-    ///\n-    /// Action: Terminates the process.\n-    QUIT = 12,\n-    /// Invalid memory reference.\n-    ///\n-    /// Action: Terminates the process.\n-    SEGV = 13,\n-    /// Stop executing.\n-    ///\n-    /// Action: Stops executing.\n-    STOP = 14,\n-    /// Bad system call.\n-    ///\n-    /// Action: Terminates the process.\n-    SYS = 15,\n-    /// Termination signal.\n-    ///\n-    /// Action: Terminates the process.\n-    TERM = 16,\n-    /// Trace/breakpoint trap.\n-    ///\n-    /// Action: Terminates the process.\n-    TRAP = 17,\n-    /// Terminal stop signal.\n-    ///\n-    /// Action: Stops executing.\n-    TSTP = 18,\n-    /// Background process attempting read.\n-    ///\n-    /// Action: Stops executing.\n-    TTIN = 19,\n-    /// Background process attempting write.\n-    ///\n-    /// Action: Stops executing.\n-    TTOU = 20,\n-    /// High bandwidth data is available at a socket.\n-    ///\n-    /// Action: Ignored.\n-    URG = 21,\n-    /// User-defined signal 1.\n-    ///\n-    /// Action: Terminates the process.\n-    USR1 = 22,\n-    /// User-defined signal 2.\n-    ///\n-    /// Action: Terminates the process.\n-    USR2 = 23,\n-    /// Virtual timer expired.\n-    ///\n-    /// Action: Terminates the process.\n-    VTALRM = 24,\n-    /// CPU time limit exceeded.\n-    ///\n-    /// Action: Terminates the process.\n-    XCPU = 25,\n-    /// File size limit exceeded.\n-    ///\n-    /// Action: Terminates the process.\n-    XFSZ = 26,\n-}\n-\n-bitflags! {\n-  /// Flags determining how the timestamp provided in\n-  /// [`subscription.union.clock.timeout`](struct.subscription_clock.html#structfield.timeout) should be interpreted.\n-  #[repr(C)]\n-  pub struct subclockflags: u16 {\n-    /// If set, treat the timestamp provided in\n-    /// [`subscription.union.clock.timeout`](struct.subscription_clock.html#structfield.timeout) as an absolute timestamp\n-    /// of clock [`subscription.union.clock.clock_id`](struct.subscription_clock.html#structfield.clock_id).\n-    ///\n-    /// If clear, treat the timestamp provided in\n-    /// [`subscription.union.clock.timeout`](struct.subscription_clock.html#structfield.timeout) relative to the current\n-    /// time value of clock [`subscription.union.clock.clock_id`](struct.subscription_clock.html#structfield.clock_id).\n-    const ABSTIME = 0x0001;\n-  }\n-}\n-\n-bitflags! {\n-  /// Flags influencing the method of polling for read or writing on\n-  /// a file descriptor.\n-  #[repr(C)]\n-  pub struct subrwflags: u16 {\n-    /// Deprecated. Must be set by callers and ignored by\n-    /// implementations.\n-    const POLL = 0x0001;\n-  }\n-}\n-\n-/// Unique system-local identifier of a thread. This identifier is\n-/// only valid during the lifetime of the thread.\n-///\n-/// Threads must be aware of their thread identifier, as it is\n-/// written it into locks when acquiring them for writing. It is\n-/// not advised to use these identifiers for any other purpose.\n-///\n-/// As the thread identifier is also stored in [`lock`] when\n-/// [`LOCK_WRLOCKED`](constant.LOCK_WRLOCKED.html) is set, the top two bits of the thread\n-/// must always be set to zero.\n-#[repr(C)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-pub struct tid(pub u32);\n-\n-/// Timestamp in nanoseconds.\n-pub type timestamp = u64;\n-\n-bitflags! {\n-  /// Specifies whether files are unlinked or directories are\n-  /// removed.\n-  #[repr(C)]\n-  pub struct ulflags: u8 {\n-    /// If set, removes a directory. Otherwise, unlinks any\n-    /// non-directory file.\n-    const REMOVEDIR = 0x01;\n-  }\n-}\n-\n-/// User-provided value that can be attached to objects that is\n-/// retained when extracted from the kernel.\n-pub type userdata = u64;\n-\n-/// Relative to which position the offset of the file descriptor\n-/// should be set.\n-#[repr(u8)]\n-#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n-#[non_exhaustive]\n-pub enum whence {\n-    /// Seek relative to current position.\n-    CUR = 1,\n-    /// Seek relative to end-of-file.\n-    END = 2,\n-    /// Seek relative to start-of-file.\n-    SET = 3,\n-}\n-\n-/// Auxiliary vector entry.\n-///\n-/// The auxiliary vector is a list of key-value pairs that is\n-/// provided to the process on startup. Unlike structures, it is\n-/// extensible, as it is possible to add new records later on.\n-/// The auxiliary vector is always terminated by an entry having\n-/// type [`NULL`](enum.auxtype.html#variant.NULL).\n-///\n-/// The auxiliary vector is part of the x86-64 ABI, but is used by\n-/// this environment on all architectures.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct auxv {\n-    /// The type of the auxiliary vector entry.\n-    pub a_type: auxtype,\n-    pub union: auxv_union,\n-}\n-/// A union inside `auxv`.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub union auxv_union {\n-    /// Used when `a_type` is [`ARGDATALEN`](enum.auxtype.html#variant.ARGDATALEN), [`CANARYLEN`](enum.auxtype.html#variant.CANARYLEN), [`NCPUS`](enum.auxtype.html#variant.NCPUS), [`PAGESZ`](enum.auxtype.html#variant.PAGESZ), [`PHNUM`](enum.auxtype.html#variant.PHNUM), or [`TID`](enum.auxtype.html#variant.TID).\n-    /// A numerical value.\n-    pub a_val: usize,\n-    /// Used when `a_type` is [`ARGDATA`](enum.auxtype.html#variant.ARGDATA), [`BASE`](enum.auxtype.html#variant.BASE), [`CANARY`](enum.auxtype.html#variant.CANARY), [`PHDR`](enum.auxtype.html#variant.PHDR), [`PID`](enum.auxtype.html#variant.PID), or [`SYSINFO_EHDR`](enum.auxtype.html#variant.SYSINFO_EHDR).\n-    /// A pointer value.\n-    pub a_ptr: *mut (),\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn auxv_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<auxv>(), 8);\n-    assert_eq!(core::mem::align_of::<auxv>(), 4);\n-    unsafe {\n-        let obj: auxv = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.a_type as *const _ as usize - base, 0);\n-        assert_eq!(&obj.union.a_val as *const _ as usize - base, 4);\n-        assert_eq!(&obj.union.a_ptr as *const _ as usize - base, 4);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn auxv_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<auxv>(), 16);\n-    assert_eq!(core::mem::align_of::<auxv>(), 8);\n-    unsafe {\n-        let obj: auxv = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.a_type as *const _ as usize - base, 0);\n-        assert_eq!(&obj.union.a_val as *const _ as usize - base, 8);\n-        assert_eq!(&obj.union.a_ptr as *const _ as usize - base, 8);\n-    }\n-}\n-\n-/// A region of memory for scatter/gather writes.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct ciovec {\n-    /// The address and length of the buffer to be written.\n-    pub buf: (*const (), usize),\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn ciovec_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<ciovec>(), 8);\n-    assert_eq!(core::mem::align_of::<ciovec>(), 4);\n-    unsafe {\n-        let obj: ciovec = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.buf.0 as *const _ as usize - base, 0);\n-        assert_eq!(&obj.buf.1 as *const _ as usize - base, 4);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn ciovec_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<ciovec>(), 16);\n-    assert_eq!(core::mem::align_of::<ciovec>(), 8);\n-    unsafe {\n-        let obj: ciovec = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.buf.0 as *const _ as usize - base, 0);\n-        assert_eq!(&obj.buf.1 as *const _ as usize - base, 8);\n-    }\n-}\n-\n-/// A directory entry.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct dirent {\n-    /// The offset of the next directory entry stored in this\n-    /// directory.\n-    pub d_next: dircookie,\n-    /// The serial number of the file referred to by this\n-    /// directory entry.\n-    pub d_ino: inode,\n-    /// The length of the name of the directory entry.\n-    pub d_namlen: u32,\n-    /// The type of the file referred to by this directory\n-    /// entry.\n-    pub d_type: filetype,\n-}\n-#[test]\n-fn dirent_layout_test() {\n-    assert_eq!(core::mem::size_of::<dirent>(), 24);\n-    assert_eq!(core::mem::align_of::<dirent>(), 8);\n-    unsafe {\n-        let obj: dirent = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.d_next as *const _ as usize - base, 0);\n-        assert_eq!(&obj.d_ino as *const _ as usize - base, 8);\n-        assert_eq!(&obj.d_namlen as *const _ as usize - base, 16);\n-        assert_eq!(&obj.d_type as *const _ as usize - base, 20);\n-    }\n-}\n-\n-/// An event that occurred.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct event {\n-    /// User-provided value that got attached to\n-    /// [`subscription.userdata`](struct.subscription.html#structfield.userdata).\n-    pub userdata: userdata,\n-    /// If non-zero, an error that occurred while processing\n-    /// the subscription request.\n-    pub error: errno,\n-    /// The type of the event that occurred.\n-    pub type_: eventtype,\n-    pub union: event_union,\n-}\n-/// A union inside `event`.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub union event_union {\n-    /// Used when `type_` is [`FD_READ`](enum.eventtype.html#variant.FD_READ) or [`FD_WRITE`](enum.eventtype.html#variant.FD_WRITE).\n-    pub fd_readwrite: event_fd_readwrite,\n-    /// Used when `type_` is [`PROC_TERMINATE`](enum.eventtype.html#variant.PROC_TERMINATE).\n-    pub proc_terminate: event_proc_terminate,\n-}\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct event_fd_readwrite {\n-    /// The number of bytes available\n-    /// for reading or writing.\n-    pub nbytes: filesize,\n-    /// Obsolete.\n-    pub unused: [u8; 4],\n-    /// The state of the file\n-    /// descriptor.\n-    pub flags: eventrwflags,\n-}\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct event_proc_terminate {\n-    /// Obsolete.\n-    pub unused: [u8; 4],\n-    /// If zero, the process has\n-    /// exited.\n-    /// Otherwise, the signal\n-    /// condition causing it to\n-    /// terminated.\n-    pub signal: signal,\n-    /// If exited, the exit code of\n-    /// the process.\n-    pub exitcode: exitcode,\n-}\n-#[test]\n-fn event_layout_test() {\n-    assert_eq!(core::mem::size_of::<event>(), 32);\n-    assert_eq!(core::mem::align_of::<event>(), 8);\n-    unsafe {\n-        let obj: event = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.userdata as *const _ as usize - base, 0);\n-        assert_eq!(&obj.error as *const _ as usize - base, 8);\n-        assert_eq!(&obj.type_ as *const _ as usize - base, 10);\n-        assert_eq!(&obj.union.fd_readwrite.nbytes as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.fd_readwrite.unused as *const _ as usize - base, 24);\n-        assert_eq!(&obj.union.fd_readwrite.flags as *const _ as usize - base, 28);\n-        assert_eq!(&obj.union.proc_terminate.unused as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.proc_terminate.signal as *const _ as usize - base, 20);\n-        assert_eq!(&obj.union.proc_terminate.exitcode as *const _ as usize - base, 24);\n-    }\n-}\n-\n-/// File descriptor attributes.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct fdstat {\n-    /// File type.\n-    pub fs_filetype: filetype,\n-    /// File descriptor flags.\n-    pub fs_flags: fdflags,\n-    /// Rights that apply to this file descriptor.\n-    pub fs_rights_base: rights,\n-    /// Maximum set of rights that can be installed on new\n-    /// file descriptors that are created through this file\n-    /// descriptor, e.g., through [`file_open()`](fn.file_open.html).\n-    pub fs_rights_inheriting: rights,\n-}\n-#[test]\n-fn fdstat_layout_test() {\n-    assert_eq!(core::mem::size_of::<fdstat>(), 24);\n-    assert_eq!(core::mem::align_of::<fdstat>(), 8);\n-    unsafe {\n-        let obj: fdstat = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.fs_filetype as *const _ as usize - base, 0);\n-        assert_eq!(&obj.fs_flags as *const _ as usize - base, 2);\n-        assert_eq!(&obj.fs_rights_base as *const _ as usize - base, 8);\n-        assert_eq!(&obj.fs_rights_inheriting as *const _ as usize - base, 16);\n-    }\n-}\n-\n-/// File attributes.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct filestat {\n-    /// Device ID of device containing the file.\n-    pub st_dev: device,\n-    /// File serial number.\n-    pub st_ino: inode,\n-    /// File type.\n-    pub st_filetype: filetype,\n-    /// Number of hard links to the file.\n-    pub st_nlink: linkcount,\n-    /// For regular files, the file size in bytes. For\n-    /// symbolic links, the length in bytes of the pathname\n-    /// contained in the symbolic link.\n-    pub st_size: filesize,\n-    /// Last data access timestamp.\n-    pub st_atim: timestamp,\n-    /// Last data modification timestamp.\n-    pub st_mtim: timestamp,\n-    /// Last file status change timestamp.\n-    pub st_ctim: timestamp,\n-}\n-#[test]\n-fn filestat_layout_test() {\n-    assert_eq!(core::mem::size_of::<filestat>(), 56);\n-    assert_eq!(core::mem::align_of::<filestat>(), 8);\n-    unsafe {\n-        let obj: filestat = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.st_dev as *const _ as usize - base, 0);\n-        assert_eq!(&obj.st_ino as *const _ as usize - base, 8);\n-        assert_eq!(&obj.st_filetype as *const _ as usize - base, 16);\n-        assert_eq!(&obj.st_nlink as *const _ as usize - base, 20);\n-        assert_eq!(&obj.st_size as *const _ as usize - base, 24);\n-        assert_eq!(&obj.st_atim as *const _ as usize - base, 32);\n-        assert_eq!(&obj.st_mtim as *const _ as usize - base, 40);\n-        assert_eq!(&obj.st_ctim as *const _ as usize - base, 48);\n-    }\n-}\n-\n-/// A region of memory for scatter/gather reads.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct iovec {\n-    /// The address and length of the buffer to be filled.\n-    pub buf: (*mut (), usize),\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn iovec_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<iovec>(), 8);\n-    assert_eq!(core::mem::align_of::<iovec>(), 4);\n-    unsafe {\n-        let obj: iovec = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.buf.0 as *const _ as usize - base, 0);\n-        assert_eq!(&obj.buf.1 as *const _ as usize - base, 4);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn iovec_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<iovec>(), 16);\n-    assert_eq!(core::mem::align_of::<iovec>(), 8);\n-    unsafe {\n-        let obj: iovec = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.buf.0 as *const _ as usize - base, 0);\n-        assert_eq!(&obj.buf.1 as *const _ as usize - base, 8);\n-    }\n-}\n-\n-/// Path lookup properties.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct lookup {\n-    /// The working directory at which the resolution of the\n-    /// path starts.\n-    pub fd: fd,\n-    /// Flags determining the method of how the path is\n-    /// resolved.\n-    pub flags: lookupflags,\n-}\n-#[test]\n-fn lookup_layout_test() {\n-    assert_eq!(core::mem::size_of::<lookup>(), 8);\n-    assert_eq!(core::mem::align_of::<lookup>(), 4);\n-    unsafe {\n-        let obj: lookup = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.fd as *const _ as usize - base, 0);\n-        assert_eq!(&obj.flags as *const _ as usize - base, 4);\n-    }\n-}\n-\n-/// Entry point for a process (`_start`).\n-///\n-/// **auxv**:\n-/// The auxiliary vector. See [`auxv`].\n-pub type processentry = unsafe extern \"C\" fn(auxv: *const auxv) -> ();\n-\n-/// Arguments of [`sock_recv()`](fn.sock_recv.html).\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct recv_in {\n-    /// List of scatter/gather vectors where message data\n-    /// should be stored.\n-    pub ri_data: (*const iovec, usize),\n-    /// Buffer where numbers of incoming file descriptors\n-    /// should be stored.\n-    pub ri_fds: (*mut fd, usize),\n-    /// Message flags.\n-    pub ri_flags: riflags,\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn recv_in_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<recv_in>(), 20);\n-    assert_eq!(core::mem::align_of::<recv_in>(), 4);\n-    unsafe {\n-        let obj: recv_in = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.ri_data.0 as *const _ as usize - base, 0);\n-        assert_eq!(&obj.ri_data.1 as *const _ as usize - base, 4);\n-        assert_eq!(&obj.ri_fds.0 as *const _ as usize - base, 8);\n-        assert_eq!(&obj.ri_fds.1 as *const _ as usize - base, 12);\n-        assert_eq!(&obj.ri_flags as *const _ as usize - base, 16);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn recv_in_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<recv_in>(), 40);\n-    assert_eq!(core::mem::align_of::<recv_in>(), 8);\n-    unsafe {\n-        let obj: recv_in = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.ri_data.0 as *const _ as usize - base, 0);\n-        assert_eq!(&obj.ri_data.1 as *const _ as usize - base, 8);\n-        assert_eq!(&obj.ri_fds.0 as *const _ as usize - base, 16);\n-        assert_eq!(&obj.ri_fds.1 as *const _ as usize - base, 24);\n-        assert_eq!(&obj.ri_flags as *const _ as usize - base, 32);\n-    }\n-}\n-\n-/// Results of [`sock_recv()`](fn.sock_recv.html).\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct recv_out {\n-    /// Number of bytes stored in [`recv_in.ri_data`](struct.recv_in.html#structfield.ri_data).\n-    pub ro_datalen: usize,\n-    /// Number of file descriptors stored in [`recv_in.ri_fds`](struct.recv_in.html#structfield.ri_fds).\n-    pub ro_fdslen: usize,\n-    /// Fields that were used by previous implementations.\n-    pub ro_unused: [u8; 40],\n-    /// Message flags.\n-    pub ro_flags: roflags,\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn recv_out_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<recv_out>(), 52);\n-    assert_eq!(core::mem::align_of::<recv_out>(), 4);\n-    unsafe {\n-        let obj: recv_out = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.ro_datalen as *const _ as usize - base, 0);\n-        assert_eq!(&obj.ro_fdslen as *const _ as usize - base, 4);\n-        assert_eq!(&obj.ro_unused as *const _ as usize - base, 8);\n-        assert_eq!(&obj.ro_flags as *const _ as usize - base, 48);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn recv_out_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<recv_out>(), 64);\n-    assert_eq!(core::mem::align_of::<recv_out>(), 8);\n-    unsafe {\n-        let obj: recv_out = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.ro_datalen as *const _ as usize - base, 0);\n-        assert_eq!(&obj.ro_fdslen as *const _ as usize - base, 8);\n-        assert_eq!(&obj.ro_unused as *const _ as usize - base, 16);\n-        assert_eq!(&obj.ro_flags as *const _ as usize - base, 56);\n-    }\n-}\n-\n-/// Arguments of [`sock_send()`](fn.sock_send.html).\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct send_in {\n-    /// List of scatter/gather vectors where message data\n-    /// should be retrieved.\n-    pub si_data: (*const ciovec, usize),\n-    /// File descriptors that need to be attached to the\n-    /// message.\n-    pub si_fds: (*const fd, usize),\n-    /// Message flags.\n-    pub si_flags: siflags,\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn send_in_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<send_in>(), 20);\n-    assert_eq!(core::mem::align_of::<send_in>(), 4);\n-    unsafe {\n-        let obj: send_in = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.si_data.0 as *const _ as usize - base, 0);\n-        assert_eq!(&obj.si_data.1 as *const _ as usize - base, 4);\n-        assert_eq!(&obj.si_fds.0 as *const _ as usize - base, 8);\n-        assert_eq!(&obj.si_fds.1 as *const _ as usize - base, 12);\n-        assert_eq!(&obj.si_flags as *const _ as usize - base, 16);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn send_in_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<send_in>(), 40);\n-    assert_eq!(core::mem::align_of::<send_in>(), 8);\n-    unsafe {\n-        let obj: send_in = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.si_data.0 as *const _ as usize - base, 0);\n-        assert_eq!(&obj.si_data.1 as *const _ as usize - base, 8);\n-        assert_eq!(&obj.si_fds.0 as *const _ as usize - base, 16);\n-        assert_eq!(&obj.si_fds.1 as *const _ as usize - base, 24);\n-        assert_eq!(&obj.si_flags as *const _ as usize - base, 32);\n-    }\n-}\n-\n-/// Results of [`sock_send()`](fn.sock_send.html).\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct send_out {\n-    /// Number of bytes transmitted.\n-    pub so_datalen: usize,\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn send_out_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<send_out>(), 4);\n-    assert_eq!(core::mem::align_of::<send_out>(), 4);\n-    unsafe {\n-        let obj: send_out = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.so_datalen as *const _ as usize - base, 0);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn send_out_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<send_out>(), 8);\n-    assert_eq!(core::mem::align_of::<send_out>(), 8);\n-    unsafe {\n-        let obj: send_out = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.so_datalen as *const _ as usize - base, 0);\n-    }\n-}\n-\n-/// Subscription to an event.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct subscription {\n-    /// User-provided value that is attached to the\n-    /// subscription in the kernel and returned through\n-    /// [`event.userdata`](struct.event.html#structfield.userdata).\n-    pub userdata: userdata,\n-    /// Used by previous implementations. Ignored.\n-    pub unused: u16,\n-    /// The type of the event to which to subscribe.\n-    ///\n-    /// Currently, [`CONDVAR`](enum.eventtype.html#variant.CONDVAR),\n-    /// [`LOCK_RDLOCK`](enum.eventtype.html#variant.LOCK_RDLOCK), and [`LOCK_WRLOCK`](enum.eventtype.html#variant.LOCK_WRLOCK)\n-    /// must be provided as the first subscription and may\n-    /// only be followed by up to one other subscription,\n-    /// having type [`CLOCK`](enum.eventtype.html#variant.CLOCK).\n-    pub type_: eventtype,\n-    pub union: subscription_union,\n-}\n-/// A union inside `subscription`.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub union subscription_union {\n-    /// Used when `type_` is [`CLOCK`](enum.eventtype.html#variant.CLOCK).\n-    pub clock: subscription_clock,\n-    /// Used when `type_` is [`CONDVAR`](enum.eventtype.html#variant.CONDVAR).\n-    pub condvar: subscription_condvar,\n-    /// Used when `type_` is [`FD_READ`](enum.eventtype.html#variant.FD_READ) or [`FD_WRITE`](enum.eventtype.html#variant.FD_WRITE).\n-    pub fd_readwrite: subscription_fd_readwrite,\n-    /// Used when `type_` is [`LOCK_RDLOCK`](enum.eventtype.html#variant.LOCK_RDLOCK) or [`LOCK_WRLOCK`](enum.eventtype.html#variant.LOCK_WRLOCK).\n-    pub lock: subscription_lock,\n-    /// Used when `type_` is [`PROC_TERMINATE`](enum.eventtype.html#variant.PROC_TERMINATE).\n-    pub proc_terminate: subscription_proc_terminate,\n-}\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct subscription_clock {\n-    /// The user-defined unique\n-    /// identifier of the clock.\n-    pub identifier: userdata,\n-    /// The clock against which the\n-    /// timestamp should be compared.\n-    pub clock_id: clockid,\n-    /// The absolute or relative\n-    /// timestamp.\n-    pub timeout: timestamp,\n-    /// The amount of time that the\n-    /// kernel may wait additionally\n-    /// to coalesce with other events.\n-    pub precision: timestamp,\n-    /// Flags specifying whether the\n-    /// timeout is absolute or\n-    /// relative.\n-    pub flags: subclockflags,\n-}\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct subscription_condvar {\n-    /// The condition variable on\n-    /// which to wait to be woken up.\n-    pub condvar: *mut condvar,\n-    /// The lock that will be\n-    /// released while waiting.\n-    ///\n-    /// The lock will be reacquired\n-    /// for writing when the condition\n-    /// variable triggers.\n-    pub lock: *mut lock,\n-    /// Whether the condition variable\n-    /// is stored in private or shared\n-    /// memory.\n-    pub condvar_scope: scope,\n-    /// Whether the lock is stored in\n-    /// private or shared memory.\n-    pub lock_scope: scope,\n-}\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct subscription_fd_readwrite {\n-    /// The file descriptor on which\n-    /// to wait for it to become ready\n-    /// for reading or writing.\n-    pub fd: fd,\n-    /// Under which conditions to\n-    /// trigger.\n-    pub flags: subrwflags,\n-}\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct subscription_lock {\n-    /// The lock that will be acquired\n-    /// for reading or writing.\n-    pub lock: *mut lock,\n-    /// Whether the lock is stored in\n-    /// private or shared memory.\n-    pub lock_scope: scope,\n-}\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct subscription_proc_terminate {\n-    /// The process descriptor on\n-    /// which to wait for process\n-    /// termination.\n-    pub fd: fd,\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn subscription_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<subscription>(), 56);\n-    assert_eq!(core::mem::align_of::<subscription>(), 8);\n-    unsafe {\n-        let obj: subscription = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.userdata as *const _ as usize - base, 0);\n-        assert_eq!(&obj.unused as *const _ as usize - base, 8);\n-        assert_eq!(&obj.type_ as *const _ as usize - base, 10);\n-        assert_eq!(&obj.union.clock.identifier as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.clock.clock_id as *const _ as usize - base, 24);\n-        assert_eq!(&obj.union.clock.timeout as *const _ as usize - base, 32);\n-        assert_eq!(&obj.union.clock.precision as *const _ as usize - base, 40);\n-        assert_eq!(&obj.union.clock.flags as *const _ as usize - base, 48);\n-        assert_eq!(&obj.union.condvar.condvar as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.condvar.lock as *const _ as usize - base, 20);\n-        assert_eq!(&obj.union.condvar.condvar_scope as *const _ as usize - base, 24);\n-        assert_eq!(&obj.union.condvar.lock_scope as *const _ as usize - base, 25);\n-        assert_eq!(&obj.union.fd_readwrite.fd as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.fd_readwrite.flags as *const _ as usize - base, 20);\n-        assert_eq!(&obj.union.lock.lock as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.lock.lock_scope as *const _ as usize - base, 20);\n-        assert_eq!(&obj.union.proc_terminate.fd as *const _ as usize - base, 16);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn subscription_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<subscription>(), 56);\n-    assert_eq!(core::mem::align_of::<subscription>(), 8);\n-    unsafe {\n-        let obj: subscription = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.userdata as *const _ as usize - base, 0);\n-        assert_eq!(&obj.unused as *const _ as usize - base, 8);\n-        assert_eq!(&obj.type_ as *const _ as usize - base, 10);\n-        assert_eq!(&obj.union.clock.identifier as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.clock.clock_id as *const _ as usize - base, 24);\n-        assert_eq!(&obj.union.clock.timeout as *const _ as usize - base, 32);\n-        assert_eq!(&obj.union.clock.precision as *const _ as usize - base, 40);\n-        assert_eq!(&obj.union.clock.flags as *const _ as usize - base, 48);\n-        assert_eq!(&obj.union.condvar.condvar as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.condvar.lock as *const _ as usize - base, 24);\n-        assert_eq!(&obj.union.condvar.condvar_scope as *const _ as usize - base, 32);\n-        assert_eq!(&obj.union.condvar.lock_scope as *const _ as usize - base, 33);\n-        assert_eq!(&obj.union.fd_readwrite.fd as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.fd_readwrite.flags as *const _ as usize - base, 20);\n-        assert_eq!(&obj.union.lock.lock as *const _ as usize - base, 16);\n-        assert_eq!(&obj.union.lock.lock_scope as *const _ as usize - base, 24);\n-        assert_eq!(&obj.union.proc_terminate.fd as *const _ as usize - base, 16);\n-    }\n-}\n-\n-/// The Thread Control Block (TCB).\n-///\n-/// After a thread begins execution (at program startup or when\n-/// created through [`thread_create()`](fn.thread_create.html)), the CPU's registers\n-/// controlling Thread-Local Storage (TLS) will already be\n-/// initialized. They will point to an area only containing the\n-/// TCB.\n-///\n-/// If the thread needs space for storing thread-specific\n-/// variables, the thread may allocate a larger area and adjust\n-/// the CPU's registers to point to that area instead. However, it\n-/// does need to make sure that the TCB is copied over to the new\n-/// TLS area.\n-///\n-/// The purpose of the TCB is that it allows light-weight\n-/// emulators to store information related to individual threads.\n-/// For example, it may be used to store a copy of the CPU\n-/// registers prior emulation, so that TLS for the host system\n-/// can be restored if needed.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct tcb {\n-    /// Pointer that may be freely assigned by the system. Its\n-    /// value cannot be interpreted by the application.\n-    pub parent: *mut (),\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn tcb_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<tcb>(), 4);\n-    assert_eq!(core::mem::align_of::<tcb>(), 4);\n-    unsafe {\n-        let obj: tcb = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.parent as *const _ as usize - base, 0);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn tcb_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<tcb>(), 8);\n-    assert_eq!(core::mem::align_of::<tcb>(), 8);\n-    unsafe {\n-        let obj: tcb = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.parent as *const _ as usize - base, 0);\n-    }\n-}\n-\n-/// Entry point for additionally created threads.\n-///\n-/// `tid`: thread ID of the current thread.\n-///\n-/// `aux`: copy of the value stored in\n-/// [`threadattr.argument`](struct.threadattr.html#structfield.argument).\n-pub type threadentry = unsafe extern \"C\" fn(tid: tid, aux: *mut ()) -> ();\n-\n-/// Attributes for thread creation.\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct threadattr {\n-    /// Initial program counter value.\n-    pub entry_point: threadentry,\n-    /// Region allocated to serve as stack space.\n-    pub stack: (*mut (), usize),\n-    /// Argument to be forwarded to the entry point function.\n-    pub argument: *mut (),\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"32\")]\n-fn threadattr_layout_test_32() {\n-    assert_eq!(core::mem::size_of::<threadattr>(), 16);\n-    assert_eq!(core::mem::align_of::<threadattr>(), 4);\n-    unsafe {\n-        let obj: threadattr = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.entry_point as *const _ as usize - base, 0);\n-        assert_eq!(&obj.stack.0 as *const _ as usize - base, 4);\n-        assert_eq!(&obj.stack.1 as *const _ as usize - base, 8);\n-        assert_eq!(&obj.argument as *const _ as usize - base, 12);\n-    }\n-}\n-#[test]\n-#[cfg(target_pointer_width = \"64\")]\n-fn threadattr_layout_test_64() {\n-    assert_eq!(core::mem::size_of::<threadattr>(), 32);\n-    assert_eq!(core::mem::align_of::<threadattr>(), 8);\n-    unsafe {\n-        let obj: threadattr = core::mem::uninitialized();\n-        let base = &obj as *const _ as usize;\n-        assert_eq!(&obj.entry_point as *const _ as usize - base, 0);\n-        assert_eq!(&obj.stack.0 as *const _ as usize - base, 8);\n-        assert_eq!(&obj.stack.1 as *const _ as usize - base, 16);\n-        assert_eq!(&obj.argument as *const _ as usize - base, 24);\n-    }\n-}\n-\n-/// The table with pointers to all syscall implementations.\n-#[allow(improper_ctypes)]\n-extern \"C\" {\n-    fn cloudabi_sys_clock_res_get(_: clockid, _: *mut timestamp) -> errno;\n-    fn cloudabi_sys_clock_time_get(_: clockid, _: timestamp, _: *mut timestamp) -> errno;\n-    fn cloudabi_sys_condvar_signal(_: *mut condvar, _: scope, _: nthreads) -> errno;\n-    fn cloudabi_sys_fd_close(_: fd) -> errno;\n-    fn cloudabi_sys_fd_create1(_: filetype, _: *mut fd) -> errno;\n-    fn cloudabi_sys_fd_create2(_: filetype, _: *mut fd, _: *mut fd) -> errno;\n-    fn cloudabi_sys_fd_datasync(_: fd) -> errno;\n-    fn cloudabi_sys_fd_dup(_: fd, _: *mut fd) -> errno;\n-    fn cloudabi_sys_fd_pread(_: fd, _: *const iovec, _: usize, _: filesize, _: *mut usize)\n-    -> errno;\n-    fn cloudabi_sys_fd_pwrite(\n-        _: fd,\n-        _: *const ciovec,\n-        _: usize,\n-        _: filesize,\n-        _: *mut usize,\n-    ) -> errno;\n-    fn cloudabi_sys_fd_read(_: fd, _: *const iovec, _: usize, _: *mut usize) -> errno;\n-    fn cloudabi_sys_fd_replace(_: fd, _: fd) -> errno;\n-    fn cloudabi_sys_fd_seek(_: fd, _: filedelta, _: whence, _: *mut filesize) -> errno;\n-    fn cloudabi_sys_fd_stat_get(_: fd, _: *mut fdstat) -> errno;\n-    fn cloudabi_sys_fd_stat_put(_: fd, _: *const fdstat, _: fdsflags) -> errno;\n-    fn cloudabi_sys_fd_sync(_: fd) -> errno;\n-    fn cloudabi_sys_fd_write(_: fd, _: *const ciovec, _: usize, _: *mut usize) -> errno;\n-    fn cloudabi_sys_file_advise(_: fd, _: filesize, _: filesize, _: advice) -> errno;\n-    fn cloudabi_sys_file_allocate(_: fd, _: filesize, _: filesize) -> errno;\n-    fn cloudabi_sys_file_create(_: fd, _: *const u8, _: usize, _: filetype) -> errno;\n-    fn cloudabi_sys_file_link(\n-        _: lookup,\n-        _: *const u8,\n-        _: usize,\n-        _: fd,\n-        _: *const u8,\n-        _: usize,\n-    ) -> errno;\n-    fn cloudabi_sys_file_open(\n-        _: lookup,\n-        _: *const u8,\n-        _: usize,\n-        _: oflags,\n-        _: *const fdstat,\n-        _: *mut fd,\n-    ) -> errno;\n-    fn cloudabi_sys_file_readdir(_: fd, _: *mut (), _: usize, _: dircookie, _: *mut usize)\n-    -> errno;\n-    fn cloudabi_sys_file_readlink(\n-        _: fd,\n-        _: *const u8,\n-        _: usize,\n-        _: *mut u8,\n-        _: usize,\n-        _: *mut usize,\n-    ) -> errno;\n-    fn cloudabi_sys_file_rename(\n-        _: fd,\n-        _: *const u8,\n-        _: usize,\n-        _: fd,\n-        _: *const u8,\n-        _: usize,\n-    ) -> errno;\n-    fn cloudabi_sys_file_stat_fget(_: fd, _: *mut filestat) -> errno;\n-    fn cloudabi_sys_file_stat_fput(_: fd, _: *const filestat, _: fsflags) -> errno;\n-    fn cloudabi_sys_file_stat_get(_: lookup, _: *const u8, _: usize, _: *mut filestat) -> errno;\n-    fn cloudabi_sys_file_stat_put(\n-        _: lookup,\n-        _: *const u8,\n-        _: usize,\n-        _: *const filestat,\n-        _: fsflags,\n-    ) -> errno;\n-    fn cloudabi_sys_file_symlink(_: *const u8, _: usize, _: fd, _: *const u8, _: usize) -> errno;\n-    fn cloudabi_sys_file_unlink(_: fd, _: *const u8, _: usize, _: ulflags) -> errno;\n-    fn cloudabi_sys_lock_unlock(_: *mut lock, _: scope) -> errno;\n-    fn cloudabi_sys_mem_advise(_: *mut (), _: usize, _: advice) -> errno;\n-    fn cloudabi_sys_mem_map(\n-        _: *mut (),\n-        _: usize,\n-        _: mprot,\n-        _: mflags,\n-        _: fd,\n-        _: filesize,\n-        _: *mut *mut (),\n-    ) -> errno;\n-    fn cloudabi_sys_mem_protect(_: *mut (), _: usize, _: mprot) -> errno;\n-    fn cloudabi_sys_mem_sync(_: *mut (), _: usize, _: msflags) -> errno;\n-    fn cloudabi_sys_mem_unmap(_: *mut (), _: usize) -> errno;\n-    fn cloudabi_sys_poll(_: *const subscription, _: *mut event, _: usize, _: *mut usize) -> errno;\n-    fn cloudabi_sys_proc_exec(_: fd, _: *const (), _: usize, _: *const fd, _: usize) -> errno;\n-    fn cloudabi_sys_proc_exit(_: exitcode) -> !;\n-    fn cloudabi_sys_proc_fork(_: *mut fd, _: *mut tid) -> errno;\n-    fn cloudabi_sys_proc_raise(_: signal) -> errno;\n-    fn cloudabi_sys_random_get(_: *mut (), _: usize) -> errno;\n-    fn cloudabi_sys_sock_recv(_: fd, _: *const recv_in, _: *mut recv_out) -> errno;\n-    fn cloudabi_sys_sock_send(_: fd, _: *const send_in, _: *mut send_out) -> errno;\n-    fn cloudabi_sys_sock_shutdown(_: fd, _: sdflags) -> errno;\n-    fn cloudabi_sys_thread_create(_: *mut threadattr, _: *mut tid) -> errno;\n-    fn cloudabi_sys_thread_exit(_: *mut lock, _: scope) -> !;\n-    fn cloudabi_sys_thread_yield() -> errno;\n-}\n-\n-/// Obtains the resolution of a clock.\n-///\n-/// ## Parameters\n-///\n-/// **clock_id**:\n-/// The clock for which the resolution needs to be\n-/// returned.\n-///\n-/// **resolution**:\n-/// The resolution of the clock.\n-#[inline]\n-pub unsafe fn clock_res_get(clock_id_: clockid, resolution_: &mut timestamp) -> errno {\n-    unsafe { cloudabi_sys_clock_res_get(clock_id_, resolution_) }\n-}\n-\n-/// Obtains the time value of a clock.\n-///\n-/// ## Parameters\n-///\n-/// **clock_id**:\n-/// The clock for which the time needs to be\n-/// returned.\n-///\n-/// **precision**:\n-/// The maximum lag (exclusive) that the returned\n-/// time value may have, compared to its actual\n-/// value.\n-///\n-/// **time**:\n-/// The time value of the clock.\n-#[inline]\n-pub unsafe fn clock_time_get(\n-    clock_id_: clockid,\n-    precision_: timestamp,\n-    time_: *mut timestamp,\n-) -> errno {\n-    unsafe { cloudabi_sys_clock_time_get(clock_id_, precision_, time_) }\n-}\n-\n-/// Wakes up threads waiting on a userspace condition variable.\n-///\n-/// If an invocation of this system call causes all waiting\n-/// threads to be woken up, the value of the condition variable\n-/// is set to [`CONDVAR_HAS_NO_WAITERS`](constant.CONDVAR_HAS_NO_WAITERS.html). As long as the condition\n-/// variable is set to this value, it is not needed to invoke this\n-/// system call.\n-///\n-/// ## Parameters\n-///\n-/// **condvar**:\n-/// The userspace condition variable that has\n-/// waiting threads.\n-///\n-/// **scope**:\n-/// Whether the condition variable is stored in\n-/// private or shared memory.\n-///\n-/// **nwaiters**:\n-/// The number of threads that need to be woken\n-/// up. If it exceeds the number of waiting\n-/// threads, all threads are woken up.\n-#[inline]\n-pub unsafe fn condvar_signal(condvar_: *mut condvar, scope_: scope, nwaiters_: nthreads) -> errno {\n-    unsafe { cloudabi_sys_condvar_signal(condvar_, scope_, nwaiters_) }\n-}\n-\n-/// Closes a file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor that needs to be closed.\n-#[inline]\n-pub unsafe fn fd_close(fd_: fd) -> errno {\n-    unsafe { cloudabi_sys_fd_close(fd_) }\n-}\n-\n-/// Creates a file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **type**:\n-/// Possible values:\n-///\n-///   - [`SHARED_MEMORY`](enum.filetype.html#variant.SHARED_MEMORY):\n-///     Creates an anonymous shared memory\n-///     object.\n-///\n-/// **fd**:\n-/// The file descriptor that has been created.\n-#[inline]\n-pub unsafe fn fd_create1(type_: filetype, fd_: &mut fd) -> errno {\n-    unsafe { cloudabi_sys_fd_create1(type_, fd_) }\n-}\n-\n-/// Creates a pair of file descriptors.\n-///\n-/// ## Parameters\n-///\n-/// **type**:\n-/// Possible values:\n-///\n-///   - [`SOCKET_DGRAM`](enum.filetype.html#variant.SOCKET_DGRAM):\n-///     Creates a UNIX datagram socket pair.\n-///   - [`SOCKET_STREAM`](enum.filetype.html#variant.SOCKET_STREAM):\n-///     Creates a UNIX byte-stream socket\n-///     pair.\n-///\n-/// **fd1**:\n-/// The first file descriptor of the pair.\n-///\n-/// **fd2**:\n-/// The second file descriptor of the pair.\n-#[inline]\n-pub unsafe fn fd_create2(type_: filetype, fd1_: &mut fd, fd2_: &mut fd) -> errno {\n-    // SAFETY: the caller must uphold the safety contract for `cloudabi_sys_fd_create2`.\n-    unsafe { cloudabi_sys_fd_create2(type_, fd1_, fd2_) }\n-}\n-\n-/// Synchronizes the data of a file to disk.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor of the file whose data\n-/// needs to be synchronized to disk.\n-#[inline]\n-pub unsafe fn fd_datasync(fd_: fd) -> errno {\n-    // SAFETY: the caller must guarantee that `fd` is valid\n-    // for synchronization.\n-    unsafe { cloudabi_sys_fd_datasync(fd_) }\n-}\n-\n-/// Duplicates a file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **from**:\n-/// The file descriptor that needs to be\n-/// duplicated.\n-///\n-/// **fd**:\n-/// The new file descriptor.\n-#[inline]\n-pub unsafe fn fd_dup(from_: fd, fd_: &mut fd) -> errno {\n-    unsafe { cloudabi_sys_fd_dup(from_, fd_) }\n-}\n-\n-/// Reads from a file descriptor, without using and updating the\n-/// file descriptor's offset.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor from which data should be\n-/// read.\n-///\n-/// **iovs**:\n-/// List of scatter/gather vectors where data\n-/// should be stored.\n-///\n-/// **offset**:\n-/// The offset within the file at which reading\n-/// should start.\n-///\n-/// **nread**:\n-/// The number of bytes read.\n-#[inline]\n-pub unsafe fn fd_pread(fd_: fd, iovs_: &[iovec], offset_: filesize, nread_: &mut usize) -> errno {\n-    unsafe { cloudabi_sys_fd_pread(fd_, iovs_.as_ptr(), iovs_.len(), offset_, nread_) }\n-}\n-\n-/// Writes to a file descriptor, without using and updating the\n-/// file descriptor's offset.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor to which data should be\n-/// written.\n-///\n-/// **iovs**:\n-/// List of scatter/gather vectors where data\n-/// should be retrieved.\n-///\n-/// **offset**:\n-/// The offset within the file at which writing\n-/// should start.\n-///\n-/// **nwritten**:\n-/// The number of bytes written.\n-#[inline]\n-pub unsafe fn fd_pwrite(\n-    fd_: fd,\n-    iovs_: &[ciovec],\n-    offset_: filesize,\n-    nwritten_: &mut usize,\n-) -> errno {\n-    unsafe { cloudabi_sys_fd_pwrite(fd_, iovs_.as_ptr(), iovs_.len(), offset_, nwritten_) }\n-}\n-\n-/// Reads from a file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor from which data should be\n-/// read.\n-///\n-/// **iovs**:\n-/// List of scatter/gather vectors where data\n-/// should be stored.\n-///\n-/// **nread**:\n-/// The number of bytes read.\n-#[inline]\n-pub unsafe fn fd_read(fd_: fd, iovs_: &[iovec], nread_: &mut usize) -> errno {\n-    unsafe { cloudabi_sys_fd_read(fd_, iovs_.as_ptr(), iovs_.len(), nread_) }\n-}\n-\n-/// Atomically replaces a file descriptor by a copy of another\n-/// file descriptor.\n-///\n-/// Due to the strong focus on thread safety, this environment\n-/// does not provide a mechanism to duplicate a file descriptor to\n-/// an arbitrary number, like dup2(). This would be prone to race\n-/// conditions, as an actual file descriptor with the same number\n-/// could be allocated by a different thread at the same time.\n-///\n-/// This system call provides a way to atomically replace file\n-/// descriptors, which would disappear if dup2() were to be\n-/// removed entirely.\n-///\n-/// ## Parameters\n-///\n-/// **from**:\n-/// The file descriptor that needs to be copied.\n-///\n-/// **to**:\n-/// The file descriptor that needs to be\n-/// overwritten.\n-#[inline]\n-pub unsafe fn fd_replace(from_: fd, to_: fd) -> errno {\n-    unsafe { cloudabi_sys_fd_replace(from_, to_) }\n-}\n-\n-/// Moves the offset of the file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor whose offset has to be\n-/// moved.\n-///\n-/// **offset**:\n-/// The number of bytes to move.\n-///\n-/// **whence**:\n-/// Relative to which position the move should\n-/// take place.\n-///\n-/// **newoffset**:\n-/// The new offset of the file descriptor,\n-/// relative to the start of the file.\n-#[inline]\n-pub unsafe fn fd_seek(\n-    fd_: fd,\n-    offset_: filedelta,\n-    whence_: whence,\n-    newoffset_: &mut filesize,\n-) -> errno {\n-    unsafe { cloudabi_sys_fd_seek(fd_, offset_, whence_, newoffset_) }\n-}\n-\n-/// Gets attributes of a file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor whose attributes have to\n-/// be obtained.\n-///\n-/// **buf**:\n-/// The buffer where the file descriptor's\n-/// attributes are stored.\n-#[inline]\n-pub unsafe fn fd_stat_get(fd_: fd, buf_: *mut fdstat) -> errno {\n-    unsafe { cloudabi_sys_fd_stat_get(fd_, buf_) }\n-}\n-\n-/// Adjusts attributes of a file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor whose attributes have to\n-/// be adjusted.\n-///\n-/// **buf**:\n-/// The desired values of the file descriptor\n-/// attributes that are adjusted.\n-///\n-/// **flags**:\n-/// A bitmask indicating which attributes have to\n-/// be adjusted.\n-#[inline]\n-pub unsafe fn fd_stat_put(fd_: fd, buf_: *const fdstat, flags_: fdsflags) -> errno {\n-    unsafe { cloudabi_sys_fd_stat_put(fd_, buf_, flags_) }\n-}\n-\n-/// Synchronizes the data and metadata of a file to disk.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor of the file whose data\n-/// and metadata needs to be synchronized to disk.\n-#[inline]\n-pub unsafe fn fd_sync(fd_: fd) -> errno {\n-    unsafe { cloudabi_sys_fd_sync(fd_) }\n-}\n-\n-/// Writes to a file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor to which data should be\n-/// written.\n-///\n-/// **iovs**:\n-/// List of scatter/gather vectors where data\n-/// should be retrieved.\n-///\n-/// **nwritten**:\n-/// The number of bytes written.\n-#[inline]\n-pub unsafe fn fd_write(fd_: fd, iovs_: &[ciovec], nwritten_: &mut usize) -> errno {\n-    unsafe { cloudabi_sys_fd_write(fd_, iovs_.as_ptr(), iovs_.len(), nwritten_) }\n-}\n-\n-/// Provides file advisory information on a file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor for which to provide file\n-/// advisory information.\n-///\n-/// **offset**:\n-/// The offset within the file to which the\n-/// advisory applies.\n-///\n-/// **len**:\n-/// The length of the region to which the advisory\n-/// applies.\n-///\n-/// **advice**:\n-/// The advice.\n-#[inline]\n-pub unsafe fn file_advise(fd_: fd, offset_: filesize, len_: filesize, advice_: advice) -> errno {\n-    unsafe { cloudabi_sys_file_advise(fd_, offset_, len_, advice_) }\n-}\n-\n-/// Forces the allocation of space in a file.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file in which the space should be\n-/// allocated.\n-///\n-/// **offset**:\n-/// The offset at which the allocation should\n-/// start.\n-///\n-/// **len**:\n-/// The length of the area that is allocated.\n-#[inline]\n-pub unsafe fn file_allocate(fd_: fd, offset_: filesize, len_: filesize) -> errno {\n-    unsafe { cloudabi_sys_file_allocate(fd_, offset_, len_) }\n-}\n-\n-/// Creates a file of a specified type.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The working directory at which the resolution\n-/// of the file to be created starts.\n-///\n-/// **path**:\n-/// The path at which the file should be created.\n-///\n-/// **type**:\n-/// Possible values:\n-///\n-///   - [`DIRECTORY`](enum.filetype.html#variant.DIRECTORY):\n-///     Creates a directory.\n-#[inline]\n-pub unsafe fn file_create(fd_: fd, path_: &[u8], type_: filetype) -> errno {\n-    unsafe { cloudabi_sys_file_create(fd_, path_.as_ptr(), path_.len(), type_)}\n-}\n-\n-/// Creates a hard link.\n-///\n-/// ## Parameters\n-///\n-/// **fd1**:\n-/// The working directory at which the resolution\n-/// of the source path starts.\n-///\n-/// **path1**:\n-/// The source path of the file that should be\n-/// hard linked.\n-///\n-/// **fd2**:\n-/// The working directory at which the resolution\n-/// of the destination path starts.\n-///\n-/// **path2**:\n-/// The destination path at which the hard link\n-/// should be created.\n-#[inline]\n-pub unsafe fn file_link(fd1_: lookup, path1_: &[u8], fd2_: fd, path2_: &[u8]) -> errno {\n-    unsafe { cloudabi_sys_file_link(fd1_, path1_.as_ptr(), path1_.len(), fd2_, path2_.as_ptr(), path2_.len()) }\n-}\n-\n-/// Opens a file.\n-///\n-/// ## Parameters\n-///\n-/// **dirfd**:\n-/// The working directory at which the resolution\n-/// of the file to be opened starts.\n-///\n-/// **path**:\n-/// The path of the file that should be opened.\n-///\n-/// **oflags**:\n-/// The method at which the file should be opened.\n-///\n-/// **fds**:\n-/// [`fdstat.fs_rights_base`](struct.fdstat.html#structfield.fs_rights_base) and\n-/// [`fdstat.fs_rights_inheriting`](struct.fdstat.html#structfield.fs_rights_inheriting) specify the\n-/// initial rights of the newly created file\n-/// descriptor. The operating system is allowed to\n-/// return a file descriptor with fewer rights\n-/// than specified, if and only if those rights do\n-/// not apply to the type of file being opened.\n-///\n-/// [`fdstat.fs_flags`](struct.fdstat.html#structfield.fs_flags) specifies the initial flags\n-/// of the file descriptor.\n-///\n-/// [`fdstat.fs_filetype`](struct.fdstat.html#structfield.fs_filetype) is ignored.\n-///\n-/// **fd**:\n-/// The file descriptor of the file that has been\n-/// opened.\n-#[inline]\n-pub unsafe fn file_open(\n-    dirfd_: lookup,\n-    path_: &[u8],\n-    oflags_: oflags,\n-    fds_: *const fdstat,\n-    fd_: &mut fd,\n-) -> errno {\n-    unsafe { cloudabi_sys_file_open(dirfd_, path_.as_ptr(), path_.len(), oflags_, fds_, fd_) }\n-}\n-\n-/// Reads directory entries from a directory.\n-///\n-/// When successful, the contents of the output buffer consist of\n-/// a sequence of directory entries. Each directory entry consists\n-/// of a [`dirent`] object, followed by [`dirent.d_namlen`](struct.dirent.html#structfield.d_namlen) bytes\n-/// holding the name of the directory entry.\n-///\n-/// This system call fills the output buffer as much as possible,\n-/// potentially truncating the last directory entry. This allows\n-/// the caller to grow its read buffer size in case it's too small\n-/// to fit a single large directory entry, or skip the oversized\n-/// directory entry.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The directory from which to read the directory\n-/// entries.\n-///\n-/// **buf**:\n-/// The buffer where directory entries are stored.\n-///\n-/// **cookie**:\n-/// The location within the directory to start\n-/// reading.\n-///\n-/// **bufused**:\n-/// The number of bytes stored in the read buffer.\n-/// If less than the size of the read buffer, the\n-/// end of the directory has been reached.\n-#[inline]\n-pub unsafe fn file_readdir(\n-    fd_: fd,\n-    buf_: &mut [u8],\n-    cookie_: dircookie,\n-    bufused_: &mut usize,\n-) -> errno {\n-    unsafe { cloudabi_sys_file_readdir(fd_, buf_.as_mut_ptr() as *mut (), buf_.len(), cookie_, bufused_) }\n-}\n-\n-/// Reads the contents of a symbolic link.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The working directory at which the resolution\n-/// of the path of the symbolic starts.\n-///\n-/// **path**:\n-/// The path of the symbolic link whose contents\n-/// should be read.\n-///\n-/// **buf**:\n-/// The buffer where the contents of the symbolic\n-/// link should be stored.\n-///\n-/// **bufused**:\n-/// The number of bytes placed in the buffer.\n-#[inline]\n-pub unsafe fn file_readlink(fd_: fd, path_: &[u8], buf_: &mut [u8], bufused_: &mut usize) -> errno {\n-    unsafe {\n-        cloudabi_sys_file_readlink(\n-            fd_,\n-            path_.as_ptr(),\n-            path_.len(),\n-            buf_.as_mut_ptr(),\n-            buf_.len(),\n-            bufused_,\n-        )\n-    }\n-}\n-\n-/// Renames a file.\n-///\n-/// ## Parameters\n-///\n-/// **fd1**:\n-/// The working directory at which the resolution\n-/// of the source path starts.\n-///\n-/// **path1**:\n-/// The source path of the file that should be\n-/// renamed.\n-///\n-/// **fd2**:\n-/// The working directory at which the resolution\n-/// of the destination path starts.\n-///\n-/// **path2**:\n-/// The destination path to which the file should\n-/// be renamed.\n-#[inline]\n-pub unsafe fn file_rename(fd1_: fd, path1_: &[u8], fd2_: fd, path2_: &[u8]) -> errno {\n-    unsafe {\n-        cloudabi_sys_file_rename(\n-            fd1_,\n-            path1_.as_ptr(),\n-            path1_.len(),\n-            fd2_,\n-            path2_.as_ptr(),\n-            path2_.len(),\n-        )\n-    }\n-}\n-\n-/// Gets attributes of a file by file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor whose attributes have to\n-/// be obtained.\n-///\n-/// **buf**:\n-/// The buffer where the file's attributes are\n-/// stored.\n-#[inline]\n-pub unsafe fn file_stat_fget(fd_: fd, buf_: *mut filestat) -> errno {\n-    unsafe { cloudabi_sys_file_stat_fget(fd_, buf_) }\n-}\n-\n-/// Adjusts attributes of a file by file descriptor.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The file descriptor whose attributes have to\n-/// be adjusted.\n-///\n-/// **buf**:\n-/// The desired values of the file attributes that\n-/// are adjusted.\n-///\n-/// **flags**:\n-/// A bitmask indicating which attributes have to\n-/// be adjusted.\n-#[inline]\n-pub unsafe fn file_stat_fput(fd_: fd, buf_: *const filestat, flags_: fsflags) -> errno {\n-    unsafe { cloudabi_sys_file_stat_fput(fd_, buf_, flags_) }\n-}\n-\n-/// Gets attributes of a file by path.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The working directory at which the resolution\n-/// of the path whose attributes have to be\n-/// obtained starts.\n-///\n-/// **path**:\n-/// The path of the file whose attributes have to\n-/// be obtained.\n-///\n-/// **buf**:\n-/// The buffer where the file's attributes are\n-/// stored.\n-#[inline]\n-pub unsafe fn file_stat_get(fd_: lookup, path_: &[u8], buf_: *mut filestat) -> errno {\n-    unsafe { cloudabi_sys_file_stat_get(fd_, path_.as_ptr(), path_.len(), buf_) }\n-}\n-\n-/// Adjusts attributes of a file by path.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The working directory at which the resolution\n-/// of the path whose attributes have to be\n-/// adjusted starts.\n-///\n-/// **path**:\n-/// The path of the file whose attributes have to\n-/// be adjusted.\n-///\n-/// **buf**:\n-/// The desired values of the file attributes that\n-/// are adjusted.\n-///\n-/// **flags**:\n-/// A bitmask indicating which attributes have to\n-/// be adjusted.\n-#[inline]\n-pub unsafe fn file_stat_put(\n-    fd_: lookup,\n-    path_: &[u8],\n-    buf_: *const filestat,\n-    flags_: fsflags,\n-) -> errno {\n-    unsafe { cloudabi_sys_file_stat_put(fd_, path_.as_ptr(), path_.len(), buf_, flags_) }\n-}\n-\n-/// Creates a symbolic link.\n-///\n-/// ## Parameters\n-///\n-/// **path1**:\n-/// The contents of the symbolic link.\n-///\n-/// **fd**:\n-/// The working directory at which the resolution\n-/// of the destination path starts.\n-///\n-/// **path2**:\n-/// The destination path at which the symbolic\n-/// link should be created.\n-#[inline]\n-pub unsafe fn file_symlink(path1_: &[u8], fd_: fd, path2_: &[u8]) -> errno {\n-    unsafe { cloudabi_sys_file_symlink(path1_.as_ptr(), path1_.len(), fd_, path2_.as_ptr(), path2_.len()) }\n-}\n-\n-/// Unlinks a file, or removes a directory.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// The working directory at which the resolution\n-/// of the path starts.\n-///\n-/// **path**:\n-/// The path that needs to be unlinked or removed.\n-///\n-/// **flags**:\n-/// Possible values:\n-///\n-///   - [`REMOVEDIR`](struct.ulflags.html#associatedconstant.REMOVEDIR):\n-///     If set, attempt to remove a directory.\n-///     Otherwise, unlink a file.\n-#[inline]\n-pub unsafe fn file_unlink(fd_: fd, path_: &[u8], flags_: ulflags) -> errno {\n-    unsafe { cloudabi_sys_file_unlink(fd_, path_.as_ptr(), path_.len(), flags_) }\n-}\n-\n-/// Unlocks a write-locked userspace lock.\n-///\n-/// If a userspace lock is unlocked while having its\n-/// [`LOCK_KERNEL_MANAGED`](constant.LOCK_KERNEL_MANAGED.html) flag set, the lock cannot be unlocked in\n-/// userspace directly. This system call needs to be performed\n-/// instead, so that any waiting threads can be woken up.\n-///\n-/// To prevent spurious invocations of this system call, the lock\n-/// must be locked for writing. This prevents other threads from\n-/// acquiring additional read locks while the system call is in\n-/// progress. If the lock is acquired for reading, it must first\n-/// be upgraded to a write lock.\n-///\n-/// ## Parameters\n-///\n-/// **lock**:\n-/// The userspace lock that is locked for writing\n-/// by the calling thread.\n-///\n-/// **scope**:\n-/// Whether the lock is stored in private or\n-/// shared memory.\n-#[inline]\n-pub unsafe fn lock_unlock(lock_: *mut lock, scope_: scope) -> errno {\n-    unsafe { cloudabi_sys_lock_unlock(lock_, scope_) }\n-}\n-\n-/// Provides memory advisory information on a region of memory.\n-///\n-/// ## Parameters\n-///\n-/// **mapping**:\n-/// The pages for which to provide memory advisory\n-/// information.\n-///\n-/// **advice**:\n-/// The advice.\n-#[inline]\n-pub unsafe fn mem_advise(mapping_: &mut [u8], advice_: advice) -> errno {\n-    unsafe { cloudabi_sys_mem_advise(mapping_.as_mut_ptr() as *mut (), mapping_.len(), advice_) }\n-}\n-\n-/// Creates a memory mapping, making the contents of a file\n-/// accessible through memory.\n-///\n-/// ## Parameters\n-///\n-/// **addr**:\n-/// If [`FIXED`](struct.mflags.html#associatedconstant.FIXED) is set, specifies to which\n-/// address the file region is mapped. Otherwise,\n-/// the mapping is performed at an unused\n-/// location.\n-///\n-/// **len**:\n-/// The length of the memory mapping to be\n-/// created.\n-///\n-/// **prot**:\n-/// Initial memory protection options for the\n-/// memory mapping.\n-///\n-/// **flags**:\n-/// Memory mapping flags.\n-///\n-/// **fd**:\n-/// If [`ANON`](struct.mflags.html#associatedconstant.ANON) is set, this argument must be\n-/// [`MAP_ANON_FD`](constant.MAP_ANON_FD.html). Otherwise, this argument\n-/// specifies the file whose contents need to be\n-/// mapped.\n-///\n-/// **off**:\n-/// If [`ANON`](struct.mflags.html#associatedconstant.ANON) is set, this argument must be\n-/// zero. Otherwise, this argument specifies the\n-/// offset within the file at which the mapping\n-/// starts.\n-///\n-/// **mem**:\n-/// The starting address of the memory mapping.\n-#[inline]\n-pub unsafe fn mem_map(\n-    addr_: *mut (),\n-    len_: usize,\n-    prot_: mprot,\n-    flags_: mflags,\n-    fd_: fd,\n-    off_: filesize,\n-    mem_: &mut *mut (),\n-) -> errno {\n-    unsafe { cloudabi_sys_mem_map(addr_, len_, prot_, flags_, fd_, off_, mem_) }\n-}\n-\n-/// Changes the protection of a memory mapping.\n-///\n-/// ## Parameters\n-///\n-/// **mapping**:\n-/// The pages that need their protection changed.\n-///\n-/// **prot**:\n-/// New protection options.\n-#[inline]\n-pub unsafe fn mem_protect(mapping_: &mut [u8], prot_: mprot) -> errno {\n-    unsafe { cloudabi_sys_mem_protect(mapping_.as_mut_ptr() as *mut (), mapping_.len(), prot_) }\n-}\n-\n-/// Synchronizes a region of memory with its physical storage.\n-///\n-/// ## Parameters\n-///\n-/// **mapping**:\n-/// The pages that need to be synchronized.\n-///\n-/// **flags**:\n-/// The method of synchronization.\n-#[inline]\n-pub unsafe fn mem_sync(mapping_: &mut [u8], flags_: msflags) -> errno {\n-    unsafe { cloudabi_sys_mem_sync(mapping_.as_mut_ptr() as *mut (), mapping_.len(), flags_) }\n-}\n-\n-/// Unmaps a region of memory.\n-///\n-/// ## Parameters\n-///\n-/// **mapping**:\n-/// The pages that needs to be unmapped.\n-#[inline]\n-pub unsafe fn mem_unmap(mapping_: &mut [u8]) -> errno {\n-    unsafe { cloudabi_sys_mem_unmap(mapping_.as_mut_ptr() as *mut (), mapping_.len()) }\n-}\n-\n-/// Concurrently polls for the occurrence of a set of events.\n-///\n-/// ## Parameters\n-///\n-/// **in**:\n-/// The events to which to subscribe.\n-///\n-/// **out**:\n-/// The events that have occurred.\n-///\n-/// **nsubscriptions**:\n-/// Both the number of subscriptions and events.\n-///\n-/// **nevents**:\n-/// The number of events stored.\n-#[inline]\n-pub unsafe fn poll(\n-    in_: *const subscription,\n-    out_: *mut event,\n-    nsubscriptions_: usize,\n-    nevents_: *mut usize,\n-) -> errno {\n-    unsafe { cloudabi_sys_poll(in_, out_, nsubscriptions_, nevents_) }\n-}\n-\n-/// Replaces the process by a new executable.\n-///\n-/// Process execution in CloudABI differs from POSIX in two ways:\n-/// handling of arguments and inheritance of file descriptors.\n-///\n-/// CloudABI does not use string command line arguments. Instead,\n-/// a buffer with binary data is copied into the address space of\n-/// the new executable. The kernel does not enforce any specific\n-/// structure to this data, although CloudABI's C library uses it\n-/// to store a tree structure that is semantically identical to\n-/// YAML.\n-///\n-/// Due to the strong focus on thread safety, file descriptors\n-/// aren't inherited through close-on-exec flags. An explicit\n-/// list of file descriptors that need to be retained needs to be\n-/// provided. After execution, file descriptors are placed in the\n-/// order in which they are stored in the array. This not only\n-/// makes the execution process deterministic. It also prevents\n-/// potential information disclosures about the layout of the\n-/// original process.\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// A file descriptor of the new executable.\n-///\n-/// **data**:\n-/// Binary argument data that is passed on to the\n-/// new executable.\n-///\n-/// **fds**:\n-/// The layout of the file descriptor table after\n-/// execution.\n-#[inline]\n-pub unsafe fn proc_exec(fd_: fd, data_: &[u8], fds_: &[fd]) -> errno {\n-    unsafe { cloudabi_sys_proc_exec(fd_, data_.as_ptr() as *const (), data_.len(), fds_.as_ptr(), fds_.len()) }\n-}\n-\n-/// Terminates the process normally.\n-///\n-/// ## Parameters\n-///\n-/// **rval**:\n-/// The exit code returned by the process. The\n-/// exit code can be obtained by other processes\n-/// through [`event.union.proc_terminate.exitcode`](struct.event_proc_terminate.html#structfield.exitcode).\n-#[inline]\n-pub unsafe fn proc_exit(rval_: exitcode) -> ! {\n-    unsafe { cloudabi_sys_proc_exit(rval_) }\n-}\n-\n-/// Forks the process of the calling thread.\n-///\n-/// After forking, a new process shall be created, having only a\n-/// copy of the calling thread. The parent process will obtain a\n-/// process descriptor. When closed, the child process is\n-/// automatically signaled with [`KILL`](enum.signal.html#variant.KILL).\n-///\n-/// ## Parameters\n-///\n-/// **fd**:\n-/// In the parent process: the file descriptor\n-/// number of the process descriptor.\n-///\n-/// In the child process: [`PROCESS_CHILD`](constant.PROCESS_CHILD.html).\n-///\n-/// **tid**:\n-/// In the parent process: undefined.\n-///\n-/// In the child process: the thread ID of the\n-/// initial thread of the child process.\n-#[inline]\n-pub unsafe fn proc_fork(fd_: &mut fd, tid_: &mut tid) -> errno {\n-    unsafe { cloudabi_sys_proc_fork(fd_, tid_) }\n-}\n-\n-/// Sends a signal to the process of the calling thread.\n-///\n-/// ## Parameters\n-///\n-/// **sig**:\n-/// The signal condition that should be triggered.\n-/// If the signal causes the process to terminate,\n-/// its condition can be obtained by other\n-/// processes through\n-/// [`event.union.proc_terminate.signal`](struct.event_proc_terminate.html#structfield.signal).\n-#[inline]\n-pub unsafe fn proc_raise(sig_: signal) -> errno {\n-    unsafe { cloudabi_sys_proc_raise(sig_) }\n-}\n-\n-/// Obtains random data from the kernel random number generator.\n-///\n-/// As this interface is not guaranteed to be fast, it is advised\n-/// that the random data obtained through this system call is used\n-/// as the seed for a userspace pseudo-random number generator.\n-///\n-/// ## Parameters\n-///\n-/// **buf**:\n-/// The buffer that needs to be filled with random\n-/// data.\n-#[inline]\n-pub unsafe fn random_get(buf_: &mut [u8]) -> errno {\n-    unsafe { cloudabi_sys_random_get(buf_.as_mut_ptr() as *mut (), buf_.len()) }\n-}\n-\n-/// Receives a message on a socket.\n-///\n-/// ## Parameters\n-///\n-/// **sock**:\n-/// The socket on which a message should be\n-/// received.\n-///\n-/// **in**:\n-/// Input parameters.\n-///\n-/// **out**:\n-/// Output parameters.\n-#[inline]\n-pub unsafe fn sock_recv(sock_: fd, in_: *const recv_in, out_: *mut recv_out) -> errno {\n-    unsafe { cloudabi_sys_sock_recv(sock_, in_, out_) }\n-}\n-\n-/// Sends a message on a socket.\n-///\n-/// ## Parameters\n-///\n-/// **sock**:\n-/// The socket on which a message should be sent.\n-///\n-/// **in**:\n-/// Input parameters.\n-///\n-/// **out**:\n-/// Output parameters.\n-#[inline]\n-pub unsafe fn sock_send(sock_: fd, in_: *const send_in, out_: *mut send_out) -> errno {\n-    unsafe { cloudabi_sys_sock_send(sock_, in_, out_) }\n-}\n-\n-/// Shuts down socket send and receive channels.\n-///\n-/// ## Parameters\n-///\n-/// **sock**:\n-/// The socket that needs its channels shut down.\n-///\n-/// **how**:\n-/// Which channels on the socket need to be shut\n-/// down.\n-#[inline]\n-pub unsafe fn sock_shutdown(sock_: fd, how_: sdflags) -> errno {\n-    unsafe { cloudabi_sys_sock_shutdown(sock_, how_) }\n-}\n-\n-/// Creates a new thread within the current process.\n-///\n-/// ## Parameters\n-///\n-/// **attr**:\n-/// The desired attributes of the new thread.\n-///\n-/// **tid**:\n-/// The thread ID of the new thread.\n-#[inline]\n-pub unsafe fn thread_create(attr_: *mut threadattr, tid_: &mut tid) -> errno {\n-    unsafe { cloudabi_sys_thread_create(attr_, tid_) }\n-}\n-\n-/// Terminates the calling thread.\n-///\n-/// This system call can also unlock a single userspace lock\n-/// after termination, which can be used to implement thread\n-/// joining.\n-///\n-/// ## Parameters\n-///\n-/// **lock**:\n-/// Userspace lock that is locked for writing by\n-/// the calling thread.\n-///\n-/// **scope**:\n-/// Whether the lock is stored in private or\n-/// shared memory.\n-#[inline]\n-pub unsafe fn thread_exit(lock_: *mut lock, scope_: scope) -> ! {\n-    unsafe { cloudabi_sys_thread_exit(lock_, scope_) }\n-}\n-\n-/// Temporarily yields execution of the calling thread.\n-#[inline]\n-pub unsafe fn thread_yield() -> errno {\n-    unsafe { cloudabi_sys_thread_yield() }\n-}"}, {"sha": "9d01d24ea830d946e6801b4dc230d88e1995d9e3", "filename": "library/std/src/sys/cloudabi/abi/mod.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fmod.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,3 +0,0 @@\n-#[allow(warnings)]\n-mod cloudabi;\n-pub use self::cloudabi::*;"}, {"sha": "dea562abad3ffbebf84e0916551dea92bd54d371", "filename": "library/std/src/sys/cloudabi/args.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fargs.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,7 +0,0 @@\n-pub use crate::sys::cloudabi::shims::args::*;\n-\n-#[allow(dead_code)]\n-pub fn init(_: isize, _: *const *const u8) {}\n-\n-#[allow(dead_code)]\n-pub fn cleanup() {}"}, {"sha": "f09bc01701b748addda915e81d794bb3130bcb59", "filename": "library/std/src/sys/cloudabi/condvar.rs", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fcondvar.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,149 +0,0 @@\n-use crate::mem;\n-use crate::sync::atomic::{AtomicU32, Ordering};\n-use crate::sys::cloudabi::abi;\n-use crate::sys::mutex::{self, Mutex};\n-use crate::sys::time::checked_dur2intervals;\n-use crate::time::Duration;\n-\n-extern \"C\" {\n-    #[thread_local]\n-    static __pthread_thread_id: abi::tid;\n-}\n-\n-pub struct Condvar {\n-    condvar: AtomicU32,\n-}\n-\n-pub type MovableCondvar = Condvar;\n-\n-unsafe impl Send for Condvar {}\n-unsafe impl Sync for Condvar {}\n-\n-impl Condvar {\n-    pub const fn new() -> Condvar {\n-        Condvar { condvar: AtomicU32::new(abi::CONDVAR_HAS_NO_WAITERS.0) }\n-    }\n-\n-    pub unsafe fn init(&mut self) {}\n-\n-    pub unsafe fn notify_one(&self) {\n-        if self.condvar.load(Ordering::Relaxed) != abi::CONDVAR_HAS_NO_WAITERS.0 {\n-            let ret = abi::condvar_signal(\n-                &self.condvar as *const AtomicU32 as *mut abi::condvar,\n-                abi::scope::PRIVATE,\n-                1,\n-            );\n-            assert_eq!(ret, abi::errno::SUCCESS, \"Failed to signal on condition variable\");\n-        }\n-    }\n-\n-    pub unsafe fn notify_all(&self) {\n-        if self.condvar.load(Ordering::Relaxed) != abi::CONDVAR_HAS_NO_WAITERS.0 {\n-            let ret = abi::condvar_signal(\n-                &self.condvar as *const AtomicU32 as *mut abi::condvar,\n-                abi::scope::PRIVATE,\n-                abi::nthreads::MAX,\n-            );\n-            assert_eq!(ret, abi::errno::SUCCESS, \"Failed to broadcast on condition variable\");\n-        }\n-    }\n-\n-    pub unsafe fn wait(&self, mutex: &Mutex) {\n-        let mutex = mutex::raw(mutex);\n-        assert_eq!(\n-            mutex.load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n-            __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-            \"This lock is not write-locked by this thread\"\n-        );\n-\n-        // Call into the kernel to wait on the condition variable.\n-        let subscription = abi::subscription {\n-            type_: abi::eventtype::CONDVAR,\n-            union: abi::subscription_union {\n-                condvar: abi::subscription_condvar {\n-                    condvar: &self.condvar as *const AtomicU32 as *mut abi::condvar,\n-                    condvar_scope: abi::scope::PRIVATE,\n-                    lock: mutex as *const AtomicU32 as *mut abi::lock,\n-                    lock_scope: abi::scope::PRIVATE,\n-                },\n-            },\n-            ..mem::zeroed()\n-        };\n-        let mut event: mem::MaybeUninit<abi::event> = mem::MaybeUninit::uninit();\n-        let mut nevents: mem::MaybeUninit<usize> = mem::MaybeUninit::uninit();\n-        let ret = abi::poll(&subscription, event.as_mut_ptr(), 1, nevents.as_mut_ptr());\n-        assert_eq!(ret, abi::errno::SUCCESS, \"Failed to wait on condition variable\");\n-        assert_eq!(\n-            event.assume_init().error,\n-            abi::errno::SUCCESS,\n-            \"Failed to wait on condition variable\"\n-        );\n-    }\n-\n-    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n-        let mutex = mutex::raw(mutex);\n-        assert_eq!(\n-            mutex.load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n-            __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-            \"This lock is not write-locked by this thread\"\n-        );\n-\n-        // Call into the kernel to wait on the condition variable.\n-        let timeout =\n-            checked_dur2intervals(&dur).expect(\"overflow converting duration to nanoseconds\");\n-        let subscriptions = [\n-            abi::subscription {\n-                type_: abi::eventtype::CONDVAR,\n-                union: abi::subscription_union {\n-                    condvar: abi::subscription_condvar {\n-                        condvar: &self.condvar as *const AtomicU32 as *mut abi::condvar,\n-                        condvar_scope: abi::scope::PRIVATE,\n-                        lock: mutex as *const AtomicU32 as *mut abi::lock,\n-                        lock_scope: abi::scope::PRIVATE,\n-                    },\n-                },\n-                ..mem::zeroed()\n-            },\n-            abi::subscription {\n-                type_: abi::eventtype::CLOCK,\n-                union: abi::subscription_union {\n-                    clock: abi::subscription_clock {\n-                        clock_id: abi::clockid::MONOTONIC,\n-                        timeout,\n-                        ..mem::zeroed()\n-                    },\n-                },\n-                ..mem::zeroed()\n-            },\n-        ];\n-        let mut events: [mem::MaybeUninit<abi::event>; 2] = [mem::MaybeUninit::uninit(); 2];\n-        let mut nevents: mem::MaybeUninit<usize> = mem::MaybeUninit::uninit();\n-        let ret = abi::poll(\n-            subscriptions.as_ptr(),\n-            mem::MaybeUninit::slice_as_mut_ptr(&mut events),\n-            2,\n-            nevents.as_mut_ptr(),\n-        );\n-        assert_eq!(ret, abi::errno::SUCCESS, \"Failed to wait on condition variable\");\n-        let nevents = nevents.assume_init();\n-        for i in 0..nevents {\n-            assert_eq!(\n-                events[i].assume_init().error,\n-                abi::errno::SUCCESS,\n-                \"Failed to wait on condition variable\"\n-            );\n-            if events[i].assume_init().type_ == abi::eventtype::CONDVAR {\n-                return true;\n-            }\n-        }\n-        false\n-    }\n-\n-    pub unsafe fn destroy(&self) {\n-        assert_eq!(\n-            self.condvar.load(Ordering::Relaxed),\n-            abi::CONDVAR_HAS_NO_WAITERS.0,\n-            \"Attempted to destroy a condition variable with blocked threads\"\n-        );\n-    }\n-}"}, {"sha": "d5f475b4310fde64b7f0f50154c14d345ce3788f", "filename": "library/std/src/sys/cloudabi/io.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fio.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,47 +0,0 @@\n-use crate::mem;\n-\n-#[derive(Copy, Clone)]\n-pub struct IoSlice<'a>(&'a [u8]);\n-\n-impl<'a> IoSlice<'a> {\n-    #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n-        IoSlice(buf)\n-    }\n-\n-    #[inline]\n-    pub fn advance(&mut self, n: usize) {\n-        self.0 = &self.0[n..]\n-    }\n-\n-    #[inline]\n-    pub fn as_slice(&self) -> &[u8] {\n-        self.0\n-    }\n-}\n-\n-pub struct IoSliceMut<'a>(&'a mut [u8]);\n-\n-impl<'a> IoSliceMut<'a> {\n-    #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n-        IoSliceMut(buf)\n-    }\n-\n-    #[inline]\n-    pub fn advance(&mut self, n: usize) {\n-        let slice = mem::replace(&mut self.0, &mut []);\n-        let (_, remaining) = slice.split_at_mut(n);\n-        self.0 = remaining;\n-    }\n-\n-    #[inline]\n-    pub fn as_slice(&self) -> &[u8] {\n-        self.0\n-    }\n-\n-    #[inline]\n-    pub fn as_mut_slice(&mut self) -> &mut [u8] {\n-        self.0\n-    }\n-}"}, {"sha": "b4a9246ca4e0def0b56fce39aaccc189cfecc60a", "filename": "library/std/src/sys/cloudabi/mod.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,73 +0,0 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n-use crate::io::ErrorKind;\n-use crate::mem;\n-\n-#[path = \"../unix/alloc.rs\"]\n-pub mod alloc;\n-pub mod args;\n-#[path = \"../unix/cmath.rs\"]\n-pub mod cmath;\n-pub mod condvar;\n-pub mod io;\n-#[path = \"../unix/memchr.rs\"]\n-pub mod memchr;\n-pub mod mutex;\n-pub mod os;\n-pub mod rwlock;\n-pub mod stack_overflow;\n-pub mod stdio;\n-pub mod thread;\n-#[path = \"../unix/thread_local_key.rs\"]\n-pub mod thread_local_key;\n-pub mod time;\n-\n-pub use crate::sys_common::os_str_bytes as os_str;\n-\n-mod abi;\n-\n-mod shims;\n-pub use self::shims::*;\n-\n-#[allow(dead_code)]\n-pub fn init() {}\n-\n-pub fn decode_error_kind(errno: i32) -> ErrorKind {\n-    match errno {\n-        x if x == abi::errno::ACCES as i32 => ErrorKind::PermissionDenied,\n-        x if x == abi::errno::ADDRINUSE as i32 => ErrorKind::AddrInUse,\n-        x if x == abi::errno::ADDRNOTAVAIL as i32 => ErrorKind::AddrNotAvailable,\n-        x if x == abi::errno::AGAIN as i32 => ErrorKind::WouldBlock,\n-        x if x == abi::errno::CONNABORTED as i32 => ErrorKind::ConnectionAborted,\n-        x if x == abi::errno::CONNREFUSED as i32 => ErrorKind::ConnectionRefused,\n-        x if x == abi::errno::CONNRESET as i32 => ErrorKind::ConnectionReset,\n-        x if x == abi::errno::EXIST as i32 => ErrorKind::AlreadyExists,\n-        x if x == abi::errno::INTR as i32 => ErrorKind::Interrupted,\n-        x if x == abi::errno::INVAL as i32 => ErrorKind::InvalidInput,\n-        x if x == abi::errno::NOENT as i32 => ErrorKind::NotFound,\n-        x if x == abi::errno::NOTCONN as i32 => ErrorKind::NotConnected,\n-        x if x == abi::errno::PERM as i32 => ErrorKind::PermissionDenied,\n-        x if x == abi::errno::PIPE as i32 => ErrorKind::BrokenPipe,\n-        x if x == abi::errno::TIMEDOUT as i32 => ErrorKind::TimedOut,\n-        _ => ErrorKind::Other,\n-    }\n-}\n-\n-pub fn abort_internal() -> ! {\n-    core::intrinsics::abort();\n-}\n-\n-pub use libc::strlen;\n-\n-pub fn hashmap_random_keys() -> (u64, u64) {\n-    unsafe {\n-        let mut v: mem::MaybeUninit<(u64, u64)> = mem::MaybeUninit::uninit();\n-        libc::arc4random_buf(v.as_mut_ptr() as *mut libc::c_void, mem::size_of_val(&v));\n-        v.assume_init()\n-    }\n-}\n-\n-#[cfg_attr(feature = \"backtrace\", link(name = \"unwind\"))]\n-#[link(name = \"c\")]\n-#[link(name = \"compiler_rt\")]\n-extern \"C\" {}"}, {"sha": "9dafcbc1fba0bb9b5e21964c06e2f94f2a8b8ff6", "filename": "library/std/src/sys/cloudabi/mutex.rs", "status": "removed", "additions": 0, "deletions": 153, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,153 +0,0 @@\n-use crate::cell::Cell;\n-use crate::mem;\n-use crate::mem::MaybeUninit;\n-use crate::sync::atomic::{AtomicU32, Ordering};\n-use crate::sys::cloudabi::abi;\n-use crate::sys::rwlock::{self, RWLock};\n-\n-extern \"C\" {\n-    #[thread_local]\n-    static __pthread_thread_id: abi::tid;\n-}\n-\n-// Implement Mutex using an RWLock. This doesn't introduce any\n-// performance overhead in this environment, as the operations would be\n-// implemented identically.\n-pub struct Mutex(RWLock);\n-\n-pub type MovableMutex = Mutex;\n-\n-pub unsafe fn raw(m: &Mutex) -> &AtomicU32 {\n-    rwlock::raw(&m.0)\n-}\n-\n-impl Mutex {\n-    pub const fn new() -> Mutex {\n-        Mutex(RWLock::new())\n-    }\n-\n-    pub unsafe fn init(&mut self) {\n-        // This function should normally reinitialize the mutex after\n-        // moving it to a different memory address. This implementation\n-        // does not require adjustments after moving.\n-    }\n-\n-    pub unsafe fn try_lock(&self) -> bool {\n-        self.0.try_write()\n-    }\n-\n-    pub unsafe fn lock(&self) {\n-        self.0.write()\n-    }\n-\n-    pub unsafe fn unlock(&self) {\n-        self.0.write_unlock()\n-    }\n-\n-    pub unsafe fn destroy(&self) {\n-        self.0.destroy()\n-    }\n-}\n-\n-pub struct ReentrantMutex {\n-    lock: AtomicU32,\n-    recursion: Cell<u32>,\n-}\n-\n-unsafe impl Send for ReentrantMutex {}\n-unsafe impl Sync for ReentrantMutex {}\n-\n-impl ReentrantMutex {\n-    pub const unsafe fn uninitialized() -> ReentrantMutex {\n-        ReentrantMutex { lock: AtomicU32::new(abi::LOCK_UNLOCKED.0), recursion: Cell::new(0) }\n-    }\n-\n-    pub unsafe fn init(&self) {}\n-\n-    pub unsafe fn try_lock(&self) -> bool {\n-        // Attempt to acquire the lock.\n-        if let Err(old) = self.lock.compare_exchange(\n-            abi::LOCK_UNLOCKED.0,\n-            __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-            Ordering::Acquire,\n-            Ordering::Relaxed,\n-        ) {\n-            // If we fail to acquire the lock, it may be the case\n-            // that we've already acquired it and may need to recurse.\n-            if old & !abi::LOCK_KERNEL_MANAGED.0 == __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0 {\n-                self.recursion.set(self.recursion.get() + 1);\n-                true\n-            } else {\n-                false\n-            }\n-        } else {\n-            // Success.\n-            assert_eq!(self.recursion.get(), 0, \"Mutex has invalid recursion count\");\n-            true\n-        }\n-    }\n-\n-    pub unsafe fn lock(&self) {\n-        if !self.try_lock() {\n-            // Call into the kernel to acquire a write lock.\n-            let lock = &self.lock as *const AtomicU32;\n-            let subscription = abi::subscription {\n-                type_: abi::eventtype::LOCK_WRLOCK,\n-                union: abi::subscription_union {\n-                    lock: abi::subscription_lock {\n-                        lock: lock as *mut abi::lock,\n-                        lock_scope: abi::scope::PRIVATE,\n-                    },\n-                },\n-                ..mem::zeroed()\n-            };\n-            let mut event = MaybeUninit::<abi::event>::uninit();\n-            let mut nevents = MaybeUninit::<usize>::uninit();\n-            // SAFE: The caller must to ensure that `event` and `nevents` are initialized.\n-            let ret =\n-                unsafe { abi::poll(&subscription, event.as_mut_ptr(), 1, nevents.as_mut_ptr()) };\n-            assert_eq!(ret, abi::errno::SUCCESS, \"Failed to acquire mutex\");\n-            let event = event.assume_init();\n-            assert_eq!(event.error, abi::errno::SUCCESS, \"Failed to acquire mutex\");\n-        }\n-    }\n-\n-    pub unsafe fn unlock(&self) {\n-        assert_eq!(\n-            self.lock.load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n-            __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-            \"This mutex is locked by a different thread\"\n-        );\n-\n-        let r = self.recursion.get();\n-        if r > 0 {\n-            self.recursion.set(r - 1);\n-        } else if !self\n-            .lock\n-            .compare_exchange(\n-                __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-                abi::LOCK_UNLOCKED.0,\n-                Ordering::Release,\n-                Ordering::Relaxed,\n-            )\n-            .is_ok()\n-        {\n-            // Lock is managed by kernelspace. Call into the kernel\n-            // to unblock waiting threads.\n-            let ret = abi::lock_unlock(\n-                &self.lock as *const AtomicU32 as *mut abi::lock,\n-                abi::scope::PRIVATE,\n-            );\n-            assert_eq!(ret, abi::errno::SUCCESS, \"Failed to unlock a mutex\");\n-        }\n-    }\n-\n-    pub unsafe fn destroy(&self) {\n-        assert_eq!(\n-            self.lock.load(Ordering::Relaxed),\n-            abi::LOCK_UNLOCKED.0,\n-            \"Attempted to destroy locked mutex\"\n-        );\n-        assert_eq!(self.recursion.get(), 0, \"Recursion counter invalid\");\n-    }\n-}"}, {"sha": "326faaa852afeceb554bd8459c5e85cfe0512c49", "filename": "library/std/src/sys/cloudabi/os.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fos.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,26 +0,0 @@\n-use crate::ffi::CStr;\n-use crate::str;\n-\n-use libc::c_int;\n-\n-pub use crate::sys::cloudabi::shims::os::*;\n-\n-pub fn errno() -> i32 {\n-    extern \"C\" {\n-        #[thread_local]\n-        static errno: c_int;\n-    }\n-\n-    unsafe { errno as i32 }\n-}\n-\n-/// Gets a detailed string description for the given error number.\n-pub fn error_string(errno: i32) -> String {\n-    // cloudlibc's strerror() is guaranteed to be thread-safe. There is\n-    // thus no need to use strerror_r().\n-    str::from_utf8(unsafe { CStr::from_ptr(libc::strerror(errno)) }.to_bytes()).unwrap().to_owned()\n-}\n-\n-pub fn exit(code: i32) -> ! {\n-    unsafe { libc::exit(code as c_int) }\n-}"}, {"sha": "508de8ba47c6e2632f48bbb7333bef08dbfcf5e4", "filename": "library/std/src/sys/cloudabi/rwlock.rs", "status": "removed", "additions": 0, "deletions": 215, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Frwlock.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,215 +0,0 @@\n-use crate::mem;\n-use crate::mem::MaybeUninit;\n-use crate::sync::atomic::{AtomicU32, Ordering};\n-use crate::sys::cloudabi::abi;\n-\n-extern \"C\" {\n-    #[thread_local]\n-    static __pthread_thread_id: abi::tid;\n-}\n-\n-#[thread_local]\n-static mut RDLOCKS_ACQUIRED: u32 = 0;\n-\n-pub struct RWLock {\n-    lock: AtomicU32,\n-}\n-\n-pub unsafe fn raw(r: &RWLock) -> &AtomicU32 {\n-    &r.lock\n-}\n-\n-unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {}\n-\n-impl RWLock {\n-    pub const fn new() -> RWLock {\n-        RWLock { lock: AtomicU32::new(abi::LOCK_UNLOCKED.0) }\n-    }\n-\n-    pub unsafe fn try_read(&self) -> bool {\n-        let mut old = abi::LOCK_UNLOCKED.0;\n-        while let Err(cur) =\n-            self.lock.compare_exchange_weak(old, old + 1, Ordering::Acquire, Ordering::Relaxed)\n-        {\n-            if (cur & abi::LOCK_WRLOCKED.0) != 0 {\n-                // Another thread already has a write lock.\n-                assert_ne!(\n-                    old & !abi::LOCK_KERNEL_MANAGED.0,\n-                    __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-                    \"Attempted to acquire a read lock while holding a write lock\"\n-                );\n-                return false;\n-            } else if (old & abi::LOCK_KERNEL_MANAGED.0) != 0 && RDLOCKS_ACQUIRED == 0 {\n-                // Lock has threads waiting for the lock. Only acquire\n-                // the lock if we have already acquired read locks. In\n-                // that case, it is justified to acquire this lock to\n-                // prevent a deadlock.\n-                return false;\n-            }\n-            old = cur;\n-        }\n-\n-        RDLOCKS_ACQUIRED += 1;\n-        true\n-    }\n-\n-    pub unsafe fn read(&self) {\n-        if !self.try_read() {\n-            // Call into the kernel to acquire a read lock.\n-            let subscription = abi::subscription {\n-                type_: abi::eventtype::LOCK_RDLOCK,\n-                union: abi::subscription_union {\n-                    lock: abi::subscription_lock {\n-                        lock: &self.lock as *const AtomicU32 as *mut abi::lock,\n-                        lock_scope: abi::scope::PRIVATE,\n-                    },\n-                },\n-                ..mem::zeroed()\n-            };\n-            let mut event = MaybeUninit::<abi::event>::uninit();\n-            let mut nevents = MaybeUninit::<usize>::uninit();\n-            let ret = abi::poll(&subscription, event.as_mut_ptr(), 1, nevents.as_mut_ptr());\n-            assert_eq!(ret, abi::errno::SUCCESS, \"Failed to acquire read lock\");\n-            let event = event.assume_init();\n-            assert_eq!(event.error, abi::errno::SUCCESS, \"Failed to acquire read lock\");\n-\n-            RDLOCKS_ACQUIRED += 1;\n-        }\n-    }\n-\n-    pub unsafe fn read_unlock(&self) {\n-        // Perform a read unlock. We can do this in userspace, except when\n-        // other threads are blocked and we are performing the last unlock.\n-        // In that case, call into the kernel.\n-        //\n-        // Other threads may attempt to increment the read lock count,\n-        // meaning that the call into the kernel could be spurious. To\n-        // prevent this from happening, upgrade to a write lock first. This\n-        // allows us to call into the kernel, having the guarantee that the\n-        // lock value will not change in the meantime.\n-        assert!(RDLOCKS_ACQUIRED > 0, \"Bad lock count\");\n-        let mut old = 1;\n-        loop {\n-            if old == 1 | abi::LOCK_KERNEL_MANAGED.0 {\n-                // Last read lock while threads are waiting. Attempt to upgrade\n-                // to a write lock before calling into the kernel to unlock.\n-                if let Err(cur) = self.lock.compare_exchange_weak(\n-                    old,\n-                    __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0 | abi::LOCK_KERNEL_MANAGED.0,\n-                    Ordering::Acquire,\n-                    Ordering::Relaxed,\n-                ) {\n-                    old = cur;\n-                } else {\n-                    // Call into the kernel to unlock.\n-                    let ret = abi::lock_unlock(\n-                        &self.lock as *const AtomicU32 as *mut abi::lock,\n-                        abi::scope::PRIVATE,\n-                    );\n-                    assert_eq!(ret, abi::errno::SUCCESS, \"Failed to write unlock a rwlock\");\n-                    break;\n-                }\n-            } else {\n-                // No threads waiting or not the last read lock. Just decrement\n-                // the read lock count.\n-                assert_ne!(old & !abi::LOCK_KERNEL_MANAGED.0, 0, \"This rwlock is not locked\");\n-                assert_eq!(\n-                    old & abi::LOCK_WRLOCKED.0,\n-                    0,\n-                    \"Attempted to read-unlock a write-locked rwlock\"\n-                );\n-                if let Err(cur) = self.lock.compare_exchange_weak(\n-                    old,\n-                    old - 1,\n-                    Ordering::Acquire,\n-                    Ordering::Relaxed,\n-                ) {\n-                    old = cur;\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-\n-        RDLOCKS_ACQUIRED -= 1;\n-    }\n-\n-    pub unsafe fn try_write(&self) -> bool {\n-        // Attempt to acquire the lock.\n-        if let Err(old) = self.lock.compare_exchange(\n-            abi::LOCK_UNLOCKED.0,\n-            __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-            Ordering::Acquire,\n-            Ordering::Relaxed,\n-        ) {\n-            // Failure. Crash upon recursive acquisition.\n-            assert_ne!(\n-                old & !abi::LOCK_KERNEL_MANAGED.0,\n-                __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-                \"Attempted to recursive write-lock a rwlock\",\n-            );\n-            false\n-        } else {\n-            // Success.\n-            true\n-        }\n-    }\n-\n-    pub unsafe fn write(&self) {\n-        if !self.try_write() {\n-            // Call into the kernel to acquire a write lock.\n-            let subscription = abi::subscription {\n-                type_: abi::eventtype::LOCK_WRLOCK,\n-                union: abi::subscription_union {\n-                    lock: abi::subscription_lock {\n-                        lock: &self.lock as *const AtomicU32 as *mut abi::lock,\n-                        lock_scope: abi::scope::PRIVATE,\n-                    },\n-                },\n-                ..mem::zeroed()\n-            };\n-            let mut event = MaybeUninit::<abi::event>::uninit();\n-            let mut nevents = MaybeUninit::<usize>::uninit();\n-            let ret = abi::poll(&subscription, event.as_mut_ptr(), 1, nevents.as_mut_ptr());\n-            assert_eq!(ret, abi::errno::SUCCESS, \"Failed to acquire write lock\");\n-            let event = event.assume_init();\n-            assert_eq!(event.error, abi::errno::SUCCESS, \"Failed to acquire write lock\");\n-        }\n-    }\n-\n-    pub unsafe fn write_unlock(&self) {\n-        assert_eq!(\n-            self.lock.load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n-            __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-            \"This rwlock is not write-locked by this thread\"\n-        );\n-\n-        if !self\n-            .lock\n-            .compare_exchange(\n-                __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n-                abi::LOCK_UNLOCKED.0,\n-                Ordering::Release,\n-                Ordering::Relaxed,\n-            )\n-            .is_ok()\n-        {\n-            // Lock is managed by kernelspace. Call into the kernel\n-            // to unblock waiting threads.\n-            let ret = abi::lock_unlock(\n-                &self.lock as *const AtomicU32 as *mut abi::lock,\n-                abi::scope::PRIVATE,\n-            );\n-            assert_eq!(ret, abi::errno::SUCCESS, \"Failed to write unlock a rwlock\");\n-        }\n-    }\n-\n-    pub unsafe fn destroy(&self) {\n-        assert_eq!(\n-            self.lock.load(Ordering::Relaxed),\n-            abi::LOCK_UNLOCKED.0,\n-            \"Attempted to destroy locked rwlock\"\n-        );\n-    }\n-}"}, {"sha": "f5cf71caf6c048f28f98bdc621066b3b32f34f3b", "filename": "library/std/src/sys/cloudabi/shims/args.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fargs.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,35 +0,0 @@\n-use crate::ffi::OsString;\n-\n-pub struct Args(());\n-\n-impl Args {\n-    pub fn inner_debug(&self) -> &[OsString] {\n-        &[]\n-    }\n-}\n-\n-impl Iterator for Args {\n-    type Item = OsString;\n-    fn next(&mut self) -> Option<OsString> {\n-        None\n-    }\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        (0, Some(0))\n-    }\n-}\n-\n-impl ExactSizeIterator for Args {\n-    fn len(&self) -> usize {\n-        0\n-    }\n-}\n-\n-impl DoubleEndedIterator for Args {\n-    fn next_back(&mut self) -> Option<OsString> {\n-        None\n-    }\n-}\n-\n-pub fn args() -> Args {\n-    Args(())\n-}"}, {"sha": "de165a864b979cd2d6fe4afd677c948a04eaa7c8", "filename": "library/std/src/sys/cloudabi/shims/env.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fenv.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,9 +0,0 @@\n-pub mod os {\n-    pub const FAMILY: &str = \"cloudabi\";\n-    pub const OS: &str = \"cloudabi\";\n-    pub const DLL_PREFIX: &str = \"lib\";\n-    pub const DLL_SUFFIX: &str = \".so\";\n-    pub const DLL_EXTENSION: &str = \"so\";\n-    pub const EXE_SUFFIX: &str = \"\";\n-    pub const EXE_EXTENSION: &str = \"\";\n-}"}, {"sha": "a11cde9aea3e52c0913ab0dba66809204e38b42b", "filename": "library/std/src/sys/cloudabi/shims/fs.rs", "status": "removed", "additions": 0, "deletions": 308, "changes": 308, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,308 +0,0 @@\n-use crate::ffi::OsString;\n-use crate::fmt;\n-use crate::hash::{Hash, Hasher};\n-use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n-use crate::path::{Path, PathBuf};\n-use crate::sys::time::SystemTime;\n-use crate::sys::{unsupported, Void};\n-\n-pub struct File(Void);\n-\n-pub struct FileAttr(Void);\n-\n-pub struct ReadDir(Void);\n-\n-pub struct DirEntry(Void);\n-\n-#[derive(Clone, Debug)]\n-pub struct OpenOptions {}\n-\n-pub struct FilePermissions(Void);\n-\n-pub struct FileType(Void);\n-\n-#[derive(Debug)]\n-pub struct DirBuilder {}\n-\n-impl FileAttr {\n-    pub fn size(&self) -> u64 {\n-        match self.0 {}\n-    }\n-\n-    pub fn perm(&self) -> FilePermissions {\n-        match self.0 {}\n-    }\n-\n-    pub fn file_type(&self) -> FileType {\n-        match self.0 {}\n-    }\n-\n-    pub fn modified(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n-    }\n-\n-    pub fn accessed(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n-    }\n-\n-    pub fn created(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for FileAttr {\n-    fn clone(&self) -> FileAttr {\n-        match self.0 {}\n-    }\n-}\n-\n-impl FilePermissions {\n-    pub fn readonly(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_readonly(&mut self, _readonly: bool) {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for FilePermissions {\n-    fn clone(&self) -> FilePermissions {\n-        match self.0 {}\n-    }\n-}\n-\n-impl PartialEq for FilePermissions {\n-    fn eq(&self, _other: &FilePermissions) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Eq for FilePermissions {}\n-\n-impl fmt::Debug for FilePermissions {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl FileType {\n-    pub fn is_dir(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_file(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_symlink(&self) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for FileType {\n-    fn clone(&self) -> FileType {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Copy for FileType {}\n-\n-impl PartialEq for FileType {\n-    fn eq(&self, _other: &FileType) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Eq for FileType {}\n-\n-impl Hash for FileType {\n-    fn hash<H: Hasher>(&self, _h: &mut H) {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Debug for FileType {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Debug for ReadDir {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Iterator for ReadDir {\n-    type Item = io::Result<DirEntry>;\n-\n-    fn next(&mut self) -> Option<io::Result<DirEntry>> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl DirEntry {\n-    pub fn path(&self) -> PathBuf {\n-        match self.0 {}\n-    }\n-\n-    pub fn file_name(&self) -> OsString {\n-        match self.0 {}\n-    }\n-\n-    pub fn metadata(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n-    }\n-\n-    pub fn file_type(&self) -> io::Result<FileType> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl OpenOptions {\n-    pub fn new() -> OpenOptions {\n-        OpenOptions {}\n-    }\n-\n-    pub fn read(&mut self, _read: bool) {}\n-    pub fn write(&mut self, _write: bool) {}\n-    pub fn append(&mut self, _append: bool) {}\n-    pub fn truncate(&mut self, _truncate: bool) {}\n-    pub fn create(&mut self, _create: bool) {}\n-    pub fn create_new(&mut self, _create_new: bool) {}\n-}\n-\n-impl File {\n-    pub fn open(_path: &Path, _opts: &OpenOptions) -> io::Result<File> {\n-        unsupported()\n-    }\n-\n-    pub fn file_attr(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n-    }\n-\n-    pub fn fsync(&self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn datasync(&self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn truncate(&self, _size: u64) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn flush(&self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn seek(&self, _pos: SeekFrom) -> io::Result<u64> {\n-        match self.0 {}\n-    }\n-\n-    pub fn duplicate(&self) -> io::Result<File> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn diverge(&self) -> ! {\n-        match self.0 {}\n-    }\n-}\n-\n-impl DirBuilder {\n-    pub fn new() -> DirBuilder {\n-        DirBuilder {}\n-    }\n-\n-    pub fn mkdir(&self, _p: &Path) -> io::Result<()> {\n-        unsupported()\n-    }\n-}\n-\n-impl fmt::Debug for File {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-pub fn readdir(_p: &Path) -> io::Result<ReadDir> {\n-    unsupported()\n-}\n-\n-pub fn unlink(_p: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn rename(_old: &Path, _new: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn set_perm(_p: &Path, perm: FilePermissions) -> io::Result<()> {\n-    match perm.0 {}\n-}\n-\n-pub fn rmdir(_p: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn remove_dir_all(_path: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn readlink(_p: &Path) -> io::Result<PathBuf> {\n-    unsupported()\n-}\n-\n-pub fn symlink(_original: &Path, _link: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn link(_src: &Path, _dst: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn stat(_p: &Path) -> io::Result<FileAttr> {\n-    unsupported()\n-}\n-\n-pub fn lstat(_p: &Path) -> io::Result<FileAttr> {\n-    unsupported()\n-}\n-\n-pub fn canonicalize(_p: &Path) -> io::Result<PathBuf> {\n-    unsupported()\n-}\n-\n-pub fn copy(_from: &Path, _to: &Path) -> io::Result<u64> {\n-    unsupported()\n-}"}, {"sha": "b1b5f142f45c2cf95775324d52d1086a8aeda425", "filename": "library/std/src/sys/cloudabi/shims/mod.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fmod.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,19 +0,0 @@\n-use crate::io;\n-\n-pub mod args;\n-pub mod env;\n-pub mod fs;\n-pub mod net;\n-pub mod os;\n-#[path = \"../../unix/path.rs\"]\n-pub mod path;\n-pub mod pipe;\n-pub mod process;\n-\n-// This enum is used as the storage for a bunch of types which can't actually exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n-pub fn unsupported<T>() -> io::Result<T> {\n-    Err(io::Error::new(io::ErrorKind::Other, \"This function is not available on CloudABI.\"))\n-}"}, {"sha": "375aaab405dff13b9de4ae81c4d104b622182647", "filename": "library/std/src/sys/cloudabi/shims/net.rs", "status": "removed", "additions": 0, "deletions": 326, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,326 +0,0 @@\n-use crate::convert::TryFrom;\n-use crate::fmt;\n-use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use crate::sys::{unsupported, Void};\n-use crate::time::Duration;\n-\n-#[allow(unused_extern_crates)]\n-pub extern crate libc as netc;\n-\n-pub struct TcpStream(Void);\n-\n-impl TcpStream {\n-    pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {\n-        unsupported()\n-    }\n-\n-    pub fn connect_timeout(_: &SocketAddr, _: Duration) -> io::Result<TcpStream> {\n-        unsupported()\n-    }\n-\n-    pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n-    }\n-\n-    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n-    }\n-\n-    pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n-    }\n-\n-    pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n-    }\n-\n-    pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn duplicate(&self) -> io::Result<TcpStream> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn nodelay(&self) -> io::Result<bool> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n-    }\n-\n-    pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Debug for TcpStream {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-pub struct TcpListener(Void);\n-\n-impl TcpListener {\n-    pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n-        unsupported()\n-    }\n-\n-    pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n-    }\n-\n-    pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        match self.0 {}\n-    }\n-\n-    pub fn duplicate(&self) -> io::Result<TcpListener> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_only_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn only_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n-    }\n-\n-    pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Debug for TcpListener {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-pub struct UdpSocket(Void);\n-\n-impl UdpSocket {\n-    pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n-        unsupported()\n-    }\n-\n-    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n-    }\n-\n-    pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n-    }\n-\n-    pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n-    }\n-\n-    pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n-    }\n-\n-    pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n-    }\n-\n-    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn broadcast(&self) -> io::Result<bool> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n-    }\n-\n-    pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n-    }\n-\n-    pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Debug for UdpSocket {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-pub struct LookupHost(Void);\n-\n-impl LookupHost {\n-    pub fn port(&self) -> u16 {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Iterator for LookupHost {\n-    type Item = SocketAddr;\n-    fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl TryFrom<&str> for LookupHost {\n-    type Error = io::Error;\n-\n-    fn try_from(_v: &str) -> io::Result<LookupHost> {\n-        unsupported()\n-    }\n-}\n-\n-impl<'a> TryFrom<(&'a str, u16)> for LookupHost {\n-    type Error = io::Error;\n-\n-    fn try_from(_v: (&'a str, u16)) -> io::Result<LookupHost> {\n-        unsupported()\n-    }\n-}"}, {"sha": "779e6d54b7c9f85f6dae8ff9179bc4c901a01fd1", "filename": "library/std/src/sys/cloudabi/shims/os.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fos.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,86 +0,0 @@\n-use crate::error::Error as StdError;\n-use crate::ffi::{OsStr, OsString};\n-use crate::fmt;\n-use crate::io;\n-use crate::iter;\n-use crate::path::{self, PathBuf};\n-use crate::sys::{unsupported, Void};\n-\n-pub fn getcwd() -> io::Result<PathBuf> {\n-    unsupported()\n-}\n-\n-pub fn chdir(_: &path::Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub type Env = iter::Empty<(OsString, OsString)>;\n-\n-pub fn env() -> Env {\n-    iter::empty()\n-}\n-\n-pub fn getenv(_: &OsStr) -> io::Result<Option<OsString>> {\n-    Ok(None)\n-}\n-\n-pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn unsetenv(_: &OsStr) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub struct SplitPaths<'a>(&'a Void);\n-\n-pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n-    panic!(\"unsupported\")\n-}\n-\n-impl<'a> Iterator for SplitPaths<'a> {\n-    type Item = PathBuf;\n-    fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct JoinPathsError;\n-\n-pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>\n-where\n-    I: Iterator<Item = T>,\n-    T: AsRef<OsStr>,\n-{\n-    Err(JoinPathsError)\n-}\n-\n-impl fmt::Display for JoinPathsError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        \"not supported on CloudABI yet\".fmt(f)\n-    }\n-}\n-\n-impl StdError for JoinPathsError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        \"not supported on CloudABI yet\"\n-    }\n-}\n-\n-pub fn home_dir() -> Option<PathBuf> {\n-    None\n-}\n-\n-pub fn temp_dir() -> PathBuf {\n-    PathBuf::from(\"/tmp\")\n-}\n-\n-pub fn current_exe() -> io::Result<PathBuf> {\n-    unsupported()\n-}\n-\n-pub fn getpid() -> u32 {\n-    1\n-}"}, {"sha": "10d0925823eb94660278ce2390c892c093d7e3c6", "filename": "library/std/src/sys/cloudabi/shims/pipe.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,38 +0,0 @@\n-use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::sys::Void;\n-\n-pub struct AnonPipe(Void);\n-\n-impl AnonPipe {\n-    pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn diverge(&self) -> ! {\n-        match self.0 {}\n-    }\n-}\n-\n-pub fn read2(p1: AnonPipe, _v1: &mut Vec<u8>, _p2: AnonPipe, _v2: &mut Vec<u8>) -> io::Result<()> {\n-    match p1.0 {}\n-}"}, {"sha": "4702e5c549228ea27e5c59777cb707b34ea5d248", "filename": "library/std/src/sys/cloudabi/shims/process.rs", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,149 +0,0 @@\n-use crate::ffi::OsStr;\n-use crate::fmt;\n-use crate::io;\n-use crate::sys::fs::File;\n-use crate::sys::pipe::AnonPipe;\n-use crate::sys::{unsupported, Void};\n-use crate::sys_common::process::CommandEnv;\n-\n-pub use crate::ffi::OsString as EnvKey;\n-\n-////////////////////////////////////////////////////////////////////////////////\n-// Command\n-////////////////////////////////////////////////////////////////////////////////\n-\n-pub struct Command {\n-    env: CommandEnv,\n-}\n-\n-// passed back to std::process with the pipes connected to the child, if any\n-// were requested\n-pub struct StdioPipes {\n-    pub stdin: Option<AnonPipe>,\n-    pub stdout: Option<AnonPipe>,\n-    pub stderr: Option<AnonPipe>,\n-}\n-\n-pub enum Stdio {\n-    Inherit,\n-    Null,\n-    MakePipe,\n-}\n-\n-impl Command {\n-    pub fn new(_program: &OsStr) -> Command {\n-        Command { env: Default::default() }\n-    }\n-\n-    pub fn arg(&mut self, _arg: &OsStr) {}\n-\n-    pub fn env_mut(&mut self) -> &mut CommandEnv {\n-        &mut self.env\n-    }\n-\n-    pub fn cwd(&mut self, _dir: &OsStr) {}\n-\n-    pub fn stdin(&mut self, _stdin: Stdio) {}\n-\n-    pub fn stdout(&mut self, _stdout: Stdio) {}\n-\n-    pub fn stderr(&mut self, _stderr: Stdio) {}\n-\n-    pub fn spawn(\n-        &mut self,\n-        _default: Stdio,\n-        _needs_stdin: bool,\n-    ) -> io::Result<(Process, StdioPipes)> {\n-        unsupported()\n-    }\n-}\n-\n-impl From<AnonPipe> for Stdio {\n-    fn from(pipe: AnonPipe) -> Stdio {\n-        pipe.diverge()\n-    }\n-}\n-\n-impl From<File> for Stdio {\n-    fn from(file: File) -> Stdio {\n-        file.diverge()\n-    }\n-}\n-\n-impl fmt::Debug for Command {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        Ok(())\n-    }\n-}\n-\n-pub struct ExitStatus(Void);\n-\n-impl ExitStatus {\n-    pub fn success(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn code(&self) -> Option<i32> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for ExitStatus {\n-    fn clone(&self) -> ExitStatus {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Copy for ExitStatus {}\n-\n-impl PartialEq for ExitStatus {\n-    fn eq(&self, _other: &ExitStatus) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Eq for ExitStatus {}\n-\n-impl fmt::Debug for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Display for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n-pub struct ExitCode(bool);\n-\n-impl ExitCode {\n-    pub const SUCCESS: ExitCode = ExitCode(false);\n-    pub const FAILURE: ExitCode = ExitCode(true);\n-\n-    pub fn as_i32(&self) -> i32 {\n-        self.0 as i32\n-    }\n-}\n-\n-pub struct Process(Void);\n-\n-impl Process {\n-    pub fn id(&self) -> u32 {\n-        match self.0 {}\n-    }\n-\n-    pub fn kill(&mut self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        match self.0 {}\n-    }\n-\n-    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n-        match self.0 {}\n-    }\n-}"}, {"sha": "9339b143731052799342e021d6bc1b37624e876f", "filename": "library/std/src/sys/cloudabi/stack_overflow.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstack_overflow.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,5 +0,0 @@\n-#![cfg_attr(test, allow(dead_code))]\n-\n-pub unsafe fn init() {}\n-\n-pub unsafe fn cleanup() {}"}, {"sha": "7fec4731a462c6b89cb580e43de7e33a2624bf67", "filename": "library/std/src/sys/cloudabi/stdio.rs", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstdio.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,66 +0,0 @@\n-use crate::io;\n-use crate::sys::cloudabi::abi;\n-\n-pub struct Stdin(());\n-pub struct Stdout(());\n-pub struct Stderr(());\n-\n-impl Stdin {\n-    pub const fn new() -> Stdin {\n-        Stdin(())\n-    }\n-}\n-\n-impl io::Read for Stdin {\n-    fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {\n-        Ok(0)\n-    }\n-}\n-\n-impl Stdout {\n-    pub const fn new() -> Stdout {\n-        Stdout(())\n-    }\n-}\n-\n-impl io::Write for Stdout {\n-    fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {\n-        Err(io::Error::new(\n-            io::ErrorKind::BrokenPipe,\n-            \"Stdout is not connected to any output in this environment\",\n-        ))\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-impl Stderr {\n-    pub const fn new() -> Stderr {\n-        Stderr(())\n-    }\n-}\n-\n-impl io::Write for Stderr {\n-    fn write(&mut self, _buf: &[u8]) -> io::Result<usize> {\n-        Err(io::Error::new(\n-            io::ErrorKind::BrokenPipe,\n-            \"Stderr is not connected to any output in this environment\",\n-        ))\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-pub fn is_ebadf(err: &io::Error) -> bool {\n-    err.raw_os_error() == Some(abi::errno::BADF as i32)\n-}\n-\n-pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n-\n-pub fn panic_output() -> Option<impl io::Write> {\n-    Some(Stderr::new())\n-}"}, {"sha": "a15dc8653e83a256d01ba17618caedd905e3b473", "filename": "library/std/src/sys/cloudabi/thread.rs", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fthread.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,118 +0,0 @@\n-use crate::cmp;\n-use crate::ffi::CStr;\n-use crate::io;\n-use crate::mem;\n-use crate::ptr;\n-use crate::sys::cloudabi::abi;\n-use crate::sys::time::checked_dur2intervals;\n-use crate::time::Duration;\n-\n-pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n-\n-pub struct Thread {\n-    id: libc::pthread_t,\n-}\n-\n-// CloudABI has pthread_t as a pointer in which case we still want\n-// a thread to be Send/Sync\n-unsafe impl Send for Thread {}\n-unsafe impl Sync for Thread {}\n-\n-impl Thread {\n-    // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n-        let p = Box::into_raw(box p);\n-        let mut native: libc::pthread_t = mem::zeroed();\n-        let mut attr: libc::pthread_attr_t = mem::zeroed();\n-        assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n-\n-        let stack_size = cmp::max(stack, min_stack_size(&attr));\n-        assert_eq!(libc::pthread_attr_setstacksize(&mut attr, stack_size), 0);\n-\n-        let ret = libc::pthread_create(&mut native, &attr, thread_start, p as *mut _);\n-        // Note: if the thread creation fails and this assert fails, then p will\n-        // be leaked. However, an alternative design could cause double-free\n-        // which is clearly worse.\n-        assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);\n-\n-        return if ret != 0 {\n-            // The thread failed to start and as a result p was not consumed. Therefore, it is\n-            // safe to reconstruct the box so that it gets deallocated.\n-            drop(Box::from_raw(p));\n-            Err(io::Error::from_raw_os_error(ret))\n-        } else {\n-            Ok(Thread { id: native })\n-        };\n-\n-        extern \"C\" fn thread_start(main: *mut libc::c_void) -> *mut libc::c_void {\n-            unsafe {\n-                // Let's run some code.\n-                Box::from_raw(main as *mut Box<dyn FnOnce()>)();\n-            }\n-            ptr::null_mut()\n-        }\n-    }\n-\n-    pub fn yield_now() {\n-        let ret = unsafe { abi::thread_yield() };\n-        debug_assert_eq!(ret, abi::errno::SUCCESS);\n-    }\n-\n-    pub fn set_name(_name: &CStr) {\n-        // CloudABI has no way to set a thread name.\n-    }\n-\n-    pub fn sleep(dur: Duration) {\n-        let timeout =\n-            checked_dur2intervals(&dur).expect(\"overflow converting duration to nanoseconds\");\n-        unsafe {\n-            let subscription = abi::subscription {\n-                type_: abi::eventtype::CLOCK,\n-                union: abi::subscription_union {\n-                    clock: abi::subscription_clock {\n-                        clock_id: abi::clockid::MONOTONIC,\n-                        timeout,\n-                        ..mem::zeroed()\n-                    },\n-                },\n-                ..mem::zeroed()\n-            };\n-            let mut event = mem::MaybeUninit::<abi::event>::uninit();\n-            let mut nevents = mem::MaybeUninit::<usize>::uninit();\n-            let ret = abi::poll(&subscription, event.as_mut_ptr(), 1, nevents.as_mut_ptr());\n-            assert_eq!(ret, abi::errno::SUCCESS);\n-            let event = event.assume_init();\n-            assert_eq!(event.error, abi::errno::SUCCESS);\n-        }\n-    }\n-\n-    pub fn join(self) {\n-        unsafe {\n-            let ret = libc::pthread_join(self.id, ptr::null_mut());\n-            mem::forget(self);\n-            assert!(ret == 0, \"failed to join thread: {}\", io::Error::from_raw_os_error(ret));\n-        }\n-    }\n-}\n-\n-impl Drop for Thread {\n-    fn drop(&mut self) {\n-        let ret = unsafe { libc::pthread_detach(self.id) };\n-        debug_assert_eq!(ret, 0);\n-    }\n-}\n-\n-#[cfg_attr(test, allow(dead_code))]\n-pub mod guard {\n-    pub type Guard = !;\n-    pub unsafe fn current() -> Option<Guard> {\n-        None\n-    }\n-    pub unsafe fn init() -> Option<Guard> {\n-        None\n-    }\n-}\n-\n-fn min_stack_size(_: *const libc::pthread_attr_t) -> usize {\n-    libc::PTHREAD_STACK_MIN\n-}"}, {"sha": "c209231cf8c0186352f5020194283d293feb46df", "filename": "library/std/src/sys/cloudabi/time.rs", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Ftime.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,82 +0,0 @@\n-use crate::mem;\n-use crate::sys::cloudabi::abi;\n-use crate::time::Duration;\n-\n-const NSEC_PER_SEC: abi::timestamp = 1_000_000_000;\n-\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub struct Instant {\n-    t: abi::timestamp,\n-}\n-\n-pub fn checked_dur2intervals(dur: &Duration) -> Option<abi::timestamp> {\n-    dur.as_secs().checked_mul(NSEC_PER_SEC)?.checked_add(dur.subsec_nanos() as abi::timestamp)\n-}\n-\n-impl Instant {\n-    pub fn now() -> Instant {\n-        unsafe {\n-            let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n-            let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, t.as_mut_ptr());\n-            assert_eq!(ret, abi::errno::SUCCESS);\n-            Instant { t: t.assume_init() }\n-        }\n-    }\n-\n-    pub fn actually_monotonic() -> bool {\n-        true\n-    }\n-\n-    pub const fn zero() -> Instant {\n-        Instant { t: 0 }\n-    }\n-\n-    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n-        let diff = self.t.checked_sub(other.t)?;\n-        Some(Duration::new(diff / NSEC_PER_SEC, (diff % NSEC_PER_SEC) as u32))\n-    }\n-\n-    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n-        Some(Instant { t: self.t.checked_add(checked_dur2intervals(other)?)? })\n-    }\n-\n-    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n-        Some(Instant { t: self.t.checked_sub(checked_dur2intervals(other)?)? })\n-    }\n-}\n-\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub struct SystemTime {\n-    t: abi::timestamp,\n-}\n-\n-impl SystemTime {\n-    pub fn now() -> SystemTime {\n-        unsafe {\n-            let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n-            let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, t.as_mut_ptr());\n-            assert_eq!(ret, abi::errno::SUCCESS);\n-            SystemTime { t: t.assume_init() }\n-        }\n-    }\n-\n-    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {\n-        if self.t >= other.t {\n-            let diff = self.t - other.t;\n-            Ok(Duration::new(diff / NSEC_PER_SEC, (diff % NSEC_PER_SEC) as u32))\n-        } else {\n-            let diff = other.t - self.t;\n-            Err(Duration::new(diff / NSEC_PER_SEC, (diff % NSEC_PER_SEC) as u32))\n-        }\n-    }\n-\n-    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        Some(SystemTime { t: self.t.checked_add(checked_dur2intervals(other)?)? })\n-    }\n-\n-    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        Some(SystemTime { t: self.t.checked_sub(checked_dur2intervals(other)?)? })\n-    }\n-}\n-\n-pub const UNIX_EPOCH: SystemTime = SystemTime { t: 0 };"}, {"sha": "d48d9cb0efce02c63dedfe7ecd86269bed2e9aa3", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -32,9 +32,6 @@ cfg_if::cfg_if! {\n     } else if #[cfg(windows)] {\n         mod windows;\n         pub use self::windows::*;\n-    } else if #[cfg(target_os = \"cloudabi\")] {\n-        mod cloudabi;\n-        pub use self::cloudabi::*;\n     } else if #[cfg(target_os = \"hermit\")] {\n         mod hermit;\n         pub use self::hermit::*;\n@@ -63,11 +60,10 @@ cfg_if::cfg_if! {\n         // On unix we'll document what's already available\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as unix_ext;\n-    } else if #[cfg(any(target_os = \"cloudabi\",\n-                        target_os = \"hermit\",\n+    } else if #[cfg(any(target_os = \"hermit\",\n                         target_arch = \"wasm32\",\n                         all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On CloudABI and wasm right now the module below doesn't compile\n+        // On wasm right now the module below doesn't compile\n         // (missing things in `libc` which is empty) so just omit everything\n         // with an empty module\n         #[unstable(issue = \"none\", feature = \"std_internals\")]\n@@ -88,11 +84,10 @@ cfg_if::cfg_if! {\n         #[allow(missing_docs)]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as windows_ext;\n-    } else if #[cfg(any(target_os = \"cloudabi\",\n-                        target_os = \"hermit\",\n+    } else if #[cfg(any(target_os = \"hermit\",\n                         target_arch = \"wasm32\",\n                         all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On CloudABI and wasm right now the shim below doesn't compile, so\n+        // On wasm right now the shim below doesn't compile, so\n         // just omit it\n         #[unstable(issue = \"none\", feature = \"std_internals\")]\n         #[allow(missing_docs)]"}, {"sha": "660f0e0df973235455333c6a86cc418241d6def5", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -71,8 +71,7 @@ pub mod util;\n pub mod wtf8;\n \n cfg_if::cfg_if! {\n-    if #[cfg(any(target_os = \"cloudabi\",\n-                 target_os = \"l4re\",\n+    if #[cfg(any(target_os = \"l4re\",\n                  target_os = \"hermit\",\n                  feature = \"restricted-std\",\n                  all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),"}, {"sha": "64a5f89890a31d48a54a6f6ad139d77ab7105bb6", "filename": "library/std/src/thread/available_concurrency.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fthread%2Favailable_concurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Fthread%2Favailable_concurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Favailable_concurrency.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -70,7 +70,6 @@ cfg_if::cfg_if! {\n         }\n     } else if #[cfg(any(\n         target_os = \"android\",\n-        target_os = \"cloudabi\",\n         target_os = \"emscripten\",\n         target_os = \"fuchsia\",\n         target_os = \"ios\","}, {"sha": "89addae078948708f7abfe574a21c575760588ec", "filename": "library/std/src/time.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -83,7 +83,6 @@ pub use core::time::Duration;\n ///\n /// |  Platform |               System call                                            |\n /// |:---------:|:--------------------------------------------------------------------:|\n-/// | CloudABI  | [clock_time_get (Monotonic Clock)]                                   |\n /// | SGX       | [`insecure_time` usercall]. More information on [timekeeping in SGX] |\n /// | UNIX      | [clock_gettime (Monotonic Clock)]                                    |\n /// | Darwin    | [mach_absolute_time]                                                 |\n@@ -97,7 +96,6 @@ pub use core::time::Duration;\n /// [__wasi_clock_time_get (Monotonic Clock)]: https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#clock_time_get\n /// [clock_gettime (Monotonic Clock)]: https://linux.die.net/man/3/clock_gettime\n /// [mach_absolute_time]: https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/services/services.html\n-/// [clock_time_get (Monotonic Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n ///\n /// **Disclaimer:** These system calls might change over time.\n ///\n@@ -161,15 +159,13 @@ pub struct Instant(time::Instant);\n ///\n /// |  Platform |               System call                                            |\n /// |:---------:|:--------------------------------------------------------------------:|\n-/// | CloudABI  | [clock_time_get (Realtime Clock)]                                    |\n /// | SGX       | [`insecure_time` usercall]. More information on [timekeeping in SGX] |\n /// | UNIX      | [clock_gettime (Realtime Clock)]                                     |\n /// | Darwin    | [gettimeofday]                                                       |\n /// | VXWorks   | [clock_gettime (Realtime Clock)]                                     |\n /// | WASI      | [__wasi_clock_time_get (Realtime Clock)]                             |\n /// | Windows   | [GetSystemTimePreciseAsFileTime] / [GetSystemTimeAsFileTime]         |\n ///\n-/// [clock_time_get (Realtime Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n /// [gettimeofday]: http://man7.org/linux/man-pages/man2/gettimeofday.2.html"}, {"sha": "e48ca892122aea1f45868fe5515a642e76aba107", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -20,7 +20,7 @@\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"50297\")]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n-#![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n+#![cfg_attr(unix, feature(libc))]\n #![feature(rustc_private)]\n #![feature(nll)]\n #![feature(bool_to_option)]"}, {"sha": "fae760c4a4e6b814ef3a551ffa022c726c180fbf", "filename": "library/unwind/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Funwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Funwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fbuild.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -44,8 +44,6 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"redox\") {\n         // redox is handled in lib.rs\n-    } else if target.contains(\"cloudabi\") {\n-        println!(\"cargo:rustc-link-lib=unwind\");\n     }\n }\n "}, {"sha": "d145c6767ec267d5f3a04d9cc0127d07060d4f74", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -20,7 +20,6 @@ cfg_if::cfg_if! {\n         unix,\n         windows,\n         target_os = \"psp\",\n-        target_os = \"cloudabi\",\n         all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     ))] {\n         mod libunwind;"}, {"sha": "45cce186c09969b9dc597b6da531c63438a96f6c", "filename": "rustfmt.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -32,7 +32,4 @@ ignore = [\n     \"src/tools/rust-analyzer\",\n     \"src/tools/rustfmt\",\n     \"src/tools/rust-installer\",\n-\n-    # We do not format this file as it is externally sourced and auto-generated.\n-    \"library/std/src/sys/cloudabi/abi/cloudabi.rs\",\n ]"}, {"sha": "b7ff6cd4e4feb07eb476a7c07ca56e1746749064", "filename": "src/ci/docker/host-x86_64/dist-various-2/build-cloudabi-toolchain.sh", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,40 +0,0 @@\n-#!/bin/bash\n-\n-set -eux\n-\n-# Install prerequisites.\n-apt-get update\n-apt-get install -y --no-install-recommends \\\n-  apt-transport-https \\\n-  ca-certificates \\\n-  clang-5.0 \\\n-  cmake \\\n-  curl \\\n-  file \\\n-  g++ \\\n-  gdb \\\n-  git \\\n-  lld-5.0 \\\n-  make \\\n-  ninja-build \\\n-  python \\\n-  sudo \\\n-  xz-utils\n-\n-# Set up a Clang-based cross compiler toolchain.\n-# Based on the steps described at https://nuxi.nl/cloudabi/debian/\n-target=$1\n-for tool in ar nm objdump ranlib size; do\n-  ln -s ../lib/llvm-5.0/bin/llvm-${tool} /usr/bin/${target}-${tool}\n-done\n-ln -s ../lib/llvm-5.0/bin/clang /usr/bin/${target}-cc\n-ln -s ../lib/llvm-5.0/bin/clang /usr/bin/${target}-c++\n-ln -s ../lib/llvm-5.0/bin/lld /usr/bin/${target}-ld\n-ln -s ../../${target} /usr/lib/llvm-5.0/${target}\n-\n-# Install the C++ runtime libraries from CloudABI Ports.\n-apt-key adv --batch --yes --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0DA51B8531344B15\n-add-apt-repository -y 'deb https://nuxi.nl/distfiles/cloudabi-ports/debian/ cloudabi cloudabi'\n-\n-apt-get update\n-apt-get install -y \"${target//_/-}-cxx-runtime\""}, {"sha": "8eb4821396daf04a3441994eb8c925088ca62cd9", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -153,7 +153,6 @@ not available.\n target | std | host | notes\n -------|-----|------|-------\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n-`aarch64-unknown-cloudabi` | \u2713 |  | ARM64 CloudABI\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | ? |  |\n `aarch64-unknown-netbsd` | ? |  |\n@@ -165,7 +164,6 @@ target | std | host | notes\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n `armv6-unknown-netbsd-eabihf` | ? |  |\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n-`armv7-unknown-cloudabi-eabihf` | \u2713 |  | ARMv7 CloudABI, hardfloat\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n `armv7-unknown-netbsd-eabihf` | ? |  |\n `armv7-wrs-vxworks-eabihf` | ? |  |\n@@ -176,7 +174,6 @@ target | std | host | notes\n `i386-apple-ios` | \u2713 |  | 32-bit x86 iOS\n `i686-apple-darwin` | \u2713 | \u2713 | 32-bit macOS (10.7+, Lion+)\n `i686-pc-windows-msvc` | \u2713 |  | 32-bit Windows XP support\n-`i686-unknown-cloudabi` | \u2713 |  | 32-bit CloudABI\n `i686-unknown-uefi` | ? |  | 32-bit UEFI\n `i686-unknown-haiku` | \u2713 | \u2713 | 32-bit Haiku\n `i686-unknown-netbsd` | \u2713 |  | NetBSD/i386 with SSE2\n@@ -215,7 +212,6 @@ target | std | host | notes\n `x86_64-linux-kernel` | * |  | Linux kernel modules\n `x86_64-pc-solaris` | ? |  |\n `x86_64-pc-windows-msvc` | \u2713 |  | 64-bit Windows XP support\n-`x86_64-unknown-cloudabi` | \u2713 |  | 64-bit CloudABI\n `x86_64-unknown-dragonfly` | \u2713 | \u2713 | 64-bit DragonFlyBSD\n `x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku\n `x86_64-unknown-hermit` | ? |  |"}, {"sha": "bb3134e81c930719e059774f3b7060389a9c61cc", "filename": "src/test/codegen/dllimports/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // This test is for *-windows-msvc only.\n // ignore-android\n-// ignore-cloudabi\n // ignore-dragonfly\n // ignore-emscripten\n // ignore-freebsd"}, {"sha": "9ee4bfc4711683dd63ec8e8845dcb3b4b6e67a19", "filename": "src/test/codegen/panic-abort-windows.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // This test is for *-windows-msvc only.\n // ignore-android\n-// ignore-cloudabi\n // ignore-dragonfly\n // ignore-emscripten\n // ignore-freebsd"}, {"sha": "9daf487d39feb6476628f72cba63fd8bfb9a4017", "filename": "src/test/run-pass-valgrind/exit-flushes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fexit-flushes.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,4 +1,3 @@\n-// ignore-cloudabi\n // ignore-emscripten\n // ignore-sgx no processes\n // ignore-macos this needs valgrind 3.11 or higher; see"}, {"sha": "0128e5e636d3411082dabe50e27e94c659bc5e89", "filename": "src/test/ui/abi/segfault-no-out-of-stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fabi%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fabi%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fsegfault-no-out-of-stack.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![allow(unused_imports)]\n-// ignore-cloudabi can't run commands\n // ignore-emscripten can't run commands\n // ignore-sgx no processes\n "}, {"sha": "90df1f3f53e800364259d9817758caa96c4dddbe", "filename": "src/test/ui/abi/stack-probes-lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fabi%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fabi%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes-lto.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -8,7 +8,6 @@\n // ignore-sparc\n // ignore-sparc64\n // ignore-wasm\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-musl FIXME #31506"}, {"sha": "6c83e01d4cdb5dc1ae61f89ee5bfad8e5ca7f003", "filename": "src/test/ui/abi/stack-probes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -8,7 +8,6 @@\n // ignore-sparc\n // ignore-sparc64\n // ignore-wasm\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "4d40c7d0d2237cd22c2e1e81006078b43eab7cde", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-android no libc\n-// ignore-cloudabi no libc\n // ignore-emscripten no libc\n // ignore-sgx no libc\n // ignore-wasm32 no libc"}, {"sha": "4f8c44f1763c8e87d644be80c99d5fec955153f2", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-android no libc\n-// ignore-cloudabi no libc\n // ignore-emscripten no libc\n // ignore-sgx no libc\n // ignore-wasm32 no libc"}, {"sha": "fe57910530f85ae08adaa502bcc3b347b83edefe", "filename": "src/test/ui/atomic-print.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fatomic-print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fatomic-print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fatomic-print.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(unused_must_use)]\n #![allow(deprecated)]\n-// ignore-cloudabi no process support\n // ignore-emscripten no threads support\n // ignore-sgx no processes\n "}, {"sha": "4862883fd96bdc2c7decd8dcdaa26d8de0066bd2", "filename": "src/test/ui/backtrace-debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbacktrace-debuginfo.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -9,7 +9,6 @@\n // compile-flags:-g -Cllvm-args=-enable-tail-merge=0 -Cllvm-args=-opt-bisect-limit=0\n // compile-flags:-Cforce-frame-pointers=yes\n // ignore-pretty issue #37195\n-// ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n // ignore-sgx no processes\n // normalize-stderr-test \".*\\n\" -> \"\""}, {"sha": "a7d17c43f05176c39c0ba66dc864fd9c0f95c89b", "filename": "src/test/ui/backtrace.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbacktrace.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-android FIXME #17520\n-// ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n // ignore-openbsd no support for libbacktrace without filename\n // ignore-sgx no processes"}, {"sha": "912bda4b5e5000af10f9072de419b363f2781a8c", "filename": "src/test/ui/cfg/cfg-family.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcfg%2Fcfg-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcfg%2Fcfg-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-family.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // pretty-expanded FIXME #23616\n-// ignore-cloudabi no target_family\n // ignore-wasm32-bare no target_family\n // ignore-sgx\n "}, {"sha": "b4dc1b738638c0b2657989bdec5f58a29f460b72", "filename": "src/test/ui/cfg/cfg-target-family.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-family.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no target_family\n // ignore-wasm32-bare no target_family\n // ignore-sgx\n "}, {"sha": "4f5197a5ba9b8c2ce36455cff4c9229d29bace59", "filename": "src/test/ui/cleanup-shortcircuit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-shortcircuit.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -2,7 +2,6 @@\n // Test that cleanups for the RHS of shortcircuiting operators work.\n \n // pretty-expanded FIXME #23616\n-// ignore-cloudabi no std::env support\n \n use std::env;\n "}, {"sha": "4aba1229f29a822f29995579a8b0ef84822cb4be", "filename": "src/test/ui/command/command-argv0-debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0-debug.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n // ignore-windows - this is a unix-specific test\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n use std::os::unix::process::CommandExt;"}, {"sha": "b782a4fd3d1db195575c157e5b65ccc31abef05f", "filename": "src/test/ui/command/command-argv0.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-argv0.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n // ignore-windows - this is a unix-specific test\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n use std::env;"}, {"sha": "0af87214f9523bae6366e92d348d64cf4ccc3312", "filename": "src/test/ui/command/command-exec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-exec.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -3,7 +3,6 @@\n #![allow(stable_features)]\n // ignore-windows - this is a unix-specific test\n // ignore-pretty issue #37199\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "8fc6a220331f0d6b73d98f4e9fba54b1ff120634", "filename": "src/test/ui/command/command-pre-exec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(stable_features)]\n // ignore-windows - this is a unix-specific test\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n #![feature(process_exec, rustc_private)]"}, {"sha": "e1eb4b1405b1f89b495ded14dfb1607ec88e959c", "filename": "src/test/ui/command/command-uid-gid.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-uid-gid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcommand%2Fcommand-uid-gid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-uid-gid.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-android\n-// ignore-cloudabi\n // ignore-emscripten\n // ignore-sgx\n "}, {"sha": "5fd418e6c86c1f86d748f7c446eef68a378bebbc", "filename": "src/test/ui/core-run-destroy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcore-run-destroy.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -5,7 +5,6 @@\n #![allow(deprecated)]\n #![allow(unused_imports)]\n // compile-flags:--test\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-vxworks no 'cat' and 'sleep'"}, {"sha": "100e974977c91b0159bb3018c9c95fc7e1018c41", "filename": "src/test/ui/default-alloc-error-hook.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fdefault-alloc-error-hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fdefault-alloc-error-hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdefault-alloc-error-hook.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "7f06718c038b50f97fc808acdcc3053570a7e694", "filename": "src/test/ui/env-args-reverse-iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fenv-args-reverse-iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fenv-args-reverse-iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenv-args-reverse-iterator.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "4548d3339472d60c0c0596bafaef94a0e6305149", "filename": "src/test/ui/env-funky-keys.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fenv-funky-keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fenv-funky-keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenv-funky-keys.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -3,7 +3,6 @@\n \n // ignore-android\n // ignore-windows\n-// ignore-cloudabi no execve\n // ignore-emscripten no execve\n // ignore-sgx no execve\n // ignore-vxworks no execve"}, {"sha": "c597b4732d15861c52035059abcc39570fd46d1b", "filename": "src/test/ui/env-home-dir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenv-home-dir.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(unused_variables)]\n #![allow(deprecated)]\n-// ignore-cloudabi no environment variables present\n // ignore-emscripten env vars don't work?\n // ignore-sgx env vars cannot be modified\n "}, {"sha": "f73902c40066df552b4fee5f18b6ea57903b4231", "filename": "src/test/ui/env-vars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fenv-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fenv-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenv-vars.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no env vars\n // ignore-wasm32-bare no env vars\n \n use std::env::*;"}, {"sha": "f0de4e3deb10fcda1ca24954ce86f205790fcedc", "filename": "src/test/ui/error-codes/E0277.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-cloudabi no std::path\n-\n use std::path::Path;\n \n trait Foo {"}, {"sha": "1f54af4d154e4524e942d8704ee35dfaabe803c0", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/E0277.rs:13:6\n+  --> $DIR/E0277.rs:11:6\n    |\n LL | fn f(p: Path) { }\n    |      ^ doesn't have a size known at compile-time\n@@ -13,7 +13,7 @@ LL | fn f(&p: Path) { }\n    |      ^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n-  --> $DIR/E0277.rs:17:15\n+  --> $DIR/E0277.rs:15:15\n    |\n LL | fn some_func<T: Foo>(foo: T) {\n    |                 --- required by this bound in `some_func`"}, {"sha": "d7f15bcae7d2c4cf19393e64ce14ae72c276547a", "filename": "src/test/ui/exec-env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fexec-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fexec-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexec-env.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // exec-env:TEST_EXEC_ENV=22\n-// ignore-cloudabi no env vars\n // ignore-emscripten FIXME: issue #31622\n // ignore-sgx unsupported\n "}, {"sha": "4482b7032a75a19b075591cece6eef3c7677147d", "filename": "src/test/ui/fds-are-cloexec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ffds-are-cloexec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ffds-are-cloexec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffds-are-cloexec.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // ignore-windows\n // ignore-android\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-haiku\n // ignore-sgx no processes"}, {"sha": "2bf40db5ad290056272a6b50018d40dc02c8c3f0", "filename": "src/test/ui/intrinsics/intrinsic-alignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-alignment.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -11,7 +11,6 @@ mod rusti {\n }\n \n #[cfg(any(target_os = \"android\",\n-          target_os = \"cloudabi\",\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\",\n           target_os = \"freebsd\","}, {"sha": "696a2dd1657657114edbe68f3e9b0217692bfca7", "filename": "src/test/ui/issues/issue-10626.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10626.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "e6b16e2da1dca51cf4b40cd8a4195ab5b7ed3a13", "filename": "src/test/ui/issues/issue-12133-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-12133-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-12133-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12133-3.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -2,7 +2,6 @@\n // aux-build:issue-12133-rlib.rs\n // aux-build:issue-12133-dylib.rs\n // aux-build:issue-12133-dylib2.rs\n-// ignore-cloudabi no dylib support\n // ignore-emscripten no dylib support\n // ignore-musl\n // ignore-sgx no dylib support"}, {"sha": "b10f6d57255de148a594170c19e6c8caeaab57ce", "filename": "src/test/ui/issues/issue-13304.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13304.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unused_mut)]\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "52a56eb77f78e613224b2d9bf0df6c4e95da276e", "filename": "src/test/ui/issues/issue-14456.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14456.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unused_mut)]\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "98a4af0c467a33acf42b804238fe8e4f9507c95c", "filename": "src/test/ui/issues/issue-14940.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14940.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "5cf3fd949282635bb3d277561752188238f5ca56", "filename": "src/test/ui/issues/issue-16272.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-16272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-16272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16272.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "1e7b9f015b96940c6cc4b9895b55a402a0016d67", "filename": "src/test/ui/issues/issue-17121.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-17121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-17121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17121.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n-// ignore-cloudabi no std::fs\n \n use std::fs::File;\n use std::io::{self, BufReader, Read};"}, {"sha": "86cc79d6b4244f1d0fa8082229d756c1374c7656", "filename": "src/test/ui/issues/issue-20091.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20091.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(stable_features)]\n \n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "71c6746e0e04059f761981cad47234156eae2988", "filename": "src/test/ui/issues/issue-20644.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20644.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -7,7 +7,6 @@\n // had to do with codegen ignoring binders.\n \n // pretty-expanded FIXME #23616\n-// ignore-cloudabi no std::fs\n \n #![feature(os)]\n "}, {"sha": "ef0e72571efb2e683cde5d67727a1d476c7f8289", "filename": "src/test/ui/issues/issue-20797.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20797.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // build-pass\n-// ignore-cloudabi no std::fs\n \n // Regression test for #20797.\n "}, {"sha": "52ab29f423533987e3da23cc67ed8ca97e3713ef", "filename": "src/test/ui/issues/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -24,7 +24,7 @@ mod m {\n     use libc::{c_double, c_int};\n \n     extern {\n-        #[cfg(any(all(unix, not(target_os = \"vxworks\")), target_os = \"cloudabi\"))]\n+        #[cfg(all(unix, not(target_os = \"vxworks\")))]\n         #[link_name=\"lgamma_r\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n         #[cfg(windows)]"}, {"sha": "8aca21bf10fe4693f42e1aed05f90d4b62ce57e4", "filename": "src/test/ui/issues/issue-22577.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-22577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-22577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22577.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n-// ignore-cloudabi no std::fs\n \n use std::{fs, net};\n "}, {"sha": "d67f184720e6cb82be639057fdc5bc888390bdcd", "filename": "src/test/ui/issues/issue-23036.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-23036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-23036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23036.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no std::path\n \n use std::collections::HashMap;\n use std::path::Path;"}, {"sha": "ce7d8e3a7554730ed152a40661fa6ad592fe86d8", "filename": "src/test/ui/issues/issue-23649-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-23649-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-23649-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23649-2.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no std::path\n \n use std::collections::HashMap;\n use std::path::{Path, PathBuf};"}, {"sha": "c28b4ca96014b691c16d3bdd592fca745c402a38", "filename": "src/test/ui/issues/issue-24313.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-24313.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-24313.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24313.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no threads\n // ignore-sgx no processes\n "}, {"sha": "233670681f375279af5c37877737abacb7160034", "filename": "src/test/ui/issues/issue-27859.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-27859.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-27859.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27859.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no std::env\n // ignore-wasm32 issue 42629\n \n #[inline(never)]"}, {"sha": "47c17e362ae0bacca5af274e384a88340970364f", "filename": "src/test/ui/issues/issue-30490.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-30490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-30490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30490.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "f3c99015b6d82f9c07408b5ebd97b42d2b9b9465", "filename": "src/test/ui/issues/issue-33770.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-33770.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-33770.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33770.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "81ff478aabc636feb284f3d55c098a6c30b0724e", "filename": "src/test/ui/issues/issue-37665.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-37665.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-37665.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37665.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -Z unpretty=mir\n-// ignore-cloudabi no std::path\n \n use std::path::MAIN_SEPARATOR;\n "}, {"sha": "1e1f451b450af2c4cbbf2209eb1cdca41423f7f5", "filename": "src/test/ui/issues/issue-37665.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-37665.rs:10:17\n+  --> $DIR/issue-37665.rs:9:17\n    |\n LL |     let x: () = 0;\n    |            --   ^ expected `()`, found integer"}, {"sha": "3866e0651c302f68e2605db0da6384a123bd039b", "filename": "src/test/ui/issues/issue-39175.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-39175.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-39175.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39175.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -4,7 +4,6 @@\n // these platforms also.\n \n // ignore-windows\n-// ignore-cloudabi\n // ignore-emscripten\n // ignore-sgx no processes\n "}, {"sha": "afceae82e68becc5fadc63a6796f2c960dd26015", "filename": "src/test/ui/issues/issue-39175.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `exec` found for mutable reference `&mut Command` in the current scope\n-  --> $DIR/issue-39175.rs:15:39\n+  --> $DIR/issue-39175.rs:14:39\n    |\n LL |     Command::new(\"echo\").arg(\"hello\").exec();\n    |                                       ^^^^ method not found in `&mut Command`"}, {"sha": "e7f26d021515c3b7d217096d8ca2cd1513e2d5c0", "filename": "src/test/ui/issues/issue-4541.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4541.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no std::env\n \n fn parse_args() -> String {\n     let args: Vec<_> = ::std::env::args().collect();"}, {"sha": "2386561c39d261575f28693f58f2d6c521ef7182", "filename": "src/test/ui/issues/issue-4542.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-4542.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-4542.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4542.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // pretty-expanded FIXME #23616\n-// ignore-cloudabi no std::env\n \n use std::env;\n "}, {"sha": "15f458f38445f30be50438e6449457819840aa74", "filename": "src/test/ui/issues/issue-46576.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-46576.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-46576.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46576.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-cloudabi no std::fs support\n-\n #![allow(dead_code)]\n #![deny(unused_imports)]\n "}, {"sha": "6f4d97068b353647a13ea00dd9cff2e216bafb3c", "filename": "src/test/ui/issues/issue-46576.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-46576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fissues%2Fissue-46576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46576.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,11 +1,11 @@\n error: unused import: `BufRead`\n-  --> $DIR/issue-46576.rs:7:15\n+  --> $DIR/issue-46576.rs:5:15\n    |\n LL | use std::io::{BufRead, BufReader, Read};\n    |               ^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-46576.rs:4:9\n+  --> $DIR/issue-46576.rs:2:9\n    |\n LL | #![deny(unused_imports)]\n    |         ^^^^^^^^^^^^^^"}, {"sha": "7d641e08bf0127573b8965f422b7af9c4605017f", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,4 +1,3 @@\n-// ignore-cloudabi\n // ignore-windows\n // ignore-sgx std::os::fortanix_sgx::usercalls::alloc::Iter changes compiler suggestions\n // compile-flags: --error-format pretty-json --json=diagnostic-rendered-ansi"}, {"sha": "21342e2ef37a02e01900a3f6a7cde276f1d1d687", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -72,10 +72,10 @@ mod foo {\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-      \"byte_start\": 560,\n-      \"byte_end\": 564,\n-      \"line_start\": 13,\n-      \"line_end\": 13,\n+      \"byte_start\": 541,\n+      \"byte_end\": 545,\n+      \"line_start\": 12,\n+      \"line_end\": 12,\n       \"column_start\": 12,\n       \"column_end\": 16,\n       \"is_primary\": true,\n@@ -100,10 +100,10 @@ mod foo {\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -123,10 +123,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -146,10 +146,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -169,10 +169,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -192,10 +192,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -215,10 +215,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -238,10 +238,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -261,10 +261,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -284,10 +284,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -307,10 +307,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -330,10 +330,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -353,10 +353,10 @@ mod foo {\n         },\n         {\n           \"file_name\": \"$DIR/use_suggestion_json.rs\",\n-          \"byte_start\": 537,\n-          \"byte_end\": 537,\n-          \"line_start\": 12,\n-          \"line_end\": 12,\n+          \"byte_start\": 518,\n+          \"byte_end\": 518,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 1,\n           \"column_end\": 1,\n           \"is_primary\": true,\n@@ -380,7 +380,7 @@ mod foo {\n     }\n   ],\n   \"rendered\": \"\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0412]\\u001b[0m\\u001b[0m\\u001b[1m: cannot find type `Iter` in this scope\\u001b[0m\n-\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m$DIR/use_suggestion_json.rs:13:12\\u001b[0m\n+\\u001b[0m  \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m--> \\u001b[0m\\u001b[0m$DIR/use_suggestion_json.rs:12:12\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n \\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m    let x: Iter;\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m           \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mnot found in this scope\\u001b[0m"}, {"sha": "fff303495e75b98b5d64efda87a7cef8325df278", "filename": "src/test/ui/mir/issue-77911.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmir%2Fissue-77911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmir%2Fissue-77911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-77911.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -Z mir-opt-level=2\n-// ignore-cloudabi no std::fs\n // build-pass\n \n use std::fs::File;"}, {"sha": "2b33b616600bea4f9ca398ac2c552b7c31fe8ad5", "filename": "src/test/ui/mir/mir_dynamic_drops_1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_1.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-fail\n // error-pattern:drop 1\n // error-pattern:drop 2\n-// ignore-cloudabi no std::process\n // ignore-emscripten no processes\n \n /// Structure which will not allow to be dropped twice."}, {"sha": "c883efdabc3f68a917bb6926e00e805bf206e506", "filename": "src/test/ui/mir/mir_dynamic_drops_2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_2.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-fail\n // error-pattern:drop 1\n-// ignore-cloudabi no std::process\n // ignore-emscripten no processes\n \n /// Structure which will not allow to be dropped twice."}, {"sha": "eb76fdff88647b7474b1a7c7a0d1d2b5549dd63a", "filename": "src/test/ui/mir/mir_dynamic_drops_3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_dynamic_drops_3.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -3,7 +3,6 @@\n // error-pattern:drop 3\n // error-pattern:drop 2\n // error-pattern:drop 1\n-// ignore-cloudabi no std::process\n // ignore-emscripten no processes\n \n /// Structure which will not allow to be dropped twice."}, {"sha": "b230b47d35d37d08451e1e73cbbc1c189565b3a7", "filename": "src/test/ui/mismatched_types/recovered-block.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-cloudabi no std::env support\n-\n use std::env;\n \n pub struct Foo {"}, {"sha": "f2b8404a328e28af7e0159d3e5a7935501b54b1d", "filename": "src/test/ui/mismatched_types/recovered-block.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,5 @@\n error: missing `struct` for struct definition\n-  --> $DIR/recovered-block.rs:13:8\n+  --> $DIR/recovered-block.rs:11:8\n    |\n LL |     pub Foo { text }\n    |        ^\n@@ -10,7 +10,7 @@ LL |     pub struct Foo { text }\n    |         ^^^^^^\n \n error: expected one of `(` or `<`, found `{`\n-  --> $DIR/recovered-block.rs:19:9\n+  --> $DIR/recovered-block.rs:17:9\n    |\n LL |     Foo { text: \"\".to_string() }\n    |         ^ expected one of `(` or `<`"}, {"sha": "37e8b99c2f69744ee272355fa9c6d08a6b4a5c90", "filename": "src/test/ui/multi-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmulti-panic.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "9c884a33c5fec253e47a20b1467024194db685b4", "filename": "src/test/ui/never_type/issue-13352.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-cloudabi no std::process\n-\n fn foo(_: Box<dyn FnMut()>) {}\n \n fn main() {"}, {"sha": "b98f6c93923b99287edd4e8c63336c69b9745c82", "filename": "src/test/ui/never_type/issue-13352.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: cannot add `()` to `usize`\n-  --> $DIR/issue-13352.rs:9:13\n+  --> $DIR/issue-13352.rs:7:13\n    |\n LL |     2_usize + (loop {});\n    |             ^ no implementation for `usize + ()`"}, {"sha": "68e6fa838b4e283f286c628bb75401b1d18adca5", "filename": "src/test/ui/no-stdio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fno-stdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fno-stdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-stdio.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-android\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "2d59c9f29b12b732dd91bd06225d200b410d431f", "filename": "src/test/ui/out-of-stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fout-of-stack.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -3,7 +3,6 @@\n #![allow(unused_must_use)]\n #![allow(unconditional_recursion)]\n // ignore-android: FIXME (#20004)\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "f8368ff69008f02f5ea144e127d2e716db4d1843", "filename": "src/test/ui/panic-runtime/abort-link-to-unwind-dylib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // build-fail\n // compile-flags:-C panic=abort -C prefer-dynamic\n // ignore-musl - no dylibs here\n-// ignore-cloudabi\n // ignore-emscripten\n // ignore-sgx no dynamic lib support\n // error-pattern:`panic_unwind` is not compiled with this crate's panic strategy"}, {"sha": "566626513ef2dd2785261069bdcefcc07110fe7e", "filename": "src/test/ui/panic-runtime/abort-link-to-unwinding-crates.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwinding-crates.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -3,7 +3,6 @@\n // compile-flags:-C panic=abort\n // aux-build:exit-success-if-unwind.rs\n // no-prefer-dynamic\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-macos"}, {"sha": "dcc4061fde7a98da313856e3b22dc2c0ce388042", "filename": "src/test/ui/panic-runtime/abort.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -2,7 +2,6 @@\n #![allow(unused_variables)]\n // compile-flags:-C panic=abort\n // no-prefer-dynamic\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-macos"}, {"sha": "5cc4c0132353274c0b366812f777976b144c644d", "filename": "src/test/ui/panic-runtime/lto-abort.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-abort.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -2,7 +2,6 @@\n #![allow(unused_variables)]\n // compile-flags:-C lto -C panic=abort\n // no-prefer-dynamic\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "6f39b76526b64aae9a63dbcd99e3468b2dee7394", "filename": "src/test/ui/panic-runtime/lto-unwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Flto-unwind.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -3,7 +3,6 @@\n \n // compile-flags:-C lto -C panic=unwind\n // no-prefer-dynamic\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "f34cf6a9cbf6d91824c912c5acf4033b99891822", "filename": "src/test/ui/panics/abort-on-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanics%2Fabort-on-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanics%2Fabort-on-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fabort-on-panic.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -5,7 +5,6 @@\n // Since we mark some ABIs as \"nounwind\" to LLVM, we must make sure that\n // we never unwind through them.\n \n-// ignore-cloudabi no env and process\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "015ab8fdd80df6b234e034992bc574ba1b44c559", "filename": "src/test/ui/panics/issue-47429-short-backtraces.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -7,7 +7,6 @@\n \n // ignore-msvc see #62897 and `backtrace-debuginfo.rs` test\n // ignore-android FIXME #17520\n-// ignore-cloudabi spawning processes is not supported\n // ignore-openbsd no support for libbacktrace without filename\n // ignore-wasm no panic or subprocess support\n // ignore-emscripten no panic or subprocess support"}, {"sha": "3287963890706af240bcce21e5597cbfbd8f0abd", "filename": "src/test/ui/panics/issue-47429-short-backtraces.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.run.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,4 +1,4 @@\n-thread 'main' panicked at 'explicit panic', $DIR/issue-47429-short-backtraces.rs:17:5\n+thread 'main' panicked at 'explicit panic', $DIR/issue-47429-short-backtraces.rs:16:5\n stack backtrace:\n    0: std::panicking::begin_panic\n    1: issue_47429_short_backtraces::main"}, {"sha": "cb40c4f6fbf91a2649601336e947b54e0418b0eb", "filename": "src/test/ui/paths-containing-nul.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpaths-containing-nul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fpaths-containing-nul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpaths-containing-nul.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![allow(deprecated)]\n-// ignore-cloudabi no files or I/O\n // ignore-wasm32-bare no files or I/O\n // ignore-emscripten no files\n // ignore-sgx no files"}, {"sha": "cfa9aec80685801f3c8e218d0a430cd40962da4e", "filename": "src/test/ui/print-stdout-eprint-stderr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprint-stdout-eprint-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprint-stdout-eprint-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint-stdout-eprint-stderr.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n // ignore-sgx no processes\n "}, {"sha": "8fc99b23fd210bdf97a156d8d568e6f933c4146b", "filename": "src/test/ui/process/process-envs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-envs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-envs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-envs.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-vxworks no 'env'"}, {"sha": "d193e073e7f0737f64943200c8a16224afcc5952", "filename": "src/test/ui/process/process-exit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-exit.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(unused_imports)]\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "af4e49dfdbb5b3e406a2b3565809d50bc43a7f33", "filename": "src/test/ui/process/process-remove-from-env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-remove-from-env.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-vxworks no 'env'"}, {"sha": "ecf5e93c99ee50464b137c4ca8669d22f34ebb2c", "filename": "src/test/ui/process/process-sigpipe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-sigpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-sigpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-sigpipe.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -12,7 +12,6 @@\n // (instead of running forever), and that it does not print an error\n // message about a broken pipe.\n \n-// ignore-cloudabi no subprocesses support\n // ignore-emscripten no threads support\n // ignore-vxworks no 'sh'\n "}, {"sha": "70de7316a817035af679bd0eb5337fdf0f5d71b0", "filename": "src/test/ui/process/process-spawn-nonexistent.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-spawn-nonexistent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-spawn-nonexistent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-spawn-nonexistent.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "6e9229b62936c9176ef9ca79efdae61732217881", "filename": "src/test/ui/process/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-spawn-with-unicode-params.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -7,7 +7,6 @@\n // non-ASCII characters.  The child process ensures all the strings are\n // intact.\n \n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "7719dd9ad85570f9ab9c8cbb6117b8fc06565136", "filename": "src/test/ui/process/process-status-inherits-stdin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-status-inherits-stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Fprocess-status-inherits-stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-status-inherits-stdin.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "6296e5042d28031e039a570089627db95dcd9b93", "filename": "src/test/ui/process/tls-exit-status.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Ftls-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fprocess%2Ftls-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Ftls-exit-status.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-fail\n // error-pattern:nonzero\n // exec-env:RUST_NEWRT=1\n-// ignore-cloudabi no std::env\n // ignore-emscripten no processes\n \n use std::env;"}, {"sha": "52934085fa1423c5142622d910a526f297190a5e", "filename": "src/test/ui/resolve/token-error-correct-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-cloudabi no std::fs support\n-\n // Test that we do some basic error correction in the tokeniser (and don't spew\n // too many bogus errors).\n "}, {"sha": "31087e394adfe4a6fef782ba219fc8ca2b9e03d2", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,21 +1,21 @@\n error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n-  --> $DIR/token-error-correct-3.rs:15:35\n+  --> $DIR/token-error-correct-3.rs:13:35\n    |\n LL |             callback(path.as_ref();\n    |                     -             ^ help: `)` may belong here\n    |                     |\n    |                     unclosed delimiter\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n-  --> $DIR/token-error-correct-3.rs:18:9\n+  --> $DIR/token-error-correct-3.rs:16:9\n    |\n LL |             fs::create_dir_all(path.as_ref()).map(|()| true)\n    |                                                             - expected one of `.`, `;`, `?`, `}`, or an operator\n LL |         } else {\n    |         ^ unexpected token\n \n error[E0425]: cannot find function `is_directory` in this scope\n-  --> $DIR/token-error-correct-3.rs:13:13\n+  --> $DIR/token-error-correct-3.rs:11:13\n    |\n LL |         if !is_directory(path.as_ref()) {\n    |             ^^^^^^^^^^^^ not found in this scope"}, {"sha": "56d4b8d6d11cfcd978986db7c2bcb94839f10d29", "filename": "src/test/ui/resolve/use_suggestion_placement.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-cloudabi no std::path support\n-\n macro_rules! y {\n     () => {}\n }"}, {"sha": "af0495a57a1e078e68f6612af18b7d9de6dcbdb5", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `Path` in this scope\n-  --> $DIR/use_suggestion_placement.rs:17:16\n+  --> $DIR/use_suggestion_placement.rs:15:16\n    |\n LL |     type Bar = Path;\n    |                ^^^^ not found in this scope\n@@ -10,7 +10,7 @@ LL |     use std::path::Path;\n    |\n \n error[E0425]: cannot find value `A` in this scope\n-  --> $DIR/use_suggestion_placement.rs:22:13\n+  --> $DIR/use_suggestion_placement.rs:20:13\n    |\n LL |     let _ = A;\n    |             ^ not found in this scope\n@@ -21,7 +21,7 @@ LL | use m::A;\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n-  --> $DIR/use_suggestion_placement.rs:27:23\n+  --> $DIR/use_suggestion_placement.rs:25:23\n    |\n LL |     type Dict<K, V> = HashMap<K, V>;\n    |                       ^^^^^^^ not found in this scope"}, {"sha": "c454dfa4eb93bf3074135711d3fb7abd4d234373", "filename": "src/test/ui/rfcs/rfc-1014.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Frfcs%2Frfc-1014.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Frfcs%2Frfc-1014.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-1014.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-// ignore-cloudabi stdout does not map to file descriptor 1 by default\n // ignore-wasm32-bare no libc\n // ignore-sgx no libc\n "}, {"sha": "c321e86dc18216a5217bc5180efa49c908197069", "filename": "src/test/ui/running-with-no-runtime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frunning-with-no-runtime.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n // ignore-sgx no processes\n "}, {"sha": "15fcf78893ebb496a6aa8bb57e9b61de29259492", "filename": "src/test/ui/signal-alternate-stack-cleanup.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fsignal-alternate-stack-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fsignal-alternate-stack-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsignal-alternate-stack-cleanup.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -3,7 +3,6 @@\n // main thread exit while still being in use by signal handlers. This test\n // triggers this situation by sending signal from atexit handler.\n //\n-// ignore-cloudabi no signal handling support\n // ignore-wasm32-bare no libc\n // ignore-windows\n // ignore-sgx no libc"}, {"sha": "0963dcc80f6bfcea48452aeb2889cc324d0a7582", "filename": "src/test/ui/signal-exit-status.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsignal-exit-status.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-windows"}, {"sha": "144eeca23184b16743a4f5f706db4857321714b4", "filename": "src/test/ui/sigpipe-should-be-ignored.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fsigpipe-should-be-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fsigpipe-should-be-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsigpipe-should-be-ignored.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -4,7 +4,6 @@\n // Be sure that when a SIGPIPE would have been received that the entire process\n // doesn't die in a ball of fire, but rather it's gracefully handled.\n \n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "5d927a5acc8d230f1be03d4c6d10595f4ff203fe", "filename": "src/test/ui/span/issue-33884.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fspan%2Fissue-33884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fspan%2Fissue-33884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-cloudabi no std::net support\n-\n use std::net::TcpListener;\n use std::net::TcpStream;\n use std::io::{self, Read, Write};"}, {"sha": "473d36c2ab1e332afe6ad4f0e09e3033c7516064", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-33884.rs:8:22\n+  --> $DIR/issue-33884.rs:6:22\n    |\n LL |     stream.write_fmt(format!(\"message received\"))\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Arguments`, found struct `String`"}, {"sha": "172f4079821a72d28065ad4096521f89517efea1", "filename": "src/test/ui/sse2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fsse2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fsse2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsse2.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no std::env\n \n #![allow(stable_features)]\n #![feature(cfg_target_feature)]"}, {"sha": "b5e76666af1f8eb65c6ad2c89c5bc6ce83c9c7ba", "filename": "src/test/ui/std-backtrace.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fstd-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fstd-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-backtrace.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-android FIXME #17520\n-// ignore-cloudabi spawning processes is not supported\n // ignore-emscripten spawning processes is not supported\n // ignore-openbsd no support for libbacktrace without filename\n // ignore-sgx no processes"}, {"sha": "4b67dbf79e007df73aab5712d71e4281e9354642", "filename": "src/test/ui/stdio-is-blocking.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fstdio-is-blocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fstdio-is-blocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstdio-is-blocking.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "69544b1c0603633c3a9b96b5085a7658c4d240ec", "filename": "src/test/ui/structs-enums/rec-align-u64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Frec-align-u64.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -32,7 +32,6 @@ struct Outer {\n \n \n #[cfg(any(target_os = \"android\",\n-          target_os = \"cloudabi\",\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\",\n           target_os = \"freebsd\","}, {"sha": "175663643403bdf47194e8daabd24805f9f0ac38", "filename": "src/test/ui/tcp-stress.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftcp-stress.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-android needs extra network permissions\n-// ignore-cloudabi no global network namespace access\n // ignore-emscripten no threads or sockets support\n // ignore-netbsd system ulimit (Too many open files)\n // ignore-openbsd system ulimit (Too many open files)"}, {"sha": "b8ae214dc09b1a3caaf91c3b9c7acbddd9147e2c", "filename": "src/test/ui/threads-sendsync/sync-send-in-std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsync-send-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsync-send-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsync-send-in-std.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-// ignore-cloudabi networking not available\n // ignore-wasm32-bare networking not available\n // ignore-sgx ToSocketAddrs cannot be used for DNS Resolution\n "}, {"sha": "e1b6cfbe5ae1b6741dcf6affad1a6fb81f6f6f61", "filename": "src/test/ui/try-operator-on-main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftry-operator-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftry-operator-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-cloudabi no std::fs support\n-\n #![feature(try_trait)]\n \n use std::ops::Try;"}, {"sha": "be17de2fe7cc077028e92eaf908cd4e73e48e3f1", "filename": "src/test/ui/try-operator-on-main.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-operator-on-main.rs:9:5\n+  --> $DIR/try-operator-on-main.rs:7:5\n    |\n LL | / fn main() {\n LL | |     // error for a `Try` type on a non-`Try` fn\n@@ -15,7 +15,7 @@ LL | | }\n    = note: required by `from_error`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/try-operator-on-main.rs:12:5\n+  --> $DIR/try-operator-on-main.rs:10:5\n    |\n LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n@@ -24,7 +24,7 @@ LL |     ()?;\n    = note: required by `into_result`\n \n error[E0277]: the trait bound `(): Try` is not satisfied\n-  --> $DIR/try-operator-on-main.rs:15:25\n+  --> $DIR/try-operator-on-main.rs:13:25\n    |\n LL |     try_trait_generic::<()>();\n    |                         ^^ the trait `Try` is not implemented for `()`\n@@ -33,7 +33,7 @@ LL | fn try_trait_generic<T: Try>() -> T {\n    |                         --- required by this bound in `try_trait_generic`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/try-operator-on-main.rs:22:5\n+  --> $DIR/try-operator-on-main.rs:20:5\n    |\n LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`"}, {"sha": "516ae4c4090dc55bf4ed07227191d2e2006a88b1", "filename": "src/test/ui/try-operator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftry-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftry-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![allow(dead_code)]\n-// ignore-cloudabi no std::fs\n \n use std::fs::File;\n use std::io::{Read, self};"}, {"sha": "692197210b15fdce27038d55aebbb15ee3b6691b", "filename": "src/test/ui/try-wait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftry-wait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Ftry-wait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-wait.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![allow(stable_features)]\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n "}, {"sha": "2683590775904c433bbf061d11df9c6eb5f78ad7", "filename": "src/test/ui/wait-forked-but-failed-child.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwait-forked-but-failed-child.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-vxworks no 'ps'"}, {"sha": "e1136807b3c43e0f57bb9aebe2718d495a362049", "filename": "src/test/ui/x86stdcall.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftest%2Fui%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fx86stdcall.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -24,7 +24,6 @@ pub fn main() {\n }\n \n #[cfg(any(target_os = \"android\",\n-          target_os = \"cloudabi\",\n           target_os = \"dragonfly\",\n           target_os = \"emscripten\",\n           target_os = \"freebsd\","}, {"sha": "0462efaa9b001fe5946c134db9c33a6abe4e4846", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -57,7 +57,6 @@ static TARGETS: &[&str] = &[\n     \"aarch64-fuchsia\",\n     \"aarch64-linux-android\",\n     \"aarch64-pc-windows-msvc\",\n-    \"aarch64-unknown-cloudabi\",\n     \"aarch64-unknown-hermit\",\n     \"aarch64-unknown-linux-gnu\",\n     \"aarch64-unknown-linux-musl\",\n@@ -143,7 +142,6 @@ static TARGETS: &[&str] = &[\n     \"x86_64-rumprun-netbsd\",\n     \"x86_64-sun-solaris\",\n     \"x86_64-pc-solaris\",\n-    \"x86_64-unknown-cloudabi\",\n     \"x86_64-unknown-freebsd\",\n     \"x86_64-unknown-illumos\",\n     \"x86_64-unknown-linux-gnu\","}, {"sha": "9a667aa61b4f5ad703c36777b7cd8f6eb84b70e3", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -40,7 +40,7 @@ static UNIX_SYSTEMS: &[&str] = &[\n ];\n \n // NOTE: windows is excluded from the list because it's also a valid target family.\n-static NON_UNIX_SYSTEMS: &[&str] = &[\"cloudabi\", \"hermit\", \"none\", \"wasi\"];\n+static NON_UNIX_SYSTEMS: &[&str] = &[\"hermit\", \"none\", \"wasi\"];\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for items annotated with `#[inline(always)]`,"}, {"sha": "f219a570e7fccc06f3c4ea88c6c0c47615d11e5e", "filename": "src/tools/clippy/tests/ui/mismatched_target_os_non_unix.fixed", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatched_target_os_non_unix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatched_target_os_non_unix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatched_target_os_non_unix.fixed?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -3,9 +3,6 @@\n #![warn(clippy::mismatched_target_os)]\n #![allow(unused)]\n \n-#[cfg(target_os = \"cloudabi\")]\n-fn cloudabi() {}\n-\n #[cfg(target_os = \"hermit\")]\n fn hermit() {}\n \n@@ -16,7 +13,7 @@ fn wasi() {}\n fn none() {}\n \n // list with conditions\n-#[cfg(all(not(any(windows, target_os = \"cloudabi\")), target_os = \"wasi\"))]\n+#[cfg(all(not(windows), target_os = \"wasi\"))]\n fn list() {}\n \n // windows is a valid target family, should be ignored"}, {"sha": "8a8ae756a4fcfc4156df856ec1422d07cfbd73e4", "filename": "src/tools/clippy/tests/ui/mismatched_target_os_non_unix.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatched_target_os_non_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatched_target_os_non_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatched_target_os_non_unix.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -3,9 +3,6 @@\n #![warn(clippy::mismatched_target_os)]\n #![allow(unused)]\n \n-#[cfg(cloudabi)]\n-fn cloudabi() {}\n-\n #[cfg(hermit)]\n fn hermit() {}\n \n@@ -16,7 +13,7 @@ fn wasi() {}\n fn none() {}\n \n // list with conditions\n-#[cfg(all(not(any(windows, cloudabi)), wasi))]\n+#[cfg(all(not(windows), wasi))]\n fn list() {}\n \n // windows is a valid target family, should be ignored"}, {"sha": "5f1b090830464162784eb324d77de99adf135953", "filename": "src/tools/clippy/tests/ui/mismatched_target_os_non_unix.stderr", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatched_target_os_non_unix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatched_target_os_non_unix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmismatched_target_os_non_unix.stderr?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1,51 +1,36 @@\n error: operating system used in target family position\n   --> $DIR/mismatched_target_os_non_unix.rs:6:1\n    |\n-LL | #[cfg(cloudabi)]\n-   | ^^^^^^--------^^\n-   |       |\n-   |       help: try: `target_os = \"cloudabi\"`\n-   |\n-   = note: `-D clippy::mismatched-target-os` implied by `-D warnings`\n-\n-error: operating system used in target family position\n-  --> $DIR/mismatched_target_os_non_unix.rs:9:1\n-   |\n LL | #[cfg(hermit)]\n    | ^^^^^^------^^\n    |       |\n    |       help: try: `target_os = \"hermit\"`\n+   |\n+   = note: `-D clippy::mismatched-target-os` implied by `-D warnings`\n \n error: operating system used in target family position\n-  --> $DIR/mismatched_target_os_non_unix.rs:12:1\n+  --> $DIR/mismatched_target_os_non_unix.rs:9:1\n    |\n LL | #[cfg(wasi)]\n    | ^^^^^^----^^\n    |       |\n    |       help: try: `target_os = \"wasi\"`\n \n error: operating system used in target family position\n-  --> $DIR/mismatched_target_os_non_unix.rs:15:1\n+  --> $DIR/mismatched_target_os_non_unix.rs:12:1\n    |\n LL | #[cfg(none)]\n    | ^^^^^^----^^\n    |       |\n    |       help: try: `target_os = \"none\"`\n \n error: operating system used in target family position\n-  --> $DIR/mismatched_target_os_non_unix.rs:19:1\n-   |\n-LL | #[cfg(all(not(any(windows, cloudabi)), wasi))]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL | #[cfg(all(not(any(windows, target_os = \"cloudabi\")), wasi))]\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^\n-help: try\n+  --> $DIR/mismatched_target_os_non_unix.rs:16:1\n    |\n-LL | #[cfg(all(not(any(windows, cloudabi)), target_os = \"wasi\"))]\n-   |                                        ^^^^^^^^^^^^^^^^^^\n+LL | #[cfg(all(not(windows), wasi))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^----^^^\n+   |                         |\n+   |                         help: try: `target_os = \"wasi\"`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "1b9f0089dced05248ce4dbd28bd10a818326dc16", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -1790,8 +1790,7 @@ impl<'test> TestCx<'test> {\n \n         let (dylib, crate_type) = if aux_props.no_prefer_dynamic {\n             (true, None)\n-        } else if self.config.target.contains(\"cloudabi\")\n-            || self.config.target.contains(\"emscripten\")\n+        } else if self.config.target.contains(\"emscripten\")\n             || (self.config.target.contains(\"musl\")\n                 && !aux_props.force_host\n                 && !self.config.host.contains(\"musl\"))"}, {"sha": "4f77e719fba92e0a1aa4e572681c4d36e38b9de3", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -12,7 +12,6 @@ mod tests;\n const OS_TABLE: &[(&str, &str)] = &[\n     (\"android\", \"android\"),\n     (\"androideabi\", \"android\"),\n-    (\"cloudabi\", \"cloudabi\"),\n     (\"cuda\", \"cuda\"),\n     (\"darwin\", \"macos\"),\n     (\"dragonfly\", \"dragonfly\"),"}, {"sha": "6697fbd1be2def091d14a274d44628e6510d96d1", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -173,7 +173,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n             // parser to tidy.\n             !file.ancestors().any(|a| {\n                 a.ends_with(\"src/test\") ||\n-                    a.ends_with(\"library/std/src/sys/cloudabi\") ||\n                     a.ends_with(\"src/doc/book\")\n             });\n "}, {"sha": "f675b78651ef945c47dfddce3954663b5bc3ad02", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfe27a3e0f1c4d77999ccc2350ab861327615a2/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=6bfe27a3e0f1c4d77999ccc2350ab861327615a2", "patch": "@@ -31,8 +31,6 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n                 // UI tests with different names\n                 || path.ends_with(\"src/thread/local/dynamic_tests.rs\")\n                 || path.ends_with(\"src/sync/mpsc/sync_tests.rs\")\n-                // Has copyright banner\n-                || path.ends_with(\"src/sys/cloudabi/abi/cloudabi.rs\")\n         }\n     };\n "}]}