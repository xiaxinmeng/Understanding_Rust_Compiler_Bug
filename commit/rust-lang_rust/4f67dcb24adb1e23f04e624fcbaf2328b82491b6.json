{"sha": "4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNjdkY2IyNGFkYjFlMjNmMDRlNjI0ZmNiYWYyMzI4YjgyNDkxYjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T21:31:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T22:53:13Z"}, "message": "Migrate users of 'loop' to 'continue'\n\nCloses #9467", "tree": {"sha": "e4e85184b26851431e419b8867c560863c204de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e85184b26851431e419b8867c560863c204de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "html_url": "https://github.com/rust-lang/rust/commit/4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af849bc12e8a2ec592074b1470464efa59f06bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af849bc12e8a2ec592074b1470464efa59f06bf", "html_url": "https://github.com/rust-lang/rust/commit/4af849bc12e8a2ec592074b1470464efa59f06bf"}], "stats": {"total": 156, "additions": 78, "deletions": 78}, "files": [{"sha": "2b18c27f560e11c896001e83fd9a734b926c0687", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -200,7 +200,7 @@ impl<'self> FromBase64 for &'self str {\n                 '0'..'9' => buf |= val + 0x04,\n                 '+'|'-' => buf |= 0x3E,\n                 '/'|'_' => buf |= 0x3F,\n-                '\\r'|'\\n' => loop,\n+                '\\r'|'\\n' => continue,\n                 '=' => break,\n                 _ => return Err(format!(\"Invalid character '{}' at position {}\",\n                                      self.char_at(idx), idx))"}, {"sha": "e85b715b21a8486178b2a6e00d804e91e84b5d3a", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -303,7 +303,7 @@ impl io::Reader for FileInput {\n                     let b = r.read_byte();\n \n                     if b < 0 {\n-                        loop;\n+                        continue;\n                     }\n \n                     if b == '\\n' as int {"}, {"sha": "112ea14218933144824012ca5656160d270bf9a4", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -211,7 +211,7 @@ impl Pattern {\n                                 let cs = parse_char_specifiers(chars.slice(i + 2, i + 3 + j));\n                                 tokens.push(AnyExcept(cs));\n                                 i += j + 4;\n-                                loop;\n+                                continue;\n                             }\n                         }\n                     }\n@@ -222,7 +222,7 @@ impl Pattern {\n                                 let cs = parse_char_specifiers(chars.slice(i + 1, i + 2 + j));\n                                 tokens.push(AnyWithin(cs));\n                                 i += j + 3;\n-                                loop;\n+                                continue;\n                             }\n                         }\n                     }"}, {"sha": "d6e0d8f99c2b34743cd46b310387c7b45e34dbfb", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -100,7 +100,7 @@ impl<'self> FromHex for &'self str {\n                 '0'..'9' => buf |= byte - ('0' as u8),\n                 ' '|'\\r'|'\\n'|'\\t' => {\n                     buf >>= 4;\n-                    loop\n+                    continue\n                 }\n                 _ => return Err(format!(\"Invalid character '{}' at position {}\",\n                                         self.char_at(idx), idx))"}, {"sha": "48fcd972c3c831704448985ac109984c0832f150", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -413,7 +413,7 @@ impl Integer for BigUint {\n                 }\n                 if d0.is_zero() {\n                     n = 2;\n-                    loop;\n+                    continue;\n                 }\n                 n = 1;\n                 // FIXME(#6102): Assignment operator for BigInt causes ICE"}, {"sha": "587f83720877d23ab1184d4c447c21a7321d643e", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -140,7 +140,7 @@ impl<T:Ord> PriorityQueue<T> {\n                     let x = replace(&mut self.data[parent], init());\n                     move_val_init(&mut self.data[pos], x);\n                     pos = parent;\n-                    loop\n+                    continue\n                 }\n                 break\n             }"}, {"sha": "0adf86ed931595d8e73284ccf5648e74c7594e51", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -276,7 +276,7 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n         for (i, v) in string_offsets.iter().enumerate() {\n             let offset = *v;\n             if offset == 0xFFFF { // non-entry\n-                loop;\n+                continue;\n             }\n \n             let name = if snames[i] == \"_\" {\n@@ -289,7 +289,7 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n                 // undocumented: FFFE indicates cap@, which means the capability is not present\n                 // unsure if the handling for this is correct\n                 string_map.insert(name.to_owned(), ~[]);\n-                loop;\n+                continue;\n             }\n \n "}, {"sha": "2afc49df43a6c66d2651e450155fbbe6e5462d6e", "filename": "src/libextra/url.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -359,12 +359,12 @@ pub fn query_to_str(query: &Query) -> ~str {\n pub fn get_scheme(rawurl: &str) -> Result<(~str, ~str), ~str> {\n     for (i,c) in rawurl.iter().enumerate() {\n         match c {\n-          'A' .. 'Z' | 'a' .. 'z' => loop,\n+          'A' .. 'Z' | 'a' .. 'z' => continue,\n           '0' .. '9' | '+' | '-' | '.' => {\n             if i == 0 {\n                 return Err(~\"url: Scheme must begin with a letter.\");\n             }\n-            loop;\n+            continue;\n           }\n           ':' => {\n             if i == 0 {\n@@ -420,7 +420,7 @@ fn get_authority(rawurl: &str) ->\n     let mut end = len;\n \n     for (i,c) in rawurl.iter().enumerate() {\n-        if i < 2 { loop; } // ignore the leading //\n+        if i < 2 { continue; } // ignore the leading //\n \n         // deal with input class first\n         match c {\n@@ -558,7 +558,7 @@ fn get_path(rawurl: &str, authority: bool) ->\n           'A' .. 'Z' | 'a' .. 'z' | '0' .. '9' | '&' |'\\'' | '(' | ')' | '.'\n           | '@' | ':' | '%' | '/' | '+' | '!' | '*' | ',' | ';' | '='\n           | '_' | '-' => {\n-            loop;\n+            continue;\n           }\n           '?' | '#' => {\n             end = i;"}, {"sha": "cdd71fc3d09e5e46019445c52d82402322902d8c", "filename": "src/librust/rust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -247,7 +247,7 @@ pub fn main() {\n                     os::set_exit_status(exit_code);\n                     return;\n                 }\n-                _ => loop\n+                _ => {}\n             }\n         }\n     }"}, {"sha": "4106d2365b53b775f683ff33d1800e724c8a7bae", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -1004,7 +1004,7 @@ pub fn link_args(sess: Session,\n     for cratepath in r.iter() {\n         if cratepath.filetype() == Some(\".rlib\") {\n             args.push(cratepath.to_str());\n-            loop;\n+            continue;\n         }\n         let dir = cratepath.dirname();\n         if dir != ~\"\" { args.push(~\"-L\" + dir); }"}, {"sha": "73c77cdddd9d350b4722f654dd66c14a710ada3e", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -263,8 +263,8 @@ impl<'self> CheckLoanCtxt<'self> {\n         debug2!(\"illegal_if={:?}\", illegal_if);\n \n         for restr in loan1.restrictions.iter() {\n-            if !restr.set.intersects(illegal_if) { loop; }\n-            if restr.loan_path != loan2.loan_path { loop; }\n+            if !restr.set.intersects(illegal_if) { continue; }\n+            if restr.loan_path != loan2.loan_path { continue; }\n \n             match (new_loan.mutbl, old_loan.mutbl) {\n                 (MutableMutability, MutableMutability) => {"}, {"sha": "4f0993082189db07d9623dfbc6b1caf68a7c6983", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -613,7 +613,7 @@ pub fn each_lint(sess: session::Session,\n                 ast::MetaList(_, ref metas) => metas,\n                 _ => {\n                     sess.span_err(meta.span, \"malformed lint attribute\");\n-                    loop;\n+                    continue;\n                 }\n             };\n             for meta in metas.iter() {"}, {"sha": "7088091e1928c3e7dfd55119ef779a0c52d313cf", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -225,7 +225,7 @@ impl PrivacyVisitor {\n     fn check_field(&mut self, span: Span, id: ast::DefId, ident: ast::Ident) {\n         let fields = ty::lookup_struct_fields(self.tcx, id);\n         for field in fields.iter() {\n-            if field.name != ident.name { loop; }\n+            if field.name != ident.name { continue; }\n             if field.vis == private {\n                 self.tcx.sess.span_err(span, format!(\"field `{}` is private\",\n                                              token::ident_to_str(&ident)));"}, {"sha": "796855434505c98ffb4f3cfa4f5e9c315a9063f5", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -359,7 +359,7 @@ impl ReachableContext {\n         while self.worklist.len() > 0 {\n             let search_item = self.worklist.pop();\n             if scanned.contains(&search_item) {\n-                loop\n+                continue\n             }\n             scanned.insert(search_item);\n             self.reachable_symbols.insert(search_item);"}, {"sha": "4ad9371e2bee24691812d234886a6a9f8c857055", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -3334,7 +3334,7 @@ impl Resolver {\n             if importresolution.privacy != Public {\n                 debug2!(\"(computing exports) not reexporting private `{}`\",\n                        interner_get(*name));\n-                loop;\n+                continue;\n             }\n             let xs = [TypeNS, ValueNS];\n             for ns in xs.iter() {"}, {"sha": "40a09e3507cda0443c82f1ef0a34e68c930194d1", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -317,7 +317,7 @@ fn llreg_ty(cls: &[RegClass]) -> Type {\n                 let vec_ty = Type::vector(&Type::f32(), (vec_len * 2u) as u64);\n                 tys.push(vec_ty);\n                 i += vec_len;\n-                loop;\n+                continue;\n             }\n             SSEFs => {\n                 tys.push(Type::f32());"}, {"sha": "7a88b93cd37faac5c3ed0ef59f5518784173dcd3", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -799,7 +799,7 @@ fn conv_builtin_bounds(tcx: ty::ctxt, ast_bounds: &Option<OptVec<ast::TyParamBou\n                             ast::DefTrait(trait_did) => {\n                                 if ty::try_add_builtin_trait(tcx, trait_did,\n                                                              &mut builtin_bounds) {\n-                                    loop; // success\n+                                    continue; // success\n                                 }\n                             }\n                             _ => { }"}, {"sha": "cd681a3dcf9f2070a7acea0ec7db1392fbcb5a22", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -330,7 +330,7 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n     if !etc {\n         for (i, field) in class_fields.iter().enumerate() {\n             if found_fields.contains(&i) {\n-                loop;\n+                continue;\n             }\n             tcx.sess.span_err(span,\n                               format!(\"pattern does not mention field `{}`\","}, {"sha": "8bfef838c9c99ef4c1c5301ca773ebc76ee2f0a0", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -922,7 +922,7 @@ impl<'self> LookupContext<'self> {\n \n             if skip {\n                 // There are more than one of these and we need only one\n-                loop;\n+                continue;\n             } else {\n                 merged.push(candidate_a.clone());\n             }"}, {"sha": "074603fb7a0a91580c60eafed7c1438b950d97a1", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -338,7 +338,7 @@ fn search_for_vtable(vcx: &VtableContext,\n \n         // First, ensure we haven't processed this impl yet.\n         if impls_seen.contains(&im.did) {\n-            loop;\n+            continue;\n         }\n         impls_seen.insert(im.did);\n \n@@ -349,7 +349,7 @@ fn search_for_vtable(vcx: &VtableContext,\n         // get all the ty vars sorted out.\n         let r = ty::impl_trait_ref(tcx, im.did);\n         let of_trait_ref = r.expect(\"trait_ref missing on trait impl\");\n-        if of_trait_ref.def_id != trait_ref.def_id { loop; }\n+        if of_trait_ref.def_id != trait_ref.def_id { continue; }\n \n         // At this point, we know that of_trait_ref is the same trait\n         // as trait_ref, but possibly applied to different substs.\n@@ -377,7 +377,7 @@ fn search_for_vtable(vcx: &VtableContext,\n                                   location_info.span),\n                               ty,\n                               for_ty) {\n-            result::Err(_) => loop,\n+            result::Err(_) => continue,\n             result::Ok(()) => ()\n         }\n "}, {"sha": "9ad8377cdd177b19717e75186712013a2234a03a", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -558,7 +558,7 @@ impl CoherenceChecker {\n         let r = ty::trait_methods(tcx, trait_did);\n         for method in r.iter() {\n             debug2!(\"checking for {}\", method.ident.repr(tcx));\n-            if provided_names.contains(&method.ident.name) { loop; }\n+            if provided_names.contains(&method.ident.name) { continue; }\n \n             tcx.sess.span_err(trait_ref_span,\n                               format!(\"missing method `{}`\",\n@@ -730,7 +730,7 @@ impl CoherenceChecker {\n         for impl_info in impls.iter() {\n             if impl_info.methods.len() < 1 {\n                 // We'll error out later. For now, just don't ICE.\n-                loop;\n+                continue;\n             }\n             let method_def_id = impl_info.methods[0].def_id;\n "}, {"sha": "3ab7ced39416c518f505690eba4ba1e124e40b1d", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -919,15 +919,15 @@ impl RegionVarBindings {\n                 ConstrainVarSubVar(*) |\n                 ConstrainRegSubVar(*) |\n                 ConstrainVarSubReg(*) => {\n-                    loop;\n+                    continue;\n                 }\n                 ConstrainRegSubReg(sub, sup) => {\n                     (sub, sup)\n                 }\n             };\n \n             if self.is_subregion_of(sub, sup) {\n-                loop;\n+                continue;\n             }\n \n             debug2!(\"ConcreteFailure: !(sub <= sup): sub={:?}, sup={:?}\","}, {"sha": "2a2d7fbcfc74614809cd3d571cda7ef4d7a56f91", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -199,10 +199,10 @@ impl Combine for Sub {\n                 // or new variables:\n                 match *tainted_region {\n                     ty::re_infer(ty::ReVar(ref vid)) => {\n-                        if new_vars.iter().any(|x| x == vid) { loop; }\n+                        if new_vars.iter().any(|x| x == vid) { continue; }\n                     }\n                     _ => {\n-                        if *tainted_region == skol { loop; }\n+                        if *tainted_region == skol { continue; }\n                     }\n                 };\n "}, {"sha": "b7ee60b9f54740d8fac69afdfb65116c6063ec19", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -225,7 +225,7 @@ fn clean_srcpath(src: &str, f: &fn(&str)) {\n     let p = Path(src);\n     for c in p.components.iter() {\n         if \".\" == *c {\n-            loop\n+            continue\n         }\n         if \"..\" == *c {\n             f(\"up\");\n@@ -928,7 +928,7 @@ fn item_module(w: &mut io::Writer, cx: &Context,\n             }\n \n             _ => {\n-                if myitem.name.is_none() { loop }\n+                if myitem.name.is_none() { continue }\n                 write!(w, \"\n                     <tr>\n                         <td><a class='{class}' href='{href}'\n@@ -1276,15 +1276,15 @@ fn render_impl(w: &mut io::Writer, i: &clean::Impl, dox: &Option<~str>) {\n         match meth.doc_value() {\n             Some(s) => {\n                 write!(w, \"<div class='docblock'>{}</div>\", Markdown(s));\n-                loop\n+                continue\n             }\n             None => {}\n         }\n \n         // No documentation? Attempt to slurp in the trait's documentation\n         let trait_id = match trait_id {\n-            None => loop,\n-            Some(id) if is_local(id) => loop,\n+            None => continue,\n+            Some(id) if is_local(id) => continue,\n             Some(id) => id.node,\n         };\n         do local_data::get(cache_key) |cache| {\n@@ -1369,7 +1369,7 @@ fn build_sidebar(m: &clean::Module) -> HashMap<~str, ~[~str]> {\n     for item in m.items.iter() {\n         let short = shortty(item);\n         let myname = match item.name {\n-            None => loop,\n+            None => continue,\n             Some(ref s) => s.to_owned(),\n         };\n         let v = map.find_or_insert_with(short.to_owned(), |_| ~[]);"}, {"sha": "b953fe1ed5d8e292287e9f57c6ba0ae5e821b0b3", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -234,7 +234,7 @@ fn rust_input(cratefile: &str, matches: &getopts::Matches) -> Output {\n             Some(i) => PASSES[i].n1(),\n             None => {\n                 error2!(\"unknown pass {}, skipping\", *pass);\n-                loop\n+                continue\n             },\n         };\n         pm.add_plugin(plugin);"}, {"sha": "9da8c58fd058c97a62313f8ec3e4409d6a691693", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -569,7 +569,7 @@ pub fn main_args(args: &[~str]) -> int {\n                     if istty {\n                         println(\"()\");\n                     }\n-                    loop;\n+                    continue;\n                 }\n                 run_line(&mut repl, input, out, line, istty);\n             }"}, {"sha": "5b701bcb660eef50a42b1d8fb8c894e8bd153924", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -233,7 +233,7 @@ fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Opti\n         // Find a filename that matches the pattern: (lib_prefix)-hash-(version)(lib_suffix)\n         // and remember what the hash was\n         let mut f_name = match p_path.filestem() {\n-            Some(s) => s, None => loop\n+            Some(s) => s, None => continue\n         };\n         // Already checked the filetype above\n "}, {"sha": "12226b77eea5bda9ad690fb43e6d9a02b0c592c0", "filename": "src/librustpkg/version.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustpkg%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibrustpkg%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fversion.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -101,15 +101,15 @@ pub fn try_getting_local_version(local_path: &Path) -> Option<Version> {\n         let local_path = rp.push_rel(local_path);\n         let git_dir = local_path.push(\".git\");\n         if !os::path_is_dir(&git_dir) {\n-            loop;\n+            continue;\n         }\n         let outp = run::process_output(\"git\",\n                                    [format!(\"--git-dir={}\", git_dir.to_str()), ~\"tag\", ~\"-l\"]);\n \n         debug2!(\"git --git-dir={} tag -l ~~~> {:?}\", git_dir.to_str(), outp.status);\n \n         if outp.status != 0 {\n-            loop;\n+            continue;\n         }\n \n     let mut output = None;"}, {"sha": "2dfd41a4435e00c486359e752a323a592ef160c4", "filename": "src/libstd/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -665,7 +665,7 @@ impl<T:Reader> ReaderUtil for T {\n                     unsafe {\n                         chars.push(transmute(b0 as u32));\n                     }\n-                    loop;\n+                    continue;\n                 }\n                 // can't satisfy this char with the existing data\n                 if end > bytes_len {"}, {"sha": "215f11980a13e92b746cbe9381f9043e01aa2b57", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -1150,7 +1150,7 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for Filter<'self, A, T> {\n             if (self.predicate)(&x) {\n                 return Some(x);\n             } else {\n-                loop\n+                continue\n             }\n         }\n         None\n@@ -1173,7 +1173,7 @@ impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'sel\n                     if (self.predicate)(&x) {\n                         return Some(x);\n                     } else {\n-                        loop\n+                        continue\n                     }\n                 }\n             }\n@@ -1342,7 +1342,7 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for SkipWhile<'self, A, T> {\n                     Some(x) => {\n                         if (self.predicate)(&x) {\n                             next = self.iter.next();\n-                            loop\n+                            continue\n                         } else {\n                             self.flag = true;\n                             return Some(x)\n@@ -1415,7 +1415,7 @@ impl<A, T: Iterator<A>> Iterator<A> for Skip<T> {\n                 match next {\n                     Some(_) => {\n                         next = self.iter.next();\n-                        loop\n+                        continue\n                     }\n                     None => {\n                         self.n = 0;"}, {"sha": "32a6d3cd4a79c264ccf20bf6a5997e011806deb7", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -355,7 +355,7 @@ pub fn float_to_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Float+Round+\n                     }\n \n                     // Skip the '.'\n-                    if buf[i] == '.' as u8 { i -= 1; loop; }\n+                    if buf[i] == '.' as u8 { i -= 1; continue; }\n \n                     // Either increment the digit,\n                     // or set to 0 if max and carry the 1."}, {"sha": "ea157c6eea65b8431bcf36b459cce74cb46d51d2", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -992,11 +992,11 @@ impl GenericPath for WindowsPath {\n pub fn normalize(components: &[~str]) -> ~[~str] {\n     let mut cs = ~[];\n     for c in components.iter() {\n-        if *c == ~\".\" && components.len() > 1 { loop; }\n-        if *c == ~\"\" { loop; }\n+        if *c == ~\".\" && components.len() > 1 { continue; }\n+        if *c == ~\"\" { continue; }\n         if *c == ~\"..\" && cs.len() != 0 {\n             cs.pop();\n-            loop;\n+            continue;\n         }\n         cs.push((*c).clone());\n     }"}, {"sha": "5fa0281dc93720b3af9f5a4e8d281c90a9b308f6", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -543,7 +543,7 @@ pub trait Rng {\n         for (i, elem) in iter.enumerate() {\n             if i < n {\n                 reservoir.push(elem);\n-                loop\n+                continue\n             }\n \n             let k = self.gen_integer_range(0, i + 1);"}, {"sha": "299aa1175a74c4766acc8a0f9b47478bf78634f4", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -92,14 +92,14 @@ fn parse_logging_spec(spec: ~str) -> ~[LogDirective]{\n                     _ => {\n                         dumb_println(format!(\"warning: invalid logging spec \\\n                                               '{}', ignoring it\", parts[1]));\n-                        loop;\n+                        continue;\n                     }\n                 }\n             },\n             _ => {\n                 dumb_println(format!(\"warning: invalid logging spec '{}',\\\n                                       ignoring it\", s));\n-                loop;\n+                continue;\n             }\n         }\n         let dir = LogDirective {name: name, level: log_level};"}, {"sha": "f0e64b1830e1abbdf600ba868321dc4e4e2439c7", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -1057,12 +1057,12 @@ mod test {\n                 Mark(mrk,tail) => {\n                     result.push(M(mrk));\n                     sc = tail;\n-                    loop;\n+                    continue;\n                 },\n                 Rename(id,name,tail) => {\n                     result.push(R(id,name));\n                     sc = tail;\n-                    loop;\n+                    continue;\n                 }\n                 IllegalCtxt => fail2!(\"expected resolvable context, got IllegalCtxt\")\n             }"}, {"sha": "df31fece5eaee94a01d7b6701475042fec1eb11d", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -340,7 +340,7 @@ pub fn find_stability<AM: AttrMetaMethods, It: Iterator<AM>>(mut metas: It) -> O\n             \"stable\" => Stable,\n             \"frozen\" => Frozen,\n             \"locked\" => Locked,\n-            _ => loop // not a stability level\n+            _ => continue // not a stability level\n         };\n \n         return Some(Stability {"}, {"sha": "8d327de6d611121181d62eb37aae58574dd128fb", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -108,7 +108,7 @@ impl Context {\n                                                         named `{}`\", name));\n                         self.ecx.parse_sess.span_diagnostic.span_note(\n                             prev.span, \"previously here\");\n-                        loop\n+                        continue\n                     }\n                 }\n                 self.names.insert(name, e);\n@@ -592,7 +592,7 @@ impl Context {\n         // of each variable because we don't want to move out of the arguments\n         // passed to this function.\n         for (i, &e) in self.args.iter().enumerate() {\n-            if self.arg_types[i].is_none() { loop } // error already generated\n+            if self.arg_types[i].is_none() { continue } // error already generated\n \n             let name = self.ecx.ident_of(format!(\"__arg{}\", i));\n             let e = self.ecx.expr_addr_of(e.span, e);\n@@ -601,7 +601,7 @@ impl Context {\n                                         self.ecx.expr_ident(e.span, name)));\n         }\n         for (&name, &e) in self.names.iter() {\n-            if !self.name_types.contains_key(&name) { loop }\n+            if !self.name_types.contains_key(&name) { continue }\n \n             let lname = self.ecx.ident_of(format!(\"__arg{}\", name));\n             let e = self.ecx.expr_addr_of(e.span, e);"}, {"sha": "3689b5c49995225f7444b571d8098a7616bc855f", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -431,7 +431,7 @@ fn scan_digits(rdr: @mut StringReader, radix: uint) -> ~str {\n     let mut rslt = ~\"\";\n     loop {\n         let c = rdr.curr;\n-        if c == '_' { bump(rdr); loop; }\n+        if c == '_' { bump(rdr); continue; }\n         match char::to_digit(c, radix) {\n           Some(_) => {\n             rslt.push_char(c);"}, {"sha": "4598bc043691c806bceb65f8b5c368311293bf7b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -1987,7 +1987,7 @@ impl Parser {\n                   }\n                   _ => self.unexpected()\n                 }\n-                loop;\n+                continue;\n             }\n             if self.expr_is_complete(e) { break; }\n             match *self.token {"}, {"sha": "2a3add059ce33c181f93b0a3603d936f6052fcd0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -1406,7 +1406,7 @@ pub fn print_expr(s: @ps, expr: &ast::Expr) {\n         }\n       }\n       ast::ExprAgain(opt_ident) => {\n-        word(s.s, \"loop\");\n+        word(s.s, \"continue\");\n         space(s.s);\n         for ident in opt_ident.iter() {\n             word(s.s, \"'\");"}, {"sha": "f7ed87f7a4fcfeb96b7f1d360e245818d04fa990", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -196,7 +196,7 @@ fn main() {\n    while !rdr.eof() {\n       let line: ~str = rdr.read_line();\n \n-      if line.len() == 0u { loop; }\n+      if line.len() == 0u { continue; }\n \n       match (line[0] as char, proc_mode) {\n "}, {"sha": "d7a7fe00185ba5054fefa4b6be124249831e3fec", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -130,7 +130,7 @@ fn main() {\n                        stdout);\n \n                 pos = 0;\n-                loop;\n+                continue;\n             }\n \n             // Complement other lines."}, {"sha": "99112985be674d5a3fa926a4006e2be04e24b622", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -135,7 +135,7 @@ fn loop_loop_pops_scopes<'r>(_v: &'r mut [uint], f: &fn(&'r mut uint) -> bool) {\n             // this borrow is limited to the scope of `r`...\n             let r: &'r mut uint = produce();\n             if !f(&mut *r) {\n-                loop; // ...so it is not live as exit (and re-enter) the `while` loop here\n+                continue; // ...so it is not live as exit (and re-enter) the `while` loop here\n             }\n         }\n     }"}, {"sha": "1ae77bc1eca842c4b90d280e0376ca375e00b848", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -19,15 +19,15 @@ pub fn main() {\n         if *x == 3 { break; } assert!((*x <= 3));\n     }\n     i = 0;\n-    while i < 10 { i += 1; if i % 2 == 0 { loop; } assert!((i % 2 != 0)); }\n+    while i < 10 { i += 1; if i % 2 == 0 { continue; } assert!((i % 2 != 0)); }\n     i = 0;\n     loop {\n-        i += 1; if i % 2 == 0 { loop; } assert!((i % 2 != 0));\n+        i += 1; if i % 2 == 0 { continue; } assert!((i % 2 != 0));\n         if i >= 10 { break; }\n     }\n     let ys = ~[1, 2, 3, 4, 5, 6];\n     for x in ys.iter() {\n-        if *x % 2 == 0 { loop; }\n+        if *x % 2 == 0 { continue; }\n         assert!((*x % 2 != 0));\n     }\n }"}, {"sha": "375768743121999a806845d82cc5318d014f03d9", "filename": "src/test/run-pass/foreach-external-iterators-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n     let mut y = 0;\n     for (n,i) in x.iter().enumerate() {\n         if n < 10 {\n-            loop;\n+            continue;\n         }\n         y += *i;\n     }"}, {"sha": "f51a49e9c7b93ab21728bbacf1ed3b3dcc4a6035", "filename": "src/test/run-pass/issue-2216.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2216.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n                     break 'bar;\n                 }\n             }\n-            loop 'foo;\n+            continue 'foo;\n         }\n         x = 42;\n         break;"}, {"sha": "812089fd5a570ef0b7bacd939e95f3d4aee95c20", "filename": "src/test/run-pass/loop-break-cont.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -27,7 +27,7 @@ pub fn main() {\n     is_even = false;\n     i += 1u;\n     if i % 2u != 0u {\n-        loop;\n+        continue;\n     }\n     is_even = true;\n   }\n@@ -40,7 +40,7 @@ pub fn main() {\n     is_even = false;\n     i += 1u;\n     if i % 2u != 0u {\n-        loop;\n+        continue;\n     }\n     is_even = true;\n   }"}, {"sha": "37cbc2b40de16386dec7c91a253d2313ed293113", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -17,7 +17,7 @@ use std::task;\n \n fn test_break() { loop { let _x: @int = break; } }\n \n-fn test_cont() { let mut i = 0; while i < 1 { i += 1; let _x: @int = loop; } }\n+fn test_cont() { let mut i = 0; while i < 1 { i += 1; let _x: @int = continue; } }\n \n fn test_ret() { let _x: @int = return; }\n "}, {"sha": "9de4e29529466bd47a68deab34f4e34fe0fbcd71", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f67dcb24adb1e23f04e624fcbaf2328b82491b6/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=4f67dcb24adb1e23f04e624fcbaf2328b82491b6", "patch": "@@ -67,7 +67,7 @@ fn canttouchthis() -> uint {\n fn angrydome() {\n     loop { if break { } }\n     let mut i = 0;\n-    loop { i += 1; if i == 1 { match (loop) { 1 => { }, _ => fail2!(\"wat\") } }\n+    loop { i += 1; if i == 1 { match (continue) { 1 => { }, _ => fail2!(\"wat\") } }\n       break; }\n }\n "}]}