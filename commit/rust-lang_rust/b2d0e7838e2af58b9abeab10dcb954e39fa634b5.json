{"sha": "b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "node_id": "C_kwDOAAsO6NoAKGIyZDBlNzgzOGUyYWY1OGI5YWJlYWIxMGRjYjk1NGUzOWZhNjM0YjU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-15T03:02:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-15T03:02:05Z"}, "message": "Rollup merge of #98087 - TaKO8Ki:suggest-adding-macro-export, r=oli-obk\n\nSuggest adding a `#[macro_export]` to a private macro\n\nfixes #97628", "tree": {"sha": "0ea12520a01d8e23f5ee8120d697edfbaa4fbf4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea12520a01d8e23f5ee8120d697edfbaa4fbf4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqUutCRBK7hj4Ov3rIwAAdzUIAGZdRUtl2VbH8IPQG99NEdWY\ns11CFN2UR3uW0LTCh6fKzD4r//dECTsiqYwJ5Z9JG6cylAiYc6GUqWV/7VVGJpFQ\nioPNOFGzx/RfO9cG+v7r2WOEvZxGgUIWcj2hfdUIQQxh3nYY8QUtBEAqa4jevv7k\n+o+aEWzjU3B0hLFtE7S/4HoHae3/g8GspRLimGAxF6OJ0eeemHcqeL1DNESHZHoi\nPvZ+lxONw3n1h2wizCTgHxe1VL6CKjzFEvjhnoP59SAUYFWauwd3L7AMDJfdbR6i\ncj9a+JPUEJV/HY3kbl1wCi9WRkCf/LW1oiYwlYN5+bXwuGaNrP+ewZ18gZ2lzTw=\n=3hGa\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ea12520a01d8e23f5ee8120d697edfbaa4fbf4d\nparent 97b9347c93726e6f27b7d45d1d3bda62d6cff2b4\nparent d29915af79f4a372647b67e7d83f1fc4aabbb92a\nauthor Yuki Okushi <jtitor@2k36.org> 1655262125 +0900\ncommitter GitHub <noreply@github.com> 1655262125 +0900\n\nRollup merge of #98087 - TaKO8Ki:suggest-adding-macro-export, r=oli-obk\n\nSuggest adding a `#[macro_export]` to a private macro\n\nfixes #97628\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "html_url": "https://github.com/rust-lang/rust/commit/b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b9347c93726e6f27b7d45d1d3bda62d6cff2b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b9347c93726e6f27b7d45d1d3bda62d6cff2b4", "html_url": "https://github.com/rust-lang/rust/commit/97b9347c93726e6f27b7d45d1d3bda62d6cff2b4"}, {"sha": "d29915af79f4a372647b67e7d83f1fc4aabbb92a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d29915af79f4a372647b67e7d83f1fc4aabbb92a", "html_url": "https://github.com/rust-lang/rust/commit/d29915af79f4a372647b67e7d83f1fc4aabbb92a"}], "stats": {"total": 134, "additions": 105, "deletions": 29}, "files": [{"sha": "b0e7679af972bea31ad96a6d5b64b25de7813d34", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "patch": "@@ -10,7 +10,9 @@ use crate::imports::{Import, ImportKind};\n use crate::macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n use crate::Namespace::{self, MacroNS, TypeNS, ValueNS};\n use crate::{Determinacy, ExternPreludeEntry, Finalize, Module, ModuleKind, ModuleOrUniformRoot};\n-use crate::{NameBinding, NameBindingKind, ParentScope, PathResult, PerNS, ResolutionError};\n+use crate::{\n+    MacroData, NameBinding, NameBindingKind, ParentScope, PathResult, PerNS, ResolutionError,\n+};\n use crate::{Resolver, ResolverArenas, Segment, ToNameBinding, VisResolutionError};\n \n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n@@ -20,7 +22,6 @@ use rustc_ast_lowering::ResolverAstLowering;\n use rustc_attr as attr;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n-use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def::{self, *};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n@@ -180,26 +181,32 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    pub(crate) fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {\n+    pub(crate) fn get_macro(&mut self, res: Res) -> Option<MacroData> {\n         match res {\n             Res::Def(DefKind::Macro(..), def_id) => Some(self.get_macro_by_def_id(def_id)),\n-            Res::NonMacroAttr(_) => Some(self.non_macro_attr.clone()),\n+            Res::NonMacroAttr(_) => {\n+                Some(MacroData { ext: self.non_macro_attr.clone(), macro_rules: false })\n+            }\n             _ => None,\n         }\n     }\n \n-    pub(crate) fn get_macro_by_def_id(&mut self, def_id: DefId) -> Lrc<SyntaxExtension> {\n-        if let Some(ext) = self.macro_map.get(&def_id) {\n-            return ext.clone();\n+    pub(crate) fn get_macro_by_def_id(&mut self, def_id: DefId) -> MacroData {\n+        if let Some(macro_data) = self.macro_map.get(&def_id) {\n+            return macro_data.clone();\n         }\n \n-        let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {\n-            LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition).0,\n-            LoadedMacro::ProcMacro(ext) => ext,\n-        });\n+        let (ext, macro_rules) = match self.cstore().load_macro_untracked(def_id, &self.session) {\n+            LoadedMacro::MacroDef(item, edition) => (\n+                Lrc::new(self.compile_macro(&item, edition).0),\n+                matches!(item.kind, ItemKind::MacroDef(def) if def.macro_rules),\n+            ),\n+            LoadedMacro::ProcMacro(extz) => (Lrc::new(extz), false),\n+        };\n \n-        self.macro_map.insert(def_id, ext.clone());\n-        ext\n+        let macro_data = MacroData { ext, macro_rules };\n+        self.macro_map.insert(def_id, macro_data.clone());\n+        macro_data\n     }\n \n     pub(crate) fn build_reduced_graph(\n@@ -1251,7 +1258,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         };\n \n         let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id.to_def_id());\n-        self.r.macro_map.insert(def_id.to_def_id(), ext);\n+        self.r.macro_map.insert(def_id.to_def_id(), MacroData { ext, macro_rules });\n         self.r.local_macro_def_scopes.insert(def_id, parent_scope.module);\n \n         if macro_rules {"}, {"sha": "e934e189f05f33ac13faa41a5eb019ae5a346222", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "patch": "@@ -241,7 +241,7 @@ impl<'a> Resolver<'a> {\n                 {\n                     // The macro is a proc macro derive\n                     if let Some(def_id) = module.expansion.expn_data().macro_def_id {\n-                        let ext = self.get_macro_by_def_id(def_id);\n+                        let ext = self.get_macro_by_def_id(def_id).ext;\n                         if ext.builtin_name.is_none()\n                             && ext.macro_kind() == MacroKind::Derive\n                             && parent.expansion.outer_expn_is_descendant_of(*ctxt)"}, {"sha": "c6aa57f039d4fe8ab30ddac5c3a1da72ce6824a1", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::NodeId;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n-use rustc_hir::def::{self, PartialRes};\n+use rustc_hir::def::{self, DefKind, PartialRes};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n@@ -922,11 +922,28 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n                         .emit();\n                 } else {\n-                    let note_msg =\n-                        format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n-                    struct_span_err!(self.r.session, import.span, E0364, \"{}\", error_msg)\n-                        .span_note(import.span, &note_msg)\n-                        .emit();\n+                    let mut err =\n+                        struct_span_err!(self.r.session, import.span, E0364, \"{error_msg}\");\n+                    match binding.kind {\n+                        NameBindingKind::Res(Res::Def(DefKind::Macro(_), def_id), _)\n+                            // exclude decl_macro\n+                            if self.r.get_macro_by_def_id(def_id).macro_rules =>\n+                        {\n+                            err.span_help(\n+                                binding.span,\n+                                \"consider adding a `#[macro_export]` to the macro in the imported module\",\n+                            );\n+                        }\n+                        _ => {\n+                            err.span_note(\n+                                import.span,\n+                                &format!(\n+                                    \"consider marking `{ident}` as `pub` in the imported module\"\n+                                ),\n+                            );\n+                        }\n+                    }\n+                    err.emit();\n                 }\n             }\n         }"}, {"sha": "ac4e23cc04db5348f70fa27eb3aa9f91d89e89ec", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "patch": "@@ -866,6 +866,12 @@ struct DeriveData {\n     has_derive_copy: bool,\n }\n \n+#[derive(Clone)]\n+struct MacroData {\n+    ext: Lrc<SyntaxExtension>,\n+    macro_rules: bool,\n+}\n+\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n@@ -965,7 +971,7 @@ pub struct Resolver<'a> {\n     registered_attrs: FxHashSet<Ident>,\n     registered_tools: RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n-    macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n+    macro_map: FxHashMap<DefId, MacroData>,\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n     non_macro_attr: Lrc<SyntaxExtension>,\n@@ -1522,7 +1528,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn is_builtin_macro(&mut self, res: Res) -> bool {\n-        self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())\n+        self.get_macro(res).map_or(false, |macro_data| macro_data.ext.builtin_name.is_some())\n     }\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {"}, {"sha": "c86c2280d1986dfa4b7c76c059d0140f7e420242", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "patch": "@@ -658,7 +658,7 @@ impl<'a> Resolver<'a> {\n             res\n         };\n \n-        res.map(|res| (self.get_macro(res), res))\n+        res.map(|res| (self.get_macro(res).map(|macro_data| macro_data.ext), res))\n     }\n \n     pub(crate) fn finalize_macro_resolutions(&mut self) {\n@@ -853,7 +853,7 @@ impl<'a> Resolver<'a> {\n         // Reserve some names that are not quite covered by the general check\n         // performed on `Resolver::builtin_attrs`.\n         if ident.name == sym::cfg || ident.name == sym::cfg_attr {\n-            let macro_kind = self.get_macro(res).map(|ext| ext.macro_kind());\n+            let macro_kind = self.get_macro(res).map(|macro_data| macro_data.ext.macro_kind());\n             if macro_kind.is_some() && sub_namespace_match(macro_kind, Some(MacroKind::Attr)) {\n                 self.session.span_err(\n                     ident.span,"}, {"sha": "d0aab528ed480df369b2d21f02bf0cd814a529ce", "filename": "src/test/ui/privacy/macro-private-reexport.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.rs?ref=b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "patch": "@@ -0,0 +1,17 @@\n+// edition:2021\n+\n+#![feature(decl_macro)]\n+\n+mod foo {\n+    macro_rules! bar {\n+        () => {};\n+    }\n+\n+    pub use bar as _; //~ ERROR `bar` is only public within the crate, and cannot be re-exported outside\n+\n+    macro baz() {}\n+\n+    pub use baz as _; //~ ERROR `baz` is private, and cannot be re-exported\n+}\n+\n+fn main() {}"}, {"sha": "b8768f3612e61f3df8447f35c2c6899df9719dfd", "filename": "src/test/ui/privacy/macro-private-reexport.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.stderr?ref=b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "patch": "@@ -0,0 +1,29 @@\n+error[E0364]: `bar` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/macro-private-reexport.rs:10:13\n+   |\n+LL |     pub use bar as _;\n+   |             ^^^^^^^^\n+   |\n+help: consider adding a `#[macro_export]` to the macro in the imported module\n+  --> $DIR/macro-private-reexport.rs:6:5\n+   |\n+LL | /     macro_rules! bar {\n+LL | |         () => {};\n+LL | |     }\n+   | |_____^\n+\n+error[E0364]: `baz` is private, and cannot be re-exported\n+  --> $DIR/macro-private-reexport.rs:14:13\n+   |\n+LL |     pub use baz as _;\n+   |             ^^^^^^^^\n+   |\n+note: consider marking `baz` as `pub` in the imported module\n+  --> $DIR/macro-private-reexport.rs:14:13\n+   |\n+LL |     pub use baz as _;\n+   |             ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0364`."}, {"sha": "9f8c928c32c04dd96cdeedc02ca64d3193677484", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2d0e7838e2af58b9abeab10dcb954e39fa634b5/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr?ref=b2d0e7838e2af58b9abeab10dcb954e39fa634b5", "patch": "@@ -4,11 +4,11 @@ error[E0364]: `legacy_macro` is only public within the crate, and cannot be re-e\n LL |     pub use legacy_macro as _;\n    |             ^^^^^^^^^^^^^^^^^\n    |\n-note: consider marking `legacy_macro` as `pub` in the imported module\n-  --> $DIR/macro-rules.rs:11:13\n+help: consider adding a `#[macro_export]` to the macro in the imported module\n+  --> $DIR/macro-rules.rs:7:5\n    |\n-LL |     pub use legacy_macro as _;\n-   |             ^^^^^^^^^^^^^^^^^\n+LL |     macro_rules! legacy_macro { () => () }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0659]: `legacy_macro` is ambiguous\n   --> $DIR/macro-rules.rs:31:13"}]}