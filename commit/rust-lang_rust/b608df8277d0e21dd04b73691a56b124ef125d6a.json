{"sha": "b608df8277d0e21dd04b73691a56b124ef125d6a", "node_id": "C_kwDOAAsO6NoAKGI2MDhkZjgyNzdkMGUyMWRkMDRiNzM2OTFhNTZiMTI0ZWYxMjVkNmE", "commit": {"author": {"name": "Aria Beingessner", "email": "a.beingessner@gmail.com", "date": "2022-03-23T16:38:04Z"}, "committer": {"name": "Aria Beingessner", "email": "a.beingessner@gmail.com", "date": "2022-03-30T00:18:27Z"}, "message": "revert changes that cast functions to raw pointers, portability hazard", "tree": {"sha": "f4633d68a3e2261e91e92953d46f6471d289f2a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4633d68a3e2261e91e92953d46f6471d289f2a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b608df8277d0e21dd04b73691a56b124ef125d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b608df8277d0e21dd04b73691a56b124ef125d6a", "html_url": "https://github.com/rust-lang/rust/commit/b608df8277d0e21dd04b73691a56b124ef125d6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b608df8277d0e21dd04b73691a56b124ef125d6a/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09395f626b2ff7378fb250300654b1817953a390", "url": "https://api.github.com/repos/rust-lang/rust/commits/09395f626b2ff7378fb250300654b1817953a390", "html_url": "https://github.com/rust-lang/rust/commit/09395f626b2ff7378fb250300654b1817953a390"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "6c1d20f36e2f6aa1e182f5280dc97c03c97a865d", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b608df8277d0e21dd04b73691a56b124ef125d6a/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b608df8277d0e21dd04b73691a56b124ef125d6a/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=b608df8277d0e21dd04b73691a56b124ef125d6a", "patch": "@@ -355,8 +355,8 @@ impl<'a> ArgumentV1<'a> {\n         // We are type punning a bit here: USIZE_MARKER only takes an &usize but\n         // formatter takes an &Opaque. Rust understandably doesn't think we should compare\n         // the function pointers if they don't have the same signature, so we cast to\n-        // pointers to convince it that we know what we're doing.\n-        if self.formatter as *mut u8 == USIZE_MARKER as *mut u8 {\n+        // usizes to tell it that we just want to compare addresses.\n+        if self.formatter as usize == USIZE_MARKER as usize {\n             // SAFETY: The `formatter` field is only set to USIZE_MARKER if\n             // the value is a usize, so this is safe\n             Some(unsafe { *(self.value as *const _ as *const usize) })"}, {"sha": "05e9b2eb6bc3cb64b513a7d0a1b454ce4d475f5d", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b608df8277d0e21dd04b73691a56b124ef125d6a/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b608df8277d0e21dd04b73691a56b124ef125d6a/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=b608df8277d0e21dd04b73691a56b124ef125d6a", "patch": "@@ -293,7 +293,7 @@ impl Backtrace {\n         if !Backtrace::enabled() {\n             return Backtrace { inner: Inner::Disabled };\n         }\n-        Backtrace::create((Backtrace::capture as *mut ()).addr())\n+        Backtrace::create(Backtrace::capture as usize)\n     }\n \n     /// Forcibly captures a full backtrace, regardless of environment variable\n@@ -308,7 +308,7 @@ impl Backtrace {\n     /// parts of code.\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn force_capture() -> Backtrace {\n-        Backtrace::create((Backtrace::force_capture as *mut ()).addr())\n+        Backtrace::create(Backtrace::force_capture as usize)\n     }\n \n     /// Forcibly captures a disabled backtrace, regardless of environment"}, {"sha": "da63c068384a2b56a4926360db10c4213646d616", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b608df8277d0e21dd04b73691a56b124ef125d6a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b608df8277d0e21dd04b73691a56b124ef125d6a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=b608df8277d0e21dd04b73691a56b124ef125d6a", "patch": "@@ -22,10 +22,9 @@\n // that, we'll just allow that some unix targets don't use this module at all.\n #![allow(dead_code, unused_macros)]\n \n-use crate::ffi::{c_void, CStr};\n+use crate::ffi::CStr;\n use crate::marker::PhantomData;\n use crate::mem;\n-use crate::ptr;\n use crate::sync::atomic::{self, AtomicUsize, Ordering};\n \n // We can use true weak linkage on ELF targets.\n@@ -130,25 +129,25 @@ impl<F> DlsymWeak<F> {\n     // Cold because it should only happen during first-time initialization.\n     #[cold]\n     unsafe fn initialize(&self) -> Option<F> {\n-        assert_eq!(mem::size_of::<F>(), mem::size_of::<*mut ()>());\n+        assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());\n \n         let val = fetch(self.name);\n         // This synchronizes with the acquire fence in `get`.\n-        self.addr.store(val.addr(), Ordering::Release);\n+        self.addr.store(val, Ordering::Release);\n \n-        match val.addr() {\n+        match val {\n             0 => None,\n-            _ => Some(mem::transmute_copy::<*mut c_void, F>(&val)),\n+            addr => Some(mem::transmute_copy::<usize, F>(&addr)),\n         }\n     }\n }\n \n-unsafe fn fetch(name: &str) -> *mut c_void {\n+unsafe fn fetch(name: &str) -> usize {\n     let name = match CStr::from_bytes_with_nul(name.as_bytes()) {\n         Ok(cstr) => cstr,\n-        Err(..) => return ptr::null_mut(),\n+        Err(..) => return 0,\n     };\n-    libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr())\n+    libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n }\n \n #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]"}]}