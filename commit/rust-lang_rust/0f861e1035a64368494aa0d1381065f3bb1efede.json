{"sha": "0f861e1035a64368494aa0d1381065f3bb1efede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmODYxZTEwMzVhNjQzNjg0OTRhYTBkMTM4MTA2NWYzYmIxZWZlZGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-03T10:53:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-03T10:53:23Z"}, "message": "Update Cranelift", "tree": {"sha": "35564836876ce1d64b40d15695d1a23c3c2d2472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35564836876ce1d64b40d15695d1a23c3c2d2472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f861e1035a64368494aa0d1381065f3bb1efede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f861e1035a64368494aa0d1381065f3bb1efede", "html_url": "https://github.com/rust-lang/rust/commit/0f861e1035a64368494aa0d1381065f3bb1efede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f861e1035a64368494aa0d1381065f3bb1efede/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54523b8ea84cb9360639568a6c3c3e17c31ab5a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/54523b8ea84cb9360639568a6c3c3e17c31ab5a8", "html_url": "https://github.com/rust-lang/rust/commit/54523b8ea84cb9360639568a6c3c3e17c31ab5a8"}], "stats": {"total": 173, "additions": 29, "deletions": 144}, "files": [{"sha": "99d9bbf18922c1c26a700459079e031305716c1d", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 54, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0f861e1035a64368494aa0d1381065f3bb1efede/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0f861e1035a64368494aa0d1381065f3bb1efede/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0f861e1035a64368494aa0d1381065f3bb1efede", "patch": "@@ -29,12 +29,6 @@ version = \"1.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ae44d1a3d5a19df61dd0c8beb138458ac2a53a7ac09eba97d55592540004306b\"\n \n-[[package]]\n-name = \"cc\"\n-version = \"1.0.66\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4c0496836a84f8d0495758516b8621a622beb77c0fed418570e50764093ced48\"\n-\n [[package]]\n name = \"cfg-if\"\n version = \"0.1.10\"\n@@ -50,15 +44,15 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n [[package]]\n name = \"cranelift-bforest\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -76,7 +70,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-meta\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n@@ -85,17 +79,17 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-shared\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n \n [[package]]\n name = \"cranelift-entity\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n \n [[package]]\n name = \"cranelift-frontend\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -106,7 +100,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-jit\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -124,7 +118,7 @@ dependencies = [\n [[package]]\n name = \"cranelift-module\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -136,17 +130,16 @@ dependencies = [\n [[package]]\n name = \"cranelift-native\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n dependencies = [\n  \"cranelift-codegen\",\n- \"raw-cpuid\",\n  \"target-lexicon\",\n ]\n \n [[package]]\n name = \"cranelift-object\"\n version = \"0.69.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#986b5768f9e68f1564b43f32b8a4080a6582c8ca\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#256cc8a5185c8d2ee82838fe2b12c8672baa69a3\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -253,9 +246,9 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.22.0\"\n+version = \"0.23.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8d3b63360ec3cb337817c2dbd47ab4a0f170d285d8e5a2064600f3def1402397\"\n+checksum = \"a9a7ab5d64814df0fe4a4b5ead45ed6c5f181ee3ff04ba344313a6c80446c5d4\"\n dependencies = [\n  \"crc32fast\",\n  \"indexmap\",\n@@ -279,17 +272,6 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n-[[package]]\n-name = \"raw-cpuid\"\n-version = \"8.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1fdf7d9dbd43f3d81d94a49c1c3df73cc2b3827995147e6cf7f89d4ec5483e73\"\n-dependencies = [\n- \"bitflags\",\n- \"cc\",\n- \"rustc_version\",\n-]\n-\n [[package]]\n name = \"regalloc\"\n version = \"0.0.31\"\n@@ -337,30 +319,6 @@ dependencies = [\n  \"target-lexicon\",\n ]\n \n-[[package]]\n-name = \"rustc_version\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n-dependencies = [\n- \"semver\",\n-]\n-\n-[[package]]\n-name = \"semver\"\n-version = \"0.9.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n-dependencies = [\n- \"semver-parser\",\n-]\n-\n-[[package]]\n-name = \"semver-parser\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\n [[package]]\n name = \"smallvec\"\n version = \"1.6.1\""}, {"sha": "41e23b51afaff1dfd0a22c9ac967193ba584b3ee", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f861e1035a64368494aa0d1381065f3bb1efede/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0f861e1035a64368494aa0d1381065f3bb1efede/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0f861e1035a64368494aa0d1381065f3bb1efede", "patch": "@@ -16,7 +16,7 @@ cranelift-jit = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch\n cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n target-lexicon = \"0.11.0\"\n gimli = { version = \"0.23.0\", default-features = false, features = [\"write\"]}\n-object = { version = \"0.22.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n+object = { version = \"0.23.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n indexmap = \"1.0.2\""}, {"sha": "28adbe2fdb6e288527180414018a433b71b65bfe", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 16, "deletions": 89, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/0f861e1035a64368494aa0d1381065f3bb1efede/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f861e1035a64368494aa0d1381065f3bb1efede/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=0f861e1035a64368494aa0d1381065f3bb1efede", "patch": "@@ -9,7 +9,7 @@ use crate::prelude::*;\n use rustc_index::vec::IndexVec;\n \n use cranelift_codegen::entity::EntityRef;\n-use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n+use cranelift_codegen::ir::{LabelValueLoc, StackSlots, ValueLabel, ValueLoc};\n use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n \n@@ -39,7 +39,6 @@ pub(crate) struct DebugContext<'tcx> {\n     dwarf: DwarfUnit,\n     unit_range_list: RangeList,\n \n-    clif_types: FxHashMap<Type, UnitEntryId>,\n     types: FxHashMap<Ty<'tcx>, UnitEntryId>,\n }\n \n@@ -115,48 +114,10 @@ impl<'tcx> DebugContext<'tcx> {\n             dwarf,\n             unit_range_list: RangeList(Vec::new()),\n \n-            clif_types: FxHashMap::default(),\n             types: FxHashMap::default(),\n         }\n     }\n \n-    fn dwarf_ty_for_clif_ty(&mut self, ty: Type) -> UnitEntryId {\n-        if let Some(type_id) = self.clif_types.get(&ty) {\n-            return *type_id;\n-        }\n-\n-        let new_entry = |dwarf: &mut DwarfUnit, tag| dwarf.unit.add(dwarf.unit.root(), tag);\n-\n-        let primitive = |dwarf: &mut DwarfUnit, ate| {\n-            let type_id = new_entry(dwarf, gimli::DW_TAG_base_type);\n-            let type_entry = dwarf.unit.get_mut(type_id);\n-            type_entry.set(gimli::DW_AT_encoding, AttributeValue::Encoding(ate));\n-            type_id\n-        };\n-\n-        let type_id = if ty.is_bool() {\n-            primitive(&mut self.dwarf, gimli::DW_ATE_boolean)\n-        } else if ty.is_int() {\n-            primitive(&mut self.dwarf, gimli::DW_ATE_address)\n-        } else if ty.is_float() {\n-            primitive(&mut self.dwarf, gimli::DW_ATE_float)\n-        } else {\n-            new_entry(&mut self.dwarf, gimli::DW_TAG_structure_type)\n-        };\n-\n-        let type_entry = self.dwarf.unit.get_mut(type_id);\n-        type_entry.set(\n-            gimli::DW_AT_name,\n-            AttributeValue::String(format!(\"{}\", ty).replace('i', \"u\").into_bytes()),\n-        );\n-        type_entry.set(\n-            gimli::DW_AT_byte_size,\n-            AttributeValue::Udata(u64::from(ty.bytes())),\n-        );\n-\n-        type_id\n-    }\n-\n     fn dwarf_ty(&mut self, ty: Ty<'tcx>) -> UnitEntryId {\n         if let Some(type_id) = self.types.get(ty) {\n             return *type_id;\n@@ -312,51 +273,6 @@ impl<'tcx> DebugContext<'tcx> {\n         // Using Udata for DW_AT_high_pc requires at least DWARF4\n         func_entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(u64::from(end)));\n \n-        // FIXME Remove once actual debuginfo for locals works.\n-        for (i, (param, &val)) in context\n-            .func\n-            .signature\n-            .params\n-            .iter()\n-            .zip(\n-                context\n-                    .func\n-                    .dfg\n-                    .block_params(context.func.layout.entry_block().unwrap()),\n-            )\n-            .enumerate()\n-        {\n-            use cranelift_codegen::ir::ArgumentPurpose;\n-            let base_name = match param.purpose {\n-                ArgumentPurpose::Normal => \"arg\",\n-                ArgumentPurpose::StructArgument(_) => \"struct_arg\",\n-                ArgumentPurpose::StructReturn => \"sret\",\n-                ArgumentPurpose::Link\n-                | ArgumentPurpose::FramePointer\n-                | ArgumentPurpose::CalleeSaved => continue,\n-                ArgumentPurpose::VMContext\n-                | ArgumentPurpose::SignatureId\n-                | ArgumentPurpose::CallerTLS\n-                | ArgumentPurpose::CalleeTLS\n-                | ArgumentPurpose::StackLimit => unreachable!(),\n-            };\n-            let name = format!(\"{}{}\", base_name, i);\n-\n-            let dw_ty = self.dwarf_ty_for_clif_ty(param.value_type);\n-            let loc =\n-                translate_loc(isa, context.func.locations[val], &context.func.stack_slots).unwrap();\n-\n-            let arg_id = self\n-                .dwarf\n-                .unit\n-                .add(entry_id, gimli::DW_TAG_formal_parameter);\n-            let var_entry = self.dwarf.unit.get_mut(arg_id);\n-\n-            var_entry.set(gimli::DW_AT_name, AttributeValue::String(name.into_bytes()));\n-            var_entry.set(gimli::DW_AT_type, AttributeValue::UnitRef(dw_ty));\n-            var_entry.set(gimli::DW_AT_location, AttributeValue::Exprloc(loc));\n-        }\n-\n         // FIXME make it more reliable and implement scopes before re-enabling this.\n         if false {\n             let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n@@ -463,17 +379,17 @@ fn place_location<'tcx>(\n // Adapted from https://github.com/CraneStation/wasmtime/blob/5a1845b4caf7a5dba8eda1fef05213a532ed4259/crates/debug/src/transform/expression.rs#L59-L137\n fn translate_loc(\n     isa: &dyn TargetIsa,\n-    loc: ValueLoc,\n+    loc: LabelValueLoc,\n     stack_slots: &StackSlots,\n ) -> Option<Expression> {\n     match loc {\n-        ValueLoc::Reg(reg) => {\n+        LabelValueLoc::ValueLoc( ValueLoc::Reg(reg)) => {\n             let machine_reg = isa.map_dwarf_register(reg).unwrap();\n             let mut expr = Expression::new();\n             expr.op_reg(gimli::Register(machine_reg));\n             Some(expr)\n         }\n-        ValueLoc::Stack(ss) => {\n+        LabelValueLoc::ValueLoc(ValueLoc::Stack(ss)) => {\n             if let Some(ss_offset) = stack_slots[ss].offset {\n                 let mut expr = Expression::new();\n                 expr.op_breg(X86_64::RBP, i64::from(ss_offset) + 16);\n@@ -482,6 +398,17 @@ fn translate_loc(\n                 None\n             }\n         }\n-        _ => None,\n+        LabelValueLoc::ValueLoc(ValueLoc::Unassigned) => unreachable!(),\n+        LabelValueLoc::Reg(reg) => {\n+            let machine_reg = isa.map_regalloc_reg_to_dwarf(reg).unwrap();\n+            let mut expr = Expression::new();\n+            expr.op_reg(gimli::Register(machine_reg));\n+            Some(expr)\n+        }\n+        LabelValueLoc::SPOffset(offset) => {\n+            let mut expr = Expression::new();\n+                expr.op_breg(X86_64::RSP, offset);\n+                Some(expr)\n+        }\n     }\n }"}]}