{"sha": "2019d965c3fc4b330b99e1a961d4e2c1ce74583e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMTlkOTY1YzNmYzRiMzMwYjk5ZTFhOTYxZDRlMmMxY2U3NDU4M2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-25T10:42:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-25T10:42:23Z"}, "message": "Rollup merge of #58718 - Centril:doc-convention-safety, r=RalfJung\n\nApply docs convention: Replace # Unsafety with # Safety in docs\n\nAs used in RFC 1574: https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#using-markdown\n\n\"Safety\" is used many times more than \"Unsafety\" is within existing docs.\n\n@bors rollup\n\nr? @RalfJung", "tree": {"sha": "ead9b4bd4f3e4236990d3725e57154f6d6c3d728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ead9b4bd4f3e4236990d3725e57154f6d6c3d728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2019d965c3fc4b330b99e1a961d4e2c1ce74583e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcc8aPCRBK7hj4Ov3rIwAAdHIIAAztrIeyE4OMSuEHDaZcWbiR\nvhAFsMEETncNuwhjvRVIrdA4d6O7QOhsi/vjFkHyp3h6W1X6V0yrVo3AVSxjuyb+\nxok1eO09uleZtq4ezN0plKguZy3hAIwrK0R5/ikdrDRWys1s5RvhwmVcuuGk4ZtP\nhqNe/GPvs+7WoUAXGna1ER/S+ks55B1IKzV1kM8oLx3yRr4p4DLLxr4YQVQrP3F9\nueeTmzxLr3guC1+dpcNgIaigstLui785+dVMCGk8kDyqidMysnnQjvwPzdfxVlcO\n18X6cMZxemmhPV1vFCmJTxHv5NP/EyXIBl0fY+nhmvcDBgjnF3tjSUB9j/da/Bs=\n=pDSJ\n-----END PGP SIGNATURE-----\n", "payload": "tree ead9b4bd4f3e4236990d3725e57154f6d6c3d728\nparent 53f15f24a8f5373231f43cc0b201d803e512c079\nparent 4ca865e92934f003dd477f1801ae0f2096e272e5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1551091343 +0100\ncommitter GitHub <noreply@github.com> 1551091343 +0100\n\nRollup merge of #58718 - Centril:doc-convention-safety, r=RalfJung\n\nApply docs convention: Replace # Unsafety with # Safety in docs\n\nAs used in RFC 1574: https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#using-markdown\n\n\"Safety\" is used many times more than \"Unsafety\" is within existing docs.\n\n@bors rollup\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2019d965c3fc4b330b99e1a961d4e2c1ce74583e", "html_url": "https://github.com/rust-lang/rust/commit/2019d965c3fc4b330b99e1a961d4e2c1ce74583e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2019d965c3fc4b330b99e1a961d4e2c1ce74583e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53f15f24a8f5373231f43cc0b201d803e512c079", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f15f24a8f5373231f43cc0b201d803e512c079", "html_url": "https://github.com/rust-lang/rust/commit/53f15f24a8f5373231f43cc0b201d803e512c079"}, {"sha": "4ca865e92934f003dd477f1801ae0f2096e272e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca865e92934f003dd477f1801ae0f2096e272e5", "html_url": "https://github.com/rust-lang/rust/commit/4ca865e92934f003dd477f1801ae0f2096e272e5"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "e842020561d35a9c4aeb47783208259fe18d8e33", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2019d965c3fc4b330b99e1a961d4e2c1ce74583e/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2019d965c3fc4b330b99e1a961d4e2c1ce74583e/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=2019d965c3fc4b330b99e1a961d4e2c1ce74583e", "patch": "@@ -420,7 +420,7 @@ impl fmt::Display for CannotReallocInPlace {\n /// }\n /// ```\n ///\n-/// # Unsafety\n+/// # Safety\n ///\n /// The `GlobalAlloc` trait is an `unsafe` trait for a number of reasons, and\n /// implementors must ensure that they adhere to these contracts:\n@@ -643,7 +643,7 @@ pub unsafe trait GlobalAlloc {\n ///    currently allocated via an allocator `a`, then it is legal to\n ///    use that layout to deallocate it, i.e., `a.dealloc(ptr, k);`.\n ///\n-/// # Unsafety\n+/// # Safety\n ///\n /// The `Alloc` trait is an `unsafe` trait for a number of reasons, and\n /// implementors must ensure that they adhere to these contracts:"}, {"sha": "f41d293e80ad3da86b45c6a069734d50eff5a892", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2019d965c3fc4b330b99e1a961d4e2c1ce74583e/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2019d965c3fc4b330b99e1a961d4e2c1ce74583e/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=2019d965c3fc4b330b99e1a961d4e2c1ce74583e", "patch": "@@ -1173,7 +1173,7 @@ impl<T> MaybeUninit<T> {\n     /// to ensure that the data will get dropped, because the resulting `T` is\n     /// subject to the usual drop handling.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n@@ -1187,7 +1187,7 @@ impl<T> MaybeUninit<T> {\n \n     /// Gets a reference to the contained value.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n@@ -1200,7 +1200,7 @@ impl<T> MaybeUninit<T> {\n \n     /// Gets a mutable reference to the contained value.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined"}, {"sha": "2063f8ffaf65a8c5a5a826672815e08ca45aabac", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2019d965c3fc4b330b99e1a961d4e2c1ce74583e/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2019d965c3fc4b330b99e1a961d4e2c1ce74583e/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=2019d965c3fc4b330b99e1a961d4e2c1ce74583e", "patch": "@@ -2158,7 +2158,7 @@ impl<T> [T] {\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This method is essentially a `transmute` with respect to the elements in the returned\n     /// middle slice, so all the usual caveats pertaining to `transmute::<T, U>` also apply here.\n@@ -2211,7 +2211,7 @@ impl<T> [T] {\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This method is essentially a `transmute` with respect to the elements in the returned\n     /// middle slice, so all the usual caveats pertaining to `transmute::<T, U>` also apply here."}]}