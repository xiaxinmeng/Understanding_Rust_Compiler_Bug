{"sha": "bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYTY2YmIzODljZTFjN2NlNGFmZjA5ZDE4NDJiMzQyODAxNWJkNGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T08:52:55Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] remove the sign from integer literals in the ast", "tree": {"sha": "f6252627aac7945dec962bacb43ed50186c8ab9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6252627aac7945dec962bacb43ed50186c8ab9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "html_url": "https://github.com/rust-lang/rust/commit/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/625e78b7001c6e20f29928a5da8c9d21e9aed6c5", "html_url": "https://github.com/rust-lang/rust/commit/625e78b7001c6e20f29928a5da8c9d21e9aed6c5"}], "stats": {"total": 137, "additions": 55, "deletions": 82}, "files": [{"sha": "e8e817db7abff9e0d5b004a6e68b9d3408895e8e", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -1328,15 +1328,13 @@ fn lit_to_const(sess: &Session, span: Span, lit: &ast::Lit, ty_hint: Option<Ty>)\n         }\n         ast::LitByte(n) => Uint(n as u64),\n         ast::LitChar(n) => Uint(n as u64),\n-        ast::LitInt(n, ast::SignedIntLit(_, ast::Plus)) => Int(n as i64),\n-        ast::LitInt(n, ast::UnsuffixedIntLit(ast::Plus)) => {\n+        ast::LitInt(n, ast::SignedIntLit(_)) => Int(n as i64),\n+        ast::LitInt(n, ast::UnsuffixedIntLit) => {\n             match ty_hint.map(|ty| &ty.sty) {\n                 Some(&ty::TyUint(_)) => Uint(n),\n                 _ => Int(n as i64)\n             }\n         }\n-        ast::LitInt(n, ast::SignedIntLit(_, ast::Minus)) |\n-        ast::LitInt(n, ast::UnsuffixedIntLit(ast::Minus)) => Int(-(n as i64)),\n         ast::LitInt(n, ast::UnsignedIntLit(_)) => Uint(n),\n         ast::LitFloat(ref n, _) |\n         ast::LitFloatUnsuffixed(ref n) => {"}, {"sha": "9993234c36ab8f688291ad36b0caa262960f2b7f", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -106,7 +106,7 @@ impl LateLintPass for TypeLimits {\n                         ast::LitInt(_, ast::UnsignedIntLit(_)) => {\n                             forbid_unsigned_negation(cx, e.span);\n                         },\n-                        ast::LitInt(_, ast::UnsuffixedIntLit(_)) => {\n+                        ast::LitInt(_, ast::UnsuffixedIntLit) => {\n                             if let ty::TyUint(_) = cx.tcx.node_id_to_type(e.id).sty {\n                                 forbid_unsigned_negation(cx, e.span);\n                             }\n@@ -159,8 +159,8 @@ impl LateLintPass for TypeLimits {\n                 match cx.tcx.node_id_to_type(e.id).sty {\n                     ty::TyInt(t) => {\n                         match lit.node {\n-                            ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n-                            ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => {\n+                            ast::LitInt(v, ast::SignedIntLit(_)) |\n+                            ast::LitInt(v, ast::UnsuffixedIntLit) => {\n                                 let int_type = if let ast::IntTy::Is = t {\n                                     cx.sess().target.int_type\n                                 } else {\n@@ -311,10 +311,8 @@ impl LateLintPass for TypeLimits {\n                     let (min, max) = int_ty_range(int_ty);\n                     let lit_val: i64 = match lit.node {\n                         hir::ExprLit(ref li) => match li.node {\n-                            ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n-                            ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => v as i64,\n-                            ast::LitInt(v, ast::SignedIntLit(_, ast::Minus)) |\n-                            ast::LitInt(v, ast::UnsuffixedIntLit(ast::Minus)) => -(v as i64),\n+                            ast::LitInt(v, ast::SignedIntLit(_)) |\n+                            ast::LitInt(v, ast::UnsuffixedIntLit) => v as i64,\n                             _ => return true\n                         },\n                         _ => panic!()"}, {"sha": "81df4746d102c16e697ded59042428f7f9d5e707", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -66,13 +66,13 @@ pub fn const_lit(cx: &CrateContext, e: &hir::Expr, lit: &ast::Lit)\n     match lit.node {\n         ast::LitByte(b) => C_integral(Type::uint_from_ty(cx, ast::UintTy::U8), b as u64, false),\n         ast::LitChar(i) => C_integral(Type::char(cx), i as u64, false),\n-        ast::LitInt(i, ast::SignedIntLit(t, _)) => {\n+        ast::LitInt(i, ast::SignedIntLit(t)) => {\n             C_integral(Type::int_from_ty(cx, t), i, true)\n         }\n         ast::LitInt(u, ast::UnsignedIntLit(t)) => {\n             C_integral(Type::uint_from_ty(cx, t), u, false)\n         }\n-        ast::LitInt(i, ast::UnsuffixedIntLit(_)) => {\n+        ast::LitInt(i, ast::UnsuffixedIntLit) => {\n             let lit_int_ty = cx.tcx().node_id_to_type(e.id);\n             match lit_int_ty.sty {\n                 ty::TyInt(t) => {"}, {"sha": "176f9bcd4f6af72bf0b5aeae51a1a050304d1d54", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -2613,9 +2613,9 @@ fn check_lit<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         }\n         ast::LitByte(_) => tcx.types.u8,\n         ast::LitChar(_) => tcx.types.char,\n-        ast::LitInt(_, ast::SignedIntLit(t, _)) => tcx.mk_mach_int(t),\n+        ast::LitInt(_, ast::SignedIntLit(t)) => tcx.mk_mach_int(t),\n         ast::LitInt(_, ast::UnsignedIntLit(t)) => tcx.mk_mach_uint(t),\n-        ast::LitInt(_, ast::UnsuffixedIntLit(_)) => {\n+        ast::LitInt(_, ast::UnsuffixedIntLit) => {\n             let opt_ty = expected.to_option(fcx).and_then(|ty| {\n                 match ty.sty {\n                     ty::TyInt(_) | ty::TyUint(_) => Some(ty),"}, {"sha": "464e9da37246deabfecc022ba61a4113a964f313", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -21,7 +21,6 @@ pub use self::Mutability::*;\n pub use self::Pat_::*;\n pub use self::PathListItem_::*;\n pub use self::PrimTy::*;\n-pub use self::Sign::*;\n pub use self::Stmt_::*;\n pub use self::StrStyle::*;\n pub use self::StructFieldKind::*;\n@@ -1269,36 +1268,11 @@ pub enum StrStyle {\n /// A literal\n pub type Lit = Spanned<Lit_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum Sign {\n-    Minus,\n-    Plus\n-}\n-\n-impl Sign {\n-    pub fn new<T: IntSign>(n: T) -> Sign {\n-        n.sign()\n-    }\n-}\n-\n-pub trait IntSign {\n-    fn sign(&self) -> Sign;\n-}\n-macro_rules! doit {\n-    ($($t:ident)*) => ($(impl IntSign for $t {\n-        #[allow(unused_comparisons)]\n-        fn sign(&self) -> Sign {\n-            if *self < 0 {Minus} else {Plus}\n-        }\n-    })*)\n-}\n-doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum LitIntType {\n-    SignedIntLit(IntTy, Sign),\n+    SignedIntLit(IntTy),\n     UnsignedIntLit(UintTy),\n-    UnsuffixedIntLit(Sign)\n+    UnsuffixedIntLit,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "1c2d1cebf3d5f352971913b337ab3ebb001ced65", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -683,8 +683,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::UintTy::Us)))\n     }\n     fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::IntTy::Is,\n-                                                                  ast::Sign::new(i))))\n+        if i < 0 {\n+            let i = (-i) as u64;\n+            let lit = self.expr_lit(sp, ast::LitInt(i, ast::SignedIntLit(ast::IntTy::Is)));\n+            self.expr_unary(sp, ast::UnOp::Neg, lit)\n+        } else {\n+            self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::IntTy::Is)))\n+        }\n     }\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::UintTy::U32)))"}, {"sha": "dfe3f8e3c5422bb4043f28a67de03d906c537496", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -263,9 +263,27 @@ pub mod rt {\n         (signed, $t:ty, $tag:expr) => (\n             impl ToTokens for $t {\n                 fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> {\n-                    let lit = ast::LitInt(*self as u64, ast::SignedIntLit($tag,\n-                                                                          ast::Sign::new(*self)));\n-                    dummy_spanned(lit).to_tokens(cx)\n+                    let val = if *self < 0 {\n+                        -self\n+                    } else {\n+                        *self\n+                    };\n+                    let lit = ast::LitInt(val as u64, ast::SignedIntLit($tag));\n+                    let lit = P(ast::Expr {\n+                        id: ast::DUMMY_NODE_ID,\n+                        node: ast::ExprKind::Lit(P(dummy_spanned(lit))),\n+                        span: DUMMY_SP,\n+                        attrs: None,\n+                    });\n+                    if *self >= 0 {\n+                        return lit.to_tokens(cx);\n+                    }\n+                    P(ast::Expr {\n+                        id: ast::DUMMY_NODE_ID,\n+                        node: ast::ExprKind::Unary(ast::UnOp::Neg, lit),\n+                        span: DUMMY_SP,\n+                        attrs: None,\n+                    }).to_tokens(cx)\n                 }\n             }\n         );"}, {"sha": "d800b6925c000ec30ad505b957840a57b727523b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -586,7 +586,7 @@ pub fn integer_lit(s: &str,\n \n     let mut base = 10;\n     let orig = s;\n-    let mut ty = ast::UnsuffixedIntLit(ast::Plus);\n+    let mut ty = ast::UnsuffixedIntLit;\n \n     if char_at(s, 0) == '0' && s.len() > 1 {\n         match char_at(s, 1) {\n@@ -618,11 +618,11 @@ pub fn integer_lit(s: &str,\n     if let Some(ref suf) = suffix {\n         if suf.is_empty() { sd.span_bug(sp, \"found empty literal suffix in Some\")}\n         ty = match &**suf {\n-            \"isize\" => ast::SignedIntLit(ast::IntTy::Is, ast::Plus),\n-            \"i8\"  => ast::SignedIntLit(ast::IntTy::I8, ast::Plus),\n-            \"i16\" => ast::SignedIntLit(ast::IntTy::I16, ast::Plus),\n-            \"i32\" => ast::SignedIntLit(ast::IntTy::I32, ast::Plus),\n-            \"i64\" => ast::SignedIntLit(ast::IntTy::I64, ast::Plus),\n+            \"isize\" => ast::SignedIntLit(ast::IntTy::Is),\n+            \"i8\"  => ast::SignedIntLit(ast::IntTy::I8),\n+            \"i16\" => ast::SignedIntLit(ast::IntTy::I16),\n+            \"i32\" => ast::SignedIntLit(ast::IntTy::I32),\n+            \"i64\" => ast::SignedIntLit(ast::IntTy::I64),\n             \"usize\" => ast::UnsignedIntLit(ast::UintTy::Us),\n             \"u8\"  => ast::UnsignedIntLit(ast::UintTy::U8),\n             \"u16\" => ast::UnsignedIntLit(ast::UintTy::U16),\n@@ -651,9 +651,9 @@ pub fn integer_lit(s: &str,\n     debug!(\"integer_lit: the type is {:?}, base {:?}, the new string is {:?}, the original \\\n            string was {:?}, the original suffix was {:?}\", ty, base, s, orig, suffix);\n \n-    let res = match u64::from_str_radix(s, base).ok() {\n-        Some(r) => r,\n-        None => {\n+    match u64::from_str_radix(s, base) {\n+        Ok(r) => ast::LitInt(r, ty),\n+        Err(_) => {\n             // small bases are lexed as if they were base 10, e.g, the string\n             // might be `0b10201`. This will cause the conversion above to fail,\n             // but these cases have errors in the lexer: we don't want to emit\n@@ -665,16 +665,8 @@ pub fn integer_lit(s: &str,\n             if !already_errored {\n                 sd.span_err(sp, \"int literal is too large\");\n             }\n-            0\n+            ast::LitInt(0, ty)\n         }\n-    };\n-\n-    // adjust the sign\n-    let sign = ast::Sign::new(res);\n-    match ty {\n-        ast::SignedIntLit(t, _) => ast::LitInt(res, ast::SignedIntLit(t, sign)),\n-        ast::UnsuffixedIntLit(_) => ast::LitInt(res, ast::UnsuffixedIntLit(sign)),\n-        us@ast::UnsignedIntLit(_) => ast::LitInt(res, us)\n     }\n }\n "}, {"sha": "a02a7d47d326393e5e8a8a824cdbae1a37116864", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -645,24 +645,16 @@ pub trait PrintState<'a> {\n             }\n             ast::LitInt(i, t) => {\n                 match t {\n-                    ast::SignedIntLit(st, ast::Plus) => {\n+                    ast::SignedIntLit(st) => {\n                         word(self.writer(),\n                              &st.val_to_string(i as i64))\n                     }\n-                    ast::SignedIntLit(st, ast::Minus) => {\n-                        let istr = st.val_to_string(-(i as i64));\n-                        word(self.writer(),\n-                             &format!(\"-{}\", istr))\n-                    }\n                     ast::UnsignedIntLit(ut) => {\n                         word(self.writer(), &ut.val_to_string(i))\n                     }\n-                    ast::UnsuffixedIntLit(ast::Plus) => {\n+                    ast::UnsuffixedIntLit => {\n                         word(self.writer(), &format!(\"{}\", i))\n                     }\n-                    ast::UnsuffixedIntLit(ast::Minus) => {\n-                        word(self.writer(), &format!(\"-{}\", i))\n-                    }\n                 }\n             }\n             ast::LitFloat(ref f, t) => {"}, {"sha": "9f6cf73ed640a7c51920de0e8f1204f686048750", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfa66bb389ce1c7ce4aff09d1842b3428015bd4d/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=bfa66bb389ce1c7ce4aff09d1842b3428015bd4d", "patch": "@@ -38,14 +38,10 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                         accumulator.push(c);\n                     }\n                     ast::LitInt(i, ast::UnsignedIntLit(_)) |\n-                    ast::LitInt(i, ast::SignedIntLit(_, ast::Plus)) |\n-                    ast::LitInt(i, ast::UnsuffixedIntLit(ast::Plus)) => {\n+                    ast::LitInt(i, ast::SignedIntLit(_)) |\n+                    ast::LitInt(i, ast::UnsuffixedIntLit) => {\n                         accumulator.push_str(&format!(\"{}\", i));\n                     }\n-                    ast::LitInt(i, ast::SignedIntLit(_, ast::Minus)) |\n-                    ast::LitInt(i, ast::UnsuffixedIntLit(ast::Minus)) => {\n-                        accumulator.push_str(&format!(\"-{}\", i));\n-                    }\n                     ast::LitBool(b) => {\n                         accumulator.push_str(&format!(\"{}\", b));\n                     }"}]}