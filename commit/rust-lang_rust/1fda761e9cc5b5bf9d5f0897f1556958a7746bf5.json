{"sha": "1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZGE3NjFlOWNjNWI1YmY5ZDVmMDg5N2YxNTU2OTU4YTc3NDZiZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-12T10:56:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-12T10:56:28Z"}, "message": "auto merge of #11495 : kud1ing/rust/backticks, r=huonw", "tree": {"sha": "f999677a5666099d6e304cf6c5756b7b8223cf61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f999677a5666099d6e304cf6c5756b7b8223cf61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "html_url": "https://github.com/rust-lang/rust/commit/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74258eaefacee4272cd68819a135d79dfd278291", "url": "https://api.github.com/repos/rust-lang/rust/commits/74258eaefacee4272cd68819a135d79dfd278291", "html_url": "https://github.com/rust-lang/rust/commit/74258eaefacee4272cd68819a135d79dfd278291"}, {"sha": "871ffd1c050789c0bf2b3f6c2ab0069f3d2c0d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/871ffd1c050789c0bf2b3f6c2ab0069f3d2c0d66", "html_url": "https://github.com/rust-lang/rust/commit/871ffd1c050789c0bf2b3f6c2ab0069f3d2c0d66"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "ef31c8c5f3cb6772ae622470ac7cd8f9afae0b07", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -3439,13 +3439,13 @@ pub fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n                  bound_region_ptr_to_str(cx, br))\n         }\n         terr_vstores_differ(k, ref values) => {\n-            format!(\"{} storage differs: expected {} but found {}\",\n+            format!(\"{} storage differs: expected `{}` but found `{}`\",\n                  terr_vstore_kind_to_str(k),\n                  vstore_to_str(cx, (*values).expected),\n                  vstore_to_str(cx, (*values).found))\n         }\n         terr_trait_stores_differ(_, ref values) => {\n-            format!(\"trait storage differs: expected {} but found {}\",\n+            format!(\"trait storage differs: expected `{}` but found `{}`\",\n                  trait_store_to_str(cx, (*values).expected),\n                  trait_store_to_str(cx, (*values).found))\n         }\n@@ -3459,7 +3459,7 @@ pub fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n                  ty_sort_str(cx, values.found))\n         }\n         terr_traits(values) => {\n-            format!(\"expected trait {} but found trait {}\",\n+            format!(\"expected trait `{}` but found trait `{}`\",\n                  item_path_str(cx, values.expected),\n                  item_path_str(cx, values.found))\n         }"}, {"sha": "ac2182195944d3ec96c68385501ba838c5b88a53", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -2131,7 +2131,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n             fcx.write_error(expr.id);\n             fcx.write_error(rhs.id);\n             fcx.type_error_message(expr.span, |actual| {\n-                format!(\"binary operation {} cannot be applied \\\n+                format!(\"binary operation `{}` cannot be applied \\\n                       to type `{}`\",\n                      ast_util::binop_to_str(op), actual)},\n                                    lhs_t, None)\n@@ -2153,7 +2153,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n             fcx.type_error_message(expr.span,\n                                    |actual| {\n                                         format!(\"binary assignment operation \\\n-                                                {}= cannot be applied to type `{}`\",\n+                                                `{}=` cannot be applied to type `{}`\",\n                                                 ast_util::binop_to_str(op),\n                                                 actual)\n                                    },\n@@ -2182,7 +2182,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n             Some(ref name) => {\n                 let if_op_unbound = || {\n                     fcx.type_error_message(ex.span, |actual| {\n-                        format!(\"binary operation {} cannot be applied \\\n+                        format!(\"binary operation `{}` cannot be applied \\\n                               to type `{}`\",\n                              ast_util::binop_to_str(op), actual)},\n                             lhs_resolved_t, None)\n@@ -2850,7 +2850,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                                 _ => {\n                                     fcx.type_error_message(expr.span,\n                                         |actual| {\n-                                            format!(\"type {} cannot be dereferenced\", actual)\n+                                            format!(\"type `{}` cannot be dereferenced\", actual)\n                                     }, oprnd_t, None);\n                                 }\n                             }"}, {"sha": "5b24c6bd79f96e75a4666054d35232886241a4a3", "filename": "src/test/compile-fail/assignment-operator-unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fassignment-operator-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fassignment-operator-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassignment-operator-unimplemented.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -13,5 +13,5 @@ struct Foo;\n fn main() {\n   let mut a = Foo;\n   let ref b = Foo;\n-  a += *b; //~ Error: binary assignment operation += cannot be applied to type `Foo`\n+  a += *b; //~ Error: binary assignment operation `+=` cannot be applied to type `Foo`\n }"}, {"sha": "7b15942a08faff93586265eee1e0c7e1379e7d70", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -22,12 +22,12 @@ struct fish {\n fn main() {\n     let a: clam = clam{x: @1, y: @2};\n     let b: clam = clam{x: @10, y: @20};\n-    let z: int = a.x + b.y; //~ ERROR binary operation + cannot be applied to type `@int`\n+    let z: int = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `@int`\n     info!(\"{:?}\", z);\n     assert_eq!(z, 21);\n     let forty: fish = fish{a: @40};\n     let two: fish = fish{a: @2};\n-    let answer: int = forty.a + two.a;  //~ ERROR binary operation + cannot be applied to type `@int`\n+    let answer: int = forty.a + two.a;  //~ ERROR binary operation `+` cannot be applied to type `@int`\n     info!(\"{:?}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "1c8f259a636939ee63ce3642146d56912fc06c89", "filename": "src/test/compile-fail/binop-bitxor-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:^ cannot be applied to type `~str`\n+// error-pattern:`^` cannot be applied to type `~str`\n \n fn main() { let x = ~\"a\" ^ ~\"b\"; }"}, {"sha": "923d611cebeeaa01ca948632f09abae2385bb4ab", "filename": "src/test/compile-fail/binop-logic-float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-logic-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-logic-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-logic-float.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:|| cannot be applied to type `f32`\n+// error-pattern:`||` cannot be applied to type `f32`\n \n fn main() { let x = 1.0_f32 || 2.0_f32; }"}, {"sha": "0a53293d67696b99f90e9949f86b9771d24140cb", "filename": "src/test/compile-fail/binop-logic-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:&& cannot be applied to type `int`\n+// error-pattern:`&&` cannot be applied to type `int`\n \n fn main() { let x = 1i && 2i; }"}, {"sha": "a36477fc1836ca31031ab5f9ecb294b524558764", "filename": "src/test/compile-fail/binop-mul-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-mul-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-mul-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-mul-bool.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:* cannot be applied to type `bool`\n+// error-pattern:`*` cannot be applied to type `bool`\n \n fn main() { let x = true * false; }"}, {"sha": "8f17288e991d4b5aefd1cbb7a9f6cd7525ee5730", "filename": "src/test/compile-fail/binop-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fbinop-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-typeck.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     let x = true;\n     let y = 1;\n     let z = x + y;\n-    //~^ ERROR binary operation + cannot be applied to type `bool`\n+    //~^ ERROR binary operation `+` cannot be applied to type `bool`\n }"}, {"sha": "7dc99074f72f1779f5f5ed3cdb0877daccba87c2", "filename": "src/test/compile-fail/estr-subtyping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Festr-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Festr-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Festr-subtyping.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -16,19 +16,19 @@ fn wants_slice(x: &str) { }\n \n fn has_box(x: @str) {\n    wants_box(x);\n-   wants_uniq(x); //~ ERROR str storage differs: expected ~ but found @\n+   wants_uniq(x); //~ ERROR str storage differs: expected `~` but found `@`\n    wants_slice(x);\n }\n \n fn has_uniq(x: ~str) {\n-   wants_box(x); //~ ERROR str storage differs: expected @ but found ~\n+   wants_box(x); //~ ERROR str storage differs: expected `@` but found `~`\n    wants_uniq(x);\n    wants_slice(x);\n }\n \n fn has_slice(x: &str) {\n-   wants_box(x); //~ ERROR str storage differs: expected @ but found &\n-   wants_uniq(x); //~ ERROR str storage differs: expected ~ but found &\n+   wants_box(x); //~ ERROR str storage differs: expected `@` but found `&`\n+   wants_uniq(x); //~ ERROR str storage differs: expected `~` but found `&`\n    wants_slice(x);\n }\n "}, {"sha": "da324e1dc202ec66c999bb1d5f98ba14199b7d82", "filename": "src/test/compile-fail/evec-subtyping.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fevec-subtyping.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -16,26 +16,26 @@ fn wants_three(x: [uint, ..3]) { }\n \n fn has_box(x: @[uint]) {\n    wants_box(x);\n-   wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found @\n-   wants_three(x); //~ ERROR [] storage differs: expected 3 but found @\n+   wants_uniq(x); //~ ERROR [] storage differs: expected `~` but found `@`\n+   wants_three(x); //~ ERROR [] storage differs: expected `3` but found `@`\n }\n \n fn has_uniq(x: ~[uint]) {\n-   wants_box(x); //~ ERROR [] storage differs: expected @ but found ~\n+   wants_box(x); //~ ERROR [] storage differs: expected `@` but found `~`\n    wants_uniq(x);\n-   wants_three(x); //~ ERROR [] storage differs: expected 3 but found ~\n+   wants_three(x); //~ ERROR [] storage differs: expected `3` but found `~`\n }\n \n fn has_three(x: [uint, ..3]) {\n-   wants_box(x); //~ ERROR [] storage differs: expected @ but found 3\n-   wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found 3\n+   wants_box(x); //~ ERROR [] storage differs: expected `@` but found `3`\n+   wants_uniq(x); //~ ERROR [] storage differs: expected `~` but found `3`\n    wants_three(x);\n }\n \n fn has_four(x: [uint, ..4]) {\n-   wants_box(x); //~ ERROR [] storage differs: expected @ but found 4\n-   wants_uniq(x); //~ ERROR [] storage differs: expected ~ but found 4\n-   wants_three(x); //~ ERROR [] storage differs: expected 3 but found 4\n+   wants_box(x); //~ ERROR [] storage differs: expected `@` but found `4`\n+   wants_uniq(x); //~ ERROR [] storage differs: expected `~` but found `4`\n+   wants_three(x); //~ ERROR [] storage differs: expected `3` but found `4`\n }\n \n fn main() {"}, {"sha": "6178d37a5bd6c49bde6c12afb451d56db2ffceff", "filename": "src/test/compile-fail/fn-compare-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     fn f() { }\n     fn g() { }\n     let x = f == g;\n-    //~^ ERROR binary operation == cannot be applied\n+    //~^ ERROR binary operation `==` cannot be applied\n }"}, {"sha": "06577afa6dd4657382fa9cf2889bc3d58949c1b0", "filename": "src/test/compile-fail/issue-3820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -21,5 +21,5 @@ impl Thing {\n fn main() {\n     let u = Thing {x: 2};\n     let _v = u.mul(&3); // This is ok\n-    let w = u * 3; //~ ERROR binary operation * cannot be applied to type `Thing`\n+    let w = u * 3; //~ ERROR binary operation `*` cannot be applied to type `Thing`\n }"}, {"sha": "399dd453f756c28f420771906e398a98f6087834", "filename": "src/test/compile-fail/issue-5239-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -11,5 +11,5 @@\n // Regression test for issue #5239\n \n fn main() {\n-    let x: |int| -> int = |ref x| { x += 1; }; //~ ERROR binary assignment operation += cannot be applied to type `&int`\n+    let x: |int| -> int = |ref x| { x += 1; }; //~ ERROR binary assignment operation `+=` cannot be applied to type `&int`\n }"}, {"sha": "5a24603182994480e024de27bf261dc76be0f114", "filename": "src/test/compile-fail/missing-do.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -13,7 +13,7 @@\n fn foo(f: ||) { f() }\n \n fn main() {\n-    ~\"\" || 42; //~ ERROR binary operation || cannot be applied to type\n-    foo || {}; //~ ERROR binary operation || cannot be applied to type\n+    ~\"\" || 42; //~ ERROR binary operation `||` cannot be applied to type\n+    foo || {}; //~ ERROR binary operation `||` cannot be applied to type\n     //~^ NOTE did you forget the `do` keyword for the call?\n }"}, {"sha": "9dae4be5b51ca14616fff9b6214c8d0f0223c086", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -14,6 +14,6 @@ extern mod extra;\n enum bar { t1((), Option<~[int]>), t2, }\n \n // n.b. my change changes this error message, but I think it's right -- tjc\n-fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { fail!(); } } } //~ ERROR binary operation * cannot be applied to\n+fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { fail!(); } } } //~ ERROR binary operation `*` cannot be applied to\n \n fn main() { }"}, {"sha": "c5e378132ab438e723d4b416af263cf129a617bd", "filename": "src/test/compile-fail/type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda761e9cc5b5bf9d5f0897f1556958a7746bf5/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch.rs?ref=1fda761e9cc5b5bf9d5f0897f1556958a7746bf5", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     let x = true;\n     let y = 1;\n     let z = x + y;\n-    //~^ ERROR binary operation + cannot be applied to type `bool`\n+    //~^ ERROR binary operation `+` cannot be applied to type `bool`\n }"}]}