{"sha": "a7b727dab3aff466fc88c3ce0916817dc2d093bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjcyN2RhYjNhZmY0NjZmYzg4YzNjZTA5MTY4MTdkYzJkMDkzYmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-13T21:34:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-27T23:59:26Z"}, "message": "Account for bounds when denying `_` in type parameters", "tree": {"sha": "91de209b2c2cb063be7638d5858179e9472444b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91de209b2c2cb063be7638d5858179e9472444b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b727dab3aff466fc88c3ce0916817dc2d093bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b727dab3aff466fc88c3ce0916817dc2d093bc", "html_url": "https://github.com/rust-lang/rust/commit/a7b727dab3aff466fc88c3ce0916817dc2d093bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b727dab3aff466fc88c3ce0916817dc2d093bc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c85960d164c5f1e30ae9d18002c3e9d435fc46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c85960d164c5f1e30ae9d18002c3e9d435fc46", "html_url": "https://github.com/rust-lang/rust/commit/e6c85960d164c5f1e30ae9d18002c3e9d435fc46"}], "stats": {"total": 91, "additions": 78, "deletions": 13}, "files": [{"sha": "d1a6163df2d0ed7dfe872498e172b9489994e74c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a7b727dab3aff466fc88c3ce0916817dc2d093bc", "patch": "@@ -514,7 +514,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self_ty: Option<Ty<'tcx>>,\n         arg_count_correct: bool,\n         args_for_def_id: impl Fn(DefId) -> (Option<&'b GenericArgs<'b>>, bool),\n-        provided_kind: impl Fn(&GenericParamDef, &GenericArg<'_>) -> subst::GenericArg<'tcx>,\n+        mut provided_kind: impl FnMut(&GenericParamDef, &GenericArg<'_>) -> subst::GenericArg<'tcx>,\n         mut inferred_kind: impl FnMut(\n             Option<&[subst::GenericArg<'tcx>]>,\n             &GenericParamDef,\n@@ -751,6 +751,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n \n         let mut missing_type_params = vec![];\n+        let mut inferred_params = vec![];\n         let substs = Self::create_substs_for_generic_args(\n             tcx,\n             def_id,\n@@ -773,7 +774,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     self.ast_region_to_region(&lt, Some(param)).into()\n                 }\n                 (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n-                    self.ast_ty_to_ty(&ty).into()\n+                    if let (hir::TyKind::Infer, false) = (&ty.kind, self.allow_ty_infer()) {\n+                        inferred_params.push(ty.span);\n+                        tcx.types.err.into()\n+                    } else {\n+                        self.ast_ty_to_ty(&ty).into()\n+                    }\n                 }\n                 (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n                     self.ast_const_to_const(&ct.value, tcx.type_of(param.def_id)).into()\n@@ -832,6 +838,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n             },\n         );\n+        if !inferred_params.is_empty() {\n+            // We always collect the spans for placeholder types when evaluating `fn`s, but we\n+            // only want to emit an error complaining about them if infer types (`_`) are not\n+            // allowed. `allow_ty_infer` gates this behavior.\n+            crate::collect::placeholder_type_error(\n+                tcx,\n+                inferred_params[0],\n+                &[],\n+                inferred_params,\n+                false,\n+            );\n+        }\n \n         self.complain_about_missing_type_params(\n             missing_type_params,"}, {"sha": "00845a17b116b5cbc56c22f64aea440b4fcf6009", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=a7b727dab3aff466fc88c3ce0916817dc2d093bc", "patch": "@@ -45,4 +45,8 @@ type I = ty!()::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n //~| ERROR ambiguous associated type\n \n+trait K<A, B> {}\n+fn foo<X: K<_, _>>(x: X) {}\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n fn main() {}"}, {"sha": "6d5f3d9f14348de332a9f645758ec6d214d097bb", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=a7b727dab3aff466fc88c3ce0916817dc2d093bc", "patch": "@@ -122,7 +122,15 @@ error[E0223]: ambiguous associated type\n LL | type I = ty!()::AssocTy;\n    |          ^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n \n-error: aborting due to 19 previous errors\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:49:13\n+   |\n+LL | fn foo<X: K<_, _>>(x: X) {}\n+   |             ^  ^ not allowed in type signatures\n+   |             |\n+   |             not allowed in type signatures\n+\n+error: aborting due to 20 previous errors\n \n Some errors have detailed explanations: E0121, E0223.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "8ee46343d2d5ff3f531b0b383c7f870bdea1907a", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=a7b727dab3aff466fc88c3ce0916817dc2d093bc", "patch": "@@ -157,9 +157,12 @@ trait BadTrait<_> {}\n //~^ ERROR expected identifier, found reserved identifier `_`\n impl BadTrait<_> for BadStruct<_> {}\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n fn impl_trait() -> impl BadTrait<_> {\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n     unimplemented!()\n }\n \n@@ -174,12 +177,14 @@ struct BadStruct2<_, T>(_, T);\n \n type X = Box<_>;\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n struct Struct;\n trait Trait<T> {}\n impl Trait<usize> for Struct {}\n type Y = impl Trait<_>;\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n fn foo() -> Y {\n     Struct\n }"}, {"sha": "18317d2b9748a772da7de66dd4241197dd26a836", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7b727dab3aff466fc88c3ce0916817dc2d093bc/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=a7b727dab3aff466fc88c3ce0916817dc2d093bc", "patch": "@@ -11,25 +11,25 @@ LL | trait BadTrait<_> {}\n    |                ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:166:19\n+  --> $DIR/typeck_type_placeholder_item.rs:169:19\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:166:22\n+  --> $DIR/typeck_type_placeholder_item.rs:169:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:171:19\n+  --> $DIR/typeck_type_placeholder_item.rs:174:19\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                   ^ expected identifier, found reserved identifier\n \n error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:166:22\n+  --> $DIR/typeck_type_placeholder_item.rs:169:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   -  ^ already used\n@@ -343,6 +343,18 @@ help: use type parameters instead\n LL | struct BadStruct<T>(T);\n    |                  ^  ^\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:158:32\n+   |\n+LL | impl BadTrait<_> for BadStruct<_> {}\n+   |                                ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:158:15\n+   |\n+LL | impl BadTrait<_> for BadStruct<_> {}\n+   |               ^ not allowed in type signatures\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:158:15\n    |\n@@ -357,13 +369,13 @@ LL | impl<T> BadTrait<T> for BadStruct<T> {}\n    |     ^^^          ^                ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:161:34\n+  --> $DIR/typeck_type_placeholder_item.rs:163:34\n    |\n LL | fn impl_trait() -> impl BadTrait<_> {\n    |                                  ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:166:25\n+  --> $DIR/typeck_type_placeholder_item.rs:169:25\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                         ^ not allowed in type signatures\n@@ -374,7 +386,7 @@ LL | struct BadStruct1<T, _>(T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:171:25\n+  --> $DIR/typeck_type_placeholder_item.rs:174:25\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                         ^ not allowed in type signatures\n@@ -385,7 +397,13 @@ LL | struct BadStruct2<K, T>(K, T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:175:14\n+  --> $DIR/typeck_type_placeholder_item.rs:178:14\n+   |\n+LL | type X = Box<_>;\n+   |              ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:178:14\n    |\n LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n@@ -505,7 +523,19 @@ LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:181:21\n+  --> $DIR/typeck_type_placeholder_item.rs:163:34\n+   |\n+LL | fn impl_trait() -> impl BadTrait<_> {\n+   |                                  ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:185:21\n+   |\n+LL | type Y = impl Trait<_>;\n+   |                     ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:185:21\n    |\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n@@ -546,7 +576,7 @@ LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            not allowed in type signatures\n    |                            help: replace with the correct return type: `main::FnTest9`\n \n-error: aborting due to 58 previous errors\n+error: aborting due to 63 previous errors\n \n Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}