{"sha": "22685b9607936ae1330e2f84773c04292f5cdd30", "node_id": "C_kwDOAAsO6NoAKDIyNjg1Yjk2MDc5MzZhZTEzMzBlMmY4NDc3M2MwNDI5MmY1Y2RkMzA", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-31T12:10:13Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:03Z"}, "message": "macros: support translatable suggestions\n\nExtends support for generating `DiagnosticMessage::FluentIdentifier`\nmessages from `SessionDiagnostic` derive to `#[suggestion]`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "2976e4e6b87293774e47a064e4e11d8677c0b331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2976e4e6b87293774e47a064e4e11d8677c0b331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22685b9607936ae1330e2f84773c04292f5cdd30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22685b9607936ae1330e2f84773c04292f5cdd30", "html_url": "https://github.com/rust-lang/rust/commit/22685b9607936ae1330e2f84773c04292f5cdd30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22685b9607936ae1330e2f84773c04292f5cdd30/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b40ee88a28938891dd40d35a635d13373c3011cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b40ee88a28938891dd40d35a635d13373c3011cb", "html_url": "https://github.com/rust-lang/rust/commit/b40ee88a28938891dd40d35a635d13373c3011cb"}], "stats": {"total": 264, "additions": 141, "deletions": 123}, "files": [{"sha": "46f698f6f9b819ef793934c319031b6e2bab8372", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 93, "deletions": 66, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/22685b9607936ae1330e2f84773c04292f5cdd30/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22685b9607936ae1330e2f84773c04292f5cdd30/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=22685b9607936ae1330e2f84773c04292f5cdd30", "patch": "@@ -594,6 +594,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n         info: FieldInfo<'_>,\n     ) -> Result<proc_macro2::TokenStream, SessionDiagnosticDeriveError> {\n         let diag = &self.diag;\n+        let span = attr.span().unwrap();\n         let field_binding = &info.binding.binding;\n \n         let name = attr.path.segments.last().unwrap().ident.to_string();\n@@ -618,7 +619,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                     Ok(self.add_subdiagnostic(field_binding, name, name))\n                 }\n                 other => throw_span_err!(\n-                    attr.span().unwrap(),\n+                    span,\n                     &format!(\"`#[{}]` is not a valid `SessionDiagnostic` field attribute\", other)\n                 ),\n             },\n@@ -628,85 +629,111 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                     Ok(self.add_subdiagnostic(field_binding, name, &s.value()))\n                 }\n                 other => throw_span_err!(\n-                    attr.span().unwrap(),\n+                    span,\n                     &format!(\n                         \"`#[{} = ...]` is not a valid `SessionDiagnostic` field attribute\",\n                         other\n                     )\n                 ),\n             },\n             syn::Meta::NameValue(_) => throw_span_err!(\n-                attr.span().unwrap(),\n+                span,\n                 &format!(\"`#[{} = ...]` is not a valid `SessionDiagnostic` field attribute\", name),\n                 |diag| diag.help(\"value must be a string\")\n             ),\n-            syn::Meta::List(list) => {\n-                match list.path.segments.iter().last().unwrap().ident.to_string().as_str() {\n-                    suggestion_kind @ \"suggestion\"\n-                    | suggestion_kind @ \"suggestion_short\"\n-                    | suggestion_kind @ \"suggestion_hidden\"\n-                    | suggestion_kind @ \"suggestion_verbose\" => {\n-                        let (span, applicability) = self.span_and_applicability_of_ty(info)?;\n-\n-                        let mut msg = None;\n-                        let mut code = None;\n-\n-                        for arg in list.nested.iter() {\n-                            if let syn::NestedMeta::Meta(syn::Meta::NameValue(arg_name_value)) = arg\n-                            {\n-                                if let syn::MetaNameValue { lit: syn::Lit::Str(s), .. } =\n-                                    arg_name_value\n-                                {\n-                                    let name = arg_name_value\n-                                        .path\n-                                        .segments\n-                                        .last()\n-                                        .unwrap()\n-                                        .ident\n-                                        .to_string();\n-                                    let name = name.as_str();\n-                                    let formatted_str = self.build_format(&s.value(), arg.span());\n-                                    match name {\n-                                        \"message\" => {\n-                                            msg = Some(formatted_str);\n-                                        }\n-                                        \"code\" => {\n-                                            code = Some(formatted_str);\n-                                        }\n-                                        other => throw_span_err!(\n-                                            arg.span().unwrap(),\n-                                            &format!(\n-                                                \"`{}` is not a valid key for `#[suggestion(...)]`\",\n-                                                other\n-                                            )\n-                                        ),\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        let msg = if let Some(msg) = msg {\n-                            quote!(#msg.as_str())\n-                        } else {\n-                            throw_span_err!(\n-                                list.span().unwrap(),\n-                                \"missing suggestion message\",\n-                                |diag| {\n-                                    diag.help(\"provide a suggestion message using `#[suggestion(message = \\\"...\\\")]`\")\n-                                }\n-                            );\n-                        };\n-                        let code = code.unwrap_or_else(|| quote! { String::new() });\n+            syn::Meta::List(syn::MetaList { path, nested, .. }) => {\n+                let name = path.segments.last().unwrap().ident.to_string();\n+                let name = name.as_ref();\n \n-                        let suggestion_method = format_ident!(\"span_{}\", suggestion_kind);\n-                        return Ok(quote! {\n-                            #diag.#suggestion_method(#span, #msg, #code, #applicability);\n-                        });\n-                    }\n+                match name {\n+                    \"suggestion\" | \"suggestion_short\" | \"suggestion_hidden\"\n+                    | \"suggestion_verbose\" => (),\n                     other => throw_span_err!(\n-                        list.span().unwrap(),\n-                        &format!(\"invalid annotation list `#[{}(...)]`\", other)\n+                        span,\n+                        &format!(\n+                            \"`#[{}(...)]` is not a valid `SessionDiagnostic` field attribute\",\n+                            other\n+                        )\n                     ),\n+                };\n+\n+                let (span_, applicability) = self.span_and_applicability_of_ty(info)?;\n+\n+                let mut msg = None;\n+                let mut code = None;\n+\n+                for attr in nested {\n+                    let meta = match attr {\n+                        syn::NestedMeta::Meta(meta) => meta,\n+                        syn::NestedMeta::Lit(_) => throw_span_err!(\n+                            span,\n+                            &format!(\n+                                \"`#[{}(\\\"...\\\")]` is not a valid `SessionDiagnostic` field attribute\",\n+                                name\n+                            )\n+                        ),\n+                    };\n+\n+                    let span = meta.span().unwrap();\n+                    let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n+                    let nested_name = nested_name.as_str();\n+\n+                    match meta {\n+                        syn::Meta::NameValue(syn::MetaNameValue {\n+                            lit: syn::Lit::Str(s), ..\n+                        }) => match nested_name {\n+                            \"message\" => {\n+                                msg = Some(s.value());\n+                            }\n+                            \"code\" => {\n+                                let formatted_str = self.build_format(&s.value(), s.span());\n+                                code = Some(formatted_str);\n+                            }\n+                            other => throw_span_err!(\n+                                span,\n+                                &format!(\n+                                    \"`#[{}({} = ...)]` is not a valid `SessionDiagnostic` field attribute\",\n+                                    name, other\n+                                )\n+                            ),\n+                        },\n+                        syn::Meta::NameValue(..) => throw_span_err!(\n+                            span,\n+                            &format!(\n+                                \"`#[{}({} = ...)]` is not a valid `SessionDiagnostic` struct attribute\",\n+                                name, nested_name\n+                            ),\n+                            |diag| diag.help(\"value must be a string\")\n+                        ),\n+                        syn::Meta::Path(..) => throw_span_err!(\n+                            span,\n+                            &format!(\n+                                \"`#[{}({})]` is not a valid `SessionDiagnostic` struct attribute\",\n+                                name, nested_name\n+                            )\n+                        ),\n+                        syn::Meta::List(..) => throw_span_err!(\n+                            span,\n+                            &format!(\n+                                \"`#[{}({}(...))]` is not a valid `SessionDiagnostic` struct attribute\",\n+                                name, nested_name\n+                            )\n+                        ),\n+                    }\n                 }\n+\n+                let method = format_ident!(\"span_{}\", name);\n+\n+                let slug = self\n+                    .slug\n+                    .as_ref()\n+                    .map(|(slug, _)| slug.as_str())\n+                    .unwrap_or_else(|| \"missing-slug\");\n+                let msg = msg.as_deref().unwrap_or(\"suggestion\");\n+                let msg = quote! { rustc_errors::DiagnosticMessage::fluent_attr(#slug, #msg) };\n+                let code = code.unwrap_or_else(|| quote! { String::new() });\n+\n+                Ok(quote! { #diag.#method(#span_, #msg, #code, #applicability); })\n             }\n         }\n     }"}, {"sha": "adec548b39053d340b02d04f4dc108a4a5d0df24", "filename": "src/test/ui-fulldeps/session-derive-errors.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/22685b9607936ae1330e2f84773c04292f5cdd30/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22685b9607936ae1330e2f84773c04292f5cdd30/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs?ref=22685b9607936ae1330e2f84773c04292f5cdd30", "patch": "@@ -83,7 +83,7 @@ struct InvalidNestedStructAttr3 {}\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct WrongPlaceField {\n-    #[suggestion = \"this is the wrong kind of attribute\"]\n+    #[suggestion = \"bar\"]\n     //~^ ERROR `#[suggestion = ...]` is not a valid `SessionDiagnostic` field attribute\n     sp: Span,\n }\n@@ -154,7 +154,7 @@ struct ErrorWithMessageAppliedToField {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorWithNonexistentField {\n-    #[suggestion(message = \"This is a suggestion\", code = \"{name}\")]\n+    #[suggestion(message = \"bar\", code = \"{name}\")]\n     //~^ ERROR `name` doesn't refer to a field on this type\n     suggestion: (Span, Applicability),\n }\n@@ -163,7 +163,7 @@ struct ErrorWithNonexistentField {\n //~^ ERROR invalid format string: expected `'}'`\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorMissingClosingBrace {\n-    #[suggestion(message = \"This is a suggestion\", code = \"{name\")]\n+    #[suggestion(message = \"bar\", code = \"{name\")]\n     suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n@@ -173,7 +173,7 @@ struct ErrorMissingClosingBrace {\n //~^ ERROR invalid format string: unmatched `}`\n #[error(code = \"E0123\", slug = \"foo\")]\n struct ErrorMissingOpeningBrace {\n-    #[suggestion(message = \"This is a suggestion\", code = \"name}\")]\n+    #[suggestion(message = \"bar\", code = \"name}\")]\n     suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n@@ -197,78 +197,77 @@ struct LabelOnNonSpan {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct Suggest {\n-    #[suggestion(message = \"This is a suggestion\", code = \"This is the suggested code\")]\n-    #[suggestion_short(message = \"This is a suggestion\", code = \"This is the suggested code\")]\n-    #[suggestion_hidden(message = \"This is a suggestion\", code = \"This is the suggested code\")]\n-    #[suggestion_verbose(message = \"This is a suggestion\", code = \"This is the suggested code\")]\n+    #[suggestion(message = \"bar\", code = \"This is the suggested code\")]\n+    #[suggestion_short(message = \"qux\", code = \"This is the suggested code\")]\n+    #[suggestion_hidden(message = \"foobar\", code = \"This is the suggested code\")]\n+    #[suggestion_verbose(message = \"fooqux\", code = \"This is the suggested code\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithoutCode {\n-    #[suggestion(message = \"This is a suggestion\")]\n+    #[suggestion(message = \"bar\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithBadKey {\n-    #[suggestion(nonsense = \"This is nonsense\")]\n-    //~^ ERROR `nonsense` is not a valid key for `#[suggestion(...)]`\n+    #[suggestion(nonsense = \"bar\")]\n+    //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid `SessionDiagnostic` field attribute\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithShorthandMsg {\n-    #[suggestion(msg = \"This is a suggestion\")]\n-    //~^ ERROR `msg` is not a valid key for `#[suggestion(...)]`\n+    #[suggestion(msg = \"bar\")]\n+    //~^ ERROR `#[suggestion(msg = ...)]` is not a valid `SessionDiagnostic` field attribute\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithoutMsg {\n-    #[suggestion(code = \"This is suggested code\")]\n-    //~^ ERROR missing suggestion message\n+    #[suggestion(code = \"bar\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithTypesSwapped {\n-    #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n     suggestion: (Applicability, Span),\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithWrongTypeApplicabilityOnly {\n-    #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n     //~^ ERROR wrong field type for suggestion\n     suggestion: Applicability,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithSpanOnly {\n-    #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n     suggestion: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithDuplicateSpanAndApplicability {\n-    #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n     suggestion: (Span, Span, Applicability),\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct SuggestWithDuplicateApplicabilityAndSpan {\n-    #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+    #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one\n     suggestion: (Applicability, Applicability, Span),\n }\n@@ -277,7 +276,7 @@ struct SuggestWithDuplicateApplicabilityAndSpan {\n #[error(code = \"E0123\", slug = \"foo\")]\n struct WrongKindOfAnnotation {\n     #[label(\"bar\")]\n-    //~^ ERROR invalid annotation list `#[label(...)]`\n+    //~^ ERROR `#[label(...)]` is not a valid `SessionDiagnostic` field attribute\n     z: Span,\n }\n \n@@ -286,7 +285,7 @@ struct WrongKindOfAnnotation {\n struct OptionsInErrors {\n     #[label = \"bar\"]\n     label: Option<Span>,\n-    #[suggestion(message = \"suggestion message\")]\n+    #[suggestion(message = \"bar\")]\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n@@ -300,7 +299,7 @@ struct MoveOutOfBorrowError<'tcx> {\n     span: Span,\n     #[label = \"qux\"]\n     other_span: Span,\n-    #[suggestion(message = \"consider cloning here\", code = \"{name}.clone()\")]\n+    #[suggestion(message = \"bar\", code = \"{name}.clone()\")]\n     opt_sugg: Option<(Span, Applicability)>,\n }\n "}, {"sha": "a528ae1607fbaba618d955f3cdcbf8b83435c4d5", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/22685b9607936ae1330e2f84773c04292f5cdd30/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22685b9607936ae1330e2f84773c04292f5cdd30/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=22685b9607936ae1330e2f84773c04292f5cdd30", "patch": "@@ -79,8 +79,8 @@ LL | #[error(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n error: `#[suggestion = ...]` is not a valid `SessionDiagnostic` field attribute\n   --> $DIR/session-derive-errors.rs:86:5\n    |\n-LL |     #[suggestion = \"this is the wrong kind of attribute\"]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion = \"bar\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: `error` specified multiple times\n   --> $DIR/session-derive-errors.rs:93:1\n@@ -166,10 +166,10 @@ LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/session-derive-errors.rs:157:52\n+  --> $DIR/session-derive-errors.rs:157:42\n    |\n-LL |     #[suggestion(message = \"This is a suggestion\", code = \"{name}\")]\n-   |                                                    ^^^^^^^^^^^^^^^\n+LL |     #[suggestion(message = \"bar\", code = \"{name}\")]\n+   |                                          ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/session-derive-errors.rs:162:16\n@@ -197,78 +197,70 @@ error: the `#[label = ...]` attribute can only be applied to fields of type `Spa\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n-error: `nonsense` is not a valid key for `#[suggestion(...)]`\n+error: `#[suggestion(nonsense = ...)]` is not a valid `SessionDiagnostic` field attribute\n   --> $DIR/session-derive-errors.rs:217:18\n    |\n-LL |     #[suggestion(nonsense = \"This is nonsense\")]\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(nonsense = \"bar\")]\n+   |                  ^^^^^^^^^^^^^^^^\n \n-error: `msg` is not a valid key for `#[suggestion(...)]`\n+error: `#[suggestion(msg = ...)]` is not a valid `SessionDiagnostic` field attribute\n   --> $DIR/session-derive-errors.rs:225:18\n    |\n-LL |     #[suggestion(msg = \"This is a suggestion\")]\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: missing suggestion message\n-  --> $DIR/session-derive-errors.rs:233:7\n-   |\n-LL |     #[suggestion(code = \"This is suggested code\")]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: provide a suggestion message using `#[suggestion(message = \"...\")]`\n+LL |     #[suggestion(msg = \"bar\")]\n+   |                  ^^^^^^^^^^^\n \n error: wrong field type for suggestion\n-  --> $DIR/session-derive-errors.rs:248:5\n+  --> $DIR/session-derive-errors.rs:247:5\n    |\n-LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+LL | /     #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: Applicability,\n    | |_____________________________^\n    |\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n-  --> $DIR/session-derive-errors.rs:263:5\n+  --> $DIR/session-derive-errors.rs:262:5\n    |\n-LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+LL | /     #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Span, Span, Applicability),\n    | |___________________________________________^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/session-derive-errors.rs:271:5\n+  --> $DIR/session-derive-errors.rs:270:5\n    |\n-LL | /     #[suggestion(message = \"This is a message\", code = \"This is suggested code\")]\n+LL | /     #[suggestion(message = \"bar\", code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Applicability, Applicability, Span),\n    | |____________________________________________________^\n \n-error: invalid annotation list `#[label(...)]`\n-  --> $DIR/session-derive-errors.rs:279:7\n+error: `#[label(...)]` is not a valid `SessionDiagnostic` field attribute\n+  --> $DIR/session-derive-errors.rs:278:5\n    |\n LL |     #[label(\"bar\")]\n-   |       ^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^\n \n error: `#[help]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/session-derive-errors.rs:400:1\n+  --> $DIR/session-derive-errors.rs:399:1\n    |\n LL | #[help]\n    | ^^^^^^^\n \n error: `#[help = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/session-derive-errors.rs:408:1\n+  --> $DIR/session-derive-errors.rs:407:1\n    |\n LL | #[help = \"bar\"]\n    | ^^^^^^^^^^^^^^^\n \n error: `#[note]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/session-derive-errors.rs:416:1\n+  --> $DIR/session-derive-errors.rs:415:1\n    |\n LL | #[note]\n    | ^^^^^^^\n \n error: `#[note = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n-  --> $DIR/session-derive-errors.rs:424:1\n+  --> $DIR/session-derive-errors.rs:423:1\n    |\n LL | #[note = \"bar\"]\n    | ^^^^^^^^^^^^^^^\n@@ -286,7 +278,7 @@ LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error[E0599]: no method named `into_diagnostic_arg` found for struct `Hello` in the current scope\n-  --> $DIR/session-derive-errors.rs:323:10\n+  --> $DIR/session-derive-errors.rs:322:10\n    |\n LL | struct Hello {}\n    | ------------ method `into_diagnostic_arg` not found for this\n@@ -296,6 +288,6 @@ LL | #[derive(SessionDiagnostic)]\n    |\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 37 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}