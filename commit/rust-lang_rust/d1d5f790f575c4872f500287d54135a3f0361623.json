{"sha": "d1d5f790f575c4872f500287d54135a3f0361623", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZDVmNzkwZjU3NWM0ODcyZjUwMDI4N2Q1NDEzNWEzZjAzNjE2MjM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-12-03T12:20:42Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-12-03T12:25:41Z"}, "message": "Fix FP in manual_swap lint with slice-like types", "tree": {"sha": "7be7943a5fe689aa497b8555c065ff7056464a26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be7943a5fe689aa497b8555c065ff7056464a26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1d5f790f575c4872f500287d54135a3f0361623", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl3mVEUACgkQaTCGhp1Q\nZjdoSA/9FKbkPdIH7J5Vpdo76kTAOHjhbVASYYHpsJeSF+WGTFdT/2KJdSwm77Zc\nD3L1LpehrYWHuGdZ5RkH4PGcvLOqlDUI6S9hE7k79JkSbcSegsfKF5Vb7L0cJkFj\nsiqYTJDW5W9Zu8U2Q8V0wmSNSh87uGxYjcwsg/BDE/A51ixX/ALDFsBRkDIHKxUX\nP9QcbhldsAB0YNznovG1UsjDKRK3l0tSk51OWDVE+CSO551Y88akkxPmf2ssoIYs\n+cSlSYtVtWhb/D6WcBXJRnnpKP2nqllSzvw8Ri9d5k/v0Tb5eO9UYnsRdlzLoht7\nFt6Vm5ulqf2g5fprnzKByfqNCSXs6vTkdqtzZIXaU6+O4O56Fos5kQk00bDw4g89\nKtjTLTkjcScfgFM0FgI3TgS3Rfejx/buY/Y1EDXD1a0NQDttOtSqaefr+zFlmMbX\nZOjbcaiUyLD8C64HjBM/vkmzNzBzyS3ETQNH2P2RBwa2n38jmSKJLmtKa4vQV1jl\n6uiMte5qehP0Uk6AtDfCcVDHgZMCCUKLXQTDadorbgd8X6SwRTSjSGqxpygJO1+t\nddAg9znIwpjTu5FVPbpbMcSmIPxCvA5KYg96CsABKfeWGdhjSBs+pqcQU9ByhjK2\nFdefR3bNQOYjoOzUfC1EcG9sB0lZqHFwdjaz8Bhmww8LI5+gsgE=\n=eYQj\n-----END PGP SIGNATURE-----", "payload": "tree 7be7943a5fe689aa497b8555c065ff7056464a26\nparent d3232b0fce41bce8f184841e3c613df1c1a43035\nauthor flip1995 <hello@philkrones.com> 1575375642 +0100\ncommitter flip1995 <hello@philkrones.com> 1575375941 +0100\n\nFix FP in manual_swap lint with slice-like types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d5f790f575c4872f500287d54135a3f0361623", "html_url": "https://github.com/rust-lang/rust/commit/d1d5f790f575c4872f500287d54135a3f0361623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1d5f790f575c4872f500287d54135a3f0361623/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3232b0fce41bce8f184841e3c613df1c1a43035", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3232b0fce41bce8f184841e3c613df1c1a43035", "html_url": "https://github.com/rust-lang/rust/commit/d3232b0fce41bce8f184841e3c613df1c1a43035"}], "stats": {"total": 79, "additions": 55, "deletions": 24}, "files": [{"sha": "c7a0f0058f9651afabb002fc8b09e5a8cd9a1a39", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 55, "deletions": 24, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/d1d5f790f575c4872f500287d54135a3f0361623/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d5f790f575c4872f500287d54135a3f0361623/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=d1d5f790f575c4872f500287d54135a3f0361623", "patch": "@@ -97,29 +97,6 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n             if SpanlessEq::new(cx).ignore_fn().eq_expr(tmp_init, lhs1);\n             if SpanlessEq::new(cx).ignore_fn().eq_expr(rhs1, lhs2);\n             then {\n-                fn check_for_slice<'a>(\n-                    cx: &LateContext<'_, '_>,\n-                    lhs1: &'a Expr,\n-                    lhs2: &'a Expr,\n-                ) -> Option<(&'a Expr, &'a Expr, &'a Expr)> {\n-                    if let ExprKind::Index(ref lhs1, ref idx1) = lhs1.kind {\n-                        if let ExprKind::Index(ref lhs2, ref idx2) = lhs2.kind {\n-                            if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, lhs2) {\n-                                let ty = walk_ptrs_ty(cx.tables.expr_ty(lhs1));\n-\n-                                if matches!(ty.kind, ty::Slice(_)) ||\n-                                    matches!(ty.kind, ty::Array(_, _)) ||\n-                                    is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) ||\n-                                    match_type(cx, ty, &paths::VEC_DEQUE) {\n-                                        return Some((lhs1, idx1, idx2));\n-                                }\n-                            }\n-                        }\n-                    }\n-\n-                    None\n-                }\n-\n                 if let ExprKind::Field(ref lhs1, _) = lhs1.kind {\n                     if let ExprKind::Field(ref lhs2, _) = lhs2.kind {\n                         if lhs1.hir_id.owner_def_id() == lhs2.hir_id.owner_def_id() {\n@@ -128,7 +105,11 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n                     }\n                 }\n \n-                let (replace, what, sugg) = if let Some((slice, idx1, idx2)) = check_for_slice(cx, lhs1, lhs2) {\n+                let slice = check_for_slice(cx, lhs1, lhs2);\n+\n+                let (replace, what, sugg) = if let Slice::NotSwappable = slice {\n+                    return;\n+                } else if let Slice::Swappable(slice, idx1, idx2) = slice {\n                     if let Some(slice) = Sugg::hir_opt(cx, slice) {\n                         (false,\n                          format!(\" elements of `{}`\", slice),\n@@ -171,6 +152,56 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n     }\n }\n \n+enum Slice<'a> {\n+    /// `slice.swap(idx1, idx2)` can be used\n+    ///\n+    /// ## Example\n+    ///\n+    /// ```rust\n+    /// let t = a[1];\n+    /// a[1] = a[0];\n+    /// a[0] = t;\n+    /// // can be written as\n+    /// a.swap(0, 1);\n+    /// ```\n+    Swappable(&'a Expr, &'a Expr, &'a Expr),\n+    /// The `swap` function cannot be used.\n+    ///\n+    /// ## Example\n+    ///\n+    /// ```rust\n+    /// let t = a[0][1];\n+    /// a[0][1] = a[1][0];\n+    /// a[1][0] = t;\n+    /// ```\n+    NotSwappable,\n+    /// Not a slice\n+    None,\n+}\n+\n+/// Checks if both expressions are index operations into \"slice-like\" types.\n+fn check_for_slice<'a>(cx: &LateContext<'_, '_>, lhs1: &'a Expr, lhs2: &'a Expr) -> Slice<'a> {\n+    if let ExprKind::Index(ref lhs1, ref idx1) = lhs1.kind {\n+        if let ExprKind::Index(ref lhs2, ref idx2) = lhs2.kind {\n+            if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, lhs2) {\n+                let ty = walk_ptrs_ty(cx.tables.expr_ty(lhs1));\n+\n+                if matches!(ty.kind, ty::Slice(_))\n+                    || matches!(ty.kind, ty::Array(_, _))\n+                    || is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\"))\n+                    || match_type(cx, ty, &paths::VEC_DEQUE)\n+                {\n+                    return Slice::Swappable(lhs1, idx1, idx2);\n+                }\n+            } else {\n+                return Slice::NotSwappable;\n+            }\n+        }\n+    }\n+\n+    Slice::None\n+}\n+\n /// Implementation of the `ALMOST_SWAPPED` lint.\n fn check_suspicious_swap(cx: &LateContext<'_, '_>, block: &Block) {\n     for w in block.stmts.windows(2) {"}]}