{"sha": "3c6064130bdc7093a7c944eee7381e980d505524", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNjA2NDEzMGJkYzcwOTNhN2M5NDRlZWU3MzgxZTk4MGQ1MDU1MjQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-19T08:14:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-19T08:14:46Z"}, "message": "Merge pull request #2367 from etaoins/inline-fn-without-body-lint\n\nLint for trait methods without bodies", "tree": {"sha": "a24c2cf45646dcb35fe97545b51091f39c398e7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a24c2cf45646dcb35fe97545b51091f39c398e7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6064130bdc7093a7c944eee7381e980d505524", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaYaj2CRBK7hj4Ov3rIwAAdHIIAExqyAR8RAu/nLklsv4kd3kF\nIjq3eaT4E0NLnF/wTbra2I5tpVW0qxoqe48mNYm7KltFLt6ur36EEYlMMSUh+gxj\nCZJcR1/NLbwwgQaVqQq1RgiL09HO76iYqVOHpL3uQFn92w+ZZlcV5uaHKKRYnx5J\nZMg0UupJrv7wSxQhCg14/kGA46fZez5v8XKzfSEtYqM+ogTWVtzkKG0iAtLKO9MX\nmTEWx/AY228wElhwMqnSar5d9ea/VYQn4DqbWrxVEZ81O8AHijJB31ouoPnTy9dS\nhsJo23aKtxh0M7/JJ0KrYnMGy/HSM0kQ2tTVh7OJtaaxcLTQG2NE4ksxT+qCql4=\n=B1H/\n-----END PGP SIGNATURE-----\n", "payload": "tree a24c2cf45646dcb35fe97545b51091f39c398e7a\nparent 26c415ab2d9c9c3ab27ca4358bebe21131a83047\nparent 7467b83377e47a5f99b68737e5855ec4db1501e2\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1516349686 +0100\ncommitter GitHub <noreply@github.com> 1516349686 +0100\n\nMerge pull request #2367 from etaoins/inline-fn-without-body-lint\n\nLint for trait methods without bodies"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6064130bdc7093a7c944eee7381e980d505524", "html_url": "https://github.com/rust-lang/rust/commit/3c6064130bdc7093a7c944eee7381e980d505524", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6064130bdc7093a7c944eee7381e980d505524/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26c415ab2d9c9c3ab27ca4358bebe21131a83047", "url": "https://api.github.com/repos/rust-lang/rust/commits/26c415ab2d9c9c3ab27ca4358bebe21131a83047", "html_url": "https://github.com/rust-lang/rust/commit/26c415ab2d9c9c3ab27ca4358bebe21131a83047"}, {"sha": "7467b83377e47a5f99b68737e5855ec4db1501e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7467b83377e47a5f99b68737e5855ec4db1501e2", "html_url": "https://github.com/rust-lang/rust/commit/7467b83377e47a5f99b68737e5855ec4db1501e2"}], "stats": {"total": 150, "additions": 150, "deletions": 0}, "files": [{"sha": "7af39eda8ec10291c0e03feb8fcfe54030687c9e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c6064130bdc7093a7c944eee7381e980d505524/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3c6064130bdc7093a7c944eee7381e980d505524/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3c6064130bdc7093a7c944eee7381e980d505524", "patch": "@@ -583,6 +583,7 @@ All notable changes to this project will be documented in this file.\n [`ineffective_bit_mask`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n [`infinite_iter`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#infinite_iter\n [`inline_always`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#inline_always\n+[`inline_fn_without_body`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#inline_fn_without_body\n [`int_plus_one`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#int_plus_one\n [`integer_arithmetic`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#integer_arithmetic\n [`invalid_ref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#invalid_ref"}, {"sha": "1bb9519d304c33fbe626a352933fb56f34c7f31b", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/3c6064130bdc7093a7c944eee7381e980d505524/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6064130bdc7093a7c944eee7381e980d505524/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=3c6064130bdc7093a7c944eee7381e980d505524", "patch": "@@ -0,0 +1,65 @@\n+//! checks for `#[inline]` on trait methods without bodies\n+\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use syntax::ast::{Attribute, Name};\n+use utils::span_lint_and_then;\n+use utils::sugg::DiagnosticBuilderExt;\n+\n+/// **What it does:** Checks for `#[inline]` on trait methods without bodies\n+///\n+/// **Why is this bad?** Only implementations of trait methods may be inlined.\n+/// The inline attribute is ignored for trait methods without bodies.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// trait Animal {\n+///     #[inline]\n+///     fn name(&self) -> &'static str;\n+/// }\n+/// ```\n+declare_lint! {\n+    pub INLINE_FN_WITHOUT_BODY,\n+    Warn,\n+    \"use of `#[inline]` on trait methods without bodies\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INLINE_FN_WITHOUT_BODY)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+        match item.node {\n+            TraitItemKind::Method(_, TraitMethod::Required(_)) => {\n+                check_attrs(cx, &item.name, &item.attrs);\n+            },\n+            _ => {},\n+        }\n+    }\n+}\n+\n+fn check_attrs(cx: &LateContext, name: &Name, attrs: &[Attribute]) {\n+    for attr in attrs {\n+        if attr.name().map_or(true, |n| n != \"inline\") {\n+            continue;\n+        }\n+\n+        span_lint_and_then(\n+            cx,\n+            INLINE_FN_WITHOUT_BODY,\n+            attr.span,\n+            &format!(\"use of `#[inline]` on trait method `{}` which has no body\", name),\n+            |db| {\n+                db.suggest_remove_item(cx, attr.span, \"remove\");\n+            },\n+        );\n+    }\n+}"}, {"sha": "ee59745353b8095bcb7914684d09c2ff925ddd64", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c6064130bdc7093a7c944eee7381e980d505524/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6064130bdc7093a7c944eee7381e980d505524/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3c6064130bdc7093a7c944eee7381e980d505524", "patch": "@@ -109,6 +109,7 @@ pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod infinite_iter;\n+pub mod inline_fn_without_body;\n pub mod int_plus_one;\n pub mod invalid_ref;\n pub mod items_after_statements;\n@@ -361,6 +362,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::Pass);\n+    reg.register_late_lint_pass(box inline_fn_without_body::Pass);\n     reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n     reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n@@ -480,6 +482,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         identity_op::IDENTITY_OP,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         infinite_iter::INFINITE_ITER,\n+        inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n         invalid_ref::INVALID_REF,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         len_zero::LEN_WITHOUT_IS_EMPTY,"}, {"sha": "2f651917bc157c128ffe292f5646985d296b7ab1", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3c6064130bdc7093a7c944eee7381e980d505524/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6064130bdc7093a7c944eee7381e980d505524/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=3c6064130bdc7093a7c944eee7381e980d505524", "patch": "@@ -15,6 +15,7 @@ use syntax::print::pprust::token_to_string;\n use syntax::util::parser::AssocOp;\n use syntax::ast;\n use utils::{higher, snippet, snippet_opt};\n+use syntax_pos::{BytePos, Pos};\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -454,6 +455,19 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     /// }\");\n     /// ```\n     fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str);\n+\n+    /// Suggest to completely remove an item.\n+    ///\n+    /// This will remove an item and all following whitespace until the next non-whitespace\n+    /// character. This should work correctly if item is on the same indentation level as the\n+    /// following item.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust,ignore\n+    /// db.suggest_remove_item(cx, item, \"remove this\")\n+    /// ```\n+    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str);\n }\n \n impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_errors::DiagnosticBuilder<'b> {\n@@ -485,4 +499,21 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n             self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent));\n         }\n     }\n+\n+    fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str) {\n+        let mut remove_span = item;\n+        let fmpos = cx.sess()\n+            .codemap()\n+            .lookup_byte_offset(remove_span.next_point().hi());\n+\n+        if let Some(ref src) = fmpos.fm.src {\n+            let non_whitespace_offset = src[fmpos.pos.to_usize()..].find(|c| c != ' ' && c != '\\t' && c != '\\n');\n+\n+            if let Some(non_whitespace_offset) = non_whitespace_offset {\n+                remove_span = remove_span.with_hi(remove_span.hi() + BytePos(non_whitespace_offset as u32))\n+            }\n+        }\n+\n+        self.span_suggestion(remove_span, msg, String::new());\n+    }\n }"}, {"sha": "c5f9f914d330b3c6b79f628870eb5a91bc944bcb", "filename": "main", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3c6064130bdc7093a7c944eee7381e980d505524/main", "raw_url": "https://github.com/rust-lang/rust/raw/3c6064130bdc7093a7c944eee7381e980d505524/main", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/main?ref=3c6064130bdc7093a7c944eee7381e980d505524"}, {"sha": "82e073184d3541f222488cdfba405f9710e9abde", "filename": "tests/ui/inline_fn_without_body.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3c6064130bdc7093a7c944eee7381e980d505524/tests%2Fui%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6064130bdc7093a7c944eee7381e980d505524/tests%2Fui%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.rs?ref=3c6064130bdc7093a7c944eee7381e980d505524", "patch": "@@ -0,0 +1,23 @@\n+\n+\n+\n+#![warn(inline_fn_without_body)]\n+#![allow(inline_always)]\n+\n+trait Foo {\n+    #[inline]\n+    fn default_inline();\n+\n+    #[inline(always)]fn always_inline();\n+\n+    #[inline(never)]\n+\n+    fn never_inline();\n+\n+    #[inline]\n+    fn has_body() {\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "fd26013d11ea9049820d893cd1b4f77810a80fa2", "filename": "tests/ui/inline_fn_without_body.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3c6064130bdc7093a7c944eee7381e980d505524/tests%2Fui%2Finline_fn_without_body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c6064130bdc7093a7c944eee7381e980d505524/tests%2Fui%2Finline_fn_without_body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.stderr?ref=3c6064130bdc7093a7c944eee7381e980d505524", "patch": "@@ -0,0 +1,27 @@\n+error: use of `#[inline]` on trait method `default_inline` which has no body\n+ --> $DIR/inline_fn_without_body.rs:8:5\n+  |\n+8 |       #[inline]\n+  |  _____-^^^^^^^^\n+9 | |     fn default_inline();\n+  | |____- help: remove\n+  |\n+  = note: `-D inline-fn-without-body` implied by `-D warnings`\n+\n+error: use of `#[inline]` on trait method `always_inline` which has no body\n+  --> $DIR/inline_fn_without_body.rs:11:5\n+   |\n+11 |     #[inline(always)]fn always_inline();\n+   |     ^^^^^^^^^^^^^^^^^ help: remove\n+\n+error: use of `#[inline]` on trait method `never_inline` which has no body\n+  --> $DIR/inline_fn_without_body.rs:13:5\n+   |\n+13 |       #[inline(never)]\n+   |  _____-^^^^^^^^^^^^^^^\n+14 | |\n+15 | |     fn never_inline();\n+   | |____- help: remove\n+\n+error: aborting due to 3 previous errors\n+"}]}