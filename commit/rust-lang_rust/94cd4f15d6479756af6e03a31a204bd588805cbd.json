{"sha": "94cd4f15d6479756af6e03a31a204bd588805cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0Y2Q0ZjE1ZDY0Nzk3NTZhZjZlMDNhMzFhMjA0YmQ1ODg4MDVjYmQ=", "commit": {"author": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2020-06-25T15:05:12Z"}, "committer": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2020-07-02T07:32:03Z"}, "message": "Use WASM's saturating casts if they are available\n\nWebAssembly supports saturating floating point to integer casts behind a\ntarget feature. The feature is already available on many browsers.\nBeginning with 1.45 Rust will start defining the behavior of floating\npoint to integer casts to be saturating as well. For this Rust\nconstructs additional checks on top of the `fptoui` / `fptosi`\ninstructions it emits. Here we introduce the possibility for the codegen\nbackend to construct saturating casts itself and only fall back to\nconstructing the checks ourselves if that is not possible.", "tree": {"sha": "d5265786cf5d4b4cae23f24ac84fea1981009d76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5265786cf5d4b4cae23f24ac84fea1981009d76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94cd4f15d6479756af6e03a31a204bd588805cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94cd4f15d6479756af6e03a31a204bd588805cbd", "html_url": "https://github.com/rust-lang/rust/commit/94cd4f15d6479756af6e03a31a204bd588805cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94cd4f15d6479756af6e03a31a204bd588805cbd/comments", "author": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c", "html_url": "https://github.com/rust-lang/rust/commit/9491f18c5de3ff1c4bf9c3fdacf52d9859e26f7c"}], "stats": {"total": 79, "additions": 74, "deletions": 5}, "files": [{"sha": "a6b55fee8702673ec4bdc81fd82c31c9e4f40313", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=94cd4f15d6479756af6e03a31a204bd588805cbd", "patch": "@@ -652,6 +652,56 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMBuildSExt(self.llbuilder, val, dest_ty, UNNAMED) }\n     }\n \n+    fn fptoui_sat(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> Option<&'ll Value> {\n+        if self.sess().target.target.arch == \"wasm32\"\n+            && self\n+                .sess()\n+                .target_features\n+                .contains(&rustc_span::symbol::Symbol::intern(\"nontrapping-fptoint\"))\n+        {\n+            let src_ty = self.cx.val_ty(val);\n+            let float_width = self.cx.float_width(src_ty);\n+            let int_width = self.cx.int_width(dest_ty);\n+            let name = match (int_width, float_width) {\n+                (32, 32) => Some(\"llvm.wasm.trunc.saturate.unsigned.i32.f32\"),\n+                (32, 64) => Some(\"llvm.wasm.trunc.saturate.unsigned.i32.f64\"),\n+                (64, 32) => Some(\"llvm.wasm.trunc.saturate.unsigned.i64.f32\"),\n+                (64, 64) => Some(\"llvm.wasm.trunc.saturate.unsigned.i64.f64\"),\n+                _ => None,\n+            };\n+            if let Some(name) = name {\n+                let intrinsic = self.get_intrinsic(name);\n+                return Some(self.call(intrinsic, &[val], None));\n+            }\n+        }\n+        None\n+    }\n+\n+    fn fptosi_sat(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> Option<&'ll Value> {\n+        if self.sess().target.target.arch == \"wasm32\"\n+            && self\n+                .sess()\n+                .target_features\n+                .contains(&rustc_span::symbol::Symbol::intern(\"nontrapping-fptoint\"))\n+        {\n+            let src_ty = self.cx.val_ty(val);\n+            let float_width = self.cx.float_width(src_ty);\n+            let int_width = self.cx.int_width(dest_ty);\n+            let name = match (int_width, float_width) {\n+                (32, 32) => Some(\"llvm.wasm.trunc.saturate.signed.i32.f32\"),\n+                (32, 64) => Some(\"llvm.wasm.trunc.saturate.signed.i32.f64\"),\n+                (64, 32) => Some(\"llvm.wasm.trunc.saturate.signed.i64.f32\"),\n+                (64, 64) => Some(\"llvm.wasm.trunc.saturate.signed.i64.f64\"),\n+                _ => None,\n+            };\n+            if let Some(name) = name {\n+                let intrinsic = self.get_intrinsic(name);\n+                return Some(self.call(intrinsic, &[val], None));\n+            }\n+        }\n+        None\n+    }\n+\n     fn fptoui(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value {\n         unsafe { llvm::LLVMBuildFPToUI(self.llbuilder, val, dest_ty, UNNAMED) }\n     }"}, {"sha": "896d3c1de62d557ab4fad90b3bd2fa7c1269a230", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=94cd4f15d6479756af6e03a31a204bd588805cbd", "patch": "@@ -482,6 +482,15 @@ impl CodegenCx<'b, 'tcx> {\n             t_v8f64: t_f64, 8;\n         }\n \n+        ifn!(\"llvm.wasm.trunc.saturate.unsigned.i32.f32\", fn(t_f32) -> t_i32);\n+        ifn!(\"llvm.wasm.trunc.saturate.unsigned.i32.f64\", fn(t_f64) -> t_i32);\n+        ifn!(\"llvm.wasm.trunc.saturate.unsigned.i64.f32\", fn(t_f32) -> t_i64);\n+        ifn!(\"llvm.wasm.trunc.saturate.unsigned.i64.f64\", fn(t_f64) -> t_i64);\n+        ifn!(\"llvm.wasm.trunc.saturate.signed.i32.f32\", fn(t_f32) -> t_i32);\n+        ifn!(\"llvm.wasm.trunc.saturate.signed.i32.f64\", fn(t_f64) -> t_i32);\n+        ifn!(\"llvm.wasm.trunc.saturate.signed.i64.f32\", fn(t_f32) -> t_i64);\n+        ifn!(\"llvm.wasm.trunc.saturate.signed.i64.f64\", fn(t_f64) -> t_i64);\n+\n         ifn!(\"llvm.trap\", fn() -> void);\n         ifn!(\"llvm.debugtrap\", fn() -> void);\n         ifn!(\"llvm.frameaddress\", fn(t_i32) -> i8p);"}, {"sha": "5ec93b0d4032daaf11bbfca592dcb4a7f77e7fb3", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=94cd4f15d6479756af6e03a31a204bd588805cbd", "patch": "@@ -250,8 +250,11 @@ const RISCV_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"e\", Some(sym::riscv_target_feature)),\n ];\n \n-const WASM_WHITELIST: &[(&str, Option<Symbol>)] =\n-    &[(\"simd128\", Some(sym::wasm_target_feature)), (\"atomics\", Some(sym::wasm_target_feature))];\n+const WASM_WHITELIST: &[(&str, Option<Symbol>)] = &[\n+    (\"simd128\", Some(sym::wasm_target_feature)),\n+    (\"atomics\", Some(sym::wasm_target_feature)),\n+    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)), // TODO: Maybe None?\n+];\n \n /// When rustdoc is running, provide a list of all known features so that all their respective\n /// primitives may be documented."}, {"sha": "4b2be7b5321ff8aec4cc808b133461cd6c3f88c9", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=94cd4f15d6479756af6e03a31a204bd588805cbd", "patch": "@@ -774,12 +774,17 @@ fn cast_float_to_int<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     float_ty: Bx::Type,\n     int_ty: Bx::Type,\n ) -> Bx::Value {\n-    let fptosui_result = if signed { bx.fptosi(x, int_ty) } else { bx.fptoui(x, int_ty) };\n-\n     if let Some(false) = bx.cx().sess().opts.debugging_opts.saturating_float_casts {\n-        return fptosui_result;\n+        return if signed { bx.fptosi(x, int_ty) } else { bx.fptoui(x, int_ty) };\n+    }\n+\n+    let try_sat_result = if signed { bx.fptosi_sat(x, int_ty) } else { bx.fptoui_sat(x, int_ty) };\n+    if let Some(try_sat_result) = try_sat_result {\n+        return try_sat_result;\n     }\n \n+    let fptosui_result = if signed { bx.fptosi(x, int_ty) } else { bx.fptoui(x, int_ty) };\n+\n     let int_width = bx.cx().int_width(int_ty);\n     let float_width = bx.cx().float_width(float_ty);\n     // LLVM's fpto[su]i returns undef when the input x is infinite, NaN, or does not fit into the"}, {"sha": "d33d6857bc0effad6e68bef99f65b05377376cb1", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94cd4f15d6479756af6e03a31a204bd588805cbd/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=94cd4f15d6479756af6e03a31a204bd588805cbd", "patch": "@@ -156,6 +156,8 @@ pub trait BuilderMethods<'a, 'tcx>:\n \n     fn trunc(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n     fn sext(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n+    fn fptoui_sat(&mut self, val: Self::Value, dest_ty: Self::Type) -> Option<Self::Value>;\n+    fn fptosi_sat(&mut self, val: Self::Value, dest_ty: Self::Type) -> Option<Self::Value>;\n     fn fptoui(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n     fn fptosi(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n     fn uitofp(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;"}]}