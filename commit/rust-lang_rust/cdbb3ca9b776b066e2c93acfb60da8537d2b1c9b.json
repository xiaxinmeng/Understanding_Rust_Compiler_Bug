{"sha": "cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYmIzY2E5Yjc3NmIwNjZlMmM5M2FjZmI2MGRhODUzN2QyYjFjOWI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T19:15:25Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:47Z"}, "message": "libstd: use unboxed closures", "tree": {"sha": "18a305205c51df4501a5e5e73c4b275242fb5a25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a305205c51df4501a5e5e73c4b275242fb5a25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "html_url": "https://github.com/rust-lang/rust/commit/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/comments", "author": null, "committer": null, "parents": [{"sha": "be53d619f874cbe8e4d87f900060561d16405d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/be53d619f874cbe8e4d87f900060561d16405d53", "html_url": "https://github.com/rust-lang/rust/commit/be53d619f874cbe8e4d87f900060561d16405d53"}], "stats": {"total": 266, "additions": 171, "deletions": 95}, "files": [{"sha": "ad2167214a7d413c8e688fb70f78e47954b46250", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -20,6 +20,7 @@ use fmt;\n use iter::IteratorExt;\n use kinds::Copy;\n use mem;\n+use ops::FnMut;\n use option::Option;\n use option::Option::{Some, None};\n use slice::{SlicePrelude, AsSlice};\n@@ -527,7 +528,9 @@ impl OwnedAsciiExt for Vec<u8> {\n /// - Any other chars are given hex escapes.\n /// - Unicode escapes are never generated by this function.\n #[unstable = \"needs to be updated to use an iterator\"]\n-pub fn escape_default(c: u8, f: |u8|) {\n+pub fn escape_default<F>(c: u8, mut f: F) where\n+    F: FnMut(u8),\n+{\n     match c {\n         b'\\t' => { f(b'\\\\'); f(b't'); }\n         b'\\r' => { f(b'\\\\'); f(b'r'); }"}, {"sha": "2a8d97eed05bced13bee11796db34d89d8677858", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -24,7 +24,7 @@ use iter::{mod, Iterator, IteratorExt, FromIterator, Extend};\n use kinds::Sized;\n use mem::{mod, replace};\n use num::{Int, UnsignedInt};\n-use ops::{Deref, Index, IndexMut};\n+use ops::{Deref, FnMut, Index, IndexMut};\n use option::Option;\n use option::Option::{Some, None};\n use result::Result;\n@@ -296,10 +296,13 @@ pub struct HashMap<K, V, H = RandomSipHasher> {\n }\n \n /// Search for a pre-hashed key.\n-fn search_hashed<K, V, M: Deref<RawTable<K, V>>>(table: M,\n-                                                 hash: &SafeHash,\n-                                                 is_match: |&K| -> bool)\n-                                                 -> SearchResult<K, V, M> {\n+fn search_hashed<K, V, M, F>(table: M,\n+                             hash: &SafeHash,\n+                             mut is_match: F)\n+                             -> SearchResult<K, V, M> where\n+    M: Deref<RawTable<K, V>>,\n+    F: FnMut(&K) -> bool,\n+{\n     let size = table.size();\n     let mut probe = Bucket::new(table, hash);\n     let ib = probe.index();\n@@ -749,12 +752,14 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n         self.insert_or_replace_with(hash, k, v, |_, _, _| ())\n     }\n \n-    fn insert_or_replace_with<'a>(&'a mut self,\n-                                  hash: SafeHash,\n-                                  k: K,\n-                                  v: V,\n-                                  found_existing: |&mut K, &mut V, V|)\n-                                  -> &'a mut V {\n+    fn insert_or_replace_with<'a, F>(&'a mut self,\n+                                     hash: SafeHash,\n+                                     k: K,\n+                                     v: V,\n+                                     mut found_existing: F)\n+                                     -> &'a mut V where\n+        F: FnMut(&mut K, &mut V, V),\n+    {\n         // Worst case, we'll find one empty bucket among `size + 1` buckets.\n         let size = self.table.size();\n         let mut probe = Bucket::new(&mut self.table, &hash);"}, {"sha": "ebb2a491b4ace2dcdf51440611f28f6383755561", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -216,6 +216,7 @@ pub mod dl {\n     use c_str::{CString, ToCStr};\n     use libc;\n     use kinds::Copy;\n+    use ops::FnOnce;\n     use ptr;\n     use result::*;\n     use result::Result::{Err, Ok};\n@@ -231,7 +232,9 @@ pub mod dl {\n         dlopen(ptr::null(), Lazy as libc::c_int) as *mut u8\n     }\n \n-    pub fn check_for_errors_in<T>(f: || -> T) -> Result<T, String> {\n+    pub fn check_for_errors_in<T, F>(f: F) -> Result<T, String> where\n+        F: FnOnce() -> T,\n+    {\n         use sync::{StaticMutex, MUTEX_INIT};\n         static LOCK: StaticMutex = MUTEX_INIT;\n         unsafe {\n@@ -312,7 +315,9 @@ pub mod dl {\n         handle as *mut u8\n     }\n \n-    pub fn check_for_errors_in<T>(f: || -> T) -> Result<T, String> {\n+    pub fn check_for_errors_in<T, F>(f: F) -> Result<T, String> where\n+        F: FnOnce() -> T,\n+    {\n         unsafe {\n             SetLastError(0);\n "}, {"sha": "69712e39d910851830a5507596f1e7663e5c3950", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -19,6 +19,7 @@ use io::{IoError, IoResult, Reader};\n use io;\n use iter::Iterator;\n use num::Int;\n+use ops::FnOnce;\n use option::Option;\n use option::Option::{Some, None};\n use ptr::RawPtr;\n@@ -76,7 +77,9 @@ impl<'r, R: Reader> Iterator<IoResult<u8>> for Bytes<'r, R> {\n /// * `f`: A callback that receives the value.\n ///\n /// This function returns the value returned by the callback, for convenience.\n-pub fn u64_to_le_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n+pub fn u64_to_le_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n+    F: FnOnce(&[u8]) -> T,\n+{\n     use mem::transmute;\n \n     // LLVM fails to properly optimize this when using shifts instead of the to_le* intrinsics\n@@ -115,7 +118,9 @@ pub fn u64_to_le_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n /// * `f`: A callback that receives the value.\n ///\n /// This function returns the value returned by the callback, for convenience.\n-pub fn u64_to_be_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n+pub fn u64_to_be_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n+    F: FnOnce(&[u8]) -> T,\n+{\n     use mem::transmute;\n \n     // LLVM fails to properly optimize this when using shifts instead of the to_be* intrinsics"}, {"sha": "bad86258bb85db44d2702a13716a30b7f7582f91", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -233,7 +233,7 @@ use int;\n use iter::{Iterator, IteratorExt};\n use kinds::Copy;\n use mem::transmute;\n-use ops::{BitOr, BitXor, BitAnd, Sub, Not};\n+use ops::{BitOr, BitXor, BitAnd, Sub, Not, FnOnce};\n use option::Option;\n use option::Option::{Some, None};\n use os;\n@@ -426,27 +426,33 @@ impl Copy for IoErrorKind {}\n /// A trait that lets you add a `detail` to an IoError easily\n trait UpdateIoError<T> {\n     /// Returns an IoError with updated description and detail\n-    fn update_err(self, desc: &'static str, detail: |&IoError| -> String) -> Self;\n+    fn update_err<D>(self, desc: &'static str, detail: D) -> Self where\n+        D: FnOnce(&IoError) -> String;\n \n     /// Returns an IoError with updated detail\n-    fn update_detail(self, detail: |&IoError| -> String) -> Self;\n+    fn update_detail<D>(self, detail: D) -> Self where\n+        D: FnOnce(&IoError) -> String;\n \n     /// Returns an IoError with update description\n     fn update_desc(self, desc: &'static str) -> Self;\n }\n \n impl<T> UpdateIoError<T> for IoResult<T> {\n-    fn update_err(self, desc: &'static str, detail: |&IoError| -> String) -> IoResult<T> {\n-        self.map_err(|mut e| {\n+    fn update_err<D>(self, desc: &'static str, detail: D) -> IoResult<T> where\n+        D: FnOnce(&IoError) -> String,\n+    {\n+        self.map_err(move |mut e| {\n             let detail = detail(&e);\n             e.desc = desc;\n             e.detail = Some(detail);\n             e\n         })\n     }\n \n-    fn update_detail(self, detail: |&IoError| -> String) -> IoResult<T> {\n-        self.map_err(|mut e| { e.detail = Some(detail(&e)); e })\n+    fn update_detail<D>(self, detail: D) -> IoResult<T> where\n+        D: FnOnce(&IoError) -> String,\n+    {\n+        self.map_err(move |mut e| { e.detail = Some(detail(&e)); e })\n     }\n \n     fn update_desc(self, desc: &'static str) -> IoResult<T> {"}, {"sha": "62965c48a2680cffa18ac51025ef516b0af72944", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -22,6 +22,7 @@ use kinds::Copy;\n use io::{mod, IoResult, IoError};\n use io::net;\n use iter::{Iterator, IteratorExt};\n+use ops::FnOnce;\n use option::Option;\n use option::Option::{None, Some};\n use result::Result::{Ok, Err};\n@@ -100,8 +101,9 @@ impl<'a> Parser<'a> {\n     }\n \n     // Commit only if parser returns Some\n-    fn read_atomically<T>(&mut self, cb: |&mut Parser| -> Option<T>)\n-                       -> Option<T> {\n+    fn read_atomically<T, F>(&mut self, cb: F) -> Option<T> where\n+        F: FnOnce(&mut Parser) -> Option<T>,\n+    {\n         let pos = self.pos;\n         let r = cb(self);\n         if r.is_none() {\n@@ -111,9 +113,10 @@ impl<'a> Parser<'a> {\n     }\n \n     // Commit only if parser read till EOF\n-    fn read_till_eof<T>(&mut self, cb: |&mut Parser| -> Option<T>)\n-                     -> Option<T> {\n-        self.read_atomically(|p| {\n+    fn read_till_eof<T, F>(&mut self, cb: F) -> Option<T> where\n+        F: FnOnce(&mut Parser) -> Option<T>,\n+    {\n+        self.read_atomically(move |p| {\n             match cb(p) {\n                 Some(x) => if p.is_eof() {Some(x)} else {None},\n                 None => None,\n@@ -134,15 +137,16 @@ impl<'a> Parser<'a> {\n     }\n \n     // Apply 3 parsers sequentially\n-    fn read_seq_3<A,\n-                  B,\n-                  C>(\n-                  &mut self,\n-                  pa: |&mut Parser| -> Option<A>,\n-                  pb: |&mut Parser| -> Option<B>,\n-                  pc: |&mut Parser| -> Option<C>)\n-                  -> Option<(A, B, C)> {\n-        self.read_atomically(|p| {\n+    fn read_seq_3<A, B, C, PA, PB, PC>(&mut self,\n+                                       pa: PA,\n+                                       pb: PB,\n+                                       pc: PC)\n+                                       -> Option<(A, B, C)> where\n+        PA: FnOnce(&mut Parser) -> Option<A>,\n+        PB: FnOnce(&mut Parser) -> Option<B>,\n+        PC: FnOnce(&mut Parser) -> Option<C>,\n+    {\n+        self.read_atomically(move |p| {\n             let a = pa(p);\n             let b = if a.is_some() { pb(p) } else { None };\n             let c = if b.is_some() { pc(p) } else { None };\n@@ -327,22 +331,22 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_socket_addr(&mut self) -> Option<SocketAddr> {\n-        let ip_addr = |p: &mut Parser| {\n+        let ip_addr = |&: p: &mut Parser| {\n             let ipv4_p = |p: &mut Parser| p.read_ip_addr();\n             let ipv6_p = |p: &mut Parser| {\n-                let open_br = |p: &mut Parser| p.read_given_char('[');\n-                let ip_addr = |p: &mut Parser| p.read_ipv6_addr();\n-                let clos_br = |p: &mut Parser| p.read_given_char(']');\n-                p.read_seq_3::<char, IpAddr, char>(open_br, ip_addr, clos_br)\n+                let open_br = |&: p: &mut Parser| p.read_given_char('[');\n+                let ip_addr = |&: p: &mut Parser| p.read_ipv6_addr();\n+                let clos_br = |&: p: &mut Parser| p.read_given_char(']');\n+                p.read_seq_3::<char, IpAddr, char, _, _, _>(open_br, ip_addr, clos_br)\n                         .map(|t| match t { (_, ip, _) => ip })\n             };\n             p.read_or(&mut [ipv4_p, ipv6_p])\n         };\n-        let colon = |p: &mut Parser| p.read_given_char(':');\n-        let port  = |p: &mut Parser| p.read_number(10, 5, 0x10000).map(|n| n as u16);\n+        let colon = |&: p: &mut Parser| p.read_given_char(':');\n+        let port  = |&: p: &mut Parser| p.read_number(10, 5, 0x10000).map(|n| n as u16);\n \n         // host, colon, port\n-        self.read_seq_3::<IpAddr, char, u16>(ip_addr, colon, port)\n+        self.read_seq_3::<IpAddr, char, u16, _, _, _>(ip_addr, colon, port)\n                 .map(|t| match t { (ip, _, port) => SocketAddr { ip: ip, port: port } })\n     }\n }"}, {"sha": "2056933e6df6f1ba01a9881898b379b9e481d497", "filename": "src/libstd/io/net/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fmod.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -11,6 +11,7 @@\n //! Networking I/O\n \n use io::{IoError, IoResult, InvalidInput};\n+use ops::FnMut;\n use option::Option::None;\n use result::Result::{Ok, Err};\n use self::ip::{SocketAddr, ToSocketAddr};\n@@ -23,8 +24,10 @@ pub mod udp;\n pub mod ip;\n pub mod pipe;\n \n-fn with_addresses<A: ToSocketAddr, T>(addr: A, action: |SocketAddr| -> IoResult<T>)\n-    -> IoResult<T> {\n+fn with_addresses<A, T, F>(addr: A, mut action: F) -> IoResult<T> where\n+    A: ToSocketAddr,\n+    F: FnMut(SocketAddr) -> IoResult<T>,\n+{\n     const DEFAULT_ERROR: IoError = IoError {\n         kind: InvalidInput,\n         desc: \"no addresses found for hostname\","}, {"sha": "b23921ba3594d7382a86e801a1ea545af918de6d", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -18,6 +18,7 @@\n use clone::Clone;\n use io::net::ip::{SocketAddr, IpAddr, ToSocketAddr};\n use io::{Reader, Writer, IoResult};\n+use ops::FnOnce;\n use option::Option;\n use result::Result::{Ok, Err};\n use sys::udp::UdpSocket as UdpSocketImp;\n@@ -210,7 +211,9 @@ impl UdpStream {\n     /// Allows access to the underlying UDP socket owned by this stream. This\n     /// is useful to, for example, use the socket to send data to hosts other\n     /// than the one that this stream is connected to.\n-    pub fn as_socket<T>(&mut self, f: |&mut UdpSocket| -> T) -> T {\n+    pub fn as_socket<T, F>(&mut self, f: F) -> T where\n+        F: FnOnce(&mut UdpSocket) -> T,\n+    {\n         f(&mut self.socket)\n     }\n "}, {"sha": "8438c9fb441ed7476f5ac701a9a0a6062bc4274d", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -39,7 +39,7 @@ use libc;\n use mem;\n use option::Option;\n use option::Option::{Some, None};\n-use ops::{Deref, DerefMut};\n+use ops::{Deref, DerefMut, FnOnce};\n use result::Result::{Ok, Err};\n use rustrt;\n use rustrt::local::Local;\n@@ -85,7 +85,9 @@ enum StdSource {\n     File(fs::FileDesc),\n }\n \n-fn src<T>(fd: libc::c_int, _readable: bool, f: |StdSource| -> T) -> T {\n+fn src<T, F>(fd: libc::c_int, _readable: bool, f: F) -> T where\n+    F: FnOnce(StdSource) -> T,\n+{\n     match tty::TTY::new(fd) {\n         Ok(tty) => f(TTY(tty)),\n         Err(_) => f(File(fs::FileDesc::new(fd, false))),\n@@ -318,7 +320,9 @@ pub fn set_stderr(stderr: Box<Writer + Send>) -> Option<Box<Writer + Send>> {\n //          // io1 aliases io2\n //      })\n //  })\n-fn with_task_stdout(f: |&mut Writer| -> IoResult<()>) {\n+fn with_task_stdout<F>(f: F) where\n+    F: FnOnce(&mut Writer) -> IoResult<()>,\n+{\n     let result = if Local::exists(None::<Task>) {\n         let mut my_stdout = LOCAL_STDOUT.with(|slot| {\n             slot.borrow_mut().take()"}, {"sha": "d5c27c7fbf82af8f7a6ff5dfa9247f6e2e827476", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -21,6 +21,7 @@ use char::Char;\n use kinds::Copy;\n use num;\n use num::{Int, Float, FPNaN, FPInfinite, ToPrimitive};\n+use ops::FnMut;\n use slice::{SlicePrelude, CloneSliceAllocPrelude};\n use str::StrPrelude;\n use string::String;\n@@ -93,7 +94,10 @@ impl Copy for SignFormat {}\n /// # Panics\n ///\n /// - Panics if `radix` < 2 or `radix` > 36.\n-fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f: |u8|) {\n+fn int_to_str_bytes_common<T, F>(num: T, radix: uint, sign: SignFormat, mut f: F) where\n+    T: Int,\n+    F: FnMut(u8),\n+{\n     assert!(2 <= radix && radix <= 36);\n \n     let _0: T = Int::zero();"}, {"sha": "6d9b177574afc1d8ee49e94fba290f14d3ca956d", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -15,4 +15,6 @@\n \n pub use core::u16::{BITS, BYTES, MIN, MAX};\n \n+use ops::FnOnce;\n+\n uint_module!(u16)"}, {"sha": "0d6d17fa007bf5eb46a02c419ce4b704720520df", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -15,4 +15,6 @@\n \n pub use core::u32::{BITS, BYTES, MIN, MAX};\n \n+use ops::FnOnce;\n+\n uint_module!(u32)"}, {"sha": "ebb5d2946c5314dfc09e410d8fe229705e11c460", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -15,4 +15,6 @@\n \n pub use core::u64::{BITS, BYTES, MIN, MAX};\n \n+use ops::FnOnce;\n+\n uint_module!(u64)"}, {"sha": "59aea214aae0ccdad679ecfba6da6d81b56892e4", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -15,4 +15,6 @@\n \n pub use core::u8::{BITS, BYTES, MIN, MAX};\n \n+use ops::FnOnce;\n+\n uint_module!(u8)"}, {"sha": "484d28dfed05813089edd7a66c15896744d5a66b", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -15,4 +15,6 @@\n \n pub use core::uint::{BITS, BYTES, MIN, MAX};\n \n+use ops::FnOnce;\n+\n uint_module!(uint)"}, {"sha": "bd6f3d4bb286bff2b8058985ba673b9a4cda7450", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -32,7 +32,9 @@ macro_rules! uint_module (($T:ty) => (\n /// ```\n #[inline]\n #[deprecated = \"just use .to_string(), or a BufWriter with write! if you mustn't allocate\"]\n-pub fn to_str_bytes<U>(n: $T, radix: uint, f: |v: &[u8]| -> U) -> U {\n+pub fn to_str_bytes<U, F>(n: $T, radix: uint, f: F) -> U where\n+    F: FnOnce(&[u8]) -> U,\n+{\n     use io::{Writer, Seek};\n     // The radix can be as low as 2, so we need at least 64 characters for a\n     // base 2 number, and then we need another for a possible '-' character."}, {"sha": "38411fd6254da9e57dc10a509272d177f40c9389", "filename": "src/libstd/os.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -40,7 +40,7 @@ use kinds::Copy;\n use libc::{c_void, c_int};\n use libc;\n use boxed::Box;\n-use ops::Drop;\n+use ops::{Drop, FnOnce};\n use option::Option;\n use option::Option::{Some, None};\n use os;\n@@ -172,8 +172,9 @@ pub mod windoze {\n     use str::StrPrelude;\n     use vec::Vec;\n \n-    pub fn fill_utf16_buf_and_decode(f: |*mut u16, DWORD| -> DWORD)\n-        -> Option<String> {\n+    pub fn fill_utf16_buf_and_decode<F>(mut f: F) -> Option<String> where\n+        F: FnMut(*mut u16, DWORD) -> DWORD,\n+    {\n \n         unsafe {\n             let mut n = TMPBUF_SZ as DWORD;\n@@ -212,7 +213,9 @@ pub mod windoze {\n Accessing environment variables is not generally threadsafe.\n Serialize access through a global lock.\n */\n-fn with_env_lock<T>(f: || -> T) -> T {\n+fn with_env_lock<T, F>(f: F) -> T where\n+    F: FnOnce() -> T,\n+{\n     use sync::{StaticMutex, MUTEX_INIT};\n \n     static LOCK: StaticMutex = MUTEX_INIT;"}, {"sha": "1bcdc760fc6803ccd8869a7986f6c7fde59455e9", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -15,6 +15,7 @@\n \n use int;\n use mem::drop;\n+use ops::FnOnce;\n use sync::atomic;\n use sync::{StaticMutex, MUTEX_INIT};\n \n@@ -57,7 +58,7 @@ impl Once {\n     ///\n     /// When this function returns, it is guaranteed that some initialization\n     /// has run and completed (it may not be the closure specified).\n-    pub fn doit(&'static self, f: ||) {\n+    pub fn doit<F>(&'static self, f: F) where F: FnOnce() {\n         // Optimize common path: load is much cheaper than fetch_add.\n         if self.cnt.load(atomic::SeqCst) < 0 {\n             return"}, {"sha": "6c5fc3005edd27b38ecad8b9e5dd387925512279", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -70,9 +70,10 @@ impl<M: Send> Helper<M> {\n     /// passed to the helper thread in a separate task.\n     ///\n     /// This function is safe to be called many times.\n-    pub fn boot<T: Send>(&'static self,\n-                         f: || -> T,\n-                         helper: fn(helper_signal::signal, Receiver<M>, T)) {\n+    pub fn boot<T, F>(&'static self, f: F, helper: fn(helper_signal::signal, Receiver<M>, T)) where\n+        T: Send,\n+        F: FnOnce() -> T,\n+    {\n         unsafe {\n             let _guard = self.lock.lock();\n             if !*self.initialized.get() {"}, {"sha": "73e1c7bd9e5e0e596505dad79445ef2ca3fee9f9", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -69,7 +69,9 @@ pub fn mkerr_libc<T: Int>(ret: T) -> IoResult<()> {\n     }\n }\n \n-pub fn keep_going(data: &[u8], f: |*const u8, uint| -> i64) -> i64 {\n+pub fn keep_going<F>(data: &[u8], mut f: F) -> i64 where\n+    F: FnMut(*const u8, uint) -> i64,\n+{\n     let origamt = data.len();\n     let mut data = data.as_ptr();\n     let mut amt = origamt;"}, {"sha": "73da200e1623828eec709345afb7bd4b48dfce80", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -344,10 +344,10 @@ pub fn get_host_addresses(host: Option<&str>, servname: Option<&str>,\n // [1] http://twistedmatrix.com/pipermail/twisted-commits/2012-April/034692.html\n // [2] http://stackoverflow.com/questions/19819198/does-send-msg-dontwait\n \n-pub fn read<T>(fd: sock_t,\n-               deadline: u64,\n-               lock: || -> T,\n-               read: |bool| -> libc::c_int) -> IoResult<uint> {\n+pub fn read<T, L, R>(fd: sock_t, deadline: u64, mut lock: L, mut read: R) -> IoResult<uint> where\n+    L: FnMut() -> T,\n+    R: FnMut(bool) -> libc::c_int,\n+{\n     let mut ret = -1;\n     if deadline == 0 {\n         ret = retry(|| read(false));\n@@ -386,12 +386,15 @@ pub fn read<T>(fd: sock_t,\n     }\n }\n \n-pub fn write<T>(fd: sock_t,\n-                deadline: u64,\n-                buf: &[u8],\n-                write_everything: bool,\n-                lock: || -> T,\n-                write: |bool, *const u8, uint| -> i64) -> IoResult<uint> {\n+pub fn write<T, L, W>(fd: sock_t,\n+                      deadline: u64,\n+                      buf: &[u8],\n+                      write_everything: bool,\n+                      mut lock: L,\n+                      mut write: W) -> IoResult<uint> where\n+    L: FnMut() -> T,\n+    W: FnMut(bool, *const u8, uint) -> i64,\n+{\n     let mut ret = -1;\n     let mut written = 0;\n     if deadline == 0 {\n@@ -674,8 +677,8 @@ impl TcpStream {\n \n     pub fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n         let fd = self.fd();\n-        let dolock = || self.lock_nonblocking();\n-        let doread = |nb| unsafe {\n+        let dolock = |&:| self.lock_nonblocking();\n+        let doread = |&mut: nb| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::recv(fd,\n                        buf.as_mut_ptr() as *mut libc::c_void,\n@@ -687,8 +690,8 @@ impl TcpStream {\n \n     pub fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         let fd = self.fd();\n-        let dolock = || self.lock_nonblocking();\n-        let dowrite = |nb: bool, buf: *const u8, len: uint| unsafe {\n+        let dolock = |&:| self.lock_nonblocking();\n+        let dowrite = |&: nb: bool, buf: *const u8, len: uint| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::send(fd,\n                        buf as *const _,\n@@ -822,7 +825,7 @@ impl UdpSocket {\n         let mut addrlen: libc::socklen_t =\n                 mem::size_of::<libc::sockaddr_storage>() as libc::socklen_t;\n \n-        let dolock = || self.lock_nonblocking();\n+        let dolock = |&:| self.lock_nonblocking();\n         let n = try!(read(fd, self.read_deadline, dolock, |nb| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::recvfrom(fd,\n@@ -843,8 +846,8 @@ impl UdpSocket {\n         let dstp = &storage as *const _ as *const libc::sockaddr;\n \n         let fd = self.fd();\n-        let dolock = || self.lock_nonblocking();\n-        let dowrite = |nb, buf: *const u8, len: uint| unsafe {\n+        let dolock = |&: | self.lock_nonblocking();\n+        let dowrite = |&mut: nb, buf: *const u8, len: uint| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::sendto(fd,\n                          buf as *const libc::c_void,"}, {"sha": "107263c31a7665585c69a399595fec295858ec82", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -125,7 +125,10 @@ pub fn decode_error_detailed(errno: i32) -> IoError {\n }\n \n #[inline]\n-pub fn retry<T: SignedInt> (f: || -> T) -> T {\n+pub fn retry<T, F> (mut f: F) -> T where\n+    T: SignedInt,\n+    F: FnMut() -> T,\n+{\n     let one: T = Int::one();\n     loop {\n         let n = f();"}, {"sha": "26fd410a7a9b61c19bb41426230d1e1bbbb12913", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -149,8 +149,8 @@ impl UnixStream {\n \n     pub fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n         let fd = self.fd();\n-        let dolock = || self.lock_nonblocking();\n-        let doread = |nb| unsafe {\n+        let dolock = |&:| self.lock_nonblocking();\n+        let doread = |&mut: nb| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::recv(fd,\n                        buf.as_mut_ptr() as *mut libc::c_void,\n@@ -162,8 +162,8 @@ impl UnixStream {\n \n     pub fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         let fd = self.fd();\n-        let dolock = || self.lock_nonblocking();\n-        let dowrite = |nb: bool, buf: *const u8, len: uint| unsafe {\n+        let dolock = |&: | self.lock_nonblocking();\n+        let dowrite = |&: nb: bool, buf: *const u8, len: uint| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::send(fd,\n                        buf as *const _,"}, {"sha": "41361a0cde695a5b9cf887125865a18ef69af3d5", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -138,7 +138,7 @@ pub fn decode_error_detailed(errno: i32) -> IoError {\n }\n \n #[inline]\n-pub fn retry<I> (f: || -> I) -> I { f() } // PR rust-lang/rust/#17020\n+pub fn retry<I, F>(f: F) -> I where F: FnOnce() -> I { f() } // PR rust-lang/rust/#17020\n \n pub fn ms_to_timeval(ms: u64) -> libc::timeval {\n     libc::timeval {"}, {"sha": "356d6f02565ede63f635d54b0f9f2e42c39ba831", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -418,9 +418,8 @@ fn make_command_line(prog: &CString, args: &[CString]) -> String {\n     }\n }\n \n-fn with_envp<K, V, T>(env: Option<&collections::HashMap<K, V>>,\n-                      cb: |*mut c_void| -> T) -> T\n-    where K: BytesContainer + Eq + Hash, V: BytesContainer\n+fn with_envp<K, V, T, F>(env: Option<&collections::HashMap<K, V>>, cb: F) -> T where\n+    K: BytesContainer + Eq + Hash, V: BytesContainer, F: FnOnce(*mut c_void) -> T,\n {\n     // On Windows we pass an \"environment block\" which is not a char**, but\n     // rather a concatenation of null-terminated k=v\\0 sequences, with a final\n@@ -445,7 +444,9 @@ fn with_envp<K, V, T>(env: Option<&collections::HashMap<K, V>>,\n     }\n }\n \n-fn with_dirp<T>(d: Option<&CString>, cb: |*const u16| -> T) -> T {\n+fn with_dirp<T, F>(d: Option<&CString>, cb: F) -> T where\n+    F: FnOnce(*const u16) -> T,\n+{\n     match d {\n       Some(dir) => {\n           let dir_str = dir.as_str()"}, {"sha": "5a1a5b4fb7a107ff7d55d96b706e384eb48f216d", "filename": "src/libstd/task.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -381,7 +381,9 @@ mod test {\n         rx.recv();\n     }\n \n-    fn avoid_copying_the_body(spawnfn: |v: proc():Send|) {\n+    fn avoid_copying_the_body<F>(spawnfn: F) where\n+        F: FnOnce(proc():Send),\n+    {\n         let (tx, rx) = channel::<uint>();\n \n         let x = box 1;"}, {"sha": "b85b6eccb771821f09410be45ec26c42bbed2abe", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -218,7 +218,9 @@ impl<T: 'static> Key<T> {\n     /// This function will `panic!()` if the key currently has its\n     /// destructor running, and it **may** panic if the destructor has\n     /// previously been run for this thread.\n-    pub fn with<R>(&'static self, f: |&T| -> R) -> R {\n+    pub fn with<R, F>(&'static self, f: F) -> R where\n+        F: FnOnce(&T) -> R,\n+    {\n         let slot = (self.inner)();\n         unsafe {\n             let slot = slot.get().expect(\"cannot access a TLS value during or \\"}, {"sha": "ee742ab83751d94cd025e12acbe85dbd7f271462", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -135,7 +135,9 @@ impl<T> Key<T> {\n     ///     assert_eq!(val, 100);\n     /// });\n     /// ```\n-    pub fn set<R>(&'static self, t: &T, cb: || -> R) -> R {\n+    pub fn set<R, F>(&'static self, t: &T, cb: F) -> R where\n+        F: FnOnce() -> R,\n+    {\n         struct Reset<'a, T: 'a> {\n             key: &'a KeyInner<T>,\n             val: *mut T,\n@@ -175,7 +177,9 @@ impl<T> Key<T> {\n     ///     // work with `slot`\n     /// });\n     /// ```\n-    pub fn with<R>(&'static self, cb: |&T| -> R) -> R {\n+    pub fn with<R, F>(&'static self, cb: F) -> R where\n+        F: FnOnce(&T) -> R\n+    {\n         unsafe {\n             let ptr = self.inner.get();\n             assert!(!ptr.is_null(), \"cannot access a scoped thread local \\"}, {"sha": "34a3d6aa2753645b2fcd39d69765c5fe480b5c68", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "patch": "@@ -14,7 +14,7 @@\n \n use {fmt, i64};\n use kinds::Copy;\n-use ops::{Add, Sub, Mul, Div, Neg};\n+use ops::{Add, Sub, Mul, Div, Neg, FnOnce};\n use option::Option;\n use option::Option::{Some, None};\n use num::Int;\n@@ -141,7 +141,7 @@ impl Duration {\n \n     /// Runs a closure, returning the duration of time it took to run the\n     /// closure.\n-    pub fn span(f: ||) -> Duration {\n+    pub fn span<F>(f: F) -> Duration where F: FnOnce() {\n         let before = super::precise_time_ns();\n         f();\n         Duration::nanoseconds((super::precise_time_ns() - before) as i64)"}]}