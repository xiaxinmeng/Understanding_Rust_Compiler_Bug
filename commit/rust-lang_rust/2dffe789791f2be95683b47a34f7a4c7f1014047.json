{"sha": "2dffe789791f2be95683b47a34f7a4c7f1014047", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZmZlNzg5NzkxZjJiZTk1NjgzYjQ3YTM0ZjdhNGM3ZjEwMTQwNDc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T10:24:11Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T18:54:43Z"}, "message": "Rollup merge of #24205 - brson:debug, r=alexcrichton\n\n This makes the default configuration fully optimized, with no debugging options, no llvm asserts, renames --enable-debug to --enable-debug-assertions, and adds --enable-debug as a blanket option that toggles various things, per #17665. It does not add a `--enable-release` flag since that would be a no-op.\n\ncc @nrc\n\nFixes https://github.com/rust-lang/rust/issues/22390\nFixes https://github.com/rust-lang/rust/issues/17081\nPartially addresses https://github.com/rust-lang/rust/issues/17665", "tree": {"sha": "bafaa34372afd41a4dc9569ee6e3a3a70fb4c030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bafaa34372afd41a4dc9569ee6e3a3a70fb4c030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dffe789791f2be95683b47a34f7a4c7f1014047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dffe789791f2be95683b47a34f7a4c7f1014047", "html_url": "https://github.com/rust-lang/rust/commit/2dffe789791f2be95683b47a34f7a4c7f1014047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dffe789791f2be95683b47a34f7a4c7f1014047/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67fa4d3a0c1236e849c2446bcdc47e617452a645", "url": "https://api.github.com/repos/rust-lang/rust/commits/67fa4d3a0c1236e849c2446bcdc47e617452a645", "html_url": "https://github.com/rust-lang/rust/commit/67fa4d3a0c1236e849c2446bcdc47e617452a645"}, {"sha": "a725426ec8464e17794b0e8d0a06d33ba6ea95f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a725426ec8464e17794b0e8d0a06d33ba6ea95f0", "html_url": "https://github.com/rust-lang/rust/commit/a725426ec8464e17794b0e8d0a06d33ba6ea95f0"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "97c998a5cda3c3d5ac1b40c96a0e9a0e3e03130e", "filename": "configure", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2dffe789791f2be95683b47a34f7a4c7f1014047/configure", "raw_url": "https://github.com/rust-lang/rust/raw/2dffe789791f2be95683b47a34f7a4c7f1014047/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=2dffe789791f2be95683b47a34f7a4c7f1014047", "patch": "@@ -523,30 +523,35 @@ fi\n BOOL_OPTIONS=\"\"\n VAL_OPTIONS=\"\"\n \n+opt debug 0 \"debug mode\"\n opt valgrind 0 \"run tests with valgrind (memcheck by default)\"\n opt helgrind 0 \"run tests with helgrind instead of memcheck\"\n opt valgrind-rpass 1 \"run rpass-valgrind tests with valgrind\"\n opt docs     1 \"build standard library documentation\"\n opt compiler-docs     0 \"build compiler documentation\"\n-opt optimize 1 \"build optimized rust code\"\n-opt optimize-cxx 1 \"build optimized C++ code\"\n-opt optimize-llvm 1 \"build optimized LLVM\"\n opt optimize-tests 1 \"build tests with optimizations\"\n opt libcpp 1 \"build with llvm with libc++ instead of libstdc++ when using clang\"\n-opt llvm-assertions 1 \"build LLVM with assertions\"\n-opt debug 1 \"build with extra debug fun\"\n+opt llvm-assertions 0 \"build LLVM with assertions\"\n+opt debug-assertions 0 \"build with debugging assertions\"\n opt fast-make 0 \"use .gitmodules as timestamp for submodule deps\"\n opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n opt rpath 0 \"build rpaths into rustc itself\"\n-opt nightly 0 \"build nightly packages\"\n-opt verify-install 1 \"verify installed binaries work\"\n # This is used by the automation to produce single-target nightlies\n opt dist-host-only 0 \"only install bins for the host architecture\"\n opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n opt llvm-version-check 1 \"don't check if the LLVM version is supported, build anyway\"\n \n+# Optimization and debugging options. These may be overridden by the release channel, etc.\n+opt_nosave optimize 1 \"build optimized rust code\"\n+opt_nosave optimize-cxx 1 \"build optimized C++ code\"\n+opt_nosave optimize-llvm 1 \"build optimized LLVM\"\n+opt_nosave llvm-assertions 0 \"build LLVM with assertions\"\n+opt_nosave debug-assertions 0 \"build with debugging assertions\"\n+opt_nosave debuginfo 0 \"build with debugger metadata\"\n+opt_nosave debug-jemalloc 0 \"build jemalloc with --enable-debug --enable-fill\"\n+\n valopt localstatedir \"/var/lib\" \"local state directory\"\n valopt sysconfdir \"/etc\" \"install system configuration files\"\n \n@@ -556,6 +561,7 @@ valopt llvm-root \"\" \"set LLVM root\"\n valopt jemalloc-root \"\" \"set directory where libjemalloc_pic.a is located\"\n valopt build \"${DEFAULT_BUILD}\" \"GNUs ./configure syntax LLVM build triple\"\n valopt android-cross-path \"/opt/ndk_standalone\" \"Android NDK standalone path\"\n+valopt release-channel \"dev\" \"the name of the release channel to build\"\n \n # Many of these are saved below during the \"writing configuration\" step\n # (others are conditionally saved).\n@@ -568,7 +574,6 @@ valopt_nosave local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt_nosave host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n valopt_nosave target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n valopt_nosave mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n-valopt_nosave release-channel \"dev\" \"the name of the release channel to build\"\n \n # Temporarily support old triples until buildbots get updated\n CFG_BUILD=$(to_llvm_triple $CFG_BUILD)\n@@ -621,13 +626,24 @@ case \"$CFG_RELEASE_CHANNEL\" in\n         ;;\n esac\n \n-# Continue supporting the old --enable-nightly flag to transition the bots\n-# XXX Remove me\n-if [ ! -z \"$CFG_ENABLE_NIGHTLY\" ]\n-then\n-    CFG_RELEASE_CHANNEL=nightly\n+# Adjust perf and debug options for debug mode\n+if [ -n \"$CFG_ENABLE_DEBUG\" ]; then\n+    msg \"debug mode enabled, setting performance options\"\n+    CFG_DISABLE_OPTIMIZE=1\n+    CFG_DISABLE_OPTIMIZE_CXX=1\n+    CFG_ENABLE_LLVM_ASSERTIONS=1\n+    CFG_ENABLE_DEBUG_ASSERTIONS=1\n+    CFG_ENABLE_DEBUG_JEMALLOC=1\n fi\n-putvar CFG_RELEASE_CHANNEL\n+\n+# OK, now write the debugging options\n+if [ -n \"$CFG_DISABLE_OPTIMIZE\" ]; then putvar CFG_DISABLE_OPTIMIZE; fi\n+if [ -n \"$CFG_DISABLE_OPTIMIZE_CXX\" ]; then putvar CFG_DISABLE_OPTIMIZE_CXX; fi\n+if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then putvar CFG_DISABLE_OPTIMIZE_LLVM; fi\n+if [ -n \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]; then putvar CFG_ENABLE_LLVM_ASSERTIONS; fi\n+if [ -n \"$CFG_ENABLE_DEBUG_ASSERTIONS\" ]; then putvar CFG_ENABLE_DEBUG_ASSERTIONS; fi\n+if [ -n \"$CFG_ENABLE_DEBUGINFO\" ]; then putvar CFG_ENABLE_DEBUGINFO; fi\n+if [ -n \"$CFG_ENABLE_DEBUG_JEMALLOC\" ]; then putvar CFG_ENABLE_DEBUG_JEMALLOC; fi\n \n # A magic value that allows the compiler to use unstable features\n # during the bootstrap even when doing so would normally be an error\n@@ -1180,7 +1196,7 @@ do\n             LLVM_DBG_OPTS=\"--enable-optimized\"\n             LLVM_INST_DIR=$LLVM_BUILD_DIR/Release\n         fi\n-        if [ ! -z \"$CFG_DISABLE_LLVM_ASSERTIONS\" ]\n+        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n         then\n             LLVM_ASSERTION_OPTS=\"--disable-assertions\"\n         else\n@@ -1434,6 +1450,11 @@ move_if_changed config.tmp config.mk\n rm -f config.tmp\n touch config.stamp\n \n-step_msg \"complete\"\n+if [ -z \"$CFG_ENABLE_DEBUG\" ]; then\n+    step_msg \"configured in release mode. for development consider --enable-debug\"\n+else\n+    step_msg \"complete\"\n+fi\n+\n msg \"run \\`make help\\`\"\n msg"}, {"sha": "cabc97a1e49120073c6e415d7546905f12e2be1b", "filename": "mk/install.mk", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dffe789791f2be95683b47a34f7a4c7f1014047/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2dffe789791f2be95683b47a34f7a4c7f1014047/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=2dffe789791f2be95683b47a34f7a4c7f1014047", "patch": "@@ -8,12 +8,6 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-ifdef CFG_DISABLE_VERIFY_INSTALL\n-MAYBE_DISABLE_VERIFY=--disable-verify\n-else\n-MAYBE_DISABLE_VERIFY=\n-endif\n-\n install:\n ifeq (root user, $(USER) $(patsubst %,user,$(SUDO_USER)))\n # Build the dist as the original user\n@@ -22,9 +16,9 @@ else\n \t$(Q)$(MAKE) prepare_install\n endif\n ifeq ($(CFG_DISABLE_DOCS),)\n-\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(DOC_PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\" \"$(MAYBE_DISABLE_VERIFY)\"\n+\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(DOC_PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n endif\n-\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\" \"$(MAYBE_DISABLE_VERIFY)\"\n+\t$(Q)cd tmp/empty_dir && sh ../../tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(DESTDIR)$(CFG_PREFIX)\" --libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" --mandir=\"$(DESTDIR)$(CFG_MANDIR)\"\n # Remove tmp files because it's a decent amount of disk space\n \t$(Q)rm -R tmp/dist\n "}, {"sha": "ea00444453d00fc39c08464ba8c83d84f0c5b310", "filename": "mk/main.mk", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2dffe789791f2be95683b47a34f7a4c7f1014047/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2dffe789791f2be95683b47a34f7a4c7f1014047/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=2dffe789791f2be95683b47a34f7a4c7f1014047", "patch": "@@ -126,11 +126,16 @@ endif\n \n CFG_JEMALLOC_FLAGS += $(JEMALLOC_FLAGS)\n \n-ifdef CFG_DISABLE_DEBUG\n-  CFG_RUSTC_FLAGS += --cfg ndebug\n-else\n-  $(info cfg: enabling more debugging (CFG_ENABLE_DEBUG))\n+ifdef CFG_ENABLE_DEBUG_ASSERTIONS\n+  $(info cfg: enabling debug assertions (CFG_ENABLE_DEBUG_ASSERTIONS))\n   CFG_RUSTC_FLAGS += --cfg debug -C debug-assertions=on\n+else\n+  CFG_RUSTC_FLAGS += --cfg ndebug\n+endif\n+\n+ifdef CFG_ENABLE_DEBUGINFO\n+  $(info cfg: enabling debuginfo (CFG_ENABLE_DEBUGINFO))\n+  CFG_RUSTC_FLAGS += -g\n endif\n \n ifdef SAVE_TEMPS"}, {"sha": "70abce8b4606751f1bda548dcd97a31f0661fecc", "filename": "mk/rt.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dffe789791f2be95683b47a34f7a4c7f1014047/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2dffe789791f2be95683b47a34f7a4c7f1014047/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=2dffe789791f2be95683b47a34f7a4c7f1014047", "patch": "@@ -143,6 +143,10 @@ else ifeq ($(findstring android, $(OSTYPE_$(1))), android)\n   JEMALLOC_ARGS_$(1) := --disable-tls\n endif\n \n+ifdef CFG_ENABLE_DEBUG_JEMALLOC\n+  JEMALLOC_ARGS_$(1) += --enable-debug --enable-fill\n+endif\n+\n ################################################################################\n # jemalloc\n ################################################################################"}]}