{"sha": "969296b79b22363c67b1e6786bd115ced881210f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OTI5NmI3OWIyMjM2M2M2N2IxZTY3ODZiZDExNWNlZDg4MTIxMGY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-11T14:28:28Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-01T12:57:07Z"}, "message": "Add a WorkerLocal abstraction", "tree": {"sha": "1654fa452efae32076d46cd940765b720278ae5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1654fa452efae32076d46cd940765b720278ae5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/969296b79b22363c67b1e6786bd115ced881210f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/969296b79b22363c67b1e6786bd115ced881210f", "html_url": "https://github.com/rust-lang/rust/commit/969296b79b22363c67b1e6786bd115ced881210f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/969296b79b22363c67b1e6786bd115ced881210f/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7aabaa3fccc2b288841f29318253f2839da8a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7aabaa3fccc2b288841f29318253f2839da8a88", "html_url": "https://github.com/rust-lang/rust/commit/b7aabaa3fccc2b288841f29318253f2839da8a88"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "17ee771e5294083cfb93dda2698b5f7080cf808c", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/969296b79b22363c67b1e6786bd115ced881210f/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/969296b79b22363c67b1e6786bd115ced881210f/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=969296b79b22363c67b1e6786bd115ced881210f", "patch": "@@ -17,6 +17,7 @@ cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\"\n parking_lot_core = \"0.2.8\"\n rustc-rayon = \"0.1.0\"\n+rustc-rayon-core = \"0.1.0\"\n rustc-hash = \"1.0.1\"\n \n [dependencies.parking_lot]"}, {"sha": "7046a2a2a493d1f752f52657d09eda96ac2dbbdf", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/969296b79b22363c67b1e6786bd115ced881210f/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969296b79b22363c67b1e6786bd115ced881210f/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=969296b79b22363c67b1e6786bd115ced881210f", "patch": "@@ -44,6 +44,7 @@ extern crate parking_lot;\n extern crate cfg_if;\n extern crate stable_deref_trait;\n extern crate rustc_rayon as rayon;\n+extern crate rustc_rayon_core as rayon_core;\n extern crate rustc_hash;\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this."}, {"sha": "6f7d9e1b54b1ead0237398c50b6262bbd27664f5", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/969296b79b22363c67b1e6786bd115ced881210f/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969296b79b22363c67b1e6786bd115ced881210f/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=969296b79b22363c67b1e6786bd115ced881210f", "patch": "@@ -99,6 +99,33 @@ cfg_if! {\n \n         use std::cell::Cell;\n \n+        #[derive(Debug)]\n+        pub struct WorkerLocal<T>(OneThread<T>);\n+\n+        impl<T> WorkerLocal<T> {\n+            /// Creates a new worker local where the `initial` closure computes the\n+            /// value this worker local should take for each thread in the thread pool.\n+            #[inline]\n+            pub fn new<F: FnMut(usize) -> T>(mut f: F) -> WorkerLocal<T> {\n+                WorkerLocal(OneThread::new(f(0)))\n+            }\n+\n+            /// Returns the worker-local value for each thread\n+            #[inline]\n+            pub fn into_inner(self) -> Vec<T> {\n+                vec![OneThread::into_inner(self.0)]\n+            }\n+        }\n+\n+        impl<T> Deref for WorkerLocal<T> {\n+            type Target = T;\n+\n+            #[inline(always)]\n+            fn deref(&self) -> &T {\n+                &*self.0\n+            }\n+        }\n+\n         #[derive(Debug)]\n         pub struct MTLock<T>(T);\n \n@@ -203,6 +230,8 @@ cfg_if! {\n         use std::thread;\n         pub use rayon::{join, scope};\n \n+        pub use rayon_core::WorkerLocal;\n+\n         pub use rayon::iter::ParallelIterator;\n         use rayon::iter::IntoParallelIterator;\n "}]}