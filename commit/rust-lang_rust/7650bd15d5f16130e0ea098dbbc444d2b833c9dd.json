{"sha": "7650bd15d5f16130e0ea098dbbc444d2b833c9dd", "node_id": "C_kwDOAAsO6NoAKDc2NTBiZDE1ZDVmMTYxMzBlMGVhMDk4ZGJiYzQ0NGQyYjgzM2M5ZGQ", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-12-16T18:39:19Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-03-05T13:37:32Z"}, "message": "Add cpass to incremental tests", "tree": {"sha": "eed42acfc439cbdd41fe2ae2d6131c192fcbd611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eed42acfc439cbdd41fe2ae2d6131c192fcbd611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7650bd15d5f16130e0ea098dbbc444d2b833c9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7650bd15d5f16130e0ea098dbbc444d2b833c9dd", "html_url": "https://github.com/rust-lang/rust/commit/7650bd15d5f16130e0ea098dbbc444d2b833c9dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7650bd15d5f16130e0ea098dbbc444d2b833c9dd/comments", "author": null, "committer": null, "parents": [{"sha": "14c54b637b18f74680d0c0441216714b5e9c150d", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c54b637b18f74680d0c0441216714b5e9c150d", "html_url": "https://github.com/rust-lang/rust/commit/14c54b637b18f74680d0c0441216714b5e9c150d"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "ad3d1bddef04072e6623e323035ac30913401bdb", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7650bd15d5f16130e0ea098dbbc444d2b833c9dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7650bd15d5f16130e0ea098dbbc444d2b833c9dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=7650bd15d5f16130e0ea098dbbc444d2b833c9dd", "patch": "@@ -278,13 +278,15 @@ impl<'test> TestCx<'test> {\n             Incremental => {\n                 let revision =\n                     self.revision.expect(\"incremental tests require a list of revisions\");\n-                if revision.starts_with(\"rpass\") || revision.starts_with(\"rfail\") {\n+                if revision.starts_with(\"cpass\")\n+                    || revision.starts_with(\"rpass\")\n+                    || revision.starts_with(\"rfail\")\n+                {\n                     true\n                 } else if revision.starts_with(\"cfail\") {\n-                    // FIXME: would be nice if incremental revs could start with \"cpass\"\n                     pm.is_some()\n                 } else {\n-                    panic!(\"revision name must begin with rpass, rfail, or cfail\");\n+                    panic!(\"revision name must begin with cpass, rpass, rfail, or cfail\");\n                 }\n             }\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n@@ -384,6 +386,20 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn run_cpass_test(&self) {\n+        let emit_metadata = self.should_emit_metadata(self.pass_mode());\n+        let proc_res = self.compile_test(WillExecute::No, emit_metadata);\n+\n+        if !proc_res.status.success() {\n+            self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n+        }\n+\n+        // FIXME(#41968): Move this check to tidy?\n+        if !errors::load_errors(&self.testpaths.file, self.revision).is_empty() {\n+            self.fatal(\"compile-pass tests with expected warnings should be moved to ui/\");\n+        }\n+    }\n+\n     fn run_rpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n         let should_run = self.run_if_enabled();\n@@ -393,17 +409,15 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n+        // FIXME(#41968): Move this check to tidy?\n+        if !errors::load_errors(&self.testpaths.file, self.revision).is_empty() {\n+            self.fatal(\"run-pass tests with expected warnings should be moved to ui/\");\n+        }\n+\n         if let WillExecute::Disabled = should_run {\n             return;\n         }\n \n-        // FIXME(#41968): Move this check to tidy?\n-        let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n-        assert!(\n-            expected_errors.is_empty(),\n-            \"run-pass tests with expected warnings should be moved to ui/\"\n-        );\n-\n         let proc_res = self.exec_compiled_test();\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"test run failed!\", &proc_res);\n@@ -2903,10 +2917,11 @@ impl<'test> TestCx<'test> {\n     fn run_incremental_test(&self) {\n         // Basic plan for a test incremental/foo/bar.rs:\n         // - load list of revisions rpass1, cfail2, rpass3\n-        //   - each should begin with `rpass`, `cfail`, or `rfail`\n-        //   - if `rpass`, expect compile and execution to succeed\n+        //   - each should begin with `cpass`, `rpass`, `cfail`, or `rfail`\n+        //   - if `cpass`, expect compilation to succeed, don't execute\n+        //   - if `rpass`, expect compilation and execution to succeed\n         //   - if `cfail`, expect compilation to fail\n-        //   - if `rfail`, expect execution to fail\n+        //   - if `rfail`, expect compilation to succeed and execution to fail\n         // - create a directory build/foo/bar.incremental\n         // - compile foo/bar.rs with -C incremental=.../foo/bar.incremental and -C rpass1\n         //   - because name of revision starts with \"rpass\", expect success\n@@ -2930,7 +2945,12 @@ impl<'test> TestCx<'test> {\n             print!(\"revision={:?} props={:#?}\", revision, self.props);\n         }\n \n-        if revision.starts_with(\"rpass\") {\n+        if revision.starts_with(\"cpass\") {\n+            if self.props.should_ice {\n+                self.fatal(\"can only use should-ice in cfail tests\");\n+            }\n+            self.run_cpass_test();\n+        } else if revision.starts_with(\"rpass\") {\n             if self.props.should_ice {\n                 self.fatal(\"can only use should-ice in cfail tests\");\n             }\n@@ -2943,7 +2963,7 @@ impl<'test> TestCx<'test> {\n         } else if revision.starts_with(\"cfail\") {\n             self.run_cfail_test();\n         } else {\n-            self.fatal(\"revision name must begin with rpass, rfail, or cfail\");\n+            self.fatal(\"revision name must begin with cpass, rpass, rfail, or cfail\");\n         }\n     }\n "}]}