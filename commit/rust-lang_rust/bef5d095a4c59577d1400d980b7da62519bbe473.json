{"sha": "bef5d095a4c59577d1400d980b7da62519bbe473", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZjVkMDk1YTRjNTk1NzdkMTQwMGQ5ODBiN2RhNjI1MTliYmU0NzM=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-04-10T17:03:54Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-30T23:33:58Z"}, "message": "rustfmt: Add option to specify line ranges for formatting\n\nThis commit adds the `--experimental-file-lines` option to rustfmt. This\nallows specifying line ranges to format from the command line.\n\nRefs #434", "tree": {"sha": "901e47bd8f3523d76e51e7dcfe22e0bfb1599860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/901e47bd8f3523d76e51e7dcfe22e0bfb1599860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef5d095a4c59577d1400d980b7da62519bbe473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef5d095a4c59577d1400d980b7da62519bbe473", "html_url": "https://github.com/rust-lang/rust/commit/bef5d095a4c59577d1400d980b7da62519bbe473", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef5d095a4c59577d1400d980b7da62519bbe473/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "html_url": "https://github.com/rust-lang/rust/commit/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "4f0714a9997da5dfc94cb880c92d26f28ecf47b6", "filename": "README.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bef5d095a4c59577d1400d980b7da62519bbe473/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/bef5d095a4c59577d1400d980b7da62519bbe473/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=bef5d095a4c59577d1400d980b7da62519bbe473", "patch": "@@ -73,6 +73,25 @@ the command line. For example `rustfmt --write-mode=display src/filename.rs`\n \n `cargo fmt` uses `--write-mode=replace` by default.\n \n+If you want to restrict reformatting to specific sets of lines, you can\n+use the `--file-lines` option. Its argument is a JSON array of objects\n+with `file` and `range` properties, where `file` is a file name, and\n+`range` is an array representing a range of lines like `[7,13]`. Ranges\n+are inclusive of both end points. Specifying an empty array will result in\n+no files being formatted. For example,\n+\n+```\n+rustfmt --file-lines '[\n+    {\"file\":\"src/lib.rs\",\"range\":[7,13]},\n+    {\"file\":\"src/lib.rs\",\"range\":[21,29]},\n+    {\"file\":\"src/foo.rs\",\"range\":[10,11]},\n+    {\"file\":\"src/foo.rs\",\"range\":[15,15]}]'\n+```\n+\n+would format lines `7-13` and `21-29` of `src/lib.rs`, and lines `10-11`,\n+and `15` of `src/foo.rs`. No other files would be formatted, even if they\n+are included as out of line modules from `src/lib.rs`.\n+\n If `rustfmt` successfully reformatted the code it will exit with `0` exit\n status. Exit status `1` signals some unexpected error, like an unknown option or\n a failure to read a file. Exit status `2` is returned if there are syntax errors"}, {"sha": "5aa7cc4e080e3485f3a759c5fbf9859364e051de", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bef5d095a4c59577d1400d980b7da62519bbe473/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef5d095a4c59577d1400d980b7da62519bbe473/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=bef5d095a4c59577d1400d980b7da62519bbe473", "patch": "@@ -18,6 +18,7 @@ extern crate env_logger;\n extern crate getopts;\n \n use rustfmt::{run, Input, Summary};\n+use rustfmt::file_lines::FileLines;\n use rustfmt::config::{Config, WriteMode};\n \n use std::{env, error};\n@@ -57,6 +58,7 @@ struct CliOptions {\n     skip_children: bool,\n     verbose: bool,\n     write_mode: Option<WriteMode>,\n+    file_lines: FileLines, // Default is all lines in all files.\n }\n \n impl CliOptions {\n@@ -73,12 +75,17 @@ impl CliOptions {\n             }\n         }\n \n+        if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n+            options.file_lines = try!(file_lines.parse());\n+        }\n+\n         Ok(options)\n     }\n \n-    fn apply_to(&self, config: &mut Config) {\n+    fn apply_to(self, config: &mut Config) {\n         config.skip_children = self.skip_children;\n         config.verbose = self.verbose;\n+        config.file_lines = self.file_lines;\n         if let Some(write_mode) = self.write_mode {\n             config.write_mode = write_mode;\n         }\n@@ -168,6 +175,10 @@ fn make_opts() -> Options {\n                 \"Recursively searches the given path for the rustfmt.toml config file. If not \\\n                  found reverts to the input file path\",\n                 \"[Path for the configuration file]\");\n+    opts.optopt(\"\",\n+                \"file-lines\",\n+                \"Format specified line ranges. See README for more detail on the JSON format.\",\n+                \"JSON\");\n \n     opts\n }\n@@ -198,8 +209,12 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n             Ok(run(Input::Text(input), &config))\n         }\n-        Operation::Format { files, config_path } => {\n+        Operation::Format { mut files, config_path } => {\n             let options = try!(CliOptions::from_matches(&matches));\n+\n+            // Add any additional files that were specified via `--file-lines`.\n+            files.extend(options.file_lines.files().cloned().map(PathBuf::from));\n+\n             let mut config = Config::default();\n             let mut path = None;\n             // Load the config path file if provided\n@@ -227,7 +242,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                     config = config_tmp;\n                 }\n \n-                options.apply_to(&mut config);\n+                options.clone().apply_to(&mut config);\n                 error_summary.add(run(Input::File(file), &config));\n             }\n             Ok(error_summary)\n@@ -306,8 +321,8 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n             Some(dir)\n         });\n \n-    // if no file argument is supplied, read from stdin\n-    if matches.free.is_empty() {\n+    // if no file argument is supplied and `--file-lines` is not specified, read from stdin\n+    if matches.free.is_empty() && !matches.opt_present(\"file-lines\") {\n \n         let mut buffer = String::new();\n         try!(io::stdin().read_to_string(&mut buffer));\n@@ -318,6 +333,7 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         });\n     }\n \n+    // We append files from `--file-lines` later in `execute()`.\n     let files: Vec<_> = matches.free.iter().map(PathBuf::from).collect();\n \n     Ok(Operation::Format {"}]}