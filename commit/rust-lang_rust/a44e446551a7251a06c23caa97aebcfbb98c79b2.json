{"sha": "a44e446551a7251a06c23caa97aebcfbb98c79b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NGU0NDY1NTFhNzI1MWEwNmMyM2NhYTk3YWViY2ZiYjk4Yzc5YjI=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-11-19T09:34:28Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2018-11-19T17:54:43Z"}, "message": "Add `override_export_symbols` option to Rust target specification", "tree": {"sha": "18f14e0c4ad92385f2770012956f4472de2d5583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f14e0c4ad92385f2770012956f4472de2d5583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a44e446551a7251a06c23caa97aebcfbb98c79b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a44e446551a7251a06c23caa97aebcfbb98c79b2", "html_url": "https://github.com/rust-lang/rust/commit/a44e446551a7251a06c23caa97aebcfbb98c79b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a44e446551a7251a06c23caa97aebcfbb98c79b2/comments", "author": null, "committer": null, "parents": [{"sha": "7e82eda000c8d4abbdaa76b3563cd77f938fc411", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e82eda000c8d4abbdaa76b3563cd77f938fc411", "html_url": "https://github.com/rust-lang/rust/commit/7e82eda000c8d4abbdaa76b3563cd77f938fc411"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "ec5ca5801049eebe45b8d74bfcf98bb0c6b06f3b", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a44e446551a7251a06c23caa97aebcfbb98c79b2/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44e446551a7251a06c23caa97aebcfbb98c79b2/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=a44e446551a7251a06c23caa97aebcfbb98c79b2", "patch": "@@ -1050,6 +1050,10 @@ impl<'a> Linker for WasmLd<'a> {\n }\n \n fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n+    if let Some(ref exports) = tcx.sess.target.target.options.override_export_symbols {\n+        return exports.clone()\n+    }\n+\n     let mut symbols = Vec::new();\n \n     let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);"}, {"sha": "57bbf6b026089bacad599b4d3d85f5c02bdf3a45", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a44e446551a7251a06c23caa97aebcfbb98c79b2/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44e446551a7251a06c23caa97aebcfbb98c79b2/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=a44e446551a7251a06c23caa97aebcfbb98c79b2", "patch": "@@ -683,6 +683,10 @@ pub struct TargetOptions {\n     /// target features. This is `true` by default, and `false` for targets like\n     /// wasm32 where the whole program either has simd or not.\n     pub simd_types_indirect: bool,\n+\n+    /// If set, have the linker export exactly these symbols, instead of using\n+    /// the usual logic to figure this out from the crate itself.\n+    pub override_export_symbols: Option<Vec<String>>\n }\n \n impl Default for TargetOptions {\n@@ -763,6 +767,7 @@ impl Default for TargetOptions {\n             emit_debug_gdb_scripts: true,\n             requires_uwtable: false,\n             simd_types_indirect: true,\n+            override_export_symbols: None,\n         }\n     }\n }\n@@ -898,6 +903,14 @@ impl Target {\n                         )\n                     );\n             } );\n+            ($key_name:ident, opt_list) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).map(|o| o.as_array()\n+                    .map(|v| base.options.$key_name = Some(v.iter()\n+                        .map(|a| a.as_string().unwrap().to_string()).collect())\n+                        )\n+                    );\n+            } );\n             ($key_name:ident, optional) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(o) = obj.find(&name[..]) {\n@@ -1044,6 +1057,7 @@ impl Target {\n         key!(emit_debug_gdb_scripts, bool);\n         key!(requires_uwtable, bool);\n         key!(simd_types_indirect, bool);\n+        key!(override_export_symbols, opt_list);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1253,6 +1267,7 @@ impl ToJson for Target {\n         target_option_val!(emit_debug_gdb_scripts);\n         target_option_val!(requires_uwtable);\n         target_option_val!(simd_types_indirect);\n+        target_option_val!(override_export_symbols);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}]}