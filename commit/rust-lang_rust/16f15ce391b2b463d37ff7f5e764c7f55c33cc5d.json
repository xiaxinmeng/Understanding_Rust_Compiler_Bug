{"sha": "16f15ce391b2b463d37ff7f5e764c7f55c33cc5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZjE1Y2UzOTFiMmI0NjNkMzdmZjdmNWU3NjRjN2Y1NWMzM2NjNWQ=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-25T22:23:41Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-30T16:55:41Z"}, "message": "rustc: Add lint for snake_case functions & methods.", "tree": {"sha": "78e959cc3db379905c341df897515bddcbe614b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78e959cc3db379905c341df897515bddcbe614b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d", "html_url": "https://github.com/rust-lang/rust/commit/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "874b56d3379a63aed6ada5c25c69cc9ab3cdf92c", "url": "https://api.github.com/repos/rust-lang/rust/commits/874b56d3379a63aed6ada5c25c69cc9ab3cdf92c", "html_url": "https://github.com/rust-lang/rust/commit/874b56d3379a63aed6ada5c25c69cc9ab3cdf92c"}], "stats": {"total": 132, "additions": 118, "deletions": 14}, "files": [{"sha": "8cceb16b34fe83809931a3dac897166afe9d0b52", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 67, "deletions": 14, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=16f15ce391b2b463d37ff7f5e764c7f55c33cc5d", "patch": "@@ -83,6 +83,7 @@ pub enum Lint {\n     NonCamelCaseTypes,\n     NonUppercaseStatics,\n     NonUppercasePatternStatics,\n+    NonSnakeCaseFunctions,\n     UppercaseVariables,\n     UnnecessaryParens,\n     TypeLimits,\n@@ -220,6 +221,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n          default: Warn\n      }),\n \n+    (\"non_snake_case_functions\",\n+     LintSpec {\n+         lint: NonSnakeCaseFunctions,\n+         desc: \"methods and functions should have snake case names\",\n+         default: Warn\n+     }),\n+\n     (\"uppercase_variables\",\n      LintSpec {\n          lint: UppercaseVariables,\n@@ -1342,6 +1350,30 @@ fn check_item_non_camel_case_types(cx: &Context, it: &ast::Item) {\n     }\n }\n \n+fn check_snake_case(cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n+    fn is_snake_case(ident: ast::Ident) -> bool {\n+        let ident = token::get_ident(ident);\n+        assert!(!ident.get().is_empty());\n+        let ident = ident.get().trim_chars('_');\n+\n+        let mut allow_underscore = true;\n+        ident.chars().all(|c| {\n+            allow_underscore = match c {\n+                c if c.is_lowercase() || c.is_digit() => true,\n+                '_' if allow_underscore => false,\n+                _ => return false,\n+            };\n+            true\n+        })\n+    }\n+\n+    if !is_snake_case(ident) {\n+        cx.span_lint(NonSnakeCaseFunctions, span,\n+                    format!(\"{} `{}` should have a snake case identifier\",\n+                            sort, token::get_ident(ident)).as_slice());\n+    }\n+}\n+\n fn check_item_non_uppercase_statics(cx: &Context, it: &ast::Item) {\n     match it.node {\n         // only check static constants\n@@ -1618,7 +1650,27 @@ fn check_missing_doc_item(cx: &Context, it: &ast::Item) {\n                             desc);\n }\n \n+#[deriving(Eq)]\n+enum MethodContext {\n+    TraitDefaultImpl,\n+    TraitImpl,\n+    PlainImpl\n+}\n+\n fn check_missing_doc_method(cx: &Context, m: &ast::Method) {\n+    // If the method is an impl for a trait, don't doc.\n+    if method_context(cx, m) == TraitImpl { return; }\n+\n+    // Otherwise, doc according to privacy. This will also check\n+    // doc for default methods defined on traits.\n+    check_missing_doc_attrs(cx,\n+                            Some(m.id),\n+                            m.attrs.as_slice(),\n+                            m.span,\n+                            \"a method\");\n+}\n+\n+fn method_context(cx: &Context, m: &ast::Method) -> MethodContext {\n     let did = ast::DefId {\n         krate: ast::LOCAL_CRATE,\n         node: m.id\n@@ -1628,25 +1680,16 @@ fn check_missing_doc_method(cx: &Context, m: &ast::Method) {\n         None => cx.tcx.sess.span_bug(m.span, \"missing method descriptor?!\"),\n         Some(md) => {\n             match md.container {\n-                // Always check default methods defined on traits.\n-                ty::TraitContainer(..) => {}\n-                // For methods defined on impls, it depends on whether\n-                // it is an implementation for a trait or is a plain\n-                // impl.\n+                ty::TraitContainer(..) => TraitDefaultImpl,\n                 ty::ImplContainer(cid) => {\n                     match ty::impl_trait_ref(cx.tcx, cid) {\n-                        Some(..) => return, // impl for trait: don't doc\n-                        None => {} // plain impl: doc according to privacy\n+                        Some(..) => TraitImpl,\n+                        None => PlainImpl\n                     }\n                 }\n             }\n         }\n     }\n-    check_missing_doc_attrs(cx,\n-                            Some(m.id),\n-                            m.attrs.as_slice(),\n-                            m.span,\n-                            \"a method\");\n }\n \n fn check_missing_doc_ty_method(cx: &Context, tm: &ast::TypeMethod) {\n@@ -1889,26 +1932,36 @@ impl<'a> Visitor<()> for Context<'a> {\n         }\n \n         match *fk {\n-            visit::FkMethod(_, _, m) => {\n+            visit::FkMethod(ident, _, m) => {\n                 self.with_lint_attrs(m.attrs.as_slice(), |cx| {\n                     check_missing_doc_method(cx, m);\n                     check_attrs_usage(cx, m.attrs.as_slice());\n \n+                    match method_context(cx, m) {\n+                        PlainImpl => check_snake_case(cx, \"method\", ident, span),\n+                        TraitDefaultImpl => check_snake_case(cx, \"trait method\", ident, span),\n+                        _ => (),\n+                    }\n+\n                     cx.visit_ids(|v| {\n                         v.visit_fn(fk, decl, body, span, id, ());\n                     });\n                     recurse(cx);\n                 })\n+            },\n+            visit::FkItemFn(ident, _, _, _) => {\n+                check_snake_case(self, \"function\", ident, span);\n+                recurse(self);\n             }\n             _ => recurse(self),\n         }\n     }\n \n-\n     fn visit_ty_method(&mut self, t: &ast::TypeMethod, _: ()) {\n         self.with_lint_attrs(t.attrs.as_slice(), |cx| {\n             check_missing_doc_ty_method(cx, t);\n             check_attrs_usage(cx, t.attrs.as_slice());\n+            check_snake_case(cx, \"trait method\", t.ident, t.span);\n \n             visit::walk_ty_method(cx, t, ());\n         })"}, {"sha": "02ab85aff3bdfa22aa0a498f10e9d1e767976eba", "filename": "src/test/compile-fail/lint-non-snake-case-functions.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f15ce391b2b463d37ff7f5e764c7f55c33cc5d/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-functions.rs?ref=16f15ce391b2b463d37ff7f5e764c7f55c33cc5d", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(non_snake_case_functions)]\n+#![allow(dead_code)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn Foo_Method() {}\n+    //~^ ERROR method `Foo_Method` should have a snake case identifier\n+\n+    // Don't allow two underscores in a row\n+    fn foo__method(&self) {}\n+    //~^ ERROR method `foo__method` should have a snake case identifier\n+\n+    pub fn xyZ(&mut self) {}\n+    //~^ ERROR method `xyZ` should have a snake case identifier\n+}\n+\n+trait X {\n+    fn ABC();\n+    //~^ ERROR trait method `ABC` should have a snake case identifier\n+\n+    fn a_b_C(&self) {}\n+    //~^ ERROR trait method `a_b_C` should have a snake case identifier\n+\n+    fn something__else(&mut self);\n+    //~^ ERROR trait method `something__else` should have a snake case identifier\n+}\n+\n+impl X for Foo {\n+    // These errors should be caught at the trait definition not the impl\n+    fn ABC() {}\n+    fn something__else(&mut self) {}\n+}\n+\n+fn Cookie() {}\n+//~^ ERROR function `Cookie` should have a snake case identifier\n+\n+pub fn bi_S_Cuit() {}\n+//~^ ERROR function `bi_S_Cuit` should have a snake case identifier\n+\n+fn main() { }"}]}