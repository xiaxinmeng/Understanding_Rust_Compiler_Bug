{"sha": "7cbfbd3ee7b328f57162edbaa92820401b040a03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYmZiZDNlZTdiMzI4ZjU3MTYyZWRiYWE5MjgyMDQwMWIwNDBhMDM=", "commit": {"author": {"name": "MaulingMonkey", "email": "git@maulingmonkey.com", "date": "2020-09-05T21:46:22Z"}, "committer": {"name": "MaulingMonkey", "email": "git@maulingmonkey.com", "date": "2020-09-05T21:46:22Z"}, "message": "compiletest: Introduce \"min-cdb-version\"", "tree": {"sha": "a0904d9f5dd04644ac3a88f98779feb42a11768b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0904d9f5dd04644ac3a88f98779feb42a11768b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cbfbd3ee7b328f57162edbaa92820401b040a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbfbd3ee7b328f57162edbaa92820401b040a03", "html_url": "https://github.com/rust-lang/rust/commit/7cbfbd3ee7b328f57162edbaa92820401b040a03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cbfbd3ee7b328f57162edbaa92820401b040a03/comments", "author": {"login": "MaulingMonkey", "id": 75894, "node_id": "MDQ6VXNlcjc1ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/75894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaulingMonkey", "html_url": "https://github.com/MaulingMonkey", "followers_url": "https://api.github.com/users/MaulingMonkey/followers", "following_url": "https://api.github.com/users/MaulingMonkey/following{/other_user}", "gists_url": "https://api.github.com/users/MaulingMonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaulingMonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaulingMonkey/subscriptions", "organizations_url": "https://api.github.com/users/MaulingMonkey/orgs", "repos_url": "https://api.github.com/users/MaulingMonkey/repos", "events_url": "https://api.github.com/users/MaulingMonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/MaulingMonkey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MaulingMonkey", "id": 75894, "node_id": "MDQ6VXNlcjc1ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/75894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaulingMonkey", "html_url": "https://github.com/MaulingMonkey", "followers_url": "https://api.github.com/users/MaulingMonkey/followers", "following_url": "https://api.github.com/users/MaulingMonkey/following{/other_user}", "gists_url": "https://api.github.com/users/MaulingMonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaulingMonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaulingMonkey/subscriptions", "organizations_url": "https://api.github.com/users/MaulingMonkey/orgs", "repos_url": "https://api.github.com/users/MaulingMonkey/repos", "events_url": "https://api.github.com/users/MaulingMonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/MaulingMonkey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a769f261047afd8e31cc488b173b0ab5ac4205", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a769f261047afd8e31cc488b173b0ab5ac4205", "html_url": "https://github.com/rust-lang/rust/commit/81a769f261047afd8e31cc488b173b0ab5ac4205"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "2f832b53a9039f73f2794a79a1d39f140b6b3975", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cbfbd3ee7b328f57162edbaa92820401b040a03/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbfbd3ee7b328f57162edbaa92820401b040a03/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=7cbfbd3ee7b328f57162edbaa92820401b040a03", "patch": "@@ -261,6 +261,9 @@ pub struct Config {\n     /// Path to / name of the Microsoft Console Debugger (CDB) executable\n     pub cdb: Option<OsString>,\n \n+    /// Version of CDB\n+    pub cdb_version: Option<[u16; 4]>,\n+\n     /// Path to / name of the GDB executable\n     pub gdb: Option<String>,\n "}, {"sha": "17649dfab37501467b9b93808d5e156c636b1bf4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7cbfbd3ee7b328f57162edbaa92820401b040a03/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbfbd3ee7b328f57162edbaa92820401b040a03/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=7cbfbd3ee7b328f57162edbaa92820401b040a03", "patch": "@@ -8,8 +8,8 @@ use std::path::{Path, PathBuf};\n use tracing::*;\n \n use crate::common::{CompareMode, Config, Debugger, FailMode, Mode, PassMode};\n-use crate::extract_gdb_version;\n use crate::util;\n+use crate::{extract_cdb_version, extract_gdb_version};\n \n #[cfg(test)]\n mod tests;\n@@ -105,6 +105,10 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if config.debugger == Some(Debugger::Cdb) && ignore_cdb(config, ln) {\n+                    props.ignore = true;\n+                }\n+\n                 if config.debugger == Some(Debugger::Gdb) && ignore_gdb(config, ln) {\n                     props.ignore = true;\n                 }\n@@ -131,6 +135,21 @@ impl EarlyProps {\n \n         return props;\n \n+        fn ignore_cdb(config: &Config, line: &str) -> bool {\n+            if let Some(actual_version) = config.cdb_version {\n+                if let Some(min_version) = line.strip_prefix(\"min-cdb-version:\").map(str::trim) {\n+                    let min_version = extract_cdb_version(min_version).unwrap_or_else(|| {\n+                        panic!(\"couldn't parse version range: {:?}\", min_version);\n+                    });\n+\n+                    // Ignore if actual version is smaller than the minimum\n+                    // required version\n+                    return actual_version < min_version;\n+                }\n+            }\n+            false\n+        }\n+\n         fn ignore_gdb(config: &Config, line: &str) -> bool {\n             if let Some(actual_version) = config.gdb_version {\n                 if let Some(rest) = line.strip_prefix(\"min-gdb-version:\").map(str::trim) {\n@@ -142,8 +161,8 @@ impl EarlyProps {\n                     if start_ver != end_ver {\n                         panic!(\"Expected single GDB version\")\n                     }\n-                    // Ignore if actual version is smaller the minimum required\n-                    // version\n+                    // Ignore if actual version is smaller than the minimum\n+                    // required version\n                     return actual_version < start_ver;\n                 } else if let Some(rest) = line.strip_prefix(\"ignore-gdb-version:\").map(str::trim) {\n                     let (min_version, max_version) ="}, {"sha": "190a9c6221060fae43425f137d3dde09376e240b", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7cbfbd3ee7b328f57162edbaa92820401b040a03/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbfbd3ee7b328f57162edbaa92820401b040a03/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=7cbfbd3ee7b328f57162edbaa92820401b040a03", "patch": "@@ -163,7 +163,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n \n     let target = opt_str2(matches.opt_str(\"target\"));\n     let android_cross_path = opt_path(matches, \"android-cross-path\");\n-    let cdb = analyze_cdb(matches.opt_str(\"cdb\"), &target);\n+    let (cdb, cdb_version) = analyze_cdb(matches.opt_str(\"cdb\"), &target);\n     let (gdb, gdb_version, gdb_native_rust) =\n         analyze_gdb(matches.opt_str(\"gdb\"), &target, &android_cross_path);\n     let (lldb_version, lldb_native_rust) = matches\n@@ -216,6 +216,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         target,\n         host: opt_str2(matches.opt_str(\"host\")),\n         cdb,\n+        cdb_version,\n         gdb,\n         gdb_version,\n         gdb_native_rust,\n@@ -773,8 +774,30 @@ fn find_cdb(target: &str) -> Option<OsString> {\n }\n \n /// Returns Path to CDB\n-fn analyze_cdb(cdb: Option<String>, target: &str) -> Option<OsString> {\n-    cdb.map(OsString::from).or_else(|| find_cdb(target))\n+fn analyze_cdb(cdb: Option<String>, target: &str) -> (Option<OsString>, Option<[u16; 4]>) {\n+    let cdb = cdb.map(OsString::from).or_else(|| find_cdb(target));\n+\n+    let mut version = None;\n+    if let Some(cdb) = cdb.as_ref() {\n+        if let Ok(output) = Command::new(cdb).arg(\"/version\").output() {\n+            if let Some(first_line) = String::from_utf8_lossy(&output.stdout).lines().next() {\n+                version = extract_cdb_version(&first_line);\n+            }\n+        }\n+    }\n+\n+    (cdb, version)\n+}\n+\n+fn extract_cdb_version(full_version_line: &str) -> Option<[u16; 4]> {\n+    // Example full_version_line: \"cdb version 10.0.18362.1\"\n+    let version = full_version_line.rsplit(' ').next()?;\n+    let mut components = version.split('.');\n+    let major: u16 = components.next().unwrap().parse().unwrap();\n+    let minor: u16 = components.next().unwrap().parse().unwrap();\n+    let patch: u16 = components.next().unwrap_or(\"0\").parse().unwrap();\n+    let build: u16 = components.next().unwrap_or(\"0\").parse().unwrap();\n+    Some([major, minor, patch, build])\n }\n \n /// Returns (Path to GDB, GDB Version, GDB has Rust Support)"}]}