{"sha": "46996326377b100fa461b49b5be0c91a075f55e5", "node_id": "C_kwDOAAsO6NoAKDQ2OTk2MzI2Mzc3YjEwMGZhNDYxYjQ5YjViZTBjOTFhMDc1ZjU1ZTU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-14T12:11:56Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T09:01:44Z"}, "message": "Remove a lock in favor of an AppendOnlyVec", "tree": {"sha": "a0ace8b18309b85eb4579b8ef7fffd164b29ef29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0ace8b18309b85eb4579b8ef7fffd164b29ef29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46996326377b100fa461b49b5be0c91a075f55e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46996326377b100fa461b49b5be0c91a075f55e5", "html_url": "https://github.com/rust-lang/rust/commit/46996326377b100fa461b49b5be0c91a075f55e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46996326377b100fa461b49b5be0c91a075f55e5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daee746771f12f58f707787e8075d9f89ec0511d", "url": "https://api.github.com/repos/rust-lang/rust/commits/daee746771f12f58f707787e8075d9f89ec0511d", "html_url": "https://github.com/rust-lang/rust/commit/daee746771f12f58f707787e8075d9f89ec0511d"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "99de33685f6e0a739bb729caf7d86760c2e5ceee", "filename": "compiler/rustc_data_structures/src/sync/vec.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46996326377b100fa461b49b5be0c91a075f55e5/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46996326377b100fa461b49b5be0c91a075f55e5/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs?ref=46996326377b100fa461b49b5be0c91a075f55e5", "patch": "@@ -2,6 +2,7 @@ use std::marker::PhantomData;\n \n use rustc_index::vec::Idx;\n \n+#[derive(Default)]\n pub struct AppendOnlyIndexVec<I: Idx, T: Copy> {\n     #[cfg(not(parallel_compiler))]\n     vec: elsa::vec::FrozenVec<T>,\n@@ -40,6 +41,7 @@ impl<I: Idx, T: Copy> AppendOnlyIndexVec<I, T> {\n     }\n }\n \n+#[derive(Default)]\n pub struct AppendOnlyVec<T: Copy> {\n     #[cfg(not(parallel_compiler))]\n     vec: elsa::vec::FrozenVec<T>,\n@@ -57,11 +59,14 @@ impl<T: Copy> AppendOnlyVec<T> {\n         }\n     }\n \n-    pub fn push(&self, val: T) {\n+    pub fn push(&self, val: T) -> usize {\n+        #[cfg(not(parallel_compiler))]\n+        let i = self.vec.len();\n         #[cfg(not(parallel_compiler))]\n         self.vec.push(val);\n         #[cfg(parallel_compiler)]\n-        self.vec.push(val)\n+        let i = self.vec.push(val);\n+        i\n     }\n \n     pub fn get(&self, i: usize) -> Option<T> {"}, {"sha": "0e8155afcb4db99b455ffe07248854b02967071f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46996326377b100fa461b49b5be0c91a075f55e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46996326377b100fa461b49b5be0c91a075f55e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=46996326377b100fa461b49b5be0c91a075f55e5", "patch": "@@ -1712,8 +1712,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let stability = tcx.lookup_stability(CRATE_DEF_ID);\n             let macros =\n                 self.lazy_array(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));\n-            let spans = self.tcx.sess.parse_sess.proc_macro_quoted_spans();\n-            for (i, span) in spans.into_iter().enumerate() {\n+            for (i, span) in self.tcx.sess.parse_sess.proc_macro_quoted_spans() {\n                 let span = self.lazy(span);\n                 self.tables.proc_macro_quoted_spans.set_some(i, span);\n             }"}, {"sha": "d80911747f3afdc442c07cd615de90f3b8ece93d", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/46996326377b100fa461b49b5be0c91a075f55e5/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46996326377b100fa461b49b5be0c91a075f55e5/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=46996326377b100fa461b49b5be0c91a075f55e5", "patch": "@@ -8,7 +8,7 @@ use crate::lint::{\n };\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n-use rustc_data_structures::sync::{AtomicBool, Lock, Lrc};\n+use rustc_data_structures::sync::{AppendOnlyVec, AtomicBool, Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n     fallback_fluent_bundle, Diagnostic, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n@@ -219,7 +219,7 @@ pub struct ParseSess {\n     pub assume_incomplete_release: bool,\n     /// Spans passed to `proc_macro::quote_span`. Each span has a numerical\n     /// identifier represented by its position in the vector.\n-    pub proc_macro_quoted_spans: Lock<Vec<Span>>,\n+    pub proc_macro_quoted_spans: AppendOnlyVec<Span>,\n     /// Used to generate new `AttrId`s. Every `AttrId` is unique.\n     pub attr_id_generator: AttrIdGenerator,\n }\n@@ -324,13 +324,16 @@ impl ParseSess {\n     }\n \n     pub fn save_proc_macro_span(&self, span: Span) -> usize {\n-        let mut spans = self.proc_macro_quoted_spans.lock();\n-        spans.push(span);\n-        return spans.len() - 1;\n+        self.proc_macro_quoted_spans.push(span)\n     }\n \n-    pub fn proc_macro_quoted_spans(&self) -> Vec<Span> {\n-        self.proc_macro_quoted_spans.lock().clone()\n+    pub fn proc_macro_quoted_spans(&self) -> impl Iterator<Item = (usize, Span)> + '_ {\n+        // This is equivalent to `.iter().copied().enumerate()`, but that isn't possible for\n+        // AppendOnlyVec, so we resort to this scheme.\n+        (0..)\n+            .map(|i| (i, self.proc_macro_quoted_spans.get(i)))\n+            .take_while(|(_, o)| o.is_some())\n+            .filter_map(|(i, o)| Some((i, o?)))\n     }\n \n     #[track_caller]"}]}