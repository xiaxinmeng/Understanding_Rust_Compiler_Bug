{"sha": "40d23020470db06903589e210c83a4936f22d52a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZDIzMDIwNDcwZGIwNjkwMzU4OWUyMTBjODNhNDkzNmYyMmQ1MmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T21:11:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T21:11:19Z"}, "message": "Auto merge of #85521 - alexcrichton:less-tls-inline, r=Mark-Simulacrum\n\nstd: Don't inline TLS accessor on MinGW\n\nThis is causing [issues] on Cargo's own CI for MinGW and given the\noriginal investigation there's no reason that MinGW should work when\nMSVC doesn't, this this tweaks the MSVC exception to being a Windows exception.\n\n[issues]: https://github.com/rust-lang/cargo/runs/2626676503?check_suite_focus=true#step:9:2453", "tree": {"sha": "afdb6daf15d8ca7c108b2afe177fd470b20562ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afdb6daf15d8ca7c108b2afe177fd470b20562ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40d23020470db06903589e210c83a4936f22d52a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40d23020470db06903589e210c83a4936f22d52a", "html_url": "https://github.com/rust-lang/rust/commit/40d23020470db06903589e210c83a4936f22d52a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40d23020470db06903589e210c83a4936f22d52a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99e3aef02079e9c10583638520cd0c134dc3a01d", "url": "https://api.github.com/repos/rust-lang/rust/commits/99e3aef02079e9c10583638520cd0c134dc3a01d", "html_url": "https://github.com/rust-lang/rust/commit/99e3aef02079e9c10583638520cd0c134dc3a01d"}, {"sha": "75df635cb87b53f668f92d2a3545e25ee6000b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/75df635cb87b53f668f92d2a3545e25ee6000b95", "html_url": "https://github.com/rust-lang/rust/commit/75df635cb87b53f668f92d2a3545e25ee6000b95"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "e62f4440b369c7ebec1f144aa459f2f48a92a9c4", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/40d23020470db06903589e210c83a4936f22d52a/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d23020470db06903589e210c83a4936f22d52a/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=40d23020470db06903589e210c83a4936f22d52a", "patch": "@@ -162,7 +162,7 @@ macro_rules! thread_local {\n macro_rules! __thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(target_env = \"msvc\"), inline)] // see comments below\n+        #[cfg_attr(not(windows), inline)] // see comments below\n         unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n             const _REQUIRE_UNSTABLE: () = $crate::thread::require_unstable_const_init_thread_local();\n \n@@ -262,28 +262,28 @@ macro_rules! __thread_local_inner {\n             fn __init() -> $t { $init }\n \n             // When reading this function you might ask \"why is this inlined\n-            // everywhere other than MSVC?\", and that's a very reasonable\n+            // everywhere other than Windows?\", and that's a very reasonable\n             // question to ask. The short story is that it segfaults rustc if\n-            // this function is inlined. The longer story is that MSVC looks to\n-            // not support `extern` references to thread locals across DLL\n+            // this function is inlined. The longer story is that Windows looks\n+            // to not support `extern` references to thread locals across DLL\n             // boundaries. This appears to at least not be supported in the ABI\n             // that LLVM implements.\n             //\n-            // Because of this we never inline on MVSC, but we do inline on\n+            // Because of this we never inline on Windows, but we do inline on\n             // other platforms (where external references to thread locals\n             // across DLLs are supported). A better fix for this would be to\n-            // inline this function on MSVC, but only for \"statically linked\"\n+            // inline this function on Windows, but only for \"statically linked\"\n             // components. For example if two separately compiled rlibs end up\n             // getting linked into a DLL then it's fine to inline this function\n             // across that boundary. It's only not fine to inline this function\n-            // across a DLL boundary. Unfortunately rustc doesn't currently have\n-            // this sort of logic available in an attribute, and it's not clear\n-            // that rustc is even equipped to answer this (it's more of a Cargo\n-            // question kinda). This means that, unfortunately, MSVC gets the\n-            // pessimistic path for now where it's never inlined.\n+            // across a DLL boundary. Unfortunately rustc doesn't currently\n+            // have this sort of logic available in an attribute, and it's not\n+            // clear that rustc is even equipped to answer this (it's more of a\n+            // Cargo question kinda). This means that, unfortunately, Windows\n+            // gets the pessimistic path for now where it's never inlined.\n             //\n-            // The issue of \"should enable on MSVC sometimes\" is #84933\n-            #[cfg_attr(not(target_env = \"msvc\"), inline)]\n+            // The issue of \"should enable on Windows sometimes\" is #84933\n+            #[cfg_attr(not(windows), inline)]\n             unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n                 #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n                 static __KEY: $crate::thread::__StaticLocalKeyInner<$t> ="}]}