{"sha": "e24829909adeccf4b40ab362d48cab4c5f1178dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNDgyOTkwOWFkZWNjZjRiNDBhYjM2MmQ0OGNhYjRjNWYxMTc4ZGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-02T13:06:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-02T13:06:14Z"}, "message": "Merge #2982\n\n2982: Merge imports when auto importing r=flodiebold a=SomeoneToIgnore\n\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "2cb1799491dd5a0f408ad749fbe27c565b0cfa7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb1799491dd5a0f408ad749fbe27c565b0cfa7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24829909adeccf4b40ab362d48cab4c5f1178dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeNslGCRBK7hj4Ov3rIwAAdHIIAFzUutB+GS+1qfkEIzTrb71d\nobLZv+b9v9cL4yCEKgRamctjA3s4SySCyXuQzUFkSAx7N05iC73idmRJLI+J4s2c\ne4SifjHS72gCfjD6mXgZ/Z8QCKC9mS7/i5P6OfBX7Cd3Rcq6uBvnhHKhiEvz7Y/C\nf0tjTIHp2qRclSffWBIEih5T25H7vVB1Tz/QkFtFp351P4go0a6ILwo6FDiuN92t\nfOzoPE2XtFKJdRGz3lshOEnBleOGaoy2ugz3rYts8o5ZUA+9MiPzXKf4liVbv8Ip\nti5u/IxFRcxYuslocVV4YeV5oivbGcx4o1E4VBJDyVH0PBJwglDdT346MqEDQfE=\n=z89T\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cb1799491dd5a0f408ad749fbe27c565b0cfa7f\nparent dce7dc44be948bb6b73b79ce284ec2eb83811ae8\nparent 2ee94e3e24a8cda1594eadba9c64a553ec046818\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580648774 +0000\ncommitter GitHub <noreply@github.com> 1580648774 +0000\n\nMerge #2982\n\n2982: Merge imports when auto importing r=flodiebold a=SomeoneToIgnore\n\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24829909adeccf4b40ab362d48cab4c5f1178dc", "html_url": "https://github.com/rust-lang/rust/commit/e24829909adeccf4b40ab362d48cab4c5f1178dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24829909adeccf4b40ab362d48cab4c5f1178dc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dce7dc44be948bb6b73b79ce284ec2eb83811ae8", "html_url": "https://github.com/rust-lang/rust/commit/dce7dc44be948bb6b73b79ce284ec2eb83811ae8"}, {"sha": "2ee94e3e24a8cda1594eadba9c64a553ec046818", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee94e3e24a8cda1594eadba9c64a553ec046818", "html_url": "https://github.com/rust-lang/rust/commit/2ee94e3e24a8cda1594eadba9c64a553ec046818"}], "stats": {"total": 132, "additions": 90, "deletions": 42}, "files": [{"sha": "fc038df78c6f75fe59e3e3398cfe67aaf1ec40d2", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=e24829909adeccf4b40ab362d48cab4c5f1178dc", "patch": "@@ -1,4 +1,4 @@\n-use hir::{self, db::HirDatabase};\n+use hir::{self, db::HirDatabase, ModPath};\n use ra_syntax::{\n     ast::{self, NameOwner},\n     AstNode, Direction, SmolStr,\n@@ -20,10 +20,10 @@ pub fn auto_import_text_edit(\n     position: &SyntaxNode,\n     // The statement to use as anchor (last resort)\n     anchor: &SyntaxNode,\n-    // The path to import as a sequence of strings\n-    target: &[SmolStr],\n+    path_to_import: &ModPath,\n     edit: &mut TextEditBuilder,\n ) {\n+    let target = path_to_import.to_string().split(\"::\").map(SmolStr::new).collect::<Vec<_>>();\n     let container = position.ancestors().find_map(|n| {\n         if let Some(module) = ast::Module::cast(n.clone()) {\n             return module.item_list().map(|it| it.syntax().clone());\n@@ -32,8 +32,8 @@ pub fn auto_import_text_edit(\n     });\n \n     if let Some(container) = container {\n-        let action = best_action_for_target(container, anchor.clone(), target);\n-        make_assist(&action, target, edit);\n+        let action = best_action_for_target(container, anchor.clone(), &target);\n+        make_assist(&action, &target, edit);\n     }\n }\n "}, {"sha": "2629f00e6bdc75cc8fd75e81909665f77f34d237", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=e24829909adeccf4b40ab362d48cab4c5f1178dc", "patch": "@@ -1,7 +1,6 @@\n-use hir::db::HirDatabase;\n+use hir::{db::HirDatabase, ModPath};\n use ra_syntax::{\n     ast::{self, AstNode},\n-    SmolStr,\n     SyntaxKind::USE_ITEM,\n     SyntaxNode,\n };\n@@ -58,7 +57,6 @@ pub(crate) fn auto_import<F: ImportsLocator>(\n         .filter_map(|module_def| module_with_name_to_import.find_use_path(ctx.db, module_def))\n         .filter(|use_path| !use_path.segments.is_empty())\n         .take(20)\n-        .map(|import| import.to_string())\n         .collect::<std::collections::BTreeSet<_>>();\n     if proposed_imports.is_empty() {\n         return None;\n@@ -76,15 +74,10 @@ pub(crate) fn auto_import<F: ImportsLocator>(\n     )\n }\n \n-fn import_to_action(import: String, position: &SyntaxNode, anchor: &SyntaxNode) -> ActionBuilder {\n+fn import_to_action(import: ModPath, position: &SyntaxNode, anchor: &SyntaxNode) -> ActionBuilder {\n     let mut action_builder = ActionBuilder::default();\n     action_builder.label(format!(\"Import `{}`\", &import));\n-    auto_import_text_edit(\n-        position,\n-        anchor,\n-        &[SmolStr::new(import)],\n-        action_builder.text_edit_builder(),\n-    );\n+    auto_import_text_edit(position, anchor, &import, action_builder.text_edit_builder());\n     action_builder\n }\n \n@@ -120,6 +113,34 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn auto_imports_are_merged() {\n+        check_assist_with_imports_locator(\n+            auto_import,\n+            TestImportsLocator::new,\n+            r\"\n+            use PubMod::PubStruct1;\n+\n+            PubStruct2<|>\n+\n+            pub mod PubMod {\n+                pub struct PubStruct1;\n+                pub struct PubStruct2;\n+            }\n+            \",\n+            r\"\n+            use PubMod::{PubStruct2, PubStruct1};\n+\n+            PubStruct2<|>\n+\n+            pub mod PubMod {\n+                pub struct PubStruct1;\n+                pub struct PubStruct2;\n+            }\n+            \",\n+        );\n+    }\n+\n     #[test]\n     fn applicable_when_found_multiple_imports() {\n         check_assist_with_imports_locator("}, {"sha": "ea06a4a5862161133db5c830ed37c39b9e0b00bb", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=e24829909adeccf4b40ab362d48cab4c5f1178dc", "patch": "@@ -59,6 +59,7 @@ pub use hir_def::{\n     ModuleDefId, // FIXME this is exposed and should be used for implementing the `TestImportsLocator` in `ra_assists` only, should be removed later along with the trait and the implementation.\n };\n pub use hir_expand::{\n-    name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n+    name::{name, Name},\n+    HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n };\n pub use hir_ty::{display::HirDisplay, CallableDef};"}, {"sha": "a150b899f2c436cf74a489b0d332e8df344b86ce", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=e24829909adeccf4b40ab362d48cab4c5f1178dc", "patch": "@@ -16,13 +16,13 @@ use ra_syntax::ast;\n \n use crate::{type_ref::TypeRef, InFile};\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct ModPath {\n     pub kind: PathKind,\n     pub segments: Vec<Name>,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum PathKind {\n     Plain,\n     /// `self::` is `Super(0)`"}, {"sha": "133805bdbb0cc08fcbd2b5834d308aafe70425c6", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=e24829909adeccf4b40ab362d48cab4c5f1178dc", "patch": "@@ -187,6 +187,13 @@ pub mod known {\n         PartialOrd,\n         Eq,\n         PartialEq,\n+        // FIXME delete those after `ImportResolver` is removed.\n+        hash,\n+        fmt,\n+        io,\n+        Display,\n+        Iterator,\n+        Hasher,\n     );\n \n     // self/Self cannot be used as an identifier"}, {"sha": "64b04ec2b679cba3c487dae76b767c10e0d20eac", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24829909adeccf4b40ab362d48cab4c5f1178dc/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=e24829909adeccf4b40ab362d48cab4c5f1178dc", "patch": "@@ -6,6 +6,7 @@ use ra_text_edit::TextEditBuilder;\n use rustc_hash::FxHashMap;\n \n use crate::completion::{CompletionContext, CompletionItem, CompletionKind, Completions};\n+use hir::{ModPath, PathKind};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n@@ -54,58 +55,76 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n }\n \n-fn build_import_label(name: &str, path: &[SmolStr]) -> String {\n+fn build_import_label(name: &str, path: &ModPath) -> String {\n     let mut buf = String::with_capacity(64);\n     buf.push_str(name);\n     buf.push_str(\" (\");\n-    fmt_import_path(path, &mut buf);\n+    buf.push_str(&path.to_string());\n     buf.push_str(\")\");\n     buf\n }\n \n-fn fmt_import_path(path: &[SmolStr], buf: &mut String) {\n-    let mut segments = path.iter();\n-    if let Some(s) = segments.next() {\n-        buf.push_str(&s);\n-    }\n-    for s in segments {\n-        buf.push_str(\"::\");\n-        buf.push_str(&s);\n-    }\n-}\n-\n #[derive(Debug, Clone, Default)]\n pub(crate) struct ImportResolver {\n     // todo: use fst crate or something like that\n-    dummy_names: Vec<(SmolStr, Vec<SmolStr>)>,\n+    dummy_names: Vec<(SmolStr, ModPath)>,\n }\n \n impl ImportResolver {\n     pub(crate) fn new() -> Self {\n+        use hir::name;\n+\n         let dummy_names = vec![\n-            (SmolStr::new(\"fmt\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"fmt\")]),\n-            (SmolStr::new(\"io\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"io\")]),\n-            (SmolStr::new(\"iter\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"iter\")]),\n-            (SmolStr::new(\"hash\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"hash\")]),\n+            (\n+                SmolStr::new(\"fmt\"),\n+                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![fmt]] },\n+            ),\n+            (\n+                SmolStr::new(\"io\"),\n+                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![io]] },\n+            ),\n+            (\n+                SmolStr::new(\"iter\"),\n+                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![iter]] },\n+            ),\n+            (\n+                SmolStr::new(\"hash\"),\n+                ModPath { kind: PathKind::Plain, segments: vec![name![std], name![hash]] },\n+            ),\n             (\n                 SmolStr::new(\"Debug\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"fmt\"), SmolStr::new(\"Debug\")],\n+                ModPath {\n+                    kind: PathKind::Plain,\n+                    segments: vec![name![std], name![fmt], name![Debug]],\n+                },\n             ),\n             (\n                 SmolStr::new(\"Display\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"fmt\"), SmolStr::new(\"Display\")],\n+                ModPath {\n+                    kind: PathKind::Plain,\n+                    segments: vec![name![std], name![fmt], name![Display]],\n+                },\n             ),\n             (\n                 SmolStr::new(\"Hash\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"hash\"), SmolStr::new(\"Hash\")],\n+                ModPath {\n+                    kind: PathKind::Plain,\n+                    segments: vec![name![std], name![hash], name![Hash]],\n+                },\n             ),\n             (\n                 SmolStr::new(\"Hasher\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"hash\"), SmolStr::new(\"Hasher\")],\n+                ModPath {\n+                    kind: PathKind::Plain,\n+                    segments: vec![name![std], name![hash], name![Hasher]],\n+                },\n             ),\n             (\n                 SmolStr::new(\"Iterator\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"iter\"), SmolStr::new(\"Iterator\")],\n+                ModPath {\n+                    kind: PathKind::Plain,\n+                    segments: vec![name![std], name![iter], name![Iterator]],\n+                },\n             ),\n         ];\n \n@@ -115,7 +134,7 @@ impl ImportResolver {\n     // Returns a map of importable items filtered by name.\n     // The map associates item name with its full path.\n     // todo: should return Resolutions\n-    pub(crate) fn all_names(&self, name: &str) -> FxHashMap<SmolStr, Vec<SmolStr>> {\n+    pub(crate) fn all_names(&self, name: &str) -> FxHashMap<SmolStr, ModPath> {\n         if name.len() > 1 {\n             self.dummy_names.iter().filter(|(n, _)| n.contains(name)).cloned().collect()\n         } else {"}]}