{"sha": "e857fabac138a7f21cd8be4ad55dad9d51ee7422", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTdmYWJhYzEzOGE3ZjIxY2Q4YmU0YWQ1NWRhZDlkNTFlZTc0MjI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-01T21:29:15Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-18T01:41:33Z"}, "message": "Querify `fn_abi_of_{fn_ptr,instance}`.", "tree": {"sha": "b53d31d79040d146d9bdf9529df2b7acd083c173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b53d31d79040d146d9bdf9529df2b7acd083c173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e857fabac138a7f21cd8be4ad55dad9d51ee7422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e857fabac138a7f21cd8be4ad55dad9d51ee7422", "html_url": "https://github.com/rust-lang/rust/commit/e857fabac138a7f21cd8be4ad55dad9d51ee7422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e857fabac138a7f21cd8be4ad55dad9d51ee7422/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "849b4c448339c70785078860f17b50b1c09a037b", "url": "https://api.github.com/repos/rust-lang/rust/commits/849b4c448339c70785078860f17b50b1c09a037b", "html_url": "https://github.com/rust-lang/rust/commit/849b4c448339c70785078860f17b50b1c09a037b"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "15bb90678059daa9be2156909d3b127a9805dfb1", "filename": "src/abi/mod.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e857fabac138a7f21cd8be4ad55dad9d51ee7422/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857fabac138a7f21cd8be4ad55dad9d51ee7422/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=e857fabac138a7f21cd8be4ad55dad9d51ee7422", "patch": "@@ -53,7 +53,11 @@ pub(crate) fn get_function_sig<'tcx>(\n     inst: Instance<'tcx>,\n ) -> Signature {\n     assert!(!inst.substs.needs_infer());\n-    clif_sig_from_fn_abi(tcx, triple, &RevealAllLayoutCx(tcx).fn_abi_of_instance(inst, &[]))\n+    clif_sig_from_fn_abi(\n+        tcx,\n+        triple,\n+        &RevealAllLayoutCx(tcx).fn_abi_of_instance(inst, ty::List::empty()),\n+    )\n }\n \n /// Instance must be monomorphized\n@@ -350,14 +354,13 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     };\n \n     let extra_args = &args[fn_sig.inputs().len()..];\n-    let extra_args = extra_args\n-        .iter()\n-        .map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx)))\n-        .collect::<Vec<_>>();\n+    let extra_args = fx\n+        .tcx\n+        .mk_type_list(extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))));\n     let fn_abi = if let Some(instance) = instance {\n-        RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, extra_args)\n     } else {\n-        RevealAllLayoutCx(fx.tcx).fn_abi_of_fn_ptr(fn_ty.fn_sig(fx.tcx), &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_fn_ptr(fn_ty.fn_sig(fx.tcx), extra_args)\n     };\n \n     let is_cold = instance\n@@ -525,7 +528,8 @@ pub(crate) fn codegen_drop<'tcx>(\n                     def: ty::InstanceDef::Virtual(drop_instance.def_id(), 0),\n                     substs: drop_instance.substs,\n                 };\n-                let fn_abi = RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(virtual_drop, &[]);\n+                let fn_abi =\n+                    RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(virtual_drop, ty::List::empty());\n \n                 let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n                 let sig = fx.bcx.import_signature(sig);\n@@ -534,7 +538,8 @@ pub(crate) fn codegen_drop<'tcx>(\n             _ => {\n                 assert!(!matches!(drop_instance.def, InstanceDef::Virtual(_, _)));\n \n-                let fn_abi = RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(drop_instance, &[]);\n+                let fn_abi =\n+                    RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(drop_instance, ty::List::empty());\n \n                 let arg_value = drop_place.place_ref(\n                     fx,"}, {"sha": "d8fa2c769046827fa36c332f1e5d71047ef68507", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e857fabac138a7f21cd8be4ad55dad9d51ee7422/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857fabac138a7f21cd8be4ad55dad9d51ee7422/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=e857fabac138a7f21cd8be4ad55dad9d51ee7422", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn codegen_fn<'tcx>(\n         instance,\n         symbol_name,\n         mir,\n-        fn_abi: Some(RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, &[])),\n+        fn_abi: Some(RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, ty::List::empty())),\n \n         bcx,\n         block_map,"}, {"sha": "0e84681d9ad94f4c40db9dcff7854c22f6017dd9", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857fabac138a7f21cd8be4ad55dad9d51ee7422/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857fabac138a7f21cd8be4ad55dad9d51ee7422/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=e857fabac138a7f21cd8be4ad55dad9d51ee7422", "patch": "@@ -276,7 +276,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n         &self,\n         err: FnAbiError<'tcx>,\n         span: Span,\n-        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         RevealAllLayoutCx(self.tcx).handle_fn_abi_err(err, span, fn_abi_request)\n     }\n@@ -402,7 +402,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n         &self,\n         err: FnAbiError<'tcx>,\n         span: Span,\n-        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n             self.0.sess.span_fatal(span, &err.to_string())"}, {"sha": "ec846d71960b89863e7cb49e0d9eddf30d5a04fe", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e857fabac138a7f21cd8be4ad55dad9d51ee7422/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857fabac138a7f21cd8be4ad55dad9d51ee7422/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=e857fabac138a7f21cd8be4ad55dad9d51ee7422", "patch": "@@ -80,7 +80,10 @@ impl CommentWriter {\n             vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).name),\n                 format!(\"instance {:?}\", instance),\n-                format!(\"abi {:?}\", RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, &[])),\n+                format!(\n+                    \"abi {:?}\",\n+                    RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, ty::List::empty())\n+                ),\n                 String::new(),\n             ]\n         } else {"}]}