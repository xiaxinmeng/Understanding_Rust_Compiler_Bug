{"sha": "a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "node_id": "C_kwDOAAsO6NoAKGE0ZWYyZjVmY2FkYTg5ZDRhYTU2YjY4ZTM0ZGE5MWY2Y2Q0MDhlNjM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-01T11:18:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-02T16:46:56Z"}, "message": "Make ConstProp tests unit.", "tree": {"sha": "e1bfa2592c0a1f54661b2e782b2a6a26bf78faab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1bfa2592c0a1f54661b2e782b2a6a26bf78faab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "html_url": "https://github.com/rust-lang/rust/commit/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c33e47a495fbd7b22bce9ce32f2815991bc414", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c33e47a495fbd7b22bce9ce32f2815991bc414", "html_url": "https://github.com/rust-lang/rust/commit/98c33e47a495fbd7b22bce9ce32f2815991bc414"}], "stats": {"total": 283, "additions": 177, "deletions": 106}, "files": [{"sha": "85d6b5e3d003e76a558443037e77b7506435cf94", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -18,29 +18,35 @@\n       }\n   \n       bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n           _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n--         _4 = Eq(_1, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+-         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+-         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb1: {\n--         _5 = Eq(_1, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _1) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb2: {\n--         _2 = Rem(const 1_i32, _1);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+          _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:+0:11: +3:2\n           StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n       }\n   }"}, {"sha": "93d558250eaf172e390d1c0f8d0d3d1e8af272ad", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: ConstProp\n // ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR bad_op_mod_by_zero.main.ConstProp.diff\n #[allow(unconditional_panic)]"}, {"sha": "f63ee705d92a6daa6f0b1c79fecb69415ea0236a", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -6,44 +6,49 @@\n       let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n       let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _5: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _6: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           scope 2 {\n-              let _4: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               scope 3 {\n-                  debug _b => _4;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               }\n           }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:9:25: 9:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _7 = Lt(_5, _6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _7 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(const false, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _7 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {\n-          _4 = (*_1)[_5];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          StorageDead(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n       }"}, {"sha": "f63ee705d92a6daa6f0b1c79fecb69415ea0236a", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -6,44 +6,49 @@\n       let _1: *const [i32];                // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n       let mut _2: *const [i32; 3];         // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       let _3: &[i32; 3];                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-      let _5: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-      let mut _6: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _7: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-      let mut _8: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+      let _4: [i32; 3];                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:26: +1:35\n+      let _6: usize;                       // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+      let mut _7: usize;                   // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _8: bool;                    // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+      let mut _9: &[i32; 3];               // in scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           scope 2 {\n-              let _4: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+              let _5: i32;                 // in scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               scope 3 {\n-                  debug _b => _4;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+                  debug _b => _5;          // in scope 3 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n               }\n           }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n-                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n+                                           // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:9:25: 9:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _3 = &(*_9);                     // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n-          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         _7 = Lt(_5, _6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n--         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _7 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(const false, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n+          StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n+          StorageLive(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n+          _7 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _8 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {\n-          _4 = (*_1)[_5];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n-          StorageDead(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n+          _5 = (*_1)[_6];                  // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          StorageDead(_6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:25: +3:26\n+          _0 = const ();                   // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+2:5: +4:6\n+          StorageDead(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+4:5: +4:6\n           StorageDead(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+5:2: +5:2\n       }"}, {"sha": "ef148d16dc2f78d55c11b033916eaadded85d138", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,4 +1,7 @@\n+// unit-test: ConstProp\n // ignore-wasm32 compiled with panic=abort by default\n+// compile-flags: -Zmir-enable-passes=+NormalizeArrayLen\n+\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR bad_op_unsafe_oob_for_slices.main.ConstProp.diff\n #[allow(unconditional_panic)]"}, {"sha": "1752d222fe73522da1854b58251aeda5533ec447", "filename": "tests/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -7,13 +7,17 @@\n       let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:+6:34: +6:63\n       let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:+13:25: +13:59\n       let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:+13:34: +13:55\n+      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:+20:35: +20:73\n+      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:+20:44: +20:65\n       scope 1 {\n           debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:+6:9: +6:22\n           let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n           scope 3 {\n               debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n+              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n               scope 5 {\n                   debug _enum_without_variants => const [ZeroSized: Empty]; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n+                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n                   scope 7 {\n                       debug _non_utf8_str => const Str::<\"\ufffd\ufffd\ufffd\">; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n                   }\n@@ -39,17 +43,25 @@\n           StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n           _5 = InvalidTag { int: const 4_u32 }; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n -         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n--         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n +         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n +                                          // mir::Constant\n +                                          // + span: no-location\n +                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n-+         _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n-+                                          // mir::Constant\n-+                                          // + span: no-location\n-+                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n+          _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n           StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n           StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n+          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n+          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          _8 = NoVariants { int: const 0_u32 }; // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          nop;                             // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n+          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n+          nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n+          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n+          nop;                             // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+          nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n+          nop;                             // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          nop;                             // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n           StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n           StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n           return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2"}, {"sha": "bdbc5a1990ea9cdbeaba02854c3515be95c21cf7", "filename": "tests/mir-opt/const_prop/invalid_constant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: ConstProp\n+// compile-flags: -Zmir-enable-passes=+RemoveZsts\n // Verify that we can pretty print invalid constants.\n \n #![feature(adt_const_params)]"}, {"sha": "36336d967a9d6894c51d3481628149c5bb0044ec", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -18,17 +18,19 @@\n           _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n           StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n           _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         _4 = Len(_2);                    // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n -         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n +         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n       }\n   \n       bb1: {\n           _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n           StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n           StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n           StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n       }"}, {"sha": "36336d967a9d6894c51d3481628149c5bb0044ec", "filename": "tests/mir-opt/const_prop/large_array_index.main.ConstProp.64bit.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.64bit.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -18,17 +18,19 @@\n           _2 = [const 0_u8; 5000];         // scope 0 at $DIR/large_array_index.rs:+2:17: +2:29\n           StorageLive(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n           _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:+2:30: +2:31\n-          _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n+-         _4 = Len(_2);                    // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n -         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n +         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n       }\n   \n       bb1: {\n           _1 = _2[_3];                     // scope 0 at $DIR/large_array_index.rs:+2:17: +2:32\n           StorageDead(_3);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n           StorageDead(_2);                 // scope 0 at $DIR/large_array_index.rs:+2:32: +2:33\n+          _0 = const ();                   // scope 0 at $DIR/large_array_index.rs:+0:11: +3:2\n           StorageDead(_1);                 // scope 0 at $DIR/large_array_index.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/large_array_index.rs:+3:2: +3:2\n       }"}, {"sha": "0876445bf2cebff814ef8820d674d678896b0ae3", "filename": "tests/mir-opt/const_prop/large_array_index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Flarge_array_index.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,4 +1,6 @@\n+// unit-test: ConstProp\n // ignore-wasm32 compiled with panic=abort by default\n+// compile-flags: -Zmir-enable-passes=+NormalizeArrayLen\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n // EMIT_MIR large_array_index.main.ConstProp.diff"}, {"sha": "077b9bf830419fda313e0f027aa3deed61a4786f", "filename": "tests/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -3,21 +3,26 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +0:11\n-      let mut _1: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-      let mut _2: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+      let mut _1: *const fn();             // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n+      let mut _2: usize;                   // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+      let mut _3: fn();                    // in scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n-          _2 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+          StorageLive(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n+          StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+          StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n+          _3 = main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:17\n                                            // mir::Constant\n-                                           // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n+                                           // + span: $DIR/reify_fn_ptr.rs:5:13: 5:17\n                                            // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n-          _1 = move _2 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n-          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:25: +1:26\n-          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:40: +1:41\n+          _2 = move _3 as usize (PointerExposeAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:26\n+          StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:25: +1:26\n+          _1 = move _2 as *const fn() (PointerFromExposedAddress); // scope 0 at $DIR/reify_fn_ptr.rs:+1:13: +1:41\n+          StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:40: +1:41\n+          StorageDead(_1);                 // scope 0 at $DIR/reify_fn_ptr.rs:+1:41: +1:42\n+          _0 = const ();                   // scope 0 at $DIR/reify_fn_ptr.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/reify_fn_ptr.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "5f63820669b308019ce864298976880b10aa0854", "filename": "tests/mir-opt/const_prop/reify_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: ConstProp\n // EMIT_MIR reify_fn_ptr.main.ConstProp.diff\n \n fn main() {"}, {"sha": "6641220db69665f6dde54637c8d1c9761c38a877", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -20,11 +20,12 @@\n           _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n -         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n -         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n +         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       }\n   \n       bb1: {\n@@ -35,6 +36,7 @@\n           StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n       }"}, {"sha": "6641220db69665f6dde54637c8d1c9761c38a877", "filename": "tests/mir-opt/const_prop/repeat.main.ConstProp.64bit.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.64bit.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -20,11 +20,12 @@\n           _3 = [const 42_u32; 8];          // scope 0 at $DIR/repeat.rs:+1:18: +1:25\n           StorageLive(_4);                 // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:+1:26: +1:27\n-          _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n+-         _5 = Len(_3);                    // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n -         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n -         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n +         _6 = const true;                 // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:+1:18: +1:28\n       }\n   \n       bb1: {\n@@ -35,6 +36,7 @@\n           StorageDead(_2);                 // scope 0 at $DIR/repeat.rs:+1:31: +1:32\n           StorageDead(_4);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n           StorageDead(_3);                 // scope 0 at $DIR/repeat.rs:+1:32: +1:33\n+          _0 = const ();                   // scope 0 at $DIR/repeat.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/repeat.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/repeat.rs:+2:2: +2:2\n       }"}, {"sha": "9c11dbc5b669431d84db31e870d133d6346afab0", "filename": "tests/mir-opt/const_prop/repeat.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Frepeat.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,7 +1,8 @@\n+// unit-test: ConstProp\n // ignore-wasm32 compiled with panic=abort by default\n-// compile-flags: -O\n-\n+// compile-flags: -Zmir-enable-passes=+NormalizeArrayLen\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n // EMIT_MIR repeat.main.ConstProp.diff\n fn main() {\n     let x: u32 = [42; 8][2] + 0;"}, {"sha": "b12d84fa4790ab02059b01692cdfc246b83efc29", "filename": "tests/mir-opt/const_prop/return_place.add.PreCodegen.before.mir", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.add.PreCodegen.before.mir?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -2,8 +2,14 @@\n \n fn add() -> u32 {\n     let mut _0: u32;                     // return place in scope 0 at $DIR/return_place.rs:+0:13: +0:16\n+    let mut _1: (u32, bool);             // in scope 0 at $DIR/return_place.rs:+1:5: +1:10\n \n     bb0: {\n+        _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+        assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n+    }\n+\n+    bb1: {\n         _0 = const 4_u32;                // scope 0 at $DIR/return_place.rs:+1:5: +1:10\n         return;                          // scope 0 at $DIR/return_place.rs:+2:2: +2:2\n     }"}, {"sha": "0e68309f036d4da13f87025f726f3ab8ac2744fd", "filename": "tests/mir-opt/const_prop/return_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Freturn_place.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: ConstProp\n // ignore-wasm32 compiled with panic=abort by default\n // compile-flags: -C overflow-checks=on\n "}, {"sha": "c2f97a0f62219768d6295a1c01da1979698d4d78", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -11,15 +11,23 @@\n       }\n   \n       bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n           _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n--         _2 = consume(_1) -> bb1;         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-+         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+          StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n+          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+-         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n++         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+          _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n                                            // mir::Constant\n-                                           // + span: $DIR/scalar_literal_propagation.rs:5:5: 5:12\n+                                           // + span: $DIR/scalar_literal_propagation.rs:6:5: 6:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n+          StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n+          _0 = const ();                   // scope 0 at $DIR/scalar_literal_propagation.rs:+0:11: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n       }\n   }"}, {"sha": "fc33cc2d021f1ef8041326a338c85f36678101b9", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: ConstProp\n // ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR scalar_literal_propagation.main.ConstProp.diff\n fn main() {"}, {"sha": "664b7839ffc28fb5bbde0633c424cd16ea54cb7f", "filename": "tests/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -15,14 +15,14 @@\n       bb1: {\n           _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:10:14: 10:17\n+                                           // + span: $DIR/switch_int.rs:12:14: 12:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + span: $DIR/switch_int.rs:11:14: 11:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "ef2c4d5faa613e068bb0d28a828af36bb2580b1d", "filename": "tests/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -15,14 +15,14 @@\n       bb1: {\n           _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:+3:14: +3:21\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:10:14: 10:17\n+                                           // + span: $DIR/switch_int.rs:12:14: 12:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:+2:14: +2:20\n                                            // mir::Constant\n-                                           // + span: $DIR/switch_int.rs:9:14: 9:17\n+                                           // + span: $DIR/switch_int.rs:11:14: 11:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "7158ea4d2bd92ecec53a71950a25be59e4fcdf12", "filename": "tests/mir-opt/const_prop/switch_int.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: ConstProp\n+// compile-flags: -Zmir-enable-passes=+SimplifyConstCondition-after-const-prop\n // ignore-wasm32 compiled with panic=abort by default\n #[inline(never)]\n fn foo(_: i32) { }"}, {"sha": "e4a7c0d1e72044bac22b311438f8badd47d3ffb8", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -11,15 +11,24 @@\n       }\n   \n       bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+1:9: +1:10\n -         _1 = (const 1_u32, const 2_u32); // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n +         _1 = const (1_u32, 2_u32);       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-          _2 = consume(_1) -> bb1;         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+          StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n+          StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+-         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n++         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:+3:13: +3:14\n+          _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n                                            // mir::Constant\n-                                           // + span: $DIR/tuple_literal_propagation.rs:6:5: 6:12\n+                                           // + span: $DIR/tuple_literal_propagation.rs:7:5: 7:12\n                                            // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n+          StorageDead(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:14: +3:15\n+          StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n+          _0 = const ();                   // scope 0 at $DIR/tuple_literal_propagation.rs:+0:11: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "f342ae2700e24aaf3163f7ee66fef0569b597eab", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: ConstProp\n // ignore-wasm32 compiled with panic=abort by default\n // EMIT_MIR tuple_literal_propagation.main.ConstProp.diff\n fn main() {"}, {"sha": "37732421870abfb23c33a82f84dbae6a52ce99b1", "filename": "tests/mir-opt/const_prop/while_let_loops.change_loop_body.ConstProp.diff", "status": "renamed", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fwhile_let_loops.change_loop_body.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fwhile_let_loops.change_loop_body.ConstProp.diff?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -4,8 +4,13 @@\n   fn change_loop_body() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:+0:27: +0:27\n       let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-      let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:+2:28: +2:32\n-      let mut _3: isize;                   // in scope 0 at $DIR/while_let_loops.rs:+2:15: +2:25\n+      let mut _2: ();                      // in scope 0 at $DIR/while_let_loops.rs:+0:1: +6:2\n+      let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:+2:28: +2:32\n+      let mut _4: isize;                   // in scope 0 at $DIR/while_let_loops.rs:+2:15: +2:25\n+      let mut _5: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:33: +5:6\n+      let mut _6: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n+      let _7: ();                          // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n+      let mut _8: !;                       // in scope 0 at $DIR/while_let_loops.rs:+2:5: +5:6\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:+1:9: +1:15\n           scope 2 {\n@@ -15,29 +20,33 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:+1:18: +1:19\n-          StorageLive(_2);                 // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n-          _2 = Option::<u32>::None;        // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n--         _3 = discriminant(_2);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n--         switchInt(move _3) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n-+         _3 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+          StorageLive(_3);                 // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n+          _3 = Option::<u32>::None;        // scope 2 at $DIR/while_let_loops.rs:+2:28: +2:32\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+-         switchInt(move _4) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n++         _4 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n +         switchInt(const 0_isize) -> [1: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n       }\n   \n       bb1: {\n-          switchInt(((_2 as Some).0: u32)) -> [0: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n+          switchInt(((_3 as Some).0: u32)) -> [0: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:+2:15: +2:25\n       }\n   \n       bb2: {\n           _1 = const 1_i32;                // scope 2 at $DIR/while_let_loops.rs:+3:9: +3:15\n+          _0 = const ();                   // scope 2 at $DIR/while_let_loops.rs:+4:9: +4:14\n           goto -> bb4;                     // scope 2 at $DIR/while_let_loops.rs:+4:9: +4:14\n       }\n   \n       bb3: {\n+          StorageLive(_7);                 // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n+          _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:+2:5: +5:6\n+          StorageDead(_7);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n           goto -> bb4;                     // scope 1 at no-location\n       }\n   \n       bb4: {\n-          StorageDead(_2);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n+          StorageDead(_3);                 // scope 1 at $DIR/while_let_loops.rs:+5:5: +5:6\n           StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/while_let_loops.rs:+6:2: +6:2\n       }", "previous_filename": "tests/mir-opt/while_let_loops.change_loop_body.ConstProp.diff"}, {"sha": "595a94b88be0eca1d9c20a975203f51c7a77c9d4", "filename": "tests/mir-opt/const_prop/while_let_loops.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ef2f5fcada89d4aa56b68e34da91f6cd408e63/tests%2Fmir-opt%2Fconst_prop%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fwhile_let_loops.rs?ref=a4ef2f5fcada89d4aa56b68e34da91f6cd408e63", "patch": "@@ -1,5 +1,5 @@\n+// unit-test: ConstProp\n // EMIT_MIR while_let_loops.change_loop_body.ConstProp.diff\n-// EMIT_MIR while_let_loops.change_loop_body.PreCodegen.after.mir\n \n pub fn change_loop_body() {\n     let mut _x = 0;", "previous_filename": "tests/mir-opt/while_let_loops.rs"}, {"sha": "15b0aece8f54b7e4dd873b272f66881e6854f4b7", "filename": "tests/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98c33e47a495fbd7b22bce9ce32f2815991bc414/tests%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/98c33e47a495fbd7b22bce9ce32f2815991bc414/tests%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir?ref=98c33e47a495fbd7b22bce9ce32f2815991bc414", "patch": "@@ -1,17 +0,0 @@\n-// MIR for `change_loop_body` after PreCodegen\n-\n-fn change_loop_body() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:+0:27: +0:27\n-    let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-    scope 1 {\n-        debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:+1:9: +1:15\n-        scope 2 {\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:+1:9: +1:15\n-        StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:+6:1: +6:2\n-        return;                          // scope 0 at $DIR/while_let_loops.rs:+6:2: +6:2\n-    }\n-}"}]}