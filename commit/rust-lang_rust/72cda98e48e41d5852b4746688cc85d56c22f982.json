{"sha": "72cda98e48e41d5852b4746688cc85d56c22f982", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyY2RhOThlNDhlNDFkNTg1MmI0NzQ2Njg4Y2M4NWQ1NmMyMmY5ODI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-04-24T22:21:10Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-04-25T12:45:59Z"}, "message": "Implement Debug for Place using Place::iterate", "tree": {"sha": "12ff1ab62b31a72026d9540eaccf416b9900287d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ff1ab62b31a72026d9540eaccf416b9900287d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72cda98e48e41d5852b4746688cc85d56c22f982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72cda98e48e41d5852b4746688cc85d56c22f982", "html_url": "https://github.com/rust-lang/rust/commit/72cda98e48e41d5852b4746688cc85d56c22f982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72cda98e48e41d5852b4746688cc85d56c22f982/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e305df1846a6d985315917ae0c81b74af8b4e641", "url": "https://api.github.com/repos/rust-lang/rust/commits/e305df1846a6d985315917ae0c81b74af8b4e641", "html_url": "https://github.com/rust-lang/rust/commit/e305df1846a6d985315917ae0c81b74af8b4e641"}], "stats": {"total": 138, "additions": 86, "deletions": 52}, "files": [{"sha": "3d094e72d26aa295288de5c652b51a37d2dbb030", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 86, "deletions": 52, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/72cda98e48e41d5852b4746688cc85d56c22f982/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cda98e48e41d5852b4746688cc85d56c22f982/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=72cda98e48e41d5852b4746688cc85d56c22f982", "patch": "@@ -2156,61 +2156,95 @@ impl<'p, 'tcx> FusedIterator for PlaceProjectionsIter<'p, 'tcx> {}\n \n impl<'tcx> Debug for Place<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n-        use self::Place::*;\n-\n-        match *self {\n-            Base(PlaceBase::Local(id)) => write!(fmt, \"{:?}\", id),\n-            Base(PlaceBase::Static(box self::Static { ty, kind: StaticKind::Static(def_id) })) => {\n-                write!(\n-                    fmt,\n-                    \"({}: {:?})\",\n-                    ty::tls::with(|tcx| tcx.def_path_str(def_id)),\n-                    ty\n-                )\n-            },\n-            Base(PlaceBase::Static(\n-                box self::Static { ty, kind: StaticKind::Promoted(promoted) })\n-            ) => {\n-                write!(\n-                    fmt,\n-                    \"({:?}: {:?})\",\n-                    promoted,\n-                    ty\n-                )\n-            },\n-            Projection(ref data) => match data.elem {\n-                ProjectionElem::Downcast(Some(name), _index) => {\n-                    write!(fmt, \"({:?} as {})\", data.base, name)\n-                }\n-                ProjectionElem::Downcast(None, index) => {\n-                    write!(fmt, \"({:?} as variant#{:?})\", data.base, index)\n-                }\n-                ProjectionElem::Deref => write!(fmt, \"(*{:?})\", data.base),\n-                ProjectionElem::Field(field, ty) => {\n-                    write!(fmt, \"({:?}.{:?}: {:?})\", data.base, field.index(), ty)\n-                }\n-                ProjectionElem::Index(ref index) => write!(fmt, \"{:?}[{:?}]\", data.base, index),\n-                ProjectionElem::ConstantIndex {\n-                    offset,\n-                    min_length,\n-                    from_end: false,\n-                } => write!(fmt, \"{:?}[{:?} of {:?}]\", data.base, offset, min_length),\n-                ProjectionElem::ConstantIndex {\n-                    offset,\n-                    min_length,\n-                    from_end: true,\n-                } => write!(fmt, \"{:?}[-{:?} of {:?}]\", data.base, offset, min_length),\n-                ProjectionElem::Subslice { from, to } if to == 0 => {\n-                    write!(fmt, \"{:?}[{:?}:]\", data.base, from)\n+        self.iterate(|_place_base, place_projections| {\n+            // FIXME: remove this collect once we have migrated to slices\n+            let projs_vec: Vec<_> = place_projections.collect();\n+            for projection in projs_vec.iter().rev() {\n+                match projection.elem {\n+                    ProjectionElem::Downcast(_, _) |\n+                    ProjectionElem::Field(_, _) => {\n+                        write!(fmt, \"(\").unwrap();\n+                    }\n+                    ProjectionElem::Deref => {\n+                        write!(fmt, \"(*\").unwrap();\n+                    }\n+                    ProjectionElem::Index(_) |\n+                    ProjectionElem::ConstantIndex { .. } |\n+                    ProjectionElem::Subslice { .. } => {}\n                 }\n-                ProjectionElem::Subslice { from, to } if from == 0 => {\n-                    write!(fmt, \"{:?}[:-{:?}]\", data.base, to)\n+            }\n+        });\n+\n+        self.iterate(|place_base, place_projections| {\n+            match place_base {\n+                PlaceBase::Local(id) => {\n+                    write!(fmt, \"{:?}\", id)?;\n                 }\n-                ProjectionElem::Subslice { from, to } => {\n-                    write!(fmt, \"{:?}[{:?}:-{:?}]\", data.base, from, to)\n+                PlaceBase::Static(box self::Static { ty, kind: StaticKind::Static(def_id) }) => {\n+                    write!(\n+                        fmt,\n+                        \"({}: {:?})\",\n+                        ty::tls::with(|tcx| tcx.def_path_str(*def_id)),\n+                        ty\n+                    )?;\n+                },\n+                PlaceBase::Static(\n+                    box self::Static { ty, kind: StaticKind::Promoted(promoted) }\n+                ) => {\n+                    write!(\n+                        fmt,\n+                        \"({:?}: {:?})\",\n+                        promoted,\n+                        ty\n+                    )?;\n+                },\n+            }\n+\n+            for projection in place_projections {\n+                match projection.elem {\n+                    ProjectionElem::Downcast(Some(name), _index) => {\n+                        write!(fmt, \" as {})\", name)?;\n+                    }\n+                    ProjectionElem::Downcast(None, index) => {\n+                        write!(fmt, \" as variant#{:?})\", index)?;\n+                    }\n+                    ProjectionElem::Deref => {\n+                        write!(fmt, \")\")?;\n+                    }\n+                    ProjectionElem::Field(field, ty) => {\n+                        write!(fmt, \".{:?}: {:?})\", field.index(), ty)?;\n+                    }\n+                    ProjectionElem::Index(ref index) => {\n+                        write!(fmt, \"[{:?}]\", index)?;\n+                    }\n+                    ProjectionElem::ConstantIndex {\n+                        offset,\n+                        min_length,\n+                        from_end: false,\n+                    } => {\n+                        write!(fmt, \"[{:?} of {:?}]\", offset, min_length)?;\n+                    }\n+                    ProjectionElem::ConstantIndex {\n+                        offset,\n+                        min_length,\n+                        from_end: true,\n+                    } => {\n+                        write!(fmt, \"[-{:?} of {:?}]\", offset, min_length)?;\n+                    }\n+                    ProjectionElem::Subslice { from, to } if to == 0 => {\n+                        write!(fmt, \"[{:?}:]\", from)?;\n+                    }\n+                    ProjectionElem::Subslice { from, to } if from == 0 => {\n+                        write!(fmt, \"[:-{:?}]\", to)?;\n+                    }\n+                    ProjectionElem::Subslice { from, to } => {\n+                        write!(fmt, \"[{:?}:-{:?}]\", from, to)?;\n+                    }\n                 }\n-            },\n-        }\n+            }\n+\n+            Ok(())\n+        })\n     }\n }\n "}]}