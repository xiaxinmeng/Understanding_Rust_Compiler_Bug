{"sha": "d2e2bd1b442948d4754bb1eb09ff1914a83604dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZTJiZDFiNDQyOTQ4ZDQ3NTRiYjFlYjA5ZmYxOTE0YTgzNjA0ZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-12T09:12:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-12T09:12:08Z"}, "message": "auto merge of #19568 : barosl/rust/enum-struct-variants-ice, r=alexcrichton\n\nThis pull request tries to fix #19340, which states two ICE cases related to enum struct variants.\r\n\r\nIt is my first attempt to fix the compiler. I found this solution by trial and error, so the method used to fix the issue looks very hacky. Please review it, and direct me to find a better solution.\r\n\r\nI'm also to add test cases. Where should I put them? Maybe `src/test/run-pass/issue-19340.rs`?", "tree": {"sha": "e9dca85d4acf8fba54aa0753866591dff1645cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9dca85d4acf8fba54aa0753866591dff1645cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2e2bd1b442948d4754bb1eb09ff1914a83604dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e2bd1b442948d4754bb1eb09ff1914a83604dd", "html_url": "https://github.com/rust-lang/rust/commit/d2e2bd1b442948d4754bb1eb09ff1914a83604dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b", "url": "https://api.github.com/repos/rust-lang/rust/commits/da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b", "html_url": "https://github.com/rust-lang/rust/commit/da83ad8e2c8e2c5f522dc59963e00f55b1f8c03b"}, {"sha": "086c9493c822e8de53bdb5ccf6b32d2e05c3963f", "url": "https://api.github.com/repos/rust-lang/rust/commits/086c9493c822e8de53bdb5ccf6b32d2e05c3963f", "html_url": "https://github.com/rust-lang/rust/commit/086c9493c822e8de53bdb5ccf6b32d2e05c3963f"}], "stats": {"total": 108, "additions": 92, "deletions": 16}, "files": [{"sha": "232a0cc7f542160bc142eb12c18ba7f366137129", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=d2e2bd1b442948d4754bb1eb09ff1914a83604dd", "patch": "@@ -683,14 +683,22 @@ pub fn get_enum_variants<'tcx>(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::Nod\n         let ctor_ty = item_type(ast::DefId { krate: cdata.cnum, node: id},\n                                 item, tcx, cdata);\n         let name = item_name(&*intr, item);\n-        let (ctor_ty, arg_tys) = match ctor_ty.sty {\n+        let (ctor_ty, arg_tys, arg_names) = match ctor_ty.sty {\n             ty::ty_bare_fn(ref f) =>\n-                (Some(ctor_ty), f.sig.inputs.clone()),\n-            _ => // Nullary or struct enum variant.\n-                (None, get_struct_fields(intr.clone(), cdata, did.node)\n+                (Some(ctor_ty), f.sig.inputs.clone(), None),\n+            _ => { // Nullary or struct enum variant.\n+                let mut arg_names = Vec::new();\n+                let arg_tys = get_struct_fields(intr.clone(), cdata, did.node)\n                     .iter()\n-                    .map(|field_ty| get_type(cdata, field_ty.id.node, tcx).ty)\n-                    .collect())\n+                    .map(|field_ty| {\n+                        arg_names.push(ast::Ident::new(field_ty.name));\n+                        get_type(cdata, field_ty.id.node, tcx).ty\n+                    })\n+                    .collect();\n+                let arg_names = if arg_names.len() == 0 { None } else { Some(arg_names) };\n+\n+                (None, arg_tys, arg_names)\n+            }\n         };\n         match variant_disr_val(item) {\n             Some(val) => { disr_val = val; }\n@@ -700,7 +708,7 @@ pub fn get_enum_variants<'tcx>(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::Nod\n         disr_val += 1;\n         Rc::new(ty::VariantInfo {\n             args: arg_tys,\n-            arg_names: None,\n+            arg_names: arg_names,\n             ctor_ty: ctor_ty,\n             name: name,\n             // I'm not even sure if we encode visibility"}, {"sha": "056d4f9d732a67fadb9a7d8291aa74b6621ae46f", "filename": "src/librustc/middle/borrowck/fragments.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Ffragments.rs?ref=d2e2bd1b442948d4754bb1eb09ff1914a83604dd", "patch": "@@ -346,9 +346,10 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                                                                         Rc<LoanPath<'tcx>>)>) {\n     let parent_ty = parent_lp.to_type();\n \n-    let add_fragment_sibling_local = |field_name| {\n+    let add_fragment_sibling_local = |field_name, variant_did| {\n         add_fragment_sibling_core(\n-            this, tcx, gathered_fragments, parent_lp.clone(), mc, field_name, origin_lp);\n+            this, tcx, gathered_fragments, parent_lp.clone(), mc, field_name, origin_lp,\n+            variant_did);\n     };\n \n     match (&parent_ty.sty, enum_variant_info) {\n@@ -363,7 +364,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n             for i in range(0, tuple_len) {\n                 if i == tuple_idx { continue }\n                 let field_name = mc::PositionalField(i);\n-                add_fragment_sibling_local(field_name);\n+                add_fragment_sibling_local(field_name, None);\n             }\n         }\n \n@@ -376,7 +377,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                             continue;\n                         }\n                         let field_name = mc::NamedField(f.name);\n-                        add_fragment_sibling_local(field_name);\n+                        add_fragment_sibling_local(field_name, None);\n                     }\n                 }\n                 mc::PositionalField(tuple_idx) => {\n@@ -385,7 +386,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                             continue\n                         }\n                         let field_name = mc::PositionalField(i);\n-                        add_fragment_sibling_local(field_name);\n+                        add_fragment_sibling_local(field_name, None);\n                     }\n                 }\n             }\n@@ -414,7 +415,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                             continue;\n                         }\n                         let field_name = mc::NamedField(variant_arg_ident.name);\n-                        add_fragment_sibling_local(field_name);\n+                        add_fragment_sibling_local(field_name, Some(variant_info.id));\n                     }\n                 }\n                 mc::PositionalField(tuple_idx) => {\n@@ -424,7 +425,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                             continue;\n                         }\n                         let field_name = mc::PositionalField(i);\n-                        add_fragment_sibling_local(field_name);\n+                        add_fragment_sibling_local(field_name, None);\n                     }\n                 }\n             }\n@@ -447,10 +448,11 @@ fn add_fragment_sibling_core<'tcx>(this: &MoveData<'tcx>,\n                                    parent: Rc<LoanPath<'tcx>>,\n                                    mc: mc::MutabilityCategory,\n                                    new_field_name: mc::FieldName,\n-                                   origin_lp: &Rc<LoanPath<'tcx>>) -> MovePathIndex {\n+                                   origin_lp: &Rc<LoanPath<'tcx>>,\n+                                   enum_variant_did: Option<ast::DefId>) -> MovePathIndex {\n     let opt_variant_did = match parent.kind {\n         LpDowncast(_, variant_did) => Some(variant_did),\n-        LpVar(..) | LpUpvar(..) | LpExtend(..) => None,\n+        LpVar(..) | LpUpvar(..) | LpExtend(..) => enum_variant_did,\n     };\n \n     let loan_path_elem = LpInterior(mc::InteriorField(new_field_name));"}, {"sha": "fc61b78d8a7eea983b004031246e47e04e68f5c5", "filename": "src/test/auxiliary/issue-19340-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Ftest%2Fauxiliary%2Fissue-19340-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Ftest%2Fauxiliary%2Fissue-19340-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-19340-1.rs?ref=d2e2bd1b442948d4754bb1eb09ff1914a83604dd", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub enum Homura {\n+    Madoka { name: String },\n+}"}, {"sha": "b7a6391ee04751cdb81221b501c8030ecccb8e7f", "filename": "src/test/run-pass/issue-19340-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Ftest%2Frun-pass%2Fissue-19340-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Ftest%2Frun-pass%2Fissue-19340-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19340-1.rs?ref=d2e2bd1b442948d4754bb1eb09ff1914a83604dd", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-19340-1.rs\n+\n+extern crate \"issue-19340-1\" as lib;\n+\n+use lib::Homura;\n+\n+fn main() {\n+    let homura = Homura::Madoka { name: \"Kaname\".into_string() };\n+\n+    match homura {\n+        Homura::Madoka { name } => (),\n+    };\n+}"}, {"sha": "5179c1e2acb7580e354e3317d2b01615799cb741", "filename": "src/test/run-pass/issue-19340-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Ftest%2Frun-pass%2Fissue-19340-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e2bd1b442948d4754bb1eb09ff1914a83604dd/src%2Ftest%2Frun-pass%2Fissue-19340-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19340-2.rs?ref=d2e2bd1b442948d4754bb1eb09ff1914a83604dd", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Homura {\n+    Madoka {\n+        name: String,\n+        age: u32,\n+    },\n+}\n+\n+fn main() {\n+    let homura = Homura::Madoka {\n+        name: \"Akemi\".into_string(),\n+        age: 14,\n+    };\n+\n+    match homura {\n+        Homura::Madoka {\n+            name,\n+            age,\n+        } => (),\n+    };\n+}"}]}