{"sha": "1d94e234d5d31f945c0cece38b8af1997fa28d82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOTRlMjM0ZDVkMzFmOTQ1YzBjZWNlMzhiOGFmMTk5N2ZhMjhkODI=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-16T18:45:41Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-16T18:45:41Z"}, "message": "Handle tuple indexing expression in argument position in `Generate function`", "tree": {"sha": "412fd2d124bb96dbeda41e54f1bc40820bfae302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/412fd2d124bb96dbeda41e54f1bc40820bfae302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d94e234d5d31f945c0cece38b8af1997fa28d82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d94e234d5d31f945c0cece38b8af1997fa28d82", "html_url": "https://github.com/rust-lang/rust/commit/1d94e234d5d31f945c0cece38b8af1997fa28d82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d94e234d5d31f945c0cece38b8af1997fa28d82/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc33140a34703c383ed46f0fb2d1d61f63d96d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc33140a34703c383ed46f0fb2d1d61f63d96d7", "html_url": "https://github.com/rust-lang/rust/commit/4dc33140a34703c383ed46f0fb2d1d61f63d96d7"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "954ad2db085302fd06852d3b65b175abb945cd22", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1d94e234d5d31f945c0cece38b8af1997fa28d82/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d94e234d5d31f945c0cece38b8af1997fa28d82/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=1d94e234d5d31f945c0cece38b8af1997fa28d82", "patch": "@@ -438,10 +438,7 @@ fn fn_args(\n     let mut arg_names = Vec::new();\n     let mut arg_types = Vec::new();\n     for arg in call.arg_list()?.args() {\n-        arg_names.push(match fn_arg_name(&arg) {\n-            Some(name) => name,\n-            None => String::from(\"arg\"),\n-        });\n+        arg_names.push(fn_arg_name(&arg));\n         arg_types.push(match fn_arg_type(ctx, target_module, &arg) {\n             Some(ty) => {\n                 if !ty.is_empty() && ty.starts_with('&') {\n@@ -506,18 +503,21 @@ fn deduplicate_arg_names(arg_names: &mut Vec<String>) {\n     }\n }\n \n-fn fn_arg_name(fn_arg: &ast::Expr) -> Option<String> {\n-    match fn_arg {\n-        ast::Expr::CastExpr(cast_expr) => fn_arg_name(&cast_expr.expr()?),\n-        _ => {\n-            let s = fn_arg\n-                .syntax()\n-                .descendants()\n-                .filter(|d| ast::NameRef::can_cast(d.kind()))\n-                .last()?\n-                .to_string();\n+fn fn_arg_name(arg_expr: &ast::Expr) -> String {\n+    let name = (|| match arg_expr {\n+        ast::Expr::CastExpr(cast_expr) => Some(fn_arg_name(&cast_expr.expr()?)),\n+        expr => {\n+            let s = expr.syntax().descendants().filter_map(ast::NameRef::cast).last()?.to_string();\n             Some(to_lower_snake_case(&s))\n         }\n+    })();\n+    match name {\n+        Some(mut name) if name.starts_with(|c: char| c.is_ascii_digit()) => {\n+            name.insert_str(0, \"arg\");\n+            name\n+        }\n+        Some(name) => name,\n+        None => \"arg\".to_string(),\n     }\n }\n \n@@ -1647,20 +1647,43 @@ fn bar() ${0:-> _} {\n     fn no_panic_on_invalid_global_path() {\n         check_assist(\n             generate_function,\n-            r#\"\n+            r\"\n fn main() {\n     ::foo$0();\n }\n-\"#,\n-            r#\"\n+\",\n+            r\"\n fn main() {\n     ::foo();\n }\n \n fn foo() ${0:-> _} {\n     todo!()\n }\n-\"#,\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn handle_tuple_indexing() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+fn main() {\n+    let a = ((),);\n+    foo$0(a.0);\n+}\n+\",\n+            r\"\n+fn main() {\n+    let a = ((),);\n+    foo(a.0);\n+}\n+\n+fn foo(arg0: ()) ${0:-> _} {\n+    todo!()\n+}\n+\",\n         )\n     }\n }"}]}