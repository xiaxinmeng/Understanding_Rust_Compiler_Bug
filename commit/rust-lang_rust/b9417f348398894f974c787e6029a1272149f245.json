{"sha": "b9417f348398894f974c787e6029a1272149f245", "node_id": "C_kwDOAAsO6NoAKGI5NDE3ZjM0ODM5ODg5NGY5NzRjNzg3ZTYwMjlhMTI3MjE0OWYyNDU", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-01T14:26:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-01T14:26:54Z"}, "message": "feat: correctly fallback to notify if the clinet-side file watching is not supported", "tree": {"sha": "ef5bafd623e09490e4a020e51cb59d8e12f214c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef5bafd623e09490e4a020e51cb59d8e12f214c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9417f348398894f974c787e6029a1272149f245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9417f348398894f974c787e6029a1272149f245", "html_url": "https://github.com/rust-lang/rust/commit/b9417f348398894f974c787e6029a1272149f245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9417f348398894f974c787e6029a1272149f245/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d63abf1d868218613f33dc59968d3671f7f14a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d63abf1d868218613f33dc59968d3671f7f14a8", "html_url": "https://github.com/rust-lang/rust/commit/3d63abf1d868218613f33dc59968d3671f7f14a8"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "818aab35157aa25e497a66b03e75161e2ecd73d0", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9417f348398894f974c787e6029a1272149f245/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9417f348398894f974c787e6029a1272149f245/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b9417f348398894f974c787e6029a1272149f245", "patch": "@@ -723,7 +723,10 @@ impl Config {\n         FilesConfig {\n             watcher: match self.data.files_watcher.as_str() {\n                 \"notify\" => FilesWatcher::Notify,\n-                \"client\" | _ => FilesWatcher::Client,\n+                \"client\" if self.did_change_watched_files_dynamic_registration() => {\n+                    FilesWatcher::Client\n+                }\n+                _ => FilesWatcher::Notify,\n             },\n             exclude: self.data.files_excludeDirs.iter().map(|it| self.root_path.join(it)).collect(),\n         }"}, {"sha": "b14b3dbcfa9249b886bdeb7e005a9dd9de4ee210", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b9417f348398894f974c787e6029a1272149f245/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9417f348398894f974c787e6029a1272149f245/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=b9417f348398894f974c787e6029a1272149f245", "patch": "@@ -241,38 +241,33 @@ impl GlobalState {\n         }\n \n         if let FilesWatcher::Client = self.config.files().watcher {\n-            if self.config.did_change_watched_files_dynamic_registration() {\n-                let registration_options = lsp_types::DidChangeWatchedFilesRegistrationOptions {\n-                    watchers: self\n-                        .workspaces\n-                        .iter()\n-                        .flat_map(|ws| ws.to_roots())\n-                        .filter(|it| it.is_local)\n-                        .flat_map(|root| {\n-                            root.include.into_iter().flat_map(|it| {\n-                                [\n-                                    format!(\"{}/**/*.rs\", it.display()),\n-                                    format!(\"{}/**/Cargo.toml\", it.display()),\n-                                    format!(\"{}/**/Cargo.lock\", it.display()),\n-                                ]\n-                            })\n-                        })\n-                        .map(|glob_pattern| lsp_types::FileSystemWatcher {\n-                            glob_pattern,\n-                            kind: None,\n+            let registration_options = lsp_types::DidChangeWatchedFilesRegistrationOptions {\n+                watchers: self\n+                    .workspaces\n+                    .iter()\n+                    .flat_map(|ws| ws.to_roots())\n+                    .filter(|it| it.is_local)\n+                    .flat_map(|root| {\n+                        root.include.into_iter().flat_map(|it| {\n+                            [\n+                                format!(\"{}/**/*.rs\", it.display()),\n+                                format!(\"{}/**/Cargo.toml\", it.display()),\n+                                format!(\"{}/**/Cargo.lock\", it.display()),\n+                            ]\n                         })\n-                        .collect(),\n-                };\n-                let registration = lsp_types::Registration {\n-                    id: \"workspace/didChangeWatchedFiles\".to_string(),\n-                    method: \"workspace/didChangeWatchedFiles\".to_string(),\n-                    register_options: Some(serde_json::to_value(registration_options).unwrap()),\n-                };\n-                self.send_request::<lsp_types::request::RegisterCapability>(\n-                    lsp_types::RegistrationParams { registrations: vec![registration] },\n-                    |_, _| (),\n-                );\n-            }\n+                    })\n+                    .map(|glob_pattern| lsp_types::FileSystemWatcher { glob_pattern, kind: None })\n+                    .collect(),\n+            };\n+            let registration = lsp_types::Registration {\n+                id: \"workspace/didChangeWatchedFiles\".to_string(),\n+                method: \"workspace/didChangeWatchedFiles\".to_string(),\n+                register_options: Some(serde_json::to_value(registration_options).unwrap()),\n+            };\n+            self.send_request::<lsp_types::request::RegisterCapability>(\n+                lsp_types::RegistrationParams { registrations: vec![registration] },\n+                |_, _| (),\n+            );\n         }\n \n         let mut change = Change::new();"}]}