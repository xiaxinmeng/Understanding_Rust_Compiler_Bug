{"sha": "82062a63485b75b7476d078e722b49e3eb376795", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMDYyYTYzNDg1Yjc1Yjc0NzZkMDc4ZTcyMmI0OWUzZWIzNzY3OTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-23T00:08:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-23T02:35:01Z"}, "message": "test: De-mut the test suite. rs=demuting", "tree": {"sha": "4dbd112876a818c1e227cddb072bf98dcc840092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dbd112876a818c1e227cddb072bf98dcc840092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82062a63485b75b7476d078e722b49e3eb376795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82062a63485b75b7476d078e722b49e3eb376795", "html_url": "https://github.com/rust-lang/rust/commit/82062a63485b75b7476d078e722b49e3eb376795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82062a63485b75b7476d078e722b49e3eb376795/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1144fdde1f658e957e6ab54f8bc199e40583e851", "url": "https://api.github.com/repos/rust-lang/rust/commits/1144fdde1f658e957e6ab54f8bc199e40583e851", "html_url": "https://github.com/rust-lang/rust/commit/1144fdde1f658e957e6ab54f8bc199e40583e851"}], "stats": {"total": 761, "additions": 311, "deletions": 450}, "files": [{"sha": "6d232c34b47e033a6a9b0d034d5ba8b0e888e970", "filename": "src/test/auxiliary/issue_3882.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fauxiliary%2Fissue_3882.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fauxiliary%2Fissue_3882.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3882.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,10 +10,10 @@\n \n mod issue_3882 {\n     struct Completions {\n-        mut len: libc::size_t,\n+        len: libc::size_t,\n     }\n     \n     extern mod c {\n-        fn linenoiseAddCompletion(lc: *Completions);\n+        fn linenoiseAddCompletion(lc: *mut Completions);\n     }\n }"}, {"sha": "509861e2f470f51b5ee6e4caf0b61001d1e6a9fa", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -21,10 +21,10 @@ use io::WriterUtil;\n fn LINE_LENGTH() -> uint { return 60u; }\n \n struct MyRandom {\n-    mut last: u32\n+    last: u32\n }\n \n-fn myrandom_next(r: @MyRandom, mx: u32) -> u32 {\n+fn myrandom_next(r: @mut MyRandom, mx: u32) -> u32 {\n     r.last = (r.last * 3877u32 + 29573u32) % 139968u32;\n     mx * r.last / 139968u32\n }\n@@ -59,7 +59,7 @@ fn select_random(r: u32, genelist: ~[AminoAcids]) -> char {\n \n fn make_random_fasta(wr: io::Writer, id: ~str, desc: ~str, genelist: ~[AminoAcids], n: int) {\n     wr.write_line(~\">\" + id + ~\" \" + desc);\n-    let rng = @MyRandom {mut last: rand::Rng().next()};\n+    let rng = @mut MyRandom {last: rand::Rng().next()};\n     let mut op: ~str = ~\"\";\n     for uint::range(0u, n as uint) |_i| {\n         str::push_char(&mut op, select_random(myrandom_next(rng, 100u32),"}, {"sha": "e7b3547ab8c7edede71cff79b07415d4dc52c9d3", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 57, "deletions": 44, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -170,67 +170,80 @@ mod Body {\n     // was 4 * PI * PI originally\n     pub const DAYS_PER_YEAR: float = 365.24;\n \n-    pub struct Props\n-        {mut x: float,\n-         mut y: float,\n-         mut z: float,\n-         mut vx: float,\n-         mut vy: float,\n-         mut vz: float,\n-         mass: float}\n+    pub struct Props {\n+        x: float,\n+        y: float,\n+        z: float,\n+        vx: float,\n+        vy: float,\n+        vz: float,\n+        mass: float\n+    }\n \n     pub fn jupiter() -> Body::Props {\n-        return Props {mut x: 4.84143144246472090e+00,\n-             mut y: -1.16032004402742839e+00,\n-             mut z: -1.03622044471123109e-01,\n-             mut vx: 1.66007664274403694e-03 * DAYS_PER_YEAR,\n-             mut vy: 7.69901118419740425e-03 * DAYS_PER_YEAR,\n-             mut vz: -6.90460016972063023e-05 * DAYS_PER_YEAR,\n-             mass: 9.54791938424326609e-04 * SOLAR_MASS};\n+        return Props {\n+            x: 4.84143144246472090e+00,\n+            y: -1.16032004402742839e+00,\n+            z: -1.03622044471123109e-01,\n+            vx: 1.66007664274403694e-03 * DAYS_PER_YEAR,\n+            vy: 7.69901118419740425e-03 * DAYS_PER_YEAR,\n+            vz: -6.90460016972063023e-05 * DAYS_PER_YEAR,\n+            mass: 9.54791938424326609e-04 * SOLAR_MASS\n+        };\n     }\n \n     pub fn saturn() -> Body::Props {\n-        return Props {mut x: 8.34336671824457987e+00,\n-             mut y: 4.12479856412430479e+00,\n-             mut z: -4.03523417114321381e-01,\n-             mut vx: -2.76742510726862411e-03 * DAYS_PER_YEAR,\n-             mut vy: 4.99852801234917238e-03 * DAYS_PER_YEAR,\n-             mut vz: 2.30417297573763929e-05 * DAYS_PER_YEAR,\n-             mass: 2.85885980666130812e-04 * SOLAR_MASS};\n+        return Props {\n+            x: 8.34336671824457987e+00,\n+            y: 4.12479856412430479e+00,\n+            z: -4.03523417114321381e-01,\n+            vx: -2.76742510726862411e-03 * DAYS_PER_YEAR,\n+            vy: 4.99852801234917238e-03 * DAYS_PER_YEAR,\n+            vz: 2.30417297573763929e-05 * DAYS_PER_YEAR,\n+            mass: 2.85885980666130812e-04 * SOLAR_MASS\n+        };\n     }\n \n     pub fn uranus() -> Body::Props {\n-        return Props {mut x: 1.28943695621391310e+01,\n-             mut y: -1.51111514016986312e+01,\n-             mut z: -2.23307578892655734e-01,\n-             mut vx: 2.96460137564761618e-03 * DAYS_PER_YEAR,\n-             mut vy: 2.37847173959480950e-03 * DAYS_PER_YEAR,\n-             mut vz: -2.96589568540237556e-05 * DAYS_PER_YEAR,\n-             mass: 4.36624404335156298e-05 * SOLAR_MASS};\n+        return Props {\n+            x: 1.28943695621391310e+01,\n+            y: -1.51111514016986312e+01,\n+            z: -2.23307578892655734e-01,\n+            vx: 2.96460137564761618e-03 * DAYS_PER_YEAR,\n+            vy: 2.37847173959480950e-03 * DAYS_PER_YEAR,\n+            vz: -2.96589568540237556e-05 * DAYS_PER_YEAR,\n+            mass: 4.36624404335156298e-05 * SOLAR_MASS\n+        };\n     }\n \n     pub fn neptune() -> Body::Props {\n-        return Props {mut x: 1.53796971148509165e+01,\n-             mut y: -2.59193146099879641e+01,\n-             mut z: 1.79258772950371181e-01,\n-             mut vx: 2.68067772490389322e-03 * DAYS_PER_YEAR,\n-             mut vy: 1.62824170038242295e-03 * DAYS_PER_YEAR,\n-             mut vz: -9.51592254519715870e-05 * DAYS_PER_YEAR,\n-             mass: 5.15138902046611451e-05 * SOLAR_MASS};\n+        return Props {\n+            x: 1.53796971148509165e+01,\n+            y: -2.59193146099879641e+01,\n+            z: 1.79258772950371181e-01,\n+            vx: 2.68067772490389322e-03 * DAYS_PER_YEAR,\n+            vy: 1.62824170038242295e-03 * DAYS_PER_YEAR,\n+            vz: -9.51592254519715870e-05 * DAYS_PER_YEAR,\n+            mass: 5.15138902046611451e-05 * SOLAR_MASS\n+        };\n     }\n \n     pub fn sun() -> Body::Props {\n-        return Props {mut x: 0.0,\n-             mut y: 0.0,\n-             mut z: 0.0,\n-             mut vx: 0.0,\n-             mut vy: 0.0,\n-             mut vz: 0.0,\n-             mass: SOLAR_MASS};\n+        return Props {\n+            x: 0.0,\n+            y: 0.0,\n+            z: 0.0,\n+            vx: 0.0,\n+            vy: 0.0,\n+            vz: 0.0,\n+            mass: SOLAR_MASS\n+        };\n     }\n \n     pub fn offset_momentum(props: &mut Body::Props,\n-                       px: float, py: float, pz: float) {\n+                           px: float,\n+                           py: float,\n+                           pz: float) {\n         props.vx = -px / SOLAR_MASS;\n         props.vy = -py / SOLAR_MASS;\n         props.vz = -pz / SOLAR_MASS;"}, {"sha": "283f04a283f4e042e13cab03c136a0a7c99cc1a5", "filename": "src/test/compile-fail/borrowck-assign-comp.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct point {x: int, mut y: int }\n+struct point { x: int, y: int }\n \n fn a() {\n     let mut p = point {x: 3, y: 4};\n@@ -20,30 +20,21 @@ fn a() {\n     p.x = 5; //~ ERROR assigning to mutable field prohibited due to outstanding loan\n }\n \n-fn b() {\n-    let mut p = point {x: 3, mut y: 4};\n-    // This assignment is legal because `y` is inherently mutable (and\n-    // hence &_q.y is &mut int).\n-    let _q = &p;\n-\n-    p.y = 5;\n-}\n-\n fn c() {\n     // this is sort of the opposite.  We take a loan to the interior of `p`\n     // and then try to overwrite `p` as a whole.\n \n-    let mut p = point {x: 3, mut y: 4};\n+    let mut p = point {x: 3, y: 4};\n     let _q = &p.y; //~ NOTE loan of mutable local variable granted here\n-    p = point {x: 5, mut y: 7};//~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n+    p = point {x: 5, y: 7};//~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n     copy p;\n }\n \n fn d() {\n     // just for completeness's sake, the easy case, where we take the\n     // address of a subcomponent and then modify that subcomponent:\n \n-    let mut p = point {x: 3, mut y: 4};\n+    let mut p = point {x: 3, y: 4};\n     let _q = &p.y; //~ NOTE loan of mutable field granted here\n     p.y = 5; //~ ERROR assigning to mutable field prohibited due to outstanding loan\n     copy p;"}, {"sha": "51047631ea6655e1646c37d648a93ea2e1774d5b", "filename": "src/test/compile-fail/borrowck-call-sendfn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test #2978\n \n-fn call(x: @{mut f: fn~()}) {\n+fn call(x: @{f: fn~()}) {\n     x.f(); //~ ERROR foo\n     //~^ NOTE bar\n }"}, {"sha": "64baf3a9457664fe6419eaf7ab538dbea09b7180", "filename": "src/test/compile-fail/borrowck-imm-ref-to-mut-rec-field-issue-3162-b.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-b.rs?ref=1144fdde1f658e957e6ab54f8bc199e40583e851", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn each<T>(x: &[T], op: fn(elem: &T) -> bool) {\n-    uint::range(0, x.len(), |i| op(&x[i]));\n-}\n-\n-struct A {\n-    mut a: int\n-}\n-\n-fn main() {\n-    let x = [A {mut a: 0}];\n-    for each(x) |y| {\n-        let z = &y.a; //~ ERROR illegal borrow unless pure\n-        x[0].a = 10; //~ NOTE impure due to assigning to mutable field\n-        log(error, z);\n-    }\n-}"}, {"sha": "a14fd18c7d554ace65973cfcf2fd663e213ac65d", "filename": "src/test/compile-fail/borrowck-imm-ref-to-mut-rec-field-issue-3162.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162.rs?ref=1144fdde1f658e957e6ab54f8bc199e40583e851", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn each<T>(x: &[T], op: fn(elem: &T) -> bool) {\n-    uint::range(0, x.len(), |i| op(&x[i]));\n-}\n-\n-fn main() {\n-    struct A {\n-        mut a: int\n-    }\n-    let x = ~[A {mut a: 0}];\n-    for each(x) |y| {\n-        let z = &y.a; //~ ERROR illegal borrow unless pure\n-        x[0].a = 10; //~ NOTE impure due to assigning to mutable field\n-        log(error, z);\n-    }\n-}"}, {"sha": "685efcacf0c5802c5dd355f91bf51319458f0afb", "filename": "src/test/compile-fail/borrowck-mut-field-imm-base.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-field-imm-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-field-imm-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-field-imm-base.rs?ref=1144fdde1f658e957e6ab54f8bc199e40583e851", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct Foo {\n-    mut x: uint\n-}\n-\n-struct Bar {\n-    foo: Foo\n-}\n-\n-fn main() {\n-    let mut b = Bar { foo: Foo { x: 3 } };\n-    let p = &b;\n-    let q = &mut b.foo.x;\n-    let r = &p.foo.x; //~ ERROR illegal borrow unless pure\n-    let s = &b.foo.x; //~ ERROR loan of mutable field as immutable conflicts with prior loan\n-    io::println(fmt!(\"*r = %u\", *r));\n-    io::println(fmt!(\"*r = %u\", *s));\n-    *q += 1;\n-    io::println(fmt!(\"*r = %u\", *r));\n-    io::println(fmt!(\"*r = %u\", *s));\n-}"}, {"sha": "4af3bc17240ce166f76af5da675d2a09cac06bdd", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -9,19 +9,19 @@\n // except according to those terms.\n \n struct node_ {\n-    mut a: ~cycle\n+    a: ~cycle\n }\n \n enum cycle {\n     node(node_),\n     empty\n }\n fn main() {\n-    let x = ~node(node_ {mut a: ~empty});\n+    let mut x = ~node(node_ {a: ~empty});\n     // Create a cycle!\n-    match *x { //~ NOTE loan of immutable local variable granted here\n-      node(ref y) => {\n-        y.a = x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n+    match *x { //~ NOTE loan of mutable local variable granted here\n+      node(ref mut y) => {\n+        y.a = x; //~ ERROR moving out of mutable local variable prohibited due to outstanding loan\n       }\n       empty => {}\n     };"}, {"sha": "9a63c8698c65af004ce6e9addd92ccb7c6e16213", "filename": "src/test/compile-fail/borrowck-uniq-via-box.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -14,10 +14,6 @@ fn box_mut(v: @mut ~int) {\n     borrow(*v); //~ ERROR illegal borrow unless pure\n }\n \n-fn box_rec_mut(v: @{mut f: ~int}) {\n-    borrow(v.f); //~ ERROR illegal borrow unless pure\n-}\n-\n fn box_mut_rec(v: @mut {f: ~int}) {\n     borrow(v.f); //~ ERROR illegal borrow unless pure\n }\n@@ -42,14 +38,6 @@ fn box_const(v: @const ~int) {\n     borrow(*v); //~ ERROR illegal borrow unless pure\n }\n \n-fn box_rec_const(v: @{const f: ~int}) {\n-    borrow(v.f); //~ ERROR illegal borrow unless pure\n-}\n-\n-fn box_recs_const(v: @{f: {g: {const h: ~int}}}) {\n-    borrow(v.f.g.h); //~ ERROR illegal borrow unless pure\n-}\n-\n fn box_const_rec(v: @const {f: ~int}) {\n     borrow(v.f); //~ ERROR illegal borrow unless pure\n }"}, {"sha": "8d6e7039057f68995943e2d0912f7c7d0220e25e", "filename": "src/test/compile-fail/borrowck-uniq-via-ref.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-ref.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -14,10 +14,6 @@ fn box_mut(v: &mut ~int) {\n     borrow(*v); // OK: &mut -> &imm\n }\n \n-fn box_rec_mut(v: &{mut f: ~int}) {\n-    borrow(v.f); //~ ERROR illegal borrow unless pure\n-}\n-\n fn box_mut_rec(v: &mut {f: ~int}) {\n     borrow(v.f); // OK: &mut -> &imm\n }\n@@ -42,14 +38,6 @@ fn box_const(v: &const ~int) {\n     borrow(*v); //~ ERROR illegal borrow unless pure\n }\n \n-fn box_rec_const(v: &{const f: ~int}) {\n-    borrow(v.f); //~ ERROR illegal borrow unless pure\n-}\n-\n-fn box_recs_const(v: &{f: {g: {const h: ~int}}}) {\n-    borrow(v.f.g.h); //~ ERROR illegal borrow unless pure\n-}\n-\n fn box_const_rec(v: &const {f: ~int}) {\n     borrow(v.f); //~ ERROR illegal borrow unless pure\n }"}, {"sha": "2e80a7b09defa4579cb1937a6b12924a855b5ebc", "filename": "src/test/compile-fail/issue-1451.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // xfail-test\n-type T = { mut f: fn@() };\n-type S = { f: fn@() };\n+struct T { f: fn@() };\n+struct S { f: fn@() };\n \n fn fooS(t: S) {\n }\n@@ -23,11 +23,11 @@ fn bar() {\n \n fn main() {\n     let x: fn@() = bar;\n-    fooS({f: x});\n-    fooS({f: bar});\n+    fooS(S {f: x});\n+    fooS(S {f: bar});\n \n     let x: fn@() = bar;\n-    fooT({mut f: x});\n-    fooT({mut f: bar});\n+    fooT(T {f: x});\n+    fooT(T {f: bar});\n }\n "}, {"sha": "a782dd58ee671175b5f2da93684e763f155af4d9", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -13,11 +13,11 @@ extern mod std;\n fn siphash(k0 : u64) {\n \n     struct siphash {\n-        mut v0: u64,\n+        v0: u64,\n     }\n \n     impl siphash {\n-        fn reset() {\n+        fn reset(&mut self) {\n            self.v0 = k0 ^ 0x736f6d6570736575; //~ ERROR attempted dynamic environment-capture\n            //~^ ERROR unresolved name: k0\n         }"}, {"sha": "fcd5b1deee5525d3620deff7813b446bdcf3f393", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -11,10 +11,10 @@\n fn main() {\n     let needlesArr: ~[char] = ~['a', 'f'];\n     do vec::foldr(needlesArr) |x, y| {\n-        //~^ ERROR 2 parameters were supplied (including the closure passed by the `do` keyword)\n-        //~^^ ERROR Unconstrained region variable #2\n-        //\n-        // this last error is, um, non-ideal.\n+        //~^ ERROR Unconstrained region variable #2\n     }\n+    //~^ ERROR 2 parameters were supplied (including the closure passed by the `do` keyword)\n+    //\n+    // the first error is, um, non-ideal.\n }\n "}, {"sha": "31c0dc7d9c4e2a0a9ecf6f4518fb42ae996f9483", "filename": "src/test/compile-fail/issue-3177-mutable-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -12,7 +12,7 @@\n // error-pattern: instantiating a type parameter with an incompatible type\n struct S<T:Const> {\n     s: T,\n-    mut cant_nest: ()\n+    cant_nest: ()\n }\n \n fn main() {"}, {"sha": "2dd58906ddb713ff8fc2ee5160fd793e0e2c05c9", "filename": "src/test/compile-fail/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,7 +10,7 @@\n \n fn foo<T>() {\n     struct foo {\n-        mut x: T, //~ ERROR attempt to use a type argument out of scope\n+        x: T, //~ ERROR attempt to use a type argument out of scope\n         //~^ ERROR use of undeclared type name\n     }\n "}, {"sha": "3dd070b44a04c39b34a15bca6a5d8e53e03f6313", "filename": "src/test/compile-fail/issue-3601.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n struct HTMLImageData {\n-    mut image: Option<~str>\n+    image: Option<~str>\n }\n \n struct ElementData {\n@@ -30,7 +30,7 @@ enum NodeData = {\n };\n \n fn main() {\n-    let id = HTMLImageData { image: None };\n+    let mut id = HTMLImageData { image: None };\n     let ed = ElementData { kind: ~HTMLImageElement(id) };\n     let n = NodeData({kind : ~Element(ed)});\n     match n.kind {"}, {"sha": "19244d24bcc71e565f4838ff7b88044f362d90bc", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -11,8 +11,8 @@\n // xfail-test\n \n struct Point {\n-    mut x: float,\n-    mut y: float,\n+    x: float,\n+    y: float,\n }\n \n impl ToStr for Point { //~ ERROR implements a method not defined in the trait"}, {"sha": "6d79e23e999a7893da0d4679d36c36ac96dc4133", "filename": "src/test/compile-fail/mutable-huh-variance-rec.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,11 +10,15 @@\n \n // error-pattern: mismatched types\n \n+struct S {\n+    g: ~[int]\n+}\n+\n fn main() {\n-    let v = {mut g: ~[0]};\n+    let v = S {g: ~[0]};\n \n-    fn f(&&v: {mut g: ~[const int]}) {\n-        v.g = ~[mut 3]\n+    fn f(&&v: {g: ~[const int]}) {\n+        v.g = ~[3]\n     }\n \n     f(v);"}, {"sha": "3b6522c308dd2dee2f11e36696244be15f41b165", "filename": "src/test/compile-fail/non-const.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1144fdde1f658e957e6ab54f8bc199e40583e851/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=1144fdde1f658e957e6ab54f8bc199e40583e851", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that various non const things are rejected.\n-\n-fn foo<T:Const>(_x: T) { }\n-\n-struct r {\n-  x:int,\n-}\n-\n-impl Drop for r {\n-    fn finalize(&self) {}\n-}\n-\n-fn r(x:int) -> r {\n-    r {\n-        x: x\n-    }\n-}\n-\n-struct r2 {\n-  x:@mut int,\n-}\n-\n-impl Drop for r2 {\n-    fn finalize(&self) {}\n-}\n-\n-fn r2(x:@mut int) -> r2 {\n-    r2 {\n-        x: x\n-    }\n-}\n-\n-fn main() {\n-    struct A<T> { f: T }\n-    struct B<T> { mut f: T }\n-\n-    foo(A {f: 3});\n-    foo(B {mut f: 3}); //~ ERROR does not fulfill `Const`\n-    foo(~[1]);\n-    foo(~[mut 1]); //~ ERROR does not fulfill `Const`\n-    foo(~1);\n-    foo(~mut 1); //~ ERROR does not fulfill `Const`\n-    foo(@1);\n-    foo(@mut 1); //~ ERROR does not fulfill `Const`\n-    foo(r(1)); // this is okay now.\n-    foo(r2(@mut 1)); //~ ERROR does not fulfill `Const`\n-    foo(A {f: B {mut f: 1}}); //~ ERROR does not fulfill `Const`\n-}"}, {"sha": "2aa81dd4fa21e7658774a8cb2e436399df378e51", "filename": "src/test/compile-fail/pure-modifies-aliased.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,20 +10,20 @@\n \n // Check that pure functions cannot modify aliased state.\n \n-pure fn modify_in_ref(&&sum: {mut f: int}) {\n-    sum.f = 3; //~ ERROR assigning to mutable field prohibited in pure context\n+struct S {\n+    f: int,\n }\n \n-pure fn modify_in_box(sum: @mut {f: int}) {\n+pure fn modify_in_box(sum: @mut S) {\n     sum.f = 3; //~ ERROR assigning to mutable field prohibited in pure context\n }\n \n trait modify_in_box_rec {\n-    pure fn modify_in_box_rec(sum: @{mut f: int});\n+    pure fn modify_in_box_rec(sum: @mut S);\n }\n \n impl modify_in_box_rec for int {\n-    pure fn modify_in_box_rec(sum: @{mut f: int}) {\n+    pure fn modify_in_box_rec(sum: @mut S) {\n         sum.f = self; //~ ERROR assigning to mutable field prohibited in pure context\n     }\n }"}, {"sha": "c6c89a3ae04a7cb74a1858c8c182c64b9aeb1a44", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n struct dog {\n-    mut cats_chased: uint,\n+    cats_chased: uint,\n }\n \n impl dog {\n-    fn chase_cat() {\n-        let p: &static/mut uint = &mut self.cats_chased; //~ ERROR illegal borrow\n+    fn chase_cat(&mut self) {\n+        let p: &static/mut uint = &mut self.cats_chased; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n         *p += 1u;\n     }\n \n-    fn chase_cat_2() {\n+    fn chase_cat_2(&mut self) {\n         let p: &blk/mut uint = &mut self.cats_chased;\n         *p += 1u;\n     }\n@@ -31,7 +31,7 @@ fn dog() -> dog {\n }\n \n fn main() {\n-    let d = dog();\n+    let mut d = dog();\n     d.chase_cat();\n     debug!(\"cats_chased: %u\", d.cats_chased);\n }"}, {"sha": "8e98d4341a8b33553ff82270ecb51d8744589261", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n struct dog {\n-    mut food: uint,\n+    food: uint,\n }\n \n impl dog {\n-    fn chase_cat() {\n+    fn chase_cat(&mut self) {\n         for uint::range(0u, 10u) |_i| {\n-            let p: &'static mut uint = &mut self.food; //~ ERROR illegal borrow\n+            let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n             *p = 3u;\n         }\n     }"}, {"sha": "f9ea3c6f933a3f5fbeed89f8f648cbaa18ecc778", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -17,7 +17,7 @@ mod argparse {\n         name: &str,\n         desc: &str,\n         max_count: uint,\n-        mut value: uint\n+        value: uint\n     }\n \n     pub fn flag(name: &r/str, desc: &r/str) -> Flag/&r {"}, {"sha": "bdd9b372e4ef61c1f3aff3c17415325e85e38fd5", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n struct invariant {\n-    mut f: &int\n+    f: &int\n }\n \n fn to_same_lifetime(bi: invariant/&r) {\n     let bj: invariant/&r = bi;\n }\n \n fn to_shorter_lifetime(bi: invariant/&r) {\n-    let bj: invariant/&blk = bi; //~ ERROR mismatched types\n-}\n+    let bj: invariant/&blk = bi;\n+}   \n \n fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n     bi //~ ERROR mismatched types"}, {"sha": "0f1b23b2839c6ee0e76512eefa1ffd7c83358b3b", "filename": "src/test/compile-fail/regions-infer-paramd-method.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -17,14 +17,16 @@ trait foo {\n     fn any_int() -> &int;\n }\n \n-type with_foo = {mut f: foo};\n+struct with_foo {\n+    f: foo\n+}\n \n trait set_foo_foo {\n-    fn set_foo(f: foo);\n+    fn set_foo(&mut self, f: foo);\n }\n \n impl set_foo_foo for with_foo {\n-    fn set_foo(f: foo) {\n+    fn set_foo(&mut self, f: foo) {\n         self.f = f; //~ ERROR mismatched types: expected `@foo/&self` but found `@foo/&`\n     }\n }\n@@ -35,14 +37,16 @@ trait bar {\n     fn any_int() -> &int;\n }\n \n-type with_bar = {mut f: bar};\n+struct with_bar {\n+    f: bar\n+}\n \n trait set_foo_bar {\n-    fn set_foo(f: bar);\n+    fn set_foo(&mut self, f: bar);\n }\n \n impl set_foo_bar for with_bar {\n-    fn set_foo(f: bar) {\n+    fn set_foo(&mut self, f: bar) {\n         self.f = f;\n     }\n }"}, {"sha": "0411eeb05ebe1de6114cc8e324d0591e75a5c211", "filename": "src/test/compile-fail/tps-invariant-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct box_impl<T> {\n-    mut f: T,\n+    f: T,\n }\n \n fn box_impl<T>(f: T) -> box_impl<T> {"}, {"sha": "967b201908c4b435d75f2676bf4896cf3145c89c", "filename": "src/test/compile-fail/tps-invariant-enum.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -9,21 +9,22 @@\n // except according to those terms.\n \n struct box<T> {\n-    mut f: T\n+    f: T\n }\n+\n enum box_impl<T> = box<T>;\n \n fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n     b.f = v;\n }\n \n fn main() {\n-    let b = box_impl::<@int>(box::<@int> {mut f: @3});\n+    let b = box_impl::<@int>(box::<@int> {f: @3});\n     set_box_impl(b, @mut 5);\n     //~^ ERROR values differ in mutability\n \n     // No error when type of parameter actually IS @const int\n     let x: @const int = @3; // only way I could find to upcast\n-    let b = box_impl::<@const int>(box::<@const int>{mut f: x});\n+    let b = box_impl::<@const int>(box::<@const int>{f: x});\n     set_box_impl(b, @mut 5);\n }"}, {"sha": "60da6d2208a833a4dccac69208a0908314b45831", "filename": "src/test/compile-fail/tps-invariant-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -14,7 +14,7 @@ trait box_trait<T> {\n }\n \n struct box<T> {\n-    mut f: T\n+    f: T\n }\n \n enum box_impl<T> = box<T>;\n@@ -33,7 +33,7 @@ fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n }\n \n fn main() {\n-    let b = box_impl::<@int>(box::<@int> {mut f: @3});\n+    let b = box_impl::<@int>(box::<@int> {f: @3});\n     set_box_trait(b as box_trait::<@int>, @mut 5);\n     //~^ ERROR values differ in mutability\n     set_box_impl(b, @mut 5);"}, {"sha": "5cc8f6e6edc580ab0cb2258b1b4a96ddca4f34b7", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -16,10 +16,10 @@ fn test1() { let val = @0; { } *val; }\n \n fn test2() -> int { let val = @0; { } *val }\n \n-struct S { mut eax: int }\n+struct S { eax: int }\n \n fn test3() {\n-    let regs = @S {mut eax: 0};\n+    let regs = @mut S {eax: 0};\n     match true { true => { } _ => { } }\n     (*regs).eax = 1;\n }"}, {"sha": "95a80630d7c6d9cab8d35463c870e90aa7c1e155", "filename": "src/test/run-pass-fulldeps/issue-1926.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass-fulldeps%2Fissue-1926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass-fulldeps%2Fissue-1926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-1926.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -20,12 +20,12 @@ use syntax::parse::parser;\n fn new_parse_sess() -> parser::parse_sess {\n     let cm = codemap::new_codemap();\n     let handler = diagnostic::mk_handler(option::none);\n-    let sess = @{\n+    let sess = @mut {\n         cm: cm,\n-        mut next_id: 1,\n+        next_id: 1,\n         span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-        mut chpos: 0u,\n-        mut byte_pos: 0u\n+        chpos: 0u,\n+        byte_pos: 0u\n     };\n     return sess;\n }"}, {"sha": "2f008e51586950b51065fcead4571be20a9fd9da", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -15,11 +15,11 @@ struct Pair<A,B> {\n enum RecEnum<A> = Rec<A>;\n struct Rec<A> {\n     val: A,\n-    mut rec: Option<@RecEnum<A>>\n+    rec: Option<@mut RecEnum<A>>\n }\n \n fn make_cycle<A:Copy>(a: A) {\n-    let g: @RecEnum<A> = @RecEnum(Rec {val: a, mut rec: None});\n+    let g: @mut RecEnum<A> = @mut RecEnum(Rec {val: a, rec: None});\n     g.rec = Some(g);\n }\n "}, {"sha": "ddaa38223ecae07a9cb723c0ac9dc1d47d2575d3", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,8 +10,8 @@\n \n enum option<T> { some(T), none, }\n \n-struct R<T> {mut v: ~[option<T>]}\n+struct R<T> {v: ~[option<T>]}\n \n fn f<T>() -> ~[T] { return ~[]; }\n \n-pub fn main() { let r: R<int> = R {mut v: ~[]}; r.v = f(); }\n+pub fn main() { let mut r: R<int> = R {v: ~[]}; r.v = f(); }"}, {"sha": "e73eb57d607c1fc7891e009689e224d0b32ff838", "filename": "src/test/run-pass/alt-implicit-copy-unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Pair { mut a: ~int, mut b: ~int }\n+struct Pair { a: ~int, b: ~int }\n \n pub fn main() {\n-    let x = ~Pair {mut a: ~10, b: ~20};\n+    let mut x = ~Pair {a: ~10, b: ~20};\n     match x {\n-      ~Pair {a: ref mut a, b: ref b} => {\n+      ~Pair {a: ref mut a, b: ref mut b} => {\n         assert **a == 10; *a = ~30; assert **a == 30;\n       }\n     }"}, {"sha": "95c23753c27e41128b4fc2e245286c0545d63dc0", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-struct X { mut x: int }\n+struct X { x: int }\n \n fn f1(a: &mut X, b: &mut int, -c: int) -> int {\n     let r = a.x + *b + c;\n@@ -19,13 +19,13 @@ fn f1(a: &mut X, b: &mut int, -c: int) -> int {\n     return r;\n }\n \n-fn f2(a: int, f: fn(int)) -> int { f(1); return a; }\n+fn f2(a: int, f: &fn(int)) -> int { f(1); return a; }\n \n pub fn main() {\n-    let mut a = X {mut x: 1}, b = 2, c = 3;\n+    let mut a = X {x: 1}, b = 2, c = 3;\n     assert (f1(&mut a, &mut b, c) == 6);\n     assert (a.x == 0);\n     assert (b == 10);\n-    assert (f2(a.x, |x| a.x = 50 ) == 0);\n+    assert (f2(a.x, |x| a.x = 50) == 0);\n     assert (a.x == 50);\n }"}, {"sha": "2044a5c2346b4ef4182b84293d0cbcc9ab2784e4", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -86,9 +86,10 @@ extern mod test {\n     pub fn get_task_id() -> libc::intptr_t;\n }\n \n+#[deriving_eq]\n struct p {\n-  mut x: int,\n-  mut y: int,\n+  x: int,\n+  y: int,\n }\n \n fn p(x: int, y: int) -> p {\n@@ -98,16 +99,9 @@ fn p(x: int, y: int) -> p {\n     }\n }\n \n-impl cmp::Eq for p {\n-    pure fn eq(&self, other: &p) -> bool {\n-        (*self).x == (*other).x && (*self).y == (*other).y\n-    }\n-    pure fn ne(&self, other: &p) -> bool { !(*self).eq(other) }\n-}\n-\n fn test_class() {\n-  let q = p(1, 2);\n-  let r = p(1, 2);\n+  let mut q = p(1, 2);\n+  let mut r = p(1, 2);\n   \n   unsafe {\n   error!(\"q = %x, r = %x\","}, {"sha": "377ed2608e51329b293c5dbe631391d9db34daef", "filename": "src/test/run-pass/borrowck-binding-mutbl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct F { mut f: ~[int] }\n+struct F { f: ~[int] }\n \n fn impure(_v: &[int]) {\n }\n \n pub fn main() {\n-    let x = F {f: ~[3]};\n+    let mut x = F {f: ~[3]};\n \n     match x {\n       F {f: ref mut v} => {"}, {"sha": "7e81345739f64b0a3d41bc83ab11f89cd5519079", "filename": "src/test/run-pass/borrowck-newtype-issue-2573.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum foo = {mut bar: baz};\n+struct foo {bar: baz}\n \n-enum baz = @{mut baz: int};\n+struct baz_ {baz: int}\n+\n+type baz = @mut baz_;\n \n trait frob {\n     fn frob();"}, {"sha": "ea165e53ceb1ad797cedeae3cd5c711c18ea04c8", "filename": "src/test/run-pass/borrowck-root-while-cond-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct F { mut f: @G }\n+struct F { f: @G }\n struct G { g: ~[int] }\n \n pub fn main() {\n-    let rec = @F {mut f: @G {g: ~[1, 2, 3]}};\n+    let rec = @mut F {f: @G {g: ~[1, 2, 3]}};\n     while rec.f.g.len() == 23 {}\n }"}, {"sha": "285796db20e66d2aa5bae68664820923343fc200", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,9 +10,9 @@\n \n fn borrow<T>(x: &r/T) -> &r/T {x}\n \n-struct Rec { mut f: @int }\n+struct Rec { f: @int }\n \n pub fn main() {\n-    let rec = @Rec {mut f: @22};\n+    let rec = @mut Rec {f: @22};\n     while *borrow(rec.f) == 23 {}\n }"}, {"sha": "025bf8fd9d94f6fab39dcc750961d97412ff6523", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -12,7 +12,7 @@\n // the boxed type parameter\n \n type Tree<T> = {\n-    mut parent: Option<T>,\n+    parent: Option<T>,\n };\n \n fn empty<T>() -> Tree<T> { fail!() }\n@@ -28,7 +28,7 @@ fn Box() -> Box {\n }\n \n enum layout_data = {\n-    mut box: Option<@Box>\n+    box: Option<@Box>\n };\n \n pub fn main() { }"}, {"sha": "125c3ba1027b7669cead13556d53554f5e6f2f4b", "filename": "src/test/run-pass/cycle-collection2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { mut z : fn@() }\n+struct foo { z: fn@() }\n \n fn nop() { }\n-fn nop_foo(_x : @foo) { }\n+fn nop_foo(_x : @mut foo) { }\n \n pub fn main() {\n-    let w = @foo{ mut z: || nop() };\n-    let x : fn@() = || nop_foo(w);\n+    let w = @mut foo{ z: || nop() };\n+    let x: fn@() = || nop_foo(w);\n     w.z = x;\n }"}, {"sha": "fe0d294f01a7adbabf8d8f1036e4fd381f86dfca", "filename": "src/test/run-pass/cycle-collection5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { mut z : fn@() }\n+struct foo { z: fn@() }\n \n fn nop() { }\n-fn nop_foo(_y: @int, _x : @foo) { }\n+fn nop_foo(_y: @int, _x: @mut foo) { }\n \n fn o() -> @int { @10 }\n \n pub fn main() {\n-    let w = @foo { mut z: || nop() };\n+    let w = @mut foo { z: || nop() };\n     let x : fn@() = || nop_foo(o(), w);\n     w.z = x;\n }"}, {"sha": "26e2023e89c50ba75c0e57810fe0f1097b9ac2d1", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -46,7 +46,7 @@ struct thing {\n     x: A\n }\n \n-struct A { mut a: @int }\n+struct A { a: @int }\n \n fn thing(x: A) -> thing {\n     thing {\n@@ -67,14 +67,14 @@ impl Nus for thing { fn f(&self) {} }\n \n pub fn main() {\n \n-    let x = @thing(A {mut a: @10});\n+    let x = @thing(A {a: @10});\n     assert x.foo() == 10;\n     assert x.quux() == 10;\n \n-    let y = ~thing(A {mut a: @10});\n+    let y = ~thing(A {a: @10});\n     assert (copy y).bar() == 10;\n     assert y.quux() == 10;\n \n-    let z = thing(A {mut a: @11});\n+    let z = thing(A {a: @11});\n     assert z.spam() == 11;\n }"}, {"sha": "2d370bada286cb32285670340c48c2614852f36b", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,17 +10,18 @@\n \n // xfail-fast\n \n-fn f(arg: &A) {\n+fn f(arg: &mut A) {\n     arg.a = 100;\n }\n \n-struct A { mut a: int }\n+struct A { a: int }\n \n pub fn main() {\n-    let x = A {a: 10};\n-    f(&x);\n+    let mut x = A {a: 10};\n+    f(&mut x);\n     assert x.a == 100;\n     x.a = 20;\n-    f(&copy x);\n+    let mut y = copy x;\n+    f(&mut y);\n     assert x.a == 20;\n }"}, {"sha": "2ce67f16c06fbdacf890ad5991a8a79b7fcd51d7", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -12,13 +12,13 @@\n \n \n // -*- rust -*-\n-struct Point {x: int, y: int, mut z: int}\n+struct Point {x: int, y: int, z: int}\n \n-fn f(p: @Point) { assert (p.z == 12); p.z = 13; assert (p.z == 13); }\n+fn f(p: @mut Point) { assert (p.z == 12); p.z = 13; assert (p.z == 13); }\n \n pub fn main() {\n-    let a: Point = Point {x: 10, y: 11, mut z: 12};\n-    let b: @Point = @copy a;\n+    let a: Point = Point {x: 10, y: 11, z: 12};\n+    let b: @mut Point = @mut copy a;\n     assert (b.z == 12);\n     f(b);\n     assert (a.z == 12);"}, {"sha": "04d75fd08e184f6a8e5ef60a84d5bac7b720f87f", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-    mut meow: fn@(),\n+    meow: fn@(),\n }\n \n fn cat() -> cat {"}, {"sha": "249d1c21376bd98725d5cecc07e280b9f8674bf6", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -15,9 +15,9 @@ pub mod pipes {\n     use core::cast::{forget, transmute};\n \n     pub struct Stuff<T> {\n-        mut state: state,\n-        mut blocked_task: Option<task::Task>,\n-        mut payload: Option<T>\n+        state: state,\n+        blocked_task: Option<task::Task>,\n+        payload: Option<T>\n     }\n \n     #[deriving_eq]\n@@ -29,17 +29,17 @@ pub mod pipes {\n     }\n \n     pub type packet<T> = {\n-        mut state: state,\n-        mut blocked_task: Option<task::Task>,\n-        mut payload: Option<T>\n+        state: state,\n+        blocked_task: Option<task::Task>,\n+        payload: Option<T>\n     };\n \n     pub fn packet<T:Owned>() -> *packet<T> {\n         unsafe {\n             let p: *packet<T> = cast::transmute(~Stuff{\n-                mut state: empty,\n-                mut blocked_task: None::<task::Task>,\n-                mut payload: None::<T>\n+                state: empty,\n+                blocked_task: None::<task::Task>,\n+                payload: None::<T>\n             });\n             p\n         }\n@@ -70,9 +70,9 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn send<T:Owned>(-p: send_packet<T>, -payload: T) {\n-        let p = p.unwrap();\n-        let p = unsafe { uniquify(p) };\n+    pub fn send<T:Owned>(mut p: send_packet<T>, -payload: T) {\n+        let mut p = p.unwrap();\n+        let mut p = unsafe { uniquify(p) };\n         assert (*p).payload.is_none();\n         (*p).payload = Some(payload);\n         let old_state = swap_state_rel(&mut (*p).state, full);\n@@ -96,9 +96,9 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn recv<T:Owned>(-p: recv_packet<T>) -> Option<T> {\n-        let p = p.unwrap();\n-        let p = unsafe { uniquify(p) };\n+    pub fn recv<T:Owned>(mut p: recv_packet<T>) -> Option<T> {\n+        let mut p = p.unwrap();\n+        let mut p = unsafe { uniquify(p) };\n         loop {\n             let old_state = swap_state_acq(&mut (*p).state,\n                                            blocked);\n@@ -117,8 +117,8 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn sender_terminate<T:Owned>(p: *packet<T>) {\n-        let p = unsafe { uniquify(p) };\n+    pub fn sender_terminate<T:Owned>(mut p: *packet<T>) {\n+        let mut p = unsafe { uniquify(p) };\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty | blocked => {\n             // The receiver will eventually clean up.\n@@ -134,8 +134,8 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn receiver_terminate<T:Owned>(p: *packet<T>) {\n-        let p = unsafe { uniquify(p) };\n+    pub fn receiver_terminate<T:Owned>(mut p: *packet<T>) {\n+        let mut p = unsafe { uniquify(p) };\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty => {\n             // the sender will clean up\n@@ -152,21 +152,25 @@ pub mod pipes {\n     }\n \n     pub struct send_packet<T> {\n-        mut p: Option<*packet<T>>,\n+        p: Option<*packet<T>>,\n     }\n \n     pub impl<T:Owned> Drop for send_packet<T> {\n         fn finalize(&self) {\n-            if self.p != None {\n-                let mut p = None;\n-                p <-> self.p;\n-                sender_terminate(option::unwrap(p))\n+            unsafe {\n+                if self.p != None {\n+                    let mut p = None;\n+                    let self_p: &mut Option<*packet<T>> =\n+                        cast::transmute(&self.p);\n+                    p <-> *self_p;\n+                    sender_terminate(option::unwrap(p))\n+                }\n             }\n         }\n     }\n \n     pub impl<T:Owned> send_packet<T> {\n-        fn unwrap() -> *packet<T> {\n+        fn unwrap(&mut self) -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;\n             option::unwrap(p)\n@@ -180,21 +184,25 @@ pub mod pipes {\n     }\n \n     pub struct recv_packet<T> {\n-        mut p: Option<*packet<T>>,\n+        p: Option<*packet<T>>,\n     }\n \n     pub impl<T:Owned> Drop for recv_packet<T> {\n         fn finalize(&self) {\n-            if self.p != None {\n-                let mut p = None;\n-                p <-> self.p;\n-                receiver_terminate(option::unwrap(p))\n+            unsafe {\n+                if self.p != None {\n+                    let mut p = None;\n+                    let self_p: &mut Option<*packet<T>> =\n+                        cast::transmute(&self.p);\n+                    p <-> *self_p;\n+                    receiver_terminate(option::unwrap(p))\n+                }\n             }\n         }\n     }\n \n     pub impl<T:Owned> recv_packet<T> {\n-        fn unwrap() -> *packet<T> {\n+        fn unwrap(&mut self) -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;\n             option::unwrap(p)"}, {"sha": "5555867073491749c117a842a571bf20677e6833", "filename": "src/test/run-pass/issue-3389.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3389.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n struct trie_node {\n-    mut content: ~[~str],\n-    mut children: ~[trie_node],\n+    content: ~[~str],\n+    children: ~[trie_node],\n }\n \n fn print_str_vector(vector: ~[~str]) {\n@@ -20,7 +20,7 @@ fn print_str_vector(vector: ~[~str]) {\n }\n \n pub fn main() {\n-    let node: trie_node = trie_node {\n+    let mut node: trie_node = trie_node {\n         content: ~[],\n         children: ~[]\n     };"}, {"sha": "0d1b0b9d0029efe4c5d0cc3fa49e026f26637ca1", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,17 +10,17 @@\n \n struct list<T> {\n     element: &self/T,\n-    mut next: Option<@list<T>>\n+    next: Option<@mut list<T>>\n }\n \n impl<T> list<T>{\n-    fn addEnd(&self, element: &self/T) {\n+    fn addEnd(&mut self, element: &self/T) {\n         let newList = list {\n             element: element,\n             next: option::None\n         };\n \n-        self.next = Some(@(newList));\n+        self.next = Some(@mut newList);\n     }\n }\n "}, {"sha": "8f2b13b6eb028e98b8bc79f9337d27891b6c5a19", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -20,7 +20,7 @@ fn exit(+print: ErrPrinter, prog: &str, arg: &str) {\n }\n \n struct X {\n-    mut err: ErrPrinter\n+    err: ErrPrinter\n }\n \n impl X {"}, {"sha": "ce0ae64856236323c3fcee83bb0dd31ce34ce0c5", "filename": "src/test/run-pass/issue-3979-generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n trait Positioned<S> {\n-  fn SetX(&self, S);\n+  fn SetX(&mut self, S);\n   fn X(&self) -> S;\n }\n \n@@ -21,10 +21,10 @@ trait Movable<S, T>: Positioned<T> {\n   }\n }\n \n-struct Point { mut x: int, mut y: int }\n+struct Point { x: int, y: int }\n \n impl Positioned<int> for Point {\n-    fn SetX(&self, x: int) {\n+    fn SetX(&mut self, x: int) {\n         self.x = x;\n     }\n     fn X(&self) -> int {"}, {"sha": "18ad14153d760e509a9ff8f682baa766375b8449", "filename": "src/test/run-pass/issue-3979-xcrate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3979-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3979-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-xcrate.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -13,21 +13,21 @@\n extern mod issue_3979_traits;\n use issue_3979_traits::*;\n \n-struct Point { mut x: int, mut y: int }\n+struct Point { x: int, y: int }\n \n impl Positioned for Point {\n-    fn SetX(&self, x: int) {\n+    fn SetX(&mut self, x: int) {\n         self.x = x;\n     }\n     fn X(&self) -> int {\n         self.x\n     }\n }\n \n-impl Point: Movable;\n+impl Movable for Point;\n \n pub fn main() {\n-    let p = Point{ x: 1, y: 2};\n+    let mut p = Point{ x: 1, y: 2};\n     p.translate(3);\n     assert p.X() == 4;\n }"}, {"sha": "6d6be35bfa06a7e9d31622fea4a18d4d5f8d8841", "filename": "src/test/run-pass/issue-3979.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -1,3 +1,6 @@\n+// xfail-test\n+// Reason: ICE with explicit self\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -9,21 +12,22 @@\n // except according to those terms.\n \n trait Positioned {\n-  fn SetX(&self, int);\n+  fn SetX(&mut self, int);\n   fn X(&self) -> int;\n }\n \n #[allow(default_methods)]\n trait Movable: Positioned {\n-  fn translate(&self, dx: int) {\n-    self.SetX(self.X() + dx);\n+  fn translate(&mut self, dx: int) {\n+    let x = self.X();\n+    self.SetX(x + dx);\n   }\n }\n \n-struct Point { mut x: int, mut y: int }\n+struct Point { x: int, y: int }\n \n impl Positioned for Point {\n-    fn SetX(&self, x: int) {\n+    fn SetX(&mut self, x: int) {\n         self.x = x;\n     }\n     fn X(&self) -> int {\n@@ -34,7 +38,7 @@ impl Positioned for Point {\n impl Movable for Point;\n \n pub fn main() {\n-    let p = Point{ x: 1, y: 2};\n+    let mut p = Point{ x: 1, y: 2};\n     p.translate(3);\n     assert p.X() == 4;\n }"}, {"sha": "b68ec3755d5b35d33568241bdc82d766347bd63a", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -12,10 +12,10 @@\n // resolved when we finish typechecking the fn@.\n \n \n-struct Refs { mut refs: ~[int], n: int }\n+struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n-    let e = @Refs{mut refs: ~[], n: 0};\n+    let e = @mut Refs{refs: ~[], n: 0};\n     let f = fn@ () { log(error, e.n); };\n     e.refs += ~[1];\n }"}, {"sha": "465e5b63d6bdcb7ef46534c435ba8c6b930b56a7", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -15,17 +15,17 @@ enum option<T> {\n     some(T),\n }\n \n-struct Smallintmap<T> {mut v: ~[option<T>]}\n+struct Smallintmap<T> {v: ~[option<T>]}\n \n struct V<T> { v: ~[option<T>] }\n \n-fn mk<T>() -> @Smallintmap<T> {\n+fn mk<T>() -> @mut Smallintmap<T> {\n     let mut v: ~[option<T>] = ~[];\n-    return @Smallintmap {mut v: v};\n+    return @mut Smallintmap {v: v};\n }\n \n fn f<T,U>() {\n-    let sim = mk::<U>();\n+    let mut sim = mk::<U>();\n     log(error, sim);\n }\n "}, {"sha": "e886c941a4b6aa2b6e336984fa1d221a624c0596", "filename": "src/test/run-pass/mlist-cycle.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmlist-cycle.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -12,14 +12,14 @@\n // -*- rust -*-\n extern mod std;\n \n-type cell = {mut c: @list};\n+type cell = {c: @list};\n \n-enum list { link(@cell), nil, }\n+enum list { link(@mut cell), nil, }\n \n pub fn main() {\n-    let first: @cell = @{mut c: @nil()};\n-    let second: @cell = @{mut c: @link(first)};\n+    let first: @cell = @mut {c: @nil()};\n+    let second: @cell = @mut {c: @link(first)};\n     first._0 = @link(second);\n     sys.rustrt.gc();\n-    let third: @cell = @{mut c: @nil()};\n+    let third: @cell = @mut {c: @nil()};\n }"}, {"sha": "10d76cdd9775e31f8c667d5dc4e48ca769e6f02f", "filename": "src/test/run-pass/nested-patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fnested-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fnested-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-patterns.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -11,17 +11,17 @@\n struct A { a: int, b: @int }\n struct B { a: int, b: C }\n struct D { a: int, d: C }\n-struct C { mut c: int }\n+struct C { c: int }\n \n pub fn main() {\n     match A {a: 10, b: @20} {\n         x@A {a, b: @20} => { assert x.a == 10; assert a == 10; }\n         A {b, _} => { fail!(); }\n     }\n-    let x@B {b, _} = B {a: 10, b: C {mut c: 20}};\n+    let mut x@B {b, _} = B {a: 10, b: C {c: 20}};\n     x.b.c = 30;\n     assert b.c == 20;\n-    let y@D {d, _} = D {a: 10, d: C {mut c: 20}};\n+    let mut y@D {d, _} = D {a: 10, d: C {c: 20}};\n     y.d.c = 30;\n     assert d.c == 20;\n }"}, {"sha": "27afde631b2abe146ac89f2d8f75e521ae02ac50", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -470,12 +470,12 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n }\n \n-enum my_visitor = @Stuff;\n+enum my_visitor = @mut Stuff;\n \n struct Stuff {\n-    mut ptr1: *c_void,\n-    mut ptr2: *c_void,\n-    mut vals: ~[~str]\n+    ptr1: *c_void,\n+    ptr2: *c_void,\n+    vals: ~[~str]\n }\n \n impl my_visitor {\n@@ -637,10 +637,9 @@ pub fn main() {\n     unsafe {\n         let r = (1,2,3,true,false, Triple {x:5,y:4,z:3}, (12,));\n         let p = ptr::addr_of(&r) as *c_void;\n-        let u = my_visitor(@Stuff {mut ptr1: p,\n-                             mut ptr2: p,\n-                             mut vals: ~[]\n-                                  });\n+        let u = my_visitor(@mut Stuff {ptr1: p,\n+                                       ptr2: p,\n+                                       vals: ~[]});\n         let v = ptr_visit_adaptor(Inner {inner: u});\n         let td = get_tydesc_for(r);\n         unsafe { error!(\"tydesc sz: %u, align: %u\","}, {"sha": "672e87e4f443d2af284405019b8c42245ff7d388", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n-enum my_visitor = @{ mut types: ~[str] };\n+enum my_visitor = @mut { types: ~[str] };\n \n impl TyVisitor for my_visitor {\n     fn visit_bot() -> bool {\n@@ -141,7 +141,7 @@ fn visit_ty<T>(v: TyVisitor) {\n }\n \n pub fn main() {\n-    let v = my_visitor(@{mut types: ~[]});\n+    let v = my_visitor(@mut {types: ~[]});\n     let vv = v as TyVisitor;\n \n     visit_ty::<bool>(vv);"}, {"sha": "f5a959b2dbcab9d088f3c1ac7d8b1b2dbc3d8f9f", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -37,7 +37,7 @@ fn r(v: *int) -> r {\n enum t = Node;\n \n struct Node {\n-    mut next: Option<@t>,\n+    next: Option<@mut t>,\n     r: r\n }\n \n@@ -50,8 +50,8 @@ pub fn main() {\n         let i2p = cast::reinterpret_cast(&i2);\n         cast::forget(i2);\n \n-        let x1 = @t(Node{\n-            mut next: None,\n+        let mut x1 = @mut t(Node{\n+            next: None,\n               r: {\n               let rs = r(i1p);\n               debug!(\"r = %x\",\n@@ -60,11 +60,11 @@ pub fn main() {\n         });\n         \n         debug!(\"x1 = %x, x1.r = %x\",\n-            cast::reinterpret_cast::<@t, uint>(&x1),\n+            cast::reinterpret_cast::<@mut t, uint>(&x1),\n             cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&(x1.r))));\n \n-        let x2 = @t(Node{\n-            mut next: None,\n+        let mut x2 = @mut t(Node{\n+            next: None,\n               r: {\n               let rs = r(i2p);\n               debug!(\"r2 = %x\",\n@@ -74,7 +74,7 @@ pub fn main() {\n         });\n         \n         debug!(\"x2 = %x, x2.r = %x\",\n-               cast::reinterpret_cast::<@t, uint>(&x2),\n+               cast::reinterpret_cast::<@mut t, uint>(&x2),\n                cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&(x2.r))));\n \n         x1.next = Some(x2);"}, {"sha": "cf5f36916a04109861d5644c12e14cfdd82f9de8", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -37,7 +37,7 @@ fn r(v: U) -> r {\n enum t = Node;\n \n struct Node {\n-    mut next: Option<@t>,\n+    next: Option<@mut t>,\n     r: r\n }\n \n@@ -53,12 +53,12 @@ pub fn main() {\n         let u1 = U {a: 0xB, b: 0xC, c: i1p};\n         let u2 = U {a: 0xB, b: 0xC, c: i2p};\n \n-        let x1 = @t(Node {\n-            mut next: None,\n+        let x1 = @mut t(Node {\n+            next: None,\n             r: r(u1)\n         });\n-        let x2 = @t(Node {\n-            mut next: None,\n+        let x2 = @mut t(Node {\n+            next: None,\n             r: r(u2)\n         });\n         x1.next = Some(x2);"}, {"sha": "4cd3df0f87f90171fbc281c2ec8b01ba2922d11c", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -46,7 +46,7 @@ fn r(v: U, w: int, _x: *int) -> R {\n enum t = Node;\n \n struct Node {\n-    mut next: Option<@t>,\n+    next: Option<@mut t>,\n     r: R\n }\n \n@@ -62,12 +62,12 @@ pub fn main() {\n         let u1 = U {a: 0xB, b: 0xC, c: i1p};\n         let u2 = U {a: 0xB, b: 0xC, c: i2p};\n \n-        let x1 = @t(Node{\n-            mut next: None,\n+        let x1 = @mut t(Node{\n+            next: None,\n             r: r(u1, 42, i1p)\n         });\n-        let x2 = @t(Node{\n-            mut next: None,\n+        let x2 = @mut t(Node{\n+            next: None,\n             r: r(u2, 42, i2p)\n         });\n         x1.next = Some(x2);"}, {"sha": "fb3756320f5c4904f7d891829ba873cf93418601", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -1,3 +1,6 @@\n+// xfail-test\n+// Weird borrow check bug\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -10,47 +13,47 @@\n \n // Test cyclic detector when using trait instances.\n \n-enum Tree = @TreeR;\n+enum Tree = @mut TreeR;\n struct TreeR {\n-    mut left: Option<Tree>,\n-    mut right: Option<Tree>,\n+    left: Option<Tree>,\n+    right: Option<Tree>,\n     val: to_str\n }\n \n trait to_str {\n-    fn to_str() -> ~str;\n+    fn to_str(&self) -> ~str;\n }\n \n impl<T:to_str> to_str for Option<T> {\n-    fn to_str() -> ~str {\n-        match self {\n+    fn to_str(&self) -> ~str {\n+        match *self {\n           None => { ~\"none\" }\n           Some(ref t) => { ~\"some(\" + t.to_str() + ~\")\" }\n         }\n     }\n }\n \n impl to_str for int {\n-    fn to_str() -> ~str { int::str(self) }\n+    fn to_str(&self) -> ~str { int::str(*self) }\n }\n \n impl to_str for Tree {\n-    fn to_str() -> ~str {\n+    fn to_str(&self) -> ~str {\n         let l = self.left, r = self.right;\n-        fmt!(\"[%s, %s, %s]\", self.val.to_str(),\n-             l.to_str(), r.to_str())\n+        let val = &self.val;\n+        fmt!(\"[%s, %s, %s]\", val.to_str(), l.to_str(), r.to_str())\n     }\n }\n \n fn foo<T:to_str>(x: T) -> ~str { x.to_str() }\n \n pub fn main() {\n-    let t1 = Tree(@TreeR{mut left: None,\n-                    mut right: None,\n-                    val: 1 as to_str });\n-    let t2 = Tree(@TreeR{mut left: Some(t1),\n-                    mut right: Some(t1),\n-                    val: 2 as to_str });\n+    let t1 = Tree(@mut TreeR{left: None,\n+                             right: None,\n+                             val: 1 as to_str });\n+    let t2 = Tree(@mut TreeR{left: Some(t1),\n+                             right: Some(t1),\n+                             val: 2 as to_str });\n     let expected = ~\"[2, some([1, none, none]), some([1, none, none])]\";\n     assert t2.to_str() == expected;\n     assert foo(t2 as to_str) == expected;"}, {"sha": "c9c5ce0c928fd2e56abc7c992276d5f0657edbb5", "filename": "src/test/run-pass/writealias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fwritealias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82062a63485b75b7476d078e722b49e3eb376795/src%2Ftest%2Frun-pass%2Fwritealias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwritealias.rs?ref=82062a63485b75b7476d078e722b49e3eb376795", "patch": "@@ -12,12 +12,12 @@\n \n \n // -*- rust -*-\n-struct Point {x: int, y: int, mut z: int}\n+struct Point {x: int, y: int, z: int}\n \n fn f(p: &mut Point) { p.z = 13; }\n \n pub fn main() {\n-    let mut x: Point = Point {x: 10, y: 11, mut z: 12};\n+    let mut x: Point = Point {x: 10, y: 11, z: 12};\n     f(&mut x);\n     assert (x.z == 13);\n }"}]}