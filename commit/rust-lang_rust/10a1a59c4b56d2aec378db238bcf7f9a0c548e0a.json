{"sha": "10a1a59c4b56d2aec378db238bcf7f9a0c548e0a", "node_id": "C_kwDOAAsO6NoAKDEwYTFhNTljNGI1NmQyYWVjMzc4ZGIyMzhiY2Y3ZjlhMGM1NDhlMGE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-26T12:50:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-26T13:32:30Z"}, "message": "fix data race error during env var cleanup", "tree": {"sha": "7d438bfa1fad6cd0517d4ea3ca5bbde379e73adf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d438bfa1fad6cd0517d4ea3ca5bbde379e73adf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a", "html_url": "https://github.com/rust-lang/rust/commit/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64185014af8ffd81109cab1d1140c18933369071", "url": "https://api.github.com/repos/rust-lang/rust/commits/64185014af8ffd81109cab1d1140c18933369071", "html_url": "https://github.com/rust-lang/rust/commit/64185014af8ffd81109cab1d1140c18933369071"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "c1a3db67c84ae78a0093d30375e56b6a9a626b08", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=10a1a59c4b56d2aec378db238bcf7f9a0c548e0a", "patch": "@@ -689,6 +689,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n             Ok(())\n         }\n     }\n+\n+    /// After all threads are done running, this allows data races to occur for subsequent\n+    /// 'administrative' machine accesses (that logically happen outside of the Abstract Machine).\n+    fn allow_data_races_all_threads_done(&mut self) {\n+        let this = self.eval_context_ref();\n+        assert!(this.have_all_terminated());\n+        if let Some(data_race) = &this.machine.data_race {\n+            let old = data_race.ongoing_action_data_race_free.replace(true);\n+            assert!(!old, \"cannot nest allow_data_races\");\n+        }\n+    }\n }\n \n /// Vector clock metadata for a logical memory allocation.\n@@ -955,8 +966,8 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n     fn allow_data_races_ref<R>(&self, op: impl FnOnce(&MiriEvalContext<'mir, 'tcx>) -> R) -> R {\n         let this = self.eval_context_ref();\n         if let Some(data_race) = &this.machine.data_race {\n-            assert!(!data_race.ongoing_action_data_race_free.get(), \"cannot nest allow_data_races\");\n-            data_race.ongoing_action_data_race_free.set(true);\n+            let old = data_race.ongoing_action_data_race_free.replace(true);\n+            assert!(!old, \"cannot nest allow_data_races\");\n         }\n         let result = op(this);\n         if let Some(data_race) = &this.machine.data_race {\n@@ -975,8 +986,8 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n     ) -> R {\n         let this = self.eval_context_mut();\n         if let Some(data_race) = &this.machine.data_race {\n-            assert!(!data_race.ongoing_action_data_race_free.get(), \"cannot nest allow_data_races\");\n-            data_race.ongoing_action_data_race_free.set(true);\n+            let old = data_race.ongoing_action_data_race_free.replace(true);\n+            assert!(!old, \"cannot nest allow_data_races\");\n         }\n         let result = op(this);\n         if let Some(data_race) = &this.machine.data_race {"}, {"sha": "f7bc11a445d97e7f27721ef721fdf902eb00be11", "filename": "src/eval.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=10a1a59c4b56d2aec378db238bcf7f9a0c548e0a", "patch": "@@ -377,10 +377,13 @@ pub fn eval_entry<'tcx>(\n     });\n \n     // Machine cleanup. Only do this if all threads have terminated; threads that are still running\n-    // might cause data races (https://github.com/rust-lang/miri/issues/2020) or Stacked Borrows\n-    // errors (https://github.com/rust-lang/miri/issues/2396) if we deallocate here.\n+    // might cause Stacked Borrows errors (https://github.com/rust-lang/miri/issues/2396).\n     if ecx.have_all_terminated() {\n-        EnvVars::cleanup(&mut ecx).unwrap();\n+        // Even if all threads have terminated, we have to beware of data races since some threads\n+        // might not have joined the main thread (https://github.com/rust-lang/miri/issues/2020,\n+        // https://github.com/rust-lang/miri/issues/2508).\n+        ecx.allow_data_races_all_threads_done();\n+        EnvVars::cleanup(&mut ecx).expect(\"error during env var cleanup\");\n     }\n \n     // Process the result."}, {"sha": "d36ffe70321b4af2acacfb140bc14b3e409a27fa", "filename": "tests/pass-dep/shims/env-cleanup-data-race.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a/tests%2Fpass-dep%2Fshims%2Fenv-cleanup-data-race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a1a59c4b56d2aec378db238bcf7f9a0c548e0a/tests%2Fpass-dep%2Fshims%2Fenv-cleanup-data-race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass-dep%2Fshims%2Fenv-cleanup-data-race.rs?ref=10a1a59c4b56d2aec378db238bcf7f9a0c548e0a", "patch": "@@ -0,0 +1,23 @@\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-preemption-rate=0\n+//@ignore-target-windows: No libc on Windows\n+\n+use std::ffi::CStr;\n+use std::ffi::CString;\n+use std::thread;\n+\n+fn main() {\n+    unsafe {\n+        thread::spawn(|| {\n+            // Access the environment in another thread without taking the env lock\n+            let k = CString::new(\"MIRI_ENV_VAR_TEST\".as_bytes()).unwrap();\n+            let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n+            if s.is_null() {\n+                panic!(\"null\");\n+            }\n+            let _s = String::from_utf8_lossy(CStr::from_ptr(s).to_bytes());\n+        });\n+        thread::yield_now();\n+        // After the main thread exits, env vars will be cleaned up -- but because we have not *joined*\n+        // the other thread, those accesses technically race with those in the other thread.\n+    }\n+}"}]}