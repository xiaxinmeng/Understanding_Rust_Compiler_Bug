{"sha": "6e4663dedf92f871471cc240069d270b65a8160b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNDY2M2RlZGY5MmY4NzE0NzFjYzI0MDA2OWQyNzBiNjVhODE2MGI=", "commit": {"author": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-08T20:20:23Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-02T09:13:32Z"}, "message": "Refactor check_for_mut_range_bound to its own module", "tree": {"sha": "b488142bf8bddd1230257ff31033306087a3e3b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b488142bf8bddd1230257ff31033306087a3e3b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e4663dedf92f871471cc240069d270b65a8160b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4663dedf92f871471cc240069d270b65a8160b", "html_url": "https://github.com/rust-lang/rust/commit/6e4663dedf92f871471cc240069d270b65a8160b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e4663dedf92f871471cc240069d270b65a8160b/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0f588b7706f4ec212e7772084eb7c0e90cfb56", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0f588b7706f4ec212e7772084eb7c0e90cfb56", "html_url": "https://github.com/rust-lang/rust/commit/7b0f588b7706f4ec212e7772084eb7c0e90cfb56"}], "stats": {"total": 225, "additions": 116, "deletions": 109}, "files": [{"sha": "d305c55cb9515f6d585e37e88370bef699fbe92c", "filename": "clippy_lints/src/loops/for_mut_range_bound.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/6e4663dedf92f871471cc240069d270b65a8160b/clippy_lints%2Fsrc%2Floops%2Ffor_mut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4663dedf92f871471cc240069d270b65a8160b/clippy_lints%2Fsrc%2Floops%2Ffor_mut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_mut_range_bound.rs?ref=6e4663dedf92f871471cc240069d270b65a8160b", "patch": "@@ -0,0 +1,114 @@\n+use crate::utils::{higher, path_to_local, span_lint};\n+use if_chain::if_chain;\n+use rustc_hir::{BindingAnnotation, Expr, HirId, Node, PatKind};\n+use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::source_map::Span;\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+\n+pub(super) fn check_for_mut_range_bound(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n+    if let Some(higher::Range {\n+        start: Some(start),\n+        end: Some(end),\n+        ..\n+    }) = higher::range(arg)\n+    {\n+        let mut_ids = vec![check_for_mutability(cx, start), check_for_mutability(cx, end)];\n+        if mut_ids[0].is_some() || mut_ids[1].is_some() {\n+            let (span_low, span_high) = check_for_mutation(cx, body, &mut_ids);\n+            mut_warn_with_span(cx, span_low);\n+            mut_warn_with_span(cx, span_high);\n+        }\n+    }\n+}\n+\n+fn mut_warn_with_span(cx: &LateContext<'_>, span: Option<Span>) {\n+    if let Some(sp) = span {\n+        span_lint(\n+            cx,\n+            super::MUT_RANGE_BOUND,\n+            sp,\n+            \"attempt to mutate range bound within loop; note that the range of the loop is unchanged\",\n+        );\n+    }\n+}\n+\n+fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId> {\n+    if_chain! {\n+        if let Some(hir_id) = path_to_local(bound);\n+        if let Node::Binding(pat) = cx.tcx.hir().get(hir_id);\n+        if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n+        then {\n+            return Some(hir_id);\n+        }\n+    }\n+    None\n+}\n+\n+fn check_for_mutation<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    body: &Expr<'_>,\n+    bound_ids: &[Option<HirId>],\n+) -> (Option<Span>, Option<Span>) {\n+    let mut delegate = MutatePairDelegate {\n+        cx,\n+        hir_id_low: bound_ids[0],\n+        hir_id_high: bound_ids[1],\n+        span_low: None,\n+        span_high: None,\n+    };\n+    cx.tcx.infer_ctxt().enter(|infcx| {\n+        ExprUseVisitor::new(\n+            &mut delegate,\n+            &infcx,\n+            body.hir_id.owner,\n+            cx.param_env,\n+            cx.typeck_results(),\n+        )\n+        .walk_expr(body);\n+    });\n+    delegate.mutation_span()\n+}\n+\n+struct MutatePairDelegate<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    hir_id_low: Option<HirId>,\n+    hir_id_high: Option<HirId>,\n+    span_low: Option<Span>,\n+    span_high: Option<Span>,\n+}\n+\n+impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n+\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n+        if let ty::BorrowKind::MutBorrow = bk {\n+            if let PlaceBase::Local(id) = cmt.place.base {\n+                if Some(id) == self.hir_id_low {\n+                    self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n+                }\n+                if Some(id) == self.hir_id_high {\n+                    self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n+                }\n+            }\n+        }\n+    }\n+\n+    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId) {\n+        if let PlaceBase::Local(id) = cmt.place.base {\n+            if Some(id) == self.hir_id_low {\n+                self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n+            }\n+            if Some(id) == self.hir_id_high {\n+                self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n+            }\n+        }\n+    }\n+}\n+\n+impl MutatePairDelegate<'_, '_> {\n+    fn mutation_span(&self) -> (Option<Span>, Option<Span>) {\n+        (self.span_low, self.span_high)\n+    }\n+}"}, {"sha": "20f0090ebb4875c03d87e26f4b83cf26fba878eb", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 2, "deletions": 109, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/6e4663dedf92f871471cc240069d270b65a8160b/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4663dedf92f871471cc240069d270b65a8160b/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=6e4663dedf92f871471cc240069d270b65a8160b", "patch": "@@ -1,5 +1,6 @@\n mod for_loop_arg;\n mod for_loop_over_map_kv;\n+mod for_mut_range_bound;\n mod manual_flatten;\n mod utils;\n \n@@ -24,7 +25,6 @@ use rustc_hir::{\n     def_id, BinOpKind, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, GenericArg, HirId, InlineAsmOperand,\n     Local, LoopSource, MatchSource, Mutability, Node, Pat, PatKind, QPath, Stmt, StmtKind,\n };\n-use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n@@ -33,7 +33,6 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::iter::{once, Iterator};\n use std::mem;\n use utils::make_iterator_snippet;\n@@ -865,7 +864,7 @@ fn check_for_loop<'tcx>(\n     }\n     for_loop_arg::check_for_loop_arg(cx, pat, arg, expr);\n     for_loop_over_map_kv::check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n-    check_for_mut_range_bound(cx, arg, body);\n+    for_mut_range_bound::check_for_mut_range_bound(cx, arg, body);\n     check_for_single_element_loop(cx, pat, arg, body, expr);\n     detect_same_item_push(cx, pat, arg, body, expr);\n     manual_flatten::check_manual_flatten(cx, pat, arg, body, span);\n@@ -1769,112 +1768,6 @@ fn check_for_single_element_loop<'tcx>(\n     }\n }\n \n-struct MutatePairDelegate<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    hir_id_low: Option<HirId>,\n-    hir_id_high: Option<HirId>,\n-    span_low: Option<Span>,\n-    span_high: Option<Span>,\n-}\n-\n-impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n-\n-    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n-        if let ty::BorrowKind::MutBorrow = bk {\n-            if let PlaceBase::Local(id) = cmt.place.base {\n-                if Some(id) == self.hir_id_low {\n-                    self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n-                }\n-                if Some(id) == self.hir_id_high {\n-                    self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n-                }\n-            }\n-        }\n-    }\n-\n-    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId) {\n-        if let PlaceBase::Local(id) = cmt.place.base {\n-            if Some(id) == self.hir_id_low {\n-                self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n-            }\n-            if Some(id) == self.hir_id_high {\n-                self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n-            }\n-        }\n-    }\n-}\n-\n-impl MutatePairDelegate<'_, '_> {\n-    fn mutation_span(&self) -> (Option<Span>, Option<Span>) {\n-        (self.span_low, self.span_high)\n-    }\n-}\n-\n-fn check_for_mut_range_bound(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n-    if let Some(higher::Range {\n-        start: Some(start),\n-        end: Some(end),\n-        ..\n-    }) = higher::range(arg)\n-    {\n-        let mut_ids = vec![check_for_mutability(cx, start), check_for_mutability(cx, end)];\n-        if mut_ids[0].is_some() || mut_ids[1].is_some() {\n-            let (span_low, span_high) = check_for_mutation(cx, body, &mut_ids);\n-            mut_warn_with_span(cx, span_low);\n-            mut_warn_with_span(cx, span_high);\n-        }\n-    }\n-}\n-\n-fn mut_warn_with_span(cx: &LateContext<'_>, span: Option<Span>) {\n-    if let Some(sp) = span {\n-        span_lint(\n-            cx,\n-            MUT_RANGE_BOUND,\n-            sp,\n-            \"attempt to mutate range bound within loop; note that the range of the loop is unchanged\",\n-        );\n-    }\n-}\n-\n-fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId> {\n-    if_chain! {\n-        if let Some(hir_id) = path_to_local(bound);\n-        if let Node::Binding(pat) = cx.tcx.hir().get(hir_id);\n-        if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n-        then {\n-            return Some(hir_id);\n-        }\n-    }\n-    None\n-}\n-\n-fn check_for_mutation<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    body: &Expr<'_>,\n-    bound_ids: &[Option<HirId>],\n-) -> (Option<Span>, Option<Span>) {\n-    let mut delegate = MutatePairDelegate {\n-        cx,\n-        hir_id_low: bound_ids[0],\n-        hir_id_high: bound_ids[1],\n-        span_low: None,\n-        span_high: None,\n-    };\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        ExprUseVisitor::new(\n-            &mut delegate,\n-            &infcx,\n-            body.hir_id.owner,\n-            cx.param_env,\n-            cx.typeck_results(),\n-        )\n-        .walk_expr(body);\n-    });\n-    delegate.mutation_span()\n-}\n-\n struct VarVisitor<'a, 'tcx> {\n     /// context reference\n     cx: &'a LateContext<'tcx>,"}]}