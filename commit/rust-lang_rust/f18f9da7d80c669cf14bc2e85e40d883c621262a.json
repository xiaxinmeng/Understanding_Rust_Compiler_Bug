{"sha": "f18f9da7d80c669cf14bc2e85e40d883c621262a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOGY5ZGE3ZDgwYzY2OWNmMTRiYzJlODVlNDBkODgzYzYyMTI2MmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-18T16:49:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T16:49:06Z"}, "message": "Merge #5695\n\n5695: Added completion for unstable features r=matklad a=Fihtangolz\n\nAdded xtask for downloading list of unstable features from the unstable book and codegen for it. Also included small changes from linter.\n\nCo-authored-by: Dmitry <mamhigtt@gmail.com>\nCo-authored-by: Dmitry Opokin <mamhigtt@gmail.com>", "tree": {"sha": "3505c0413a0be0e7b99ec797f366a9f49e7ddd9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3505c0413a0be0e7b99ec797f366a9f49e7ddd9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f18f9da7d80c669cf14bc2e85e40d883c621262a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPAaCCRBK7hj4Ov3rIwAAdHIIAB/tN7oja812pMm3p1scqgUD\ncZqxecWxtss5O4LxNxzuzYDpdYkA+CRSj3g+ruDjtBzegeWmxydWOYqrRgtA2qfU\nC6LVv8FKkv/VKc+jn7lYxZ4lB8quw7fdYJKFih66H14Qp4tCGZ8DsSqFCJGAkIkR\nd8Kmd8xUAcYkkqFQfjpvtNo3mg7jyK6Xqi4KBGMDTCR2cIw0jdeWJwIj4HnY9kma\nslm8AIz4wUgWB2woCk7uTxfezqBhK97uD8HCCSefhwZ0KD82X0pgMwAIVyg6whsC\nJzvFNQEfVgJTLMjd4ajcvBhZQ6maFR1mgqJpWNgJ+8WuZNk9qwodDfK83Vwpl9k=\n=8wHH\n-----END PGP SIGNATURE-----\n", "payload": "tree 3505c0413a0be0e7b99ec797f366a9f49e7ddd9c\nparent aa2def023e6b0aa8a68f4992423f566d435e55c6\nparent 45f171c43a4f58eff31081af80ac9693c738994f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597769346 +0000\ncommitter GitHub <noreply@github.com> 1597769346 +0000\n\nMerge #5695\n\n5695: Added completion for unstable features r=matklad a=Fihtangolz\n\nAdded xtask for downloading list of unstable features from the unstable book and codegen for it. Also included small changes from linter.\n\nCo-authored-by: Dmitry <mamhigtt@gmail.com>\nCo-authored-by: Dmitry Opokin <mamhigtt@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f18f9da7d80c669cf14bc2e85e40d883c621262a", "html_url": "https://github.com/rust-lang/rust/commit/f18f9da7d80c669cf14bc2e85e40d883c621262a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f18f9da7d80c669cf14bc2e85e40d883c621262a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa2def023e6b0aa8a68f4992423f566d435e55c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2def023e6b0aa8a68f4992423f566d435e55c6", "html_url": "https://github.com/rust-lang/rust/commit/aa2def023e6b0aa8a68f4992423f566d435e55c6"}, {"sha": "45f171c43a4f58eff31081af80ac9693c738994f", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f171c43a4f58eff31081af80ac9693c738994f", "html_url": "https://github.com/rust-lang/rust/commit/45f171c43a4f58eff31081af80ac9693c738994f"}], "stats": {"total": 108, "additions": 100, "deletions": 8}, "files": [{"sha": "3bad2338a273b7805da53374e17fe15181f6ebfe", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Provides set of implementation for hir's objects that allows get back location in file.\n \n use either::Either;\n use hir_def::{"}, {"sha": "51dbac078f5ed209e3da7a2b06f46bf9d2388e61", "filename": "crates/ide/src/completion.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a", "patch": "@@ -18,6 +18,7 @@ mod complete_unqualified_path;\n mod complete_postfix;\n mod complete_macro_in_item_position;\n mod complete_trait_impl;\n+mod unstable_feature_descriptor;\n \n use ide_db::RootDatabase;\n \n@@ -29,6 +30,11 @@ use crate::{\n     FilePosition,\n };\n \n+//FIXME: cyclic imports caused by xtask generation, this should be better\n+use crate::completion::{\n+    complete_attribute::LintCompletion, unstable_feature_descriptor::UNSTABLE_FEATURE_DESCRIPTOR,\n+};\n+\n pub use crate::completion::{\n     completion_config::CompletionConfig,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat},"}, {"sha": "b193c638760204e5cdc6890e5070f5c8ab3a976e", "filename": "crates/ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a", "patch": "@@ -9,6 +9,7 @@ use syntax::{ast, AstNode, SyntaxKind};\n use crate::completion::{\n     completion_context::CompletionContext,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionKind, Completions},\n+    UNSTABLE_FEATURE_DESCRIPTOR,\n };\n \n pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -17,12 +18,15 @@ pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n         (Some(path), Some(token_tree)) if path.to_string() == \"derive\" => {\n             complete_derive(acc, ctx, token_tree)\n         }\n+        (Some(path), Some(token_tree)) if path.to_string() == \"feature\" => {\n+            complete_lint(acc, ctx, token_tree, UNSTABLE_FEATURE_DESCRIPTOR)\n+        }\n         (Some(path), Some(token_tree))\n             if [\"allow\", \"warn\", \"deny\", \"forbid\"]\n                 .iter()\n                 .any(|lint_level| lint_level == &path.to_string()) =>\n         {\n-            complete_lint(acc, ctx, token_tree)\n+            complete_lint(acc, ctx, token_tree, DEFAULT_LINT_COMPLETIONS)\n         }\n         (_, Some(_token_tree)) => {}\n         _ => complete_attribute_start(acc, ctx, attribute),\n@@ -162,9 +166,14 @@ fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input:\n     }\n }\n \n-fn complete_lint(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree) {\n+fn complete_lint(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    derive_input: ast::TokenTree,\n+    lints_completions: &[LintCompletion],\n+) {\n     if let Ok(existing_lints) = parse_comma_sep_input(derive_input) {\n-        for lint_completion in DEFAULT_LINT_COMPLETIONS\n+        for lint_completion in lints_completions\n             .into_iter()\n             .filter(|completion| !existing_lints.contains(completion.label))\n         {\n@@ -228,7 +237,7 @@ fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n     result\n }\n \n-struct DeriveCompletion {\n+pub(crate) struct DeriveCompletion {\n     label: &'static str,\n     dependencies: &'static [&'static str],\n }\n@@ -248,9 +257,9 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n     DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n ];\n \n-struct LintCompletion {\n-    label: &'static str,\n-    description: &'static str,\n+pub(crate) struct LintCompletion {\n+    pub(crate) label: &'static str,\n+    pub(crate) description: &'static str,\n }\n \n #[rustfmt::skip]"}, {"sha": "14cd583eaa8af084f01906a2510bd5045ba1c51f", "filename": "crates/ide/src/completion/unstable_feature_descriptor.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/crates%2Fide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Funstable_feature_descriptor.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a"}, {"sha": "c468468de1b06fd69c43d5a3dda405a955a4bbbd", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a", "patch": "@@ -9,6 +9,7 @@ mod gen_syntax;\n mod gen_parser_tests;\n mod gen_assists_docs;\n mod gen_feature_docs;\n+mod gen_unstable_future_descriptor;\n \n use std::{\n     fmt, mem,\n@@ -26,8 +27,12 @@ pub use self::{\n     gen_feature_docs::generate_feature_docs,\n     gen_parser_tests::generate_parser_tests,\n     gen_syntax::generate_syntax,\n+    gen_unstable_future_descriptor::generate_unstable_future_descriptor,\n };\n \n+// Directory used by xtask\n+const STORAGE: &str = \".xtask\";\n+\n const GRAMMAR_DIR: &str = \"crates/parser/src/grammar\";\n const OK_INLINE_TESTS_DIR: &str = \"crates/syntax/test_data/parser/inline/ok\";\n const ERR_INLINE_TESTS_DIR: &str = \"crates/syntax/test_data/parser/inline/err\";\n@@ -39,6 +44,10 @@ const AST_TOKENS: &str = \"crates/syntax/src/ast/generated/tokens.rs\";\n const ASSISTS_DIR: &str = \"crates/assists/src/handlers\";\n const ASSISTS_TESTS: &str = \"crates/assists/src/tests/generated.rs\";\n \n+const REPOSITORY_URL: &str = \"https://github.com/rust-lang/rust\";\n+const UNSTABLE_FEATURE: &str = \"crates/ide/src/completion/unstable_feature_descriptor.rs\";\n+const REPO_PATH: &str = \"src/doc/unstable-book/src\";\n+\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub enum Mode {\n     Overwrite,"}, {"sha": "907a9afaeee90a685d63e463c11fc2475c3dd00e", "filename": "xtask/src/codegen/gen_unstable_future_descriptor.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a", "patch": "@@ -0,0 +1,61 @@\n+//! Generates descriptors structure for unstable feature from Unstable Book\n+\n+use crate::codegen::{self, project_root, Mode, Result};\n+use crate::codegen::{reformat, update};\n+use crate::not_bash::{fs2, pushd, run};\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use std::path::PathBuf;\n+use walkdir::WalkDir;\n+\n+fn generate_descriptor(src_dir: PathBuf) -> Result<TokenStream> {\n+    let files = WalkDir::new(src_dir.join(\"language-features\"))\n+        .into_iter()\n+        .chain(WalkDir::new(src_dir.join(\"library-features\")))\n+        .filter_map(|e| e.ok())\n+        .filter(|entry| {\n+            // Get all `.md ` files\n+            entry.file_type().is_file() && entry.path().extension().unwrap_or_default() == \"md\"\n+        })\n+        .collect::<Vec<_>>();\n+\n+    let definitions = files\n+        .iter()\n+        .map(|entry| {\n+            let path = entry.path();\n+            let feature_ident =\n+                format!(\"{}\", path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\"));\n+            let doc = format!(\"{}\", std::fs::read_to_string(path).unwrap());\n+\n+            quote! { LintCompletion { label: #feature_ident, description: #doc } }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    let ts = quote! {\n+        use crate::completion::LintCompletion;\n+\n+        pub(crate) const UNSTABLE_FEATURE_DESCRIPTOR:  &[LintCompletion] = &[\n+            #(#definitions),*\n+        ];\n+    };\n+    Ok(ts)\n+}\n+\n+pub fn generate_unstable_future_descriptor(mode: Mode) -> Result<()> {\n+    let path = project_root().join(codegen::STORAGE);\n+    fs2::create_dir_all(path.clone())?;\n+\n+    let _d = pushd(path.clone());\n+    run!(\"git init\")?;\n+    run!(\"git remote add -f origin {}\", codegen::REPOSITORY_URL)?;\n+    run!(\"git pull origin master\")?;\n+\n+    let src_dir = path.join(codegen::REPO_PATH);\n+    let content = generate_descriptor(src_dir)?.to_string();\n+\n+    let contents = reformat(content)?;\n+    let destination = project_root().join(codegen::UNSTABLE_FEATURE);\n+    update(destination.as_path(), &contents, mode)?;\n+\n+    Ok(())\n+}"}, {"sha": "c4a15f4bdfe140d825e215cca780db465eaf02fc", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a", "patch": "@@ -77,6 +77,7 @@ FLAGS:\n         \"codegen\" => {\n             args.finish()?;\n             codegen::generate_syntax(Mode::Overwrite)?;\n+            codegen::generate_unstable_future_descriptor(Mode::Overwrite)?;\n             codegen::generate_parser_tests(Mode::Overwrite)?;\n             codegen::generate_assists_tests(Mode::Overwrite)?;\n             codegen::generate_assists_docs(Mode::Overwrite)?;"}, {"sha": "bec3c630b765b425d14fe85d903c7af42937defd", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f18f9da7d80c669cf14bc2e85e40d883c621262a/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=f18f9da7d80c669cf14bc2e85e40d883c621262a", "patch": "@@ -112,6 +112,8 @@ fn check_todo(path: &Path, text: &str) {\n         // To support generating `todo!()` in assists, we have `expr_todo()` in\n         // `ast::make`.\n         \"ast/make.rs\",\n+        // The documentation in string literals may contain anything for its own purposes\n+        \"completion/unstable_feature_descriptor.rs\",\n     ];\n     if need_todo.iter().any(|p| path.ends_with(p)) {\n         return;"}]}