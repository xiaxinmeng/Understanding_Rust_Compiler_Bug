{"sha": "0cc079f3e96968cdd88cb016ab34c22ed5f93dc6", "node_id": "C_kwDOAAsO6NoAKDBjYzA3OWYzZTk2OTY4Y2RkODhjYjAxNmFiMzRjMjJlZDVmOTNkYzY", "commit": {"author": {"name": "Jonas Bushart", "email": "jonas@bushart.org", "date": "2022-04-03T12:01:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-03T12:01:11Z"}, "message": "Merge test functions using the same coverage marks to avoid parallelism", "tree": {"sha": "7f27528a36c38eef0bf23371db244c30e14581a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f27528a36c38eef0bf23371db244c30e14581a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc079f3e96968cdd88cb016ab34c22ed5f93dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc079f3e96968cdd88cb016ab34c22ed5f93dc6", "html_url": "https://github.com/rust-lang/rust/commit/0cc079f3e96968cdd88cb016ab34c22ed5f93dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc079f3e96968cdd88cb016ab34c22ed5f93dc6/comments", "author": {"login": "jonasbb", "id": 273459, "node_id": "MDQ6VXNlcjI3MzQ1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/273459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonasbb", "html_url": "https://github.com/jonasbb", "followers_url": "https://api.github.com/users/jonasbb/followers", "following_url": "https://api.github.com/users/jonasbb/following{/other_user}", "gists_url": "https://api.github.com/users/jonasbb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonasbb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonasbb/subscriptions", "organizations_url": "https://api.github.com/users/jonasbb/orgs", "repos_url": "https://api.github.com/users/jonasbb/repos", "events_url": "https://api.github.com/users/jonasbb/events{/privacy}", "received_events_url": "https://api.github.com/users/jonasbb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c039810b16c15c0d94eb57022130db4d0142918f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c039810b16c15c0d94eb57022130db4d0142918f", "html_url": "https://github.com/rust-lang/rust/commit/c039810b16c15c0d94eb57022130db4d0142918f"}], "stats": {"total": 162, "additions": 84, "deletions": 78}, "files": [{"sha": "2048b7baede6da348fa119fe4142c80f89f49630", "filename": "crates/ide_db/src/imports/insert_use/tests.rs", "status": "modified", "additions": 84, "deletions": 78, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/0cc079f3e96968cdd88cb016ab34c22ed5f93dc6/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc079f3e96968cdd88cb016ab34c22ed5f93dc6/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs?ref=0cc079f3e96968cdd88cb016ab34c22ed5f93dc6", "patch": "@@ -84,63 +84,6 @@ use external_crate2::bar::A;\",\n     );\n }\n \n-#[test]\n-fn insert_not_group_empty() {\n-    cov_mark::check!(insert_empty_file);\n-    check_with_config(\n-        \"use external_crate2::bar::A\",\n-        r\"\",\n-        r\"use external_crate2::bar::A;\n-\n-\",\n-        &InsertUseConfig {\n-            granularity: ImportGranularity::Item,\n-            enforce_granularity: true,\n-            prefix_kind: PrefixKind::Plain,\n-            group: false,\n-            skip_glob_imports: true,\n-        },\n-    );\n-}\n-\n-#[test]\n-fn insert_not_group_empty_module() {\n-    cov_mark::check!(insert_empty_module);\n-    check_with_config(\n-        \"foo::bar\",\n-        r\"mod x {$0}\",\n-        r\"mod x {\n-    use foo::bar;\n-}\",\n-        &InsertUseConfig {\n-            granularity: ImportGranularity::Item,\n-            enforce_granularity: true,\n-            prefix_kind: PrefixKind::Plain,\n-            group: false,\n-            skip_glob_imports: true,\n-        },\n-    );\n-}\n-\n-#[test]\n-fn insert_no_group_after_inner_attr() {\n-    cov_mark::check!(insert_empty_inner_attr);\n-    check_with_config(\n-        \"foo::bar\",\n-        r\"#![allow(unused_imports)]\",\n-        r\"#![allow(unused_imports)]\n-\n-use foo::bar;\",\n-        &InsertUseConfig {\n-            granularity: ImportGranularity::Item,\n-            enforce_granularity: true,\n-            prefix_kind: PrefixKind::Plain,\n-            group: false,\n-            skip_glob_imports: true,\n-        },\n-    )\n-}\n-\n #[test]\n fn insert_existing() {\n     check_crate(\"std::fs\", \"use std::fs;\", \"use std::fs;\")\n@@ -359,45 +302,108 @@ fn main() {}\",\n \n #[test]\n fn insert_empty_file() {\n-    cov_mark::check!(insert_empty_file);\n-    // empty files will get two trailing newlines\n-    // this is due to the test case insert_no_imports above\n-    check_crate(\n-        \"foo::bar\",\n-        \"\",\n-        r\"use foo::bar;\n+    {\n+        // Default configuration\n+        cov_mark::check!(insert_empty_file);\n+        // empty files will get two trailing newlines\n+        // this is due to the test case insert_no_imports above\n+        check_crate(\n+            \"foo::bar\",\n+            \"\",\n+            r\"use foo::bar;\n \n \",\n-    )\n+        );\n+    }\n+    {\n+        // \"not group\" configuration\n+        cov_mark::check!(insert_empty_file);\n+        check_with_config(\n+            \"use external_crate2::bar::A\",\n+            r\"\",\n+            r\"use external_crate2::bar::A;\n+\n+\",\n+            &InsertUseConfig {\n+                granularity: ImportGranularity::Item,\n+                enforce_granularity: true,\n+                prefix_kind: PrefixKind::Plain,\n+                group: false,\n+                skip_glob_imports: true,\n+            },\n+        );\n+    }\n }\n \n #[test]\n fn insert_empty_module() {\n-    cov_mark::check!(insert_empty_module);\n-    check(\n-        \"foo::bar\",\n-        r\"\n+    {\n+        // Default configuration\n+        cov_mark::check!(insert_empty_module);\n+        check(\n+            \"foo::bar\",\n+            r\"\n mod x {$0}\n \",\n-        r\"\n+            r\"\n mod x {\n     use foo::bar;\n }\n \",\n-        ImportGranularity::Item,\n-    )\n+            ImportGranularity::Item,\n+        );\n+    }\n+    {\n+        // \"not group\" configuration\n+        cov_mark::check!(insert_empty_module);\n+        check_with_config(\n+            \"foo::bar\",\n+            r\"mod x {$0}\",\n+            r\"mod x {\n+    use foo::bar;\n+}\",\n+            &InsertUseConfig {\n+                granularity: ImportGranularity::Item,\n+                enforce_granularity: true,\n+                prefix_kind: PrefixKind::Plain,\n+                group: false,\n+                skip_glob_imports: true,\n+            },\n+        );\n+    }\n }\n \n #[test]\n fn insert_after_inner_attr() {\n-    cov_mark::check!(insert_empty_inner_attr);\n-    check_crate(\n-        \"foo::bar\",\n-        r\"#![allow(unused_imports)]\",\n-        r\"#![allow(unused_imports)]\n+    {\n+        // Default configuration\n+        cov_mark::check!(insert_empty_inner_attr);\n+        check_crate(\n+            \"foo::bar\",\n+            r\"#![allow(unused_imports)]\",\n+            r\"#![allow(unused_imports)]\n \n use foo::bar;\",\n-    )\n+        );\n+    }\n+    {\n+        // \"not group\" configuration\n+        cov_mark::check!(insert_empty_inner_attr);\n+        check_with_config(\n+            \"foo::bar\",\n+            r\"#![allow(unused_imports)]\",\n+            r\"#![allow(unused_imports)]\n+\n+use foo::bar;\",\n+            &InsertUseConfig {\n+                granularity: ImportGranularity::Item,\n+                enforce_granularity: true,\n+                prefix_kind: PrefixKind::Plain,\n+                group: false,\n+                skip_glob_imports: true,\n+            },\n+        );\n+    }\n }\n \n #[test]"}]}