{"sha": "590c9fc108371fb414d6d3987b018c4da81fac5c", "node_id": "C_kwDOAAsO6NoAKDU5MGM5ZmMxMDgzNzFmYjQxNGQ2ZDM5ODdiMDE4YzRkYTgxZmFjNWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T20:24:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T20:24:27Z"}, "message": "Auto merge of #10778 - Centri3:type-alias-fix, r=llogiq\n\nDon't emit clippy::useless_conversion on type aliases\n\nFixes #10773\n\nchangelog: Enhancement: [`useless_conversion`]: Don't lint on type aliases", "tree": {"sha": "40bc74de5390963f1e48b34696f2f9fd6b51a88c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40bc74de5390963f1e48b34696f2f9fd6b51a88c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/590c9fc108371fb414d6d3987b018c4da81fac5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/590c9fc108371fb414d6d3987b018c4da81fac5c", "html_url": "https://github.com/rust-lang/rust/commit/590c9fc108371fb414d6d3987b018c4da81fac5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/590c9fc108371fb414d6d3987b018c4da81fac5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a167973e8171bce22ded246283faaf80b729382d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a167973e8171bce22ded246283faaf80b729382d", "html_url": "https://github.com/rust-lang/rust/commit/a167973e8171bce22ded246283faaf80b729382d"}, {"sha": "a36d9a7820be9040de8e56ec1852e2920377b935", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36d9a7820be9040de8e56ec1852e2920377b935", "html_url": "https://github.com/rust-lang/rust/commit/a36d9a7820be9040de8e56ec1852e2920377b935"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "28c3fc859e33227394bede57c02982234438519a", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/590c9fc108371fb414d6d3987b018c4da81fac5c/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590c9fc108371fb414d6d3987b018c4da81fac5c/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=590c9fc108371fb414d6d3987b018c4da81fac5c", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::is_ty_alias;\n use clippy_utils::source::{snippet, snippet_with_context};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_copy, is_type_diagnostic_item, same_type_and_consts};\n@@ -138,6 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                 if_chain! {\n                     if let ExprKind::Path(ref qpath) = path.kind;\n                     if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n+                    if !is_ty_alias(qpath);\n                     then {\n                         let a = cx.typeck_results().expr_ty(e);\n                         let b = cx.typeck_results().expr_ty(arg);"}, {"sha": "2e27c260f74c4d45bf7de4c40f4a71cdabb6e86e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/590c9fc108371fb414d6d3987b018c4da81fac5c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590c9fc108371fb414d6d3987b018c4da81fac5c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=590c9fc108371fb414d6d3987b018c4da81fac5c", "patch": "@@ -1,5 +1,6 @@\n #![feature(array_chunks)]\n #![feature(box_patterns)]\n+#![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n@@ -282,6 +283,15 @@ pub fn is_wild(pat: &Pat<'_>) -> bool {\n     matches!(pat.kind, PatKind::Wild)\n }\n \n+/// Checks if the given `QPath` belongs to a type alias.\n+pub fn is_ty_alias(qpath: &QPath<'_>) -> bool {\n+    match *qpath {\n+        QPath::Resolved(_, path) => matches!(path.res, Res::Def(DefKind::TyAlias, ..)),\n+        QPath::TypeRelative(ty, _) if let TyKind::Path(qpath) = ty.kind => { is_ty_alias(&qpath) },\n+        _ => false,\n+    }\n+}\n+\n /// Checks if the method call given in `expr` belongs to the given trait.\n /// This is a deprecated function, consider using [`is_trait_method`].\n pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str]) -> bool {"}, {"sha": "c16caa38fe93ecbc46bddec79855a9d5e95e9b29", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/590c9fc108371fb414d6d3987b018c4da81fac5c/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/590c9fc108371fb414d6d3987b018c4da81fac5c/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=590c9fc108371fb414d6d3987b018c4da81fac5c", "patch": "@@ -33,6 +33,11 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n+fn dont_lint_on_type_alias() {\n+    type A = i32;\n+    _ = A::from(0i32);\n+}\n+\n fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n@@ -106,6 +111,7 @@ fn main() {\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n \n+    dont_lint_on_type_alias();\n     dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_expr_implementing_iterator();"}, {"sha": "c75a2bce4ca23e19b3197a12cfb4d58d558f597d", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/590c9fc108371fb414d6d3987b018c4da81fac5c/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590c9fc108371fb414d6d3987b018c4da81fac5c/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=590c9fc108371fb414d6d3987b018c4da81fac5c", "patch": "@@ -33,6 +33,11 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n+fn dont_lint_on_type_alias() {\n+    type A = i32;\n+    _ = A::from(0i32);\n+}\n+\n fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n@@ -106,6 +111,7 @@ fn main() {\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n \n+    dont_lint_on_type_alias();\n     dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_expr_implementing_iterator();"}, {"sha": "4dca3aac5336124a3f16f27d8a3ad4a42bf379ff", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/590c9fc108371fb414d6d3987b018c4da81fac5c/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/590c9fc108371fb414d6d3987b018c4da81fac5c/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=590c9fc108371fb414d6d3987b018c4da81fac5c", "patch": "@@ -23,97 +23,97 @@ LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:45:22\n+  --> $DIR/useless_conversion.rs:50:22\n    |\n LL |     if Some(\"ok\") == lines.into_iter().next() {}\n    |                      ^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `lines`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:50:21\n+  --> $DIR/useless_conversion.rs:55:21\n    |\n LL |     let mut lines = text.lines().into_iter();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:56:22\n+  --> $DIR/useless_conversion.rs:61:22\n    |\n LL |     if Some(\"ok\") == text.lines().into_iter().next() {}\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n \n error: useless conversion to the same type: `std::ops::Range<i32>`\n-  --> $DIR/useless_conversion.rs:62:13\n+  --> $DIR/useless_conversion.rs:67:13\n    |\n LL |     let _ = NUMBERS.into_iter().next();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n \n error: useless conversion to the same type: `std::ops::Range<i32>`\n-  --> $DIR/useless_conversion.rs:67:17\n+  --> $DIR/useless_conversion.rs:72:17\n    |\n LL |     let mut n = NUMBERS.into_iter();\n    |                 ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:128:21\n+  --> $DIR/useless_conversion.rs:134:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:129:21\n+  --> $DIR/useless_conversion.rs:135:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:130:13\n+  --> $DIR/useless_conversion.rs:136:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:131:13\n+  --> $DIR/useless_conversion.rs:137:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:132:13\n+  --> $DIR/useless_conversion.rs:138:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n-  --> $DIR/useless_conversion.rs:133:13\n+  --> $DIR/useless_conversion.rs:139:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:134:21\n+  --> $DIR/useless_conversion.rs:140:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:139:13\n+  --> $DIR/useless_conversion.rs:145:13\n    |\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:145:23\n+  --> $DIR/useless_conversion.rs:151:23\n    |\n LL |     let _: Foo<'a'> = s2.into();\n    |                       ^^^^^^^^^ help: consider removing `.into()`: `s2`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:147:13\n+  --> $DIR/useless_conversion.rs:153:13\n    |\n LL |     let _ = Foo::<'a'>::from(s3);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider removing `Foo::<'a'>::from()`: `s3`\n \n error: useless conversion to the same type: `std::vec::IntoIter<Foo<'a'>>`\n-  --> $DIR/useless_conversion.rs:149:13\n+  --> $DIR/useless_conversion.rs:155:13\n    |\n LL |     let _ = vec![s4, s4, s4].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![s4, s4, s4].into_iter()`"}]}