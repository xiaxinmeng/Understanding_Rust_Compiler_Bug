{"sha": "049d29bac580b958cdff6e898dad22de09a27958", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0OWQyOWJhYzU4MGI5NThjZGZmNmU4OThkYWQyMmRlMDlhMjc5NTg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-20T06:39:19Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-24T01:04:50Z"}, "message": "Unify primitive errors with other intra-link errors\n\nNow that `PrimTy::name()` exists, there's no need to carry around the\nname of the primitive that failed to resolve. This removes the variants\nspecial-casing primitives in favor of `NotResolved`.\n\n- Remove `NoPrimitiveImpl` and `NoPrimitiveAssocItem`\n- Remove hacky `has_primitive` check in `resolution_failure()`\n- Fixup a couple tests that I forgot to `--bless` before", "tree": {"sha": "663852833c4852e2936a740ba1fbd5f709d72240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/663852833c4852e2936a740ba1fbd5f709d72240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/049d29bac580b958cdff6e898dad22de09a27958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/049d29bac580b958cdff6e898dad22de09a27958", "html_url": "https://github.com/rust-lang/rust/commit/049d29bac580b958cdff6e898dad22de09a27958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/049d29bac580b958cdff6e898dad22de09a27958/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "472e52e5a03790becdbe21be1002a90dd2d7d3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/472e52e5a03790becdbe21be1002a90dd2d7d3d4", "html_url": "https://github.com/rust-lang/rust/commit/472e52e5a03790becdbe21be1002a90dd2d7d3d4"}], "stats": {"total": 90, "additions": 47, "deletions": 43}, "files": [{"sha": "cb2de05598f4b6ca4fe70b5083c2750eba32740f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 14, "deletions": 34, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/049d29bac580b958cdff6e898dad22de09a27958/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049d29bac580b958cdff6e898dad22de09a27958/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=049d29bac580b958cdff6e898dad22de09a27958", "patch": "@@ -60,13 +60,6 @@ impl<'a> From<ResolutionFailure<'a>> for ErrorKind<'a> {\n \n #[derive(Debug)]\n enum ResolutionFailure<'a> {\n-    /// this is a primitive type without an impls (no associated methods)\n-    /// when will this actually happen?\n-    /// the `Res` is the primitive it resolved to\n-    NoPrimitiveImpl(Res, String),\n-    /// `[u8::not_found]`\n-    /// the `Res` is the primitive it resolved to\n-    NoPrimitiveAssocItem { res: Res, prim_name: &'a str, assoc_item: Symbol },\n     /// This resolved, but with the wrong namespace.\n     /// `Namespace` is the expected namespace (as opposed to the actual).\n     WrongNamespace(Res, Namespace),\n@@ -326,8 +319,12 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             })?;\n \n         if let Some((path, prim)) = is_primitive(&path_root, TypeNS) {\n-            let impls = primitive_impl(cx, &path)\n-                .ok_or_else(|| ResolutionFailure::NoPrimitiveImpl(prim, path_root.into()))?;\n+            let impls =\n+                primitive_impl(cx, &path).ok_or_else(|| ResolutionFailure::NotResolved {\n+                    module_id,\n+                    partial_res: Some(prim),\n+                    unresolved: item_str.into(),\n+                })?;\n             for &impl_ in impls {\n                 let link = cx\n                     .tcx\n@@ -354,10 +351,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 item_name,\n                 ns.descr()\n             );\n-            return Err(ResolutionFailure::NoPrimitiveAssocItem {\n-                res: prim,\n-                prim_name: path,\n-                assoc_item: item_name,\n+            return Err(ResolutionFailure::NotResolved {\n+                module_id,\n+                partial_res: Some(prim),\n+                unresolved: item_str.into(),\n             }\n             .into());\n         }\n@@ -1009,7 +1006,7 @@ impl LinkCollector<'_, '_> {\n                 suggest_disambiguator(resolved, diag, path_str, dox, sp, &link_range);\n             });\n         };\n-        if let Res::PrimTy(ty) = res {\n+        if let Res::PrimTy(..) = res {\n             match disambiguator {\n                 Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {\n                     item.attrs.links.push(ItemLink {\n@@ -1489,10 +1486,6 @@ fn resolution_failure(\n     link_range: Option<Range<usize>>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n ) {\n-    let has_primitive = kinds.iter().any(|err|\n-        matches!(err, ResolutionFailure::NoPrimitiveAssocItem{..} | ResolutionFailure::NoPrimitiveImpl(_, _))\n-    );\n-\n     report_diagnostic(\n         collector.cx,\n         &format!(\"unresolved link to `{}`\", path_str),\n@@ -1533,7 +1526,7 @@ fn resolution_failure(\n \n                     let module_id = *module_id;\n                     // FIXME(jynelson): this might conflict with my `Self` fix in #76467\n-                    // FIXME: use itertools `collect_tuple` instead\n+                    // FIXME: maybe use itertools `collect_tuple` instead?\n                     fn split(path: &str) -> Option<(&str, &str)> {\n                         let mut splitter = path.rsplitn(2, \"::\");\n                         splitter.next().and_then(|right| splitter.next().map(|left| (left, right)))\n@@ -1600,10 +1593,7 @@ fn resolution_failure(\n                             diagnostic_name = collector.cx.tcx.item_name(def_id).as_str();\n                             (Some(kind), &*diagnostic_name)\n                         }\n-                        Res::PrimTy(_) => {\n-                            assert!(has_primitive);\n-                            continue;\n-                        }\n+                        Res::PrimTy(ty) => (None, ty.name_str()),\n                         _ => unreachable!(\"only ADTs and primitives are in scope at module level\"),\n                     };\n                     let path_description = if let Some(kind) = kind {\n@@ -1640,7 +1630,7 @@ fn resolution_failure(\n                             Impl | GlobalAsm => unreachable!(\"not a path\"),\n                         }\n                     } else {\n-                        res.descr()\n+                        \"associated item\"\n                     };\n                     let note = format!(\n                         \"the {} `{}` has no {} named `{}`\",\n@@ -1683,16 +1673,6 @@ fn resolution_failure(\n                         diag.level = rustc_errors::Level::Bug;\n                         \"all intra doc links should have a parent item\".to_owned()\n                     }\n-                    ResolutionFailure::NoPrimitiveImpl(res, _) => format!(\n-                        \"this link partially resolves to {}, which does not have any associated items\",\n-                        item(res),\n-                    ),\n-                    ResolutionFailure::NoPrimitiveAssocItem { prim_name, assoc_item, .. } => {\n-                        format!(\n-                            \"the builtin type `{}` does not have an associated item named `{}`\",\n-                            prim_name, assoc_item\n-                        )\n-                    }\n                 };\n                 if let Some(span) = sp {\n                     diag.span_label(span, &note);"}, {"sha": "0278caf308776742e7f478dde6ec310a27b63997", "filename": "src/test/rustdoc-ui/intra-link-errors.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/049d29bac580b958cdff6e898dad22de09a27958/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049d29bac580b958cdff6e898dad22de09a27958/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs?ref=049d29bac580b958cdff6e898dad22de09a27958", "patch": "@@ -54,7 +54,16 @@\n \n /// [u8::not_found]\n //~^ ERROR unresolved link\n-//~| NOTE the builtin type `u8` does not have an associated item named `not_found`\n+//~| NOTE the builtin type `u8` has no associated item named `not_found`\n+\n+/// [std::primitive::u8::not_found]\n+//~^ ERROR unresolved link\n+//~| NOTE the builtin type `u8` has no associated item named `not_found`\n+\n+/// [type@Vec::into_iter]\n+//~^ ERROR unresolved link\n+//~| HELP to link to the associated function, add parentheses\n+//~| NOTE this link resolves to the associated function `into_iter`\n \n /// [S!]\n //~^ ERROR unresolved link"}, {"sha": "b63f799535a1f99e917aa9e8648433634660eab3", "filename": "src/test/rustdoc-ui/intra-link-errors.stderr", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/049d29bac580b958cdff6e898dad22de09a27958/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/049d29bac580b958cdff6e898dad22de09a27958/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr?ref=049d29bac580b958cdff6e898dad22de09a27958", "patch": "@@ -80,19 +80,34 @@ error: unresolved link to `u8::not_found`\n   --> $DIR/intra-link-errors.rs:55:6\n    |\n LL | /// [u8::not_found]\n-   |      ^^^^^^^^^^^^^ the builtin type `u8` does not have an associated item named `not_found`\n+   |      ^^^^^^^^^^^^^ the builtin type `u8` has no associated item named `not_found`\n \n-error: unresolved link to `S`\n+error: unresolved link to `std::primitive::u8::not_found`\n   --> $DIR/intra-link-errors.rs:59:6\n    |\n+LL | /// [std::primitive::u8::not_found]\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the builtin type `u8` has no associated item named `not_found`\n+\n+error: unresolved link to `Vec::into_iter`\n+  --> $DIR/intra-link-errors.rs:63:6\n+   |\n+LL | /// [type@Vec::into_iter]\n+   |      ^^^^^^^^^^^^^^^^^^^\n+   |      |\n+   |      this link resolves to the associated function `into_iter`, which is not in the type namespace\n+   |      help: to link to the associated function, add parentheses: `Vec::into_iter()`\n+\n+error: unresolved link to `S`\n+  --> $DIR/intra-link-errors.rs:68:6\n+   |\n LL | /// [S!]\n    |      ^^\n    |      |\n    |      this link resolves to the struct `S`, which is not in the macro namespace\n    |      help: to link to the struct, prefix with `struct@`: `struct@S`\n \n error: unresolved link to `T::g`\n-  --> $DIR/intra-link-errors.rs:77:6\n+  --> $DIR/intra-link-errors.rs:86:6\n    |\n LL | /// [type@T::g]\n    |      ^^^^^^^^^\n@@ -101,13 +116,13 @@ LL | /// [type@T::g]\n    |      help: to link to the associated function, add parentheses: `T::g()`\n \n error: unresolved link to `T::h`\n-  --> $DIR/intra-link-errors.rs:82:6\n+  --> $DIR/intra-link-errors.rs:91:6\n    |\n LL | /// [T::h!]\n    |      ^^^^^ the trait `T` has no macro named `h`\n \n error: unresolved link to `S::h`\n-  --> $DIR/intra-link-errors.rs:69:6\n+  --> $DIR/intra-link-errors.rs:78:6\n    |\n LL | /// [type@S::h]\n    |      ^^^^^^^^^\n@@ -116,13 +131,13 @@ LL | /// [type@S::h]\n    |      help: to link to the associated function, add parentheses: `S::h()`\n \n error: unresolved link to `m`\n-  --> $DIR/intra-link-errors.rs:89:6\n+  --> $DIR/intra-link-errors.rs:98:6\n    |\n LL | /// [m()]\n    |      ^^^\n    |      |\n    |      this link resolves to the macro `m`, which is not in the value namespace\n    |      help: to link to the macro, add an exclamation mark: `m!`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 20 previous errors\n "}, {"sha": "daf7075a91740359157af834bb7b50b42447d0c3", "filename": "src/test/rustdoc/intra-link-associated-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/049d29bac580b958cdff6e898dad22de09a27958/src%2Ftest%2Frustdoc%2Fintra-link-associated-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/049d29bac580b958cdff6e898dad22de09a27958/src%2Ftest%2Frustdoc%2Fintra-link-associated-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-associated-items.rs?ref=049d29bac580b958cdff6e898dad22de09a27958", "patch": "@@ -3,7 +3,7 @@\n \n /// [`std::collections::BTreeMap::into_iter`]\n /// [`String::from`] is ambiguous as to which `From` impl\n-/// [type@Vec::into_iter] uses a disambiguator\n+/// [Vec::into_iter()] uses a disambiguator\n // @has 'intra_link_associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html#method.into_iter\"]' 'std::collections::BTreeMap::into_iter'\n // @has 'intra_link_associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html#method.from\"]' 'String::from'\n // @has 'intra_link_associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_iter\"]' 'Vec::into_iter'"}]}