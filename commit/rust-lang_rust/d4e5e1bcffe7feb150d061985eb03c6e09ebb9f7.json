{"sha": "d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZTVlMWJjZmZlN2ZlYjE1MGQwNjE5ODVlYjAzYzZlMDllYmI5Zjc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-30T23:41:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2020-05-01T15:14:39Z"}, "message": "Don't copy bytecode files into the incr. comp. cache.\n\nIt's no longer necessary now that bitcode is embedded into object files.\n\nThis change meant that `WorkProductFileKind::Bytecode` is no longer\nnecessary, which means that type is no longer necessary, which allowed\nseveral places in the code to become simpler.", "tree": {"sha": "5a98126d77776fe5d040e1c0ddec26ec04f17681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a98126d77776fe5d040e1c0ddec26ec04f17681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "html_url": "https://github.com/rust-lang/rust/commit/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd61d06772d17c6242265d860fbfb5eafd282caa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd61d06772d17c6242265d860fbfb5eafd282caa", "html_url": "https://github.com/rust-lang/rust/commit/fd61d06772d17c6242265d860fbfb5eafd282caa"}], "stats": {"total": 64, "additions": 19, "deletions": 45}, "files": [{"sha": "22752cf40890670228e22caa6dcf47e74289b140", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "patch": "@@ -23,7 +23,7 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n     copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir, in_incr_comp_dir_sess,\n };\n-use rustc_middle::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n use rustc_middle::ty::TyCtxt;\n@@ -478,10 +478,7 @@ fn copy_all_cgu_workproducts_to_incr_comp_cache_dir(\n         let mut files = vec![];\n \n         if let Some(ref path) = module.object {\n-            files.push((WorkProductFileKind::Object, path.clone()));\n-        }\n-        if let Some(ref path) = module.bytecode {\n-            files.push((WorkProductFileKind::Bytecode, path.clone()));\n+            files.push(path.clone());\n         }\n \n         if let Some((id, product)) =\n@@ -818,20 +815,9 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n ) -> Result<WorkItemResult<B>, FatalError> {\n     let incr_comp_session_dir = cgcx.incr_comp_session_dir.as_ref().unwrap();\n     let mut object = None;\n-    let mut bytecode = None;\n-    for (kind, saved_file) in &module.source.saved_files {\n-        let obj_out = match kind {\n-            WorkProductFileKind::Object => {\n-                let path = cgcx.output_filenames.temp_path(OutputType::Object, Some(&module.name));\n-                object = Some(path.clone());\n-                path\n-            }\n-            WorkProductFileKind::Bytecode => {\n-                let path = cgcx.output_filenames.temp_path(OutputType::Bitcode, Some(&module.name));\n-                bytecode = Some(path.clone());\n-                path\n-            }\n-        };\n+    for saved_file in &module.source.saved_files {\n+        let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, Some(&module.name));\n+        object = Some(obj_out.clone());\n         let source_file = in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n         debug!(\n             \"copying pre-existing module `{}` from {:?} to {}\",\n@@ -851,13 +837,12 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n     }\n \n     assert_eq!(object.is_some(), module_config.emit_obj != EmitObj::None);\n-    assert_eq!(bytecode.is_some(), module_config.emit_bc);\n \n     Ok(WorkItemResult::Compiled(CompiledModule {\n         name: module.name,\n         kind: ModuleKind::Regular,\n         object,\n-        bytecode,\n+        bytecode: None,\n     }))\n }\n "}, {"sha": "99c799950c06347c725426e84336ffd7086614f7", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "patch": "@@ -134,7 +134,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n \n             for swp in work_products {\n                 let mut all_files_exist = true;\n-                for &(_, ref file_name) in swp.work_product.saved_files.iter() {\n+                for file_name in swp.work_product.saved_files.iter() {\n                     let path = in_incr_comp_dir_sess(sess, file_name);\n                     if !path.exists() {\n                         all_files_exist = false;"}, {"sha": "4db6297712c59f569e4b3b7fe6487b836801e878", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "patch": "@@ -74,9 +74,9 @@ pub fn save_work_product_index(\n         if !new_work_products.contains_key(id) {\n             work_product::delete_workproduct_files(sess, wp);\n             debug_assert!(\n-                wp.saved_files.iter().all(|&(_, ref file_name)| {\n-                    !in_incr_comp_dir_sess(sess, file_name).exists()\n-                })\n+                wp.saved_files\n+                    .iter()\n+                    .all(|file_name| { !in_incr_comp_dir_sess(sess, file_name).exists() })\n             );\n         }\n     }\n@@ -85,7 +85,7 @@ pub fn save_work_product_index(\n     debug_assert!({\n         new_work_products\n             .iter()\n-            .flat_map(|(_, wp)| wp.saved_files.iter().map(|&(_, ref name)| name))\n+            .flat_map(|(_, wp)| wp.saved_files.iter())\n             .map(|name| in_incr_comp_dir_sess(sess, name))\n             .all(|path| path.exists())\n     });"}, {"sha": "a15ee6d81dbbcccf07bb2621442ff846d3148d67", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "patch": "@@ -2,30 +2,26 @@\n \n use crate::persist::fs::*;\n use rustc_fs_util::link_or_copy;\n-use rustc_middle::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_session::Session;\n use std::fs as std_fs;\n use std::path::PathBuf;\n \n pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n     sess: &Session,\n     cgu_name: &str,\n-    files: &[(WorkProductFileKind, PathBuf)],\n+    files: &[PathBuf],\n ) -> Option<(WorkProductId, WorkProduct)> {\n     debug!(\"copy_cgu_workproducts_to_incr_comp_cache_dir({:?},{:?})\", cgu_name, files);\n     sess.opts.incremental.as_ref()?;\n \n     let saved_files = files\n         .iter()\n-        .map(|&(kind, ref path)| {\n-            let extension = match kind {\n-                WorkProductFileKind::Object => \"o\",\n-                WorkProductFileKind::Bytecode => \"bc\",\n-            };\n-            let file_name = format!(\"{}.{}\", cgu_name, extension);\n+        .map(|path| {\n+            let file_name = format!(\"{}.o\", cgu_name);\n             let path_in_incr_dir = in_incr_comp_dir_sess(sess, &file_name);\n             match link_or_copy(path, &path_in_incr_dir) {\n-                Ok(_) => Some((kind, file_name)),\n+                Ok(_) => Some(file_name),\n                 Err(err) => {\n                     sess.warn(&format!(\n                         \"error copying object file `{}` \\\n@@ -47,7 +43,7 @@ pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n }\n \n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n-    for &(_, ref file_name) in &work_product.saved_files {\n+    for file_name in &work_product.saved_files {\n         let path = in_incr_comp_dir_sess(sess, file_name);\n         match std_fs::remove_file(&path) {\n             Ok(()) => {}"}, {"sha": "ef97f457c197aa45fadf8a8d428e813b86e19531", "filename": "src/librustc_middle/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fdep_graph%2Fmod.rs?ref=d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "patch": "@@ -12,7 +12,7 @@ mod dep_node;\n pub(crate) use rustc_query_system::dep_graph::DepNodeParams;\n pub use rustc_query_system::dep_graph::{\n     debug, hash_result, DepContext, DepNodeColor, DepNodeIndex, SerializedDepNodeIndex,\n-    WorkProduct, WorkProductFileKind, WorkProductId,\n+    WorkProduct, WorkProductId,\n };\n \n pub use dep_node::{label_strs, DepConstructor, DepKind, DepNode, DepNodeExt};"}, {"sha": "5f14a09b24daaced6255be8eea34c84b99cc396c", "filename": "src/librustc_query_system/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs?ref=d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "patch": "@@ -861,13 +861,7 @@ impl<K: DepKind> DepGraph<K> {\n pub struct WorkProduct {\n     pub cgu_name: String,\n     /// Saved files associated with this CGU.\n-    pub saved_files: Vec<(WorkProductFileKind, String)>,\n-}\n-\n-#[derive(Clone, Copy, Debug, RustcEncodable, RustcDecodable, PartialEq)]\n-pub enum WorkProductFileKind {\n-    Object,\n-    Bytecode,\n+    pub saved_files: Vec<String>,\n }\n \n #[derive(Clone)]"}, {"sha": "4acb70c7e803b729d3e52a0646862bf435e5f118", "filename": "src/librustc_query_system/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs?ref=d4e5e1bcffe7feb150d061985eb03c6e09ebb9f7", "patch": "@@ -6,7 +6,6 @@ mod query;\n mod serialized;\n \n pub use dep_node::{DepNode, DepNodeParams, WorkProductId};\n-pub use graph::WorkProductFileKind;\n pub use graph::{hash_result, DepGraph, DepNodeColor, DepNodeIndex, TaskDeps, WorkProduct};\n pub use prev::PreviousDepGraph;\n pub use query::DepGraphQuery;"}]}