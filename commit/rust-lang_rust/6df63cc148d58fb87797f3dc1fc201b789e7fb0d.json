{"sha": "6df63cc148d58fb87797f3dc1fc201b789e7fb0d", "node_id": "C_kwDOAAsO6NoAKDZkZjYzY2MxNDhkNThmYjg3Nzk3ZjNkYzFmYzIwMWI3ODllN2ZiMGQ", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2022-01-22T20:07:00Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2022-02-14T16:27:37Z"}, "message": "Replace `def_site`-&-privacy implementation with a stability-based one.\n\nSince `decl_macro`s and/or `Span::def_site()` is deemed quite unstable,\nno public-facing macro that relies on it can hope to be, itself, stabilized.\n\nWe circumvent the issue by no longer relying on field privacy for safety and,\ninstead, relying on an unstable feature-gate to act as the gate keeper for\nnon users of the macro (thanks to `allow_internal_unstable`).\n\nThis is technically not correct (since a `nightly` user could technically enable\nthe feature and cause unsoundness with it); or, in other words, this makes the\nfeature-gate used to gate the access to the field be (technically unsound, and\nin practice) `unsafe`. Hence it having `unsafe` in its name.\n\nBack to the macro, we go back to `macro_rules!` / `mixed_site()`-span rules thanks\nto declaring the `decl_macro` as `semitransparent`, which is a hack to basically have\n`pub macro_rules!`\n\nCo-Authored-By: Mara Bos <m-ou.se@m-ou.se>", "tree": {"sha": "d5f4cab58d764a0c95f276bbd0c0623d8e79f069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5f4cab58d764a0c95f276bbd0c0623d8e79f069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6df63cc148d58fb87797f3dc1fc201b789e7fb0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6df63cc148d58fb87797f3dc1fc201b789e7fb0d", "html_url": "https://github.com/rust-lang/rust/commit/6df63cc148d58fb87797f3dc1fc201b789e7fb0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6df63cc148d58fb87797f3dc1fc201b789e7fb0d/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e443dceb8d7eb11553fe19ea1fcaf5eedc9004", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e443dceb8d7eb11553fe19ea1fcaf5eedc9004", "html_url": "https://github.com/rust-lang/rust/commit/54e443dceb8d7eb11553fe19ea1fcaf5eedc9004"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "84fed4ed24364dd74928c281379c7b1fb6d7659b", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6df63cc148d58fb87797f3dc1fc201b789e7fb0d/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df63cc148d58fb87797f3dc1fc201b789e7fb0d/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=6df63cc148d58fb87797f3dc1fc201b789e7fb0d", "patch": "@@ -406,7 +406,9 @@ use crate::ops::{CoerceUnsized, Deref, DerefMut, DispatchFromDyn, Receiver};\n #[repr(transparent)]\n #[derive(Copy, Clone)]\n pub struct Pin<P> {\n-    pointer: P,\n+    #[unstable(feature = \"unsafe_pin_internals\", issue = \"none\")]\n+    #[doc(hidden)]\n+    pub pointer: P,\n }\n \n // The following implementations aren't derived in order to avoid soundness\n@@ -1074,6 +1076,8 @@ impl<P, U> DispatchFromDyn<Pin<U>> for Pin<P> where P: DispatchFromDyn<U> {}\n ///\n /// [`Box::pin`]: ../../std/boxed/struct.Box.html#method.pin\n #[unstable(feature = \"pin_macro\", issue = \"93178\")]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+#[allow_internal_unstable(unsafe_pin_internals)]\n pub macro pin($value:expr $(,)?) {\n     // This is `Pin::new_unchecked(&mut { $value })`, so, for starters, let's\n     // review such a hypothetical macro (that any user-code could define):\n@@ -1145,8 +1149,5 @@ pub macro pin($value:expr $(,)?) {\n     //\n     // See https://doc.rust-lang.org/1.58.1/reference/destructors.html#temporary-lifetime-extension\n     // for more info.\n-    //\n-    // Finally, we don't hit problems _w.r.t._ the privacy of the `pointer` field, or the\n-    // unqualified `Pin` name, thanks to `decl_macro`s being _fully_ hygienic (`def_site` hygiene).\n-    Pin::<&mut _> { pointer: &mut { $value } }\n+    $crate::pin::Pin::<&mut _> { pointer: &mut { $value } }\n }"}]}