{"sha": "c430d6111a9c607bc7371112135d3209a8ed2028", "node_id": "C_kwDOAAsO6NoAKGM0MzBkNjExMWE5YzYwN2JjNzM3MTExMjEzNWQzMjA5YThlZDIwMjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-20T15:59:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-20T15:59:55Z"}, "message": "Rollup merge of #110599 - WaffleLapkin:bonk_tygenericarg_transmutes, r=compiler-errors\n\nRemove an unused `&[Ty]` <-> `&[GenericArg]`\n\nMissed this one in #110496, oops.\n\nr? `@compiler-errors`", "tree": {"sha": "ef2832a5a0475b7e7f9bb34152d76b09ddc38cd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef2832a5a0475b7e7f9bb34152d76b09ddc38cd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c430d6111a9c607bc7371112135d3209a8ed2028", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQWF7CRBK7hj4Ov3rIwAAuZUIAIkHZiArT9LYf79ngwEMMsZS\nRBZ/YFpd6K6NV79vG+oJIs5CbD40SBdBvigsDbuT0crxH8LPnYIpm5WqzI0C8dva\nbQuyHGLSS5zeTPTA3Jhxy4BbKqMI+i9RJC+HdTr+3rg9aI2xiDl9UJTpOBYuJOk5\nROIDenPyxmWEeenU4Cx32hvSctcd5kdAvP1LbB3mEH65d4qoF0JLmZp/Xr6LNvUJ\nkdYR303QYtAE8L7tz8rC/owKmU0YWylWbvH44AB/b6ao3jn1WYsp6+GCiCIXgZqD\nsxv+pRFfRLDy1BqNeSJ4wEVNwrcAP2wWpkjg7Ee5J+ZzX5gznffqXVxJM8+FeFM=\n=kOqP\n-----END PGP SIGNATURE-----\n", "payload": "tree ef2832a5a0475b7e7f9bb34152d76b09ddc38cd0\nparent 9f3929551724742c7637553e0fe7ccc0031615c9\nparent 6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682006395 +0200\ncommitter GitHub <noreply@github.com> 1682006395 +0200\n\nRollup merge of #110599 - WaffleLapkin:bonk_tygenericarg_transmutes, r=compiler-errors\n\nRemove an unused `&[Ty]` <-> `&[GenericArg]`\n\nMissed this one in #110496, oops.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c430d6111a9c607bc7371112135d3209a8ed2028", "html_url": "https://github.com/rust-lang/rust/commit/c430d6111a9c607bc7371112135d3209a8ed2028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c430d6111a9c607bc7371112135d3209a8ed2028/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3929551724742c7637553e0fe7ccc0031615c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3929551724742c7637553e0fe7ccc0031615c9", "html_url": "https://github.com/rust-lang/rust/commit/9f3929551724742c7637553e0fe7ccc0031615c9"}, {"sha": "6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b", "html_url": "https://github.com/rust-lang/rust/commit/6d4b7fe9ed055c086c7843c9ce07c1a5a19e245b"}], "stats": {"total": 13, "additions": 0, "deletions": 13}, "files": [{"sha": "73c9c86f76a2338cf112a986a36319e605786f57", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c430d6111a9c607bc7371112135d3209a8ed2028/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c430d6111a9c607bc7371112135d3209a8ed2028/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=c430d6111a9c607bc7371112135d3209a8ed2028", "patch": "@@ -21,7 +21,6 @@ use std::marker::PhantomData;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::ops::{ControlFlow, Deref};\n-use std::slice;\n \n /// An entity in the Rust type system, which can be one of\n /// several kinds (types, lifetimes, and consts).\n@@ -55,18 +54,6 @@ pub enum GenericArgKind<'tcx> {\n     Const(ty::Const<'tcx>),\n }\n \n-/// This function goes from `&'a [Ty<'tcx>]` to `&'a [GenericArg<'tcx>]`\n-///\n-/// This is sound as, for types, `GenericArg` is just\n-/// `NonZeroUsize::new_unchecked(ty as *const _ as usize)` as\n-/// long as we use `0` for the `TYPE_TAG`.\n-pub fn ty_slice_as_generic_args<'a, 'tcx>(ts: &'a [Ty<'tcx>]) -> &'a [GenericArg<'tcx>] {\n-    assert_eq!(TYPE_TAG, 0);\n-    // SAFETY: the whole slice is valid and immutable.\n-    // `Ty` and `GenericArg` is explained above.\n-    unsafe { slice::from_raw_parts(ts.as_ptr().cast(), ts.len()) }\n-}\n-\n impl<'tcx> GenericArgKind<'tcx> {\n     #[inline]\n     fn pack(self) -> GenericArg<'tcx> {"}]}