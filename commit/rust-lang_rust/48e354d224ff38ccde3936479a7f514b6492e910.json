{"sha": "48e354d224ff38ccde3936479a7f514b6492e910", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZTM1NGQyMjRmZjM4Y2NkZTM5MzY0NzlhN2Y1MTRiNjQ5MmU5MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-21T08:55:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-21T08:55:50Z"}, "message": "Auto merge of #58927 - GuillaumeGomez:default-keyword, r=QuietMisdreavus\n\nAdd default keyword handling in rustdoc\n\nFixes #58898.\n\nr? @QuietMisdreavus", "tree": {"sha": "c02691ac1772f1182dbb1b17a9562bf5b2e7f007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c02691ac1772f1182dbb1b17a9562bf5b2e7f007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48e354d224ff38ccde3936479a7f514b6492e910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48e354d224ff38ccde3936479a7f514b6492e910", "html_url": "https://github.com/rust-lang/rust/commit/48e354d224ff38ccde3936479a7f514b6492e910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48e354d224ff38ccde3936479a7f514b6492e910/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a5dfa0b4438d199e8703fd578f59a5049527be", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a5dfa0b4438d199e8703fd578f59a5049527be", "html_url": "https://github.com/rust-lang/rust/commit/15a5dfa0b4438d199e8703fd578f59a5049527be"}, {"sha": "541ad45a83482e3132c75fbbc55fb2afc03a6031", "url": "https://api.github.com/repos/rust-lang/rust/commits/541ad45a83482e3132c75fbbc55fb2afc03a6031", "html_url": "https://github.com/rust-lang/rust/commit/541ad45a83482e3132c75fbbc55fb2afc03a6031"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "4819256a54550f3ca4cdc86c9c3effbbb2a50ede", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/48e354d224ff38ccde3936479a7f514b6492e910/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e354d224ff38ccde3936479a7f514b6492e910/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=48e354d224ff38ccde3936479a7f514b6492e910", "patch": "@@ -508,6 +508,18 @@ impl Item {\n             .as_ref()\n             .or_else(|| self.stability.as_ref().and_then(|s| s.deprecation.as_ref()))\n     }\n+    pub fn is_default(&self) -> bool {\n+        match self.inner {\n+            ItemEnum::MethodItem(ref meth) => {\n+                if let Some(defaultness) = meth.defaultness {\n+                    defaultness.has_value() && !defaultness.is_final()\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -1700,9 +1712,11 @@ pub struct Method {\n     pub generics: Generics,\n     pub decl: FnDecl,\n     pub header: hir::FnHeader,\n+    pub defaultness: Option<hir::Defaultness>,\n }\n \n-impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId) {\n+impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId,\n+                            Option<hir::Defaultness>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Method {\n         let (generics, decl) = enter_impl_trait(cx, || {\n             (self.1.clean(cx), (&*self.0.decl, self.2).clean(cx))\n@@ -1711,6 +1725,7 @@ impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId)\n             decl,\n             generics,\n             header: self.0.header,\n+            defaultness: self.3,\n         }\n     }\n }\n@@ -2016,7 +2031,7 @@ impl Clean<Item> for hir::TraitItem {\n                                     default.map(|e| print_const_expr(cx, e)))\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n-                MethodItem((sig, &self.generics, body).clean(cx))\n+                MethodItem((sig, &self.generics, body, None).clean(cx))\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref names)) => {\n                 let (generics, decl) = enter_impl_trait(cx, || {\n@@ -2054,7 +2069,7 @@ impl Clean<Item> for hir::ImplItem {\n                                     Some(print_const_expr(cx, expr)))\n             }\n             hir::ImplItemKind::Method(ref sig, body) => {\n-                MethodItem((sig, &self.generics, body).clean(cx))\n+                MethodItem((sig, &self.generics, body, Some(self.defaultness)).clean(cx))\n             }\n             hir::ImplItemKind::Type(ref ty) => TypedefItem(Typedef {\n                 type_: ty.clean(cx),\n@@ -2137,7 +2152,8 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                             abi: sig.abi(),\n                             constness,\n                             asyncness: hir::IsAsync::NotAsync,\n-                        }\n+                        },\n+                        defaultness: Some(self.defaultness),\n                     })\n                 } else {\n                     TyMethodItem(TyMethod {"}, {"sha": "48baf27bae20a5efd704cb04ce10eb7e16acb3f5", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48e354d224ff38ccde3936479a7f514b6492e910/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e354d224ff38ccde3936479a7f514b6492e910/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=48e354d224ff38ccde3936479a7f514b6492e910", "patch": "@@ -45,6 +45,7 @@ pub struct GenericBounds<'a>(pub &'a [clean::GenericBound]);\n /// Wrapper struct for emitting a comma-separated list of items\n pub struct CommaSep<'a, T>(pub &'a [T]);\n pub struct AbiSpace(pub Abi);\n+pub struct DefaultSpace(pub bool);\n \n /// Wrapper struct for properly emitting a function or method declaration.\n pub struct Function<'a> {\n@@ -1057,3 +1058,13 @@ impl fmt::Display for AbiSpace {\n         }\n     }\n }\n+\n+impl fmt::Display for DefaultSpace {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.0 {\n+            write!(f, \"default \")\n+        } else {\n+            Ok(())\n+        }\n+    }\n+}"}, {"sha": "a262a2f28853cab5f9bc9549d8e4d86f89f49db6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48e354d224ff38ccde3936479a7f514b6492e910/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e354d224ff38ccde3936479a7f514b6492e910/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=48e354d224ff38ccde3936479a7f514b6492e910", "patch": "@@ -61,7 +61,7 @@ use crate::doctree;\n use crate::fold::DocFolder;\n use crate::html::escape::Escape;\n use crate::html::format::{AsyncSpace, ConstnessSpace};\n-use crate::html::format::{GenericBounds, WhereClause, href, AbiSpace};\n+use crate::html::format::{GenericBounds, WhereClause, href, AbiSpace, DefaultSpace};\n use crate::html::format::{VisSpace, Function, UnsafetySpace, MutableSpace};\n use crate::html::format::fmt_impl_for_trait_page;\n use crate::html::item_type::ItemType;\n@@ -3429,11 +3429,12 @@ fn render_assoc_item(w: &mut fmt::Formatter<'_>,\n             }\n         };\n         let mut header_len = format!(\n-            \"{}{}{}{}{:#}fn {}{:#}\",\n+            \"{}{}{}{}{}{:#}fn {}{:#}\",\n             VisSpace(&meth.visibility),\n             ConstnessSpace(header.constness),\n             UnsafetySpace(header.unsafety),\n             AsyncSpace(header.asyncness),\n+            DefaultSpace(meth.is_default()),\n             AbiSpace(header.abi),\n             name,\n             *g\n@@ -3445,12 +3446,13 @@ fn render_assoc_item(w: &mut fmt::Formatter<'_>,\n             (0, true)\n         };\n         render_attributes(w, meth)?;\n-        write!(w, \"{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n+        write!(w, \"{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                VisSpace(&meth.visibility),\n                ConstnessSpace(header.constness),\n                UnsafetySpace(header.unsafety),\n                AsyncSpace(header.asyncness),\n+               DefaultSpace(meth.is_default()),\n                AbiSpace(header.abi),\n                href = href,\n                name = name,"}, {"sha": "dfbd8f2210fa4ef912e28cf413e5755c7a771855", "filename": "src/test/rustdoc/default_trait_method.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48e354d224ff38ccde3936479a7f514b6492e910/src%2Ftest%2Frustdoc%2Fdefault_trait_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e354d224ff38ccde3936479a7f514b6492e910/src%2Ftest%2Frustdoc%2Fdefault_trait_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdefault_trait_method.rs?ref=48e354d224ff38ccde3936479a7f514b6492e910", "patch": "@@ -0,0 +1,15 @@\n+#![feature(specialization)]\n+\n+pub trait Item {\n+    fn foo();\n+    fn bar();\n+}\n+\n+// @has default_trait_method/trait.Item.html\n+// @has - '//*[@id=\"method.foo\"]' 'default fn foo()'\n+// @has - '//*[@id=\"method.bar\"]' 'fn bar()'\n+// @!has - '//*[@id=\"method.bar\"]' 'default fn bar()'\n+impl<T: ?Sized> Item for T {\n+    default fn foo() {}\n+    fn bar() {}\n+}"}]}