{"sha": "7d22437ecdc5b52f8517ffde6207347739b26553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMjI0MzdlY2RjNWI1MmY4NTE3ZmZkZTYyMDczNDc3MzliMjY1NTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-06T04:43:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-11T02:51:06Z"}, "message": "Implement util::swap without the '<->' operator", "tree": {"sha": "2f197874c35d9fce98538d2e7b89b2070e7f56e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f197874c35d9fce98538d2e7b89b2070e7f56e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d22437ecdc5b52f8517ffde6207347739b26553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d22437ecdc5b52f8517ffde6207347739b26553", "html_url": "https://github.com/rust-lang/rust/commit/7d22437ecdc5b52f8517ffde6207347739b26553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d22437ecdc5b52f8517ffde6207347739b26553/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e0400fb86170baff30282edcdccff73e243fd6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0400fb86170baff30282edcdccff73e243fd6e", "html_url": "https://github.com/rust-lang/rust/commit/3e0400fb86170baff30282edcdccff73e243fd6e"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "c6b82b9aeec617cdfce9ec4082a2b49c588afb9c", "filename": "src/libcore/util.rs", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7d22437ecdc5b52f8517ffde6207347739b26553/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d22437ecdc5b52f8517ffde6207347739b26553/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=7d22437ecdc5b52f8517ffde6207347739b26553", "patch": "@@ -15,6 +15,7 @@ Miscellaneous helpers for common patterns.\n */\n \n use prelude::*;\n+use unstable::intrinsics;\n \n /// The identity function.\n #[inline(always)]\n@@ -49,18 +50,75 @@ pub fn with<T,R>(\n  */\n #[inline(always)]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n-    *x <-> *y;\n+    unsafe {\n+        swap_ptr(ptr::to_mut_unsafe_ptr(x), ptr::to_mut_unsafe_ptr(y));\n+    }\n+}\n+\n+/**\n+ * Swap the values at two mutable locations of the same type, without\n+ * deinitialising or copying either one.\n+ */\n+#[inline]\n+#[cfg(not(stage0))]\n+pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n+    if x == y { return }\n+\n+    // Give ourselves some scratch space to work with\n+    let mut tmp: T = intrinsics::uninit();\n+    let t = ptr::to_mut_unsafe_ptr(&mut tmp);\n+\n+    // Perform the swap\n+    ptr::copy_memory(t, x, 1);\n+    ptr::copy_memory(x, y, 1);\n+    ptr::copy_memory(y, t, 1);\n+\n+    // y and t now point to the same thing, but we need to completely forget t\n+    // because it's no longer relevant.\n+    cast::forget(tmp);\n+}\n+\n+/**\n+ * Swap the values at two mutable locations of the same type, without\n+ * deinitialising or copying either one.\n+ */\n+#[inline]\n+#[cfg(stage0)]\n+pub unsafe fn swap_ptr<T>(x: *mut T, y: *mut T) {\n+    if x == y { return }\n+\n+    // Give ourselves some scratch space to work with\n+    let mut tmp: T = intrinsics::init();\n+    let t = ptr::to_mut_unsafe_ptr(&mut tmp);\n+\n+    // Perform the swap\n+    ptr::copy_memory(t, x, 1);\n+    ptr::copy_memory(x, y, 1);\n+    ptr::copy_memory(y, t, 1);\n+\n+    // y and t now point to the same thing, but we need to completely forget t\n+    // because it's no longer relevant.\n+    cast::forget(tmp);\n+}\n+\n+/**\n+ * Replace the value at a mutable location with a new one, returning the old\n+ * value, without deinitialising or copying either one.\n+ */\n+#[inline(always)]\n+pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n+    swap(dest, &mut src);\n+    src\n }\n \n /**\n  * Replace the value at a mutable location with a new one, returning the old\n  * value, without deinitialising or copying either one.\n  */\n #[inline(always)]\n-pub fn replace<T>(dest: &mut T, src: T) -> T {\n-    let mut tmp = src;\n-    swap(dest, &mut tmp);\n-    tmp\n+pub unsafe fn replace_ptr<T>(dest: *mut T, mut src: T) -> T {\n+    swap_ptr(dest, ptr::to_mut_unsafe_ptr(&mut src));\n+    src\n }\n \n /// A non-copyable dummy type."}]}