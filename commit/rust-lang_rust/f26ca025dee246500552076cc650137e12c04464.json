{"sha": "f26ca025dee246500552076cc650137e12c04464", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNmNhMDI1ZGVlMjQ2NTAwNTUyMDc2Y2M2NTAxMzdlMTJjMDQ0NjQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-14T00:26:06Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-14T01:30:53Z"}, "message": "Make resolve and the typechecker check for a main fn of the\ncorrect type\n\nThis means if a non-library program leaves out the main program,\nthe error gets caught earlier than link.\n\nCloses #626.", "tree": {"sha": "9a48b4b129b4f4293f352934ab6f4a8329c05387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a48b4b129b4f4293f352934ab6f4a8329c05387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f26ca025dee246500552076cc650137e12c04464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f26ca025dee246500552076cc650137e12c04464", "html_url": "https://github.com/rust-lang/rust/commit/f26ca025dee246500552076cc650137e12c04464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f26ca025dee246500552076cc650137e12c04464/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "196753e4c3a4848ce92a84c596c385dc00f66578", "url": "https://api.github.com/repos/rust-lang/rust/commits/196753e4c3a4848ce92a84c596c385dc00f66578", "html_url": "https://github.com/rust-lang/rust/commit/196753e4c3a4848ce92a84c596c385dc00f66578"}], "stats": {"total": 99, "additions": 89, "deletions": 10}, "files": [{"sha": "a6409209b75aa85dd101e23a40b632193ea8e7d2", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=f26ca025dee246500552076cc650137e12c04464", "patch": "@@ -361,7 +361,7 @@ fn build_session(@session::options sopts) -> session::session {\n     auto cstore = cstore::mk_cstore();\n     ret session::session(target_cfg, sopts, cstore,\n                          @rec(cm=codemap::new_codemap(), mutable next_id=0),\n-                         0u);\n+                         none, 0u);\n }\n \n fn parse_pretty(session::session sess, &str name) -> pp_mode {"}, {"sha": "4adcb7cee5f47d4ea51dedd71db57fcea78c4c23", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=f26ca025dee246500552076cc650137e12c04464", "patch": "@@ -1,5 +1,6 @@\n \n import syntax::ast;\n+import syntax::ast::node_id;\n import syntax::codemap;\n import codemap::span;\n import syntax::ast::ty_mach;\n@@ -49,6 +50,8 @@ obj session(@config targ_cfg,\n             @options opts,\n             metadata::cstore::cstore cstore,\n             parse_sess parse_sess,\n+            // For a library crate, this is always none\n+            mutable option::t[node_id] main_fn,\n             mutable uint err_count) {\n     fn get_targ_cfg() -> @config { ret targ_cfg; }\n     fn get_opts() -> @options { ret opts; }\n@@ -110,6 +113,10 @@ obj session(@config targ_cfg,\n     fn span_str(span sp) -> str {\n         ret codemap::span_to_str(sp, self.get_codemap());\n     }\n+    fn set_main_id(node_id d) {\n+        main_fn = some(d);\n+    }\n+    fn get_main_id() -> option::t[node_id] { main_fn }\n }\n // Local Variables:\n // fill-column: 78;"}, {"sha": "d32e4b7f4e75361843296cddbf4ce4da22a1fdc8", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=f26ca025dee246500552076cc650137e12c04464", "patch": "@@ -10,7 +10,7 @@ import ast::local_def;\n import metadata::csearch;\n import metadata::cstore;\n import driver::session::session;\n-import util::common::new_def_hash;\n+import util::common::*;\n import std::map::new_int_hash;\n import std::map::new_str_hash;\n import syntax::codemap::span;\n@@ -337,6 +337,18 @@ fn visit_native_item_with_scope(&@ast::native_item ni, &scopes sc,\n fn visit_fn_with_scope(&@env e, &ast::_fn f, &ast::ty_param[] tp, &span sp,\n                        &fn_ident name, node_id id, &scopes sc,\n                        &vt[scopes] v) {\n+    // is this a main fn declaration?\n+    alt (name) {\n+        case (some(?nm)) {\n+            if (is_main_name(~[nm]) && !e.sess.get_opts().library) {\n+                // This is a main function -- set it in the session\n+                // as the main ID\n+                e.sess.set_main_id(id);\n+            }\n+        }\n+        case (_) {}\n+    }\n+\n     // here's where we need to set up the mapping\n     // for f's constrs in the table.\n "}, {"sha": "b80fccab0767c48a8f9c9cf145543b20f78f05c2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f26ca025dee246500552076cc650137e12c04464", "patch": "@@ -33,10 +33,9 @@ import back::upcall;\n import syntax::visit;\n import visit::vt;\n import util::common;\n-import util::common::new_def_hash;\n+import util::common::*;\n import std::map::new_int_hash;\n import std::map::new_str_hash;\n-import util::common::local_rhs_span;\n import syntax::codemap::span;\n import lib::llvm::llvm;\n import lib::llvm::builder;\n@@ -8586,9 +8585,7 @@ fn decl_fn_and_pair_full(&@crate_ctxt ccx, &span sp, &str[] path, str flav,\n             ccx.sess.bug(\"decl_fn_and_pair(): fn item doesn't have fn type!\");\n         }\n     }\n-    let bool is_main =\n-        str::eq(option::get(std::ivec::last(path)), \"main\") &&\n-                !ccx.sess.get_opts().library;\n+    let bool is_main = is_main_name(path) && !ccx.sess.get_opts().library;\n     // Declare the function itself.\n \n     let str s ="}, {"sha": "8d28e1e53a4d6886c7138e933060ab508047bc84", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f26ca025dee246500552076cc650137e12c04464", "patch": "@@ -1624,8 +1624,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                     alt (operator.node) {\n                         case (ast::expr_path(?oper_name)) {\n                             alt (fcx.ccx.tcx.def_map.find(operator.id)) {\n-                                case (some(ast::def_fn(?_d_id,\n-                                                       ast::pure_fn))) {\n+                                case (some(ast::def_fn(_, ast::pure_fn))) {\n                                     // do nothing\n                                 }\n                                 case (_) {\n@@ -2655,6 +2654,54 @@ fn check_item(@crate_ctxt ccx, &@ast::item it) {\n     }\n }\n \n+fn arg_is_argv_ty(&ty::ctxt tcx, &ty::arg a) -> bool {\n+    alt (ty::struct(tcx, a.ty)) {\n+        case (ty::ty_vec(?mt)) {\n+            if (mt.mut != ast::imm) { ret false; }\n+            alt (ty::struct(tcx, mt.ty)) {\n+                case (ty::ty_str) { ret true; }\n+                case (_) { ret false; }\n+            }\n+        }\n+        case (_) { ret false; }\n+    }\n+}\n+\n+fn check_main_fn_ty(&ty::ctxt tcx, &ast::node_id main_id) {\n+    auto main_t = ty::node_id_to_monotype(tcx, main_id);\n+    alt (ty::struct(tcx, main_t)) {\n+        case (ty::ty_fn(ast::proto_fn, ?args, ?rs, ast::return, ?constrs)) {\n+            auto ok = ivec::len(constrs) == 0u;\n+            ok &= ty::type_is_nil(tcx, rs);\n+            auto num_args = ivec::len(args);\n+            ok &= num_args == 0u || (num_args == 1u &&\n+                                     arg_is_argv_ty(tcx, args.(0)));\n+            if (!ok) {\n+                    tcx.sess.err(\"Wrong type in main function: found \"\n+                         + ty_to_str(tcx, main_t));\n+            }\n+        }\n+        case (_) {\n+            tcx.sess.err(\"Main has a non-function type: found\"\n+                         + ty_to_str(tcx, main_t));\n+        }\n+    }\n+}\n+\n+fn check_for_main_fn(&ty::ctxt tcx, &@ast::crate crate) {\n+    if (!tcx.sess.get_opts().library) {\n+        alt (tcx.sess.get_main_id()) {\n+            case (some(?id)) {\n+                check_main_fn_ty(tcx, id);\n+            }\n+            case (none) {\n+                tcx.sess.span_err(crate.span,\n+                                  \"Main function not found\");\n+            }\n+        }\n+    }\n+}\n+\n fn check_crate(&ty::ctxt tcx, &@ast::crate crate) {\n     collect::collect_item_types(tcx, crate);\n \n@@ -2666,6 +2713,7 @@ fn check_crate(&ty::ctxt tcx, &@ast::crate crate) {\n         rec(visit_item_pre=bind check_item(ccx, _)\n             with walk::default_visitor());\n     walk::walk_crate(visit, *crate);\n+    check_for_main_fn(tcx, crate);\n     tcx.sess.abort_if_errors();\n }\n //"}, {"sha": "3c8b6b7ca0986d798ebface7cf484f080219e8b5", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26ca025dee246500552076cc650137e12c04464/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=f26ca025dee246500552076cc650137e12c04464", "patch": "@@ -1,4 +1,4 @@\n-\n+import std::str;\n import std::map;\n import std::map::hashmap;\n import std::uint;\n@@ -187,6 +187,9 @@ fn call_kind_str(call_kind c) -> str {\n     }\n }\n \n+fn is_main_name(&str[] path) -> bool {\n+    str::eq(option::get(std::ivec::last(path)), \"main\")\n+}\n //\n // Local Variables:\n // mode: rust"}, {"sha": "50bf187284f77151bb36d1b3c62a0760f157b688", "filename": "src/test/compile-fail/main-wrong-type-2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f26ca025dee246500552076cc650137e12c04464/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26ca025dee246500552076cc650137e12c04464/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs?ref=f26ca025dee246500552076cc650137e12c04464", "patch": "@@ -0,0 +1,4 @@\n+// xfail-stage0\n+// error-pattern:Wrong type in main function: found fn() -> char\n+fn main() -> char {\n+}"}, {"sha": "4998867e6b2117e6d00a9ffcbd826007067e1af7", "filename": "src/test/compile-fail/main-wrong-type.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f26ca025dee246500552076cc650137e12c04464/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26ca025dee246500552076cc650137e12c04464/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs?ref=f26ca025dee246500552076cc650137e12c04464", "patch": "@@ -0,0 +1,4 @@\n+// xfail-stage0\n+// error-pattern:Wrong type in main function: found fn(rec(int x\n+fn main(rec(int x, int y) foo) {\n+}"}, {"sha": "6eed36591bfb415ddc6de520349c44b10767e706", "filename": "src/test/compile-fail/missing-main.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f26ca025dee246500552076cc650137e12c04464/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26ca025dee246500552076cc650137e12c04464/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs?ref=f26ca025dee246500552076cc650137e12c04464", "patch": "@@ -0,0 +1,4 @@\n+// xfail-stage0\n+// error-pattern:Main function not found\n+fn mian() {\n+}"}]}