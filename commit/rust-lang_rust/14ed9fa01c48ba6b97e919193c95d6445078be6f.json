{"sha": "14ed9fa01c48ba6b97e919193c95d6445078be6f", "node_id": "C_kwDOAAsO6NoAKDE0ZWQ5ZmEwMWM0OGJhNmI5N2U5MTkxOTNjOTVkNjQ0NTA3OGJlNmY", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-06-03T20:58:55Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-06-07T08:58:45Z"}, "message": "Avoid one `rustc` rebuild in the optimized build pipeline", "tree": {"sha": "da93032b2b17dcc02a49850d84aee49551d195d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da93032b2b17dcc02a49850d84aee49551d195d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14ed9fa01c48ba6b97e919193c95d6445078be6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmSARsYACgkQkJzQ0mSD\nUWuMNQv/ftNamnkrRwbOb84hZDtypoqSzi/bO9l9aJVYumte6hAESdSJEMJr28LI\nS+uyfzSZKpzONMbQIL++opGKj30MPBJSn0Acg7hYpDYxKKq4krpq0+UnfS5e1UiM\nytIOeEOr8DYcPseKIA6WfTcfyddtJAWh1hgZ7NbB0W394fki9P0HjCTEbremkYox\n7WZ0W8ETkFB5exSBEEQNls2Zj3B6pdXieg6sF5wXIODlIZYOtIAEzlot/qp5FgD0\nVlYd6Uklfhbc6x6mM7K05fyAVgOCnIlDPpb9LMZancvGMoViw38Umin0AyhMyyJQ\n7k3LFqlf1gzLIqR4TTNNddv0kavJeeYVX2afg/6PR4t4Wk9yVfS8VQjN9jmk33ka\nwvNi4rEgPsah2SUDXqsy6UcquMzsh4APkjTLyN/rXdtRmKpZhdLRFa1hVOrZHY/T\nEdpMZ9jah/Z6xXDUFmJED1+Wq68AFmQkZ4g+5YSKwU0qGFwh1wCRqgUeZNqEQKyR\nUJjQB1VZ\n=LVvS\n-----END PGP SIGNATURE-----", "payload": "tree da93032b2b17dcc02a49850d84aee49551d195d8\nparent b3dd578767299e6bcb617fbb28724fe32b31cf3b\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1685825935 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1686128325 +0200\n\nAvoid one `rustc` rebuild in the optimized build pipeline\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14ed9fa01c48ba6b97e919193c95d6445078be6f", "html_url": "https://github.com/rust-lang/rust/commit/14ed9fa01c48ba6b97e919193c95d6445078be6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14ed9fa01c48ba6b97e919193c95d6445078be6f/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3dd578767299e6bcb617fbb28724fe32b31cf3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3dd578767299e6bcb617fbb28724fe32b31cf3b", "html_url": "https://github.com/rust-lang/rust/commit/b3dd578767299e6bcb617fbb28724fe32b31cf3b"}], "stats": {"total": 148, "additions": 93, "deletions": 55}, "files": [{"sha": "11ac88cdec118baa93b381117b9ea3309b60915e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14ed9fa01c48ba6b97e919193c95d6445078be6f/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ed9fa01c48ba6b97e919193c95d6445078be6f/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=14ed9fa01c48ba6b97e919193c95d6445078be6f", "patch": "@@ -118,6 +118,10 @@ impl Step for Std {\n             || builder.config.keep_stage_std.contains(&compiler.stage)\n         {\n             builder.info(\"Warning: Using a potentially old libstd. This may not behave well.\");\n+\n+            copy_third_party_objects(builder, &compiler, target);\n+            copy_self_contained_objects(builder, &compiler, target);\n+\n             builder.ensure(StdLink::from_std(self, compiler));\n             return;\n         }"}, {"sha": "45f13880a4d40ad447c22b27c90965bf11b85c34", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 89, "deletions": 55, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/14ed9fa01c48ba6b97e919193c95d6445078be6f/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/14ed9fa01c48ba6b97e919193c95d6445078be6f/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=14ed9fa01c48ba6b97e919193c95d6445078be6f", "patch": "@@ -620,20 +620,25 @@ def get_files(directory: Path, filter: Optional[Callable[[Path], bool]] = None)\n             yield path\n \n \n-def build_rustc(\n+def bootstrap_build(\n         pipeline: Pipeline,\n         args: List[str],\n-        env: Optional[Dict[str, str]] = None\n+        env: Optional[Dict[str, str]] = None,\n+        targets: Iterable[str] = (\"library/std\", )\n ):\n+    if env is None:\n+        env = {}\n+    else:\n+        env = dict(env)\n+    env[\"RUST_BACKTRACE\"] = \"1\"\n     arguments = [\n                     sys.executable,\n                     pipeline.checkout_path() / \"x.py\",\n                     \"build\",\n                     \"--target\", PGO_HOST,\n                     \"--host\", PGO_HOST,\n                     \"--stage\", \"2\",\n-                    \"library/std\"\n-                ] + args\n+                    ] + list(targets) + args\n     cmd(arguments, env=env)\n \n \n@@ -776,18 +781,18 @@ def record_metrics(pipeline: Pipeline, timer: Timer):\n     if metrics is None:\n         return\n     llvm_steps = tuple(metrics.find_all_by_type(\"bootstrap::llvm::Llvm\"))\n-    assert len(llvm_steps) > 0\n     llvm_duration = sum(step.duration for step in llvm_steps)\n \n     rustc_steps = tuple(metrics.find_all_by_type(\"bootstrap::compile::Rustc\"))\n-    assert len(rustc_steps) > 0\n     rustc_duration = sum(step.duration for step in rustc_steps)\n \n     # The LLVM step is part of the Rustc step\n-    rustc_duration -= llvm_duration\n+    rustc_duration = max(0, rustc_duration - llvm_duration)\n \n-    timer.add_duration(\"LLVM\", llvm_duration)\n-    timer.add_duration(\"Rustc\", rustc_duration)\n+    if llvm_duration > 0:\n+        timer.add_duration(\"LLVM\", llvm_duration)\n+    if rustc_duration > 0:\n+        timer.add_duration(\"Rustc\", rustc_duration)\n \n     log_metrics(metrics)\n \n@@ -872,79 +877,108 @@ def extract_dist_dir(name: str) -> Path:\n     ))\n \n \n-def execute_build_pipeline(timer: Timer, pipeline: Pipeline, runner: BenchmarkRunner, final_build_args: List[str]):\n+def execute_build_pipeline(timer: Timer, pipeline: Pipeline, runner: BenchmarkRunner, dist_build_args: List[str]):\n     # Clear and prepare tmp directory\n     shutil.rmtree(pipeline.opt_artifacts(), ignore_errors=True)\n     os.makedirs(pipeline.opt_artifacts(), exist_ok=True)\n \n     pipeline.build_rustc_perf()\n \n-    # Stage 1: Build rustc + PGO instrumented LLVM\n-    with timer.section(\"Stage 1 (LLVM PGO)\") as stage1:\n-        with stage1.section(\"Build rustc and LLVM\") as rustc_build:\n-            build_rustc(pipeline, args=[\n-                \"--llvm-profile-generate\"\n-            ], env=dict(\n-                LLVM_PROFILE_DIR=str(pipeline.llvm_profile_dir_root() / \"prof-%p\")\n-            ))\n-            record_metrics(pipeline, rustc_build)\n+    \"\"\"\n+    Stage 1: Build PGO instrumented rustc\n+\n+    We use a normal build of LLVM, because gathering PGO profiles for LLVM and `rustc` at the same time\n+    can cause issues.\n+    \"\"\"\n+    with timer.section(\"Stage 1 (rustc PGO)\") as stage1:\n+        with stage1.section(\"Build PGO instrumented rustc and LLVM\") as rustc_pgo_instrument:\n+            bootstrap_build(pipeline, args=[\n+                \"--rust-profile-generate\",\n+                pipeline.rustc_profile_dir_root()\n+            ])\n+            record_metrics(pipeline, rustc_pgo_instrument)\n \n         with stage1.section(\"Gather profiles\"):\n-            gather_llvm_profiles(pipeline, runner)\n+            gather_rustc_profiles(pipeline, runner)\n         print_free_disk_space(pipeline)\n \n-    clear_llvm_files(pipeline)\n-    final_build_args += [\n-        \"--llvm-profile-use\",\n-        pipeline.llvm_profile_merged_file()\n-    ]\n-\n-    # Stage 2: Build PGO instrumented rustc + LLVM\n-    with timer.section(\"Stage 2 (rustc PGO)\") as stage2:\n-        with stage2.section(\"Build rustc and LLVM\") as rustc_build:\n-            build_rustc(pipeline, args=[\n-                \"--rust-profile-generate\",\n-                pipeline.rustc_profile_dir_root()\n+        with stage1.section(\"Build PGO optimized rustc\") as rustc_pgo_use:\n+            bootstrap_build(pipeline, args=[\n+                \"--rust-profile-use\",\n+                pipeline.rustc_profile_merged_file()\n             ])\n-            record_metrics(pipeline, rustc_build)\n+            record_metrics(pipeline, rustc_pgo_use)\n+        dist_build_args += [\n+            \"--rust-profile-use\",\n+            pipeline.rustc_profile_merged_file()\n+        ]\n+\n+    \"\"\"\n+    Stage 2: Gather LLVM PGO profiles\n+    \"\"\"\n+    with timer.section(\"Stage 2 (LLVM PGO)\") as stage2:\n+        # Clear normal LLVM artifacts\n+        clear_llvm_files(pipeline)\n+\n+        with stage2.section(\"Build PGO instrumented LLVM\") as llvm_pgo_instrument:\n+            bootstrap_build(pipeline, args=[\n+                \"--llvm-profile-generate\",\n+                # We want to keep the already built PGO-optimized `rustc`.\n+                \"--keep-stage\", \"0\",\n+                \"--keep-stage\", \"1\"\n+            ], env=dict(\n+                LLVM_PROFILE_DIR=str(pipeline.llvm_profile_dir_root() / \"prof-%p\")\n+            ))\n+            record_metrics(pipeline, llvm_pgo_instrument)\n \n         with stage2.section(\"Gather profiles\"):\n-            gather_rustc_profiles(pipeline, runner)\n+            gather_llvm_profiles(pipeline, runner)\n+\n+        dist_build_args += [\n+            \"--llvm-profile-use\",\n+            pipeline.llvm_profile_merged_file(),\n+        ]\n         print_free_disk_space(pipeline)\n \n-    clear_llvm_files(pipeline)\n-    final_build_args += [\n-        \"--rust-profile-use\",\n-        pipeline.rustc_profile_merged_file()\n-    ]\n+        # Clear PGO-instrumented LLVM artifacts\n+        clear_llvm_files(pipeline)\n+\n+    \"\"\"\n+    Stage 3: Build BOLT instrumented LLVM\n \n-    # Stage 3: Build rustc + BOLT instrumented LLVM\n+    We build a PGO optimized LLVM in this step, then instrument it with BOLT and gather BOLT profiles.\n+    Note that we don't remove LLVM artifacts after this step, so that they are reused in the final dist build.\n+    BOLT instrumentation is performed \"on-the-fly\" when the LLVM library is copied to the sysroot of rustc,\n+    therefore the LLVM artifacts on disk are not \"tainted\" with BOLT instrumentation and they can be reused.\n+    \"\"\"\n     if pipeline.supports_bolt():\n         with timer.section(\"Stage 3 (LLVM BOLT)\") as stage3:\n-            with stage3.section(\"Build rustc and LLVM\") as rustc_build:\n-                build_rustc(pipeline, args=[\n+            with stage3.section(\"Build BOLT instrumented LLVM\") as llvm_bolt_instrument:\n+                bootstrap_build(pipeline, args=[\n                     \"--llvm-profile-use\",\n                     pipeline.llvm_profile_merged_file(),\n                     \"--llvm-bolt-profile-generate\",\n-                    \"--rust-profile-use\",\n-                    pipeline.rustc_profile_merged_file()\n+                    # We want to keep the already built PGO-optimized `rustc`.\n+                    \"--keep-stage\", \"0\",\n+                    \"--keep-stage\", \"1\"\n                 ])\n-                record_metrics(pipeline, rustc_build)\n+                record_metrics(pipeline, llvm_bolt_instrument)\n \n             with stage3.section(\"Gather profiles\"):\n                 gather_llvm_bolt_profiles(pipeline, runner)\n \n-        # LLVM is not being cleared here, we want to reuse the previous build\n-        print_free_disk_space(pipeline)\n-        final_build_args += [\n-            \"--llvm-bolt-profile-use\",\n-            pipeline.llvm_bolt_profile_merged_file()\n-        ]\n+            dist_build_args += [\n+                \"--llvm-bolt-profile-use\",\n+                pipeline.llvm_bolt_profile_merged_file()\n+            ]\n+            print_free_disk_space(pipeline)\n \n-    # Stage 4: Build PGO optimized rustc + PGO/BOLT optimized LLVM\n-    with timer.section(\"Stage 4 (final build)\") as stage4:\n-        cmd(final_build_args)\n-        record_metrics(pipeline, stage4)\n+    \"\"\"\n+    Final stage: Build PGO optimized rustc + PGO/BOLT optimized LLVM\n+    \"\"\"\n+    with timer.section(\"Final stage (dist build)\") as final_stage:\n+        cmd(dist_build_args)\n+        record_metrics(pipeline, final_stage)\n \n     # Try builds can be in various broken states, so we don't want to gatekeep them with tests\n     if not is_try_build():"}]}