{"sha": "6b349f3d11349cf96be0bd68e20578fd5608b090", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMzQ5ZjNkMTEzNDljZjk2YmUwYmQ2OGUyMDU3OGZkNTYwOGIwOTA=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-04T07:17:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T22:35:50Z"}, "message": "experimenting with a different uv_buf_init impl to placate 32bit linux", "tree": {"sha": "e6f239d2477b6c2f85ba5242df7befcf66a312f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f239d2477b6c2f85ba5242df7befcf66a312f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b349f3d11349cf96be0bd68e20578fd5608b090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b349f3d11349cf96be0bd68e20578fd5608b090", "html_url": "https://github.com/rust-lang/rust/commit/6b349f3d11349cf96be0bd68e20578fd5608b090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b349f3d11349cf96be0bd68e20578fd5608b090/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce34ccfec9acbaa793cd1d486f3c01fbcc064d38", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce34ccfec9acbaa793cd1d486f3c01fbcc064d38", "html_url": "https://github.com/rust-lang/rust/commit/ce34ccfec9acbaa793cd1d486f3c01fbcc064d38"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "a76f2afe1bf6d0431c584479aafeb25e55ce7b77", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b349f3d11349cf96be0bd68e20578fd5608b090/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b349f3d11349cf96be0bd68e20578fd5608b090/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=6b349f3d11349cf96be0bd68e20578fd5608b090", "patch": "@@ -66,10 +66,6 @@ native mod rustrt {\n     fn rust_uv_tcp_init(\n         loop_handle: *libc::c_void,\n         handle_ptr: *ll::uv_tcp_t) -> libc::c_int;\n-    fn rust_uv_buf_init(base: *u8, len: libc::size_t)\n-        -> ll::uv_buf_t;\n-    fn rust_uv_last_error(loop_handle: *libc::c_void) ->\n-        ll::uv_err_t;\n     // FIXME ref #2064\n     fn rust_uv_strerror(err: *ll::uv_err_t) -> *libc::c_char;\n     // FIXME ref #2064\n@@ -723,6 +719,9 @@ crust fn on_alloc_cb(handle: *libc::c_void,\n     -> ll::uv_buf_t unsafe {\n     io::println(\"on_alloc_cb!\");\n     let char_ptr = ll::malloc_buf_base_of(suggested_size);\n+    io::println(#fmt(\"on_alloc_cb char_ptr: %u sug. size: %u\",\n+                     char_ptr as uint,\n+                     suggested_size as uint));\n     ret ll::buf_init(char_ptr, suggested_size);\n }\n \n@@ -816,6 +815,7 @@ fn impl_uv_tcp_request(ip: str, port: int, req_str: str,\n     // data field in our uv_connect_t struct\n     let req_str_bytes = str::bytes(req_str);\n     let req_msg_ptr: *u8 = vec::unsafe::to_ptr(req_str_bytes);\n+    io::println(#fmt(\"req_msg ptr: %u\", req_msg_ptr as uint));\n     let req_msg = [\n         ll::buf_init(req_msg_ptr, vec::len(req_str_bytes))\n     ];\n@@ -1051,6 +1051,7 @@ fn impl_uv_tcp_server(server_ip: str,\n \n     let resp_str_bytes = str::bytes(server_resp_msg);\n     let resp_msg_ptr: *u8 = vec::unsafe::to_ptr(resp_str_bytes);\n+    io::println(#fmt(\"resp_msg ptr: %u\", resp_msg_ptr as uint));\n     let resp_msg = [\n         ll::buf_init(resp_msg_ptr, vec::len(resp_str_bytes))\n     ];"}, {"sha": "059792b8da5498fe7b54b73a1e112342b3fb81d1", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6b349f3d11349cf96be0bd68e20578fd5608b090/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b349f3d11349cf96be0bd68e20578fd5608b090/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=6b349f3d11349cf96be0bd68e20578fd5608b090", "patch": "@@ -439,7 +439,10 @@ native mod rustrt {\n     fn rust_uv_tcp_init(\n         loop_handle: *libc::c_void,\n         handle_ptr: *uv_tcp_t) -> libc::c_int;\n-    fn rust_uv_buf_init(base: *u8, len: libc::size_t)\n+    // FIXME ref #2604 .. ?\n+    fn rust_uv_buf_init(out_buf: *uv_buf_t, base: *u8,\n+                        len: libc::size_t);\n+    fn rust_uv_buf_init_2(++base: *u8, len: libc::size_t)\n         -> uv_buf_t;\n     fn rust_uv_last_error(loop_handle: *libc::c_void) -> uv_err_t;\n     // FIXME ref #2064\n@@ -626,8 +629,25 @@ unsafe fn get_base_from_buf(buf: uv_buf_t) -> *u8 {\n unsafe fn get_len_from_buf(buf: uv_buf_t) -> libc::size_t {\n     ret rustrt::rust_uv_get_len_from_buf(buf);\n }\n-unsafe fn buf_init(input: *u8, len: uint) -> uv_buf_t {\n-    ret rustrt::rust_uv_buf_init(input, len);\n+unsafe fn buf_init(++input: *u8, len: uint) -> uv_buf_t {\n+    let out_buf = { base: ptr::null(), len: 0 as libc::size_t };\n+    let out_buf_ptr = ptr::addr_of(out_buf);\n+    io::println(#fmt(\"ll::buf_init - input %u len %u out_buf: %u\",\n+                     input as uint,\n+                     len as uint,\n+                     out_buf_ptr as uint));\n+    // yuck :/\n+    rustrt::rust_uv_buf_init(out_buf_ptr, input, len);\n+    //let result = rustrt::rust_uv_buf_init_2(input, len);\n+    io::println(\"after rust_uv_buf_init\");\n+    let res_base = get_base_from_buf(out_buf);\n+    let res_len = get_len_from_buf(out_buf);\n+    //let res_base = get_base_from_buf(result);\n+    io::println(#fmt(\"ll::buf_init - result %u len %u\",\n+                     res_base as uint,\n+                     res_len as uint));\n+    ret out_buf;\n+    //ret result;\n }\n unsafe fn ip4_addr(ip: str, port: int)\n -> sockaddr_in {"}, {"sha": "316a44cc5d80ce71221d574f4138fa0e6b168de9", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b349f3d11349cf96be0bd68e20578fd5608b090/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6b349f3d11349cf96be0bd68e20578fd5608b090/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=6b349f3d11349cf96be0bd68e20578fd5608b090", "patch": "@@ -300,9 +300,24 @@ current_kernel_malloc_alloc_cb(uv_handle_t* handle,\n     return uv_buf_init(base_ptr, suggested_size);\n }\n \n+extern \"C\" void\n+rust_uv_buf_init(uv_buf_t* out_buf, char* base, size_t len) {\n+  printf(\"rust_uv_buf_init: base: %lu len: %lu\\n\",\n+\t\t (long unsigned int)base,\n+\t\t (long unsigned int)len);\n+    *out_buf = uv_buf_init(base, len);\n+    printf(\"rust_uv_buf_init: after: result->base: %lu len: %lu\\n\",\n+\t\t   (unsigned long int)(*out_buf).base,\n+\t\t   (unsigned long int)(*out_buf).len);\n+}\n extern \"C\" uv_buf_t\n-rust_uv_buf_init(char* base, size_t len) {\n-    return uv_buf_init(base, len);\n+rust_uv_buf_init_2(char* base, size_t len) {\n+  printf(\"uv_buf_init: base ptr %p\\n len: %lu\", base,\n+\t\t (long unsigned int)len);\n+    uv_buf_t result = uv_buf_init(base, len);\n+    printf(\"after uv_buf_init: result->base %p\\n\",\n+\t\t   result.base);\n+\treturn result;\n }\n \n extern \"C\" uv_loop_t*"}]}