{"sha": "38cd9f0c947981388af652c8691574675673c768", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Y2Q5ZjBjOTQ3OTgxMzg4YWY2NTJjODY5MTU3NDY3NTY3M2M3Njg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-30T22:07:47Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "Handle cycles", "tree": {"sha": "a02df4b0f68ee2a6f5ce58c620683e5987fb40a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a02df4b0f68ee2a6f5ce58c620683e5987fb40a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38cd9f0c947981388af652c8691574675673c768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38cd9f0c947981388af652c8691574675673c768", "html_url": "https://github.com/rust-lang/rust/commit/38cd9f0c947981388af652c8691574675673c768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38cd9f0c947981388af652c8691574675673c768/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1325488ec4c1b965e2e9a0b8b6dec1c8342498b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1325488ec4c1b965e2e9a0b8b6dec1c8342498b", "html_url": "https://github.com/rust-lang/rust/commit/b1325488ec4c1b965e2e9a0b8b6dec1c8342498b"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "3df2f2c0994f687ae7e0c9fc107132d3be251129", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/38cd9f0c947981388af652c8691574675673c768/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cd9f0c947981388af652c8691574675673c768/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=38cd9f0c947981388af652c8691574675673c768", "patch": "@@ -10,8 +10,16 @@ use crate::{\n use hir_expand::name::Name;\n \n pub fn find_path(db: &impl DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n+    find_path_inner(db, item, from, 15)\n+}\n+\n+fn find_path_inner(db: &impl DefDatabase, item: ItemInNs, from: ModuleId, max_len: usize) -> Option<ModPath> {\n     // Base cases:\n \n+    if max_len == 0 {\n+        return None;\n+    }\n+\n     // - if the item is already in scope, return the name under which it is\n     let def_map = db.crate_def_map(from.krate);\n     let from_scope: &crate::item_scope::ItemScope = &def_map.modules[from.local_id].scope;\n@@ -75,18 +83,31 @@ pub fn find_path(db: &impl DefDatabase, item: ItemInNs, from: ModuleId) -> Optio\n \n     // - otherwise, look for modules containing (reexporting) it and import it from one of those\n     let importable_locations = find_importable_locations(db, item, from);\n-    let mut candidate_paths = Vec::new();\n+    let mut best_path = None;\n+    let mut best_path_len = max_len;\n     for (module_id, name) in importable_locations {\n-        // TODO prevent infinite loops\n-        let mut path = match find_path(db, ItemInNs::Types(ModuleDefId::ModuleId(module_id)), from)\n+        let mut path = match find_path_inner(db, ItemInNs::Types(ModuleDefId::ModuleId(module_id)), from, best_path_len - 1)\n         {\n             None => continue,\n             Some(path) => path,\n         };\n         path.segments.push(name);\n-        candidate_paths.push(path);\n+        if path_len(&path) < best_path_len {\n+            best_path_len = path_len(&path);\n+            best_path = Some(path);\n+        }\n+    }\n+    best_path\n+}\n+\n+fn path_len(path: &ModPath) -> usize {\n+    path.segments.len() + match path.kind {\n+        PathKind::Plain => 0,\n+        PathKind::Super(i) => i as usize,\n+        PathKind::Crate => 1,\n+        PathKind::Abs => 0,\n+        PathKind::DollarCrate(_) => 1,\n     }\n-    candidate_paths.into_iter().min_by_key(|path| path.segments.len())\n }\n \n fn find_importable_locations(\n@@ -96,6 +117,9 @@ fn find_importable_locations(\n ) -> Vec<(ModuleId, Name)> {\n     let crate_graph = db.crate_graph();\n     let mut result = Vec::new();\n+    // We only look in the crate from which we are importing, and the direct\n+    // dependencies. We cannot refer to names from transitive dependencies\n+    // directly (only through reexports in direct dependencies).\n     for krate in Some(from.krate)\n         .into_iter()\n         .chain(crate_graph.dependencies(from.krate).map(|dep| dep.crate_id))\n@@ -110,6 +134,13 @@ fn find_importable_locations(\n     result\n }\n \n+/// Collects all locations from which we might import the item in a particular\n+/// crate. These include the original definition of the item, and any\n+/// non-private `use`s.\n+///\n+/// Note that the crate doesn't need to be the one in which the item is defined;\n+/// it might be re-exported in other crates. We cache this as a query since we\n+/// need to walk the whole def map for it.\n pub(crate) fn importable_locations_in_crate_query(\n     db: &impl DefDatabase,\n     item: ItemInNs,\n@@ -372,4 +403,22 @@ mod tests {\n         // crate::S would be shorter, but using private imports seems wrong\n         check_found_path(code, \"crate::bar::S\");\n     }\n+\n+    #[test]\n+    fn import_cycle() {\n+        let code = r#\"\n+            //- /main.rs\n+            pub mod foo;\n+            pub mod bar;\n+            pub mod baz;\n+            //- /bar.rs\n+            <|>\n+            //- /foo.rs\n+            pub use super::baz;\n+            pub struct S;\n+            //- /baz.rs\n+            pub use super::foo;\n+        \"#;\n+        check_found_path(code, \"crate::foo::S\");\n+    }\n }"}]}