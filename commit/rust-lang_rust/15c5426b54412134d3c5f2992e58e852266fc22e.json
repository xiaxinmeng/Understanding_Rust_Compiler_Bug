{"sha": "15c5426b54412134d3c5f2992e58e852266fc22e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YzU0MjZiNTQ0MTIxMzRkM2M1ZjI5OTJlNThlODUyMjY2ZmMyMmU=", "commit": {"author": {"name": "Roland Ruckerbauer", "email": "roland.rucky@gmail.com", "date": "2020-01-10T23:06:31Z"}, "committer": {"name": "Roland Ruckerbauer", "email": "roland.rucky@gmail.com", "date": "2020-01-12T16:34:57Z"}, "message": "Use hir .path() and .name() to differentiate\nmacro call and macro definition", "tree": {"sha": "80200c22c1fc587c11a722964e93d9bd5eae9fcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80200c22c1fc587c11a722964e93d9bd5eae9fcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c5426b54412134d3c5f2992e58e852266fc22e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c5426b54412134d3c5f2992e58e852266fc22e", "html_url": "https://github.com/rust-lang/rust/commit/15c5426b54412134d3c5f2992e58e852266fc22e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c5426b54412134d3c5f2992e58e852266fc22e/comments", "author": null, "committer": null, "parents": [{"sha": "c6655c67d2091b49a10512bfeab631d5f8a09d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6655c67d2091b49a10512bfeab631d5f8a09d4b", "html_url": "https://github.com/rust-lang/rust/commit/c6655c67d2091b49a10512bfeab631d5f8a09d4b"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "94da70ccaff17fbd3fbcb0e4341f04ff6a5f597e", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15c5426b54412134d3c5f2992e58e852266fc22e/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c5426b54412134d3c5f2992e58e852266fc22e/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=15c5426b54412134d3c5f2992e58e852266fc22e", "patch": "@@ -58,6 +58,7 @@ pub use hir_def::{\n     type_ref::Mutability,\n };\n pub use hir_expand::{\n-    name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n+    name::name, name::AsName, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId,\n+    MacroFile, Origin,\n };\n pub use hir_ty::{display::HirDisplay, CallableDef};"}, {"sha": "fdd589648ad87a3b0803d9edc00cbee084e23964", "filename": "crates/ra_ide/src/display/structure.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/15c5426b54412134d3c5f2992e58e852266fc22e/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c5426b54412134d3c5f2992e58e852266fc22e/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs?ref=15c5426b54412134d3c5f2992e58e852266fc22e", "patch": "@@ -2,6 +2,7 @@\n \n use crate::TextRange;\n \n+use hir::{name, AsName, Path};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner, TypeAscriptionOwner, TypeParamsOwner},\n     match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, WalkEvent,\n@@ -151,25 +152,12 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                 Some(node)\n             },\n             ast::MacroCall(it) => {\n-                let macro_name = it.syntax()\n-                    .children()\n-                    .find(|c|\n-                        ![\n-                            SyntaxKind::COMMENT,\n-                            SyntaxKind::WHITESPACE,\n-                            SyntaxKind::ATTR\n-                        ].iter()\n-                        .any(|&k| k == c.kind())\n-                    );\n-\n-                match macro_name {\n-                    None => return None,\n-                    Some(n) => if n.first_token().unwrap().text().as_str() != \"macro_rules\" {\n-                        return None;\n-                    }\n+                match it.path().and_then(|p| Path::from_ast(p)) {\n+                    Some(path) if path.mod_path().segments.as_slice() == [name![macro_rules]]\n+                        && it.name().map(|n| n.as_name()).is_some()\n+                    => decl(it),\n+                    _ => None,\n                 }\n-\n-                decl(it)\n             },\n             _ => None,\n         }\n@@ -217,6 +205,11 @@ macro_rules! mcexp {\n     () => {}\n }\n \n+/// Doc comment\n+macro_rules! mcexp {\n+    () => {}\n+}\n+\n #[deprecated]\n fn obsolete() {}\n \n@@ -400,11 +393,20 @@ fn very_obsolete() {}\n                 detail: None,\n                 deprecated: false,\n             },\n+            StructureNode {\n+                parent: None,\n+                label: \"mcexp\",\n+                navigation_range: [387; 392),\n+                node_range: [358; 409),\n+                kind: MACRO_CALL,\n+                detail: None,\n+                deprecated: false,\n+            },\n             StructureNode {\n                 parent: None,\n                 label: \"obsolete\",\n-                navigation_range: [375; 383),\n-                node_range: [358; 388),\n+                navigation_range: [428; 436),\n+                node_range: [411; 441),\n                 kind: FN_DEF,\n                 detail: Some(\n                     \"fn()\",\n@@ -414,8 +416,8 @@ fn very_obsolete() {}\n             StructureNode {\n                 parent: None,\n                 label: \"very_obsolete\",\n-                navigation_range: [428; 441),\n-                node_range: [390; 446),\n+                navigation_range: [481; 494),\n+                node_range: [443; 499),\n                 kind: FN_DEF,\n                 detail: Some(\n                     \"fn()\","}]}