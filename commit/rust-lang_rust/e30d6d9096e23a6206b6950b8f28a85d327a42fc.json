{"sha": "e30d6d9096e23a6206b6950b8f28a85d327a42fc", "node_id": "C_kwDOAAsO6NoAKGUzMGQ2ZDkwOTZlMjNhNjIwNmI2OTUwYjhmMjhhODVkMzI3YTQyZmM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-27T16:42:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-15T01:16:42Z"}, "message": "make unaligned_references lint deny-by-default", "tree": {"sha": "16864816e4083d8ef9bf32c56e149fd3c9020d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16864816e4083d8ef9bf32c56e149fd3c9020d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e30d6d9096e23a6206b6950b8f28a85d327a42fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e30d6d9096e23a6206b6950b8f28a85d327a42fc", "html_url": "https://github.com/rust-lang/rust/commit/e30d6d9096e23a6206b6950b8f28a85d327a42fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e30d6d9096e23a6206b6950b8f28a85d327a42fc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de392c7d31602ddf0fae1143c5ad822a1abe89df", "url": "https://api.github.com/repos/rust-lang/rust/commits/de392c7d31602ddf0fae1143c5ad822a1abe89df", "html_url": "https://github.com/rust-lang/rust/commit/de392c7d31602ddf0fae1143c5ad822a1abe89df"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "98d4870e6454efb9214f33c17eec69fc99ae2bea", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -27,7 +27,6 @@\n #![feature(thread_id_value)]\n #![feature(vec_into_raw_parts)]\n #![allow(rustc::default_hash_types)]\n-#![deny(unaligned_references)]\n #![allow(rustc::potential_query_instability)]\n \n #[macro_use]"}, {"sha": "0953e5eeb14324a51e34c59dd37e18eb105e9dec", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -1110,8 +1110,6 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust,compile_fail\n-    /// #![deny(unaligned_references)]\n-    ///\n     /// #[repr(packed)]\n     /// pub struct Foo {\n     ///     field1: u64,\n@@ -1139,7 +1137,7 @@ declare_lint! {\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     /// [issue #82523]: https://github.com/rust-lang/rust/issues/82523\n     pub UNALIGNED_REFERENCES,\n-    Warn,\n+    Deny,\n     \"detects unaligned references to fields of packed structs\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #82523 <https://github.com/rust-lang/rust/issues/82523>\","}, {"sha": "5042ad024afff00bfabc1e48272c2a46e15c4dcf", "filename": "src/test/ui/binding/issue-53114-safety-checks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.rs?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -20,13 +20,13 @@ fn let_wild_gets_unsafe_field() {\n     let u1 = U { a: I(0) };\n     let u2 = U { a: I(1) };\n     let p = P { a: &2, b: &3 };\n-    let _ = &p.b;  //~ WARN    reference to packed field\n+    let _ = &p.b;  //~ ERROR    reference to packed field\n     //~^  WARN will become a hard error\n     let _ = u1.a;  // #53114: should eventually signal error as well\n     let _ = &u2.a; //~ ERROR  [E0133]\n \n     // variation on above with `_` in substructure\n-    let (_,) = (&p.b,);  //~ WARN     reference to packed field\n+    let (_,) = (&p.b,);  //~ ERROR     reference to packed field\n     //~^  WARN will become a hard error\n     let (_,) = (u1.a,);  //~ ERROR   [E0133]\n     let (_,) = (&u2.a,); //~ ERROR   [E0133]\n@@ -36,13 +36,13 @@ fn match_unsafe_field_to_wild() {\n     let u1 = U { a: I(0) };\n     let u2 = U { a: I(1) };\n     let p = P { a: &2, b: &3 };\n-    match &p.b  { _ => { } } //~ WARN     reference to packed field\n+    match &p.b  { _ => { } } //~ ERROR     reference to packed field\n     //~^  WARN will become a hard error\n     match u1.a  { _ => { } } //~ ERROR   [E0133]\n     match &u2.a { _ => { } } //~ ERROR   [E0133]\n \n     // variation on above with `_` in substructure\n-    match (&p.b,)  { (_,) => { } } //~ WARN     reference to packed field\n+    match (&p.b,)  { (_,) => { } } //~ ERROR     reference to packed field\n     //~^  WARN will become a hard error\n     match (u1.a,)  { (_,) => { } } //~ ERROR   [E0133]\n     match (&u2.a,) { (_,) => { } } //~ ERROR   [E0133]"}, {"sha": "66727086bf4f4e78e4ef589d7fee153240db1b95", "filename": "src/test/ui/binding/issue-53114-safety-checks.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-safety-checks.stderr?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -1,16 +1,16 @@\n-warning: reference to packed field is unaligned\n+error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:23:13\n    |\n LL |     let _ = &p.b;\n    |             ^^^^\n    |\n-   = note: `#[warn(unaligned_references)]` on by default\n+   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-warning: reference to packed field is unaligned\n+error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:29:17\n    |\n LL |     let (_,) = (&p.b,);\n@@ -21,7 +21,7 @@ LL |     let (_,) = (&p.b,);\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-warning: reference to packed field is unaligned\n+error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:39:11\n    |\n LL |     match &p.b  { _ => { } }\n@@ -32,7 +32,7 @@ LL |     match &p.b  { _ => { } }\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n-warning: reference to packed field is unaligned\n+error: reference to packed field is unaligned\n   --> $DIR/issue-53114-safety-checks.rs:45:12\n    |\n LL |     match (&p.b,)  { (_,) => { } }\n@@ -99,6 +99,6 @@ LL |     match (&u2.a,) { (_,) => { } }\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 7 previous errors; 4 warnings emitted\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "1488f329648bb1c4149862a93d0bd288a79be357", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.rs?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -1,7 +1,5 @@\n // edition:2021\n \n-// check-pass\n-\n // Given how the closure desugaring is implemented (at least at the time of writing this test),\n // we don't need to truncate the captured path to a reference into a packed-struct if the field\n // being referenced will be moved into the closure, since it's safe to move out a field from a\n@@ -11,9 +9,8 @@\n // inlined we will truncate the capture to access just the struct regardless of if the field\n // might get moved into the closure.\n //\n-// It is possible for someone to try writing the code that relies on the desugaring to access a ref\n-// into a packed-struct without explicity using unsafe. Here we test that the compiler warns the\n-// user that such an access is still unsafe.\n+// It is possible for someone to try writing the code that relies on the desugaring to create a ref\n+// into a packed-struct. Here we test that the compiler still detects that case.\n fn test_missing_unsafe_warning_on_repr_packed() {\n     #[repr(packed)]\n     struct Foo { x: String }\n@@ -22,7 +19,7 @@ fn test_missing_unsafe_warning_on_repr_packed() {\n \n     let c = || {\n         println!(\"{}\", foo.x);\n-        //~^ WARNING: reference to packed field is unaligned\n+        //~^ ERROR: reference to packed field is unaligned\n         //~| WARNING: this was previously accepted by the compiler but is being phased out\n         let _z = foo.x;\n     };"}, {"sha": "276a1f00f8d0a9e26cab556ab98e8d5e48a40b75", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -1,15 +1,15 @@\n-warning: reference to packed field is unaligned\n-  --> $DIR/repr_packed.rs:24:24\n+error: reference to packed field is unaligned\n+  --> $DIR/repr_packed.rs:21:24\n    |\n LL |         println!(\"{}\", foo.x);\n    |                        ^^^^^\n    |\n-   = note: `#[warn(unaligned_references)]` on by default\n+   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "886a00239f98c5165d80b6ac40d32c75f3b9d661", "filename": "src/test/ui/packed/issue-27060.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.rs?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -5,7 +5,6 @@ pub struct Good {\n     aligned: [u8; 32],\n }\n \n-#[deny(unaligned_references)]\n fn main() {\n     let good = Good {\n         data: &0,"}, {"sha": "58dc816a142b8aebc294094186757721dabb99e5", "filename": "src/test/ui/packed/issue-27060.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060.stderr?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -1,21 +1,17 @@\n error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:16:13\n+  --> $DIR/issue-27060.rs:15:13\n    |\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/issue-27060.rs:8:8\n-   |\n-LL | #[deny(unaligned_references)]\n-   |        ^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[deny(unaligned_references)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:18:13\n+  --> $DIR/issue-27060.rs:17:13\n    |\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^\n@@ -26,7 +22,7 @@ LL |     let _ = &good.data2[0];\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:21:13\n+  --> $DIR/issue-27060.rs:20:13\n    |\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n@@ -37,7 +33,7 @@ LL |     let _ = &good.data;\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n error: reference to packed field is unaligned\n-  --> $DIR/issue-27060.rs:23:13\n+  --> $DIR/issue-27060.rs:22:13\n    |\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^"}, {"sha": "d86698cbf3848d50e86ee6d2abfb6673794df0d0", "filename": "src/test/ui/packed/packed-struct-address-of-element.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-address-of-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-address-of-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-address-of-element.rs?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![allow(dead_code)]\n-#![deny(unaligned_references)]\n #![feature(raw_ref_op)]\n // ignore-emscripten weird assertion?\n "}, {"sha": "00bddfe40b25b7ae3a4e6a00e473f0608cb308cc", "filename": "src/test/ui/packed/packed-struct-borrow-element-64bit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.rs?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -9,6 +9,7 @@ struct Foo4C {\n     baz: usize\n }\n \n+#[warn(unaligned_references)]\n pub fn main() {\n     let foo = Foo4C { bar: 1, baz: 2 };\n     let brw = &foo.baz; //~WARN reference to packed field is unaligned"}, {"sha": "8ea26a971f41220ab613922e51ec9b9943651012", "filename": "src/test/ui/packed/packed-struct-borrow-element-64bit.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element-64bit.stderr?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -1,10 +1,14 @@\n warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element-64bit.rs:14:15\n+  --> $DIR/packed-struct-borrow-element-64bit.rs:15:15\n    |\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = note: `#[warn(unaligned_references)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element-64bit.rs:12:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)"}, {"sha": "a6ee90cef44f055abd58354860efc8cc443e741d", "filename": "src/test/ui/packed/packed-struct-borrow-element.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.rs?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -20,6 +20,7 @@ struct Foo4C {\n     baz: usize\n }\n \n+#[warn(unaligned_references)]\n pub fn main() {\n     let foo = Foo1 { bar: 1, baz: 2 };\n     let brw = &foo.baz; //~WARN reference to packed field is unaligned"}, {"sha": "6860bb5e85a6b974f9d0b970adf5d8ade2d583e8", "filename": "src/test/ui/packed/packed-struct-borrow-element.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e30d6d9096e23a6206b6950b8f28a85d327a42fc/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-borrow-element.stderr?ref=e30d6d9096e23a6206b6950b8f28a85d327a42fc", "patch": "@@ -1,17 +1,21 @@\n warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element.rs:25:15\n+  --> $DIR/packed-struct-borrow-element.rs:26:15\n    |\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^\n    |\n-   = note: `#[warn(unaligned_references)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/packed-struct-borrow-element.rs:23:8\n+   |\n+LL | #[warn(unaligned_references)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n \n warning: reference to packed field is unaligned\n-  --> $DIR/packed-struct-borrow-element.rs:30:15\n+  --> $DIR/packed-struct-borrow-element.rs:31:15\n    |\n LL |     let brw = &foo.baz;\n    |               ^^^^^^^^"}]}