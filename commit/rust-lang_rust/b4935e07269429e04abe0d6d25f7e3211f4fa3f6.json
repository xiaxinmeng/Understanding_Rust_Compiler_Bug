{"sha": "b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTM1ZTA3MjY5NDI5ZTA0YWJlMGQ2ZDI1ZjdlMzIxMWY0ZmEzZjY=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-09T22:03:58Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-09T22:03:58Z"}, "message": "use sort_unstable to sort primitive types\n\nIt's not important to retain original order if we have &[1, 1, 2, 3] for example.\n\nclippy::stable_sort_primitive", "tree": {"sha": "c015a9edde1086b23b6768ee5930657d263bd83d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c015a9edde1086b23b6768ee5930657d263bd83d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "html_url": "https://github.com/rust-lang/rust/commit/b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d92155bf6ae0b7d79fc83cbeeb0cc0c765353471", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92155bf6ae0b7d79fc83cbeeb0cc0c765353471", "html_url": "https://github.com/rust-lang/rust/commit/d92155bf6ae0b7d79fc83cbeeb0cc0c765353471"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "754b1f13381cb5980e998e00b5b6e16f58dec5f6", "filename": "compiler/rustc_ast/src/util/lev_distance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_ast%2Fsrc%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_ast%2Fsrc%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Flev_distance.rs?ref=b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "patch": "@@ -103,6 +103,7 @@ fn find_match_by_sorted_words<'a>(iter_names: Vec<&'a Symbol>, lookup: &str) ->\n \n fn sort_by_words(name: &str) -> String {\n     let mut split_words: Vec<&str> = name.split('_').collect();\n-    split_words.sort();\n+    // We are sorting primitive &strs and can use unstable sort here\n+    split_words.sort_unstable();\n     split_words.join(\"_\")\n }"}, {"sha": "c97f80cf09ba17ceeddf36937ecbe75c2117e9f8", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "patch": "@@ -1121,7 +1121,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // features. We check that at least one type is available for\n                 // the current target.\n                 let reg_class = reg.reg_class();\n-                let mut required_features = vec![];\n+                let mut required_features: Vec<&str> = vec![];\n                 for &(_, feature) in reg_class.supported_types(asm_arch) {\n                     if let Some(feature) = feature {\n                         if self.sess.target_features.contains(&Symbol::intern(feature)) {\n@@ -1135,7 +1135,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         break;\n                     }\n                 }\n-                required_features.sort();\n+                // We are sorting primitive strs here and can use unstable sort here\n+                required_features.sort_unstable();\n                 required_features.dedup();\n                 match &required_features[..] {\n                     [] => {}"}, {"sha": "717ccce35b61d964ee41d81e3f46317f986f924f", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "patch": "@@ -212,7 +212,8 @@ impl EarlyLintPass for NonAsciiIdents {\n                         }\n                     }\n \n-                    ch_list.sort();\n+                    // We sort primitive chars here and can use unstable sort\n+                    ch_list.sort_unstable();\n                     ch_list.dedup();\n                     lint_reports.insert((sp, ch_list), augment_script_set);\n                 }"}, {"sha": "d92f1367e7d679208175d98b6a2c3e93389fa28f", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/merging.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmerging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmerging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmerging.rs?ref=b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "patch": "@@ -74,7 +74,9 @@ pub fn merge_codegen_units<'tcx>(\n \n                 // Sort the names, so things are deterministic and easy to\n                 // predict.\n-                cgu_contents.sort();\n+\n+                // We are sorting primitive &strs here so we can use unstable sort\n+                cgu_contents.sort_unstable();\n \n                 (current_cgu_name, cgu_contents.join(\"--\"))\n             })"}, {"sha": "d7188f05ff6b100d763628cecec32945c087a690", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "patch": "@@ -230,8 +230,8 @@ fn get_arm_identity_info<'a, 'tcx>(\n             }\n         }\n     }\n-\n-    nop_stmts.sort();\n+    // We sort primitive usize here so we can use unstable sort\n+    nop_stmts.sort_unstable();\n \n     // Use one of the statements we're going to discard between the point\n     // where the storage location for the variant field becomes live and"}, {"sha": "af0878b93dde421b3cb80e186c19c43f1b084899", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4935e07269429e04abe0d6d25f7e3211f4fa3f6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=b4935e07269429e04abe0d6d25f7e3211f4fa3f6", "patch": "@@ -4266,11 +4266,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             None\n                         }\n                     })\n-                    .collect::<Vec<_>>();\n+                    .collect::<Vec<usize>>();\n \n                 // Both checked and coerced types could have matched, thus we need to remove\n                 // duplicates.\n-                referenced_in.sort();\n+\n+                // We sort primitive type usize here and can use unstable sort\n+                referenced_in.sort_unstable();\n                 referenced_in.dedup();\n \n                 if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {"}]}