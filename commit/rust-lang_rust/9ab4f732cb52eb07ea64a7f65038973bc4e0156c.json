{"sha": "9ab4f732cb52eb07ea64a7f65038973bc4e0156c", "node_id": "C_kwDOAAsO6NoAKDlhYjRmNzMyY2I1MmViMDdlYTY0YTdmNjUwMzg5NzNiYzRlMDE1NmM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-03-31T15:56:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-03-31T16:09:40Z"}, "message": "expand: Do not count metavar declarations on RHS of `macro_rules`\n\nThey are 0 by definition there.", "tree": {"sha": "e9983c6d0806e5ee116ac9516e1836ed4f604ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9983c6d0806e5ee116ac9516e1836ed4f604ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab4f732cb52eb07ea64a7f65038973bc4e0156c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab4f732cb52eb07ea64a7f65038973bc4e0156c", "html_url": "https://github.com/rust-lang/rust/commit/9ab4f732cb52eb07ea64a7f65038973bc4e0156c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab4f732cb52eb07ea64a7f65038973bc4e0156c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03314912f1361af6b39383958b5aa1b4aed61c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/03314912f1361af6b39383958b5aa1b4aed61c26", "html_url": "https://github.com/rust-lang/rust/commit/03314912f1361af6b39383958b5aa1b4aed61c26"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "0086983f3d984eb2a30784a37e7e194a34fd8e0e", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ab4f732cb52eb07ea64a7f65038973bc4e0156c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab4f732cb52eb07ea64a7f65038973bc4e0156c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=9ab4f732cb52eb07ea64a7f65038973bc4e0156c", "patch": "@@ -263,18 +263,12 @@ crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, N\n pub(super) fn count_metavar_decls(matcher: &[TokenTree]) -> usize {\n     matcher\n         .iter()\n-        .map(|tt| {\n-            match tt {\n-                TokenTree::Delimited(_, delim) => count_metavar_decls(delim.inner_tts()),\n-                TokenTree::MetaVar(..) => 0,\n-                TokenTree::MetaVarDecl(..) => 1,\n-                // RHS meta-variable expressions eventually end-up here. `0` is returned to inform\n-                // that no meta-variable was found, because \"meta-variables\" != \"meta-variable\n-                // expressions\".\n-                TokenTree::MetaVarExpr(..) => 0,\n-                TokenTree::Sequence(_, seq) => seq.num_captures,\n-                TokenTree::Token(..) => 0,\n-            }\n+        .map(|tt| match tt {\n+            TokenTree::MetaVarDecl(..) => 1,\n+            TokenTree::Sequence(_, seq) => seq.num_captures,\n+            TokenTree::Delimited(_, delim) => count_metavar_decls(delim.inner_tts()),\n+            TokenTree::Token(..) => 0,\n+            TokenTree::MetaVar(..) | TokenTree::MetaVarExpr(..) => unreachable!(),\n         })\n         .sum()\n }"}, {"sha": "48abbd7c18e14d94d6384318108a02f250a50c33", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ab4f732cb52eb07ea64a7f65038973bc4e0156c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab4f732cb52eb07ea64a7f65038973bc4e0156c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=9ab4f732cb52eb07ea64a7f65038973bc4e0156c", "patch": "@@ -1,4 +1,4 @@\n-use crate::mbe::macro_parser;\n+use crate::mbe::macro_parser::count_metavar_decls;\n use crate::mbe::{Delimited, KleeneOp, KleeneToken, MetaVarExpr, SequenceRepetition, TokenTree};\n \n use rustc_ast::token::{self, Token};\n@@ -211,14 +211,15 @@ fn parse_tree(\n                     let (separator, kleene) =\n                         parse_sep_and_kleene_op(&mut trees, delim_span.entire(), sess);\n                     // Count the number of captured \"names\" (i.e., named metavars)\n-                    let name_captures = macro_parser::count_metavar_decls(&sequence);\n+                    let num_captures =\n+                        if parsing_patterns { count_metavar_decls(&sequence) } else { 0 };\n                     TokenTree::Sequence(\n                         delim_span,\n                         Lrc::new(SequenceRepetition {\n                             tts: sequence,\n                             separator,\n                             kleene,\n-                            num_captures: name_captures,\n+                            num_captures,\n                         }),\n                     )\n                 }"}]}