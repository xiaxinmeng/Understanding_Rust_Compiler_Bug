{"sha": "213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMzc2NWExZDM5ZWRiOGIyOWIxYjkwNjcwYTNmYzZiMTZmY2M5Y2Q=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-23T16:54:26Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-23T16:54:26Z"}, "message": "Merge remote-tracking branch 'popzxc/if-same-cond-fn' into rollup-new-lints", "tree": {"sha": "76a33bb33d2813a4d3b38e6e862cdbbc22c3026a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a33bb33d2813a4d3b38e6e862cdbbc22c3026a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl3ZZEQACgkQaTCGhp1Q\nZjejYRAAmF19Ijm9AzyGUj4xNtkkTmeETPGQVlZPSSnyxJ98K1isnJM9S5GGlE4J\n3LnkWeiGMkSr149bPWn3xUyz1576R5/w8NUi6gK3puFdtrYvLsL+c5WtY4B2Q+HN\n0Ryg2pbpJXwoIlAmzgOfoKYk7q510JpsGlWQDwbsPr5AuuGKlxAZ5aGl19/sAm3X\nT0LTHeV7sDm0aIH0twR6ivkcKuqYa9/l4G2WxaiVTg9ffhiLkzCdZyqz4kM3kvW1\nJwdT2cTbrtRhkBUkEMGtOikx0day8kHJLsg9oGUZ+IUUCzX9iDwatrEiol2n4778\nS8Pqd9xzgpO7oleVHcjHiABlOcO90X32LJz5qRx1ZlYyT6LDnsXIZLuidrN0B0IY\n0HrR+zaOzbHIHq5UVi7VmAhnzE7V5MElMJ53W6mlZkw4wzIHTt26HKHdUWLyCt6H\n0RbVW6QQA3+vAY/zV1TneHrTxAwCMNKMp+7UC/AK7eXC7DzWY4/4MwjADPece7TE\n7vxTRF4P5p+erGL2wOgfx4aQwQZRI5QjucZ/tJbBIu0FOkrLAXk1EQKo9mAH1qq6\nPT0/WfZxP+BRClWs0I67Co/Fpl8IyNCCCqO214Lh9EoQKM1YMOu7GyAERUGC2U9l\nyS85DnEmE3VKzF/zFiZBMtUy9vA+SRAICyw7K/mZiWB1xZut7F4=\n=wcPg\n-----END PGP SIGNATURE-----", "payload": "tree 76a33bb33d2813a4d3b38e6e862cdbbc22c3026a\nparent d151ef7437cdedb1767d6369c2a3fe175c9971ca\nparent bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665\nauthor flip1995 <hello@philkrones.com> 1574528066 +0100\ncommitter flip1995 <hello@philkrones.com> 1574528066 +0100\n\nMerge remote-tracking branch 'popzxc/if-same-cond-fn' into rollup-new-lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "html_url": "https://github.com/rust-lang/rust/commit/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d151ef7437cdedb1767d6369c2a3fe175c9971ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d151ef7437cdedb1767d6369c2a3fe175c9971ca", "html_url": "https://github.com/rust-lang/rust/commit/d151ef7437cdedb1767d6369c2a3fe175c9971ca"}, {"sha": "bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665", "html_url": "https://github.com/rust-lang/rust/commit/bbb8cd4fbbed4b82b7d1b61206bf6c70fd75e665"}], "stats": {"total": 243, "additions": 242, "deletions": 1}, "files": [{"sha": "86b9aeb66e5d8a2dce77a50e8088ee67e3fc43d6", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "patch": "@@ -1030,6 +1030,7 @@ Released 2018-09-13\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n+[`ifs_same_cond_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond_fn\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n [`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping"}, {"sha": "9cbff066f46405470da8354f0f65e019c5f4dc10", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "patch": "@@ -40,6 +40,53 @@ declare_clippy_lint! {\n     \"consecutive `ifs` with the same condition\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for consecutive `if`s with the same function call.\n+    ///\n+    /// **Why is this bad?** This is probably a copy & paste error.\n+    /// Despite the fact that function can have side effects and `if` works as\n+    /// intended, such an approach is implicit and can be considered a \"code smell\".\n+    ///\n+    /// **Known problems:** Hopefully none.\n+    ///\n+    /// **Example:**\n+    /// ```ignore\n+    /// if foo() == bar {\n+    ///     \u2026\n+    /// } else if foo() == bar {\n+    ///     \u2026\n+    /// }\n+    /// ```\n+    ///\n+    /// This probably should be:\n+    /// ```ignore\n+    /// if foo() == bar {\n+    ///     \u2026\n+    /// } else if foo() == baz {\n+    ///     \u2026\n+    /// }\n+    /// ```\n+    ///\n+    /// or if the original code was not a typo and called function mutates a state,\n+    /// consider move the mutation out of the `if` condition to avoid similarity to\n+    /// a copy & paste error:\n+    ///\n+    /// ```ignore\n+    /// let first = foo();\n+    /// if first == bar {\n+    ///     \u2026\n+    /// } else {\n+    ///     let second = foo();\n+    ///     if second == bar {\n+    ///     \u2026\n+    ///     }\n+    /// }\n+    /// ```\n+    pub SAME_FUNCTIONS_IN_IF_CONDITION,\n+    pedantic,\n+    \"consecutive `ifs` with the same function call\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `if/else` with the same body as the *then* part\n     /// and the *else* part.\n@@ -102,7 +149,7 @@ declare_clippy_lint! {\n     \"`match` with identical arm bodies\"\n }\n \n-declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, IF_SAME_THEN_ELSE, MATCH_SAME_ARMS]);\n+declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, SAME_FUNCTIONS_IN_IF_CONDITION, IF_SAME_THEN_ELSE, MATCH_SAME_ARMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n@@ -119,6 +166,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n             let (conds, blocks) = if_sequence(expr);\n             lint_same_then_else(cx, &blocks);\n             lint_same_cond(cx, &conds);\n+            lint_same_fns_in_if_cond(cx, &conds);\n             lint_match_arms(cx, expr);\n         }\n     }\n@@ -163,6 +211,34 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n     }\n }\n \n+/// Implementation of `SAME_FUNCTIONS_IN_IF_CONDITION`.\n+fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n+    let hash: &dyn Fn(&&Expr) -> u64 = &|expr| -> u64 {\n+        let mut h = SpanlessHash::new(cx, cx.tables);\n+        h.hash_expr(expr);\n+        h.finish()\n+    };\n+\n+    let eq: &dyn Fn(&&Expr, &&Expr) -> bool = &|&lhs, &rhs| -> bool {\n+        // Do not spawn warning if `IFS_SAME_COND` already produced it.\n+        if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, rhs) {\n+            return false;\n+        }\n+        SpanlessEq::new(cx).eq_expr(lhs, rhs)\n+    };\n+\n+    for (i, j) in search_same(conds, hash, eq) {\n+        span_note_and_lint(\n+            cx,\n+            SAME_FUNCTIONS_IN_IF_CONDITION,\n+            j.span,\n+            \"this `if` has the same function call as a previous if\",\n+            i.span,\n+            \"same as this\",\n+        );\n+    }\n+}\n+\n /// Implementation of `MATCH_SAME_ARMS`.\n fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr) {\n     fn same_bindings<'tcx>("}, {"sha": "652a2a8127ca0f28b57170d7eff6b623c8045ede", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "patch": "@@ -470,6 +470,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &collapsible_if::COLLAPSIBLE_IF,\n         &comparison_chain::COMPARISON_CHAIN,\n         &copies::IFS_SAME_COND,\n+        &copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n         &copies::IF_SAME_THEN_ELSE,\n         &copies::MATCH_SAME_ARMS,\n         &copy_iterator::COPY_ITERATOR,\n@@ -989,6 +990,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n         LintId::of(&attrs::INLINE_ALWAYS),\n         LintId::of(&checked_conversions::CHECKED_CONVERSIONS),\n+        LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n         LintId::of(&copies::MATCH_SAME_ARMS),\n         LintId::of(&copy_iterator::COPY_ITERATOR),\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),"}, {"sha": "c66bdc0b1fbdab975e56feba281890a9ed479271", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "patch": "@@ -714,6 +714,13 @@ pub const ALL_LINTS: [Lint; 334] = [\n         deprecation: None,\n         module: \"copies\",\n     },\n+    Lint {\n+        name: \"ifs_same_cond_fn\",\n+        group: \"pedantic\",\n+        desc: \"consecutive `ifs` with the same function call\",\n+        deprecation: None,\n+        module: \"copies\",\n+    },\n     Lint {\n         name: \"implicit_hasher\",\n         group: \"style\","}, {"sha": "686867cf5c6f661df745266fea2860e3ccd10b7d", "filename": "tests/ui/same_functions_in_if_condition.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/tests%2Fui%2Fsame_functions_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/tests%2Fui%2Fsame_functions_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.rs?ref=213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "patch": "@@ -0,0 +1,80 @@\n+#![warn(clippy::same_functions_in_if_condition)]\n+#![allow(clippy::ifs_same_cond)] // This warning is different from `ifs_same_cond`.\n+#![allow(clippy::if_same_then_else, clippy::comparison_chain)] // all empty blocks\n+\n+fn function() -> bool {\n+    true\n+}\n+\n+fn fn_arg(_arg: u8) -> bool {\n+    true\n+}\n+\n+struct Struct;\n+\n+impl Struct {\n+    fn method(&self) -> bool {\n+        true\n+    }\n+    fn method_arg(&self, _arg: u8) -> bool {\n+        true\n+    }\n+}\n+\n+fn ifs_same_cond_fn() {\n+    let a = 0;\n+    let obj = Struct;\n+\n+    if function() {\n+    } else if function() {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    if fn_arg(a) {\n+    } else if fn_arg(a) {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    if obj.method() {\n+    } else if obj.method() {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    if obj.method_arg(a) {\n+    } else if obj.method_arg(a) {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    let mut v = vec![1];\n+    if v.pop() == None {\n+        //~ ERROR ifs same condition\n+    } else if v.pop() == None {\n+    }\n+\n+    if v.len() == 42 {\n+        //~ ERROR ifs same condition\n+    } else if v.len() == 42 {\n+    }\n+\n+    if v.len() == 1 {\n+        // ok, different conditions\n+    } else if v.len() == 2 {\n+    }\n+\n+    if fn_arg(0) {\n+        // ok, different arguments.\n+    } else if fn_arg(1) {\n+    }\n+\n+    if obj.method_arg(0) {\n+        // ok, different arguments.\n+    } else if obj.method_arg(1) {\n+    }\n+\n+    if a == 1 {\n+        // ok, warning is on `ifs_same_cond` behalf.\n+    } else if a == 1 {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "214f1a9e7c8fae78d7a86fdc1b544b583841e973", "filename": "tests/ui/same_functions_in_if_condition.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/213765a1d39edb8b29b1b90670a3fc6b16fcc9cd/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.stderr?ref=213765a1d39edb8b29b1b90670a3fc6b16fcc9cd", "patch": "@@ -0,0 +1,75 @@\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:29:15\n+   |\n+LL |     } else if function() {\n+   |               ^^^^^^^^^^\n+   |\n+   = note: `-D clippy::same-functions-in-if-condition` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:28:8\n+   |\n+LL |     if function() {\n+   |        ^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:34:15\n+   |\n+LL |     } else if fn_arg(a) {\n+   |               ^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:33:8\n+   |\n+LL |     if fn_arg(a) {\n+   |        ^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:39:15\n+   |\n+LL |     } else if obj.method() {\n+   |               ^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:38:8\n+   |\n+LL |     if obj.method() {\n+   |        ^^^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:44:15\n+   |\n+LL |     } else if obj.method_arg(a) {\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:43:8\n+   |\n+LL |     if obj.method_arg(a) {\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:51:15\n+   |\n+LL |     } else if v.pop() == None {\n+   |               ^^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:49:8\n+   |\n+LL |     if v.pop() == None {\n+   |        ^^^^^^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:56:15\n+   |\n+LL |     } else if v.len() == 42 {\n+   |               ^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:54:8\n+   |\n+LL |     if v.len() == 42 {\n+   |        ^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}