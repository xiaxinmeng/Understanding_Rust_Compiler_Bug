{"sha": "8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYmM2ZDZkYmJmZTFjY2M5YTcyZDAwM2QxM2MzZDI2N2M5MWM3NDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-10T22:58:40Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-10T22:58:40Z"}, "message": "Rollup merge of #54862 - Havvy:cfg_attr_multi, r=petrochenkov\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "9a9bf81b322ac5fe909138a79032ad7fb680cad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a9bf81b322ac5fe909138a79032ad7fb680cad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "html_url": "https://github.com/rust-lang/rust/commit/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a267b3a9ff041c92c3ce71a285512d97ae8f208b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a267b3a9ff041c92c3ce71a285512d97ae8f208b", "html_url": "https://github.com/rust-lang/rust/commit/a267b3a9ff041c92c3ce71a285512d97ae8f208b"}, {"sha": "bbe832d570e826b2012c09869aa77d6201932730", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe832d570e826b2012c09869aa77d6201932730", "html_url": "https://github.com/rust-lang/rust/commit/bbe832d570e826b2012c09869aa77d6201932730"}], "stats": {"total": 406, "additions": 360, "deletions": 46}, "files": [{"sha": "6365d3e71c61616616519446b001db51c03782b2", "filename": "src/doc/unstable-book/src/language-features/cfg-attr-multi.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-attr-multi.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-attr-multi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-attr-multi.md?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,20 @@\n+# `cfg_attr_multi`\n+\n+The tracking issue for this feature is: [#54881]\n+The RFC for this feature is: [#2539]\n+\n+[#54881]: https://github.com/rust-lang/rust/issues/54881\n+[#2539]: https://github.com/rust-lang/rfcs/pull/2539\n+\n+------------------------\n+\n+This feature flag lets you put multiple attributes into a `cfg_attr` attribute.\n+\n+Example:\n+\n+```rust,ignore\n+#[cfg_attr(all(), must_use, optimize)]\n+```\n+\n+Because `cfg_attr` resolves before procedural macros, this does not affect\n+macro resolution at all.\n\\ No newline at end of file"}, {"sha": "e611eb86dc1b3214eb5637d5acb685f4a33881e2", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 78, "deletions": 17, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -9,7 +9,14 @@\n // except according to those terms.\n \n use attr::HasAttrs;\n-use feature_gate::{feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features, GateIssue};\n+use feature_gate::{\n+    feature_err,\n+    EXPLAIN_STMT_ATTR_SYNTAX,\n+    Features,\n+    get_features,\n+    GateIssue,\n+    emit_feature_err,\n+};\n use {fold, attr};\n use ast;\n use source_map::Spanned;\n@@ -73,49 +80,103 @@ impl<'a> StripUnconfigured<'a> {\n         if self.in_cfg(node.attrs()) { Some(node) } else { None }\n     }\n \n+    /// Parse and expand all `cfg_attr` attributes into a list of attributes\n+    /// that are within each `cfg_attr` that has a true configuration predicate.\n+    ///\n+    /// Gives compiler warnigns if any `cfg_attr` does not contain any\n+    /// attributes and is in the original source code. Gives compiler errors if\n+    /// the syntax of any `cfg_attr` is incorrect.\n     pub fn process_cfg_attrs<T: HasAttrs>(&mut self, node: T) -> T {\n         node.map_attrs(|attrs| {\n-            attrs.into_iter().filter_map(|attr| self.process_cfg_attr(attr)).collect()\n+            attrs.into_iter().flat_map(|attr| self.process_cfg_attr(attr)).collect()\n         })\n     }\n \n-    fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Option<ast::Attribute> {\n+    /// Parse and expand a single `cfg_attr` attribute into a list of attributes\n+    /// when the configuration predicate is true, or otherwise expand into an\n+    /// empty list of attributes.\n+    ///\n+    /// Gives a compiler warning when the `cfg_attr` contains no attribtes and\n+    /// is in the original source file. Gives a compiler error if the syntax of\n+    /// the attribute is incorrect\n+    fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Vec<ast::Attribute> {\n         if !attr.check_name(\"cfg_attr\") {\n-            return Some(attr);\n+            return vec![attr];\n         }\n \n-        let (cfg, path, tokens, span) = match attr.parse(self.sess, |parser| {\n+        let gate_cfg_attr_multi = if let Some(ref features) = self.features {\n+            !features.cfg_attr_multi\n+        } else {\n+            false\n+        };\n+        let cfg_attr_span = attr.span;\n+\n+        let (cfg_predicate, expanded_attrs) = match attr.parse(self.sess, |parser| {\n             parser.expect(&token::OpenDelim(token::Paren))?;\n-            let cfg = parser.parse_meta_item()?;\n+\n+            let cfg_predicate = parser.parse_meta_item()?;\n             parser.expect(&token::Comma)?;\n-            let lo = parser.span.lo();\n-            let (path, tokens) = parser.parse_meta_item_unrestricted()?;\n-            parser.eat(&token::Comma); // Optional trailing comma\n+\n+            // Presumably, the majority of the time there will only be one attr.\n+            let mut expanded_attrs = Vec::with_capacity(1);\n+\n+            while !parser.check(&token::CloseDelim(token::Paren)) {\n+                let lo = parser.span.lo();\n+                let (path, tokens) = parser.parse_meta_item_unrestricted()?;\n+                expanded_attrs.push((path, tokens, parser.prev_span.with_lo(lo)));\n+                parser.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Paren)])?;\n+            }\n+\n             parser.expect(&token::CloseDelim(token::Paren))?;\n-            Ok((cfg, path, tokens, parser.prev_span.with_lo(lo)))\n+            Ok((cfg_predicate, expanded_attrs))\n         }) {\n             Ok(result) => result,\n             Err(mut e) => {\n                 e.emit();\n-                return None;\n+                return Vec::new();\n             }\n         };\n \n-        if attr::cfg_matches(&cfg, self.sess, self.features) {\n-            self.process_cfg_attr(ast::Attribute {\n+        // Check feature gate and lint on zero attributes in source. Even if the feature is gated,\n+        // we still compute as if it wasn't, since the emitted error will stop compilation futher\n+        // along the compilation.\n+        match (expanded_attrs.len(), gate_cfg_attr_multi) {\n+            (0, false) => {\n+                // FIXME: Emit unused attribute lint here.\n+            },\n+            (1, _) => {},\n+            (_, true) => {\n+                emit_feature_err(\n+                    self.sess,\n+                    \"cfg_attr_multi\",\n+                    cfg_attr_span,\n+                    GateIssue::Language,\n+                    \"cfg_attr with zero or more than one attributes is experimental\",\n+                );\n+            },\n+            (_, false) => {}\n+        }\n+\n+        if attr::cfg_matches(&cfg_predicate, self.sess, self.features) {\n+            // We call `process_cfg_attr` recursively in case there's a\n+            // `cfg_attr` inside of another `cfg_attr`. E.g.\n+            //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n+            expanded_attrs.into_iter()\n+            .flat_map(|(path, tokens, span)| self.process_cfg_attr(ast::Attribute {\n                 id: attr::mk_attr_id(),\n                 style: attr.style,\n                 path,\n                 tokens,\n                 is_sugared_doc: false,\n                 span,\n-            })\n+            }))\n+            .collect()\n         } else {\n-            None\n+            Vec::new()\n         }\n     }\n \n-    // Determine if a node with the given attributes should be included in this configuration.\n+    /// Determine if a node with the given attributes should be included in this configuration.\n     pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             if !is_cfg(attr) {\n@@ -165,7 +226,7 @@ impl<'a> StripUnconfigured<'a> {\n         })\n     }\n \n-    // Visit attributes on expression and statements (but not attributes on items in blocks).\n+    /// Visit attributes on expression and statements (but not attributes on items in blocks).\n     fn visit_expr_attrs(&mut self, attrs: &[ast::Attribute]) {\n         // flag the offending attributes\n         for attr in attrs.iter() {"}, {"sha": "c786691ac1b85165a873a88b899eff6b34290769", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -499,6 +499,9 @@ declare_features! (\n \n     // Allows `impl Trait` in bindings (`let`, `const`, `static`)\n     (active, impl_trait_in_bindings, \"1.30.0\", Some(34511), None),\n+\n+    // #[cfg_attr(predicate, multiple, attributes, here)]\n+    (active, cfg_attr_multi, \"1.31.0\", Some(54881), None),\n );\n \n declare_features! ("}, {"sha": "0da7a61a7f2ee9e335eae7c717c626b08c4dcd8f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -678,7 +678,7 @@ impl<'a> Parser<'a> {\n     /// Expect next token to be edible or inedible token.  If edible,\n     /// then consume it; if inedible, then return without consuming\n     /// anything.  Signal a fatal error if next token is unexpected.\n-    fn expect_one_of(&mut self,\n+    pub fn expect_one_of(&mut self,\n                          edible: &[token::Token],\n                          inedible: &[token::Token]) -> PResult<'a,  ()>{\n         fn tokens_to_string(tokens: &[TokenType]) -> String {"}, {"sha": "21e00544ca00b4a723d028ebb5a94f37e987b24e", "filename": "src/test/ui/cfg-attr-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a267b3a9ff041c92c3ce71a285512d97ae8f208b/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a267b3a9ff041c92c3ce71a285512d97ae8f208b/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.rs?ref=a267b3a9ff041c92c3ce71a285512d97ae8f208b", "patch": "@@ -1,13 +0,0 @@\n-// compile-flags: --cfg TRUE\n-\n-#[cfg_attr(TRUE, inline,)] // OK\n-fn f() {}\n-\n-#[cfg_attr(FALSE, inline,)] // OK\n-fn g() {}\n-\n-#[cfg_attr(TRUE, inline,,)] //~ ERROR expected `)`, found `,`\n-fn h() {}\n-\n-#[cfg_attr(FALSE, inline,,)] //~ ERROR expected `)`, found `,`\n-fn i() {}"}, {"sha": "76a470417e9edb6f336c4cada2f0c076e489ea1f", "filename": "src/test/ui/cfg-attr-trailing-comma.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a267b3a9ff041c92c3ce71a285512d97ae8f208b/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a267b3a9ff041c92c3ce71a285512d97ae8f208b/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.stderr?ref=a267b3a9ff041c92c3ce71a285512d97ae8f208b", "patch": "@@ -1,14 +0,0 @@\n-error: expected `)`, found `,`\n-  --> $DIR/cfg-attr-trailing-comma.rs:9:25\n-   |\n-LL | #[cfg_attr(TRUE, inline,,)] //~ ERROR expected `)`, found `,`\n-   |                         ^ expected `)`\n-\n-error: expected `)`, found `,`\n-  --> $DIR/cfg-attr-trailing-comma.rs:12:26\n-   |\n-LL | #[cfg_attr(FALSE, inline,,)] //~ ERROR expected `)`, found `,`\n-   |                          ^ expected `)`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "3bf39b788db6e1e2b6b8c3f9728c1485916cb5ad", "filename": "src/test/ui/conditional-compilation/auxiliary/namespaced_enums.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fauxiliary%2Fnamespaced_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fauxiliary%2Fnamespaced_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fauxiliary%2Fnamespaced_enums.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/auxiliary/namespaced_enums.rs"}, {"sha": "36dd78dd2b19a28d9571f486396251fb7795bf23", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-1.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-arg-invalid-1.rs"}, {"sha": "48d656a4a28d92ffac76fb6aaf0a5d789c6c9c95", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-2.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-arg-invalid-2.rs"}, {"sha": "96ac7828c5c3b9dd766d89a6fd62503f6b7f1289", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-3.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-arg-invalid-3.rs"}, {"sha": "e7dfa17b4b6c414a9cd3132cad8e1f2013a5c204", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-4.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-arg-invalid-4.rs"}, {"sha": "a939f451038896b240fe514c9059d147ed67a2d7", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-5.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-5.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-arg-invalid-5.rs"}, {"sha": "58a62d45ea5d7486a0137630e50e2daea0e77807", "filename": "src/test/ui/conditional-compilation/cfg-attr-cfg-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-attr-cfg-2.rs"}, {"sha": "db3c7acff151c0a4a3ff79a5767e8fb731870bd8", "filename": "src/test/ui/conditional-compilation/cfg-attr-cfg-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-attr-cfg-2.stderr"}, {"sha": "a79c7663861d71c69a62d61bf12bc5233ed3ddaf", "filename": "src/test/ui/conditional-compilation/cfg-attr-crate-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-attr-crate-2.rs"}, {"sha": "a730473f663151df284a88b1de9fe627f7c751e6", "filename": "src/test/ui/conditional-compilation/cfg-attr-crate-2.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -2,7 +2,7 @@ error[E0658]: no_core is experimental (see issue #29639)\n   --> $DIR/cfg-attr-crate-2.rs:15:21\n    |\n LL | #![cfg_attr(broken, no_core)] //~ ERROR no_core is experimental\n-   |                     ^^^^^^^^\n+   |                     ^^^^^^^\n    |\n    = help: add #![feature(no_core)] to the crate attributes to enable\n ", "previous_filename": "src/test/ui/cfg-attr-crate-2.stderr"}, {"sha": "09fe6cec49c2e4b653d50509504a947df6f00fa7", "filename": "src/test/ui/conditional-compilation/cfg-attr-invalid-predicate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-attr-invalid-predicate.rs"}, {"sha": "5a89f9766d16655552db599d648ef383d7b4432e", "filename": "src/test/ui/conditional-compilation/cfg-attr-invalid-predicate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-attr-invalid-predicate.stderr"}, {"sha": "84bd33fc0e7d3ce5541f4252bd64328891a18137", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-false.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,20 @@\n+// Test that cfg_attr doesn't emit any attributes when the\n+// configuation variable is false. This mirrors `cfg-attr-multi-true.rs`\n+\n+// compile-pass\n+\n+#![warn(unused_must_use)]\n+#![feature(cfg_attr_multi)]\n+\n+#[cfg_attr(any(), deprecated, must_use)]\n+struct Struct {}\n+\n+impl Struct {\n+    fn new() -> Struct {\n+        Struct {}\n+    }\n+}\n+\n+fn main() {\n+    Struct::new();\n+}"}, {"sha": "d4c3186a6ebbb6dc544dfffe21059f548d1ce7b4", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: --cfg broken\n+\n+#![feature(cfg_attr_multi)]\n+#![cfg_attr(broken, no_core, no_std)] //~ ERROR no_core is experimental\n+\n+fn main() { }"}, {"sha": "bf68d92cc0bbd410d69c5f03f96c35bbc31281f7", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: no_core is experimental (see issue #29639)\n+  --> $DIR/cfg-attr-multi-invalid-1.rs:14:21\n+   |\n+LL | #![cfg_attr(broken, no_core, no_std)] //~ ERROR no_core is experimental\n+   |                     ^^^^^^^\n+   |\n+   = help: add #![feature(no_core)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "bee6b7d4886bd110eba2d42a62fefd25fb5c5905", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: --cfg broken\n+\n+#![feature(cfg_attr_multi)]\n+#![cfg_attr(broken, no_std, no_core)] //~ ERROR no_core is experimental\n+\n+fn main() { }"}, {"sha": "5c72a400e0bae031d8f85fa2bcc8137db9d96d82", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: no_core is experimental (see issue #29639)\n+  --> $DIR/cfg-attr-multi-invalid-2.rs:14:29\n+   |\n+LL | #![cfg_attr(broken, no_std, no_core)] //~ ERROR no_core is experimental\n+   |                             ^^^^^^^\n+   |\n+   = help: add #![feature(no_core)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a31dde00c7cf5f6d33eed4151b5c56ddb68d5c65", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,22 @@\n+// Test that cfg_attr with multiple attributes actually emits both attributes.\n+// This is done by emitting two attributes that cause new warnings, and then\n+// triggering those warnings.\n+\n+// compile-pass\n+\n+#![warn(unused_must_use)]\n+#![feature(cfg_attr_multi)]\n+\n+#[cfg_attr(all(), deprecated, must_use)]\n+struct MustUseDeprecated {}\n+\n+impl MustUseDeprecated { //~ warning: use of deprecated item\n+    fn new() -> MustUseDeprecated { //~ warning: use of deprecated item\n+        MustUseDeprecated {} //~ warning: use of deprecated item\n+    }\n+}\n+\n+fn main() {\n+    MustUseDeprecated::new(); //~ warning: use of deprecated item\n+    //| warning: unused `MustUseDeprecated` which must be used\n+}"}, {"sha": "37cb3de06c04f75288847cdaa974c65096d95419", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,38 @@\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:13:6\n+   |\n+LL | impl MustUseDeprecated { //~ warning: use of deprecated item\n+   |      ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n+\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:20:5\n+   |\n+LL |     MustUseDeprecated::new(); //~ warning: use of deprecated item\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:14:17\n+   |\n+LL |     fn new() -> MustUseDeprecated { //~ warning: use of deprecated item\n+   |                 ^^^^^^^^^^^^^^^^^\n+\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:15:9\n+   |\n+LL |         MustUseDeprecated {} //~ warning: use of deprecated item\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+warning: unused `MustUseDeprecated` which must be used\n+  --> $DIR/cfg-attr-multi-true.rs:20:5\n+   |\n+LL |     MustUseDeprecated::new(); //~ warning: use of deprecated item\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cfg-attr-multi-true.rs:7:9\n+   |\n+LL | #![warn(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+"}, {"sha": "eec0e8faca877b7f71a2537232861fa2a66fb628", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,45 @@\n+// Parse `cfg_attr` with varying numbers of attributes and trailing commas\n+\n+#![feature(cfg_attr_multi)]\n+\n+// Completely empty `cfg_attr` input\n+#[cfg_attr()] //~ error: expected identifier, found `)`\n+struct NoConfigurationPredicate;\n+\n+// Zero attributes, zero trailing comma (comma manatory here)\n+#[cfg_attr(all())] //~ error: expected `,`, found `)`\n+struct A0C0;\n+\n+// Zero attributes, one trailing comma\n+#[cfg_attr(all(),)] // Ok\n+struct A0C1;\n+\n+// Zero attributes, two trailing commas\n+#[cfg_attr(all(),,)] //~ ERROR expected identifier\n+struct A0C2;\n+\n+// One attribute, no trailing comma\n+#[cfg_attr(all(), must_use)] // Ok\n+struct A1C0;\n+\n+// One attribute, one trailing comma\n+#[cfg_attr(all(), must_use,)] // Ok\n+struct A1C1;\n+\n+// One attribute, two trailing commas\n+#[cfg_attr(all(), must_use,,)] //~ ERROR expected identifier\n+struct A1C2;\n+\n+// Two attributes, no trailing comma\n+#[cfg_attr(all(), must_use, deprecated)] // Ok\n+struct A2C0;\n+\n+// Two attributes, one trailing comma\n+#[cfg_attr(all(), must_use, deprecated,)] // Ok\n+struct A2C1;\n+\n+// Two attributes, two trailing commas\n+#[cfg_attr(all(), must_use, deprecated,,)] //~ ERROR expected identifier\n+struct A2C2;\n+\n+fn main() {}"}, {"sha": "553406b6dd83d25f11775a734c48838f1d580735", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,32 @@\n+error: expected identifier, found `)`\n+  --> $DIR/cfg-attr-parse.rs:6:12\n+   |\n+LL | #[cfg_attr()] //~ error: expected identifier, found `)`\n+   |            ^ expected identifier\n+\n+error: expected `,`, found `)`\n+  --> $DIR/cfg-attr-parse.rs:10:17\n+   |\n+LL | #[cfg_attr(all())] //~ error: expected `,`, found `)`\n+   |                 ^ expected `,`\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:18:18\n+   |\n+LL | #[cfg_attr(all(),,)] //~ ERROR expected identifier\n+   |                  ^ expected identifier\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:30:28\n+   |\n+LL | #[cfg_attr(all(), must_use,,)] //~ ERROR expected identifier\n+   |                            ^ expected identifier\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:42:40\n+   |\n+LL | #[cfg_attr(all(), must_use, deprecated,,)] //~ ERROR expected identifier\n+   |                                        ^ expected identifier\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "06a22eff25c218c6b8aef73cf76e887d1333e713", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-attr-syntax-validation.rs"}, {"sha": "7773fdb8cf9848f9ed01f6f4a37cc1cfc7f84734", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-attr-syntax-validation.stderr"}, {"sha": "afcb896b43c2a52e426a5dda4223d48a2515236c", "filename": "src/test/ui/conditional-compilation/cfg-attr-unknown-attribute-macro-expansion.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-attr-unknown-attribute-macro-expansion.rs"}, {"sha": "0f51c7d68c642f2a81c8cdbf954973345906510f", "filename": "src/test/ui/conditional-compilation/cfg-attr-unknown-attribute-macro-expansion.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-attr-unknown-attribute-macro-expansion.stderr"}, {"sha": "5cf8135ca6bc6795d333c5c9abde6250e0933fc9", "filename": "src/test/ui/conditional-compilation/cfg-empty-codemap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-empty-codemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-empty-codemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-empty-codemap.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-empty-codemap.rs"}, {"sha": "bbccf2bcd0f81cbece38edec4204da7c6df335fe", "filename": "src/test/ui/conditional-compilation/cfg-in-crate-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-in-crate-1.rs"}, {"sha": "c6d42c732c9340ab40f817673b7f04b6716e4564", "filename": "src/test/ui/conditional-compilation/cfg-in-crate-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-in-crate-1.stderr"}, {"sha": "55eca7f45a5aec0a7814892316c3a1ada6d08ca3", "filename": "src/test/ui/conditional-compilation/cfg-non-opt-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-non-opt-expr.rs"}, {"sha": "1892cee113ecb93edcb646ccd7a08f68941eb1f5", "filename": "src/test/ui/conditional-compilation/cfg-non-opt-expr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-non-opt-expr.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg-non-opt-expr.stderr"}, {"sha": "7d799850a651ebacc3638ca79b55f8c994ec5273", "filename": "src/test/ui/conditional-compilation/cfg_attr_path.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg_attr_path.rs"}, {"sha": "67e59d054d5c15b766fb1dc3b38dfcdc8194f1e4", "filename": "src/test/ui/conditional-compilation/cfg_attr_path.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "previous_filename": "src/test/ui/cfg_attr_path.stderr"}, {"sha": "9515380bc285603e634e0c2dc45e513e826f10c0", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,5 @@\n+// gate-test-cfg_attr_multi\n+\n+#![cfg_attr(all(), warn(nonstandard_style), allow(unused_attributes))]\n+//~^ ERROR cfg_attr with zero or more than one attributes is experimental\n+fn main() {}"}, {"sha": "088e6df1a1ac181791bd3a9a9b3198c281797c55", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-1.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: cfg_attr with zero or more than one attributes is experimental (see issue #54881)\n+  --> $DIR/feature-gate-cfg-attr-multi-1.rs:3:1\n+   |\n+LL | #![cfg_attr(all(), warn(nonstandard_style), allow(unused_attributes))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_attr_multi)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "cf02432274b1e35ef651d067e2e215bc8bc8c4d8", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,3 @@\n+#![cfg_attr(all(),)]\n+//~^ ERROR cfg_attr with zero or more than one attributes is experimental\n+fn main() {}"}, {"sha": "a01876114dde8dce78e79a1a999a66229a21a392", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-2.stderr?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: cfg_attr with zero or more than one attributes is experimental (see issue #54881)\n+  --> $DIR/feature-gate-cfg-attr-multi-2.rs:1:1\n+   |\n+LL | #![cfg_attr(all(),)]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(cfg_attr_multi)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e4737926e7a22c85a31abda4157fb0790680c3fb", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-bootstrap-1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-1.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,7 @@\n+// Test that settingt the featute gate while using its functionality doesn't error.\n+\n+// compile-pass\n+\n+#![cfg_attr(all(), feature(cfg_attr_multi), crate_type=\"bin\")]\n+\n+fn main() {}"}, {"sha": "df740541f5543e2a3af92d41af71f8b8f3652f26", "filename": "src/test/ui/feature-gates/feature-gate-cfg-attr-multi-bootstrap-2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-attr-multi-bootstrap-2.rs?ref=8ebc6d6dbbfe1ccc9a72d003d13c3d267c91c742", "patch": "@@ -0,0 +1,9 @@\n+// Test that settingt the featute gate while using its functionality doesn't error.\n+// Specifically, if there's a cfg-attr *before* the feature gate.\n+\n+// compile-pass\n+\n+#![cfg_attr(all(),)]\n+#![cfg_attr(all(), feature(cfg_attr_multi), crate_type=\"bin\")]\n+\n+fn main() {}"}]}