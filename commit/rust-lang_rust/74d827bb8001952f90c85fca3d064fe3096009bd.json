{"sha": "74d827bb8001952f90c85fca3d064fe3096009bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDgyN2JiODAwMTk1MmY5MGM4NWZjYTNkMDY0ZmUzMDk2MDA5YmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:21:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T19:21:15Z"}, "message": "Rename MockDatabase -> TestDB\n\nActually working rename is sooo useful!", "tree": {"sha": "672dfa705dbdd06a167a645b5c5ebea9afe3a57e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672dfa705dbdd06a167a645b5c5ebea9afe3a57e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d827bb8001952f90c85fca3d064fe3096009bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d827bb8001952f90c85fca3d064fe3096009bd", "html_url": "https://github.com/rust-lang/rust/commit/74d827bb8001952f90c85fca3d064fe3096009bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d827bb8001952f90c85fca3d064fe3096009bd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7649a8ebbe900f43cc9b8789c2942cfbadab8f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7649a8ebbe900f43cc9b8789c2942cfbadab8f1c", "html_url": "https://github.com/rust-lang/rust/commit/7649a8ebbe900f43cc9b8789c2942cfbadab8f1c"}], "stats": {"total": 117, "additions": 57, "deletions": 60}, "files": [{"sha": "2500a5ab73ba6171d3ef7a0dc16c99fe9422ed9a", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=74d827bb8001952f90c85fca3d064fe3096009bd", "patch": "@@ -5,13 +5,13 @@\n \n mod generated;\n \n-use hir::mock::MockDatabase;\n+use hir::mock::TestDB;\n use ra_db::{fixture::WithFixture, FileRange};\n use test_utils::{assert_eq_text, extract_range_or_offset};\n \n fn check(assist_id: &str, before: &str, after: &str) {\n     let (selection, before) = extract_range_or_offset(before);\n-    let (db, file_id) = MockDatabase::with_single_file(&before);\n+    let (db, file_id) = TestDB::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n     let (_assist_id, action) = crate::assists(&db, frange)"}, {"sha": "85fb723951cde0e1ab992d3bfe772da9c3600072", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=74d827bb8001952f90c85fca3d064fe3096009bd", "patch": "@@ -146,20 +146,20 @@ mod assists {\n \n #[cfg(test)]\n mod helpers {\n-    use hir::mock::MockDatabase;\n+    use hir::mock::TestDB;\n     use ra_db::{fixture::WithFixture, FileRange};\n     use ra_syntax::TextRange;\n     use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n \n     use crate::{Assist, AssistCtx};\n \n     pub(crate) fn check_assist(\n-        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n         before: &str,\n         after: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = TestDB::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -182,12 +182,12 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_range(\n-        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n         before: &str,\n         after: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = TestDB::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -204,12 +204,12 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_target(\n-        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n         before: &str,\n         target: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = TestDB::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -224,12 +224,12 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_range_target(\n-        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n         before: &str,\n         target: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = TestDB::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -243,23 +243,23 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_not_applicable(\n-        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n         before: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = TestDB::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n     }\n \n     pub(crate) fn check_assist_range_not_applicable(\n-        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n         before: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = TestDB::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n@@ -268,7 +268,7 @@ mod helpers {\n \n #[cfg(test)]\n mod tests {\n-    use hir::mock::MockDatabase;\n+    use hir::mock::TestDB;\n     use ra_db::{fixture::WithFixture, FileRange};\n     use ra_syntax::TextRange;\n     use test_utils::{extract_offset, extract_range};\n@@ -277,7 +277,7 @@ mod tests {\n     fn assist_order_field_struct() {\n         let before = \"struct Foo { <|>bar: u32 }\";\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = TestDB::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assists = super::assists(&db, frange);\n@@ -298,7 +298,7 @@ mod tests {\n             }\n         }\";\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = MockDatabase::with_single_file(&before);\n+        let (db, file_id) = TestDB::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();"}, {"sha": "c14c2ab663087357259666e060a31fdb74b79c7a", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=74d827bb8001952f90c85fca3d064fe3096009bd", "patch": "@@ -178,7 +178,7 @@ mod tests {\n     use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n     use test_utils::{assert_eq_text, extract_offset};\n \n-    use crate::{mock::MockDatabase, source_binder::SourceAnalyzer};\n+    use crate::{source_binder::SourceAnalyzer, test_db::TestDB};\n \n     fn do_check(code: &str, expected: &[&str]) {\n         let (off, code) = extract_offset(code);\n@@ -191,7 +191,7 @@ mod tests {\n             buf\n         };\n \n-        let (db, file_id) = MockDatabase::with_single_file(&code);\n+        let (db, file_id) = TestDB::with_single_file(&code);\n         let file = db.parse(file_id).ok().unwrap();\n         let marker: ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let analyzer = SourceAnalyzer::new(&db, file_id, marker.syntax(), None);\n@@ -288,7 +288,7 @@ mod tests {\n     fn do_check_local_name(code: &str, expected_offset: u32) {\n         let (off, code) = extract_offset(code);\n \n-        let (db, file_id) = MockDatabase::with_single_file(&code);\n+        let (db, file_id) = TestDB::with_single_file(&code);\n         let file = db.parse(file_id).ok().unwrap();\n         let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into())\n             .expect(\"failed to find a name at the target offset\");"}, {"sha": "da6aa2ed89e5295d4f1ed4dd63f44d9f36a9bfe9", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=74d827bb8001952f90c85fca3d064fe3096009bd", "patch": "@@ -29,8 +29,6 @@ macro_rules! impl_froms {\n pub mod debug;\n \n pub mod db;\n-#[macro_use]\n-pub mod mock;\n pub mod source_binder;\n \n mod ids;\n@@ -51,6 +49,8 @@ mod code_model;\n \n pub mod from_source;\n \n+#[cfg(test)]\n+mod test_db;\n #[cfg(test)]\n mod marks;\n "}, {"sha": "047a27aaf697db3ecf4f9ce59755e5adfed05e58", "filename": "crates/ra_hir/src/test_db.rs", "status": "renamed", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftest_db.rs?ref=74d827bb8001952f90c85fca3d064fe3096009bd", "patch": "@@ -12,8 +12,6 @@ use ra_db::{\n \n use crate::{db, debug::HirDebugHelper};\n \n-pub const WORKSPACE: SourceRootId = SourceRootId(0);\n-\n #[salsa::database(\n     ra_db::SourceDatabaseExtStorage,\n     ra_db::SourceDatabaseStorage,\n@@ -24,14 +22,14 @@ pub const WORKSPACE: SourceRootId = SourceRootId(0);\n     db::HirDatabaseStorage\n )]\n #[derive(Debug)]\n-pub struct MockDatabase {\n-    events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,\n-    runtime: salsa::Runtime<MockDatabase>,\n+pub struct TestDB {\n+    events: Mutex<Option<Vec<salsa::Event<TestDB>>>>,\n+    runtime: salsa::Runtime<TestDB>,\n }\n \n-impl panic::RefUnwindSafe for MockDatabase {}\n+impl panic::RefUnwindSafe for TestDB {}\n \n-impl FileLoader for MockDatabase {\n+impl FileLoader for TestDB {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n@@ -48,7 +46,7 @@ impl FileLoader for MockDatabase {\n }\n \n // FIXME: improve `WithFixture` to bring useful hir debugging back\n-impl HirDebugHelper for MockDatabase {\n+impl HirDebugHelper for TestDB {\n     fn crate_name(&self, _krate: CrateId) -> Option<String> {\n         None\n     }\n@@ -58,7 +56,7 @@ impl HirDebugHelper for MockDatabase {\n     }\n }\n \n-impl MockDatabase {\n+impl TestDB {\n     pub fn diagnostics(&self) -> String {\n         let mut buf = String::new();\n         let crate_graph = self.crate_graph();\n@@ -79,39 +77,38 @@ impl MockDatabase {\n     }\n }\n \n-impl salsa::Database for MockDatabase {\n-    fn salsa_runtime(&self) -> &salsa::Runtime<MockDatabase> {\n+impl salsa::Database for TestDB {\n+    fn salsa_runtime(&self) -> &salsa::Runtime<TestDB> {\n         &self.runtime\n     }\n \n-    fn salsa_event(&self, event: impl Fn() -> salsa::Event<MockDatabase>) {\n+    fn salsa_event(&self, event: impl Fn() -> salsa::Event<TestDB>) {\n         let mut events = self.events.lock();\n         if let Some(events) = &mut *events {\n             events.push(event());\n         }\n     }\n }\n \n-impl Default for MockDatabase {\n-    fn default() -> MockDatabase {\n-        let mut db =\n-            MockDatabase { events: Default::default(), runtime: salsa::Runtime::default() };\n+impl Default for TestDB {\n+    fn default() -> TestDB {\n+        let mut db = TestDB { events: Default::default(), runtime: salsa::Runtime::default() };\n         db.set_crate_graph(Default::default());\n         db\n     }\n }\n \n-impl salsa::ParallelDatabase for MockDatabase {\n-    fn snapshot(&self) -> salsa::Snapshot<MockDatabase> {\n-        salsa::Snapshot::new(MockDatabase {\n+impl salsa::ParallelDatabase for TestDB {\n+    fn snapshot(&self) -> salsa::Snapshot<TestDB> {\n+        salsa::Snapshot::new(TestDB {\n             events: Default::default(),\n             runtime: self.runtime.snapshot(self),\n         })\n     }\n }\n \n-impl MockDatabase {\n-    pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<MockDatabase>> {\n+impl TestDB {\n+    pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<TestDB>> {\n         *self.events.lock() = Some(Vec::new());\n         f();\n         self.events.lock().take().unwrap()", "previous_filename": "crates/ra_hir/src/mock.rs"}, {"sha": "e56b9356e9bae590cd20e143d6af1ad8102c19dc", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d827bb8001952f90c85fca3d064fe3096009bd/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=74d827bb8001952f90c85fca3d064fe3096009bd", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n use test_utils::covers;\n \n use crate::{\n-    expr::BodySourceMap, mock::MockDatabase, ty::display::HirDisplay, ty::InferenceResult,\n+    expr::BodySourceMap, test_db::TestDB, ty::display::HirDisplay, ty::InferenceResult,\n     SourceAnalyzer,\n };\n \n@@ -24,7 +24,7 @@ mod coercion;\n \n #[test]\n fn cfg_impl_block() {\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs crate:main deps:foo cfg:test\n use foo::S as T;\n@@ -64,7 +64,7 @@ impl S {\n \n #[test]\n fn infer_await() {\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs crate:main deps:std\n \n@@ -95,7 +95,7 @@ mod future {\n \n #[test]\n fn infer_box() {\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs crate:main deps:std\n \n@@ -122,7 +122,7 @@ mod boxed {\n \n #[test]\n fn infer_adt_self() {\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs\n enum Nat { Succ(Self), Demo(Nat), Zero }\n@@ -141,7 +141,7 @@ fn test() {\n \n #[test]\n fn infer_try() {\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs crate:main deps:std\n \n@@ -181,7 +181,7 @@ mod result {\n \n #[test]\n fn infer_for_loop() {\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs crate:main deps:std\n \n@@ -223,7 +223,7 @@ mod collections {\n #[test]\n fn infer_while_let() {\n     covers!(infer_while_let);\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs\n enum Option<T> { Some(T), None }\n@@ -2484,7 +2484,7 @@ pub fn main_loop() {\n \n #[test]\n fn cross_crate_associated_method_call() {\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs crate:main deps:other_crate\n fn test() {\n@@ -3378,7 +3378,7 @@ fn test() { S.foo()<|>; }\n \n #[test]\n fn infer_macro_with_dollar_crate_is_correct_in_expr() {\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs crate:main deps:foo\n fn test() {\n@@ -3482,7 +3482,7 @@ fn test() { (&S).foo()<|>; }\n \n #[test]\n fn method_resolution_trait_from_prelude() {\n-    let (db, pos) = MockDatabase::with_position(\n+    let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs crate:main deps:other_crate\n struct S;\n@@ -4651,7 +4651,7 @@ fn test<T, U>() where T: Trait<U::Item>, U: Trait<T::Item> {\n     assert_eq!(t, \"{unknown}\");\n }\n \n-fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n+fn type_at_pos(db: &TestDB, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();\n     let analyzer = SourceAnalyzer::new(db, pos.file_id, expr.syntax(), Some(pos.offset));\n@@ -4660,12 +4660,12 @@ fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n }\n \n fn type_at(content: &str) -> String {\n-    let (db, file_pos) = MockDatabase::with_position(content);\n+    let (db, file_pos) = TestDB::with_position(content);\n     type_at_pos(&db, file_pos)\n }\n \n fn infer(content: &str) -> String {\n-    let (db, file_id) = MockDatabase::with_single_file(content);\n+    let (db, file_id) = TestDB::with_single_file(content);\n     let source_file = db.parse(file_id).ok().unwrap();\n \n     let mut acc = String::new();\n@@ -4748,7 +4748,7 @@ fn ellipsize(mut text: String, max_len: usize) -> String {\n \n #[test]\n fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (mut db, pos) = TestDB::with_position(\n         \"\n         //- /lib.rs\n         fn foo() -> i32 {\n@@ -4788,7 +4788,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n \n #[test]\n fn no_such_field_diagnostics() {\n-    let diagnostics = MockDatabase::with_files(\n+    let diagnostics = TestDB::with_files(\n         r\"\n         //- /lib.rs\n         struct S { foo: i32, bar: () }"}]}