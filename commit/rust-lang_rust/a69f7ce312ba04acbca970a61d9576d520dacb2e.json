{"sha": "a69f7ce312ba04acbca970a61d9576d520dacb2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OWY3Y2UzMTJiYTA0YWNiY2E5NzBhNjFkOTU3NmQ1MjBkYWNiMmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-16T15:40:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-16T15:40:06Z"}, "message": "Merge #8053\n\n8053: Remove ShortLabel r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "bc80aa2f3aa4dffb8421889afa0bcbb48e04f1aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc80aa2f3aa4dffb8421889afa0bcbb48e04f1aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69f7ce312ba04acbca970a61d9576d520dacb2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUNFWCRBK7hj4Ov3rIwAAdHIIAKP+UQY/emKv+45Ujzxk2BdQ\nh0lPAARdc103eSflD+Kxm1NrnVsjB2XrXHU5Chfu6mhJNa7U4rIbWBr2y06f+XCn\nDG8l3wioOPmWWnpI9+uhGuflRAR2uhHDgHhhn5Or96AkVnY5qJ6CT0/WuELt0ce6\n5qQD5NXgPDQIHiAxEFWbeBZcI9w2cXnNc//bEsedDa82F2lDM4+pLUa8USinfnA1\nI5pNV02PEeZjYRX5mbxTU8d72b9ApkTJQB1QyHPpu3QDiCWW6AZQr9WriYN7f6gp\nCvXJIgc5Q3rXl5nS3/n3dd0Nrb74VCWwXGYOnZ1wGsg8cGhcxAB2q2YsB3jRvH4=\n=lP0w\n-----END PGP SIGNATURE-----\n", "payload": "tree bc80aa2f3aa4dffb8421889afa0bcbb48e04f1aa\nparent 979e788957ced1957ee9ac1da70fb97abf9fe2b1\nparent 4628d94e749f05a12ca51548a2c9afa2cc44ea84\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615909206 +0000\ncommitter GitHub <noreply@github.com> 1615909206 +0000\n\nMerge #8053\n\n8053: Remove ShortLabel r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69f7ce312ba04acbca970a61d9576d520dacb2e", "html_url": "https://github.com/rust-lang/rust/commit/a69f7ce312ba04acbca970a61d9576d520dacb2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69f7ce312ba04acbca970a61d9576d520dacb2e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "979e788957ced1957ee9ac1da70fb97abf9fe2b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/979e788957ced1957ee9ac1da70fb97abf9fe2b1", "html_url": "https://github.com/rust-lang/rust/commit/979e788957ced1957ee9ac1da70fb97abf9fe2b1"}, {"sha": "4628d94e749f05a12ca51548a2c9afa2cc44ea84", "url": "https://api.github.com/repos/rust-lang/rust/commits/4628d94e749f05a12ca51548a2c9afa2cc44ea84", "html_url": "https://github.com/rust-lang/rust/commit/4628d94e749f05a12ca51548a2c9afa2cc44ea84"}], "stats": {"total": 161, "additions": 16, "deletions": 145}, "files": [{"sha": "71e97d6b48ed523bb73db90a431a00933dd5e339", "filename": "crates/ide/src/display.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a69f7ce312ba04acbca970a61d9576d520dacb2e/crates%2Fide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69f7ce312ba04acbca970a61d9576d520dacb2e/crates%2Fide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay.rs?ref=a69f7ce312ba04acbca970a61d9576d520dacb2e", "patch": "@@ -2,8 +2,7 @@\n //! into types that may be used to render in a UI.\n \n pub(crate) mod navigation_target;\n-mod short_label;\n \n pub(crate) use navigation_target::{ToNav, TryToNav};\n \n-pub(crate) use syntax::display::{function_declaration, macro_label};\n+pub(crate) use syntax::display::macro_label;"}, {"sha": "c086de163f8791cceaeba86c53f7eeb9d301b639", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a69f7ce312ba04acbca970a61d9576d520dacb2e/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69f7ce312ba04acbca970a61d9576d520dacb2e/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=a69f7ce312ba04acbca970a61d9576d520dacb2e", "patch": "@@ -5,9 +5,10 @@ use std::fmt;\n use either::Either;\n use hir::{\n     AssocItem, Documentation, FieldSource, HasAttrs, HasSource, HirDisplay, InFile, ModuleSource,\n+    Semantics,\n };\n use ide_db::{\n-    base_db::{FileId, FileRange, SourceDatabase},\n+    base_db::{FileId, FileRange},\n     symbol_index::FileSymbolKind,\n     SymbolKind,\n };\n@@ -19,8 +20,6 @@ use syntax::{\n \n use crate::FileSymbol;\n \n-use super::short_label::ShortLabel;\n-\n /// `NavigationTarget` represents and element in the editor's UI which you can\n /// click on to navigate to a particular piece of code.\n ///\n@@ -502,21 +501,22 @@ impl TryToNav for hir::ConstParam {\n ///\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n-    let parse = db.parse(symbol.file_id);\n-    let node = symbol.ptr.to_node(parse.tree().syntax());\n+    let sema = Semantics::new(db);\n+    let parse = sema.parse(symbol.file_id);\n+    let node = symbol.ptr.to_node(parse.syntax());\n \n     match_ast! {\n         match node {\n-            ast::Fn(it) => it.short_label(),\n-            ast::Struct(it) => it.short_label(),\n-            ast::Enum(it) => it.short_label(),\n-            ast::Trait(it) => it.short_label(),\n-            ast::Module(it) => it.short_label(),\n-            ast::TypeAlias(it) => it.short_label(),\n-            ast::Const(it) => it.short_label(),\n-            ast::Static(it) => it.short_label(),\n-            ast::RecordField(it) => it.short_label(),\n-            ast::Variant(it) => it.short_label(),\n+            ast::Fn(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n+            ast::Struct(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n+            ast::Enum(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n+            ast::Trait(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n+            ast::Module(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n+            ast::TypeAlias(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n+            ast::Const(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n+            ast::Static(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n+            ast::RecordField(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n+            ast::Variant(it) => sema.to_def(&it).map(|it| it.display(db).to_string()),\n             _ => None,\n         }\n     }"}, {"sha": "2df9266b41cbacefddae28c128813ef2b6bdd44b", "filename": "crates/ide/src/display/short_label.rs", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979e788957ced1957ee9ac1da70fb97abf9fe2b1/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=979e788957ced1957ee9ac1da70fb97abf9fe2b1", "patch": "@@ -1,128 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use stdx::format_to;\n-use syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n-\n-pub(crate) trait ShortLabel {\n-    fn short_label(&self) -> Option<String>;\n-}\n-\n-impl ShortLabel for ast::Fn {\n-    fn short_label(&self) -> Option<String> {\n-        Some(crate::display::function_declaration(self))\n-    }\n-}\n-\n-impl ShortLabel for ast::Struct {\n-    fn short_label(&self) -> Option<String> {\n-        short_label_from_node(self, \"struct \")\n-    }\n-}\n-\n-impl ShortLabel for ast::Union {\n-    fn short_label(&self) -> Option<String> {\n-        short_label_from_node(self, \"union \")\n-    }\n-}\n-\n-impl ShortLabel for ast::Enum {\n-    fn short_label(&self) -> Option<String> {\n-        short_label_from_node(self, \"enum \")\n-    }\n-}\n-\n-impl ShortLabel for ast::Trait {\n-    fn short_label(&self) -> Option<String> {\n-        if self.unsafe_token().is_some() {\n-            short_label_from_node(self, \"unsafe trait \")\n-        } else {\n-            short_label_from_node(self, \"trait \")\n-        }\n-    }\n-}\n-\n-impl ShortLabel for ast::Module {\n-    fn short_label(&self) -> Option<String> {\n-        short_label_from_node(self, \"mod \")\n-    }\n-}\n-\n-impl ShortLabel for ast::SourceFile {\n-    fn short_label(&self) -> Option<String> {\n-        None\n-    }\n-}\n-\n-impl ShortLabel for ast::BlockExpr {\n-    fn short_label(&self) -> Option<String> {\n-        None\n-    }\n-}\n-\n-impl ShortLabel for ast::TypeAlias {\n-    fn short_label(&self) -> Option<String> {\n-        let mut buf = short_label_from_node(self, \"type \")?;\n-        if let Some(type_ref) = self.ty() {\n-            format_to!(buf, \" = {}\", type_ref.syntax());\n-        }\n-        Some(buf)\n-    }\n-}\n-\n-impl ShortLabel for ast::Const {\n-    fn short_label(&self) -> Option<String> {\n-        short_label_from_ty(self, self.ty(), \"const \")\n-    }\n-}\n-\n-impl ShortLabel for ast::Static {\n-    fn short_label(&self) -> Option<String> {\n-        short_label_from_ty(self, self.ty(), \"static \")\n-    }\n-}\n-\n-impl ShortLabel for ast::RecordField {\n-    fn short_label(&self) -> Option<String> {\n-        short_label_from_ty(self, self.ty(), \"\")\n-    }\n-}\n-\n-impl ShortLabel for ast::Variant {\n-    fn short_label(&self) -> Option<String> {\n-        Some(self.name()?.text().to_string())\n-    }\n-}\n-\n-impl ShortLabel for ast::ConstParam {\n-    fn short_label(&self) -> Option<String> {\n-        let mut buf = \"const \".to_owned();\n-        buf.push_str(self.name()?.text());\n-        if let Some(type_ref) = self.ty() {\n-            format_to!(buf, \": {}\", type_ref.syntax());\n-        }\n-        Some(buf)\n-    }\n-}\n-\n-fn short_label_from_ty<T>(node: &T, ty: Option<ast::Type>, prefix: &str) -> Option<String>\n-where\n-    T: NameOwner + VisibilityOwner,\n-{\n-    let mut buf = short_label_from_node(node, prefix)?;\n-\n-    if let Some(type_ref) = ty {\n-        format_to!(buf, \": {}\", type_ref.syntax());\n-    }\n-\n-    Some(buf)\n-}\n-\n-fn short_label_from_node<T>(node: &T, label: &str) -> Option<String>\n-where\n-    T: NameOwner + VisibilityOwner,\n-{\n-    let mut buf = node.visibility().map(|v| format!(\"{} \", v.syntax())).unwrap_or_default();\n-    buf.push_str(label);\n-    buf.push_str(node.name()?.text());\n-    Some(buf)\n-}"}]}