{"sha": "4c08451fc43f4185d122efa91b996e137365f49c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMDg0NTFmYzQzZjQxODVkMTIyZWZhOTFiOTk2ZTEzNzM2NWY0OWM=", "commit": {"author": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2020-06-27T11:26:30Z"}, "committer": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2020-07-02T07:32:09Z"}, "message": "Add codegen tests", "tree": {"sha": "60d8cca1515f34f6029fa348f8473a3c3a9867d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d8cca1515f34f6029fa348f8473a3c3a9867d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c08451fc43f4185d122efa91b996e137365f49c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c08451fc43f4185d122efa91b996e137365f49c", "html_url": "https://github.com/rust-lang/rust/commit/4c08451fc43f4185d122efa91b996e137365f49c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c08451fc43f4185d122efa91b996e137365f49c/comments", "author": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2490299fc2029f9b43be51f80003ebcf804f7ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2490299fc2029f9b43be51f80003ebcf804f7ac", "html_url": "https://github.com/rust-lang/rust/commit/b2490299fc2029f9b43be51f80003ebcf804f7ac"}], "stats": {"total": 331, "additions": 331, "deletions": 0}, "files": [{"sha": "bd6073d8c204a7eb0b099a8ae792f5478f0eb746", "filename": "src/test/codegen/wasm_casts_nontrapping.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/4c08451fc43f4185d122efa91b996e137365f49c/src%2Ftest%2Fcodegen%2Fwasm_casts_nontrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c08451fc43f4185d122efa91b996e137365f49c/src%2Ftest%2Fcodegen%2Fwasm_casts_nontrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fwasm_casts_nontrapping.rs?ref=4c08451fc43f4185d122efa91b996e137365f49c", "patch": "@@ -0,0 +1,162 @@\n+// only-wasm32\n+// compile-flags: -C target-feature=+nontrapping-fptoint\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @cast_f64_i64\n+#[no_mangle]\n+pub fn cast_f64_i64(a: f64) -> i64 {\n+    // CHECK: tail call i64 @llvm.wasm.trunc.saturate.signed.i64.f64(double {{.*}})\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f64_i32\n+#[no_mangle]\n+pub fn cast_f64_i32(a: f64) -> i32 {\n+    // CHECK: tail call i32 @llvm.wasm.trunc.saturate.signed.i32.f64(double {{.*}})\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_i64\n+#[no_mangle]\n+pub fn cast_f32_i64(a: f32) -> i64 {\n+    // CHECK: tail call i64 @llvm.wasm.trunc.saturate.signed.i64.f32(float {{.*}})\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_i32\n+#[no_mangle]\n+pub fn cast_f32_i32(a: f32) -> i32 {\n+    // CHECK: tail call i32 @llvm.wasm.trunc.saturate.signed.i32.f32(float {{.*}})\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a as _\n+}\n+\n+\n+// CHECK-LABEL: @cast_f64_u64\n+#[no_mangle]\n+pub fn cast_f64_u64(a: f64) -> u64 {\n+    // CHECK: tail call i64 @llvm.wasm.trunc.saturate.unsigned.i64.f64(double {{.*}})\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f64_u32\n+#[no_mangle]\n+pub fn cast_f64_u32(a: f64) -> u32 {\n+    // CHECK: tail call i32 @llvm.wasm.trunc.saturate.unsigned.i32.f64(double {{.*}})\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_u64\n+#[no_mangle]\n+pub fn cast_f32_u64(a: f32) -> u64 {\n+    // CHECK: tail call i64 @llvm.wasm.trunc.saturate.unsigned.i64.f32(float {{.*}})\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_u32\n+#[no_mangle]\n+pub fn cast_f32_u32(a: f32) -> u32 {\n+    // CHECK: tail call i32 @llvm.wasm.trunc.saturate.unsigned.i32.f32(float {{.*}})\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_u8\n+#[no_mangle]\n+pub fn cast_f32_u8(a: f32) -> u8 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i8\n+    // CHECK-NEXT: select i1 {{.*}}, i8 {{.*}}, i8 {{.*}}\n+    // CHECK-NEXT: ret i8 {{.*}}\n+    a as _\n+}\n+\n+\n+\n+// CHECK-LABEL: @cast_unchecked_f64_i64\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f64_i64(a: f64) -> i64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi double {{.*}} to i64\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f64_i32\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f64_i32(a: f64) -> i32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi double {{.*}} to i32\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_i64\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_i64(a: f32) -> i64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi float {{.*}} to i64\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_i32\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_i32(a: f32) -> i32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi float {{.*}} to i32\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+\n+// CHECK-LABEL: @cast_unchecked_f64_u64\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f64_u64(a: f64) -> u64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui double {{.*}} to i64\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f64_u32\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f64_u32(a: f64) -> u32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui double {{.*}} to i32\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_u64\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_u64(a: f32) -> u64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i64\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_u32\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_u32(a: f32) -> u32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i32\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_u8\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_u8(a: f32) -> u8 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i8\n+    // CHECK-NEXT: ret i8 {{.*}}\n+    a.to_int_unchecked()\n+}"}, {"sha": "45b905190493a12151704411e8b8955842f16d1b", "filename": "src/test/codegen/wasm_casts_trapping.rs", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/4c08451fc43f4185d122efa91b996e137365f49c/src%2Ftest%2Fcodegen%2Fwasm_casts_trapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c08451fc43f4185d122efa91b996e137365f49c/src%2Ftest%2Fcodegen%2Fwasm_casts_trapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fwasm_casts_trapping.rs?ref=4c08451fc43f4185d122efa91b996e137365f49c", "patch": "@@ -0,0 +1,169 @@\n+// only-wasm32\n+// compile-flags: -C target-feature=-nontrapping-fptoint\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @cast_f64_i64\n+#[no_mangle]\n+pub fn cast_f64_i64(a: f64) -> i64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi double {{.*}} to i64\n+    // CHECK-NEXT: select i1 {{.*}}, i64 {{.*}}, i64 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f64_i32\n+#[no_mangle]\n+pub fn cast_f64_i32(a: f64) -> i32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi double {{.*}} to i32\n+    // CHECK-NEXT: select i1 {{.*}}, i32 {{.*}}, i32 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_i64\n+#[no_mangle]\n+pub fn cast_f32_i64(a: f32) -> i64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi float {{.*}} to i64\n+    // CHECK-NEXT: select i1 {{.*}}, i64 {{.*}}, i64 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_i32\n+#[no_mangle]\n+pub fn cast_f32_i32(a: f32) -> i32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi float {{.*}} to i32\n+    // CHECK-NEXT: select i1 {{.*}}, i32 {{.*}}, i32 {{.*}}\n+    a as _\n+}\n+\n+\n+// CHECK-LABEL: @cast_f64_u64\n+#[no_mangle]\n+pub fn cast_f64_u64(a: f64) -> u64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui double {{.*}} to i64\n+    // CHECK-NEXT: select i1 {{.*}}, i64 {{.*}}, i64 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f64_u32\n+#[no_mangle]\n+pub fn cast_f64_u32(a: f64) -> u32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui double {{.*}} to i32\n+    // CHECK-NEXT: select i1 {{.*}}, i32 {{.*}}, i32 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_u64\n+#[no_mangle]\n+pub fn cast_f32_u64(a: f32) -> u64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i64\n+    // CHECK-NEXT: select i1 {{.*}}, i64 {{.*}}, i64 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_u32\n+#[no_mangle]\n+pub fn cast_f32_u32(a: f32) -> u32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i32\n+    // CHECK-NEXT: select i1 {{.*}}, i32 {{.*}}, i32 {{.*}}\n+    a as _\n+}\n+\n+// CHECK-LABEL: @cast_f32_u8\n+#[no_mangle]\n+pub fn cast_f32_u8(a: f32) -> u8 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i8\n+    // CHECK-NEXT: select i1 {{.*}}, i8 {{.*}}, i8 {{.*}}\n+    a as _\n+}\n+\n+\n+\n+// CHECK-LABEL: @cast_unchecked_f64_i64\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f64_i64(a: f64) -> i64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi double {{.*}} to i64\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f64_i32\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f64_i32(a: f64) -> i32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi double {{.*}} to i32\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_i64\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_i64(a: f32) -> i64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi float {{.*}} to i64\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_i32\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_i32(a: f32) -> i32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptosi float {{.*}} to i32\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+\n+// CHECK-LABEL: @cast_unchecked_f64_u64\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f64_u64(a: f64) -> u64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui double {{.*}} to i64\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f64_u32\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f64_u32(a: f64) -> u32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui double {{.*}} to i32\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_u64\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_u64(a: f32) -> u64 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i64\n+    // CHECK-NEXT: ret i64 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_u32\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_u32(a: f32) -> u32 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i32\n+    // CHECK-NEXT: ret i32 {{.*}}\n+    a.to_int_unchecked()\n+}\n+\n+// CHECK-LABEL: @cast_unchecked_f32_u8\n+#[no_mangle]\n+pub unsafe fn cast_unchecked_f32_u8(a: f32) -> u8 {\n+    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: fptoui float {{.*}} to i8\n+    // CHECK-NEXT: ret i8 {{.*}}\n+    a.to_int_unchecked()\n+}"}]}