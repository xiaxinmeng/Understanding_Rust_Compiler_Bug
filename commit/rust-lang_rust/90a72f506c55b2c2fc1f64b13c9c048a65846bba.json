{"sha": "90a72f506c55b2c2fc1f64b13c9c048a65846bba", "node_id": "C_kwDOAAsO6NoAKDkwYTcyZjUwNmM1NWIyYzJmYzFmNjRiMTNjOWMwNDhhNjU4NDZiYmE", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-10-01T14:57:57Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Handle args taken by ref also for `MethodCall`", "tree": {"sha": "7655e1b691591e1332fefc9a92e9e8638f97f92f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7655e1b691591e1332fefc9a92e9e8638f97f92f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a72f506c55b2c2fc1f64b13c9c048a65846bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a72f506c55b2c2fc1f64b13c9c048a65846bba", "html_url": "https://github.com/rust-lang/rust/commit/90a72f506c55b2c2fc1f64b13c9c048a65846bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a72f506c55b2c2fc1f64b13c9c048a65846bba/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a55407cc37ddb1bf1d3d95e52db7b6402259966", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a55407cc37ddb1bf1d3d95e52db7b6402259966", "html_url": "https://github.com/rust-lang/rust/commit/7a55407cc37ddb1bf1d3d95e52db7b6402259966"}], "stats": {"total": 111, "additions": 85, "deletions": 26}, "files": [{"sha": "4f8517b946a5c8b43b180c1386cbfcb0eb586c2c", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/90a72f506c55b2c2fc1f64b13c9c048a65846bba/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a72f506c55b2c2fc1f64b13c9c048a65846bba/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=90a72f506c55b2c2fc1f64b13c9c048a65846bba", "patch": "@@ -227,23 +227,23 @@ impl DerefDelegate<'_, 'tcx> {\n     }\n \n     fn func_takes_arg_by_ref(&self, parent_expr: &'tcx hir::Expr<'_>, cmt_hir_id: HirId) -> bool {\n-        if_chain! {\n-            if let ExprKind::Call(func, call_args) = parent_expr.kind;\n-            let typ = self.cx.typeck_results().expr_ty(func);\n-            if let ty::FnDef(..) = typ.kind();\n-\n-            then {\n-                let mut takes_by_ref = false;\n-                for (arg, ty) in iter::zip(call_args, typ.fn_sig(self.cx.tcx).skip_binder().inputs()) {\n-                    if arg.hir_id == cmt_hir_id {\n-                        takes_by_ref = matches!(ty.kind(), ty::Ref(_, inner, _) if inner.is_ref());\n-                    }\n+        let (call_args, inputs) = match parent_expr.kind {\n+            ExprKind::MethodCall(_, _, call_args, _) => {\n+                if let Some(method_did) = self.cx.typeck_results().type_dependent_def_id(parent_expr.hir_id) {\n+                    (call_args, self.cx.tcx.fn_sig(method_did).skip_binder().inputs())\n+                } else {\n+                    return false;\n                 }\n-                takes_by_ref\n-            } else {\n-                false\n-            }\n-        }\n+            },\n+            ExprKind::Call(func, call_args) => {\n+                let typ = self.cx.typeck_results().expr_ty(func);\n+                (call_args, typ.fn_sig(self.cx.tcx).skip_binder().inputs())\n+            },\n+            _ => return false,\n+        };\n+\n+        iter::zip(call_args, inputs)\n+            .any(|(arg, ty)| arg.hir_id == cmt_hir_id && matches!(ty.kind(), ty::Ref(_, inner, _) if inner.is_ref()))\n     }\n }\n \n@@ -271,10 +271,6 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         let arg_ty_kind = self.cx.typeck_results().expr_ty(expr).kind();\n \n                         if matches!(arg_ty_kind, ty::Ref(_, _, Mutability::Not)) {\n-                            let start_span = Span::new(self.next_pos, span.lo(), span.ctxt());\n-                            let start_snip =\n-                                snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n-\n                             // suggest ampersand if call function is taking args by ref\n                             let takes_arg_by_ref = self.func_takes_arg_by_ref(parent_expr, cmt.hir_id);\n \n@@ -294,14 +290,12 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     }\n                 }\n \n-                // handle item projections by removing one explicit deref\n-                // i.e.: suggest `*x` instead of `**x`\n                 let mut replacement_str = ident_str;\n-\n                 let mut projections_handled = false;\n                 cmt.place.projections.iter().enumerate().for_each(|(i, proj)| {\n                     match proj.kind {\n                         // Field projection like `|v| v.foo`\n+                        // no adjustment needed here, as field projections are handled by the compiler\n                         ProjectionKind::Field(idx, variant) => match cmt.place.ty_before_projection(i).kind() {\n                             ty::Adt(def, ..) => {\n                                 replacement_str = format!(\n@@ -342,7 +336,8 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     }\n                 });\n \n-                // handle `ProjectionKind::Deref` if no special case detected\n+                // handle `ProjectionKind::Deref` by removing one explicit deref\n+                // if no special case was detected (i.e.: suggest `*x` instead of `**x`)\n                 if !projections_handled {\n                     let last_deref = cmt\n                         .place"}, {"sha": "0d1ed343c0c003e45b2eddc0be2c5f1239b97000", "filename": "tests/ui/search_is_some_fixable_none.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.fixed?ref=90a72f506c55b2c2fc1f64b13c9c048a65846bba", "patch": "@@ -161,4 +161,17 @@ mod issue7392 {\n         let vfoo = vec![&&[0, 1, 2, 3]];\n         let _ = !vfoo.iter().any(|x| (**x)[0] == 9);\n     }\n+\n+    fn method_call_by_ref() {\n+        struct Foo {\n+            bar: u32,\n+        }\n+        impl Foo {\n+            pub fn by_ref(&self, x: &u32) -> bool {\n+                *x == self.bar\n+            }\n+        }\n+        let vfoo = vec![Foo { bar: 1 }];\n+        let _ = !vfoo.iter().any(|v| v.by_ref(&v.bar));\n+    }\n }"}, {"sha": "2c638d929cb471ccde5250c9c491ceede940bd3b", "filename": "tests/ui/search_is_some_fixable_none.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.rs?ref=90a72f506c55b2c2fc1f64b13c9c048a65846bba", "patch": "@@ -167,4 +167,17 @@ mod issue7392 {\n         let vfoo = vec![&&[0, 1, 2, 3]];\n         let _ = vfoo.iter().find(|x| (**x)[0] == 9).is_none();\n     }\n+\n+    fn method_call_by_ref() {\n+        struct Foo {\n+            bar: u32,\n+        }\n+        impl Foo {\n+            pub fn by_ref(&self, x: &u32) -> bool {\n+                *x == self.bar\n+            }\n+        }\n+        let vfoo = vec![Foo { bar: 1 }];\n+        let _ = vfoo.iter().find(|v| v.by_ref(&v.bar)).is_none();\n+    }\n }"}, {"sha": "0c34067c1394768bc318ae81c5df13f7033086db", "filename": "tests/ui/search_is_some_fixable_none.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.stderr?ref=90a72f506c55b2c2fc1f64b13c9c048a65846bba", "patch": "@@ -221,5 +221,11 @@ error: called `is_none()` after searching an `Iterator` with `find`\n LL |         let _ = vfoo.iter().find(|x| (**x)[0] == 9).is_none();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!vfoo.iter().any(|x| (**x)[0] == 9)`\n \n-error: aborting due to 33 previous errors\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:181:17\n+   |\n+LL |         let _ = vfoo.iter().find(|v| v.by_ref(&v.bar)).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!vfoo.iter().any(|v| v.by_ref(&v.bar))`\n+\n+error: aborting due to 34 previous errors\n "}, {"sha": "43471e354939d8332e5f55cd37ef99c031fa4063", "filename": "tests/ui/search_is_some_fixable_some.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.fixed?ref=90a72f506c55b2c2fc1f64b13c9c048a65846bba", "patch": "@@ -163,4 +163,17 @@ mod issue7392 {\n         let vfoo = vec![&&[0, 1, 2, 3]];\n         let _ = vfoo.iter().any(|x| (**x)[0] == 9);\n     }\n+\n+    fn method_call_by_ref() {\n+        struct Foo {\n+            bar: u32,\n+        }\n+        impl Foo {\n+            pub fn by_ref(&self, x: &u32) -> bool {\n+                *x == self.bar\n+            }\n+        }\n+        let vfoo = vec![Foo { bar: 1 }];\n+        let _ = vfoo.iter().any(|v| v.by_ref(&v.bar));\n+    }\n }"}, {"sha": "82d3072d2f39aaea9994096c907cb030d6ed7283", "filename": "tests/ui/search_is_some_fixable_some.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.rs?ref=90a72f506c55b2c2fc1f64b13c9c048a65846bba", "patch": "@@ -166,4 +166,17 @@ mod issue7392 {\n         let vfoo = vec![&&[0, 1, 2, 3]];\n         let _ = vfoo.iter().find(|x| (**x)[0] == 9).is_some();\n     }\n+\n+    fn method_call_by_ref() {\n+        struct Foo {\n+            bar: u32,\n+        }\n+        impl Foo {\n+            pub fn by_ref(&self, x: &u32) -> bool {\n+                *x == self.bar\n+            }\n+        }\n+        let vfoo = vec![Foo { bar: 1 }];\n+        let _ = vfoo.iter().find(|v| v.by_ref(&v.bar)).is_some();\n+    }\n }"}, {"sha": "5e8885991ac0ce0ed38bf37a2006dfdf4acdee43", "filename": "tests/ui/search_is_some_fixable_some.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90a72f506c55b2c2fc1f64b13c9c048a65846bba/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.stderr?ref=90a72f506c55b2c2fc1f64b13c9c048a65846bba", "patch": "@@ -204,5 +204,11 @@ error: called `is_some()` after searching an `Iterator` with `find`\n LL |         let _ = vfoo.iter().find(|x| (**x)[0] == 9).is_some();\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| (**x)[0] == 9)`\n \n-error: aborting due to 33 previous errors\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:180:29\n+   |\n+LL |         let _ = vfoo.iter().find(|v| v.by_ref(&v.bar)).is_some();\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|v| v.by_ref(&v.bar))`\n+\n+error: aborting due to 34 previous errors\n "}]}