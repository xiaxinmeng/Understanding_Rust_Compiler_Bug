{"sha": "b640c2b95a13ead0285490323b55bfbe01da8e60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NDBjMmI5NWExM2VhZDAyODU0OTAzMjNiNTViZmJlMDFkYThlNjA=", "commit": {"author": {"name": "Jimmy Brisson", "email": "theotherjimmy@gmail.com", "date": "2017-10-07T21:55:09Z"}, "committer": {"name": "Jimmy Brisson", "email": "theotherjimmy@gmail.com", "date": "2017-10-13T14:34:13Z"}, "message": "get_vtable_methods => vtable_methods query", "tree": {"sha": "761590dc8c1ac7ebd58ddaa765e99c5233c2e3d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/761590dc8c1ac7ebd58ddaa765e99c5233c2e3d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b640c2b95a13ead0285490323b55bfbe01da8e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b640c2b95a13ead0285490323b55bfbe01da8e60", "html_url": "https://github.com/rust-lang/rust/commit/b640c2b95a13ead0285490323b55bfbe01da8e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b640c2b95a13ead0285490323b55bfbe01da8e60/comments", "author": {"login": "theotherjimmy", "id": 685409, "node_id": "MDQ6VXNlcjY4NTQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/685409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherjimmy", "html_url": "https://github.com/theotherjimmy", "followers_url": "https://api.github.com/users/theotherjimmy/followers", "following_url": "https://api.github.com/users/theotherjimmy/following{/other_user}", "gists_url": "https://api.github.com/users/theotherjimmy/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherjimmy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherjimmy/subscriptions", "organizations_url": "https://api.github.com/users/theotherjimmy/orgs", "repos_url": "https://api.github.com/users/theotherjimmy/repos", "events_url": "https://api.github.com/users/theotherjimmy/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherjimmy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherjimmy", "id": 685409, "node_id": "MDQ6VXNlcjY4NTQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/685409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherjimmy", "html_url": "https://github.com/theotherjimmy", "followers_url": "https://api.github.com/users/theotherjimmy/followers", "following_url": "https://api.github.com/users/theotherjimmy/following{/other_user}", "gists_url": "https://api.github.com/users/theotherjimmy/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherjimmy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherjimmy/subscriptions", "organizations_url": "https://api.github.com/users/theotherjimmy/orgs", "repos_url": "https://api.github.com/users/theotherjimmy/repos", "events_url": "https://api.github.com/users/theotherjimmy/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherjimmy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e116e14263ac27b4f0e4362638f281c06183813", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e116e14263ac27b4f0e4362638f281c06183813", "html_url": "https://github.com/rust-lang/rust/commit/4e116e14263ac27b4f0e4362638f281c06183813"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "4600cdbc692e7f37e51bf1d0a510bc346cb6c979", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b640c2b95a13ead0285490323b55bfbe01da8e60", "patch": "@@ -506,6 +506,7 @@ define_dep_nodes!( <'tcx>\n     [] SpecializationGraph(DefId),\n     [] ObjectSafety(DefId),\n     [] FulfillObligation { param_env: ParamEnv<'tcx>, trait_ref: PolyTraitRef<'tcx> },\n+    [] VtableMethods { trait_ref: PolyTraitRef<'tcx> },\n \n     [] IsCopy { param_env: ParamEnvAnd<'tcx, Ty<'tcx>> },\n     [] IsSized { param_env: ParamEnvAnd<'tcx, Ty<'tcx>> },"}, {"sha": "8da0f8f13ff815f358a6cd9ed9bf9004817c022f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=b640c2b95a13ead0285490323b55bfbe01da8e60", "patch": "@@ -650,12 +650,12 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// Given a trait `trait_ref`, iterates the vtable entries\n /// that come from `trait_ref`, including its supertraits.\n #[inline] // FIXME(#35870) Avoid closures being unexported due to impl Trait.\n-pub fn get_vtable_methods<'a, 'tcx>(\n+pub fn vtable_methods<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n     -> Vec<Option<(DefId, &'tcx Substs<'tcx>)>>\n {\n-    debug!(\"get_vtable_methods({:?})\", trait_ref);\n+    debug!(\"vtable_methods({:?})\", trait_ref);\n \n     supertraits(tcx, trait_ref).flat_map(move |trait_ref| {\n         let trait_methods = tcx.associated_items(trait_ref.def_id())\n@@ -664,12 +664,12 @@ pub fn get_vtable_methods<'a, 'tcx>(\n         // Now list each method's DefId and Substs (for within its trait).\n         // If the method can never be called from this object, produce None.\n         trait_methods.map(move |trait_method| {\n-            debug!(\"get_vtable_methods: trait_method={:?}\", trait_method);\n+            debug!(\"vtable_methods: trait_method={:?}\", trait_method);\n             let def_id = trait_method.def_id;\n \n             // Some methods cannot be called on an object; skip those.\n             if !tcx.is_vtable_safe_method(trait_ref.def_id(), &trait_method) {\n-                debug!(\"get_vtable_methods: not vtable safe\");\n+                debug!(\"vtable_methods: not vtable safe\");\n                 return None;\n             }\n \n@@ -690,7 +690,7 @@ pub fn get_vtable_methods<'a, 'tcx>(\n             // do not want to try and trans it, in that case (see #23435).\n             let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n             if !normalize_and_test_predicates(tcx, predicates.predicates) {\n-                debug!(\"get_vtable_methods: predicates do not hold\");\n+                debug!(\"vtable_methods: predicates do not hold\");\n                 return None;\n             }\n \n@@ -836,6 +836,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n         trans_fulfill_obligation: trans::trans_fulfill_obligation,\n+        vtable_methods,\n         ..*providers\n     };\n }\n@@ -846,6 +847,7 @@ pub fn provide_extern(providers: &mut ty::maps::Providers) {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n         trans_fulfill_obligation: trans::trans_fulfill_obligation,\n+        vtable_methods,\n         ..*providers\n     };\n }"}, {"sha": "137039598a55b5601ca6b7d887d6f740d0fd760f", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=b640c2b95a13ead0285490323b55bfbe01da8e60", "patch": "@@ -503,6 +503,12 @@ impl<'tcx> QueryDescription for queries::has_clone_closures<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::vtable_methods<'tcx> {\n+    fn describe(tcx: TyCtxt, key: ty::PolyTraitRef<'tcx> ) -> String {\n+        format!(\"finding all methods for trait {}\", tcx.item_path_str(key.def_id()))\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::has_copy_closures<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"seeing if the crate has enabled `Copy` closures\")"}, {"sha": "ee4523d6f3e1ef8b148cc4c7605a9e54cfd041f1", "filename": "src/librustc/ty/maps/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fkeys.rs?ref=b640c2b95a13ead0285490323b55bfbe01da8e60", "patch": "@@ -143,6 +143,15 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     }\n }\n \n+impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n+    fn map_crate(&self) -> CrateNum {\n+        self.def_id().krate\n+    }\n+    fn default_span(&self, tcx: TyCtxt) -> Span {\n+        tcx.def_span(self.def_id())\n+    }\n+}\n+\n impl<'tcx> Key for Ty<'tcx> {\n     fn map_crate(&self) -> CrateNum {\n         LOCAL_CRATE"}, {"sha": "872069d381b9be57b59cb494e1c9e70e895eee0d", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=b640c2b95a13ead0285490323b55bfbe01da8e60", "patch": "@@ -228,6 +228,8 @@ define_maps! { <'tcx>\n     [] fn item_body_nested_bodies: ItemBodyNestedBodies(DefId) -> ExternBodyNestedBodies,\n     [] fn const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n     [] fn is_mir_available: IsMirAvailable(DefId) -> bool,\n+    [] fn vtable_methods: vtable_methods_node(ty::PolyTraitRef<'tcx>)\n+                          -> Vec<Option<(DefId, &'tcx Substs<'tcx>)>>,\n \n     [] fn trans_fulfill_obligation: fulfill_obligation_dep_node(\n         (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> Vtable<'tcx, ()>,\n@@ -470,3 +472,7 @@ fn collect_and_partition_translation_items_node<'tcx>(_: CrateNum) -> DepConstru\n fn output_filenames_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::OutputFilenames\n }\n+\n+fn vtable_methods_node<'tcx>(trait_ref: ty::PolyTraitRef<'tcx>) -> DepConstructor<'tcx> {\n+    DepConstructor::VtableMethods{ trait_ref }\n+}"}, {"sha": "462149c2ed8e5d9ed576c99ff0c580c34804a688", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=b640c2b95a13ead0285490323b55bfbe01da8e60", "patch": "@@ -749,6 +749,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CodegenUnit |\n         DepKind::CompileCodegenUnit |\n         DepKind::FulfillObligation |\n+        DepKind::VtableMethods |\n \n         // These are just odd\n         DepKind::Null |"}, {"sha": "084787000016ea64fa640236bf51aeec1223c401", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=b640c2b95a13ead0285490323b55bfbe01da8e60", "patch": "@@ -849,7 +849,7 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             assert!(!poly_trait_ref.has_escaping_regions());\n \n             // Walk all methods of the trait, including those of its supertraits\n-            let methods = traits::get_vtable_methods(tcx, poly_trait_ref);\n+            let methods = tcx.vtable_methods(poly_trait_ref);\n             let methods = methods.into_iter().filter_map(|method| method)\n                 .map(|(def_id, substs)| ty::Instance::resolve(\n                         tcx,"}, {"sha": "66d633cf9a1f1ced5a634d64fb41367b2349a2ae", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b640c2b95a13ead0285490323b55bfbe01da8e60/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=b640c2b95a13ead0285490323b55bfbe01da8e60", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use rustc::traits;\n use callee;\n use common::*;\n use builder::Builder;\n@@ -87,7 +86,7 @@ pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     if let Some(trait_ref) = trait_ref {\n         let trait_ref = trait_ref.with_self_ty(tcx, ty);\n-        let methods = traits::get_vtable_methods(tcx, trait_ref).into_iter().map(|opt_mth| {\n+        let methods = tcx.vtable_methods(trait_ref).into_iter().map(|opt_mth| {\n             opt_mth.map_or(nullptr, |(def_id, substs)| {\n                 callee::resolve_and_get_fn(ccx, def_id, substs)\n             })"}]}