{"sha": "b200483412b1195d0ca9deffe011c659606e5b3b", "node_id": "C_kwDOAAsO6NoAKGIyMDA0ODM0MTJiMTE5NWQwY2E5ZGVmZmUwMTFjNjU5NjA2ZTViM2I", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-27T05:00:37Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-04-12T09:27:25Z"}, "message": "Rectify float classification impls for weird FPUs\n\nCareful handling does its best to take care of both Armv7's\n\"unenhanced\" Neon as well as the x87 FPU.", "tree": {"sha": "76a078f641ef0e1163d0b60416d54439a1ba4fe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a078f641ef0e1163d0b60416d54439a1ba4fe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b200483412b1195d0ca9deffe011c659606e5b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b200483412b1195d0ca9deffe011c659606e5b3b", "html_url": "https://github.com/rust-lang/rust/commit/b200483412b1195d0ca9deffe011c659606e5b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b200483412b1195d0ca9deffe011c659606e5b3b/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd38eea722c1f6f970a314435533e91cc2c14ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd38eea722c1f6f970a314435533e91cc2c14ffb", "html_url": "https://github.com/rust-lang/rust/commit/dd38eea722c1f6f970a314435533e91cc2c14ffb"}], "stats": {"total": 119, "additions": 103, "deletions": 16}, "files": [{"sha": "6cd95272ea40a471d47179254b9953905208cbd1", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b200483412b1195d0ca9deffe011c659606e5b3b/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b200483412b1195d0ca9deffe011c659606e5b3b/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=b200483412b1195d0ca9deffe011c659606e5b3b", "patch": "@@ -449,7 +449,8 @@ impl f32 {\n     #[inline]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     pub(crate) const fn abs_private(self) -> f32 {\n-        f32::from_bits(self.to_bits() & 0x7fff_ffff)\n+        // SAFETY: This transmutation is fine. Probably. For the reasons std is using it.\n+        unsafe { mem::transmute::<u32, f32>(mem::transmute::<f32, u32>(self) & 0x7fff_ffff) }\n     }\n \n     /// Returns `true` if this value is positive infinity or negative infinity, and\n@@ -472,7 +473,10 @@ impl f32 {\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_infinite(self) -> bool {\n-        self.abs_private() == Self::INFINITY\n+        // Getting clever with transmutation can result in incorrect answers on some FPUs\n+        // FIXME: alter the Rust <-> Rust calling convention to prevent this problem.\n+        // See https://github.com/rust-lang/rust/issues/72327\n+        (self == f32::INFINITY) | (self == f32::NEG_INFINITY)\n     }\n \n     /// Returns `true` if this number is neither infinite nor `NaN`.\n@@ -568,15 +572,53 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     pub const fn classify(self) -> FpCategory {\n+        // A previous implementation tried to only use bitmask-based checks,\n+        // using f32::to_bits to transmute the float to its bit repr and match on that.\n+        // Unfortunately, floating point numbers can be much worse than that.\n+        // This also needs to not result in recursive evaluations of f64::to_bits.\n+        //\n+        // On some processors, in some cases, LLVM will \"helpfully\" lower floating point ops,\n+        // in spite of a request for them using f32 and f64, to things like x87 operations.\n+        // These have an f64's mantissa, but can have a larger than normal exponent.\n+        // FIXME(jubilee): Using x87 operations is never necessary in order to function\n+        // on x86 processors for Rust-to-Rust calls, so this issue should not happen.\n+        // Code generation should be adjusted to use non-C calling conventions, avoiding this.\n+        //\n+        if self.is_infinite() {\n+            // Thus, a value may compare unequal to infinity, despite having a \"full\" exponent mask.\n+            FpCategory::Infinite\n+        } else if self.is_nan() {\n+            // And it may not be NaN, as it can simply be an \"overextended\" finite value.\n+            FpCategory::Nan\n+        } else {\n+            // However, std can't simply compare to zero to check for zero, either,\n+            // as correctness requires avoiding equality tests that may be Subnormal == -0.0\n+            // because it may be wrong under \"denormals are zero\" and \"flush to zero\" modes.\n+            // Most of std's targets don't use those, but they are used for thumbv7neon\".\n+            // So, this does use bitpattern matching for the rest.\n+\n+            // SAFETY: f32 to u32 is fine. Usually.\n+            // If classify has gotten this far, the value is definitely in one of these categories.\n+            unsafe { f32::partial_classify(self) }\n+        }\n+    }\n+\n+    // This doesn't actually return a right answer for NaN on purpose,\n+    // seeing as how it cannot correctly discern between a floating point NaN,\n+    // and some normal floating point numbers truncated from an x87 FPU.\n+    // FIXME(jubilee): This probably could at least answer things correctly for Infinity,\n+    // like the f64 version does, but I need to run more checks on how things go on x86.\n+    // I fear losing mantissa data that would have answered that differently.\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    const unsafe fn partial_classify(self) -> FpCategory {\n         const EXP_MASK: u32 = 0x7f800000;\n         const MAN_MASK: u32 = 0x007fffff;\n \n-        let bits = self.to_bits();\n-        match (bits & MAN_MASK, bits & EXP_MASK) {\n+        // SAFETY: The caller is not asking questions for which this will tell lies.\n+        let b = unsafe { mem::transmute::<f32, u32>(self) };\n+        match (b & MAN_MASK, b & EXP_MASK) {\n             (0, 0) => FpCategory::Zero,\n             (_, 0) => FpCategory::Subnormal,\n-            (0, EXP_MASK) => FpCategory::Infinite,\n-            (_, EXP_MASK) => FpCategory::Nan,\n             _ => FpCategory::Normal,\n         }\n     }\n@@ -616,7 +658,8 @@ impl f32 {\n     pub const fn is_sign_negative(self) -> bool {\n         // IEEE754 says: isSignMinus(x) is true if and only if x has negative sign. isSignMinus\n         // applies to zeros and NaNs as well.\n-        self.to_bits() & 0x8000_0000 != 0\n+        // SAFETY: This is just transmuting to get the sign bit, it's fine.\n+        unsafe { mem::transmute::<f32, u32>(self) & 0x8000_0000 != 0 }\n     }\n \n     /// Takes the reciprocal (inverse) of a number, `1/x`.\n@@ -878,7 +921,7 @@ impl f32 {\n     pub const fn from_bits(v: u32) -> Self {\n         // SAFETY: `u32` is a plain old datatype so we can always transmute from it\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n-        unsafe { mem::transmute(v) }\n+        unsafe { mem::transmute::<u32, f32>(v) }\n     }\n \n     /// Return the memory representation of this floating point number as a byte array in"}, {"sha": "53f7f3ed561192c7949b9bf16b0b5c96b55d5c32", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b200483412b1195d0ca9deffe011c659606e5b3b/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b200483412b1195d0ca9deffe011c659606e5b3b/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=b200483412b1195d0ca9deffe011c659606e5b3b", "patch": "@@ -448,7 +448,10 @@ impl f64 {\n     #[inline]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     pub(crate) const fn abs_private(self) -> f64 {\n-        f64::from_bits(self.to_bits() & 0x7fff_ffff_ffff_ffff)\n+        // SAFETY: This transmutation is fine. Probably. For the reasons std is using it.\n+        unsafe {\n+            mem::transmute::<u64, f64>(mem::transmute::<f64, u64>(self) & 0x7fff_ffff_ffff_ffff)\n+        }\n     }\n \n     /// Returns `true` if this value is positive infinity or negative infinity, and\n@@ -471,7 +474,10 @@ impl f64 {\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_infinite(self) -> bool {\n-        self.abs_private() == Self::INFINITY\n+        // Getting clever with transmutation can result in incorrect answers on some FPUs\n+        // FIXME: alter the Rust <-> Rust calling convention to prevent this problem.\n+        // See https://github.com/rust-lang/rust/issues/72327\n+        (self == f64::INFINITY) | (self == f64::NEG_INFINITY)\n     }\n \n     /// Returns `true` if this number is neither infinite nor `NaN`.\n@@ -567,15 +573,50 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     pub const fn classify(self) -> FpCategory {\n+        // A previous implementation tried to only use bitmask-based checks,\n+        // using f64::to_bits to transmute the float to its bit repr and match on that.\n+        // Unfortunately, floating point numbers can be much worse than that.\n+        // This also needs to not result in recursive evaluations of f64::to_bits.\n+        //\n+        // On some processors, in some cases, LLVM will \"helpfully\" lower floating point ops,\n+        // in spite of a request for them using f32 and f64, to things like x87 operations.\n+        // These have an f64's mantissa, but can have a larger than normal exponent.\n+        // FIXME(jubilee): Using x87 operations is never necessary in order to function\n+        // on x86 processors for Rust-to-Rust calls, so this issue should not happen.\n+        // Code generation should be adjusted to use non-C calling conventions, avoiding this.\n+        //\n+        // Thus, a value may compare unequal to infinity, despite having a \"full\" exponent mask.\n+        // And it may not be NaN, as it can simply be an \"overextended\" finite value.\n+        if self.is_nan() {\n+            FpCategory::Nan\n+        } else {\n+            // However, std can't simply compare to zero to check for zero, either,\n+            // as correctness requires avoiding equality tests that may be Subnormal == -0.0\n+            // because it may be wrong under \"denormals are zero\" and \"flush to zero\" modes.\n+            // Most of std's targets don't use those, but they are used for thumbv7neon\".\n+            // So, this does use bitpattern matching for the rest.\n+\n+            // SAFETY: f64 to u64 is fine. Usually.\n+            // If control flow has gotten this far, the value is definitely in one of the categories\n+            // that f64::partial_classify can correctly analyze.\n+            unsafe { f64::partial_classify(self) }\n+        }\n+    }\n+\n+    // This doesn't actually return a right answer for NaN on purpose,\n+    // seeing as how it cannot correctly discern between a floating point NaN,\n+    // and some normal floating point numbers truncated from an x87 FPU.\n+    #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n+    const unsafe fn partial_classify(self) -> FpCategory {\n         const EXP_MASK: u64 = 0x7ff0000000000000;\n         const MAN_MASK: u64 = 0x000fffffffffffff;\n \n-        let bits = self.to_bits();\n-        match (bits & MAN_MASK, bits & EXP_MASK) {\n+        // SAFETY: The caller is not asking questions for which this will tell lies.\n+        let b = unsafe { mem::transmute::<f64, u64>(self) };\n+        match (b & MAN_MASK, b & EXP_MASK) {\n+            (0, EXP_MASK) => FpCategory::Infinite,\n             (0, 0) => FpCategory::Zero,\n             (_, 0) => FpCategory::Subnormal,\n-            (0, EXP_MASK) => FpCategory::Infinite,\n-            (_, EXP_MASK) => FpCategory::Nan,\n             _ => FpCategory::Normal,\n         }\n     }\n@@ -622,7 +663,10 @@ impl f64 {\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n     #[inline]\n     pub const fn is_sign_negative(self) -> bool {\n-        self.to_bits() & 0x8000_0000_0000_0000 != 0\n+        // IEEE754 says: isSignMinus(x) is true if and only if x has negative sign. isSignMinus\n+        // applies to zeros and NaNs as well.\n+        // SAFETY: This is just transmuting to get the sign bit, it's fine.\n+        unsafe { mem::transmute::<f64, u64>(self) & 0x8000_0000_0000_0000 != 0 }\n     }\n \n     #[must_use]\n@@ -894,7 +938,7 @@ impl f64 {\n     pub const fn from_bits(v: u64) -> Self {\n         // SAFETY: `u64` is a plain old datatype so we can always transmute from it\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n-        unsafe { mem::transmute(v) }\n+        unsafe { mem::transmute::<u64, f64>(v) }\n     }\n \n     /// Return the memory representation of this floating point number as a byte array in"}]}