{"sha": "e3227bd8fd9938cf6b9e18873e569b14ad0eb5c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMjI3YmQ4ZmQ5OTM4Y2Y2YjllMTg4NzNlNTY5YjE0YWQwZWI1YzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-12T12:01:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-12T12:01:15Z"}, "message": "Merge #6529\n\n6529: Do not insert imports before inner comments r=Veykril a=SomeoneToIgnore\n\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "5437628f4ed88480b788bd3b23d2f63bc481a10b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5437628f4ed88480b788bd3b23d2f63bc481a10b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3227bd8fd9938cf6b9e18873e569b14ad0eb5c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrSQMCRBK7hj4Ov3rIwAAdHIIAKXkHhsNUqy7K9KYWVtpGzQk\nRTmk0IdgWU2Zenn/wjzsFX8vfe4FQadsktAFEyVFofg56YfgsiDfVnZaW101a8HA\nMc5bgXV4Bg8f+FmjIffNXOqnFXNwHvbEiP5Hr9YZjrO8J/BHfapCFr2oNjR+sthr\n1c/pFab6/OHBL8XpJg8onxTQ5T3Tg3WFLgKRT3mWxR4NbLN6aCszW9zfIfNxsPWy\nvlLEzhBZ+NirDqSRVEtuO2seMHs85+7PzUJVYUQShCLb9WSuvo81TYbQG+yqkbOe\nSL+9RHE5FDnCEEP26TWuDAz3Uh6lodyAp8B+/+udcgH32+uuWIKl1w1uOUPMEw4=\n=h14+\n-----END PGP SIGNATURE-----\n", "payload": "tree 5437628f4ed88480b788bd3b23d2f63bc481a10b\nparent 99fa139beab0c03583c676554c3d807525f602af\nparent 07e633ef0adda5f3ce608762267d67b6359358a7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605182475 +0000\ncommitter GitHub <noreply@github.com> 1605182475 +0000\n\nMerge #6529\n\n6529: Do not insert imports before inner comments r=Veykril a=SomeoneToIgnore\n\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3227bd8fd9938cf6b9e18873e569b14ad0eb5c2", "html_url": "https://github.com/rust-lang/rust/commit/e3227bd8fd9938cf6b9e18873e569b14ad0eb5c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3227bd8fd9938cf6b9e18873e569b14ad0eb5c2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99fa139beab0c03583c676554c3d807525f602af", "url": "https://api.github.com/repos/rust-lang/rust/commits/99fa139beab0c03583c676554c3d807525f602af", "html_url": "https://github.com/rust-lang/rust/commit/99fa139beab0c03583c676554c3d807525f602af"}, {"sha": "07e633ef0adda5f3ce608762267d67b6359358a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e633ef0adda5f3ce608762267d67b6359358a7", "html_url": "https://github.com/rust-lang/rust/commit/07e633ef0adda5f3ce608762267d67b6359358a7"}], "stats": {"total": 96, "additions": 77, "deletions": 19}, "files": [{"sha": "af3fc96b6c2fce2b4e89bb624b9e85092256b17f", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 77, "deletions": 19, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/e3227bd8fd9938cf6b9e18873e569b14ad0eb5c2/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3227bd8fd9938cf6b9e18873e569b14ad0eb5c2/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=e3227bd8fd9938cf6b9e18873e569b14ad0eb5c2", "patch": "@@ -9,7 +9,7 @@ use syntax::{\n         edit::{AstNodeEdit, IndentLevel},\n         make, AstNode, PathSegmentKind, VisibilityOwner,\n     },\n-    InsertPosition, SyntaxElement, SyntaxNode,\n+    AstToken, InsertPosition, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxToken,\n };\n use test_utils::mark;\n \n@@ -63,27 +63,30 @@ impl ImportScope {\n         }\n     }\n \n-    fn insert_pos_after_inner_attribute(&self) -> (InsertPosition<SyntaxElement>, AddBlankLine) {\n-        // check if the scope has inner attributes, we dont want to insert in front of them\n-        match self\n-            .as_syntax_node()\n-            .children()\n-            // no flat_map here cause we want to short circuit the iterator\n-            .map(ast::Attr::cast)\n-            .take_while(|attr| {\n-                attr.as_ref().map(|attr| attr.kind() == ast::AttrKind::Inner).unwrap_or(false)\n+    fn insert_pos_after_last_inner_element(&self) -> (InsertPosition<SyntaxElement>, AddBlankLine) {\n+        self.as_syntax_node()\n+            .children_with_tokens()\n+            .filter(|child| match child {\n+                NodeOrToken::Node(node) => is_inner_attribute(node.clone()),\n+                NodeOrToken::Token(token) => is_inner_comment(token.clone()),\n             })\n             .last()\n-            .flatten()\n-        {\n-            Some(attr) => {\n-                (InsertPosition::After(attr.syntax().clone().into()), AddBlankLine::BeforeTwice)\n-            }\n-            None => self.first_insert_pos(),\n-        }\n+            .map(|last_inner_element| {\n+                (InsertPosition::After(last_inner_element.into()), AddBlankLine::BeforeTwice)\n+            })\n+            .unwrap_or_else(|| self.first_insert_pos())\n     }\n }\n \n+fn is_inner_attribute(node: SyntaxNode) -> bool {\n+    ast::Attr::cast(node).map(|attr| attr.kind()) == Some(ast::AttrKind::Inner)\n+}\n+\n+fn is_inner_comment(token: SyntaxToken) -> bool {\n+    ast::Comment::cast(token).and_then(|comment| comment.kind().doc)\n+        == Some(ast::CommentPlacement::Inner)\n+}\n+\n /// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n pub(crate) fn insert_use<'a>(\n     scope: &ImportScope,\n@@ -558,7 +561,7 @@ fn find_insert_position(\n                             (InsertPosition::After(node.into()), AddBlankLine::BeforeTwice)\n                         }\n                         // there are no imports in this file at all\n-                        None => scope.insert_pos_after_inner_attribute(),\n+                        None => scope.insert_pos_after_last_inner_element(),\n                     },\n                 }\n             }\n@@ -830,12 +833,67 @@ use foo::bar;\",\n             \"foo::bar\",\n             r\"#![allow(unused_imports)]\n \n+#![no_std]\n fn main() {}\",\n             r\"#![allow(unused_imports)]\n \n-use foo::bar;\n+#![no_std]\n \n+use foo::bar;\n fn main() {}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inserts_after_single_line_inner_comments() {\n+        check_none(\n+            \"foo::bar::Baz\",\n+            \"//! Single line inner comments do not allow any code before them.\",\n+            r#\"//! Single line inner comments do not allow any code before them.\n+\n+use foo::bar::Baz;\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inserts_after_multiline_inner_comments() {\n+        check_none(\n+            \"foo::bar::Baz\",\n+            r#\"/*! Multiline inner comments do not allow any code before them. */\n+\n+/*! Still an inner comment, cannot place any code before. */\n+fn main() {}\"#,\n+            r#\"/*! Multiline inner comments do not allow any code before them. */\n+\n+/*! Still an inner comment, cannot place any code before. */\n+\n+use foo::bar::Baz;\n+fn main() {}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn inserts_after_all_inner_items() {\n+        check_none(\n+            \"foo::bar::Baz\",\n+            r#\"#![allow(unused_imports)]\n+/*! Multiline line comment 2 */\n+\n+\n+//! Single line comment 1\n+#![no_std]\n+//! Single line comment 2\n+fn main() {}\"#,\n+            r#\"#![allow(unused_imports)]\n+/*! Multiline line comment 2 */\n+\n+\n+//! Single line comment 1\n+#![no_std]\n+//! Single line comment 2\n+\n+use foo::bar::Baz;\n+fn main() {}\"#,\n         )\n     }\n "}]}