{"sha": "ac0a3d106bf33395da6251562800ab8df5e60d3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMGEzZDEwNmJmMzMzOTVkYTYyNTE1NjI4MDBhYjhkZjVlNjBkM2E=", "commit": {"author": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-07-12T20:48:02Z"}, "committer": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-07-12T20:48:02Z"}, "message": "polonius: add generation of liveneness-related facts\n\nNotably contains an ugly hack to generate initialization information for\nvariables that will go away when we have that functionality in Polonius.", "tree": {"sha": "76517cc3a19faa2ba94be32c29e66583de42350c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76517cc3a19faa2ba94be32c29e66583de42350c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac0a3d106bf33395da6251562800ab8df5e60d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0a3d106bf33395da6251562800ab8df5e60d3a", "html_url": "https://github.com/rust-lang/rust/commit/ac0a3d106bf33395da6251562800ab8df5e60d3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac0a3d106bf33395da6251562800ab8df5e60d3a/comments", "author": null, "committer": null, "parents": [{"sha": "e775bf33c0809550bf8036ead82c16d0b6e06c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/e775bf33c0809550bf8036ead82c16d0b6e06c34", "html_url": "https://github.com/rust-lang/rust/commit/e775bf33c0809550bf8036ead82c16d0b6e06c34"}], "stats": {"total": 217, "additions": 197, "deletions": 20}, "files": [{"sha": "2190f122880732128d92051e47b5f1f199ece243", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ac0a3d106bf33395da6251562800ab8df5e60d3a", "patch": "@@ -9,6 +9,7 @@ use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n use crate::mir::interpret::{ConstValue, InterpError, Scalar};\n use crate::mir::visit::MirVisitable;\n+use polonius_engine::Atom;\n use rustc_data_structures::bit_set::BitMatrix;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::dominators::{dominators, Dominators};\n@@ -600,6 +601,12 @@ newtype_index! {\n     }\n }\n \n+impl Atom for Local {\n+    fn index(self) -> usize {\n+        Idx::index(self)\n+    }\n+}\n+\n /// Classifies locals into categories. See `Body::local_kind`.\n #[derive(PartialEq, Eq, Debug, HashStable)]\n pub enum LocalKind {"}, {"sha": "0b98dbaf58a807f2e4c7dd7e7f3c65374bb6a8fc", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=ac0a3d106bf33395da6251562800ab8df5e60d3a", "patch": "@@ -3,7 +3,7 @@\n //! FIXME: this might be better as a \"generic\" fixed-point combinator,\n //! but is not as ugly as it is right now.\n \n-use rustc::mir::{BasicBlock, Location};\n+use rustc::mir::{BasicBlock, Local, Location};\n use rustc::ty::RegionVid;\n use rustc_data_structures::bit_set::BitIter;\n \n@@ -21,22 +21,24 @@ use either::Either;\n use std::fmt;\n use std::rc::Rc;\n \n+crate type PoloniusOutput = Output<RegionVid, BorrowIndex, LocationIndex, Local>;\n+\n // (forced to be `pub` due to its use as an associated type below.)\n crate struct Flows<'b, 'tcx> {\n     borrows: FlowAtLocation<'tcx, Borrows<'b, 'tcx>>,\n     pub uninits: FlowAtLocation<'tcx, MaybeUninitializedPlaces<'b, 'tcx>>,\n     pub ever_inits: FlowAtLocation<'tcx, EverInitializedPlaces<'b, 'tcx>>,\n \n     /// Polonius Output\n-    pub polonius_output: Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n+    pub polonius_output: Option<Rc<PoloniusOutput>>,\n }\n \n impl<'b, 'tcx> Flows<'b, 'tcx> {\n     crate fn new(\n         borrows: FlowAtLocation<'tcx, Borrows<'b, 'tcx>>,\n         uninits: FlowAtLocation<'tcx, MaybeUninitializedPlaces<'b, 'tcx>>,\n         ever_inits: FlowAtLocation<'tcx, EverInitializedPlaces<'b, 'tcx>>,\n-        polonius_output: Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n+        polonius_output: Option<Rc<PoloniusOutput>>,\n     ) -> Self {\n         Flows {\n             borrows,"}, {"sha": "33854d991eea7b09e90bf6cac2ef3aa81dad2ba2", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=ac0a3d106bf33395da6251562800ab8df5e60d3a", "patch": "@@ -2,6 +2,7 @@ use crate::borrow_check::location::{LocationIndex, LocationTable};\n use crate::dataflow::indexes::BorrowIndex;\n use polonius_engine::AllFacts as PoloniusAllFacts;\n use polonius_engine::Atom;\n+use rustc::mir::Local;\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n use std::error::Error;\n@@ -10,7 +11,7 @@ use std::fs::{self, File};\n use std::io::Write;\n use std::path::Path;\n \n-crate type AllFacts = PoloniusAllFacts<RegionVid, BorrowIndex, LocationIndex>;\n+crate type AllFacts = PoloniusAllFacts<RegionVid, BorrowIndex, LocationIndex, Local>;\n \n crate trait AllFactsExt {\n     /// Returns `true` if there is a need to gather `AllFacts` given the\n@@ -60,6 +61,12 @@ impl AllFactsExt for AllFacts {\n                 outlives,\n                 region_live_at,\n                 invalidates,\n+                var_used,\n+                var_defined,\n+                var_drop_used,\n+                var_uses_region,\n+                var_drops_region,\n+                var_initialized_on_exit,\n             ])\n         }\n         Ok(())"}, {"sha": "a2c5ad202e8c9d96404ae9240c271a34f52091e7", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=ac0a3d106bf33395da6251562800ab8df5e60d3a", "patch": "@@ -11,7 +11,7 @@ use crate::transform::MirSource;\n use crate::borrow_check::Upvar;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Body};\n+use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Local, Body};\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc_errors::Diagnostic;\n use std::fmt::Debug;\n@@ -84,7 +84,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     errors_buffer: &mut Vec<Diagnostic>,\n ) -> (\n     RegionInferenceContext<'tcx>,\n-    Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex>>>,\n+    Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex, Local>>>,\n     Option<ClosureRegionRequirements<'tcx>>,\n ) {\n     let mut all_facts = if AllFacts::enabled(infcx.tcx) {"}, {"sha": "8633341c32182423afcd5585a3cacce766677c5c", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=ac0a3d106bf33395da6251562800ab8df5e60d3a", "patch": "@@ -15,6 +15,7 @@ use std::rc::Rc;\n use super::TypeChecker;\n \n mod local_use_map;\n+mod polonius;\n mod trace;\n \n /// Combines liveness analysis with initialization analysis to\n@@ -57,15 +58,9 @@ pub(super) fn generate<'tcx>(\n     };\n \n     if !live_locals.is_empty() {\n-        trace::trace(\n-            typeck,\n-            body,\n-            elements,\n-            flow_inits,\n-            move_data,\n-            live_locals,\n-            location_table,\n-        );\n+        trace::trace(typeck, body, elements, flow_inits, move_data, live_locals, location_table);\n+\n+        polonius::populate_var_liveness_facts(typeck, body, location_table);\n     }\n }\n "}, {"sha": "20d7ec55e3e84f0330bd9af69b5ad15f8854b493", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=ac0a3d106bf33395da6251562800ab8df5e60d3a", "patch": "@@ -0,0 +1,94 @@\n+use crate::borrow_check::location::{LocationIndex, LocationTable};\n+use crate::util::liveness::{categorize, DefUse};\n+use rustc::mir::visit::{PlaceContext, Visitor};\n+use rustc::mir::{Body, Local, Location};\n+use rustc::ty::subst::Kind;\n+use rustc::ty::Ty;\n+\n+use super::TypeChecker;\n+\n+type VarPointRelations = Vec<(Local, LocationIndex)>;\n+\n+struct LivenessPointFactsExtractor<'me> {\n+    var_defined: &'me mut VarPointRelations,\n+    var_used: &'me mut VarPointRelations,\n+    location_table: &'me LocationTable,\n+}\n+\n+// A Visitor to walk through the MIR and extract point-wise facts\n+impl LivenessPointFactsExtractor<'_> {\n+    fn location_to_index(&self, location: Location) -> LocationIndex {\n+        self.location_table.mid_index(location)\n+    }\n+\n+    fn insert_def(&mut self, local: Local, location: Location) {\n+        debug!(\"LivenessFactsExtractor::insert_def()\");\n+        self.var_defined.push((local, self.location_to_index(location)));\n+    }\n+\n+    fn insert_use(&mut self, local: Local, location: Location) {\n+        debug!(\"LivenessFactsExtractor::insert_use()\");\n+        self.var_used.push((local, self.location_to_index(location)));\n+    }\n+}\n+\n+impl Visitor<'tcx> for LivenessPointFactsExtractor<'_> {\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n+        match categorize(context) {\n+            Some(DefUse::Def) => self.insert_def(local, location),\n+            Some(DefUse::Use) => self.insert_use(local, location),\n+            _ => (),\n+            // NOTE: Drop handling is now done in trace()\n+        }\n+    }\n+}\n+\n+fn add_var_uses_regions(typeck: &mut TypeChecker<'_, 'tcx>, local: Local, ty: Ty<'tcx>) {\n+    debug!(\"add_regions(local={:?}, type={:?})\", local, ty);\n+    typeck.tcx().for_each_free_region(&ty, |region| {\n+        let region_vid = typeck.borrowck_context.universal_regions.to_region_vid(region);\n+        debug!(\"add_regions for region {:?}\", region_vid);\n+        if let Some(facts) = typeck.borrowck_context.all_facts {\n+            facts.var_uses_region.push((local, region_vid));\n+        }\n+    });\n+}\n+\n+pub(super) fn populate_var_liveness_facts(\n+    typeck: &mut TypeChecker<'_, 'tcx>,\n+    mir: &Body<'tcx>,\n+    location_table: &LocationTable,\n+) {\n+    debug!(\"populate_var_liveness_facts()\");\n+\n+    if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n+        LivenessPointFactsExtractor {\n+            var_defined: &mut facts.var_defined,\n+            var_used: &mut facts.var_used,\n+            location_table,\n+        }\n+        .visit_body(mir);\n+    }\n+\n+    for (local, local_decl) in mir.local_decls.iter_enumerated() {\n+        add_var_uses_regions(typeck, local, local_decl.ty);\n+    }\n+}\n+\n+// For every potentially drop()-touched region `region` in `local`'s type\n+// (`kind`), emit a Polonius `var_drops_region(local, region)` fact.\n+pub(super) fn add_var_drops_regions(\n+    typeck: &mut TypeChecker<'_, 'tcx>,\n+    local: Local,\n+    kind: &Kind<'tcx>,\n+) {\n+    debug!(\"add_var_drops_region(local={:?}, kind={:?}\", local, kind);\n+    let tcx = typeck.tcx();\n+\n+    tcx.for_each_free_region(kind, |drop_live_region| {\n+        let region_vid = typeck.borrowck_context.universal_regions.to_region_vid(drop_live_region);\n+        if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n+            facts.var_drops_region.push((local, region_vid));\n+        };\n+    });\n+}"}, {"sha": "dc3b7bdfe30399caa09b4f4d660fcce776375f2c", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 77, "deletions": 5, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0a3d106bf33395da6251562800ab8df5e60d3a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=ac0a3d106bf33395da6251562800ab8df5e60d3a", "patch": "@@ -1,13 +1,14 @@\n use crate::borrow_check::location::LocationTable;\n use crate::borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n use crate::borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n+use crate::borrow_check::nll::type_check::liveness::polonius;\n use crate::borrow_check::nll::type_check::NormalizeLocation;\n use crate::borrow_check::nll::type_check::TypeChecker;\n use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n use rustc::infer::canonical::QueryRegionConstraints;\n-use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Body};\n+use rustc::mir::{BasicBlock, Body, ConstraintCategory, Local, Location};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;\n@@ -130,6 +131,12 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         for local in live_locals {\n             self.reset_local_state();\n             self.add_defs_for(local);\n+\n+            // FIXME: this is temporary until we can generate our own initialization\n+            if self.cx.typeck.borrowck_context.all_facts.is_some() {\n+                self.add_polonius_var_initialized_on_exit_for(local)\n+            }\n+\n             self.compute_use_live_points_for(local);\n             self.compute_drop_live_points_for(local);\n \n@@ -150,6 +157,63 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         }\n     }\n \n+    // WARNING: panics if self.cx.typeck.borrowck_context.all_facts != None\n+    //\n+    // FIXME: this analysis (the initialization tracking) should be\n+    // done in Polonius, but isn't yet.\n+    fn add_polonius_var_initialized_on_exit_for(&mut self, local: Local) {\n+        let move_path = self.cx.move_data.rev_lookup.find_local(local);\n+        let facts = self.cx.typeck.borrowck_context.all_facts.as_mut().unwrap();\n+        for block in self.cx.body.basic_blocks().indices() {\n+            debug!(\"polonius: generating initialization facts for {:?} in {:?}\", local, block);\n+\n+            // iterate through the block, applying the effects of each statement\n+            // up to and including location, and populate `var_initialized_on_exit`\n+            self.cx.flow_inits.reset_to_entry_of(block);\n+            let start_location = Location { block, statement_index: 0 };\n+            self.cx.flow_inits.apply_local_effect(start_location);\n+\n+            for statement_index in 0..self.cx.body[block].statements.len() {\n+                let current_location = Location { block, statement_index };\n+\n+                self.cx.flow_inits.reconstruct_statement_effect(current_location);\n+\n+                // statement has not yet taken effect:\n+                if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n+                    facts\n+                        .var_initialized_on_exit\n+                        .push((local, self.cx.location_table.start_index(current_location)));\n+                }\n+\n+                // statement has now taken effect\n+                self.cx.flow_inits.apply_local_effect(current_location);\n+\n+                if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n+                    facts\n+                        .var_initialized_on_exit\n+                        .push((local, self.cx.location_table.mid_index(current_location)));\n+                }\n+            }\n+\n+            let terminator_location = self.cx.body.terminator_loc(block);\n+\n+            if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n+                facts\n+                    .var_initialized_on_exit\n+                    .push((local, self.cx.location_table.start_index(terminator_location)));\n+            }\n+\n+            // apply the effects of the terminator and push it if needed\n+            self.cx.flow_inits.reset_to_exit_of(block);\n+\n+            if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n+                facts\n+                    .var_initialized_on_exit\n+                    .push((local, self.cx.location_table.mid_index(terminator_location)));\n+            }\n+        }\n+    }\n+\n     /// Clear the value of fields that are \"per local variable\".\n     fn reset_local_state(&mut self) {\n         self.defs.clear();\n@@ -211,6 +275,11 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n             debug_assert_eq!(self.cx.body.terminator_loc(location.block), location,);\n \n             if self.cx.initialized_at_terminator(location.block, mpi) {\n+                // FIXME: this analysis (the initialization tracking) should be\n+                // done in Polonius, but isn't yet.\n+                if let Some(facts) = self.cx.typeck.borrowck_context.all_facts {\n+                    facts.var_drop_used.push((local, self.cx.location_table.mid_index(location)));\n+                }\n                 if self.drop_live_at.insert(drop_point) {\n                     self.drop_locations.push(location);\n                     self.stack.push(drop_point);\n@@ -487,6 +556,8 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n                 live_at,\n                 self.location_table,\n             );\n+\n+            polonius::add_var_drops_regions(&mut self.typeck, dropped_local, &kind);\n         }\n     }\n \n@@ -505,14 +576,15 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n \n         let tcx = typeck.tcx();\n         tcx.for_each_free_region(&value, |live_region| {\n-            let live_region_vid = typeck.borrowck_context\n-                .universal_regions\n-                .to_region_vid(live_region);\n-            typeck.borrowck_context\n+            let live_region_vid =\n+                typeck.borrowck_context.universal_regions.to_region_vid(live_region);\n+            typeck\n+                .borrowck_context\n                 .constraints\n                 .liveness_constraints\n                 .add_elements(live_region_vid, live_at);\n \n+            // FIXME: remove this when we can generate our own region-live-at reliably\n             if let Some(facts) = typeck.borrowck_context.all_facts {\n                 for point in live_at.iter() {\n                     let loc = elements.to_location(point);"}]}