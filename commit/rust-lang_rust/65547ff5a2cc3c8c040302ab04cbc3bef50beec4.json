{"sha": "65547ff5a2cc3c8c040302ab04cbc3bef50beec4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NTQ3ZmY1YTJjYzNjOGMwNDAzMDJhYjA0Y2JjM2JlZjUwYmVlYzQ=", "commit": {"author": {"name": "Marcello Seri", "email": "marcello.seri@gmail.com", "date": "2015-10-16T21:47:54Z"}, "committer": {"name": "Marcello Seri", "email": "marcello.seri@gmail.com", "date": "2015-10-16T21:47:54Z"}, "message": "Tests fixup", "tree": {"sha": "0289f48377d0cfdcae4287b8bf4793a082a57c82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0289f48377d0cfdcae4287b8bf4793a082a57c82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65547ff5a2cc3c8c040302ab04cbc3bef50beec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65547ff5a2cc3c8c040302ab04cbc3bef50beec4", "html_url": "https://github.com/rust-lang/rust/commit/65547ff5a2cc3c8c040302ab04cbc3bef50beec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65547ff5a2cc3c8c040302ab04cbc3bef50beec4/comments", "author": {"login": "mseri", "id": 4040623, "node_id": "MDQ6VXNlcjQwNDA2MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4040623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mseri", "html_url": "https://github.com/mseri", "followers_url": "https://api.github.com/users/mseri/followers", "following_url": "https://api.github.com/users/mseri/following{/other_user}", "gists_url": "https://api.github.com/users/mseri/gists{/gist_id}", "starred_url": "https://api.github.com/users/mseri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mseri/subscriptions", "organizations_url": "https://api.github.com/users/mseri/orgs", "repos_url": "https://api.github.com/users/mseri/repos", "events_url": "https://api.github.com/users/mseri/events{/privacy}", "received_events_url": "https://api.github.com/users/mseri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mseri", "id": 4040623, "node_id": "MDQ6VXNlcjQwNDA2MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4040623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mseri", "html_url": "https://github.com/mseri", "followers_url": "https://api.github.com/users/mseri/followers", "following_url": "https://api.github.com/users/mseri/following{/other_user}", "gists_url": "https://api.github.com/users/mseri/gists{/gist_id}", "starred_url": "https://api.github.com/users/mseri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mseri/subscriptions", "organizations_url": "https://api.github.com/users/mseri/orgs", "repos_url": "https://api.github.com/users/mseri/repos", "events_url": "https://api.github.com/users/mseri/events{/privacy}", "received_events_url": "https://api.github.com/users/mseri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a59875c7281d4c0b0626ff272bae9926f990138", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a59875c7281d4c0b0626ff272bae9926f990138", "html_url": "https://github.com/rust-lang/rust/commit/2a59875c7281d4c0b0626ff272bae9926f990138"}], "stats": {"total": 129, "additions": 29, "deletions": 100}, "files": [{"sha": "695933370ec3ed3c6e9a9eff27322c53be5aa817", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 29, "deletions": 100, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/65547ff5a2cc3c8c040302ab04cbc3bef50beec4/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65547ff5a2cc3c8c040302ab04cbc3bef50beec4/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=65547ff5a2cc3c8c040302ab04cbc3bef50beec4", "patch": "@@ -199,6 +199,7 @@ mod ziggurat_tables;\n /// * `pdf`: the probability density function\n /// * `zero_case`: manual sampling from the tail when we chose the\n ///    bottom box (i.e. i == 0)\n+\n // the perf improvement (25-50%) is definitely worth the extra code\n // size from force-inlining.\n #[inline(always)]\n@@ -297,6 +298,7 @@ mod tests {\n         assert_eq!(rand_sample.ind_sample(&mut ::test::rng()), ConstRand(0));\n     }\n     #[test]\n+    #[rustfmt_skip]\n     fn test_weighted_choice() {\n         // this makes assumptions about the internal implementation of\n         // WeightedChoice, specifically: it doesn't reorder the items,\n@@ -317,94 +319,37 @@ mod tests {\n             }}\n         }\n \n-        t!(vec!(Weighted {\n-               weight: 1,\n-               item: 10,\n-           }),\n+        t!(vec!(Weighted { weight: 1, item: 10 }),\n            [10]);\n \n         // skip some\n-        t!(vec!(Weighted {\n-                    weight: 0,\n-                    item: 20,\n-                },\n-                Weighted {\n-                    weight: 2,\n-                    item: 21,\n-                },\n-                Weighted {\n-                    weight: 0,\n-                    item: 22,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 23,\n-                }),\n+        t!(vec!(Weighted { weight: 0, item: 20 },\n+                Weighted { weight: 2, item: 21 },\n+                Weighted { weight: 0, item: 22 },\n+                Weighted { weight: 1, item: 23 }),\n            [21, 21, 23]);\n \n         // different weights\n-        t!(vec!(Weighted {\n-                    weight: 4,\n-                    item: 30,\n-                },\n-                Weighted {\n-                    weight: 3,\n-                    item: 31,\n-                }),\n+        t!(vec!(Weighted { weight: 4, item: 30 },\n+                Weighted { weight: 3, item: 31 }),\n            [30, 30, 30, 30, 31, 31, 31]);\n \n         // check that we're binary searching\n         // correctly with some vectors of odd\n         // length.\n-        t!(vec!(Weighted {\n-                    weight: 1,\n-                    item: 40,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 41,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 42,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 43,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 44,\n-                }),\n+        t!(vec!(Weighted { weight: 1, item: 40 },\n+                Weighted { weight: 1, item: 41 },\n+                Weighted { weight: 1, item: 42 },\n+                Weighted { weight: 1, item: 43 },\n+                Weighted { weight: 1, item: 44 }),\n            [40, 41, 42, 43, 44]);\n-        t!(vec!(Weighted {\n-                    weight: 1,\n-                    item: 50,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 51,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 52,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 53,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 54,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 55,\n-                },\n-                Weighted {\n-                    weight: 1,\n-                    item: 56,\n-                }),\n+        t!(vec!(Weighted { weight: 1, item: 50 },\n+                Weighted { weight: 1, item: 51 },\n+                Weighted { weight: 1, item: 52 },\n+                Weighted { weight: 1, item: 53 },\n+                Weighted { weight: 1, item: 54 },\n+                Weighted { weight: 1, item: 55 },\n+                Weighted { weight: 1, item: 56 }),\n            [50, 51, 52, 53, 54, 55, 56]);\n     }\n \n@@ -415,35 +360,19 @@ mod tests {\n     }\n     #[test]\n     #[should_panic]\n+    #[rustfmt_skip]\n     fn test_weighted_choice_zero_weight() {\n-        WeightedChoice::new(&mut [Weighted {\n-                                      weight: 0,\n-                                      item: 0,\n-                                  },\n-                                  Weighted {\n-                                      weight: 0,\n-                                      item: 1,\n-                                  }]);\n+        WeightedChoice::new(&mut [Weighted { weight: 0, item: 0 },\n+                                  Weighted { weight: 0, item: 1 }]);\n     }\n     #[test]\n     #[should_panic]\n+    #[rustfmt_skip]\n     fn test_weighted_choice_weight_overflows() {\n         let x = (!0) as usize / 2; // x + x + 2 is the overflow\n-        WeightedChoice::new(&mut [Weighted {\n-                                      weight: x,\n-                                      item: 0,\n-                                  },\n-                                  Weighted {\n-                                      weight: 1,\n-                                      item: 1,\n-                                  },\n-                                  Weighted {\n-                                      weight: x,\n-                                      item: 2,\n-                                  },\n-                                  Weighted {\n-                                      weight: 1,\n-                                      item: 3,\n-                                  }]);\n+        WeightedChoice::new(&mut [Weighted { weight: x, item: 0 },\n+                                  Weighted { weight: 1, item: 1 },\n+                                  Weighted { weight: x, item: 2 },\n+                                  Weighted { weight: 1, item: 3 }]);\n     }\n }"}]}