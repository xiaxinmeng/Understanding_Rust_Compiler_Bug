{"sha": "5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzlmNWNkYzdhODhkY2I5NTQ1ZDJlMTUwNzgwYzhlZGVlODNiMDY=", "commit": {"author": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-20T10:35:49Z"}, "committer": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-20T10:35:49Z"}, "message": "add await expr to ast", "tree": {"sha": "7893e33a7b7cf986b14d60fd1cf50c03d2403a24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7893e33a7b7cf986b14d60fd1cf50c03d2403a24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5FNMeJ7UuhhqQiT99mIXvcbzfPoFAl0y7oUACgkQ9mIXvcbz\nfPpREg//SkTGQhBQOWRwubrfY0OlMnx5rzgQdAYrqGJYvBG9mJuxKSVRafpy82rU\nGR3sJBA2VSQucC6+KUKZgog43PZimdJgmPgXP7ZWHrPt3WnwEztLxs06toz6Ga+x\np54dd/DrTWqFJfL5A80NhoorU+gLhCBqcBXF1UpsfsdIdXdpZJtAdHHPIvFIDLRG\nHR9X5fSL/JEIL/hzO8AWbasvxMsIOZ+kKPAzvLYwstSa9PMl5UJ16Jw1J31Kgblc\nCyTyRZ9RjVWxoLHSvGtRZHqvdVJj+wpXiC810f8RApTuut2qc+Iz5/qQBXPj14Lc\n6jUZFv+JEowgiOIKcL47ZiKN4MENuiVvnGDG2zBu+aPZs71AqdYVth5vhCyTnC1J\nn6163ZGZzyRNEe042QYO8rOhR59Z7QKl3nPbsBcbHwwqFiiYeW911uVtu94U4fHY\nuKz8DyB+gom/EePS/GUmPXmDYq6hnubsq9Kd81snwA/pTaMNPLXKBp1+5DyoxZH+\nPG0O/o4Yl1k4P2FFrgFtc/q8nxwu0v1QFyO2j13PRZ51izTqlPNeSTuApuMzRS9I\n0SQSuGpysBT219v+E27kAJc04BmAKhLsuKlABgCxEqa9n0eg4oVwJ1A4oSYnW33g\n8sBb9CqL7dg1b8AB5TJ8x0seTspJB3n7ee+8JvzpUzqTIaoWUqg=\n=UHWP\n-----END PGP SIGNATURE-----", "payload": "tree 7893e33a7b7cf986b14d60fd1cf50c03d2403a24\nparent 2830d1376b05794c7bf1467fe52ad3bc0eb4ca41\nauthor Unreal Hoang <unrealhoang@gmail.com> 1563618949 +0900\ncommitter Unreal Hoang <unrealhoang@gmail.com> 1563618949 +0900\n\nadd await expr to ast\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "html_url": "https://github.com/rust-lang/rust/commit/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06/comments", "author": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2830d1376b05794c7bf1467fe52ad3bc0eb4ca41", "url": "https://api.github.com/repos/rust-lang/rust/commits/2830d1376b05794c7bf1467fe52ad3bc0eb4ca41", "html_url": "https://github.com/rust-lang/rust/commit/2830d1376b05794c7bf1467fe52ad3bc0eb4ca41"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "7e3e0a07df4769d075b4f899ba16bf9045b31cac", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "patch": "@@ -220,6 +220,9 @@ pub enum Expr {\n         expr: ExprId,\n         name: Name,\n     },\n+    Await {\n+        expr: ExprId,\n+    },\n     Try {\n         expr: ExprId,\n     },\n@@ -359,6 +362,7 @@ impl Expr {\n                 f(*rhs);\n             }\n             Expr::Field { expr, .. }\n+            | Expr::Await { expr }\n             | Expr::Try { expr }\n             | Expr::Cast { expr, .. }\n             | Expr::Ref { expr, .. }\n@@ -729,6 +733,10 @@ where\n                 };\n                 self.alloc_expr(Expr::Field { expr, name }, syntax_ptr)\n             }\n+            ast::ExprKind::AwaitExpr(e) => {\n+                let expr = self.collect_expr_opt(e.expr());\n+                self.alloc_expr(Expr::Await { expr }, syntax_ptr)\n+            }\n             ast::ExprKind::TryExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n                 self.alloc_expr(Expr::Try { expr }, syntax_ptr)"}, {"sha": "6eae595a91e2dbb8a24ab53023058c9c733d8430", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "patch": "@@ -1114,6 +1114,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 .unwrap_or(Ty::Unknown);\n                 self.insert_type_vars(ty)\n             }\n+            Expr::Await { .. } => {\n+                Ty::Unknown\n+            }\n             Expr::Try { expr } => {\n                 let inner_ty = self.infer_expr(*expr, &Expectation::none());\n                 let ty = match self.resolve_ops_try_ok() {"}, {"sha": "da8cf4ae8e15bd072b285f00aa97e4bdd64734e0", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "patch": "@@ -175,6 +175,32 @@ impl Attr {\n     }\n }\n \n+// AwaitExpr\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct AwaitExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+\n+impl AstNode for AwaitExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            AWAIT_EXPR => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) { Some(AwaitExpr { syntax }) } else { None }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+\n+impl AwaitExpr {\n+    pub fn expr(&self) -> Option<Expr> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // BinExpr\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BinExpr {\n@@ -566,7 +592,7 @@ pub struct Expr {\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-             | TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | STRUCT_LIT | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR | FIELD_EXPR | TRY_EXPR | TRY_BLOCK_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL => true,\n+             | TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | STRUCT_LIT | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | TRY_BLOCK_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL => true,\n             _ => false,\n         }\n     }\n@@ -599,6 +625,7 @@ pub enum ExprKind {\n     IndexExpr(IndexExpr),\n     MethodCallExpr(MethodCallExpr),\n     FieldExpr(FieldExpr),\n+    AwaitExpr(AwaitExpr),\n     TryExpr(TryExpr),\n     TryBlockExpr(TryBlockExpr),\n     CastExpr(CastExpr),\n@@ -669,6 +696,9 @@ impl From<MethodCallExpr> for Expr {\n impl From<FieldExpr> for Expr {\n     fn from(n: FieldExpr) -> Expr { Expr { syntax: n.syntax } }\n }\n+impl From<AwaitExpr> for Expr {\n+    fn from(n: AwaitExpr) -> Expr { Expr { syntax: n.syntax } }\n+}\n impl From<TryExpr> for Expr {\n     fn from(n: TryExpr) -> Expr { Expr { syntax: n.syntax } }\n }\n@@ -719,6 +749,7 @@ impl Expr {\n             INDEX_EXPR => ExprKind::IndexExpr(IndexExpr::cast(self.syntax.clone()).unwrap()),\n             METHOD_CALL_EXPR => ExprKind::MethodCallExpr(MethodCallExpr::cast(self.syntax.clone()).unwrap()),\n             FIELD_EXPR => ExprKind::FieldExpr(FieldExpr::cast(self.syntax.clone()).unwrap()),\n+            AWAIT_EXPR => ExprKind::AwaitExpr(AwaitExpr::cast(self.syntax.clone()).unwrap()),\n             TRY_EXPR => ExprKind::TryExpr(TryExpr::cast(self.syntax.clone()).unwrap()),\n             TRY_BLOCK_EXPR => ExprKind::TryBlockExpr(TryBlockExpr::cast(self.syntax.clone()).unwrap()),\n             CAST_EXPR => ExprKind::CastExpr(CastExpr::cast(self.syntax.clone()).unwrap()),"}, {"sha": "817dedfbfaa15fdfc290a8ea6e460e8d55dca1a2", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "patch": "@@ -477,6 +477,7 @@ Grammar(\n         ),\n         \"IndexExpr\": (),\n         \"FieldExpr\": (options: [\"Expr\", \"NameRef\"]),\n+        \"AwaitExpr\": (options: [\"Expr\"]),\n         \"TryExpr\": (options: [\"Expr\"]),\n         \"CastExpr\": (options: [\"Expr\", \"TypeRef\"]),\n         \"RefExpr\": (options: [\"Expr\"]),\n@@ -508,6 +509,7 @@ Grammar(\n                 \"IndexExpr\",\n                 \"MethodCallExpr\",\n                 \"FieldExpr\",\n+                \"AwaitExpr\",\n                 \"TryExpr\",\n                 \"TryBlockExpr\",\n                 \"CastExpr\","}]}