{"sha": "f44ae98ceec2361a47e8822a8f5018d4443018ea", "node_id": "C_kwDOAAsO6NoAKGY0NGFlOThjZWVjMjM2MWE0N2U4ODIyYThmNTAxOGQ0NDQzMDE4ZWE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-25T16:18:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-01T17:38:34Z"}, "message": "Only label place where type is needed if span is meaningful", "tree": {"sha": "a1908624ac25cb7243da3aa317335c8b1d120a46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1908624ac25cb7243da3aa317335c8b1d120a46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f44ae98ceec2361a47e8822a8f5018d4443018ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f44ae98ceec2361a47e8822a8f5018d4443018ea", "html_url": "https://github.com/rust-lang/rust/commit/f44ae98ceec2361a47e8822a8f5018d4443018ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f44ae98ceec2361a47e8822a8f5018d4443018ea/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b9775fe17893cba641a071de7e0a7c8f478c41b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9775fe17893cba641a071de7e0a7c8f478c41b", "html_url": "https://github.com/rust-lang/rust/commit/5b9775fe17893cba641a071de7e0a7c8f478c41b"}], "stats": {"total": 91, "additions": 51, "deletions": 40}, "files": [{"sha": "07dcf3876c8066d336908106958df6553c5efe29", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -313,11 +313,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn emit_inference_failure_err(\n         &self,\n         body_id: Option<hir::BodyId>,\n-        span: Span,\n+        failure_span: Span,\n         arg: GenericArg<'tcx>,\n         // FIXME(#94483): Either use this or remove it.\n         _impl_candidates: Vec<ty::TraitRef<'tcx>>,\n         error_code: TypeAnnotationNeeded,\n+        should_label_span: bool,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let arg = self.resolve_vars_if_possible(arg);\n         let arg_data = self.extract_inference_diagnostics_data(arg, None);\n@@ -326,7 +327,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // If we don't have any typeck results we're outside\n             // of a body, so we won't be able to get better info\n             // here.\n-            return self.bad_inference_failure_err(span, arg_data, error_code);\n+            return self.bad_inference_failure_err(failure_span, arg_data, error_code);\n         };\n         let typeck_results = typeck_results.borrow();\n         let typeck_results = &typeck_results;\n@@ -338,7 +339,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         let Some(InferSource { span, kind }) = local_visitor.infer_source else {\n-            return self.bad_inference_failure_err(span, arg_data, error_code)\n+            return self.bad_inference_failure_err(failure_span, arg_data, error_code)\n         };\n \n         let error_code = error_code.into();\n@@ -347,6 +348,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             &format!(\"type annotations needed{}\", kind.ty_msg(self)),\n             error_code,\n         );\n+\n+        if should_label_span && !failure_span.overlaps(span) {\n+            err.span_label(failure_span, \"type must be known at this point\");\n+        }\n+\n         match kind {\n             InferSourceKind::LetBinding { insert_span, pattern_name, ty } => {\n                 let suggestion_msg = if let Some(name) = pattern_name {"}, {"sha": "b525643330690ea7169d2e6ae1cfa36cf0d54ea5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -2002,6 +2002,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                             subst,\n                             vec![],\n                             ErrorCode::E0282,\n+                            false,\n                         )\n                         .emit();\n                     }\n@@ -2019,6 +2020,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     subst,\n                     impl_candidates,\n                     ErrorCode::E0283,\n+                    false,\n                 );\n \n                 let obligation = Obligation::new(\n@@ -2110,7 +2112,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                self.emit_inference_failure_err(body_id, span, arg, vec![], ErrorCode::E0282)\n+                self.emit_inference_failure_err(body_id, span, arg, vec![], ErrorCode::E0282, false)\n             }\n \n             ty::PredicateKind::Subtype(data) => {\n@@ -2124,7 +2126,14 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 let SubtypePredicate { a_is_expected: _, a, b } = data;\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.emit_inference_failure_err(body_id, span, a.into(), vec![], ErrorCode::E0282)\n+                self.emit_inference_failure_err(\n+                    body_id,\n+                    span,\n+                    a.into(),\n+                    vec![],\n+                    ErrorCode::E0282,\n+                    false,\n+                )\n             }\n             ty::PredicateKind::Projection(data) => {\n                 let self_ty = data.projection_ty.self_ty();\n@@ -2140,6 +2149,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         self_ty.into(),\n                         vec![],\n                         ErrorCode::E0284,\n+                        false,\n                     );\n                     err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                     err"}, {"sha": "bce2e85de845da5d623a075666afa53a59e124eb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -1538,9 +1538,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty\n         } else {\n             if !self.is_tainted_by_errors() {\n-                self.emit_inference_failure_err((**self).body_id, sp, ty.into(), vec![], E0282)\n-                    .note(\"type must be known at this point\")\n-                    .emit();\n+                self.emit_inference_failure_err(\n+                    (**self).body_id,\n+                    sp,\n+                    ty.into(),\n+                    vec![],\n+                    E0282,\n+                    true,\n+                )\n+                .emit();\n             }\n             let err = self.tcx.ty_error();\n             self.demand_suptype(sp, err, ty);"}, {"sha": "67160b98b9dc0c679ccbedb470481c38e00e4a21", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -694,6 +694,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     t.into(),\n                     vec![],\n                     E0282,\n+                    false,\n                 )\n                 .emit();\n         }\n@@ -708,6 +709,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     c.into(),\n                     vec![],\n                     E0282,\n+                    false,\n                 )\n                 .emit();\n         }"}, {"sha": "919550cac3087df1ee0e968f8c56eeb6c78d4215", "filename": "src/test/ui/array-slice-vec/infer_array_len.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -4,7 +4,6 @@ error[E0282]: type annotations needed\n LL |     let [_, _] = a.into();\n    |         ^^^^^^\n    |\n-   = note: type must be known at this point\n help: consider giving this pattern a type\n    |\n LL |     let [_, _]: _ = a.into();"}, {"sha": "70a4cbebeee98084de7f398aa1ee101ba2e5641c", "filename": "src/test/ui/array-slice-vec/slice-pat-type-mismatches.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-pat-type-mismatches.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -27,8 +27,6 @@ error[E0282]: type annotations needed\n    |\n LL |         [] => {}\n    |         ^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ed8a6fc62e9dd454c8470540b4550d95fb198886", "filename": "src/test/ui/cast/issue-85586.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fcast%2Fissue-85586.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fcast%2Fissue-85586.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-85586.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |     let b = (a + 1) as usize;\n    |             ^^^^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to previous error\n "}, {"sha": "957052feba95b202f3c81de6c7be1b9e8579671e", "filename": "src/test/ui/impl-trait/hidden-type-is-opaque-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-type-is-opaque-2.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,16 +3,12 @@ error[E0282]: type annotations needed\n    |\n LL |         cont.reify_as();\n    |         ^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error[E0282]: type annotations needed\n   --> $DIR/hidden-type-is-opaque-2.rs:18:9\n    |\n LL |         cont.reify_as();\n    |         ^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fe06810b8dff4aa643e0eb825f13dd9f39ce8e0a", "filename": "src/test/ui/issues/issue-15965.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-15965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-15965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15965.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -5,8 +5,6 @@ LL | /         { return () }\n LL | |\n LL | |     ()\n    | |______^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to previous error\n "}, {"sha": "9ac751e4dc437ccad0c2a92a15eb39870ad37d76", "filename": "src/test/ui/issues/issue-20261.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |         i.clone();\n    |           ^^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to previous error\n "}, {"sha": "31a8ca5fbfac887a3b0b01e5eab249ac87b113da", "filename": "src/test/ui/issues/issue-2151.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,9 @@ error[E0282]: type annotations needed\n    |\n LL |     let x = panic!();\n    |         ^\n+LL |     x.clone();\n+   |     - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `x` an explicit type\n    |\n LL |     let x: _ = panic!();"}, {"sha": "4c21cbfc61d435188236154561f7ff20b7e7a681", "filename": "src/test/ui/issues/issue-51116.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-51116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-51116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51116.rs?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -5,7 +5,6 @@ fn main() {\n             *tile = 0;\n             //~^ ERROR type annotations needed\n             //~| NOTE cannot infer type\n-            //~| NOTE type must be known at this point\n         }\n     }\n "}, {"sha": "c07f8735eb2c781bced02763b9a84dbf5e6a1c40", "filename": "src/test/ui/issues/issue-51116.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-51116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fissues%2Fissue-51116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51116.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |             *tile = 0;\n    |             ^^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to previous error\n "}, {"sha": "8e528f8c1db94c5198a8099ae26e4cf17db1b4ea", "filename": "src/test/ui/pattern/issue-88074-pat-range-type-inference-err.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -12,8 +12,6 @@ error[E0282]: type annotations needed\n    |\n LL |         Zero::ZERO ..= Zero::ZERO => {},\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n-   |\n-   = note: type must be known at this point\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3342b8e4002b909ce770b6aceeef2b8aaec128a9", "filename": "src/test/ui/pattern/pat-tuple-bad-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,10 @@ error[E0282]: type annotations needed\n    |\n LL |     let x;\n    |         ^\n+...\n+LL |         (..) => {}\n+   |         ---- type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `x` an explicit type\n    |\n LL |     let x: _;"}, {"sha": "2b178990850200cf60e1aa10f1c758c89ed61510", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,9 @@ error[E0282]: type annotations needed\n    |\n LL |     let x: Option<_> = None;\n    |                        ^^^^ cannot infer type of the type parameter `T` declared on the enum `Option`\n+LL |     x.unwrap().method_that_could_exist_on_some_type();\n+   |     ---------- type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |     let x: Option<_> = None::<T>;\n@@ -16,7 +17,6 @@ error[E0282]: type annotations needed\n LL |         .sum::<_>()\n    |          ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |         .sum::<_>()"}, {"sha": "d93d54e878bc8ab53b7ac1937509db9652582962", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.generic_arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,9 @@ error[E0282]: type annotations needed\n    |\n LL |     let x: Option<_> = None;\n    |                        ^^^^ cannot infer type of the type parameter `T` declared on the enum `Option`\n+LL |     x.unwrap().method_that_could_exist_on_some_type();\n+   |     ---------- type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |     let x: Option<_> = None::<T>;\n@@ -16,7 +17,6 @@ error[E0282]: type annotations needed\n LL |         .sum::<_>()\n    |          ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |         .sum::<S>()"}, {"sha": "7d240589a3f133647b2b85ccfe61f504d6f47bf7", "filename": "src/test/ui/span/method-and-field-eager-resolution.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,10 @@ error[E0282]: type annotations needed\n    |\n LL |     let mut x = Default::default();\n    |         ^^^^^\n+LL |\n+LL |     x.0;\n+   |     - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `x` an explicit type\n    |\n LL |     let mut x: _ = Default::default();\n@@ -15,8 +17,10 @@ error[E0282]: type annotations needed\n    |\n LL |     let mut x = Default::default();\n    |         ^^^^^\n+LL |\n+LL |     x[0];\n+   |     - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `x` an explicit type\n    |\n LL |     let mut x: _ = Default::default();"}, {"sha": "9dff6c64db46f93411770b051ebf84af056ad4ef", "filename": "src/test/ui/span/type-annotations-needed-expr.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -4,7 +4,6 @@ error[E0282]: type annotations needed\n LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n    |                                       ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n    |\n-   = note: type must be known at this point\n help: consider specifying the generic argument\n    |\n LL |     let _ = (vec![1,2,3]).into_iter().sum::<S>() as f64;"}, {"sha": "08f7d8c9f2db6de00cce2a1a3bbaf5377979bb2f", "filename": "src/test/ui/type-alias-impl-trait/closures_in_branches.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -14,9 +14,8 @@ error[E0282]: type annotations needed\n   --> $DIR/closures_in_branches.rs:21:10\n    |\n LL |         |x| x.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |x: _| x.len()"}, {"sha": "003c630790d2c79a53c95c99938cec7a81360cc2", "filename": "src/test/ui/typeck/issue-65611.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-65611.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |     let x = buffer.last().unwrap().0.clone();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n-   |\n-   = note: type must be known at this point\n \n error[E0609]: no field `0` on type `&_`\n   --> $DIR/issue-65611.rs:59:36"}, {"sha": "ff2a597bed065aa6e33d2c274454de1b9210c816", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44ae98ceec2361a47e8822a8f5018d4443018ea/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr?ref=f44ae98ceec2361a47e8822a8f5018d4443018ea", "patch": "@@ -3,8 +3,10 @@ error[E0282]: type annotations needed for `Option<T>`\n    |\n LL |     let mut closure0 = None;\n    |         ^^^^^^^^^^^^\n+...\n+LL |                         return c();\n+   |                                --- type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving `closure0` an explicit type, where the placeholders `_` are specified\n    |\n LL |     let mut closure0: Option<T> = None;"}]}