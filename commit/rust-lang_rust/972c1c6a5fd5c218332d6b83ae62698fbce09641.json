{"sha": "972c1c6a5fd5c218332d6b83ae62698fbce09641", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MmMxYzZhNWZkNWMyMTgzMzJkNmI4M2FlNjI2OThmYmNlMDk2NDE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-10-16T19:42:06Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-10-27T19:55:10Z"}, "message": "Fix restrictions when parsing rhs of equalities", "tree": {"sha": "3b2c7683e6b9cec5a99606732646d6b3c92dd6d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b2c7683e6b9cec5a99606732646d6b3c92dd6d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972c1c6a5fd5c218332d6b83ae62698fbce09641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972c1c6a5fd5c218332d6b83ae62698fbce09641", "html_url": "https://github.com/rust-lang/rust/commit/972c1c6a5fd5c218332d6b83ae62698fbce09641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972c1c6a5fd5c218332d6b83ae62698fbce09641/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58c299f81de4f8deb46b3e6ec045298a669c59aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/58c299f81de4f8deb46b3e6ec045298a669c59aa", "html_url": "https://github.com/rust-lang/rust/commit/58c299f81de4f8deb46b3e6ec045298a669c59aa"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "22032476c9daf94ba5952cceffdcac50a7e6a1d8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/972c1c6a5fd5c218332d6b83ae62698fbce09641/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c1c6a5fd5c218332d6b83ae62698fbce09641/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=972c1c6a5fd5c218332d6b83ae62698fbce09641", "patch": "@@ -2666,13 +2666,18 @@ impl<'a> Parser<'a> {\n         } else {\n             try!(self.parse_prefix_expr())\n         };\n-        if self.expr_is_complete(&*lhs) && min_prec == 0 {\n+        if self.expr_is_complete(&*lhs) {\n             // Semi-statement forms are odd. See https://github.com/rust-lang/rust/issues/29071\n             return Ok(lhs);\n         }\n         let cur_op_span = self.span;\n         self.expected_tokens.push(TokenType::Operator);\n         while let Some(op) = AssocOp::from_token(&self.token) {\n+            let restrictions = if op.is_assign_like() {\n+                self.restrictions & Restrictions::RESTRICTION_NO_STRUCT_LITERAL\n+            } else {\n+                self.restrictions\n+            };\n             if op.precedence() < min_prec {\n                 break;\n             }\n@@ -2706,12 +2711,19 @@ impl<'a> Parser<'a> {\n                     break\n             }\n \n+\n             let rhs = try!(match op.fixity() {\n-                Fixity::Right => self.parse_assoc_expr_with(op.precedence(), None),\n-                Fixity::Left => self.parse_assoc_expr_with(op.precedence() + 1, None),\n+                Fixity::Right => self.with_res(restrictions, |this|{\n+                    this.parse_assoc_expr_with(op.precedence(), None)\n+                }),\n+                Fixity::Left => self.with_res(restrictions, |this|{\n+                    this.parse_assoc_expr_with(op.precedence() + 1, None)\n+                }),\n                 // We currently have no non-associative operators that are not handled above by\n                 // the special cases. The code is here only for future convenience.\n-                Fixity::None => self.parse_assoc_expr_with(op.precedence() + 1, None),\n+                Fixity::None => self.with_res(restrictions, |this|{\n+                    this.parse_assoc_expr_with(op.precedence() + 1, None)\n+                }),\n             });\n \n             lhs = match op {\n@@ -2974,13 +2986,22 @@ impl<'a> Parser<'a> {\n         self.parse_expr_res(Restrictions::empty())\n     }\n \n-    /// Parse an expression, subject to the given restrictions\n-    pub fn parse_expr_res(&mut self, r: Restrictions) -> PResult<P<Expr>> {\n+    /// Evaluate the closure with restrictions in place.\n+    ///\n+    /// After the closure is evaluated, restrictions are reset.\n+    pub fn with_res<F>(&mut self, r: Restrictions, f: F) -> PResult<P<Expr>>\n+    where F: FnOnce(&mut Self) -> PResult<P<Expr>> {\n         let old = self.restrictions;\n         self.restrictions = r;\n-        let e = try!(self.parse_assoc_expr());\n+        let r = f(self);\n         self.restrictions = old;\n-        return Ok(e);\n+        return r;\n+\n+    }\n+\n+    /// Parse an expression, subject to the given restrictions\n+    pub fn parse_expr_res(&mut self, r: Restrictions) -> PResult<P<Expr>> {\n+        self.with_res(r, |this| this.parse_assoc_expr())\n     }\n \n     /// Parse the RHS of a local variable declaration (e.g. '= 14;')"}, {"sha": "bf3a8def39011bc243c8e7f239e55b72ec80b33a", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/972c1c6a5fd5c218332d6b83ae62698fbce09641/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c1c6a5fd5c218332d6b83ae62698fbce09641/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=972c1c6a5fd5c218332d6b83ae62698fbce09641", "patch": "@@ -172,6 +172,16 @@ impl AssocOp {\n         }\n     }\n \n+    pub fn is_assign_like(&self) -> bool {\n+        use self::AssocOp::*;\n+        match *self {\n+            Assign | AssignOp(_) | Inplace => true,\n+            Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual | As | Multiply | Divide |\n+            Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd |\n+            LOr | DotDot => false\n+        }\n+    }\n+\n     pub fn to_ast_binop(&self) -> Option<ast::BinOp_> {\n         use self::AssocOp::*;\n         match *self {"}, {"sha": "8e69c063f99a01812a44f10837c2fe113cfbc8fb", "filename": "src/test/run-pass/issue-29071-2.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/972c1c6a5fd5c218332d6b83ae62698fbce09641/src%2Ftest%2Frun-pass%2Fissue-29071-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972c1c6a5fd5c218332d6b83ae62698fbce09641/src%2Ftest%2Frun-pass%2Fissue-29071-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29071-2.rs?ref=972c1c6a5fd5c218332d6b83ae62698fbce09641", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn t1() -> u32 {\n+    let x;\n+    x = if true { [1, 2, 3] } else { [2, 3, 4] }[0];\n+    x\n+}\n+\n+fn t2() -> [u32; 1] {\n+    if true { [1, 2, 3]; } else { [2, 3, 4]; }\n+    [0]\n+}\n+\n+fn t3() -> u32 {\n+    let x;\n+    x = if true { i1 as F } else { i2 as F }();\n+    x\n+}\n+\n+fn t4() -> () {\n+    if true { i1 as F; } else { i2 as F; }\n+    ()\n+}\n+\n+type F = fn() -> u32;\n+fn i1() -> u32 { 1 }\n+fn i2() -> u32 { 2 }\n+\n+fn main() {\n+    assert_eq!(t1(), 1);\n+    assert_eq!(t3(), 1);\n+}"}]}