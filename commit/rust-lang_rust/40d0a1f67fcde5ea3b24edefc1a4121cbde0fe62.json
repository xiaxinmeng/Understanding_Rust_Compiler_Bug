{"sha": "40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZDBhMWY2N2ZjZGU1ZWEzYjI0ZWRlZmMxYTQxMjFjYmRlMGZlNjI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T03:30:31Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T03:30:31Z"}, "message": "Implement length access and indexing for fixed-sized arrays.", "tree": {"sha": "fc6c0160ad05f7ad98abf6baf682456d3655525c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc6c0160ad05f7ad98abf6baf682456d3655525c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62", "html_url": "https://github.com/rust-lang/rust/commit/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c5083f300f4be76d3655bcfd4945b2ac608e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c5083f300f4be76d3655bcfd4945b2ac608e2e", "html_url": "https://github.com/rust-lang/rust/commit/62c5083f300f4be76d3655bcfd4945b2ac608e2e"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "3cc70a06270802cf0a0cb20731f548666e32411e", "filename": "src/interpreter.rs", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62", "patch": "@@ -531,6 +531,20 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 }\n             }\n \n+            Len(ref lvalue) => {\n+                let ty = self.lvalue_ty(lvalue);\n+                match ty.sty {\n+                    ty::TyArray(_, n) => {\n+                        let psize = self.memory.pointer_size;\n+                        self.memory.write_uint(dest, n as u64, psize)\n+                    }\n+                    ty::TySlice(_) => {\n+                        unimplemented!()\n+                    }\n+                    _ => panic!(\"Rvalue::Len expected array or slice, got {:?}\", ty),\n+                }\n+            }\n+\n             Ref(_, _, ref lvalue) => {\n                 let ptr = try!(self.eval_lvalue(lvalue));\n                 self.memory.write_ptr(dest, ptr)\n@@ -635,16 +649,14 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         }\n     }\n \n-    fn eval_lvalue(&self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<Pointer> {\n-        let frame = self.current_frame();\n-\n+    fn eval_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<Pointer> {\n         use rustc::mir::repr::Lvalue::*;\n         let ptr = match *lvalue {\n-            ReturnPointer =>\n-                frame.return_ptr.expect(\"ReturnPointer used in a function with no return value\"),\n-            Arg(i) => frame.locals[i as usize],\n-            Var(i) => frame.locals[frame.var_offset + i as usize],\n-            Temp(i) => frame.locals[frame.temp_offset + i as usize],\n+            ReturnPointer => self.current_frame().return_ptr\n+                .expect(\"ReturnPointer used in a function with no return value\"),\n+            Arg(i) => self.current_frame().locals[i as usize],\n+            Var(i) => self.current_frame().locals[self.current_frame().var_offset + i as usize],\n+            Temp(i) => self.current_frame().locals[self.current_frame().temp_offset + i as usize],\n \n             Projection(ref proj) => {\n                 let base_ptr = try!(self.eval_lvalue(&proj.base));\n@@ -667,7 +679,19 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                     // FIXME(tsion): Wrong for fat pointers.\n                     Deref => try!(self.memory.read_ptr(base_ptr)),\n \n-                    _ => unimplemented!(),\n+                    Index(ref operand) => {\n+                        let base_ty = self.lvalue_ty(&proj.base);\n+                        let elem_size = match base_ty.sty {\n+                            ty::TyArray(elem_ty, _) => self.ty_size(elem_ty),\n+                            ty::TySlice(elem_ty) => self.ty_size(elem_ty),\n+                            _ => panic!(\"indexing expected an array or slice, got {:?}\", base_ty),\n+                        };\n+                        let n_ptr = try!(self.eval_operand(operand));\n+                        let n = try!(self.memory.read_uint(n_ptr, self.memory.pointer_size));\n+                        base_ptr.offset(n as isize * elem_size as isize)\n+                    }\n+\n+                    ref p => panic!(\"can't handle lvalue projection: {:?}\", p),\n                 }\n             }\n \n@@ -720,6 +744,10 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         }\n     }\n \n+    fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> ty::Ty<'tcx> {\n+        self.current_frame().mir.lvalue_ty(self.tcx, lvalue).to_ty(self.tcx)\n+    }\n+\n     fn monomorphize(&self, ty: ty::Ty<'tcx>) -> ty::Ty<'tcx> {\n         let substituted = ty.subst(self.tcx, self.current_substs());\n         infer::normalize_associated_type(self.tcx, &substituted)\n@@ -762,7 +790,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 self.make_aggregate_repr(variants)\n             }\n \n-            ty::TyArray(ref elem_ty, length) => Repr::Array {\n+            ty::TyArray(elem_ty, length) => Repr::Array {\n                 elem_size: self.ty_size(elem_ty),\n                 length: length,\n             },\n@@ -823,7 +851,6 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             size: max_variant_size + discr_size,\n             variants: variants,\n         }\n-\n     }\n \n     pub fn read_primval(&mut self, ptr: Pointer, ty: ty::Ty<'tcx>) -> EvalResult<PrimVal> {"}, {"sha": "2939acfeaee158f85abd2e9fbaa05c5c8d07144a", "filename": "test/arrays.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62/test%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62/test%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Farrays.rs?ref=40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62", "patch": "@@ -17,7 +17,13 @@ fn array_array() -> [[u8; 2]; 3] {\n }\n \n #[miri_run]\n-fn indexing() -> i32 {\n+fn index_unsafe() -> i32 {\n     let a = [0, 10, 20, 30];\n     unsafe { *a.get_unchecked(2) }\n }\n+\n+#[miri_run]\n+fn index() -> i32 {\n+    let a = [0, 10, 20, 30];\n+    a[2]\n+}"}]}