{"sha": "2584d9216d717fba24ba5770275b2621a50babfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ODRkOTIxNmQ3MTdmYmEyNGJhNTc3MDI3NWIyNjIxYTUwYmFiZmU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-30T18:25:46Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-30T18:25:46Z"}, "message": "Rollup merge of #55011 - vi:panic_immediate_abort, r=alexcrichton\n\nAdd libstd Cargo feature \"panic_immediate_abort\"\n\nIt stop asserts and panics from libstd to automatically\ninclude string output and formatting code.\n\nUse case: developing static executables smaller than 50 kilobytes,\nwhere usual formatting code is excessive while keeping debuggability\nin debug mode.\n\nMay resolve #54981.", "tree": {"sha": "e1fefad36333aa2e4fe69ae5cef462cb2503c93e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1fefad36333aa2e4fe69ae5cef462cb2503c93e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2584d9216d717fba24ba5770275b2621a50babfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlwBgKsACgkQ/vbIBR0O\nATwxDRAAxSJ12JlqRYE71xIIYop/iXSGacog2SaKsn1CE4ofyxxnu29YKa0mpLAw\nMiEn0a65i8pxxZewBDiUnOL7XmxR3uykPfim/zzmwDA9FXeWhDNAMgnlGquc2BGX\nzWC4VsBUcXdxJ5bzIFou01LVsC1WQ6FH5YdNSAGyctAu3hABMVM7eFQbmKdBUs0v\n9uhmiY7WOhsm/7f8dfVMQ4WGMCrexP4x7uHlbUFTqqwbCbtaBkjyaMigZoYL+lw9\n+XXKmIGotrHfXgROmM5B1oLqmyVXAlYdfFmFJWwrSVJ8l2SbwRvFFv6lVfHzXX22\nkhURQ+GTldvfaCdo7973Se3LGRQARaRJGjFl5Z7Rke4xJdqfxxPvI0+cMpVFFZQv\nF82KG6SDDL3Ny+zZwhz1w+qGKB7hJlAg8J/mBSNjK5KXDQwf3aiCVinTvM8eTpP2\n3br1nEMUkBXNE9Ryuml/eWpzEv1lwbGRVQjZP10gowksd3/fn35whozoBlTtms4T\nQo9Rhk3OZkCGPdDxukqKg1jBS+m3dbLodBP8aqXpMrIZPRvWa652ytXC/XpYZMDf\n3l/XDbRcQyzNZO+dVcuTa430pEkDiJsvKpZxmI4bHeh/RnZ47c7779WAowrhEg8z\npUkY94WSn4Enyrf/KgEHTbdeOqCtYHkvg/BGZvEKZpdURLCjNdE=\n=KMWh\n-----END PGP SIGNATURE-----", "payload": "tree e1fefad36333aa2e4fe69ae5cef462cb2503c93e\nparent 440bda4dc8ba88897490dea25a93448a6bca92f1\nparent f18a8c6163fa3b1eef5aabd1baf1eef2b9789c46\nauthor kennytm <kennytm@gmail.com> 1543602346 +0800\ncommitter kennytm <kennytm@gmail.com> 1543602346 +0800\n\nRollup merge of #55011 - vi:panic_immediate_abort, r=alexcrichton\n\nAdd libstd Cargo feature \"panic_immediate_abort\"\n\nIt stop asserts and panics from libstd to automatically\ninclude string output and formatting code.\n\nUse case: developing static executables smaller than 50 kilobytes,\nwhere usual formatting code is excessive while keeping debuggability\nin debug mode.\n\nMay resolve #54981.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2584d9216d717fba24ba5770275b2621a50babfe", "html_url": "https://github.com/rust-lang/rust/commit/2584d9216d717fba24ba5770275b2621a50babfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2584d9216d717fba24ba5770275b2621a50babfe/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "440bda4dc8ba88897490dea25a93448a6bca92f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/440bda4dc8ba88897490dea25a93448a6bca92f1", "html_url": "https://github.com/rust-lang/rust/commit/440bda4dc8ba88897490dea25a93448a6bca92f1"}, {"sha": "f18a8c6163fa3b1eef5aabd1baf1eef2b9789c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/f18a8c6163fa3b1eef5aabd1baf1eef2b9789c46", "html_url": "https://github.com/rust-lang/rust/commit/f18a8c6163fa3b1eef5aabd1baf1eef2b9789c46"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "7fd61f07d5e7f64fad114813541003baeee4b859", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2584d9216d717fba24ba5770275b2621a50babfe/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2584d9216d717fba24ba5770275b2621a50babfe/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=2584d9216d717fba24ba5770275b2621a50babfe", "patch": "@@ -21,3 +21,7 @@ path = \"../libcore/benches/lib.rs\"\n \n [dev-dependencies]\n rand = \"0.5\"\n+\n+[features]\n+# Make panics and failed asserts immediately abort without formatting any message\n+panic_immediate_abort = []"}, {"sha": "aa18a60fc0f6df7665d1f81a277f98961a9f823d", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2584d9216d717fba24ba5770275b2621a50babfe/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2584d9216d717fba24ba5770275b2621a50babfe/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=2584d9216d717fba24ba5770275b2621a50babfe", "patch": "@@ -39,9 +39,16 @@\n use fmt;\n use panic::{Location, PanicInfo};\n \n-#[cold] #[inline(never)] // this is the slow path, always\n+#[cold]\n+// never inline unless panic_immediate_abort to avoid code\n+// bloat at the call sites as much as possible\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[lang = \"panic\"]\n pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n     // reduce size overhead. The format_args! macro uses str's Display trait to\n     // write expr, which calls Formatter::pad, which must accommodate string\n@@ -52,16 +59,27 @@ pub fn panic(expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]), &(file, line, col))\n }\n \n-#[cold] #[inline(never)]\n+#[cold]\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[lang = \"panic_bounds_check\"]\n fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                      index: usize, len: usize) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n     panic_fmt(format_args!(\"index out of bounds: the len is {} but the index is {}\",\n                            len, index), file_line_col)\n }\n \n-#[cold] #[inline(never)]\n+#[cold]\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { super::intrinsics::abort() }\n+    }\n+\n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n     #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n     extern \"Rust\" {"}, {"sha": "c1446218367e474e6d577445fcf1fb4796cf9150", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2584d9216d717fba24ba5770275b2621a50babfe/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2584d9216d717fba24ba5770275b2621a50babfe/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=2584d9216d717fba24ba5770275b2621a50babfe", "patch": "@@ -47,6 +47,9 @@ backtrace = []\n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]\n \n+# Make panics and failed asserts immediately abort without formatting any message\n+panic_immediate_abort = [\"core/panic_immediate_abort\"]\n+\n # An off-by-default feature which enables a linux-syscall-like ABI for libstd to\n # interoperate with the host environment. Currently not well documented and\n # requires rebuilding the standard library to use it."}, {"sha": "4930d3566081494061fa617082b8badf6b0cbe4c", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2584d9216d717fba24ba5770275b2621a50babfe/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2584d9216d717fba24ba5770275b2621a50babfe/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=2584d9216d717fba24ba5770275b2621a50babfe", "patch": "@@ -334,9 +334,17 @@ pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n-#[inline(never)] #[cold]\n+#[cold]\n+// If panic_immediate_abort, inline the abort call,\n+// otherwise avoid inlining because of it is cold path.\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n pub fn begin_panic_fmt(msg: &fmt::Arguments,\n                        file_line_col: &(&'static str, u32, u32)) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { intrinsics::abort() }\n+    }\n+\n     let (file, line, col) = *file_line_col;\n     let info = PanicInfo::internal_constructor(\n         Some(msg),\n@@ -398,8 +406,15 @@ fn continue_panic_fmt(info: &PanicInfo) -> ! {\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n #[cfg_attr(not(test), lang = \"begin_panic\")]\n-#[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n+// never inline unless panic_immediate_abort to avoid code\n+// bloat at the call sites as much as possible\n+#[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n+#[cold]\n pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u32)) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        unsafe { intrinsics::abort() }\n+    }\n+\n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,\n     // but then again we're not really ready for panic on OOM anyway. If"}]}