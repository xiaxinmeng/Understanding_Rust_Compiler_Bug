{"sha": "a476683c8478f548adee406e036328412a0f9d19", "node_id": "C_kwDOAAsO6NoAKGE0NzY2ODNjODQ3OGY1NDhhZGVlNDA2ZTAzNjMyODQxMmEwZjlkMTk", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-12-13T17:57:41Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2023-02-01T20:56:28Z"}, "message": "rustc_parse: revert conversion of \"non-item in item list\" diagnostic\n\n#[derive(Subdiagnostic)] does not allow multiple subdiagnostics on one\nvariant, as in NonItemInItemListSub::Other.", "tree": {"sha": "37814f5d117bad0464ff70b29196545cd53b4da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37814f5d117bad0464ff70b29196545cd53b4da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a476683c8478f548adee406e036328412a0f9d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a476683c8478f548adee406e036328412a0f9d19", "html_url": "https://github.com/rust-lang/rust/commit/a476683c8478f548adee406e036328412a0f9d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a476683c8478f548adee406e036328412a0f9d19/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7631b12e3e820f00780fff345019436d36158159", "url": "https://api.github.com/repos/rust-lang/rust/commits/7631b12e3e820f00780fff345019436d36158159", "html_url": "https://github.com/rust-lang/rust/commit/7631b12e3e820f00780fff345019436d36158159"}], "stats": {"total": 75, "additions": 25, "deletions": 50}, "files": [{"sha": "5a7e28ce5232ad1398119b6df3f138fe3f3ece45", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a476683c8478f548adee406e036328412a0f9d19/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a476683c8478f548adee406e036328412a0f9d19/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=a476683c8478f548adee406e036328412a0f9d19", "patch": "@@ -1446,38 +1446,6 @@ pub(crate) struct ExpectedTraitInTraitImplFoundType {\n     pub span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(parse_non_item_in_item_list)]\n-pub(crate) struct NonItemInItemList {\n-    #[primary_span]\n-    pub span: Span,\n-    #[subdiagnostic]\n-    pub sub: NonItemInItemListSub,\n-    #[suggestion(suggestion_remove_semicolon, code = \"\", applicability = \"maybe-incorrect\")]\n-    pub remove_semicolon: Option<Span>,\n-}\n-\n-#[derive(Subdiagnostic)]\n-pub(crate) enum NonItemInItemListSub {\n-    #[suggestion(\n-        suggestion_use_const_not_let,\n-        code = \"const\",\n-        applicability = \"machine-applicable\"\n-    )]\n-    Let {\n-        #[primary_span]\n-        span: Span,\n-    },\n-    Other {\n-        #[label(label_list_start)]\n-        list_start: Span,\n-        #[label(label_non_item)]\n-        non_item: Span,\n-        #[label(label_list_end)]\n-        list_end: Span,\n-    },\n-}\n-\n #[derive(Diagnostic)]\n #[diag(parse_bounds_not_allowed_on_trait_aliases)]\n pub(crate) struct BoundsNotAllowedOnTraitAliases {"}, {"sha": "e401570912fb1aef9b63d02ddbe28a43b34dfbbd", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a476683c8478f548adee406e036328412a0f9d19/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a476683c8478f548adee406e036328412a0f9d19/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=a476683c8478f548adee406e036328412a0f9d19", "patch": "@@ -4,9 +4,9 @@ use crate::errors::{\n     DefaultNotFollowedByItem, DocCommentDoesNotDocumentAnything, EnumStructMutuallyExclusive,\n     ExpectedTraitInTraitImplFoundType, ExternCrateNameWithDashes, ExternCrateNameWithDashesSugg,\n     ExternItemCannotBeConst, MissingConstType, MissingForInTraitImpl,\n-    MissingKeywordForItemDefinition, MissingTraitInTraitImpl, NonItemInItemList,\n-    NonItemInItemListSub, SelfArgumentPointer, TraitAliasCannotBeAuto, TraitAliasCannotBeUnsafe,\n-    UnexpectedTokenAfterStructName, UseEmptyBlockNotSemi, VisibilityNotFollowedByItem,\n+    MissingKeywordForItemDefinition, MissingTraitInTraitImpl, SelfArgumentPointer,\n+    TraitAliasCannotBeAuto, TraitAliasCannotBeUnsafe, UnexpectedTokenAfterStructName,\n+    UseEmptyBlockNotSemi, VisibilityNotFollowedByItem,\n };\n \n use super::diagnostics::{dummy_arg, ConsumeClosingDelim};\n@@ -703,22 +703,29 @@ impl<'a> Parser<'a> {\n                     let non_item_span = self.token.span;\n                     let is_let = self.token.is_keyword(kw::Let);\n \n+                    let mut err = self.struct_span_err(non_item_span, \"non-item in item list\");\n                     self.consume_block(Delimiter::Brace, ConsumeClosingDelim::Yes);\n-\n-                    self.sess.emit_err(NonItemInItemList {\n-                        span: non_item_span,\n-                        sub: if is_let {\n-                            NonItemInItemListSub::Let { span: non_item_span }\n-                        } else {\n-                            NonItemInItemListSub::Other {\n-                                list_start: open_brace_span,\n-                                non_item: non_item_span,\n-                                list_end: self.prev_token.span,\n-                            }\n-                        },\n-                        remove_semicolon: is_unnecessary_semicolon.then_some(semicolon_span),\n-                    });\n-\n+                    if is_let {\n+                        err.span_suggestion(\n+                            non_item_span,\n+                            \"consider using `const` instead of `let` for associated const\",\n+                            \"const\",\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        err.span_label(open_brace_span, \"item list starts here\")\n+                            .span_label(non_item_span, \"non-item starts here\")\n+                            .span_label(self.prev_token.span, \"item list ends here\");\n+                    }\n+                    if is_unnecessary_semicolon {\n+                        err.span_suggestion(\n+                            semicolon_span,\n+                            \"consider removing this semicolon\",\n+                            \"\",\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    err.emit();\n                     break;\n                 }\n                 Ok(Some(item)) => items.extend(item),"}]}