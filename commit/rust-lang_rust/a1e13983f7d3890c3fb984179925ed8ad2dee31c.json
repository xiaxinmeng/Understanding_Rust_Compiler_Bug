{"sha": "a1e13983f7d3890c3fb984179925ed8ad2dee31c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZTEzOTgzZjdkMzg5MGMzZmI5ODQxNzk5MjVlZDhhZDJkZWUzMWM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-19T14:47:52Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-06T11:57:51Z"}, "message": "Have a cached unreachable block inside MIR state\n\nIt is useful for various cases where direct unreachable cannot be translated and a separate block\nis necessary.", "tree": {"sha": "0b30bab00523430827ada0717e6822f2b83e42e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b30bab00523430827ada0717e6822f2b83e42e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1e13983f7d3890c3fb984179925ed8ad2dee31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e13983f7d3890c3fb984179925ed8ad2dee31c", "html_url": "https://github.com/rust-lang/rust/commit/a1e13983f7d3890c3fb984179925ed8ad2dee31c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1e13983f7d3890c3fb984179925ed8ad2dee31c/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "html_url": "https://github.com/rust-lang/rust/commit/4e86dcdb7295e88d3ccc28b508ba69a24fefa371"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "f59cdb74b625de397a67a611681a57254fd18115", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e13983f7d3890c3fb984179925ed8ad2dee31c/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e13983f7d3890c3fb984179925ed8ad2dee31c/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=a1e13983f7d3890c3fb984179925ed8ad2dee31c", "patch": "@@ -265,7 +265,7 @@ pub enum Terminator<'tcx> {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable)]\n pub enum CallTargets {\n     /// The only target that should be entered when function returns normally.\n     Return(BasicBlock),"}, {"sha": "72d5709e02229bb7cffcd01887396f7daf044ae4", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1e13983f7d3890c3fb984179925ed8ad2dee31c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e13983f7d3890c3fb984179925ed8ad2dee31c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=a1e13983f7d3890c3fb984179925ed8ad2dee31c", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n use llvm::BasicBlockRef;\n-use middle::infer;\n-use middle::ty;\n use rustc::mir::repr as mir;\n use trans::adt;\n use trans::base;\n use trans::build;\n+use trans::attributes;\n use trans::common::{self, Block};\n use trans::debuginfo::DebugLoc;\n use trans::type_of;\n+use trans::type_::Type;\n \n use super::MirContext;\n use super::operand::OperandValue::{FatPtr, Immediate, Ref};\n@@ -56,10 +56,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n                 // The else branch of the Switch can't be hit, so branch to an unreachable\n                 // instruction so LLVM knows that\n-                // FIXME it might be nice to have just one such block (created lazilly), we could\n-                // store it in the \"MIR trans\" state.\n-                let unreachable_blk = bcx.fcx.new_temp_block(\"enum-variant-unreachable\");\n-                build::Unreachable(unreachable_blk);\n+                let unreachable_blk = self.unreachable_block();\n \n                 let switch = build::Switch(bcx, discr, unreachable_blk.llbb, targets.len());\n                 assert_eq!(adt_def.variants.len(), targets.len());\n@@ -164,6 +161,18 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         }\n     }\n \n+    fn unreachable_block(&mut self) -> Block<'bcx, 'tcx> {\n+        match self.unreachable_block {\n+            Some(b) => b,\n+            None => {\n+                let bl = self.fcx.new_block(false, \"unreachable\", None);\n+                build::Unreachable(bl);\n+                self.unreachable_block = Some(bl);\n+                bl\n+            }\n+        }\n+    }\n+\n     fn bcx(&self, bb: mir::BasicBlock) -> Block<'bcx, 'tcx> {\n         self.blocks[bb.index()]\n     }"}, {"sha": "8eb06731ea3ae3c68e821d5968363795dd9c043f", "filename": "src/librustc_trans/trans/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1e13983f7d3890c3fb984179925ed8ad2dee31c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e13983f7d3890c3fb984179925ed8ad2dee31c/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs?ref=a1e13983f7d3890c3fb984179925ed8ad2dee31c", "patch": "@@ -28,6 +28,9 @@ use self::operand::OperandRef;\n pub struct MirContext<'bcx, 'tcx:'bcx> {\n     mir: &'bcx mir::Mir<'tcx>,\n \n+    /// Function context\n+    fcx: &'bcx common::FunctionContext<'bcx, 'tcx>,\n+\n     /// When unwinding is initiated, we have to store this personality\n     /// value somewhere so that we can load it and re-use it in the\n     /// resume instruction. The personality is (afaik) some kind of\n@@ -40,6 +43,9 @@ pub struct MirContext<'bcx, 'tcx:'bcx> {\n     /// A `Block` for each MIR `BasicBlock`\n     blocks: Vec<Block<'bcx, 'tcx>>,\n \n+    /// Cached unreachable block\n+    unreachable_block: Option<Block<'bcx, 'tcx>>,\n+\n     /// An LLVM alloca for each MIR `VarDecl`\n     vars: Vec<LvalueRef<'tcx>>,\n \n@@ -116,8 +122,10 @@ pub fn trans_mir<'bcx, 'tcx>(bcx: Block<'bcx, 'tcx>) {\n \n     let mut mircx = MirContext {\n         mir: mir,\n+        fcx: fcx,\n         llpersonalityslot: None,\n         blocks: block_bcxs,\n+        unreachable_block: None,\n         vars: vars,\n         temps: temps,\n         args: args,"}]}