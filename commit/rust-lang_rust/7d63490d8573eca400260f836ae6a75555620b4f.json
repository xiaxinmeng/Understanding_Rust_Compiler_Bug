{"sha": "7d63490d8573eca400260f836ae6a75555620b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNjM0OTBkODU3M2VjYTQwMDI2MGY4MzZhZTZhNzU1NTU2MjBiNGY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-29T12:44:26Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-01-29T12:44:26Z"}, "message": "Update to the latest libsyntax changes", "tree": {"sha": "76ac7bf4b746c2cc48e67f155e428a11c8e98233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76ac7bf4b746c2cc48e67f155e428a11c8e98233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d63490d8573eca400260f836ae6a75555620b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d63490d8573eca400260f836ae6a75555620b4f", "html_url": "https://github.com/rust-lang/rust/commit/7d63490d8573eca400260f836ae6a75555620b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d63490d8573eca400260f836ae6a75555620b4f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5977f516b1590063454aacb2ebd6b97aaeae3541", "url": "https://api.github.com/repos/rust-lang/rust/commits/5977f516b1590063454aacb2ebd6b97aaeae3541", "html_url": "https://github.com/rust-lang/rust/commit/5977f516b1590063454aacb2ebd6b97aaeae3541"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "b9009598f1a527527a32d472ddacbc203c163c7b", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d63490d8573eca400260f836ae6a75555620b4f/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d63490d8573eca400260f836ae6a75555620b4f/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=7d63490d8573eca400260f836ae6a75555620b4f", "patch": "@@ -278,7 +278,7 @@ pub fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) = expr.node {\n+    if let ast::ExprKind::Closure(capture, _, ref fn_decl, ref body, _) = expr.node {\n         let body = match body.node {\n             ast::ExprKind::Block(ref block)\n                 if !is_unsafe_block(block) && is_simple_block(block, context.codemap) =>"}, {"sha": "dc18a7f532efcc117f8ec11b63646ad495809e79", "filename": "src/expr.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7d63490d8573eca400260f836ae6a75555620b4f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d63490d8573eca400260f836ae6a75555620b4f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=7d63490d8573eca400260f836ae6a75555620b4f", "patch": "@@ -135,16 +135,16 @@ pub fn format_expr(\n         ast::ExprKind::AssignOp(ref op, ref lhs, ref rhs) => {\n             rewrite_assignment(context, lhs, rhs, Some(op), shape)\n         }\n-        ast::ExprKind::Continue(ref opt_ident) => {\n-            let id_str = match *opt_ident {\n-                Some(ident) => format!(\" {}\", ident.node),\n+        ast::ExprKind::Continue(ref opt_label) => {\n+            let id_str = match *opt_label {\n+                Some(label) => format!(\" {}\", label.ident),\n                 None => String::new(),\n             };\n             Some(format!(\"continue{}\", id_str))\n         }\n-        ast::ExprKind::Break(ref opt_ident, ref opt_expr) => {\n-            let id_str = match *opt_ident {\n-                Some(ident) => format!(\" {}\", ident.node),\n+        ast::ExprKind::Break(ref opt_label, ref opt_expr) => {\n+            let id_str = match *opt_label {\n+                Some(label) => format!(\" {}\", label.ident),\n                 None => String::new(),\n             };\n \n@@ -159,7 +159,7 @@ pub fn format_expr(\n         } else {\n             Some(\"yield\".to_string())\n         },\n-        ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n+        ast::ExprKind::Closure(capture, _, ref fn_decl, ref body, _) => {\n             closures::rewrite_closure(capture, fn_decl, body, expr.span, context, shape)\n         }\n         ast::ExprKind::Try(..)\n@@ -718,7 +718,7 @@ struct ControlFlow<'a> {\n     cond: Option<&'a ast::Expr>,\n     block: &'a ast::Block,\n     else_block: Option<&'a ast::Expr>,\n-    label: Option<ast::SpannedIdent>,\n+    label: Option<ast::Label>,\n     pat: Option<&'a ast::Pat>,\n     keyword: &'a str,\n     matcher: &'a str,\n@@ -795,11 +795,7 @@ impl<'a> ControlFlow<'a> {\n         }\n     }\n \n-    fn new_loop(\n-        block: &'a ast::Block,\n-        label: Option<ast::SpannedIdent>,\n-        span: Span,\n-    ) -> ControlFlow<'a> {\n+    fn new_loop(block: &'a ast::Block, label: Option<ast::Label>, span: Span) -> ControlFlow<'a> {\n         ControlFlow {\n             cond: None,\n             block: block,\n@@ -819,7 +815,7 @@ impl<'a> ControlFlow<'a> {\n         pat: Option<&'a ast::Pat>,\n         cond: &'a ast::Expr,\n         block: &'a ast::Block,\n-        label: Option<ast::SpannedIdent>,\n+        label: Option<ast::Label>,\n         span: Span,\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n@@ -844,7 +840,7 @@ impl<'a> ControlFlow<'a> {\n         pat: &'a ast::Pat,\n         cond: &'a ast::Expr,\n         block: &'a ast::Block,\n-        label: Option<ast::SpannedIdent>,\n+        label: Option<ast::Label>,\n         span: Span,\n     ) -> ControlFlow<'a> {\n         ControlFlow {\n@@ -1166,9 +1162,9 @@ impl<'a> Rewrite for ControlFlow<'a> {\n     }\n }\n \n-fn rewrite_label(label: Option<ast::SpannedIdent>) -> Cow<'static, str> {\n-    match label {\n-        Some(ident) => Cow::from(format!(\"{}: \", ident.node)),\n+fn rewrite_label(opt_label: Option<ast::Label>) -> Cow<'static, str> {\n+    match opt_label {\n+        Some(label) => Cow::from(format!(\"{}: \", label.ident)),\n         None => Cow::from(\"\"),\n     }\n }"}]}