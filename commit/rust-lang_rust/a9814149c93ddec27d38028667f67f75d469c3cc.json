{"sha": "a9814149c93ddec27d38028667f67f75d469c3cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ODE0MTQ5YzkzZGRlYzI3ZDM4MDI4NjY3ZjY3Zjc1ZDQ2OWMzY2M=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-09T21:14:54Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-10T22:53:01Z"}, "message": "Align dots in chained expressions", "tree": {"sha": "5431fe5b1fa7b826d5169122a993451e1bef38cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5431fe5b1fa7b826d5169122a993451e1bef38cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9814149c93ddec27d38028667f67f75d469c3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9814149c93ddec27d38028667f67f75d469c3cc", "html_url": "https://github.com/rust-lang/rust/commit/a9814149c93ddec27d38028667f67f75d469c3cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9814149c93ddec27d38028667f67f75d469c3cc/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95ef9dedb48061617dd41f8f70b00bf636d0ca99", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ef9dedb48061617dd41f8f70b00bf636d0ca99", "html_url": "https://github.com/rust-lang/rust/commit/95ef9dedb48061617dd41f8f70b00bf636d0ca99"}], "stats": {"total": 266, "additions": 135, "deletions": 131}, "files": [{"sha": "4556946649a56d16fa28c39b5fc080a916db8023", "filename": "src/chains.rs", "status": "modified", "additions": 50, "deletions": 49, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=a9814149c93ddec27d38028667f67f75d469c3cc", "patch": "@@ -20,61 +20,58 @@\n // argument function argument strategy.\n \n use rewrite::{Rewrite, RewriteContext};\n-use utils::{make_indent, extra_offset};\n+use utils::make_indent;\n use expr::rewrite_call;\n \n use syntax::{ast, ptr};\n use syntax::codemap::{mk_sp, Span};\n use syntax::print::pprust;\n \n-pub fn rewrite_chain(orig_expr: &ast::Expr,\n+pub fn rewrite_chain(mut expr: &ast::Expr,\n                      context: &RewriteContext,\n                      width: usize,\n                      offset: usize)\n                      -> Option<String> {\n-    let mut expr = orig_expr;\n-    let mut rewrites = Vec::new();\n-    let indent = offset + context.config.tab_spaces;\n-    let max_width = try_opt!(context.config.max_width.checked_sub(indent));\n+    let total_span = expr.span;\n+    let mut subexpr_list = vec![expr];\n \n-    while let Some(pair) = pop_expr_chain(expr, orig_expr.span, context, max_width, indent) {\n-        let (rewrite, parent_expr) = pair;\n-\n-        rewrites.push(try_opt!(rewrite));\n-        expr = parent_expr;\n+    while let Some(subexpr) = pop_expr_chain(expr) {\n+        subexpr_list.push(subexpr);\n+        expr = subexpr;\n     }\n \n+    let parent = subexpr_list.pop().unwrap();\n     let parent_rewrite = try_opt!(expr.rewrite(context, width, offset));\n+    let (extra_indent, extend) = if !parent_rewrite.contains('\\n') && is_continuable(parent) ||\n+                                    parent_rewrite.len() <= context.config.tab_spaces {\n+        (parent_rewrite.len(), true)\n+    } else {\n+        (context.config.tab_spaces, false)\n+    };\n+    let indent = offset + extra_indent;\n+\n+    let max_width = try_opt!(width.checked_sub(extra_indent));\n+    let rewrites = try_opt!(subexpr_list.into_iter()\n+                                        .rev()\n+                                        .map(|e| {\n+                                            rewrite_chain_expr(e,\n+                                                               total_span,\n+                                                               context,\n+                                                               max_width,\n+                                                               indent)\n+                                        })\n+                                        .collect::<Option<Vec<_>>>());\n+\n     let total_width = rewrites.iter().fold(0, |a, b| a + b.len()) + parent_rewrite.len();\n     let fits_single_line = total_width <= width && rewrites.iter().all(|s| !s.contains('\\n'));\n \n-    if rewrites.len() == 1 && !fits_single_line &&\n-       (is_continuable(expr) || parent_rewrite.len() <= context.config.tab_spaces) {\n-        let extra_offset = extra_offset(&parent_rewrite, offset);\n-        let offset = offset + extra_offset;\n-        let max_width = try_opt!(width.checked_sub(extra_offset));\n-\n-        let rerewrite = pop_expr_chain(orig_expr, orig_expr.span, context, max_width, offset)\n-                            .unwrap()\n-                            .0;\n-\n-        return Some(format!(\"{}{}\", parent_rewrite, try_opt!(rerewrite)));\n-    }\n-\n     let connector = if fits_single_line {\n         String::new()\n     } else {\n         format!(\"\\n{}\", make_indent(indent))\n     };\n \n-    // FIXME: don't do this. There's a more efficient way. VecDeque?\n-    rewrites.reverse();\n-\n-    // Put the first link on the same line as parent, if it fits.\n-    let first_connector = if parent_rewrite.len() + rewrites[0].len() <= width &&\n-                             is_continuable(expr) &&\n-                             !rewrites[0].contains('\\n') ||\n-                             parent_rewrite.len() <= context.config.tab_spaces {\n+    let first_connector = if extend {\n         \"\"\n     } else {\n         &connector[..]\n@@ -83,32 +80,36 @@ pub fn rewrite_chain(orig_expr: &ast::Expr,\n     Some(format!(\"{}{}{}\", parent_rewrite, first_connector, rewrites.join(&connector)))\n }\n \n-// Returns None when the expression is not a chainable. Otherwise, rewrites the\n-// outermost chain element and returns the remaining chain.\n-fn pop_expr_chain<'a>(expr: &'a ast::Expr,\n+fn pop_expr_chain<'a>(expr: &'a ast::Expr) -> Option<&'a ast::Expr> {\n+    match expr.node {\n+        ast::Expr_::ExprMethodCall(_, _, ref expressions) => {\n+            Some(&expressions[0])\n+        }\n+        ast::Expr_::ExprTupField(ref subexpr, _) |\n+        ast::Expr_::ExprField(ref subexpr, _) => {\n+            Some(subexpr)\n+        }\n+        _ => None,\n+    }\n+}\n+\n+fn rewrite_chain_expr(expr: &ast::Expr,\n                       span: Span,\n                       context: &RewriteContext,\n                       width: usize,\n                       offset: usize)\n-                      -> Option<(Option<String>, &'a ast::Expr)> {\n+                      -> Option<String> {\n     match expr.node {\n         ast::Expr_::ExprMethodCall(ref method_name, ref types, ref expressions) => {\n-            Some((rewrite_method_call(method_name.node,\n-                                      types,\n-                                      expressions,\n-                                      span,\n-                                      context,\n-                                      width,\n-                                      offset),\n-                  &expressions[0]))\n+            rewrite_method_call(method_name.node, types, expressions, span, context, width, offset)\n         }\n-        ast::Expr_::ExprField(ref subexpr, ref field) => {\n-            Some((Some(format!(\".{}\", field.node)), subexpr))\n+        ast::Expr_::ExprField(_, ref field) => {\n+            Some(format!(\".{}\", field.node))\n         }\n-        ast::Expr_::ExprTupField(ref subexpr, ref field) => {\n-            Some((Some(format!(\".{}\", field.node)), subexpr))\n+        ast::Expr_::ExprTupField(_, ref field) => {\n+            Some(format!(\".{}\", field.node))\n         }\n-        _ => None,\n+        _ => unreachable!(),\n     }\n }\n "}, {"sha": "986b5d50a1fa8a8bf2733c634103d10a8dbd861d", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=a9814149c93ddec27d38028667f67f75d469c3cc", "patch": "@@ -1017,8 +1017,8 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     };\n \n     let field_iter = fields.into_iter()\n-                         .map(StructLitField::Regular)\n-                         .chain(base.into_iter().map(StructLitField::Base));\n+                           .map(StructLitField::Regular)\n+                           .chain(base.into_iter().map(StructLitField::Base));\n \n     let inner_context = &RewriteContext { block_indent: indent, ..*context };\n \n@@ -1030,8 +1030,8 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                                      StructLitField::Regular(ref field) => field.span.lo,\n                                      StructLitField::Base(ref expr) => {\n                                          let last_field_hi = fields.last()\n-                                                                 .map_or(span.lo,\n-                                                                         |field| field.span.hi);\n+                                                                   .map_or(span.lo,\n+                                                                           |field| field.span.hi);\n                                          let snippet = context.snippet(mk_sp(last_field_hi,\n                                                                              expr.span.lo));\n                                          let pos = snippet.find_uncommented(\"..\").unwrap();\n@@ -1104,8 +1104,8 @@ fn rewrite_field(context: &RewriteContext,\n                  -> Option<String> {\n     let name = &field.ident.node.to_string();\n     let overhead = name.len() + 2;\n-    let expr =\n-        field.expr.rewrite(context, try_opt!(width.checked_sub(overhead)), offset + overhead);\n+    let expr = field.expr\n+                    .rewrite(context, try_opt!(width.checked_sub(overhead)), offset + overhead);\n     expr.map(|s| format!(\"{}: {}\", name, s))\n }\n "}, {"sha": "a2e562d9d26ec64df212b8315e770fb4b2dc27ad", "filename": "src/items.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a9814149c93ddec27d38028667f67f75d469c3cc", "patch": "@@ -332,13 +332,14 @@ impl<'a> FmtVisitor<'a> {\n         // Account for sugary self.\n         // FIXME: the comment for the self argument is dropped. This is blocked\n         // on rust issue #27522.\n-        let min_args = explicit_self\n-                           .and_then(|explicit_self| rewrite_explicit_self(explicit_self, args))\n-                           .map(|self_str| {\n-                               arg_item_strs[0] = self_str;\n-                               2\n-                           })\n-                           .unwrap_or(1);\n+        let min_args = explicit_self.and_then(|explicit_self| {\n+                                        rewrite_explicit_self(explicit_self, args)\n+                                    })\n+                                    .map(|self_str| {\n+                                        arg_item_strs[0] = self_str;\n+                                        2\n+                                    })\n+                                    .unwrap_or(1);\n \n         // Comments between args\n         let mut arg_items = Vec::new();\n@@ -761,9 +762,11 @@ impl<'a> FmtVisitor<'a> {\n \n         let indent = self.block_indent + self.config.tab_spaces;\n         let mut attr_str = field.node\n-                               .attrs\n-                               .rewrite(&self.get_context(), self.config.max_width - indent, indent)\n-                               .unwrap();\n+                                .attrs\n+                                .rewrite(&self.get_context(),\n+                                         self.config.max_width - indent,\n+                                         indent)\n+                                .unwrap();\n         if !attr_str.is_empty() {\n             attr_str.push('\\n');\n             attr_str.push_str(&make_indent(indent));\n@@ -804,18 +807,18 @@ impl<'a> FmtVisitor<'a> {\n         // FIXME: don't unwrap\n         let lt_strs = lifetimes.iter().map(|lt| lt.rewrite(&context, h_budget, offset).unwrap());\n         let ty_strs = tys.iter()\n-                          .map(|ty_param| ty_param.rewrite(&context, h_budget, offset).unwrap());\n+                         .map(|ty_param| ty_param.rewrite(&context, h_budget, offset).unwrap());\n \n         // Extract comments between generics.\n         let lt_spans = lifetimes.iter()\n-                           .map(|l| {\n-                               let hi = if l.bounds.is_empty() {\n-                                   l.lifetime.span.hi\n-                               } else {\n-                                   l.bounds[l.bounds.len() - 1].span.hi\n-                               };\n-                               codemap::mk_sp(l.lifetime.span.lo, hi)\n-                           });\n+                                .map(|l| {\n+                                    let hi = if l.bounds.is_empty() {\n+                                        l.lifetime.span.hi\n+                                    } else {\n+                                        l.bounds[l.bounds.len() - 1].span.hi\n+                                    };\n+                                    codemap::mk_sp(l.lifetime.span.lo, hi)\n+                                });\n         let ty_spans = tys.iter().map(span_for_ty_param);\n \n         let items = itemize_list(self.codemap,"}, {"sha": "83e92ff314b586412f37aa2182a236a0226eed14", "filename": "src/types.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=a9814149c93ddec27d38028667f67f75d469c3cc", "patch": "@@ -279,38 +279,39 @@ impl Rewrite for ast::WherePredicate {\n                                                                            .. }) => {\n                 if !bound_lifetimes.is_empty() {\n                     let lifetime_str = bound_lifetimes.iter()\n-                                           .map(|lt| lt.rewrite(context, width, offset).unwrap())\n-                                           .collect::<Vec<_>>()\n-                                           .join(\", \");\n+                                                      .map(|lt| {\n+                                                          lt.rewrite(context, width, offset)\n+                                                            .unwrap()\n+                                                      })\n+                                                      .collect::<Vec<_>>()\n+                                                      .join(\", \");\n                     let type_str = pprust::ty_to_string(bounded_ty);\n                     // 8 = \"for<> : \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + 8;\n                     let bounds_str = bounds.iter()\n-                                         .map(|ty_bound| {\n-                                             ty_bound\n-                                                 .rewrite(context,\n-                                                          width - used_width,\n-                                                          offset + used_width)\n-                                                 .unwrap()\n-                                         })\n-                                         .collect::<Vec<_>>()\n-                                         .join(\" + \");\n+                                           .map(|ty_bound| {\n+                                               ty_bound.rewrite(context,\n+                                                                width - used_width,\n+                                                                offset + used_width)\n+                                                       .unwrap()\n+                                           })\n+                                           .collect::<Vec<_>>()\n+                                           .join(\" + \");\n \n                     format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n                 } else {\n                     let type_str = pprust::ty_to_string(bounded_ty);\n                     // 2 = \": \".len()\n                     let used_width = type_str.len() + 2;\n                     let bounds_str = bounds.iter()\n-                                         .map(|ty_bound| {\n-                                             ty_bound\n-                                                 .rewrite(context,\n-                                                          width - used_width,\n-                                                          offset + used_width)\n-                                                 .unwrap()\n-                                         })\n-                                         .collect::<Vec<_>>()\n-                                         .join(\" + \");\n+                                           .map(|ty_bound| {\n+                                               ty_bound.rewrite(context,\n+                                                                width - used_width,\n+                                                                offset + used_width)\n+                                                       .unwrap()\n+                                           })\n+                                           .collect::<Vec<_>>()\n+                                           .join(\" + \");\n \n                     format!(\"{}: {}\", type_str, bounds_str)\n                 }"}, {"sha": "cb1dd718375696c7132ec07af35455244322a98e", "filename": "src/utils.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=a9814149c93ddec27d38028667f67f75d469c3cc", "patch": "@@ -95,15 +95,15 @@ pub fn contains_skip(attrs: &[Attribute]) -> bool {\n #[inline]\n pub fn end_typaram(typaram: &ast::TyParam) -> BytePos {\n     typaram.bounds\n-        .last()\n-        .map(|bound| {\n-            match *bound {\n-                ast::RegionTyParamBound(ref lt) => lt.span,\n-                ast::TraitTyParamBound(ref prt, _) => prt.span,\n-            }\n-        })\n-        .unwrap_or(typaram.span)\n-        .hi\n+           .last()\n+           .map(|bound| {\n+               match *bound {\n+                   ast::RegionTyParamBound(ref lt) => lt.span,\n+                   ast::TraitTyParamBound(ref prt, _) => prt.span,\n+               }\n+           })\n+           .unwrap_or(typaram.span)\n+           .hi\n }\n \n #[inline]"}, {"sha": "54ada1b7455b8367a3c99238ae0284c798d75c60", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9814149c93ddec27d38028667f67f75d469c3cc/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=a9814149c93ddec27d38028667f67f75d469c3cc", "patch": "@@ -288,11 +288,10 @@ impl<'a> FmtVisitor<'a> {\n         if utils::contains_skip(attrs) {\n             true\n         } else {\n-            let rewrite = attrs\n-                              .rewrite(&self.get_context(),\n-                                       self.config.max_width - self.block_indent,\n-                                       self.block_indent)\n-                              .unwrap();\n+            let rewrite = attrs.rewrite(&self.get_context(),\n+                                        self.config.max_width - self.block_indent,\n+                                        self.block_indent)\n+                               .unwrap();\n             self.buffer.push_str(&rewrite);\n             let last = attrs.last().unwrap();\n             self.last_pos = last.span.hi;"}, {"sha": "4db15dbcfd1cf86cc755e2be01f450e4c89d2444", "filename": "tests/system.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9814149c93ddec27d38028667f67f75d469c3cc/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9814149c93ddec27d38028667f67f75d469c3cc/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=a9814149c93ddec27d38028667f67f75d469c3cc", "patch": "@@ -162,17 +162,17 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n                          .expect(\"Failed creating pattern 2.\");\n \n     reader.lines()\n-        .map(|line| line.ok().expect(\"Failed getting line.\"))\n-        .take_while(|line| line_regex.is_match(&line))\n-        .filter_map(|line| {\n-            regex.captures_iter(&line)\n-                .next()\n-                .map(|capture| {\n-                    (capture.at(1).expect(\"Couldn\\'t unwrap capture.\").to_owned(),\n-                     capture.at(2).expect(\"Couldn\\'t unwrap capture.\").to_owned())\n-                })\n-        })\n-        .collect()\n+          .map(|line| line.ok().expect(\"Failed getting line.\"))\n+          .take_while(|line| line_regex.is_match(&line))\n+          .filter_map(|line| {\n+              regex.captures_iter(&line)\n+                   .next()\n+                   .map(|capture| {\n+                       (capture.at(1).expect(\"Couldn\\'t unwrap capture.\").to_owned(),\n+                        capture.at(2).expect(\"Couldn\\'t unwrap capture.\").to_owned())\n+                   })\n+          })\n+          .collect()\n }\n \n // Compare output to input."}, {"sha": "282dc58b4920284c1d4fd4c377d8467a235aaef1", "filename": "tests/target/chains.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9814149c93ddec27d38028667f67f75d469c3cc/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9814149c93ddec27d38028667f67f75d469c3cc/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=a9814149c93ddec27d38028667f67f75d469c3cc", "patch": "@@ -6,8 +6,8 @@ fn main() {\n     bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddd();\n \n     bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n-        .ddddddddddddddddddddddddddd\n-        .eeeeeeee();\n+                       .ddddddddddddddddddddddddddd\n+                       .eeeeeeee();\n \n     x().y(|| {\n            match cond() {\n@@ -34,13 +34,13 @@ fn main() {\n                                         });\n \n     let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx.map(|x| x + 5)\n-                                                                       .map(|x| x / 2)\n-                                                                       .fold(0, |acc, x| acc + x);\n-\n-    aaaaaaaaaaaaaaaa\n-        .map(|x| {\n-            x += 1;\n-            x\n-        })\n-        .filter(some_mod::some_filter)\n+                                                                          .map(|x| x / 2)\n+                                                                          .fold(0,\n+                                                                                |acc, x| acc + x);\n+\n+    aaaaaaaaaaaaaaaa.map(|x| {\n+                        x += 1;\n+                        x\n+                    })\n+                    .filter(some_mod::some_filter)\n }"}]}