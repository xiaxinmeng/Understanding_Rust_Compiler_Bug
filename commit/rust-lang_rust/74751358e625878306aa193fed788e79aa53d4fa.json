{"sha": "74751358e625878306aa193fed788e79aa53d4fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NzUxMzU4ZTYyNTg3ODMwNmFhMTkzZmVkNzg4ZTc5YWE1M2Q0ZmE=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-27T13:31:47Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-27T13:31:47Z"}, "message": "Merge remote-tracking branch 'upstream/master' into fast-swap", "tree": {"sha": "1ba9b336d1ddb45d9f688d69f5bd4ede028db622", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ba9b336d1ddb45d9f688d69f5bd4ede028db622"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74751358e625878306aa193fed788e79aa53d4fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74751358e625878306aa193fed788e79aa53d4fa", "html_url": "https://github.com/rust-lang/rust/commit/74751358e625878306aa193fed788e79aa53d4fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74751358e625878306aa193fed788e79aa53d4fa/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6307a2fa55c3d62c06b85b349257a8194093442", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6307a2fa55c3d62c06b85b349257a8194093442", "html_url": "https://github.com/rust-lang/rust/commit/c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "3e7908f616745573a11ad7dfad245f12be0069da", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7908f616745573a11ad7dfad245f12be0069da", "html_url": "https://github.com/rust-lang/rust/commit/3e7908f616745573a11ad7dfad245f12be0069da"}], "stats": {"total": 130959, "additions": 71197, "deletions": 59762}, "files": [{"sha": "1ef3c086a1c232566edfb66c4bcd2b3836542530", "filename": ".gitmodules", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -13,17 +13,23 @@\n \tpath = src/jemalloc\n \turl = https://github.com/rust-lang/jemalloc.git\n [submodule \"src/rust-installer\"]\n-\tpath = src/rust-installer\n+\tpath = src/tools/rust-installer\n \turl = https://github.com/rust-lang/rust-installer.git\n [submodule \"src/liblibc\"]\n \tpath = src/liblibc\n \turl = https://github.com/rust-lang/libc.git\n [submodule \"src/doc/nomicon\"]\n \tpath = src/doc/nomicon\n-\turl = https://github.com/rust-lang-nursery/nomicon\n+\turl = https://github.com/rust-lang-nursery/nomicon.git\n [submodule \"src/tools/cargo\"]\n-\tpath = cargo\n-\turl = https://github.com/rust-lang/cargo\n+\tpath = src/tools/cargo\n+\turl = https://github.com/rust-lang/cargo.git\n [submodule \"reference\"]\n \tpath = src/doc/reference\n \turl = https://github.com/rust-lang-nursery/reference.git\n+[submodule \"book\"]\n+\tpath = src/doc/book\n+\turl = https://github.com/rust-lang/book.git\n+[submodule \"src/tools/rls\"]\n+\tpath = src/tools/rls\n+\turl = https://github.com/rust-lang-nursery/rls.git"}, {"sha": "ee5b6f257b555ec4d9f4a551544f6a27ad356aeb", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -139,6 +139,7 @@ Margaret Meyerhofer <mmeyerho@andrew.cmu.edu> <mmeyerho@andrew>\n Mark Sinclair <mark.edward.x@gmail.com>\n Mark Sinclair <mark.edward.x@gmail.com> =Mark Sinclair <=125axel125@gmail.com>\n Markus Westerlind <marwes91@gmail.com> Markus <marwes91@gmail.com>\n+Martin Hafskjold Thoresen <martinhath@gmail.com>\n Matej Lach <matej.lach@gmail.com> Matej \u013dach <matej.lach@gmail.com>\n Matt Brubeck <mbrubeck@limpet.net> <mbrubeck@cs.hmc.edu>\n Matthew Auld <matthew.auld@intel.com>"}, {"sha": "190cb3380a18c633870f6c4d0f7baf677bf3d09a", "filename": ".travis.yml", "status": "modified", "additions": 81, "deletions": 30, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -15,19 +15,27 @@ matrix:\n     - env: IMAGE=arm-android\n     - env: IMAGE=armhf-gnu\n     - env: IMAGE=cross DEPLOY=1\n+    - env: IMAGE=dist-aarch64-linux DEPLOY=1\n     - env: IMAGE=dist-android DEPLOY=1\n     - env: IMAGE=dist-arm-linux DEPLOY=1\n-    - env: IMAGE=dist-armv7-aarch64-linux DEPLOY=1\n-    - env: IMAGE=dist-freebsd DEPLOY=1\n-    - env: IMAGE=dist-i586-gnu-i686-musl DEPLOY=1\n+    - env: IMAGE=dist-armhf-linux DEPLOY=1\n+    - env: IMAGE=dist-armv7-linux DEPLOY=1\n     - env: IMAGE=dist-fuchsia DEPLOY=1\n+    - env: IMAGE=dist-i586-gnu-i686-musl DEPLOY=1\n+    - env: IMAGE=dist-i686-freebsd DEPLOY=1\n+    - env: IMAGE=dist-i686-linux DEPLOY=1\n     - env: IMAGE=dist-mips-linux DEPLOY=1\n     - env: IMAGE=dist-mips64-linux DEPLOY=1\n+    - env: IMAGE=dist-mips64el-linux DEPLOY=1\n+    - env: IMAGE=dist-mipsel-linux DEPLOY=1\n     - env: IMAGE=dist-powerpc-linux DEPLOY=1\n     - env: IMAGE=dist-powerpc64-linux DEPLOY=1\n-    - env: IMAGE=dist-s390x-linux-netbsd DEPLOY=1\n-    - env: IMAGE=dist-x86-linux DEPLOY=1\n+    - env: IMAGE=dist-powerpc64le-linux DEPLOY=1\n+    - env: IMAGE=dist-s390x-linux DEPLOY=1\n+    - env: IMAGE=dist-x86_64-freebsd DEPLOY=1\n+    - env: IMAGE=dist-x86_64-linux DEPLOY=1\n     - env: IMAGE=dist-x86_64-musl DEPLOY=1\n+    - env: IMAGE=dist-x86_64-netbsd DEPLOY=1\n     - env: IMAGE=emscripten\n     - env: IMAGE=i686-gnu\n     - env: IMAGE=i686-gnu-nopt\n@@ -40,71 +48,91 @@ matrix:\n     - env: IMAGE=x86_64-gnu-distcheck\n     - env: IMAGE=x86_64-gnu-incremental\n \n-    # OSX builders\n+    # OSX builders running tests, these run the full test suite.\n+    #\n+    # Note that the compiler is compiled to target 10.8 here because the Xcode\n+    # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n     - env: >\n         RUST_CHECK_TARGET=check\n-        RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin\n+        RUST_CONFIGURE_ARGS=\"--build=x86_64-apple-darwin --enable-sanitizers\"\n         SRC=.\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        RUST_LOG=sccache\n+        MACOSX_DEPLOYMENT_TARGET=10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode8.2\n       install: &osx_install_sccache >\n-        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-apple-darwin &&\n-          chmod +x /usr/local/bin/sccache\n+        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-apple-darwin &&\n+          chmod +x /usr/local/bin/sccache &&\n+        travis_retry curl -o /usr/local/bin/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n+          chmod +x /usr/local/bin/stamp\n     - env: >\n         RUST_CHECK_TARGET=check\n         RUST_CONFIGURE_ARGS=--build=i686-apple-darwin\n         SRC=.\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        RUST_LOG=sccache\n+        MACOSX_DEPLOYMENT_TARGET=10.8\n+        MACOSX_STD_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode8.2\n       install: *osx_install_sccache\n \n+    # OSX builders producing releases. These do not run the full test suite and\n+    # just produce a bunch of artifacts.\n+    #\n+    # Note that these are running in the `xcode7` image instead of the\n+    # `xcode8.2` image as above. That's because we want to build releases for\n+    # OSX 10.7 and `xcode7` is the latest Xcode able to compile LLVM for 10.7.\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-extended\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        RUST_LOG=sccache\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n-      osx_image: xcode8.2\n-      install: >\n-        travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-apple-darwin &&\n-          chmod +x /usr/local/bin/sccache\n+      osx_image: xcode7\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended\"\n+        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        RUST_LOG=sccache\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n-      osx_image: xcode8.2\n-      install: *osx_install_sccache\n+      osx_image: xcode7\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n \n     # \"alternate\" deployments, these are \"nightlies\" but don't have assertions\n     # turned on, they're deployed to a different location primarily for projects\n     # which are stuck on nightly and don't want llvm assertions in the artifacts\n     # that they use.\n-    - env: IMAGE=dist-x86-linux DEPLOY_ALT=1\n+    - env: IMAGE=dist-x86_64-linux DEPLOY_ALT=1\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--enable-extended\"\n         SRC=.\n         DEPLOY_ALT=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n-        RUST_LOG=sccache\n+        MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n-      osx_image: xcode8.2\n-      install: *osx_install_sccache\n+      osx_image: xcode7\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n \n env:\n   global:\n@@ -113,6 +141,12 @@ env:\n     # AWS_SECRET_ACCESS_KEY=...\n     - secure: \"Pixhh0hXDqGCdOyLtGFjli3J2AtDWIpyb2btIrLe956nCBDRutRoMm6rv5DI9sFZN07Mms7VzNNvhc9wCW1y63JAm414d2Co7Ob8kWMZlz9l9t7ACHuktUiis8yr+S4Quq1Vqd6pqi7pf2J++UxC8R/uLeqVrubzr6+X7AbmEFE=\"\n \n+# Note that this is overridden on OSX builders\n+install: >\n+  travis_retry curl -o $HOME/stamp https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl &&\n+    chmod +x $HOME/stamp &&\n+    export PATH=$PATH:$HOME\n+\n before_script:\n   - >\n       echo \"#### Disk usage before running script:\";\n@@ -122,13 +156,14 @@ before_script:\n script:\n   - >\n       if [ \"$ALLOW_PR\" = \"\" ] && [ \"$TRAVIS_BRANCH\" != \"auto\" ]; then\n-          echo skipping, not a full build;\n-      elif [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n-          travis_retry sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          src/ci/run.sh;\n+          echo skipping, not a full build\n       else\n-          travis_retry sh -c 'git submodule deinit -f . && git submodule update --init' &&\n-          src/ci/docker/run.sh $IMAGE;\n+          stamp src/ci/init_repo.sh . \"$HOME/rustsrc\" &&\n+          if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n+              stamp src/ci/run.sh;\n+          else\n+              stamp src/ci/docker/run.sh $IMAGE;\n+          fi\n       fi\n \n after_success:\n@@ -142,17 +177,33 @@ after_failure:\n       echo \"#### Build failed; Disk usage after running script:\";\n       df -h;\n       du . | sort -nr | head -n100\n+\n+  # One of these is the linux sccache log, one is the OSX sccache log. Instead\n+  # of worrying about what system we are just cat both. One of these commands\n+  # will fail but that's ok, they'll both get executed.\n   - cat obj/tmp/sccache.log\n   - cat /tmp/sccache.log\n \n+  # Random attempt at debugging currently. Just poking around in here to see if\n+  # anything shows up.\n+  - ls $HOME/Library/Logs/DiagnosticReports/\n+\n+  # attempt to debug anything killed by the oom killer on linux, just to see if\n+  # it happened\n+  - dmesg | grep -i kill\n+\n # Save tagged docker images we created and load them if they're available\n+# Travis saves caches whether the build failed or not, nuke rustsrc if\n+# the failure was while updating it (as it may be in a bad state)\n+# https://github.com/travis-ci/travis-ci/issues/4472\n before_cache:\n   - docker history -q rust-ci |\n     grep -v missing |\n     xargs docker save |\n     gzip > $HOME/docker/rust-ci.tar.gz\n before_install:\n   - zcat $HOME/docker/rust-ci.tar.gz | docker load || true\n+  - mkdir -p $HOME/rustsrc\n \n notifications:\n   email: false"}, {"sha": "8f121f8d6ed9b54434c5f1bb4e23a149a42381d6", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -177,7 +177,7 @@ python x.py test src/test/rustdoc\n python x.py build src/libcore --stage 0\n ```\n \n-You can explore the build system throught the various `--help` pages for each\n+You can explore the build system through the various `--help` pages for each\n subcommand. For example to learn more about a command you can run:\n \n ```\n@@ -311,9 +311,13 @@ To save @bors some work, and to get small changes through more quickly, when\n the other rollup-eligible patches too, and they'll get tested and merged at\n the same time.\n \n-To find documentation-related issues, sort by the [A-docs label][adocs].\n+To find documentation-related issues, sort by the [T-doc label][tdoc].\n \n-[adocs]: https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-docs\n+[tdoc]: https://github.com/rust-lang/rust/issues?q=is%3Aopen%20is%3Aissue%20label%3AT-doc\n+\n+You can find documentation style guidelines in [RFC 1574][rfc1574].\n+\n+[rfc1574]: https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#appendix-a-full-conventions-text\n \n In many cases, you don't need a full `./x.py doc`. You can use `rustdoc` directly\n to check small fixes. For example, `rustdoc src/doc/reference.md` will render"}, {"sha": "f387b4be6008f4b4722e9264d73921179fa8a91f", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -16,7 +16,7 @@ Read [\"Installing Rust\"] from [The Book].\n \n 1. Make sure you have installed the dependencies:\n \n-   * `g++` 4.7 or later or `clang++` 3.x\n+   * `g++` 4.7 or later or `clang++` 3.x or later\n    * `python` 2.7 (but not 3.x)\n    * GNU `make` 3.81 or later\n    * `cmake` 3.4.3 or later\n@@ -161,8 +161,9 @@ If you\u2019d like to build the documentation, it\u2019s almost the same:\n $ ./x.py doc\n ```\n \n-The generated documentation will appear in a top-level `doc` directory,\n-created by the `make` rule.\n+The generated documentation will appear under `doc` in the `build` directory for\n+the ABI used. I.e., if the ABI was `x86_64-pc-windows-msvc`, the directory will be\n+`build\\x86_64-pc-windows-msvc\\doc`.\n \n ## Notes\n \n@@ -197,8 +198,8 @@ The Rust community congregates in a few places:\n * [users.rust-lang.org] - General discussion and broader questions.\n * [/r/rust] - News and general discussion.\n \n-[Stack Overflow]: http://stackoverflow.com/questions/tagged/rust\n-[/r/rust]: http://reddit.com/r/rust\n+[Stack Overflow]: https://stackoverflow.com/questions/tagged/rust\n+[/r/rust]: https://reddit.com/r/rust\n [users.rust-lang.org]: https://users.rust-lang.org/\n \n ## Contributing"}, {"sha": "8f641792add66cf519096bf6db50f13aacbc266b", "filename": "RELEASES.md", "status": "modified", "additions": 515, "deletions": 514, "changes": 1029, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -1,10 +1,267 @@\n+Version 1.17.0 (2017-04-27)\n+===========================\n+\n+Language\n+--------\n+\n+* [The lifetime of statics and consts defaults to `'static`][39265]. [RFC 1623]\n+* [Fields of structs may be initialized without duplicating the field/variable\n+  names][39761]. [RFC 1682]\n+* [`Self` may be included in the `where` clause of `impls`][38864]. [RFC 1647]\n+* [When coercing to an unsized type lifetimes must be equal][40319]. That is,\n+  there is no subtyping between `T` and `U` when `T: Unsize<U>`. For example,\n+  coercing `&mut [&'a X; N]` to `&mut [&'b X]` requires `'a` be equal to\n+  `'b`. Soundness fix.\n+* [Values passed to the indexing operator, `[]`, automatically coerce][40166]\n+* [Static variables may contain references to other statics][40027]\n+\n+Compiler\n+--------\n+\n+* [Exit quickly on only `--emit dep-info`][40336]\n+* [Make `-C relocation-model` more correctly determine whether the linker\n+  creates a position-independent executable][40245]\n+* [Add `-C overflow-checks` to directly control whether integer overflow\n+  panics][40037]\n+* [The rustc type checker now checks items on demand instead of in a single\n+  in-order pass][40008]. This is mostly an internal refactoring in support of\n+  future work, including incremental type checking, but also resolves [RFC\n+  1647], allowing `Self` to appear in `impl` `where` clauses.\n+* [Optimize vtable loads][39995]\n+* [Turn off vectorization for Emscripten targets][39990]\n+* [Provide suggestions for unknown macros imported with `use`][39953]\n+* [Fix ICEs in path resolution][39939]\n+* [Strip exception handling code on Emscripten when `panic=abort`][39193]\n+* [Add clearer error message using `&str + &str`][39116]\n+\n+Stabilized APIs\n+---------------\n+\n+* [`Arc::into_raw`]\n+* [`Arc::from_raw`]\n+* [`Arc::ptr_eq`]\n+* [`Rc::into_raw`]\n+* [`Rc::from_raw`]\n+* [`Rc::ptr_eq`]\n+* [`Ordering::then`]\n+* [`Ordering::then_with`]\n+* [`BTreeMap::range`]\n+* [`BTreeMap::range_mut`]\n+* [`collections::Bound`]\n+* [`process::abort`]\n+* [`ptr::read_unaligned`]\n+* [`ptr::write_unaligned`]\n+* [`Result::expect_err`]\n+* [`Cell::swap`]\n+* [`Cell::replace`]\n+* [`Cell::into_inner`]\n+* [`Cell::take`]\n+\n+Libraries\n+---------\n+\n+* [`BTreeMap` and `BTreeSet` can iterate over ranges][27787]\n+* [`Cell` can store non-`Copy` types][39793]. [RFC 1651]\n+* [`String` implements `FromIterator<&char>`][40028]\n+* `Box` [implements][40009] a number of new conversions:\n+  `From<Box<str>> for String`,\n+  `From<Box<[T]>> for Vec<T>`,\n+  `From<Box<CStr>> for CString`,\n+  `From<Box<OsStr>> for OsString`,\n+  `From<Box<Path>> for PathBuf`,\n+  `Into<Box<str>> for String`,\n+  `Into<Box<[T]>> for Vec<T>`,\n+  `Into<Box<CStr>> for CString`,\n+  `Into<Box<OsStr>> for OsString`,\n+  `Into<Box<Path>> for PathBuf`,\n+  `Default for Box<str>`,\n+  `Default for Box<CStr>`,\n+  `Default for Box<OsStr>`,\n+  `From<&CStr> for Box<CStr>`,\n+  `From<&OsStr> for Box<OsStr>`,\n+  `From<&Path> for Box<Path>`\n+* [`ffi::FromBytesWithNulError` implements `Error` and `Display`][39960]\n+* [Specialize `PartialOrd<A> for [A] where A: Ord`][39642]\n+* [Slightly optimize `slice::sort`][39538]\n+* [Add `ToString` trait specialization for `Cow<'a, str>` and `String`][39440]\n+* [`Box<[T]>` implements `From<&[T]> where T: Copy`,\n+  `Box<str>` implements `From<&str>`][39438]\n+* [`IpAddr` implements `From` for various arrays. `SocketAddr` implements\n+  `From<(I, u16)> where I: Into<IpAddr>`][39372]\n+* [`format!` estimates the needed capacity before writing a string][39356]\n+* [Support unprivileged symlink creation in Windows][38921]\n+* [`PathBuf` implements `Default`][38764]\n+* [Implement `PartialEq<[A]>` for `VecDeque<A>`][38661]\n+* [`HashMap` resizes adaptively][38368] to guard against DOS attacks\n+  and poor hash functions.\n+\n+Cargo\n+-----\n+\n+* [Add `cargo check --all`][cargo/3731]\n+* [Add an option to ignore SSL revocation checking][cargo/3699]\n+* [Add `cargo run --package`][cargo/3691]\n+* [Add `required_features`][cargo/3667]\n+* [Assume `build.rs` is a build script][cargo/3664]\n+* [Find workspace via `workspace_root` link in containing member][cargo/3562]\n+\n+Misc\n+----\n+\n+* [Documentation is rendered with mdbook instead of the obsolete, in-tree\n+  `rustbook`][39633]\n+* [The \"Unstable Book\" documents nightly-only features][ubook]\n+* [Improve the style of the sidebar in rustdoc output][40265]\n+* [Configure build correctly on 64-bit CPU's with the armhf ABI][40261]\n+* [Fix MSP430 breakage due to `i128`][40257]\n+* [Preliminary Solaris/SPARCv9 support][39903]\n+* [`rustc` is linked statically on Windows MSVC targets][39837], allowing it to\n+  run without installing the MSVC runtime.\n+* [`rustdoc --test` includes file names in test names][39788]\n+* This release includes builds of `std` for `sparc64-unknown-linux-gnu`,\n+  `aarch64-unknown-linux-fuchsia`, and `x86_64-unknown-linux-fuchsia`.\n+* [Initial support for `aarch64-unknown-freebsd`][39491]\n+* [Initial support for `i686-unknown-netbsd`][39426]\n+* [This release no longer includes the old makefile build system][39431]. Rust\n+  is built with a custom build system, written in Rust, and with Cargo.\n+* [Add Debug implementations for libcollection structs][39002]\n+* [`TypeId` implements `PartialOrd` and `Ord`][38981]\n+* [`--test-threads=0` produces an error][38945]\n+* [`rustup` installs documentation by default][40526]\n+* [The Rust source includes NatVis visualizations][39843]. These can be used by\n+  WinDbg and Visual Studio to improve the debugging experience.\n+\n+Compatibility Notes\n+-------------------\n+\n+* [Rust 1.17 does not correctly detect the MSVC 2017 linker][38584]. As a\n+  workaround, either use MSVC 2015 or run vcvars.bat.\n+* [When coercing to an unsized type lifetimes must be equal][40319]. That is,\n+  disallow subtyping between `T` and `U` when `T: Unsize<U>`, e.g. coercing\n+  `&mut [&'a X; N]` to `&mut [&'b X]` requires `'a` be equal to `'b`. Soundness\n+  fix.\n+* [`format!` and `Display::to_string` panic if an underlying formatting\n+  implementation returns an error][40117]. Previously the error was silently\n+  ignored. It is incorrect for `write_fmt` to return an error when writing\n+  to a string.\n+* [In-tree crates are verified to be unstable][39851]. Previously, some minor\n+  crates were marked stable and could be accessed from the stable toolchain.\n+* [Rust git source no longer includes vendored crates][39728]. Those that need\n+  to build with vendored crates should build from release tarballs.\n+* [Fix inert attributes from `proc_macro_derives`][39572]\n+* [During crate resolution, rustc prefers a crate in the sysroot if two crates\n+  are otherwise identical][39518]. Unlikely to be encountered outside the Rust\n+  build system.\n+* [Fixed bugs around how type inference interacts with dead-code][39485]. The\n+  existing code generally ignores the type of dead-code unless a type-hint is\n+  provided; this can cause surprising inference interactions particularly around\n+  defaulting. The new code uniformly ignores the result type of dead-code.\n+* [Tuple-struct constructors with private fields are no longer visible][38932]\n+* [Lifetime parameters that do not appear in the arguments are now considered\n+  early-bound][38897], resolving a soundness bug (#[32330]). The\n+  `hr_lifetime_in_assoc_type` future-compatibility lint has been in effect since\n+  April of 2016.\n+* [rustdoc: fix doctests with non-feature crate attributes][38161]\n+* [Make transmuting from fn item types to pointer-sized types a hard\n+  error][34198]\n+\n+[27787]: https://github.com/rust-lang/rust/issues/27787\n+[32330]: https://github.com/rust-lang/rust/issues/32330\n+[34198]: https://github.com/rust-lang/rust/pull/34198\n+[38161]: https://github.com/rust-lang/rust/pull/38161\n+[38368]: https://github.com/rust-lang/rust/pull/38368\n+[38584]: https://github.com/rust-lang/rust/issues/38584\n+[38661]: https://github.com/rust-lang/rust/pull/38661\n+[38764]: https://github.com/rust-lang/rust/pull/38764\n+[38864]: https://github.com/rust-lang/rust/issues/38864\n+[38897]: https://github.com/rust-lang/rust/pull/38897\n+[38921]: https://github.com/rust-lang/rust/pull/38921\n+[38932]: https://github.com/rust-lang/rust/pull/38932\n+[38945]: https://github.com/rust-lang/rust/pull/38945\n+[38981]: https://github.com/rust-lang/rust/pull/38981\n+[39002]: https://github.com/rust-lang/rust/pull/39002\n+[39116]: https://github.com/rust-lang/rust/pull/39116\n+[39193]: https://github.com/rust-lang/rust/pull/39193\n+[39265]: https://github.com/rust-lang/rust/pull/39265\n+[39356]: https://github.com/rust-lang/rust/pull/39356\n+[39372]: https://github.com/rust-lang/rust/pull/39372\n+[39426]: https://github.com/rust-lang/rust/pull/39426\n+[39431]: https://github.com/rust-lang/rust/pull/39431\n+[39438]: https://github.com/rust-lang/rust/pull/39438\n+[39440]: https://github.com/rust-lang/rust/pull/39440\n+[39485]: https://github.com/rust-lang/rust/pull/39485\n+[39491]: https://github.com/rust-lang/rust/pull/39491\n+[39518]: https://github.com/rust-lang/rust/pull/39518\n+[39538]: https://github.com/rust-lang/rust/pull/39538\n+[39572]: https://github.com/rust-lang/rust/pull/39572\n+[39633]: https://github.com/rust-lang/rust/pull/39633\n+[39642]: https://github.com/rust-lang/rust/pull/39642\n+[39728]: https://github.com/rust-lang/rust/pull/39728\n+[39761]: https://github.com/rust-lang/rust/pull/39761\n+[39788]: https://github.com/rust-lang/rust/pull/39788\n+[39793]: https://github.com/rust-lang/rust/pull/39793\n+[39837]: https://github.com/rust-lang/rust/pull/39837\n+[39843]: https://github.com/rust-lang/rust/pull/39843\n+[39851]: https://github.com/rust-lang/rust/pull/39851\n+[39903]: https://github.com/rust-lang/rust/pull/39903\n+[39939]: https://github.com/rust-lang/rust/pull/39939\n+[39953]: https://github.com/rust-lang/rust/pull/39953\n+[39960]: https://github.com/rust-lang/rust/pull/39960\n+[39990]: https://github.com/rust-lang/rust/pull/39990\n+[39995]: https://github.com/rust-lang/rust/pull/39995\n+[40008]: https://github.com/rust-lang/rust/pull/40008\n+[40009]: https://github.com/rust-lang/rust/pull/40009\n+[40027]: https://github.com/rust-lang/rust/pull/40027\n+[40028]: https://github.com/rust-lang/rust/pull/40028\n+[40037]: https://github.com/rust-lang/rust/pull/40037\n+[40117]: https://github.com/rust-lang/rust/pull/40117\n+[40166]: https://github.com/rust-lang/rust/pull/40166\n+[40245]: https://github.com/rust-lang/rust/pull/40245\n+[40257]: https://github.com/rust-lang/rust/pull/40257\n+[40261]: https://github.com/rust-lang/rust/pull/40261\n+[40265]: https://github.com/rust-lang/rust/pull/40265\n+[40319]: https://github.com/rust-lang/rust/pull/40319\n+[40336]: https://github.com/rust-lang/rust/pull/40336\n+[40526]: https://github.com/rust-lang/rust/pull/40526\n+[RFC 1623]: https://github.com/rust-lang/rfcs/blob/master/text/1623-static.md\n+[RFC 1647]: https://github.com/rust-lang/rfcs/blob/master/text/1647-allow-self-in-where-clauses.md\n+[RFC 1651]: https://github.com/rust-lang/rfcs/blob/master/text/1651-movecell.md\n+[RFC 1682]: https://github.com/rust-lang/rfcs/blob/master/text/1682-field-init-shorthand.md\n+[`Arc::from_raw`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.from_raw\n+[`Arc::into_raw`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.into_raw\n+[`Arc::ptr_eq`]: https://doc.rust-lang.org/std/sync/struct.Arc.html#method.ptr_eq\n+[`BTreeMap::range_mut`]: https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range_mut\n+[`BTreeMap::range`]: https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.range\n+[`Cell::into_inner`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.into_inner\n+[`Cell::replace`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.replace\n+[`Cell::swap`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.swap\n+[`Cell::take`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.take\n+[`Ordering::then_with`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then_with\n+[`Ordering::then`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.then\n+[`Rc::from_raw`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.from_raw\n+[`Rc::into_raw`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.into_raw\n+[`Rc::ptr_eq`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.ptr_eq\n+[`Result::expect_err`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err\n+[`collections::Bound`]: https://doc.rust-lang.org/std/collections/enum.Bound.html\n+[`process::abort`]: https://doc.rust-lang.org/std/process/fn.abort.html\n+[`ptr::read_unaligned`]: https://doc.rust-lang.org/std/ptr/fn.read_unaligned.html\n+[`ptr::write_unaligned`]: https://doc.rust-lang.org/std/ptr/fn.write_unaligned.html\n+[cargo/3562]: https://github.com/rust-lang/cargo/pull/3562\n+[cargo/3664]: https://github.com/rust-lang/cargo/pull/3664\n+[cargo/3667]: https://github.com/rust-lang/cargo/pull/3667\n+[cargo/3691]: https://github.com/rust-lang/cargo/pull/3691\n+[cargo/3699]: https://github.com/rust-lang/cargo/pull/3699\n+[cargo/3731]: https://github.com/rust-lang/cargo/pull/3731\n+[mdbook]: https://crates.io/crates/mdbook\n+[ubook]: https://doc.rust-lang.org/unstable-book/\n+\n+\n Version 1.16.0 (2017-03-16)\n ===========================\n \n Language\n --------\n \n-* Lifetimes in statics and consts default to `'static`. [RFC 1623]\n * [The compiler's `dead_code` lint now accounts for type aliases][38051].\n * [Uninhabitable enums (those without any variants) no longer permit wildcard\n   match patterns][38069]\n@@ -950,254 +1207,168 @@ Version 1.12.0 (2016-09-29)\n Highlights\n ----------\n \n-* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n-  (https://github.com/rust-lang/rust/pull/34096).\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n   This translation pass is far simpler than the previous AST->LLVM pass, and\n   creates opportunities to perform new optimizations directly on the MIR. It\n-  was previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n * [`rustc` presents a new, more readable error format, along with\n-  machine-readable JSON error output for use by IDEs]\n-  (https://github.com/rust-lang/rust/pull/35401).\n+  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n   Most common editors supporting Rust have been updated to work with it. It was\n-  previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n \n Compiler\n --------\n \n-* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)]\n-  (https://github.com/rust-lang/rust/pull/34096).\n+* [`rustc` translates code to LLVM IR via its own \"middle\" IR (MIR)](https://github.com/rust-lang/rust/pull/34096).\n   This translation pass is far simpler than the previous AST->LLVM pass, and\n   creates opportunities to perform new optimizations directly on the MIR. It\n-  was previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/04/19/MIR.html).\n+  was previously described [on the Rust blog](https://blog.rust-lang.org/2016/04/19/MIR.html).\n * [Print the Rust target name, not the LLVM target name, with\n-  `--print target-list`]\n-  (https://github.com/rust-lang/rust/pull/35489)\n+  `--print target-list`](https://github.com/rust-lang/rust/pull/35489)\n * [The computation of `TypeId` is correct in some cases where it was previously\n-  producing inconsistent results]\n-  (https://github.com/rust-lang/rust/pull/35267)\n-* [The `mips-unknown-linux-gnu` target uses hardware floating point by default]\n-  (https://github.com/rust-lang/rust/pull/34910)\n+  producing inconsistent results](https://github.com/rust-lang/rust/pull/35267)\n+* [The `mips-unknown-linux-gnu` target uses hardware floating point by default](https://github.com/rust-lang/rust/pull/34910)\n * [The `rustc` arguments, `--print target-cpus`, `--print target-features`,\n   `--print relocation-models`, and `--print code-models` print the available\n   options to the `-C target-cpu`, `-C target-feature`, `-C relocation-model` and\n-  `-C code-model` code generation arguments]\n-  (https://github.com/rust-lang/rust/pull/34845)\n+  `-C code-model` code generation arguments](https://github.com/rust-lang/rust/pull/34845)\n * [`rustc` supports three new MUSL targets on ARM: `arm-unknown-linux-musleabi`,\n-  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`]\n-  (https://github.com/rust-lang/rust/pull/35060).\n+  `arm-unknown-linux-musleabihf`, and `armv7-unknown-linux-musleabihf`](https://github.com/rust-lang/rust/pull/35060).\n   These targets produce statically-linked binaries. There are no binary release\n   builds yet though.\n \n Diagnostics\n -----------\n \n * [`rustc` presents a new, more readable error format, along with\n-  machine-readable JSON error output for use by IDEs]\n-  (https://github.com/rust-lang/rust/pull/35401).\n+  machine-readable JSON error output for use by IDEs](https://github.com/rust-lang/rust/pull/35401).\n   Most common editors supporting Rust have been updated to work with it. It was\n-  previously described [on the Rust blog]\n-  (https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n+  previously described [on the Rust blog](https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html).\n * [In error descriptions, references are now described in plain English,\n-  instead of as \"&-ptr\"]\n-  (https://github.com/rust-lang/rust/pull/35611)\n+  instead of as \"&-ptr\"](https://github.com/rust-lang/rust/pull/35611)\n * [In error type descriptions, unknown numeric types are named `{integer}` or\n-  `{float}` instead of `_`]\n-  (https://github.com/rust-lang/rust/pull/35080)\n-* [`rustc` emits a clearer error when inner attributes follow a doc comment]\n-  (https://github.com/rust-lang/rust/pull/34676)\n+  `{float}` instead of `_`](https://github.com/rust-lang/rust/pull/35080)\n+* [`rustc` emits a clearer error when inner attributes follow a doc comment](https://github.com/rust-lang/rust/pull/34676)\n \n Language\n --------\n \n-* [`macro_rules!` invocations can be made within `macro_rules!` invocations]\n-  (https://github.com/rust-lang/rust/pull/34925)\n-* [`macro_rules!` meta-variables are hygienic]\n-  (https://github.com/rust-lang/rust/pull/35453)\n+* [`macro_rules!` invocations can be made within `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34925)\n+* [`macro_rules!` meta-variables are hygienic](https://github.com/rust-lang/rust/pull/35453)\n * [`macro_rules!` `tt` matchers can be reparsed correctly, making them much more\n-  useful]\n-  (https://github.com/rust-lang/rust/pull/34908)\n+  useful](https://github.com/rust-lang/rust/pull/34908)\n * [`macro_rules!` `stmt` matchers correctly consume the entire contents when\n-  inside non-braces invocations]\n-  (https://github.com/rust-lang/rust/pull/34886)\n+  inside non-braces invocations](https://github.com/rust-lang/rust/pull/34886)\n * [Semicolons are properly required as statement delimeters inside\n-  `macro_rules!` invocations]\n-  (https://github.com/rust-lang/rust/pull/34660)\n-* [`cfg_attr` works on `path` attributes]\n-  (https://github.com/rust-lang/rust/pull/34546)\n+  `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34660)\n+* [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n \n Stabilized APIs\n ---------------\n \n-* [`Cell::as_ptr`]\n-  (https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n-* [`RefCell::as_ptr`]\n-  (https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n-* [`IpAddr::is_unspecified`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n-* [`IpAddr::is_loopback`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n-* [`IpAddr::is_multicast`]\n-  (https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n-* [`Ipv4Addr::is_unspecified`]\n-  (https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n-* [`Ipv6Addr::octets`]\n-  (https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n-* [`LinkedList::contains`]\n-  (https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n-* [`VecDeque::contains`]\n-  (https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n-* [`ExitStatusExt::from_raw`]\n-  (https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n+* [`Cell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_ptr)\n+* [`RefCell::as_ptr`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.as_ptr)\n+* [`IpAddr::is_unspecified`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_unspecified)\n+* [`IpAddr::is_loopback`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_loopback)\n+* [`IpAddr::is_multicast`](https://doc.rust-lang.org/std/net/enum.IpAddr.html#method.is_multicast)\n+* [`Ipv4Addr::is_unspecified`](https://doc.rust-lang.org/std/net/struct.Ipv4Addr.html#method.is_unspecified)\n+* [`Ipv6Addr::octets`](https://doc.rust-lang.org/std/net/struct.Ipv6Addr.html#method.octets)\n+* [`LinkedList::contains`](https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains)\n+* [`VecDeque::contains`](https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains)\n+* [`ExitStatusExt::from_raw`](https://doc.rust-lang.org/std/os/unix/process/trait.ExitStatusExt.html#tymethod.from_raw).\n   Both on Unix and Windows.\n-* [`Receiver::recv_timeout`]\n-  (https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n-* [`RecvTimeoutError`]\n-  (https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n-* [`BinaryHeap::peek_mut`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n-* [`PeekMut`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n-* [`iter::Product`]\n-  (https://doc.rust-lang.org/std/iter/trait.Product.html)\n-* [`iter::Sum`]\n-  (https://doc.rust-lang.org/std/iter/trait.Sum.html)\n-* [`OccupiedEntry::remove_entry`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n-* [`VacantEntry::into_key`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n+* [`Receiver::recv_timeout`](https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout)\n+* [`RecvTimeoutError`](https://doc.rust-lang.org/std/sync/mpsc/enum.RecvTimeoutError.html)\n+* [`BinaryHeap::peek_mut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.peek_mut)\n+* [`PeekMut`](https://doc.rust-lang.org/std/collections/binary_heap/struct.PeekMut.html)\n+* [`iter::Product`](https://doc.rust-lang.org/std/iter/trait.Product.html)\n+* [`iter::Sum`](https://doc.rust-lang.org/std/iter/trait.Sum.html)\n+* [`OccupiedEntry::remove_entry`](https://doc.rust-lang.org/std/collections/btree_map/struct.OccupiedEntry.html#method.remove_entry)\n+* [`VacantEntry::into_key`](https://doc.rust-lang.org/std/collections/btree_map/struct.VacantEntry.html#method.into_key)\n \n Libraries\n ---------\n \n * [The `format!` macro and friends now allow a single argument to be formatted\n-  in multiple styles]\n-  (https://github.com/rust-lang/rust/pull/33642)\n+  in multiple styles](https://github.com/rust-lang/rust/pull/33642)\n * [The lifetime bounds on `[T]::binary_search_by` and\n-  `[T]::binary_search_by_key` have been adjusted to be more flexible]\n-  (https://github.com/rust-lang/rust/pull/34762)\n-* [`Option` implements `From` for its contained type]\n-  (https://github.com/rust-lang/rust/pull/34828)\n-* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type]\n-  (https://github.com/rust-lang/rust/pull/35392)\n-* [`RwLock` panics if the reader count overflows]\n-  (https://github.com/rust-lang/rust/pull/35378)\n-* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant]\n-  (https://github.com/rust-lang/rust/pull/35354)\n-* [`vec::Drain` and `binary_heap::Drain` are covariant]\n-  (https://github.com/rust-lang/rust/pull/34951)\n-* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`]\n-  (https://github.com/rust-lang/rust/pull/35064)\n-* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`]\n-  (https://github.com/rust-lang/rust/pull/34946)\n+  `[T]::binary_search_by_key` have been adjusted to be more flexible](https://github.com/rust-lang/rust/pull/34762)\n+* [`Option` implements `From` for its contained type](https://github.com/rust-lang/rust/pull/34828)\n+* [`Cell`, `RefCell` and `UnsafeCell` implement `From` for their contained type](https://github.com/rust-lang/rust/pull/35392)\n+* [`RwLock` panics if the reader count overflows](https://github.com/rust-lang/rust/pull/35378)\n+* [`vec_deque::Drain`, `hash_map::Drain` and `hash_set::Drain` are covariant](https://github.com/rust-lang/rust/pull/35354)\n+* [`vec::Drain` and `binary_heap::Drain` are covariant](https://github.com/rust-lang/rust/pull/34951)\n+* [`Cow<str>` implements `FromIterator` for `char`, `&str` and `String`](https://github.com/rust-lang/rust/pull/35064)\n+* [Sockets on Linux are correctly closed in subprocesses via `SOCK_CLOEXEC`](https://github.com/rust-lang/rust/pull/34946)\n * [`hash_map::Entry`, `hash_map::VacantEntry` and `hash_map::OccupiedEntry`\n-  implement `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34937)\n+  implement `Debug`](https://github.com/rust-lang/rust/pull/34937)\n * [`btree_map::Entry`, `btree_map::VacantEntry` and `btree_map::OccupiedEntry`\n-  implement `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34885)\n-* [`String` implements `AddAssign`]\n-  (https://github.com/rust-lang/rust/pull/34890)\n+  implement `Debug`](https://github.com/rust-lang/rust/pull/34885)\n+* [`String` implements `AddAssign`](https://github.com/rust-lang/rust/pull/34890)\n * [Variadic `extern fn` pointers implement the `Clone`, `PartialEq`, `Eq`,\n-  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits]\n-  (https://github.com/rust-lang/rust/pull/34879)\n-* [`FileType` implements `Debug`]\n-  (https://github.com/rust-lang/rust/pull/34757)\n-* [References to `Mutex` and `RwLock` are unwind-safe]\n-  (https://github.com/rust-lang/rust/pull/34756)\n+  `PartialOrd`, `Ord`, `Hash`, `fmt::Pointer`, and `fmt::Debug` traits](https://github.com/rust-lang/rust/pull/34879)\n+* [`FileType` implements `Debug`](https://github.com/rust-lang/rust/pull/34757)\n+* [References to `Mutex` and `RwLock` are unwind-safe](https://github.com/rust-lang/rust/pull/34756)\n * [`mpsc::sync_channel` `Receiver`s return any available message before\n-  reporting a disconnect]\n-  (https://github.com/rust-lang/rust/pull/34731)\n-* [Unicode definitions have been updated to 9.0]\n-  (https://github.com/rust-lang/rust/pull/34599)\n-* [`env` iterators implement `DoubleEndedIterator`]\n-  (https://github.com/rust-lang/rust/pull/33312)\n+  reporting a disconnect](https://github.com/rust-lang/rust/pull/34731)\n+* [Unicode definitions have been updated to 9.0](https://github.com/rust-lang/rust/pull/34599)\n+* [`env` iterators implement `DoubleEndedIterator`](https://github.com/rust-lang/rust/pull/33312)\n \n Cargo\n -----\n \n-* [Support local mirrors of registries]\n-  (https://github.com/rust-lang/cargo/pull/2857)\n-* [Add support for command aliases]\n-  (https://github.com/rust-lang/cargo/pull/2679)\n-* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides]\n-  (https://github.com/rust-lang/cargo/pull/3007)\n-* [Make `cargo doc --open --target` work as expected]\n-  (https://github.com/rust-lang/cargo/pull/2988)\n-* [Speed up noop registry updates]\n-  (https://github.com/rust-lang/cargo/pull/2974)\n-* [Update OpenSSL]\n-  (https://github.com/rust-lang/cargo/pull/2971)\n-* [Fix `--panic=abort` with plugins]\n-  (https://github.com/rust-lang/cargo/pull/2954)\n-* [Always pass `-C metadata` to the compiler]\n-  (https://github.com/rust-lang/cargo/pull/2946)\n-* [Fix depending on git repos with workspaces]\n-  (https://github.com/rust-lang/cargo/pull/2938)\n-* [Add a `--lib` flag to `cargo new`]\n-  (https://github.com/rust-lang/cargo/pull/2921)\n-* [Add `http.cainfo` for custom certs]\n-  (https://github.com/rust-lang/cargo/pull/2917)\n-* [Indicate the compilation profile after compiling]\n-  (https://github.com/rust-lang/cargo/pull/2909)\n-* [Allow enabling features for dependencies with `--features`]\n-  (https://github.com/rust-lang/cargo/pull/2876)\n-* [Add `--jobs` flag to `cargo package`]\n-  (https://github.com/rust-lang/cargo/pull/2867)\n-* [Add `--dry-run` to `cargo publish`]\n-  (https://github.com/rust-lang/cargo/pull/2849)\n-* [Add support for `RUSTDOCFLAGS`]\n-  (https://github.com/rust-lang/cargo/pull/2794)\n+* [Support local mirrors of registries](https://github.com/rust-lang/cargo/pull/2857)\n+* [Add support for command aliases](https://github.com/rust-lang/cargo/pull/2679)\n+* [Allow `opt-level=\"s\"` / `opt-level=\"z\"` in profile overrides](https://github.com/rust-lang/cargo/pull/3007)\n+* [Make `cargo doc --open --target` work as expected](https://github.com/rust-lang/cargo/pull/2988)\n+* [Speed up noop registry updates](https://github.com/rust-lang/cargo/pull/2974)\n+* [Update OpenSSL](https://github.com/rust-lang/cargo/pull/2971)\n+* [Fix `--panic=abort` with plugins](https://github.com/rust-lang/cargo/pull/2954)\n+* [Always pass `-C metadata` to the compiler](https://github.com/rust-lang/cargo/pull/2946)\n+* [Fix depending on git repos with workspaces](https://github.com/rust-lang/cargo/pull/2938)\n+* [Add a `--lib` flag to `cargo new`](https://github.com/rust-lang/cargo/pull/2921)\n+* [Add `http.cainfo` for custom certs](https://github.com/rust-lang/cargo/pull/2917)\n+* [Indicate the compilation profile after compiling](https://github.com/rust-lang/cargo/pull/2909)\n+* [Allow enabling features for dependencies with `--features`](https://github.com/rust-lang/cargo/pull/2876)\n+* [Add `--jobs` flag to `cargo package`](https://github.com/rust-lang/cargo/pull/2867)\n+* [Add `--dry-run` to `cargo publish`](https://github.com/rust-lang/cargo/pull/2849)\n+* [Add support for `RUSTDOCFLAGS`](https://github.com/rust-lang/cargo/pull/2794)\n \n Performance\n -----------\n \n-* [`panic::catch_unwind` is more optimized]\n-  (https://github.com/rust-lang/rust/pull/35444)\n-* [`panic::catch_unwind` no longer accesses thread-local storage on entry]\n-  (https://github.com/rust-lang/rust/pull/34866)\n+* [`panic::catch_unwind` is more optimized](https://github.com/rust-lang/rust/pull/35444)\n+* [`panic::catch_unwind` no longer accesses thread-local storage on entry](https://github.com/rust-lang/rust/pull/34866)\n \n Tooling\n -------\n \n * [Test binaries now support a `--test-threads` argument to specify the number\n   of threads used to run tests, and which acts the same as the\n-  `RUST_TEST_THREADS` environment variable]\n-  (https://github.com/rust-lang/rust/pull/35414)  \n-* [The test runner now emits a warning when tests run over 60 seconds]\n-  (https://github.com/rust-lang/rust/pull/35405)\n-* [rustdoc: Fix methods in search results]\n-  (https://github.com/rust-lang/rust/pull/34752)\n-* [`rust-lldb` warns about unsupported versions of LLDB]\n-  (https://github.com/rust-lang/rust/pull/34646)\n+  `RUST_TEST_THREADS` environment variable](https://github.com/rust-lang/rust/pull/35414)  \n+* [The test runner now emits a warning when tests run over 60 seconds](https://github.com/rust-lang/rust/pull/35405)\n+* [rustdoc: Fix methods in search results](https://github.com/rust-lang/rust/pull/34752)\n+* [`rust-lldb` warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n * [Rust releases now come with source packages that can be installed by rustup\n-  via `rustup component add rust-src`]\n-  (https://github.com/rust-lang/rust/pull/34366).\n+  via `rustup component add rust-src`](https://github.com/rust-lang/rust/pull/34366).\n   The resulting source code can be used by tools and IDES, located in the\n   sysroot under `lib/rustlib/src`.\n \n Misc\n ----\n \n-* [The compiler can now be built against LLVM 3.9]\n-  (https://github.com/rust-lang/rust/pull/35594)\n+* [The compiler can now be built against LLVM 3.9](https://github.com/rust-lang/rust/pull/35594)\n * Many minor improvements to the documentation.\n-* [The Rust exception handling \"personality\" routine is now written in Rust]\n-  (https://github.com/rust-lang/rust/pull/34832)\n+* [The Rust exception handling \"personality\" routine is now written in Rust](https://github.com/rust-lang/rust/pull/34832)\n \n Compatibility Notes\n -------------------\n \n * [When printing Windows `OsStr`s, unpaired surrogate codepoints are escaped\n-  with the lowercase format instead of the uppercase]\n-  (https://github.com/rust-lang/rust/pull/35084)\n+  with the lowercase format instead of the uppercase](https://github.com/rust-lang/rust/pull/35084)\n * [When formatting strings, if \"precision\" is specified, the \"fill\",\n-  \"align\" and \"width\" specifiers are no longer ignored]\n-  (https://github.com/rust-lang/rust/pull/34544)\n-* [The `Debug` impl for strings no longer escapes all non-ASCII characters]\n-  (https://github.com/rust-lang/rust/pull/34485)\n+  \"align\" and \"width\" specifiers are no longer ignored](https://github.com/rust-lang/rust/pull/34544)\n+* [The `Debug` impl for strings no longer escapes all non-ASCII characters](https://github.com/rust-lang/rust/pull/34485)\n \n \n Version 1.11.0 (2016-08-18)\n@@ -1206,142 +1377,92 @@ Version 1.11.0 (2016-08-18)\n Language\n --------\n \n-* [`cfg_attr` works on `path` attributes]\n-  (https://github.com/rust-lang/rust/pull/34546)\n-* [Support nested `cfg_attr` attributes]\n-  (https://github.com/rust-lang/rust/pull/34216)\n-* [Allow statement-generating braced macro invocations at the end of blocks]\n-  (https://github.com/rust-lang/rust/pull/34436)\n-* [Macros can be expanded inside of trait definitions]\n-  (https://github.com/rust-lang/rust/pull/34213)\n-* [`#[macro_use]` works properly when it is itself expanded from a macro]\n-  (https://github.com/rust-lang/rust/pull/34032)\n+* [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n+* [Support nested `cfg_attr` attributes](https://github.com/rust-lang/rust/pull/34216)\n+* [Allow statement-generating braced macro invocations at the end of blocks](https://github.com/rust-lang/rust/pull/34436)\n+* [Macros can be expanded inside of trait definitions](https://github.com/rust-lang/rust/pull/34213)\n+* [`#[macro_use]` works properly when it is itself expanded from a macro](https://github.com/rust-lang/rust/pull/34032)\n \n Stabilized APIs\n ---------------\n \n-* [`BinaryHeap::append`]\n-  (https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append)\n-* [`BTreeMap::append`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append)\n-* [`BTreeMap::split_off`]\n-  (https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off)\n-* [`BTreeSet::append`]\n-  (https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append)\n-* [`BTreeSet::split_off`]\n-  (https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off)\n-* [`f32::to_degrees`]\n-  (https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees)\n+* [`BinaryHeap::append`](https://doc.rust-lang.org/std/collections/binary_heap/struct.BinaryHeap.html#method.append)\n+* [`BTreeMap::append`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.append)\n+* [`BTreeMap::split_off`](https://doc.rust-lang.org/std/collections/btree_map/struct.BTreeMap.html#method.split_off)\n+* [`BTreeSet::append`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.append)\n+* [`BTreeSet::split_off`](https://doc.rust-lang.org/std/collections/btree_set/struct.BTreeSet.html#method.split_off)\n+* [`f32::to_degrees`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_degrees)\n   (in libcore - previously stabilized in libstd)\n-* [`f32::to_radians`]\n-  (https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians)\n+* [`f32::to_radians`](https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians)\n   (in libcore - previously stabilized in libstd)\n-* [`f64::to_degrees`]\n-  (https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees)\n+* [`f64::to_degrees`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_degrees)\n   (in libcore - previously stabilized in libstd)\n-* [`f64::to_radians`]\n-  (https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians)\n+* [`f64::to_radians`](https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians)\n   (in libcore - previously stabilized in libstd)\n-* [`Iterator::sum`]\n-  (https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n-* [`Iterator::product`]\n-  (https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n-* [`Cell::get_mut`]\n-  (https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut)\n-* [`RefCell::get_mut`]\n-  (https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut)\n+* [`Iterator::sum`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n+* [`Iterator::product`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\n+* [`Cell::get_mut`](https://doc.rust-lang.org/std/cell/struct.Cell.html#method.get_mut)\n+* [`RefCell::get_mut`](https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.get_mut)\n \n Libraries\n ---------\n \n * [The `thread_local!` macro supports multiple definitions in a single\n-   invocation, and can apply attributes]\n-  (https://github.com/rust-lang/rust/pull/34077)\n-* [`Cow` implements `Default`]\n-  (https://github.com/rust-lang/rust/pull/34305)\n+   invocation, and can apply attributes](https://github.com/rust-lang/rust/pull/34077)\n+* [`Cow` implements `Default`](https://github.com/rust-lang/rust/pull/34305)\n * [`Wrapping` implements binary, octal, lower-hex and upper-hex\n-  `Display` formatting]\n-  (https://github.com/rust-lang/rust/pull/34190)\n-* [The range types implement `Hash`]\n-  (https://github.com/rust-lang/rust/pull/34180)\n-* [`lookup_host` ignores unknown address types]\n-  (https://github.com/rust-lang/rust/pull/34067)\n-* [`assert_eq!` accepts a custom error message, like `assert!` does]\n-  (https://github.com/rust-lang/rust/pull/33976)\n-* [The main thread is now called \"main\" instead of \"&lt;main&gt;\"]\n-  (https://github.com/rust-lang/rust/pull/33803)\n+  `Display` formatting](https://github.com/rust-lang/rust/pull/34190)\n+* [The range types implement `Hash`](https://github.com/rust-lang/rust/pull/34180)\n+* [`lookup_host` ignores unknown address types](https://github.com/rust-lang/rust/pull/34067)\n+* [`assert_eq!` accepts a custom error message, like `assert!` does](https://github.com/rust-lang/rust/pull/33976)\n+* [The main thread is now called \"main\" instead of \"&lt;main&gt;\"](https://github.com/rust-lang/rust/pull/33803)\n \n Cargo\n -----\n \n-* [Disallow specifying features of transitive deps]\n-  (https://github.com/rust-lang/cargo/pull/2821)\n-* [Add color support for Windows consoles]\n-  (https://github.com/rust-lang/cargo/pull/2804)\n-* [Fix `harness = false` on `[lib]` sections]\n-  (https://github.com/rust-lang/cargo/pull/2795)\n-* [Don't panic when `links` contains a '.']\n-  (https://github.com/rust-lang/cargo/pull/2787)\n-* [Build scripts can emit warnings]\n-  (https://github.com/rust-lang/cargo/pull/2630),\n+* [Disallow specifying features of transitive deps](https://github.com/rust-lang/cargo/pull/2821)\n+* [Add color support for Windows consoles](https://github.com/rust-lang/cargo/pull/2804)\n+* [Fix `harness = false` on `[lib]` sections](https://github.com/rust-lang/cargo/pull/2795)\n+* [Don't panic when `links` contains a '.'](https://github.com/rust-lang/cargo/pull/2787)\n+* [Build scripts can emit warnings](https://github.com/rust-lang/cargo/pull/2630),\n   and `-vv` prints warnings for all crates.\n-* [Ignore file locks on OS X NFS mounts]\n-  (https://github.com/rust-lang/cargo/pull/2720)\n-* [Don't warn about `package.metadata` keys]\n-  (https://github.com/rust-lang/cargo/pull/2668).\n+* [Ignore file locks on OS X NFS mounts](https://github.com/rust-lang/cargo/pull/2720)\n+* [Don't warn about `package.metadata` keys](https://github.com/rust-lang/cargo/pull/2668).\n   This provides room for expansion by arbitrary tools.\n-* [Add support for cdylib crate types]\n-  (https://github.com/rust-lang/cargo/pull/2741)\n-* [Prevent publishing crates when files are dirty]\n-  (https://github.com/rust-lang/cargo/pull/2781)\n-* [Don't fetch all crates on clean]\n-  (https://github.com/rust-lang/cargo/pull/2704)\n-* [Propagate --color option to rustc]\n-  (https://github.com/rust-lang/cargo/pull/2779)\n-* [Fix `cargo doc --open` on Windows]\n-  (https://github.com/rust-lang/cargo/pull/2780)\n-* [Improve autocompletion]\n-  (https://github.com/rust-lang/cargo/pull/2772)\n-* [Configure colors of stderr as well as stdout]\n-  (https://github.com/rust-lang/cargo/pull/2739)\n+* [Add support for cdylib crate types](https://github.com/rust-lang/cargo/pull/2741)\n+* [Prevent publishing crates when files are dirty](https://github.com/rust-lang/cargo/pull/2781)\n+* [Don't fetch all crates on clean](https://github.com/rust-lang/cargo/pull/2704)\n+* [Propagate --color option to rustc](https://github.com/rust-lang/cargo/pull/2779)\n+* [Fix `cargo doc --open` on Windows](https://github.com/rust-lang/cargo/pull/2780)\n+* [Improve autocompletion](https://github.com/rust-lang/cargo/pull/2772)\n+* [Configure colors of stderr as well as stdout](https://github.com/rust-lang/cargo/pull/2739)\n \n Performance\n -----------\n \n * [Caching projections speeds up type check dramatically for some\n-  workloads]\n-  (https://github.com/rust-lang/rust/pull/33816)\n-* [The default `HashMap` hasher is SipHash 1-3 instead of SipHash 2-4]\n-  (https://github.com/rust-lang/rust/pull/33940)\n+  workloads](https://github.com/rust-lang/rust/pull/33816)\n+* [The default `HashMap` hasher is SipHash 1-3 instead of SipHash 2-4](https://github.com/rust-lang/rust/pull/33940)\n   This hasher is faster, but is believed to provide sufficient\n   protection from collision attacks.\n-* [Comparison of `Ipv4Addr` is 10x faster]\n-  (https://github.com/rust-lang/rust/pull/33891)\n+* [Comparison of `Ipv4Addr` is 10x faster](https://github.com/rust-lang/rust/pull/33891)\n \n Rustdoc\n -------\n \n-* [Fix empty implementation section on some module pages]\n-  (https://github.com/rust-lang/rust/pull/34536)\n-* [Fix inlined renamed reexports in import lists]\n-  (https://github.com/rust-lang/rust/pull/34479)\n-* [Fix search result layout for enum variants and struct fields]\n-  (https://github.com/rust-lang/rust/pull/34477)\n-* [Fix issues with source links to external crates]\n-  (https://github.com/rust-lang/rust/pull/34387)\n-* [Fix redirect pages for renamed reexports]\n-  (https://github.com/rust-lang/rust/pull/34245)\n+* [Fix empty implementation section on some module pages](https://github.com/rust-lang/rust/pull/34536)\n+* [Fix inlined renamed reexports in import lists](https://github.com/rust-lang/rust/pull/34479)\n+* [Fix search result layout for enum variants and struct fields](https://github.com/rust-lang/rust/pull/34477)\n+* [Fix issues with source links to external crates](https://github.com/rust-lang/rust/pull/34387)\n+* [Fix redirect pages for renamed reexports](https://github.com/rust-lang/rust/pull/34245)\n \n Tooling\n -------\n \n-* [rustc is better at finding the MSVC toolchain]\n-  (https://github.com/rust-lang/rust/pull/34492)\n+* [rustc is better at finding the MSVC toolchain](https://github.com/rust-lang/rust/pull/34492)\n * [When emitting debug info, rustc emits frame pointers for closures,\n-  shims and glue, as it does for all other functions]\n-  (https://github.com/rust-lang/rust/pull/33909)\n-* [rust-lldb warns about unsupported versions of LLDB]\n-  (https://github.com/rust-lang/rust/pull/34646)\n+  shims and glue, as it does for all other functions](https://github.com/rust-lang/rust/pull/33909)\n+* [rust-lldb warns about unsupported versions of LLDB](https://github.com/rust-lang/rust/pull/34646)\n * Many more errors have been given error codes and extended\n   explanations\n * API documentation continues to be improved, with many new examples\n@@ -1350,30 +1471,22 @@ Misc\n ----\n \n * [rustc no longer hangs when dependencies recursively re-export\n-  submodules]\n-  (https://github.com/rust-lang/rust/pull/34542)\n-* [rustc requires LLVM 3.7+]\n-  (https://github.com/rust-lang/rust/pull/34104)\n+  submodules](https://github.com/rust-lang/rust/pull/34542)\n+* [rustc requires LLVM 3.7+](https://github.com/rust-lang/rust/pull/34104)\n * [The 'How Safe and Unsafe Interact' chapter of The Rustonomicon was\n-  rewritten]\n-  (https://github.com/rust-lang/rust/pull/33895)\n-* [rustc support 16-bit pointer sizes]\n-  (https://github.com/rust-lang/rust/pull/33460).\n+  rewritten](https://github.com/rust-lang/rust/pull/33895)\n+* [rustc support 16-bit pointer sizes](https://github.com/rust-lang/rust/pull/33460).\n   No targets use this yet, but it works toward AVR support.\n \n Compatibility Notes\n -------------------\n \n-* [`const`s and `static`s may not have unsized types]\n-  (https://github.com/rust-lang/rust/pull/34443)\n+* [`const`s and `static`s may not have unsized types](https://github.com/rust-lang/rust/pull/34443)\n * [The new follow-set rules that place restrictions on `macro_rules!`\n-  in order to ensure syntax forward-compatibility have been enabled]\n-  (https://github.com/rust-lang/rust/pull/33982)\n-  This was an [ammendment to RFC 550]\n-  (https://github.com/rust-lang/rfcs/pull/1384),\n+  in order to ensure syntax forward-compatibility have been enabled](https://github.com/rust-lang/rust/pull/33982)\n+  This was an [ammendment to RFC 550](https://github.com/rust-lang/rfcs/pull/1384),\n   and has been a warning since 1.10.\n-* [`cfg` attribute process has been refactored to fix various bugs]\n-  (https://github.com/rust-lang/rust/pull/33706).\n+* [`cfg` attribute process has been refactored to fix various bugs](https://github.com/rust-lang/rust/pull/33706).\n   This causes breakage in some corner cases.\n \n \n@@ -1384,21 +1497,15 @@ Language\n --------\n \n * [Allow `concat_idents!` in type positions as well as in expression\n-  positions]\n-  (https://github.com/rust-lang/rust/pull/33735).\n-* [`Copy` types are required to have a trivial implementation of `Clone`]\n-  (https://github.com/rust-lang/rust/pull/33420).\n+  positions](https://github.com/rust-lang/rust/pull/33735).\n+* [`Copy` types are required to have a trivial implementation of `Clone`](https://github.com/rust-lang/rust/pull/33420).\n   [RFC 1521](https://github.com/rust-lang/rfcs/blob/master/text/1521-copy-clone-semantics.md).\n-* [Single-variant enums support the `#[repr(..)]` attribute]\n-  (https://github.com/rust-lang/rust/pull/33355).\n-* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods]\n-  (https://github.com/rust-lang/rust/pull/32908).\n+* [Single-variant enums support the `#[repr(..)]` attribute](https://github.com/rust-lang/rust/pull/33355).\n+* [Fix `#[derive(RustcEncodable)]` in the presence of other `encode` methods](https://github.com/rust-lang/rust/pull/32908).\n * [`panic!` can be converted to a runtime abort with the\n-  `-C panic=abort` flag]\n-  (https://github.com/rust-lang/rust/pull/32900).\n+  `-C panic=abort` flag](https://github.com/rust-lang/rust/pull/32900).\n   [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n-* [Add a new crate type, 'cdylib']\n-  (https://github.com/rust-lang/rust/pull/33553).\n+* [Add a new crate type, 'cdylib'](https://github.com/rust-lang/rust/pull/33553).\n   cdylibs are dynamic libraries suitable for loading by non-Rust hosts.\n   [RFC 1510](https://github.com/rust-lang/rfcs/blob/master/text/1510-rdylib.md).\n   Note that Cargo does not yet directly support cdylibs.\n@@ -1412,242 +1519,146 @@ Stabilized APIs\n * `os::windows::fs::OpenOptionsExt::attributes`\n * `os::windows::fs::OpenOptionsExt::security_qos_flags`\n * `os::unix::fs::OpenOptionsExt::custom_flags`\n-* [`sync::Weak::new`]\n-  (http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n+* [`sync::Weak::new`](http://doc.rust-lang.org/alloc/arc/struct.Weak.html#method.new)\n * `Default for sync::Weak`\n-* [`panic::set_hook`]\n-  (http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n-* [`panic::take_hook`]\n-  (http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n-* [`panic::PanicInfo`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n-* [`panic::PanicInfo::payload`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n-* [`panic::PanicInfo::location`]\n-  (http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n-* [`panic::Location`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html)\n-* [`panic::Location::file`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n-* [`panic::Location::line`]\n-  (http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n-* [`ffi::CStr::from_bytes_with_nul`]\n-  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n-* [`ffi::CStr::from_bytes_with_nul_unchecked`]\n-  (http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n-* [`ffi::FromBytesWithNulError`]\n-  (http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n-* [`fs::Metadata::modified`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n-* [`fs::Metadata::accessed`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n-* [`fs::Metadata::created`]\n-  (http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n+* [`panic::set_hook`](http://doc.rust-lang.org/std/panic/fn.set_hook.html)\n+* [`panic::take_hook`](http://doc.rust-lang.org/std/panic/fn.take_hook.html)\n+* [`panic::PanicInfo`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html)\n+* [`panic::PanicInfo::payload`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.payload)\n+* [`panic::PanicInfo::location`](http://doc.rust-lang.org/std/panic/struct.PanicInfo.html#method.location)\n+* [`panic::Location`](http://doc.rust-lang.org/std/panic/struct.Location.html)\n+* [`panic::Location::file`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.file)\n+* [`panic::Location::line`](http://doc.rust-lang.org/std/panic/struct.Location.html#method.line)\n+* [`ffi::CStr::from_bytes_with_nul`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul)\n+* [`ffi::CStr::from_bytes_with_nul_unchecked`](http://doc.rust-lang.org/std/ffi/struct.CStr.html#method.from_bytes_with_nul_unchecked)\n+* [`ffi::FromBytesWithNulError`](http://doc.rust-lang.org/std/ffi/struct.FromBytesWithNulError.html)\n+* [`fs::Metadata::modified`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified)\n+* [`fs::Metadata::accessed`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.accessed)\n+* [`fs::Metadata::created`](http://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created)\n * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange`\n * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange_weak`\n * `collections::{btree,hash}_map::{Occupied,Vacant,}Entry::key`\n * `os::unix::net::{UnixStream, UnixListener, UnixDatagram, SocketAddr}`\n-* [`SocketAddr::is_unnamed`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n-* [`SocketAddr::as_pathname`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n-* [`UnixStream::connect`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n-* [`UnixStream::pair`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n-* [`UnixStream::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n-* [`UnixStream::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n-* [`UnixStream::peer_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n-* [`UnixStream::set_read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n-* [`UnixStream::set_write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n-* [`UnixStream::read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n-* [`UnixStream::write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n-* [`UnixStream::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n-* [`UnixStream::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n-* [`UnixStream::shutdown`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n+* [`SocketAddr::is_unnamed`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.is_unnamed)\n+* [`SocketAddr::as_pathname`](http://doc.rust-lang.org/std/os/unix/net/struct.SocketAddr.html#method.as_pathname)\n+* [`UnixStream::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.connect)\n+* [`UnixStream::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.pair)\n+* [`UnixStream::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.try_clone)\n+* [`UnixStream::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.local_addr)\n+* [`UnixStream::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.peer_addr)\n+* [`UnixStream::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.read_timeout)\n+* [`UnixStream::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.write_timeout)\n+* [`UnixStream::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.set_nonblocking)\n+* [`UnixStream::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.take_error)\n+* [`UnixStream::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixStream.html#method.shutdown)\n * Read/Write/RawFd impls for `UnixStream`\n-* [`UnixListener::bind`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n-* [`UnixListener::accept`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n-* [`UnixListener::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n-* [`UnixListener::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n-* [`UnixListener::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n-* [`UnixListener::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n-* [`UnixListener::incoming`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n+* [`UnixListener::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.bind)\n+* [`UnixListener::accept`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.accept)\n+* [`UnixListener::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.try_clone)\n+* [`UnixListener::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.local_addr)\n+* [`UnixListener::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.set_nonblocking)\n+* [`UnixListener::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.take_error)\n+* [`UnixListener::incoming`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixListener.html#method.incoming)\n * RawFd impls for `UnixListener`\n-* [`UnixDatagram::bind`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n-* [`UnixDatagram::unbound`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n-* [`UnixDatagram::pair`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n-* [`UnixDatagram::connect`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n-* [`UnixDatagram::try_clone`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n-* [`UnixDatagram::local_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n-* [`UnixDatagram::peer_addr`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n-* [`UnixDatagram::recv_from`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n-* [`UnixDatagram::recv`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n-* [`UnixDatagram::send_to`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n-* [`UnixDatagram::send`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n-* [`UnixDatagram::set_read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n-* [`UnixDatagram::set_write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n-* [`UnixDatagram::read_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n-* [`UnixDatagram::write_timeout`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n-* [`UnixDatagram::set_nonblocking`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n-* [`UnixDatagram::take_error`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n-* [`UnixDatagram::shutdown`]\n-  (http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n+* [`UnixDatagram::bind`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.bind)\n+* [`UnixDatagram::unbound`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.unbound)\n+* [`UnixDatagram::pair`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.pair)\n+* [`UnixDatagram::connect`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.connect)\n+* [`UnixDatagram::try_clone`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.try_clone)\n+* [`UnixDatagram::local_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.local_addr)\n+* [`UnixDatagram::peer_addr`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.peer_addr)\n+* [`UnixDatagram::recv_from`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv_from)\n+* [`UnixDatagram::recv`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.recv)\n+* [`UnixDatagram::send_to`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send_to)\n+* [`UnixDatagram::send`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.send)\n+* [`UnixDatagram::set_read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_read_timeout)\n+* [`UnixDatagram::set_write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_write_timeout)\n+* [`UnixDatagram::read_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.read_timeout)\n+* [`UnixDatagram::write_timeout`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.write_timeout)\n+* [`UnixDatagram::set_nonblocking`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.set_nonblocking)\n+* [`UnixDatagram::take_error`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.take_error)\n+* [`UnixDatagram::shutdown`](http://doc.rust-lang.org/std/os/unix/net/struct.UnixDatagram.html#method.shutdown)\n * RawFd impls for `UnixDatagram`\n * `{BTree,Hash}Map::values_mut`\n-* [`<[_]>::binary_search_by_key`]\n-  (http://doc.rust-lang.org/beta/std/primitive.slice.html#method.binary_search_by_key)\n+* [`<[_]>::binary_search_by_key`](http://doc.rust-lang.org/beta/std/primitive.slice.html#method.binary_search_by_key)\n \n Libraries\n ---------\n \n-* [The `abs_sub` method of floats is deprecated]\n-  (https://github.com/rust-lang/rust/pull/33664).\n+* [The `abs_sub` method of floats is deprecated](https://github.com/rust-lang/rust/pull/33664).\n   The semantics of this minor method are subtle and probably not what\n   most people want.\n-* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord]\n-  (https://github.com/rust-lang/rust/pull/33306).\n+* [Add implementation of Ord for Cell<T> and RefCell<T> where T: Ord](https://github.com/rust-lang/rust/pull/33306).\n * [On Linux, if `HashMap`s can't be initialized with `getrandom` they\n   will fall back to `/dev/urandom` temporarily to avoid blocking\n-  during early boot]\n-  (https://github.com/rust-lang/rust/pull/33086).\n-* [Implemented negation for wrapping numerals]\n-  (https://github.com/rust-lang/rust/pull/33067).\n-* [Implement `Clone` for `binary_heap::IntoIter`]\n-  (https://github.com/rust-lang/rust/pull/33050).\n-* [Implement `Display` and `Hash` for `std::num::Wrapping`]\n-  (https://github.com/rust-lang/rust/pull/33023).\n-* [Add `Default` implementation for `&CStr`, `CString`]\n-  (https://github.com/rust-lang/rust/pull/32990).\n-* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`]\n-  (https://github.com/rust-lang/rust/pull/32866).\n+  during early boot](https://github.com/rust-lang/rust/pull/33086).\n+* [Implemented negation for wrapping numerals](https://github.com/rust-lang/rust/pull/33067).\n+* [Implement `Clone` for `binary_heap::IntoIter`](https://github.com/rust-lang/rust/pull/33050).\n+* [Implement `Display` and `Hash` for `std::num::Wrapping`](https://github.com/rust-lang/rust/pull/33023).\n+* [Add `Default` implementation for `&CStr`, `CString`](https://github.com/rust-lang/rust/pull/32990).\n+* [Implement `From<Vec<T>>` and `Into<Vec<T>>` for `VecDeque<T>`](https://github.com/rust-lang/rust/pull/32866).\n * [Implement `Default` for `UnsafeCell`, `fmt::Error`, `Condvar`,\n-  `Mutex`, `RwLock`]\n-  (https://github.com/rust-lang/rust/pull/32785).\n+  `Mutex`, `RwLock`](https://github.com/rust-lang/rust/pull/32785).\n \n Cargo\n -----\n-* [Cargo.toml supports the `profile.*.panic` option]\n-  (https://github.com/rust-lang/cargo/pull/2687).\n+* [Cargo.toml supports the `profile.*.panic` option](https://github.com/rust-lang/cargo/pull/2687).\n   This controls the runtime behavior of the `panic!` macro\n   and can be either \"unwind\" (the default), or \"abort\".\n   [RFC 1513](https://github.com/rust-lang/rfcs/blob/master/text/1513-less-unwinding.md).\n-* [Don't throw away errors with `-p` arguments]\n-  (https://github.com/rust-lang/cargo/pull/2723).\n-* [Report status to stderr instead of stdout]\n-  (https://github.com/rust-lang/cargo/pull/2693).\n+* [Don't throw away errors with `-p` arguments](https://github.com/rust-lang/cargo/pull/2723).\n+* [Report status to stderr instead of stdout](https://github.com/rust-lang/cargo/pull/2693).\n * [Build scripts are passed a `CARGO_MANIFEST_LINKS` environment\n-  variable that corresponds to the `links` field of the manifest]\n-  (https://github.com/rust-lang/cargo/pull/2710).\n-* [Ban keywords from crate names]\n-  (https://github.com/rust-lang/cargo/pull/2707).\n-* [Canonicalize `CARGO_HOME` on Windows]\n-  (https://github.com/rust-lang/cargo/pull/2604).\n-* [Retry network requests]\n-  (https://github.com/rust-lang/cargo/pull/2396).\n+  variable that corresponds to the `links` field of the manifest](https://github.com/rust-lang/cargo/pull/2710).\n+* [Ban keywords from crate names](https://github.com/rust-lang/cargo/pull/2707).\n+* [Canonicalize `CARGO_HOME` on Windows](https://github.com/rust-lang/cargo/pull/2604).\n+* [Retry network requests](https://github.com/rust-lang/cargo/pull/2396).\n   By default they are retried twice, which can be customized with the\n   `net.retry` value in `.cargo/config`.\n-* [Don't print extra error info for failing subcommands]\n-  (https://github.com/rust-lang/cargo/pull/2674).\n-* [Add `--force` flag to `cargo install`]\n-  (https://github.com/rust-lang/cargo/pull/2405).\n-* [Don't use `flock` on NFS mounts]\n-  (https://github.com/rust-lang/cargo/pull/2623).\n-* [Prefer building `cargo install` artifacts in temporary directories]\n-  (https://github.com/rust-lang/cargo/pull/2610).\n+* [Don't print extra error info for failing subcommands](https://github.com/rust-lang/cargo/pull/2674).\n+* [Add `--force` flag to `cargo install`](https://github.com/rust-lang/cargo/pull/2405).\n+* [Don't use `flock` on NFS mounts](https://github.com/rust-lang/cargo/pull/2623).\n+* [Prefer building `cargo install` artifacts in temporary directories](https://github.com/rust-lang/cargo/pull/2610).\n   Makes it possible to install multiple crates in parallel.\n-* [Add `cargo test --doc`]\n-  (https://github.com/rust-lang/cargo/pull/2578).\n-* [Add `cargo --explain`]\n-  (https://github.com/rust-lang/cargo/pull/2551).\n-* [Don't print warnings when `-q` is passed]\n-  (https://github.com/rust-lang/cargo/pull/2576).\n-* [Add `cargo doc --lib` and `--bin`]\n-  (https://github.com/rust-lang/cargo/pull/2577).\n-* [Don't require build script output to be UTF-8]\n-  (https://github.com/rust-lang/cargo/pull/2560).\n-* [Correctly attempt multiple git usernames]\n-  (https://github.com/rust-lang/cargo/pull/2584).\n+* [Add `cargo test --doc`](https://github.com/rust-lang/cargo/pull/2578).\n+* [Add `cargo --explain`](https://github.com/rust-lang/cargo/pull/2551).\n+* [Don't print warnings when `-q` is passed](https://github.com/rust-lang/cargo/pull/2576).\n+* [Add `cargo doc --lib` and `--bin`](https://github.com/rust-lang/cargo/pull/2577).\n+* [Don't require build script output to be UTF-8](https://github.com/rust-lang/cargo/pull/2560).\n+* [Correctly attempt multiple git usernames](https://github.com/rust-lang/cargo/pull/2584).\n \n Performance\n -----------\n \n * [rustc memory usage was reduced by refactoring the context used for\n-  type checking]\n-  (https://github.com/rust-lang/rust/pull/33425).\n+  type checking](https://github.com/rust-lang/rust/pull/33425).\n * [Speed up creation of `HashMap`s by caching the random keys used\n-  to initialize the hash state]\n-  (https://github.com/rust-lang/rust/pull/33318).\n-* [The `find` implementation for `Chain` iterators is 2x faster]\n-  (https://github.com/rust-lang/rust/pull/33289).\n-* [Trait selection optimizations speed up type checking by 15%]\n-  (https://github.com/rust-lang/rust/pull/33138).\n-* [Efficient trie lookup for boolean Unicode properties]\n-  (https://github.com/rust-lang/rust/pull/33098).\n+  to initialize the hash state](https://github.com/rust-lang/rust/pull/33318).\n+* [The `find` implementation for `Chain` iterators is 2x faster](https://github.com/rust-lang/rust/pull/33289).\n+* [Trait selection optimizations speed up type checking by 15%](https://github.com/rust-lang/rust/pull/33138).\n+* [Efficient trie lookup for boolean Unicode properties](https://github.com/rust-lang/rust/pull/33098).\n   10x faster than the previous lookup tables.\n-* [Special case `#[derive(Copy, Clone)]` to avoid bloat]\n-  (https://github.com/rust-lang/rust/pull/31414).\n+* [Special case `#[derive(Copy, Clone)]` to avoid bloat](https://github.com/rust-lang/rust/pull/31414).\n \n Usability\n ---------\n \n * Many incremental improvements to documentation and rustdoc.\n-* [rustdoc: List blanket trait impls]\n-  (https://github.com/rust-lang/rust/pull/33514).\n-* [rustdoc: Clean up ABI rendering]\n-  (https://github.com/rust-lang/rust/pull/33151).\n-* [Indexing with the wrong type produces a more informative error]\n-  (https://github.com/rust-lang/rust/pull/33401).\n-* [Improve diagnostics for constants being used in irrefutable patterns]\n-  (https://github.com/rust-lang/rust/pull/33406).\n-* [When many method candidates are in scope limit the suggestions to 10]\n-  (https://github.com/rust-lang/rust/pull/33338).\n-* [Remove confusing suggestion when calling a `fn` type]\n-  (https://github.com/rust-lang/rust/pull/33325).\n-* [Do not suggest changing `&mut self` to `&mut mut self`]\n-  (https://github.com/rust-lang/rust/pull/33319).\n+* [rustdoc: List blanket trait impls](https://github.com/rust-lang/rust/pull/33514).\n+* [rustdoc: Clean up ABI rendering](https://github.com/rust-lang/rust/pull/33151).\n+* [Indexing with the wrong type produces a more informative error](https://github.com/rust-lang/rust/pull/33401).\n+* [Improve diagnostics for constants being used in irrefutable patterns](https://github.com/rust-lang/rust/pull/33406).\n+* [When many method candidates are in scope limit the suggestions to 10](https://github.com/rust-lang/rust/pull/33338).\n+* [Remove confusing suggestion when calling a `fn` type](https://github.com/rust-lang/rust/pull/33325).\n+* [Do not suggest changing `&mut self` to `&mut mut self`](https://github.com/rust-lang/rust/pull/33319).\n \n Misc\n ----\n \n-* [Update i686-linux-android features to match Android ABI]\n-  (https://github.com/rust-lang/rust/pull/33651).\n-* [Update aarch64-linux-android features to match Android ABI]\n-  (https://github.com/rust-lang/rust/pull/33500).\n+* [Update i686-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33651).\n+* [Update aarch64-linux-android features to match Android ABI](https://github.com/rust-lang/rust/pull/33500).\n * [`std` no longer prints backtraces on platforms where the running\n   module must be loaded with `env::current_exe`, which can't be relied\n   on](https://github.com/rust-lang/rust/pull/33554).\n@@ -1658,34 +1669,24 @@ Misc\n * [The `rust-gdb` and `rust-lldb` scripts are distributed on all\n   Unix platforms](https://github.com/rust-lang/rust/pull/32835).\n * [On Unix the runtime aborts by calling `libc::abort` instead of\n-  generating an illegal instruction]\n-  (https://github.com/rust-lang/rust/pull/31457).\n+  generating an illegal instruction](https://github.com/rust-lang/rust/pull/31457).\n * [Rust is now bootstrapped from the previous release of Rust,\n-  instead of a snapshot from an arbitrary commit]\n-  (https://github.com/rust-lang/rust/pull/32942).\n+  instead of a snapshot from an arbitrary commit](https://github.com/rust-lang/rust/pull/32942).\n \n Compatibility Notes\n -------------------\n \n-* [`AtomicBool` is now bool-sized, not word-sized]\n-  (https://github.com/rust-lang/rust/pull/33579).\n+* [`AtomicBool` is now bool-sized, not word-sized](https://github.com/rust-lang/rust/pull/33579).\n * [`target_env` for Linux ARM targets is just `gnu`, not\n-  `gnueabihf`, `gnueabi`, etc]\n-  (https://github.com/rust-lang/rust/pull/33403).\n-* [Consistently panic on overflow in `Duration::new`]\n-  (https://github.com/rust-lang/rust/pull/33072).\n-* [Change `String::truncate` to panic less]\n-  (https://github.com/rust-lang/rust/pull/32977).\n-* [Add `:block` to the follow set for `:ty` and `:path`]\n-  (https://github.com/rust-lang/rust/pull/32945).\n+  `gnueabihf`, `gnueabi`, etc](https://github.com/rust-lang/rust/pull/33403).\n+* [Consistently panic on overflow in `Duration::new`](https://github.com/rust-lang/rust/pull/33072).\n+* [Change `String::truncate` to panic less](https://github.com/rust-lang/rust/pull/32977).\n+* [Add `:block` to the follow set for `:ty` and `:path`](https://github.com/rust-lang/rust/pull/32945).\n   Affects how macros are parsed.\n-* [Fix macro hygiene bug]\n-  (https://github.com/rust-lang/rust/pull/32923).\n+* [Fix macro hygiene bug](https://github.com/rust-lang/rust/pull/32923).\n * [Feature-gated attributes on macro-generated macro invocations are\n-  now rejected]\n-  (https://github.com/rust-lang/rust/pull/32791).\n-* [Suppress fallback and ambiguity errors during type inference]\n-  (https://github.com/rust-lang/rust/pull/32258).\n+  now rejected](https://github.com/rust-lang/rust/pull/32791).\n+* [Suppress fallback and ambiguity errors during type inference](https://github.com/rust-lang/rust/pull/32258).\n   This caused some minor changes to type inference.\n \n \n@@ -5056,7 +5057,7 @@ Version 0.1  (2012-01-20)\n \n    * Compiler works with the following configurations:\n       * Linux: x86 and x86_64 hosts and targets\n-      * MacOS: x86 and x86_64 hosts and targets\n+      * macOS: x86 and x86_64 hosts and targets\n       * Windows: x86 hosts and targets\n \n    * Cross compilation / multi-target configuration supported."}, {"sha": "96de1d90f25e623319f3defd8e2e5e2c0cceb2fe", "filename": "appveyor.yml", "status": "modified", "additions": 50, "deletions": 37, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -20,39 +20,28 @@ environment:\n \n   # 32/64-bit MinGW builds.\n   #\n-  # The MinGW builds unfortunately have to both download a custom toolchain and\n-  # avoid the one installed by AppVeyor by default. Interestingly, though, for\n-  # different reasons!\n+  # We are using MinGW with posix threads since LLVM does not compile with\n+  # the win32 threads version due to missing support for C++'s std::thread.\n   #\n-  # For 32-bit the installed gcc toolchain on AppVeyor uses the pthread\n-  # threading model. This is unfortunately not what we want, and if we compile\n-  # with it then there's lots of link errors in the standard library (undefined\n-  # references to pthread symbols).\n-  #\n-  # For 64-bit the installed gcc toolchain is currently 5.3.0 which\n-  # unfortunately segfaults on Windows with --enable-llvm-assertions (segfaults\n-  # in LLVM). See rust-lang/rust#28445 for more information, but to work around\n-  # this we go back in time to 4.9.2 specifically.\n+  # Instead of relying on the MinGW version installed on appveryor we download\n+  # and install one ourselves so we won't be surprised by changes to appveyor's\n+  # build image.\n   #\n   # Finally, note that the downloads below are all in the `rust-lang-ci` S3\n   # bucket, but they cleraly didn't originate there! The downloads originally\n   # came from the mingw-w64 SourceForge download site. Unfortunately\n   # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n-  #\n-  # And as a final point of note, the 32-bit MinGW build using the makefiles do\n-  # *not* use debug assertions and llvm assertions. This is because they take\n-  # too long on appveyor and this is tested by rustbuild below.\n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n     SCRIPT: python x.py test\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n   - MSYS_BITS: 64\n     SCRIPT: python x.py test\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n \n   # 32/64 bit MSVC and GNU deployment\n@@ -70,15 +59,15 @@ environment:\n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended\n     SCRIPT: python x.py dist\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n   - MSYS_BITS: 64\n     SCRIPT: python x.py dist\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z\n+    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+    MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64\n     DEPLOY: 1\n \n@@ -107,6 +96,26 @@ install:\n   - if defined MINGW_URL 7z x -y %MINGW_ARCHIVE% > nul\n   - if defined MINGW_URL set PATH=%CD%\\%MINGW_DIR%\\bin;C:\\msys64\\usr\\bin;%PATH%\n \n+  # Here we do a pretty heinous thing which is to mangle the MinGW installation\n+  # we just had above. Currently, as of this writing, we're using MinGW-w64\n+  # builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to\n+  # be the first version which contains a fix for #40546, builds randomly\n+  # failing during LLVM due to ar.exe/ranlib.exe failures.\n+  #\n+  # Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n+  # to contain a regression in gdb (#40184). As a result if we were to use the\n+  # gdb provided (7.11.1) then we would fail all debuginfo tests.\n+  #\n+  # In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n+  # avoid disabling gdb tests we download an *old* version of gdb, specifically\n+  # that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n+  # with the 6.2.0 gdb to get tests passing.\n+  #\n+  # Note that we don't literally overwrite the gdb.exe binary because it appears\n+  # to just use gdborig.exe, so that's the binary we deal with instead.\n+  - if defined MINGW_URL appveyor-retry appveyor DownloadFile %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\n+  - if defined MINGW_URL mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n+\n   # Otherwise pull in the MinGW installed on appveyor\n   - if NOT defined MINGW_URL set PATH=C:\\msys64\\mingw%MSYS_BITS%\\bin;C:\\msys64\\usr\\bin;%PATH%\n \n@@ -115,39 +124,41 @@ install:\n   - set PATH=C:\\Python27;%PATH%\n \n   # Download and install sccache\n-  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-pc-windows-msvc\n-  - mv 2017-02-25-sccache-x86_64-pc-windows-msvc sccache\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-pc-windows-msvc\n+  - mv 2017-05-12-sccache-x86_64-pc-windows-msvc sccache.exe\n   - set PATH=%PATH%;%CD%\n \n+  # Download and install ninja\n+  #\n+  # Note that this is originally from the github releases patch of Ninja\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-15-ninja-win.zip\n+  - 7z x 2017-03-15-ninja-win.zip\n+  - set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n+  # - set PATH=%PATH%;%CD% -- this already happens above for sccache\n+\n   # Install InnoSetup to get `iscc` used to produce installers\n   - appveyor-retry choco install -y InnoSetup\n   - set PATH=\"C:\\Program Files (x86)\\Inno Setup 5\";%PATH%\n \n   # Help debug some handle issues on AppVeyor\n-  - ps: Invoke-WebRequest -Uri https://download.sysinternals.com/files/Handle.zip -OutFile handle.zip\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-15-Handle.zip\n   - mkdir handle\n-  - ps: Expand-Archive handle.zip -dest handle\n+  - 7z x -ohandle 2017-05-15-Handle.zip\n   - set PATH=%PATH%;%CD%\\handle\n   - handle.exe -accepteula -help\n \n   # Attempt to debug sccache failures\n-  - set RUST_LOG=sccache\n   - set SCCACHE_ERROR_LOG=%CD%/sccache.log\n \n test_script:\n-  - appveyor-retry sh -c 'git submodule deinit -f . && git submodule update --init'\n+  - if not exist C:\\cache\\rustsrc\\NUL mkdir C:\\cache\\rustsrc\n+  - sh src/ci/init_repo.sh . /c/cache/rustsrc\n   - set SRC=.\n   - set NO_CCACHE=1\n   - sh src/ci/run.sh\n \n on_failure:\n-  - cat %CD%/sccache.log\n-\n-cache:\n-  - \"build/i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-auto-clean-trigger\"\n-  - \"build/x86_64-pc-windows-msvc/llvm -> src/rustllvm/llvm-auto-clean-trigger\"\n-  - \"i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-auto-clean-trigger\"\n-  - \"x86_64-pc-windows-msvc/llvm -> src/rustllvm/llvm-auto-clean-trigger\"\n+  - cat %CD%\\sccache.log || exit 0\n \n branches:\n   only:\n@@ -176,6 +187,7 @@ deploy:\n     on:\n       branch: auto\n       DEPLOY: 1\n+    max_error_retry: 5\n \n   # This provider is the same as the one above except that it has a slightly\n   # different upload directory and a slightly different trigger\n@@ -192,6 +204,7 @@ deploy:\n     on:\n       branch: auto\n       DEPLOY_ALT: 1\n+    max_error_retry: 5\n \n # init:\n #   - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))"}, {"sha": "5f3b9c4c6a7be1f177d6024cb83d150b6479148a", "filename": "cargo", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1 +0,0 @@\n-Subproject commit 5f3b9c4c6a7be1f177d6024cb83d150b6479148a"}, {"sha": "af59d5b0bb88977d2c512af7fa1f1c096ed398ea", "filename": "configure", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/configure", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -437,6 +437,7 @@ opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n opt local-rebuild 0 \"assume local-rust matches the current version, for rebuilds; implies local-rust, and is implied if local-rust already matches the current version\"\n opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n opt llvm-link-shared 0 \"prefer shared linking to LLVM (llvm-config --link-shared)\"\n+opt llvm-clean-rebuild 0 \"delete LLVM build directory on rebuild\"\n opt rpath 1 \"build rpaths into rustc itself\"\n opt stage0-landing-pads 1 \"enable landing pads during bootstrap with stage0\"\n # This is used by the automation to produce single-target nightlies\n@@ -478,6 +479,7 @@ valopt i686-linux-android-ndk \"\" \"i686-linux-android NDK standalone path\"\n valopt arm-linux-androideabi-ndk \"\" \"arm-linux-androideabi NDK standalone path\"\n valopt armv7-linux-androideabi-ndk \"\" \"armv7-linux-androideabi NDK standalone path\"\n valopt aarch64-linux-android-ndk \"\" \"aarch64-linux-android NDK standalone path\"\n+valopt x86_64-linux-android-ndk \"\" \"x86_64-linux-android NDK standalone path\"\n valopt nacl-cross-path  \"\" \"NaCl SDK path (Pepper Canary is recommended). Must be absolute!\"\n valopt musl-root \"/usr/local\" \"MUSL root installation directory (deprecated)\"\n valopt musl-root-x86_64 \"\" \"x86_64-unknown-linux-musl install directory\"\n@@ -508,7 +510,6 @@ valopt default-ar     \"ar\" \"the default ar\"\n opt_nosave manage-submodules 1 \"let the build manage the git submodules\"\n opt_nosave clang 0 \"prefer clang to gcc for building the runtime\"\n opt_nosave jemalloc 1 \"build liballoc with jemalloc\"\n-opt elf-tls 1 \"elf thread local storage on platforms where supported\"\n opt full-bootstrap 0 \"build three compilers instead of two\"\n opt extended 0 \"build an extended rust tool set\"\n \n@@ -518,6 +519,7 @@ valopt_nosave host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n valopt_nosave target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n valopt_nosave mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n valopt_nosave docdir \"${CFG_PREFIX}/share/doc/rust\" \"install documentation in PATH\"\n+valopt_nosave bindir \"${CFG_PREFIX}/bin\" \"install binaries\"\n \n # On Windows this determines root of the subtree for target libraries.\n # Host runtime libs always go to 'bin'.\n@@ -709,6 +711,7 @@ envopt LDFLAGS\n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_MANDIR=${CFG_MANDIR%/}\n CFG_DOCDIR=${CFG_DOCDIR%/}\n+CFG_BINDIR=${CFG_BINDIR%/}\n CFG_HOST=\"$(echo $CFG_HOST | tr ',' ' ')\"\n CFG_TARGET=\"$(echo $CFG_TARGET | tr ',' ' ')\"\n \n@@ -745,9 +748,11 @@ putvar CFG_AARCH64_LINUX_ANDROID_NDK\n putvar CFG_ARM_LINUX_ANDROIDEABI_NDK\n putvar CFG_ARMV7_LINUX_ANDROIDEABI_NDK\n putvar CFG_I686_LINUX_ANDROID_NDK\n+putvar CFG_X86_64_LINUX_ANDROID_NDK\n putvar CFG_NACL_CROSS_PATH\n putvar CFG_MANDIR\n putvar CFG_DOCDIR\n+putvar CFG_BINDIR\n putvar CFG_USING_LIBCPP\n \n msg"}, {"sha": "6c80f11fa7205fdd22fd35f579134624ea6da15b", "filename": "man/rustc.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -50,7 +50,7 @@ Comma separated list of types of crates for the compiler to emit.\n \\fB\\-\\-crate\\-name\\fR \\fINAME\\fR\n Specify the name of the crate being built.\n .TP\n-\\fB\\-\\-emit\\fR [asm|llvm\\-bc|llvm\\-ir|obj|link|dep\\-info][=\\fIPATH\\fR]\n+\\fB\\-\\-emit\\fR [asm|llvm\\-bc|llvm\\-ir|obj|link|dep\\-info|mir][=\\fIPATH\\fR]\n Configure the output that \\fBrustc\\fR will produce. Each emission may also have\n an optional explicit output \\fIPATH\\fR specified for that particular emission\n kind. This path takes precedence over the \\fB-o\\fR option."}, {"sha": "e23bdbd9fd87f0788bc930f5cab9fc85389eb1d2", "filename": "src/Cargo.lock", "status": "modified", "additions": 1280, "deletions": 122, "changes": 1402, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -6,9 +6,26 @@ dependencies = [\n  \"libc 0.0.0\",\n ]\n \n+[[package]]\n+name = \"advapi32-sys\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"aho-corasick\"\n-version = \"0.6.2\"\n+version = \"0.6.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -27,7 +44,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -48,6 +65,29 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"arena\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"backtrace\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"backtrace-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"backtrace-sys\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"bitflags\"\n version = \"0.5.0\"\n@@ -58,26 +98,36 @@ name = \"bitflags\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"bitflags\"\n+version = \"0.8.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bufstream\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -88,31 +138,108 @@ dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cargo\"\n+version = \"0.20.0\"\n+source = \"git+https://github.com/rust-lang/cargo#2b32084293d8da63b48de56363a0f2e986ec3367\"\n+replace = \"cargo 0.20.0\"\n+\n+[[package]]\n+name = \"cargo\"\n+version = \"0.20.0\"\n+dependencies = [\n+ \"advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargotest 0.1.0\",\n+ \"crates-io 0.9.0\",\n+ \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"docopt 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fs2 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libgit2-sys 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_ignored 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tar 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cargotest\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo 0.20.0\",\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tar 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cargotest2\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"cfg-if\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"clap\"\n-version = \"2.20.5\"\n+version = \"2.19.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strsim 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term_size 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vec_map 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cmake\"\n-version = \"0.1.21\"\n+version = \"0.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -130,45 +257,143 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n- \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"core\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"crates-io\"\n+version = \"0.9.0\"\n+dependencies = [\n+ \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"crossbeam\"\n+version = \"0.2.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"curl\"\n+version = \"0.4.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"curl-sys 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"curl-sys\"\n+version = \"0.3.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"dbghelp-sys\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"derive-new\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"diff\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"docopt\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"dtoa\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"either\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"enum_primitive\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"env_logger\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"env_logger\"\n-version = \"0.4.0\"\n+version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"error-chain\"\n+version = \"0.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"backtrace 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n@@ -178,26 +403,59 @@ name = \"filetime\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"flate\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"flate2\"\n+version = \"0.2.19\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"fmt_macros\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"foreign-types\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"fs2\"\n+version = \"0.4.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"gcc\"\n-version = \"0.3.43\"\n+version = \"0.3.46\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"gdi32-sys\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"getopts\"\n version = \"0.0.0\"\n@@ -207,22 +465,93 @@ name = \"getopts\"\n version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"git2\"\n+version = \"0.6.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libgit2-sys 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"git2-curl\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"glob\"\n+version = \"0.2.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"graphviz\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"hamcrest\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"handlebars\"\n-version = \"0.25.1\"\n+version = \"0.25.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"idna\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-bidi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-normalization 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"installer\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tar 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"xz2 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"itertools\"\n+version = \"0.5.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -239,9 +568,22 @@ dependencies = [\n  \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"languageserver-types\"\n+version = \"0.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"lazy_static\"\n-version = \"0.2.2\"\n+version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -253,65 +595,256 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.20\"\n+version = \"0.2.22\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"libgit2-sys\"\n+version = \"0.6.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"curl-sys 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"libssh2-sys\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"libz-sys\"\n+version = \"1.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"linkchecker\"\n version = \"0.1.0\"\n \n [[package]]\n name = \"log\"\n-version = \"0.0.0\"\n+version = \"0.3.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"log\"\n-version = \"0.3.6\"\n+name = \"lzma-sys\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"matches\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.0.17\"\n+version = \"0.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.20.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"handlebars 0.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"handlebars 0.25.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"0.1.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"memchr\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"num-traits\"\n+name = \"miniz-sys\"\n+version = \"0.1.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"miow\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"net2 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"multimap\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"net2\"\n+version = \"0.2.29\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-bigint 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-complex 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-iter 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-rational 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-bigint\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-complex\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-integer\"\n+version = \"0.1.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-iter\"\n+version = \"0.1.33\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-rational\"\n version = \"0.1.36\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-bigint 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"num-traits\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"num_cpus\"\n-version = \"0.2.13\"\n+version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"open\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"openssl\"\n+version = \"0.9.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"openssl-probe\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"openssl-sys\"\n+version = \"0.9.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"user32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"owning_ref\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"panic_abort\"\n version = \"0.0.0\"\n@@ -335,6 +868,11 @@ name = \"pest\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"pkg-config\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n@@ -351,6 +889,15 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"psapi-sys\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.0.8\"\n@@ -361,31 +908,75 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"qemu-test-client\"\n-version = \"0.1.0\"\n+name = \"pulldown-cmark\"\n+version = \"0.0.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n-name = \"qemu-test-server\"\n-version = \"0.1.0\"\n+name = \"quick-error\"\n+version = \"1.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"quick-error\"\n-version = \"1.1.0\"\n+name = \"quote\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"racer\"\n+version = \"2.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"typed-arena 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rand\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rand\"\n+version = \"0.3.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"regex\"\n+version = \"0.1.80\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"regex\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"aho-corasick 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -394,15 +985,91 @@ dependencies = [\n \n [[package]]\n name = \"regex-syntax\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"remote-test-client\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"remote-test-server\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"rls\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"cargo 0.20.0 (git+https://github.com/rust-lang/cargo)\",\n+ \"derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"languageserver-types 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"racer 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-analysis 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-vfs 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfmt 0.8.4 (git+https://github.com/rust-lang-nursery/rustfmt)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rls-analysis\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rls-data\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rls-span\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rls-vfs\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"racer 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.20.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mdbook 0.0.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mdbook 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -412,18 +1079,23 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc-demangle\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"rustc-main\"\n version = \"0.0.0\"\n@@ -435,7 +1107,7 @@ dependencies = [\n \n [[package]]\n name = \"rustc-serialize\"\n-version = \"0.3.22\"\n+version = \"0.3.24\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -444,15 +1116,15 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n [[package]]\n name = \"rustc_back\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -466,7 +1138,7 @@ name = \"rustc_borrowck\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -480,8 +1152,7 @@ name = \"rustc_const_eval\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -503,7 +1174,7 @@ dependencies = [\n name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n ]\n \n@@ -512,8 +1183,9 @@ name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro_plugin 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -523,7 +1195,6 @@ dependencies = [\n  \"rustc_errors 0.0.0\",\n  \"rustc_incremental 0.0.0\",\n  \"rustc_lint 0.0.0\",\n- \"rustc_llvm 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"rustc_passes 0.0.0\",\n@@ -552,7 +1223,7 @@ name = \"rustc_incremental\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -564,7 +1235,7 @@ dependencies = [\n name = \"rustc_lint\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -577,7 +1248,7 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n@@ -587,7 +1258,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -596,14 +1267,14 @@ name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_ext 0.0.0\",\n@@ -615,7 +1286,7 @@ name = \"rustc_mir\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n@@ -631,15 +1302,15 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n [[package]]\n name = \"rustc_passes\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -678,7 +1349,7 @@ name = \"rustc_resolve\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -689,9 +1360,12 @@ dependencies = [\n name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"serialize 0.0.0\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_typeck 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -701,11 +1375,11 @@ name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -723,7 +1397,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -733,10 +1407,9 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"fmt_macros 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -751,43 +1424,147 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.0.0\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_driver 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_lint 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"rustc_resolve 0.0.0\",\n  \"rustc_trans 0.0.0\",\n+ \"rustc_typeck 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustfmt\"\n+version = \"0.8.4\"\n+source = \"git+https://github.com/rust-lang-nursery/rustfmt#bf9b3fa1d7cab2f7bd541539d397a92b4954ec96\"\n+dependencies = [\n+ \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"same-file\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"semver\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"semver-parser\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"serde\"\n+version = \"0.9.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"serde\"\n-version = \"0.9.7\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"serde_derive\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_derive_internals\"\n+version = \"0.15.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_ignored\"\n+version = \"0.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_json\"\n+version = \"0.9.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"serde_json\"\n-version = \"0.9.7\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serialize\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"shell-escape\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"stable_deref_trait\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"std\"\n version = \"0.0.0\"\n@@ -799,7 +1576,7 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -819,17 +1596,57 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"strings\"\n+version = \"0.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"strsim\"\n+version = \"0.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"strsim\"\n version = \"0.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"syn\"\n+version = \"0.8.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"0.11.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"synom\"\n+version = \"0.11.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"syntax\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n- \"rustc_bitflags 0.0.0\",\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -841,7 +1658,7 @@ name = \"syntax_ext\"\n version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n- \"log 0.0.0\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -855,17 +1672,113 @@ dependencies = [\n  \"serialize 0.0.0\",\n ]\n \n+[[package]]\n+name = \"syntex_errors\"\n+version = \"0.52.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_errors\"\n+version = \"0.58.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_pos\"\n+version = \"0.52.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_pos\"\n+version = \"0.58.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_syntax\"\n+version = \"0.52.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_syntax\"\n+version = \"0.58.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"tar\"\n+version = \"0.4.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"xattr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"tempdir\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"term\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"term\"\n+version = \"0.4.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"term_size\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -879,19 +1792,36 @@ dependencies = [\n \n [[package]]\n name = \"thread-id\"\n-version = \"3.0.0\"\n+version = \"2.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thread-id\"\n+version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thread_local\"\n+version = \"0.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"thread_local\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"thread-id 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -904,27 +1834,76 @@ name = \"toml\"\n version = \"0.1.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"toml\"\n-version = \"0.3.0\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"toml\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"toml\"\n+version = \"0.4.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"typed-arena\"\n+version = \"1.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-bidi\"\n+version = \"0.2.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"unicode-normalization\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unicode-segmentation\"\n-version = \"1.1.0\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-segmentation\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"unicode-width\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unreachable\"\n version = \"0.1.1\"\n@@ -933,6 +1912,38 @@ dependencies = [\n  \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"url\"\n+version = \"1.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"idna 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"url_serde\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"user32-sys\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"utf8-ranges\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"utf8-ranges\"\n version = \"1.0.0\"\n@@ -948,6 +1959,16 @@ name = \"void\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"walkdir\"\n+version = \"1.0.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"winapi\"\n version = \"0.2.8\"\n@@ -958,49 +1979,186 @@ name = \"winapi-build\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"ws2_32-sys\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"xattr\"\n+version = \"0.1.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"xz2\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lzma-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"yaml-rust\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [metadata]\n-\"checksum aho-corasick 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0638fd549427caa90c499814196d1b9e3725eb4d15d7339d6de073a680ed0ca2\"\n+\"checksum advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e06588080cb19d0acb6739808aafa5f26bfb2ca015b2b6370028b44cf7cb8a9a\"\n+\"checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66\"\n+\"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n \"checksum ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23ac7c30002a5accbf7e8987d0632fa6de155b7c3d39d0067317a391e00a2ef6\"\n+\"checksum backtrace 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f551bc2ddd53aea015d453ef0b635af89444afa5ed2405dd0b2062ad5d600d80\"\n+\"checksum backtrace-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d192fd129132fbc97497c1f2ec2c2c5174e376b95f535199ef4fe0a293d33842\"\n \"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n-\"checksum clap 2.20.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7db281b0520e97fbd15cd615dcd8f8bcad0c26f5f7d5effe705f090f39e9a758\"\n-\"checksum cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1acc68a3f714627af38f9f5d09706a28584ba60dfe2cca68f40bf779f941b25\"\n+\"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n+\"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n+\"checksum cargo 0.20.0 (git+https://github.com/rust-lang/cargo)\" = \"<none>\"\n+\"checksum cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de1e760d7b6535af4241fca8bd8adf68e2e7edacc6b29f5d399050c5e48cf88c\"\n+\"checksum clap 2.19.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95b78f3fe0fc94c13c731714363260e04b557a637166f33a4570d3189d642374\"\n+\"checksum cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92278eb79412c8f75cfc89e707a1bb3a6490b68f7f2e78d15c774f30fe701122\"\n+\"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n+\"checksum curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c90e1240ef340dd4027ade439e5c7c2064dd9dc652682117bd50d1486a3add7b\"\n+\"checksum curl-sys 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23e7e544dc5e1ba42c4a4a678bd47985e84b9c3f4d3404c29700622a029db9c3\"\n+\"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n+\"checksum derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41be6ca3b99e0c0483fb2389685448f650459c3ecbe4e18d7705d8010ec4ab8e\"\n+\"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n+\"checksum docopt 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab32ea6e284d87987066f21a9e809a73c14720571ef34516f0890b3d355ccfd8\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n+\"checksum either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18785c1ba806c258137c937e44ada9ee7e69a37e3c72077542cd2f069d78562a\"\n+\"checksum enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be4551092f4d519593039259a9ed8daedf0da12e5109c5280338073eaeb81180\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n-\"checksum env_logger 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99971fb1b635fe7a0ee3c4d065845bb93cca80a23b5613b5613391ece5de4144\"\n+\"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n+\"checksum error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9435d864e017c3c6afeac1654189b06cdb491cf2ff73dbf0d73b0f292f42ff8\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c07c758b972368e703a562686adb39125707cc1ef3399da8c019fc6c2498a75d\"\n+\"checksum flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36df0166e856739905cd3d7e0b210fe818592211a008862599845e012d8d304c\"\n+\"checksum foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e4056b9bd47f8ac5ba12be771f77a0dae796d1bbaaf5fd0b9c2d38b69b8a29d\"\n+\"checksum fs2 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34edaee07555859dc13ca387e6ae05686bb4d0364c95d649b6dab959511f4baf\"\n+\"checksum gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\" = \"181e3cebba1d663bd92eb90e2da787e10597e027eb00de8d742b260a7850948f\"\n+\"checksum gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0912515a8ff24ba900422ecda800b52f4016a56251922d397c576bf92c690518\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n-\"checksum handlebars 0.25.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2249f6f0dc5a3bb2b3b1a8f797dfccbc4b053344d773d654ad565e51427d335\"\n+\"checksum git2 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9de9df4358c17e448a778d90cd0272e1dab5eae30244502333fa2001c4e24357\"\n+\"checksum git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"68676bc784bf0bef83278898929bf64a251e87c0340723d0b93fa096c9c5bf8e\"\n+\"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n+\"checksum hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf088f042a467089e9baa4972f57f9247e42a0cc549ba264c7a04fbb8ecb89d4\"\n+\"checksum handlebars 0.25.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15bdf598fc3c2de40c6b340213028301c0d225eea55a2294e6cc148074e557a1\"\n+\"checksum idna 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ac85ec3f80c8e4e99d9325521337e14ec7555c458a14e377d189659a427f375\"\n+\"checksum itertools 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4833d6978da405305126af4ac88569b5d71ff758581ce5a987dbfa3755f694fc\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum lazy_static 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6abe0ee2e758cd6bc8a2cd56726359007748fbf4128da998b65d0b70f881e19b\"\n-\"checksum libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"684f330624d8c3784fb9558ca46c4ce488073a8d22450415c5eb4f4cfb0d11b5\"\n-\"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n-\"checksum mdbook 0.0.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbba458ca886cb082d026afd704eeeeb0531f7e4ffd6c619f72dc309c1c18fe4\"\n+\"checksum languageserver-types 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97c2985bfcbbcb0189cfa25e1c10c1ac7111df2b6214b652c690127aefdf4e5b\"\n+\"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n+\"checksum libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"babb8281da88cba992fa1f4ddec7d63ed96280a1a53ec9b919fd37b53d71e502\"\n+\"checksum libgit2-sys 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd89dd7196d5fa35b659c3eaf3c1b14b9bd961bfd1a07dfca49adeb8a6aa3763\"\n+\"checksum libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0db4ec23611747ef772db1c4d650f8bd762f07b461727ec998f953c614024b75\"\n+\"checksum libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e5ee912a45d686d393d5ac87fac15ba0ba18daae14e8e7543c63ebf7fb7e970c\"\n+\"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n+\"checksum lzma-sys 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fedff6a5cbb24494ec6ee4784e9ac5c187161fede04c7767d49bf87544013afa\"\n+\"checksum matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efd7622e3022e1a6eaa602c4cea8912254e5582c9c692e9167714182244801b1\"\n+\"checksum mdbook 0.0.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1e2e9d848514dcfad4195788d0d42ae5153a477c191d75d5b84fab10f222fbd\"\n+\"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n-\"checksum num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a16a42856a256b39c6d3484f097f6713e14feacd9bfb02290917904fae46c81c\"\n-\"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n+\"checksum miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28eaee17666671fa872e567547e8428e83308ebe5808cdf6a0e28397dbe2c726\"\n+\"checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919\"\n+\"checksum multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9223f4774d08e06185e44e555b9a7561243d387bac49c78a6205c42d6975fbf2\"\n+\"checksum net2 0.2.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc01404e7568680f1259aa5729539f221cb1e6d047a0d9053cab4be8a73b5d67\"\n+\"checksum num 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98b15ba84e910ea7a1973bccd3df7b31ae282bf9d8bd2897779950c9b8303d40\"\n+\"checksum num-bigint 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba6d838b16e56da1b6c383d065ff1ec3c7d7797f65a3e8f6ba7092fd87820bac\"\n+\"checksum num-complex 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"148eb324ca772230853418731ffdf13531738b50f89b30692a01fcdcb0a64677\"\n+\"checksum num-integer 0.1.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef1a4bf6f9174aa5783a9b4cc892cacd11aebad6c69ad027a0b65c6ca5f8aa37\"\n+\"checksum num-iter 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7d1891bd7b936f12349b7d1403761c8a0b85a18b148e9da4429d5d102c1a41e\"\n+\"checksum num-rational 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c2dc5ea04020a8f18318ae485c751f8cfa1c0e69dcf465c29ddaaa64a313cc44\"\n+\"checksum num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1cbfa3781f3fe73dc05321bed52a06d2d491eaa764c52335cf4399f046ece99\"\n+\"checksum num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca313f1862c7ec3e0dfe8ace9fa91b1d9cb5c84ace3d00f5ec4216238e93c167\"\n \"checksum open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3478ed1686bd1300c8a981a940abc92b06fac9cbef747f4c668d4e032ff7b842\"\n+\"checksum openssl 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb5d1663b73d10c6a3eda53e2e9d0346f822394e7b858d7257718f65f61dfbe2\"\n+\"checksum openssl-probe 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d98df0270d404ccd3c050a41d579c52d1db15375168bb3471e04ec0f5f378daf\"\n+\"checksum openssl-sys 0.9.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a5886d87d3e2a0d890bf62dc8944f5e3769a405f7e1e9ef6e517e47fd7a0897\"\n+\"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n+\"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n+\"checksum psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abcd5d1a07d360e29727f757a9decb3ce8bc6e0efa8969cfaad669a8317a2478\"\n+\"checksum pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9ab1e588ef8efd702c7ed9d2bd774db5e6f4d878bb5a1a9f371828fbdff6973\"\n \"checksum pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1058d7bb927ca067656537eec4e02c2b4b70eaaa129664c5b90c111e20326f41\"\n-\"checksum quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0aad603e8d7fb67da22dbdf1f4b826ce8829e406124109e73cf1b2454b93a71c\"\n+\"checksum quick-error 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c36987d4978eb1be2e422b1e0423a557923a5c3e7e6f31d5699e9aafaefa469\"\n+\"checksum quote 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c5cf478fe1006dbcc72567121d23dbdae5f1632386068c5c86ff4f645628504\"\n+\"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n+\"checksum racer 2.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0d72b3afd67882adfca61d609fafb8d7aa5f9e814f12c32fcc6e171995920e8\"\n+\"checksum rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"022e0636ec2519ddae48154b028864bdce4eaf7d35226ab8e65c611be97b189d\"\n+\"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n \"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\"\n+\"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n \"checksum regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9191b1f57603095f105d317e375d19b1c9c5c3185ea9633a99a6dcbed04457\"\n-\"checksum rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"237546c689f20bb44980270c73c3b9edd0891c1be49cc1274406134a66d3957b\"\n-\"checksum serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e0ed773960f90a78567fcfbe935284adf50c5d7cf119aa2cf43bb0b4afa69bb\"\n-\"checksum serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb96d30e4e6f9fc52e08f51176d078b6f79b981dc3ed4134f7b850be9f446a8\"\n+\"checksum rls-analysis 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a62d88c341375c6f3f8b2e18b9b364896e7d3e7aa916907de717d0267e116506\"\n+\"checksum rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc4277ce3c57f456b11fe3145b181a844a25201bab5cbaa1978457e6e2f27d47\"\n+\"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n+\"checksum rls-vfs 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"986eada111517bcb5a7a75205b3f2b70c82e7766653cca61a23f5afce79bdb94\"\n+\"checksum rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3058a43ada2c2d0b92b3ae38007a2d0fa5e9db971be260e0171408a4ff471c95\"\n+\"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n+\"checksum rustfmt 0.8.4 (git+https://github.com/rust-lang-nursery/rustfmt)\" = \"<none>\"\n+\"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n+\"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n+\"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n+\"checksum serde 0.9.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34b623917345a631dc9608d5194cc206b3fe6c3554cd1c75b937e55e285254af\"\n+\"checksum serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38a3db3a5757f68069aba764b793823ea9fb9717c42c016f8903f8add50f508a\"\n+\"checksum serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e46ef71ee001a4279a4513e79a6ebbb59da3a4987bf77a6df2e5534cd6f21d82\"\n+\"checksum serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"021c338d22c7e30f957a6ab7e388cb6098499dda9fd4ba1661ee074ca7a180d1\"\n+\"checksum serde_ignored 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c10e798e4405d7dcec3658989e35ee6706f730a9ed7c1184d5ebd84317e82f46\"\n+\"checksum serde_json 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad8bcf487be7d2e15d3d543f04312de991d631cfe1b43ea0ade69e6a8a5b16a1\"\n+\"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n+\"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n+\"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\"\n+\"checksum strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"54f86446ab480b4f60782188f4f78886465c5793aee248cbb48b7fdc0d022420\"\n+\"checksum strsim 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"67f84c44fbb2f91db7fef94554e6b2ac05909c9c0b0bc23bb98d3a1aebfe7f7c\"\n \"checksum strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4d15c810519a91cf877e7e36e63fe068815c678181439f2f29e2562147c3694\"\n+\"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n+\"checksum syn 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ae6fb0dcc9bd85f89a1a4adc0df2fd90c90c98849d61433983dd7a9df6363f7\"\n+\"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n+\"checksum syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e52bffe6202cfb67587784cf23e0ec5bf26d331eef4922a16d5c42e12aa1e9b\"\n+\"checksum syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"867cc5c2d7140ae7eaad2ae9e8bf39cb18a67ca651b7834f88d46ca98faadb9c\"\n+\"checksum syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"955ef4b16af4c468e4680d1497f873ff288f557d338180649e18f915af5e15ac\"\n+\"checksum syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13ad4762fe52abc9f4008e85c4fb1b1fe3aa91ccb99ff4826a439c7c598e1047\"\n+\"checksum syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76a302e717e348aa372ff577791c3832395650073b8d8432f8b3cb170b34afde\"\n+\"checksum syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6e0e4dbae163dd98989464c23dd503161b338790640e11537686f2ef0f25c791\"\n+\"checksum tar 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab0ef9ead2fe0aa9e18475a96a207bfd5143f4124779ef7429503a8665416ce8\"\n+\"checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6\"\n+\"checksum term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d168af3930b369cfe245132550579d47dfd873d69470755a19c2c6568dbbd989\"\n \"checksum term_size 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07b6c1ac5b3fffd75073276bca1ceed01f67a28537097a2a9539e116e50fb21a\"\n-\"checksum thread-id 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4437c97558c70d129e40629a5b385b3fb1ffac301e63941335e4d354081ec14a\"\n+\"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n+\"checksum thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8df7875b676fddfadffd96deea3b1124e5ede707d4884248931077518cf1f773\"\n+\"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c85048c6260d17cf486ceae3282d9fb6b90be220bf5b28c400f5485ffc29f0c7\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n-\"checksum toml 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08272367dd2e766db3fa38f068067d17aa6a9dfd7259af24b3927db92f1e0c2f\"\n-\"checksum unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18127285758f0e2c6cf325bb3f3d138a12fee27de4f23e146cd6a179f26c2cf3\"\n+\"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n+\"checksum toml 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd86ad9ebee246fdedd610e0f6d0587b754a3d81438db930a244d0480ed7878f\"\n+\"checksum toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4cc5dbfb20a481e64b99eb7ae280859ec76730c7191570ba5edaa962394edb0a\"\n+\"checksum typed-arena 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8e2f9dc90da4f9d66ffc9ad3ead2c7d57582a26f4a3292d2ce7011bd29965100\"\n+\"checksum unicode-bidi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3a078ebdd62c0e71a709c3d53d2af693fe09fe93fbff8344aebe289b78f9032\"\n+\"checksum unicode-normalization 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e28fa37426fceeb5cf8f41ee273faa7c82c47dc8fba5853402841e665fcd86ff\"\n+\"checksum unicode-segmentation 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c3bc443ded17b11305ffffe6b37e2076f328a5a8cb6aa877b1b98f77699e98b5\"\n+\"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n+\"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n+\"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n+\"checksum url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5ba8a749fb4479b043733416c244fa9d1d3af3d7c23804944651c8a448cb87e\"\n+\"checksum url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74e7d099f1ee52f823d4bdd60c93c3602043c728f5db3b97bdb548467f7bddea\"\n+\"checksum user32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ef4711d107b21b410a3a974b1204d9accc8b10dad75d8324b5d755de1617d47\"\n+\"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n \"checksum vec_map 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cac5efe5cb0fa14ec2f84f83c701c562ee63f6dcc680861b21d65c682adfb05f\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n+\"checksum walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb08f9e670fab86099470b97cd2b252d6527f0b3cc1401acdb595ffc9dd288ff\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n+\"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\"\n+\"checksum xattr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f04de8a1346489a2f9e9bd8526b73d135ec554227b17568456e86aa35b6f3fc\"\n+\"checksum xz2 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e9510bdf100731599107c61f77daf46713a69a568f75458999c1f9dbf6ba25b0\"\n+\"checksum yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e66366e18dc58b46801afbf2ca7661a9f59cc8c5962c29892b6039b4f86fa992\""}, {"sha": "85a6df3573ae120f377870a59a5162b3188c809f", "filename": "src/Cargo.toml", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -11,8 +11,11 @@ members = [\n   \"tools/rustbook\",\n   \"tools/tidy\",\n   \"tools/build-manifest\",\n-  \"tools/qemu-test-client\",\n-  \"tools/qemu-test-server\",\n+  \"tools/remote-test-client\",\n+  \"tools/remote-test-server\",\n+  \"tools/rust-installer\",\n+  \"tools/cargo\",\n+  \"tools/rls\",\n ]\n \n # Curiously, compiletest will segfault if compiled with opt-level=3 on 64-bit\n@@ -31,3 +34,6 @@ debug-assertions = false\n [profile.test]\n debug = false\n debug-assertions = false\n+\n+[replace]\n+\"https://github.com/rust-lang/cargo#0.20.0\" = { path = \"tools/cargo\" }"}, {"sha": "cc560e0172e3a3fa63a6e92e2bc873b028d49633", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -23,13 +23,18 @@ name = \"rustdoc\"\n path = \"bin/rustdoc.rs\"\n test = false\n \n+[[bin]]\n+name = \"sccache-plus-cl\"\n+path = \"bin/sccache-plus-cl.rs\"\n+test = false\n+\n [dependencies]\n build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.17\"\n+cmake = \"0.1.23\"\n filetime = \"0.1\"\n-num_cpus = \"0.2\"\n+num_cpus = \"1.0\"\n toml = \"0.1\"\n getopts = \"0.2\"\n rustc-serialize = \"0.3\"\n-gcc = \"0.3.38\"\n+gcc = \"0.3.46\"\n libc = \"0.2\""}, {"sha": "1ce99eb893efee2f190b351e9715c39770a6b098", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -4,10 +4,6 @@ This is an in-progress README which is targeted at helping to explain how Rust\n is bootstrapped and in general some of the technical details of the build\n system.\n \n-> **Note**: This build system is currently under active development and is not\n-> intended to be the primarily used one just yet. The makefiles are currently\n-> the ones that are still \"guaranteed to work\" as much as possible at least.\n-\n ## Using rustbuild\n \n The rustbuild build system has a primary entry point, a top level `x.py` script:"}, {"sha": "eb2cef133a34f2401b014f7a9b545bb7535845ab", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -38,7 +38,24 @@ use std::path::PathBuf;\n use std::process::{Command, ExitStatus};\n \n fn main() {\n-    let args = env::args_os().skip(1).collect::<Vec<_>>();\n+    let mut args = env::args_os().skip(1).collect::<Vec<_>>();\n+\n+    // Append metadata suffix for internal crates. See the corresponding entry\n+    // in bootstrap/lib.rs for details.\n+    if let Ok(s) = env::var(\"RUSTC_METADATA_SUFFIX\") {\n+        for i in 1..args.len() {\n+            // Dirty code for borrowing issues\n+            let mut new = None;\n+            if let Some(current_as_str) = args[i].to_str() {\n+                if (&*args[i - 1] == \"-C\" && current_as_str.starts_with(\"metadata\")) ||\n+                   current_as_str.starts_with(\"-Cmetadata\") {\n+                    new = Some(format!(\"{}-{}\", current_as_str, s));\n+                }\n+            }\n+            if let Some(new) = new { args[i] = new.into(); }\n+        }\n+    }\n+\n     // Detect whether or not we're a build script depending on whether --target\n     // is passed (a bit janky...)\n     let target = args.windows(2)\n@@ -94,6 +111,13 @@ fn main() {\n             cmd.arg(\"-Cprefer-dynamic\");\n         }\n \n+        // Pass the `rustbuild` feature flag to crates which rustbuild is\n+        // building. See the comment in bootstrap/lib.rs where this env var is\n+        // set for more details.\n+        if env::var_os(\"RUSTBUILD_UNSTABLE\").is_some() {\n+            cmd.arg(\"--cfg\").arg(\"rustbuild\");\n+        }\n+\n         // Help the libc crate compile by assisting it in finding the MUSL\n         // native libraries.\n         if let Some(s) = env::var_os(\"MUSL_ROOT\") {\n@@ -182,11 +206,13 @@ fn main() {\n         if env::var(\"RUSTC_RPATH\") == Ok(\"true\".to_string()) {\n             let rpath = if target.contains(\"apple\") {\n \n-                // Note that we need to take one extra step on OSX to also pass\n+                // Note that we need to take one extra step on macOS to also pass\n                 // `-Wl,-instal_name,@rpath/...` to get things to work right. To\n                 // do that we pass a weird flag to the compiler to get it to do\n                 // so. Note that this is definitely a hack, and we should likely\n                 // flesh out rpath support more fully in the future.\n+                //\n+                // FIXME: remove condition after next stage0\n                 if stage != \"0\" {\n                     cmd.arg(\"-Z\").arg(\"osx-rpath-install-name\");\n                 }\n@@ -211,6 +237,17 @@ fn main() {\n             cmd.arg(\"-Z\").arg(\"unstable-options\");\n             cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n         }\n+\n+        // Force all crates compiled by this compiler to (a) be unstable and (b)\n+        // allow the `rustc_private` feature to link to other unstable crates\n+        // also in the sysroot.\n+        //\n+        // FIXME: remove condition after next stage0\n+        if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n+            if stage != \"0\" {\n+                cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n+            }\n+        }\n     }\n \n     if verbose > 1 {"}, {"sha": "3a1a9c3e40d66066b708f48e2de876d38d7fa702", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -40,6 +40,14 @@ fn main() {\n         .arg(sysroot)\n         .env(bootstrap::util::dylib_path_var(),\n              env::join_paths(&dylib_path).unwrap());\n+\n+    // Pass the `rustbuild` feature flag to crates which rustbuild is\n+    // building. See the comment in bootstrap/lib.rs where this env var is\n+    // set for more details.\n+    if env::var_os(\"RUSTBUILD_UNSTABLE\").is_some() {\n+        cmd.arg(\"--cfg\").arg(\"rustbuild\");\n+    }\n+\n     std::process::exit(match cmd.status() {\n         Ok(s) => s.code().unwrap_or(1),\n         Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),"}, {"sha": "cf0c12749234c0bc7e19a91568ee3bf143419f04", "filename": "src/bootstrap/bin/sccache-plus-cl.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fsccache-plus-cl.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate gcc;\n+\n+use std::env;\n+use std::process::{self, Command};\n+\n+fn main() {\n+    let target = env::var(\"SCCACHE_TARGET\").unwrap();\n+    // Locate the actual compiler that we're invoking\n+    env::remove_var(\"CC\");\n+    env::remove_var(\"CXX\");\n+    let mut cfg = gcc::Config::new();\n+    cfg.cargo_metadata(false)\n+       .out_dir(\"/\")\n+       .target(&target)\n+       .host(&target)\n+       .opt_level(0)\n+       .debug(false);\n+    let compiler = cfg.get_compiler();\n+\n+    // Invoke sccache with said compiler\n+    let sccache_path = env::var_os(\"SCCACHE_PATH\").unwrap();\n+    let mut cmd = Command::new(&sccache_path);\n+    cmd.arg(compiler.path());\n+    for &(ref k, ref v) in compiler.env() {\n+        cmd.env(k, v);\n+    }\n+    for arg in env::args().skip(1) {\n+        cmd.arg(arg);\n+    }\n+\n+    let status = cmd.status().expect(\"failed to spawn\");\n+    process::exit(status.code().unwrap_or(2))\n+}"}, {"sha": "971064fe9fedecda17297bae3a8b68c87bec0fdc", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 154, "deletions": 74, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -14,6 +14,7 @@\n import datetime\n import hashlib\n import os\n+import re\n import shutil\n import subprocess\n import sys\n@@ -39,7 +40,8 @@ def get(url, path, verbose=False):\n                 return\n             else:\n                 if verbose:\n-                    print(\"ignoring already-download file \" + path + \" due to failed verification\")\n+                    print(\"ignoring already-download file \" +\n+                          path + \" due to failed verification\")\n                 os.unlink(path)\n         download(temp_path, url, True, verbose)\n         if not verify(temp_path, sha_path, verbose):\n@@ -99,8 +101,8 @@ def verify(path, sha_path, verbose):\n     verified = found == expected\n     if not verified:\n         print(\"invalid checksum:\\n\"\n-               \"    found:    {}\\n\"\n-               \"    expected: {}\".format(found, expected))\n+              \"    found:    {}\\n\"\n+              \"    expected: {}\".format(found, expected))\n     return verified\n \n \n@@ -126,20 +128,21 @@ def unpack(tarball, dst, verbose=False, match=None):\n             shutil.move(tp, fp)\n     shutil.rmtree(os.path.join(dst, fname))\n \n-def run(args, verbose=False, exception=False):\n+def run(args, verbose=False, exception=False, **kwargs):\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n     sys.stdout.flush()\n     # Use Popen here instead of call() as it apparently allows powershell on\n     # Windows to not lock up waiting for input presumably.\n-    ret = subprocess.Popen(args)\n+    ret = subprocess.Popen(args, **kwargs)\n     code = ret.wait()\n     if code != 0:\n         err = \"failed to run: \" + ' '.join(args)\n         if verbose or exception:\n             raise RuntimeError(err)\n         sys.exit(err)\n \n+\n def stage0_data(rust_root):\n     nightlies = os.path.join(rust_root, \"src/stage0.txt\")\n     data = {}\n@@ -152,65 +155,84 @@ def stage0_data(rust_root):\n             data[a] = b\n     return data\n \n+\n def format_build_time(duration):\n     return str(datetime.timedelta(seconds=int(duration)))\n \n \n class RustBuild(object):\n+\n     def download_stage0(self):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, self.stage0_rustc_date())\n-        cargo_cache = os.path.join(cache_dst, self.stage0_cargo_rev())\n+        rustc_cache = os.path.join(cache_dst, self.stage0_date())\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n-        if not os.path.exists(cargo_cache):\n-            os.makedirs(cargo_cache)\n+\n+        rustc_channel = self.stage0_rustc_channel()\n+        cargo_channel = self.stage0_cargo_channel()\n \n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or self.rustc_out_of_date()):\n             self.print_what_it_means_to_bootstrap()\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n-            channel = self.stage0_rustc_channel()\n-            filename = \"rust-std-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"rust-std-{}-{}.tar.gz\".format(\n+                rustc_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n-                get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n+                get(\"{}/{}\".format(url, filename),\n+                    tarball, verbose=self.verbose)\n             unpack(tarball, self.bin_root(),\n                    match=\"rust-std-\" + self.build,\n                    verbose=self.verbose)\n \n-            filename = \"rustc-{}-{}.tar.gz\".format(channel, self.build)\n-            url = \"https://static.rust-lang.org/dist/\" + self.stage0_rustc_date()\n+            filename = \"rustc-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n             tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n-                get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n-            unpack(tarball, self.bin_root(), match=\"rustc\", verbose=self.verbose)\n+                get(\"{}/{}\".format(url, filename),\n+                    tarball, verbose=self.verbose)\n+            unpack(tarball, self.bin_root(),\n+                   match=\"rustc\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/rustc\")\n             self.fix_executable(self.bin_root() + \"/bin/rustdoc\")\n             with open(self.rustc_stamp(), 'w') as f:\n-                f.write(self.stage0_rustc_date())\n+                f.write(self.stage0_date())\n+\n+            if \"pc-windows-gnu\" in self.build:\n+                filename = \"rust-mingw-{}-{}.tar.gz\".format(\n+                    rustc_channel, self.build)\n+                url = self._download_url + \"/dist/\" + self.stage0_date()\n+                tarball = os.path.join(rustc_cache, filename)\n+                if not os.path.exists(tarball):\n+                    get(\"{}/{}\".format(url, filename),\n+                        tarball, verbose=self.verbose)\n+                unpack(tarball, self.bin_root(),\n+                       match=\"rust-mingw\", verbose=self.verbose)\n \n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or self.cargo_out_of_date()):\n             self.print_what_it_means_to_bootstrap()\n-            filename = \"cargo-nightly-{}.tar.gz\".format(self.build)\n-            url = \"https://s3.amazonaws.com/rust-lang-ci/cargo-builds/\" + self.stage0_cargo_rev()\n-            tarball = os.path.join(cargo_cache, filename)\n+            filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n+            url = self._download_url + \"/dist/\" + self.stage0_date()\n+            tarball = os.path.join(rustc_cache, filename)\n             if not os.path.exists(tarball):\n-                get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n-            unpack(tarball, self.bin_root(), match=\"cargo\", verbose=self.verbose)\n+                get(\"{}/{}\".format(url, filename),\n+                    tarball, verbose=self.verbose)\n+            unpack(tarball, self.bin_root(),\n+                   match=\"cargo\", verbose=self.verbose)\n             self.fix_executable(self.bin_root() + \"/bin/cargo\")\n             with open(self.cargo_stamp(), 'w') as f:\n-                f.write(self.stage0_cargo_rev())\n+                f.write(self.stage0_date())\n \n     def fix_executable(self, fname):\n         # If we're on NixOS we need to change the path to the dynamic loader\n \n         default_encoding = sys.getdefaultencoding()\n         try:\n-            ostype = subprocess.check_output(['uname', '-s']).strip().decode(default_encoding)\n+            ostype = subprocess.check_output(\n+                ['uname', '-s']).strip().decode(default_encoding)\n         except (subprocess.CalledProcessError, WindowsError):\n             return\n \n@@ -226,7 +248,8 @@ def fix_executable(self, fname):\n         print(\"info: you seem to be running NixOS. Attempting to patch \" + fname)\n \n         try:\n-            interpreter = subprocess.check_output([\"patchelf\", \"--print-interpreter\", fname])\n+            interpreter = subprocess.check_output(\n+                [\"patchelf\", \"--print-interpreter\", fname])\n             interpreter = interpreter.strip().decode(default_encoding)\n         except subprocess.CalledProcessError as e:\n             print(\"warning: failed to call patchelf: %s\" % e)\n@@ -235,7 +258,8 @@ def fix_executable(self, fname):\n         loader = interpreter.split(\"/\")[-1]\n \n         try:\n-            ldd_output = subprocess.check_output(['ldd', '/run/current-system/sw/bin/sh'])\n+            ldd_output = subprocess.check_output(\n+                ['ldd', '/run/current-system/sw/bin/sh'])\n             ldd_output = ldd_output.strip().decode(default_encoding)\n         except subprocess.CalledProcessError as e:\n             print(\"warning: unable to call ldd: %s\" % e)\n@@ -253,20 +277,21 @@ def fix_executable(self, fname):\n         correct_interpreter = loader_path + loader\n \n         try:\n-            subprocess.check_output([\"patchelf\", \"--set-interpreter\", correct_interpreter, fname])\n+            subprocess.check_output(\n+                [\"patchelf\", \"--set-interpreter\", correct_interpreter, fname])\n         except subprocess.CalledProcessError as e:\n             print(\"warning: failed to call patchelf: %s\" % e)\n             return\n \n-    def stage0_cargo_rev(self):\n-        return self._cargo_rev\n-\n-    def stage0_rustc_date(self):\n-        return self._rustc_date\n+    def stage0_date(self):\n+        return self._date\n \n     def stage0_rustc_channel(self):\n         return self._rustc_channel\n \n+    def stage0_cargo_channel(self):\n+        return self._cargo_channel\n+\n     def rustc_stamp(self):\n         return os.path.join(self.bin_root(), '.rustc-stamp')\n \n@@ -277,21 +302,23 @@ def rustc_out_of_date(self):\n         if not os.path.exists(self.rustc_stamp()) or self.clean:\n             return True\n         with open(self.rustc_stamp(), 'r') as f:\n-            return self.stage0_rustc_date() != f.read()\n+            return self.stage0_date() != f.read()\n \n     def cargo_out_of_date(self):\n         if not os.path.exists(self.cargo_stamp()) or self.clean:\n             return True\n         with open(self.cargo_stamp(), 'r') as f:\n-            return self.stage0_cargo_rev() != f.read()\n+            return self.stage0_date() != f.read()\n \n     def bin_root(self):\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n \n     def get_toml(self, key):\n         for line in self.config_toml.splitlines():\n-            if line.startswith(key + ' ='):\n-                return self.get_string(line)\n+            match = re.match(r'^{}\\s*=(.*)$'.format(key), line)\n+            if match is not None:\n+                value = match.group(1)\n+                return self.get_string(value) or value.strip()\n         return None\n \n     def get_mk(self, key):\n@@ -322,6 +349,8 @@ def rustc(self):\n \n     def get_string(self, line):\n         start = line.find('\"')\n+        if start == -1:\n+            return None\n         end = start + 1 + line[start + 1:].find('\"')\n         return line[start + 1:end]\n \n@@ -359,28 +388,29 @@ def build_bootstrap(self):\n         env[\"CARGO_TARGET_DIR\"] = build_dir\n         env[\"RUSTC\"] = self.rustc()\n         env[\"LD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n-                                 (os.pathsep + env[\"LD_LIBRARY_PATH\"]) \\\n-                                 if \"LD_LIBRARY_PATH\" in env else \"\"\n+            (os.pathsep + env[\"LD_LIBRARY_PATH\"]) \\\n+            if \"LD_LIBRARY_PATH\" in env else \"\"\n         env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n-                                   (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n-                                   if \"DYLD_LIBRARY_PATH\" in env else \"\"\n+            (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n+            if \"DYLD_LIBRARY_PATH\" in env else \"\"\n+        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+            (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n+            if \"LIBRARY_PATH\" in env else \"\"\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n-                      os.pathsep + env[\"PATH\"]\n+            os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):\n             raise Exception(\"no cargo executable found at `%s`\" % self.cargo())\n         args = [self.cargo(), \"build\", \"--manifest-path\",\n                 os.path.join(self.rust_root, \"src/bootstrap/Cargo.toml\")]\n+        if self.verbose:\n+            args.append(\"--verbose\")\n+            if self.verbose > 1:\n+                args.append(\"--verbose\")\n         if self.use_locked_deps:\n             args.append(\"--locked\")\n         if self.use_vendored_sources:\n             args.append(\"--frozen\")\n-        self.run(args, env)\n-\n-    def run(self, args, env):\n-        proc = subprocess.Popen(args, env=env)\n-        ret = proc.wait()\n-        if ret != 0:\n-            sys.exit(ret)\n+        run(args, env=env, verbose=self.verbose)\n \n     def build_triple(self):\n         default_encoding = sys.getdefaultencoding()\n@@ -391,8 +421,10 @@ def build_triple(self):\n         if config:\n             return config\n         try:\n-            ostype = subprocess.check_output(['uname', '-s']).strip().decode(default_encoding)\n-            cputype = subprocess.check_output(['uname', '-m']).strip().decode(default_encoding)\n+            ostype = subprocess.check_output(\n+                ['uname', '-s']).strip().decode(default_encoding)\n+            cputype = subprocess.check_output(\n+                ['uname', '-m']).strip().decode(default_encoding)\n         except (subprocess.CalledProcessError, OSError):\n             if sys.platform == 'win32':\n                 return 'x86_64-pc-windows-msvc'\n@@ -401,18 +433,15 @@ def build_triple(self):\n                 raise Exception(err)\n             sys.exit(err)\n \n-        # Darwin's `uname -s` lies and always returns i386. We have to use\n-        # sysctl instead.\n-        if ostype == 'Darwin' and cputype == 'i686':\n-            args = ['sysctl', 'hw.optional.x86_64']\n-            sysctl = subprocess.check_output(args).decode(default_encoding)\n-            if ': 1' in sysctl:\n-                cputype = 'x86_64'\n-\n         # The goal here is to come up with the same triple as LLVM would,\n         # at least for the subset of platforms we're willing to target.\n         if ostype == 'Linux':\n-            ostype = 'unknown-linux-gnu'\n+            os_from_sp = subprocess.check_output(\n+                ['uname', '-o']).strip().decode(default_encoding)\n+            if os_from_sp == 'Android':\n+                ostype = 'linux-android'\n+            else:\n+                ostype = 'unknown-linux-gnu'\n         elif ostype == 'FreeBSD':\n             ostype = 'unknown-freebsd'\n         elif ostype == 'DragonFly':\n@@ -432,7 +461,7 @@ def build_triple(self):\n             # must be used instead.\n             try:\n                 cputype = subprocess.check_output(['isainfo',\n-                  '-k']).strip().decode(default_encoding)\n+                                                   '-k']).strip().decode(default_encoding)\n             except (subprocess.CalledProcessError, OSError):\n                 err = \"isainfo not found\"\n                 if self.verbose:\n@@ -469,15 +498,21 @@ def build_triple(self):\n             cputype = 'i686'\n         elif cputype in {'xscale', 'arm'}:\n             cputype = 'arm'\n-        elif cputype in {'armv6l', 'armv7l', 'armv8l'}:\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+        elif cputype == 'armv6l':\n             cputype = 'arm'\n-            ostype += 'eabihf'\n-        elif cputype == 'armv7l':\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+            else:\n+                ostype += 'eabihf'\n+        elif cputype in {'armv7l', 'armv8l'}:\n             cputype = 'armv7'\n-            ostype += 'eabihf'\n-        elif cputype == 'aarch64':\n-            cputype = 'aarch64'\n-        elif cputype == 'arm64':\n+            if ostype == 'linux-android':\n+                ostype = 'linux-androideabi'\n+            else:\n+                ostype += 'eabihf'\n+        elif cputype in {'aarch64', 'arm64'}:\n             cputype = 'aarch64'\n         elif cputype == 'mips':\n             if sys.byteorder == 'big':\n@@ -517,6 +552,32 @@ def build_triple(self):\n \n         return \"{}-{}\".format(cputype, ostype)\n \n+    def update_submodules(self):\n+        if (not os.path.exists(os.path.join(self.rust_root, \".git\"))) or \\\n+                self.get_toml('submodules') == \"false\" or \\\n+                self.get_mk('CFG_DISABLE_MANAGE_SUBMODULES') == \"1\":\n+            return\n+        print('Updating submodules')\n+        default_encoding = sys.getdefaultencoding()\n+        run([\"git\", \"submodule\", \"-q\", \"sync\"], cwd=self.rust_root)\n+        submodules = [s.split(' ', 1)[1] for s in subprocess.check_output(\n+            [\"git\", \"config\", \"--file\", os.path.join(self.rust_root, \".gitmodules\"),\n+             \"--get-regexp\", \"path\"]\n+        ).decode(default_encoding).splitlines()]\n+        submodules = [module for module in submodules\n+                      if not ((module.endswith(\"llvm\") and\n+                               (self.get_toml('llvm-config') or self.get_mk('CFG_LLVM_ROOT'))) or\n+                              (module.endswith(\"jemalloc\") and\n+                               (self.get_toml('jemalloc') or self.get_mk('CFG_JEMALLOC_ROOT'))))\n+                     ]\n+        run([\"git\", \"submodule\", \"update\",\n+                  \"--init\"] + submodules, cwd=self.rust_root, verbose=self.verbose)\n+        run([\"git\", \"submodule\", \"-q\", \"foreach\", \"git\",\n+                  \"reset\", \"-q\", \"--hard\"], cwd=self.rust_root, verbose=self.verbose)\n+        run([\"git\", \"submodule\", \"-q\", \"foreach\", \"git\",\n+                  \"clean\", \"-qdfx\"], cwd=self.rust_root, verbose=self.verbose)\n+\n+\n def bootstrap():\n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n@@ -545,6 +606,11 @@ def bootstrap():\n     except:\n         pass\n \n+    if '\\nverbose = 2' in rb.config_toml:\n+        rb.verbose = 2\n+    elif '\\nverbose = 1' in rb.config_toml:\n+        rb.verbose = 1\n+\n     rb.use_vendored_sources = '\\nvendor = true' in rb.config_toml or \\\n                               'CFG_ENABLE_VENDOR' in rb.config_mk\n \n@@ -563,7 +629,7 @@ def bootstrap():\n     if rb.use_vendored_sources:\n         if not os.path.exists('.cargo'):\n             os.makedirs('.cargo')\n-        with open('.cargo/config','w') as f:\n+        with open('.cargo/config', 'w') as f:\n             f.write(\"\"\"\n                 [source.crates-io]\n                 replace-with = 'vendored-sources'\n@@ -577,8 +643,15 @@ def bootstrap():\n             shutil.rmtree('.cargo')\n \n     data = stage0_data(rb.rust_root)\n-    rb._rustc_channel, rb._rustc_date = data['rustc'].split('-', 1)\n-    rb._cargo_rev = data['cargo']\n+    rb._date = data['date']\n+    rb._rustc_channel = data['rustc']\n+    rb._cargo_channel = data['cargo']\n+    if 'dev' in data:\n+        rb._download_url = 'https://dev-static.rust-lang.org'\n+    else:\n+        rb._download_url = 'https://static.rust-lang.org'\n+\n+    rb.update_submodules()\n \n     # Fetch/build the bootstrap\n     rb.build = rb.build_triple()\n@@ -594,20 +667,27 @@ def bootstrap():\n     env[\"BUILD\"] = rb.build\n     env[\"SRC\"] = rb.rust_root\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n-    rb.run(args, env)\n+    run(args, env=env, verbose=rb.verbose)\n+\n \n def main():\n     start_time = time()\n+    help_triggered = (\n+        '-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n     try:\n         bootstrap()\n-        print(\"Build completed successfully in %s\" % format_build_time(time() - start_time))\n+        if not help_triggered:\n+            print(\"Build completed successfully in %s\" %\n+                  format_build_time(time() - start_time))\n     except (SystemExit, KeyboardInterrupt) as e:\n         if hasattr(e, 'code') and isinstance(e.code, int):\n             exit_code = e.code\n         else:\n             exit_code = 1\n             print(e)\n-        print(\"Build completed unsuccessfully in %s\" % format_build_time(time() - start_time))\n+        if not help_triggered:\n+            print(\"Build completed unsuccessfully in %s\" %\n+                  format_build_time(time() - start_time))\n         sys.exit(exit_code)\n \n if __name__ == '__main__':"}, {"sha": "1b9536fba357aa2f840fbaf7ead73a590aefbd78", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -23,7 +23,7 @@ use build_helper::output;\n use Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &'static str = \"1.17.0\";\n+pub const CFG_RELEASE_NUM: &'static str = \"1.19.0\";\n \n // An optional number to put after the label, e.g. '.2' -> '-beta.2'\n // Be sure to make this starts with a dot to conform to semver pre-release\n@@ -42,9 +42,22 @@ struct Info {\n \n impl GitInfo {\n     pub fn new(dir: &Path) -> GitInfo {\n-        if !dir.join(\".git\").is_dir() {\n+        // See if this even begins to look like a git dir\n+        if !dir.join(\".git\").exists() {\n             return GitInfo { inner: None }\n         }\n+\n+        // Make sure git commands work\n+        let out = Command::new(\"git\")\n+                          .arg(\"rev-parse\")\n+                          .current_dir(dir)\n+                          .output()\n+                          .expect(\"failed to spawn git\");\n+        if !out.status.success() {\n+            return GitInfo { inner: None }\n+        }\n+\n+        // Ok, let's scrape some info\n         let ver_date = output(Command::new(\"git\").current_dir(dir)\n                                       .arg(\"log\").arg(\"-1\")\n                                       .arg(\"--date=short\")"}, {"sha": "d24bb074cd374d13bb50ad7cc8ce670f090e65c6", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 89, "deletions": 126, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -28,7 +28,7 @@ use {Build, Compiler, Mode};\n use dist;\n use util::{self, dylib_path, dylib_path_var, exe};\n \n-const ADB_TEST_DIR: &'static str = \"/data/tmp\";\n+const ADB_TEST_DIR: &'static str = \"/data/tmp/work\";\n \n /// The two modes of the test runner; tests or benchmarks.\n #[derive(Copy, Clone)]\n@@ -78,14 +78,6 @@ pub fn linkcheck(build: &Build, host: &str) {\n pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let ref compiler = Compiler::new(stage, host);\n \n-    // Configure PATH to find the right rustc. NB. we have to use PATH\n-    // and not RUSTC because the Cargo test suite has tests that will\n-    // fail if rustc is not spelled `rustc`.\n-    let path = build.sysroot(compiler).join(\"bin\");\n-    let old_path = ::std::env::var(\"PATH\").expect(\"\");\n-    let sep = if cfg!(windows) { \";\" } else {\":\" };\n-    let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n-\n     // Note that this is a short, cryptic, and not scoped directory name. This\n     // is currently to minimize the length of path on Windows where we otherwise\n     // quickly run into path name limit constraints.\n@@ -95,9 +87,35 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let _time = util::timeit();\n     let mut cmd = Command::new(build.tool(&Compiler::new(0, host), \"cargotest\"));\n     build.prepare_tool_cmd(compiler, &mut cmd);\n-    build.run(cmd.env(\"PATH\", newpath)\n-                 .arg(&build.cargo)\n-                 .arg(&out_dir));\n+    build.run(cmd.arg(&build.cargo)\n+                 .arg(&out_dir)\n+                 .env(\"RUSTC\", build.compiler_path(compiler))\n+                 .env(\"RUSTDOC\", build.rustdoc(compiler)))\n+}\n+\n+/// Runs `cargo test` for `cargo` packaged with Rust.\n+pub fn cargo(build: &Build, stage: u32, host: &str) {\n+    let ref compiler = Compiler::new(stage, host);\n+\n+    // Configure PATH to find the right rustc. NB. we have to use PATH\n+    // and not RUSTC because the Cargo test suite has tests that will\n+    // fail if rustc is not spelled `rustc`.\n+    let path = build.sysroot(compiler).join(\"bin\");\n+    let old_path = ::std::env::var(\"PATH\").expect(\"\");\n+    let sep = if cfg!(windows) { \";\" } else {\":\" };\n+    let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n+\n+    let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n+    cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n+\n+    // Don't build tests dynamically, just a pain to work with\n+    cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+\n+    // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n+    // available.\n+    cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n+\n+    build.run(cargo.env(\"PATH\", newpath));\n }\n \n /// Runs the `tidy` tool as compiled in `stage` by the `host` compiler.\n@@ -176,7 +194,7 @@ pub fn compiletest(build: &Build,\n     cmd.arg(\"--docck-python\").arg(build.python());\n \n     if build.config.build.ends_with(\"apple-darwin\") {\n-        // Force /usr/bin/python on OSX for LLDB tests because we're loading the\n+        // Force /usr/bin/python on macOS for LLDB tests because we're loading the\n         // LLDB plugin's compiled module which only works with the system python\n         // (namely not Homebrew-installed python)\n         cmd.arg(\"--lldb-python\").arg(\"/usr/bin/python\");\n@@ -225,10 +243,10 @@ pub fn compiletest(build: &Build,\n            .arg(\"--llvm-cxxflags\").arg(\"\");\n     }\n \n-    if build.qemu_rootfs(target).is_some() {\n-        cmd.arg(\"--qemu-test-client\")\n+    if build.remote_tested(target) {\n+        cmd.arg(\"--remote-test-client\")\n            .arg(build.tool(&Compiler::new(0, &build.config.build),\n-                           \"qemu-test-client\"));\n+                           \"remote-test-client\"));\n     }\n \n     // Running a C compiler on MSVC requires a few env vars to be set, to be\n@@ -285,6 +303,16 @@ pub fn docs(build: &Build, compiler: &Compiler) {\n             continue\n         }\n \n+        // The nostarch directory in the book is for no starch, and so isn't guaranteed to build.\n+        // we don't care if it doesn't build, so skip it.\n+        use std::ffi::OsStr;\n+        let path: &OsStr = p.as_ref();\n+        if let Some(path) = path.to_str() {\n+            if path.contains(\"nostarch\") {\n+                continue;\n+            }\n+        }\n+\n         println!(\"doc tests for: {}\", p.display());\n         markdown_test(build, compiler, &p);\n     }\n@@ -417,9 +445,7 @@ pub fn krate(build: &Build,\n     dylib_path.insert(0, build.sysroot_libdir(&compiler, target));\n     cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n-    if target.contains(\"android\") ||\n-       target.contains(\"emscripten\") ||\n-       build.qemu_rootfs(target).is_some() {\n+    if target.contains(\"emscripten\") || build.remote_tested(target) {\n         cargo.arg(\"--no-run\");\n     }\n \n@@ -431,75 +457,24 @@ pub fn krate(build: &Build,\n \n     let _time = util::timeit();\n \n-    if target.contains(\"android\") {\n-        build.run(&mut cargo);\n-        krate_android(build, &compiler, target, mode);\n-    } else if target.contains(\"emscripten\") {\n+    if target.contains(\"emscripten\") {\n         build.run(&mut cargo);\n         krate_emscripten(build, &compiler, target, mode);\n-    } else if build.qemu_rootfs(target).is_some() {\n+    } else if build.remote_tested(target) {\n         build.run(&mut cargo);\n-        krate_qemu(build, &compiler, target, mode);\n+        krate_remote(build, &compiler, target, mode);\n     } else {\n         cargo.args(&build.flags.cmd.test_args());\n         build.run(&mut cargo);\n     }\n }\n \n-fn krate_android(build: &Build,\n-                 compiler: &Compiler,\n-                 target: &str,\n-                 mode: Mode) {\n-    let mut tests = Vec::new();\n-    let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir, target, &mut tests);\n-    find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n-\n-    for test in tests {\n-        build.run(Command::new(\"adb\").arg(\"push\").arg(&test).arg(ADB_TEST_DIR));\n-\n-        let test_file_name = test.file_name().unwrap().to_string_lossy();\n-        let log = format!(\"{}/check-stage{}-T-{}-H-{}-{}.log\",\n-                          ADB_TEST_DIR,\n-                          compiler.stage,\n-                          target,\n-                          compiler.host,\n-                          test_file_name);\n-        let quiet = if build.config.quiet_tests { \"--quiet\" } else { \"\" };\n-        let program = format!(\"(cd {dir}; \\\n-                                LD_LIBRARY_PATH=./{target} ./{test} \\\n-                                    --logfile {log} \\\n-                                    {quiet} \\\n-                                    {args})\",\n-                              dir = ADB_TEST_DIR,\n-                              target = target,\n-                              test = test_file_name,\n-                              log = log,\n-                              quiet = quiet,\n-                              args = build.flags.cmd.test_args().join(\" \"));\n-\n-        let output = output(Command::new(\"adb\").arg(\"shell\").arg(&program));\n-        println!(\"{}\", output);\n-\n-        t!(fs::create_dir_all(build.out.join(\"tmp\")));\n-        build.run(Command::new(\"adb\")\n-                          .arg(\"pull\")\n-                          .arg(&log)\n-                          .arg(build.out.join(\"tmp\")));\n-        build.run(Command::new(\"adb\").arg(\"shell\").arg(\"rm\").arg(&log));\n-        if !output.contains(\"result: ok\") {\n-            panic!(\"some tests failed\");\n-        }\n-    }\n-}\n-\n fn krate_emscripten(build: &Build,\n                     compiler: &Compiler,\n                     target: &str,\n                     mode: Mode) {\n     let mut tests = Vec::new();\n     let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir, target, &mut tests);\n     find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n \n     for test in tests {\n@@ -515,17 +490,16 @@ fn krate_emscripten(build: &Build,\n     }\n }\n \n-fn krate_qemu(build: &Build,\n-              compiler: &Compiler,\n-              target: &str,\n-              mode: Mode) {\n+fn krate_remote(build: &Build,\n+                compiler: &Compiler,\n+                target: &str,\n+                mode: Mode) {\n     let mut tests = Vec::new();\n     let out_dir = build.cargo_out(compiler, mode, target);\n-    find_tests(&out_dir, target, &mut tests);\n     find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n \n     let tool = build.tool(&Compiler::new(0, &build.config.build),\n-                          \"qemu-test-client\");\n+                          \"remote-test-client\");\n     for test in tests {\n         let mut cmd = Command::new(&tool);\n         cmd.arg(\"run\")\n@@ -538,7 +512,6 @@ fn krate_qemu(build: &Build,\n     }\n }\n \n-\n fn find_tests(dir: &Path,\n               target: &str,\n               dst: &mut Vec<PathBuf>) {\n@@ -556,60 +529,29 @@ fn find_tests(dir: &Path,\n     }\n }\n \n-pub fn emulator_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n-    if target.contains(\"android\") {\n-        android_copy_libs(build, compiler, target)\n-    } else if let Some(s) = build.qemu_rootfs(target) {\n-        qemu_copy_libs(build, compiler, target, s)\n-    }\n-}\n-\n-fn android_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n-    println!(\"Android copy libs to emulator ({})\", target);\n-    build.run(Command::new(\"adb\").arg(\"wait-for-device\"));\n-    build.run(Command::new(\"adb\").arg(\"remount\"));\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"rm\", \"-r\", ADB_TEST_DIR]));\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", ADB_TEST_DIR]));\n-    build.run(Command::new(\"adb\")\n-                      .arg(\"push\")\n-                      .arg(build.src.join(\"src/etc/adb_run_wrapper.sh\"))\n-                      .arg(ADB_TEST_DIR));\n-\n-    let target_dir = format!(\"{}/{}\", ADB_TEST_DIR, target);\n-    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", &target_dir[..]]));\n-\n-    for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n-        let f = t!(f);\n-        let name = f.file_name().into_string().unwrap();\n-        if util::is_dylib(&name) {\n-            build.run(Command::new(\"adb\")\n-                              .arg(\"push\")\n-                              .arg(f.path())\n-                              .arg(&target_dir));\n-        }\n+pub fn remote_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n+    if !build.remote_tested(target) {\n+        return\n     }\n-}\n \n-fn qemu_copy_libs(build: &Build,\n-                  compiler: &Compiler,\n-                  target: &str,\n-                  rootfs: &Path) {\n-    println!(\"QEMU copy libs to emulator ({})\", target);\n-    assert!(target.starts_with(\"arm\"), \"only works with arm for now\");\n+    println!(\"REMOTE copy libs to emulator ({})\", target);\n     t!(fs::create_dir_all(build.out.join(\"tmp\")));\n \n-    // Copy our freshly compiled test server over to the rootfs\n     let server = build.cargo_out(compiler, Mode::Tool, target)\n-                      .join(exe(\"qemu-test-server\", target));\n-    t!(fs::copy(&server, rootfs.join(\"testd\")));\n+                      .join(exe(\"remote-test-server\", target));\n \n     // Spawn the emulator and wait for it to come online\n     let tool = build.tool(&Compiler::new(0, &build.config.build),\n-                          \"qemu-test-client\");\n-    build.run(Command::new(&tool)\n-                      .arg(\"spawn-emulator\")\n-                      .arg(rootfs)\n-                      .arg(build.out.join(\"tmp\")));\n+                          \"remote-test-client\");\n+    let mut cmd = Command::new(&tool);\n+    cmd.arg(\"spawn-emulator\")\n+       .arg(target)\n+       .arg(&server)\n+       .arg(build.out.join(\"tmp\"));\n+    if let Some(rootfs) = build.qemu_rootfs(target) {\n+        cmd.arg(rootfs);\n+    }\n+    build.run(&mut cmd);\n \n     // Push all our dylibs to the emulator\n     for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n@@ -635,6 +577,7 @@ pub fn distcheck(build: &Build) {\n         return\n     }\n \n+    println!(\"Distcheck\");\n     let dir = build.out.join(\"tmp\").join(\"distcheck\");\n     let _ = fs::remove_dir_all(&dir);\n     t!(fs::create_dir_all(&dir));\n@@ -652,6 +595,26 @@ pub fn distcheck(build: &Build) {\n     build.run(Command::new(build_helper::make(&build.config.build))\n                      .arg(\"check\")\n                      .current_dir(&dir));\n+\n+    // Now make sure that rust-src has all of libstd's dependencies\n+    println!(\"Distcheck rust-src\");\n+    let dir = build.out.join(\"tmp\").join(\"distcheck-src\");\n+    let _ = fs::remove_dir_all(&dir);\n+    t!(fs::create_dir_all(&dir));\n+\n+    let mut cmd = Command::new(\"tar\");\n+    cmd.arg(\"-xzf\")\n+       .arg(dist::rust_src_installer(build))\n+       .arg(\"--strip-components=1\")\n+       .current_dir(&dir);\n+    build.run(&mut cmd);\n+\n+    let toml = dir.join(\"rust-src/lib/rustlib/src/rust/src/libstd/Cargo.toml\");\n+    build.run(Command::new(&build.cargo)\n+                     .arg(\"generate-lockfile\")\n+                     .arg(\"--manifest-path\")\n+                     .arg(&toml)\n+                     .current_dir(&dir));\n }\n \n /// Test the build system itself"}, {"sha": "308a0ab3076dd5421f90d17efe36562364214b8d", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -22,9 +22,9 @@ use std::path::Path;\n use Build;\n \n pub fn clean(build: &Build) {\n-    rm_rf(build, \"tmp\".as_ref());\n-    rm_rf(build, &build.out.join(\"tmp\"));\n-    rm_rf(build, &build.out.join(\"dist\"));\n+    rm_rf(\"tmp\".as_ref());\n+    rm_rf(&build.out.join(\"tmp\"));\n+    rm_rf(&build.out.join(\"dist\"));\n \n     for host in build.config.host.iter() {\n         let entries = match build.out.join(host).read_dir() {\n@@ -38,42 +38,44 @@ pub fn clean(build: &Build) {\n                 continue\n             }\n             let path = t!(entry.path().canonicalize());\n-            rm_rf(build, &path);\n+            rm_rf(&path);\n         }\n     }\n }\n \n-fn rm_rf(build: &Build, path: &Path) {\n-    if !path.exists() {\n-        return\n-    }\n-    if path.is_file() {\n-        return do_op(path, \"remove file\", |p| fs::remove_file(p));\n-    }\n-\n-    for file in t!(fs::read_dir(path)) {\n-        let file = t!(file).path();\n+fn rm_rf(path: &Path) {\n+    match path.symlink_metadata() {\n+        Err(e) => {\n+            if e.kind() == ErrorKind::NotFound {\n+                return;\n+            }\n+            panic!(\"failed to get metadata for file {}: {}\", path.display(), e);\n+        },\n+        Ok(metadata) => {\n+            if metadata.file_type().is_file() || metadata.file_type().is_symlink() {\n+                do_op(path, \"remove file\", |p| fs::remove_file(p));\n+                return;\n+            }\n \n-        if file.is_dir() {\n-            rm_rf(build, &file);\n-        } else {\n-            // On windows we can't remove a readonly file, and git will\n-            // often clone files as readonly. As a result, we have some\n-            // special logic to remove readonly files on windows.\n-            do_op(&file, \"remove file\", |p| fs::remove_file(p));\n-        }\n-    }\n-    do_op(path, \"remove dir\", |p| fs::remove_dir(p));\n+            for file in t!(fs::read_dir(path)) {\n+                rm_rf(&t!(file).path());\n+            }\n+            do_op(path, \"remove dir\", |p| fs::remove_dir(p));\n+        },\n+    };\n }\n \n fn do_op<F>(path: &Path, desc: &str, mut f: F)\n     where F: FnMut(&Path) -> io::Result<()>\n {\n     match f(path) {\n         Ok(()) => {}\n+        // On windows we can't remove a readonly file, and git will often clone files as readonly.\n+        // As a result, we have some special logic to remove readonly files on windows.\n+        // This is also the reason that we can't use things like fs::remove_dir_all().\n         Err(ref e) if cfg!(windows) &&\n                       e.kind() == ErrorKind::PermissionDenied => {\n-            let mut p = t!(path.metadata()).permissions();\n+            let mut p = t!(path.symlink_metadata()).permissions();\n             p.set_readonly(false);\n             t!(fs::set_permissions(path, p));\n             f(path).unwrap_or_else(|e| {"}, {"sha": "c810a0e05d4d2c528b99e000eb2284632a191d50", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 55, "deletions": 14, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -20,6 +20,7 @@ use std::collections::HashMap;\n use std::fs::{self, File};\n use std::path::{Path, PathBuf};\n use std::process::Command;\n+use std::env;\n \n use build_helper::{output, mtime, up_to_date};\n use filetime::FileTime;\n@@ -44,6 +45,11 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     build.clear_if_dirty(&out_dir, &build.compiler_path(compiler));\n     let mut cargo = build.cargo(compiler, Mode::Libstd, target, \"build\");\n     let mut features = build.std_features();\n+\n+    if let Ok(target) = env::var(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n+        cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n+    }\n+\n     // When doing a local rebuild we tell cargo that we're stage1 rather than\n     // stage0. This works fine if the local rust and being-built rust have the\n     // same view of what the default allocator is, but fails otherwise. Since\n@@ -109,6 +115,13 @@ pub fn std_link(build: &Build,\n     if target.contains(\"musl\") && !target.contains(\"mips\") {\n         copy_musl_third_party_objects(build, target, &libdir);\n     }\n+\n+    if build.config.sanitizers && compiler.stage != 0 && target == \"x86_64-apple-darwin\" {\n+        // The sanitizers are only built in stage1 or above, so the dylibs will\n+        // be missing in stage0 and causes panic. See the `std()` function above\n+        // for reason why the sanitizers are not built in stage0.\n+        copy_apple_sanitizer_dylibs(&build.native_dir(target), \"osx\", &libdir);\n+    }\n }\n \n /// Copies the crt(1,i,n).o startup objects\n@@ -120,6 +133,18 @@ fn copy_musl_third_party_objects(build: &Build, target: &str, into: &Path) {\n     }\n }\n \n+fn copy_apple_sanitizer_dylibs(native_dir: &Path, platform: &str, into: &Path) {\n+    for &sanitizer in &[\"asan\", \"tsan\"] {\n+        let filename = format!(\"libclang_rt.{}_{}_dynamic.dylib\", sanitizer, platform);\n+        let mut src_path = native_dir.join(sanitizer);\n+        src_path.push(\"build\");\n+        src_path.push(\"lib\");\n+        src_path.push(\"darwin\");\n+        src_path.push(&filename);\n+        copy(&src_path, &into.join(filename));\n+    }\n+}\n+\n /// Build and prepare startup objects like rsbegin.o and rsend.o\n ///\n /// These are primarily used on Windows right now for linking executables/dlls.\n@@ -145,6 +170,7 @@ pub fn build_startup_objects(build: &Build, for_compiler: &Compiler, target: &st\n         if !up_to_date(src_file, dst_file) {\n             let mut cmd = Command::new(&compiler_path);\n             build.run(cmd.env(\"RUSTC_BOOTSTRAP\", \"1\")\n+                        .arg(\"--cfg\").arg(format!(\"stage{}\", compiler.stage))\n                         .arg(\"--target\").arg(target)\n                         .arg(\"--emit=obj\")\n                         .arg(\"--out-dir\").arg(dst_dir)\n@@ -170,6 +196,9 @@ pub fn test(build: &Build, target: &str, compiler: &Compiler) {\n     let out_dir = build.cargo_out(compiler, Mode::Libtest, target);\n     build.clear_if_dirty(&out_dir, &libstd_stamp(build, compiler, target));\n     let mut cargo = build.cargo(compiler, Mode::Libtest, target, \"build\");\n+    if let Ok(target) = env::var(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n+        cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n+    }\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/libtest/Cargo.toml\"));\n     build.run(&mut cargo);\n@@ -249,7 +278,7 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n         cargo.env(\"CFG_LLVM_ROOT\", s);\n     }\n     // Building with a static libstdc++ is only supported on linux right now,\n-    // not for MSVC or OSX\n+    // not for MSVC or macOS\n     if build.config.llvm_static_stdcpp &&\n        !target.contains(\"windows\") &&\n        !target.contains(\"apple\") {\n@@ -266,6 +295,7 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n         cargo.env(\"CFG_DEFAULT_AR\", s);\n     }\n     build.run(&mut cargo);\n+    update_mtime(build, &librustc_stamp(build, compiler, target));\n }\n \n /// Same as `std_link`, only for librustc\n@@ -296,6 +326,12 @@ fn libtest_stamp(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n     build.cargo_out(compiler, Mode::Libtest, target).join(\".libtest.stamp\")\n }\n \n+/// Cargo's output path for librustc in a given stage, compiled by a particular\n+/// compiler for the specified target.\n+fn librustc_stamp(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n+    build.cargo_out(compiler, Mode::Librustc, target).join(\".librustc.stamp\")\n+}\n+\n fn compiler_file(compiler: &Path, file: &str) -> PathBuf {\n     let out = output(Command::new(compiler)\n                             .arg(format!(\"-print-file-name={}\", file)));\n@@ -398,6 +434,23 @@ fn add_to_sysroot(out_dir: &Path, sysroot_dst: &Path) {\n     }\n }\n \n+/// Build a tool in `src/tools`\n+///\n+/// This will build the specified tool with the specified `host` compiler in\n+/// `stage` into the normal cargo output directory.\n+pub fn maybe_clean_tools(build: &Build, stage: u32, target: &str, mode: Mode) {\n+    let compiler = Compiler::new(stage, &build.config.build);\n+\n+    let stamp = match mode {\n+        Mode::Libstd => libstd_stamp(build, &compiler, target),\n+        Mode::Libtest => libtest_stamp(build, &compiler, target),\n+        Mode::Librustc => librustc_stamp(build, &compiler, target),\n+        _ => panic!(),\n+    };\n+    let out_dir = build.cargo_out(&compiler, Mode::Tool, target);\n+    build.clear_if_dirty(&out_dir, &stamp);\n+}\n+\n /// Build a tool in `src/tools`\n ///\n /// This will build the specified tool with the specified `host` compiler in\n@@ -407,20 +460,8 @@ pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n \n     let compiler = Compiler::new(stage, &build.config.build);\n \n-    // FIXME: need to clear out previous tool and ideally deps, may require\n-    //        isolating output directories or require a pseudo shim step to\n-    //        clear out all the info.\n-    //\n-    //        Maybe when libstd is compiled it should clear out the rustc of the\n-    //        corresponding stage?\n-    // let out_dir = build.cargo_out(stage, &host, Mode::Librustc, target);\n-    // build.clear_if_dirty(&out_dir, &libstd_stamp(build, stage, &host, target));\n-\n     let mut cargo = build.cargo(&compiler, Mode::Tool, target, \"build\");\n-    let mut dir = build.src.join(tool);\n-    if !dir.exists() {\n-        dir = build.src.join(\"src/tools\").join(tool);\n-    }\n+    let dir = build.src.join(\"src/tools\").join(tool);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n     // We don't want to build tools dynamically as they'll be running across"}, {"sha": "abad216d89be48c78482ca82fb6d67ee016bf1c6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -23,7 +23,7 @@ use std::process;\n use num_cpus;\n use rustc_serialize::Decodable;\n use toml::{Parser, Decoder, Value};\n-use util::push_exe_path;\n+use util::{exe, push_exe_path};\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n@@ -60,6 +60,7 @@ pub struct Config {\n     pub llvm_link_shared: bool,\n     pub llvm_targets: Option<String>,\n     pub llvm_link_jobs: Option<u32>,\n+    pub llvm_clean_rebuild: bool,\n \n     // rust codegen options\n     pub rust_optimize: bool,\n@@ -93,12 +94,15 @@ pub struct Config {\n     pub backtrace: bool, // support for RUST_BACKTRACE\n \n     // misc\n+    pub low_priority: bool,\n     pub channel: String,\n     pub quiet_tests: bool,\n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n     pub prefix: Option<PathBuf>,\n+    pub sysconfdir: Option<PathBuf>,\n     pub docdir: Option<PathBuf>,\n+    pub bindir: Option<PathBuf>,\n     pub libdir: Option<PathBuf>,\n     pub libdir_relative: Option<PathBuf>,\n     pub mandir: Option<PathBuf>,\n@@ -145,6 +149,7 @@ struct Build {\n     target: Vec<String>,\n     cargo: Option<String>,\n     rustc: Option<String>,\n+    low_priority: Option<bool>,\n     compiler_docs: Option<bool>,\n     docs: Option<bool>,\n     submodules: Option<bool>,\n@@ -164,9 +169,11 @@ struct Build {\n #[derive(RustcDecodable, Default, Clone)]\n struct Install {\n     prefix: Option<String>,\n-    mandir: Option<String>,\n+    sysconfdir: Option<String>,\n     docdir: Option<String>,\n+    bindir: Option<String>,\n     libdir: Option<String>,\n+    mandir: Option<String>,\n }\n \n /// TOML representation of how the LLVM build is configured.\n@@ -181,6 +188,7 @@ struct Llvm {\n     static_libstdcpp: Option<bool>,\n     targets: Option<String>,\n     link_jobs: Option<u32>,\n+    clean_rebuild: Option<bool>,\n }\n \n #[derive(RustcDecodable, Default, Clone)]\n@@ -262,7 +270,7 @@ impl Config {\n             let table = match p.parse() {\n                 Some(table) => table,\n                 None => {\n-                    println!(\"failed to parse TOML configuration:\");\n+                    println!(\"failed to parse TOML configuration '{}':\", file.to_str().unwrap());\n                     for err in p.errors.iter() {\n                         let (loline, locol) = p.to_linecol(err.lo);\n                         let (hiline, hicol) = p.to_linecol(err.hi);\n@@ -300,6 +308,7 @@ impl Config {\n         config.nodejs = build.nodejs.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);\n         config.python = build.python.map(PathBuf::from);\n+        set(&mut config.low_priority, build.low_priority);\n         set(&mut config.compiler_docs, build.compiler_docs);\n         set(&mut config.docs, build.docs);\n         set(&mut config.submodules, build.submodules);\n@@ -313,9 +322,11 @@ impl Config {\n \n         if let Some(ref install) = toml.install {\n             config.prefix = install.prefix.clone().map(PathBuf::from);\n-            config.mandir = install.mandir.clone().map(PathBuf::from);\n+            config.sysconfdir = install.sysconfdir.clone().map(PathBuf::from);\n             config.docdir = install.docdir.clone().map(PathBuf::from);\n+            config.bindir = install.bindir.clone().map(PathBuf::from);\n             config.libdir = install.libdir.clone().map(PathBuf::from);\n+            config.mandir = install.mandir.clone().map(PathBuf::from);\n         }\n \n         if let Some(ref llvm) = toml.llvm {\n@@ -334,6 +345,7 @@ impl Config {\n             set(&mut config.llvm_release_debuginfo, llvm.release_debuginfo);\n             set(&mut config.llvm_version_check, llvm.version_check);\n             set(&mut config.llvm_static_stdcpp, llvm.static_libstdcpp);\n+            set(&mut config.llvm_clean_rebuild, llvm.clean_rebuild);\n             config.llvm_targets = llvm.targets.clone();\n             config.llvm_link_jobs = llvm.link_jobs;\n         }\n@@ -439,6 +451,7 @@ impl Config {\n                 (\"LLVM_VERSION_CHECK\", self.llvm_version_check),\n                 (\"LLVM_STATIC_STDCPP\", self.llvm_static_stdcpp),\n                 (\"LLVM_LINK_SHARED\", self.llvm_link_shared),\n+                (\"LLVM_CLEAN_REBUILD\", self.llvm_clean_rebuild),\n                 (\"OPTIMIZE\", self.rust_optimize),\n                 (\"DEBUG_ASSERTIONS\", self.rust_debug_assertions),\n                 (\"DEBUGINFO\", self.rust_debuginfo),\n@@ -519,9 +532,15 @@ impl Config {\n                 \"CFG_PREFIX\" => {\n                     self.prefix = Some(PathBuf::from(value));\n                 }\n+                \"CFG_SYSCONFDIR\" => {\n+                    self.sysconfdir = Some(PathBuf::from(value));\n+                }\n                 \"CFG_DOCDIR\" => {\n                     self.docdir = Some(PathBuf::from(value));\n                 }\n+                \"CFG_BINDIR\" => {\n+                    self.bindir = Some(PathBuf::from(value));\n+                }\n                 \"CFG_LIBDIR\" => {\n                     self.libdir = Some(PathBuf::from(value));\n                 }\n@@ -566,6 +585,12 @@ impl Config {\n                                      .or_insert(Target::default());\n                     target.ndk = Some(parse_configure_path(value));\n                 }\n+                \"CFG_X86_64_LINUX_ANDROID_NDK\" if value.len() > 0 => {\n+                    let target = \"x86_64-linux-android\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.ndk = Some(parse_configure_path(value));\n+                }\n                 \"CFG_LOCAL_RUST_ROOT\" if value.len() > 0 => {\n                     let path = parse_configure_path(value);\n                     self.rustc = Some(push_exe_path(path.clone(), &[\"bin\", \"rustc\"]));\n@@ -576,10 +601,10 @@ impl Config {\n                     self.python = Some(path);\n                 }\n                 \"CFG_ENABLE_CCACHE\" if value == \"1\" => {\n-                    self.ccache = Some(\"ccache\".to_string());\n+                    self.ccache = Some(exe(\"ccache\", &self.build));\n                 }\n                 \"CFG_ENABLE_SCCACHE\" if value == \"1\" => {\n-                    self.ccache = Some(\"sccache\".to_string());\n+                    self.ccache = Some(exe(\"sccache\", &self.build));\n                 }\n                 \"CFG_CONFIGURE_ARGS\" if value.len() > 0 => {\n                     self.configure_args = value.split_whitespace()"}, {"sha": "95cca96f7fcc027f1143a2f0a79393f6a651f7de", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -51,7 +51,7 @@\n # support. You'll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n-#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\"\n+#targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly\n@@ -61,6 +61,11 @@\n # controlled by rustbuild's -j parameter.\n #link-jobs = 0\n \n+# Delete LLVM build directory on LLVM rebuild.\n+# This option defaults to `false` for local development, but CI may want to\n+# always perform clean full builds (possibly accelerated by (s)ccache).\n+#clean-rebuild = false\n+\n # =============================================================================\n # General build configuration options\n # =============================================================================\n@@ -83,11 +88,11 @@\n # for each target triple.\n #target = [\"x86_64-unknown-linux-gnu\"] # defaults to just the build triple\n \n-# Instead of downloading the src/nightlies.txt version of Cargo specified, use\n+# Instead of downloading the src/stage0.txt version of Cargo specified, use\n # this Cargo binary instead to build all Rust code\n #cargo = \"/path/to/bin/cargo\"\n \n-# Instead of downloading the src/nightlies.txt version of the compiler\n+# Instead of downloading the src/stage0.txt version of the compiler\n # specified, use this rustc binary instead as the stage0 snapshot compiler.\n #rustc = \"/path/to/bin/rustc\"\n \n@@ -147,6 +152,10 @@\n # known-good version of OpenSSL, compile it, and link it to Cargo.\n #openssl-static = false\n \n+# Run the build with low priority, by setting the process group's \"nice\" value\n+# to +10 on Unix platforms, and by using a \"low priority\" job object on Windows.\n+#low-priority = false\n+\n # =============================================================================\n # General install configuration options\n # =============================================================================\n@@ -155,21 +164,31 @@\n # Instead of installing to /usr/local, install to this path instead.\n #prefix = \"/usr/local\"\n \n+# Where to install system configuration files\n+# If this is a relative path, it will get installed in `prefix` above\n+#sysconfdir = \"/etc\"\n+\n+# Where to install documentation in `prefix` above\n+#docdir = \"share/doc/rust\"\n+\n+# Where to install binaries in `prefix` above\n+#bindir = \"bin\"\n+\n # Where to install libraries in `prefix` above\n #libdir = \"lib\"\n \n # Where to install man pages in `prefix` above\n #mandir = \"share/man\"\n \n-# Where to install documentation in `prefix` above\n-#docdir = \"share/doc/rust\"\n-\n # =============================================================================\n # Options for compiling Rust code itself\n # =============================================================================\n [rust]\n \n # Whether or not to optimize the compiler and standard library\n+# Note: the slowness of the non optimized compiler compiling itself usually\n+#       outweighs the time gains in not doing optimizations, therefore a\n+#       full bootstrap takes much more time with optimize set to false.\n #optimize = true\n \n # Number of codegen units to use for each compiler invocation. A value of 0"}, {"sha": "14ddcc7cb323250963c4ff8daca123511ed762a7", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 366, "deletions": 141, "changes": 507, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -26,19 +26,19 @@ use std::process::{Command, Stdio};\n \n use build_helper::output;\n \n-#[cfg(not(target_os = \"solaris\"))]\n-const SH_CMD: &'static str = \"sh\";\n-// On Solaris, sh is the historical bourne shell, not a POSIX shell, or bash.\n-#[cfg(target_os = \"solaris\")]\n-const SH_CMD: &'static str = \"bash\";\n-\n use {Build, Compiler, Mode};\n use channel;\n use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n \n fn pkgname(build: &Build, component: &str) -> String {\n-    assert!(component.starts_with(\"rust\")); // does not work with cargo\n-    format!(\"{}-{}\", component, build.rust_package_vers())\n+    if component == \"cargo\" {\n+        format!(\"{}-{}\", component, build.cargo_package_vers())\n+    } else if component == \"rls\" {\n+        format!(\"{}-{}\", component, build.package_vers(&build.release_num(\"rls\")))\n+    } else {\n+        assert!(component.starts_with(\"rust\"));\n+        format!(\"{}-{}\", component, build.rust_package_vers())\n+    }\n }\n \n fn distdir(build: &Build) -> PathBuf {\n@@ -49,6 +49,10 @@ pub fn tmpdir(build: &Build) -> PathBuf {\n     build.out.join(\"tmp/dist\")\n }\n \n+fn rust_installer(build: &Build) -> Command {\n+    build.tool_cmd(&Compiler::new(0, &build.config.build), \"rust-installer\")\n+}\n+\n /// Builds the `rust-docs` installer component.\n ///\n /// Slurps up documentation from the `stage`'s `host`.\n@@ -68,14 +72,14 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n     let src = build.out.join(host).join(\"doc\");\n     cp_r(&src, &dst);\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust-Documentation\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-documentation-is-installed.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rust-docs\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n@@ -92,6 +96,140 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n     }\n }\n \n+fn find_files(files: &[&str], path: &[PathBuf]) -> Vec<PathBuf> {\n+    let mut found = Vec::new();\n+\n+    for file in files {\n+        let file_path =\n+            path.iter()\n+                .map(|dir| dir.join(file))\n+                .find(|p| p.exists());\n+\n+        if let Some(file_path) = file_path {\n+            found.push(file_path);\n+        } else {\n+            panic!(\"Could not find '{}' in {:?}\", file, path);\n+        }\n+    }\n+\n+    found\n+}\n+\n+fn make_win_dist(rust_root: &Path, plat_root: &Path, target_triple: &str, build: &Build) {\n+    //Ask gcc where it keeps its stuff\n+    let mut cmd = Command::new(build.cc(target_triple));\n+    cmd.arg(\"-print-search-dirs\");\n+    build.run_quiet(&mut cmd);\n+    let gcc_out =\n+        String::from_utf8(\n+                cmd\n+                .output()\n+                .expect(\"failed to execute gcc\")\n+                .stdout).expect(\"gcc.exe output was not utf8\");\n+\n+    let mut bin_path: Vec<_> =\n+        env::split_paths(&env::var_os(\"PATH\").unwrap_or_default())\n+        .collect();\n+    let mut lib_path = Vec::new();\n+\n+    for line in gcc_out.lines() {\n+        let idx = line.find(':').unwrap();\n+        let key = &line[..idx];\n+        let trim_chars: &[_] = &[' ', '='];\n+        let value =\n+            line[(idx + 1)..]\n+                .trim_left_matches(trim_chars)\n+                .split(';')\n+                .map(|s| PathBuf::from(s));\n+\n+        if key == \"programs\" {\n+            bin_path.extend(value);\n+        } else if key == \"libraries\" {\n+            lib_path.extend(value);\n+        }\n+    }\n+\n+    let target_tools = vec![\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\", \"libwinpthread-1.dll\"];\n+    let mut rustc_dlls = vec![\"libstdc++-6.dll\", \"libwinpthread-1.dll\"];\n+    if target_triple.starts_with(\"i686-\") {\n+        rustc_dlls.push(\"libgcc_s_dw2-1.dll\");\n+    } else {\n+        rustc_dlls.push(\"libgcc_s_seh-1.dll\");\n+    }\n+\n+    let target_libs = vec![ //MinGW libs\n+        \"libgcc.a\",\n+        \"libgcc_eh.a\",\n+        \"libgcc_s.a\",\n+        \"libm.a\",\n+        \"libmingw32.a\",\n+        \"libmingwex.a\",\n+        \"libstdc++.a\",\n+        \"libiconv.a\",\n+        \"libmoldname.a\",\n+        \"libpthread.a\",\n+        //Windows import libs\n+        \"libadvapi32.a\",\n+        \"libbcrypt.a\",\n+        \"libcomctl32.a\",\n+        \"libcomdlg32.a\",\n+        \"libcrypt32.a\",\n+        \"libgdi32.a\",\n+        \"libimagehlp.a\",\n+        \"libiphlpapi.a\",\n+        \"libkernel32.a\",\n+        \"libmsvcrt.a\",\n+        \"libodbc32.a\",\n+        \"libole32.a\",\n+        \"liboleaut32.a\",\n+        \"libopengl32.a\",\n+        \"libpsapi.a\",\n+        \"librpcrt4.a\",\n+        \"libsetupapi.a\",\n+        \"libshell32.a\",\n+        \"libuser32.a\",\n+        \"libuserenv.a\",\n+        \"libuuid.a\",\n+        \"libwinhttp.a\",\n+        \"libwinmm.a\",\n+        \"libwinspool.a\",\n+        \"libws2_32.a\",\n+        \"libwsock32.a\",\n+    ];\n+\n+    //Find mingw artifacts we want to bundle\n+    let target_tools = find_files(&target_tools, &bin_path);\n+    let rustc_dlls = find_files(&rustc_dlls, &bin_path);\n+    let target_libs = find_files(&target_libs, &lib_path);\n+\n+    fn copy_to_folder(src: &Path, dest_folder: &Path) {\n+        let file_name = src.file_name().unwrap().to_os_string();\n+        let dest = dest_folder.join(file_name);\n+        copy(src, &dest);\n+    }\n+\n+    //Copy runtime dlls next to rustc.exe\n+    let dist_bin_dir = rust_root.join(\"bin/\");\n+    fs::create_dir_all(&dist_bin_dir).expect(\"creating dist_bin_dir failed\");\n+    for src in rustc_dlls {\n+        copy_to_folder(&src, &dist_bin_dir);\n+    }\n+\n+    //Copy platform tools to platform-specific bin directory\n+    let target_bin_dir = plat_root.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"bin\");\n+    fs::create_dir_all(&target_bin_dir).expect(\"creating target_bin_dir failed\");\n+    for src in target_tools {\n+        copy_to_folder(&src, &target_bin_dir);\n+    }\n+\n+    //Copy platform libs to platform-specific lib directory\n+    let target_lib_dir = plat_root.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\");\n+    fs::create_dir_all(&target_lib_dir).expect(\"creating target_lib_dir failed\");\n+    for src in target_libs {\n+        copy_to_folder(&src, &target_lib_dir);\n+    }\n+}\n+\n /// Build the `rust-mingw` installer component.\n ///\n /// This contains all the bits and pieces to run the MinGW Windows targets\n@@ -105,27 +243,20 @@ pub fn mingw(build: &Build, host: &str) {\n     let _ = fs::remove_dir_all(&image);\n     t!(fs::create_dir_all(&image));\n \n-    // The first argument to the script is a \"temporary directory\" which is just\n+    // The first argument is a \"temporary directory\" which is just\n     // thrown away (this contains the runtime DLLs included in the rustc package\n     // above) and the second argument is where to place all the MinGW components\n     // (which is what we want).\n-    //\n-    // FIXME: this script should be rewritten into Rust\n-    let mut cmd = Command::new(build.python());\n-    cmd.arg(build.src.join(\"src/etc/make-win-dist.py\"))\n-       .arg(tmpdir(build))\n-       .arg(&image)\n-       .arg(host);\n-    build.run(&mut cmd);\n+    make_win_dist(&tmpdir(build), &image, host, &build);\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust-MinGW\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-MinGW-is-installed.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rust-mingw\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -168,31 +299,24 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n     // anything requiring us to distribute a license, but it's likely the\n     // install will *also* include the rust-mingw package, which also needs\n     // licenses, so to be safe we just include it here in all MinGW packages.\n-    //\n-    // FIXME: this script should be rewritten into Rust\n     if host.contains(\"pc-windows-gnu\") {\n-        let mut cmd = Command::new(build.python());\n-        cmd.arg(build.src.join(\"src/etc/make-win-dist.py\"))\n-           .arg(&image)\n-           .arg(tmpdir(build))\n-           .arg(host);\n-        build.run(&mut cmd);\n+        make_win_dist(&image, &tmpdir(build), host, build);\n \n         let dst = image.join(\"share/doc\");\n         t!(fs::create_dir_all(&dst));\n         cp_r(&build.src.join(\"src/etc/third-party\"), &dst);\n     }\n \n     // Finally, wrap everything up in a nice tarball!\n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n+       .arg(\"--non-installed-overlay\").arg(&overlay)\n        .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rustc\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -248,7 +372,12 @@ pub fn debugger_scripts(build: &Build,\n         install(&build.src.join(\"src/etc/\").join(file), &dst, 0o644);\n     };\n     if host.contains(\"windows-msvc\") {\n-        // no debugger scripts\n+        // windbg debugger scripts\n+        install(&build.src.join(\"src/etc/rust-windbg.cmd\"), &sysroot.join(\"bin\"),\n+            0o755);\n+\n+        cp_debugger_script(\"natvis/libcore.natvis\");\n+        cp_debugger_script(\"natvis/libcollections.natvis\");\n     } else {\n         cp_debugger_script(\"debugger_pretty_printers_common.py\");\n \n@@ -289,41 +418,41 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n     let src = build.sysroot(compiler).join(\"lib/rustlib\");\n     cp_r(&src.join(target), &dst);\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=std-is-standing-at-the-ready.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(format!(\"--component-name=rust-std-{}\", target))\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n     build.run(&mut cmd);\n     t!(fs::remove_dir_all(&image));\n }\n \n+/// The path to the complete rustc-src tarball\n pub fn rust_src_location(build: &Build) -> PathBuf {\n     let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n     distdir(build).join(&format!(\"{}.tar.gz\", plain_name))\n }\n \n+/// The path to the rust-src component installer\n+pub fn rust_src_installer(build: &Build) -> PathBuf {\n+    let name = pkgname(build, \"rust-src\");\n+    distdir(build).join(&format!(\"{}.tar.gz\", name))\n+}\n+\n /// Creates a tarball of save-analysis metadata, if available.\n pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n+    assert!(build.config.extended);\n     println!(\"Dist analysis\");\n \n-    if build.config.channel != \"nightly\" {\n-        println!(\"\\tskipping - not on nightly channel\");\n-        return;\n-    }\n     if compiler.host != build.config.build {\n-        println!(\"\\tskipping - not a build host\");\n-        return\n-    }\n-    if compiler.stage != 2 {\n-        println!(\"\\tskipping - not stage2\");\n-        return\n+        println!(\"\\tskipping, not a build host\");\n+        return;\n     }\n \n     // Package save-analysis from stage1 if not doing a full bootstrap, as the\n@@ -345,14 +474,14 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n     println!(\"image_src: {:?}, dst: {:?}\", image_src, dst);\n     cp_r(&image_src, &dst);\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=save-analysis-saved.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(format!(\"--component-name=rust-analysis-{}\", target))\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -370,13 +499,11 @@ pub fn rust_src(build: &Build) {\n \n     println!(\"Dist src\");\n \n-    let name = pkgname(build, \"rust-src\");\n-    let image = tmpdir(build).join(format!(\"{}-image\", name));\n-    let _ = fs::remove_dir_all(&image);\n-\n-    let dst = image.join(\"lib/rustlib/src\");\n-    let dst_src = dst.join(\"rust\");\n-    t!(fs::create_dir_all(&dst_src));\n+    // Make sure that the root folder of tarball has the correct name\n+    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n+    let plain_dst_src = tmpdir(build).join(&plain_name);\n+    let _ = fs::remove_dir_all(&plain_dst_src);\n+    t!(fs::create_dir_all(&plain_dst_src));\n \n     // This is the set of root paths which will become part of the source package\n     let src_files = [\n@@ -392,7 +519,6 @@ pub fn rust_src(build: &Build) {\n     let src_dirs = [\n         \"man\",\n         \"src\",\n-        \"cargo\",\n     ];\n \n     let filter_fn = move |path: &Path| {\n@@ -424,69 +550,112 @@ pub fn rust_src(build: &Build) {\n \n     // Copy the directories using our filter\n     for item in &src_dirs {\n-        let dst = &dst_src.join(item);\n+        let dst = &plain_dst_src.join(item);\n         t!(fs::create_dir(dst));\n         cp_filtered(&build.src.join(item), dst, &filter_fn);\n     }\n     // Copy the files normally\n     for item in &src_files {\n-        copy(&build.src.join(item), &dst_src.join(item));\n+        copy(&build.src.join(item), &plain_dst_src.join(item));\n     }\n \n-    // Get cargo-vendor installed, if it isn't already.\n-    let mut has_cargo_vendor = false;\n-    let mut cmd = Command::new(&build.cargo);\n-    for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n-        has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n-    }\n-    if !has_cargo_vendor {\n+    // If we're building from git sources, we need to vendor a complete distribution.\n+    if build.src_is_git {\n+        // Get cargo-vendor installed, if it isn't already.\n+        let mut has_cargo_vendor = false;\n+        let mut cmd = Command::new(&build.cargo);\n+        for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n+            has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n+        }\n+        if !has_cargo_vendor {\n+            let mut cmd = Command::new(&build.cargo);\n+            cmd.arg(\"install\")\n+               .arg(\"--force\")\n+               .arg(\"--debug\")\n+               .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n+               .arg(\"cargo-vendor\")\n+               .env(\"RUSTC\", &build.rustc);\n+            build.run(&mut cmd);\n+        }\n+\n+        // Vendor all Cargo dependencies\n         let mut cmd = Command::new(&build.cargo);\n-        cmd.arg(\"install\")\n-           .arg(\"--force\")\n-           .arg(\"--debug\")\n-           .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n-           .arg(\"cargo-vendor\")\n-           .env(\"RUSTC\", &build.rustc);\n+        cmd.arg(\"vendor\")\n+           .current_dir(&plain_dst_src.join(\"src\"));\n         build.run(&mut cmd);\n     }\n \n-    // Vendor all Cargo dependencies\n-    let mut cmd = Command::new(&build.cargo);\n-    cmd.arg(\"vendor\")\n-       .current_dir(&dst_src.join(\"src\"));\n+    // Create the version file\n+    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n+\n+    // Create plain source tarball\n+    let mut tarball = rust_src_location(build);\n+    tarball.set_extension(\"\"); // strip .gz\n+    tarball.set_extension(\"\"); // strip .tar\n+    if let Some(dir) = tarball.parent() {\n+        t!(fs::create_dir_all(dir));\n+    }\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"tarball\")\n+       .arg(\"--input\").arg(&plain_name)\n+       .arg(\"--output\").arg(&tarball)\n+       .arg(\"--work-dir=.\")\n+       .current_dir(tmpdir(build));\n     build.run(&mut cmd);\n \n+\n+    let name = pkgname(build, \"rust-src\");\n+    let image = tmpdir(build).join(format!(\"{}-image\", name));\n+    let _ = fs::remove_dir_all(&image);\n+\n+    let dst = image.join(\"lib/rustlib/src\");\n+    let dst_src = dst.join(\"rust\");\n+    t!(fs::create_dir_all(&dst_src));\n+\n+    // This is the reduced set of paths which will become the rust-src component\n+    // (essentially libstd and all of its path dependencies)\n+    let std_src_dirs = [\n+        \"src/build_helper\",\n+        \"src/liballoc\",\n+        \"src/liballoc_jemalloc\",\n+        \"src/liballoc_system\",\n+        \"src/libcollections\",\n+        \"src/libcompiler_builtins\",\n+        \"src/libcore\",\n+        \"src/liblibc\",\n+        \"src/libpanic_abort\",\n+        \"src/libpanic_unwind\",\n+        \"src/librand\",\n+        \"src/librustc_asan\",\n+        \"src/librustc_lsan\",\n+        \"src/librustc_msan\",\n+        \"src/librustc_tsan\",\n+        \"src/libstd\",\n+        \"src/libstd_unicode\",\n+        \"src/libunwind\",\n+        \"src/rustc/libc_shim\",\n+    ];\n+\n+    for item in &std_src_dirs {\n+        let dst = &dst_src.join(item);\n+        t!(fs::create_dir_all(dst));\n+        cp_r(&plain_dst_src.join(item), dst);\n+    }\n+\n     // Create source tarball in rust-installer format\n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Awesome-Source.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}\", name))\n        .arg(\"--component-name=rust-src\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n     build.run(&mut cmd);\n \n-    // Rename directory, so that root folder of tarball has the correct name\n-    let plain_name = format!(\"rustc-{}-src\", build.rust_package_vers());\n-    let plain_dst_src = tmpdir(build).join(&plain_name);\n-    let _ = fs::remove_dir_all(&plain_dst_src);\n-    t!(fs::create_dir_all(&plain_dst_src));\n-    cp_r(&dst_src, &plain_dst_src);\n-\n-    // Create the version file\n-    write_file(&plain_dst_src.join(\"version\"), build.rust_version().as_bytes());\n-\n-    // Create plain source tarball\n-    let mut cmd = Command::new(\"tar\");\n-    cmd.arg(\"-czf\").arg(sanitize_sh(&rust_src_location(build)))\n-       .arg(&plain_name)\n-       .current_dir(tmpdir(build));\n-    build.run(&mut cmd);\n-\n     t!(fs::remove_dir_all(&image));\n     t!(fs::remove_dir_all(&plain_dst_src));\n }\n@@ -534,10 +703,10 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist cargo stage{} ({})\", stage, target);\n     let compiler = Compiler::new(stage, &build.config.build);\n \n-    let src = build.src.join(\"cargo\");\n+    let src = build.src.join(\"src/tools/cargo\");\n     let etc = src.join(\"src/etc\");\n-    let release_num = build.cargo_release_num();\n-    let name = format!(\"cargo-{}\", build.package_vers(&release_num));\n+    let release_num = build.release_num(\"cargo\");\n+    let name = pkgname(build, \"cargo\");\n     let version = build.cargo_info.version(build, &release_num);\n \n     let tmp = tmpdir(build);\n@@ -547,7 +716,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n \n     // Prepare the image directory\n     t!(fs::create_dir_all(image.join(\"share/zsh/site-functions\")));\n-    t!(fs::create_dir_all(image.join(\"etc/bash_completions.d\")));\n+    t!(fs::create_dir_all(image.join(\"etc/bash_completion.d\")));\n     let cargo = build.cargo_out(&compiler, Mode::Tool, target)\n                      .join(exe(\"cargo\", target));\n     install(&cargo, &image.join(\"bin\"), 0o755);\n@@ -557,7 +726,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     }\n     install(&etc.join(\"_cargo\"), &image.join(\"share/zsh/site-functions\"), 0o644);\n     copy(&etc.join(\"cargo.bashcomp.sh\"),\n-         &image.join(\"etc/bash_completions.d/cargo\"));\n+         &image.join(\"etc/bash_completion.d/cargo\"));\n     let doc = image.join(\"share/doc/cargo\");\n     install(&src.join(\"README.md\"), &doc, 0o644);\n     install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n@@ -575,33 +744,87 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n \n     // Generate the installer tarball\n-    let mut cmd = Command::new(\"sh\");\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n+       .arg(\"--non-installed-overlay\").arg(&overlay)\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(\"--component-name=cargo\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n     build.run(&mut cmd);\n }\n \n+pub fn rls(build: &Build, stage: u32, target: &str) {\n+    assert!(build.config.extended);\n+    println!(\"Dist RLS stage{} ({})\", stage, target);\n+    let compiler = Compiler::new(stage, &build.config.build);\n+\n+    let src = build.src.join(\"src/tools/rls\");\n+    let release_num = build.release_num(\"rls\");\n+    let name = pkgname(build, \"rls\");\n+    let version = build.rls_info.version(build, &release_num);\n+\n+    let tmp = tmpdir(build);\n+    let image = tmp.join(\"rls-image\");\n+    drop(fs::remove_dir_all(&image));\n+    t!(fs::create_dir_all(&image));\n+\n+    // Prepare the image directory\n+    let rls = build.cargo_out(&compiler, Mode::Tool, target)\n+                     .join(exe(\"rls\", target));\n+    install(&rls, &image.join(\"bin\"), 0o755);\n+    let doc = image.join(\"share/doc/rls\");\n+    install(&src.join(\"README.md\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+\n+    // Prepare the overlay\n+    let overlay = tmp.join(\"rls-overlay\");\n+    drop(fs::remove_dir_all(&overlay));\n+    t!(fs::create_dir_all(&overlay));\n+    install(&src.join(\"README.md\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &overlay, 0o644);\n+    t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+\n+    // Generate the installer tarball\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"generate\")\n+       .arg(\"--product-name=Rust\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=RLS-ready-to-serve.\")\n+       .arg(\"--image-dir\").arg(&image)\n+       .arg(\"--work-dir\").arg(&tmpdir(build))\n+       .arg(\"--output-dir\").arg(&distdir(build))\n+       .arg(\"--non-installed-overlay\").arg(&overlay)\n+       .arg(format!(\"--package-name={}-{}\", name, target))\n+       .arg(\"--component-name=rls\")\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+    build.run(&mut cmd);\n+}\n+\n /// Creates a combined installer for the specified target in the provided stage.\n pub fn extended(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist extended stage{} ({})\", stage, target);\n \n     let dist = distdir(build);\n-    let cargo_vers = build.cargo_release_num();\n     let rustc_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                             pkgname(build, \"rustc\"),\n                                             target));\n-    let cargo_installer = dist.join(format!(\"cargo-{}-{}.tar.gz\",\n-                                            build.package_vers(&cargo_vers),\n+    let cargo_installer = dist.join(format!(\"{}-{}.tar.gz\",\n+                                            pkgname(build, \"cargo\"),\n                                             target));\n+    let rls_installer = dist.join(format!(\"{}-{}.tar.gz\",\n+                                          pkgname(build, \"rls\"),\n+                                          target));\n+    let analysis_installer = dist.join(format!(\"{}-{}.tar.gz\",\n+                                               pkgname(build, \"rust-analysis\"),\n+                                               target));\n     let docs_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                            pkgname(build, \"rust-docs\"),\n                                            target));\n@@ -629,27 +852,28 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n     // the std files during uninstall. To do this ensure that rustc comes\n     // before rust-std in the list below.\n-    let mut input_tarballs = format!(\"{},{},{},{}\",\n-                                     sanitize_sh(&rustc_installer),\n-                                     sanitize_sh(&cargo_installer),\n-                                     sanitize_sh(&docs_installer),\n-                                     sanitize_sh(&std_installer));\n+    let mut tarballs = vec![rustc_installer, cargo_installer, rls_installer,\n+                            analysis_installer, docs_installer, std_installer];\n     if target.contains(\"pc-windows-gnu\") {\n-        input_tarballs.push_str(\",\");\n-        input_tarballs.push_str(&sanitize_sh(&mingw_installer));\n+        tarballs.push(mingw_installer);\n+    }\n+    let mut input_tarballs = tarballs[0].as_os_str().to_owned();\n+    for tarball in &tarballs[1..] {\n+        input_tarballs.push(\",\");\n+        input_tarballs.push(tarball);\n     }\n \n-    let mut cmd = Command::new(SH_CMD);\n-    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/combine-installers.sh\")))\n+    let mut cmd = rust_installer(build);\n+    cmd.arg(\"combine\")\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n        .arg(\"--success-message=Rust-is-ready-to-roll.\")\n-       .arg(format!(\"--work-dir={}\", sanitize_sh(&work)))\n-       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(\"--work-dir\").arg(&work)\n+       .arg(\"--output-dir\").arg(&distdir(build))\n        .arg(format!(\"--package-name={}-{}\", pkgname(build, \"rust\"), target))\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-       .arg(format!(\"--input-tarballs={}\", input_tarballs))\n-       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)));\n+       .arg(\"--input-tarballs\").arg(input_tarballs)\n+       .arg(\"--non-installed-overlay\").arg(&overlay);\n     build.run(&mut cmd);\n \n     let mut license = String::new();\n@@ -678,7 +902,7 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n \n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rustc\"), target)),\n              &pkg.join(\"rustc\"));\n-        cp_r(&work.join(&format!(\"cargo-nightly-{}\", target)),\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"cargo\"), target)),\n              &pkg.join(\"cargo\"));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-docs\"), target)),\n              &pkg.join(\"rust-docs\"));\n@@ -730,7 +954,7 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rustc\"), target))\n                   .join(\"rustc\"),\n              &exe.join(\"rustc\"));\n-        cp_r(&work.join(&format!(\"cargo-nightly-{}\", target))\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"cargo\"), target))\n                   .join(\"cargo\"),\n              &exe.join(\"cargo\"));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-docs\"), target))\n@@ -944,7 +1168,8 @@ pub fn hash_and_sign(build: &Build) {\n     cmd.arg(distdir(build));\n     cmd.arg(today.trim());\n     cmd.arg(build.rust_package_vers());\n-    cmd.arg(build.package_vers(&build.cargo_release_num()));\n+    cmd.arg(build.package_vers(&build.release_num(\"cargo\")));\n+    cmd.arg(build.package_vers(&build.release_num(\"rls\")));\n     cmd.arg(addr);\n \n     t!(fs::create_dir_all(distdir(build)));"}, {"sha": "baee1ada508f2b05697a81f99a0e56a57abe04de", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 86, "deletions": 6, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -53,6 +53,82 @@ pub fn rustbook(build: &Build, target: &str, name: &str) {\n                    .arg(out));\n }\n \n+/// Build the book and associated stuff.\n+///\n+/// We need to build:\n+///\n+/// * Book (first edition)\n+/// * Book (second edition)\n+/// * Index page\n+/// * Redirect pages\n+pub fn book(build: &Build, target: &str, name: &str) {\n+    // build book first edition\n+    rustbook(build, target, &format!(\"{}/first-edition\", name));\n+\n+    // build book second edition\n+    rustbook(build, target, &format!(\"{}/second-edition\", name));\n+\n+    // build the index page\n+    let index = format!(\"{}/index.md\", name);\n+    println!(\"Documenting book index ({})\", target);\n+    invoke_rustdoc(build, target, &index);\n+\n+    // build the redirect pages\n+    println!(\"Documenting book redirect pages ({})\", target);\n+    for file in t!(fs::read_dir(build.src.join(\"src/doc/book/redirects\"))) {\n+        let file = t!(file);\n+        let path = file.path();\n+        let path = path.to_str().unwrap();\n+\n+        invoke_rustdoc(build, target, path);\n+    }\n+}\n+\n+fn invoke_rustdoc(build: &Build, target: &str, markdown: &str) {\n+    let out = build.doc_out(target);\n+\n+    let compiler = Compiler::new(0, &build.config.build);\n+\n+    let path = build.src.join(\"src/doc\").join(markdown);\n+\n+    let rustdoc = build.rustdoc(&compiler);\n+\n+    let favicon = build.src.join(\"src/doc/favicon.inc\");\n+    let footer = build.src.join(\"src/doc/footer.inc\");\n+\n+    let version_input = build.src.join(\"src/doc/version_info.html.template\");\n+    let version_info = out.join(\"version_info.html\");\n+\n+    if !up_to_date(&version_input, &version_info) {\n+        let mut info = String::new();\n+        t!(t!(File::open(&version_input)).read_to_string(&mut info));\n+        let info = info.replace(\"VERSION\", &build.rust_release())\n+                       .replace(\"SHORT_HASH\", build.rust_info.sha_short().unwrap_or(\"\"))\n+                       .replace(\"STAMP\", build.rust_info.sha().unwrap_or(\"\"));\n+        t!(t!(File::create(&version_info)).write_all(info.as_bytes()));\n+    }\n+\n+    let mut cmd = Command::new(&rustdoc);\n+\n+    build.add_rustc_lib_path(&compiler, &mut cmd);\n+\n+    let out = out.join(\"book\");\n+\n+    t!(fs::copy(build.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n+\n+    cmd.arg(\"--html-after-content\").arg(&footer)\n+        .arg(\"--html-before-content\").arg(&version_info)\n+        .arg(\"--html-in-header\").arg(&favicon)\n+        .arg(\"--markdown-playground-url\")\n+        .arg(\"https://play.rust-lang.org/\")\n+        .arg(\"-o\").arg(&out)\n+        .arg(&path)\n+        .arg(\"--markdown-css\")\n+        .arg(\"rust.css\");\n+\n+    build.run(&mut cmd);\n+}\n+\n /// Generates all standalone documentation as compiled by the rustdoc in `stage`\n /// for the `target` into `out`.\n ///\n@@ -168,9 +244,7 @@ pub fn std(build: &Build, stage: u32, target: &str) {\n     // We don't want to build docs for internal std dependencies unless\n     // in compiler-docs mode. When not in that mode, we whitelist the crates\n     // for which docs must be built.\n-    if build.config.compiler_docs {\n-        cargo.arg(\"-p\").arg(\"std\");\n-    } else {\n+    if !build.config.compiler_docs {\n         cargo.arg(\"--no-deps\");\n         for krate in &[\"alloc\", \"collections\", \"core\", \"std\", \"std_unicode\"] {\n             cargo.arg(\"-p\").arg(krate);\n@@ -244,9 +318,15 @@ pub fn rustc(build: &Build, stage: u32, target: &str) {\n          .arg(build.src.join(\"src/rustc/Cargo.toml\"))\n          .arg(\"--features\").arg(build.rustc_features());\n \n-    // Like with libstd above if compiler docs aren't enabled then we're not\n-    // documenting internal dependencies, so we have a whitelist.\n-    if !build.config.compiler_docs {\n+    if build.config.compiler_docs {\n+        // src/rustc/Cargo.toml contains bin crates called rustc and rustdoc\n+        // which would otherwise overwrite the docs for the real rustc and\n+        // rustdoc lib crates.\n+        cargo.arg(\"-p\").arg(\"rustc_driver\")\n+             .arg(\"-p\").arg(\"rustdoc\");\n+    } else {\n+        // Like with libstd above if compiler docs aren't enabled then we're not\n+        // documenting internal dependencies, so we have a whitelist.\n         cargo.arg(\"--no-deps\");\n         for krate in &[\"proc_macro\"] {\n             cargo.arg(\"-p\").arg(krate);"}, {"sha": "a1466d68a135aa4950b13eb9771c182626c162a8", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 155, "deletions": 131, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -18,7 +18,7 @@ use std::fs;\n use std::path::PathBuf;\n use std::process;\n \n-use getopts::{Matches, Options};\n+use getopts::Options;\n \n use Build;\n use config::Config;\n@@ -75,7 +75,22 @@ pub enum Subcommand {\n \n impl Flags {\n     pub fn parse(args: &[String]) -> Flags {\n+        let mut extra_help = String::new();\n+        let mut subcommand_help = format!(\"\\\n+Usage: x.py <subcommand> [options] [<paths>...]\n+\n+Subcommands:\n+    build       Compile either the compiler or libraries\n+    test        Build and run some test suites\n+    bench       Build and run some benchmarks\n+    doc         Build documentation\n+    clean       Clean out build directories\n+    dist        Build and/or install distribution artifacts\n+\n+To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n+\n         let mut opts = Options::new();\n+        // Options common to all subcommands\n         opts.optflagmulti(\"v\", \"verbose\", \"use verbose output (-vv for very verbose)\");\n         opts.optflag(\"i\", \"incremental\", \"use incremental compilation\");\n         opts.optopt(\"\", \"config\", \"TOML configuration file for build\", \"FILE\");\n@@ -89,21 +104,83 @@ impl Flags {\n         opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n \n-        let usage = |n, opts: &Options| -> ! {\n-            let command = args.get(0).map(|s| &**s);\n-            let brief = format!(\"Usage: x.py {} [options] [<args>...]\",\n-                                command.unwrap_or(\"<command>\"));\n+        // fn usage()\n+        let usage = |exit_code: i32, opts: &Options, subcommand_help: &str, extra_help: &str| -> ! {\n+            println!(\"{}\", opts.usage(subcommand_help));\n+            if !extra_help.is_empty() {\n+                println!(\"{}\", extra_help);\n+            }\n+            process::exit(exit_code);\n+        };\n+\n+        // We can't use getopt to parse the options until we have completed specifying which\n+        // options are valid, but under the current implementation, some options are conditional on\n+        // the subcommand. Therefore we must manually identify the subcommand first, so that we can\n+        // complete the definition of the options.  Then we can use the getopt::Matches object from\n+        // there on out.\n+        let mut possible_subcommands = args.iter().collect::<Vec<_>>();\n+        possible_subcommands.retain(|&s|\n+                                           (s == \"build\")\n+                                        || (s == \"test\")\n+                                        || (s == \"bench\")\n+                                        || (s == \"doc\")\n+                                        || (s == \"clean\")\n+                                        || (s == \"dist\"));\n+        let subcommand = match possible_subcommands.first() {\n+            Some(s) => s,\n+            None => {\n+                // No subcommand -- show the general usage and subcommand help\n+                println!(\"{}\\n\", subcommand_help);\n+                process::exit(0);\n+            }\n+        };\n \n-            println!(\"{}\", opts.usage(&brief));\n-            match command {\n-                Some(\"build\") => {\n-                    println!(\"\\\n+        // Some subcommands get extra options\n+        match subcommand.as_str() {\n+            \"test\"  => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n+            \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n+            \"dist\"  => { opts.optflag(\"\", \"install\", \"run installer as well\"); },\n+            _ => { },\n+        };\n+\n+        // Done specifying what options are possible, so do the getopts parsing\n+        let matches = opts.parse(&args[..]).unwrap_or_else(|e| {\n+            // Invalid argument/option format\n+            println!(\"\\n{}\\n\", e);\n+            usage(1, &opts, &subcommand_help, &extra_help);\n+        });\n+        // Extra sanity check to make sure we didn't hit this crazy corner case:\n+        //\n+        //     ./x.py --frobulate clean build\n+        //            ^-- option  ^     ^- actual subcommand\n+        //                        \\_ arg to option could be mistaken as subcommand\n+        let mut pass_sanity_check = true;\n+        match matches.free.get(0) {\n+            Some(check_subcommand) => {\n+                if &check_subcommand != subcommand {\n+                    pass_sanity_check = false;\n+                }\n+            },\n+            None => {\n+                pass_sanity_check = false;\n+            }\n+        }\n+        if !pass_sanity_check {\n+            println!(\"{}\\n\", subcommand_help);\n+            println!(\"Sorry, I couldn't figure out which subcommand you were trying to specify.\\n\\\n+                      You may need to move some options to after the subcommand.\\n\");\n+            process::exit(1);\n+        }\n+        // Extra help text for some commands\n+        match subcommand.as_str() {\n+            \"build\" => {\n+                subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories to\n-    the crates and/or artifacts to compile. For example:\n+    This subcommand accepts a number of paths to directories to the crates\n+    and/or artifacts to compile. For example:\n \n         ./x.py build src/libcore\n-        ./x.py build src/libproc_macro\n+        ./x.py build src/libcore src/libproc_macro\n         ./x.py build src/libstd --stage 1\n \n     If no arguments are passed then the complete artifacts for that stage are\n@@ -114,15 +191,13 @@ Arguments:\n \n     For a quick build with a usable compile, you can pass:\n \n-        ./x.py build --stage 1 src/libtest\n-\");\n-                }\n-\n-                Some(\"test\") => {\n-                    println!(\"\\\n+        ./x.py build --stage 1 src/libtest\");\n+            }\n+            \"test\" => {\n+                subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories to\n-    tests that should be compiled and run. For example:\n+    This subcommand accepts a number of paths to directories to tests that\n+    should be compiled and run. For example:\n \n         ./x.py test src/test/run-pass\n         ./x.py test src/libstd --test-args hash_map\n@@ -132,171 +207,120 @@ Arguments:\n     compiled and tested.\n \n         ./x.py test\n-        ./x.py test --stage 1\n-\");\n-                }\n-\n-                Some(\"doc\") => {\n-                    println!(\"\\\n+        ./x.py test --stage 1\");\n+            }\n+            \"doc\" => {\n+                subcommand_help.push_str(\"\\n\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories of\n-    documentation to build. For example:\n+    This subcommand accepts a number of paths to directories of documentation\n+    to build. For example:\n \n         ./x.py doc src/doc/book\n         ./x.py doc src/doc/nomicon\n-        ./x.py doc src/libstd\n+        ./x.py doc src/doc/book src/libstd\n \n     If no arguments are passed then everything is documented:\n \n         ./x.py doc\n-        ./x.py doc --stage 1\n-\");\n-                }\n-\n-                _ => {}\n+        ./x.py doc --stage 1\");\n             }\n-\n-            if let Some(command) = command {\n-                if command == \"build\" ||\n-                   command == \"dist\" ||\n-                   command == \"doc\" ||\n-                   command == \"test\" ||\n-                   command == \"bench\" ||\n-                   command == \"clean\"  {\n-                    println!(\"Available invocations:\");\n-                    if args.iter().any(|a| a == \"-v\") {\n-                        let flags = Flags::parse(&[\"build\".to_string()]);\n-                        let mut config = Config::default();\n-                        config.build = flags.build.clone();\n-                        let mut build = Build::new(flags, config);\n-                        metadata::build(&mut build);\n-                        step::build_rules(&build).print_help(command);\n-                    } else {\n-                        println!(\"    ... elided, run `./x.py {} -h -v` to see\",\n-                                 command);\n-                    }\n-\n-                    println!(\"\");\n-                }\n-            }\n-\n-println!(\"\\\n-Subcommands:\n-    build       Compile either the compiler or libraries\n-    test        Build and run some test suites\n-    bench       Build and run some benchmarks\n-    doc         Build documentation\n-    clean       Clean out build directories\n-    dist        Build and/or install distribution artifacts\n-\n-To learn more about a subcommand, run `./x.py <command> -h`\n-\");\n-\n-            process::exit(n);\n+            _ => { }\n         };\n-        if args.len() == 0 {\n-            println!(\"a command must be passed\");\n-            usage(1, &opts);\n-        }\n-        let parse = |opts: &Options| {\n-            let m = opts.parse(&args[1..]).unwrap_or_else(|e| {\n-                println!(\"failed to parse options: {}\", e);\n-                usage(1, opts);\n-            });\n-            if m.opt_present(\"h\") {\n-                usage(0, opts);\n+        // Get any optional paths which occur after the subcommand\n+        let cwd = t!(env::current_dir());\n+        let paths = matches.free[1..].iter().map(|p| cwd.join(p)).collect::<Vec<_>>();\n+\n+\n+        // All subcommands can have an optional \"Available paths\" section\n+        if matches.opt_present(\"verbose\") {\n+            let flags = Flags::parse(&[\"build\".to_string()]);\n+            let mut config = Config::default();\n+            config.build = flags.build.clone();\n+            let mut build = Build::new(flags, config);\n+            metadata::build(&mut build);\n+            let maybe_rules_help = step::build_rules(&build).get_help(subcommand);\n+            if maybe_rules_help.is_some() {\n+                extra_help.push_str(maybe_rules_help.unwrap().as_str());\n             }\n-            return m\n-        };\n+        } else {\n+            extra_help.push_str(format!(\"Run `./x.py {} -h -v` to see a list of available paths.\",\n+                     subcommand).as_str());\n+        }\n \n-        let cwd = t!(env::current_dir());\n-        let remaining_as_path = |m: &Matches| {\n-            m.free.iter().map(|p| cwd.join(p)).collect::<Vec<_>>()\n-        };\n+        // User passed in -h/--help?\n+        if matches.opt_present(\"help\") {\n+            usage(0, &opts, &subcommand_help, &extra_help);\n+        }\n \n-        let m: Matches;\n-        let cmd = match &args[0][..] {\n+        let cmd = match subcommand.as_str() {\n             \"build\" => {\n-                m = parse(&opts);\n-                Subcommand::Build { paths: remaining_as_path(&m) }\n-            }\n-            \"doc\" => {\n-                m = parse(&opts);\n-                Subcommand::Doc { paths: remaining_as_path(&m) }\n+                Subcommand::Build { paths: paths }\n             }\n             \"test\" => {\n-                opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n-                m = parse(&opts);\n                 Subcommand::Test {\n-                    paths: remaining_as_path(&m),\n-                    test_args: m.opt_strs(\"test-args\"),\n+                    paths: paths,\n+                    test_args: matches.opt_strs(\"test-args\"),\n                 }\n             }\n             \"bench\" => {\n-                opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n-                m = parse(&opts);\n                 Subcommand::Bench {\n-                    paths: remaining_as_path(&m),\n-                    test_args: m.opt_strs(\"test-args\"),\n+                    paths: paths,\n+                    test_args: matches.opt_strs(\"test-args\"),\n                 }\n             }\n+            \"doc\" => {\n+                Subcommand::Doc { paths: paths }\n+            }\n             \"clean\" => {\n-                m = parse(&opts);\n-                if m.free.len() > 0 {\n-                    println!(\"clean takes no arguments\");\n-                    usage(1, &opts);\n+                if paths.len() > 0 {\n+                    println!(\"\\nclean takes no arguments\\n\");\n+                    usage(1, &opts, &subcommand_help, &extra_help);\n                 }\n                 Subcommand::Clean\n             }\n             \"dist\" => {\n-                opts.optflag(\"\", \"install\", \"run installer as well\");\n-                m = parse(&opts);\n                 Subcommand::Dist {\n-                    paths: remaining_as_path(&m),\n-                    install: m.opt_present(\"install\"),\n+                    paths: paths,\n+                    install: matches.opt_present(\"install\"),\n                 }\n             }\n-            \"--help\" => usage(0, &opts),\n-            cmd => {\n-                println!(\"unknown command: {}\", cmd);\n-                usage(1, &opts);\n+            _ => {\n+                usage(1, &opts, &subcommand_help, &extra_help);\n             }\n         };\n \n \n-        let cfg_file = m.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n+        let cfg_file = matches.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n             if fs::metadata(\"config.toml\").is_ok() {\n                 Some(PathBuf::from(\"config.toml\"))\n             } else {\n                 None\n             }\n         });\n \n-        let mut stage = m.opt_str(\"stage\").map(|j| j.parse().unwrap());\n-\n-        let incremental = m.opt_present(\"i\");\n+        let mut stage = matches.opt_str(\"stage\").map(|j| j.parse().unwrap());\n \n-        if incremental {\n+        if matches.opt_present(\"incremental\") {\n             if stage.is_none() {\n                 stage = Some(1);\n             }\n         }\n \n         Flags {\n-            verbose: m.opt_count(\"v\"),\n+            verbose: matches.opt_count(\"verbose\"),\n             stage: stage,\n-            on_fail: m.opt_str(\"on-fail\"),\n-            keep_stage: m.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n-            build: m.opt_str(\"build\").unwrap_or_else(|| {\n+            on_fail: matches.opt_str(\"on-fail\"),\n+            keep_stage: matches.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n+            build: matches.opt_str(\"build\").unwrap_or_else(|| {\n                 env::var(\"BUILD\").unwrap()\n             }),\n-            host: split(m.opt_strs(\"host\")),\n-            target: split(m.opt_strs(\"target\")),\n+            host: split(matches.opt_strs(\"host\")),\n+            target: split(matches.opt_strs(\"target\")),\n             config: cfg_file,\n-            src: m.opt_str(\"src\").map(PathBuf::from),\n-            jobs: m.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n+            src: matches.opt_str(\"src\").map(PathBuf::from),\n+            jobs: matches.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n             cmd: cmd,\n-            incremental: incremental,\n+            incremental: matches.opt_present(\"incremental\"),\n         }\n     }\n }"}, {"sha": "dce0b1670e181612c25fb045b992e036154e3d99", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 102, "deletions": 47, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -21,55 +21,110 @@ use std::process::Command;\n use Build;\n use dist::{sanitize_sh, tmpdir};\n \n-/// Installs everything.\n-pub fn install(build: &Build, stage: u32, host: &str) {\n-    let prefix_default = PathBuf::from(\"/usr/local\");\n-    let docdir_default = PathBuf::from(\"share/doc/rust\");\n-    let mandir_default = PathBuf::from(\"share/man\");\n-    let libdir_default = PathBuf::from(\"lib\");\n-    let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n-    let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n-    let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n-    let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n-\n-    let docdir = prefix.join(docdir);\n-    let libdir = prefix.join(libdir);\n-    let mandir = prefix.join(mandir);\n-\n-    let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n-\n-    let prefix = add_destdir(&prefix, &destdir);\n-    let docdir = add_destdir(&docdir, &destdir);\n-    let libdir = add_destdir(&libdir, &destdir);\n-    let mandir = add_destdir(&mandir, &destdir);\n-\n-    let empty_dir = build.out.join(\"tmp/empty_dir\");\n-    t!(fs::create_dir_all(&empty_dir));\n-    if build.config.docs {\n-        install_sh(&build, \"docs\", \"rust-docs\", stage, host, &prefix,\n-                   &docdir, &libdir, &mandir, &empty_dir);\n-    }\n-    install_sh(&build, \"std\", \"rust-std\", stage, host, &prefix,\n-               &docdir, &libdir, &mandir, &empty_dir);\n-    install_sh(&build, \"rustc\", \"rustc\", stage, host, &prefix,\n-               &docdir, &libdir, &mandir, &empty_dir);\n-    t!(fs::remove_dir_all(&empty_dir));\n+pub struct Installer<'a> {\n+    build: &'a Build,\n+    prefix: PathBuf,\n+    sysconfdir: PathBuf,\n+    docdir: PathBuf,\n+    bindir: PathBuf,\n+    libdir: PathBuf,\n+    mandir: PathBuf,\n }\n \n-fn install_sh(build: &Build, package: &str, name: &str, stage: u32, host: &str,\n-              prefix: &Path, docdir: &Path, libdir: &Path, mandir: &Path, empty_dir: &Path) {\n-    println!(\"Install {} stage{} ({})\", package, stage, host);\n-    let package_name = format!(\"{}-{}-{}\", name, build.rust_package_vers(), host);\n-\n-    let mut cmd = Command::new(\"sh\");\n-    cmd.current_dir(empty_dir)\n-       .arg(sanitize_sh(&tmpdir(build).join(&package_name).join(\"install.sh\")))\n-       .arg(format!(\"--prefix={}\", sanitize_sh(prefix)))\n-       .arg(format!(\"--docdir={}\", sanitize_sh(docdir)))\n-       .arg(format!(\"--libdir={}\", sanitize_sh(libdir)))\n-       .arg(format!(\"--mandir={}\", sanitize_sh(mandir)))\n-       .arg(\"--disable-ldconfig\");\n-    build.run(&mut cmd);\n+impl<'a> Installer<'a> {\n+    pub fn new(build: &'a Build) -> Installer<'a> {\n+        let prefix_default = PathBuf::from(\"/usr/local\");\n+        let sysconfdir_default = PathBuf::from(\"/etc\");\n+        let docdir_default = PathBuf::from(\"share/doc/rust\");\n+        let bindir_default = PathBuf::from(\"bin\");\n+        let libdir_default = PathBuf::from(\"lib\");\n+        let mandir_default = PathBuf::from(\"share/man\");\n+        let prefix = build.config.prefix.as_ref().unwrap_or(&prefix_default);\n+        let sysconfdir = build.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n+        let docdir = build.config.docdir.as_ref().unwrap_or(&docdir_default);\n+        let bindir = build.config.bindir.as_ref().unwrap_or(&bindir_default);\n+        let libdir = build.config.libdir.as_ref().unwrap_or(&libdir_default);\n+        let mandir = build.config.mandir.as_ref().unwrap_or(&mandir_default);\n+\n+        let sysconfdir = prefix.join(sysconfdir);\n+        let docdir = prefix.join(docdir);\n+        let bindir = prefix.join(bindir);\n+        let libdir = prefix.join(libdir);\n+        let mandir = prefix.join(mandir);\n+\n+        let destdir = env::var_os(\"DESTDIR\").map(PathBuf::from);\n+\n+        let prefix = add_destdir(&prefix, &destdir);\n+        let sysconfdir = add_destdir(&sysconfdir, &destdir);\n+        let docdir = add_destdir(&docdir, &destdir);\n+        let bindir = add_destdir(&bindir, &destdir);\n+        let libdir = add_destdir(&libdir, &destdir);\n+        let mandir = add_destdir(&mandir, &destdir);\n+\n+        Installer {\n+            build,\n+            prefix,\n+            sysconfdir,\n+            docdir,\n+            bindir,\n+            libdir,\n+            mandir,\n+        }\n+    }\n+\n+    /// Installs everything.\n+    pub fn install(&self, stage: u32, host: &str) {\n+        let empty_dir = self.build.out.join(\"tmp/empty_dir\");\n+        t!(fs::create_dir_all(&empty_dir));\n+\n+        if self.build.config.docs {\n+            self.install_sh(\"docs\", \"rust-docs\", &self.build.rust_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+        }\n+\n+        for target in self.build.config.target.iter() {\n+            self.install_sh(\"std\", \"rust-std\", &self.build.rust_package_vers(),\n+                            stage, Some(target), &empty_dir);\n+        }\n+\n+        if self.build.config.extended {\n+            self.install_sh(\"cargo\", \"cargo\", &self.build.cargo_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"rls\", \"rls\", &self.build.rls_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"analysis\", \"rust-analysis\", &self.build.rust_package_vers(),\n+                            stage, Some(host), &empty_dir);\n+            self.install_sh(\"src\", \"rust-src\", &self.build.rust_package_vers(),\n+                            stage, None, &empty_dir);\n+        }\n+\n+        self.install_sh(\"rustc\", \"rustc\", &self.build.rust_package_vers(),\n+                        stage, Some(host), &empty_dir);\n+\n+        t!(fs::remove_dir_all(&empty_dir));\n+    }\n+\n+    fn install_sh(&self, package: &str, name: &str, version: &str,\n+                  stage: u32, host: Option<&str>,  empty_dir: &Path) {\n+        println!(\"Install {} stage{} ({:?})\", package, stage, host);\n+        let package_name = if let Some(host) = host {\n+            format!(\"{}-{}-{}\", name, version, host)\n+        } else {\n+            format!(\"{}-{}\", name, version)\n+        };\n+\n+        let mut cmd = Command::new(\"sh\");\n+        cmd.current_dir(empty_dir)\n+           .arg(sanitize_sh(&tmpdir(self.build).join(&package_name).join(\"install.sh\")))\n+           .arg(format!(\"--prefix={}\", sanitize_sh(&self.prefix)))\n+           .arg(format!(\"--sysconfdir={}\", sanitize_sh(&self.sysconfdir)))\n+           .arg(format!(\"--docdir={}\", sanitize_sh(&self.docdir)))\n+           .arg(format!(\"--bindir={}\", sanitize_sh(&self.bindir)))\n+           .arg(format!(\"--libdir={}\", sanitize_sh(&self.libdir)))\n+           .arg(format!(\"--mandir={}\", sanitize_sh(&self.mandir)))\n+           .arg(\"--disable-ldconfig\");\n+        self.build.run(&mut cmd);\n+    }\n }\n \n fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {"}, {"sha": "72a5d1338b8d05b1067f36e7c9998e6a29b43fd8", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -42,6 +42,7 @@\n use std::env;\n use std::io;\n use std::mem;\n+use Build;\n \n type HANDLE = *mut u8;\n type BOOL = i32;\n@@ -60,8 +61,10 @@ const DUPLICATE_SAME_ACCESS: DWORD = 0x2;\n const PROCESS_DUP_HANDLE: DWORD = 0x40;\n const JobObjectExtendedLimitInformation: JOBOBJECTINFOCLASS = 9;\n const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: DWORD = 0x2000;\n+const JOB_OBJECT_LIMIT_PRIORITY_CLASS: DWORD = 0x00000020;\n const SEM_FAILCRITICALERRORS: UINT = 0x0001;\n const SEM_NOGPFAULTERRORBOX: UINT = 0x0002;\n+const BELOW_NORMAL_PRIORITY_CLASS: DWORD = 0x00004000;\n \n extern \"system\" {\n     fn CreateJobObjectW(lpJobAttributes: *mut u8, lpName: *const u8) -> HANDLE;\n@@ -118,7 +121,7 @@ struct JOBOBJECT_BASIC_LIMIT_INFORMATION {\n     SchedulingClass: DWORD,\n }\n \n-pub unsafe fn setup() {\n+pub unsafe fn setup(build: &mut Build) {\n     // Tell Windows to not show any UI on errors (such as not finding a required dll\n     // during startup or terminating abnormally).  This is important for running tests,\n     // since some of them use abnormal termination by design.\n@@ -136,6 +139,10 @@ pub unsafe fn setup() {\n     // children will reside in the job by default.\n     let mut info = mem::zeroed::<JOBOBJECT_EXTENDED_LIMIT_INFORMATION>();\n     info.BasicLimitInformation.LimitFlags = JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;\n+    if build.config.low_priority {\n+        info.BasicLimitInformation.LimitFlags |= JOB_OBJECT_LIMIT_PRIORITY_CLASS;\n+        info.BasicLimitInformation.PriorityClass = BELOW_NORMAL_PRIORITY_CLASS;\n+    }\n     let r = SetInformationJobObject(job,\n                                     JobObjectExtendedLimitInformation,\n                                     &mut info as *mut _ as LPVOID,"}, {"sha": "665b9ee49c02d5597ed3261be23f344007c7da65", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 123, "deletions": 138, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -76,13 +76,16 @@ extern crate num_cpus;\n extern crate rustc_serialize;\n extern crate toml;\n \n+#[cfg(unix)]\n+extern crate libc;\n+\n use std::cmp;\n use std::collections::HashMap;\n use std::env;\n use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::Read;\n-use std::path::{Component, PathBuf, Path};\n+use std::path::{PathBuf, Path};\n use std::process::Command;\n \n use build_helper::{run_silent, run_suppressed, output, mtime};\n@@ -108,9 +111,21 @@ pub mod util;\n #[cfg(windows)]\n mod job;\n \n-#[cfg(not(windows))]\n+#[cfg(unix)]\n mod job {\n-    pub unsafe fn setup() {}\n+    use libc;\n+\n+    pub unsafe fn setup(build: &mut ::Build) {\n+        if build.config.low_priority {\n+            libc::setpriority(libc::PRIO_PGRP as _, 0, 10);\n+        }\n+    }\n+}\n+\n+#[cfg(not(any(unix, windows)))]\n+mod job {\n+    pub unsafe fn setup(_build: &mut ::Build) {\n+    }\n }\n \n pub use config::Config;\n@@ -151,6 +166,7 @@ pub struct Build {\n     out: PathBuf,\n     rust_info: channel::GitInfo,\n     cargo_info: channel::GitInfo,\n+    rls_info: channel::GitInfo,\n     local_rebuild: bool,\n \n     // Probed tools at runtime\n@@ -162,6 +178,7 @@ pub struct Build {\n     cxx: HashMap<String, gcc::Tool>,\n     crates: HashMap<String, Crate>,\n     is_sudo: bool,\n+    src_is_git: bool,\n }\n \n #[derive(Debug)]\n@@ -180,7 +197,7 @@ struct Crate {\n ///\n /// These entries currently correspond to the various output directories of the\n /// build system, with each mod generating output in a different directory.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n pub enum Mode {\n     /// This cargo is going to build the standard library, placing output in the\n     /// \"stageN-std\" directory.\n@@ -194,7 +211,7 @@ pub enum Mode {\n     /// output in the \"stageN-rustc\" directory.\n     Librustc,\n \n-    /// This cargo is going to some build tool, placing output in the\n+    /// This cargo is going to build some tool, placing output in the\n     /// \"stageN-tools\" directory.\n     Tool,\n }\n@@ -233,6 +250,8 @@ impl Build {\n         };\n         let rust_info = channel::GitInfo::new(&src);\n         let cargo_info = channel::GitInfo::new(&src.join(\"src/tools/cargo\"));\n+        let rls_info = channel::GitInfo::new(&src.join(\"src/tools/rls\"));\n+        let src_is_git = src.join(\".git\").exists();\n \n         Build {\n             flags: flags,\n@@ -244,20 +263,22 @@ impl Build {\n \n             rust_info: rust_info,\n             cargo_info: cargo_info,\n+            rls_info: rls_info,\n             local_rebuild: local_rebuild,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             crates: HashMap::new(),\n             lldb_version: None,\n             lldb_python_dir: None,\n             is_sudo: is_sudo,\n+            src_is_git: src_is_git,\n         }\n     }\n \n     /// Executes the entire build, as configured by the flags and configuration.\n     pub fn build(&mut self) {\n         unsafe {\n-            job::setup();\n+            job::setup(self);\n         }\n \n         if let Subcommand::Clean = self.flags.cmd {\n@@ -279,132 +300,12 @@ impl Build {\n             self.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));\n             self.local_rebuild = true;\n         }\n-        self.verbose(\"updating submodules\");\n-        self.update_submodules();\n         self.verbose(\"learning about cargo\");\n         metadata::build(self);\n \n         step::run(self);\n     }\n \n-    /// Updates all git submodules that we have.\n-    ///\n-    /// This will detect if any submodules are out of date an run the necessary\n-    /// commands to sync them all with upstream.\n-    fn update_submodules(&self) {\n-        struct Submodule<'a> {\n-            path: &'a Path,\n-            state: State,\n-        }\n-\n-        enum State {\n-            // The submodule may have staged/unstaged changes\n-            MaybeDirty,\n-            // Or could be initialized but never updated\n-            NotInitialized,\n-            // The submodule, itself, has extra commits but those changes haven't been commited to\n-            // the (outer) git repository\n-            OutOfSync,\n-        }\n-\n-        if !self.config.submodules {\n-            return\n-        }\n-        if fs::metadata(self.src.join(\".git\")).is_err() {\n-            return\n-        }\n-        let git = || {\n-            let mut cmd = Command::new(\"git\");\n-            cmd.current_dir(&self.src);\n-            return cmd\n-        };\n-        let git_submodule = || {\n-            let mut cmd = Command::new(\"git\");\n-            cmd.current_dir(&self.src).arg(\"submodule\");\n-            return cmd\n-        };\n-\n-        // FIXME: this takes a seriously long time to execute on Windows and a\n-        //        nontrivial amount of time on Unix, we should have a better way\n-        //        of detecting whether we need to run all the submodule commands\n-        //        below.\n-        let out = output(git_submodule().arg(\"status\"));\n-        let mut submodules = vec![];\n-        for line in out.lines() {\n-            // NOTE `git submodule status` output looks like this:\n-            //\n-            // -5066b7dcab7e700844b0e2ba71b8af9dc627a59b src/liblibc\n-            // +b37ef24aa82d2be3a3cc0fe89bf82292f4ca181c src/compiler-rt (remotes/origin/..)\n-            //  e058ca661692a8d01f8cf9d35939dfe3105ce968 src/jemalloc (3.6.0-533-ge058ca6)\n-            //\n-            // The first character can be '-', '+' or ' ' and denotes the `State` of the submodule\n-            // Right next to this character is the SHA-1 of the submodule HEAD\n-            // And after that comes the path to the submodule\n-            let path = Path::new(line[1..].split(' ').skip(1).next().unwrap());\n-            let state = if line.starts_with('-') {\n-                State::NotInitialized\n-            } else if line.starts_with('+') {\n-                State::OutOfSync\n-            } else if line.starts_with(' ') {\n-                State::MaybeDirty\n-            } else {\n-                panic!(\"unexpected git submodule state: {:?}\", line.chars().next());\n-            };\n-\n-            submodules.push(Submodule { path: path, state: state })\n-        }\n-\n-        self.run(git_submodule().arg(\"sync\"));\n-\n-        for submodule in submodules {\n-            // If using llvm-root then don't touch the llvm submodule.\n-            if submodule.path.components().any(|c| c == Component::Normal(\"llvm\".as_ref())) &&\n-                self.config.target_config.get(&self.config.build)\n-                    .and_then(|c| c.llvm_config.as_ref()).is_some()\n-            {\n-                continue\n-            }\n-\n-            if submodule.path.components().any(|c| c == Component::Normal(\"jemalloc\".as_ref())) &&\n-                !self.config.use_jemalloc\n-            {\n-                continue\n-            }\n-\n-            // `submodule.path` is the relative path to a submodule (from the repository root)\n-            // `submodule_path` is the path to a submodule from the cwd\n-\n-            // use `submodule.path` when e.g. executing a submodule specific command from the\n-            // repository root\n-            // use `submodule_path` when e.g. executing a normal git command for the submodule\n-            // (set via `current_dir`)\n-            let submodule_path = self.src.join(submodule.path);\n-\n-            match submodule.state {\n-                State::MaybeDirty => {\n-                    // drop staged changes\n-                    self.run(git().current_dir(&submodule_path)\n-                                  .args(&[\"reset\", \"--hard\"]));\n-                    // drops unstaged changes\n-                    self.run(git().current_dir(&submodule_path)\n-                                  .args(&[\"clean\", \"-fdx\"]));\n-                },\n-                State::NotInitialized => {\n-                    self.run(git_submodule().arg(\"init\").arg(submodule.path));\n-                    self.run(git_submodule().arg(\"update\").arg(submodule.path));\n-                },\n-                State::OutOfSync => {\n-                    // drops submodule commits that weren't reported to the (outer) git repository\n-                    self.run(git_submodule().arg(\"update\").arg(submodule.path));\n-                    self.run(git().current_dir(&submodule_path)\n-                                  .args(&[\"reset\", \"--hard\"]));\n-                    self.run(git().current_dir(&submodule_path)\n-                                  .args(&[\"clean\", \"-fdx\"]));\n-                },\n-            }\n-        }\n-    }\n-\n     /// Clear out `dir` if `input` is newer.\n     ///\n     /// After this executes, it will also ensure that `dir` exists.\n@@ -461,8 +362,6 @@ impl Build {\n              .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n              .env(\"RUSTC_REAL\", self.compiler_path(compiler))\n              .env(\"RUSTC_STAGE\", stage.to_string())\n-             .env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n-             .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string())\n              .env(\"RUSTC_CODEGEN_UNITS\",\n                   self.config.rust_codegen_units.to_string())\n              .env(\"RUSTC_DEBUG_ASSERTIONS\",\n@@ -474,6 +373,32 @@ impl Build {\n              .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n+        if mode != Mode::Tool {\n+            // Tools don't get debuginfo right now, e.g. cargo and rls don't\n+            // get compiled with debuginfo.\n+            cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n+                 .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string())\n+                 .env(\"RUSTC_FORCE_UNSTABLE\", \"1\");\n+\n+            // Currently the compiler depends on crates from crates.io, and\n+            // then other crates can depend on the compiler (e.g. proc-macro\n+            // crates). Let's say, for example that rustc itself depends on the\n+            // bitflags crate. If an external crate then depends on the\n+            // bitflags crate as well, we need to make sure they don't\n+            // conflict, even if they pick the same verison of bitflags. We'll\n+            // want to make sure that e.g. a plugin and rustc each get their\n+            // own copy of bitflags.\n+\n+            // Cargo ensures that this works in general through the -C metadata\n+            // flag. This flag will frob the symbols in the binary to make sure\n+            // they're different, even though the source code is the exact\n+            // same. To solve this problem for the compiler we extend Cargo's\n+            // already-passed -C metadata flag with our own. Our rustc.rs\n+            // wrapper around the actual rustc will detect -C metadata being\n+            // passed and frob it with this extra string we're passing in.\n+            cargo.env(\"RUSTC_METADATA_SUFFIX\", \"rustc\");\n+        }\n+\n         // Enable usage of unstable features\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);\n@@ -491,16 +416,39 @@ impl Build {\n         // For other crates, however, we know that we've already got a standard\n         // library up and running, so we can use the normal compiler to compile\n         // build scripts in that situation.\n-        if let Mode::Libstd = mode {\n+        if mode == Mode::Libstd {\n             cargo.env(\"RUSTC_SNAPSHOT\", &self.rustc)\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());\n         } else {\n             cargo.env(\"RUSTC_SNAPSHOT\", self.compiler_path(compiler))\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n+        // There are two invariants we must maintain:\n+        // * stable crates cannot depend on unstable crates (general Rust rule),\n+        // * crates that end up in the sysroot must be unstable (rustbuild rule).\n+        //\n+        // In order to do enforce the latter, we pass the env var\n+        // `RUSTBUILD_UNSTABLE` down the line for any crates which will end up\n+        // in the sysroot. We read this in bootstrap/bin/rustc.rs and if it is\n+        // set, then we pass the `rustbuild` feature to rustc when building the\n+        // the crate.\n+        //\n+        // In turn, crates that can be used here should recognise the `rustbuild`\n+        // feature and opt-in to `rustc_private`.\n+        //\n+        // We can't always pass `rustbuild` because crates which are outside of\n+        // the compiler, libs, and tests are stable and we don't want to make\n+        // their deps unstable (since this would break the first invariant\n+        // above).\n+        //\n+        // FIXME: remove this after next stage0\n+        if mode != Mode::Tool && stage == 0 {\n+            cargo.env(\"RUSTBUILD_UNSTABLE\", \"1\");\n+        }\n+\n         // Ignore incremental modes except for stage0, since we're\n-        // not guaranteeing correctness acros builds if the compiler\n+        // not guaranteeing correctness across builds if the compiler\n         // is changing under your feet.`\n         if self.flags.incremental && compiler.stage == 0 {\n             let incr_dir = self.incremental_dir(compiler);\n@@ -524,11 +472,24 @@ impl Build {\n                  .env(format!(\"CFLAGS_{}\", target), self.cflags(target).join(\" \"));\n         }\n \n-        if self.config.channel == \"nightly\" && compiler.is_final_stage(self) {\n+        if self.config.extended && compiler.is_final_stage(self) {\n             cargo.env(\"RUSTC_SAVE_ANALYSIS\", \"api\".to_string());\n         }\n \n-        // Environment variables *required* needed throughout the build\n+        // When being built Cargo will at some point call `nmake.exe` on Windows\n+        // MSVC. Unfortunately `nmake` will read these two environment variables\n+        // below and try to intepret them. We're likely being run, however, from\n+        // MSYS `make` which uses the same variables.\n+        //\n+        // As a result, to prevent confusion and errors, we remove these\n+        // variables from our environment to prevent passing MSYS make flags to\n+        // nmake, causing it to blow up.\n+        if cfg!(target_env = \"msvc\") {\n+            cargo.env_remove(\"MAKE\");\n+            cargo.env_remove(\"MAKEFLAGS\");\n+        }\n+\n+        // Environment variables *required* throughout the build\n         //\n         // FIXME: should update code to not require this env var\n         cargo.env(\"CFG_COMPILER_HOST_TRIPLE\", target);\n@@ -686,7 +647,7 @@ impl Build {\n     }\n \n     /// Returns the root output directory for all Cargo output in a given stage,\n-    /// running a particular comipler, wehther or not we're building the\n+    /// running a particular compiler, wehther or not we're building the\n     /// standard library, and targeting the specified architecture.\n     fn cargo_out(&self,\n                  compiler: &Compiler,\n@@ -846,13 +807,20 @@ impl Build {\n                            .filter(|s| !s.starts_with(\"-O\") && !s.starts_with(\"/O\"))\n                            .collect::<Vec<_>>();\n \n-        // If we're compiling on OSX then we add a few unconditional flags\n+        // If we're compiling on macOS then we add a few unconditional flags\n         // indicating that we want libc++ (more filled out than libstdc++) and\n         // we want to compile for 10.7. This way we can ensure that\n         // LLVM/jemalloc/etc are all properly compiled.\n         if target.contains(\"apple-darwin\") {\n             base.push(\"-stdlib=libc++\".into());\n         }\n+\n+        // Work around an apparently bad MinGW / GCC optimization,\n+        // See: http://lists.llvm.org/pipermail/cfe-dev/2016-December/051980.html\n+        // See: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78936\n+        if target == \"i686-pc-windows-gnu\" {\n+            base.push(\"-fno-omit-frame-pointer\".into());\n+        }\n         return base\n     }\n \n@@ -896,6 +864,12 @@ impl Build {\n             .map(|p| &**p)\n     }\n \n+    /// Returns whether the target will be tested using the `remote-test-client`\n+    /// and `remote-test-server` binaries.\n+    fn remote_tested(&self, target: &str) -> bool {\n+        self.qemu_rootfs(target).is_some() || target.contains(\"android\")\n+    }\n+\n     /// Returns the root of the \"rootfs\" image that this target will be using,\n     /// if one was configured.\n     ///\n@@ -994,6 +968,16 @@ impl Build {\n         self.package_vers(channel::CFG_RELEASE_NUM)\n     }\n \n+    /// Returns the value of `package_vers` above for Cargo\n+    fn cargo_package_vers(&self) -> String {\n+        self.package_vers(&self.release_num(\"cargo\"))\n+    }\n+\n+    /// Returns the value of `package_vers` above for rls\n+    fn rls_package_vers(&self) -> String {\n+        self.package_vers(&self.release_num(\"rls\"))\n+    }\n+\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///\n@@ -1003,10 +987,11 @@ impl Build {\n         self.rust_info.version(self, channel::CFG_RELEASE_NUM)\n     }\n \n-    /// Returns the `a.b.c` version that Cargo is at.\n-    fn cargo_release_num(&self) -> String {\n+    /// Returns the `a.b.c` version that the given package is at.\n+    fn release_num(&self, package: &str) -> String {\n         let mut toml = String::new();\n-        t!(t!(File::open(self.src.join(\"cargo/Cargo.toml\"))).read_to_string(&mut toml));\n+        let toml_file_name = self.src.join(&format!(\"src/tools/{}/Cargo.toml\", package));\n+        t!(t!(File::open(toml_file_name)).read_to_string(&mut toml));\n         for line in toml.lines() {\n             let prefix = \"version = \\\"\";\n             let suffix = \"\\\"\";\n@@ -1015,7 +1000,7 @@ impl Build {\n             }\n         }\n \n-        panic!(\"failed to find version in cargo's Cargo.toml\")\n+        panic!(\"failed to find version in {}'s Cargo.toml\", package)\n     }\n \n     /// Returns whether unstable features should be enabled for the compiler"}, {"sha": "7b6b01655df585fc3f2a61c175c618177171de64", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -58,6 +58,7 @@ fn build_krate(build: &mut Build, krate: &str) {\n     // the dependency graph and what `-p` arguments there are.\n     let mut cargo = Command::new(&build.cargo);\n     cargo.arg(\"metadata\")\n+         .arg(\"--format-version\").arg(\"1\")\n          .arg(\"--manifest-path\").arg(build.src.join(krate).join(\"Cargo.toml\"));\n     let output = output(&mut cargo);\n     let output: Output = json::decode(&output).unwrap();"}, {"sha": "a5df741e2bfc83965d5f6fbc722fd90dd6c030bb", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -55,6 +55,7 @@ check:\n check-aux:\n \t$(Q)$(BOOTSTRAP) test \\\n \t\tsrc/tools/cargotest \\\n+\t\tcargo \\\n \t\tsrc/test/pretty \\\n \t\tsrc/test/run-pass/pretty \\\n \t\tsrc/test/run-fail/pretty \\"}, {"sha": "6cb1d1fc4bf05b47c14c968bd56f16e7da135faf", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 96, "deletions": 26, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -18,6 +18,8 @@\n //! LLVM and compiler-rt are essentially just wired up to everything else to\n //! ensure that they're always in place if needed.\n \n+use std::env;\n+use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::{Read, Write};\n use std::path::Path;\n@@ -41,28 +43,25 @@ pub fn llvm(build: &Build, target: &str) {\n         }\n     }\n \n-    let clean_trigger = build.src.join(\"src/rustllvm/llvm-auto-clean-trigger\");\n-    let mut clean_trigger_contents = String::new();\n-    t!(t!(File::open(&clean_trigger)).read_to_string(&mut clean_trigger_contents));\n+    let rebuild_trigger = build.src.join(\"src/rustllvm/llvm-rebuild-trigger\");\n+    let mut rebuild_trigger_contents = String::new();\n+    t!(t!(File::open(&rebuild_trigger)).read_to_string(&mut rebuild_trigger_contents));\n \n     let out_dir = build.llvm_out(target);\n     let done_stamp = out_dir.join(\"llvm-finished-building\");\n     if done_stamp.exists() {\n         let mut done_contents = String::new();\n         t!(t!(File::open(&done_stamp)).read_to_string(&mut done_contents));\n \n-        // LLVM was already built previously.\n-        // We don't track changes in LLVM sources, so we need to choose between reusing\n-        // what was built previously, or cleaning the directory and doing a fresh build.\n-        // The choice depends on contents of the clean-trigger file.\n-        // If the contents are the same as during the previous build, then no action is required.\n-        // If the contents differ from the previous build, then cleaning is triggered.\n-        if done_contents == clean_trigger_contents {\n+        // If LLVM was already built previously and contents of the rebuild-trigger file\n+        // didn't change from the previous build, then no action is required.\n+        if done_contents == rebuild_trigger_contents {\n             return\n-        } else {\n-            t!(fs::remove_dir_all(&out_dir));\n         }\n     }\n+    if build.config.llvm_clean_rebuild {\n+        drop(fs::remove_dir_all(&out_dir));\n+    }\n \n     println!(\"Building LLVM for {}\", target);\n     let _time = util::timeit();\n@@ -83,7 +82,7 @@ pub fn llvm(build: &Build, target: &str) {\n     // NOTE: remember to also update `config.toml.example` when changing the defaults!\n     let llvm_targets = match build.config.llvm_targets {\n         Some(ref s) => s,\n-        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\",\n+        None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\",\n     };\n \n     let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n@@ -109,6 +108,7 @@ pub fn llvm(build: &Build, target: &str) {\n         cfg.define(\"LLVM_USE_CRT_DEBUG\", \"MT\");\n         cfg.define(\"LLVM_USE_CRT_RELEASE\", \"MT\");\n         cfg.define(\"LLVM_USE_CRT_RELWITHDEBINFO\", \"MT\");\n+        cfg.static_crt(true);\n     }\n \n     if target.starts_with(\"i686\") {\n@@ -131,21 +131,59 @@ pub fn llvm(build: &Build, target: &str) {\n            .define(\"LLVM_TABLEGEN\", &host);\n     }\n \n-    // MSVC handles compiler business itself\n-    if !target.contains(\"msvc\") {\n-        if let Some(ref ccache) = build.config.ccache {\n+    let sanitize_cc = |cc: &Path| {\n+        if target.contains(\"msvc\") {\n+            OsString::from(cc.to_str().unwrap().replace(\"\\\\\", \"/\"))\n+        } else {\n+            cc.as_os_str().to_owned()\n+        }\n+    };\n+\n+    let configure_compilers = |cfg: &mut cmake::Config| {\n+        // MSVC with CMake uses msbuild by default which doesn't respect these\n+        // vars that we'd otherwise configure. In that case we just skip this\n+        // entirely.\n+        if target.contains(\"msvc\") && !build.config.ninja {\n+            return\n+        }\n+\n+        let cc = build.cc(target);\n+        let cxx = build.cxx(target);\n+\n+        // Handle msvc + ninja + ccache specially (this is what the bots use)\n+        if target.contains(\"msvc\") &&\n+           build.config.ninja &&\n+           build.config.ccache.is_some() {\n+            let mut cc = env::current_exe().expect(\"failed to get cwd\");\n+            cc.set_file_name(\"sccache-plus-cl.exe\");\n+\n+           cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(&cc))\n+              .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(&cc));\n+           cfg.env(\"SCCACHE_PATH\",\n+                   build.config.ccache.as_ref().unwrap())\n+              .env(\"SCCACHE_TARGET\", target);\n+\n+        // If ccache is configured we inform the build a little differently hwo\n+        // to invoke ccache while also invoking our compilers.\n+        } else if let Some(ref ccache) = build.config.ccache {\n            cfg.define(\"CMAKE_C_COMPILER\", ccache)\n-              .define(\"CMAKE_C_COMPILER_ARG1\", build.cc(target))\n+              .define(\"CMAKE_C_COMPILER_ARG1\", sanitize_cc(cc))\n               .define(\"CMAKE_CXX_COMPILER\", ccache)\n-              .define(\"CMAKE_CXX_COMPILER_ARG1\", build.cxx(target));\n+              .define(\"CMAKE_CXX_COMPILER_ARG1\", sanitize_cc(cxx));\n         } else {\n-           cfg.define(\"CMAKE_C_COMPILER\", build.cc(target))\n-              .define(\"CMAKE_CXX_COMPILER\", build.cxx(target));\n+           cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n+              .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx));\n         }\n-        cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n \n+        cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n         cfg.define(\"CMAKE_C_FLAGS\", build.cflags(target).join(\" \"));\n         cfg.define(\"CMAKE_CXX_FLAGS\", build.cflags(target).join(\" \"));\n+    };\n+\n+    configure_compilers(&mut cfg);\n+\n+    if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n+        cfg.env(\"RUST_LOG\", \"sccache=info\");\n     }\n \n     // FIXME: we don't actually need to build all LLVM tools and all LLVM\n@@ -154,7 +192,7 @@ pub fn llvm(build: &Build, target: &str) {\n     //        tools and libs on all platforms.\n     cfg.build();\n \n-    t!(t!(File::create(&done_stamp)).write_all(clean_trigger_contents.as_bytes()));\n+    t!(t!(File::create(&done_stamp)).write_all(rebuild_trigger_contents.as_bytes()));\n }\n \n fn check_llvm_version(build: &Build, llvm_config: &Path) {\n@@ -225,9 +263,24 @@ pub fn openssl(build: &Build, target: &str) {\n     let tarball = out.join(&name);\n     if !tarball.exists() {\n         let tmp = tarball.with_extension(\"tmp\");\n-        build.run(Command::new(\"curl\")\n-                        .arg(\"-o\").arg(&tmp)\n-                        .arg(format!(\"https://www.openssl.org/source/{}\", name)));\n+        // originally from https://www.openssl.org/source/...\n+        let url = format!(\"https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/{}\",\n+                          name);\n+        let mut ok = false;\n+        for _ in 0..3 {\n+            let status = Command::new(\"curl\")\n+                            .arg(\"-o\").arg(&tmp)\n+                            .arg(&url)\n+                            .status()\n+                            .expect(\"failed to spawn curl\");\n+            if status.success() {\n+                ok = true;\n+                break\n+            }\n+        }\n+        if !ok {\n+            panic!(\"failed to download openssl source\")\n+        }\n         let mut shasum = if target.contains(\"apple\") {\n             let mut cmd = Command::new(\"shasum\");\n             cmd.arg(\"-a\").arg(\"256\");\n@@ -257,11 +310,15 @@ pub fn openssl(build: &Build, target: &str) {\n     configure.arg(\"no-ssl3\");\n \n     let os = match target {\n+        \"aarch64-linux-android\" => \"linux-aarch64\",\n         \"aarch64-unknown-linux-gnu\" => \"linux-aarch64\",\n+        \"arm-linux-androideabi\" => \"android\",\n         \"arm-unknown-linux-gnueabi\" => \"linux-armv4\",\n         \"arm-unknown-linux-gnueabihf\" => \"linux-armv4\",\n+        \"armv7-linux-androideabi\" => \"android-armv7\",\n         \"armv7-unknown-linux-gnueabihf\" => \"linux-armv4\",\n         \"i686-apple-darwin\" => \"darwin-i386-cc\",\n+        \"i686-linux-android\" => \"android-x86\",\n         \"i686-unknown-freebsd\" => \"BSD-x86-elf\",\n         \"i686-unknown-linux-gnu\" => \"linux-elf\",\n         \"i686-unknown-linux-musl\" => \"linux-elf\",\n@@ -274,6 +331,7 @@ pub fn openssl(build: &Build, target: &str) {\n         \"powerpc64le-unknown-linux-gnu\" => \"linux-ppc64le\",\n         \"s390x-unknown-linux-gnu\" => \"linux64-s390x\",\n         \"x86_64-apple-darwin\" => \"darwin64-x86_64-cc\",\n+        \"x86_64-linux-android\" => \"linux-x86_64\",\n         \"x86_64-unknown-freebsd\" => \"BSD-x86_64\",\n         \"x86_64-unknown-linux-gnu\" => \"linux-x86_64\",\n         \"x86_64-unknown-linux-musl\" => \"linux-x86_64\",\n@@ -285,11 +343,23 @@ pub fn openssl(build: &Build, target: &str) {\n     for flag in build.cflags(target) {\n         configure.arg(flag);\n     }\n+    // There is no specific os target for android aarch64 or x86_64,\n+    // so we need to pass some extra cflags\n+    if target == \"aarch64-linux-android\" || target == \"x86_64-linux-android\" {\n+        configure.arg(\"-mandroid\");\n+        configure.arg(\"-fomit-frame-pointer\");\n+    }\n+    // Make PIE binaries\n+    // Non-PIE linker support was removed in Lollipop\n+    // https://source.android.com/security/enhancements/enhancements50\n+    if target == \"i686-linux-android\" {\n+        configure.arg(\"no-asm\");\n+    }\n     configure.current_dir(&obj);\n     println!(\"Configuring openssl for {}\", target);\n     build.run_quiet(&mut configure);\n     println!(\"Building openssl for {}\", target);\n-    build.run_quiet(Command::new(\"make\").current_dir(&obj));\n+    build.run_quiet(Command::new(\"make\").arg(\"-j1\").current_dir(&obj));\n     println!(\"Installing openssl for {}\", target);\n     build.run_quiet(Command::new(\"make\").arg(\"install\").current_dir(&obj));\n "}, {"sha": "df6378a970bd4363a0a0065713ab1987adfdadd2", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -65,26 +65,25 @@ pub fn check(build: &mut Build) {\n \n     // If we've got a git directory we're gona need git to update\n     // submodules and learn about various other aspects.\n-    if fs::metadata(build.src.join(\".git\")).is_ok() {\n+    if build.src_is_git {\n         need_cmd(\"git\".as_ref());\n     }\n \n-    // We need cmake, but only if we're actually building LLVM\n-    for host in build.config.host.iter() {\n-        if let Some(config) = build.config.target_config.get(host) {\n-            if config.llvm_config.is_some() {\n-                continue\n-            }\n-        }\n+    // We need cmake, but only if we're actually building LLVM or sanitizers.\n+    let building_llvm = build.config.host.iter()\n+        .filter_map(|host| build.config.target_config.get(host))\n+        .any(|config| config.llvm_config.is_none());\n+    if building_llvm || build.config.sanitizers {\n         need_cmd(\"cmake\".as_ref());\n-        if build.config.ninja {\n-            // Some Linux distros rename `ninja` to `ninja-build`.\n-            // CMake can work with either binary name.\n-            if have_cmd(\"ninja-build\".as_ref()).is_none() {\n-                need_cmd(\"ninja\".as_ref());\n-            }\n+    }\n+\n+    // Ninja is currently only used for LLVM itself.\n+    if building_llvm && build.config.ninja {\n+        // Some Linux distros rename `ninja` to `ninja-build`.\n+        // CMake can work with either binary name.\n+        if have_cmd(\"ninja-build\".as_ref()).is_none() {\n+            need_cmd(\"ninja\".as_ref());\n         }\n-        break\n     }\n \n     if build.config.python.is_none() {\n@@ -151,10 +150,10 @@ pub fn check(build: &mut Build) {\n     }\n \n     for target in build.config.target.iter() {\n-        // Can't compile for iOS unless we're on OSX\n+        // Can't compile for iOS unless we're on macOS\n         if target.contains(\"apple-ios\") &&\n            !build.config.build.contains(\"apple-darwin\") {\n-            panic!(\"the iOS target is only supported on OSX\");\n+            panic!(\"the iOS target is only supported on macOS\");\n         }\n \n         // Make sure musl-root is valid if specified"}, {"sha": "57915446e1d1aee8e94586284d7b2546abd5c8fb", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 238, "deletions": 78, "changes": 316, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -26,7 +26,7 @@\n //! along with the actual implementation elsewhere. You can find more comments\n //! about how to define rules themselves below.\n \n-use std::collections::{BTreeMap, HashSet};\n+use std::collections::{BTreeMap, HashSet, HashMap};\n use std::mem;\n \n use check::{self, TestKind};\n@@ -137,7 +137,9 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n         while let Some(krate) = list.pop() {\n             let default = krate == name;\n             let krate = &build.crates[krate];\n-            let path = krate.path.strip_prefix(&build.src).unwrap();\n+            let path = krate.path.strip_prefix(&build.src)\n+                // This handles out of tree paths\n+                .unwrap_or(&krate.path);\n             ret.push((krate, path.to_str().unwrap(), default));\n             for dep in krate.deps.iter() {\n                 if visited.insert(dep) && dep != \"build_helper\" {\n@@ -305,7 +307,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                  .dep(|s| s.name(\"libtest\"))\n                  .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n                  .dep(|s| s.name(\"test-helpers\"))\n-                 .dep(|s| s.name(\"emulator-copy-libs\"))\n+                 .dep(|s| s.name(\"remote-copy-libs\"))\n                  .default(mode != \"pretty\") // pretty tests don't run everywhere\n                  .run(move |s| {\n                      check::compiletest(build, &s.compiler(), s.target, mode, dir)\n@@ -344,7 +346,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n              .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n              .dep(|s| s.name(\"test-helpers\"))\n              .dep(|s| s.name(\"debugger-scripts\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::compiletest(build, &s.compiler(), s.target,\n                                          \"debuginfo-gdb\", \"debuginfo\"));\n         let mut rule = rules.test(\"check-debuginfo\", \"src/test/debuginfo\");\n@@ -398,14 +400,14 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"std\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libstd, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-std-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libstd, TestKind::Test, None));\n@@ -414,44 +416,44 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"std\") {\n         rules.bench(&krate.bench_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libstd, TestKind::Bench,\n                                         Some(&krate.name)));\n     }\n     rules.bench(\"bench-std-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libstd, TestKind::Bench, None));\n \n     for (krate, path, _default) in krates(\"test\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libtest, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-test-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libtest, TestKind::Test, None));\n     for (krate, path, _default) in krates(\"rustc-main\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"librustc\"))\n-             .dep(|s| s.name(\"emulator-copy-libs\"))\n+             .dep(|s| s.name(\"remote-copy-libs\"))\n              .host(true)\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Librustc, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-rustc-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"librustc\"))\n-         .dep(|s| s.name(\"emulator-copy-libs\"))\n+         .dep(|s| s.name(\"remote-copy-libs\"))\n          .default(true)\n          .host(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n@@ -468,6 +470,10 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"librustc\"))\n          .host(true)\n          .run(move |s| check::cargotest(build, s.stage, s.target));\n+    rules.test(\"check-cargo\", \"cargo\")\n+         .dep(|s| s.name(\"tool-cargo\"))\n+         .host(true)\n+         .run(move |s| check::cargo(build, s.stage, s.target));\n     rules.test(\"check-tidy\", \"src/tools/tidy\")\n          .dep(|s| s.name(\"tool-tidy\").stage(0))\n          .default(true)\n@@ -494,33 +500,33 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.build(\"openssl\", \"path/to/nowhere\")\n          .run(move |s| native::openssl(build, s.target));\n \n-    // Some test suites are run inside emulators, and most of our test binaries\n-    // are linked dynamically which means we need to ship the standard library\n-    // and such to the emulator ahead of time. This step represents this and is\n-    // a dependency of all test suites.\n+    // Some test suites are run inside emulators or on remote devices, and most\n+    // of our test binaries are linked dynamically which means we need to ship\n+    // the standard library and such to the emulator ahead of time. This step\n+    // represents this and is a dependency of all test suites.\n     //\n     // Most of the time this step is a noop (the `check::emulator_copy_libs`\n     // only does work if necessary). For some steps such as shipping data to\n     // QEMU we have to build our own tools so we've got conditional dependencies\n-    // on those programs as well. Note that the QEMU client is built for the\n-    // build target (us) and the server is built for the target.\n-    rules.test(\"emulator-copy-libs\", \"path/to/nowhere\")\n+    // on those programs as well. Note that the remote test client is built for\n+    // the build target (us) and the server is built for the target.\n+    rules.test(\"remote-copy-libs\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n          .dep(move |s| {\n-             if build.qemu_rootfs(s.target).is_some() {\n-                s.name(\"tool-qemu-test-client\").target(s.host).stage(0)\n+             if build.remote_tested(s.target) {\n+                s.name(\"tool-remote-test-client\").target(s.host).stage(0)\n              } else {\n                  Step::noop()\n              }\n          })\n          .dep(move |s| {\n-             if build.qemu_rootfs(s.target).is_some() {\n-                s.name(\"tool-qemu-test-server\")\n+             if build.remote_tested(s.target) {\n+                s.name(\"tool-remote-test-server\")\n              } else {\n                  Step::noop()\n              }\n          })\n-         .run(move |s| check::emulator_copy_libs(build, &s.compiler(), s.target));\n+         .run(move |s| check::remote_copy_libs(build, &s.compiler(), s.target));\n \n     rules.test(\"check-bootstrap\", \"src/bootstrap\")\n          .default(true)\n@@ -533,34 +539,50 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     //\n     // Tools used during the build system but not shipped\n     rules.build(\"tool-rustbook\", \"src/tools/rustbook\")\n-         .dep(|s| s.name(\"librustc\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"librustc-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"rustbook\"));\n     rules.build(\"tool-error-index\", \"src/tools/error_index_generator\")\n-         .dep(|s| s.name(\"librustc\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"librustc-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"error_index_generator\"));\n     rules.build(\"tool-tidy\", \"src/tools/tidy\")\n-         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"tidy\"));\n     rules.build(\"tool-linkchecker\", \"src/tools/linkchecker\")\n-         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"linkchecker\"));\n     rules.build(\"tool-cargotest\", \"src/tools/cargotest\")\n-         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargotest\"));\n     rules.build(\"tool-compiletest\", \"src/tools/compiletest\")\n-         .dep(|s| s.name(\"libtest\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libtest-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"compiletest\"));\n     rules.build(\"tool-build-manifest\", \"src/tools/build-manifest\")\n-         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"build-manifest\"));\n-    rules.build(\"tool-qemu-test-server\", \"src/tools/qemu-test-server\")\n-         .dep(|s| s.name(\"libstd\"))\n-         .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-server\"));\n-    rules.build(\"tool-qemu-test-client\", \"src/tools/qemu-test-client\")\n-         .dep(|s| s.name(\"libstd\"))\n-         .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-client\"));\n-    rules.build(\"tool-cargo\", \"cargo\")\n-         .dep(|s| s.name(\"libstd\"))\n+    rules.build(\"tool-remote-test-server\", \"src/tools/remote-test-server\")\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"remote-test-server\"));\n+    rules.build(\"tool-remote-test-client\", \"src/tools/remote-test-client\")\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"remote-test-client\"));\n+    rules.build(\"tool-rust-installer\", \"src/tools/rust-installer\")\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"rust-installer\"));\n+    rules.build(\"tool-cargo\", \"src/tools/cargo\")\n+         .host(true)\n+         .default(build.config.extended)\n+         .dep(|s| s.name(\"maybe-clean-tools\"))\n+         .dep(|s| s.name(\"libstd-tool\"))\n          .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n          .dep(move |s| {\n              // Cargo depends on procedural macros, which requires a full host\n@@ -570,6 +592,37 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               .host(&build.config.build)\n          })\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n+    rules.build(\"tool-rls\", \"src/tools/rls\")\n+         .host(true)\n+         .default(build.config.extended)\n+         .dep(|s| s.name(\"librustc-tool\"))\n+         .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n+         .dep(move |s| {\n+             // rls, like cargo, uses procedural macros\n+             s.name(\"librustc-link\")\n+              .target(&build.config.build)\n+              .host(&build.config.build)\n+         })\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"rls\"));\n+\n+    // \"pseudo rule\" which represents completely cleaning out the tools dir in\n+    // one stage. This needs to happen whenever a dependency changes (e.g.\n+    // libstd, libtest, librustc) and all of the tool compilations above will\n+    // be sequenced after this rule.\n+    rules.build(\"maybe-clean-tools\", \"path/to/nowhere\")\n+         .after(\"librustc-tool\")\n+         .after(\"libtest-tool\")\n+         .after(\"libstd-tool\");\n+\n+    rules.build(\"librustc-tool\", \"path/to/nowhere\")\n+         .dep(|s| s.name(\"librustc\"))\n+         .run(move |s| compile::maybe_clean_tools(build, s.stage, s.target, Mode::Librustc));\n+    rules.build(\"libtest-tool\", \"path/to/nowhere\")\n+         .dep(|s| s.name(\"libtest\"))\n+         .run(move |s| compile::maybe_clean_tools(build, s.stage, s.target, Mode::Libtest));\n+    rules.build(\"libstd-tool\", \"path/to/nowhere\")\n+         .dep(|s| s.name(\"libstd\"))\n+         .run(move |s| compile::maybe_clean_tools(build, s.stage, s.target, Mode::Libstd));\n \n     // ========================================================================\n     // Documentation targets\n@@ -581,7 +634,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               .stage(0)\n          })\n          .default(build.config.docs)\n-         .run(move |s| doc::rustbook(build, s.target, \"book\"));\n+         .run(move |s| doc::book(build, s.target, \"book\"));\n     rules.doc(\"doc-nomicon\", \"src/doc/nomicon\")\n          .dep(move |s| {\n              s.name(\"tool-rustbook\")\n@@ -633,12 +686,16 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, default) in krates(\"test\") {\n         rules.doc(&krate.doc_step, path)\n              .dep(|s| s.name(\"libtest-link\"))\n+             // Needed so rustdoc generates relative links to std.\n+             .dep(|s| s.name(\"doc-crate-std\"))\n              .default(default && build.config.compiler_docs)\n              .run(move |s| doc::test(build, s.stage, s.target));\n     }\n     for (krate, path, default) in krates(\"rustc-main\") {\n         rules.doc(&krate.doc_step, path)\n              .dep(|s| s.name(\"librustc-link\"))\n+             // Needed so rustdoc generates relative links to std.\n+             .dep(|s| s.name(\"doc-crate-std\"))\n              .host(true)\n              .default(default && build.config.docs)\n              .run(move |s| doc::rustc(build, s.stage, s.target));\n@@ -651,6 +708,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .host(true)\n          .only_host_build(true)\n          .default(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::rustc(build, s.stage, s.target));\n     rules.dist(\"dist-std\", \"src/libstd\")\n          .dep(move |s| {\n@@ -665,10 +723,12 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          })\n          .default(true)\n          .only_host_build(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::std(build, &s.compiler(), s.target));\n     rules.dist(\"dist-mingw\", \"path/to/nowhere\")\n          .default(true)\n          .only_host_build(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| {\n              if s.target.contains(\"pc-windows-gnu\") {\n                  dist::mingw(build, s.target)\n@@ -679,24 +739,34 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .host(true)\n          .only_build(true)\n          .only_host_build(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |_| dist::rust_src(build));\n     rules.dist(\"dist-docs\", \"src/doc\")\n          .default(true)\n          .only_host_build(true)\n          .dep(|s| s.name(\"default:doc\"))\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::docs(build, s.stage, s.target));\n     rules.dist(\"dist-analysis\", \"analysis\")\n+         .default(build.config.extended)\n          .dep(|s| s.name(\"dist-std\"))\n-         .default(true)\n          .only_host_build(true)\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n+    rules.dist(\"dist-rls\", \"rls\")\n+         .host(true)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"tool-rls\"))\n+         .dep(move |s| tool_rust_installer(build, s))\n+         .run(move |s| dist::rls(build, s.stage, s.target));\n     rules.dist(\"install\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"default:dist\"))\n-         .run(move |s| install::install(build, s.stage, s.target));\n+         .run(move |s| install::Installer::new(build).install(s.stage, s.target));\n     rules.dist(\"dist-cargo\", \"cargo\")\n          .host(true)\n          .only_host_build(true)\n          .dep(|s| s.name(\"tool-cargo\"))\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::cargo(build, s.stage, s.target));\n     rules.dist(\"dist-extended\", \"extended\")\n          .default(build.config.extended)\n@@ -707,6 +777,9 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|d| d.name(\"dist-mingw\"))\n          .dep(|d| d.name(\"dist-docs\"))\n          .dep(|d| d.name(\"dist-cargo\"))\n+         .dep(|d| d.name(\"dist-rls\"))\n+         .dep(|d| d.name(\"dist-analysis\"))\n+         .dep(move |s| tool_rust_installer(build, s))\n          .run(move |s| dist::extended(build, s.stage, s.target));\n \n     rules.dist(\"dist-sign\", \"hash-and-sign\")\n@@ -718,6 +791,14 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n \n     rules.verify();\n     return rules;\n+\n+    /// Helper to depend on a stage0 build-only rust-installer tool.\n+    fn tool_rust_installer<'a>(build: &'a Build, step: &Step<'a>) -> Step<'a> {\n+        step.name(\"tool-rust-installer\")\n+            .host(&build.config.build)\n+            .target(&build.config.build)\n+            .stage(0)\n+    }\n }\n \n #[derive(PartialEq, Eq, Hash, Clone, Debug)]\n@@ -807,6 +888,11 @@ struct Rule<'a> {\n     /// Whether this rule is only for the build triple, not anything in hosts or\n     /// targets.\n     only_build: bool,\n+\n+    /// A list of \"order only\" dependencies. This rules does not actually\n+    /// depend on these rules, but if they show up in the dependency graph then\n+    /// this rule must be executed after all these rules.\n+    after: Vec<&'a str>,\n }\n \n #[derive(PartialEq)]\n@@ -830,6 +916,7 @@ impl<'a> Rule<'a> {\n             host: false,\n             only_host_build: false,\n             only_build: false,\n+            after: Vec::new(),\n         }\n     }\n }\n@@ -849,6 +936,11 @@ impl<'a, 'b> RuleBuilder<'a, 'b> {\n         self\n     }\n \n+    fn after(&mut self, step: &'a str) -> &mut Self {\n+        self.rule.after.push(step);\n+        self\n+    }\n+\n     fn run<F>(&mut self, f: F) -> &mut Self\n         where F: Fn(&Step<'a>) + 'a,\n     {\n@@ -974,26 +1066,25 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         }\n     }\n \n-    pub fn print_help(&self, command: &str) {\n+    pub fn get_help(&self, command: &str) -> Option<String> {\n         let kind = match command {\n             \"build\" => Kind::Build,\n             \"doc\" => Kind::Doc,\n             \"test\" => Kind::Test,\n             \"bench\" => Kind::Bench,\n             \"dist\" => Kind::Dist,\n-            _ => return,\n+            _ => return None,\n         };\n         let rules = self.rules.values().filter(|r| r.kind == kind);\n         let rules = rules.filter(|r| !r.path.contains(\"nowhere\"));\n         let mut rules = rules.collect::<Vec<_>>();\n         rules.sort_by_key(|r| r.path);\n \n-        println!(\"Available paths:\\n\");\n+        let mut help_string = String::from(\"Available paths:\\n\");\n         for rule in rules {\n-            print!(\"    ./x.py {} {}\", command, rule.path);\n-\n-            println!(\"\");\n+            help_string.push_str(format!(\"    ./x.py {} {}\\n\", command, rule.path).as_str());\n         }\n+        Some(help_string)\n     }\n \n     /// Construct the top-level build steps that we're going to be executing,\n@@ -1133,31 +1224,52 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n     /// From the top level targets `steps` generate a topological ordering of\n     /// all steps needed to run those steps.\n     fn expand(&self, steps: &[Step<'a>]) -> Vec<Step<'a>> {\n+        // First up build a graph of steps and their dependencies. The `nodes`\n+        // map is a map from step to a unique number. The `edges` map is a\n+        // map from these unique numbers to a list of other numbers,\n+        // representing dependencies.\n+        let mut nodes = HashMap::new();\n+        nodes.insert(Step::noop(), 0);\n+        let mut edges = HashMap::new();\n+        edges.insert(0, HashSet::new());\n+        for step in steps {\n+            self.build_graph(step.clone(), &mut nodes, &mut edges);\n+        }\n+\n+        // Now that we've built up the actual dependency graph, draw more\n+        // dependency edges to satisfy the `after` dependencies field for each\n+        // rule.\n+        self.satisfy_after_deps(&nodes, &mut edges);\n+\n+        // And finally, perform a topological sort to return a list of steps to\n+        // execute.\n         let mut order = Vec::new();\n-        let mut added = HashSet::new();\n-        added.insert(Step::noop());\n-        for step in steps.iter().cloned() {\n-            self.fill(step, &mut order, &mut added);\n+        let mut visited = HashSet::new();\n+        visited.insert(0);\n+        let idx_to_node = nodes.iter().map(|p| (*p.1, p.0)).collect::<HashMap<_, _>>();\n+        for idx in 0..nodes.len() {\n+            self.topo_sort(idx, &idx_to_node, &edges, &mut visited, &mut order);\n         }\n         return order\n     }\n \n-    /// Performs topological sort of dependencies rooted at the `step`\n-    /// specified, pushing all results onto the `order` vector provided.\n+    /// Builds the dependency graph rooted at `step`.\n     ///\n-    /// In other words, when this method returns, the `order` vector will\n-    /// contain a list of steps which if executed in order will eventually\n-    /// complete the `step` specified as well.\n-    ///\n-    /// The `added` set specified here is the set of steps that are already\n-    /// present in `order` (and hence don't need to be added again).\n-    fn fill(&self,\n-            step: Step<'a>,\n-            order: &mut Vec<Step<'a>>,\n-            added: &mut HashSet<Step<'a>>) {\n-        if !added.insert(step.clone()) {\n-            return\n+    /// The `nodes` and `edges` maps are filled out according to the rule\n+    /// described by `step.name`.\n+    fn build_graph(&self,\n+                   step: Step<'a>,\n+                   nodes: &mut HashMap<Step<'a>, usize>,\n+                   edges: &mut HashMap<usize, HashSet<usize>>) -> usize {\n+        use std::collections::hash_map::Entry;\n+\n+        let idx = nodes.len();\n+        match nodes.entry(step.clone()) {\n+            Entry::Vacant(e) => { e.insert(idx); }\n+            Entry::Occupied(e) => return *e.get(),\n         }\n+\n+        let mut deps = Vec::new();\n         for dep in self.rules[step.name].deps.iter() {\n             let dep = dep(&step);\n             if dep.name.starts_with(\"default:\") {\n@@ -1169,13 +1281,61 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n                 let host = self.build.config.host.iter().any(|h| h == dep.target);\n                 let rules = self.rules.values().filter(|r| r.default);\n                 for rule in rules.filter(|r| r.kind == kind && (!r.host || host)) {\n-                    self.fill(dep.name(rule.name), order, added);\n+                    deps.push(self.build_graph(dep.name(rule.name), nodes, edges));\n                 }\n             } else {\n-                self.fill(dep, order, added);\n+                deps.push(self.build_graph(dep, nodes, edges));\n             }\n         }\n-        order.push(step);\n+\n+        edges.entry(idx).or_insert(HashSet::new()).extend(deps);\n+        return idx\n+    }\n+\n+    /// Given a dependency graph with a finished list of `nodes`, fill out more\n+    /// dependency `edges`.\n+    ///\n+    /// This is the step which satisfies all `after` listed dependencies in\n+    /// `Rule` above.\n+    fn satisfy_after_deps(&self,\n+                          nodes: &HashMap<Step<'a>, usize>,\n+                          edges: &mut HashMap<usize, HashSet<usize>>) {\n+        // Reverse map from the name of a step to the node indices that it\n+        // appears at.\n+        let mut name_to_idx = HashMap::new();\n+        for (step, &idx) in nodes {\n+            name_to_idx.entry(step.name).or_insert(Vec::new()).push(idx);\n+        }\n+\n+        for (step, idx) in nodes {\n+            if *step == Step::noop() {\n+                continue\n+            }\n+            for after in self.rules[step.name].after.iter() {\n+                // This is the critical piece of an `after` dependency. If the\n+                // dependency isn't actually in our graph then no edge is drawn,\n+                // only if it's already present do we draw the edges.\n+                if let Some(idxs) = name_to_idx.get(after) {\n+                    edges.get_mut(idx).unwrap()\n+                         .extend(idxs.iter().cloned());\n+                }\n+            }\n+        }\n+    }\n+\n+    fn topo_sort(&self,\n+                 cur: usize,\n+                 nodes: &HashMap<usize, &Step<'a>>,\n+                 edges: &HashMap<usize, HashSet<usize>>,\n+                 visited: &mut HashSet<usize>,\n+                 order: &mut Vec<Step<'a>>) {\n+        if !visited.insert(cur) {\n+            return\n+        }\n+        for dep in edges[&cur].iter() {\n+            self.topo_sort(*dep, nodes, edges, visited, order);\n+        }\n+        order.push(nodes[&cur].clone());\n     }\n }\n \n@@ -1213,31 +1373,31 @@ mod tests {\n             name: \"std\".to_string(),\n             deps: Vec::new(),\n             path: cwd.join(\"src/std\"),\n-            doc_step: \"doc-std\".to_string(),\n+            doc_step: \"doc-crate-std\".to_string(),\n             build_step: \"build-crate-std\".to_string(),\n-            test_step: \"test-std\".to_string(),\n-            bench_step: \"bench-std\".to_string(),\n+            test_step: \"test-crate-std\".to_string(),\n+            bench_step: \"bench-crate-std\".to_string(),\n             version: String::new(),\n         });\n         build.crates.insert(\"test\".to_string(), ::Crate {\n             name: \"test\".to_string(),\n             deps: Vec::new(),\n             path: cwd.join(\"src/test\"),\n-            doc_step: \"doc-test\".to_string(),\n+            doc_step: \"doc-crate-test\".to_string(),\n             build_step: \"build-crate-test\".to_string(),\n-            test_step: \"test-test\".to_string(),\n-            bench_step: \"bench-test\".to_string(),\n+            test_step: \"test-crate-test\".to_string(),\n+            bench_step: \"bench-crate-test\".to_string(),\n             version: String::new(),\n         });\n         build.crates.insert(\"rustc-main\".to_string(), ::Crate {\n             name: \"rustc-main\".to_string(),\n             deps: Vec::new(),\n             version: String::new(),\n             path: cwd.join(\"src/rustc-main\"),\n-            doc_step: \"doc-rustc-main\".to_string(),\n+            doc_step: \"doc-crate-rustc-main\".to_string(),\n             build_step: \"build-crate-rustc-main\".to_string(),\n-            test_step: \"test-rustc-main\".to_string(),\n-            bench_step: \"bench-rustc-main\".to_string(),\n+            test_step: \"test-crate-rustc-main\".to_string(),\n+            bench_step: \"bench-crate-rustc-main\".to_string(),\n         });\n         return build\n     }"}, {"sha": "e01c06b10fcd63097de8a14f8b5e2b0f525bccb3", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -139,6 +139,8 @@ pub fn dylib_path_var() -> &'static str {\n         \"PATH\"\n     } else if cfg!(target_os = \"macos\") {\n         \"DYLD_LIBRARY_PATH\"\n+    } else if cfg!(target_os = \"haiku\") {\n+        \"LIBRARY_PATH\"\n     } else {\n         \"LD_LIBRARY_PATH\"\n     }"}, {"sha": "da00b970da977e950bacdf275403c0a57e0e6ad7", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -198,7 +198,11 @@ pub fn native_lib_boilerplate(src_name: &str,\n     let out_dir = env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or(env::var_os(\"OUT_DIR\").unwrap());\n     let out_dir = PathBuf::from(out_dir).join(out_name);\n     t!(create_dir_racy(&out_dir));\n-    println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    if link_name.contains('=') {\n+        println!(\"cargo:rustc-link-lib={}\", link_name);\n+    } else {\n+        println!(\"cargo:rustc-link-lib=static={}\", link_name);\n+    }\n     println!(\"cargo:rustc-link-search=native={}\", out_dir.join(search_subdir).display());\n \n     let timestamp = out_dir.join(\"rustbuild.timestamp\");\n@@ -209,6 +213,21 @@ pub fn native_lib_boilerplate(src_name: &str,\n     }\n }\n \n+pub fn sanitizer_lib_boilerplate(sanitizer_name: &str) -> Result<NativeLibBoilerplate, ()> {\n+    let (link_name, search_path) = match &*env::var(\"TARGET\").unwrap() {\n+        \"x86_64-unknown-linux-gnu\" => (\n+            format!(\"clang_rt.{}-x86_64\", sanitizer_name),\n+            \"build/lib/linux\",\n+        ),\n+        \"x86_64-apple-darwin\" => (\n+            format!(\"dylib=clang_rt.{}_osx_dynamic\", sanitizer_name),\n+            \"build/lib/darwin\",\n+        ),\n+        _ => return Err(()),\n+    };\n+    native_lib_boilerplate(\"compiler-rt\", sanitizer_name, &link_name, search_path)\n+}\n+\n fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());"}, {"sha": "627b5062df3334701e4a64c0995bb42ada55c2e0", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -16,6 +16,12 @@ for example:\n \n Images will output artifacts in an `obj` dir at the root of a repository.\n \n+## Filesystem layout\n+\n+- Each directory, excluding `scripts` and `disabled`, corresponds to a docker image\n+- `scripts` contains files shared by docker images\n+- `disabled` contains images that are not build travis\n+\n ## Cross toolchains\n \n A number of these images take quite a long time to compile as they're building\n@@ -152,18 +158,13 @@ For targets: `powerpc-unknown-linux-gnu`\n - Path and misc options > Patches origin = Bundled, then local\n - Path and misc options > Local patch directory = /tmp/patches\n - Target options > Target Architecture = powerpc\n-- Target options > Emit assembly for CPU = power4 -- (+)\n-- Target options > Tune for CPU = power6 -- (+)\n+- Target options > Emit assembly for CPU = powerpc -- pure 32-bit PowerPC\n - Operating System > Target OS = linux\n - Operating System > Linux kernel version = 2.6.32.68 -- ~RHEL6 kernel\n - C-library > glibc version = 2.12.2 -- ~RHEL6 glibc\n - C compiler > gcc version = 4.9.3\n-- C compiler > Core gcc extra config = --with-cpu-32=power4 --with-cpu=default32 -- (+)\n-- C compiler > gcc extra config = --with-cpu-32=power4 --with-cpu=default32 -- (+)\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-(+) These CPU options match the configuration of the toolchains in RHEL6.\n-\n ## `powerpc64-linux-gnu.config`\n \n For targets: `powerpc64-unknown-linux-gnu`"}, {"sha": "2a928c5ec7e894b4a1f331e879be3db19e15441d", "filename": "src/ci/docker/arm-android/Dockerfile", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -1,46 +1,60 @@\n FROM ubuntu:16.04\n \n-RUN dpkg --add-architecture i386 && \\\n-    apt-get update && \\\n+RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n-  expect \\\n-  openjdk-9-jre \\\n   sudo \\\n-  libstdc++6:i386 \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n+  unzip \\\n+  xz-utils\n \n-WORKDIR /android/\n-ENV PATH=$PATH:/android/ndk-arm-9/bin:/android/sdk/tools:/android/sdk/platform-tools\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n \n-COPY install-ndk.sh install-sdk.sh accept-licenses.sh /android/\n-RUN sh /android/install-ndk.sh\n-RUN sh /android/install-sdk.sh\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm 9\n \n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n+# sdk\n+RUN dpkg --add-architecture i386 && \\\n+    apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  libgl1-mesa-glx \\\n+  libpulse0 \\\n+  libstdc++6:i386 \\\n+  openjdk-9-jre-headless \\\n+  tzdata\n \n-COPY start-emulator.sh /android/\n+COPY scripts/android-sdk.sh /scripts/\n+RUN . /scripts/android-sdk.sh && \\\n+    download_and_create_avd tools_r25.2.5-linux.zip armeabi-v7a 18\n \n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"/android/start-emulator.sh\"]\n+# env\n+ENV PATH=$PATH:/android/sdk/tools\n+ENV PATH=$PATH:/android/sdk/platform-tools\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-24-sccache-x86_64-unknown-linux-gnu && \\\n-      chmod +x /usr/local/bin/sccache\n+ENV TARGETS=arm-linux-androideabi\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --target=arm-linux-androideabi \\\n-      --arm-linux-androideabi-ndk=/android/ndk-arm-9\n+      --target=$TARGETS \\\n+      --arm-linux-androideabi-ndk=/android/ndk/arm-9\n+\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n \n-ENV SCRIPT python2.7 ../x.py test --target arm-linux-androideabi\n+# init\n+COPY scripts/android-start-emulator.sh /scripts/\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\", \"/scripts/android-start-emulator.sh\"]"}, {"sha": "8d8f60a5ec2604606571cdb6a7d231d5754aa38f", "filename": "src/ci/docker/arm-android/accept-licenses.sh", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Farm-android%2Faccept-licenses.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Farm-android%2Faccept-licenses.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Faccept-licenses.sh?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,15 +0,0 @@\n-#!/usr/bin/expect -f\n-# ignore-license\n-\n-set timeout 1800\n-set cmd [lindex $argv 0]\n-set licenses [lindex $argv 1]\n-\n-spawn {*}$cmd\n-expect {\n-  \"Do you accept the license '*'*\" {\n-        exp_send \"y\\r\"\n-        exp_continue\n-  }\n-  eof\n-}"}, {"sha": "389ec062110e0e5681ef0d8385582e508afca44c", "filename": "src/ci/docker/arm-android/install-ndk.sh", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Farm-android%2Finstall-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Farm-android%2Finstall-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Finstall-ndk.sh?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,33 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-cpgdb() {\n-  cp android-ndk-r11c/prebuilt/linux-x86_64/bin/gdb /android/$1/bin/$2-gdb\n-  cp android-ndk-r11c/prebuilt/linux-x86_64/bin/gdb-orig /android/$1/bin/gdb-orig\n-  cp -r android-ndk-r11c/prebuilt/linux-x86_64/share /android/$1/share\n-}\n-\n-# Prep the Android NDK\n-#\n-# See https://github.com/servo/servo/wiki/Building-for-Android\n-curl -O https://dl.google.com/android/repository/android-ndk-r11c-linux-x86_64.zip\n-unzip -q android-ndk-r11c-linux-x86_64.zip\n-bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n-        --platform=android-9 \\\n-        --toolchain=arm-linux-androideabi-4.9 \\\n-        --install-dir=/android/ndk-arm-9 \\\n-        --ndk-dir=/android/android-ndk-r11c \\\n-        --arch=arm\n-cpgdb ndk-arm-9 arm-linux-androideabi\n-\n-rm -rf ./android-ndk-r11c-linux-x86_64.zip ./android-ndk-r11c"}, {"sha": "2db1d46ba2273e89cfdb655ba59ef427ba0974ba", "filename": "src/ci/docker/arm-android/install-sdk.sh", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Farm-android%2Finstall-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Farm-android%2Finstall-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Finstall-sdk.sh?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,33 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-# Prep the SDK and emulator\n-#\n-# Note that the update process requires that we accept a bunch of licenses, and\n-# we can't just pipe `yes` into it for some reason, so we take the same strategy\n-# located in https://github.com/appunite/docker by just wrapping it in a script\n-# which apparently magically accepts the licenses.\n-\n-mkdir sdk\n-curl https://dl.google.com/android/android-sdk_r24.4-linux.tgz | \\\n-    tar xzf - -C sdk --strip-components=1\n-\n-filter=\"platform-tools,android-18\"\n-filter=\"$filter,sys-img-armeabi-v7a-android-18\"\n-\n-./accept-licenses.sh \"android - update sdk -a --no-ui --filter $filter\"\n-\n-echo \"no\" | android create avd \\\n-                --name arm-18 \\\n-                --target android-18 \\\n-                --abi armeabi-v7a"}, {"sha": "03e0b78ba89b3d83a8c3e2b6444aa0c7fe54b25d", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -31,7 +31,7 @@ WORKDIR /build\n # The `vexpress_config` config file was a previously generated config file for\n # the kernel. This file was generated by running `make vexpress_defconfig`\n # followed by `make menuconfig` and then enabling the IPv6 protocol page.\n-COPY vexpress_config /build/.config\n+COPY armhf-gnu/vexpress_config /build/.config\n RUN curl https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.42.tar.xz | \\\n       tar xJf - && \\\n       cd /build/linux-4.4.42 && \\\n@@ -63,18 +63,18 @@ RUN curl http://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-bas\n \n # Copy over our init script, which starts up our test server and also a few\n # other misc tasks.\n-COPY rcS rootfs/etc/init.d/rcS\n+COPY armhf-gnu/rcS rootfs/etc/init.d/rcS\n RUN chmod +x rootfs/etc/init.d/rcS\n \n # Helper to quickly fill the entropy pool in the kernel.\n-COPY addentropy.c /tmp/\n+COPY armhf-gnu/addentropy.c /tmp/\n RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n \n # TODO: What is this?!\n RUN curl -O http://ftp.nl.debian.org/debian/dists/jessie/main/installer-armhf/current/images/device-tree/vexpress-v2p-ca15-tc1.dtb\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "7759d91e1bb635c41ba6b89a426616ebda65a293", "filename": "src/ci/docker/cross/Dockerfile", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -22,7 +22,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -32,10 +32,10 @@ ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n WORKDIR /tmp\n \n-COPY build-rumprun.sh /tmp/\n+COPY cross/build-rumprun.sh /tmp/\n RUN ./build-rumprun.sh\n \n-COPY build-arm-musl.sh /tmp/\n+COPY cross/build-arm-musl.sh /tmp/\n RUN ./build-arm-musl.sh\n \n # originally from\n@@ -74,6 +74,7 @@ ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n ENV STAGING_DIR=/tmp\n \n ENV RUST_CONFIGURE_ARGS \\\n+      --enable-extended \\\n       --target=$TARGETS \\\n       --musl-root-arm=/usr/local/arm-linux-musleabi \\\n       --musl-root-armhf=/usr/local/arm-linux-musleabihf \\"}, {"sha": "918d2911ae28f5a5ba301294068740568e8a29e4", "filename": "src/ci/docker/disabled/dist-aarch64-android/Dockerfile", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,50 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  g++ \\\n+  git \\\n+  libssl-dev \\\n+  make \\\n+  pkg-config \\\n+  python2.7 \\\n+  sudo \\\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip arm64 21\n+\n+# env\n+ENV PATH=$PATH:/android/ndk/arm64-21/bin\n+\n+ENV DEP_Z_ROOT=/android/ndk/arm64-21/sysroot/usr/\n+\n+ENV HOSTS=aarch64-linux-android\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --target=$HOSTS \\\n+      --aarch64-linux-android-ndk=/android/ndk/arm64-21 \\\n+      --disable-rpath \\\n+      --enable-extended \\\n+      --enable-cargo-openssl-static\n+\n+ENV SCRIPT python2.7 ../x.py dist --target $HOSTS --host $HOSTS\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "aed82e6c13872d6a276aeddd974cb6e81654b769", "filename": "src/ci/docker/disabled/dist-armv7-android/Dockerfile", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,68 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  g++ \\\n+  git \\\n+  libssl-dev \\\n+  make \\\n+  pkg-config \\\n+  python2.7 \\\n+  sudo \\\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n+    make_standalone_toolchain arm 9 && \\\n+    make_standalone_toolchain arm 21 && \\\n+    remove_ndk\n+\n+RUN chmod 777 /android/ndk && \\\n+    ln -s /android/ndk/arm-21 /android/ndk/arm\n+\n+# env\n+ENV PATH=$PATH:/android/ndk/arm-9/bin\n+\n+ENV DEP_Z_ROOT=/android/ndk/arm-9/sysroot/usr/\n+\n+ENV HOSTS=armv7-linux-androideabi\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --target=$HOSTS \\\n+      --armv7-linux-androideabi-ndk=/android/ndk/arm \\\n+      --disable-rpath \\\n+      --enable-extended \\\n+      --enable-cargo-openssl-static\n+\n+# We support api level 9, but api level 21 is required to build llvm. To\n+# overcome this problem we use a ndk with api level 21 to build llvm and then\n+# switch to a ndk with api level 9 to complete the build. When the linker is\n+# invoked there are missing symbols (like sigsetempty, not available with api\n+# level 9), the default linker behavior is to generate an error, to allow the\n+# build to finish we use --warn-unresolved-symbols. Note that the missing\n+# symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n+ENV SCRIPT \\\n+  python2.7 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n+  (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n+    rm /android/ndk/arm && \\\n+    ln -s /android/ndk/arm-9 /android/ndk/arm && \\\n+    python2.7 ../x.py dist --host $HOSTS --target $HOSTS)\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "f012e869e7885fb4963e33f09bd616b9f64c7383", "filename": "src/ci/docker/disabled/dist-i686-android/Dockerfile", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,68 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  g++ \\\n+  git \\\n+  libssl-dev \\\n+  make \\\n+  pkg-config \\\n+  python2.7 \\\n+  sudo \\\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n+    make_standalone_toolchain x86 9 && \\\n+    make_standalone_toolchain x86 21 && \\\n+    remove_ndk\n+\n+RUN chmod 777 /android/ndk && \\\n+    ln -s /android/ndk/x86-21 /android/ndk/x86\n+\n+# env\n+ENV PATH=$PATH:/android/ndk/x86-9/bin\n+\n+ENV DEP_Z_ROOT=/android/ndk/x86-9/sysroot/usr/\n+\n+ENV HOSTS=i686-linux-android\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --target=$HOSTS \\\n+      --i686-linux-android-ndk=/android/ndk/x86 \\\n+      --disable-rpath \\\n+      --enable-extended \\\n+      --enable-cargo-openssl-static\n+\n+# We support api level 9, but api level 21 is required to build llvm. To\n+# overcome this problem we use a ndk with api level 21 to build llvm and then\n+# switch to a ndk with api level 9 to complete the build. When the linker is\n+# invoked there are missing symbols (like sigsetempty, not available with api\n+# level 9), the default linker behavior is to generate an error, to allow the\n+# build to finish we use --warn-unresolved-symbols. Note that the missing\n+# symbols does not affect std, only the compiler (llvm) and cargo (openssl).\n+ENV SCRIPT \\\n+  python2.7 ../x.py build src/llvm --host $HOSTS --target $HOSTS && \\\n+  (export RUSTFLAGS=\"\\\"-C link-arg=-Wl,--warn-unresolved-symbols\\\"\"; \\\n+    rm /android/ndk/x86 && \\\n+    ln -s /android/ndk/x86-9 /android/ndk/x86 && \\\n+    python2.7 ../x.py dist --host $HOSTS --target $HOSTS)\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "0c586452840f97afa0e098c8d3c85516bc9d5953", "filename": "src/ci/docker/disabled/dist-x86_64-android/Dockerfile", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,50 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && \\\n+    apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  g++ \\\n+  git \\\n+  libssl-dev \\\n+  make \\\n+  pkg-config \\\n+  python2.7 \\\n+  sudo \\\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_and_make_toolchain android-ndk-r13b-linux-x86_64.zip x86_64 21\n+\n+# env\n+ENV PATH=$PATH:/android/ndk/x86_64-21/bin\n+\n+ENV DEP_Z_ROOT=/android/ndk/x86_64-21/sysroot/usr/\n+\n+ENV HOSTS=x86_64-linux-android\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --target=$HOSTS \\\n+      --x86_64-linux-android-ndk=/android/ndk/x86_64-21 \\\n+      --disable-rpath \\\n+      --enable-extended \\\n+      --enable-cargo-openssl-static\n+\n+ENV SCRIPT python2.7 ../x.py dist --target $HOSTS --host $HOSTS\n+\n+# sccache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "0134a5407932ad08906e86e786fcaa5da3a05700", "filename": "src/ci/docker/dist-aarch64-linux/Dockerfile", "status": "renamed", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -27,10 +27,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n     rm dumb-init_*.deb\n@@ -60,24 +56,22 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY armv7-linux-gnueabihf.config /tmp/\n-COPY armv7-linux-gnueabihf.config aarch64-linux-gnu.config build-toolchains.sh /tmp/\n+COPY dist-aarch64-linux/aarch64-linux-gnu.config dist-aarch64-linux/build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root\n \n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n ENV PATH=$PATH:/x-tools/aarch64-unknown-linux-gnueabi/bin\n-ENV PATH=$PATH:/x-tools/armv7-unknown-linux-gnueabihf/bin\n \n ENV CC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-gcc \\\n     AR_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-ar \\\n-    CXX_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-g++ \\\n-    CC_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-gcc \\\n-    AR_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-ar \\\n-    CXX_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-g++\n+    CXX_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-g++\n \n-ENV HOSTS=armv7-unknown-linux-gnueabihf\n-ENV HOSTS=$HOSTS,aarch64-unknown-linux-gnu\n+ENV HOSTS=aarch64-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS", "previous_filename": "src/ci/docker/dist-armv7-aarch64-linux/Dockerfile"}, {"sha": "3d30ee49022d8f9318abc0fa52d71cd8310799d1", "filename": "src/ci/docker/dist-aarch64-linux/aarch64-linux-gnu.config", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Faarch64-linux-gnu.config?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-armv7-aarch64-linux/aarch64-linux-gnu.config"}, {"sha": "94f785c96f815ac8d7a72103696a6ae821dd508a", "filename": "src/ci/docker/dist-aarch64-linux/build-toolchains.sh", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2Fbuild-toolchains.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,37 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  rm /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+mkdir build\n+cd build\n+cp ../aarch64-linux-gnu.config .config\n+ct-ng oldconfig\n+hide_output ct-ng build\n+cd ..\n+rm -rf build"}, {"sha": "31389dd148a8ae0cd23dc3f95f775226d4a5038f", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -1,50 +1,56 @@\n FROM ubuntu:16.04\n \n-RUN dpkg --add-architecture i386 && \\\n-    apt-get update && \\\n+RUN apt-get update && \\\n     apt-get install -y --no-install-recommends \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n   g++ \\\n+  git \\\n+  libssl-dev \\\n   make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n+  pkg-config \\\n   python2.7 \\\n-  git \\\n-  cmake \\\n-  unzip \\\n-  expect \\\n-  openjdk-9-jre \\\n   sudo \\\n-  libstdc++6:i386 \\\n-  xz-utils \\\n-  libssl-dev \\\n-  pkg-config\n-\n-WORKDIR /android/\n-ENV PATH=$PATH:/android/ndk-arm-9/bin:/android/sdk/tools:/android/sdk/platform-tools\n-\n-COPY install-ndk.sh /android/\n-RUN sh /android/install-ndk.sh\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n+  unzip \\\n+  xz-utils\n+\n+# dumb-init\n+COPY scripts/dumb-init.sh /scripts/\n+RUN sh /scripts/dumb-init.sh\n+\n+# ndk\n+COPY scripts/android-ndk.sh /scripts/\n+RUN . /scripts/android-ndk.sh && \\\n+    download_ndk android-ndk-r13b-linux-x86_64.zip && \\\n+    make_standalone_toolchain arm 9 && \\\n+    make_standalone_toolchain x86 9 && \\\n+    make_standalone_toolchain arm64 21 && \\\n+    make_standalone_toolchain x86_64 21 && \\\n+    remove_ndk\n+\n+# env\n ENV TARGETS=arm-linux-androideabi\n+ENV TARGETS=$TARGETS,armv7-linux-androideabi\n ENV TARGETS=$TARGETS,i686-linux-android\n ENV TARGETS=$TARGETS,aarch64-linux-android\n-ENV TARGETS=$TARGETS,armv7-linux-androideabi\n+ENV TARGETS=$TARGETS,x86_64-linux-android\n \n ENV RUST_CONFIGURE_ARGS \\\n       --target=$TARGETS \\\n-      --arm-linux-androideabi-ndk=/android/ndk-arm-9 \\\n-      --armv7-linux-androideabi-ndk=/android/ndk-arm-9 \\\n-      --i686-linux-android-ndk=/android/ndk-x86-9 \\\n-      --aarch64-linux-android-ndk=/android/ndk-aarch64\n+      --enable-extended \\\n+      --arm-linux-androideabi-ndk=/android/ndk/arm-9 \\\n+      --armv7-linux-androideabi-ndk=/android/ndk/arm-9 \\\n+      --i686-linux-android-ndk=/android/ndk/x86-9 \\\n+      --aarch64-linux-android-ndk=/android/ndk/arm64-21 \\\n+      --x86_64-linux-android-ndk=/android/ndk/x86_64-21\n \n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS\n+\n+# cache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# init\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "19c1b94e784c826a00f57ffe74c6b117645076c5", "filename": "src/ci/docker/dist-android/install-ndk.sh", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2Finstall-ndk.sh?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,38 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-# Prep the Android NDK\n-#\n-# See https://github.com/servo/servo/wiki/Building-for-Android\n-curl -O https://dl.google.com/android/repository/android-ndk-r11c-linux-x86_64.zip\n-unzip -q android-ndk-r11c-linux-x86_64.zip\n-bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n-        --platform=android-9 \\\n-        --toolchain=arm-linux-androideabi-4.9 \\\n-        --install-dir=/android/ndk-arm-9 \\\n-        --ndk-dir=/android/android-ndk-r11c \\\n-        --arch=arm\n-bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n-        --platform=android-21 \\\n-        --toolchain=aarch64-linux-android-4.9 \\\n-        --install-dir=/android/ndk-aarch64 \\\n-        --ndk-dir=/android/android-ndk-r11c \\\n-        --arch=arm64\n-bash android-ndk-r11c/build/tools/make-standalone-toolchain.sh \\\n-        --platform=android-9 \\\n-        --toolchain=x86-4.9 \\\n-        --install-dir=/android/ndk-x86-9 \\\n-        --ndk-dir=/android/android-ndk-r11c \\\n-        --arch=x86\n-\n-rm -rf ./android-ndk-r11c-linux-x86_64.zip ./android-ndk-r11c"}, {"sha": "862818a7c918250b43f6d7ac20287cd829520a3e", "filename": "src/ci/docker/dist-arm-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -27,10 +27,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n     rm dumb-init_*.deb\n@@ -60,23 +56,22 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY arm-linux-gnueabihf.config arm-linux-gnueabi.config build-toolchains.sh /tmp/\n+COPY dist-arm-linux/arm-linux-gnueabi.config dist-arm-linux/build-toolchains.sh /tmp/\n RUN ./build-toolchains.sh\n \n USER root\n \n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabi/bin\n-ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabihf/bin\n \n ENV CC_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-gcc \\\n     AR_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-ar \\\n-    CXX_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-g++ \\\n-    CC_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-gcc \\\n-    AR_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-ar \\\n-    CXX_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-g++\n+    CXX_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-g++\n \n ENV HOSTS=arm-unknown-linux-gnueabi\n-ENV HOSTS=$HOSTS,arm-unknown-linux-gnueabihf\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "f78ecf9381a1fce61dc582d29bc1c802ca52fe36", "filename": "src/ci/docker/dist-arm-linux/build-toolchains.sh", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-arm-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-arm-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2Fbuild-toolchains.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -35,11 +35,3 @@ ct-ng oldconfig\n hide_output ct-ng build\n cd ..\n rm -rf build\n-\n-mkdir build\n-cd build\n-cp ../arm-linux-gnueabihf.config .config\n-ct-ng oldconfig\n-hide_output ct-ng build\n-cd ..\n-rm -rf build"}, {"sha": "7f1f91f844c771ba31c15fa22029ab6a5ddfecdf", "filename": "src/ci/docker/dist-armhf-linux/Dockerfile", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,77 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n+  g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n+  make \\\n+  patch \\\n+  python2.7 \\\n+  sudo \\\n+  texinfo \\\n+  wget \\\n+  xz-utils \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+COPY dist-armhf-linux/arm-linux-gnueabihf.config dist-armhf-linux/build-toolchains.sh /tmp/\n+RUN ./build-toolchains.sh\n+\n+USER root\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV PATH=$PATH:/x-tools/arm-unknown-linux-gnueabihf/bin\n+\n+ENV CC_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-gcc \\\n+    AR_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-ar \\\n+    CXX_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-g++\n+\n+ENV HOSTS=arm-unknown-linux-gnueabihf\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "1feeef15557498d7d0be00e216370aa2416b2a2b", "filename": "src/ci/docker/dist-armhf-linux/arm-linux-gnueabihf.config", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Farm-linux-gnueabihf.config", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Farm-linux-gnueabihf.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Farm-linux-gnueabihf.config?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-arm-linux/arm-linux-gnueabihf.config"}, {"sha": "df1134d5483c2ff3d4953e5dba14e1552250fc5d", "filename": "src/ci/docker/dist-armhf-linux/build-toolchains.sh", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2Fbuild-toolchains.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,37 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  rm /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+mkdir build\n+cd build\n+cp ../arm-linux-gnueabihf.config .config\n+ct-ng oldconfig\n+hide_output ct-ng build\n+cd ..\n+rm -rf build"}, {"sha": "030fd24ebcdd0c1daa5d69b724175d65c21c4933", "filename": "src/ci/docker/dist-armv7-linux/Dockerfile", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,77 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n+  g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n+  make \\\n+  patch \\\n+  python2.7 \\\n+  sudo \\\n+  texinfo \\\n+  wget \\\n+  xz-utils \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+COPY dist-armv7-linux/build-toolchains.sh dist-armv7-linux/armv7-linux-gnueabihf.config /tmp/\n+RUN ./build-toolchains.sh\n+\n+USER root\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV PATH=$PATH:/x-tools/armv7-unknown-linux-gnueabihf/bin\n+\n+ENV CC_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-gcc \\\n+    AR_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-ar \\\n+    CXX_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-g++\n+\n+ENV HOSTS=armv7-unknown-linux-gnueabihf\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "79d6c77c41152115f176d175483453b85983c408", "filename": "src/ci/docker/dist-armv7-linux/armv7-linux-gnueabihf.config", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.config", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Farmv7-linux-gnueabihf.config?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-armv7-aarch64-linux/armv7-linux-gnueabihf.config"}, {"sha": "2d395fee792ec1d96437277424f538b4da47a9be", "filename": "src/ci/docker/dist-armv7-linux/build-toolchains.sh", "status": "renamed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Fbuild-toolchains.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Fbuild-toolchains.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2Fbuild-toolchains.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -35,11 +35,3 @@ ct-ng oldconfig\n hide_output ct-ng build\n cd ..\n rm -rf build\n-\n-mkdir build\n-cd build\n-cp ../aarch64-linux-gnu.config .config\n-ct-ng oldconfig\n-hide_output ct-ng build\n-cd ..\n-rm -rf build", "previous_filename": "src/ci/docker/dist-armv7-aarch64-linux/build-toolchains.sh"}, {"sha": "d1d9767d35e631c9c70f572b55a2ebc07f90a4ba", "filename": "src/ci/docker/dist-fuchsia/Dockerfile", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -14,13 +14,14 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils \\\n   swig \\\n   libedit-dev \\\n-  libncurses5-dev\n+  libncurses5-dev \\\n+  patch\n \n RUN curl -L https://cmake.org/files/v3.8/cmake-3.8.0-rc1-Linux-x86_64.tar.gz | \\\n       tar xzf - -C /usr/local --strip-components=1\n \n WORKDIR /tmp\n-COPY shared.sh build-toolchain.sh /tmp/\n+COPY dist-fuchsia/shared.sh dist-fuchsia/build-toolchain.sh dist-fuchsia/compiler-rt-dso-handle.patch /tmp/\n RUN /tmp/build-toolchain.sh\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -29,7 +30,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\\n@@ -43,5 +44,5 @@ ENV \\\n ENV TARGETS=x86_64-unknown-fuchsia\n ENV TARGETS=$TARGETS,aarch64-unknown-fuchsia\n \n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n+ENV RUST_CONFIGURE_ARGS --target=$TARGETS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "10b285a546655a8ba9c99b154d95f5e17c11f838", "filename": "src/ci/docker/dist-fuchsia/build-toolchain.sh", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -9,33 +9,43 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+# ignore-tidy-linelength\n+\n set -ex\n source shared.sh\n \n # Download sources\n SRCS=(\n-  \"https://fuchsia.googlesource.com/magenta magenta ac69119\"\n-  \"https://fuchsia.googlesource.com/third_party/llvm llvm 5463083\"\n-  \"https://fuchsia.googlesource.com/third_party/clang llvm/tools/clang 4ff7b4b\"\n-  \"https://fuchsia.googlesource.com/third_party/lld llvm/tools/lld fd465a3\"\n-  \"https://fuchsia.googlesource.com/third_party/lldb llvm/tools/lldb 6bb11f8\"\n-  \"https://fuchsia.googlesource.com/third_party/compiler-rt llvm/runtimes/compiler-rt 52d4ecc\"\n-  \"https://fuchsia.googlesource.com/third_party/libcxx llvm/runtimes/libcxx e891cc8\"\n-  \"https://fuchsia.googlesource.com/third_party/libcxxabi llvm/runtimes/libcxxabi f0f0257\"\n-  \"https://fuchsia.googlesource.com/third_party/libunwind llvm/runtimes/libunwind 50bddc1\"\n+  \"https://fuchsia.googlesource.com/magenta magenta d17073dc8de344ead3b65e8cc6a12280dec38c84\"\n+  \"https://llvm.googlesource.com/llvm llvm 3f58a16d8eec385e2b3ebdfbb84ff9d3bf27e025\"\n+  \"https://llvm.googlesource.com/clang llvm/tools/clang 727ea63e6e82677f6e10e05e08bc7d6bdbae3111\"\n+  \"https://llvm.googlesource.com/lld llvm/tools/lld a31286c1366e5e89b8872803fded13805a1a084b\"\n+  \"https://llvm.googlesource.com/lldb llvm/tools/lldb 0b2384abec4cb99ad66687712e07dee4dd9d187e\"\n+  \"https://llvm.googlesource.com/compiler-rt llvm/runtimes/compiler-rt 9093a35c599fe41278606a20b51095ea8bd5a081\"\n+  \"https://llvm.googlesource.com/libcxx llvm/runtimes/libcxx 607e0c71ec4f7fd377ad3f6c47b08dbe89f66eaa\"\n+  \"https://llvm.googlesource.com/libcxxabi llvm/runtimes/libcxxabi 0a3a1a8a5ca5ef69e0f6b7d5b9d13e63e6fd2c19\"\n+  \"https://llvm.googlesource.com/libunwind llvm/runtimes/libunwind e128003563d99d9ee62247c4cee40f07d21c03e3\"\n )\n \n fetch() {\n   mkdir -p $2\n   pushd $2 > /dev/null\n-  curl -sL $1/+archive/$3.tar.gz | tar xzf -\n+  git init\n+  git remote add origin $1\n+  git fetch --depth=1 origin $3\n+  git reset --hard FETCH_HEAD\n   popd > /dev/null\n }\n \n for i in \"${SRCS[@]}\"; do\n   fetch $i\n done\n \n+# Remove this once https://reviews.llvm.org/D28791 is resolved\n+cd llvm/runtimes/compiler-rt\n+patch -Np1 < /tmp/compiler-rt-dso-handle.patch\n+cd ../../..\n+\n # Build toolchain\n cd llvm\n mkdir build"}, {"sha": "0b702894bb216481125219d51de73ce4fb69cf4d", "filename": "src/ci/docker/dist-fuchsia/compiler-rt-dso-handle.patch", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fcompiler-rt-dso-handle.patch", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fcompiler-rt-dso-handle.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fcompiler-rt-dso-handle.patch?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,41 @@\n+diff --git a/lib/builtins/CMakeLists.txt b/lib/builtins/CMakeLists.txt\n+index fc4384af2..b442264c0 100644\n+--- a/lib/builtins/CMakeLists.txt\n++++ b/lib/builtins/CMakeLists.txt\n+@@ -194,6 +194,12 @@ if(APPLE)\n+     atomic_thread_fence.c)\n+ endif()\n+ \n++if(FUCHSIA)\n++  set(GENERIC_SOURCES\n++    ${GENERIC_SOURCES}\n++    dso_handle.c)\n++endif()\n++\n+ if(NOT WIN32 OR MINGW)\n+   set(GENERIC_SOURCES\n+       ${GENERIC_SOURCES}\n+diff --git a/lib/builtins/dso_handle.c b/lib/builtins/dso_handle.c\n+new file mode 100644\n+index 000000000..7766cd0aa\n+--- /dev/null\n++++ b/lib/builtins/dso_handle.c\n+@@ -0,0 +1,18 @@\n++/* ===-- dso_handle.c - Provide __dso_handle -------------------------------===\n++ *\n++ *               The LLVM Compiler Infrastructure\n++ *\n++ * This file is dual licensed under the MIT and the University of Illinois Open\n++ * Source Licenses. See LICENSE.TXT for details.\n++ *\n++ * ===----------------------------------------------------------------------===\n++ */\n++\n++/* __dso_handle symbol is mandated by C++ ABI with a value which is an address\n++ * in one of the object's segments, and as such this symbol has to be included\n++ * statically and cannot be a part of a shared library. Traditionally, it has\n++ * been defined in crtbegin.o but there's no principled reason for it to be\n++ * there. We defined this symbol in the builtin library which is built as a\n++ * static library and always included in the final link.\n++ */\n++__attribute__((visibility(\"hidden\"))) void *const __dso_handle;"}, {"sha": "805d238de1f9b5c78dcc4a9d7d281e07c38ca717", "filename": "src/ci/docker/dist-i586-gnu-i686-musl/Dockerfile", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n WORKDIR /build/\n-COPY musl-libunwind-patch.patch build-musl.sh /build/\n+COPY dist-i586-gnu-i686-musl/musl-libunwind-patch.patch dist-i586-gnu-i686-musl/build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -26,12 +26,13 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\\n       --target=i686-unknown-linux-musl,i586-unknown-linux-gnu \\\n-      --musl-root-i686=/musl-i686\n+      --musl-root-i686=/musl-i686 \\\n+      --enable-extended\n \n # Newer binutils broke things on some vms/distros (i.e., linking against\n # unknown relocs disabled by the following flag), so we need to go out of our"}, {"sha": "ad285a57a84a3f56891012099ae498dab2503b9b", "filename": "src/ci/docker/dist-i586-gnu-i686-musl/build-musl.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2Fbuild-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2Fbuild-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i686-musl%2Fbuild-musl.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -15,11 +15,14 @@ set -ex\n export CFLAGS=\"-fPIC -Wa,-mrelax-relocations=no\"\n export CXXFLAGS=\"-Wa,-mrelax-relocations=no\"\n \n-MUSL=musl-1.1.14\n+MUSL=musl-1.1.16\n curl https://www.musl-libc.org/releases/$MUSL.tar.gz | tar xzf -\n cd $MUSL\n-CFLAGS=\"$CFLAGS -m32\" ./configure --prefix=/musl-i686 --disable-shared --target=i686\n-make -j10\n+CC=gcc \\\n+  CFLAGS=\"$CFLAGS -m32\" \\\n+  ./configure --prefix=/musl-i686 --disable-shared \\\n+    --target=i686\n+make AR=ar RANLIB=ranlib -j10\n make install\n cd ..\n "}, {"sha": "9c4d43bfa92bc600899cc8acd0881bd343f4b2cb", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "renamed", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -16,8 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-COPY build-toolchain.sh /tmp/\n-RUN /tmp/build-toolchain.sh x86_64\n+COPY dist-i686-freebsd/build-toolchain.sh /tmp/\n RUN /tmp/build-toolchain.sh i686\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -26,19 +25,15 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV \\\n-    AR_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-ar \\\n-    CC_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-gcc \\\n-    CXX_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-g++ \\\n     AR_i686_unknown_freebsd=i686-unknown-freebsd10-ar \\\n     CC_i686_unknown_freebsd=i686-unknown-freebsd10-gcc \\\n     CXX_i686_unknown_freebsd=i686-unknown-freebsd10-g++\n \n-ENV HOSTS=x86_64-unknown-freebsd\n-ENV HOSTS=$HOSTS,i686-unknown-freebsd\n+ENV HOSTS=i686-unknown-freebsd\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS", "previous_filename": "src/ci/docker/dist-freebsd/Dockerfile"}, {"sha": "5642e6fc937f9736e14bc23aed1fca4b045bc88a", "filename": "src/ci/docker/dist-i686-freebsd/build-toolchain.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2Fbuild-toolchain.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-freebsd/build-toolchain.sh"}, {"sha": "a3c08e93ed158ce47175d05deef91f95bd5feaf5", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "renamed", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -2,10 +2,17 @@ FROM centos:5\n \n WORKDIR /build\n \n+# Centos 5 is EOL and is no longer available from the usual mirrors, so switch\n+# to http://vault.centos.org/\n+RUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf\n+RUN sed -i 's/mirrorlist/#mirrorlist/' /etc/yum.repos.d/*.repo\n+RUN sed -i 's|#\\(baseurl.*\\)mirror.centos.org/centos/$releasever|\\1vault.centos.org/5.11|' /etc/yum.repos.d/*.repo\n+\n RUN yum upgrade -y && yum install -y \\\n       curl \\\n       bzip2 \\\n       gcc \\\n+      gcc-c++ \\\n       make \\\n       glibc-devel \\\n       perl \\\n@@ -22,13 +29,13 @@ ENV PATH=/rustroot/bin:$PATH\n ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n ENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\n WORKDIR /tmp\n-COPY shared.sh build-binutils.sh /tmp/\n+COPY dist-i686-linux/shared.sh dist-i686-linux/build-binutils.sh /tmp/\n \n # We need a build of openssl which supports SNI to download artifacts from\n # static.rust-lang.org. This'll be used to link into libcurl below (and used\n # later as well), so build a copy of OpenSSL with dynamic libraries into our\n # generic root.\n-COPY build-openssl.sh /tmp/\n+COPY dist-i686-linux/build-openssl.sh /tmp/\n RUN ./build-openssl.sh\n \n # The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n@@ -37,7 +44,7 @@ RUN ./build-openssl.sh\n #\n # Note that we also disable a bunch of optional features of curl that we don't\n # really need.\n-COPY build-curl.sh /tmp/\n+COPY dist-i686-linux/build-curl.sh /tmp/\n RUN ./build-curl.sh\n \n # binutils < 2.22 has a bug where the 32-bit executables it generates\n@@ -47,26 +54,26 @@ RUN ./build-curl.sh\n RUN ./build-binutils.sh\n \n # Need a newer version of gcc than centos has to compile LLVM nowadays\n-COPY build-gcc.sh /tmp/\n+COPY dist-i686-linux/build-gcc.sh /tmp/\n RUN ./build-gcc.sh\n \n # CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n-COPY build-python.sh /tmp/\n+COPY dist-i686-linux/build-python.sh /tmp/\n RUN ./build-python.sh\n \n # Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n # cloning, so download and build it here.\n-COPY build-git.sh /tmp/\n+COPY dist-i686-linux/build-git.sh /tmp/\n RUN ./build-git.sh\n \n # libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n # only has 2.6.4, so build our own\n-COPY build-cmake.sh /tmp/\n+COPY dist-i686-linux/build-cmake.sh /tmp/\n RUN ./build-cmake.sh\n \n # for sanitizers, we need kernel headers files newer than the ones CentOS ships\n # with so we install newer ones here\n-COPY build-headers.sh /tmp/\n+COPY dist-i686-linux/build-headers.sh /tmp/\n RUN ./build-headers.sh\n \n RUN curl -Lo /rustroot/dumb-init \\\n@@ -75,15 +82,20 @@ RUN curl -Lo /rustroot/dumb-init \\\n ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV HOSTS=i686-unknown-linux-gnu\n-ENV HOSTS=$HOSTS,x86_64-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS \\\n       --host=$HOSTS \\\n       --enable-extended \\\n       --enable-sanitizers\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n+\n+# This is the only builder which will create source tarballs\n ENV DIST_SRC 1\n+\n+# When we build cargo in this container, we don't want it to use the system\n+# libcurl, instead it should compile its own.\n+ENV LIBCURL_NO_PKG_CONFIG 1", "previous_filename": "src/ci/docker/dist-x86-linux/Dockerfile"}, {"sha": "80aa1f2a0161308affc245daaf2952f973643918", "filename": "src/ci/docker/dist-i686-linux/build-binutils.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-binutils.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-binutils.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-binutils.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-x86-linux/build-binutils.sh"}, {"sha": "82e46455cb0f0673fef2fe6442d25aa7c4b8d976", "filename": "src/ci/docker/dist-i686-linux/build-cmake.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-cmake.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-cmake.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-cmake.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-x86-linux/build-cmake.sh"}, {"sha": "b7d22755a571bab38aa4d85629fa69cbec041c24", "filename": "src/ci/docker/dist-i686-linux/build-curl.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-curl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-curl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-curl.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-x86-linux/build-curl.sh"}, {"sha": "ab2562538d6d7376e942a219ce0f00664082be9f", "filename": "src/ci/docker/dist-i686-linux/build-gcc.sh", "status": "renamed", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-gcc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-gcc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-gcc.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -13,12 +13,14 @@ set -ex\n \n source shared.sh\n \n-curl https://ftp.gnu.org/gnu/gcc/gcc-4.7.4/gcc-4.7.4.tar.bz2 | tar xjf -\n-cd gcc-4.7.4\n+GCC=4.8.5\n+\n+curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n+cd gcc-$GCC\n ./contrib/download_prerequisites\n mkdir ../gcc-build\n cd ../gcc-build\n-hide_output ../gcc-4.7.4/configure \\\n+hide_output ../gcc-$GCC/configure \\\n     --prefix=/rustroot \\\n     --enable-languages=c,c++\n hide_output make -j10\n@@ -27,5 +29,5 @@ ln -nsf gcc /rustroot/bin/cc\n \n cd ..\n rm -rf gcc-build\n-rm -rf gcc-4.7.4\n-yum erase -y gcc binutils\n+rm -rf gcc-$GCC\n+yum erase -y gcc gcc-c++ binutils", "previous_filename": "src/ci/docker/dist-x86-linux/build-gcc.sh"}, {"sha": "92fa66b496d933648a0e49c3f83b6565246188a7", "filename": "src/ci/docker/dist-i686-linux/build-git.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-git.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-git.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-git.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-x86-linux/build-git.sh"}, {"sha": "4ce38fd9205e27b4aff8b169f4ead5c31f731993", "filename": "src/ci/docker/dist-i686-linux/build-headers.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-headers.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-headers.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-headers.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-x86-linux/build-headers.sh"}, {"sha": "27cd064f901a036de2ff41b9922806f06d8a3ec6", "filename": "src/ci/docker/dist-i686-linux/build-openssl.sh", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-openssl.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -12,9 +12,10 @@\n set -ex\n source shared.sh\n \n-VERSION=1.0.2j\n+VERSION=1.0.2k\n+URL=https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/openssl-$VERSION.tar.gz\n \n-curl https://www.openssl.org/source/openssl-$VERSION.tar.gz | tar xzf -\n+curl $URL | tar xzf -\n \n cd openssl-$VERSION\n hide_output ./config --prefix=/rustroot shared -fPIC", "previous_filename": "src/ci/docker/dist-x86-linux/build-openssl.sh"}, {"sha": "a7a450f3c8de772403b481b96c94b03d5ec2325e", "filename": "src/ci/docker/dist-i686-linux/build-python.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-python.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-python.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fbuild-python.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-x86-linux/build-python.sh"}, {"sha": "97e6d2908cf8a5ae3174e1bc08a17ea27fa3aae5", "filename": "src/ci/docker/dist-i686-linux/shared.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2Fshared.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-x86-linux/shared.sh"}, {"sha": "c23240f0c70f9a4475c587158781c7bae20819de", "filename": "src/ci/docker/dist-mips-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -13,12 +13,11 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils \\\n   g++-mips-linux-gnu \\\n-  g++-mipsel-linux-gnu \\\n   libssl-dev \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -27,7 +26,6 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n ENV HOSTS=mips-unknown-linux-gnu\n-ENV HOSTS=$HOSTS,mipsel-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "415dca99d95ee1ec427b2fc526f391929309742c", "filename": "src/ci/docker/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -13,12 +13,11 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   gdb \\\n   xz-utils \\\n   g++-mips64-linux-gnuabi64 \\\n-  g++-mips64el-linux-gnuabi64 \\\n   libssl-dev \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -27,7 +26,6 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n ENV HOSTS=mips64-unknown-linux-gnuabi64\n-ENV HOSTS=$HOSTS,mips64el-unknown-linux-gnuabi64\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "2aba5f615baba476103944d4856bf80b6eb699f9", "filename": "src/ci/docker/dist-mips64el-linux/Dockerfile", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,31 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  g++-mips64el-linux-gnuabi64 \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+ENV HOSTS=mips64el-unknown-linux-gnuabi64\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "d15e3010863c464827b9916fbece7ea4d0b134c8", "filename": "src/ci/docker/dist-mipsel-linux/Dockerfile", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,31 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  g++-mipsel-linux-gnu \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+ENV HOSTS=mipsel-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "0074665f34f7ed54f0ddff57da78bfa71dfbf89e", "filename": "src/ci/docker/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -27,10 +27,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n     rm dumb-init_*.deb\n@@ -60,12 +56,16 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY patches/ /tmp/patches/\n-COPY powerpc-linux-gnu.config build-powerpc-toolchain.sh /tmp/\n+COPY dist-powerpc-linux/patches/ /tmp/patches/\n+COPY dist-powerpc-linux/powerpc-linux-gnu.config dist-powerpc-linux/build-powerpc-toolchain.sh /tmp/\n RUN ./build-powerpc-toolchain.sh\n \n USER root\n \n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n ENV PATH=$PATH:/x-tools/powerpc-unknown-linux-gnu/bin\n \n ENV \\"}, {"sha": "984a0a0304e4754b3e16b0beb60c97e233088725", "filename": "src/ci/docker/dist-powerpc-linux/powerpc-linux-gnu.config", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -101,8 +101,8 @@ CT_ARCH_SUPPORTS_WITH_FLOAT=y\n CT_ARCH_DEFAULT_BE=y\n CT_ARCH_DEFAULT_32=y\n CT_ARCH_ABI=\"\"\n-CT_ARCH_CPU=\"power4\"\n-CT_ARCH_TUNE=\"power6\"\n+CT_ARCH_CPU=\"powerpc\"\n+CT_ARCH_TUNE=\"\"\n CT_ARCH_BE=y\n # CT_ARCH_LE is not set\n CT_ARCH_32=y\n@@ -391,8 +391,8 @@ CT_CC_GCC_HAS_LIBSANITIZER=y\n CT_CC_GCC_VERSION=\"4.9.3\"\n # CT_CC_LANG_FORTRAN is not set\n CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"--with-cpu-32=power4 --with-cpu=default32\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"--with-cpu-32=power4 --with-cpu=default32\"\n+CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n CT_CC_GCC_EXTRA_ENV_ARRAY=\"\"\n CT_CC_GCC_STATIC_LIBSTDCXX=y\n # CT_CC_GCC_SYSTEM_ZLIB is not set"}, {"sha": "bd38ee0c111582a2f88dbf4f53d2ddb87b7eac57", "filename": "src/ci/docker/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -25,11 +25,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   wget \\\n   xz-utils \\\n   libssl-dev \\\n-  pkg-config\n-\n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n+ pkg-config\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n@@ -60,28 +56,24 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY patches/ /tmp/patches/\n-COPY powerpc64-linux-gnu.config build-powerpc64-toolchain.sh /tmp/\n+COPY dist-powerpc64-linux/patches/ /tmp/patches/\n+COPY dist-powerpc64-linux/shared.sh dist-powerpc64-linux/powerpc64-linux-gnu.config dist-powerpc64-linux/build-powerpc64-toolchain.sh /tmp/\n RUN ./build-powerpc64-toolchain.sh\n \n USER root\n \n-RUN apt-get install -y --no-install-recommends rpm2cpio cpio\n-COPY build-powerpc64le-toolchain.sh /tmp/\n-RUN ./build-powerpc64le-toolchain.sh\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/powerpc64-unknown-linux-gnu/bin\n \n ENV \\\n     AR_powerpc64_unknown_linux_gnu=powerpc64-unknown-linux-gnu-ar \\\n     CC_powerpc64_unknown_linux_gnu=powerpc64-unknown-linux-gnu-gcc \\\n-    CXX_powerpc64_unknown_linux_gnu=powerpc64-unknown-linux-gnu-g++ \\\n-    AR_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-ar \\\n-    CC_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-gcc \\\n-    CXX_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-g++\n+    CXX_powerpc64_unknown_linux_gnu=powerpc64-unknown-linux-gnu-g++\n \n ENV HOSTS=powerpc64-unknown-linux-gnu\n-ENV HOSTS=$HOSTS,powerpc64le-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "c477cd61f98dea26f91103eba6506ebbe8a1f37c", "filename": "src/ci/docker/dist-powerpc64-linux/build-powerpc64-toolchain.sh", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2Fbuild-powerpc64-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2Fbuild-powerpc64-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2Fbuild-powerpc64-toolchain.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -11,22 +11,7 @@\n \n set -ex\n \n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n-  rm /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  set -x\n-}\n+source shared.sh\n \n mkdir build\n cd build"}, {"sha": "97e6d2908cf8a5ae3174e1bc08a17ea27fa3aae5", "filename": "src/ci/docker/dist-powerpc64-linux/shared.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2Fshared.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,25 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}"}, {"sha": "cbded156b4cbde53f26d4ce6508eaeeb9e74395b", "filename": "src/ci/docker/dist-powerpc64le-linux/Dockerfile", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,77 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n+  g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n+  make \\\n+  patch \\\n+  python2.7 \\\n+  sudo \\\n+  texinfo \\\n+  wget \\\n+  xz-utils \\\n+  libssl-dev \\\n+ pkg-config\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+USER root\n+\n+RUN apt-get install -y --no-install-recommends rpm2cpio cpio\n+COPY dist-powerpc64le-linux/shared.sh dist-powerpc64le-linux/build-powerpc64le-toolchain.sh /tmp/\n+RUN ./build-powerpc64le-toolchain.sh\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV \\\n+    AR_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-ar \\\n+    CC_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-gcc \\\n+    CXX_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-g++\n+\n+ENV HOSTS=powerpc64le-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "4d3e638916dbf248b6f52509b4d3f4251acf2d50", "filename": "src/ci/docker/dist-powerpc64le-linux/build-powerpc64le-toolchain.sh", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fbuild-powerpc64le-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fbuild-powerpc64le-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fbuild-powerpc64le-toolchain.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -11,6 +11,8 @@\n \n set -ex\n \n+source shared.sh\n+\n BINUTILS=2.25.1\n GCC=5.3.0\n TARGET=powerpc64le-linux-gnu\n@@ -40,9 +42,9 @@ pushd binutils-$TARGET\n curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.bz2 | tar xjf -\n mkdir binutils-build\n cd binutils-build\n-../binutils-$BINUTILS/configure --target=$TARGET --with-sysroot=$SYSROOT\n-make -j10\n-make install\n+hide_output ../binutils-$BINUTILS/configure --target=$TARGET --with-sysroot=$SYSROOT\n+hide_output make -j10\n+hide_output make install\n popd\n rm -rf binutils-$TARGET\n \n@@ -51,11 +53,11 @@ mkdir gcc-$TARGET\n pushd gcc-$TARGET\n curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n cd gcc-$GCC\n-./contrib/download_prerequisites\n+hide_output ./contrib/download_prerequisites\n \n mkdir ../gcc-build\n cd ../gcc-build\n-../gcc-$GCC/configure                            \\\n+hide_output ../gcc-$GCC/configure                            \\\n   --enable-languages=c,c++                       \\\n   --target=$TARGET                               \\\n   --with-cpu=power8                              \\\n@@ -72,8 +74,8 @@ cd ../gcc-build\n   --disable-libsanitizer                         \\\n   --disable-libquadmath-support                  \\\n   --disable-lto\n-make -j10\n-make install\n+hide_output hide_output make -j10\n+hide_output make install\n \n popd\n rm -rf gcc-$TARGET", "previous_filename": "src/ci/docker/dist-powerpc64-linux/build-powerpc64le-toolchain.sh"}, {"sha": "97e6d2908cf8a5ae3174e1bc08a17ea27fa3aae5", "filename": "src/ci/docker/dist-powerpc64le-linux/shared.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2Fshared.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,25 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}"}, {"sha": "654b458ea409e01335ebe1816ab6b40a58991761", "filename": "src/ci/docker/dist-s390x-linux-netbsd/build-netbsd-toolchain.sh", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2Fbuild-netbsd-toolchain.sh?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,120 +0,0 @@\n-#!/bin/bash\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# ignore-tidy-linelength\n-\n-set -ex\n-\n-BINUTILS=2.25.1\n-GCC=5.3.0\n-\n-# First up, build binutils\n-mkdir binutils\n-cd binutils\n-curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.bz2 | tar xjf -\n-mkdir binutils-build\n-cd binutils-build\n-../binutils-$BINUTILS/configure \\\n-  --target=x86_64-unknown-netbsd\n-make -j10\n-make install\n-cd ../..\n-rm -rf binutils\n-\n-# Next, download the NetBSD libc and relevant header files\n-mkdir netbsd\n-# originally from:\n-# https://ftp.netbsd.org/pub/NetBSD/NetBSD-7.0/amd64/binary/sets/base.tgz\n-curl https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-16-netbsd-base.tgz | \\\n-  tar xzf - -C netbsd ./usr/include ./usr/lib ./lib\n-# originally from:\n-# https://ftp.netbsd.org/pub/NetBSD/NetBSD-7.0/amd64/binary/sets/comp.tgz\n-curl https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-16-netbsd-comp.tgz | \\\n-  tar xzf - -C netbsd ./usr/include ./usr/lib\n-\n-dst=/usr/local/x86_64-unknown-netbsd\n-cp -r netbsd/usr/include $dst\n-cp netbsd/usr/lib/crt0.o $dst/lib\n-cp netbsd/usr/lib/crti.o $dst/lib\n-cp netbsd/usr/lib/crtn.o $dst/lib\n-cp netbsd/usr/lib/crtbeginS.o $dst/lib\n-cp netbsd/usr/lib/crtendS.o $dst/lib\n-cp netbsd/usr/lib/crtbegin.o $dst/lib\n-cp netbsd/usr/lib/crtend.o $dst/lib\n-cp netbsd/usr/lib/gcrt0.o $dst/lib\n-cp netbsd/usr/lib/libc.a $dst/lib\n-cp netbsd/usr/lib/libc_p.a $dst/lib\n-cp netbsd/usr/lib/libc_pic.a $dst/lib\n-cp netbsd/lib/libc.so.12.193.1 $dst/lib\n-cp netbsd/lib/libutil.so.7.21 $dst/lib\n-cp netbsd/usr/lib/libm.a $dst/lib\n-cp netbsd/usr/lib/libm_p.a $dst/lib\n-cp netbsd/usr/lib/libm_pic.a $dst/lib\n-cp netbsd/lib/libm.so.0.11 $dst/lib\n-cp netbsd/usr/lib/librt.so.1.1 $dst/lib\n-cp netbsd/usr/lib/libpthread.a $dst/lib\n-cp netbsd/usr/lib/libpthread_p.a $dst/lib\n-cp netbsd/usr/lib/libpthread_pic.a $dst/lib\n-cp netbsd/usr/lib/libpthread.so.1.2 $dst/lib\n-\n-ln -s libc.so.12.193.1 $dst/lib/libc.so\n-ln -s libc.so.12.193.1 $dst/lib/libc.so.12\n-ln -s libm.so.0.11 $dst/lib/libm.so\n-ln -s libm.so.0.11 $dst/lib/libm.so.0\n-ln -s libutil.so.7.21 $dst/lib/libutil.so\n-ln -s libutil.so.7.21 $dst/lib/libutil.so.7\n-ln -s libpthread.so.1.2 $dst/lib/libpthread.so\n-ln -s libpthread.so.1.2 $dst/lib/libpthread.so.1\n-ln -s librt.so.1.1 $dst/lib/librt.so\n-\n-rm -rf netbsd\n-\n-# Finally, download and build gcc to target NetBSD\n-mkdir gcc\n-cd gcc\n-curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n-cd gcc-$GCC\n-./contrib/download_prerequisites\n-\n-# Originally from\n-# ftp://ftp.netbsd.org/pub/pkgsrc/pkgsrc-2016Q4/pkgsrc/lang/gcc5/patches/patch-libstdc%2B%2B-v3_config_os_bsd_netbsd_ctype__base.h\n-PATCHES=\"https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-13-netbsd-patch1.patch\"\n-\n-# Originally from\n-# ftp://ftp.netbsd.org/pub/pkgsrc/pkgsrc-2016Q4/pkgsrc/lang/gcc5/patches/patch-libstdc%2B%2B-v3_config_os_bsd_netbsd_ctype__configure__char.cc\n-PATCHES=\"$PATCHES https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-13-netbsd-patch2.patch\"\n-\n-for patch in $PATCHES; do\n-  curl $patch | patch -Np0\n-done\n-\n-mkdir ../gcc-build\n-cd ../gcc-build\n-../gcc-$GCC/configure                            \\\n-  --enable-languages=c,c++                       \\\n-  --target=x86_64-unknown-netbsd                 \\\n-  --disable-libcilkrts                           \\\n-  --disable-multilib                             \\\n-  --disable-nls                                  \\\n-  --disable-libgomp                              \\\n-  --disable-libquadmath                          \\\n-  --disable-libssp                               \\\n-  --disable-libvtv                               \\\n-  --disable-libcilkrt                            \\\n-  --disable-libada                               \\\n-  --disable-libsanitizer                         \\\n-  --disable-libquadmath-support                  \\\n-  --disable-lto\n-make -j10\n-make install\n-\n-cd ../..\n-rm -rf gcc"}, {"sha": "5c00287107aa3be399eda238a718a0050ec65b82", "filename": "src/ci/docker/dist-s390x-linux/Dockerfile", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -27,10 +27,6 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config\n \n-RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n-      chmod +x /usr/local/bin/sccache\n-\n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n     dpkg -i dumb-init_*.deb && \\\n     rm dumb-init_*.deb\n@@ -60,27 +56,24 @@ RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n USER rustbuild\n WORKDIR /tmp\n \n-COPY patches/ /tmp/patches/\n-COPY s390x-linux-gnu.config build-s390x-toolchain.sh /tmp/\n+COPY dist-s390x-linux/patches/ /tmp/patches/\n+COPY dist-s390x-linux/s390x-linux-gnu.config dist-s390x-linux/build-s390x-toolchain.sh /tmp/\n RUN ./build-s390x-toolchain.sh\n \n USER root\n \n-COPY build-netbsd-toolchain.sh /tmp/\n-RUN ./build-netbsd-toolchain.sh\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n \n ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin\n \n ENV \\\n-    AR_x86_64_unknown_netbsd=x86_64-unknown-netbsd-ar \\\n-    CC_x86_64_unknown_netbsd=x86_64-unknown-netbsd-gcc \\\n-    CXX_x86_64_unknown_netbsd=x86_64-unknown-netbsd-g++ \\\n     CC_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-gcc \\\n     AR_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-ar \\\n     CXX_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-g++\n \n-ENV HOSTS=x86_64-unknown-netbsd\n-ENV HOSTS=$HOSTS,s390x-unknown-linux-gnu\n+ENV HOSTS=s390x-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS", "previous_filename": "src/ci/docker/dist-s390x-linux-netbsd/Dockerfile"}, {"sha": "b4995e20dc69b1058bc1577ea3e5aa535d790dd8", "filename": "src/ci/docker/dist-s390x-linux/build-s390x-toolchain.sh", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fbuild-s390x-toolchain.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-s390x-linux-netbsd/build-s390x-toolchain.sh"}, {"sha": "cba416ed2f70bc12990229442e23feb47a0fdd3c", "filename": "src/ci/docker/dist-s390x-linux/patches/glibc/2.12.2/001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fpatches%2Fglibc%2F2.12.2%2F001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fpatches%2Fglibc%2F2.12.2%2F001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fpatches%2Fglibc%2F2.12.2%2F001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-s390x-linux-netbsd/patches/glibc/2.12.2/001-Use-.machine-to-prevent-AS-from-complaining-about-z9.patch"}, {"sha": "fa5e4510987f1ca682a642234f52353481e77e1f", "filename": "src/ci/docker/dist-s390x-linux/s390x-linux-gnu.config", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fs390x-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fs390x-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2Fs390x-linux-gnu.config?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/ci/docker/dist-s390x-linux-netbsd/s390x-linux-gnu.config"}, {"sha": "a6c4eee5e812c5407e07fdce89ee73c4864e60de", "filename": "src/ci/docker/dist-x86_64-freebsd/Dockerfile", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,39 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7 \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  bzip2 \\\n+  xz-utils \\\n+  wget \\\n+  libssl-dev \\\n+  pkg-config\n+\n+COPY dist-x86_64-freebsd/build-toolchain.sh /tmp/\n+RUN /tmp/build-toolchain.sh x86_64\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV \\\n+    AR_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-ar \\\n+    CC_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-gcc \\\n+    CXX_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-g++\n+\n+ENV HOSTS=x86_64-unknown-freebsd\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "5642e6fc937f9736e14bc23aed1fca4b045bc88a", "filename": "src/ci/docker/dist-x86_64-freebsd/build-toolchain.sh", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2Fbuild-toolchain.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,112 @@\n+#!/bin/bash\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+ARCH=$1\n+BINUTILS=2.25.1\n+GCC=5.3.0\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+mkdir binutils\n+cd binutils\n+\n+# First up, build binutils\n+curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.bz2 | tar xjf -\n+mkdir binutils-build\n+cd binutils-build\n+hide_output ../binutils-$BINUTILS/configure \\\n+  --target=$ARCH-unknown-freebsd10\n+hide_output make -j10\n+hide_output make install\n+cd ../..\n+rm -rf binutils\n+\n+# Next, download the FreeBSD libc and relevant header files\n+\n+mkdir freebsd\n+case \"$ARCH\" in\n+    x86_64)\n+        URL=ftp://ftp.freebsd.org/pub/FreeBSD/releases/amd64/10.2-RELEASE/base.txz\n+        ;;\n+    i686)\n+        URL=ftp://ftp.freebsd.org/pub/FreeBSD/releases/i386/10.2-RELEASE/base.txz\n+        ;;\n+esac\n+curl $URL | tar xJf - -C freebsd ./usr/include ./usr/lib ./lib\n+\n+dst=/usr/local/$ARCH-unknown-freebsd10\n+\n+cp -r freebsd/usr/include $dst/\n+cp freebsd/usr/lib/crt1.o $dst/lib\n+cp freebsd/usr/lib/Scrt1.o $dst/lib\n+cp freebsd/usr/lib/crti.o $dst/lib\n+cp freebsd/usr/lib/crtn.o $dst/lib\n+cp freebsd/usr/lib/libc.a $dst/lib\n+cp freebsd/usr/lib/libutil.a $dst/lib\n+cp freebsd/usr/lib/libutil_p.a $dst/lib\n+cp freebsd/usr/lib/libm.a $dst/lib\n+cp freebsd/usr/lib/librt.so.1 $dst/lib\n+cp freebsd/usr/lib/libexecinfo.so.1 $dst/lib\n+cp freebsd/lib/libc.so.7 $dst/lib\n+cp freebsd/lib/libm.so.5 $dst/lib\n+cp freebsd/lib/libutil.so.9 $dst/lib\n+cp freebsd/lib/libthr.so.3 $dst/lib/libpthread.so\n+\n+ln -s libc.so.7 $dst/lib/libc.so\n+ln -s libm.so.5 $dst/lib/libm.so\n+ln -s librt.so.1 $dst/lib/librt.so\n+ln -s libutil.so.9 $dst/lib/libutil.so\n+ln -s libexecinfo.so.1 $dst/lib/libexecinfo.so\n+rm -rf freebsd\n+\n+# Finally, download and build gcc to target FreeBSD\n+mkdir gcc\n+cd gcc\n+curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n+cd gcc-$GCC\n+./contrib/download_prerequisites\n+\n+mkdir ../gcc-build\n+cd ../gcc-build\n+hide_output ../gcc-$GCC/configure                \\\n+  --enable-languages=c,c++                       \\\n+  --target=$ARCH-unknown-freebsd10               \\\n+  --disable-multilib                             \\\n+  --disable-nls                                  \\\n+  --disable-libgomp                              \\\n+  --disable-libquadmath                          \\\n+  --disable-libssp                               \\\n+  --disable-libvtv                               \\\n+  --disable-libcilkrts                           \\\n+  --disable-libada                               \\\n+  --disable-libsanitizer                         \\\n+  --disable-libquadmath-support                  \\\n+  --disable-lto\n+hide_output make -j10\n+hide_output make install\n+cd ../..\n+rm -rf gcc"}, {"sha": "e2e42836dcdaf136786b7ad9b0194493d817cc83", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,101 @@\n+FROM centos:5\n+\n+WORKDIR /build\n+\n+# Centos 5 is EOL and is no longer available from the usual mirrors, so switch\n+# to http://vault.centos.org/\n+RUN sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf\n+RUN sed -i 's/mirrorlist/#mirrorlist/' /etc/yum.repos.d/*.repo\n+RUN sed -i 's|#\\(baseurl.*\\)mirror.centos.org/centos/$releasever|\\1vault.centos.org/5.11|' /etc/yum.repos.d/*.repo\n+\n+RUN yum upgrade -y && yum install -y \\\n+      curl \\\n+      bzip2 \\\n+      gcc \\\n+      gcc-c++ \\\n+      make \\\n+      glibc-devel \\\n+      perl \\\n+      zlib-devel \\\n+      file \\\n+      xz \\\n+      which \\\n+      pkgconfig \\\n+      wget \\\n+      autoconf \\\n+      gettext\n+\n+ENV PATH=/rustroot/bin:$PATH\n+ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n+ENV PKG_CONFIG_PATH=/rustroot/lib/pkgconfig\n+WORKDIR /tmp\n+COPY dist-x86_64-linux/shared.sh dist-x86_64-linux/build-binutils.sh /tmp/\n+\n+# We need a build of openssl which supports SNI to download artifacts from\n+# static.rust-lang.org. This'll be used to link into libcurl below (and used\n+# later as well), so build a copy of OpenSSL with dynamic libraries into our\n+# generic root.\n+COPY dist-x86_64-linux/build-openssl.sh /tmp/\n+RUN ./build-openssl.sh\n+\n+# The `curl` binary on CentOS doesn't support SNI which is needed for fetching\n+# some https urls we have, so install a new version of libcurl + curl which is\n+# using the openssl we just built previously.\n+#\n+# Note that we also disable a bunch of optional features of curl that we don't\n+# really need.\n+COPY dist-x86_64-linux/build-curl.sh /tmp/\n+RUN ./build-curl.sh\n+\n+# binutils < 2.22 has a bug where the 32-bit executables it generates\n+# immediately segfault in Rust, so we need to install our own binutils.\n+#\n+# See https://github.com/rust-lang/rust/issues/20440 for more info\n+RUN ./build-binutils.sh\n+\n+# Need a newer version of gcc than centos has to compile LLVM nowadays\n+COPY dist-x86_64-linux/build-gcc.sh /tmp/\n+RUN ./build-gcc.sh\n+\n+# CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n+COPY dist-x86_64-linux/build-python.sh /tmp/\n+RUN ./build-python.sh\n+\n+# Apparently CentOS 5.5 desn't have `git` in yum, but we're gonna need it for\n+# cloning, so download and build it here.\n+COPY dist-x86_64-linux/build-git.sh /tmp/\n+RUN ./build-git.sh\n+\n+# libssh2 (a dependency of Cargo) requires cmake 2.8.11 or higher but CentOS\n+# only has 2.6.4, so build our own\n+COPY dist-x86_64-linux/build-cmake.sh /tmp/\n+RUN ./build-cmake.sh\n+\n+# for sanitizers, we need kernel headers files newer than the ones CentOS ships\n+# with so we install newer ones here\n+COPY dist-x86_64-linux/build-headers.sh /tmp/\n+RUN ./build-headers.sh\n+\n+RUN curl -Lo /rustroot/dumb-init \\\n+      https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 && \\\n+      chmod +x /rustroot/dumb-init\n+ENTRYPOINT [\"/rustroot/dumb-init\", \"--\"]\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV HOSTS=x86_64-unknown-linux-gnu\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --host=$HOSTS \\\n+      --enable-extended \\\n+      --enable-sanitizers\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n+\n+# This is the only builder which will create source tarballs\n+ENV DIST_SRC 1\n+\n+# When we build cargo in this container, we don't want it to use the system\n+# libcurl, instead it should compile its own.\n+ENV LIBCURL_NO_PKG_CONFIG 1"}, {"sha": "80aa1f2a0161308affc245daaf2952f973643918", "filename": "src/ci/docker/dist-x86_64-linux/build-binutils.sh", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-binutils.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-binutils.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-binutils.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,26 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+source shared.sh\n+\n+curl https://ftp.gnu.org/gnu/binutils/binutils-2.25.1.tar.bz2 | tar xfj -\n+\n+mkdir binutils-build\n+cd binutils-build\n+hide_output ../binutils-2.25.1/configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf binutils-build\n+rm -rf binutils-2.25.1"}, {"sha": "82e46455cb0f0673fef2fe6442d25aa7c4b8d976", "filename": "src/ci/docker/dist-x86_64-linux/build-cmake.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-cmake.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-cmake.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-cmake.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://cmake.org/files/v3.6/cmake-3.6.3.tar.gz | tar xzf -\n+\n+mkdir cmake-build\n+cd cmake-build\n+hide_output ../cmake-3.6.3/configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf cmake-build\n+rm -rf cmake-3.6.3"}, {"sha": "b7d22755a571bab38aa4d85629fa69cbec041c24", "filename": "src/ci/docker/dist-x86_64-linux/build-curl.sh", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-curl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-curl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-curl.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,43 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+VERSION=7.51.0\n+\n+curl http://cool.haxx.se/download/curl-$VERSION.tar.bz2 | tar xjf -\n+\n+mkdir curl-build\n+cd curl-build\n+hide_output ../curl-$VERSION/configure \\\n+      --prefix=/rustroot \\\n+      --with-ssl=/rustroot \\\n+      --disable-sspi \\\n+      --disable-gopher \\\n+      --disable-smtp \\\n+      --disable-smb \\\n+      --disable-imap \\\n+      --disable-pop3 \\\n+      --disable-tftp \\\n+      --disable-telnet \\\n+      --disable-manual \\\n+      --disable-dict \\\n+      --disable-rtsp \\\n+      --disable-ldaps \\\n+      --disable-ldap\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf curl-build\n+rm -rf curl-$VERSION\n+yum erase -y curl"}, {"sha": "ab2562538d6d7376e942a219ce0f00664082be9f", "filename": "src/ci/docker/dist-x86_64-linux/build-gcc.sh", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-gcc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-gcc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-gcc.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,33 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+source shared.sh\n+\n+GCC=4.8.5\n+\n+curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n+cd gcc-$GCC\n+./contrib/download_prerequisites\n+mkdir ../gcc-build\n+cd ../gcc-build\n+hide_output ../gcc-$GCC/configure \\\n+    --prefix=/rustroot \\\n+    --enable-languages=c,c++\n+hide_output make -j10\n+hide_output make install\n+ln -nsf gcc /rustroot/bin/cc\n+\n+cd ..\n+rm -rf gcc-build\n+rm -rf gcc-$GCC\n+yum erase -y gcc gcc-c++ binutils"}, {"sha": "92fa66b496d933648a0e49c3f83b6565246188a7", "filename": "src/ci/docker/dist-x86_64-linux/build-git.sh", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-git.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-git.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-git.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,24 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz | tar xzf -\n+\n+cd git-2.10.0\n+make configure\n+hide_output ./configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf git-2.10.0"}, {"sha": "4ce38fd9205e27b4aff8b169f4ead5c31f731993", "filename": "src/ci/docker/dist-x86_64-linux/build-headers.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-headers.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-headers.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-headers.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://cdn.kernel.org/pub/linux/kernel/v3.x/linux-3.2.84.tar.xz | unxz | tar x\n+\n+cd linux-3.2.84\n+hide_output make mrproper\n+hide_output make INSTALL_HDR_PATH=dest headers_install\n+\n+find dest/include \\( -name .install -o -name ..install.cmd \\) -delete\n+yes | cp -fr dest/include/* /usr/include\n+\n+cd ..\n+rm -rf linux-3.2.84"}, {"sha": "27cd064f901a036de2ff41b9922806f06d8a3ec6", "filename": "src/ci/docker/dist-x86_64-linux/build-openssl.sh", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,28 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+VERSION=1.0.2k\n+URL=https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/openssl-$VERSION.tar.gz\n+\n+curl $URL | tar xzf -\n+\n+cd openssl-$VERSION\n+hide_output ./config --prefix=/rustroot shared -fPIC\n+hide_output make -j10\n+hide_output make install\n+cd ..\n+rm -rf openssl-$VERSION\n+\n+# Make the system cert collection available to the new install.\n+ln -nsf /etc/pki/tls/cert.pem /rustroot/ssl/"}, {"sha": "a7a450f3c8de772403b481b96c94b03d5ec2325e", "filename": "src/ci/docker/dist-x86_64-linux/build-python.sh", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-python.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-python.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-python.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,30 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz | \\\n+  tar xzf -\n+\n+mkdir python-build\n+cd python-build\n+\n+# Gotta do some hackery to tell python about our custom OpenSSL build, but other\n+# than that fairly normal.\n+CFLAGS='-I /rustroot/include' LDFLAGS='-L /rustroot/lib -L /rustroot/lib64' \\\n+    hide_output ../Python-2.7.12/configure --prefix=/rustroot\n+hide_output make -j10\n+hide_output make install\n+\n+cd ..\n+rm -rf python-build\n+rm -rf Python-2.7.12"}, {"sha": "97e6d2908cf8a5ae3174e1bc08a17ea27fa3aae5", "filename": "src/ci/docker/dist-x86_64-linux/shared.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fshared.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,25 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}"}, {"sha": "2eea5ab1469728e210795b257e85ce33f2fb56db", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n WORKDIR /build/\n-COPY build-musl.sh /build/\n+COPY dist-x86_64-musl/build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -26,12 +26,13 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n ENV RUST_CONFIGURE_ARGS \\\n       --target=x86_64-unknown-linux-musl \\\n-      --musl-root-x86_64=/musl-x86_64\n+      --musl-root-x86_64=/musl-x86_64 \\\n+      --enable-extended\n \n # Newer binutils broke things on some vms/distros (i.e., linking against\n # unknown relocs disabled by the following flag), so we need to go out of our"}, {"sha": "776da0093974c0c68c9b59ca84f9fd55eec26059", "filename": "src/ci/docker/dist-x86_64-musl/build-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2Fbuild-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2Fbuild-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2Fbuild-musl.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -15,7 +15,7 @@ set -ex\n export CFLAGS=\"-fPIC -Wa,-mrelax-relocations=no\"\n export CXXFLAGS=\"-Wa,-mrelax-relocations=no\"\n \n-MUSL=musl-1.1.14\n+MUSL=musl-1.1.16\n curl https://www.musl-libc.org/releases/$MUSL.tar.gz | tar xzf -\n cd $MUSL\n ./configure --prefix=/musl-x86_64 --disable-shared"}, {"sha": "f76e6271f4c8c22eddfbb4eec38760f60570fac3", "filename": "src/ci/docker/dist-x86_64-netbsd/Dockerfile", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,78 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  automake \\\n+  bison \\\n+  bzip2 \\\n+  ca-certificates \\\n+  cmake \\\n+  curl \\\n+  file \\\n+  flex \\\n+  g++ \\\n+  gawk \\\n+  gdb \\\n+  git \\\n+  gperf \\\n+  help2man \\\n+  libncurses-dev \\\n+  libtool-bin \\\n+  make \\\n+  patch \\\n+  python2.7 \\\n+  sudo \\\n+  texinfo \\\n+  wget \\\n+  xz-utils \\\n+  libssl-dev \\\n+  pkg-config\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+# Ubuntu 16.04 (this contianer) ships with make 4, but something in the\n+# toolchains we build below chokes on that, so go back to make 3\n+RUN curl https://ftp.gnu.org/gnu/make/make-3.81.tar.gz | tar xzf - && \\\n+      cd make-3.81 && \\\n+      ./configure --prefix=/usr && \\\n+      make && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf make-3.81\n+\n+RUN curl http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.22.0.tar.bz2 | \\\n+      tar xjf - && \\\n+      cd crosstool-ng && \\\n+      ./configure --prefix=/usr/local && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      cd .. && \\\n+      rm -rf crosstool-ng\n+\n+RUN groupadd -r rustbuild && useradd -m -r -g rustbuild rustbuild\n+RUN mkdir /x-tools && chown rustbuild:rustbuild /x-tools\n+USER rustbuild\n+WORKDIR /tmp\n+\n+COPY dist-x86_64-netbsd/build-netbsd-toolchain.sh /tmp/\n+RUN ./build-netbsd-toolchain.sh\n+\n+USER root\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV PATH=$PATH:/x-tools/x86_64-unknown-netbsd/bin\n+\n+ENV \\\n+    AR_x86_64_unknown_netbsd=x86_64--netbsd-ar \\\n+    CC_x86_64_unknown_netbsd=x86_64--netbsd-gcc-sysroot \\\n+    CXX_x86_64_unknown_netbsd=x86_64--netbsd-g++-sysroot\n+\n+ENV HOSTS=x86_64-unknown-netbsd\n+\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "ea335a249736c703296840774638e609961625c1", "filename": "src/ci/docker/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,83 @@\n+#!/bin/bash\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# ignore-tidy-linelength\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  rm /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n+\n+mkdir netbsd\n+cd netbsd\n+\n+mkdir -p /x-tools/x86_64-unknown-netbsd/sysroot\n+\n+URL=https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+\n+# Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/source/sets/*.tgz\n+curl $URL/2017-03-17-netbsd-src.tgz | tar xzf -\n+curl $URL/2017-03-17-netbsd-gnusrc.tgz | tar xzf -\n+curl $URL/2017-03-17-netbsd-sharesrc.tgz | tar xzf -\n+curl $URL/2017-03-17-netbsd-syssrc.tgz | tar xzf -\n+\n+# Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/amd64/binary/sets/*.tgz\n+curl $URL/2017-03-17-netbsd-base.tgz | \\\n+  tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib ./lib\n+curl $URL/2017-03-17-netbsd-comp.tgz | \\\n+  tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib\n+\n+cd usr/src\n+\n+# The options, in order, do the following\n+# * this is an unpriviledged build\n+# * output to a predictable location\n+# * disable various uneeded stuff\n+MKUNPRIVED=yes TOOLDIR=/x-tools/x86_64-unknown-netbsd \\\n+MKSHARE=no MKDOC=no MKHTML=no MKINFO=no MKKMOD=no MKLINT=no MKMAN=no MKNLS=no MKPROFILE=no \\\n+hide_output ./build.sh -j10 -m amd64 tools\n+\n+cd ../..\n+\n+rm -rf usr\n+\n+cat > /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc-sysroot <<'EOF'\n+#!/bin/bash\n+exec /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc --sysroot=/x-tools/x86_64-unknown-netbsd/sysroot \"$@\"\n+EOF\n+\n+cat > /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++-sysroot <<'EOF'\n+#!/bin/bash\n+exec /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++ --sysroot=/x-tools/x86_64-unknown-netbsd/sysroot \"$@\"\n+EOF\n+\n+GCC_SHA1=`sha1sum -b /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc | cut -d' ' -f1`\n+GPP_SHA1=`sha1sum -b /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++ | cut -d' ' -f1`\n+\n+echo \"# $GCC_SHA1\" >> /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc-sysroot\n+echo \"# $GPP_SHA1\" >> /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++-sysroot\n+\n+chmod +x /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc-sysroot\n+chmod +x /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++-sysroot"}, {"sha": "0f0e5b69c32cf787d2a2fafb6dacbd370bce6c7a", "filename": "src/ci/docker/emscripten/Dockerfile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Femscripten%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   lib32stdc++6\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -24,13 +24,13 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n WORKDIR /tmp\n-COPY build-emscripten.sh /tmp/\n+COPY emscripten/build-emscripten.sh /tmp/\n RUN ./build-emscripten.sh\n ENV PATH=$PATH:/tmp/emsdk_portable\n-ENV PATH=$PATH:/tmp/emsdk_portable/clang/tag-e1.37.1/build_tag-e1.37.1_32/bin\n+ENV PATH=$PATH:/tmp/emsdk_portable/clang/tag-e1.37.10/build_tag-e1.37.10_32/bin\n ENV PATH=$PATH:/tmp/emsdk_portable/node/4.1.1_32bit/bin\n-ENV PATH=$PATH:/tmp/emsdk_portable/emscripten/tag-1.37.1\n-ENV EMSCRIPTEN=/tmp/emsdk_portable/emscripten/tag-1.37.1\n+ENV PATH=$PATH:/tmp/emsdk_portable/emscripten/tag-1.37.10\n+ENV EMSCRIPTEN=/tmp/emsdk_portable/emscripten/tag-1.37.10\n \n ENV RUST_CONFIGURE_ARGS --target=asmjs-unknown-emscripten\n "}, {"sha": "8d6a28f418bf955b8d75b049d33f49794630e538", "filename": "src/ci/docker/emscripten/build-emscripten.sh", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Femscripten%2Fbuild-emscripten.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -29,8 +29,25 @@ exit 1\n }\n \n curl https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | \\\n-      tar xzf -\n+    tar xzf -\n+\n+# Some versions of the EMSDK archive have their contents in .emsdk-portable\n+# and others in emsdk_portable. Make sure the EMSDK ends up in a fixed path.\n+if [ -d emsdk-portable ]; then\n+    mv emsdk-portable emsdk_portable\n+fi\n+\n+if [ ! -d emsdk_portable ]; then\n+    echo \"ERROR: Invalid emsdk archive. Dumping working directory.\" >&2\n+    ls -l\n+    exit 1\n+fi\n+\n+# Some versions of the EMSDK set the permissions of the root directory to\n+# 0700. Ensure the directory is readable by all users.\n+chmod 755 emsdk_portable\n+\n source emsdk_portable/emsdk_env.sh\n hide_output emsdk update\n-hide_output emsdk install --build=Release sdk-tag-1.37.1-32bit\n-hide_output emsdk activate --build=Release sdk-tag-1.37.1-32bit\n+hide_output emsdk install --build=Release sdk-tag-1.37.10-32bit\n+hide_output emsdk activate --build=Release sdk-tag-1.37.10-32bit"}, {"sha": "076be8f429116581f088eb49f1e09d4452a27c29", "filename": "src/ci/docker/i686-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu-nopt%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "5fac05735746761982775c05d14be3758701d1fe", "filename": "src/ci/docker/i686-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "bb9a860574dd2f175245cd6e8e97fc911d8787c7", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -21,11 +21,28 @@ root_dir=\"`dirname $src_dir`\"\n \n source \"$ci_dir/shared.sh\"\n \n-retry docker \\\n-  build \\\n-  --rm \\\n-  -t rust-ci \\\n-  \"`dirname \"$script\"`/$image\"\n+if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n+    retry docker \\\n+      build \\\n+      --rm \\\n+      -t rust-ci \\\n+      -f \"$docker_dir/$image/Dockerfile\" \\\n+      \"$docker_dir\"\n+elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n+    if [ -n \"$TRAVIS_OS_NAME\" ]; then\n+        echo Cannot run disabled images on travis!\n+        exit 1\n+    fi\n+    retry docker \\\n+      build \\\n+      --rm \\\n+      -t rust-ci \\\n+      -f \"$docker_dir/disabled/$image/Dockerfile\" \\\n+      \"$docker_dir\"\n+else\n+    echo Invalid image: $image\n+    exit 1\n+fi\n \n objdir=$root_dir/obj\n \n@@ -38,8 +55,6 @@ if [ \"$SCCACHE_BUCKET\" != \"\" ]; then\n     args=\"$args --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\"\n     args=\"$args --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\"\n     args=\"$args --env SCCACHE_ERROR_LOG=/tmp/sccache/sccache.log\"\n-    args=\"$args --env SCCACHE_LOG_LEVEL=debug\"\n-    args=\"$args --env RUST_LOG=sccache=debug\"\n     args=\"$args --volume $objdir/tmp:/tmp/sccache\"\n else\n     mkdir -p $HOME/.cache/sccache\n@@ -58,6 +73,7 @@ exec docker \\\n   --env DEPLOY_ALT=$DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n+  --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n   --privileged \\\n   --rm \\\n   rust-ci \\"}, {"sha": "c3d83c087e52fee5a5ccec4206a6e936656d99f1", "filename": "src/ci/docker/scripts/android-ndk.sh", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-ndk.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,40 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+URL=https://dl.google.com/android/repository\n+\n+download_ndk() {\n+    mkdir -p /android/ndk\n+    cd /android/ndk\n+    curl -O $URL/$1\n+    unzip -q $1\n+    rm $1\n+    mv android-ndk-* ndk\n+}\n+\n+make_standalone_toolchain() {\n+    # See https://developer.android.com/ndk/guides/standalone_toolchain.htm\n+    python2.7 /android/ndk/ndk/build/tools/make_standalone_toolchain.py \\\n+        --install-dir /android/ndk/$1-$2 \\\n+        --arch $1 \\\n+        --api $2\n+}\n+\n+remove_ndk() {\n+    rm -rf /android/ndk/ndk\n+}\n+\n+download_and_make_toolchain() {\n+    download_ndk $1 && \\\n+    make_standalone_toolchain $2 $3 && \\\n+    remove_ndk\n+}"}, {"sha": "7d8110efedec936d2ac49c8813c0b445193f21d7", "filename": "src/ci/docker/scripts/android-sdk.sh", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,53 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+URL=https://dl.google.com/android/repository\n+\n+download_sdk() {\n+    mkdir -p /android/sdk\n+    cd /android/sdk\n+    curl -O $URL/$1\n+    unzip -q $1\n+    rm -rf $1\n+}\n+\n+download_sysimage() {\n+    # See https://developer.android.com/studio/tools/help/android.html\n+    abi=$1\n+    api=$2\n+\n+    filter=\"platform-tools,android-$api\"\n+    filter=\"$filter,sys-img-$abi-android-$api\"\n+\n+    # Keep printing yes to accept the licenses\n+    while true; do echo yes; sleep 10; done | \\\n+        /android/sdk/tools/android update sdk -a --no-ui \\\n+            --filter \"$filter\"\n+}\n+\n+create_avd() {\n+    # See https://developer.android.com/studio/tools/help/android.html\n+    abi=$1\n+    api=$2\n+\n+    echo no | \\\n+        /android/sdk/tools/android create avd \\\n+            --name $abi-$api \\\n+            --target android-$api \\\n+            --abi $abi\n+}\n+\n+download_and_create_avd() {\n+    download_sdk $1\n+    download_sysimage $2 $3\n+    create_avd $2 $3\n+}"}, {"sha": "cd3369d5eaddc7da93f844b4fa3fd7ceceee021f", "filename": "src/ci/docker/scripts/android-start-emulator.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fandroid-start-emulator.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fandroid-start-emulator.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-start-emulator.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,25 @@\n+#!/bin/sh\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+# Setting SHELL to a file instead on a symlink helps android\n+# emulator identify the system\n+export SHELL=/bin/bash\n+\n+# Using the default qemu2 engine makes time::tests::since_epoch fails because\n+# the emulator date is set to unix epoch (in armeabi-v7a-18 image). Using\n+# classic engine the emulator starts with the current date and the tests run\n+# fine. If another image is used, this need to be evaluated again.\n+nohup nohup emulator @armeabi-v7a-18 \\\n+    -engine classic -no-window -partition-size 2047 0<&- &>/dev/null &\n+\n+exec \"$@\""}, {"sha": "839c390799278c98ef227d6c63b2f440e2cb421e", "filename": "src/ci/docker/scripts/dumb-init.sh", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fdumb-init.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -1,5 +1,4 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #\n@@ -10,7 +9,7 @@\n # except according to those terms.\n \n set -ex\n-ANDROID_EMULATOR_FORCE_32BIT=true \\\n-  nohup nohup emulator @arm-18 -no-window -partition-size 2047 \\\n-  0<&- &>/dev/null &\n-exec \"$@\"\n+\n+curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb\n+dpkg -i dumb-init_*.deb\n+rm dumb-init_*.deb", "previous_filename": "src/ci/docker/arm-android/start-emulator.sh"}, {"sha": "7a2befaf6715ff692a9c7d49409a6294c030d49a", "filename": "src/ci/docker/scripts/sccache.sh", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,16 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+curl -o /usr/local/bin/sccache \\\n+  https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl\n+\n+chmod +x /usr/local/bin/sccache"}, {"sha": "06c7c2824fd9d45b76b40d21e1f788d5a32affce", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -15,7 +15,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "6ea54ac4db3e7f2a8b384b2a869cbe19dff85695", "filename": "src/ci/docker/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "e24c660a8c36d804fe267d7a8f2ed0662e7cf660", "filename": "src/ci/docker/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -16,7 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   pkg-config\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "78035c7fe3d7f9410321bd7f89783b24f48cbc30", "filename": "src/ci/docker/x86_64-gnu-full-bootstrap/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "0aaed64e384ed486e9dcaafa5e4737c3bf29897c", "filename": "src/ci/docker/x86_64-gnu-incremental/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "7c136fa39bc8bb2accc5b5c0d1bd6dffcdf6e978", "filename": "src/ci/docker/x86_64-gnu-llvm-3.7/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.7%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -17,7 +17,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "4499736967cf49194a8c398d7b9a7b3968be804c", "filename": "src/ci/docker/x86_64-gnu-nopt/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-nopt%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "de85e1ff36af8ca3f2e5515afc1427c6fd9a216f", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -14,7 +14,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils\n \n RUN curl -o /usr/local/bin/sccache \\\n-      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-05-12-sccache-x86_64-unknown-linux-musl && \\\n       chmod +x /usr/local/bin/sccache\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "0a17bd3b5710f6430a2817704b7bbfdc51f95dfd", "filename": "src/ci/init_repo.sh", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1,96 @@\n+#!/bin/bash\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -o errexit\n+set -o pipefail\n+set -o nounset\n+\n+set -o xtrace\n+\n+ci_dir=$(cd $(dirname $0) && pwd)\n+. \"$ci_dir/shared.sh\"\n+\n+REPO_DIR=\"$1\"\n+CACHE_DIR=\"$2\"\n+\n+cache_src_dir=\"$CACHE_DIR/src\"\n+# If the layout of the cache directory changes, bump the number here\n+# (and anywhere else this file is referenced) so the cache is wiped\n+cache_valid_file=\"$CACHE_DIR/cache_valid1\"\n+\n+if [ ! -d \"$REPO_DIR\" -o ! -d \"$REPO_DIR/.git\" ]; then\n+    echo \"Error: $REPO_DIR does not exist or is not a git repo\"\n+    exit 1\n+fi\n+cd $REPO_DIR\n+if [ ! -d \"$CACHE_DIR\" ]; then\n+    echo \"Error: $CACHE_DIR does not exist or is not an absolute path\"\n+    exit 1\n+fi\n+\n+# Wipe the cache if it's not valid, or mark it as invalid while we update it\n+if [ ! -f \"$cache_valid_file\" ]; then\n+    rm -rf \"$CACHE_DIR\"\n+    mkdir \"$CACHE_DIR\"\n+else\n+    # Ignore errors while gathering information about the possible brokenness\n+    # of the git repo since our gathered info will tell us something is wrong\n+    set +o errexit\n+    stat_lines=$(cd \"$cache_src_dir\" && git status --porcelain | wc -l)\n+    stat_ec=$(cd \"$cache_src_dir\" && git status >/dev/null 2>&1; echo $?)\n+    set -o errexit\n+    if [ ! -d \"$cache_src_dir/.git\" -o $stat_lines != 0 -o $stat_ec != 0 ]; then\n+        # Something is badly wrong - the cache valid file is here, but something\n+        # about the git repo is fishy. Nuke it all, just in case\n+        echo \"WARNING: $cache_valid_file exists but bad repo: l:$stat_lines, ec:$stat_ec\"\n+        rm -rf \"$CACHE_DIR\"\n+        mkdir \"$CACHE_DIR\"\n+    else\n+        rm \"$cache_valid_file\"\n+    fi\n+fi\n+\n+# Update the cache (a pristine copy of the rust source master)\n+if [ ! -d \"$cache_src_dir/.git\" ]; then\n+    retry sh -c \"rm -rf $cache_src_dir && mkdir -p $cache_src_dir && \\\n+        git clone https://github.com/rust-lang/rust.git $cache_src_dir\"\n+fi\n+retry sh -c \"cd $cache_src_dir && git reset --hard && git pull\"\n+(cd $cache_src_dir && git rm src/llvm)\n+retry sh -c \"cd $cache_src_dir && \\\n+    git submodule deinit -f . && git submodule sync && git submodule update --init\"\n+\n+# Cache was updated without errors, mark it as valid\n+touch \"$cache_valid_file\"\n+\n+# Update the submodules of the repo we're in, using the pristine repo as\n+# a cache for any object files\n+# No, `git submodule foreach` won't work:\n+# http://stackoverflow.com/questions/12641469/list-submodules-in-a-git-repository\n+modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n+for module in $modules; do\n+    if [ \"$module\" = src/llvm ]; then\n+        commit=\"$(git ls-tree HEAD src/llvm | awk '{print $3}')\"\n+        git rm src/llvm\n+        curl -sSL -O \"https://github.com/rust-lang/llvm/archive/$commit.tar.gz\"\n+        tar -C src/ -xf \"$commit.tar.gz\"\n+        rm \"$commit.tar.gz\"\n+        mv \"src/llvm-$commit\" src/llvm\n+        continue\n+    fi\n+    if [ ! -d \"$cache_src_dir/$module\" ]; then\n+        echo \"WARNING: $module not found in pristine repo\"\n+        retry sh -c \"git submodule deinit -f $module && git submodule update --init $module\"\n+        continue\n+    fi\n+    retry sh -c \"git submodule deinit -f $module && \\\n+        git submodule update --init --reference $cache_src_dir/$module $module\"\n+done"}, {"sha": "c6510120b47ae7ec3fb500d71df5db6ba5dc52ff", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -24,10 +24,10 @@ ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n \n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-sccache\"\n-RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-quiet-tests\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-manage-submodules\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-locked-deps\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-cargo-openssl-static\"\n+RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-clean-rebuild\"\n \n if [ \"$DIST_SRC\" = \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-dist-src\""}, {"sha": "f2e13fc73ae4778930fcd635a8c85f21a9e91d7a", "filename": "src/ci/shared.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/bin/false\n # Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n@@ -9,13 +9,16 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+# This file is intended to be sourced with `. shared.sh` or\n+# `source shared.sh`, hence the invalid shebang and not being\n+# marked as an executable file in git.\n+\n # See http://unix.stackexchange.com/questions/82598\n function retry {\n+  echo \"Attempting with retry:\" \"$@\"\n   local n=1\n   local max=5\n-  local delay=15\n   while true; do\n-    echo \"Attempting:\" \"$@\"\n     \"$@\" && break || {\n       if [[ $n -lt $max ]]; then\n         ((n++))"}, {"sha": "c8a8767c56ad3d3f4eb45c87b95026936fb9aa35", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -1 +1 @@\n-Subproject commit d30da544a8afc5d78391dee270bdf40e74a215d3\n+Subproject commit c8a8767c56ad3d3f4eb45c87b95026936fb9aa35"}, {"sha": "97422981c53a00f7c3d6584d363443117f179fff", "filename": "src/doc/book", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=74751358e625878306aa193fed788e79aa53d4fa", "patch": "@@ -0,0 +1 @@\n+Subproject commit 97422981c53a00f7c3d6584d363443117f179fff"}, {"sha": "ade4d52c1eb318632af66c89c88fd8694513b0b1", "filename": "src/doc/book/src/README.md", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,39 +0,0 @@\n-# The Rust Programming Language\n-\n-Welcome! This book will teach you about the [Rust Programming Language][rust].\n-Rust is a systems programming language focused on three goals: safety, speed,\n-and concurrency. It maintains these goals without having a garbage collector,\n-making it a useful language for a number of use cases other languages aren\u2019t\n-good at: embedding in other languages, programs with specific space and time\n-requirements, and writing low-level code, like device drivers and operating\n-systems. It improves on current languages targeting this space by having a\n-number of compile-time safety checks that produce no runtime overhead, while\n-eliminating all data races. Rust also aims to achieve \u2018zero-cost abstractions\u2019\n-even though some of these abstractions feel like those of a high-level language.\n-Even then, Rust still allows precise control like a low-level language would.\n-\n-[rust]: https://www.rust-lang.org\n-\n-\u201cThe Rust Programming Language\u201d is split into chapters. This introduction\n-is the first. After this:\n-\n-* [Getting started][gs] - Set up your computer for Rust development.\n-* [Tutorial: Guessing Game][gg] - Learn some Rust with a small project.\n-* [Syntax and Semantics][ss] - Each bit of Rust, broken down into small chunks.\n-* [Effective Rust][er] - Higher-level concepts for writing excellent Rust code.\n-* [Glossary][gl] - A reference of terms used in the book.\n-* [Bibliography][bi] - Background on Rust's influences, papers about Rust.\n-\n-[gs]: getting-started.html\n-[gg]: guessing-game.html\n-[er]: effective-rust.html\n-[ss]: syntax-and-semantics.html\n-[gl]: glossary.html\n-[bi]: bibliography.html\n-\n-### Contributing\n-\n-The source files from which this book is generated can be found on\n-[GitHub][book].\n-\n-[book]: https://github.com/rust-lang/rust/tree/master/src/doc/book"}, {"sha": "c3763cdf9d6d7ad7f3a0706c8b1747c27d53b499", "filename": "src/doc/book/src/SUMMARY.md", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,60 +0,0 @@\n-# Summary\n-\n-[Introduction](README.md)\n-\n-* [Getting Started](getting-started.md)\n-* [Tutorial: Guessing Game](guessing-game.md)\n-* [Syntax and Semantics](syntax-and-semantics.md)\n-    * [Variable Bindings](variable-bindings.md)\n-    * [Functions](functions.md)\n-    * [Primitive Types](primitive-types.md)\n-    * [Comments](comments.md)\n-    * [if](if.md)\n-    * [Loops](loops.md)\n-    * [Vectors](vectors.md)\n-    * [Ownership](ownership.md)\n-    * [References and Borrowing](references-and-borrowing.md)\n-    * [Lifetimes](lifetimes.md)\n-    * [Mutability](mutability.md)\n-    * [Structs](structs.md)\n-    * [Enums](enums.md)\n-    * [Match](match.md)\n-    * [Patterns](patterns.md)\n-    * [Method Syntax](method-syntax.md)\n-    * [Strings](strings.md)\n-    * [Generics](generics.md)\n-    * [Traits](traits.md)\n-    * [Drop](drop.md)\n-    * [if let](if-let.md)\n-    * [Trait Objects](trait-objects.md)\n-    * [Closures](closures.md)\n-    * [Universal Function Call Syntax](ufcs.md)\n-    * [Crates and Modules](crates-and-modules.md)\n-    * [`const` and `static`](const-and-static.md)\n-    * [Attributes](attributes.md)\n-    * [`type` aliases](type-aliases.md)\n-    * [Casting between types](casting-between-types.md)\n-    * [Associated Types](associated-types.md)\n-    * [Unsized Types](unsized-types.md)\n-    * [Operators and Overloading](operators-and-overloading.md)\n-    * [Deref coercions](deref-coercions.md)\n-    * [Macros](macros.md)\n-    * [Raw Pointers](raw-pointers.md)\n-    * [`unsafe`](unsafe.md)\n-* [Effective Rust](effective-rust.md)\n-    * [The Stack and the Heap](the-stack-and-the-heap.md)\n-    * [Testing](testing.md)\n-    * [Conditional Compilation](conditional-compilation.md)\n-    * [Documentation](documentation.md)\n-    * [Iterators](iterators.md)\n-    * [Concurrency](concurrency.md)\n-    * [Error Handling](error-handling.md)\n-    * [Choosing your Guarantees](choosing-your-guarantees.md)\n-    * [FFI](ffi.md)\n-    * [Borrow and AsRef](borrow-and-asref.md)\n-    * [Release Channels](release-channels.md)\n-    * [Using Rust without the standard library](using-rust-without-the-standard-library.md)\n-    * [Procedural Macros (and custom derive)](procedural-macros.md)\n-* [Glossary](glossary.md)\n-* [Syntax Index](syntax-index.md)\n-* [Bibliography](bibliography.md)"}, {"sha": "4db2b9e5eec2000463020cae9b88547c065cd9fe", "filename": "src/doc/book/src/associated-types.md", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fassociated-types.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,202 +0,0 @@\n-# Associated Types\n-\n-Associated types are a powerful part of Rust\u2019s type system. They\u2019re related to\n-the idea of a \u2018type family\u2019, in other words, grouping multiple types together. That\n-description is a bit abstract, so let\u2019s dive right into an example. If you want\n-to write a `Graph` trait, you have two types to be generic over: the node type\n-and the edge type. So you might write a trait, `Graph<N, E>`, that looks like\n-this:\n-\n-```rust\n-trait Graph<N, E> {\n-    fn has_edge(&self, &N, &N) -> bool;\n-    fn edges(&self, &N) -> Vec<E>;\n-    // Etc.\n-}\n-```\n-\n-While this sort of works, it ends up being awkward. For example, any function\n-that wants to take a `Graph` as a parameter now _also_ needs to be generic over\n-the `N`ode and `E`dge types too:\n-\n-```rust,ignore\n-fn distance<N, E, G: Graph<N, E>>(graph: &G, start: &N, end: &N) -> u32 { ... }\n-```\n-\n-Our distance calculation works regardless of our `Edge` type, so the `E` stuff in\n-this signature is a distraction.\n-\n-What we really want to say is that a certain `E`dge and `N`ode type come together\n-to form each kind of `Graph`. We can do that with associated types:\n-\n-```rust\n-trait Graph {\n-    type N;\n-    type E;\n-\n-    fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-    fn edges(&self, &Self::N) -> Vec<Self::E>;\n-    // Etc.\n-}\n-```\n-\n-Now, our clients can be abstract over a given `Graph`:\n-\n-```rust,ignore\n-fn distance<G: Graph>(graph: &G, start: &G::N, end: &G::N) -> u32 { ... }\n-```\n-\n-No need to deal with the `E`dge type here!\n-\n-Let\u2019s go over all this in more detail.\n-\n-## Defining associated types\n-\n-Let\u2019s build that `Graph` trait. Here\u2019s the definition:\n-\n-```rust\n-trait Graph {\n-    type N;\n-    type E;\n-\n-    fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-    fn edges(&self, &Self::N) -> Vec<Self::E>;\n-}\n-```\n-\n-Simple enough. Associated types use the `type` keyword, and go inside the body\n-of the trait, with the functions.\n-\n-These type declarations work the same way as those for functions. For example,\n-if we wanted our `N` type to implement `Display`, so we can print the nodes out,\n-we could do this:\n-\n-```rust\n-use std::fmt;\n-\n-trait Graph {\n-    type N: fmt::Display;\n-    type E;\n-\n-    fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-    fn edges(&self, &Self::N) -> Vec<Self::E>;\n-}\n-```\n-\n-## Implementing associated types\n-\n-Just like any trait, traits that use associated types use the `impl` keyword to\n-provide implementations. Here\u2019s a simple implementation of Graph:\n-\n-```rust\n-# trait Graph {\n-#     type N;\n-#     type E;\n-#     fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-#     fn edges(&self, &Self::N) -> Vec<Self::E>;\n-# }\n-struct Node;\n-\n-struct Edge;\n-\n-struct MyGraph;\n-\n-impl Graph for MyGraph {\n-    type N = Node;\n-    type E = Edge;\n-\n-    fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n-        true\n-    }\n-\n-    fn edges(&self, n: &Node) -> Vec<Edge> {\n-        Vec::new()\n-    }\n-}\n-```\n-\n-This silly implementation always returns `true` and an empty `Vec<Edge>`, but it\n-gives you an idea of how to implement this kind of thing. We first need three\n-`struct`s, one for the graph, one for the node, and one for the edge. If it made\n-more sense to use a different type, that would work as well, we\u2019re going to\n-use `struct`s for all three here.\n-\n-Next is the `impl` line, which is an implementation like any other trait.\n-\n-From here, we use `=` to define our associated types. The name the trait uses\n-goes on the left of the `=`, and the concrete type we\u2019re `impl`ementing this\n-for goes on the right. Finally, we use the concrete types in our function\n-declarations.\n-\n-## Trait objects with associated types\n-\n-There\u2019s one more bit of syntax we should talk about: trait objects. If you\n-try to create a trait object from a trait with an associated type, like this:\n-\n-```rust,ignore\n-# trait Graph {\n-#     type N;\n-#     type E;\n-#     fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-#     fn edges(&self, &Self::N) -> Vec<Self::E>;\n-# }\n-# struct Node;\n-# struct Edge;\n-# struct MyGraph;\n-# impl Graph for MyGraph {\n-#     type N = Node;\n-#     type E = Edge;\n-#     fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n-#         true\n-#     }\n-#     fn edges(&self, n: &Node) -> Vec<Edge> {\n-#         Vec::new()\n-#     }\n-# }\n-let graph = MyGraph;\n-let obj = Box::new(graph) as Box<Graph>;\n-```\n-\n-You\u2019ll get two errors:\n-\n-```text\n-error: the value of the associated type `E` (from the trait `main::Graph`) must\n-be specified [E0191]\n-let obj = Box::new(graph) as Box<Graph>;\n-          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-24:44 error: the value of the associated type `N` (from the trait\n-`main::Graph`) must be specified [E0191]\n-let obj = Box::new(graph) as Box<Graph>;\n-          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-```\n-\n-We can\u2019t create a trait object like this, because we don\u2019t know the associated\n-types. Instead, we can write this:\n-\n-```rust\n-# trait Graph {\n-#     type N;\n-#     type E;\n-#     fn has_edge(&self, &Self::N, &Self::N) -> bool;\n-#     fn edges(&self, &Self::N) -> Vec<Self::E>;\n-# }\n-# struct Node;\n-# struct Edge;\n-# struct MyGraph;\n-# impl Graph for MyGraph {\n-#     type N = Node;\n-#     type E = Edge;\n-#     fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n-#         true\n-#     }\n-#     fn edges(&self, n: &Node) -> Vec<Edge> {\n-#         Vec::new()\n-#     }\n-# }\n-let graph = MyGraph;\n-let obj = Box::new(graph) as Box<Graph<N=Node, E=Edge>>;\n-```\n-\n-The `N=Node` syntax allows us to provide a concrete type, `Node`, for the `N`\n-type parameter. Same with `E=Edge`. If we didn\u2019t provide this constraint, we\n-couldn\u2019t be sure which `impl` to match this trait object to."}, {"sha": "103ec39aa38a50789f31d073d082eb3b5a6b04ca", "filename": "src/doc/book/src/attributes.md", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fattributes.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,70 +0,0 @@\n-# Attributes\n-\n-Declarations can be annotated with \u2018attributes\u2019 in Rust. They look like this:\n-\n-```rust\n-#[test]\n-# fn foo() {}\n-```\n-\n-or like this:\n-\n-```rust\n-# mod foo {\n-#![test]\n-# }\n-```\n-\n-The difference between the two is the `!`, which changes what the attribute\n-applies to:\n-\n-```rust,ignore\n-#[foo]\n-struct Foo;\n-\n-mod bar {\n-    #![bar]\n-}\n-```\n-\n-The `#[foo]` attribute applies to the next item, which is the `struct`\n-declaration. The `#![bar]` attribute applies to the item enclosing it, which is\n-the `mod` declaration. Otherwise, they\u2019re the same. Both change the meaning of\n-the item they\u2019re attached to somehow.\n-\n-For example, consider a function like this:\n-\n-```rust\n-#[test]\n-fn check() {\n-    assert_eq!(2, 1 + 1);\n-}\n-```\n-\n-It is marked with `#[test]`. This means it\u2019s special: when you run\n-[tests][tests], this function will execute. When you compile as usual, it won\u2019t\n-even be included. This function is now a test function.\n-\n-[tests]: testing.html\n-\n-Attributes may also have additional data:\n-\n-```rust\n-#[inline(always)]\n-fn super_fast_fn() {\n-# }\n-```\n-\n-Or even keys and values:\n-\n-```rust\n-#[cfg(target_os = \"macos\")]\n-mod macos_only {\n-# }\n-```\n-\n-Rust attributes are used for a number of different things. There is a full list\n-of attributes [in the reference][reference]. Currently, you are not allowed to\n-create your own attributes, the Rust compiler defines them.\n-\n-[reference]: ../reference/attributes.html"}, {"sha": "07b2aa94a77463fa279641cc15d0b7febed28901", "filename": "src/doc/book/src/bibliography.md", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fbibliography.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fbibliography.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fbibliography.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,83 +0,0 @@\n-# Bibliography\n-\n-This is a reading list of material relevant to Rust. It includes prior\n-research that has - at one time or another - influenced the design of\n-Rust, as well as publications about Rust.\n-\n-### Type system\n-\n-* [Region based memory management in Cyclone](http://209.68.42.137/ucsd-pages/Courses/cse227.w03/handouts/cyclone-regions.pdf)\n-* [Safe manual memory management in Cyclone](http://www.cs.umd.edu/projects/PL/cyclone/scp.pdf)\n-* [Typeclasses: making ad-hoc polymorphism less ad hoc](http://www.ps.uni-sb.de/courses/typen-ws99/class.ps.gz)\n-* [Macros that work together](https://www.cs.utah.edu/plt/publications/jfp12-draft-fcdf.pdf)\n-* [Traits: composable units of behavior](http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf)\n-* [Alias burying](http://www.cs.uwm.edu/faculty/boyland/papers/unique-preprint.ps) - We tried something similar and abandoned it.\n-* [External uniqueness is unique enough](http://www.cs.uu.nl/research/techreps/UU-CS-2002-048.html)\n-* [Uniqueness and Reference Immutability for Safe Parallelism](https://research.microsoft.com/pubs/170528/msr-tr-2012-79.pdf)\n-* [Region Based Memory Management](http://www.cs.ucla.edu/~palsberg/tba/papers/tofte-talpin-iandc97.pdf)\n-\n-### Concurrency\n-\n-* [Singularity: rethinking the software stack](https://research.microsoft.com/pubs/69431/osr2007_rethinkingsoftwarestack.pdf)\n-* [Language support for fast and reliable message passing in singularity OS](https://research.microsoft.com/pubs/67482/singsharp.pdf)\n-* [Scheduling multithreaded computations by work stealing](http://supertech.csail.mit.edu/papers/steal.pdf)\n-* [Thread scheduling for multiprogramming multiprocessors](http://www.eecis.udel.edu/%7Ecavazos/cisc879-spring2008/papers/arora98thread.pdf)\n-* [The data locality of work stealing](http://www.aladdin.cs.cmu.edu/papers/pdfs/y2000/locality_spaa00.pdf)\n-* [Dynamic circular work stealing deque](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.170.1097&rep=rep1&type=pdf) - The Chase/Lev deque\n-* [Work-first and help-first scheduling policies for async-finish task parallelism](http://www.cs.rice.edu/%7Eyguo/pubs/PID824943.pdf) - More general than fully-strict work stealing\n-* [A Java fork/join calamity](http://www.coopsoft.com/ar/CalamityArticle.html) - critique of Java's fork/join library, particularly its application of work stealing to non-strict computation\n-* [Scheduling techniques for concurrent systems](http://www.stanford.edu/~ouster/cgi-bin/papers/coscheduling.pdf)\n-* [Contention aware scheduling](http://www.blagodurov.net/files/a8-blagodurov.pdf)\n-* [Balanced work stealing for time-sharing multicores](http://www.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-12-1.pdf)\n-* [Three layer cake for shared-memory programming](http://dl.acm.org/citation.cfm?id=1953616&dl=ACM&coll=DL&CFID=524387192&CFTOKEN=44362705)\n-* [Non-blocking steal-half work queues](http://www.cs.bgu.ac.il/%7Ehendlerd/papers/p280-hendler.pdf)\n-* [Reagents: expressing and composing fine-grained concurrency](http://www.mpi-sws.org/~turon/reagents.pdf)\n-* [Algorithms for scalable synchronization of shared-memory multiprocessors](https://www.cs.rochester.edu/u/scott/papers/1991_TOCS_synch.pdf)\n-* [Epoch-based reclamation](https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-579.pdf).\n-\n-### Others\n-\n-* [Crash-only software](https://www.usenix.org/legacy/events/hotos03/tech/full_papers/candea/candea.pdf)\n-* [Composing High-Performance Memory Allocators](http://people.cs.umass.edu/~emery/pubs/berger-pldi2001.pdf)\n-* [Reconsidering Custom Memory Allocation](http://people.cs.umass.edu/~emery/pubs/berger-oopsla2002.pdf)\n-\n-### Papers *about* Rust\n-\n-* [GPU Programming in Rust: Implementing High Level Abstractions in a\n-Systems Level\n-Language](http://www.cs.indiana.edu/~eholk/papers/hips2013.pdf). Early GPU work by Eric Holk.\n-* [Parallel closures: a new twist on an old\n-  idea](https://www.usenix.org/conference/hotpar12/parallel-closures-new-twist-old-idea)\n-  - not exactly about Rust, but by nmatsakis\n-* [Patina: A Formalization of the Rust Programming\n-  Language](ftp://ftp.cs.washington.edu/tr/2015/03/UW-CSE-15-03-02.pdf). Early\n-  formalization of a subset of the type system, by Eric Reed.\n-* [Experience Report: Developing the Servo Web Browser Engine using\n-  Rust](http://arxiv.org/abs/1505.07383). By Lars Bergstrom.\n-* [Implementing a Generic Radix Trie in\n-  Rust](https://michaelsproul.github.io/rust_radix_paper/rust-radix-sproul.pdf). Undergrad\n-  paper by Michael Sproul.\n-* [Reenix: Implementing a Unix-Like Operating System in\n-  Rust](http://scialex.github.io/reenix.pdf). Undergrad paper by Alex\n-  Light.\n-* [Evaluation of performance and productivity metrics of potential\n-  programming languages in the HPC environment]\n-  (http://octarineparrot.com/assets/mrfloya-thesis-ba.pdf).\n-  Bachelor's thesis by Florian Wilkens. Compares C, Go and Rust.\n-* [Nom, a byte oriented, streaming, zero copy, parser combinators library\n-  in Rust](http://spw15.langsec.org/papers/couprie-nom.pdf). By\n-  Geoffroy Couprie, research for VLC.\n-* [Graph-Based Higher-Order Intermediate\n-  Representation](http://compilers.cs.uni-saarland.de/papers/lkh15_cgo.pdf). An\n-  experimental IR implemented in Impala, a Rust-like language.\n-* [Code Refinement of Stencil\n-  Codes](http://compilers.cs.uni-saarland.de/papers/ppl14_web.pdf). Another\n-  paper using Impala.\n-* [Parallelization in Rust with fork-join and\n-  friends](http://publications.lib.chalmers.se/records/fulltext/219016/219016.pdf). Linus\n-  Farnstrand's master's thesis.\n-* [Session Types for\n-  Rust](http://munksgaard.me/papers/laumann-munksgaard-larsen.pdf). Philip\n-  Munksgaard's master's thesis. Research for Servo.\n-* [Ownership is Theft: Experiences Building an Embedded OS in Rust - Amit Levy, et. al.](http://amitlevy.com/papers/tock-plos2015.pdf)\n-* [You can't spell trust without Rust](https://raw.githubusercontent.com/Gankro/thesis/master/thesis.pdf). Alexis Beingessner's master's thesis."}, {"sha": "a6e396571c685f9b05fa8b96c786568201cab8b8", "filename": "src/doc/book/src/borrow-and-asref.md", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fborrow-and-asref.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fborrow-and-asref.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fborrow-and-asref.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,93 +0,0 @@\n-# Borrow and AsRef\n-\n-The [`Borrow`][borrow] and [`AsRef`][asref] traits are very similar, but\n-different. Here\u2019s a quick refresher on what these two traits mean.\n-\n-[borrow]: ../std/borrow/trait.Borrow.html\n-[asref]: ../std/convert/trait.AsRef.html\n-\n-# Borrow\n-\n-The `Borrow` trait is used when you\u2019re writing a data structure, and you want to\n-use either an owned or borrowed type as synonymous for some purpose.\n-\n-For example, [`HashMap`][hashmap] has a [`get` method][get] which uses `Borrow`:\n-\n-```rust,ignore\n-fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n-    where K: Borrow<Q>,\n-          Q: Hash + Eq\n-```\n-\n-[hashmap]: ../std/collections/struct.HashMap.html\n-[get]: ../std/collections/struct.HashMap.html#method.get\n-\n-This signature is pretty complicated. The `K` parameter is what we\u2019re interested\n-in here. It refers to a parameter of the `HashMap` itself:\n-\n-```rust,ignore\n-struct HashMap<K, V, S = RandomState> {\n-```\n-\n-The `K` parameter is the type of _key_ the `HashMap` uses. So, looking at\n-the signature of `get()` again, we can use `get()` when the key implements\n-`Borrow<Q>`. That way, we can make a `HashMap` which uses `String` keys,\n-but use `&str`s when we\u2019re searching:\n-\n-```rust\n-use std::collections::HashMap;\n-\n-let mut map = HashMap::new();\n-map.insert(\"Foo\".to_string(), 42);\n-\n-assert_eq!(map.get(\"Foo\"), Some(&42));\n-```\n-\n-This is because the standard library has `impl Borrow<str> for String`.\n-\n-For most types, when you want to take an owned or borrowed type, a `&T` is\n-enough. But one area where `Borrow` is effective is when there\u2019s more than one\n-kind of borrowed value. This is especially true of references and slices: you\n-can have both an `&T` or a `&mut T`. If we wanted to accept both of these types,\n-`Borrow` is up for it:\n-\n-```rust\n-use std::borrow::Borrow;\n-use std::fmt::Display;\n-\n-fn foo<T: Borrow<i32> + Display>(a: T) {\n-    println!(\"a is borrowed: {}\", a);\n-}\n-\n-let mut i = 5;\n-\n-foo(&i);\n-foo(&mut i);\n-```\n-\n-This will print out `a is borrowed: 5` twice.\n-\n-# AsRef\n-\n-The `AsRef` trait is a conversion trait. It\u2019s used for converting some value to\n-a reference in generic code. Like this:\n-\n-```rust\n-let s = \"Hello\".to_string();\n-\n-fn foo<T: AsRef<str>>(s: T) {\n-    let slice = s.as_ref();\n-}\n-```\n-\n-# Which should I use?\n-\n-We can see how they\u2019re kind of the same: they both deal with owned and borrowed\n-versions of some type. However, they\u2019re a bit different.\n-\n-Choose `Borrow` when you want to abstract over different kinds of borrowing, or\n-when you\u2019re building a data structure that treats owned and borrowed values in\n-equivalent ways, such as hashing and comparison.\n-\n-Choose `AsRef` when you want to convert something to a reference directly, and\n-you\u2019re writing generic code."}, {"sha": "26cd718475eab896f06f97a57428b47568f8afc1", "filename": "src/doc/book/src/casting-between-types.md", "status": "removed", "additions": 0, "deletions": 204, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,204 +0,0 @@\n-# Casting Between Types\n-\n-Rust, with its focus on safety, provides two different ways of casting\n-different types between each other. The first, `as`, is for safe casts.\n-In contrast, `transmute` allows for arbitrary casting, and is one of the\n-most dangerous features of Rust!\n-\n-# Coercion\n-\n-Coercion between types is implicit and has no syntax of its own, but can\n-be spelled out with [`as`](#explicit-coercions).\n-\n-Coercion occurs in `let`, `const`, and `static` statements; in\n-function call arguments; in field values in struct initialization; and in a\n-function result.\n-\n-The most common case of coercion is removing mutability from a reference:\n-\n-* `&mut T` to `&T`\n-\n-An analogous conversion is to remove mutability from a\n-[raw pointer](raw-pointers.html):\n-\n-* `*mut T` to `*const T`\n-\n-References can also be coerced to raw pointers:\n-\n-* `&T` to `*const T`\n-\n-* `&mut T` to `*mut T`\n-\n-Custom coercions may be defined using [`Deref`](deref-coercions.html).\n-\n-Coercion is transitive.\n-\n-# `as`\n-\n-The `as` keyword does safe casting:\n-\n-```rust\n-let x: i32 = 5;\n-\n-let y = x as i64;\n-```\n-\n-There are three major categories of safe cast: explicit coercions, casts\n-between numeric types, and pointer casts.\n-\n-Casting is not transitive: even if `e as U1 as U2` is a valid\n-expression, `e as U2` is not necessarily so (in fact it will only be valid if\n-`U1` coerces to `U2`).\n-\n-\n-## Explicit coercions\n-\n-A cast `e as U` is valid if `e` has type `T` and `T` *coerces* to `U`.\n-\n-## Numeric casts\n-\n-A cast `e as U` is also valid in any of the following cases:\n-\n-* `e` has type `T` and `T` and `U` are any numeric types; *numeric-cast*\n-* `e` is a C-like enum (with no data attached to the variants),\n-   and `U` is an integer type; *enum-cast*\n-* `e` has type `bool` or `char` and `U` is an integer type; *prim-int-cast*\n-* `e` has type `u8` and `U` is `char`; *u8-char-cast*\n-\n-For example\n-\n-```rust\n-let one = true as u8;\n-let at_sign = 64 as char;\n-let two_hundred = -56i8 as u8;\n-```\n-\n-The semantics of numeric casts are:\n-\n-* Casting between two integers of the same size (e.g. i32 -> u32) is a no-op\n-* Casting from a larger integer to a smaller integer (e.g. u32 -> u8) will\n-  truncate\n-* Casting from a smaller integer to a larger integer (e.g. u8 -> u32) will\n-    * zero-extend if the source is unsigned\n-    * sign-extend if the source is signed\n-* Casting from a float to an integer will round the float towards zero\n-    * **[NOTE: currently this will cause Undefined Behavior if the rounded\n-      value cannot be represented by the target integer type][float-int]**.\n-      This includes Inf and NaN. This is a bug and will be fixed.\n-* Casting from an integer to float will produce the floating point\n-  representation of the integer, rounded if necessary (rounding strategy\n-  unspecified)\n-* Casting from an f32 to an f64 is perfect and lossless\n-* Casting from an f64 to an f32 will produce the closest possible value\n-  (rounding strategy unspecified)\n-    * **[NOTE: currently this will cause Undefined Behavior if the value\n-      is finite but larger or smaller than the largest or smallest finite\n-      value representable by f32][float-float]**. This is a bug and will\n-      be fixed.\n-\n-[float-int]: https://github.com/rust-lang/rust/issues/10184\n-[float-float]: https://github.com/rust-lang/rust/issues/15536\n-\n-## Pointer casts\n-\n-Perhaps surprisingly, it is safe to cast [raw pointers](raw-pointers.html) to and\n-from integers, and to cast between pointers to different types subject to\n-some constraints. It is only unsafe to dereference the pointer:\n-\n-```rust\n-let a = 300 as *const char; // `a` is a pointer to location 300.\n-let b = a as u32;\n-```\n-\n-`e as U` is a valid pointer cast in any of the following cases:\n-\n-* `e` has type `*T`, `U` has type `*U_0`, and either `U_0: Sized` or\n-  `unsize_kind(T) == unsize_kind(U_0)`; a *ptr-ptr-cast*\n-\n-* `e` has type `*T` and `U` is a numeric type, while `T: Sized`; *ptr-addr-cast*\n-\n-* `e` is an integer and `U` is `*U_0`, while `U_0: Sized`; *addr-ptr-cast*\n-\n-* `e` has type `&[T; n]` and `U` is `*const T`; *array-ptr-cast*\n-\n-* `e` is a function pointer type and `U` has type `*T`,\n-  while `T: Sized`; *fptr-ptr-cast*\n-\n-* `e` is a function pointer type and `U` is an integer; *fptr-addr-cast*\n-\n-\n-# `transmute`\n-\n-`as` only allows safe casting, and will for example reject an attempt to\n-cast four bytes into a `u32`:\n-\n-```rust,ignore\n-let a = [0u8, 0u8, 0u8, 0u8];\n-\n-let b = a as u32; // Four u8s makes a u32.\n-```\n-\n-This errors with:\n-\n-```text\n-error: non-scalar cast: `[u8; 4]` as `u32`\n-let b = a as u32; // Four u8s makes a u32.\n-        ^~~~~~~~\n-```\n-\n-This is a \u2018non-scalar cast\u2019 because we have multiple values here: the four\n-elements of the array. These kinds of casts are very dangerous, because they\n-make assumptions about the way that multiple underlying structures are\n-implemented. For this, we need something more dangerous.\n-\n-The `transmute` function is very simple, but very scary. It tells Rust to treat\n-a value of one type as though it were another type. It does this regardless of\n-the typechecking system, and completely trusts you.\n-\n-In our previous example, we know that an array of four `u8`s represents a `u32`\n-properly, and so we want to do the cast. Using `transmute` instead of `as`,\n-Rust lets us:\n-\n-```rust\n-use std::mem;\n-\n-fn main() {\n-    unsafe {\n-        let a = [0u8, 1u8, 0u8, 0u8];\n-        let b = mem::transmute::<[u8; 4], u32>(a);\n-        println!(\"{}\", b); // 256\n-        // Or, more concisely:\n-        let c: u32 = mem::transmute(a);\n-        println!(\"{}\", c); // 256\n-    }\n-}\n-```\n-\n-We have to wrap the operation in an `unsafe` block for this to compile\n-successfully. Technically, only the `mem::transmute` call itself needs to be in\n-the block, but it's nice in this case to enclose everything related, so you\n-know where to look. In this case, the details about `a` are also important, and\n-so they're in the block. You'll see code in either style, sometimes the context\n-is too far away, and wrapping all of the code in `unsafe` isn't a great idea.\n-\n-While `transmute` does very little checking, it will at least make sure that\n-the types are the same size. This errors:\n-\n-```rust,ignore\n-use std::mem;\n-\n-unsafe {\n-    let a = [0u8, 0u8, 0u8, 0u8];\n-\n-    let b = mem::transmute::<[u8; 4], u64>(a);\n-}\n-```\n-\n-with:\n-\n-```text\n-error: transmute called with differently sized types: [u8; 4] (32 bits) to u64\n-(64 bits)\n-```\n-\n-Other than that, you're on your own!"}, {"sha": "b743fda354692a44400c2c21ae0fb71c2d5a30d5", "filename": "src/doc/book/src/chapter_1.md", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fchapter_1.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1 +0,0 @@\n-# Chapter 1"}, {"sha": "89dd09e67048121341a50438354ef9618312fdc4", "filename": "src/doc/book/src/choosing-your-guarantees.md", "status": "removed", "additions": 0, "deletions": 360, "changes": 360, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fchoosing-your-guarantees.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fchoosing-your-guarantees.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fchoosing-your-guarantees.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,360 +0,0 @@\n-# Choosing your Guarantees\n-\n-One important feature of Rust is that it lets us control the costs and guarantees\n-of a program.\n-\n-There are various &ldquo;wrapper type&rdquo; abstractions in the Rust standard library which embody\n-a multitude of tradeoffs between cost, ergonomics, and guarantees. Many let one choose between\n-run time and compile time enforcement. This section will explain a few selected abstractions in\n-detail.\n-\n-Before proceeding, it is highly recommended that one reads about [ownership][ownership] and\n-[borrowing][borrowing] in Rust.\n-\n-[ownership]: ownership.html\n-[borrowing]: references-and-borrowing.html\n-\n-# Basic pointer types\n-\n-## `Box<T>`\n-\n-[`Box<T>`][box] is an &ldquo;owned&rdquo; pointer, or a &ldquo;box&rdquo;. While it can hand\n-out references to the contained data, it is the only owner of the data. In particular, consider\n-the following:\n-\n-```rust\n-let x = Box::new(1);\n-let y = x;\n-// `x` is no longer accessible here.\n-```\n-\n-Here, the box was _moved_ into `y`. As `x` no longer owns it, the compiler will no longer allow the\n-programmer to use `x` after this. A box can similarly be moved _out_ of a function by returning it.\n-\n-When a box (that hasn't been moved) goes out of scope, destructors are run. These destructors take\n-care of deallocating the inner data.\n-\n-This is a zero-cost abstraction for dynamic allocation. If you want to allocate some memory on the\n-heap and safely pass around a pointer to that memory, this is ideal. Note that you will only be\n-allowed to share references to this by the regular borrowing rules, checked at compile time.\n-\n-[box]: ../std/boxed/struct.Box.html\n-\n-## `&T` and `&mut T`\n-\n-These are immutable and mutable references respectively. They follow the &ldquo;read-write lock&rdquo;\n-pattern, such that one may either have only one mutable reference to some data, or any number of\n-immutable ones, but not both. This guarantee is enforced at compile time, and has no visible cost at\n-runtime. In most cases these two pointer types suffice for sharing cheap references between sections\n-of code.\n-\n-These pointers cannot be copied in such a way that they outlive the lifetime associated with them.\n-\n-## `*const T` and `*mut T`\n-\n-These are C-like raw pointers with no lifetime or ownership attached to them. They point to\n-some location in memory with no other restrictions. The only guarantee that these provide is that\n-they cannot be dereferenced except in code marked `unsafe`.\n-\n-These are useful when building safe, low cost abstractions like `Vec<T>`, but should be avoided in\n-safe code.\n-\n-## `Rc<T>`\n-\n-This is the first wrapper we will cover that has a runtime cost.\n-\n-[`Rc<T>`][rc] is a reference counted pointer. In other words, this lets us have multiple \"owning\"\n-pointers to the same data, and the data will be dropped (destructors will be run) when all pointers\n-are out of scope.\n-\n-Internally, it contains a shared &ldquo;reference count&rdquo; (also called &ldquo;refcount&rdquo;),\n-which is incremented each time the `Rc` is cloned, and decremented each time one of the `Rc`s goes\n-out of scope. The main responsibility of `Rc<T>` is to ensure that destructors are called for shared\n-data.\n-\n-The internal data here is immutable, and if a cycle of references is created, the data will be\n-leaked. If we want data that doesn't leak when there are cycles, we need a garbage collector.\n-\n-#### Guarantees\n-\n-The main guarantee provided here is that the data will not be destroyed until all references to it\n-are out of scope.\n-\n-This should be used when we wish to dynamically allocate and share some data (read-only) between\n-various portions of your program, where it is not certain which portion will finish using the pointer\n-last. It's a viable alternative to `&T` when `&T` is either impossible to statically check for\n-correctness, or creates extremely unergonomic code where the programmer does not wish to spend the\n-development cost of working with.\n-\n-This pointer is _not_ thread safe, and Rust will not let it be sent or shared with other threads.\n-This lets one avoid the cost of atomics in situations where they are unnecessary.\n-\n-There is a sister smart pointer to this one, `Weak<T>`. This is a non-owning, but also non-borrowed,\n-smart pointer. It is also similar to `&T`, but it is not restricted in lifetime&mdash;a `Weak<T>`\n-can be held on to forever. However, it is possible that an attempt to access the inner data may fail\n-and return `None`, since this can outlive the owned `Rc`s. This is useful for cyclic\n-data structures and other things.\n-\n-#### Cost\n-\n-As far as memory goes, `Rc<T>` is a single allocation, though it will allocate two extra words (i.e.\n-two `usize` values) as compared to a regular `Box<T>` (for \"strong\" and \"weak\" refcounts).\n-\n-`Rc<T>` has the computational cost of incrementing/decrementing the refcount whenever it is cloned\n-or goes out of scope respectively. Note that a clone will not do a deep copy, rather it will simply\n-increment the inner reference count and return a copy of the `Rc<T>`.\n-\n-[rc]: ../std/rc/struct.Rc.html\n-\n-# Cell types\n-\n-`Cell`s provide interior mutability. In other words, they contain data which can be manipulated even\n-if the type cannot be obtained in a mutable form (for example, when it is behind an `&`-ptr or\n-`Rc<T>`).\n-\n-[The documentation for the `cell` module has a pretty good explanation for these][cell-mod].\n-\n-These types are _generally_ found in struct fields, but they may be found elsewhere too.\n-\n-## `Cell<T>`\n-\n-[`Cell<T>`][cell] is a type that provides zero-cost interior mutability by moving data in and\n-out of the cell.\n-Since the compiler knows that all the data owned by the contained value is on the stack, there's\n-no worry of leaking any data behind references (or worse!) by simply replacing the data.\n-\n-It is still possible to violate your own invariants using this wrapper, so be careful when using it.\n-If a field is wrapped in `Cell`, it's a nice indicator that the chunk of data is mutable and may not\n-stay the same between the time you first read it and when you intend to use it.\n-\n-```rust\n-use std::cell::Cell;\n-\n-let x = Cell::new(1);\n-let y = &x;\n-let z = &x;\n-x.set(2);\n-y.set(3);\n-z.set(4);\n-println!(\"{}\", x.get());\n-```\n-\n-Note that here we were able to mutate the same value from various immutable references.\n-\n-This has the same runtime cost as the following:\n-\n-```rust,ignore\n-let mut x = 1;\n-let y = &mut x;\n-let z = &mut x;\n-x = 2;\n-*y = 3;\n-*z = 4;\n-println!(\"{}\", x);\n-```\n-\n-but it has the added benefit of actually compiling successfully.\n-\n-#### Guarantees\n-\n-This relaxes the &ldquo;no aliasing with mutability&rdquo; restriction in places where it's\n-unnecessary. However, this also relaxes the guarantees that the restriction provides; so if your\n-invariants depend on data stored within `Cell`, you should be careful.\n-\n-This is useful for mutating primitives and other types when there is no easy way of\n-doing it in line with the static rules of `&` and `&mut`.\n-\n-`Cell` does not let you obtain interior references to the data, which makes it safe to freely\n-mutate.\n-\n-#### Cost\n-\n-There is no runtime cost to using `Cell<T>`, however if you are using it to wrap larger\n-structs, it might be worthwhile to instead wrap individual fields in `Cell<T>` since each write is\n-otherwise a full copy of the struct.\n-\n-\n-## `RefCell<T>`\n-\n-[`RefCell<T>`][refcell] also provides interior mutability, but doesn't move data in and out of the\n-cell.\n-\n-However, it has a runtime cost. `RefCell<T>` enforces the read-write lock pattern at runtime (it's\n-like a single-threaded mutex), unlike `&T`/`&mut T` which do so at compile time. This is done by the\n-`borrow()` and `borrow_mut()` functions, which modify an internal reference count and return smart\n-pointers which can be dereferenced immutably and mutably respectively. The refcount is restored when\n-the smart pointers go out of scope. With this system, we can dynamically ensure that there are never\n-any other borrows active when a mutable borrow is active. If the programmer attempts to make such a\n-borrow, the thread will panic.\n-\n-```rust\n-use std::cell::RefCell;\n-\n-let x = RefCell::new(vec![1,2,3,4]);\n-{\n-    println!(\"{:?}\", *x.borrow())\n-}\n-\n-{\n-    let mut my_ref = x.borrow_mut();\n-    my_ref.push(1);\n-}\n-```\n-\n-Similar to `Cell`, this is mainly useful for situations where it's hard or impossible to satisfy the\n-borrow checker. Generally we know that such mutations won't happen in a nested form, but it's good\n-to check.\n-\n-For large, complicated programs, it becomes useful to put some things in `RefCell`s to make things\n-simpler. For example, a lot of the maps in the `ctxt` struct in the Rust compiler internals\n-are inside this wrapper. These are only modified once (during creation, which is not right after\n-initialization) or a couple of times in well-separated places. However, since this struct is\n-pervasively used everywhere, juggling mutable and immutable pointers would be hard (perhaps\n-impossible) and probably form a soup of `&`-ptrs which would be hard to extend. On the other hand,\n-the `RefCell` provides a cheap (not zero-cost) way of safely accessing these. In the future, if\n-someone adds some code that attempts to modify the cell when it's already borrowed, it will cause a\n-(usually deterministic) panic which can be traced back to the offending borrow.\n-\n-Similarly, in Servo's DOM there is a lot of mutation, most of which is local to a DOM type, but some\n-of which crisscrosses the DOM and modifies various things. Using `RefCell` and `Cell` to guard all\n-mutation lets us avoid worrying about mutability everywhere, and it simultaneously highlights the\n-places where mutation is _actually_ happening.\n-\n-Note that `RefCell` should be avoided if a mostly simple solution is possible with `&` pointers.\n-\n-#### Guarantees\n-\n-`RefCell` relaxes the _static_ restrictions preventing aliased mutation, and replaces them with\n-_dynamic_ ones. As such the guarantees have not changed.\n-\n-#### Cost\n-\n-`RefCell` does not allocate, but it contains an additional \"borrow state\"\n-indicator (one word in size) along with the data.\n-\n-At runtime each borrow causes a modification/check of the refcount.\n-\n-[cell-mod]: ../std/cell/index.html\n-[cell]: ../std/cell/struct.Cell.html\n-[refcell]: ../std/cell/struct.RefCell.html\n-\n-# Synchronous types\n-\n-Many of the types above cannot be used in a threadsafe manner. Particularly, `Rc<T>` and\n-`RefCell<T>`, which both use non-atomic reference counts (_atomic_ reference counts are those which\n-can be incremented from multiple threads without causing a data race), cannot be used this way. This\n-makes them cheaper to use, but we need thread safe versions of these too. They exist, in the form of\n-`Arc<T>` and `Mutex<T>`/`RwLock<T>`\n-\n-Note that the non-threadsafe types _cannot_ be sent between threads, and this is checked at compile\n-time.\n-\n-There are many useful wrappers for concurrent programming in the [sync][sync] module, but only the\n-major ones will be covered below.\n-\n-[sync]: ../std/sync/index.html\n-\n-## `Arc<T>`\n-\n-[`Arc<T>`][arc] is a version of `Rc<T>` that uses an atomic reference count (hence, \"Arc\").\n-This can be sent freely between threads.\n-\n-C++'s `shared_ptr` is similar to `Arc`, however in the case of C++ the inner data is always mutable.\n-For semantics similar to that from C++, we should use `Arc<Mutex<T>>`, `Arc<RwLock<T>>`, or\n-`Arc<UnsafeCell<T>>`[^4] (`UnsafeCell<T>` is a cell type that can be used to hold any data and has\n-no runtime cost, but accessing it requires `unsafe` blocks). The last one should only be used if we\n-are certain that the usage won't cause any memory unsafety. Remember that writing to a struct is not\n-an atomic operation, and many functions like `vec.push()` can reallocate internally and cause unsafe\n-behavior, so even monotonicity may not be enough to justify `UnsafeCell`.\n-\n-[^4]: `Arc<UnsafeCell<T>>` actually won't compile since `UnsafeCell<T>` isn't `Send` or `Sync`, but we can wrap it in a type and implement `Send`/`Sync` for it manually to get `Arc<Wrapper<T>>` where `Wrapper` is `struct Wrapper<T>(UnsafeCell<T>)`.\n-\n-#### Guarantees\n-\n-Like `Rc`, this provides the (thread safe) guarantee that the destructor for the internal data will\n-be run when the last `Arc` goes out of scope (barring any cycles).\n-\n-#### Cost\n-\n-This has the added cost of using atomics for changing the refcount (which will happen whenever it is\n-cloned or goes out of scope). When sharing data from an `Arc` in a single thread, it is preferable\n-to share `&` pointers whenever possible.\n-\n-[arc]: ../std/sync/struct.Arc.html\n-\n-## `Mutex<T>` and `RwLock<T>`\n-\n-[`Mutex<T>`][mutex] and [`RwLock<T>`][rwlock] provide mutual-exclusion via RAII guards (guards are\n-objects which maintain some state, like a lock, until their destructor is called). For both of\n-these, the mutex is opaque until we call `lock()` on it, at which point the thread will block\n-until a lock can be acquired, and then a guard will be returned. This guard can be used to access\n-the inner data (mutably), and the lock will be released when the guard goes out of scope.\n-\n-```rust,ignore\n-{\n-    let guard = mutex.lock();\n-    // `guard` dereferences mutably to the inner type.\n-    *guard += 1;\n-} // Lock is released when destructor runs.\n-```\n-\n-\n-`RwLock` has the added benefit of being efficient for multiple reads. It is always safe to have\n-multiple readers to shared data as long as there are no writers; and `RwLock` lets readers acquire a\n-\"read lock\". Such locks can be acquired concurrently and are kept track of via a reference count.\n-Writers must obtain a \"write lock\" which can only be obtained when all readers have gone out of\n-scope.\n-\n-#### Guarantees\n-\n-Both of these provide safe shared mutability across threads, however they are prone to deadlocks.\n-Some level of additional protocol safety can be obtained via the type system.\n-\n-#### Costs\n-\n-These use internal atomic-like types to maintain the locks, which are pretty costly (they can block\n-all memory reads across processors till they're done). Waiting on these locks can also be slow when\n-there's a lot of concurrent access happening.\n-\n-[rwlock]: ../std/sync/struct.RwLock.html\n-[mutex]: ../std/sync/struct.Mutex.html\n-[sessions]: https://github.com/Munksgaard/rust-sessions\n-\n-# Composition\n-\n-A common gripe when reading Rust code is with types like `Rc<RefCell<Vec<T>>>` (or even more\n-complicated compositions of such types). It's not always clear what the composition does, or why the\n-author chose one like this (and when one should be using such a composition in one's own code)\n-\n-Usually, it's a case of composing together the guarantees that you need, without paying for stuff\n-that is unnecessary.\n-\n-For example, `Rc<RefCell<T>>` is one such composition. `Rc<T>` itself can't be dereferenced mutably;\n-because `Rc<T>` provides sharing and shared mutability can lead to unsafe behavior, so we put\n-`RefCell<T>` inside to get dynamically verified shared mutability. Now we have shared mutable data,\n-but it's shared in a way that there can only be one mutator (and no readers) or multiple readers.\n-\n-Now, we can take this a step further, and have `Rc<RefCell<Vec<T>>>` or `Rc<Vec<RefCell<T>>>`. These\n-are both shareable, mutable vectors, but they're not the same.\n-\n-With the former, the `RefCell<T>` is wrapping the `Vec<T>`, so the `Vec<T>` in its entirety is\n-mutable. At the same time, there can only be one mutable borrow of the whole `Vec` at a given time.\n-This means that your code cannot simultaneously work on different elements of the vector from\n-different `Rc` handles. However, we are able to push and pop from the `Vec<T>` at will. This is\n-similar to a `&mut Vec<T>` with the borrow checking done at runtime.\n-\n-With the latter, the borrowing is of individual elements, but the overall vector is immutable. Thus,\n-we can independently borrow separate elements, but we cannot push or pop from the vector. This is\n-similar to a `&mut [T]`[^3], but, again, the borrow checking is at runtime.\n-\n-In concurrent programs, we have a similar situation with `Arc<Mutex<T>>`, which provides shared\n-mutability and ownership.\n-\n-When reading code that uses these, go in step by step and look at the guarantees/costs provided.\n-\n-When choosing a composed type, we must do the reverse; figure out which guarantees we want, and at\n-which point of the composition we need them. For example, if there is a choice between\n-`Vec<RefCell<T>>` and `RefCell<Vec<T>>`, we should figure out the tradeoffs as done above and pick\n-one.\n-\n-[^3]: `&[T]` and `&mut [T]` are _slices_; they consist of a pointer and a length and can refer to a portion of a vector or array. `&mut [T]` can have its elements mutated, however its length cannot be touched."}, {"sha": "5426ed0ff4c9c2e4985e2007daaba4bc590103e3", "filename": "src/doc/book/src/closures.md", "status": "removed", "additions": 0, "deletions": 552, "changes": 552, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,552 +0,0 @@\n-# Closures\n-\n-Sometimes it is useful to wrap up a function and _free variables_ for better\n-clarity and reuse. The free variables that can be used come from the\n-enclosing scope and are \u2018closed over\u2019 when used in the function. From this, we\n-get the name \u2018closures\u2019 and Rust provides a really great implementation of\n-them, as we\u2019ll see.\n-\n-# Syntax\n-\n-Closures look like this:\n-\n-```rust\n-let plus_one = |x: i32| x + 1;\n-\n-assert_eq!(2, plus_one(1));\n-```\n-\n-We create a binding, `plus_one`, and assign it to a closure. The closure\u2019s\n-arguments go between the pipes (`|`), and the body is an expression, in this\n-case, `x + 1`. Remember that `{ }` is an expression, so we can have multi-line\n-closures too:\n-\n-```rust\n-let plus_two = |x| {\n-    let mut result: i32 = x;\n-\n-    result += 1;\n-    result += 1;\n-\n-    result\n-};\n-\n-assert_eq!(4, plus_two(2));\n-```\n-\n-You\u2019ll notice a few things about closures that are a bit different from regular\n-named functions defined with `fn`. The first is that we did not need to\n-annotate the types of arguments the closure takes or the values it returns. We\n-can:\n-\n-```rust\n-let plus_one = |x: i32| -> i32 { x + 1 };\n-\n-assert_eq!(2, plus_one(1));\n-```\n-\n-But we don\u2019t have to. Why is this? Basically, it was chosen for ergonomic\n-reasons. While specifying the full type for named functions is helpful with\n-things like documentation and type inference, the full type signatures of\n-closures are rarely documented since they\u2019re anonymous, and they don\u2019t cause\n-the kinds of error-at-a-distance problems that inferring named function types\n-can.\n-\n-The second is that the syntax is similar, but a bit different. I\u2019ve added\n-spaces here for easier comparison:\n-\n-```rust\n-fn  plus_one_v1   (x: i32) -> i32 { x + 1 }\n-let plus_one_v2 = |x: i32| -> i32 { x + 1 };\n-let plus_one_v3 = |x: i32|          x + 1  ;\n-```\n-\n-Small differences, but they\u2019re similar.\n-\n-# Closures and their environment\n-\n-The environment for a closure can include bindings from its enclosing scope in\n-addition to parameters and local bindings. It looks like this:\n-\n-```rust\n-let num = 5;\n-let plus_num = |x: i32| x + num;\n-\n-assert_eq!(10, plus_num(5));\n-```\n-\n-This closure, `plus_num`, refers to a `let` binding in its scope: `num`. More\n-specifically, it borrows the binding. If we do something that would conflict\n-with that binding, we get an error. Like this one:\n-\n-```rust,ignore\n-let mut num = 5;\n-let plus_num = |x: i32| x + num;\n-\n-let y = &mut num;\n-```\n-\n-Which errors with:\n-\n-```text\n-error: cannot borrow `num` as mutable because it is also borrowed as immutable\n-    let y = &mut num;\n-                 ^~~\n-note: previous borrow of `num` occurs here due to use in closure; the immutable\n-  borrow prevents subsequent moves or mutable borrows of `num` until the borrow\n-  ends\n-    let plus_num = |x| x + num;\n-                   ^~~~~~~~~~~\n-note: previous borrow ends here\n-fn main() {\n-    let mut num = 5;\n-    let plus_num = |x| x + num;\n-\n-    let y = &mut num;\n-}\n-^\n-```\n-\n-A verbose yet helpful error message! As it says, we can\u2019t take a mutable borrow\n-on `num` because the closure is already borrowing it. If we let the closure go\n-out of scope, we can:\n-\n-```rust\n-let mut num = 5;\n-{\n-    let plus_num = |x: i32| x + num;\n-\n-} // `plus_num` goes out of scope; borrow of `num` ends.\n-\n-let y = &mut num;\n-```\n-\n-If your closure requires it, however, Rust will take ownership and move\n-the environment instead. This doesn\u2019t work:\n-\n-```rust,ignore\n-let nums = vec![1, 2, 3];\n-\n-let takes_nums = || nums;\n-\n-println!(\"{:?}\", nums);\n-```\n-\n-We get this error:\n-\n-```text\n-note: `nums` moved into closure environment here because it has type\n-  `[closure(()) -> collections::vec::Vec<i32>]`, which is non-copyable\n-let takes_nums = || nums;\n-                 ^~~~~~~\n-```\n-\n-`Vec<T>` has ownership over its contents, and therefore, when we refer to it\n-in our closure, we have to take ownership of `nums`. It\u2019s the same as if we\u2019d\n-passed `nums` to a function that took ownership of it.\n-\n-## `move` closures\n-\n-We can force our closure to take ownership of its environment with the `move`\n-keyword:\n-\n-```rust\n-let num = 5;\n-\n-let owns_num = move |x: i32| x + num;\n-```\n-\n-Now, even though the keyword is `move`, the variables follow normal move semantics.\n-In this case, `5` implements `Copy`, and so `owns_num` takes ownership of a copy\n-of `num`. So what\u2019s the difference?\n-\n-```rust\n-let mut num = 5;\n-\n-{\n-    let mut add_num = |x: i32| num += x;\n-\n-    add_num(5);\n-}\n-\n-assert_eq!(10, num);\n-```\n-\n-So in this case, our closure took a mutable reference to `num`, and then when\n-we called `add_num`, it mutated the underlying value, as we\u2019d expect. We also\n-needed to declare `add_num` as `mut` too, because we\u2019re mutating its\n-environment.\n-\n-If we change to a `move` closure, it\u2019s different:\n-\n-```rust\n-let mut num = 5;\n-\n-{\n-    let mut add_num = move |x: i32| num += x;\n-\n-    add_num(5);\n-}\n-\n-assert_eq!(5, num);\n-```\n-\n-We only get `5`. Rather than taking a mutable borrow out on our `num`, we took\n-ownership of a copy.\n-\n-Another way to think about `move` closures: they give a closure its own stack\n-frame.  Without `move`, a closure may be tied to the stack frame that created\n-it, while a `move` closure is self-contained. This means that you cannot\n-generally return a non-`move` closure from a function, for example.\n-\n-But before we talk about taking and returning closures, we should talk some\n-more about the way that closures are implemented. As a systems language, Rust\n-gives you tons of control over what your code does, and closures are no\n-different.\n-\n-# Closure implementation\n-\n-Rust\u2019s implementation of closures is a bit different than other languages. They\n-are effectively syntax sugar for traits. You\u2019ll want to make sure to have read\n-the [traits][traits] section before this one, as well as the section on [trait\n-objects][trait-objects].\n-\n-[traits]: traits.html\n-[trait-objects]: trait-objects.html\n-\n-Got all that? Good.\n-\n-The key to understanding how closures work under the hood is something a bit\n-strange: Using `()` to call a function, like `foo()`, is an overloadable\n-operator. From this, everything else clicks into place. In Rust, we use the\n-trait system to overload operators. Calling functions is no different. We have\n-three separate traits to overload with:\n-\n-```rust\n-# #![feature(unboxed_closures)]\n-# mod foo {\n-pub trait Fn<Args> : FnMut<Args> {\n-    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n-}\n-\n-pub trait FnMut<Args> : FnOnce<Args> {\n-    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n-}\n-\n-pub trait FnOnce<Args> {\n-    type Output;\n-\n-    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-}\n-# }\n-```\n-\n-You\u2019ll notice a few differences between these traits, but a big one is `self`:\n-`Fn` takes `&self`, `FnMut` takes `&mut self`, and `FnOnce` takes `self`. This\n-covers all three kinds of `self` via the usual method call syntax. But we\u2019ve\n-split them up into three traits, rather than having a single one. This gives us\n-a large amount of control over what kind of closures we can take.\n-\n-The `|| {}` syntax for closures is sugar for these three traits. Rust will\n-generate a struct for the environment, `impl` the appropriate trait, and then\n-use it.\n-\n-# Taking closures as arguments\n-\n-Now that we know that closures are traits, we already know how to accept and\n-return closures: the same as any other trait!\n-\n-This also means that we can choose static vs dynamic dispatch as well. First,\n-let\u2019s write a function which takes something callable, calls it, and returns\n-the result:\n-\n-```rust\n-fn call_with_one<F>(some_closure: F) -> i32\n-    where F: Fn(i32) -> i32 {\n-\n-    some_closure(1)\n-}\n-\n-let answer = call_with_one(|x| x + 2);\n-\n-assert_eq!(3, answer);\n-```\n-\n-We pass our closure, `|x| x + 2`, to `call_with_one`. It does what it\n-suggests: it calls the closure, giving it `1` as an argument.\n-\n-Let\u2019s examine the signature of `call_with_one` in more depth:\n-\n-```rust\n-fn call_with_one<F>(some_closure: F) -> i32\n-#    where F: Fn(i32) -> i32 {\n-#    some_closure(1) }\n-```\n-\n-We take one parameter, and it has the type `F`. We also return an `i32`. This part\n-isn\u2019t interesting. The next part is:\n-\n-```rust\n-# fn call_with_one<F>(some_closure: F) -> i32\n-    where F: Fn(i32) -> i32 {\n-#   some_closure(1) }\n-```\n-\n-Because `Fn` is a trait, we can use it as a bound for our generic type. In\n-this case, our closure takes an `i32` as an argument and returns an `i32`, and\n-so the generic bound we use is `Fn(i32) -> i32`.\n-\n-There\u2019s one other key point here: because we\u2019re bounding a generic with a\n-trait, this will get monomorphized, and therefore, we\u2019ll be doing static\n-dispatch into the closure. That\u2019s pretty neat. In many languages, closures are\n-inherently heap allocated, and will always involve dynamic dispatch. In Rust,\n-we can stack allocate our closure environment, and statically dispatch the\n-call. This happens quite often with iterators and their adapters, which often\n-take closures as arguments.\n-\n-Of course, if we want dynamic dispatch, we can get that too. A trait object\n-handles this case, as usual:\n-\n-```rust\n-fn call_with_one(some_closure: &Fn(i32) -> i32) -> i32 {\n-    some_closure(1)\n-}\n-\n-let answer = call_with_one(&|x| x + 2);\n-\n-assert_eq!(3, answer);\n-```\n-\n-Now we take a trait object, a `&Fn`. And we have to make a reference\n-to our closure when we pass it to `call_with_one`, so we use `&||`.\n-\n-A quick note about closures that use explicit lifetimes. Sometimes you might have a closure\n-that takes a reference like so:\n-\n-```rust\n-fn call_with_ref<F>(some_closure:F) -> i32\n-    where F: Fn(&i32) -> i32 {\n-\n-    let value = 0;\n-    some_closure(&value)\n-}\n-```\n-\n-Normally you can specify the lifetime of the parameter to our closure. We\n-could annotate it on the function declaration:\n-\n-```rust,ignore\n-fn call_with_ref<'a, F>(some_closure:F) -> i32\n-    where F: Fn(&'a i32) -> i32 {\n-```\n-\n-However, this presents a problem in our case. When a function has an explicit\n-lifetime parameter, that lifetime must be at least as long as the *entire*\n-call to that function.  The borrow checker will complain that `value` doesn't\n-live long enough, because it is only in scope after its declaration inside the\n-function body.\n-\n-What we need is a closure that can borrow its argument only for its own\n-invocation scope, not for the outer function's scope.  In order to say that,\n-we can use Higher-Ranked Trait Bounds with the `for<...>` syntax:\n-\n-```ignore\n-fn call_with_ref<F>(some_closure:F) -> i32\n-    where F: for<'a> Fn(&'a i32) -> i32 {\n-```\n-\n-This lets the Rust compiler find the minimum lifetime to invoke our closure and\n-satisfy the borrow checker's rules. Our function then compiles and executes as we\n-expect.\n-\n-```rust\n-fn call_with_ref<F>(some_closure:F) -> i32\n-    where F: for<'a> Fn(&'a i32) -> i32 {\n-\n-    let value = 0;\n-    some_closure(&value)\n-}\n-```\n-\n-# Function pointers and closures\n-\n-A function pointer is kind of like a closure that has no environment. As such,\n-you can pass a function pointer to any function expecting a closure argument,\n-and it will work:\n-\n-```rust\n-fn call_with_one(some_closure: &Fn(i32) -> i32) -> i32 {\n-    some_closure(1)\n-}\n-\n-fn add_one(i: i32) -> i32 {\n-    i + 1\n-}\n-\n-let f = add_one;\n-\n-let answer = call_with_one(&f);\n-\n-assert_eq!(2, answer);\n-```\n-\n-In this example, we don\u2019t strictly need the intermediate variable `f`,\n-the name of the function works just fine too:\n-\n-```rust,ignore\n-let answer = call_with_one(&add_one);\n-```\n-\n-# Returning closures\n-\n-It\u2019s very common for functional-style code to return closures in various\n-situations. If you try to return a closure, you may run into an error. At\n-first, it may seem strange, but we\u2019ll figure it out. Here\u2019s how you\u2019d probably\n-try to return a closure from a function:\n-\n-```rust,ignore\n-fn factory() -> (Fn(i32) -> i32) {\n-    let num = 5;\n-\n-    |x| x + num\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-This gives us these long, related errors:\n-\n-```text\n-error: the trait bound `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n-fn factory() -> (Fn(i32) -> i32) {\n-                ^~~~~~~~~~~~~~~~\n-note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n-fn factory() -> (Fn(i32) -> i32) {\n-                ^~~~~~~~~~~~~~~~\n-error: the trait bound `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n-let f = factory();\n-    ^\n-note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n-let f = factory();\n-    ^\n-```\n-\n-In order to return something from a function, Rust needs to know what\n-size the return type is. But since `Fn` is a trait, it could be various\n-things of various sizes: many different types can implement `Fn`. An easy\n-way to give something a size is to take a reference to it, as references\n-have a known size. So we\u2019d write this:\n-\n-```rust,ignore\n-fn factory() -> &(Fn(i32) -> i32) {\n-    let num = 5;\n-\n-    |x| x + num\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-But we get another error:\n-\n-```text\n-error: missing lifetime specifier [E0106]\n-fn factory() -> &(Fn(i32) -> i32) {\n-                ^~~~~~~~~~~~~~~~~\n-```\n-\n-Right. Because we have a reference, we need to give it a lifetime. But\n-our `factory()` function takes no arguments, so\n-[elision](lifetimes.html#lifetime-elision) doesn\u2019t kick in here. Then what\n-choices do we have? Try `'static`:\n-\n-```rust,ignore\n-fn factory() -> &'static (Fn(i32) -> i32) {\n-    let num = 5;\n-\n-    |x| x + num\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-But we get another error:\n-\n-```text\n-error: mismatched types:\n- expected `&'static core::ops::Fn(i32) -> i32`,\n-    found `[closure@<anon>:7:9: 7:20]`\n-(expected &-ptr,\n-    found closure) [E0308]\n-         |x| x + num\n-         ^~~~~~~~~~~\n-\n-```\n-\n-This error is letting us know that we don\u2019t have a `&'static Fn(i32) -> i32`,\n-we have a `[closure@<anon>:7:9: 7:20]`. Wait, what?\n-\n-Because each closure generates its own environment `struct` and implementation\n-of `Fn` and friends, these types are anonymous. They exist solely for\n-this closure. So Rust shows them as `closure@<anon>`, rather than some\n-autogenerated name.\n-\n-The error also points out that the return type is expected to be a reference,\n-but what we are trying to return is not. Further, we cannot directly assign a\n-`'static` lifetime to an object. So we'll take a different approach and return\n-a \u2018trait object\u2019 by `Box`ing up the `Fn`. This _almost_ works:\n-\n-```rust,ignore\n-fn factory() -> Box<Fn(i32) -> i32> {\n-    let num = 5;\n-\n-    Box::new(|x| x + num)\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-There\u2019s just one last problem:\n-\n-```text\n-error: closure may outlive the current function, but it borrows `num`,\n-which is owned by the current function [E0373]\n-Box::new(|x| x + num)\n-         ^~~~~~~~~~~\n-```\n-\n-Well, as we discussed before, closures borrow their environment. And in this\n-case, our environment is based on a stack-allocated `5`, the `num` variable\n-binding. So the borrow has a lifetime of the stack frame. So if we returned\n-this closure, the function call would be over, the stack frame would go away,\n-and our closure is capturing an environment of garbage memory! With one last\n-fix, we can make this work:\n-\n-```rust\n-fn factory() -> Box<Fn(i32) -> i32> {\n-    let num = 5;\n-\n-    Box::new(move |x| x + num)\n-}\n-\n-let f = factory();\n-\n-let answer = f(1);\n-assert_eq!(6, answer);\n-```\n-\n-By making the inner closure a `move Fn`, we create a new stack frame for our\n-closure. By `Box`ing it up, we\u2019ve given it a known size, allowing it to\n-escape our stack frame."}, {"sha": "0e68ab218e843719a688504b232896d9e9de5321", "filename": "src/doc/book/src/comments.md", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fcomments.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fcomments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcomments.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,59 +0,0 @@\n-# Comments\n-\n-Now that we have some functions, it\u2019s a good idea to learn about comments.\n-Comments are notes that you leave to other programmers to help explain things\n-about your code. The compiler mostly ignores them.\n-\n-Rust has two kinds of comments that you should care about: *line comments*\n-and *doc comments*.\n-\n-```rust\n-// Line comments are anything after \u2018//\u2019 and extend to the end of the line.\n-\n-let x = 5; // This is also a line comment.\n-\n-// If you have a long explanation for something, you can put line comments next\n-// to each other. Put a space between the // and your comment so that it\u2019s\n-// more readable.\n-```\n-\n-The other kind of comment is a doc comment. Doc comments use `///` instead of\n-`//`, and support Markdown notation inside:\n-\n-```rust\n-/// Adds one to the number given.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// let five = 5;\n-///\n-/// assert_eq!(6, add_one(5));\n-/// # fn add_one(x: i32) -> i32 {\n-/// #     x + 1\n-/// # }\n-/// ```\n-fn add_one(x: i32) -> i32 {\n-    x + 1\n-}\n-```\n-\n-There is another style of doc comment, `//!`, to comment containing items (e.g.\n-crates, modules or functions), instead of the items following it. Commonly used\n-inside crates root (lib.rs) or modules root (mod.rs):\n-\n-```\n-//! # The Rust Standard Library\n-//!\n-//! The Rust Standard Library provides the essential runtime\n-//! functionality for building portable Rust software.\n-```\n-\n-When writing doc comments, providing some examples of usage is very, very\n-helpful. You\u2019ll notice we\u2019ve used a new macro here: `assert_eq!`. This compares\n-two values, and `panic!`s if they\u2019re not equal to each other. It\u2019s very helpful\n-in documentation. There\u2019s another macro, `assert!`, which `panic!`s if the\n-value passed to it is `false`.\n-\n-You can use the [`rustdoc`](documentation.html) tool to generate HTML documentation\n-from these doc comments, and also to run the code examples as tests!"}, {"sha": "c05d808a947400202e8faa643807690c24123e8f", "filename": "src/doc/book/src/compiler-plugins.md", "status": "removed", "additions": 0, "deletions": 253, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,253 +0,0 @@\n-# Compiler Plugins\n-\n-## Introduction\n-\n-`rustc` can load compiler plugins, which are user-provided libraries that\n-extend the compiler's behavior with new syntax extensions, lint checks, etc.\n-\n-A plugin is a dynamic library crate with a designated *registrar* function that\n-registers extensions with `rustc`. Other crates can load these extensions using\n-the crate attribute `#![plugin(...)]`.  See the\n-`rustc_plugin` documentation for more about the\n-mechanics of defining and loading a plugin.\n-\n-If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n-interpreted by rustc itself.  They are provided to the plugin through the\n-`Registry`'s `args` method.\n-\n-In the vast majority of cases, a plugin should *only* be used through\n-`#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n-pull in all of libsyntax and librustc as dependencies of your crate.  This is\n-generally unwanted unless you are building another plugin.  The\n-`plugin_as_library` lint checks these guidelines.\n-\n-The usual practice is to put compiler plugins in their own crate, separate from\n-any `macro_rules!` macros or ordinary Rust code meant to be used by consumers\n-of a library.\n-\n-# Syntax extensions\n-\n-Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n-is the procedural macro. These are invoked the same way as [ordinary\n-macros](macros.html), but the expansion is performed by arbitrary Rust\n-code that manipulates syntax trees at\n-compile time.\n-\n-Let's write a plugin\n-[`roman_numerals.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/roman_numerals.rs)\n-that implements Roman numeral integer literals.\n-\n-```rust,ignore\n-#![crate_type=\"dylib\"]\n-#![feature(plugin_registrar, rustc_private)]\n-\n-extern crate syntax;\n-extern crate rustc;\n-extern crate rustc_plugin;\n-\n-use syntax::parse::token;\n-use syntax::tokenstream::TokenTree;\n-use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n-use syntax::ext::build::AstBuilder;  // A trait for expr_usize.\n-use syntax::ext::quote::rt::Span;\n-use rustc_plugin::Registry;\n-\n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n-        -> Box<MacResult + 'static> {\n-\n-    static NUMERALS: &'static [(&'static str, usize)] = &[\n-        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n-        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n-        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n-        (\"I\",    1)];\n-\n-    if args.len() != 1 {\n-        cx.span_err(\n-            sp,\n-            &format!(\"argument should be a single identifier, but got {} arguments\", args.len()));\n-        return DummyResult::any(sp);\n-    }\n-\n-    let text = match args[0] {\n-        TokenTree::Token(_, token::Ident(s)) => s.to_string(),\n-        _ => {\n-            cx.span_err(sp, \"argument should be a single identifier\");\n-            return DummyResult::any(sp);\n-        }\n-    };\n-\n-    let mut text = &*text;\n-    let mut total = 0;\n-    while !text.is_empty() {\n-        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n-            Some(&(rn, val)) => {\n-                total += val;\n-                text = &text[rn.len()..];\n-            }\n-            None => {\n-                cx.span_err(sp, \"invalid Roman numeral\");\n-                return DummyResult::any(sp);\n-            }\n-        }\n-    }\n-\n-    MacEager::expr(cx.expr_usize(sp, total))\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_macro(\"rn\", expand_rn);\n-}\n-```\n-\n-Then we can use `rn!()` like any other macro:\n-\n-```rust,ignore\n-#![feature(plugin)]\n-#![plugin(roman_numerals)]\n-\n-fn main() {\n-    assert_eq!(rn!(MMXV), 2015);\n-}\n-```\n-\n-The advantages over a simple `fn(&str) -> u32` are:\n-\n-* The (arbitrarily complex) conversion is done at compile time.\n-* Input validation is also performed at compile time.\n-* It can be extended to allow use in patterns, which effectively gives\n-  a way to define new literal syntax for any data type.\n-\n-In addition to procedural macros, you can define new\n-[`derive`](../reference/attributes.html#derive)-like attributes and other kinds of\n-extensions.  See `Registry::register_syntax_extension` and the `SyntaxExtension`\n-enum.  For a more involved macro example, see\n-[`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n-\n-\n-## Tips and tricks\n-\n-Some of the [macro debugging tips](macros.html#debugging-macro-code) are applicable.\n-\n-You can use `syntax::parse` to turn token trees into\n-higher-level syntax elements like expressions:\n-\n-```rust,ignore\n-fn expand_foo(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n-        -> Box<MacResult+'static> {\n-\n-    let mut parser = cx.new_parser_from_tts(args);\n-\n-    let expr: P<Expr> = parser.parse_expr();\n-```\n-\n-Looking through [`libsyntax` parser\n-code](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs)\n-will give you a feel for how the parsing infrastructure works.\n-\n-Keep the `Span`s of everything you parse, for better error reporting. You can\n-wrap `Spanned` around your custom data structures.\n-\n-Calling `ExtCtxt::span_fatal` will immediately abort compilation. It's better to\n-instead call `ExtCtxt::span_err` and return `DummyResult` so that the compiler\n-can continue and find further errors.\n-\n-To print syntax fragments for debugging, you can use `span_note` together with\n-`syntax::print::pprust::*_to_string`.\n-\n-The example above produced an integer literal using `AstBuilder::expr_usize`.\n-As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of\n-quasiquote macros. They are undocumented and very rough around the edges.\n-However, the implementation may be a good starting point for an improved\n-quasiquote as an ordinary plugin library.\n-\n-\n-# Lint plugins\n-\n-Plugins can extend [Rust's lint\n-infrastructure](../reference/attributes.html#lint-check-attributes) with\n-additional checks for code style, safety, etc. Now let's write a plugin\n-[`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/lint_plugin_test.rs)\n-that warns about any item named `lintme`.\n-\n-```rust,ignore\n-#![feature(plugin_registrar)]\n-#![feature(box_syntax, rustc_private)]\n-\n-extern crate syntax;\n-\n-// Load rustc as a plugin to get macros\n-#[macro_use]\n-extern crate rustc;\n-extern crate rustc_plugin;\n-\n-use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n-                  EarlyLintPassObject, LintArray};\n-use rustc_plugin::Registry;\n-use syntax::ast;\n-\n-declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n-\n-struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT)\n-    }\n-}\n-\n-impl EarlyLintPass for Pass {\n-    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n-        if it.ident.name.as_str() == \"lintme\" {\n-            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n-        }\n-    }\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_early_lint_pass(box Pass as EarlyLintPassObject);\n-}\n-```\n-\n-Then code like\n-\n-```rust,ignore\n-#![plugin(lint_plugin_test)]\n-\n-fn lintme() { }\n-```\n-\n-will produce a compiler warning:\n-\n-```txt\n-foo.rs:4:1: 4:16 warning: item is named 'lintme', #[warn(test_lint)] on by default\n-foo.rs:4 fn lintme() { }\n-         ^~~~~~~~~~~~~~~\n-```\n-\n-The components of a lint plugin are:\n-\n-* one or more `declare_lint!` invocations, which define static `Lint` structs;\n-\n-* a struct holding any state needed by the lint pass (here, none);\n-\n-* a `LintPass`\n-  implementation defining how to check each syntax element. A single\n-  `LintPass` may call `span_lint` for several different `Lint`s, but should\n-  register them all through the `get_lints` method.\n-\n-Lint passes are syntax traversals, but they run at a late stage of compilation\n-where type information is available. `rustc`'s [built-in\n-lints](https://github.com/rust-lang/rust/blob/master/src/librustc/lint/builtin.rs)\n-mostly use the same infrastructure as lint plugins, and provide examples of how\n-to access type information.\n-\n-Lints defined by plugins are controlled by the usual [attributes and compiler\n-flags](../reference/attributes.html#lint-check-attributes), e.g.\n-`#[allow(test_lint)]` or `-A test-lint`. These identifiers are derived from the\n-first argument to `declare_lint!`, with appropriate case and punctuation\n-conversion.\n-\n-You can run `rustc -W help foo.rs` to see a list of lints known to `rustc`,\n-including those provided by plugins loaded by `foo.rs`."}, {"sha": "afed379fe471ad8e16cd006ec3b5c0bd7b699c41", "filename": "src/doc/book/src/concurrency.md", "status": "removed", "additions": 0, "deletions": 465, "changes": 465, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,465 +0,0 @@\n-# Concurrency\n-\n-Concurrency and parallelism are incredibly important topics in computer\n-science, and are also a hot topic in industry today. Computers are gaining more\n-and more cores, yet many programmers aren't prepared to fully utilize them.\n-\n-Rust's memory safety features also apply to its concurrency story. Even\n-concurrent Rust programs must be memory safe, having no data races. Rust's type\n-system is up to the task, and gives you powerful ways to reason about\n-concurrent code at compile time.\n-\n-Before we talk about the concurrency features that come with Rust, it's important\n-to understand something: Rust is low-level enough that the vast majority of\n-this is provided by the standard library, not by the language. This means that\n-if you don't like some aspect of the way Rust handles concurrency, you can\n-implement an alternative way of doing things.\n-[mio](https://github.com/carllerche/mio) is a real-world example of this\n-principle in action.\n-\n-## Background: `Send` and `Sync`\n-\n-Concurrency is difficult to reason about. In Rust, we have a strong, static\n-type system to help us reason about our code. As such, Rust gives us two traits\n-to help us make sense of code that can possibly be concurrent.\n-\n-### `Send`\n-\n-The first trait we're going to talk about is\n-[`Send`](../std/marker/trait.Send.html). When a type `T` implements `Send`, it\n-indicates that something of this type is able to have ownership transferred\n-safely between threads.\n-\n-This is important to enforce certain restrictions. For example, if we have a\n-channel connecting two threads, we would want to be able to send some data\n-down the channel and to the other thread. Therefore, we'd ensure that `Send` was\n-implemented for that type.\n-\n-In the opposite way, if we were wrapping a library with [FFI][ffi] that isn't\n-thread-safe, we wouldn't want to implement `Send`, and so the compiler will help\n-us enforce that it can't leave the current thread.\n-\n-[ffi]: ffi.html\n-\n-### `Sync`\n-\n-The second of these traits is called [`Sync`](../std/marker/trait.Sync.html).\n-When a type `T` implements `Sync`, it indicates that something\n-of this type has no possibility of introducing memory unsafety when used from\n-multiple threads concurrently through shared references. This implies that\n-types which don't have [interior mutability](mutability.html) are inherently\n-`Sync`, which includes simple primitive types (like `u8`) and aggregate types\n-containing them.\n-\n-For sharing references across threads, Rust provides a wrapper type called\n-`Arc<T>`. `Arc<T>` implements `Send` and `Sync` if and only if `T` implements\n-both `Send` and `Sync`. For example, an object of type `Arc<RefCell<U>>` cannot\n-be transferred across threads because\n-[`RefCell`](choosing-your-guarantees.html#refcellt) does not implement\n-`Sync`, consequently `Arc<RefCell<U>>` would not implement `Send`.\n-\n-These two traits allow you to use the type system to make strong guarantees\n-about the properties of your code under concurrency. Before we demonstrate\n-why, we need to learn how to create a concurrent Rust program in the first\n-place!\n-\n-## Threads\n-\n-Rust's standard library provides a library for threads, which allow you to\n-run Rust code in parallel. Here's a basic example of using `std::thread`:\n-\n-```rust\n-use std::thread;\n-\n-fn main() {\n-    thread::spawn(|| {\n-        println!(\"Hello from a thread!\");\n-    });\n-}\n-```\n-\n-The `thread::spawn()` method accepts a [closure](closures.html), which is executed in a\n-new thread. It returns a handle to the thread, that can be used to\n-wait for the child thread to finish and extract its result:\n-\n-```rust\n-use std::thread;\n-\n-fn main() {\n-    let handle = thread::spawn(|| {\n-        \"Hello from a thread!\"\n-    });\n-\n-    println!(\"{}\", handle.join().unwrap());\n-}\n-```\n-\n-As closures can capture variables from their environment, we can also try to\n-bring some data into the other thread:\n-\n-```rust,ignore\n-use std::thread;\n-\n-fn main() {\n-    let x = 1;\n-    thread::spawn(|| {\n-        println!(\"x is {}\", x);\n-    });\n-}\n-```\n-\n-However, this gives us an error:\n-\n-```text\n-5:19: 7:6 error: closure may outlive the current function, but it\n-                 borrows `x`, which is owned by the current function\n-...\n-5:19: 7:6 help: to force the closure to take ownership of `x` (and any other referenced variables),\n-          use the `move` keyword, as shown:\n-      thread::spawn(move || {\n-          println!(\"x is {}\", x);\n-      });\n-```\n-\n-This is because by default closures capture variables by reference, and thus the\n-closure only captures a _reference to `x`_. This is a problem, because the\n-thread may outlive the scope of `x`, leading to a dangling pointer.\n-\n-To fix this, we use a `move` closure as mentioned in the error message. `move`\n-closures are explained in depth [here](closures.html#move-closures); basically\n-they move variables from their environment into themselves.\n-\n-```rust\n-use std::thread;\n-\n-fn main() {\n-    let x = 1;\n-    thread::spawn(move || {\n-        println!(\"x is {}\", x);\n-    });\n-}\n-```\n-\n-Many languages have the ability to execute threads, but it's wildly unsafe.\n-There are entire books about how to prevent errors that occur from shared\n-mutable state. Rust helps out with its type system here as well, by preventing\n-data races at compile time. Let's talk about how you actually share things\n-between threads.\n-\n-## Safe Shared Mutable State\n-\n-Due to Rust's type system, we have a concept that sounds like a lie: \"safe\n-shared mutable state.\" Many programmers agree that shared mutable state is\n-very, very bad.\n-\n-Someone once said this:\n-\n-> Shared mutable state is the root of all evil. Most languages attempt to deal\n-> with this problem through the 'mutable' part, but Rust deals with it by\n-> solving the 'shared' part.\n-\n-The same [ownership system](ownership.html) that helps prevent using pointers\n-incorrectly also helps rule out data races, one of the worst kinds of\n-concurrency bugs.\n-\n-As an example, here is a Rust program that would have a data race in many\n-languages. It will not compile:\n-\n-```rust,ignore\n-use std::thread;\n-use std::time::Duration;\n-\n-fn main() {\n-    let mut data = vec![1, 2, 3];\n-\n-    for i in 0..3 {\n-        thread::spawn(move || {\n-            data[0] += i;\n-        });\n-    }\n-\n-    thread::sleep(Duration::from_millis(50));\n-}\n-```\n-\n-This gives us an error:\n-\n-```text\n-8:17 error: capture of moved value: `data`\n-        data[0] += i;\n-        ^~~~\n-```\n-\n-Rust knows this wouldn't be safe! If we had a reference to `data` in each\n-thread, and the thread takes ownership of the reference, we'd have three owners!\n-`data` gets moved out of `main` in the first call to `spawn()`, so subsequent\n-calls in the loop cannot use this variable.\n-\n-So, we need some type that lets us have more than one owning reference to a\n-value. Usually, we'd use `Rc<T>` for this, which is a reference counted type\n-that provides shared ownership. It has some runtime bookkeeping that keeps track\n-of the number of references to it, hence the \"reference count\" part of its name.\n-\n-Calling `clone()` on an `Rc<T>` will return a new owned reference and bump the\n-internal reference count. We create one of these for each thread:\n-\n-\n-```rust,ignore\n-use std::thread;\n-use std::time::Duration;\n-use std::rc::Rc;\n-\n-fn main() {\n-    let mut data = Rc::new(vec![1, 2, 3]);\n-\n-    for i in 0..3 {\n-        // Create a new owned reference:\n-        let data_ref = data.clone();\n-\n-        // Use it in a thread:\n-        thread::spawn(move || {\n-            data_ref[0] += i;\n-        });\n-    }\n-\n-    thread::sleep(Duration::from_millis(50));\n-}\n-```\n-\n-This won't work, however, and will give us the error:\n-\n-```text\n-13:9: 13:22 error: the trait bound `alloc::rc::Rc<collections::vec::Vec<i32>> : core::marker::Send`\n-            is not satisfied\n-...\n-13:9: 13:22 note: `alloc::rc::Rc<collections::vec::Vec<i32>>`\n-            cannot be sent between threads safely\n-```\n-\n-As the error message mentions, `Rc` cannot be sent between threads safely. This\n-is because the internal reference count is not maintained in a thread safe\n-matter and can have a data race.\n-\n-To solve this, we'll use `Arc<T>`, Rust's standard atomic reference count type.\n-\n-The Atomic part means `Arc<T>` can safely be accessed from multiple threads.\n-To do this the compiler guarantees that mutations of the internal count use\n-indivisible operations which can't have data races.\n-\n-In essence, `Arc<T>` is a type that lets us share ownership of data _across\n-threads_.\n-\n-\n-```rust,ignore\n-use std::thread;\n-use std::sync::Arc;\n-use std::time::Duration;\n-\n-fn main() {\n-    let mut data = Arc::new(vec![1, 2, 3]);\n-\n-    for i in 0..3 {\n-        let data = data.clone();\n-        thread::spawn(move || {\n-            data[0] += i;\n-        });\n-    }\n-\n-    thread::sleep(Duration::from_millis(50));\n-}\n-```\n-\n-Similarly to last time, we use `clone()` to create a new owned handle.\n-This handle is then moved into the new thread.\n-\n-And... still gives us an error.\n-\n-```text\n-<anon>:11:24 error: cannot borrow immutable borrowed content as mutable\n-<anon>:11                    data[0] += i;\n-                             ^~~~\n-```\n-\n-`Arc<T>` by default has immutable contents. It allows the _sharing_ of data\n-between threads, but shared mutable data is unsafe\u2014and when threads are\n-involved\u2014can cause data races!\n-\n-\n-Usually when we wish to make something in an immutable position mutable, we use\n-`Cell<T>` or `RefCell<T>` which allow safe mutation via runtime checks or\n-otherwise (see also: [Choosing Your Guarantees](choosing-your-guarantees.html)).\n-However, similar to `Rc`, these are not thread safe. If we try using these, we\n-will get an error about these types not being `Sync`, and the code will fail to\n-compile.\n-\n-It looks like we need some type that allows us to safely mutate a shared value\n-across threads, for example a type that can ensure only one thread at a time is\n-able to mutate the value inside it at any one time.\n-\n-For that, we can use the `Mutex<T>` type!\n-\n-Here's the working version:\n-\n-```rust\n-use std::sync::{Arc, Mutex};\n-use std::thread;\n-use std::time::Duration;\n-\n-fn main() {\n-    let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n-\n-    for i in 0..3 {\n-        let data = data.clone();\n-        thread::spawn(move || {\n-            let mut data = data.lock().unwrap();\n-            data[0] += i;\n-        });\n-    }\n-\n-    thread::sleep(Duration::from_millis(50));\n-}\n-```\n-\n-Note that the value of `i` is bound (copied) to the closure and not shared\n-among the threads.\n-\n-We're \"locking\" the mutex here. A mutex (short for \"mutual exclusion\"), as\n-mentioned, only allows one thread at a time to access a value. When we wish to\n-access the value, we use `lock()` on it. This will \"lock\" the mutex, and no\n-other thread will be able to lock it (and hence, do anything with the value)\n-until we're done with it. If a thread attempts to lock a mutex which is already\n-locked, it will wait until the other thread releases the lock.\n-\n-The lock \"release\" here is implicit; when the result of the lock (in this case,\n-`data`) goes out of scope, the lock is automatically released.\n-\n-Note that [`lock`](../std/sync/struct.Mutex.html#method.lock) method of\n-[`Mutex`](../std/sync/struct.Mutex.html) has this signature:\n-\n-```rust,ignore\n-fn lock(&self) -> LockResult<MutexGuard<T>>\n-```\n-\n-and because `Send` is not implemented for `MutexGuard<T>`, the guard cannot\n-cross thread boundaries, ensuring thread-locality of lock acquire and release.\n-\n-Let's examine the body of the thread more closely:\n-\n-```rust\n-# use std::sync::{Arc, Mutex};\n-# use std::thread;\n-# use std::time::Duration;\n-# fn main() {\n-#     let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n-#     for i in 0..3 {\n-#         let data = data.clone();\n-thread::spawn(move || {\n-    let mut data = data.lock().unwrap();\n-    data[0] += i;\n-});\n-#     }\n-#     thread::sleep(Duration::from_millis(50));\n-# }\n-```\n-\n-First, we call `lock()`, which acquires the mutex's lock. Because this may fail,\n-it returns a `Result<T, E>`, and because this is just an example, we `unwrap()`\n-it to get a reference to the data. Real code would have more robust error handling\n-here. We're then free to mutate it, since we have the lock.\n-\n-Lastly, while the threads are running, we wait on a short timer. But\n-this is not ideal: we may have picked a reasonable amount of time to\n-wait but it's more likely we'll either be waiting longer than\n-necessary or not long enough, depending on just how much time the\n-threads actually take to finish computing when the program runs.\n-\n-A more precise alternative to the timer would be to use one of the\n-mechanisms provided by the Rust standard library for synchronizing\n-threads with each other. Let's talk about one of them: channels.\n-\n-## Channels\n-\n-Here's a version of our code that uses channels for synchronization, rather\n-than waiting for a specific time:\n-\n-```rust\n-use std::sync::{Arc, Mutex};\n-use std::thread;\n-use std::sync::mpsc;\n-\n-fn main() {\n-    let data = Arc::new(Mutex::new(0));\n-\n-    // `tx` is the \"transmitter\" or \"sender\".\n-    // `rx` is the \"receiver\".\n-    let (tx, rx) = mpsc::channel();\n-\n-    for _ in 0..10 {\n-        let (data, tx) = (data.clone(), tx.clone());\n-\n-        thread::spawn(move || {\n-            let mut data = data.lock().unwrap();\n-            *data += 1;\n-\n-            tx.send(()).unwrap();\n-        });\n-    }\n-\n-    for _ in 0..10 {\n-        rx.recv().unwrap();\n-    }\n-}\n-```\n-\n-We use the `mpsc::channel()` method to construct a new channel. We `send`\n-a simple `()` down the channel, and then wait for ten of them to come back.\n-\n-While this channel is sending a generic signal, we can send any data that\n-is `Send` over the channel!\n-\n-```rust\n-use std::thread;\n-use std::sync::mpsc;\n-\n-fn main() {\n-    let (tx, rx) = mpsc::channel();\n-\n-    for i in 0..10 {\n-        let tx = tx.clone();\n-\n-        thread::spawn(move || {\n-            let answer = i * i;\n-\n-            tx.send(answer).unwrap();\n-        });\n-    }\n-\n-    for _ in 0..10 {\n-        println!(\"{}\", rx.recv().unwrap());\n-    }\n-}\n-```\n-\n-Here we create 10 threads, asking each to calculate the square of a number (`i`\n-at the time of `spawn()`), and then `send()` back the answer over the channel.\n-\n-\n-## Panics\n-\n-A `panic!` will crash the currently executing thread. You can use Rust's\n-threads as a simple isolation mechanism:\n-\n-```rust\n-use std::thread;\n-\n-let handle = thread::spawn(move || {\n-    panic!(\"oops!\");\n-});\n-\n-let result = handle.join();\n-\n-assert!(result.is_err());\n-```\n-\n-`Thread.join()` gives us a `Result` back, which allows us to check if the thread\n-has panicked or not."}, {"sha": "0562e9fc430f68737a46c6d26ede8b9fbd01bd2f", "filename": "src/doc/book/src/conditional-compilation.md", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,91 +0,0 @@\n-# Conditional Compilation\n-\n-Rust has a special attribute, `#[cfg]`, which allows you to compile code\n-based on a flag passed to the compiler. It has two forms:\n-\n-```rust\n-#[cfg(foo)]\n-# fn foo() {}\n-\n-#[cfg(bar = \"baz\")]\n-# fn bar() {}\n-```\n-\n-They also have some helpers:\n-\n-```rust\n-#[cfg(any(unix, windows))]\n-# fn foo() {}\n-\n-#[cfg(all(unix, target_pointer_width = \"32\"))]\n-# fn bar() {}\n-\n-#[cfg(not(foo))]\n-# fn not_foo() {}\n-```\n-\n-These can nest arbitrarily:\n-\n-```rust\n-#[cfg(any(not(unix), all(target_os=\"macos\", target_arch = \"powerpc\")))]\n-# fn foo() {}\n-```\n-\n-As for how to enable or disable these switches, if you\u2019re using Cargo,\n-they get set in the [`[features]` section][features] of your `Cargo.toml`:\n-\n-[features]: http://doc.crates.io/manifest.html#the-features-section\n-\n-```toml\n-[features]\n-# no features by default\n-default = []\n-\n-# Add feature \"foo\" here, then you can use it. \n-# Our \"foo\" feature depends on nothing else.\n-foo = []\n-```\n-\n-When you do this, Cargo passes along a flag to `rustc`:\n-\n-```text\n---cfg feature=\"${feature_name}\"\n-```\n-\n-The sum of these `cfg` flags will determine which ones get activated, and\n-therefore, which code gets compiled. Let\u2019s take this code:\n-\n-```rust\n-#[cfg(feature = \"foo\")]\n-mod foo {\n-}\n-```\n-\n-If we compile it with `cargo build --features \"foo\"`, it will send the `--cfg\n-feature=\"foo\"` flag to `rustc`, and the output will have the `mod foo` in it.\n-If we compile it with a regular `cargo build`, no extra flags get passed on,\n-and so, no `foo` module will exist.\n-\n-# cfg_attr\n-\n-You can also set another attribute based on a `cfg` variable with `cfg_attr`:\n-\n-```rust\n-#[cfg_attr(a, b)]\n-# fn foo() {}\n-```\n-\n-Will be the same as `#[b]` if `a` is set by `cfg` attribute, and nothing otherwise.\n-\n-# cfg!\n-\n-The `cfg!` macro lets you use these kinds of flags elsewhere in your code, too:\n-\n-```rust\n-if cfg!(target_os = \"macos\") || cfg!(target_os = \"ios\") {\n-    println!(\"Think Different!\");\n-}\n-```\n-\n-These will be replaced by a `true` or `false` at compile-time, depending on the\n-configuration settings."}, {"sha": "66a48566bd7c4256a39210c2a73f5d042f4539e2", "filename": "src/doc/book/src/const-and-static.md", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconst-and-static.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,83 +0,0 @@\n-# const and static\n-\n-Rust has a way of defining constants with the `const` keyword:\n-\n-```rust\n-const N: i32 = 5;\n-```\n-\n-Unlike [`let`][let] bindings, you must annotate the type of a `const`.\n-\n-[let]: variable-bindings.html\n-\n-Constants live for the entire lifetime of a program. More specifically,\n-constants in Rust have no fixed address in memory. This is because they\u2019re\n-effectively inlined to each place that they\u2019re used. References to the same\n-constant are not necessarily guaranteed to refer to the same memory address for\n-this reason.\n-\n-# `static`\n-\n-Rust provides a \u2018global variable\u2019 sort of facility in static items. They\u2019re\n-similar to constants, but static items aren\u2019t inlined upon use. This means that\n-there is only one instance for each value, and it\u2019s at a fixed location in\n-memory.\n-\n-Here\u2019s an example:\n-\n-```rust\n-static N: i32 = 5;\n-```\n-\n-Unlike [`let`][let] bindings, you must annotate the type of a `static`.\n-\n-Statics live for the entire lifetime of a program, and therefore any\n-reference stored in a static has a [`'static` lifetime][lifetimes]:\n-\n-```rust\n-static NAME: &'static str = \"Steve\";\n-```\n-\n-[lifetimes]: lifetimes.html\n-\n-## Mutability\n-\n-You can introduce mutability with the `mut` keyword:\n-\n-```rust\n-static mut N: i32 = 5;\n-```\n-\n-Because this is mutable, one thread could be updating `N` while another is\n-reading it, causing memory unsafety. As such both accessing and mutating a\n-`static mut` is [`unsafe`][unsafe], and so must be done in an `unsafe` block:\n-\n-```rust\n-# static mut N: i32 = 5;\n-\n-unsafe {\n-    N += 1;\n-\n-    println!(\"N: {}\", N);\n-}\n-```\n-\n-[unsafe]: unsafe.html\n-\n-Furthermore, any type stored in a `static` must be `Sync`, and must not have\n-a [`Drop`][drop] implementation.\n-\n-[drop]: drop.html\n-\n-# Initializing\n-\n-Both `const` and `static` have requirements for giving them a value. They must\n-be given a value that\u2019s a constant expression. In other words, you cannot use\n-the result of a function call or anything similarly complex or at runtime.\n-\n-# Which construct should I use?\n-\n-Almost always, if you can choose between the two, choose `const`. It\u2019s pretty\n-rare that you actually want a memory location associated with your constant,\n-and using a `const` allows for optimizations like constant propagation not only\n-in your crate but downstream crates."}, {"sha": "84f5fac044e0e9604db602c43e6e97388c634c33", "filename": "src/doc/book/src/crates-and-modules.md", "status": "removed", "additions": 0, "deletions": 593, "changes": 593, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcrates-and-modules.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,593 +0,0 @@\n-# Crates and Modules\n-\n-When a project starts getting large, it\u2019s considered good software\n-engineering practice to split it up into a bunch of smaller pieces, and then\n-fit them together. It is also important to have a well-defined interface, so\n-that some of your functionality is private, and some is public. To facilitate\n-these kinds of things, Rust has a module system.\n-\n-# Basic terminology: Crates and Modules\n-\n-Rust has two distinct terms that relate to the module system: \u2018crate\u2019 and\n-\u2018module\u2019. A crate is synonymous with a \u2018library\u2019 or \u2018package\u2019 in other\n-languages. Hence \u201cCargo\u201d as the name of Rust\u2019s package management tool: you\n-ship your crates to others with Cargo. Crates can produce an executable or a\n-library, depending on the project.\n-\n-Each crate has an implicit *root module* that contains the code for that crate.\n-You can then define a tree of sub-modules under that root module. Modules allow\n-you to partition your code within the crate itself.\n-\n-As an example, let\u2019s make a *phrases* crate, which will give us various phrases\n-in different languages. To keep things simple, we\u2019ll stick to \u2018greetings\u2019 and\n-\u2018farewells\u2019 as two kinds of phrases, and use English and Japanese (\u65e5\u672c\u8a9e) as\n-two languages for those phrases to be in. We\u2019ll use this module layout:\n-\n-```text\n-                                    +-----------+\n-                                +---| greetings |\n-                  +---------+   |   +-----------+\n-              +---| english |---+\n-              |   +---------+   |   +-----------+\n-              |                 +---| farewells |\n-+---------+   |                     +-----------+\n-| phrases |---+\n-+---------+   |                     +-----------+\n-              |                 +---| greetings |\n-              |   +----------+  |   +-----------+\n-              +---| japanese |--+\n-                  +----------+  |   +-----------+\n-                                +---| farewells |\n-                                    +-----------+\n-```\n-\n-In this example, `phrases` is the name of our crate. All of the rest are\n-modules.  You can see that they form a tree, branching out from the crate\n-*root*, which is the root of the tree: `phrases` itself.\n-\n-Now that we have a plan, let\u2019s define these modules in code. To start,\n-generate a new crate with Cargo:\n-\n-```bash\n-$ cargo new phrases\n-$ cd phrases\n-```\n-\n-If you remember, this generates a simple project for us:\n-\n-```bash\n-$ tree .\n-.\n-\u251c\u2500\u2500 Cargo.toml\n-\u2514\u2500\u2500 src\n-    \u2514\u2500\u2500 lib.rs\n-\n-1 directory, 2 files\n-```\n-\n-`src/lib.rs` is our crate root, corresponding to the `phrases` in our diagram\n-above.\n-\n-# Defining Modules\n-\n-To define each of our modules, we use the `mod` keyword. Let\u2019s make our\n-`src/lib.rs` look like this:\n-\n-```rust\n-mod english {\n-    mod greetings {\n-    }\n-\n-    mod farewells {\n-    }\n-}\n-\n-mod japanese {\n-    mod greetings {\n-    }\n-\n-    mod farewells {\n-    }\n-}\n-```\n-\n-After the `mod` keyword, you give the name of the module. Module names follow\n-the conventions for other Rust identifiers: `lower_snake_case`. The contents of\n-each module are within curly braces (`{}`).\n-\n-Within a given `mod`, you can declare sub-`mod`s. We can refer to sub-modules\n-with double-colon (`::`) notation: our four nested modules are\n-`english::greetings`, `english::farewells`, `japanese::greetings`, and\n-`japanese::farewells`. Because these sub-modules are namespaced under their\n-parent module, the names don\u2019t conflict: `english::greetings` and\n-`japanese::greetings` are distinct, even though their names are both\n-`greetings`.\n-\n-Because this crate does not have a `main()` function, and is called `lib.rs`,\n-Cargo will build this crate as a library:\n-\n-```bash\n-$ cargo build\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-$ ls target/debug\n-build  deps  examples  libphrases-a7448e02a0468eaa.rlib  native\n-```\n-\n-`libphrases-<hash>.rlib` is the compiled crate. Before we see how to use this\n-crate from another crate, let\u2019s break it up into multiple files.\n-\n-# Multiple File Crates\n-\n-If each crate were just one file, these files would get very large. It\u2019s often\n-easier to split up crates into multiple files, and Rust supports this in two\n-ways.\n-\n-Instead of declaring a module like this:\n-\n-```rust,ignore\n-mod english {\n-    // Contents of our module go here.\n-}\n-```\n-\n-We can instead declare our module like this:\n-\n-```rust,ignore\n-mod english;\n-```\n-\n-If we do that, Rust will expect to find either a `english.rs` file, or a\n-`english/mod.rs` file with the contents of our module.\n-\n-Note that in these files, you don\u2019t need to re-declare the module: that\u2019s\n-already been done with the initial `mod` declaration.\n-\n-Using these two techniques, we can break up our crate into two directories and\n-seven files:\n-\n-```bash\n-$ tree .\n-.\n-\u251c\u2500\u2500 Cargo.lock\n-\u251c\u2500\u2500 Cargo.toml\n-\u251c\u2500\u2500 src\n-\u2502\u00a0\u00a0 \u251c\u2500\u2500 english\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 farewells.rs\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 greetings.rs\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mod.rs\n-\u2502\u00a0\u00a0 \u251c\u2500\u2500 japanese\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 farewells.rs\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 greetings.rs\n-\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mod.rs\n-\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib.rs\n-\u2514\u2500\u2500 target\n-    \u2514\u2500\u2500 debug\n-        \u251c\u2500\u2500 build\n-        \u251c\u2500\u2500 deps\n-        \u251c\u2500\u2500 examples\n-        \u251c\u2500\u2500 libphrases-a7448e02a0468eaa.rlib\n-        \u2514\u2500\u2500 native\n-```\n-\n-`src/lib.rs` is our crate root, and looks like this:\n-\n-```rust,ignore\n-mod english;\n-mod japanese;\n-```\n-\n-These two declarations tell Rust to look for either `src/english.rs` and\n-`src/japanese.rs`, or `src/english/mod.rs` and `src/japanese/mod.rs`, depending\n-on our preference. In this case, because our modules have sub-modules, we\u2019ve\n-chosen the second. Both `src/english/mod.rs` and `src/japanese/mod.rs` look\n-like this:\n-\n-```rust,ignore\n-mod greetings;\n-mod farewells;\n-```\n-\n-Again, these declarations tell Rust to look for either\n-`src/english/greetings.rs`, `src/english/farewells.rs`,\n-`src/japanese/greetings.rs` and `src/japanese/farewells.rs` or\n-`src/english/greetings/mod.rs`, `src/english/farewells/mod.rs`,\n-`src/japanese/greetings/mod.rs` and\n-`src/japanese/farewells/mod.rs`. Because these sub-modules don\u2019t have\n-their own sub-modules, we\u2019ve chosen to make them\n-`src/english/greetings.rs`, `src/english/farewells.rs`,\n-`src/japanese/greetings.rs` and `src/japanese/farewells.rs`. Whew!\n-\n-The contents of `src/english/greetings.rs`,\n-`src/english/farewells.rs`, `src/japanese/greetings.rs` and\n-`src/japanese/farewells.rs` are all empty at the moment. Let\u2019s add\n-some functions.\n-\n-Put this in `src/english/greetings.rs`:\n-\n-```rust\n-fn hello() -> String {\n-    \"Hello!\".to_string()\n-}\n-```\n-\n-Put this in `src/english/farewells.rs`:\n-\n-```rust\n-fn goodbye() -> String {\n-    \"Goodbye.\".to_string()\n-}\n-```\n-\n-Put this in `src/japanese/greetings.rs`:\n-\n-```rust\n-fn hello() -> String {\n-    \"\u3053\u3093\u306b\u3061\u306f\".to_string()\n-}\n-```\n-\n-Of course, you can copy and paste this from this web page, or type\n-something else. It\u2019s not important that you actually put \u2018konnichiwa\u2019 to learn\n-about the module system.\n-\n-Put this in `src/japanese/farewells.rs`:\n-\n-```rust\n-fn goodbye() -> String {\n-    \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n-}\n-```\n-\n-(This is \u2018Say\u014dnara\u2019, if you\u2019re curious.)\n-\n-Now that we have some functionality in our crate, let\u2019s try to use it from\n-another crate.\n-\n-# Importing External Crates\n-\n-We have a library crate. Let\u2019s make an executable crate that imports and uses\n-our library.\n-\n-Make a `src/main.rs` and put this in it (it won\u2019t quite compile yet):\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", phrases::english::greetings::hello());\n-    println!(\"Goodbye in English: {}\", phrases::english::farewells::goodbye());\n-\n-    println!(\"Hello in Japanese: {}\", phrases::japanese::greetings::hello());\n-    println!(\"Goodbye in Japanese: {}\", phrases::japanese::farewells::goodbye());\n-}\n-```\n-\n-The `extern crate` declaration tells Rust that we need to compile and link to\n-the `phrases` crate. We can then use `phrases`\u2019 modules in this one. As we\n-mentioned earlier, you can use double colons to refer to sub-modules and the\n-functions inside of them.\n-\n-(Note: when importing a crate that has dashes in its name \"like-this\", which is\n-not a valid Rust identifier, it will be converted by changing the dashes to\n-underscores, so you would write `extern crate like_this;`.)\n-\n-Also, Cargo assumes that `src/main.rs` is the crate root of a binary crate,\n-rather than a library crate. Our package now has two crates: `src/lib.rs` and\n-`src/main.rs`. This pattern is quite common for executable crates: most\n-functionality is in a library crate, and the executable crate uses that\n-library. This way, other programs can also use the library crate, and it\u2019s also\n-a nice separation of concerns.\n-\n-This doesn\u2019t quite work yet, though. We get four errors that look similar to\n-this:\n-\n-```bash\n-$ cargo build\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-src/main.rs:4:38: 4:72 error: function `hello` is private\n-src/main.rs:4     println!(\"Hello in English: {}\", phrases::english::greetings::hello());\n-                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-note: in expansion of format_args!\n-<std macros>:2:25: 2:58 note: expansion site\n-<std macros>:1:1: 2:62 note: in expansion of print!\n-<std macros>:3:1: 3:54 note: expansion site\n-<std macros>:1:1: 3:58 note: in expansion of println!\n-phrases/src/main.rs:4:5: 4:76 note: expansion site\n-```\n-\n-By default, everything is private in Rust. Let\u2019s talk about this in some more\n-depth.\n-\n-# Exporting a Public Interface\n-\n-Rust allows you to precisely control which aspects of your interface are\n-public, and so private is the default. To make things public, you use the `pub`\n-keyword. Let\u2019s focus on the `english` module first, so let\u2019s reduce our `src/main.rs`\n-to only this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", phrases::english::greetings::hello());\n-    println!(\"Goodbye in English: {}\", phrases::english::farewells::goodbye());\n-}\n-```\n-\n-In our `src/lib.rs`, let\u2019s add `pub` to the `english` module declaration:\n-\n-```rust,ignore\n-pub mod english;\n-mod japanese;\n-```\n-\n-And in our `src/english/mod.rs`, let\u2019s make both `pub`:\n-\n-```rust,ignore\n-pub mod greetings;\n-pub mod farewells;\n-```\n-\n-In our `src/english/greetings.rs`, let\u2019s add `pub` to our `fn` declaration:\n-\n-```rust,ignore\n-pub fn hello() -> String {\n-    \"Hello!\".to_string()\n-}\n-```\n-\n-And also in `src/english/farewells.rs`:\n-\n-```rust,ignore\n-pub fn goodbye() -> String {\n-    \"Goodbye.\".to_string()\n-}\n-```\n-\n-Now, our crate compiles, albeit with warnings about not using the `japanese`\n-functions:\n-\n-```bash\n-$ cargo run\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-src/japanese/greetings.rs:1:1: 3:2 warning: function is never used: `hello`, #[warn(dead_code)] on by default\n-src/japanese/greetings.rs:1 fn hello() -> String {\n-src/japanese/greetings.rs:2     \"\u3053\u3093\u306b\u3061\u306f\".to_string()\n-src/japanese/greetings.rs:3 }\n-src/japanese/farewells.rs:1:1: 3:2 warning: function is never used: `goodbye`, #[warn(dead_code)] on by default\n-src/japanese/farewells.rs:1 fn goodbye() -> String {\n-src/japanese/farewells.rs:2     \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n-src/japanese/farewells.rs:3 }\n-     Running `target/debug/phrases`\n-Hello in English: Hello!\n-Goodbye in English: Goodbye.\n-```\n-\n-`pub` also applies to `struct`s and their member fields. In keeping with Rust\u2019s\n-tendency toward safety, simply making a `struct` public won't automatically\n-make its members public: you must mark the fields individually with `pub`.\n-\n-Now that our functions are public, we can use them. Great! However, typing out\n-`phrases::english::greetings::hello()` is very long and repetitive. Rust has\n-another keyword for importing names into the current scope, so that you can\n-refer to them with shorter names. Let\u2019s talk about `use`.\n-\n-# Importing Modules with `use`\n-\n-Rust has a `use` keyword, which allows us to import names into our local scope.\n-Let\u2019s change our `src/main.rs` to look like this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-use phrases::english::greetings;\n-use phrases::english::farewells;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", greetings::hello());\n-    println!(\"Goodbye in English: {}\", farewells::goodbye());\n-}\n-```\n-\n-The two `use` lines import each module into the local scope, so we can refer to\n-the functions by a much shorter name. By convention, when importing functions, it\u2019s\n-considered best practice to import the module, rather than the function directly. In\n-other words, you _can_ do this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-use phrases::english::greetings::hello;\n-use phrases::english::farewells::goodbye;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", hello());\n-    println!(\"Goodbye in English: {}\", goodbye());\n-}\n-```\n-\n-But it is not idiomatic. This is significantly more likely to introduce a\n-naming conflict. In our short program, it\u2019s not a big deal, but as it grows, it\n-becomes a problem. If we have conflicting names, Rust will give a compilation\n-error. For example, if we made the `japanese` functions public, and tried to do\n-this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-use phrases::english::greetings::hello;\n-use phrases::japanese::greetings::hello;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", hello());\n-    println!(\"Hello in Japanese: {}\", hello());\n-}\n-```\n-\n-Rust will give us a compile-time error:\n-\n-```text\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-src/main.rs:4:5: 4:40 error: a value named `hello` has already been imported in this module [E0252]\n-src/main.rs:4 use phrases::japanese::greetings::hello;\n-                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-error: aborting due to previous error\n-Could not compile `phrases`.\n-```\n-\n-If we\u2019re importing multiple names from the same module, we don\u2019t have to type it out\n-twice. Instead of this:\n-\n-```rust,ignore\n-use phrases::english::greetings;\n-use phrases::english::farewells;\n-```\n-\n-We can use this shortcut:\n-\n-```rust,ignore\n-use phrases::english::{greetings, farewells};\n-```\n-\n-## Re-exporting with `pub use`\n-\n-You don\u2019t only use `use` to shorten identifiers. You can also use it inside of your crate\n-to re-export a function inside another module. This allows you to present an external\n-interface that may not directly map to your internal code organization.\n-\n-Let\u2019s look at an example. Modify your `src/main.rs` to read like this:\n-\n-```rust,ignore\n-extern crate phrases;\n-\n-use phrases::english::{greetings,farewells};\n-use phrases::japanese;\n-\n-fn main() {\n-    println!(\"Hello in English: {}\", greetings::hello());\n-    println!(\"Goodbye in English: {}\", farewells::goodbye());\n-\n-    println!(\"Hello in Japanese: {}\", japanese::hello());\n-    println!(\"Goodbye in Japanese: {}\", japanese::goodbye());\n-}\n-```\n-\n-Then, modify your `src/lib.rs` to make the `japanese` mod public:\n-\n-```rust,ignore\n-pub mod english;\n-pub mod japanese;\n-```\n-\n-Next, make the two functions public, first in `src/japanese/greetings.rs`:\n-\n-```rust,ignore\n-pub fn hello() -> String {\n-    \"\u3053\u3093\u306b\u3061\u306f\".to_string()\n-}\n-```\n-\n-And then in `src/japanese/farewells.rs`:\n-\n-```rust,ignore\n-pub fn goodbye() -> String {\n-    \"\u3055\u3088\u3046\u306a\u3089\".to_string()\n-}\n-```\n-\n-Finally, modify your `src/japanese/mod.rs` to read like this:\n-\n-```rust,ignore\n-pub use self::greetings::hello;\n-pub use self::farewells::goodbye;\n-\n-mod greetings;\n-mod farewells;\n-```\n-\n-The `pub use` declaration brings the function into scope at this part of our\n-module hierarchy. Because we\u2019ve `pub use`d this inside of our `japanese`\n-module, we now have a `phrases::japanese::hello()` function and a\n-`phrases::japanese::goodbye()` function, even though the code for them lives in\n-`phrases::japanese::greetings::hello()` and\n-`phrases::japanese::farewells::goodbye()`. Our internal organization doesn\u2019t\n-define our external interface.\n-\n-Here we have a `pub use` for each function we want to bring into the\n-`japanese` scope. We could alternatively use the wildcard syntax to include\n-everything from `greetings` into the current scope: `pub use self::greetings::*`.\n-\n-What about the `self`? Well, by default, `use` declarations are absolute paths,\n-starting from your crate root. `self` makes that path relative to your current\n-place in the hierarchy instead. There\u2019s one more special form of `use`: you can\n-`use super::` to reach one level up the tree from your current location. Some\n-people like to think of `self` as `.` and `super` as `..`, from many shells\u2019\n-display for the current directory and the parent directory.\n-\n-Outside of `use`, paths are relative: `foo::bar()` refers to a function inside\n-of `foo` relative to where we are. If that\u2019s prefixed with `::`, as in\n-`::foo::bar()`, it refers to a different `foo`, an absolute path from your\n-crate root.\n-\n-This will build and run:\n-\n-```bash\n-$ cargo run\n-   Compiling phrases v0.0.1 (file:///home/you/projects/phrases)\n-     Running `target/debug/phrases`\n-Hello in English: Hello!\n-Goodbye in English: Goodbye.\n-Hello in Japanese: \u3053\u3093\u306b\u3061\u306f\n-Goodbye in Japanese: \u3055\u3088\u3046\u306a\u3089\n-```\n-\n-## Complex imports\n-\n-Rust offers several advanced options that can add compactness and\n-convenience to your `extern crate` and `use` statements. Here is an example:\n-\n-```rust,ignore\n-extern crate phrases as sayings;\n-\n-use sayings::japanese::greetings as ja_greetings;\n-use sayings::japanese::farewells::*;\n-use sayings::english::{self, greetings as en_greetings, farewells as en_farewells};\n-\n-fn main() {\n-    println!(\"Hello in English; {}\", en_greetings::hello());\n-    println!(\"And in Japanese: {}\", ja_greetings::hello());\n-    println!(\"Goodbye in English: {}\", english::farewells::goodbye());\n-    println!(\"Again: {}\", en_farewells::goodbye());\n-    println!(\"And in Japanese: {}\", goodbye());\n-}\n-```\n-\n-What's going on here?\n-\n-First, both `extern crate` and `use` allow renaming the thing that is being\n-imported. So the crate is still called \"phrases\", but here we will refer\n-to it as \"sayings\". Similarly, the first `use` statement pulls in the\n-`japanese::greetings` module from the crate, but makes it available as\n-`ja_greetings` as opposed to simply `greetings`. This can help to avoid\n-ambiguity when importing similarly-named items from different places.\n-\n-The second `use` statement uses a star glob to bring in all public symbols from\n-the `sayings::japanese::farewells` module. As you can see we can later refer to\n-the Japanese `goodbye` function with no module qualifiers. This kind of glob\n-should be used sparingly. It\u2019s worth noting that it only imports the public\n-symbols, even if the code doing the globbing is in the same module.\n-\n-The third `use` statement bears more explanation. It's using \"brace expansion\"\n-globbing to compress three `use` statements into one (this sort of syntax\n-may be familiar if you've written Linux shell scripts before). The\n-uncompressed form of this statement would be:\n-\n-```rust,ignore\n-use sayings::english;\n-use sayings::english::greetings as en_greetings;\n-use sayings::english::farewells as en_farewells;\n-```\n-\n-As you can see, the curly brackets compress `use` statements for several items\n-under the same path, and in this context `self` refers back to that path.\n-Note: The curly brackets cannot be nested or mixed with star globbing."}, {"sha": "8552a7c8b3425b56da83a615759af64c9f0288e5", "filename": "src/doc/book/src/deref-coercions.md", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fderef-coercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fderef-coercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fderef-coercions.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,119 +0,0 @@\n-# `Deref` coercions\n-\n-The standard library provides a special trait, [`Deref`][deref]. It\u2019s normally\n-used to overload `*`, the dereference operator:\n-\n-```rust\n-use std::ops::Deref;\n-\n-struct DerefExample<T> {\n-    value: T,\n-}\n-\n-impl<T> Deref for DerefExample<T> {\n-    type Target = T;\n-\n-    fn deref(&self) -> &T {\n-        &self.value\n-    }\n-}\n-\n-fn main() {\n-    let x = DerefExample { value: 'a' };\n-    assert_eq!('a', *x);\n-}\n-```\n-\n-[deref]: ../std/ops/trait.Deref.html\n-\n-This is useful for writing custom pointer types. However, there\u2019s a language\n-feature related to `Deref`: \u2018deref coercions\u2019. Here\u2019s the rule: If you have a\n-type `U`, and it implements `Deref<Target=T>`, values of `&U` will\n-automatically coerce to a `&T`. Here\u2019s an example:\n-\n-```rust\n-fn foo(s: &str) {\n-    // Borrow a string for a second.\n-}\n-\n-// String implements Deref<Target=str>.\n-let owned = \"Hello\".to_string();\n-\n-// Therefore, this works:\n-foo(&owned);\n-```\n-\n-Using an ampersand in front of a value takes a reference to it. So `owned` is a\n-`String`, `&owned` is an `&String`, and since `impl Deref<Target=str> for\n-String`, `&String` will deref to `&str`, which `foo()` takes.\n-\n-That\u2019s it. This rule is one of the only places in which Rust does an automatic\n-conversion for you, but it adds a lot of flexibility. For example, the `Rc<T>`\n-type implements `Deref<Target=T>`, so this works:\n-\n-```rust\n-use std::rc::Rc;\n-\n-fn foo(s: &str) {\n-    // Borrow a string for a second.\n-}\n-\n-// String implements Deref<Target=str>.\n-let owned = \"Hello\".to_string();\n-let counted = Rc::new(owned);\n-\n-// Therefore, this works:\n-foo(&counted);\n-```\n-\n-All we\u2019ve done is wrap our `String` in an `Rc<T>`. But we can now pass the\n-`Rc<String>` around anywhere we\u2019d have a `String`. The signature of `foo`\n-didn\u2019t change, but works just as well with either type. This example has two\n-conversions: `&Rc<String>` to `&String` and then `&String` to `&str`. Rust will do\n-this as many times as possible until the types match.\n-\n-Another very common implementation provided by the standard library is:\n-\n-```rust\n-fn foo(s: &[i32]) {\n-    // Borrow a slice for a second.\n-}\n-\n-// Vec<T> implements Deref<Target=[T]>.\n-let owned = vec![1, 2, 3];\n-\n-foo(&owned);\n-```\n-\n-Vectors can `Deref` to a slice.\n-\n-## Deref and method calls\n-\n-`Deref` will also kick in when calling a method. Consider the following\n-example.\n-\n-```rust\n-struct Foo;\n-\n-impl Foo {\n-    fn foo(&self) { println!(\"Foo\"); }\n-}\n-\n-let f = &&Foo;\n-\n-f.foo();\n-```\n-\n-Even though `f` is a `&&Foo` and `foo` takes `&self`, this works. That\u2019s\n-because these things are the same:\n-\n-```rust,ignore\n-f.foo();\n-(&f).foo();\n-(&&f).foo();\n-(&&&&&&&&f).foo();\n-```\n-\n-A value of type `&&&&&&&&&&&&&&&&Foo` can still have methods defined on `Foo`\n-called, because the compiler will insert as many * operations as necessary to\n-get it right. And since it\u2019s inserting `*`s, that uses `Deref`."}, {"sha": "69d49e2f96aa896d5b7a705174ce1ed98e6d19fc", "filename": "src/doc/book/src/documentation.md", "status": "removed", "additions": 0, "deletions": 672, "changes": 672, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fdocumentation.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,672 +0,0 @@\n-# Documentation\n-\n-Documentation is an important part of any software project, and it's\n-first-class in Rust. Let's talk about the tooling Rust gives you to\n-document your project.\n-\n-## About `rustdoc`\n-\n-The Rust distribution includes a tool, `rustdoc`, that generates documentation.\n-`rustdoc` is also used by Cargo through `cargo doc`.\n-\n-Documentation can be generated in two ways: from source code, and from\n-standalone Markdown files.\n-\n-## Documenting source code\n-\n-The primary way of documenting a Rust project is through annotating the source\n-code. You can use documentation comments for this purpose:\n-\n-```rust,ignore\n-/// Constructs a new `Rc<T>`.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::rc::Rc;\n-///\n-/// let five = Rc::new(5);\n-/// ```\n-pub fn new(value: T) -> Rc<T> {\n-    // Implementation goes here.\n-}\n-```\n-\n-This code generates documentation that looks [like this][rc-new]. I've left the\n-implementation out, with a regular comment in its place.\n-\n-The first thing to notice about this annotation is that it uses\n-`///` instead of `//`. The triple slash\n-indicates a documentation comment.\n-\n-Documentation comments are written in Markdown.\n-\n-Rust keeps track of these comments, and uses them when generating\n-documentation. This is important when documenting things like enums:\n-\n-```rust\n-/// The `Option` type. See [the module level documentation](index.html) for more.\n-enum Option<T> {\n-    /// No value\n-    None,\n-    /// Some value `T`\n-    Some(T),\n-}\n-```\n-\n-The above works, but this does not:\n-\n-```rust,ignore\n-/// The `Option` type. See [the module level documentation](index.html) for more.\n-enum Option<T> {\n-    None, /// No value\n-    Some(T), /// Some value `T`\n-}\n-```\n-\n-You'll get an error:\n-\n-```text\n-hello.rs:4:1: 4:2 error: expected ident, found `}`\n-hello.rs:4 }\n-           ^\n-```\n-\n-This [unfortunate error](https://github.com/rust-lang/rust/issues/22547) is\n-correct; documentation comments apply to the thing after them, and there's\n-nothing after that last comment.\n-\n-[rc-new]: ../std/rc/struct.Rc.html#method.new\n-\n-### Writing documentation comments\n-\n-Anyway, let's cover each part of this comment in detail:\n-\n-```rust\n-/// Constructs a new `Rc<T>`.\n-# fn foo() {}\n-```\n-\n-The first line of a documentation comment should be a short summary of its\n-functionality. One sentence. Just the basics. High level.\n-\n-```rust\n-///\n-/// Other details about constructing `Rc<T>`s, maybe describing complicated\n-/// semantics, maybe additional options, all kinds of stuff.\n-///\n-# fn foo() {}\n-```\n-\n-Our original example had just a summary line, but if we had more things to say,\n-we could have added more explanation in a new paragraph.\n-\n-#### Special sections\n-\n-Next, are special sections. These are indicated with a header, `#`. There\n-are four kinds of headers that are commonly used. They aren't special syntax,\n-just convention, for now.\n-\n-```rust\n-/// # Panics\n-# fn foo() {}\n-```\n-\n-Unrecoverable misuses of a function (i.e. programming errors) in Rust are\n-usually indicated by panics, which kill the whole current thread at the very\n-least. If your function has a non-trivial contract like this, that is\n-detected/enforced by panics, documenting it is very important.\n-\n-```rust\n-/// # Errors\n-# fn foo() {}\n-```\n-\n-If your function or method returns a `Result<T, E>`, then describing the\n-conditions under which it returns `Err(E)` is a nice thing to do. This is\n-slightly less important than `Panics`, because failure is encoded into the type\n-system, but it's still a good thing to do.\n-\n-```rust\n-/// # Safety\n-# fn foo() {}\n-```\n-\n-If your function is `unsafe`, you should explain which invariants the caller is\n-responsible for upholding.\n-\n-```rust\n-/// # Examples\n-///\n-/// ```\n-/// use std::rc::Rc;\n-///\n-/// let five = Rc::new(5);\n-/// ```\n-# fn foo() {}\n-```\n-\n-Fourth, `Examples`. Include one or more examples of using your function or\n-method, and your users will love you for it. These examples go inside of\n-code block annotations, which we'll talk about in a moment, and can have\n-more than one section:\n-\n-```rust\n-/// # Examples\n-///\n-/// Simple `&str` patterns:\n-///\n-/// ```\n-/// let v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\n-/// assert_eq!(v, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n-/// ```\n-///\n-/// More complex patterns with a lambda:\n-///\n-/// ```\n-/// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).collect();\n-/// assert_eq!(v, vec![\"abc\", \"def\", \"ghi\"]);\n-/// ```\n-# fn foo() {}\n-```\n-\n-Let's discuss the details of these code blocks.\n-\n-#### Code block annotations\n-\n-To write some Rust code in a comment, use the triple graves:\n-\n-```rust\n-/// ```\n-/// println!(\"Hello, world\");\n-/// ```\n-# fn foo() {}\n-```\n-\n-If you want something that's not Rust code, you can add an annotation:\n-\n-```rust\n-/// ```c\n-/// printf(\"Hello, world\\n\");\n-/// ```\n-# fn foo() {}\n-```\n-\n-This will highlight according to whatever language you're showing off.\n-If you're only showing plain text, choose `text`.\n-\n-It's important to choose the correct annotation here, because `rustdoc` uses it\n-in an interesting way: It can be used to actually test your examples in a\n-library crate, so that they don't get out of date. If you have some C code but\n-`rustdoc` thinks it's Rust because you left off the annotation, `rustdoc` will\n-complain when trying to generate the documentation.\n-\n-## Documentation as tests\n-\n-Let's discuss our sample example documentation:\n-\n-```rust\n-/// ```\n-/// println!(\"Hello, world\");\n-/// ```\n-# fn foo() {}\n-```\n-\n-You'll notice that you don't need a `fn main()` or anything here. `rustdoc` will\n-automatically add a `main()` wrapper around your code, using heuristics to attempt\n-to put it in the right place. For example:\n-\n-```rust\n-/// ```\n-/// use std::rc::Rc;\n-///\n-/// let five = Rc::new(5);\n-/// ```\n-# fn foo() {}\n-```\n-\n-This will end up testing:\n-\n-```rust\n-fn main() {\n-    use std::rc::Rc;\n-    let five = Rc::new(5);\n-}\n-```\n-\n-Here's the full algorithm rustdoc uses to preprocess examples:\n-\n-1. Any leading `#![foo]` attributes are left intact as crate attributes.\n-2. Some common `allow` attributes are inserted, including\n-   `unused_variables`, `unused_assignments`, `unused_mut`,\n-   `unused_attributes`, and `dead_code`. Small examples often trigger\n-   these lints.\n-3. If the example does not contain `extern crate`, then `extern crate\n-   <mycrate>;` is inserted (note the lack of `#[macro_use]`).\n-4. Finally, if the example does not contain `fn main`, the remainder of the\n-   text is wrapped in `fn main() { your_code }`.\n-\n-This generated `fn main` can be a problem! If you have `extern crate` or a `mod`\n-statements in the example code that are referred to by `use` statements, they will\n-fail to resolve unless you include at least `fn main() {}` to inhibit step 4.\n-`#[macro_use] extern crate` also does not work except at the crate root, so when\n-testing macros an explicit `main` is always required. It doesn't have to clutter\n-up your docs, though -- keep reading!\n-\n-Sometimes this algorithm isn't enough, though. For example, all of these code samples\n-with `///` we've been talking about? The raw text:\n-\n-```text\n-/// Some documentation.\n-# fn foo() {}\n-```\n-\n-looks different than the output:\n-\n-```rust\n-/// Some documentation.\n-# fn foo() {}\n-```\n-\n-Yes, that's right: you can add lines that start with `# `, and they will\n-be hidden from the output, but will be used when compiling your code. You\n-can use this to your advantage. In this case, documentation comments need\n-to apply to some kind of function, so if I want to show you just a\n-documentation comment, I need to add a little function definition below\n-it. At the same time, it's only there to satisfy the compiler, so hiding\n-it makes the example more clear. You can use this technique to explain\n-longer examples in detail, while still preserving the testability of your\n-documentation.\n-\n-For example, imagine that we wanted to document this code:\n-\n-```rust\n-let x = 5;\n-let y = 6;\n-println!(\"{}\", x + y);\n-```\n-\n-We might want the documentation to end up looking like this:\n-\n-> First, we set `x` to five:\n->\n-> ```rust\n-> let x = 5;\n-> # let y = 6;\n-> # println!(\"{}\", x + y);\n-> ```\n->\n-> Next, we set `y` to six:\n->\n-> ```rust\n-> # let x = 5;\n-> let y = 6;\n-> # println!(\"{}\", x + y);\n-> ```\n->\n-> Finally, we print the sum of `x` and `y`:\n->\n-> ```rust\n-> # let x = 5;\n-> # let y = 6;\n-> println!(\"{}\", x + y);\n-> ```\n-\n-To keep each code block testable, we want the whole program in each block, but\n-we don't want the reader to see every line every time.  Here's what we put in\n-our source code:\n-\n-```text\n-    First, we set `x` to five:\n-\n-    ```rust\n-    let x = 5;\n-    # let y = 6;\n-    # println!(\"{}\", x + y);\n-    ```\n-\n-    Next, we set `y` to six:\n-\n-    ```rust\n-    # let x = 5;\n-    let y = 6;\n-    # println!(\"{}\", x + y);\n-    ```\n-\n-    Finally, we print the sum of `x` and `y`:\n-\n-    ```rust\n-    # let x = 5;\n-    # let y = 6;\n-    println!(\"{}\", x + y);\n-    ```\n-```\n-\n-By repeating all parts of the example, you can ensure that your example still\n-compiles, while only showing the parts that are relevant to that part of your\n-explanation.\n-\n-### Documenting macros\n-\n-Here\u2019s an example of documenting a macro:\n-\n-```rust\n-/// Panic with a given message unless an expression evaluates to true.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #[macro_use] extern crate foo;\n-/// # fn main() {\n-/// panic_unless!(1 + 1 == 2, \u201cMath is broken.\u201d);\n-/// # }\n-/// ```\n-///\n-/// ```rust,should_panic\n-/// # #[macro_use] extern crate foo;\n-/// # fn main() {\n-/// panic_unless!(true == false, \u201cI\u2019m broken.\u201d);\n-/// # }\n-/// ```\n-#[macro_export]\n-macro_rules! panic_unless {\n-    ($condition:expr, $($rest:expr),+) => ({ if ! $condition { panic!($($rest),+); } });\n-}\n-# fn main() {}\n-```\n-\n-You\u2019ll note three things: we need to add our own `extern crate` line, so that\n-we can add the `#[macro_use]` attribute. Second, we\u2019ll need to add our own\n-`main()` as well (for reasons discussed above). Finally, a judicious use of\n-`#` to comment out those two things, so they don\u2019t show up in the output.\n-\n-Another case where the use of `#` is handy is when you want to ignore\n-error handling. Lets say you want the following,\n-\n-```rust,ignore\n-/// use std::io;\n-/// let mut input = String::new();\n-/// try!(io::stdin().read_line(&mut input));\n-```\n-\n-The problem is that `try!` returns a `Result<T, E>` and test functions\n-don't return anything so this will give a mismatched types error.\n-\n-```rust,ignore\n-/// A doc test using try!\n-///\n-/// ```\n-/// use std::io;\n-/// # fn foo() -> io::Result<()> {\n-/// let mut input = String::new();\n-/// try!(io::stdin().read_line(&mut input));\n-/// # Ok(())\n-/// # }\n-/// ```\n-# fn foo() {}\n-```\n-\n-You can get around this by wrapping the code in a function. This catches\n-and swallows the `Result<T, E>` when running tests on the docs. This\n-pattern appears regularly in the standard library.\n-\n-### Running documentation tests\n-\n-To run the tests, either:\n-\n-```bash\n-$ rustdoc --test path/to/my/crate/root.rs\n-# or\n-$ cargo test\n-```\n-\n-That's right, `cargo test` tests embedded documentation too. **However,\n-`cargo test` will not test binary crates, only library ones.** This is\n-due to the way `rustdoc` works: it links against the library to be tested,\n-but with a binary, there\u2019s nothing to link to.\n-\n-There are a few more annotations that are useful to help `rustdoc` do the right\n-thing when testing your code:\n-\n-```rust\n-/// ```rust,ignore\n-/// fn foo() {\n-/// ```\n-# fn foo() {}\n-```\n-\n-The `ignore` directive tells Rust to ignore your code. This is almost never\n-what you want, as it's the most generic. Instead, consider annotating it\n-with `text` if it's not code, or using `#`s to get a working example that\n-only shows the part you care about.\n-\n-```rust\n-/// ```rust,should_panic\n-/// assert!(false);\n-/// ```\n-# fn foo() {}\n-```\n-\n-`should_panic` tells `rustdoc` that the code should compile correctly, but\n-not actually pass as a test.\n-\n-```rust\n-/// ```rust,no_run\n-/// loop {\n-///     println!(\"Hello, world\");\n-/// }\n-/// ```\n-# fn foo() {}\n-```\n-\n-The `no_run` attribute will compile your code, but not run it. This is\n-important for examples such as \"Here's how to retrieve a web page,\"\n-which you would want to ensure compiles, but might be run in a test\n-environment that has no network access.\n-\n-### Documenting modules\n-\n-Rust has another kind of doc comment, `//!`. This comment doesn't document the next item, but the enclosing item. In other words:\n-\n-```rust\n-mod foo {\n-    //! This is documentation for the `foo` module.\n-    //!\n-    //! # Examples\n-\n-    // ...\n-}\n-```\n-\n-This is where you'll see `//!` used most often: for module documentation. If\n-you have a module in `foo.rs`, you'll often open its code and see this:\n-\n-```rust\n-//! A module for using `foo`s.\n-//!\n-//! The `foo` module contains a lot of useful functionality blah blah blah...\n-```\n-\n-### Crate documentation\n-\n-Crates can be documented by placing an inner doc comment (`//!`) at the\n-beginning of the crate root, aka `lib.rs`:\n-\n-```rust\n-//! This is documentation for the `foo` crate.\n-//!\n-//! The foo crate is meant to be used for bar.\n-```\n-\n-### Documentation comment style\n-\n-Check out [RFC 505][rfc505] for full conventions around the style and format of\n-documentation.\n-\n-[rfc505]: https://github.com/rust-lang/rfcs/blob/master/text/0505-api-comment-conventions.md\n-\n-## Other documentation\n-\n-All of this behavior works in non-Rust source files too. Because comments\n-are written in Markdown, they're often `.md` files.\n-\n-When you write documentation in Markdown files, you don't need to prefix\n-the documentation with comments. For example:\n-\n-```rust\n-/// # Examples\n-///\n-/// ```\n-/// use std::rc::Rc;\n-///\n-/// let five = Rc::new(5);\n-/// ```\n-# fn foo() {}\n-```\n-\n-is:\n-\n-~~~markdown\n-# Examples\n-\n-```\n-use std::rc::Rc;\n-\n-let five = Rc::new(5);\n-```\n-~~~\n-\n-when it's in a Markdown file. There is one wrinkle though: Markdown files need\n-to have a title like this:\n-\n-```markdown\n-% The title\n-\n-This is the example documentation.\n-```\n-\n-This `%` line needs to be the very first line of the file.\n-\n-## `doc` attributes\n-\n-At a deeper level, documentation comments are syntactic sugar for documentation\n-attributes:\n-\n-```rust\n-/// this\n-# fn foo() {}\n-\n-#[doc=\"this\"]\n-# fn bar() {}\n-```\n-\n-are the same, as are these:\n-\n-```rust\n-//! this\n-\n-#![doc=\"this\"]\n-```\n-\n-You won't often see this attribute used for writing documentation, but it\n-can be useful when changing some options, or when writing a macro.\n-\n-### Re-exports\n-\n-`rustdoc` will show the documentation for a public re-export in both places:\n-\n-```rust,ignore\n-extern crate foo;\n-\n-pub use foo::bar;\n-```\n-\n-This will create documentation for `bar` both inside the documentation for the\n-crate `foo`, as well as the documentation for your crate. It will use the same\n-documentation in both places.\n-\n-This behavior can be suppressed with `no_inline`:\n-\n-```rust,ignore\n-extern crate foo;\n-\n-#[doc(no_inline)]\n-pub use foo::bar;\n-```\n-\n-## Missing documentation\n-\n-Sometimes you want to make sure that every single public thing in your project\n-is documented, especially when you are working on a library. Rust allows you to\n-to generate warnings or errors, when an item is missing documentation.\n-To generate warnings you use `warn`:\n-\n-```rust,ignore\n-#![warn(missing_docs)]\n-```\n-\n-And to generate errors you use `deny`:\n-\n-```rust,ignore\n-#![deny(missing_docs)]\n-```\n-\n-There are cases where you want to disable these warnings/errors to explicitly\n-leave something undocumented. This is done by using `allow`:\n-\n-```rust\n-#[allow(missing_docs)]\n-struct Undocumented;\n-```\n-\n-You might even want to hide items from the documentation completely:\n-\n-```rust\n-#[doc(hidden)]\n-struct Hidden;\n-```\n-\n-### Controlling HTML\n-\n-You can control a few aspects of the HTML that `rustdoc` generates through the\n-`#![doc]` version of the attribute:\n-\n-```rust,ignore\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/\")]\n-```\n-\n-This sets a few different options, with a logo, favicon, and a root URL.\n-\n-### Configuring documentation tests\n-\n-You can also configure the way that `rustdoc` tests your documentation examples\n-through the `#![doc(test(..))]` attribute.\n-\n-```rust\n-#![doc(test(attr(allow(unused_variables), deny(warnings))))]\n-```\n-\n-This allows unused variables within the examples, but will fail the test for any\n-other lint warning thrown.\n-\n-## Generation options\n-\n-`rustdoc` also contains a few other options on the command line, for further customization:\n-\n-- `--html-in-header FILE`: includes the contents of FILE at the end of the\n-  `<head>...</head>` section.\n-- `--html-before-content FILE`: includes the contents of FILE directly after\n-  `<body>`, before the rendered content (including the search bar).\n-- `--html-after-content FILE`: includes the contents of FILE after all the rendered content.\n-\n-## Security note\n-\n-The Markdown in documentation comments is placed without processing into\n-the final webpage. Be careful with literal HTML:\n-\n-```rust\n-/// <script>alert(document.cookie)</script>\n-# fn foo() {}\n-```"}, {"sha": "53c507eba3f78b744d4391bf9afd9da460bf9fbf", "filename": "src/doc/book/src/drop.md", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fdrop.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fdrop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fdrop.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,67 +0,0 @@\n-# Drop\n-\n-Now that we\u2019ve discussed traits, let\u2019s talk about a particular trait provided\n-by the Rust standard library, [`Drop`][drop]. The `Drop` trait provides a way\n-to run some code when a value goes out of scope. For example:\n-\n-[drop]: ../std/ops/trait.Drop.html\n-\n-```rust\n-struct HasDrop;\n-\n-impl Drop for HasDrop {\n-    fn drop(&mut self) {\n-        println!(\"Dropping!\");\n-    }\n-}\n-\n-fn main() {\n-    let x = HasDrop;\n-\n-    // Do stuff.\n-\n-} // `x` goes out of scope here.\n-```\n-\n-When `x` goes out of scope at the end of `main()`, the code for `Drop` will\n-run. `Drop` has one method, which is also called `drop()`. It takes a mutable\n-reference to `self`.\n-\n-That\u2019s it! The mechanics of `Drop` are very simple, but there are some\n-subtleties. For example, values are dropped in the opposite order they are\n-declared. Here\u2019s another example:\n-\n-```rust\n-struct Firework {\n-    strength: i32,\n-}\n-\n-impl Drop for Firework {\n-    fn drop(&mut self) {\n-        println!(\"BOOM times {}!!!\", self.strength);\n-    }\n-}\n-\n-fn main() {\n-    let firecracker = Firework { strength: 1 };\n-    let tnt = Firework { strength: 100 };\n-}\n-```\n-\n-This will output:\n-\n-```text\n-BOOM times 100!!!\n-BOOM times 1!!!\n-```\n-\n-The `tnt` goes off before the `firecracker` does, because it was declared\n-afterwards. Last in, first out.\n-\n-So what is `Drop` good for? Generally, `Drop` is used to clean up any resources\n-associated with a `struct`. For example, the [`Arc<T>` type][arc] is a\n-reference-counted type. When `Drop` is called, it will decrement the reference\n-count, and if the total number of references is zero, will clean up the\n-underlying value.\n-\n-[arc]: ../std/sync/struct.Arc.html"}, {"sha": "ce2dfe4eae27e5d3db0a5d2ecbb82c23436e8f2f", "filename": "src/doc/book/src/effective-rust.md", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Feffective-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Feffective-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Feffective-rust.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,8 +0,0 @@\n-# Effective Rust\n-\n-So you\u2019ve learned how to write some Rust code. But there\u2019s a difference between\n-writing *any* Rust code and writing *good* Rust code.\n-\n-This chapter consists of relatively independent tutorials which show you how to\n-take your Rust to the next level. Common patterns and standard library features\n-will be introduced. Read these sections in any order of your choosing."}, {"sha": "9cf5e6bfa21aca3f48731134bd4f66ece8f29421", "filename": "src/doc/book/src/enums.md", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fenums.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fenums.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fenums.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,107 +0,0 @@\n-# Enums\n-\n-An `enum` in Rust is a type that represents data that is one of\n-several possible variants. Each variant in the `enum` can optionally\n-have data associated with it:\n-\n-```rust\n-enum Message {\n-    Quit,\n-    ChangeColor(i32, i32, i32),\n-    Move { x: i32, y: i32 },\n-    Write(String),\n-}\n-```\n-\n-The syntax for defining variants resembles the syntaxes used to define structs:\n-you can have variants with no data (like unit-like structs), variants with named\n-data, and variants with unnamed data (like tuple structs). Unlike\n-separate struct definitions, however, an `enum` is a single type. A\n-value of the enum can match any of the variants. For this reason, an\n-enum is sometimes called a \u2018sum type\u2019: the set of possible values of the\n-enum is the sum of the sets of possible values for each variant.\n-\n-We use the `::` syntax to use the name of each variant: they\u2019re scoped by the name\n-of the `enum` itself. This allows both of these to work:\n-\n-```rust\n-# enum Message {\n-#     Move { x: i32, y: i32 },\n-# }\n-let x: Message = Message::Move { x: 3, y: 4 };\n-\n-enum BoardGameTurn {\n-    Move { squares: i32 },\n-    Pass,\n-}\n-\n-let y: BoardGameTurn = BoardGameTurn::Move { squares: 1 };\n-```\n-\n-Both variants are named `Move`, but since they\u2019re scoped to the name of\n-the enum, they can both be used without conflict.\n-\n-A value of an `enum` type contains information about which variant it is,\n-in addition to any data associated with that variant. This is sometimes\n-referred to as a \u2018tagged union\u2019, since the data includes a \u2018tag\u2019\n-indicating what type it is. The compiler uses this information to\n-enforce that you\u2019re accessing the data in the enum safely. For instance,\n-you can\u2019t simply try to destructure a value as if it were one of the\n-possible variants:\n-\n-```rust,ignore\n-fn process_color_change(msg: Message) {\n-    let Message::ChangeColor(r, g, b) = msg; // This causes a compile-time error.\n-}\n-```\n-\n-Not supporting these operations may seem rather limiting, but it\u2019s a limitation\n-which we can overcome. There are two ways: by implementing equality ourselves,\n-or by pattern matching variants with [`match`][match] expressions, which you\u2019ll\n-learn in the next section. We don\u2019t know enough about Rust to implement\n-equality yet, but we\u2019ll find out in the [`traits`][traits] section.\n-\n-[match]: match.html\n-[traits]: traits.html\n-\n-# Constructors as functions\n-\n-An `enum` constructor can also be used like a function. For example:\n-\n-```rust\n-# enum Message {\n-# Write(String),\n-# }\n-let m = Message::Write(\"Hello, world\".to_string());\n-```\n-\n-is the same as\n-\n-```rust\n-# enum Message {\n-# Write(String),\n-# }\n-fn foo(x: String) -> Message {\n-    Message::Write(x)\n-}\n-\n-let x = foo(\"Hello, world\".to_string());\n-```\n-\n-This is not immediately useful to us, but when we get to\n-[`closures`][closures], we\u2019ll talk about passing functions as arguments to\n-other functions. For example, with [`iterators`][iterators], we can do this\n-to convert a vector of `String`s into a vector of `Message::Write`s:\n-\n-```rust\n-# enum Message {\n-# Write(String),\n-# }\n-\n-let v = vec![\"Hello\".to_string(), \"World\".to_string()];\n-\n-let v1: Vec<Message> = v.into_iter().map(Message::Write).collect();\n-```\n-\n-[closures]: closures.html\n-[iterators]: iterators.html"}, {"sha": "c823c32a135bb272ad08328185a2d85f7928e7c0", "filename": "src/doc/book/src/error-handling.md", "status": "removed", "additions": 0, "deletions": 2213, "changes": 2213, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,2213 +0,0 @@\n-# Error Handling\n-\n-Like most programming languages, Rust encourages the programmer to handle\n-errors in a particular way. Generally speaking, error handling is divided into\n-two broad categories: exceptions and return values. Rust opts for return\n-values.\n-\n-In this section, we intend to provide a comprehensive treatment of how to deal\n-with errors in Rust. More than that, we will attempt to introduce error handling\n-one piece at a time so that you'll come away with a solid working knowledge of\n-how everything fits together.\n-\n-When done na\u00efvely, error handling in Rust can be verbose and annoying. This\n-section will explore those stumbling blocks and demonstrate how to use the\n-standard library to make error handling concise and ergonomic.\n-\n-# Table of Contents\n-\n-This section is very long, mostly because we start at the very beginning with\n-sum types and combinators, and try to motivate the way Rust does error handling\n-incrementally. As such, programmers with experience in other expressive type\n-systems may want to jump around.\n-\n-* [The Basics](#the-basics)\n-    * [Unwrapping explained](#unwrapping-explained)\n-    * [The `Option` type](#the-option-type)\n-        * [Composing `Option<T>` values](#composing-optiont-values)\n-    * [The `Result` type](#the-result-type)\n-        * [Parsing integers](#parsing-integers)\n-        * [The `Result` type alias idiom](#the-result-type-alias-idiom)\n-    * [A brief interlude: unwrapping isn't evil](#a-brief-interlude-unwrapping-isnt-evil)\n-* [Working with multiple error types](#working-with-multiple-error-types)\n-    * [Composing `Option` and `Result`](#composing-option-and-result)\n-    * [The limits of combinators](#the-limits-of-combinators)\n-    * [Early returns](#early-returns)\n-    * [The `try!` macro](#the-try-macro)\n-    * [Defining your own error type](#defining-your-own-error-type)\n-* [Standard library traits used for error handling](#standard-library-traits-used-for-error-handling)\n-    * [The `Error` trait](#the-error-trait)\n-    * [The `From` trait](#the-from-trait)\n-    * [The real `try!` macro](#the-real-try-macro)\n-    * [Composing custom error types](#composing-custom-error-types)\n-    * [Advice for library writers](#advice-for-library-writers)\n-* [Case study: A program to read population data](#case-study-a-program-to-read-population-data)\n-    * [Initial setup](#initial-setup)\n-    * [Argument parsing](#argument-parsing)\n-    * [Writing the logic](#writing-the-logic)\n-    * [Error handling with `Box<Error>`](#error-handling-with-boxerror)\n-    * [Reading from stdin](#reading-from-stdin)\n-    * [Error handling with a custom type](#error-handling-with-a-custom-type)\n-    * [Adding functionality](#adding-functionality)\n-* [The short story](#the-short-story)\n-\n-# The Basics\n-\n-You can think of error handling as using *case analysis* to determine whether\n-a computation was successful or not. As you will see, the key to ergonomic error\n-handling is reducing the amount of explicit case analysis the programmer has to\n-do while keeping code composable.\n-\n-Keeping code composable is important, because without that requirement, we\n-could [`panic`](../std/macro.panic.html) whenever we\n-come across something unexpected. (`panic` causes the current task to unwind,\n-and in most cases, the entire program aborts.) Here's an example:\n-\n-```rust,should_panic\n-// Guess a number between 1 and 10.\n-// If it matches the number we had in mind, return `true`. Else, return `false`.\n-fn guess(n: i32) -> bool {\n-    if n < 1 || n > 10 {\n-        panic!(\"Invalid number: {}\", n);\n-    }\n-    n == 5\n-}\n-\n-fn main() {\n-    guess(11);\n-}\n-```\n-\n-If you try running this code, the program will crash with a message like this:\n-\n-```text\n-thread 'main' panicked at 'Invalid number: 11', src/bin/panic-simple.rs:5\n-```\n-\n-Here's another example that is slightly less contrived. A program that accepts\n-an integer as an argument, doubles it and prints it.\n-\n-<span id=\"code-unwrap-double\"></span>\n-\n-```rust,should_panic\n-use std::env;\n-\n-fn main() {\n-    let mut argv = env::args();\n-    let arg: String = argv.nth(1).unwrap(); // error 1\n-    let n: i32 = arg.parse().unwrap(); // error 2\n-    println!(\"{}\", 2 * n);\n-}\n-```\n-\n-If you give this program zero arguments (error 1) or if the first argument\n-isn't an integer (error 2), the program will panic just like in the first\n-example.\n-\n-You can think of this style of error handling as similar to a bull running\n-through a china shop. The bull will get to where it wants to go, but it will\n-trample everything in the process.\n-\n-## Unwrapping explained\n-\n-In the previous example, we claimed\n-that the program would simply panic if it reached one of the two error\n-conditions, yet, the program does not include an explicit call to `panic` like\n-the first example. This is because the\n-panic is embedded in the calls to `unwrap`.\n-\n-To \u201cunwrap\u201d something in Rust is to say, \u201cGive me the result of the\n-computation, and if there was an error, panic and stop the program.\u201d\n-It would be better if we showed the code for unwrapping because it is so\n-simple, but to do that, we will first need to explore the `Option` and `Result`\n-types. Both of these types have a method called `unwrap` defined on them.\n-\n-### The `Option` type\n-\n-The `Option` type is [defined in the standard library][5]:\n-\n-```rust\n-enum Option<T> {\n-    None,\n-    Some(T),\n-}\n-```\n-\n-The `Option` type is a way to use Rust's type system to express the\n-*possibility of absence*. Encoding the possibility of absence into the type\n-system is an important concept because it will cause the compiler to force the\n-programmer to handle that absence. Let's take a look at an example that tries\n-to find a character in a string:\n-\n-<span id=\"code-option-ex-string-find\"></span>\n-\n-```rust\n-// Searches `haystack` for the Unicode character `needle`. If one is found, the\n-// byte offset of the character is returned. Otherwise, `None` is returned.\n-fn find(haystack: &str, needle: char) -> Option<usize> {\n-    for (offset, c) in haystack.char_indices() {\n-        if c == needle {\n-            return Some(offset);\n-        }\n-    }\n-    None\n-}\n-```\n-\n-Notice that when this function finds a matching character, it doesn't only\n-return the `offset`. Instead, it returns `Some(offset)`. `Some` is a variant or\n-a *value constructor* for the `Option` type. You can think of it as a function\n-with the type `fn<T>(value: T) -> Option<T>`. Correspondingly, `None` is also a\n-value constructor, except it has no arguments. You can think of `None` as a\n-function with the type `fn<T>() -> Option<T>`.\n-\n-This might seem like much ado about nothing, but this is only half of the\n-story. The other half is *using* the `find` function we've written. Let's try\n-to use it to find the extension in a file name.\n-\n-```rust\n-# fn find(haystack: &str, needle: char) -> Option<usize> { haystack.find(needle) }\n-fn main() {\n-    let file_name = \"foobar.rs\";\n-    match find(file_name, '.') {\n-        None => println!(\"No file extension found.\"),\n-        Some(i) => println!(\"File extension: {}\", &file_name[i+1..]),\n-    }\n-}\n-```\n-\n-This code uses [pattern matching][1] to do *case\n-analysis* on the `Option<usize>` returned by the `find` function. In fact, case\n-analysis is the only way to get at the value stored inside an `Option<T>`. This\n-means that you, as the programmer, must handle the case when an `Option<T>` is\n-`None` instead of `Some(t)`.\n-\n-But wait, what about `unwrap`, which we used [previously](#code-unwrap-double)?\n-There was no case analysis there! Instead, the case analysis was put inside the\n-`unwrap` method for you. You could define it yourself if you want:\n-\n-<span id=\"code-option-def-unwrap\"></span>\n-\n-```rust\n-enum Option<T> {\n-    None,\n-    Some(T),\n-}\n-\n-impl<T> Option<T> {\n-    fn unwrap(self) -> T {\n-        match self {\n-            Option::Some(val) => val,\n-            Option::None =>\n-              panic!(\"called `Option::unwrap()` on a `None` value\"),\n-        }\n-    }\n-}\n-```\n-\n-The `unwrap` method *abstracts away the case analysis*. This is precisely the thing\n-that makes `unwrap` ergonomic to use. Unfortunately, that `panic!` means that\n-`unwrap` is not composable: it is the bull in the china shop.\n-\n-### Composing `Option<T>` values\n-\n-In an [example from before](#code-option-ex-string-find),\n-we saw how to use `find` to discover the extension in a file name. Of course,\n-not all file names have a `.` in them, so it's possible that the file name has\n-no extension. This *possibility of absence* is encoded into the types using\n-`Option<T>`. In other words, the compiler will force us to address the\n-possibility that an extension does not exist. In our case, we only print out a\n-message saying as such.\n-\n-Getting the extension of a file name is a pretty common operation, so it makes\n-sense to put it into a function:\n-\n-```rust\n-# fn find(haystack: &str, needle: char) -> Option<usize> { haystack.find(needle) }\n-// Returns the extension of the given file name, where the extension is defined\n-// as all characters following the first `.`.\n-// If `file_name` has no `.`, then `None` is returned.\n-fn extension_explicit(file_name: &str) -> Option<&str> {\n-    match find(file_name, '.') {\n-        None => None,\n-        Some(i) => Some(&file_name[i+1..]),\n-    }\n-}\n-```\n-\n-(Pro-tip: don't use this code. Use the\n-[`extension`](../std/path/struct.Path.html#method.extension)\n-method in the standard library instead.)\n-\n-The code stays simple, but the important thing to notice is that the type of\n-`find` forces us to consider the possibility of absence. This is a good thing\n-because it means the compiler won't let us accidentally forget about the case\n-where a file name doesn't have an extension. On the other hand, doing explicit\n-case analysis like we've done in `extension_explicit` every time can get a bit\n-tiresome.\n-\n-In fact, the case analysis in `extension_explicit` follows a very common\n-pattern: *map* a function on to the value inside of an `Option<T>`, unless the\n-option is `None`, in which case, return `None`.\n-\n-Rust has parametric polymorphism, so it is very easy to define a combinator\n-that abstracts this pattern:\n-\n-<span id=\"code-option-map\"></span>\n-\n-```rust\n-fn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n-    match option {\n-        None => None,\n-        Some(value) => Some(f(value)),\n-    }\n-}\n-```\n-\n-Indeed, `map` is [defined as a method][2] on `Option<T>` in the standard library.\n-As a method, it has a slightly different signature: methods take `self`, `&self`,\n-or `&mut self` as their first argument.\n-\n-Armed with our new combinator, we can rewrite our `extension_explicit` method\n-to get rid of the case analysis:\n-\n-```rust\n-# fn find(haystack: &str, needle: char) -> Option<usize> { haystack.find(needle) }\n-// Returns the extension of the given file name, where the extension is defined\n-// as all characters following the first `.`.\n-// If `file_name` has no `.`, then `None` is returned.\n-fn extension(file_name: &str) -> Option<&str> {\n-    find(file_name, '.').map(|i| &file_name[i+1..])\n-}\n-```\n-\n-One other pattern we commonly find is assigning a default value to the case\n-when an `Option` value is `None`. For example, maybe your program assumes that\n-the extension of a file is `rs` even if none is present. As you might imagine,\n-the case analysis for this is not specific to file extensions - it can work\n-with any `Option<T>`:\n-\n-```rust\n-fn unwrap_or<T>(option: Option<T>, default: T) -> T {\n-    match option {\n-        None => default,\n-        Some(value) => value,\n-    }\n-}\n-```\n-\n-Like with `map` above, the standard library implementation is a method instead\n-of a free function.\n-\n-The trick here is that the default value must have the same type as the value\n-that might be inside the `Option<T>`. Using it is dead simple in our case:\n-\n-```rust\n-# fn find(haystack: &str, needle: char) -> Option<usize> {\n-#     for (offset, c) in haystack.char_indices() {\n-#         if c == needle {\n-#             return Some(offset);\n-#         }\n-#     }\n-#     None\n-# }\n-#\n-# fn extension(file_name: &str) -> Option<&str> {\n-#     find(file_name, '.').map(|i| &file_name[i+1..])\n-# }\n-fn main() {\n-    assert_eq!(extension(\"foobar.csv\").unwrap_or(\"rs\"), \"csv\");\n-    assert_eq!(extension(\"foobar\").unwrap_or(\"rs\"), \"rs\");\n-}\n-```\n-\n-(Note that `unwrap_or` is [defined as a method][3] on `Option<T>` in the\n-standard library, so we use that here instead of the free-standing function we\n-defined above. Don't forget to check out the more general [`unwrap_or_else`][4]\n-method.)\n-\n-There is one more combinator that we think is worth paying special attention to:\n-`and_then`. It makes it easy to compose distinct computations that admit the\n-*possibility of absence*. For example, much of the code in this section is\n-about finding an extension given a file name. In order to do this, you first\n-need the file name which is typically extracted from a file *path*. While most\n-file paths have a file name, not *all* of them do. For example, `.`, `..` or\n-`/`.\n-\n-So, we are tasked with the challenge of finding an extension given a file\n-*path*. Let's start with explicit case analysis:\n-\n-```rust\n-# fn extension(file_name: &str) -> Option<&str> { None }\n-fn file_path_ext_explicit(file_path: &str) -> Option<&str> {\n-    match file_name(file_path) {\n-        None => None,\n-        Some(name) => match extension(name) {\n-            None => None,\n-            Some(ext) => Some(ext),\n-        }\n-    }\n-}\n-\n-fn file_name(file_path: &str) -> Option<&str> {\n-  // Implementation elided.\n-  unimplemented!()\n-}\n-```\n-\n-You might think that we could use the `map` combinator to reduce the case\n-analysis, but its type doesn't quite fit...\n-\n-```rust,ignore\n-fn file_path_ext(file_path: &str) -> Option<&str> {\n-    file_name(file_path).map(|x| extension(x)) // This causes a compilation error.\n-}\n-```\n-\n-The `map` function here wraps the value returned by the `extension` function\n-inside an `Option<_>` and since the `extension` function itself returns an\n-`Option<&str>` the expression `file_name(file_path).map(|x| extension(x))`\n-actually returns an `Option<Option<&str>>`.\n-\n-But since `file_path_ext` just returns `Option<&str>` (and not\n-`Option<Option<&str>>`) we get a compilation error.\n-\n-The result of the function taken by map as input is *always* [rewrapped with\n-`Some`](#code-option-map). Instead, we need something like `map`, but which\n-allows the caller to return a `Option<_>` directly without wrapping it in\n-another `Option<_>`.\n-\n-Its generic implementation is even simpler than `map`:\n-\n-```rust\n-fn and_then<F, T, A>(option: Option<T>, f: F) -> Option<A>\n-        where F: FnOnce(T) -> Option<A> {\n-    match option {\n-        None => None,\n-        Some(value) => f(value),\n-    }\n-}\n-```\n-\n-Now we can rewrite our `file_path_ext` function without explicit case analysis:\n-\n-```rust\n-# fn extension(file_name: &str) -> Option<&str> { None }\n-# fn file_name(file_path: &str) -> Option<&str> { None }\n-fn file_path_ext(file_path: &str) -> Option<&str> {\n-    file_name(file_path).and_then(extension)\n-}\n-```\n-\n-Side note: Since `and_then` essentially works like `map` but returns an\n-`Option<_>` instead of an `Option<Option<_>>` it is known as `flatmap` in some\n-other languages.\n-\n-The `Option` type has many other combinators [defined in the standard\n-library][5]. It is a good idea to skim this list and familiarize\n-yourself with what's available\u2014they can often reduce case analysis\n-for you. Familiarizing yourself with these combinators will pay\n-dividends because many of them are also defined (with similar\n-semantics) for `Result`, which we will talk about next.\n-\n-Combinators make using types like `Option` ergonomic because they reduce\n-explicit case analysis. They are also composable because they permit the caller\n-to handle the possibility of absence in their own way. Methods like `unwrap`\n-remove choices because they will panic if `Option<T>` is `None`.\n-\n-## The `Result` type\n-\n-The `Result` type is also\n-[defined in the standard library][6]:\n-\n-<span id=\"code-result-def\"></span>\n-\n-```rust\n-enum Result<T, E> {\n-    Ok(T),\n-    Err(E),\n-}\n-```\n-\n-The `Result` type is a richer version of `Option`. Instead of expressing the\n-possibility of *absence* like `Option` does, `Result` expresses the possibility\n-of *error*. Usually, the *error* is used to explain why the execution of some\n-computation failed. This is a strictly more general form of `Option`. Consider\n-the following type alias, which is semantically equivalent to the real\n-`Option<T>` in every way:\n-\n-```rust\n-type Option<T> = Result<T, ()>;\n-```\n-\n-This fixes the second type parameter of `Result` to always be `()` (pronounced\n-\u201cunit\u201d or \u201cempty tuple\u201d). Exactly one value inhabits the `()` type: `()`. (Yup,\n-the type and value level terms have the same notation!)\n-\n-The `Result` type is a way of representing one of two possible outcomes in a\n-computation. By convention, one outcome is meant to be expected or \u201c`Ok`\u201d while\n-the other outcome is meant to be unexpected or \u201c`Err`\u201d.\n-\n-Just like `Option`, the `Result` type also has an\n-[`unwrap` method\n-defined][7]\n-in the standard library. Let's define it:\n-\n-```rust\n-# enum Result<T, E> { Ok(T), Err(E) }\n-impl<T, E: ::std::fmt::Debug> Result<T, E> {\n-    fn unwrap(self) -> T {\n-        match self {\n-            Result::Ok(val) => val,\n-            Result::Err(err) =>\n-              panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\", err),\n-        }\n-    }\n-}\n-```\n-\n-This is effectively the same as our [definition for\n-`Option::unwrap`](#code-option-def-unwrap), except it includes the\n-error value in the `panic!` message. This makes debugging easier, but\n-it also requires us to add a [`Debug`][8] constraint on the `E` type\n-parameter (which represents our error type). Since the vast majority\n-of types should satisfy the `Debug` constraint, this tends to work out\n-in practice. (`Debug` on a type simply means that there's a reasonable\n-way to print a human readable description of values with that type.)\n-\n-OK, let's move on to an example.\n-\n-### Parsing integers\n-\n-The Rust standard library makes converting strings to integers dead simple.\n-It's so easy in fact, that it is very tempting to write something like the\n-following:\n-\n-```rust\n-fn double_number(number_str: &str) -> i32 {\n-    2 * number_str.parse::<i32>().unwrap()\n-}\n-\n-fn main() {\n-    let n: i32 = double_number(\"10\");\n-    assert_eq!(n, 20);\n-}\n-```\n-\n-At this point, you should be skeptical of calling `unwrap`. For example, if\n-the string doesn't parse as a number, you'll get a panic:\n-\n-```text\n-thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: ParseIntError { kind: InvalidDigit }', /home/rustbuild/src/rust-buildbot/slave/beta-dist-rustc-linux/build/src/libcore/result.rs:729\n-```\n-\n-This is rather unsightly, and if this happened inside a library you're\n-using, you might be understandably annoyed. Instead, we should try to\n-handle the error in our function and let the caller decide what to\n-do. This means changing the return type of `double_number`. But to\n-what? Well, that requires looking at the signature of the [`parse`\n-method][9] in the standard library:\n-\n-```rust,ignore\n-impl str {\n-    fn parse<F: FromStr>(&self) -> Result<F, F::Err>;\n-}\n-```\n-\n-Hmm. So we at least know that we need to use a `Result`. Certainly, it's\n-possible that this could have returned an `Option`. After all, a string either\n-parses as a number or it doesn't, right? That's certainly a reasonable way to\n-go, but the implementation internally distinguishes *why* the string didn't\n-parse as an integer. (Whether it's an empty string, an invalid digit, too big\n-or too small.) Therefore, using a `Result` makes sense because we want to\n-provide more information than simply \u201cabsence.\u201d We want to say *why* the\n-parsing failed. You should try to emulate this line of reasoning when faced\n-with a choice between `Option` and `Result`. If you can provide detailed error\n-information, then you probably should. (We'll see more on this later.)\n-\n-OK, but how do we write our return type? The `parse` method as defined\n-above is generic over all the different number types defined in the\n-standard library. We could (and probably should) also make our\n-function generic, but let's favor explicitness for the moment. We only\n-care about `i32`, so we need to [find its implementation of\n-`FromStr`](../std/primitive.i32.html) (do a `CTRL-F` in your browser\n-for \u201cFromStr\u201d) and look at its [associated type][10] `Err`. We did\n-this so we can find the concrete error type. In this case, it's\n-[`std::num::ParseIntError`](../std/num/struct.ParseIntError.html).\n-Finally, we can rewrite our function:\n-\n-```rust\n-use std::num::ParseIntError;\n-\n-fn double_number(number_str: &str) -> Result<i32, ParseIntError> {\n-    match number_str.parse::<i32>() {\n-        Ok(n) => Ok(2 * n),\n-        Err(err) => Err(err),\n-    }\n-}\n-\n-fn main() {\n-    match double_number(\"10\") {\n-        Ok(n) => assert_eq!(n, 20),\n-        Err(err) => println!(\"Error: {:?}\", err),\n-    }\n-}\n-```\n-\n-This is a little better, but now we've written a lot more code! The case\n-analysis has once again bitten us.\n-\n-Combinators to the rescue! Just like `Option`, `Result` has lots of combinators\n-defined as methods. There is a large intersection of common combinators between\n-`Result` and `Option`. In particular, `map` is part of that intersection:\n-\n-```rust\n-use std::num::ParseIntError;\n-\n-fn double_number(number_str: &str) -> Result<i32, ParseIntError> {\n-    number_str.parse::<i32>().map(|n| 2 * n)\n-}\n-\n-fn main() {\n-    match double_number(\"10\") {\n-        Ok(n) => assert_eq!(n, 20),\n-        Err(err) => println!(\"Error: {:?}\", err),\n-    }\n-}\n-```\n-\n-The usual suspects are all there for `Result`, including\n-[`unwrap_or`](../std/result/enum.Result.html#method.unwrap_or) and\n-[`and_then`](../std/result/enum.Result.html#method.and_then).\n-Additionally, since `Result` has a second type parameter, there are\n-combinators that affect only the error type, such as\n-[`map_err`](../std/result/enum.Result.html#method.map_err) (instead of\n-`map`) and [`or_else`](../std/result/enum.Result.html#method.or_else)\n-(instead of `and_then`).\n-\n-### The `Result` type alias idiom\n-\n-In the standard library, you may frequently see types like\n-`Result<i32>`. But wait, [we defined `Result`](#code-result-def) to\n-have two type parameters. How can we get away with only specifying\n-one? The key is to define a `Result` type alias that *fixes* one of\n-the type parameters to a particular type. Usually the fixed type is\n-the error type. For example, our previous example parsing integers\n-could be rewritten like this:\n-\n-```rust\n-use std::num::ParseIntError;\n-use std::result;\n-\n-type Result<T> = result::Result<T, ParseIntError>;\n-\n-fn double_number(number_str: &str) -> Result<i32> {\n-    unimplemented!();\n-}\n-```\n-\n-Why would we do this? Well, if we have a lot of functions that could return\n-`ParseIntError`, then it's much more convenient to define an alias that always\n-uses `ParseIntError` so that we don't have to write it out all the time.\n-\n-The most prominent place this idiom is used in the standard library is\n-with [`io::Result`](../std/io/type.Result.html). Typically, one writes\n-`io::Result<T>`, which makes it clear that you're using the `io`\n-module's type alias instead of the plain definition from\n-`std::result`. (This idiom is also used for\n-[`fmt::Result`](../std/fmt/type.Result.html).)\n-\n-## A brief interlude: unwrapping isn't evil\n-\n-If you've been following along, you might have noticed that I've taken a pretty\n-hard line against calling methods like `unwrap` that could `panic` and abort\n-your program. *Generally speaking*, this is good advice.\n-\n-However, `unwrap` can still be used judiciously. What exactly justifies use of\n-`unwrap` is somewhat of a grey area and reasonable people can disagree. I'll\n-summarize some of my *opinions* on the matter.\n-\n-* **In examples and quick 'n' dirty code.** Sometimes you're writing examples\n-  or a quick program, and error handling simply isn't important. Beating the\n-  convenience of `unwrap` can be hard in such scenarios, so it is very\n-  appealing.\n-* **When panicking indicates a bug in the program.** When the invariants of\n-  your code should prevent a certain case from happening (like, say, popping\n-  from an empty stack), then panicking can be permissible. This is because it\n-  exposes a bug in your program. This can be explicit, like from an `assert!`\n-  failing, or it could be because your index into an array was out of bounds.\n-\n-This is probably not an exhaustive list. Moreover, when using an\n-`Option`, it is often better to use its\n-[`expect`](../std/option/enum.Option.html#method.expect)\n-method. `expect` does exactly the same thing as `unwrap`, except it\n-prints a message you give to `expect`. This makes the resulting panic\n-a bit nicer to deal with, since it will show your message instead of\n-\u201ccalled unwrap on a `None` value.\u201d\n-\n-My advice boils down to this: use good judgment. There's a reason why the words\n-\u201cnever do X\u201d or \u201cY is considered harmful\u201d don't appear in my writing. There are\n-trade offs to all things, and it is up to you as the programmer to determine\n-what is acceptable for your use cases. My goal is only to help you evaluate\n-trade offs as accurately as possible.\n-\n-Now that we've covered the basics of error handling in Rust, and\n-explained unwrapping, let's start exploring more of the standard\n-library.\n-\n-# Working with multiple error types\n-\n-Thus far, we've looked at error handling where everything was either an\n-`Option<T>` or a `Result<T, SomeError>`. But what happens when you have both an\n-`Option` and a `Result`? Or what if you have a `Result<T, Error1>` and a\n-`Result<T, Error2>`? Handling *composition of distinct error types* is the next\n-challenge in front of us, and it will be the major theme throughout the rest of\n-this section.\n-\n-## Composing `Option` and `Result`\n-\n-So far, I've talked about combinators defined for `Option` and combinators\n-defined for `Result`. We can use these combinators to compose results of\n-different computations without doing explicit case analysis.\n-\n-Of course, in real code, things aren't always as clean. Sometimes you have a\n-mix of `Option` and `Result` types. Must we resort to explicit case analysis,\n-or can we continue using combinators?\n-\n-For now, let's revisit one of the first examples in this section:\n-\n-```rust,should_panic\n-use std::env;\n-\n-fn main() {\n-    let mut argv = env::args();\n-    let arg: String = argv.nth(1).unwrap(); // error 1\n-    let n: i32 = arg.parse().unwrap(); // error 2\n-    println!(\"{}\", 2 * n);\n-}\n-```\n-\n-Given our new found knowledge of `Option`, `Result` and their various\n-combinators, we should try to rewrite this so that errors are handled properly\n-and the program doesn't panic if there's an error.\n-\n-The tricky aspect here is that `argv.nth(1)` produces an `Option` while\n-`arg.parse()` produces a `Result`. These aren't directly composable. When faced\n-with both an `Option` and a `Result`, the solution is *usually* to convert the\n-`Option` to a `Result`. In our case, the absence of a command line parameter\n-(from `env::args()`) means the user didn't invoke the program correctly. We\n-could use a `String` to describe the error. Let's try:\n-\n-<span id=\"code-error-double-string\"></span>\n-\n-```rust\n-use std::env;\n-\n-fn double_arg(mut argv: env::Args) -> Result<i32, String> {\n-    argv.nth(1)\n-        .ok_or(\"Please give at least one argument\".to_owned())\n-        .and_then(|arg| arg.parse::<i32>().map_err(|err| err.to_string()))\n-        .map(|n| 2 * n)\n-}\n-\n-fn main() {\n-    match double_arg(env::args()) {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {}\", err),\n-    }\n-}\n-```\n-\n-There are a couple new things in this example. The first is the use of the\n-[`Option::ok_or`](../std/option/enum.Option.html#method.ok_or)\n-combinator. This is one way to convert an `Option` into a `Result`. The\n-conversion requires you to specify what error to use if `Option` is `None`.\n-Like the other combinators we've seen, its definition is very simple:\n-\n-```rust\n-fn ok_or<T, E>(option: Option<T>, err: E) -> Result<T, E> {\n-    match option {\n-        Some(val) => Ok(val),\n-        None => Err(err),\n-    }\n-}\n-```\n-\n-The other new combinator used here is\n-[`Result::map_err`](../std/result/enum.Result.html#method.map_err).\n-This is like `Result::map`, except it maps a function on to the *error*\n-portion of a `Result` value. If the `Result` is an `Ok(...)` value, then it is\n-returned unmodified.\n-\n-We use `map_err` here because it is necessary for the error types to remain\n-the same (because of our use of `and_then`). Since we chose to convert the\n-`Option<String>` (from `argv.nth(1)`) to a `Result<String, String>`, we must\n-also convert the `ParseIntError` from `arg.parse()` to a `String`.\n-\n-## The limits of combinators\n-\n-Doing IO and parsing input is a very common task, and it's one that I\n-personally have done a lot of in Rust. Therefore, we will use (and continue to\n-use) IO and various parsing routines to exemplify error handling.\n-\n-Let's start simple. We are tasked with opening a file, reading all of its\n-contents and converting its contents to a number. Then we multiply it by `2`\n-and print the output.\n-\n-Although I've tried to convince you not to use `unwrap`, it can be useful\n-to first write your code using `unwrap`. It allows you to focus on your problem\n-instead of the error handling, and it exposes the points where proper error\n-handling need to occur. Let's start there so we can get a handle on the code,\n-and then refactor it to use better error handling.\n-\n-```rust,should_panic\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> i32 {\n-    let mut file = File::open(file_path).unwrap(); // error 1\n-    let mut contents = String::new();\n-    file.read_to_string(&mut contents).unwrap(); // error 2\n-    let n: i32 = contents.trim().parse().unwrap(); // error 3\n-    2 * n\n-}\n-\n-fn main() {\n-    let doubled = file_double(\"foobar\");\n-    println!(\"{}\", doubled);\n-}\n-```\n-\n-(N.B. The `AsRef<Path>` is used because those are the\n-[same bounds used on\n-`std::fs::File::open`](../std/fs/struct.File.html#method.open).\n-This makes it ergonomic to use any kind of string as a file path.)\n-\n-There are three different errors that can occur here:\n-\n-1. A problem opening the file.\n-2. A problem reading data from the file.\n-3. A problem parsing the data as a number.\n-\n-The first two problems are described via the\n-[`std::io::Error`](../std/io/struct.Error.html) type. We know this\n-because of the return types of\n-[`std::fs::File::open`](../std/fs/struct.File.html#method.open) and\n-[`std::io::Read::read_to_string`](../std/io/trait.Read.html#method.read_to_string).\n-(Note that they both use the [`Result` type alias\n-idiom](#the-result-type-alias-idiom) described previously. If you\n-click on the `Result` type, you'll [see the type\n-alias](../std/io/type.Result.html), and consequently, the underlying\n-`io::Error` type.)  The third problem is described by the\n-[`std::num::ParseIntError`](../std/num/struct.ParseIntError.html)\n-type. The `io::Error` type in particular is *pervasive* throughout the\n-standard library. You will see it again and again.\n-\n-Let's start the process of refactoring the `file_double` function. To make this\n-function composable with other components of the program, it should *not* panic\n-if any of the above error conditions are met. Effectively, this means that the\n-function should *return an error* if any of its operations fail. Our problem is\n-that the return type of `file_double` is `i32`, which does not give us any\n-useful way of reporting an error. Thus, we must start by changing the return\n-type from `i32` to something else.\n-\n-The first thing we need to decide: should we use `Option` or `Result`? We\n-certainly could use `Option` very easily. If any of the three errors occur, we\n-could simply return `None`. This will work *and it is better than panicking*,\n-but we can do a lot better. Instead, we should pass some detail about the error\n-that occurred. Since we want to express the *possibility of error*, we should\n-use `Result<i32, E>`. But what should `E` be? Since two *different* types of\n-errors can occur, we need to convert them to a common type. One such type is\n-`String`. Let's see how that impacts our code:\n-\n-```rust\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n-    File::open(file_path)\n-         .map_err(|err| err.to_string())\n-         .and_then(|mut file| {\n-              let mut contents = String::new();\n-              file.read_to_string(&mut contents)\n-                  .map_err(|err| err.to_string())\n-                  .map(|_| contents)\n-         })\n-         .and_then(|contents| {\n-              contents.trim().parse::<i32>()\n-                      .map_err(|err| err.to_string())\n-         })\n-         .map(|n| 2 * n)\n-}\n-\n-fn main() {\n-    match file_double(\"foobar\") {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {}\", err),\n-    }\n-}\n-```\n-\n-This code looks a bit hairy. It can take quite a bit of practice before code\n-like this becomes easy to write. The way we write it is by *following the\n-types*. As soon as we changed the return type of `file_double` to\n-`Result<i32, String>`, we had to start looking for the right combinators. In\n-this case, we only used three different combinators: `and_then`, `map` and\n-`map_err`.\n-\n-`and_then` is used to chain multiple computations where each computation could\n-return an error. After opening the file, there are two more computations that\n-could fail: reading from the file and parsing the contents as a number.\n-Correspondingly, there are two calls to `and_then`.\n-\n-`map` is used to apply a function to the `Ok(...)` value of a `Result`. For\n-example, the very last call to `map` multiplies the `Ok(...)` value (which is\n-an `i32`) by `2`. If an error had occurred before that point, this operation\n-would have been skipped because of how `map` is defined.\n-\n-`map_err` is the trick that makes all of this work. `map_err` is like\n-`map`, except it applies a function to the `Err(...)` value of a `Result`. In\n-this case, we want to convert all of our errors to one type: `String`. Since\n-both `io::Error` and `num::ParseIntError` implement `ToString`, we can call the\n-`to_string()` method to convert them.\n-\n-With all of that said, the code is still hairy. Mastering use of combinators is\n-important, but they have their limits. Let's try a different approach: early\n-returns.\n-\n-## Early returns\n-\n-I'd like to take the code from the previous section and rewrite it using *early\n-returns*. Early returns let you exit the function early. We can't return early\n-in `file_double` from inside another closure, so we'll need to revert back to\n-explicit case analysis.\n-\n-```rust\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n-    let mut file = match File::open(file_path) {\n-        Ok(file) => file,\n-        Err(err) => return Err(err.to_string()),\n-    };\n-    let mut contents = String::new();\n-    if let Err(err) = file.read_to_string(&mut contents) {\n-        return Err(err.to_string());\n-    }\n-    let n: i32 = match contents.trim().parse() {\n-        Ok(n) => n,\n-        Err(err) => return Err(err.to_string()),\n-    };\n-    Ok(2 * n)\n-}\n-\n-fn main() {\n-    match file_double(\"foobar\") {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {}\", err),\n-    }\n-}\n-```\n-\n-Reasonable people can disagree over whether this code is better than the code\n-that uses combinators, but if you aren't familiar with the combinator approach,\n-this code looks simpler to read to me. It uses explicit case analysis with\n-`match` and `if let`. If an error occurs, it simply stops executing the\n-function and returns the error (by converting it to a string).\n-\n-Isn't this a step backwards though? Previously, we said that the key to\n-ergonomic error handling is reducing explicit case analysis, yet we've reverted\n-back to explicit case analysis here. It turns out, there are *multiple* ways to\n-reduce explicit case analysis. Combinators aren't the only way.\n-\n-## The `try!` macro\n-\n-A cornerstone of error handling in Rust is the `try!` macro. The `try!` macro\n-abstracts case analysis like combinators, but unlike combinators, it also\n-abstracts *control flow*. Namely, it can abstract the *early return* pattern\n-seen above.\n-\n-Here is a simplified definition of a `try!` macro:\n-\n-<span id=\"code-try-def-simple\"></span>\n-\n-```rust\n-macro_rules! try {\n-    ($e:expr) => (match $e {\n-        Ok(val) => val,\n-        Err(err) => return Err(err),\n-    });\n-}\n-```\n-\n-(The [real definition](../std/macro.try.html) is a bit more\n-sophisticated. We will address that later.)\n-\n-Using the `try!` macro makes it very easy to simplify our last example. Since\n-it does the case analysis and the early return for us, we get tighter code that\n-is easier to read:\n-\n-```rust\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n-    let mut file = try!(File::open(file_path).map_err(|e| e.to_string()));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents).map_err(|e| e.to_string()));\n-    let n = try!(contents.trim().parse::<i32>().map_err(|e| e.to_string()));\n-    Ok(2 * n)\n-}\n-\n-fn main() {\n-    match file_double(\"foobar\") {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {}\", err),\n-    }\n-}\n-```\n-\n-The `map_err` calls are still necessary given\n-[our definition of `try!`](#code-try-def-simple).\n-This is because the error types still need to be converted to `String`.\n-The good news is that we will soon learn how to remove those `map_err` calls!\n-The bad news is that we will need to learn a bit more about a couple important\n-traits in the standard library before we can remove the `map_err` calls.\n-\n-## Defining your own error type\n-\n-Before we dive into some of the standard library error traits, I'd like to wrap\n-up this section by removing the use of `String` as our error type in the\n-previous examples.\n-\n-Using `String` as we did in our previous examples is convenient because it's\n-easy to convert errors to strings, or even make up your own errors as strings\n-on the spot. However, using `String` for your errors has some downsides.\n-\n-The first downside is that the error messages tend to clutter your\n-code. It's possible to define the error messages elsewhere, but unless\n-you're unusually disciplined, it is very tempting to embed the error\n-message into your code. Indeed, we did exactly this in a [previous\n-example](#code-error-double-string).\n-\n-The second and more important downside is that `String`s are *lossy*. That is,\n-if all errors are converted to strings, then the errors we pass to the caller\n-become completely opaque. The only reasonable thing the caller can do with a\n-`String` error is show it to the user. Certainly, inspecting the string to\n-determine the type of error is not robust. (Admittedly, this downside is far\n-more important inside of a library as opposed to, say, an application.)\n-\n-For example, the `io::Error` type embeds an\n-[`io::ErrorKind`](../std/io/enum.ErrorKind.html),\n-which is *structured data* that represents what went wrong during an IO\n-operation. This is important because you might want to react differently\n-depending on the error. (e.g., A `BrokenPipe` error might mean quitting your\n-program gracefully while a `NotFound` error might mean exiting with an error\n-code and showing an error to the user.) With `io::ErrorKind`, the caller can\n-examine the type of an error with case analysis, which is strictly superior\n-to trying to tease out the details of an error inside of a `String`.\n-\n-Instead of using a `String` as an error type in our previous example of reading\n-an integer from a file, we can define our own error type that represents errors\n-with *structured data*. We endeavor to not drop information from underlying\n-errors in case the caller wants to inspect the details.\n-\n-The ideal way to represent *one of many possibilities* is to define our own\n-sum type using `enum`. In our case, an error is either an `io::Error` or a\n-`num::ParseIntError`, so a natural definition arises:\n-\n-```rust\n-use std::io;\n-use std::num;\n-\n-// We derive `Debug` because all types should probably derive `Debug`.\n-// This gives us a reasonable human readable description of `CliError` values.\n-#[derive(Debug)]\n-enum CliError {\n-    Io(io::Error),\n-    Parse(num::ParseIntError),\n-}\n-```\n-\n-Tweaking our code is very easy. Instead of converting errors to strings, we\n-simply convert them to our `CliError` type using the corresponding value\n-constructor:\n-\n-```rust\n-# #[derive(Debug)]\n-# enum CliError { Io(::std::io::Error), Parse(::std::num::ParseIntError) }\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, CliError> {\n-    let mut file = try!(File::open(file_path).map_err(CliError::Io));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents).map_err(CliError::Io));\n-    let n: i32 = try!(contents.trim().parse().map_err(CliError::Parse));\n-    Ok(2 * n)\n-}\n-\n-fn main() {\n-    match file_double(\"foobar\") {\n-        Ok(n) => println!(\"{}\", n),\n-        Err(err) => println!(\"Error: {:?}\", err),\n-    }\n-}\n-```\n-\n-The only change here is switching `map_err(|e| e.to_string())` (which converts\n-errors to strings) to `map_err(CliError::Io)` or `map_err(CliError::Parse)`.\n-The *caller* gets to decide the level of detail to report to the user. In\n-effect, using a `String` as an error type removes choices from the caller while\n-using a custom `enum` error type like `CliError` gives the caller all of the\n-conveniences as before in addition to *structured data* describing the error.\n-\n-A rule of thumb is to define your own error type, but a `String` error type\n-will do in a pinch, particularly if you're writing an application. If you're\n-writing a library, defining your own error type should be strongly preferred so\n-that you don't remove choices from the caller unnecessarily.\n-\n-# Standard library traits used for error handling\n-\n-The standard library defines two integral traits for error handling:\n-[`std::error::Error`](../std/error/trait.Error.html) and\n-[`std::convert::From`](../std/convert/trait.From.html). While `Error`\n-is designed specifically for generically describing errors, the `From`\n-trait serves a more general role for converting values between two\n-distinct types.\n-\n-## The `Error` trait\n-\n-The `Error` trait is [defined in the standard\n-library](../std/error/trait.Error.html):\n-\n-```rust\n-use std::fmt::{Debug, Display};\n-\n-trait Error: Debug + Display {\n-  /// A short description of the error.\n-  fn description(&self) -> &str;\n-\n-  /// The lower level cause of this error, if any.\n-  fn cause(&self) -> Option<&Error> { None }\n-}\n-```\n-\n-This trait is super generic because it is meant to be implemented for *all*\n-types that represent errors. This will prove useful for writing composable code\n-as we'll see later. Otherwise, the trait allows you to do at least the\n-following things:\n-\n-* Obtain a `Debug` representation of the error.\n-* Obtain a user-facing `Display` representation of the error.\n-* Obtain a short description of the error (via the `description` method).\n-* Inspect the causal chain of an error, if one exists (via the `cause` method).\n-\n-The first two are a result of `Error` requiring impls for both `Debug` and\n-`Display`. The latter two are from the two methods defined on `Error`. The\n-power of `Error` comes from the fact that all error types impl `Error`, which\n-means errors can be existentially quantified as a\n-[trait object](../book/trait-objects.html).\n-This manifests as either `Box<Error>` or `&Error`. Indeed, the `cause` method\n-returns an `&Error`, which is itself a trait object. We'll revisit the\n-`Error` trait's utility as a trait object later.\n-\n-For now, it suffices to show an example implementing the `Error` trait. Let's\n-use the error type we defined in the\n-[previous section](#defining-your-own-error-type):\n-\n-```rust\n-use std::io;\n-use std::num;\n-\n-// We derive `Debug` because all types should probably derive `Debug`.\n-// This gives us a reasonable human readable description of `CliError` values.\n-#[derive(Debug)]\n-enum CliError {\n-    Io(io::Error),\n-    Parse(num::ParseIntError),\n-}\n-```\n-\n-This particular error type represents the possibility of two types of errors\n-occurring: an error dealing with I/O or an error converting a string to a\n-number. The error could represent as many error types as you want by adding new\n-variants to the `enum` definition.\n-\n-Implementing `Error` is pretty straight-forward. It's mostly going to be a lot\n-explicit case analysis.\n-\n-```rust,ignore\n-use std::error;\n-use std::fmt;\n-\n-impl fmt::Display for CliError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            // Both underlying errors already impl `Display`, so we defer to\n-            // their implementations.\n-            CliError::Io(ref err) => write!(f, \"IO error: {}\", err),\n-            CliError::Parse(ref err) => write!(f, \"Parse error: {}\", err),\n-        }\n-    }\n-}\n-\n-impl error::Error for CliError {\n-    fn description(&self) -> &str {\n-        // Both underlying errors already impl `Error`, so we defer to their\n-        // implementations.\n-        match *self {\n-            CliError::Io(ref err) => err.description(),\n-            CliError::Parse(ref err) => err.description(),\n-        }\n-    }\n-\n-    fn cause(&self) -> Option<&error::Error> {\n-        match *self {\n-            // N.B. Both of these implicitly cast `err` from their concrete\n-            // types (either `&io::Error` or `&num::ParseIntError`)\n-            // to a trait object `&Error`. This works because both error types\n-            // implement `Error`.\n-            CliError::Io(ref err) => Some(err),\n-            CliError::Parse(ref err) => Some(err),\n-        }\n-    }\n-}\n-```\n-\n-We note that this is a very typical implementation of `Error`: match on your\n-different error types and satisfy the contracts defined for `description` and\n-`cause`.\n-\n-## The `From` trait\n-\n-The `std::convert::From` trait is\n-[defined in the standard\n-library](../std/convert/trait.From.html):\n-\n-<span id=\"code-from-def\"></span>\n-\n-```rust\n-trait From<T> {\n-    fn from(T) -> Self;\n-}\n-```\n-\n-Deliciously simple, yes? `From` is very useful because it gives us a generic\n-way to talk about conversion *from* a particular type `T` to some other type\n-(in this case, \u201csome other type\u201d is the subject of the impl, or `Self`).\n-The crux of `From` is the\n-[set of implementations provided by the standard\n-library](../std/convert/trait.From.html).\n-\n-Here are a few simple examples demonstrating how `From` works:\n-\n-```rust\n-let string: String = From::from(\"foo\");\n-let bytes: Vec<u8> = From::from(\"foo\");\n-let cow: ::std::borrow::Cow<str> = From::from(\"foo\");\n-```\n-\n-OK, so `From` is useful for converting between strings. But what about errors?\n-It turns out, there is one critical impl:\n-\n-```rust,ignore\n-impl<'a, E: Error + 'a> From<E> for Box<Error + 'a>\n-```\n-\n-This impl says that for *any* type that impls `Error`, we can convert it to a\n-trait object `Box<Error>`. This may not seem terribly surprising, but it is\n-useful in a generic context.\n-\n-Remember the two errors we were dealing with previously? Specifically,\n-`io::Error` and `num::ParseIntError`. Since both impl `Error`, they work with\n-`From`:\n-\n-```rust\n-use std::error::Error;\n-use std::fs;\n-use std::io;\n-use std::num;\n-\n-// We have to jump through some hoops to actually get error values:\n-let io_err: io::Error = io::Error::last_os_error();\n-let parse_err: num::ParseIntError = \"not a number\".parse::<i32>().unwrap_err();\n-\n-// OK, here are the conversions:\n-let err1: Box<Error> = From::from(io_err);\n-let err2: Box<Error> = From::from(parse_err);\n-```\n-\n-There is a really important pattern to recognize here. Both `err1` and `err2`\n-have the *same type*. This is because they are existentially quantified types,\n-or trait objects. In particular, their underlying type is *erased* from the\n-compiler's knowledge, so it truly sees `err1` and `err2` as exactly the same.\n-Additionally, we constructed `err1` and `err2` using precisely the same\n-function call: `From::from`. This is because `From::from` is overloaded on both\n-its argument and its return type.\n-\n-This pattern is important because it solves a problem we had earlier: it gives\n-us a way to reliably convert errors to the same type using the same function.\n-\n-Time to revisit an old friend; the `try!` macro.\n-\n-## The real `try!` macro\n-\n-Previously, we presented this definition of `try!`:\n-\n-```rust\n-macro_rules! try {\n-    ($e:expr) => (match $e {\n-        Ok(val) => val,\n-        Err(err) => return Err(err),\n-    });\n-}\n-```\n-\n-This is not its real definition. Its real definition is\n-[in the standard library](../std/macro.try.html):\n-\n-<span id=\"code-try-def\"></span>\n-\n-```rust\n-macro_rules! try {\n-    ($e:expr) => (match $e {\n-        Ok(val) => val,\n-        Err(err) => return Err(::std::convert::From::from(err)),\n-    });\n-}\n-```\n-\n-There's one tiny but powerful change: the error value is passed through\n-`From::from`. This makes the `try!` macro a lot more powerful because it gives\n-you automatic type conversion for free.\n-\n-Armed with our more powerful `try!` macro, let's take a look at code we wrote\n-previously to read a file and convert its contents to an integer:\n-\n-```rust\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, String> {\n-    let mut file = try!(File::open(file_path).map_err(|e| e.to_string()));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents).map_err(|e| e.to_string()));\n-    let n = try!(contents.trim().parse::<i32>().map_err(|e| e.to_string()));\n-    Ok(2 * n)\n-}\n-```\n-\n-Earlier, we promised that we could get rid of the `map_err` calls. Indeed, all\n-we have to do is pick a type that `From` works with. As we saw in the previous\n-section, `From` has an impl that lets it convert any error type into a\n-`Box<Error>`:\n-\n-```rust\n-use std::error::Error;\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, Box<Error>> {\n-    let mut file = try!(File::open(file_path));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents));\n-    let n = try!(contents.trim().parse::<i32>());\n-    Ok(2 * n)\n-}\n-```\n-\n-We are getting very close to ideal error handling. Our code has very little\n-overhead as a result from error handling because the `try!` macro encapsulates\n-three things simultaneously:\n-\n-1. Case analysis.\n-2. Control flow.\n-3. Error type conversion.\n-\n-When all three things are combined, we get code that is unencumbered by\n-combinators, calls to `unwrap` or case analysis.\n-\n-There's one little nit left: the `Box<Error>` type is *opaque*. If we\n-return a `Box<Error>` to the caller, the caller can't (easily) inspect\n-underlying error type. The situation is certainly better than `String`\n-because the caller can call methods like\n-[`description`](../std/error/trait.Error.html#tymethod.description)\n-and [`cause`](../std/error/trait.Error.html#method.cause), but the\n-limitation remains: `Box<Error>` is opaque. (N.B. This isn't entirely\n-true because Rust does have runtime reflection, which is useful in\n-some scenarios that are [beyond the scope of this\n-section](https://crates.io/crates/error).)\n-\n-It's time to revisit our custom `CliError` type and tie everything together.\n-\n-## Composing custom error types\n-\n-In the last section, we looked at the real `try!` macro and how it does\n-automatic type conversion for us by calling `From::from` on the error value.\n-In particular, we converted errors to `Box<Error>`, which works, but the type\n-is opaque to callers.\n-\n-To fix this, we use the same remedy that we're already familiar with: a custom\n-error type. Once again, here is the code that reads the contents of a file and\n-converts it to an integer:\n-\n-```rust\n-use std::fs::File;\n-use std::io::{self, Read};\n-use std::num;\n-use std::path::Path;\n-\n-// We derive `Debug` because all types should probably derive `Debug`.\n-// This gives us a reasonable human readable description of `CliError` values.\n-#[derive(Debug)]\n-enum CliError {\n-    Io(io::Error),\n-    Parse(num::ParseIntError),\n-}\n-\n-fn file_double_verbose<P: AsRef<Path>>(file_path: P) -> Result<i32, CliError> {\n-    let mut file = try!(File::open(file_path).map_err(CliError::Io));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents).map_err(CliError::Io));\n-    let n: i32 = try!(contents.trim().parse().map_err(CliError::Parse));\n-    Ok(2 * n)\n-}\n-```\n-\n-Notice that we still have the calls to `map_err`. Why? Well, recall the\n-definitions of [`try!`](#code-try-def) and [`From`](#code-from-def). The\n-problem is that there is no `From` impl that allows us to convert from error\n-types like `io::Error` and `num::ParseIntError` to our own custom `CliError`.\n-Of course, it is easy to fix this! Since we defined `CliError`, we can impl\n-`From` with it:\n-\n-```rust\n-# #[derive(Debug)]\n-# enum CliError { Io(io::Error), Parse(num::ParseIntError) }\n-use std::io;\n-use std::num;\n-\n-impl From<io::Error> for CliError {\n-    fn from(err: io::Error) -> CliError {\n-        CliError::Io(err)\n-    }\n-}\n-\n-impl From<num::ParseIntError> for CliError {\n-    fn from(err: num::ParseIntError) -> CliError {\n-        CliError::Parse(err)\n-    }\n-}\n-```\n-\n-All these impls are doing is teaching `From` how to create a `CliError` from\n-other error types. In our case, construction is as simple as invoking the\n-corresponding value constructor. Indeed, it is *typically* this easy.\n-\n-We can finally rewrite `file_double`:\n-\n-```rust\n-# use std::io;\n-# use std::num;\n-# enum CliError { Io(::std::io::Error), Parse(::std::num::ParseIntError) }\n-# impl From<io::Error> for CliError {\n-#     fn from(err: io::Error) -> CliError { CliError::Io(err) }\n-# }\n-# impl From<num::ParseIntError> for CliError {\n-#     fn from(err: num::ParseIntError) -> CliError { CliError::Parse(err) }\n-# }\n-\n-use std::fs::File;\n-use std::io::Read;\n-use std::path::Path;\n-\n-fn file_double<P: AsRef<Path>>(file_path: P) -> Result<i32, CliError> {\n-    let mut file = try!(File::open(file_path));\n-    let mut contents = String::new();\n-    try!(file.read_to_string(&mut contents));\n-    let n: i32 = try!(contents.trim().parse());\n-    Ok(2 * n)\n-}\n-```\n-\n-The only thing we did here was remove the calls to `map_err`. They are no\n-longer needed because the `try!` macro invokes `From::from` on the error value.\n-This works because we've provided `From` impls for all the error types that\n-could appear.\n-\n-If we modified our `file_double` function to perform some other operation, say,\n-convert a string to a float, then we'd need to add a new variant to our error\n-type:\n-\n-```rust\n-use std::io;\n-use std::num;\n-\n-enum CliError {\n-    Io(io::Error),\n-    ParseInt(num::ParseIntError),\n-    ParseFloat(num::ParseFloatError),\n-}\n-```\n-\n-And add a new `From` impl:\n-\n-```rust\n-# enum CliError {\n-#     Io(::std::io::Error),\n-#     ParseInt(num::ParseIntError),\n-#     ParseFloat(num::ParseFloatError),\n-# }\n-\n-use std::num;\n-\n-impl From<num::ParseFloatError> for CliError {\n-    fn from(err: num::ParseFloatError) -> CliError {\n-        CliError::ParseFloat(err)\n-    }\n-}\n-```\n-\n-And that's it!\n-\n-## Advice for library writers\n-\n-If your library needs to report custom errors, then you should\n-probably define your own error type. It's up to you whether or not to\n-expose its representation (like\n-[`ErrorKind`](../std/io/enum.ErrorKind.html)) or keep it hidden (like\n-[`ParseIntError`](../std/num/struct.ParseIntError.html)). Regardless\n-of how you do it, it's usually good practice to at least provide some\n-information about the error beyond its `String`\n-representation. But certainly, this will vary depending on use cases.\n-\n-At a minimum, you should probably implement the\n-[`Error`](../std/error/trait.Error.html)\n-trait. This will give users of your library some minimum flexibility for\n-[composing errors](#the-real-try-macro). Implementing the `Error` trait also\n-means that users are guaranteed the ability to obtain a string representation\n-of an error (because it requires impls for both `fmt::Debug` and\n-`fmt::Display`).\n-\n-Beyond that, it can also be useful to provide implementations of `From` on your\n-error types. This allows you (the library author) and your users to\n-[compose more detailed errors](#composing-custom-error-types). For example,\n-[`csv::Error`](http://burntsushi.net/rustdoc/csv/enum.Error.html)\n-provides `From` impls for both `io::Error` and `byteorder::Error`.\n-\n-Finally, depending on your tastes, you may also want to define a\n-[`Result` type alias](#the-result-type-alias-idiom), particularly if your\n-library defines a single error type. This is used in the standard library\n-for [`io::Result`](../std/io/type.Result.html)\n-and [`fmt::Result`](../std/fmt/type.Result.html).\n-\n-# Case study: A program to read population data\n-\n-This section was long, and depending on your background, it might be\n-rather dense. While there is plenty of example code to go along with\n-the prose, most of it was specifically designed to be pedagogical. So,\n-we're going to do something new: a case study.\n-\n-For this, we're going to build up a command line program that lets you\n-query world population data. The objective is simple: you give it a location\n-and it will tell you the population. Despite the simplicity, there is a lot\n-that can go wrong!\n-\n-The data we'll be using comes from the [Data Science\n-Toolkit][11]. I've prepared some data from it for this exercise. You\n-can either grab the [world population data][12] (41MB gzip compressed,\n-145MB uncompressed) or only the [US population data][13] (2.2MB gzip\n-compressed, 7.2MB uncompressed).\n-\n-Up until now, we've kept the code limited to Rust's standard library. For a real\n-task like this though, we'll want to at least use something to parse CSV data,\n-parse the program arguments and decode that stuff into Rust types automatically. For that, we'll use the\n-[`csv`](https://crates.io/crates/csv),\n-and [`rustc-serialize`](https://crates.io/crates/rustc-serialize) crates.\n-\n-## Initial setup\n-\n-We're not going to spend a lot of time on setting up a project with\n-Cargo because it is already covered well in [the Cargo\n-section](getting-started.html#hello-cargo) and [Cargo's documentation][14].\n-\n-To get started from scratch, run `cargo new --bin city-pop` and make sure your\n-`Cargo.toml` looks something like this:\n-\n-```text\n-[package]\n-name = \"city-pop\"\n-version = \"0.1.0\"\n-authors = [\"Andrew Gallant <jamslam@gmail.com>\"]\n-\n-[[bin]]\n-name = \"city-pop\"\n-\n-[dependencies]\n-csv = \"0.*\"\n-rustc-serialize = \"0.*\"\n-getopts = \"0.*\"\n-```\n-\n-You should already be able to run:\n-\n-```text\n-cargo build --release\n-./target/release/city-pop\n-# Outputs: Hello, world!\n-```\n-\n-## Argument parsing\n-\n-Let's get argument parsing out of the way. We won't go into too much\n-detail on Getopts, but there is [some good documentation][15]\n-describing it. The short story is that Getopts generates an argument\n-parser and a help message from a vector of options (The fact that it\n-is a vector is hidden behind a struct and a set of methods). Once the\n-parsing is done, the parser returns a struct that records matches\n-for defined options, and remaining \"free\" arguments.\n-From there, we can get information about the flags, for\n-instance, whether they were passed in, and what arguments they\n-had. Here's our program with the appropriate `extern crate`\n-statements, and the basic argument setup for Getopts:\n-\n-```rust,ignore\n-extern crate getopts;\n-extern crate rustc_serialize;\n-\n-use getopts::Options;\n-use std::env;\n-\n-fn print_usage(program: &str, opts: Options) {\n-    println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <data-path> <city>\", program)));\n-}\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    let program = &args[0];\n-\n-    let mut opts = Options::new();\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-\n-    let matches = match opts.parse(&args[1..]) {\n-        Ok(m)  => { m }\n-        Err(e) => { panic!(e.to_string()) }\n-    };\n-    if matches.opt_present(\"h\") {\n-        print_usage(&program, opts);\n-        return;\n-    }\n-    let data_path = &matches.free[0];\n-    let city: &str = &matches.free[1];\n-\n-    // Do stuff with information.\n-}\n-```\n-\n-First, we get a vector of the arguments passed into our program. We\n-then store the first one, knowing that it is our program's name. Once\n-that's done, we set up our argument flags, in this case a simplistic\n-help message flag. Once we have the argument flags set up, we use\n-`Options.parse` to parse the argument vector (starting from index one,\n-because index 0 is the program name). If this was successful, we\n-assign matches to the parsed object, if not, we panic. Once past that,\n-we test if the user passed in the help flag, and if so print the usage\n-message. The option help messages are constructed by Getopts, so all\n-we have to do to print the usage message is tell it what we want it to\n-print for the program name and template. If the user has not passed in\n-the help flag, we assign the proper variables to their corresponding\n-arguments.\n-\n-## Writing the logic\n-\n-We all write code differently, but error handling is usually the last thing we\n-want to think about. This isn't great for the overall design of a program, but\n-it can be useful for rapid prototyping. Because Rust forces us to be explicit\n-about error handling (by making us call `unwrap`), it is easy to see which\n-parts of our program can cause errors.\n-\n-In this case study, the logic is really simple. All we need to do is parse the\n-CSV data given to us and print out a field in matching rows. Let's do it. (Make\n-sure to add `extern crate csv;` to the top of your file.)\n-\n-```rust,ignore\n-use std::fs::File;\n-\n-// This struct represents the data in each row of the CSV file.\n-// Type based decoding absolves us of a lot of the nitty gritty error\n-// handling, like parsing strings as integers or floats.\n-#[derive(Debug, RustcDecodable)]\n-struct Row {\n-    country: String,\n-    city: String,\n-    accent_city: String,\n-    region: String,\n-\n-    // Not every row has data for the population, latitude or longitude!\n-    // So we express them as `Option` types, which admits the possibility of\n-    // absence. The CSV parser will fill in the correct value for us.\n-    population: Option<u64>,\n-    latitude: Option<f64>,\n-    longitude: Option<f64>,\n-}\n-\n-fn print_usage(program: &str, opts: Options) {\n-    println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <data-path> <city>\", program)));\n-}\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    let program = &args[0];\n-\n-    let mut opts = Options::new();\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-\n-    let matches = match opts.parse(&args[1..]) {\n-        Ok(m)  => { m }\n-        Err(e) => { panic!(e.to_string()) }\n-    };\n-\n-    if matches.opt_present(\"h\") {\n-        print_usage(&program, opts);\n-        return;\n-    }\n-\n-    let data_path = &matches.free[0];\n-    let city: &str = &matches.free[1];\n-\n-    let file = File::open(data_path).unwrap();\n-    let mut rdr = csv::Reader::from_reader(file);\n-\n-    for row in rdr.decode::<Row>() {\n-        let row = row.unwrap();\n-\n-        if row.city == city {\n-            println!(\"{}, {}: {:?}\",\n-                row.city, row.country,\n-                row.population.expect(\"population count\"));\n-        }\n-    }\n-}\n-```\n-\n-Let's outline the errors. We can start with the obvious: the three places that\n-`unwrap` is called:\n-\n-1. [`File::open`](../std/fs/struct.File.html#method.open)\n-   can return an\n-   [`io::Error`](../std/io/struct.Error.html).\n-2. [`csv::Reader::decode`](http://burntsushi.net/rustdoc/csv/struct.Reader.html#method.decode)\n-   decodes one record at a time, and\n-   [decoding a\n-   record](http://burntsushi.net/rustdoc/csv/struct.DecodedRecords.html)\n-   (look at the `Item` associated type on the `Iterator` impl)\n-   can produce a\n-   [`csv::Error`](http://burntsushi.net/rustdoc/csv/enum.Error.html).\n-3. If `row.population` is `None`, then calling `expect` will panic.\n-\n-Are there any others? What if we can't find a matching city? Tools like `grep`\n-will return an error code, so we probably should too. So we have logic errors\n-specific to our problem, IO errors and CSV parsing errors. We're going to\n-explore two different ways to approach handling these errors.\n-\n-I'd like to start with `Box<Error>`. Later, we'll see how defining our own\n-error type can be useful.\n-\n-## Error handling with `Box<Error>`\n-\n-`Box<Error>` is nice because it *just works*. You don't need to define your own\n-error types and you don't need any `From` implementations. The downside is that\n-since `Box<Error>` is a trait object, it *erases the type*, which means the\n-compiler can no longer reason about its underlying type.\n-\n-[Previously](#the-limits-of-combinators) we started refactoring our code by\n-changing the type of our function from `T` to `Result<T, OurErrorType>`. In\n-this case, `OurErrorType` is only `Box<Error>`. But what's `T`? And can we add\n-a return type to `main`?\n-\n-The answer to the second question is no, we can't. That means we'll need to\n-write a new function. But what is `T`? The simplest thing we can do is to\n-return a list of matching `Row` values as a `Vec<Row>`. (Better code would\n-return an iterator, but that is left as an exercise to the reader.)\n-\n-Let's refactor our code into its own function, but keep the calls to `unwrap`.\n-Note that we opt to handle the possibility of a missing population count by\n-simply ignoring that row.\n-\n-```rust,ignore\n-use std::path::Path;\n-\n-struct Row {\n-    // This struct remains unchanged.\n-}\n-\n-struct PopulationCount {\n-    city: String,\n-    country: String,\n-    // This is no longer an `Option` because values of this type are only\n-    // constructed if they have a population count.\n-    count: u64,\n-}\n-\n-fn print_usage(program: &str, opts: Options) {\n-    println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <data-path> <city>\", program)));\n-}\n-\n-fn search<P: AsRef<Path>>(file_path: P, city: &str) -> Vec<PopulationCount> {\n-    let mut found = vec![];\n-    let file = File::open(file_path).unwrap();\n-    let mut rdr = csv::Reader::from_reader(file);\n-    for row in rdr.decode::<Row>() {\n-        let row = row.unwrap();\n-        match row.population {\n-            None => { } // Skip it.\n-            Some(count) => if row.city == city {\n-                found.push(PopulationCount {\n-                    city: row.city,\n-                    country: row.country,\n-                    count: count,\n-                });\n-            },\n-        }\n-    }\n-    found\n-}\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    let program = &args[0];\n-\n-    let mut opts = Options::new();\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-\n-    let matches = match opts.parse(&args[1..]) {\n-        Ok(m)  => { m }\n-        Err(e) => { panic!(e.to_string()) }\n-    };\n-\n-    if matches.opt_present(\"h\") {\n-        print_usage(&program, opts);\n-        return;\n-    }\n-\n-    let data_path = &matches.free[0];\n-    let city: &str = &matches.free[1];\n-\n-    for pop in search(data_path, city) {\n-        println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n-    }\n-}\n-\n-```\n-\n-While we got rid of one use of `expect` (which is a nicer variant of `unwrap`),\n-we still should handle the absence of any search results.\n-\n-To convert this to proper error handling, we need to do the following:\n-\n-1. Change the return type of `search` to be `Result<Vec<PopulationCount>,\n-   Box<Error>>`.\n-2. Use the [`try!` macro](#code-try-def) so that errors are returned to the\n-   caller instead of panicking the program.\n-3. Handle the error in `main`.\n-\n-Let's try it:\n-\n-```rust,ignore\n-use std::error::Error;\n-\n-// The rest of the code before this is unchanged.\n-\n-fn search<P: AsRef<Path>>\n-         (file_path: P, city: &str)\n-         -> Result<Vec<PopulationCount>, Box<Error>> {\n-    let mut found = vec![];\n-    let file = try!(File::open(file_path));\n-    let mut rdr = csv::Reader::from_reader(file);\n-    for row in rdr.decode::<Row>() {\n-        let row = try!(row);\n-        match row.population {\n-            None => { } // Skip it.\n-            Some(count) => if row.city == city {\n-                found.push(PopulationCount {\n-                    city: row.city,\n-                    country: row.country,\n-                    count: count,\n-                });\n-            },\n-        }\n-    }\n-    if found.is_empty() {\n-        Err(From::from(\"No matching cities with a population were found.\"))\n-    } else {\n-        Ok(found)\n-    }\n-}\n-```\n-\n-Instead of `x.unwrap()`, we now have `try!(x)`. Since our function returns a\n-`Result<T, E>`, the `try!` macro will return early from the function if an\n-error occurs.\n-\n-At the end of `search` we also convert a plain string to an error type \n-by using the [corresponding `From` impls](../std/convert/trait.From.html):\n-\n-```rust,ignore\n-// We are making use of this impl in the code above, since we call `From::from`\n-// on a `&'static str`.\n-impl<'a> From<&'a str> for Box<Error>\n-\n-// But this is also useful when you need to allocate a new string for an\n-// error message, usually with `format!`.\n-impl From<String> for Box<Error>\n-```\n-\n-Since `search` now returns a `Result<T, E>`, `main` should use case analysis\n-when calling `search`:\n-\n-```rust,ignore\n-...\n-    match search(data_path, city) {\n-        Ok(pops) => {\n-            for pop in pops {\n-                println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n-            }\n-        }\n-        Err(err) => println!(\"{}\", err)\n-    }\n-...\n-```\n-\n-Now that we've seen how to do proper error handling with `Box<Error>`, let's\n-try a different approach with our own custom error type. But first, let's take\n-a quick break from error handling and add support for reading from `stdin`.\n-\n-## Reading from stdin\n-\n-In our program, we accept a single file for input and do one pass over the\n-data. This means we probably should be able to accept input on stdin. But maybe\n-we like the current format too\u2014so let's have both!\n-\n-Adding support for stdin is actually quite easy. There are only three things we\n-have to do:\n-\n-1. Tweak the program arguments so that a single parameter\u2014the\n-   city\u2014can be accepted while the population data is read from stdin.\n-2. Modify the program so that an option `-f` can take the file, if it\n-    is not passed into stdin.\n-3. Modify the `search` function to take an *optional* file path. When `None`,\n-   it should know to read from stdin.\n-\n-First, here's the new usage:\n-\n-```rust,ignore\n-fn print_usage(program: &str, opts: Options) {\n-    println!(\"{}\", opts.usage(&format!(\"Usage: {} [options] <city>\", program)));\n-}\n-```\n-Of course we need to adapt the argument handling code:\n-\n-```rust,ignore\n-...\n-    let mut opts = Options::new();\n-    opts.optopt(\"f\", \"file\", \"Choose an input file, instead of using STDIN.\", \"NAME\");\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-    ...\n-    let data_path = matches.opt_str(\"f\");\n-\n-    let city = if !matches.free.is_empty() {\n-        &matches.free[0]\n-    } else {\n-        print_usage(&program, opts);\n-        return;\n-    };\n-\n-    match search(&data_path, city) {\n-        Ok(pops) => {\n-            for pop in pops {\n-                println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n-            }\n-        }\n-        Err(err) => println!(\"{}\", err)\n-    }\n-...\n-```\n-\n-We've made the user experience a bit nicer by showing the usage message,\n-instead of a panic from an out-of-bounds index, when `city`, the\n-remaining free argument, is not present.\n-\n-Modifying `search` is slightly trickier. The `csv` crate can build a\n-parser out of\n-[any type that implements `io::Read`](http://burntsushi.net/rustdoc/csv/struct.Reader.html#method.from_reader).\n-But how can we use the same code over both types? There's actually a\n-couple ways we could go about this. One way is to write `search` such\n-that it is generic on some type parameter `R` that satisfies\n-`io::Read`. Another way is to use trait objects:\n-\n-```rust,ignore\n-use std::io;\n-\n-// The rest of the code before this is unchanged.\n-\n-fn search<P: AsRef<Path>>\n-         (file_path: &Option<P>, city: &str)\n-         -> Result<Vec<PopulationCount>, Box<Error>> {\n-    let mut found = vec![];\n-    let input: Box<io::Read> = match *file_path {\n-        None => Box::new(io::stdin()),\n-        Some(ref file_path) => Box::new(try!(File::open(file_path))),\n-    };\n-    let mut rdr = csv::Reader::from_reader(input);\n-    // The rest remains unchanged!\n-}\n-```\n-\n-## Error handling with a custom type\n-\n-Previously, we learned how to\n-[compose errors using a custom error type](#composing-custom-error-types).\n-We did this by defining our error type as an `enum` and implementing `Error`\n-and `From`.\n-\n-Since we have three distinct errors (IO, CSV parsing and not found), let's\n-define an `enum` with three variants:\n-\n-```rust,ignore\n-#[derive(Debug)]\n-enum CliError {\n-    Io(io::Error),\n-    Csv(csv::Error),\n-    NotFound,\n-}\n-```\n-\n-And now for impls on `Display` and `Error`:\n-\n-```rust,ignore\n-use std::fmt;\n-\n-impl fmt::Display for CliError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            CliError::Io(ref err) => err.fmt(f),\n-            CliError::Csv(ref err) => err.fmt(f),\n-            CliError::NotFound => write!(f, \"No matching cities with a \\\n-                                             population were found.\"),\n-        }\n-    }\n-}\n-\n-impl Error for CliError {\n-    fn description(&self) -> &str {\n-        match *self {\n-            CliError::Io(ref err) => err.description(),\n-            CliError::Csv(ref err) => err.description(),\n-            CliError::NotFound => \"not found\",\n-        }\n-    }\n-\n-    fn cause(&self) -> Option<&Error> {\n-        match *self {\n-            CliError::Io(ref err) => Some(err),\n-            CliError::Csv(ref err) => Some(err),\n-            // Our custom error doesn't have an underlying cause,\n-            // but we could modify it so that it does.\n-            CliError::NotFound => None,\n-        }\n-    }\n-}\n-```\n-\n-Before we can use our `CliError` type in our `search` function, we need to\n-provide a couple `From` impls. How do we know which impls to provide? Well,\n-we'll need to convert from both `io::Error` and `csv::Error` to `CliError`.\n-Those are the only external errors, so we'll only need two `From` impls for\n-now:\n-\n-```rust,ignore\n-impl From<io::Error> for CliError {\n-    fn from(err: io::Error) -> CliError {\n-        CliError::Io(err)\n-    }\n-}\n-\n-impl From<csv::Error> for CliError {\n-    fn from(err: csv::Error) -> CliError {\n-        CliError::Csv(err)\n-    }\n-}\n-```\n-\n-The `From` impls are important because of how\n-[`try!` is defined](#code-try-def). In particular, if an error occurs,\n-`From::from` is called on the error, which in this case, will convert it to our\n-own error type `CliError`.\n-\n-With the `From` impls done, we only need to make two small tweaks to our\n-`search` function: the return type and the \u201cnot found\u201d error. Here it is in\n-full:\n-\n-```rust,ignore\n-fn search<P: AsRef<Path>>\n-         (file_path: &Option<P>, city: &str)\n-         -> Result<Vec<PopulationCount>, CliError> {\n-    let mut found = vec![];\n-    let input: Box<io::Read> = match *file_path {\n-        None => Box::new(io::stdin()),\n-        Some(ref file_path) => Box::new(try!(File::open(file_path))),\n-    };\n-    let mut rdr = csv::Reader::from_reader(input);\n-    for row in rdr.decode::<Row>() {\n-        let row = try!(row);\n-        match row.population {\n-            None => { } // Skip it.\n-            Some(count) => if row.city == city {\n-                found.push(PopulationCount {\n-                    city: row.city,\n-                    country: row.country,\n-                    count: count,\n-                });\n-            },\n-        }\n-    }\n-    if found.is_empty() {\n-        Err(CliError::NotFound)\n-    } else {\n-        Ok(found)\n-    }\n-}\n-```\n-\n-No other changes are necessary.\n-\n-## Adding functionality\n-\n-Writing generic code is great, because generalizing stuff is cool, and\n-it can then be useful later. But sometimes, the juice isn't worth the\n-squeeze. Look at what we just did in the previous step:\n-\n-1. Defined a new error type.\n-2. Added impls for `Error`, `Display` and two for `From`.\n-\n-The big downside here is that our program didn't improve a whole lot.\n-There is quite a bit of overhead to representing errors with `enum`s,\n-especially in short programs like this.\n-\n-*One* useful aspect of using a custom error type like we've done here is that\n-the `main` function can now choose to handle errors differently. Previously,\n-with `Box<Error>`, it didn't have much of a choice: just print the message.\n-We're still doing that here, but what if we wanted to, say, add a `--quiet`\n-flag? The `--quiet` flag should silence any verbose output.\n-\n-Right now, if the program doesn't find a match, it will output a message saying\n-so. This can be a little clumsy, especially if you intend for the program to\n-be used in shell scripts.\n-\n-So let's start by adding the flags. Like before, we need to tweak the usage\n-string and add a flag to the Option variable. Once we've done that, Getopts does the rest:\n-\n-```rust,ignore\n-...\n-    let mut opts = Options::new();\n-    opts.optopt(\"f\", \"file\", \"Choose an input file, instead of using STDIN.\", \"NAME\");\n-    opts.optflag(\"h\", \"help\", \"Show this usage message.\");\n-    opts.optflag(\"q\", \"quiet\", \"Silences errors and warnings.\");\n-...\n-```\n-\n-Now we only need to implement our \u201cquiet\u201d functionality. This requires us to\n-tweak the case analysis in `main`:\n-\n-```rust,ignore\n-use std::process;\n-...\n-    match search(&data_path, city) {\n-        Err(CliError::NotFound) if matches.opt_present(\"q\") => process::exit(1),\n-        Err(err) => panic!(\"{}\", err),\n-        Ok(pops) => for pop in pops {\n-            println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n-        }\n-    }\n-...\n-```\n-\n-Certainly, we don't want to be quiet if there was an IO error or if the data\n-failed to parse. Therefore, we use case analysis to check if the error type is\n-`NotFound` *and* if `--quiet` has been enabled. If the search failed, we still\n-quit with an exit code (following `grep`'s convention).\n-\n-If we had stuck with `Box<Error>`, then it would be pretty tricky to implement\n-the `--quiet` functionality.\n-\n-This pretty much sums up our case study. From here, you should be ready to go\n-out into the world and write your own programs and libraries with proper error\n-handling.\n-\n-# The Short Story\n-\n-Since this section is long, it is useful to have a quick summary for error\n-handling in Rust. These are some good \u201crules of thumb.\" They are emphatically\n-*not* commandments. There are probably good reasons to break every one of these\n-heuristics!\n-\n-* If you're writing short example code that would be overburdened by error\n-  handling, it's probably fine to use `unwrap` (whether that's\n-  [`Result::unwrap`](../std/result/enum.Result.html#method.unwrap),\n-  [`Option::unwrap`](../std/option/enum.Option.html#method.unwrap)\n-  or preferably\n-  [`Option::expect`](../std/option/enum.Option.html#method.expect)).\n-  Consumers of your code should know to use proper error handling. (If they\n-  don't, send them here!)\n-* If you're writing a quick 'n' dirty program, don't feel ashamed if you use\n-  `unwrap`. Be warned: if it winds up in someone else's hands, don't be\n-  surprised if they are agitated by poor error messages!\n-* If you're writing a quick 'n' dirty program and feel ashamed about panicking\n-  anyway, then use either a `String` or a `Box<Error>` for your\n-  error type.\n-* Otherwise, in a program, define your own error types with appropriate\n-  [`From`](../std/convert/trait.From.html)\n-  and\n-  [`Error`](../std/error/trait.Error.html)\n-  impls to make the [`try!`](../std/macro.try.html)\n-  macro more ergonomic.\n-* If you're writing a library and your code can produce errors, define your own\n-  error type and implement the\n-  [`std::error::Error`](../std/error/trait.Error.html)\n-  trait. Where appropriate, implement\n-  [`From`](../std/convert/trait.From.html) to make both\n-  your library code and the caller's code easier to write. (Because of Rust's\n-  coherence rules, callers will not be able to impl `From` on your error type,\n-  so your library should do it.)\n-* Learn the combinators defined on\n-  [`Option`](../std/option/enum.Option.html)\n-  and\n-  [`Result`](../std/result/enum.Result.html).\n-  Using them exclusively can be a bit tiring at times, but I've personally\n-  found a healthy mix of `try!` and combinators to be quite appealing.\n-  `and_then`, `map` and `unwrap_or` are my favorites.\n-\n-[1]: ../book/patterns.html\n-[2]: ../std/option/enum.Option.html#method.map\n-[3]: ../std/option/enum.Option.html#method.unwrap_or\n-[4]: ../std/option/enum.Option.html#method.unwrap_or_else\n-[5]: ../std/option/enum.Option.html\n-[6]: ../std/result/index.html\n-[7]: ../std/result/enum.Result.html#method.unwrap\n-[8]: ../std/fmt/trait.Debug.html\n-[9]: ../std/primitive.str.html#method.parse\n-[10]: ../book/associated-types.html\n-[11]: https://github.com/petewarden/dstkdata\n-[12]: http://burntsushi.net/stuff/worldcitiespop.csv.gz\n-[13]: http://burntsushi.net/stuff/uscitiespop.csv.gz\n-[14]: http://doc.crates.io/guide.html\n-[15]: http://doc.rust-lang.org/getopts/getopts/index.html"}, {"sha": "e9e2dab73eff3f74d553c651e28f8acdd8aac21a", "filename": "src/doc/book/src/ffi.md", "status": "removed", "additions": 0, "deletions": 767, "changes": 767, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,767 +0,0 @@\n-# Foreign Function Interface\n-\n-# Introduction\n-\n-This guide will use the [snappy](https://github.com/google/snappy)\n-compression/decompression library as an introduction to writing bindings for\n-foreign code. Rust is currently unable to call directly into a C++ library, but\n-snappy includes a C interface (documented in\n-[`snappy-c.h`](https://github.com/google/snappy/blob/master/snappy-c.h)).\n-\n-## A note about libc\n-\n-Many of these examples use [the `libc` crate][libc], which provides various\n-type definitions for C types, among other things. If you\u2019re trying these\n-examples yourself, you\u2019ll need to add `libc` to your `Cargo.toml`:\n-\n-```toml\n-[dependencies]\n-libc = \"0.2.0\"\n-```\n-\n-[libc]: https://crates.io/crates/libc\n-\n-and add `extern crate libc;` to your crate root.\n-\n-## Calling foreign functions\n-\n-The following is a minimal example of calling a foreign function which will\n-compile if snappy is installed:\n-\n-```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n-use libc::size_t;\n-\n-#[link(name = \"snappy\")]\n-extern {\n-    fn snappy_max_compressed_length(source_length: size_t) -> size_t;\n-}\n-\n-fn main() {\n-    let x = unsafe { snappy_max_compressed_length(100) };\n-    println!(\"max compressed length of a 100 byte buffer: {}\", x);\n-}\n-```\n-\n-The `extern` block is a list of function signatures in a foreign library, in\n-this case with the platform's C ABI. The `#[link(...)]` attribute is used to\n-instruct the linker to link against the snappy library so the symbols are\n-resolved.\n-\n-Foreign functions are assumed to be unsafe so calls to them need to be wrapped\n-with `unsafe {}` as a promise to the compiler that everything contained within\n-truly is safe. C libraries often expose interfaces that aren't thread-safe, and\n-almost any function that takes a pointer argument isn't valid for all possible\n-inputs since the pointer could be dangling, and raw pointers fall outside of\n-Rust's safe memory model.\n-\n-When declaring the argument types to a foreign function, the Rust compiler\n-cannot check if the declaration is correct, so specifying it correctly is part\n-of keeping the binding correct at runtime.\n-\n-The `extern` block can be extended to cover the entire snappy API:\n-\n-```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n-use libc::{c_int, size_t};\n-\n-#[link(name = \"snappy\")]\n-extern {\n-    fn snappy_compress(input: *const u8,\n-                       input_length: size_t,\n-                       compressed: *mut u8,\n-                       compressed_length: *mut size_t) -> c_int;\n-    fn snappy_uncompress(compressed: *const u8,\n-                         compressed_length: size_t,\n-                         uncompressed: *mut u8,\n-                         uncompressed_length: *mut size_t) -> c_int;\n-    fn snappy_max_compressed_length(source_length: size_t) -> size_t;\n-    fn snappy_uncompressed_length(compressed: *const u8,\n-                                  compressed_length: size_t,\n-                                  result: *mut size_t) -> c_int;\n-    fn snappy_validate_compressed_buffer(compressed: *const u8,\n-                                         compressed_length: size_t) -> c_int;\n-}\n-# fn main() {}\n-```\n-\n-# Creating a safe interface\n-\n-The raw C API needs to be wrapped to provide memory safety and make use of higher-level concepts\n-like vectors. A library can choose to expose only the safe, high-level interface and hide the unsafe\n-internal details.\n-\n-Wrapping the functions which expect buffers involves using the `slice::raw` module to manipulate Rust\n-vectors as pointers to memory. Rust's vectors are guaranteed to be a contiguous block of memory. The\n-length is the number of elements currently contained, and the capacity is the total size in elements of\n-the allocated memory. The length is less than or equal to the capacity.\n-\n-```rust\n-# #![feature(libc)]\n-# extern crate libc;\n-# use libc::{c_int, size_t};\n-# unsafe fn snappy_validate_compressed_buffer(_: *const u8, _: size_t) -> c_int { 0 }\n-# fn main() {}\n-pub fn validate_compressed_buffer(src: &[u8]) -> bool {\n-    unsafe {\n-        snappy_validate_compressed_buffer(src.as_ptr(), src.len() as size_t) == 0\n-    }\n-}\n-```\n-\n-The `validate_compressed_buffer` wrapper above makes use of an `unsafe` block, but it makes the\n-guarantee that calling it is safe for all inputs by leaving off `unsafe` from the function\n-signature.\n-\n-The `snappy_compress` and `snappy_uncompress` functions are more complex, since a buffer has to be\n-allocated to hold the output too.\n-\n-The `snappy_max_compressed_length` function can be used to allocate a vector with the maximum\n-required capacity to hold the compressed output. The vector can then be passed to the\n-`snappy_compress` function as an output parameter. An output parameter is also passed to retrieve\n-the true length after compression for setting the length.\n-\n-```rust\n-# #![feature(libc)]\n-# extern crate libc;\n-# use libc::{size_t, c_int};\n-# unsafe fn snappy_compress(a: *const u8, b: size_t, c: *mut u8,\n-#                           d: *mut size_t) -> c_int { 0 }\n-# unsafe fn snappy_max_compressed_length(a: size_t) -> size_t { a }\n-# fn main() {}\n-pub fn compress(src: &[u8]) -> Vec<u8> {\n-    unsafe {\n-        let srclen = src.len() as size_t;\n-        let psrc = src.as_ptr();\n-\n-        let mut dstlen = snappy_max_compressed_length(srclen);\n-        let mut dst = Vec::with_capacity(dstlen as usize);\n-        let pdst = dst.as_mut_ptr();\n-\n-        snappy_compress(psrc, srclen, pdst, &mut dstlen);\n-        dst.set_len(dstlen as usize);\n-        dst\n-    }\n-}\n-```\n-\n-Decompression is similar, because snappy stores the uncompressed size as part of the compression\n-format and `snappy_uncompressed_length` will retrieve the exact buffer size required.\n-\n-```rust\n-# #![feature(libc)]\n-# extern crate libc;\n-# use libc::{size_t, c_int};\n-# unsafe fn snappy_uncompress(compressed: *const u8,\n-#                             compressed_length: size_t,\n-#                             uncompressed: *mut u8,\n-#                             uncompressed_length: *mut size_t) -> c_int { 0 }\n-# unsafe fn snappy_uncompressed_length(compressed: *const u8,\n-#                                      compressed_length: size_t,\n-#                                      result: *mut size_t) -> c_int { 0 }\n-# fn main() {}\n-pub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {\n-    unsafe {\n-        let srclen = src.len() as size_t;\n-        let psrc = src.as_ptr();\n-\n-        let mut dstlen: size_t = 0;\n-        snappy_uncompressed_length(psrc, srclen, &mut dstlen);\n-\n-        let mut dst = Vec::with_capacity(dstlen as usize);\n-        let pdst = dst.as_mut_ptr();\n-\n-        if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 {\n-            dst.set_len(dstlen as usize);\n-            Some(dst)\n-        } else {\n-            None // SNAPPY_INVALID_INPUT\n-        }\n-    }\n-}\n-```\n-\n-Then, we can add some tests to show how to use them.\n-\n-```rust\n-# #![feature(libc)]\n-# extern crate libc;\n-# use libc::{c_int, size_t};\n-# unsafe fn snappy_compress(input: *const u8,\n-#                           input_length: size_t,\n-#                           compressed: *mut u8,\n-#                           compressed_length: *mut size_t)\n-#                           -> c_int { 0 }\n-# unsafe fn snappy_uncompress(compressed: *const u8,\n-#                             compressed_length: size_t,\n-#                             uncompressed: *mut u8,\n-#                             uncompressed_length: *mut size_t)\n-#                             -> c_int { 0 }\n-# unsafe fn snappy_max_compressed_length(source_length: size_t) -> size_t { 0 }\n-# unsafe fn snappy_uncompressed_length(compressed: *const u8,\n-#                                      compressed_length: size_t,\n-#                                      result: *mut size_t)\n-#                                      -> c_int { 0 }\n-# unsafe fn snappy_validate_compressed_buffer(compressed: *const u8,\n-#                                             compressed_length: size_t)\n-#                                             -> c_int { 0 }\n-# fn main() { }\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    fn valid() {\n-        let d = vec![0xde, 0xad, 0xd0, 0x0d];\n-        let c: &[u8] = &compress(&d);\n-        assert!(validate_compressed_buffer(c));\n-        assert!(uncompress(c) == Some(d));\n-    }\n-\n-    #[test]\n-    fn invalid() {\n-        let d = vec![0, 0, 0, 0];\n-        assert!(!validate_compressed_buffer(&d));\n-        assert!(uncompress(&d).is_none());\n-    }\n-\n-    #[test]\n-    fn empty() {\n-        let d = vec![];\n-        assert!(!validate_compressed_buffer(&d));\n-        assert!(uncompress(&d).is_none());\n-        let c = compress(&d);\n-        assert!(validate_compressed_buffer(&c));\n-        assert!(uncompress(&c) == Some(d));\n-    }\n-}\n-```\n-\n-# Destructors\n-\n-Foreign libraries often hand off ownership of resources to the calling code.\n-When this occurs, we must use Rust's destructors to provide safety and guarantee\n-the release of these resources (especially in the case of panic).\n-\n-For more about destructors, see the [Drop trait](../std/ops/trait.Drop.html).\n-\n-# Callbacks from C code to Rust functions\n-\n-Some external libraries require the usage of callbacks to report back their\n-current state or intermediate data to the caller.\n-It is possible to pass functions defined in Rust to an external library.\n-The requirement for this is that the callback function is marked as `extern`\n-with the correct calling convention to make it callable from C code.\n-\n-The callback function can then be sent through a registration call\n-to the C library and afterwards be invoked from there.\n-\n-A basic example is:\n-\n-Rust code:\n-\n-```rust,no_run\n-extern fn callback(a: i32) {\n-    println!(\"I'm called from C with value {0}\", a);\n-}\n-\n-#[link(name = \"extlib\")]\n-extern {\n-   fn register_callback(cb: extern fn(i32)) -> i32;\n-   fn trigger_callback();\n-}\n-\n-fn main() {\n-    unsafe {\n-        register_callback(callback);\n-        trigger_callback(); // Triggers the callback.\n-    }\n-}\n-```\n-\n-C code:\n-\n-```c\n-typedef void (*rust_callback)(int32_t);\n-rust_callback cb;\n-\n-int32_t register_callback(rust_callback callback) {\n-    cb = callback;\n-    return 1;\n-}\n-\n-void trigger_callback() {\n-  cb(7); // Will call callback(7) in Rust.\n-}\n-```\n-\n-In this example Rust's `main()` will call `trigger_callback()` in C,\n-which would, in turn, call back to `callback()` in Rust.\n-\n-\n-## Targeting callbacks to Rust objects\n-\n-The former example showed how a global function can be called from C code.\n-However it is often desired that the callback is targeted to a special\n-Rust object. This could be the object that represents the wrapper for the\n-respective C object.\n-\n-This can be achieved by passing a raw pointer to the object down to the\n-C library. The C library can then include the pointer to the Rust object in\n-the notification. This will allow the callback to unsafely access the\n-referenced Rust object.\n-\n-Rust code:\n-\n-```rust,no_run\n-#[repr(C)]\n-struct RustObject {\n-    a: i32,\n-    // Other members...\n-}\n-\n-extern \"C\" fn callback(target: *mut RustObject, a: i32) {\n-    println!(\"I'm called from C with value {0}\", a);\n-    unsafe {\n-        // Update the value in RustObject with the value received from the callback:\n-        (*target).a = a;\n-    }\n-}\n-\n-#[link(name = \"extlib\")]\n-extern {\n-   fn register_callback(target: *mut RustObject,\n-                        cb: extern fn(*mut RustObject, i32)) -> i32;\n-   fn trigger_callback();\n-}\n-\n-fn main() {\n-    // Create the object that will be referenced in the callback:\n-    let mut rust_object = Box::new(RustObject { a: 5 });\n-\n-    unsafe {\n-        register_callback(&mut *rust_object, callback);\n-        trigger_callback();\n-    }\n-}\n-```\n-\n-C code:\n-\n-```c\n-typedef void (*rust_callback)(void*, int32_t);\n-void* cb_target;\n-rust_callback cb;\n-\n-int32_t register_callback(void* callback_target, rust_callback callback) {\n-    cb_target = callback_target;\n-    cb = callback;\n-    return 1;\n-}\n-\n-void trigger_callback() {\n-  cb(cb_target, 7); // Will call callback(&rustObject, 7) in Rust.\n-}\n-```\n-\n-## Asynchronous callbacks\n-\n-In the previously given examples the callbacks are invoked as a direct reaction\n-to a function call to the external C library.\n-The control over the current thread is switched from Rust to C to Rust for the\n-execution of the callback, but in the end the callback is executed on the\n-same thread that called the function which triggered the callback.\n-\n-Things get more complicated when the external library spawns its own threads\n-and invokes callbacks from there.\n-In these cases access to Rust data structures inside the callbacks is\n-especially unsafe and proper synchronization mechanisms must be used.\n-Besides classical synchronization mechanisms like mutexes, one possibility in\n-Rust is to use channels (in `std::sync::mpsc`) to forward data from the C\n-thread that invoked the callback into a Rust thread.\n-\n-If an asynchronous callback targets a special object in the Rust address space\n-it is also absolutely necessary that no more callbacks are performed by the\n-C library after the respective Rust object gets destroyed.\n-This can be achieved by unregistering the callback in the object's\n-destructor and designing the library in a way that guarantees that no\n-callback will be performed after deregistration.\n-\n-# Linking\n-\n-The `link` attribute on `extern` blocks provides the basic building block for\n-instructing rustc how it will link to native libraries. There are two accepted\n-forms of the link attribute today:\n-\n-* `#[link(name = \"foo\")]`\n-* `#[link(name = \"foo\", kind = \"bar\")]`\n-\n-In both of these cases, `foo` is the name of the native library that we're\n-linking to, and in the second case `bar` is the type of native library that the\n-compiler is linking to. There are currently three known types of native\n-libraries:\n-\n-* Dynamic - `#[link(name = \"readline\")]`\n-* Static - `#[link(name = \"my_build_dependency\", kind = \"static\")]`\n-* Frameworks - `#[link(name = \"CoreFoundation\", kind = \"framework\")]`\n-\n-Note that frameworks are only available on macOS targets.\n-\n-The different `kind` values are meant to differentiate how the native library\n-participates in linkage. From a linkage perspective, the Rust compiler creates\n-two flavors of artifacts: partial (rlib/staticlib) and final (dylib/binary).\n-Native dynamic library and framework dependencies are propagated to the final\n-artifact boundary, while static library dependencies are not propagated at\n-all, because the static libraries are integrated directly into the subsequent\n-artifact.\n-\n-A few examples of how this model can be used are:\n-\n-* A native build dependency. Sometimes some C/C++ glue is needed when writing\n-  some Rust code, but distribution of the C/C++ code in a library format is\n-  a burden. In this case, the code will be archived into `libfoo.a` and then the\n-  Rust crate would declare a dependency via `#[link(name = \"foo\", kind =\n-  \"static\")]`.\n-\n-  Regardless of the flavor of output for the crate, the native static library\n-  will be included in the output, meaning that distribution of the native static\n-  library is not necessary.\n-\n-* A normal dynamic dependency. Common system libraries (like `readline`) are\n-  available on a large number of systems, and often a static copy of these\n-  libraries cannot be found. When this dependency is included in a Rust crate,\n-  partial targets (like rlibs) will not link to the library, but when the rlib\n-  is included in a final target (like a binary), the native library will be\n-  linked in.\n-\n-On macOS, frameworks behave with the same semantics as a dynamic library.\n-\n-# Unsafe blocks\n-\n-Some operations, like dereferencing raw pointers or calling functions that have been marked\n-unsafe are only allowed inside unsafe blocks. Unsafe blocks isolate unsafety and are a promise to\n-the compiler that the unsafety does not leak out of the block.\n-\n-Unsafe functions, on the other hand, advertise it to the world. An unsafe function is written like\n-this:\n-\n-```rust\n-unsafe fn kaboom(ptr: *const i32) -> i32 { *ptr }\n-```\n-\n-This function can only be called from an `unsafe` block or another `unsafe` function.\n-\n-# Accessing foreign globals\n-\n-Foreign APIs often export a global variable which could do something like track\n-global state. In order to access these variables, you declare them in `extern`\n-blocks with the `static` keyword:\n-\n-```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n-\n-#[link(name = \"readline\")]\n-extern {\n-    static rl_readline_version: libc::c_int;\n-}\n-\n-fn main() {\n-    println!(\"You have readline version {} installed.\",\n-             unsafe { rl_readline_version as i32 });\n-}\n-```\n-\n-Alternatively, you may need to alter global state provided by a foreign\n-interface. To do this, statics can be declared with `mut` so we can mutate\n-them.\n-\n-```rust,no_run\n-# #![feature(libc)]\n-extern crate libc;\n-\n-use std::ffi::CString;\n-use std::ptr;\n-\n-#[link(name = \"readline\")]\n-extern {\n-    static mut rl_prompt: *const libc::c_char;\n-}\n-\n-fn main() {\n-    let prompt = CString::new(\"[my-awesome-shell] $\").unwrap();\n-    unsafe {\n-        rl_prompt = prompt.as_ptr();\n-\n-        println!(\"{:?}\", rl_prompt);\n-\n-        rl_prompt = ptr::null();\n-    }\n-}\n-```\n-\n-Note that all interaction with a `static mut` is unsafe, both reading and\n-writing. Dealing with global mutable state requires a great deal of care.\n-\n-# Foreign calling conventions\n-\n-Most foreign code exposes a C ABI, and Rust uses the platform's C calling convention by default when\n-calling foreign functions. Some foreign functions, most notably the Windows API, use other calling\n-conventions. Rust provides a way to tell the compiler which convention to use:\n-\n-```rust\n-# #![feature(libc)]\n-extern crate libc;\n-\n-#[cfg(all(target_os = \"win32\", target_arch = \"x86\"))]\n-#[link(name = \"kernel32\")]\n-#[allow(non_snake_case)]\n-extern \"stdcall\" {\n-    fn SetEnvironmentVariableA(n: *const u8, v: *const u8) -> libc::c_int;\n-}\n-# fn main() { }\n-```\n-\n-This applies to the entire `extern` block. The list of supported ABI constraints\n-are:\n-\n-* `stdcall`\n-* `aapcs`\n-* `cdecl`\n-* `fastcall`\n-* `vectorcall`\n-This is currently hidden behind the `abi_vectorcall` gate and is subject to change.\n-* `Rust`\n-* `rust-intrinsic`\n-* `system`\n-* `C`\n-* `win64`\n-* `sysv64`\n-\n-Most of the abis in this list are self-explanatory, but the `system` abi may\n-seem a little odd. This constraint selects whatever the appropriate ABI is for\n-interoperating with the target's libraries. For example, on win32 with a x86\n-architecture, this means that the abi used would be `stdcall`. On x86_64,\n-however, windows uses the `C` calling convention, so `C` would be used. This\n-means that in our previous example, we could have used `extern \"system\" { ... }`\n-to define a block for all windows systems, not only x86 ones.\n-\n-# Interoperability with foreign code\n-\n-Rust guarantees that the layout of a `struct` is compatible with the platform's\n-representation in C only if the `#[repr(C)]` attribute is applied to it.\n-`#[repr(C, packed)]` can be used to lay out struct members without padding.\n-`#[repr(C)]` can also be applied to an enum.\n-\n-Rust's owned boxes (`Box<T>`) use non-nullable pointers as handles which point\n-to the contained object. However, they should not be manually created because\n-they are managed by internal allocators. References can safely be assumed to be\n-non-nullable pointers directly to the type.  However, breaking the borrow\n-checking or mutability rules is not guaranteed to be safe, so prefer using raw\n-pointers (`*`) if that's needed because the compiler can't make as many\n-assumptions about them.\n-\n-Vectors and strings share the same basic memory layout, and utilities are\n-available in the `vec` and `str` modules for working with C APIs. However,\n-strings are not terminated with `\\0`. If you need a NUL-terminated string for\n-interoperability with C, you should use the `CString` type in the `std::ffi`\n-module.\n-\n-The [`libc` crate on crates.io][libc] includes type aliases and function\n-definitions for the C standard library in the `libc` module, and Rust links\n-against `libc` and `libm` by default.\n-\n-# Variadic functions\n-\n-In C, functions can be 'variadic', meaning they accept a variable number of arguments. This can\n-be achieved in Rust by specifying `...` within the argument list of a foreign function declaration:\n-\n-```no_run\n-extern {\n-    fn foo(x: i32, ...);\n-}\n-\n-fn main() {\n-    unsafe {\n-        foo(10, 20, 30, 40, 50);\n-    }\n-}\n-```\n-\n-Normal Rust functions can *not* be variadic:\n-\n-```ignore\n-// This will not compile\n-\n-fn foo(x: i32, ...) { }\n-```\n-\n-# The \"nullable pointer optimization\"\n-\n-Certain Rust types are defined to never be `null`. This includes references (`&T`,\n-`&mut T`), boxes (`Box<T>`), and function pointers (`extern \"abi\" fn()`). When\n-interfacing with C, pointers that might be `null` are often used, which would seem to\n-require some messy `transmute`s and/or unsafe code to handle conversions to/from Rust types.\n-However, the language provides a workaround.\n-\n-As a special case, an `enum` is eligible for the \"nullable pointer optimization\" if it contains\n-exactly two variants, one of which contains no data and the other contains a field of one of the\n-non-nullable types listed above.  This means no extra space is required for a discriminant; rather,\n-the empty variant is represented by putting a `null` value into the non-nullable field. This is\n-called an \"optimization\", but unlike other optimizations it is guaranteed to apply to eligible\n-types.\n-\n-The most common type that takes advantage of the nullable pointer optimization is `Option<T>`,\n-where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` is a correct way\n-to represent a nullable function pointer using the C ABI (corresponding to the C type\n-`int (*)(int)`).\n-\n-Here is a contrived example. Let's say some C library has a facility for registering a\n-callback, which gets called in certain situations. The callback is passed a function pointer\n-and an integer and it is supposed to run the function with the integer as a parameter. So\n-we have function pointers flying across the FFI boundary in both directions.\n-\n-```rust\n-# #![feature(libc)]\n-extern crate libc;\n-use libc::c_int;\n-\n-# #[cfg(hidden)]\n-extern \"C\" {\n-    /// Registers the callback.\n-    fn register(cb: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>, c_int) -> c_int>);\n-}\n-# unsafe fn register(_: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>,\n-#                                            c_int) -> c_int>)\n-# {}\n-\n-/// This fairly useless function receives a function pointer and an integer\n-/// from C, and returns the result of calling the function with the integer.\n-/// In case no function is provided, it squares the integer by default.\n-extern \"C\" fn apply(process: Option<extern \"C\" fn(c_int) -> c_int>, int: c_int) -> c_int {\n-    match process {\n-        Some(f) => f(int),\n-        None    => int * int\n-    }\n-}\n-\n-fn main() {\n-    unsafe {\n-        register(Some(apply));\n-    }\n-}\n-```\n-\n-And the code on the C side looks like this:\n-\n-```c\n-void register(void (*f)(void (*)(int), int)) {\n-    ...\n-}\n-```\n-\n-No `transmute` required!\n-\n-# Calling Rust code from C\n-\n-You may wish to compile Rust code in a way so that it can be called from C. This is\n-fairly easy, but requires a few things:\n-\n-```rust\n-#[no_mangle]\n-pub extern fn hello_rust() -> *const u8 {\n-    \"Hello, world!\\0\".as_ptr()\n-}\n-# fn main() {}\n-```\n-\n-The `extern` makes this function adhere to the C calling convention, as\n-discussed above in \"[Foreign Calling\n-Conventions](ffi.html#foreign-calling-conventions)\". The `no_mangle`\n-attribute turns off Rust's name mangling, so that it is easier to link to.\n-\n-# FFI and panics\n-\n-It\u2019s important to be mindful of `panic!`s when working with FFI. A `panic!`\n-across an FFI boundary is undefined behavior. If you\u2019re writing code that may\n-panic, you should run it in a closure with [`catch_unwind()`]:\n-\n-```rust\n-use std::panic::catch_unwind;\n-\n-#[no_mangle]\n-pub extern fn oh_no() -> i32 {\n-    let result = catch_unwind(|| {\n-        panic!(\"Oops!\");\n-    });\n-    match result {\n-        Ok(_) => 0,\n-        Err(_) => 1,\n-    }\n-}\n-\n-fn main() {}\n-```\n-\n-Please note that [`catch_unwind()`] will only catch unwinding panics, not\n-those who abort the process. See the documentation of [`catch_unwind()`]\n-for more information.\n-\n-[`catch_unwind()`]: ../std/panic/fn.catch_unwind.html\n-\n-# Representing opaque structs\n-\n-Sometimes, a C library wants to provide a pointer to something, but not let you\n-know the internal details of the thing it wants. The simplest way is to use a\n-`void *` argument:\n-\n-```c\n-void foo(void *arg);\n-void bar(void *arg);\n-```\n-\n-We can represent this in Rust with the `c_void` type:\n-\n-```rust\n-# #![feature(libc)]\n-extern crate libc;\n-\n-extern \"C\" {\n-    pub fn foo(arg: *mut libc::c_void);\n-    pub fn bar(arg: *mut libc::c_void);\n-}\n-# fn main() {}\n-```\n-\n-This is a perfectly valid way of handling the situation. However, we can do a bit\n-better. To solve this, some C libraries will instead create a `struct`, where\n-the details and memory layout of the struct are private. This gives some amount\n-of type safety. These structures are called \u2018opaque\u2019. Here\u2019s an example, in C:\n-\n-```c\n-struct Foo; /* Foo is a structure, but its contents are not part of the public interface */\n-struct Bar;\n-void foo(struct Foo *arg);\n-void bar(struct Bar *arg);\n-```\n-\n-To do this in Rust, let\u2019s create our own opaque types with `enum`:\n-\n-```rust\n-pub enum Foo {}\n-pub enum Bar {}\n-\n-extern \"C\" {\n-    pub fn foo(arg: *mut Foo);\n-    pub fn bar(arg: *mut Bar);\n-}\n-# fn main() {}\n-```\n-\n-By using an `enum` with no variants, we create an opaque type that we can\u2019t\n-instantiate, as it has no variants. But because our `Foo` and `Bar` types are\n-different, we\u2019ll get type safety between the two of them, so we cannot\n-accidentally pass a pointer to `Foo` to `bar()`."}, {"sha": "96c8e9f5d683423aca4aafef93b7c9aec840ff19", "filename": "src/doc/book/src/functions.md", "status": "removed", "additions": 0, "deletions": 336, "changes": 336, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ffunctions.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,336 +0,0 @@\n-# Functions\n-\n-Every Rust program has at least one function, the `main` function:\n-\n-```rust\n-fn main() {\n-}\n-```\n-\n-This is the simplest possible function declaration. As we mentioned before,\n-`fn` says \u2018this is a function\u2019, followed by the name, some parentheses because\n-this function takes no arguments, and then some curly braces to indicate the\n-body. Here\u2019s a function named `foo`:\n-\n-```rust\n-fn foo() {\n-}\n-```\n-\n-So, what about taking arguments? Here\u2019s a function that prints a number:\n-\n-```rust\n-fn print_number(x: i32) {\n-    println!(\"x is: {}\", x);\n-}\n-```\n-\n-Here\u2019s a complete program that uses `print_number`:\n-\n-```rust\n-fn main() {\n-    print_number(5);\n-}\n-\n-fn print_number(x: i32) {\n-    println!(\"x is: {}\", x);\n-}\n-```\n-\n-As you can see, function arguments work very similar to `let` declarations:\n-you add a type to the argument name, after a colon.\n-\n-Here\u2019s a complete program that adds two numbers together and prints them:\n-\n-```rust\n-fn main() {\n-    print_sum(5, 6);\n-}\n-\n-fn print_sum(x: i32, y: i32) {\n-    println!(\"sum is: {}\", x + y);\n-}\n-```\n-\n-You separate arguments with a comma, both when you call the function, as well\n-as when you declare it.\n-\n-Unlike `let`, you _must_ declare the types of function arguments. This does\n-not work:\n-\n-```rust,ignore\n-fn print_sum(x, y) {\n-    println!(\"sum is: {}\", x + y);\n-}\n-```\n-\n-You get this error:\n-\n-```text\n-expected one of `!`, `:`, or `@`, found `)`\n-fn print_sum(x, y) {\n-```\n-\n-This is a deliberate design decision. While full-program inference is possible,\n-languages which have it, like Haskell, often suggest that documenting your\n-types explicitly is a best-practice. We agree that forcing functions to declare\n-types while allowing for inference inside of function bodies is a wonderful\n-sweet spot between full inference and no inference.\n-\n-What about returning a value? Here\u2019s a function that adds one to an integer:\n-\n-```rust\n-fn add_one(x: i32) -> i32 {\n-    x + 1\n-}\n-```\n-\n-Rust functions return exactly one value, and you declare the type after an\n-\u2018arrow\u2019, which is a dash (`-`) followed by a greater-than sign (`>`). The last\n-line of a function determines what it returns. You\u2019ll note the lack of a\n-semicolon here. If we added it in:\n-\n-```rust,ignore\n-fn add_one(x: i32) -> i32 {\n-    x + 1;\n-}\n-```\n-\n-We would get an error:\n-\n-```text\n-error: not all control paths return a value\n-fn add_one(x: i32) -> i32 {\n-     x + 1;\n-}\n-\n-help: consider removing this semicolon:\n-     x + 1;\n-          ^\n-```\n-\n-This reveals two interesting things about Rust: it is an expression-based\n-language, and semicolons are different from semicolons in other \u2018curly brace\n-and semicolon\u2019-based languages. These two things are related.\n-\n-## Expressions vs. Statements\n-\n-Rust is primarily an expression-based language. There are only two kinds of\n-statements, and everything else is an expression.\n-\n-So what's the difference? Expressions return a value, and statements do not.\n-That\u2019s why we end up with \u2018not all control paths return a value\u2019 here: the\n-statement `x + 1;` doesn\u2019t return a value. There are two kinds of statements in\n-Rust: \u2018declaration statements\u2019 and \u2018expression statements\u2019. Everything else is\n-an expression. Let\u2019s talk about declaration statements first.\n-\n-In some languages, variable bindings can be written as expressions, not\n-statements. Like Ruby:\n-\n-```ruby\n-x = y = 5\n-```\n-\n-In Rust, however, using `let` to introduce a binding is _not_ an expression. The\n-following will produce a compile-time error:\n-\n-```rust,ignore\n-let x = (let y = 5); // Expected identifier, found keyword `let`.\n-```\n-\n-The compiler is telling us here that it was expecting to see the beginning of\n-an expression, and a `let` can only begin a statement, not an expression.\n-\n-Note that assigning to an already-bound variable (e.g. `y = 5`) is still an\n-expression, although its value is not particularly useful. Unlike other\n-languages where an assignment evaluates to the assigned value (e.g. `5` in the\n-previous example), in Rust the value of an assignment is an empty tuple `()`\n-because the assigned value can have [only one owner](ownership.html), and any\n-other returned value would be too surprising:\n-\n-```rust\n-let mut y = 5;\n-\n-let x = (y = 6);  // `x` has the value `()`, not `6`.\n-```\n-\n-The second kind of statement in Rust is the *expression statement*. Its\n-purpose is to turn any expression into a statement. In practical terms, Rust's\n-grammar expects statements to follow other statements. This means that you use\n-semicolons to separate expressions from each other. This means that Rust\n-looks a lot like most other languages that require you to use semicolons\n-at the end of every line, and you will see semicolons at the end of almost\n-every line of Rust code you see.\n-\n-What is this exception that makes us say \"almost\"? You saw it already, in this\n-code:\n-\n-```rust\n-fn add_one(x: i32) -> i32 {\n-    x + 1\n-}\n-```\n-\n-Our function claims to return an `i32`, but with a semicolon, it would return\n-`()` instead. Rust realizes this probably isn\u2019t what we want, and suggests\n-removing the semicolon in the error we saw before.\n-\n-## Early returns\n-\n-But what about early returns? Rust does have a keyword for that, `return`:\n-\n-```rust\n-fn foo(x: i32) -> i32 {\n-    return x;\n-\n-    // We never run this code!\n-    x + 1\n-}\n-```\n-\n-Using a `return` as the last line of a function works, but is considered poor\n-style:\n-\n-```rust\n-fn foo(x: i32) -> i32 {\n-    return x + 1;\n-}\n-```\n-\n-The previous definition without `return` may look a bit strange if you haven\u2019t\n-worked in an expression-based language before, but it becomes intuitive over\n-time.\n-\n-## Diverging functions\n-\n-Rust has some special syntax for \u2018diverging functions\u2019, which are functions that\n-do not return:\n-\n-```rust\n-fn diverges() -> ! {\n-    panic!(\"This function never returns!\");\n-}\n-```\n-\n-`panic!` is a macro, similar to `println!()` that we\u2019ve already seen. Unlike\n-`println!()`, `panic!()` causes the current thread of execution to crash with\n-the given message. Because this function will cause a crash, it will never\n-return, and so it has the type \u2018`!`\u2019, which is read \u2018diverges\u2019.\n-\n-If you add a main function that calls `diverges()` and run it, you\u2019ll get\n-some output that looks like this:\n-\n-```text\n-thread \u2018main\u2019 panicked at \u2018This function never returns!\u2019, hello.rs:2\n-```\n-\n-If you want more information, you can get a backtrace by setting the\n-`RUST_BACKTRACE` environment variable:\n-\n-```text\n-$ RUST_BACKTRACE=1 ./diverges\n-thread 'main' panicked at 'This function never returns!', hello.rs:2\n-Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n-stack backtrace:\n-  hello::diverges\n-        at ./hello.rs:2\n-  hello::main\n-        at ./hello.rs:6\n-```\n-\n-If you want the complete backtrace and filenames:\n-\n-```text\n-$ RUST_BACKTRACE=full ./diverges\n-thread 'main' panicked at 'This function never returns!', hello.rs:2\n-stack backtrace:\n-   1:     0x7f402773a829 - sys::backtrace::write::h0942de78b6c02817K8r\n-   2:     0x7f402773d7fc - panicking::on_panic::h3f23f9d0b5f4c91bu9w\n-   3:     0x7f402773960e - rt::unwind::begin_unwind_inner::h2844b8c5e81e79558Bw\n-   4:     0x7f4027738893 - rt::unwind::begin_unwind::h4375279447423903650\n-   5:     0x7f4027738809 - diverges::h2266b4c4b850236beaa\n-   6:     0x7f40277389e5 - main::h19bb1149c2f00ecfBaa\n-   7:     0x7f402773f514 - rt::unwind::try::try_fn::h13186883479104382231\n-   8:     0x7f402773d1d8 - __rust_try\n-   9:     0x7f402773f201 - rt::lang_start::ha172a3ce74bb453aK5w\n-  10:     0x7f4027738a19 - main\n-  11:     0x7f402694ab44 - __libc_start_main\n-  12:     0x7f40277386c8 - <unknown>\n-  13:                0x0 - <unknown>\n-```\n-\n-If you need to override an already set `RUST_BACKTRACE`, \n-in cases when you cannot just unset the variable, \n-then set it to `0` to avoid getting a backtrace. \n-Any other value (even no value at all) turns on backtrace.\n-\n-```text\n-$ export RUST_BACKTRACE=1\n-...\n-$ RUST_BACKTRACE=0 ./diverges \n-thread 'main' panicked at 'This function never returns!', hello.rs:2\n-note: Run with `RUST_BACKTRACE=1` for a backtrace.\n-```\n-\n-`RUST_BACKTRACE` also works with Cargo\u2019s `run` command:\n-\n-```text\n-$ RUST_BACKTRACE=full cargo run\n-     Running `target/debug/diverges`\n-thread 'main' panicked at 'This function never returns!', hello.rs:2\n-stack backtrace:\n-   1:     0x7f402773a829 - sys::backtrace::write::h0942de78b6c02817K8r\n-   2:     0x7f402773d7fc - panicking::on_panic::h3f23f9d0b5f4c91bu9w\n-   3:     0x7f402773960e - rt::unwind::begin_unwind_inner::h2844b8c5e81e79558Bw\n-   4:     0x7f4027738893 - rt::unwind::begin_unwind::h4375279447423903650\n-   5:     0x7f4027738809 - diverges::h2266b4c4b850236beaa\n-   6:     0x7f40277389e5 - main::h19bb1149c2f00ecfBaa\n-   7:     0x7f402773f514 - rt::unwind::try::try_fn::h13186883479104382231\n-   8:     0x7f402773d1d8 - __rust_try\n-   9:     0x7f402773f201 - rt::lang_start::ha172a3ce74bb453aK5w\n-  10:     0x7f4027738a19 - main\n-  11:     0x7f402694ab44 - __libc_start_main\n-  12:     0x7f40277386c8 - <unknown>\n-  13:                0x0 - <unknown>\n-```\n-\n-A diverging function can be used as any type:\n-\n-```rust,should_panic\n-# fn diverges() -> ! {\n-#    panic!(\"This function never returns!\");\n-# }\n-let x: i32 = diverges();\n-let x: String = diverges();\n-```\n-\n-## Function pointers\n-\n-We can also create variable bindings which point to functions:\n-\n-```rust\n-let f: fn(i32) -> i32;\n-```\n-\n-`f` is a variable binding which points to a function that takes an `i32` as\n-an argument and returns an `i32`. For example:\n-\n-```rust\n-fn plus_one(i: i32) -> i32 {\n-    i + 1\n-}\n-\n-// Without type inference:\n-let f: fn(i32) -> i32 = plus_one;\n-\n-// With type inference:\n-let f = plus_one;\n-```\n-\n-We can then use `f` to call the function:\n-\n-```rust\n-# fn plus_one(i: i32) -> i32 { i + 1 }\n-# let f = plus_one;\n-let six = f(5);\n-```"}, {"sha": "d02cd776d00e3a48c4fce6de90f77bff9caaaf4d", "filename": "src/doc/book/src/generics.md", "status": "removed", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,190 +0,0 @@\n-# Generics\n-\n-Sometimes, when writing a function or data type, we may want it to work for\n-multiple types of arguments. In Rust, we can do this with generics.\n-Generics are called \u2018parametric polymorphism\u2019 in type theory,\n-which means that they are types or functions that have multiple forms (\u2018poly\u2019\n-is multiple, \u2018morph\u2019 is form) over a given parameter (\u2018parametric\u2019).\n-\n-Anyway, enough type theory, let\u2019s check out some generic code. Rust\u2019s\n-standard library provides a type, `Option<T>`, that\u2019s generic:\n-\n-```rust\n-enum Option<T> {\n-    Some(T),\n-    None,\n-}\n-```\n-\n-The `<T>` part, which you\u2019ve seen a few times before, indicates that this is\n-a generic data type. Inside the declaration of our `enum`, wherever we see a `T`,\n-we substitute that type for the same type used in the generic. Here\u2019s an\n-example of using `Option<T>`, with some extra type annotations:\n-\n-```rust\n-let x: Option<i32> = Some(5);\n-```\n-\n-In the type declaration, we say `Option<i32>`. Note how similar this looks to\n-`Option<T>`. So, in this particular `Option`, `T` has the value of `i32`. On\n-the right-hand side of the binding, we make a `Some(T)`, where `T` is `5`.\n-Since that\u2019s an `i32`, the two sides match, and Rust is happy. If they didn\u2019t\n-match, we\u2019d get an error:\n-\n-```rust,ignore\n-let x: Option<f64> = Some(5);\n-// error: mismatched types: expected `core::option::Option<f64>`,\n-// found `core::option::Option<_>` (expected f64 but found integral variable)\n-```\n-\n-That doesn\u2019t mean we can\u2019t make `Option<T>`s that hold an `f64`! They have\n-to match up:\n-\n-```rust\n-let x: Option<i32> = Some(5);\n-let y: Option<f64> = Some(5.0f64);\n-```\n-\n-This is just fine. One definition, multiple uses.\n-\n-Generics don\u2019t have to only be generic over one type. Consider another type from Rust\u2019s standard library that\u2019s similar, `Result<T, E>`:\n-\n-```rust\n-enum Result<T, E> {\n-    Ok(T),\n-    Err(E),\n-}\n-```\n-\n-This type is generic over _two_ types: `T` and `E`. By the way, the capital letters\n-can be any letter you\u2019d like. We could define `Result<T, E>` as:\n-\n-```rust\n-enum Result<A, Z> {\n-    Ok(A),\n-    Err(Z),\n-}\n-```\n-\n-if we wanted to. Convention says that the first generic parameter should be\n-`T`, for \u2018type\u2019, and that we use `E` for \u2018error\u2019. Rust doesn\u2019t care, however.\n-\n-The `Result<T, E>` type is intended to be used to return the result of a\n-computation, and to have the ability to return an error if it didn\u2019t work out.\n-\n-## Generic functions\n-\n-We can write functions that take generic types with a similar syntax:\n-\n-```rust\n-fn takes_anything<T>(x: T) {\n-    // Do something with `x`.\n-}\n-```\n-\n-The syntax has two parts: the `<T>` says \u201cthis function is generic over one\n-type, `T`\u201d, and the `x: T` says \u201cx has the type `T`.\u201d\n-\n-Multiple arguments can have the same generic type:\n-\n-```rust\n-fn takes_two_of_the_same_things<T>(x: T, y: T) {\n-    // ...\n-}\n-```\n-\n-We could write a version that takes multiple types:\n-\n-```rust\n-fn takes_two_things<T, U>(x: T, y: U) {\n-    // ...\n-}\n-```\n-\n-## Generic structs\n-\n-You can store a generic type in a `struct` as well:\n-\n-```rust\n-struct Point<T> {\n-    x: T,\n-    y: T,\n-}\n-\n-let int_origin = Point { x: 0, y: 0 };\n-let float_origin = Point { x: 0.0, y: 0.0 };\n-```\n-\n-Similar to functions, the `<T>` is where we declare the generic parameters,\n-and we then use `x: T` in the type declaration, too.\n-\n-When you want to add an implementation for the generic `struct`, you\n-declare the type parameter after the `impl`:\n-\n-```rust\n-# struct Point<T> {\n-#     x: T,\n-#     y: T,\n-# }\n-#\n-impl<T> Point<T> {\n-    fn swap(&mut self) {\n-        std::mem::swap(&mut self.x, &mut self.y);\n-    }\n-}\n-```\n-\n-So far you\u2019ve seen generics that take absolutely any type. These are useful in\n-many cases: you\u2019ve already seen `Option<T>`, and later you\u2019ll meet universal\n-container types like [`Vec<T>`][Vec]. On the other hand, often you want to\n-trade that flexibility for increased expressive power. Read about [trait\n-bounds][traits] to see why and how.\n-\n-## Resolving ambiguities\n-\n-Most of the time when generics are involved, the compiler can infer the\n-generic parameters automatically:\n-\n-```rust\n-// v must be a Vec<T> but we don't know what T is yet\n-let mut v = Vec::new();\n-// v just got a bool value, so T must be bool!\n-v.push(true);\n-// Debug-print v\n-println!(\"{:?}\", v);\n-```\n-\n-Sometimes though, the compiler needs a little help. For example, had we\n-omitted the last line, we would get a compile error:\n-\n-```rust,ignore\n-let v = Vec::new();\n-//      ^^^^^^^^ cannot infer type for `T`\n-//\n-// note: type annotations or generic parameter binding required\n-println!(\"{:?}\", v);\n-```\n-\n-We can solve this using either a type annotation:\n-\n-```rust\n-let v: Vec<bool> = Vec::new();\n-println!(\"{:?}\", v);\n-```\n-\n-or by binding the generic parameter `T` via the so-called\n-[\u2018turbofish\u2019][turbofish] `::<>` syntax:\n-\n-```rust\n-let v = Vec::<bool>::new();\n-println!(\"{:?}\", v);\n-```\n-\n-The second approach is useful in situations where we don\u2019t want to bind the\n-result to a variable. It can also be used to bind generic parameters in\n-functions or methods. See [Iterators \u00a7 Consumers](iterators.html#consumers)\n-for an example.\n-\n-[traits]: traits.html\n-[Vec]: ../std/vec/struct.Vec.html\n-[turbofish]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect"}, {"sha": "06ea24fef3c1d66beb0b2f0ebd59847c9a0636a4", "filename": "src/doc/book/src/getting-started.md", "status": "removed", "additions": 0, "deletions": 550, "changes": 550, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,550 +0,0 @@\n-# Getting Started\n-\n-This first chapter of the book will get us going with Rust and its tooling.\n-First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n-we\u2019ll talk about Cargo, Rust\u2019s build system and package manager.\n-\n-We\u2019ll be showing off a number of commands using a terminal, and those lines all\n-start with `$`. You don't need to type in the `$`s, they are there to indicate\n-the start of each command. We\u2019ll see many tutorials and examples around the web\n-that follow this convention: `$` for commands run as our regular user, and `#`\n-for commands we should be running as an administrator.\n-\n-# Installing Rust\n-\n-The first step to using Rust is to install it. Generally speaking, you\u2019ll need\n-an Internet connection to run the commands in this section, as we\u2019ll be\n-downloading Rust from the Internet.\n-\n-The Rust compiler runs on, and compiles to, a great number of platforms, but is\n-best supported on Linux, Mac, and Windows, on the x86 and x86-64 CPU\n-architecture. There are official builds of the Rust compiler and standard\n-library for these platforms and more. [For full details on Rust platform support\n-see the website][platform-support].\n-\n-[platform-support]: https://forge.rust-lang.org/platform-support.html\n-\n-## Installing Rust\n-\n-All you need to do on Unix systems like Linux and macOS is open a\n-terminal and type this:\n-\n-```bash\n-$ curl https://sh.rustup.rs -sSf | sh\n-```\n-\n-It will download a script, and start the installation. If everything\n-goes well, you\u2019ll see this appear:\n-\n-```text\n-Rust is installed now. Great! \n-```\n-\n-Installing on Windows is nearly as easy: download and run\n-[rustup-init.exe]. It will start the installation in a console and\n-present the above message on success.\n-\n-For other installation options and information, visit the [install]\n-page of the Rust website.\n-\n-[rustup-init.exe]: https://win.rustup.rs\n-[install]: https://www.rust-lang.org/install.html\n-\n-## Uninstalling\n-\n-Uninstalling Rust is as easy as installing it:\n-\n-```bash\n-$ rustup self uninstall\n-```\n-\n-## Troubleshooting\n-\n-If we've got Rust installed, we can open up a shell, and type this:\n-\n-```bash\n-$ rustc --version\n-```\n-\n-You should see the version number, commit hash, and commit date.\n-\n-If you do, Rust has been installed successfully! Congrats!\n-\n-If you don't, that probably means that the `PATH` environment variable\n-doesn't include Cargo's binary directory, `~/.cargo/bin` on Unix, or\n-`%USERPROFILE%\\.cargo\\bin` on Windows. This is the directory where\n-Rust development tools live, and most Rust developers keep it in their\n-`PATH` environment variable, which makes it possible to run `rustc` on\n-the command line. Due to differences in operating systems, command\n-shells, and bugs in installation, you may need to restart your shell,\n-log out of the system, or configure `PATH` manually as appropriate for\n-your operating environment.\n-\n-Rust does not do its own linking, and so you\u2019ll need to have a linker\n-installed. Doing so will depend on your specific system. For\n-Linux-based systems, Rust will attempt to call `cc` for linking. On\n-`windows-msvc` (Rust built on Windows with Microsoft Visual Studio),\n-this depends on having [Microsoft Visual C++ Build Tools][msvbt]\n-installed. These do not need to be in `%PATH%` as `rustc` will find\n-them automatically. In general, if you have your linker in a\n-non-traditional location you can call `rustc \n-linker=/path/to/cc`, where `/path/to/cc` should point to your linker path.\n-\n-[msvbt]: http://landinghub.visualstudio.com/visual-cpp-build-tools\n-\n-If you are still stuck, there are a number of places where we can get\n-help. The easiest is\n-[the #rust-beginners IRC channel on irc.mozilla.org][irc-beginners] \n-and for general discussion\n-[the #rust IRC channel on irc.mozilla.org][irc], which we \n-can access through [Mibbit][mibbit]. Then we'll be chatting with other\n-Rustaceans (a silly nickname we call ourselves) who can help us out. Other great\n-resources include [the user\u2019s forum][users] and [Stack Overflow][stackoverflow].\n-\n-[irc-beginners]: irc://irc.mozilla.org/#rust-beginners\n-[irc]: irc://irc.mozilla.org/#rust\n-[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-beginners,%23rust\n-[users]: https://users.rust-lang.org/\n-[stackoverflow]: http://stackoverflow.com/questions/tagged/rust\n-\n-This installer also installs a copy of the documentation locally, so we can\n-read it offline. It's only a `rustup doc` away!\n-\n-# Hello, world!\n-\n-Now that you have Rust installed, we'll help you write your first Rust program.\n-It's traditional when learning a new language to write a little program to\n-print the text \u201cHello, world!\u201d to the screen, and in this section, we'll follow\n-that tradition.\n-\n-The nice thing about starting with such a simple program is that you can\n-quickly verify that your compiler is installed, and that it's working properly.\n-Printing information to the screen is also a pretty common thing to do, so\n-practicing it early on is good.\n-\n-> Note: This book assumes basic familiarity with the command line. Rust itself\n-> makes no specific demands about your editing, tooling, or where your code\n-> lives, so if you prefer an IDE to the command line, that's an option. You may\n-> want to check out [SolidOak], which was built specifically with Rust in mind.\n-> There are a number of extensions in development by the community, and the\n-> Rust team ships plugins for [various editors]. Configuring your editor or\n-> IDE is out of the scope of this tutorial, so check the documentation for your\n-> specific setup.\n-\n-[SolidOak]: https://github.com/oakes/SolidOak\n-[various editors]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md\n-\n-## Creating a Project File\n-\n-First, make a file to put your Rust code in. Rust doesn't care where your code\n-lives, but for this book, I suggest making a *projects* directory in your home\n-directory, and keeping all your projects there. Open a terminal and enter the\n-following commands to make a directory for this particular project:\n-\n-```bash\n-$ mkdir ~/projects\n-$ cd ~/projects\n-$ mkdir hello_world\n-$ cd hello_world\n-```\n-\n-> Note: If you\u2019re on Windows and not using PowerShell, the `~` may not work.\n-> Consult the documentation for your shell for more details.\n-\n-## Writing and Running a Rust Program\n-\n-We need to create a source file for our Rust program. Rust files always end\n-in a *.rs* extension. If you are using more than one word in your filename,\n-use an underscore to separate them; for example, you would use\n-*my_program.rs* rather than *myprogram.rs*.\n-\n-Now, make a new file and call it *main.rs*. Open the file and type\n-the following code:\n-\n-```rust\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-Save the file, and go back to your terminal window. On Linux or macOS, enter the\n-following commands:\n-\n-```bash\n-$ rustc main.rs\n-$ ./main\n-Hello, world!\n-```\n-\n-In Windows, replace `main` with `main.exe`. Regardless of your operating\n-system, you should see the string `Hello, world!` print to the terminal. If you\n-did, then congratulations! You've officially written a Rust program. That makes\n-you a Rust programmer! Welcome.\n-\n-## Anatomy of a Rust Program\n-\n-Now, let\u2019s go over what just happened in your \"Hello, world!\" program in\n-detail. Here's the first piece of the puzzle:\n-\n-```rust\n-fn main() {\n-\n-}\n-```\n-\n-These lines define a *function* in Rust. The `main` function is special: it's\n-the beginning of every Rust program. The first line says, \u201cI\u2019m declaring a\n-function named `main` that takes no arguments and returns nothing.\u201d If there\n-were arguments, they would go inside the parentheses (`(` and `)`), and because\n-we aren\u2019t returning anything from this function, we can omit the return type\n-entirely.\n-\n-Also note that the function body is wrapped in curly braces (`{` and `}`). Rust\n-requires these around all function bodies. It's considered good style to put\n-the opening curly brace on the same line as the function declaration, with one\n-space in between.\n-\n-Inside the `main()` function:\n-\n-```rust\n-    println!(\"Hello, world!\");\n-```\n-\n-This line does all of the work in this little program: it prints text to the\n-screen. There are a number of details that are important here. The first is\n-that it\u2019s indented with four spaces, not tabs.\n-\n-The second important part is the `println!()` line. This is calling a Rust\n-*[macro]*, which is how metaprogramming is done in Rust. If it were calling a\n-function instead, it would look like this: `println()` (without the !). We'll\n-discuss Rust macros in more detail later, but for now you only need to\n-know that when you see a `!` that means that you\u2019re calling a macro instead of\n-a normal function.\n-\n-\n-[macro]: macros.html\n-\n-Next is `\"Hello, world!\"` which is a *string*. Strings are a surprisingly\n-complicated topic in a systems programming language, and this is a *[statically\n-allocated]* string. We pass this string as an argument to `println!`, which\n-prints the string to the screen. Easy enough!\n-\n-[statically allocated]: the-stack-and-the-heap.html\n-\n-The line ends with a semicolon (`;`). Rust is an *[expression-oriented\n-language]*, which means that most things are expressions, rather than\n-statements. The `;` indicates that this expression is over, and the next one is\n-ready to begin. Most lines of Rust code end with a `;`.\n-\n-[expression-oriented language]: glossary.html#expression-oriented-language\n-\n-## Compiling and Running Are Separate Steps\n-\n-In \"Writing and Running a Rust Program\", we showed you how to run a newly\n-created program. We'll break that process down and examine each step now.\n-\n-Before running a Rust program, you have to compile it. You can use the Rust\n-compiler by entering the `rustc` command and passing it the name of your source\n-file, like this:\n-\n-```bash\n-$ rustc main.rs\n-```\n-\n-If you come from a C or C++ background, you'll notice that this is similar to\n-`gcc` or `clang`. After compiling successfully, Rust should output a binary\n-executable, which you can see on Linux or macOS by entering the `ls` command in\n-your shell as follows:\n-\n-```bash\n-$ ls\n-main  main.rs\n-```\n-\n-On Windows, you'd enter:\n-\n-```bash\n-$ dir\n-main.exe\n-main.rs\n-```\n-\n-This shows we have two files: the source code, with an `.rs` extension, and the\n-executable (`main.exe` on Windows, `main` everywhere else). All that's left to\n-do from here is run the `main` or `main.exe` file, like this:\n-\n-```bash\n-$ ./main  # or .\\main.exe on Windows\n-```\n-\n-If *main.rs* were your \"Hello, world!\" program, this would print `Hello,\n-world!` to your terminal.\n-\n-If you come from a dynamic language like Ruby, Python, or JavaScript, you may\n-not be used to compiling and running a program being separate steps. Rust is an\n-*ahead-of-time compiled* language, which means that you can compile a program,\n-give it to someone else, and they can run it even without Rust installed. If\n-you give someone a `.rb` or `.py` or `.js` file, on the other hand, they need\n-to have a Ruby, Python, or JavaScript implementation installed (respectively),\n-but you only need one command to both compile and run your program. Everything\n-is a tradeoff in language design.\n-\n-Just compiling with `rustc` is fine for simple programs, but as your project\n-grows, you'll want to be able to manage all of the options your project has,\n-and make it easy to share your code with other people and projects. Next, I'll\n-introduce you to a tool called Cargo, which will help you write real-world Rust\n-programs.\n-\n-# Hello, Cargo!\n-\n-Cargo is Rust\u2019s build system and package manager, and Rustaceans use Cargo to\n-manage their Rust projects. Cargo manages three things: building your code,\n-downloading the libraries your code depends on, and building those libraries.\n-We call libraries your code needs \u2018dependencies\u2019 since your code depends on\n-them.\n-\n-The simplest Rust programs don\u2019t have any dependencies, so right now, you'd\n-only use the first part of its functionality. As you write more complex Rust\n-programs, you\u2019ll want to add dependencies, and if you start off using Cargo,\n-that will be a lot easier to do.\n-\n-As the vast, vast majority of Rust projects use Cargo, we will assume that\n-you\u2019re using it for the rest of the book. Cargo comes installed with Rust\n-itself, if you used the official installers. If you installed Rust through some\n-other means, you can check if you have Cargo installed by typing:\n-\n-```bash\n-$ cargo --version\n-```\n-\n-Into a terminal. If you see a version number, great! If you see an error like\n-\u2018`command not found`\u2019, then you should look at the documentation for the system\n-in which you installed Rust, to determine if Cargo is separate.\n-\n-## Converting to Cargo\n-\n-Let\u2019s convert the Hello World program to Cargo. To Cargo-fy a project, you need\n-to do three things:\n-\n-1. Put your source file in the right directory.\n-2. Get rid of the old executable (`main.exe` on Windows, `main` everywhere\n-   else).\n-3. Make a Cargo configuration file.\n-\n-Let's get started!\n-\n-### Creating a Source Directory and Removing the Old Executable\n-\n-First, go back to your terminal, move to your *hello_world* directory, and\n-enter the following commands:\n-\n-```bash\n-$ mkdir src\n-$ mv main.rs src/main.rs # or 'move main.rs src/main.rs' on Windows\n-$ rm main  # or 'del main.exe' on Windows\n-```\n-\n-Cargo expects your source files to live inside a *src* directory, so do that\n-first. This leaves the top-level project directory (in this case,\n-*hello_world*) for READMEs, license information, and anything else not related\n-to your code. In this way, using Cargo helps you keep your projects nice and\n-tidy. There's a place for everything, and everything is in its place.\n-\n-Now, move *main.rs* into the *src* directory, and delete the compiled file you\n-created with `rustc`. As usual, replace `main` with `main.exe` if you're on\n-Windows.\n-\n-This example retains `main.rs` as the source filename because it's creating an\n-executable. If you wanted to make a library instead, you'd name the file\n-`lib.rs`. This convention is used by Cargo to successfully compile your\n-projects, but it can be overridden if you wish.\n-\n-### Creating a Configuration File\n-\n-Next, create a new file inside your *hello_world* directory, and call it\n-`Cargo.toml`.\n-\n-Make sure to capitalize the `C` in `Cargo.toml`, or Cargo won't know what to do\n-with the configuration file.\n-\n-This file is in the *[TOML]* (Tom's Obvious, Minimal Language) format. TOML is\n-similar to INI, but has some extra goodies, and is used as Cargo\u2019s\n-configuration format.\n-\n-[TOML]: https://github.com/toml-lang/toml\n-\n-Inside this file, type the following information:\n-\n-```toml\n-[package]\n-\n-name = \"hello_world\"\n-version = \"0.0.1\"\n-authors = [ \"Your name <you@example.com>\" ]\n-```\n-\n-The first line, `[package]`, indicates that the following statements are\n-configuring a package. As we add more information to this file, we\u2019ll add other\n-sections, but for now, we only have the package configuration.\n-\n-The other three lines set the three bits of configuration that Cargo needs to\n-know to compile your program: its name, what version it is, and who wrote it.\n-\n-Once you've added this information to the *Cargo.toml* file, save it to finish\n-creating the configuration file.\n-\n-## Building and Running a Cargo Project\n-\n-With your *Cargo.toml* file in place in your project's root directory, you\n-should be ready to build and run your Hello World program! To do so, enter the\n-following commands:\n-\n-```bash\n-$ cargo build\n-   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n-$ ./target/debug/hello_world\n-Hello, world!\n-```\n-\n-Bam! If all goes well, `Hello, world!` should print to the terminal once more.\n-\n-You just built a project with `cargo build` and ran it with\n-`./target/debug/hello_world`, but you can actually do both in one step with\n-`cargo run` as follows:\n-\n-```bash\n-$ cargo run\n-     Running `target/debug/hello_world`\n-Hello, world!\n-```\n-\n-The `run` command comes in handy when you need to rapidly iterate on a\n-project.\n-\n-Notice that this example didn\u2019t re-build the project. Cargo figured out that\n-the file hasn\u2019t changed, and so it just ran the binary. If you'd modified your\n-source code, Cargo would have rebuilt the project before running it, and you\n-would have seen something like this:\n-\n-```bash\n-$ cargo run\n-   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n-     Running `target/debug/hello_world`\n-Hello, world!\n-```\n-\n-Cargo checks to see if any of your project\u2019s files have been modified, and only\n-rebuilds your project if they\u2019ve changed since the last time you built it.\n-\n-With simple projects, Cargo doesn't bring a whole lot over just using `rustc`,\n-but it will become useful in the future. This is especially true when you start\n-using crates; these are synonymous with a \u2018library\u2019 or \u2018package\u2019 in other\n-programming languages. For complex projects composed of multiple crates, it\u2019s\n-much easier to let Cargo coordinate the build. Using Cargo, you can run `cargo\n-build`, and it should work the right way.\n-\n-### Building for Release\n-\n-When your project is ready for release, you can use `cargo build\n---release` to compile your project with optimizations. These optimizations make\n-your Rust code run faster, but turning them on makes your program take longer\n-to compile. This is why there are two different profiles, one for development,\n-and one for building the final program you\u2019ll give to a user.\n-\n-### What Is That `Cargo.lock`?\n-\n-Running `cargo build` also causes Cargo to create a new file called\n-*Cargo.lock*, which looks like this:\n-\n-```toml\n-[root]\n-name = \"hello_world\"\n-version = \"0.0.1\"\n-```\n-\n-Cargo uses the *Cargo.lock* file to keep track of dependencies in your\n-application. This is the Hello World project's *Cargo.lock* file. This project\n-doesn't have dependencies, so the file is a bit sparse. Realistically, you\n-won't ever need to touch this file yourself; just let Cargo handle it.\n-\n-That\u2019s it! If you've been following along, you should have successfully built\n-`hello_world` with Cargo.\n-\n-Even though the project is simple, it now uses much of the real tooling you\u2019ll\n-use for the rest of your Rust career. In fact, you can expect to start\n-virtually all Rust projects with some variation on the following commands:\n-\n-```bash\n-$ git clone someurl.com/foo\n-$ cd foo\n-$ cargo build\n-```\n-\n-## Making A New Cargo Project the Easy Way\n-\n-You don\u2019t have to go through that previous process every time you want to start\n-a new project! Cargo can quickly make a bare-bones project directory that you\n-can start developing in right away.\n-\n-To start a new project with Cargo, enter `cargo new` at the command line:\n-\n-```bash\n-$ cargo new hello_world --bin\n-```\n-\n-This command passes `--bin` because the goal is to get straight to making an\n-executable application, as opposed to a library. Executables are often called\n-*binaries* (as in `/usr/bin`, if you\u2019re on a Unix system).\n-\n-Cargo has generated two files and one directory for us: a `Cargo.toml` and a\n-*src* directory with a *main.rs* file inside. These should look familiar,\n-they\u2019re exactly what we created by hand, above.\n-\n-This output is all you need to get started. First, open `Cargo.toml`. It should\n-look something like this:\n-\n-```toml\n-[package]\n-\n-name = \"hello_world\"\n-version = \"0.1.0\"\n-authors = [\"Your Name <you@example.com>\"]\n-\n-[dependencies]\n-```\n-\n-Do not worry about the `[dependencies]` line, we will come back to it later.\n-\n-Cargo has populated *Cargo.toml* with reasonable defaults based on the arguments\n-you gave it and your `git` global configuration. You may notice that Cargo has\n-also initialized the `hello_world` directory as a `git` repository.\n-\n-Here\u2019s what should be in `src/main.rs`:\n-\n-```rust\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-Cargo has generated a \"Hello World!\" for you, and you\u2019re ready to start coding!\n-\n-> Note: If you want to look at Cargo in more detail, check out the official [Cargo\n-guide], which covers all of its features.\n-\n-[Cargo guide]: http://doc.crates.io/guide.html\n-\n-# Closing Thoughts\n-\n-This chapter covered the basics that will serve you well through the rest of\n-this book, and the rest of your time with Rust. Now that you\u2019ve got the tools\n-down, we'll cover more about the Rust language itself.\n-\n-You have two options: Dive into a project with \u2018[Tutorial: Guessing Game][guessinggame]\u2019, or\n-start from the bottom and work your way up with \u2018[Syntax and\n-Semantics][syntax]\u2019. More experienced systems programmers will probably prefer\n-\u2018Tutorial: Guessing Game\u2019, while those from dynamic backgrounds may enjoy either. Different\n-people learn differently! Choose whatever\u2019s right for you.\n-\n-[guessinggame]: guessing-game.html\n-[syntax]: syntax-and-semantics.html"}, {"sha": "b17b89633f356406ef9e003f2ea453b64fcba0d7", "filename": "src/doc/book/src/glossary.md", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -1,85 +0,0 @@\n-# Glossary\n-\n-Not every Rustacean has a background in systems programming, nor in computer\n-science, so we've added explanations of terms that might be unfamiliar.\n-\n-### Abstract Syntax Tree\n-\n-When a compiler is compiling your program, it does a number of different things.\n-One of the things that it does is turn the text of your program into an\n-\u2018abstract syntax tree\u2019, or \u2018AST\u2019. This tree is a representation of the structure\n-of your program. For example, `2 + 3` can be turned into a tree:\n-\n-```text\n-  +\n- / \\\n-2   3\n-```\n-\n-And `2 + (3 * 4)` would look like this:\n-\n-```text\n-  +\n- / \\\n-2   *\n-   / \\\n-  3   4\n-```\n-\n-### Arity\n-\n-Arity refers to the number of arguments a function or operation takes.\n-\n-```rust\n-let x = (2, 3);\n-let y = (4, 6);\n-let z = (8, 2, 6);\n-```\n-\n-In the example above `x` and `y` have arity 2. `z` has arity 3.\n-\n-### Bounds\n-\n-Bounds are constraints on a type or [trait][traits]. For example, if a bound\n-is placed on the argument a function takes, types passed to that function\n-must abide by that constraint.\n-\n-[traits]: traits.html\n-\n-### Combinators\n-\n-Combinators are higher-order functions that apply only functions and\n-earlier defined combinators to provide a result from its arguments. \n-They can be used to manage control flow in a modular fashion.\n-\n-### DST (Dynamically Sized Type)\n-\n-A type without a statically known size or alignment. ([more info][link])\n-\n-[link]: ../nomicon/exotic-sizes.html#dynamically-sized-types-dsts\n-\n-### Expression\n-\n-In computer programming, an expression is a combination of values, constants,\n-variables, operators and functions that evaluate to a single value. For example,\n-`2 + (3 * 4)` is an expression that returns the value 14. It is worth noting\n-that expressions can have side-effects. For example, a function included in an\n-expression might perform actions other than simply returning a value.\n-\n-### Expression-Oriented Language\n-\n-In early programming languages, [expressions][expression] and\n-[statements][statement] were two separate syntactic categories: expressions had\n-a value and statements did things. However, later languages blurred this\n-distinction, allowing expressions to do things and statements to have a value.\n-In an expression-oriented language, (nearly) every statement is an expression\n-and therefore returns a value. Consequently, these expression statements can\n-themselves form part of larger expressions.\n-\n-[expression]: glossary.html#expression\n-[statement]: glossary.html#statement\n-\n-### Statement\n-\n-In computer programming, a statement is the smallest standalone element of a\n-programming language that commands a computer to perform an action."}, {"sha": "4d81438b11deadfe9cfb3c7a8c587df46fd09747", "filename": "src/doc/book/src/guessing-game.md", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "9eeac3d687ebfaa85398977c0c32421a9383e481", "filename": "src/doc/book/src/if-let.md", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fif-let.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "d74503757bc48c154222abbd8d9a07747d2811d9", "filename": "src/doc/book/src/if.md", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fif.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fif.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fif.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "8ee6c0828ad6b7253a507a56c224749566d7b307", "filename": "src/doc/book/src/iterators.md", "status": "removed", "additions": 0, "deletions": 344, "changes": 344, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "042d9af9717d052a705f8f183bb4e998add2b0d4", "filename": "src/doc/book/src/lifetimes.md", "status": "removed", "additions": 0, "deletions": 428, "changes": 428, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "b7658d57a9e16c36d854a7aaf159d6044399a8ba", "filename": "src/doc/book/src/loops.md", "status": "removed", "additions": 0, "deletions": 211, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Floops.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Floops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Floops.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "fa8e8975a5b01bf4c90507df3de6f7a0e597f6e4", "filename": "src/doc/book/src/macros.md", "status": "removed", "additions": 0, "deletions": 763, "changes": 763, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "b1e26a9c9d3cd2665b01c2c84ebf3fab63a3cef3", "filename": "src/doc/book/src/match.md", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmatch.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "0404a5c992ba304460602b8a72b040806e681d02", "filename": "src/doc/book/src/method-syntax.md", "status": "removed", "additions": 0, "deletions": 259, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmethod-syntax.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "fa7a259392a7e6af0ca22da903749bd54269a90e", "filename": "src/doc/book/src/mutability.md", "status": "removed", "additions": 0, "deletions": 181, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "a69cd6adb3b1ff242b23d480fe077ad067505121", "filename": "src/doc/book/src/operators-and-overloading.md", "status": "removed", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Foperators-and-overloading.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Foperators-and-overloading.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Foperators-and-overloading.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "21ebd6333f7101bd2d2d28db0d5fa013b3606369", "filename": "src/doc/book/src/ownership.md", "status": "removed", "additions": 0, "deletions": 295, "changes": 295, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "1983927085c148291e3a1095ddcb247c3c8b0a3a", "filename": "src/doc/book/src/patterns.md", "status": "removed", "additions": 0, "deletions": 411, "changes": 411, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fpatterns.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "8fd3d17c15e57f5a90a59ed14f6bfb016b9cbd5d", "filename": "src/doc/book/src/primitive-types.md", "status": "removed", "additions": 0, "deletions": 305, "changes": 305, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "e02b5a6cdd79b8c27ad66bf7c675bd71c47880e5", "filename": "src/doc/book/src/procedural-macros.md", "status": "removed", "additions": 0, "deletions": 286, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "1f75665f4b8c36ebde4386a7e5b434a6cee16888", "filename": "src/doc/book/src/raw-pointers.md", "status": "removed", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fraw-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fraw-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fraw-pointers.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "f01aa45385acf4ea6eef3fac12565396095dc3f4", "filename": "src/doc/book/src/references-and-borrowing.md", "status": "removed", "additions": 0, "deletions": 411, "changes": 411, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Freferences-and-borrowing.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "af89ca8348424a6b2636631f71fc302892d0b55e", "filename": "src/doc/book/src/release-channels.md", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Frelease-channels.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Frelease-channels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Frelease-channels.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "ffc9d2b6976843fc312741d969e0fb5a33dc89e7", "filename": "src/doc/book/src/strings.md", "status": "removed", "additions": 0, "deletions": 195, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fstrings.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "3efa4f0e0a8d85898551218a9e9212d305e0d58b", "filename": "src/doc/book/src/structs.md", "status": "removed", "additions": 0, "deletions": 279, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "aa4c1251024de218ac7787a6249ae81f0669e2d0", "filename": "src/doc/book/src/syntax-and-semantics.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-and-semantics.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-and-semantics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-and-semantics.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "a06520f4ac2f31769eb18f95615e9944da7baad3", "filename": "src/doc/book/src/syntax-index.md", "status": "removed", "additions": 0, "deletions": 253, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "291c4481d551321d6ec4b598ab259bc8d414f02b", "filename": "src/doc/book/src/testing.md", "status": "removed", "additions": 0, "deletions": 633, "changes": 633, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftesting.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "6866505df1310e8de0d3d6c2e441e988fd8aaf82", "filename": "src/doc/book/src/the-stack-and-the-heap.md", "status": "removed", "additions": 0, "deletions": 583, "changes": 583, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fthe-stack-and-the-heap.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "a77d5fe93b524716326bd566fd0b0ab4c987b9f8", "filename": "src/doc/book/src/trait-objects.md", "status": "removed", "additions": 0, "deletions": 335, "changes": 335, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ftrait-objects.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ftrait-objects.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftrait-objects.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "19a133f84b0b6ffee92eaf55645bfc1989e4263b", "filename": "src/doc/book/src/traits.md", "status": "removed", "additions": 0, "deletions": 551, "changes": 551, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "1bd0f78e36853143cf391b91957ef653c1ed20a9", "filename": "src/doc/book/src/type-aliases.md", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "016ecc70976574d33b5e4b06c476c1745c5a1e49", "filename": "src/doc/book/src/ufcs.md", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fufcs.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fufcs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fufcs.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "9bf59fe2abdc37d22820d6331ba661755b009ec3", "filename": "src/doc/book/src/unsafe.md", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "2d090925d51f6cc7d4aa38a44e4d9b114003099c", "filename": "src/doc/book/src/unsized-types.md", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Funsized-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Funsized-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Funsized-types.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "709d10f4e47913dd63ad669e1a6e7484e5984d8e", "filename": "src/doc/book/src/using-rust-without-the-standard-library.md", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "d6aa8b1acb72fd6c480d2e845661397e51d2b446", "filename": "src/doc/book/src/variable-bindings.md", "status": "removed", "additions": 0, "deletions": 256, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fvariable-bindings.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "aff078718dfb1311726529cb5199d7c2001d8288", "filename": "src/doc/book/src/vectors.md", "status": "removed", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "12daa24e857fcbfa62a4f292c1aab804936a57d9", "filename": "src/doc/grammar.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "6c511548789b73656a9303f5dbf153274d62f4de", "filename": "src/doc/guide-plugins.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Fguide-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Fguide-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-plugins.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "fd5b120e81faeceb8a0fd3e2898adeb5d24fead2", "filename": "src/doc/index.md", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "6fa139b1630a9bb95dcd60cfc90aff9c19e54580", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "f7a108dfa9e90b07821700c55d01f08a9adf005c", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "5008b228c5c85fe04df289f4180a83fd4f5ce7b9", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "323d49e46912001c9610ddf3357e1acb80a057e3", "filename": "src/doc/rustc-ux-guidelines.md", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Frustc-ux-guidelines.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Frustc-ux-guidelines.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-ux-guidelines.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "3b37c47e392807c65fb223b3f03a278b1ba031c1", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 218, "deletions": 93, "changes": 311, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "9b2c7f298979d016ec2927f099185b4d54fadbc5", "filename": "src/doc/unstable-book/src/abi-msp430-interrupt.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "9c1b8868aceb4bd5d208cf14691f4d781abd4874", "filename": "src/doc/unstable-book/src/abi-ptx.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "67eee214a4f247e4f012fe59dd0e5574d0b60519", "filename": "src/doc/unstable-book/src/attr-literals.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fattr-literals.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fattr-literals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fattr-literals.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "3ec3cba257a99f10b7a2b541a63783c180741dae", "filename": "src/doc/unstable-book/src/compiler-builtins.md", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "43eadb351016d4e58969642097778163e5a03d75", "filename": "src/doc/unstable-book/src/compiler-flags.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "39659602e015c4d4b6ced94ae80458d5ce5399ad", "filename": "src/doc/unstable-book/src/compiler-flags/linker-flavor.md", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Flinker-flavor.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Flinker-flavor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Flinker-flavor.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "8ca04d253259258af86b8e2546cc28f943d8734d", "filename": "src/doc/unstable-book/src/compiler-flags/remap-path-prefix.md", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-path-prefix.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-path-prefix.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fremap-path-prefix.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "7d8bda439bd347219eafa33e3c70c62302e05d8a", "filename": "src/doc/unstable-book/src/conservative-impl-trait.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "9b7942c408a2483fdb871c77653fe0c80bac699d", "filename": "src/doc/unstable-book/src/const-fn.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "bd92b0b1b478fdc3422f261f4aaa6162d6634d1b", "filename": "src/doc/unstable-book/src/const-indexing.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "e737dbaa4ec02cbeb7e24c347a72bdb9441cb48e", "filename": "src/doc/unstable-book/src/field-init-shorthand.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md?ref=c6307a2fa55c3d62c06b85b349257a8194093442"}, {"sha": "a27514df97d693edee9e983baa79aa08e93287c8", "filename": "src/doc/unstable-book/src/language-features.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "b10bc41cb1439d08b46195030212d962535a96f3", "filename": "src/doc/unstable-book/src/language-features/abi-msp430-interrupt.md", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-msp430-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-msp430-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-msp430-interrupt.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "0ded3ceeaef2ce9ea0457dc563aa53a0014b6737", "filename": "src/doc/unstable-book/src/language-features/abi-ptx.md", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-ptx.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-ptx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-ptx.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "27f61d56342cf786aaed6548c852d338b86f0e4f", "filename": "src/doc/unstable-book/src/language-features/abi-sysv64.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-sysv64.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-sysv64.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-sysv64.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/abi-sysv64.md"}, {"sha": "73bc6eacf42cee126c3c39f7cd38daf2476ec4b0", "filename": "src/doc/unstable-book/src/language-features/abi-thiscall.md", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-thiscall.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-thiscall.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-thiscall.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "2e3113abdbf2bcff759c868dede0d62d16a4392a", "filename": "src/doc/unstable-book/src/language-features/abi-unadjusted.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-unadjusted.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-unadjusted.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-unadjusted.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/abi-unadjusted.md"}, {"sha": "3e36b1569fd4a4c8ad846316cdfb37ca199e7fa8", "filename": "src/doc/unstable-book/src/language-features/abi-vectorcall.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-vectorcall.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-vectorcall.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-vectorcall.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/abi-vectorcall.md"}, {"sha": "c89d2ee2106c91d7e1b4f9148905d35c7251b485", "filename": "src/doc/unstable-book/src/language-features/abi-x86-interrupt.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-x86-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-x86-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-x86-interrupt.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/abi-x86-interrupt.md"}, {"sha": "e8256469b145078be9889c75600c86e64081012c", "filename": "src/doc/unstable-book/src/language-features/advanced-slice-patterns.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/advanced-slice-patterns.md"}, {"sha": "cfcf8e22d7088f3d676dbcc0de2efb09c3f447f8", "filename": "src/doc/unstable-book/src/language-features/allocator.md", "status": "renamed", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallocator.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/allocator.md"}, {"sha": "74709ad5aeb4dedad1e77836a93e88031d08e43f", "filename": "src/doc/unstable-book/src/language-features/allow-internal-unstable.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallow-internal-unstable.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallow-internal-unstable.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fallow-internal-unstable.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/allow-internal-unstable.md"}, {"sha": "8deb8f462562063f67cac3e1bb1ac85621444ba7", "filename": "src/doc/unstable-book/src/language-features/asm.md", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/asm.md"}, {"sha": "d661108e7d95ed7517cdaecb67e8deab12c1eccb", "filename": "src/doc/unstable-book/src/language-features/associated-consts.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-consts.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-consts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-consts.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/associated-consts.md"}, {"sha": "56cc8a5b3060aac34be6ea9bd100e74ef1dd7254", "filename": "src/doc/unstable-book/src/language-features/associated-type-defaults.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-type-defaults.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-type-defaults.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fassociated-type-defaults.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/associated-type-defaults.md"}, {"sha": "60741a74400d2e50007610ab1ed27b291d56ee0a", "filename": "src/doc/unstable-book/src/language-features/attr-literals.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "0896627acae1b3203a39d1463bcae4d6e470fa19", "filename": "src/doc/unstable-book/src/language-features/box-patterns.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/box-patterns.md"}, {"sha": "50e59231a4df22d19608d91d470f54fceb645a83", "filename": "src/doc/unstable-book/src/language-features/box-syntax.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/box-syntax.md"}, {"sha": "fbd213dca569949fc8b9e38c20f3a2de10f2778e", "filename": "src/doc/unstable-book/src/language-features/catch-expr.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "ddd88bdc2cb17e257db75a708b4a7f0c87534f10", "filename": "src/doc/unstable-book/src/language-features/cfg-target-feature.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-feature.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-feature.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-feature.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/cfg-target-feature.md"}, {"sha": "7496e42e1cd84a6e3d3955146a9c9ec286d75c30", "filename": "src/doc/unstable-book/src/language-features/cfg-target-has-atomic.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-has-atomic.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-has-atomic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-has-atomic.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/cfg-target-has-atomic.md"}, {"sha": "a5adb38db3df0040ce42fbbc9853b37d284b0ef8", "filename": "src/doc/unstable-book/src/language-features/cfg-target-thread-local.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-thread-local.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-thread-local.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-thread-local.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/cfg-target-thread-local.md"}, {"sha": "ddd88bdc2cb17e257db75a708b4a7f0c87534f10", "filename": "src/doc/unstable-book/src/language-features/cfg-target-vendor.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-vendor.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-vendor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-target-vendor.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/cfg-target-vendor.md"}, {"sha": "4e3b735e24fb6de326475324f7ad416b619328f9", "filename": "src/doc/unstable-book/src/language-features/closure-to-fn-coercion.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fclosure-to-fn-coercion.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fclosure-to-fn-coercion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fclosure-to-fn-coercion.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "52fac575b6e8631cea0c182325979b84d63b18af", "filename": "src/doc/unstable-book/src/language-features/compiler-builtins.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompiler-builtins.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompiler-builtins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompiler-builtins.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "ecfd34a22e5ccbd39794a260879eb88317088e09", "filename": "src/doc/unstable-book/src/language-features/concat-idents.md", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconcat-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconcat-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconcat-idents.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "0be6a321103f0858b9e0d70981b6a6414e72a47c", "filename": "src/doc/unstable-book/src/language-features/conservative-impl-trait.md", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconservative-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconservative-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconservative-impl-trait.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "d5a22436838623d7729d6dbf976ae28bcf2527ed", "filename": "src/doc/unstable-book/src/language-features/const-fn.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "42d46ce15f676e552025619097bd9c90c17730e3", "filename": "src/doc/unstable-book/src/language-features/const-indexing.md", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-indexing.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-indexing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-indexing.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "838f09670d2cd2cd6d079133134597dbbf1b6d1b", "filename": "src/doc/unstable-book/src/language-features/custom-attribute.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-attribute.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/custom-attribute.md"}, {"sha": "d5fdd2b708bb8c5c869d610ee017e096f8cec28a", "filename": "src/doc/unstable-book/src/language-features/custom-derive.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-derive.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-derive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-derive.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/custom-derive.md"}, {"sha": "4700b252e2d1af63e4fee26986d127995cfc797b", "filename": "src/doc/unstable-book/src/language-features/decl-macro.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdecl-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdecl-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdecl-macro.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "fd16dbf898537141e0c2a5412b9c36ae8d8be119", "filename": "src/doc/unstable-book/src/language-features/default-type-parameter-fallback.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdefault-type-parameter-fallback.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdefault-type-parameter-fallback.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdefault-type-parameter-fallback.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/default-type-parameter-fallback.md"}, {"sha": "b3367d0df4459f877259ad9676003c9d275a3ad3", "filename": "src/doc/unstable-book/src/language-features/drop-types-in-const.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdrop-types-in-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdrop-types-in-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdrop-types-in-const.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/drop-types-in-const.md"}, {"sha": "2f189e9b6454ad6707197b0f0925d38c4d8d3c13", "filename": "src/doc/unstable-book/src/language-features/dropck-eyepatch.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-eyepatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-eyepatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-eyepatch.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/dropck-eyepatch.md"}, {"sha": "c5ae721954b82c11ae19ecec4786fd90ef2b21b6", "filename": "src/doc/unstable-book/src/language-features/dropck-parametricity.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-parametricity.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-parametricity.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdropck-parametricity.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/dropck-parametricity.md"}, {"sha": "b669ce83132d460ea5e9c8f569721e30dfd6698e", "filename": "src/doc/unstable-book/src/language-features/exclusive-range-pattern.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexclusive-range-pattern.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexclusive-range-pattern.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexclusive-range-pattern.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/exclusive-range-pattern.md"}, {"sha": "a068dadf95d12fef85e97707b2bba1e79415b82b", "filename": "src/doc/unstable-book/src/language-features/fundamental.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ffundamental.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ffundamental.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ffundamental.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/fundamental.md"}, {"sha": "ba49c850e4d600cf14d780a301e7b73e68fab0e6", "filename": "src/doc/unstable-book/src/language-features/generic-param-attrs.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgeneric-param-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgeneric-param-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgeneric-param-attrs.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/generic-param-attrs.md"}, {"sha": "f1ef74a63b513acedd4ff96396812640b451ac9b", "filename": "src/doc/unstable-book/src/language-features/global_asm.md", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "a850b7644c3a76fee296606cf1ea858640251c41", "filename": "src/doc/unstable-book/src/language-features/i128-type.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fi128-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fi128-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fi128-type.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "255445c318dca7c830e4e325df5155715259ba44", "filename": "src/doc/unstable-book/src/language-features/inclusive-range-syntax.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "bc35c2a0305332c3a84037ad967f15dc160286ec", "filename": "src/doc/unstable-book/src/language-features/intrinsics.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/intrinsics.md"}, {"sha": "375b8bd6b8224170b25a61d8e72433ae7430cb62", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/lang-items.md"}, {"sha": "2507197661a9de4d76efc9391dce8c692bedd2e9", "filename": "src/doc/unstable-book/src/language-features/link-args.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/link-args.md"}, {"sha": "7393d0628e4f5b716a2135c801921e33ae0ef195", "filename": "src/doc/unstable-book/src/language-features/link-cfg.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-cfg.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/link-cfg.md"}, {"sha": "ba639cb57fc6d2e9ccab9b14bcd05192650ca079", "filename": "src/doc/unstable-book/src/language-features/link-llvm-intrinsics.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-llvm-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-llvm-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-llvm-intrinsics.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/link-llvm-intrinsics.md"}, {"sha": "5773d28a00ecc2cc7e9e52438331d74972c9f32d", "filename": "src/doc/unstable-book/src/language-features/linkage.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flinkage.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flinkage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flinkage.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/linkage.md"}, {"sha": "b13f5ccfd9179a343bc9813f6768b4aee86a8fb1", "filename": "src/doc/unstable-book/src/language-features/log-syntax.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flog-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flog-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flog-syntax.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/log-syntax.md"}, {"sha": "32ffa3b4c31e52a9dce64323578f35da6821ee5d", "filename": "src/doc/unstable-book/src/language-features/macro-reexport.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-reexport.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-reexport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-reexport.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/macro-reexport.md"}, {"sha": "7918a356843298d34cc458ed40d1b9e5fc075478", "filename": "src/doc/unstable-book/src/language-features/macro-vis-matcher.md", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-vis-matcher.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-vis-matcher.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-vis-matcher.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "579aabfff88b90c98639d86ce36d33c46a1da6d9", "filename": "src/doc/unstable-book/src/language-features/main.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmain.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmain.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmain.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/main.md"}, {"sha": "e56ce4770aab00a78565e78e5d055243143e5465", "filename": "src/doc/unstable-book/src/language-features/naked-functions.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnaked-functions.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnaked-functions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnaked-functions.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/naked-functions.md"}, {"sha": "22aa10b2183cb2f580a5e9c962cf007aaf0b079f", "filename": "src/doc/unstable-book/src/language-features/needs-allocator.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-allocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-allocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-allocator.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/needs-allocator.md"}, {"sha": "627c946c1bb271fd9fd91b457ae7d85465fcb6d4", "filename": "src/doc/unstable-book/src/language-features/needs-panic-runtime.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-panic-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-panic-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fneeds-panic-runtime.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/needs-panic-runtime.md"}, {"sha": "3b3729a4b21d79ee0ce5b218cca43fe3919be5e2", "filename": "src/doc/unstable-book/src/language-features/never-type.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnever-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnever-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnever-type.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/never-type.md"}, {"sha": "6238753447c9cdd01ab7868451bf2956e0d8411c", "filename": "src/doc/unstable-book/src/language-features/no-core.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-core.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-core.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-core.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/no-core.md"}, {"sha": "7536ed9d4e106e3469db46bc0ec5639cf28c4838", "filename": "src/doc/unstable-book/src/language-features/no-debug.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-debug.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-debug.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-debug.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/no-debug.md"}, {"sha": "d5600c58fd9a657fff7c7e8c4c992335a2b4f666", "filename": "src/doc/unstable-book/src/language-features/non-ascii-idents.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "d8ac520fcb5e2cd1e008566fdbacbfd7482cbb00", "filename": "src/doc/unstable-book/src/language-features/omit-gdb-pretty-printer-section.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fomit-gdb-pretty-printer-section.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fomit-gdb-pretty-printer-section.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fomit-gdb-pretty-printer-section.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/omit-gdb-pretty-printer-section.md"}, {"sha": "9eea3fccbbc17e39ad591fb72f94893f0027d5f5", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "0b2d60accd59a95a3049cf7d5dd7ddc5c0342b2b", "filename": "src/doc/unstable-book/src/language-features/optin-builtin-traits.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/optin-builtin-traits.md"}, {"sha": "a4920839c6ca9d8199f3ef4cb3232ac94bd3b1c4", "filename": "src/doc/unstable-book/src/language-features/overlapping-marker-traits.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foverlapping-marker-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foverlapping-marker-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foverlapping-marker-traits.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "65b067e8296131e8ade4df36e8ba7b2b9a9369d2", "filename": "src/doc/unstable-book/src/language-features/panic-runtime.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fpanic-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fpanic-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fpanic-runtime.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/panic-runtime.md"}, {"sha": "da12559a01b86b0935695b1b84c798621d6ec48e", "filename": "src/doc/unstable-book/src/language-features/placement-in-syntax.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplacement-in-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplacement-in-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplacement-in-syntax.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/placement-in-syntax.md"}, {"sha": "377ac8f7342ef0e36698392230981d27198e31d8", "filename": "src/doc/unstable-book/src/language-features/platform-intrinsics.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplatform-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplatform-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplatform-intrinsics.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/platform-intrinsics.md"}, {"sha": "b16e2ac2d221c97941e4f4ba0c01b31781335bed", "filename": "src/doc/unstable-book/src/language-features/plugin-registrar.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/plugin-registrar.md"}, {"sha": "4b8603e3c445045147c42de687955d1582c44e7d", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/plugin.md"}, {"sha": "75dae5cfb7401b0c8766dfb1cd0adea459b0bf00", "filename": "src/doc/unstable-book/src/language-features/prelude-import.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprelude-import.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprelude-import.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprelude-import.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/prelude-import.md"}, {"sha": "1bd8c41629eea01712d001f940d2e797ee47138f", "filename": "src/doc/unstable-book/src/language-features/proc-macro.md", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fproc-macro.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "b4e078d920c4eec9f12852cb9a36cbf4c22cb003", "filename": "src/doc/unstable-book/src/language-features/quote.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fquote.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fquote.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fquote.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/quote.md"}, {"sha": "deea04f4c51cc7525328b0844034bebe1e603430", "filename": "src/doc/unstable-book/src/language-features/repr-align.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "c6f051e4fffc1220b137bf8947c49b25d46bf6f5", "filename": "src/doc/unstable-book/src/language-features/repr-simd.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-simd.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-simd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-simd.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/repr-simd.md"}, {"sha": "d1f18cead068372c9c7991ca8f6afe570cd9587f", "filename": "src/doc/unstable-book/src/language-features/rustc-attrs.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-attrs.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/rustc-attrs.md"}, {"sha": "0df6ca12089eebf94b7ed3243c74ae2b0ec2497d", "filename": "src/doc/unstable-book/src/language-features/rustc-diagnostic-macros.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-diagnostic-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-diagnostic-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-diagnostic-macros.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/rustc-diagnostic-macros.md"}, {"sha": "2583d350ebe11d4f6df184e238a471c27334a8b4", "filename": "src/doc/unstable-book/src/language-features/rvalue-static-promotion.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frvalue-static-promotion.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frvalue-static-promotion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frvalue-static-promotion.md?ref=74751358e625878306aa193fed788e79aa53d4fa"}, {"sha": "f19504de58e120ff98c04ca921bc071a7735d9ba", "filename": "src/doc/unstable-book/src/language-features/sanitizer-runtime.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsanitizer-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsanitizer-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsanitizer-runtime.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/sanitizer-runtime.md"}, {"sha": "d85779c3d3dc9c9171d7e7df869a0a21733c18f5", "filename": "src/doc/unstable-book/src/language-features/simd-ffi.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd-ffi.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/simd-ffi.md"}, {"sha": "13c9722c5243a0250c51d82eac5b80f27740fbe2", "filename": "src/doc/unstable-book/src/language-features/simd.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fsimd.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/simd.md"}, {"sha": "69857297582da4068b9c3c464d818657c7ce6877", "filename": "src/doc/unstable-book/src/language-features/slice-patterns.md", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/slice-patterns.md"}, {"sha": "efc380df6e1194e1de0fa7183b81b39b604a6968", "filename": "src/doc/unstable-book/src/language-features/specialization.md", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fspecialization.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fspecialization.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fspecialization.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/specialization.md"}, {"sha": "1409e570e887ba1cfe6ae87834e6d6d481000d93", "filename": "src/doc/unstable-book/src/language-features/staged-api.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstaged-api.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstaged-api.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstaged-api.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/staged-api.md"}, {"sha": "1ea6d59c78d5b46362ce83fdb334b3fc08c56874", "filename": "src/doc/unstable-book/src/language-features/start.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstart.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstart.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstart.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/start.md"}, {"sha": "97b9d71d433a4b5a2e8089ccc3956968def71681", "filename": "src/doc/unstable-book/src/language-features/static-nobundle.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstatic-nobundle.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstatic-nobundle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstatic-nobundle.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/static-nobundle.md"}, {"sha": "71092fcf29040e5635b95db92fcedbde94c9b011", "filename": "src/doc/unstable-book/src/language-features/stmt-expr-attributes.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstmt-expr-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstmt-expr-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstmt-expr-attributes.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/stmt-expr-attributes.md"}, {"sha": "1a94562968d192a11db9be21bda24c6f2e7f081e", "filename": "src/doc/unstable-book/src/language-features/struct-field-attributes.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstruct-field-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstruct-field-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstruct-field-attributes.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/struct-field-attributes.md"}, {"sha": "b3ca26e6474deffcc886999d9ccfdd4841b7ccca", "filename": "src/doc/unstable-book/src/language-features/structural-match.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstructural-match.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstructural-match.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstructural-match.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/structural-match.md"}, {"sha": "85ab1ab39efe643901cdd7e1a7fe4457dca80f99", "filename": "src/doc/unstable-book/src/language-features/target-feature.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftarget-feature.md", "raw_url": "https://github.com/rust-lang/rust/raw/74751358e625878306aa193fed788e79aa53d4fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftarget-feature.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftarget-feature.md?ref=74751358e625878306aa193fed788e79aa53d4fa", "previous_filename": "src/doc/unstable-book/src/target-feature.md"}]}