{"sha": "5c20ef433b48fce78c07208710bcc8b53965eeb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMjBlZjQzM2I0OGZjZTc4YzA3MjA4NzEwYmNjOGI1Mzk2NWVlYjE=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-06-17T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-06-18T05:36:22Z"}, "message": "bootstrap: Configurable musl libdir\n\nMake it possible to customize the location of musl libdir using\nmusl-libdir in config.toml, e.g., to use lib64 instead of lib.", "tree": {"sha": "8c44844eef17278345e7874e3d67d10229193aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c44844eef17278345e7874e3d67d10229193aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c20ef433b48fce78c07208710bcc8b53965eeb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c20ef433b48fce78c07208710bcc8b53965eeb1", "html_url": "https://github.com/rust-lang/rust/commit/5c20ef433b48fce78c07208710bcc8b53965eeb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c20ef433b48fce78c07208710bcc8b53965eeb1/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2935d294ff862fdf96578d0cbbdc289e8e7ba81c", "html_url": "https://github.com/rust-lang/rust/commit/2935d294ff862fdf96578d0cbbdc289e8e7ba81c"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "6214f2a68c596a3b18795854c4e1e14889775b2d", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c20ef433b48fce78c07208710bcc8b53965eeb1/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/5c20ef433b48fce78c07208710bcc8b53965eeb1/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=5c20ef433b48fce78c07208710bcc8b53965eeb1", "patch": "@@ -359,7 +359,7 @@\n # nightly features\n #channel = \"dev\"\n \n-# The root location of the MUSL installation directory.\n+# The root location of the musl installation directory.\n #musl-root = \"...\"\n \n # By default the `rustc` executable is built with `-Wl,-rpath` flags on Unix\n@@ -502,12 +502,15 @@\n # only use static libraries. If unset, the target's default linkage is used.\n #crt-static = false\n \n-# The root location of the MUSL installation directory. The library directory\n+# The root location of the musl installation directory. The library directory\n # will also need to contain libunwind.a for an unwinding implementation. Note\n-# that this option only makes sense for MUSL targets that produce statically\n+# that this option only makes sense for musl targets that produce statically\n # linked binaries\n #musl-root = \"...\"\n \n+# The full path to the musl libdir.\n+#musl-libdir = musl-root/lib\n+\n # The root location of the `wasm32-wasi` sysroot.\n #wasi-root = \"...\"\n "}, {"sha": "62bca0015c063056688bae2d38f503932ed78ff2", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c20ef433b48fce78c07208710bcc8b53965eeb1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c20ef433b48fce78c07208710bcc8b53965eeb1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5c20ef433b48fce78c07208710bcc8b53965eeb1", "patch": "@@ -133,7 +133,7 @@ fn copy_third_party_objects(\n     // To do that we have to distribute musl startup objects as a part of Rust toolchain\n     // and link with them manually in the self-contained mode.\n     if target.contains(\"musl\") {\n-        let srcdir = builder.musl_root(target).unwrap().join(\"lib\");\n+        let srcdir = builder.musl_libdir(target).unwrap();\n         for &obj in &[\"crt1.o\", \"Scrt1.o\", \"rcrt1.o\", \"crti.o\", \"crtn.o\"] {\n             copy_and_stamp(&srcdir, obj);\n         }\n@@ -219,8 +219,8 @@ pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, stage: u32, ca\n         // Help the libc crate compile by assisting it in finding various\n         // sysroot native libraries.\n         if target.contains(\"musl\") {\n-            if let Some(p) = builder.musl_root(target) {\n-                let root = format!(\"native={}/lib\", p.to_str().unwrap());\n+            if let Some(p) = builder.musl_libdir(target) {\n+                let root = format!(\"native={}\", p.to_str().unwrap());\n                 cargo.rustflag(\"-L\").rustflag(&root);\n             }\n         }"}, {"sha": "ff545a6ddcf47902ef580d2622107eceba396f3b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c20ef433b48fce78c07208710bcc8b53965eeb1/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c20ef433b48fce78c07208710bcc8b53965eeb1/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5c20ef433b48fce78c07208710bcc8b53965eeb1", "patch": "@@ -173,6 +173,7 @@ pub struct Target {\n     pub ndk: Option<PathBuf>,\n     pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n+    pub musl_libdir: Option<PathBuf>,\n     pub wasi_root: Option<PathBuf>,\n     pub qemu_rootfs: Option<PathBuf>,\n     pub no_std: bool,\n@@ -363,6 +364,7 @@ struct TomlTarget {\n     android_ndk: Option<String>,\n     crt_static: Option<bool>,\n     musl_root: Option<String>,\n+    musl_libdir: Option<String>,\n     wasi_root: Option<String>,\n     qemu_rootfs: Option<String>,\n     no_std: Option<bool>,\n@@ -631,6 +633,7 @@ impl Config {\n                 target.linker = cfg.linker.clone().map(PathBuf::from);\n                 target.crt_static = cfg.crt_static;\n                 target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n+                target.musl_libdir = cfg.musl_libdir.clone().map(PathBuf::from);\n                 target.wasi_root = cfg.wasi_root.clone().map(PathBuf::from);\n                 target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);\n "}, {"sha": "32f6e9605e765865008b5c9753c61e0cbb0a4f5c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c20ef433b48fce78c07208710bcc8b53965eeb1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c20ef433b48fce78c07208710bcc8b53965eeb1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=5c20ef433b48fce78c07208710bcc8b53965eeb1", "patch": "@@ -877,6 +877,15 @@ impl Build {\n             .map(|p| &**p)\n     }\n \n+    /// Returns the \"musl libdir\" for this `target`.\n+    fn musl_libdir(&self, target: Interned<String>) -> Option<PathBuf> {\n+        let t = self.config.target_config.get(&target)?;\n+        if let libdir @ Some(_) = &t.musl_libdir {\n+            return libdir.clone();\n+        }\n+        self.musl_root(target).map(|root| root.join(\"lib\"))\n+    }\n+\n     /// Returns the sysroot for the wasi target, if defined\n     fn wasi_root(&self, target: Interned<String>) -> Option<&Path> {\n         self.config.target_config.get(&target).and_then(|t| t.wasi_root.as_ref()).map(|p| &**p)"}, {"sha": "3301d41cfeefa9f5c3571eaeae8914c7c7c500ab", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c20ef433b48fce78c07208710bcc8b53965eeb1/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c20ef433b48fce78c07208710bcc8b53965eeb1/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=5c20ef433b48fce78c07208710bcc8b53965eeb1", "patch": "@@ -199,10 +199,10 @@ pub fn check(build: &mut Build) {\n                 let target = build.config.target_config.entry(target.clone()).or_default();\n                 target.musl_root = Some(\"/usr\".into());\n             }\n-            match build.musl_root(*target) {\n-                Some(root) => {\n-                    if fs::metadata(root.join(\"lib/libc.a\")).is_err() {\n-                        panic!(\"couldn't find libc.a in musl dir: {}\", root.join(\"lib\").display());\n+            match build.musl_libdir(*target) {\n+                Some(libdir) => {\n+                    if fs::metadata(libdir.join(\"libc.a\")).is_err() {\n+                        panic!(\"couldn't find libc.a in musl libdir: {}\", libdir.display());\n                     }\n                 }\n                 None => panic!("}]}