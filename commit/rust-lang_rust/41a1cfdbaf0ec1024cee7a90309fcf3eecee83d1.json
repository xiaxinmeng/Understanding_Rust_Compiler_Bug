{"sha": "41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "node_id": "C_kwDOAAsO6NoAKDQxYTFjZmRiYWYwZWMxMDI0Y2VlN2E5MDMwOWZjZjNlZWNlZTgzZDE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-21T11:59:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-21T11:59:59Z"}, "message": "Rollup merge of #103111 - cjgillot:shadow-label, r=estebank\n\nAccount for hygiene in typo suggestions, and use them to point to shadowed names\n\nFixes https://github.com/rust-lang/rust/issues/97459\n\nr? `@estebank`", "tree": {"sha": "2f203de9aacf4a3f03e2816062d9f7e82c9be6d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f203de9aacf4a3f03e2816062d9f7e82c9be6d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUom/CRBK7hj4Ov3rIwAA/I0IAAS134iTRE3sdMfiBwsDBEhZ\nRPulky4LgkrSy7Y9nxLHnQEsdW0Vhlo7FBvbirtKbnJc54mGNUpCic2rm5MDYPKC\n0OME4K1fFavfFmMDskl+uGBckR2/f8r/edhiTgL4+8TbmuWbILhSEI3xpmZFxkj4\nl4r/zNcXKznmn79zTbKJj74SW7PpJ9e9VGnmMOStNqo7A0PT2t8eA4AiBFS2LyOm\n2nczxFxy9YPYRkbgsz5h+rfjwJMdzMlC5LrsaKNVNyhRw0AU65pnOkqbyutd+qFn\nDgiYZzdflWgBr9j7Bik1NobVwQFmQvFaLw4V4u9JL7NNHfbWvWbFMVKRMMotj4Y=\n=dfBI\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f203de9aacf4a3f03e2816062d9f7e82c9be6d9\nparent e11511dfa648186b809cf2cd458af2110f5a6809\nparent 4bbb163b5d248bef036670d952f1c00dd812a7e2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666353599 +0530\ncommitter GitHub <noreply@github.com> 1666353599 +0530\n\nRollup merge of #103111 - cjgillot:shadow-label, r=estebank\n\nAccount for hygiene in typo suggestions, and use them to point to shadowed names\n\nFixes https://github.com/rust-lang/rust/issues/97459\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "html_url": "https://github.com/rust-lang/rust/commit/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e11511dfa648186b809cf2cd458af2110f5a6809", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11511dfa648186b809cf2cd458af2110f5a6809", "html_url": "https://github.com/rust-lang/rust/commit/e11511dfa648186b809cf2cd458af2110f5a6809"}, {"sha": "4bbb163b5d248bef036670d952f1c00dd812a7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbb163b5d248bef036670d952f1c00dd812a7e2", "html_url": "https://github.com/rust-lang/rust/commit/4bbb163b5d248bef036670d952f1c00dd812a7e2"}], "stats": {"total": 134, "additions": 102, "deletions": 32}, "files": [{"sha": "5d868ebec94482d0fdfef0d50dc700c41b56f2b4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "patch": "@@ -24,7 +24,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, Span, SyntaxContext};\n \n use crate::imports::{Import, ImportKind, ImportResolver};\n use crate::late::{PatternSource, Rib};\n@@ -47,13 +47,15 @@ pub(crate) type Suggestion = (Vec<(Span, String)>, String, Applicability);\n /// similarly named label and whether or not it is reachable.\n pub(crate) type LabelSuggestion = (Ident, bool);\n \n+#[derive(Debug)]\n pub(crate) enum SuggestionTarget {\n     /// The target has a similar name as the name used by the programmer (probably a typo)\n     SimilarlyNamed,\n     /// The target is the only valid item that can be used in the corresponding context\n     SingleItem,\n }\n \n+#[derive(Debug)]\n pub(crate) struct TypoSuggestion {\n     pub candidate: Symbol,\n     pub res: Res,\n@@ -482,11 +484,12 @@ impl<'a> Resolver<'a> {\n         module: Module<'a>,\n         names: &mut Vec<TypoSuggestion>,\n         filter_fn: &impl Fn(Res) -> bool,\n+        ctxt: Option<SyntaxContext>,\n     ) {\n         for (key, resolution) in self.resolutions(module).borrow().iter() {\n             if let Some(binding) = resolution.borrow().binding {\n                 let res = binding.res();\n-                if filter_fn(res) {\n+                if filter_fn(res) && ctxt.map_or(true, |ctxt| ctxt == key.ident.span.ctxt()) {\n                     names.push(TypoSuggestion::typo_from_res(key.ident.name, res));\n                 }\n             }\n@@ -1181,10 +1184,10 @@ impl<'a> Resolver<'a> {\n                 Scope::CrateRoot => {\n                     let root_ident = Ident::new(kw::PathRoot, ident.span);\n                     let root_module = this.resolve_crate_root(root_ident);\n-                    this.add_module_candidates(root_module, &mut suggestions, filter_fn);\n+                    this.add_module_candidates(root_module, &mut suggestions, filter_fn, None);\n                 }\n                 Scope::Module(module, _) => {\n-                    this.add_module_candidates(module, &mut suggestions, filter_fn);\n+                    this.add_module_candidates(module, &mut suggestions, filter_fn, None);\n                 }\n                 Scope::MacroUsePrelude => {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(\n@@ -1221,7 +1224,7 @@ impl<'a> Resolver<'a> {\n                 Scope::StdLibPrelude => {\n                     if let Some(prelude) = this.prelude {\n                         let mut tmp_suggestions = Vec::new();\n-                        this.add_module_candidates(prelude, &mut tmp_suggestions, filter_fn);\n+                        this.add_module_candidates(prelude, &mut tmp_suggestions, filter_fn, None);\n                         suggestions.extend(\n                             tmp_suggestions\n                                 .into_iter()"}, {"sha": "e3dba2366a40e78cbe00f7f4bd8454c80fbb4cd5", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "patch": "@@ -131,6 +131,7 @@ pub(super) enum LifetimeElisionCandidate {\n }\n \n /// Only used for diagnostics.\n+#[derive(Debug)]\n struct BaseError {\n     msg: String,\n     fallback_label: String,\n@@ -140,6 +141,22 @@ struct BaseError {\n     suggestion: Option<(Span, &'static str, String)>,\n }\n \n+#[derive(Debug)]\n+enum TypoCandidate {\n+    Typo(TypoSuggestion),\n+    Shadowed(Res),\n+    None,\n+}\n+\n+impl TypoCandidate {\n+    fn to_opt_suggestion(self) -> Option<TypoSuggestion> {\n+        match self {\n+            TypoCandidate::Typo(sugg) => Some(sugg),\n+            TypoCandidate::Shadowed(_) | TypoCandidate::None => None,\n+        }\n+    }\n+}\n+\n impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn def_span(&self, def_id: DefId) -> Option<Span> {\n         match def_id.krate {\n@@ -496,7 +513,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n \n         // Try Levenshtein algorithm.\n-        let typo_sugg = self.lookup_typo_candidate(path, source.namespace(), is_expected);\n+        let typo_sugg =\n+            self.lookup_typo_candidate(path, source.namespace(), is_expected).to_opt_suggestion();\n         if path.len() == 1 && self.self_type_is_available() {\n             if let Some(candidate) = self.lookup_assoc_candidate(ident, ns, is_expected) {\n                 let self_is_available = self.self_value_is_available(path[0].ident.span);\n@@ -660,7 +678,18 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_expected = &|res| source.is_expected(res);\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n         let typo_sugg = self.lookup_typo_candidate(path, source.namespace(), is_expected);\n+        if let TypoCandidate::Shadowed(res) = typo_sugg\n+            && let Some(id) = res.opt_def_id()\n+            && let Some(sugg_span) = self.r.opt_span(id)\n+        {\n+            err.span_label(\n+                sugg_span,\n+                format!(\"you might have meant to refer to this {}\", res.descr()),\n+            );\n+            return true;\n+        }\n         let mut fallback = false;\n+        let typo_sugg = typo_sugg.to_opt_suggestion();\n         if !self.r.add_typo_suggestion(err, typo_sugg, ident_span) {\n             fallback = true;\n             match self.diagnostic_metadata.current_let_binding {\n@@ -1581,22 +1610,38 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         path: &[Segment],\n         ns: Namespace,\n         filter_fn: &impl Fn(Res) -> bool,\n-    ) -> Option<TypoSuggestion> {\n+    ) -> TypoCandidate {\n         let mut names = Vec::new();\n         if path.len() == 1 {\n+            let mut ctxt = path.last().unwrap().ident.span.ctxt();\n+\n             // Search in lexical scope.\n             // Walk backwards up the ribs in scope and collect candidates.\n             for rib in self.ribs[ns].iter().rev() {\n+                let rib_ctxt = if rib.kind.contains_params() {\n+                    ctxt.normalize_to_macros_2_0()\n+                } else {\n+                    ctxt.normalize_to_macro_rules()\n+                };\n+\n                 // Locals and type parameters\n                 for (ident, &res) in &rib.bindings {\n-                    if filter_fn(res) {\n+                    if filter_fn(res) && ident.span.ctxt() == rib_ctxt {\n                         names.push(TypoSuggestion::typo_from_res(ident.name, res));\n                     }\n                 }\n+\n+                if let RibKind::MacroDefinition(def) = rib.kind && def == self.r.macro_def(ctxt) {\n+                    // If an invocation of this macro created `ident`, give up on `ident`\n+                    // and switch to `ident`'s source from the macro definition.\n+                    ctxt.remove_mark();\n+                    continue;\n+                }\n+\n                 // Items in scope\n                 if let RibKind::ModuleRibKind(module) = rib.kind {\n                     // Items from this module\n-                    self.r.add_module_candidates(module, &mut names, &filter_fn);\n+                    self.r.add_module_candidates(module, &mut names, &filter_fn, Some(ctxt));\n \n                     if let ModuleKind::Block = module.kind {\n                         // We can see through blocks\n@@ -1622,7 +1667,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             }));\n \n                             if let Some(prelude) = self.r.prelude {\n-                                self.r.add_module_candidates(prelude, &mut names, &filter_fn);\n+                                self.r.add_module_candidates(prelude, &mut names, &filter_fn, None);\n                             }\n                         }\n                         break;\n@@ -1641,7 +1686,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             if let PathResult::Module(ModuleOrUniformRoot::Module(module)) =\n                 self.resolve_path(mod_path, Some(TypeNS), None)\n             {\n-                self.r.add_module_candidates(module, &mut names, &filter_fn);\n+                self.r.add_module_candidates(module, &mut names, &filter_fn, None);\n             }\n         }\n \n@@ -1654,10 +1699,17 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             name,\n             None,\n         ) {\n-            Some(found) if found != name => {\n-                names.into_iter().find(|suggestion| suggestion.candidate == found)\n+            Some(found) => {\n+                let Some(sugg) = names.into_iter().find(|suggestion| suggestion.candidate == found) else {\n+                    return TypoCandidate::None;\n+                };\n+                if found == name {\n+                    TypoCandidate::Shadowed(sugg.res)\n+                } else {\n+                    TypoCandidate::Typo(sugg)\n+                }\n             }\n-            _ => None,\n+            _ => TypoCandidate::None,\n         }\n     }\n "}, {"sha": "1f2a96a4c411a62bb1c016d41bf478da67cdf201", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "patch": "@@ -1,9 +1,16 @@\n error[E0425]: cannot find function `f` in this scope\n   --> $DIR/globs.rs:22:9\n    |\n+LL |     pub fn g() {}\n+   |     ---------- similarly named function `g` defined here\n+...\n LL |         f();\n-   |         ^ not found in this scope\n+   |         ^\n+   |\n+help: a function with a similar name exists\n    |\n+LL |         g();\n+   |         ~\n help: consider importing this function\n    |\n LL | use foo::f;\n@@ -12,8 +19,11 @@ LL | use foo::f;\n error[E0425]: cannot find function `g` in this scope\n   --> $DIR/globs.rs:15:5\n    |\n+LL |       pub fn f() {}\n+   |       ---------- similarly named function `f` defined here\n+...\n LL |       g();\n-   |       ^ not found in this scope\n+   |       ^\n ...\n LL | /     m! {\n LL | |         use bar::*;\n@@ -23,6 +33,10 @@ LL | |     }\n    | |_____- in this macro invocation\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: a function with a similar name exists\n+   |\n+LL |     f();\n+   |     ~\n help: consider importing this function\n    |\n LL | use bar::g;"}, {"sha": "1d2a1e1249864041dd6141a4c70b261bd309f1d6", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "patch": "@@ -19,14 +19,8 @@ LL |     semitransparent;\n error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n    |\n-LL |     struct Opaque;\n-   |     -------------- similarly named unit struct `Opaque` defined here\n-...\n LL |     opaque;\n-   |     ^^^^^^\n-   |     |\n-   |     not a value\n-   |     help: a unit struct with a similar name exists (notice the capitalization): `Opaque`\n+   |     ^^^^^^ not a value\n \n error: aborting due to 3 previous errors\n "}, {"sha": "535985452232d4fa74058c1b8fd4d92fd60f19a4", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "patch": "@@ -1,6 +1,8 @@\n error[E0574]: expected struct, variant or union type, found type parameter `T`\n   --> $DIR/lexical-scopes.rs:3:13\n    |\n+LL | struct T { i: i32 }\n+   | ------------------- you might have meant to refer to this struct\n LL | fn f<T>() {\n    |      - found this type parameter\n LL |     let t = T { i: 0 };"}, {"sha": "f597c398b7c17f87d5ba9dcc7cfe1a16abb9dc31", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "patch": "@@ -57,7 +57,7 @@ error[E0425]: cannot find value `i` in this scope\n   --> $DIR/macro-context.rs:3:13\n    |\n LL |     () => ( i ; typeof );\n-   |             ^ help: a local variable with a similar name exists: `a`\n+   |             ^ not found in this scope\n ...\n LL |     let i = m!();\n    |             ---- in this macro invocation"}, {"sha": "df7c4f72eb0b63b863a6e3c97dd44b1eb11d666f", "filename": "src/test/ui/proc-macro/gen-macro-rules-hygiene.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr?ref=41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "patch": "@@ -13,7 +13,7 @@ error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:12:1\n    |\n LL | gen_macro_rules!();\n-   | ^^^^^^^^^^^^^^^^^^ not found in this scope\n+   | ^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `local_def`\n ...\n LL |         generated!();\n    |         ------------ in this macro invocation\n@@ -24,7 +24,7 @@ error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:21:9\n    |\n LL |         local_def;\n-   |         ^^^^^^^^^ not found in this scope\n+   |         ^^^^^^^^^ help: a local variable with a similar name exists: `local_use`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "13786080124645079e0bf251350a2a27b0210932", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "patch": "@@ -10,15 +10,15 @@ error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/mixed-site-span.rs:13:9\n    |\n LL |         proc_macro_rules!();\n-   |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |         ^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `local_def`\n    |\n    = note: this error originates in the macro `proc_macro_rules` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/mixed-site-span.rs:17:9\n    |\n LL |         local_def;\n-   |         ^^^^^^^^^ not found in this scope\n+   |         ^^^^^^^^^ help: a local variable with a similar name exists: `local_use`\n \n error[E0412]: cannot find type `ItemUse` in crate `$crate`\n   --> $DIR/mixed-site-span.rs:24:1"}, {"sha": "eb26cd9cabb8241b72a1d4061fce5b24185fe12c", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr?ref=41a1cfdbaf0ec1024cee7a90309fcf3eecee83d1", "patch": "@@ -1,11 +1,16 @@\n error[E0574]: expected struct, variant or union type, found type parameter `Baz`\n   --> $DIR/point-at-type-parameter-shadowing-another-type.rs:16:13\n    |\n-LL | impl<Baz> Foo<Baz> for Bar {\n-   |      --- found this type parameter\n+LL | / struct Baz {\n+LL | |     num: usize,\n+LL | | }\n+   | |_- you might have meant to refer to this struct\n+LL |\n+LL |   impl<Baz> Foo<Baz> for Bar {\n+   |        --- found this type parameter\n ...\n-LL |             Baz { num } => num,\n-   |             ^^^ not a struct, variant or union type\n+LL |               Baz { num } => num,\n+   |               ^^^ not a struct, variant or union type\n \n error: aborting due to previous error\n "}]}