{"sha": "00e80b24e3a46b3c4a6411151132fccc539abd5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZTgwYjI0ZTNhNDZiM2M0YTY0MTExNTExMzJmY2NjNTM5YWJkNWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-08T15:43:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-08T15:43:02Z"}, "message": "workspace-symbols function for Emacs", "tree": {"sha": "76fb0982fa8da3a915c7c226892681b30a044a86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76fb0982fa8da3a915c7c226892681b30a044a86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00e80b24e3a46b3c4a6411151132fccc539abd5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00e80b24e3a46b3c4a6411151132fccc539abd5f", "html_url": "https://github.com/rust-lang/rust/commit/00e80b24e3a46b3c4a6411151132fccc539abd5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00e80b24e3a46b3c4a6411151132fccc539abd5f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c69ff08dc9074ed92c11e9fb6bf267288aa3fa25", "url": "https://api.github.com/repos/rust-lang/rust/commits/c69ff08dc9074ed92c11e9fb6bf267288aa3fa25", "html_url": "https://github.com/rust-lang/rust/commit/c69ff08dc9074ed92c11e9fb6bf267288aa3fa25"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "26bcddd8e67b8fb721ebe01c97c8901b3382a595", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00e80b24e3a46b3c4a6411151132fccc539abd5f/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e80b24e3a46b3c4a6411151132fccc539abd5f/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=00e80b24e3a46b3c4a6411151132fccc539abd5f", "patch": "@@ -2,10 +2,14 @@\n extern crate log;\n #[macro_use]\n extern crate failure;\n+#[macro_use]\n+extern crate serde_derive;\n+extern crate serde;\n extern crate flexi_logger;\n extern crate gen_lsp_server;\n extern crate ra_lsp_server;\n \n+use serde::Deserialize;\n use flexi_logger::{Duplicate, Logger};\n use gen_lsp_server::{run_server, stdio_transport};\n use ra_lsp_server::Result;\n@@ -29,6 +33,13 @@ fn main() -> Result<()> {\n         }\n     }\n }\n+\n+#[derive(Deserialize)]\n+#[serde(rename_all = \"camelCase\")]\n+struct InitializationOptions {\n+    publish_decorations: bool,\n+}\n+\n fn main_inner() -> Result<()> {\n     let (receiver, sender, threads) = stdio_transport();\n     let cwd = ::std::env::current_dir()?;\n@@ -41,7 +52,12 @@ fn main_inner() -> Result<()> {\n                 .root_uri\n                 .and_then(|it| it.to_file_path().ok())\n                 .unwrap_or(cwd);\n-            ra_lsp_server::main_loop(false, root, r, s)\n+            let publish_decorations = params\n+                .initialization_options\n+                .and_then(|v| InitializationOptions::deserialize(v).ok())\n+                .map(|it| it.publish_decorations)\n+                == Some(true);\n+            ra_lsp_server::main_loop(false, root, publish_decorations, r, s)\n         },\n     )?;\n     info!(\"shutting down IO...\");\n@@ -52,14 +68,14 @@ fn main_inner() -> Result<()> {\n \n /*\n                     (let ((backend (eglot-xref-backend)))\n-                      (mapcar \n+                      (mapcar\n                        (lambda (xref)\n                          (let ((loc (xref-item-location xref)))\n                            (propertize\n                             (concat\n                              (when (xref-file-location-p loc)\n                                (with-slots (file line column) loc\n-                                 (format \"%s:%s:%s:\" \n+                                 (format \"%s:%s:%s:\"\n                                          (propertize (file-relative-name file)\n                                                      'face 'compilation-info)\n                                          (propertize (format \"%s\" line)"}, {"sha": "78d93741a08d61e5683fecf85f64238596070487", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/00e80b24e3a46b3c4a6411151132fccc539abd5f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e80b24e3a46b3c4a6411151132fccc539abd5f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=00e80b24e3a46b3c4a6411151132fccc539abd5f", "patch": "@@ -48,6 +48,7 @@ enum Task {\n pub fn main_loop(\n     internal_mode: bool,\n     root: PathBuf,\n+    publish_decorations: bool,\n     msg_receiver: &Receiver<RawMessage>,\n     msg_sender: &Sender<RawMessage>,\n ) -> Result<()> {\n@@ -67,6 +68,7 @@ pub fn main_loop(\n     let mut subs = Subscriptions::new();\n     let main_res = main_loop_inner(\n         internal_mode,\n+        publish_decorations,\n         root,\n         &pool,\n         msg_sender,\n@@ -99,6 +101,7 @@ pub fn main_loop(\n \n fn main_loop_inner(\n     internal_mode: bool,\n+    publish_decorations: bool,\n     ws_root: PathBuf,\n     pool: &ThreadPool,\n     msg_sender: &Sender<RawMessage>,\n@@ -210,6 +213,7 @@ fn main_loop_inner(\n             update_file_notifications_on_threadpool(\n                 pool,\n                 state.snapshot(),\n+                publish_decorations,\n                 task_sender.clone(),\n                 subs.subscriptions(),\n             )\n@@ -416,6 +420,7 @@ impl<'a> PoolDispatcher<'a> {\n fn update_file_notifications_on_threadpool(\n     pool: &ThreadPool,\n     world: ServerWorld,\n+    publish_decorations: bool,\n     sender: Sender<Task>,\n     subscriptions: Vec<FileId>,\n ) {\n@@ -432,15 +437,17 @@ fn update_file_notifications_on_threadpool(\n                     sender.send(Task::Notify(not));\n                 }\n             }\n-            match handlers::publish_decorations(&world, file_id) {\n-                Err(e) => {\n-                    if !is_canceled(&e) {\n-                        error!(\"failed to compute decorations: {:?}\", e);\n+            if publish_decorations {\n+                match handlers::publish_decorations(&world, file_id) {\n+                    Err(e) => {\n+                        if !is_canceled(&e) {\n+                            error!(\"failed to compute decorations: {:?}\", e);\n+                        }\n+                    }\n+                    Ok(params) => {\n+                        let not = RawNotification::new::<req::PublishDecorations>(&params);\n+                        sender.send(Task::Notify(not))\n                     }\n-                }\n-                Ok(params) => {\n-                    let not = RawNotification::new::<req::PublishDecorations>(&params);\n-                    sender.send(Task::Notify(not))\n                 }\n             }\n         }"}, {"sha": "75e273f3739164cd34ab244db0f55b0de762aa14", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00e80b24e3a46b3c4a6411151132fccc539abd5f/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/00e80b24e3a46b3c4a6411151132fccc539abd5f/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=00e80b24e3a46b3c4a6411151132fccc539abd5f", "patch": "@@ -20,7 +20,10 @@ export class Server {\n             debug: run\n         };\n         const clientOptions: lc.LanguageClientOptions = {\n-            documentSelector: [{ scheme: 'file', language: 'rust' }]\n+            documentSelector: [{ scheme: 'file', language: 'rust' }],\n+            initializationOptions: {\n+                publishDecorations: true,\n+            }\n         };\n \n         Server.client = new lc.LanguageClient("}, {"sha": "fb73451c1b316c23be368a85986a5dc635df73ee", "filename": "editors/emacs/ra.el", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00e80b24e3a46b3c4a6411151132fccc539abd5f/editors%2Femacs%2Fra.el", "raw_url": "https://github.com/rust-lang/rust/raw/00e80b24e3a46b3c4a6411151132fccc539abd5f/editors%2Femacs%2Fra.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Femacs%2Fra.el?ref=00e80b24e3a46b3c4a6411151132fccc539abd5f", "patch": "@@ -119,5 +119,10 @@\n                         (xref--pop-to-location (get-text-property 0 'xref item))))))\n \n (add-to-list 'eglot-server-programs '(rust-mode . (\"ra_lsp_server\")))\n+\n+; (require 'rust-mode)\n+; (define-key rust-mode-map (kbd \"C-n\") 'workspace-symbols)\n+\n+(define-key)\n (provide 'ra)\n ;;; ra.el ends here"}]}