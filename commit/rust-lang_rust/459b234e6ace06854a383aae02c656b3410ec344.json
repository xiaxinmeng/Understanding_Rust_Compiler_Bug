{"sha": "459b234e6ace06854a383aae02c656b3410ec344", "node_id": "C_kwDOAAsO6NoAKDQ1OWIyMzRlNmFjZTA2ODU0YTM4M2FhZTAyYzY1NmIzNDEwZWMzNDQ", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-12-17T18:56:56Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-12-22T08:27:12Z"}, "message": "fix #105494, Suggest remove last method call when type coerce with expected", "tree": {"sha": "894c8b7272701d1c8af377acd99629dae775a2bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/894c8b7272701d1c8af377acd99629dae775a2bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459b234e6ace06854a383aae02c656b3410ec344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459b234e6ace06854a383aae02c656b3410ec344", "html_url": "https://github.com/rust-lang/rust/commit/459b234e6ace06854a383aae02c656b3410ec344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459b234e6ace06854a383aae02c656b3410ec344/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daccb3d974ca20d78e02c9691fb3bddc90194935", "url": "https://api.github.com/repos/rust-lang/rust/commits/daccb3d974ca20d78e02c9691fb3bddc90194935", "html_url": "https://github.com/rust-lang/rust/commit/daccb3d974ca20d78e02c9691fb3bddc90194935"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "042ff0b46a5afbc6bd31205d2600a732d9c002c0", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/459b234e6ace06854a383aae02c656b3410ec344/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459b234e6ace06854a383aae02c656b3410ec344/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=459b234e6ace06854a383aae02c656b3410ec344", "patch": "@@ -38,6 +38,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Use `||` to give these suggestions a precedence\n         let _ = self.suggest_missing_parentheses(err, expr)\n+            || self.suggest_remove_last_method_call(err, expr, expected)\n             || self.suggest_associated_const(err, expr, expected)\n             || self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr)\n             || self.suggest_option_to_bool(err, expr, expr_ty, expected)"}, {"sha": "720fbd1ad147b98143b8bb5ba20eb54042a7a4ae", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/459b234e6ace06854a383aae02c656b3410ec344/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459b234e6ace06854a383aae02c656b3410ec344/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=459b234e6ace06854a383aae02c656b3410ec344", "patch": "@@ -329,6 +329,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn suggest_remove_last_method_call(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'tcx>,\n+        expected: Ty<'tcx>,\n+    ) -> bool {\n+        if let hir::ExprKind::MethodCall(hir::PathSegment { ident: method, .. }, recv_expr, &[], _) = expr.kind &&\n+            let Some(recv_ty) = self.typeck_results.borrow().expr_ty_opt(recv_expr) &&\n+            self.can_coerce(recv_ty, expected) {\n+                err.span_suggestion_verbose(\n+                    expr.span.with_lo(method.span.lo() - rustc_span::BytePos(1)),\n+                    \"try removing the method call\",\n+                    \"\",\n+                    Applicability::MachineApplicable,\n+                );\n+                return true;\n+            }\n+        false\n+    }\n+\n     pub fn suggest_deref_ref_or_into(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "8b409232c202c0b63d14342bb5f7b73aea042c75", "filename": "src/test/ui/suggestions/issue-105494.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/459b234e6ace06854a383aae02c656b3410ec344/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459b234e6ace06854a383aae02c656b3410ec344/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.rs?ref=459b234e6ace06854a383aae02c656b3410ec344", "patch": "@@ -0,0 +1,22 @@\n+fn test1() {\n+    let _v: i32 = (1 as i32).to_string(); //~ ERROR mismatched types\n+\n+    // won't suggestion\n+    let _v: i32 = (1 as i128).to_string(); //~ ERROR mismatched types\n+\n+    let _v: &str = \"foo\".to_string(); //~ ERROR mismatched types\n+}\n+\n+fn test2() {\n+    let mut path: String = \"/usr\".to_string();\n+    let folder: String = \"lib\".to_string();\n+\n+    path = format!(\"{}/{}\", path, folder).as_str(); //~ ERROR mismatched types\n+\n+    println!(\"{}\", &path);\n+}\n+\n+fn main() {\n+    test1();\n+    test2();\n+}"}, {"sha": "5aa3f2af738f49d2f8b73ee67184e491af10f647", "filename": "src/test/ui/suggestions/issue-105494.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/459b234e6ace06854a383aae02c656b3410ec344/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/459b234e6ace06854a383aae02c656b3410ec344/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.stderr?ref=459b234e6ace06854a383aae02c656b3410ec344", "patch": "@@ -0,0 +1,54 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-105494.rs:2:19\n+   |\n+LL |     let _v: i32 = (1 as i32).to_string();\n+   |             ---   ^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `String`\n+   |             |\n+   |             expected due to this\n+   |\n+help: try removing the method call\n+   |\n+LL -     let _v: i32 = (1 as i32).to_string();\n+LL +     let _v: i32 = (1 as i32);\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-105494.rs:5:19\n+   |\n+LL |     let _v: i32 = (1 as i128).to_string();\n+   |             ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `String`\n+   |             |\n+   |             expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-105494.rs:7:20\n+   |\n+LL |     let _v: &str = \"foo\".to_string();\n+   |             ----   ^^^^^^^^^^^^^^^^^ expected `&str`, found struct `String`\n+   |             |\n+   |             expected due to this\n+   |\n+help: try removing the method call\n+   |\n+LL -     let _v: &str = \"foo\".to_string();\n+LL +     let _v: &str = \"foo\";\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-105494.rs:14:12\n+   |\n+LL |     let mut path: String = \"/usr\".to_string();\n+   |                   ------ expected due to this type\n+...\n+LL |     path = format!(\"{}/{}\", path, folder).as_str();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&str`\n+   |\n+help: try removing the method call\n+   |\n+LL -     path = format!(\"{}/{}\", path, folder).as_str();\n+LL +     path = format!(\"{}/{}\", path, folder);\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}