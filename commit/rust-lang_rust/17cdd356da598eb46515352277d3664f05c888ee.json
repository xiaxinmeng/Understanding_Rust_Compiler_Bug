{"sha": "17cdd356da598eb46515352277d3664f05c888ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Y2RkMzU2ZGE1OThlYjQ2NTE1MzUyMjc3ZDM2NjRmMDVjODg4ZWU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-11T20:47:08Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-12T10:38:27Z"}, "message": "rustc: replace `TyCtxt<'tcx, 'gcx, 'tcx>` with `TyCtxt<'gcx, 'tcx>`.", "tree": {"sha": "c3bfa4d9040a2407737363cbe5ab9d6a99b2c67a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3bfa4d9040a2407737363cbe5ab9d6a99b2c67a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17cdd356da598eb46515352277d3664f05c888ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17cdd356da598eb46515352277d3664f05c888ee", "html_url": "https://github.com/rust-lang/rust/commit/17cdd356da598eb46515352277d3664f05c888ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17cdd356da598eb46515352277d3664f05c888ee/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "244125350880ca2f905928cae4115867eedd301a", "url": "https://api.github.com/repos/rust-lang/rust/commits/244125350880ca2f905928cae4115867eedd301a", "html_url": "https://github.com/rust-lang/rust/commit/244125350880ca2f905928cae4115867eedd301a"}], "stats": {"total": 2866, "additions": 1433, "deletions": 1433}, "files": [{"sha": "a7411c9667929dd679f9f64d759772c4f3be3efb", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -8,7 +8,7 @@ use crate::hir::{self, PatKind};\n use crate::hir::def_id::DefId;\n \n struct CFGBuilder<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     owner_def_id: DefId,\n     tables: &'a ty::TypeckTables<'tcx>,\n     graph: CFGGraph,\n@@ -30,7 +30,7 @@ struct LoopScope {\n     break_index: CFGIndex,    // where to go on a `break`\n }\n \n-pub fn construct<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn construct<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                            body: &hir::Body) -> CFG {\n     let mut graph = graph::Graph::new();\n     let entry = graph.add_node(CFGNodeData::Entry);"}, {"sha": "481b5c72e9304a6ae8029fce7cd4384978ede739", "filename": "src/librustc/cfg/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fgraphviz.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -12,7 +12,7 @@ pub type Node<'a> = (cfg::CFGIndex, &'a cfg::CFGNode);\n pub type Edge<'a> = &'a cfg::CFGEdge;\n \n pub struct LabelledCFG<'a, 'tcx: 'a> {\n-    pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n     pub cfg: &'a cfg::CFG,\n     pub name: String,\n     /// `labelled_edges` controls whether we emit labels on the edges"}, {"sha": "deb76e057c538a0316843d460351a03e22e6fa4f", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -49,7 +49,7 @@ pub type CFGNode = graph::Node<CFGNodeData>;\n pub type CFGEdge = graph::Edge<CFGEdgeData>;\n \n impl CFG {\n-    pub fn new<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn new<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                          body: &hir::Body) -> CFG {\n         construct::construct(tcx, body)\n     }"}, {"sha": "acff8f621ac0a3b0b1520e3cace80b6403b7f4e2", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -204,7 +204,7 @@ macro_rules! define_dep_nodes {\n         impl DepNode {\n             #[allow(unreachable_code, non_snake_case)]\n             #[inline(always)]\n-            pub fn new<'a, 'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+            pub fn new<'a, 'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                        dep: DepConstructor<'gcx>)\n                                        -> DepNode\n                 where 'gcx: 'a + 'tcx,\n@@ -307,7 +307,7 @@ macro_rules! define_dep_nodes {\n             /// refers to something from the previous compilation session that\n             /// has been removed.\n             #[inline]\n-            pub fn extract_def_id(&self, tcx: TyCtxt<'_, '_, '_>) -> Option<DefId> {\n+            pub fn extract_def_id(&self, tcx: TyCtxt<'_, '_>) -> Option<DefId> {\n                 if self.kind.can_reconstruct_query_key() {\n                     let def_path_hash = DefPathHash(self.hash);\n                     tcx.def_path_hash_to_def_id.as_ref()?\n@@ -400,7 +400,7 @@ impl DefPathHash {\n \n impl DefId {\n     #[inline(always)]\n-    pub fn to_dep_node(self, tcx: TyCtxt<'_, '_, '_>, kind: DepKind) -> DepNode {\n+    pub fn to_dep_node(self, tcx: TyCtxt<'_, '_>, kind: DepKind) -> DepNode {\n         DepNode::from_def_path_hash(kind, tcx.def_path_hash(self))\n     }\n }\n@@ -442,23 +442,23 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n ]);\n \n pub trait RecoverKey<'tcx>: Sized {\n-    fn recover(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self>;\n+    fn recover(tcx: TyCtxt<'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self>;\n }\n \n impl RecoverKey<'tcx> for CrateNum {\n-    fn recover(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n+    fn recover(tcx: TyCtxt<'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n         dep_node.extract_def_id(tcx).map(|id| id.krate)\n     }\n }\n \n impl RecoverKey<'tcx> for DefId {\n-    fn recover(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n+    fn recover(tcx: TyCtxt<'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n         dep_node.extract_def_id(tcx)\n     }\n }\n \n impl RecoverKey<'tcx> for DefIndex {\n-    fn recover(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n+    fn recover(tcx: TyCtxt<'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n         dep_node.extract_def_id(tcx).map(|id| id.index)\n     }\n }\n@@ -470,11 +470,11 @@ trait DepNodeParams<'gcx: 'tcx, 'tcx>: fmt::Debug {\n     /// Fingerprint to be used in DepNode.\n     /// Not all DepNodeParams support being turned into a Fingerprint (they\n     /// don't need to if the corresponding DepNode is anonymous).\n-    fn to_fingerprint(&self, _: TyCtxt<'tcx, 'gcx, 'tcx>) -> Fingerprint {\n+    fn to_fingerprint(&self, _: TyCtxt<'gcx, 'tcx>) -> Fingerprint {\n         panic!(\"Not implemented. Accidentally called on anonymous node?\")\n     }\n \n-    fn to_debug_str(&self, _: TyCtxt<'tcx, 'gcx, 'tcx>) -> String {\n+    fn to_debug_str(&self, _: TyCtxt<'gcx, 'tcx>) -> String {\n         format!(\"{:?}\", self)\n     }\n }\n@@ -484,7 +484,7 @@ impl<'gcx: 'tcx, 'tcx, T> DepNodeParams<'gcx, 'tcx> for T\n {\n     default const CAN_RECONSTRUCT_QUERY_KEY: bool = false;\n \n-    default fn to_fingerprint(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Fingerprint {\n+    default fn to_fingerprint(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Fingerprint {\n         let mut hcx = tcx.create_stable_hashing_context();\n         let mut hasher = StableHasher::new();\n \n@@ -493,47 +493,47 @@ impl<'gcx: 'tcx, 'tcx, T> DepNodeParams<'gcx, 'tcx> for T\n         hasher.finish()\n     }\n \n-    default fn to_debug_str(&self, _: TyCtxt<'tcx, 'gcx, 'tcx>) -> String {\n+    default fn to_debug_str(&self, _: TyCtxt<'gcx, 'tcx>) -> String {\n         format!(\"{:?}\", *self)\n     }\n }\n \n impl<'gcx: 'tcx, 'tcx> DepNodeParams<'gcx, 'tcx> for DefId {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n-    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_>) -> Fingerprint {\n         tcx.def_path_hash(*self).0\n     }\n \n-    fn to_debug_str(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> String {\n+    fn to_debug_str(&self, tcx: TyCtxt<'gcx, 'tcx>) -> String {\n         tcx.def_path_str(*self)\n     }\n }\n \n impl<'gcx: 'tcx, 'tcx> DepNodeParams<'gcx, 'tcx> for DefIndex {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n-    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_>) -> Fingerprint {\n         tcx.hir().definitions().def_path_hash(*self).0\n     }\n \n-    fn to_debug_str(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> String {\n+    fn to_debug_str(&self, tcx: TyCtxt<'gcx, 'tcx>) -> String {\n         tcx.def_path_str(DefId::local(*self))\n     }\n }\n \n impl<'gcx: 'tcx, 'tcx> DepNodeParams<'gcx, 'tcx> for CrateNum {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n-    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_>) -> Fingerprint {\n         let def_id = DefId {\n             krate: *self,\n             index: CRATE_DEF_INDEX,\n         };\n         tcx.def_path_hash(def_id).0\n     }\n \n-    fn to_debug_str(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> String {\n+    fn to_debug_str(&self, tcx: TyCtxt<'gcx, 'tcx>) -> String {\n         tcx.crate_name(*self).as_str().to_string()\n     }\n }\n@@ -544,7 +544,7 @@ impl<'gcx: 'tcx, 'tcx> DepNodeParams<'gcx, 'tcx> for (DefId, DefId) {\n     // We actually would not need to specialize the implementation of this\n     // method but it's faster to combine the hashes than to instantiate a full\n     // hashing context and stable-hashing state.\n-    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_>) -> Fingerprint {\n         let (def_id_0, def_id_1) = *self;\n \n         let def_path_hash_0 = tcx.def_path_hash(def_id_0);\n@@ -553,7 +553,7 @@ impl<'gcx: 'tcx, 'tcx> DepNodeParams<'gcx, 'tcx> for (DefId, DefId) {\n         def_path_hash_0.0.combine(def_path_hash_1.0)\n     }\n \n-    fn to_debug_str(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> String {\n+    fn to_debug_str(&self, tcx: TyCtxt<'gcx, 'tcx>) -> String {\n         let (def_id_0, def_id_1) = *self;\n \n         format!(\"({}, {})\",\n@@ -568,7 +568,7 @@ impl<'gcx: 'tcx, 'tcx> DepNodeParams<'gcx, 'tcx> for HirId {\n     // We actually would not need to specialize the implementation of this\n     // method but it's faster to combine the hashes than to instantiate a full\n     // hashing context and stable-hashing state.\n-    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n+    fn to_fingerprint(&self, tcx: TyCtxt<'_, '_>) -> Fingerprint {\n         let HirId {\n             owner,\n             local_id,"}, {"sha": "d15980dcbe6d68de10da77e95924f77261ae04f9", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -558,7 +558,7 @@ impl DepGraph {\n     /// a node index can be found for that node.\n     pub fn try_mark_green_and_read(\n         &self,\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'_, '_>,\n         dep_node: &DepNode\n     ) -> Option<(SerializedDepNodeIndex, DepNodeIndex)> {\n         self.try_mark_green(tcx, dep_node).map(|(prev_index, dep_node_index)| {\n@@ -570,7 +570,7 @@ impl DepGraph {\n \n     pub fn try_mark_green(\n         &self,\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'_, '_>,\n         dep_node: &DepNode\n     ) -> Option<(SerializedDepNodeIndex, DepNodeIndex)> {\n         debug_assert!(!dep_node.kind.is_eval_always());\n@@ -604,7 +604,7 @@ impl DepGraph {\n     /// Try to mark a dep-node which existed in the previous compilation session as green.\n     fn try_mark_previous_green<'tcx>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         data: &DepGraphData,\n         prev_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode\n@@ -791,7 +791,7 @@ impl DepGraph {\n     #[inline(never)]\n     fn emit_diagnostics<'tcx>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         data: &DepGraphData,\n         dep_node_index: DepNodeIndex,\n         did_allocation: bool,\n@@ -842,7 +842,7 @@ impl DepGraph {\n     //\n     // This method will only load queries that will end up in the disk cache.\n     // Other queries will not be executed.\n-    pub fn exec_cache_promotions<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+    pub fn exec_cache_promotions<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>) {\n         let green_nodes: Vec<DepNode> = {\n             let data = self.data.as_ref().unwrap();\n             data.colors.values.indices().filter_map(|prev_index| {"}, {"sha": "86cba3a4580ba80b3cae54c370c32e4143637c0f", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -33,7 +33,7 @@ impl DepGraphSafe for DefId {\n \n /// The type context itself can be used to access all kinds of tracked\n /// state, but those accesses should always generate read events.\n-impl<'gcx, 'tcx> DepGraphSafe for TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> DepGraphSafe for TyCtxt<'gcx, 'tcx> {\n }\n \n /// Tuples make it easy to build up state."}, {"sha": "4d13d91c8f27d03ee3e36f64b78790e03feb9072", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -88,7 +88,7 @@ impl Target {\n }\n \n struct CheckAttrVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl CheckAttrVisitor<'tcx> {\n@@ -347,7 +347,7 @@ fn is_c_like_enum(item: &hir::Item) -> bool {\n     }\n }\n \n-fn check_mod_attrs<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn check_mod_attrs<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CheckAttrVisitor { tcx }.as_deep_visitor()"}, {"sha": "b3abe50a5952fc29359da97dd64cc28347c08d92", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -177,7 +177,7 @@ impl DefId {\n         LocalDefId::from_def_id(self)\n     }\n \n-    pub fn describe_as_module(&self, tcx: TyCtxt<'_, '_, '_>) -> String {\n+    pub fn describe_as_module(&self, tcx: TyCtxt<'_, '_>) -> String {\n         if self.is_local() && self.index == CRATE_DEF_INDEX {\n             format!(\"top-level module\")\n         } else {"}, {"sha": "332d15c319379b0a0834367ba280151f75e6bbbb", "filename": "src/librustc/hir/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fhir%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fhir%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fupvars.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -55,7 +55,7 @@ impl Visitor<'tcx> for LocalCollector {\n }\n \n struct CaptureCollector<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     locals: &'a FxHashSet<HirId>,\n     upvars: FxIndexMap<HirId, hir::Upvar>,\n }"}, {"sha": "4b5b458b2afb757ef86acd775beb8aec7a52c0ac", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -205,7 +205,7 @@ for &'b mut T {\n     }\n }\n \n-impl StableHashingContextProvider<'lcx> for TyCtxt<'lcx, 'gcx, 'lcx> {\n+impl StableHashingContextProvider<'lcx> for TyCtxt<'gcx, 'lcx> {\n     fn get_stable_hashing_context(&self) -> StableHashingContext<'lcx> {\n         (*self).create_stable_hashing_context()\n     }"}, {"sha": "dadac4b1e6b8f69da81caa620d0553f0f3c922f0", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -277,7 +277,7 @@ impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n \n struct Canonicalizer<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     infcx: Option<&'cx InferCtxt<'cx, 'gcx, 'tcx>>,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     variables: SmallVec<[CanonicalVarInfo; 8]>,\n     query_state: &'cx mut OriginalQueryValues<'tcx>,\n     // Note that indices is only used once `var_values` is big enough to be\n@@ -290,7 +290,7 @@ struct Canonicalizer<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n }\n \n impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.tcx\n     }\n \n@@ -501,7 +501,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     fn canonicalize<V>(\n         value: &V,\n         infcx: Option<&InferCtxt<'_, 'gcx, 'tcx>>,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalize_region_mode: &dyn CanonicalizeRegionMode,\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonicalized<'gcx, V>"}, {"sha": "85e784d0ca5fb85c4c8186f4258cbb6805064b91", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -478,7 +478,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n     /// `self.var_values == [Type(u32), Lifetime('a), Type(u64)]`\n     /// we'll return a substitution `subst` with:\n     /// `subst.var_values == [Type(^0), Lifetime(^1), Type(^2)]`.\n-    pub fn make_identity(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n+    pub fn make_identity(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Self {\n         use crate::ty::subst::UnpackedKind;\n \n         CanonicalVarValues {"}, {"sha": "345889ca44174de612e692ff692907834a7d0dd1", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -647,7 +647,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n /// Given the region obligations and constraints scraped from the infcx,\n /// creates query region constraints.\n pub fn make_query_outlives<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>)>,\n     region_constraints: &RegionConstraintData<'tcx>,\n ) -> Vec<QueryRegionConstraint<'tcx>> {"}, {"sha": "0dace4132b80844feef5530944152dd52ff4c775", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -16,7 +16,7 @@ impl<'tcx, V> Canonical<'tcx, V> {\n     /// with the value given in `var_values`.\n     pub fn substitute(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         var_values: &CanonicalVarValues<'tcx>,\n     ) -> V\n     where\n@@ -33,7 +33,7 @@ impl<'tcx, V> Canonical<'tcx, V> {\n     /// V, replacing each of the canonical variables.\n     pub fn substitute_projected<T>(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         var_values: &CanonicalVarValues<'tcx>,\n         projection_fn: impl FnOnce(&V) -> &T,\n     ) -> T\n@@ -50,7 +50,7 @@ impl<'tcx, V> Canonical<'tcx, V> {\n /// must be values for the set of canonical variables that appear in\n /// `value`.\n pub(super) fn substitute_value<'a, 'tcx, T>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     var_values: &CanonicalVarValues<'tcx>,\n     value: &'a T,\n ) -> T"}, {"sha": "21d4f3bf511972df224a9ddc1a02b173b7b48d61", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -207,7 +207,7 @@ impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> {\n }\n \n impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n-    pub fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -414,7 +414,7 @@ struct Generalization<'tcx> {\n }\n \n impl TypeRelation<'gcx, 'tcx> for Generalizer<'_, 'gcx, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "a9e0e3376a54db789af13667128c0c9cc93fa815", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -27,7 +27,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> Equate<'combine, 'infcx, 'gcx, 'tcx> {\n impl TypeRelation<'gcx, 'tcx> for Equate<'combine, 'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Equate\" }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.a_is_expected }\n "}, {"sha": "d50cb8e61a60b37e2f0f65064c790d2895665135", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -67,7 +67,7 @@ mod need_type_info;\n \n pub mod nice_region_error;\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     pub fn note_and_explain_region(\n         self,\n         region_scope_tree: &region::ScopeTree,\n@@ -446,7 +446,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         use ty::subst::Kind;\n \n         struct AbsolutePathPrinter<'gcx, 'tcx> {\n-            tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+            tcx: TyCtxt<'gcx, 'tcx>,\n         }\n \n         struct NonTrivialPath;\n@@ -460,7 +460,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             type DynExistential = !;\n             type Const = !;\n \n-            fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+            fn tcx<'a>(&'a self) -> TyCtxt<'gcx, 'tcx> {\n                 self.tcx\n             }\n "}, {"sha": "8dd415ec9af4c3323cc2aa1e4b4415d3f3d8b351", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n // where that lifetime appears. This allows us to highlight the\n // specific part of the type in the error message.\n struct FindNestedTypeVisitor<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     // The bound_region corresponding to the Refree(freeregion)\n     // associated with the anonymous region we are looking for.\n     bound_region: ty::BoundRegion,\n@@ -209,7 +209,7 @@ impl Visitor<'gcx> for FindNestedTypeVisitor<'gcx, 'tcx> {\n // where that lifetime appears. This allows us to highlight the\n // specific part of the type in the error message.\n struct TyPathVisitor<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     found_it: bool,\n     bound_region: ty::BoundRegion,\n     current_index: ty::DebruijnIndex,"}, {"sha": "dc9ec15cb24927b926aef5cadb386620399bc1d7", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -56,7 +56,7 @@ impl<'cx, 'gcx, 'tcx> NiceRegionError<'cx, 'gcx, 'tcx> {\n         Self { infcx, error: None, regions: Some((span, sub, sup)), tables }\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "43a5e4a0d0e776a64b5f226d1315ed71c888c1f2", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -322,7 +322,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         // HACK(eddyb) maybe move this in a more central location.\n         #[derive(Copy, Clone)]\n         struct Highlighted<'gcx, 'tcx, T> {\n-            tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+            tcx: TyCtxt<'gcx, 'tcx>,\n             highlight: RegionHighlightMode,\n             value: T,\n         }"}, {"sha": "641e5b127e8d0f8abda4d253399a9a37bf04e52a", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'gcx, 'tcx> TypeFreshener<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "ef6ea20c6dfba5c4b62eb4918c7fdbdcb4146c8e", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -143,7 +143,7 @@ pub struct InferenceFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "0b3c0904d1777b9d7f14eeed473c5294cf8a4b41", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -24,7 +24,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> Glb<'combine, 'infcx, 'gcx, 'tcx> {\n impl TypeRelation<'gcx, 'tcx> for Glb<'combine, 'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Glb\" }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.a_is_expected }\n "}, {"sha": "1612a2a54d10cb847590e7c6abb8e247ba5fd1c0", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -103,7 +103,7 @@ struct LexicalResolver<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n }\n \n impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.region_rels.tcx\n     }\n \n@@ -136,7 +136,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n \n     /// Initially, the value for all variables is set to `'empty`, the\n     /// empty region. The `expansion` phase will grow this larger.\n-    fn construct_var_data(&self, tcx: TyCtxt<'tcx, '_, 'tcx>) -> LexicalRegionResolutions<'tcx> {\n+    fn construct_var_data(&self, tcx: TyCtxt<'_, 'tcx>) -> LexicalRegionResolutions<'tcx> {\n         LexicalRegionResolutions {\n             error_region: tcx.lifetimes.re_static,\n             values: IndexVec::from_elem_n(VarValue::Value(tcx.lifetimes.re_empty), self.num_vars())\n@@ -785,7 +785,7 @@ impl<'tcx> fmt::Debug for RegionAndOrigin<'tcx> {\n }\n \n impl<'tcx> LexicalRegionResolutions<'tcx> {\n-    fn normalize<T>(&self, tcx: TyCtxt<'tcx, '_, 'tcx>, value: T) -> T\n+    fn normalize<T>(&self, tcx: TyCtxt<'_, 'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {"}, {"sha": "ab49968ce24db4504a2f24d46c0103400e88b9d2", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -24,7 +24,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> Lub<'combine, 'infcx, 'gcx, 'tcx> {\n impl TypeRelation<'gcx, 'tcx> for Lub<'combine, 'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Lub\" }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.a_is_expected }\n "}, {"sha": "11918eccfd0768cc7994a59a37381278beea75c0", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -91,7 +91,7 @@ impl SuppressRegionErrors {\n     /// Indicates that the MIR borrowck will repeat these region\n     /// checks, so we should ignore errors if NLL is (unconditionally)\n     /// enabled.\n-    pub fn when_nll_is_enabled(tcx: TyCtxt<'_, '_, '_>) -> Self {\n+    pub fn when_nll_is_enabled(tcx: TyCtxt<'_, '_>) -> Self {\n         match tcx.borrowck_mode() {\n             // If we're on Migrate mode, report AST region errors\n             BorrowckMode::Migrate => SuppressRegionErrors { suppressed: false },\n@@ -103,7 +103,7 @@ impl SuppressRegionErrors {\n }\n \n pub struct InferCtxt<'a, 'gcx, 'tcx> {\n-    pub tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub tcx: TyCtxt<'gcx, 'tcx>,\n \n     /// During type-checking/inference of a body, `in_progress_tables`\n     /// contains a reference to the tables being built up, which are\n@@ -466,11 +466,11 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n /// Necessary because we can't write the following bound:\n /// `F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(InferCtxt<'b, 'gcx, 'tcx>)`.\n pub struct InferCtxtBuilder<'gcx, 'tcx> {\n-    global_tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+    global_tcx: TyCtxt<'gcx, 'gcx>,\n     fresh_tables: Option<RefCell<ty::TypeckTables<'tcx>>>,\n }\n \n-impl TyCtxt<'gcx, 'gcx, 'gcx> {\n+impl TyCtxt<'gcx, 'gcx> {\n     pub fn infer_ctxt<'tcx>(self) -> InferCtxtBuilder<'gcx, 'tcx> {\n         InferCtxtBuilder {\n             global_tcx: self,\n@@ -1600,7 +1600,7 @@ impl<'a, 'gcx, 'tcx> ShallowResolver<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ShallowResolver<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -1641,7 +1641,7 @@ impl<'gcx, 'tcx> TypeTrace<'tcx> {\n         }\n     }\n \n-    pub fn dummy(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> TypeTrace<'tcx> {\n+    pub fn dummy(tcx: TyCtxt<'gcx, 'tcx>) -> TypeTrace<'tcx> {\n         TypeTrace {\n             cause: ObligationCause::dummy(),\n             values: Types(ExpectedFound {"}, {"sha": "f6ba13d2aa8f85c899691b741fab8ccd27114e01", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -498,7 +498,7 @@ impl<D> TypeRelation<'gcx, 'tcx> for TypeRelating<'me, 'gcx, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -827,7 +827,7 @@ impl<D> TypeRelation<'gcx, 'tcx> for TypeGeneralizer<'me, 'gcx, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "355d527e8efb8c226817ec10e49b4c2ecca67c29", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -553,7 +553,7 @@ impl<'tcx> TypeVisitor<'tcx> for OpaqueTypeOutlivesVisitor<'_, '_, 'tcx>\n }\n \n struct ReverseMapper<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n \n     /// If errors have already been reported in this fn, we suppress\n     /// our own errors because they are sometimes derivative.\n@@ -569,7 +569,7 @@ struct ReverseMapper<'gcx, 'tcx> {\n \n impl ReverseMapper<'gcx, 'tcx> {\n     fn new(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         tainted_by_errors: bool,\n         opaque_type_def_id: DefId,\n         map: FxHashMap<Kind<'tcx>, Kind<'gcx>>,\n@@ -600,7 +600,7 @@ impl ReverseMapper<'gcx, 'tcx> {\n }\n \n impl TypeFolder<'gcx, 'tcx> for ReverseMapper<'gcx, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.tcx\n     }\n \n@@ -944,7 +944,7 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n /// and `opaque_hir_id` is the `HirId` of the definition of the existential type `Baz`.\n /// For the above example, this function returns `true` for `f1` and `false` for `f2`.\n pub fn may_define_existential_type(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     def_id: DefId,\n     opaque_hir_id: hir::HirId,\n ) -> bool {"}, {"sha": "2a5558a4a66fda93122f11a377c907c10884be09", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -29,7 +29,7 @@ impl<'tcx> FreeRegionMap<'tcx> {\n     /// avoid making arbitrary choices. See\n     /// `TransitiveRelation::postdom_upper_bound` for more details.\n     pub fn lub_free_regions<'gcx>(&self,\n-                                      tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                                      tcx: TyCtxt<'gcx, 'tcx>,\n                                       r_a: Region<'tcx>,\n                                       r_b: Region<'tcx>)\n                                       -> Region<'tcx> {\n@@ -90,7 +90,7 @@ impl_stable_hash_for!(struct FreeRegionMap<'tcx> {\n \n impl<'a, 'tcx> Lift<'tcx> for FreeRegionMap<'a> {\n     type Lifted = FreeRegionMap<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<FreeRegionMap<'tcx>> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<FreeRegionMap<'tcx>> {\n         self.relation.maybe_map(|&fr| tcx.lift(&fr))\n                      .map(|relation| FreeRegionMap { relation })\n     }"}, {"sha": "ddc1cd0ff3ffaa8837e610fc5e7df9aeb18f2dc0", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -233,7 +233,7 @@ where\n     // See the comments on `process_registered_region_obligations` for the meaning\n     // of these fields.\n     delegate: D,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     verify_bound: VerifyBoundCx<'cx, 'gcx, 'tcx>,\n }\n \n@@ -260,7 +260,7 @@ where\n {\n     pub fn new(\n         delegate: D,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         region_bound_pairs: &'cx RegionBoundPairs<'tcx>,\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "72079a6adc9fba394cda0859265e8a8b126221cf", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -13,15 +13,15 @@ use crate::util::captures::Captures;\n /// accrues them into the `region_obligations` code, but for NLL we\n /// use something else.\n pub struct VerifyBoundCx<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     region_bound_pairs: &'cx RegionBoundPairs<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n     pub fn new(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         region_bound_pairs: &'cx RegionBoundPairs<'tcx>,\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "5fc6523feba55b744cc3b240ac6cb51a795c0e99", "filename": "src/librustc/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -22,7 +22,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n     /// refactor the constraint set.\n     pub fn leak_check(\n         &mut self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         overly_polymorphic: bool,\n         placeholder_map: &PlaceholderMap<'tcx>,\n         _snapshot: &CombinedSnapshot<'_, 'tcx>,\n@@ -109,7 +109,7 @@ impl<'tcx> TaintSet<'tcx> {\n \n     fn fixed_point(\n         &mut self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         undo_log: &[UndoLog<'tcx>],\n         verifys: &[Verify<'tcx>],\n     ) {"}, {"sha": "cab102907f6035c5fe04ab1e93ef75f91611fd02", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -700,7 +700,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n     pub fn lub_regions(\n         &mut self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         origin: SubregionOrigin<'tcx>,\n         a: Region<'tcx>,\n         b: Region<'tcx>,\n@@ -722,7 +722,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n     pub fn glb_regions(\n         &mut self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         origin: SubregionOrigin<'tcx>,\n         a: Region<'tcx>,\n         b: Region<'tcx>,\n@@ -744,7 +744,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n     pub fn opportunistic_resolve_var(\n         &mut self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         rid: RegionVid,\n     ) -> ty::Region<'tcx> {\n         let vid = self.unification_table.probe_value(rid).min_vid;\n@@ -760,7 +760,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n     fn combine_vars(\n         &mut self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         t: CombineMapType,\n         a: Region<'tcx>,\n         b: Region<'tcx>,\n@@ -850,7 +850,7 @@ impl<'tcx> fmt::Display for GenericKind<'tcx> {\n }\n \n impl<'gcx, 'tcx> GenericKind<'tcx> {\n-    pub fn to_ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    pub fn to_ty(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => p.to_ty(tcx),\n             GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),"}, {"sha": "774ebdcdd25029148ff018c493c46d8a7fb7116f", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -24,7 +24,7 @@ impl<'a, 'gcx, 'tcx> OpportunisticVarResolver<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for OpportunisticVarResolver<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -61,7 +61,7 @@ impl<'a, 'gcx, 'tcx> OpportunisticTypeAndRegionResolver<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for OpportunisticTypeAndRegionResolver<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -177,7 +177,7 @@ struct FullTypeResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for FullTypeResolver<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "e17da50d7be8cef027eeca523b4af31848a43cf2", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -33,7 +33,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> Sub<'combine, 'infcx, 'gcx, 'tcx> {\n \n impl TypeRelation<'gcx, 'tcx> for Sub<'combine, 'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Sub\" }\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.fields.infcx.tcx }\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> { self.fields.infcx.tcx }\n     fn a_is_expected(&self) -> bool { self.a_is_expected }\n \n     fn with_cause<F,R>(&mut self, cause: Cause, f: F) -> R"}, {"sha": "7f9880031f3f070f1d396a27bb8b63f45788fd5e", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -10,7 +10,7 @@ use std::marker::PhantomData;\n use std::cell::RefMut;\n \n pub trait ToType {\n-    fn to_type<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>;\n+    fn to_type<'gcx, 'tcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx>;\n }\n \n impl UnifyKey for ty::IntVid {\n@@ -52,7 +52,7 @@ impl UnifyKey for ty::RegionVid {\n }\n \n impl ToType for IntVarValue {\n-    fn to_type<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    fn to_type<'gcx, 'tcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             ty::IntType(i) => tcx.mk_mach_int(i),\n             ty::UintType(i) => tcx.mk_mach_uint(i),\n@@ -72,7 +72,7 @@ impl UnifyKey for ty::FloatVid {\n impl EqUnifyValue for FloatVarValue {}\n \n impl ToType for FloatVarValue {\n-    fn to_type<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    fn to_type<'gcx, 'tcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx> {\n         tcx.mk_mach_float(self.0)\n     }\n }"}, {"sha": "11047f45343affbdf80cfc418d65f49c7cc5d801", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -509,7 +509,7 @@ impl LintStore {\n /// Context for lint checking after type checking.\n pub struct LateContext<'a, 'tcx: 'a> {\n     /// Type context we're checking in.\n-    pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n \n     /// Side-tables for the body we are in.\n     // FIXME: Make this lazy to avoid running the TypeckTables query?\n@@ -781,7 +781,7 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n     /// ```\n     pub fn get_def_path(&self, def_id: DefId) -> Vec<Symbol> {\n         pub struct AbsolutePathPrinter<'tcx> {\n-            pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+            pub tcx: TyCtxt<'tcx, 'tcx>,\n         }\n \n         impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'tcx> {\n@@ -793,7 +793,7 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n             type DynExistential = ();\n             type Const = ();\n \n-            fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+            fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n                 self.tcx\n             }\n \n@@ -1372,7 +1372,7 @@ macro_rules! late_lint_pass_impl {\n late_lint_methods!(late_lint_pass_impl, [], ['tcx]);\n \n fn late_lint_mod_pass<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     module_def_id: DefId,\n     pass: T,\n ) {\n@@ -1404,7 +1404,7 @@ fn late_lint_mod_pass<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n }\n \n pub fn late_lint_mod<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     module_def_id: DefId,\n     builtin_lints: T,\n ) {\n@@ -1424,7 +1424,7 @@ pub fn late_lint_mod<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n }\n \n fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     pass: T\n ) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n@@ -1460,7 +1460,7 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n }\n \n fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     builtin_lints: T\n ) {\n     let mut passes = tcx.sess.lint_store.borrow().late_passes.lock().take().unwrap();\n@@ -1494,7 +1494,7 @@ fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n \n /// Performs lint checking on a crate.\n pub fn check_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     builtin_lints: impl FnOnce() -> T + Send,\n ) {\n     join(|| {"}, {"sha": "d8f21ced2559d7b98bb5d7aef4fc6403da047826", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -761,12 +761,12 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n     return err\n }\n \n-pub fn maybe_lint_level_root(tcx: TyCtxt<'_, '_, '_>, id: hir::HirId) -> bool {\n+pub fn maybe_lint_level_root(tcx: TyCtxt<'_, '_>, id: hir::HirId) -> bool {\n     let attrs = tcx.hir().attrs_by_hir_id(id);\n     attrs.iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some())\n }\n \n-fn lint_levels<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, cnum: CrateNum)\n+fn lint_levels<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, cnum: CrateNum)\n     -> &'tcx LintLevelMap\n {\n     assert_eq!(cnum, LOCAL_CRATE);\n@@ -789,7 +789,7 @@ fn lint_levels<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, cnum: CrateNum)\n \n struct LintLevelMapBuilder<'tcx> {\n     levels: levels::LintLevelsBuilder<'tcx>,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl LintLevelMapBuilder<'tcx> {"}, {"sha": "aeacd3722b4385ade11ed818e2aa53faf78654c1", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -195,7 +195,7 @@ macro_rules! CloneLiftImpls {\n         $(\n             impl<$tcx> $crate::ty::Lift<$tcx> for $ty {\n                 type Lifted = Self;\n-                fn lift_to_tcx<'a, 'gcx>(&self, _: $crate::ty::TyCtxt<'a, 'gcx, $tcx>) -> Option<Self> {\n+                fn lift_to_tcx<'gcx>(&self, _: $crate::ty::TyCtxt<'gcx, $tcx>) -> Option<Self> {\n                     Some(Clone::clone(self))\n                 }\n             }\n@@ -264,7 +264,7 @@ macro_rules! BraceStructLiftImpl {\n         {\n             type Lifted = $lifted;\n \n-            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<$lifted> {\n+            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<$lifted> {\n                 $(let $field = tcx.lift(&self.$field)?;)*\n                 Some(Self::Lifted { $($field),* })\n             }\n@@ -283,7 +283,7 @@ macro_rules! EnumLiftImpl {\n         {\n             type Lifted = $lifted;\n \n-            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<$lifted> {\n+            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<$lifted> {\n                 EnumLiftImpl!(@Variants(self, tcx) input($($variants)*) output())\n             }\n         }"}, {"sha": "2e490931525a30c29a7aa66be35ecf443f0d5578", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -212,7 +212,7 @@ pub trait CrateStore {\n \n     // utility functions\n     fn encode_metadata<'tcx>(&self,\n-                                 tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                                 tcx: TyCtxt<'tcx, 'tcx>)\n                                  -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n }\n@@ -228,7 +228,7 @@ pub type CrateStoreDyn = dyn CrateStore + sync::Sync;\n // In order to get this left-to-right dependency ordering, we perform a\n // topological sort of all crates putting the leaves at the right-most\n // positions.\n-pub fn used_crates(tcx: TyCtxt<'_, '_, '_>, prefer: LinkagePreference)\n+pub fn used_crates(tcx: TyCtxt<'_, '_>, prefer: LinkagePreference)\n     -> Vec<(CrateNum, LibSource)>\n {\n     let mut libs = tcx.crates()"}, {"sha": "9bd80bf3f8b870fd865d854d2e4cf5730b21a14d", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -26,7 +26,7 @@ use syntax_pos;\n // explored. For example, if it's a live Node::Item that is a\n // function, then we should explore its block to check for codes that\n // may need to be marked as live.\n-fn should_explore<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn should_explore<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                             hir_id: hir::HirId) -> bool {\n     match tcx.hir().find_by_hir_id(hir_id) {\n         Some(Node::Item(..)) |\n@@ -41,7 +41,7 @@ fn should_explore<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     worklist: Vec<hir::HirId>,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     live_symbols: FxHashSet<hir::HirId>,\n     repr_has_repr_c: bool,\n@@ -302,7 +302,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     }\n }\n \n-fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_, '_, '_>,\n+fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_, '_>,\n                                     id: hir::HirId,\n                                     attrs: &[ast::Attribute]) -> bool {\n     if attr::contains_name(attrs, sym::lang) {\n@@ -353,7 +353,7 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_, '_, '_>,\n struct LifeSeeder<'k, 'tcx: 'k> {\n     worklist: Vec<hir::HirId>,\n     krate: &'k hir::Crate,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     // see `MarkSymbolVisitor::struct_constructors`\n     struct_constructors: FxHashMap<hir::HirId, hir::HirId>,\n }\n@@ -424,7 +424,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n }\n \n fn create_and_seed_worklist<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     access_levels: &privacy::AccessLevels,\n     krate: &hir::Crate,\n ) -> (Vec<hir::HirId>, FxHashMap<hir::HirId, hir::HirId>) {\n@@ -451,7 +451,7 @@ fn create_and_seed_worklist<'tcx>(\n     (life_seeder.worklist, life_seeder.struct_constructors)\n }\n \n-fn find_live<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn find_live<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                        access_levels: &privacy::AccessLevels,\n                        krate: &hir::Crate)\n                        -> FxHashSet<hir::HirId> {\n@@ -472,7 +472,7 @@ fn find_live<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n struct DeadVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     live_symbols: FxHashSet<hir::HirId>,\n }\n \n@@ -660,7 +660,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     }\n }\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);"}, {"sha": "faa3ea27d13ffef5e068a75cfce518fc862665a2", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -81,7 +81,7 @@ pub enum Linkage {\n     Dynamic,\n }\n \n-pub fn calculate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn calculate<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     let sess = &tcx.sess;\n     let fmts = sess.crate_types.borrow().iter().map(|&ty| {\n         let linkage = calculate_type(tcx, ty);\n@@ -92,7 +92,7 @@ pub fn calculate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     sess.dependency_formats.set(fmts);\n }\n \n-fn calculate_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn calculate_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                             ty: config::CrateType) -> DependencyList {\n \n     let sess = &tcx.sess;\n@@ -242,7 +242,7 @@ fn calculate_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     ret\n }\n \n-fn add_library(tcx: TyCtxt<'_, '_, '_>,\n+fn add_library(tcx: TyCtxt<'_, '_>,\n                cnum: CrateNum,\n                link: LinkagePreference,\n                m: &mut FxHashMap<CrateNum, LinkagePreference>) {\n@@ -267,7 +267,7 @@ fn add_library(tcx: TyCtxt<'_, '_, '_>,\n     }\n }\n \n-fn attempt_static<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<DependencyList> {\n+fn attempt_static<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> Option<DependencyList> {\n     let sess = &tcx.sess;\n     let crates = cstore::used_crates(tcx, RequireStatic);\n     if !crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n@@ -324,7 +324,7 @@ fn activate_injected_dep(injected: Option<CrateNum>,\n \n // After the linkage for a crate has been determined we need to verify that\n // there's only going to be one allocator in the output.\n-fn verify_ok<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, list: &[Linkage]) {\n+fn verify_ok<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, list: &[Linkage]) {\n     let sess = &tcx.sess;\n     if list.len() == 0 {\n         return"}, {"sha": "024196e35647cdd39263480357a6282debbf2d53", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     }\n }\n \n-fn entry_fn(tcx: TyCtxt<'_, '_, '_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n+fn entry_fn(tcx: TyCtxt<'_, '_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let any_exe = tcx.sess.crate_types.borrow().iter().any(|ty| {\n@@ -141,7 +141,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n }\n \n fn configure_main(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     visitor: &EntryContext<'_, '_>,\n ) -> Option<(DefId, EntryFnType)> {\n     if let Some((hir_id, _)) = visitor.start_fn {\n@@ -179,7 +179,7 @@ fn configure_main(\n     }\n }\n \n-pub fn find_entry_point(tcx: TyCtxt<'_, '_, '_>) -> Option<(DefId, EntryFnType)> {\n+pub fn find_entry_point(tcx: TyCtxt<'_, '_>) -> Option<(DefId, EntryFnType)> {\n     tcx.entry_fn(LOCAL_CRATE)\n }\n "}, {"sha": "bebfb4b7687035b2e5749871ddd6b173d9502fb0", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -39,7 +39,7 @@ pub enum ExportedSymbol<'tcx> {\n \n impl<'tcx> ExportedSymbol<'tcx> {\n     pub fn symbol_name(&self,\n-                       tcx: TyCtxt<'_, 'tcx, '_>)\n+                       tcx: TyCtxt<'tcx, '_>)\n                        -> ty::SymbolName {\n         match *self {\n             ExportedSymbol::NonGeneric(def_id) => {\n@@ -55,7 +55,7 @@ impl<'tcx> ExportedSymbol<'tcx> {\n     }\n \n     pub fn compare_stable(&self,\n-                          tcx: TyCtxt<'_, 'tcx, '_>,\n+                          tcx: TyCtxt<'tcx, '_>,\n                           other: &ExportedSymbol<'tcx>)\n                           -> cmp::Ordering {\n         match *self {\n@@ -92,7 +92,7 @@ impl<'tcx> ExportedSymbol<'tcx> {\n     }\n }\n \n-pub fn metadata_symbol_name(tcx: TyCtxt<'_, '_, '_>) -> String {\n+pub fn metadata_symbol_name(tcx: TyCtxt<'_, '_>) -> String {\n     format!(\"rust_metadata_{}_{}\",\n             tcx.original_crate_name(LOCAL_CRATE),\n             tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex())"}, {"sha": "e9f435f8991f5712e2a1ef6c9a4c79b752a01857", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -202,7 +202,7 @@ enum OverloadedCallType {\n }\n \n impl OverloadedCallType {\n-    fn from_trait_id(tcx: TyCtxt<'_, '_, '_>, trait_id: DefId) -> OverloadedCallType {\n+    fn from_trait_id(tcx: TyCtxt<'_, '_>, trait_id: DefId) -> OverloadedCallType {\n         for &(maybe_function_trait, overloaded_call_type) in &[\n             (tcx.lang_items().fn_once_trait(), FnOnceOverloadedCall),\n             (tcx.lang_items().fn_mut_trait(), FnMutOverloadedCall),\n@@ -219,7 +219,7 @@ impl OverloadedCallType {\n         bug!(\"overloaded call didn't map to known function trait\")\n     }\n \n-    fn from_method_id(tcx: TyCtxt<'_, '_, '_>, method_id: DefId) -> OverloadedCallType {\n+    fn from_method_id(tcx: TyCtxt<'_, '_>, method_id: DefId) -> OverloadedCallType {\n         let method = tcx.associated_item(method_id);\n         OverloadedCallType::from_trait_id(tcx, method.container.id())\n     }\n@@ -267,7 +267,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n     ///\n     /// See also `with_infer`, which is used *during* typeck.\n     pub fn new(delegate: &'a mut (dyn Delegate<'tcx>+'a),\n-               tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+               tcx: TyCtxt<'tcx, 'tcx>,\n                body_owner: DefId,\n                param_env: ty::ParamEnv<'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n@@ -333,7 +333,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         self.consume_expr(&body.value);\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.mc.tcx\n     }\n "}, {"sha": "74c50cabab0c451cf601bc7b03c051aaddf3e66c", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -16,7 +16,7 @@ use crate::ty::{self, TyCtxt, Region};\n /// This stuff is a bit convoluted and should be refactored, but as we\n /// transition to NLL, it'll all go away anyhow.\n pub struct RegionRelations<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    pub tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub tcx: TyCtxt<'gcx, 'tcx>,\n \n     /// The context used to fetch the region maps.\n     pub context: DefId,\n@@ -30,7 +30,7 @@ pub struct RegionRelations<'a, 'gcx: 'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> RegionRelations<'a, 'gcx, 'tcx> {\n     pub fn new(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         context: DefId,\n         region_scope_tree: &'a region::ScopeTree,\n         free_regions: &'a FreeRegionMap<'tcx>,"}, {"sha": "9746c7ce05c116676e439a735b93a2361b27ad7c", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -10,7 +10,7 @@ use syntax_pos::{Span, sym};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::hir;\n \n-fn check_mod_intrinsics<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn check_mod_intrinsics<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut ItemVisitor { tcx }.as_deep_visitor()\n@@ -25,18 +25,18 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n struct ItemVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>\n+    tcx: TyCtxt<'tcx, 'tcx>\n }\n \n struct ExprVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     tables: &'tcx ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n /// If the type is `Option<T>`, it will return `T`, otherwise\n /// the type itself. Works on most `Option`-like types.\n-fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 ty: Ty<'tcx>)\n                                 -> Ty<'tcx> {\n     let (def, substs) = match ty.sty {"}, {"sha": "02163409b3271b3aba95cf04dbfca28aa54690f9", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -106,7 +106,7 @@ impl LanguageItems {\n \n struct LanguageItemCollector<'tcx> {\n     items: LanguageItems,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     /// A mapping from the name of the lang item to its order and the form it must be of.\n     item_refs: FxHashMap<&'static str, (usize, Target)>,\n }\n@@ -160,7 +160,7 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n }\n \n impl LanguageItemCollector<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> LanguageItemCollector<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx, 'tcx>) -> LanguageItemCollector<'tcx> {\n         let mut item_refs = FxHashMap::default();\n \n         $( item_refs.insert($name, ($variant as usize, $target)); )*\n@@ -217,7 +217,7 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n }\n \n /// Traverse and collect all the lang items in all crates.\n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> LanguageItems {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> LanguageItems {\n     // Initialize the collector.\n     let mut collector = LanguageItemCollector::new(tcx);\n \n@@ -402,7 +402,7 @@ language_item_table! {\n     Rc,                          \"rc\",                 rc,                      Target::Struct;\n }\n \n-impl<'tcx, 'gcx> TyCtxt<'gcx, 'tcx, 'gcx> {\n+impl<'tcx, 'gcx> TyCtxt<'tcx, 'gcx> {\n     /// Returns the `DefId` for a given `LangItem`.\n     /// If not found, fatally abort compilation.\n     pub fn require_lang_item(&self, lang_item: LangItem) -> DefId {"}, {"sha": "b05ede53d1cfd1085b55df406e26e5fe45c62f7f", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -38,12 +38,12 @@ impl LibFeatures {\n }\n \n pub struct LibFeatureCollector<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     lib_features: LibFeatures,\n }\n \n impl LibFeatureCollector<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> LibFeatureCollector<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx, 'tcx>) -> LibFeatureCollector<'tcx> {\n         LibFeatureCollector {\n             tcx,\n             lib_features: LibFeatures::new(),\n@@ -142,7 +142,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> LibFeatures {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     intravisit::walk_crate(&mut collector, tcx.hir().krate());\n     collector.lib_features"}, {"sha": "43b0c64df7837aaf55cf44c899fd46cc2103805a", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -150,7 +150,7 @@ enum LiveNodeKind {\n     ExitNode\n }\n \n-fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_, '_, '_>) -> String {\n+fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_, '_>) -> String {\n     let cm = tcx.sess.source_map();\n     match lnk {\n         UpvarNode(s) => {\n@@ -181,7 +181,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     fn visit_arm(&mut self, a: &'tcx hir::Arm) { visit_arm(self, a); }\n }\n \n-fn check_mod_liveness<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn check_mod_liveness<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut IrMaps::new(tcx, module_def_id).as_deep_visitor(),\n@@ -257,7 +257,7 @@ enum VarKind {\n }\n \n struct IrMaps<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body_owner: DefId,\n     num_live_nodes: usize,\n     num_vars: usize,\n@@ -269,7 +269,7 @@ struct IrMaps<'tcx> {\n }\n \n impl IrMaps<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, body_owner: DefId) -> IrMaps<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx, 'tcx>, body_owner: DefId) -> IrMaps<'tcx> {\n         IrMaps {\n             tcx,\n             body_owner,"}, {"sha": "d7e8f1fb71404ea8d9a9099ffb3e10f4c9552b6b", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -288,7 +288,7 @@ impl HirNode for hir::Pat {\n \n #[derive(Clone)]\n pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    pub tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub tcx: TyCtxt<'gcx, 'tcx>,\n     pub body_owner: DefId,\n     pub upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n     pub region_scope_tree: &'a region::ScopeTree,\n@@ -339,7 +339,7 @@ impl MutabilityCategory {\n         ret\n     }\n \n-    fn from_local(tcx: TyCtxt<'_, '_, '_>, tables: &ty::TypeckTables<'_>,\n+    fn from_local(tcx: TyCtxt<'_, '_>, tables: &ty::TypeckTables<'_>,\n                   id: ast::NodeId) -> MutabilityCategory {\n         let ret = match tcx.hir().get(id) {\n             Node::Binding(p) => match p.node {\n@@ -400,7 +400,7 @@ impl MutabilityCategory {\n }\n \n impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn new(tcx: TyCtxt<'tcx, 'tcx>,\n                body_owner: DefId,\n                region_scope_tree: &'a region::ScopeTree,\n                tables: &'a ty::TypeckTables<'tcx>,\n@@ -1514,7 +1514,7 @@ impl<'tcx> cmt_<'tcx> {\n         }\n     }\n \n-    pub fn descriptive_string(&self, tcx: TyCtxt<'_, '_, '_>) -> Cow<'static, str> {\n+    pub fn descriptive_string(&self, tcx: TyCtxt<'_, '_>) -> Cow<'static, str> {\n         match self.cat {\n             Categorization::StaticItem => {\n                 \"static item\".into()"}, {"sha": "116ce7525dab53e3acf7cc220433d514f5b610b3", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -27,7 +27,7 @@ use crate::hir::intravisit;\n // Returns true if the given item must be inlined because it may be\n // monomorphized or it was marked with `#[inline]`. This will only return\n // true for functions.\n-fn item_might_be_inlined(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn item_might_be_inlined(tcx: TyCtxt<'tcx, 'tcx>,\n                          item: &hir::Item,\n                          attrs: CodegenFnAttrs) -> bool {\n     if attrs.requests_inline() {\n@@ -44,7 +44,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn method_might_be_inlined<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn method_might_be_inlined<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                      impl_item: &hir::ImplItem,\n                                      impl_src: DefId) -> bool {\n     let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner_def_id());\n@@ -67,7 +67,7 @@ fn method_might_be_inlined<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n // Information needed while computing reachability.\n struct ReachableContext<'a, 'tcx: 'a> {\n     // The type context.\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     // The set of items which must be exported in the linkage sense.\n     reachable_symbols: HirIdSet,\n@@ -335,7 +335,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n // trait items are used from inlinable code through method call syntax or UFCS, or their\n // trait is a lang item.\n struct CollectPrivateImplItemsVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     access_levels: &'a privacy::AccessLevels,\n     worklist: &'a mut Vec<hir::HirId>,\n }\n@@ -391,7 +391,7 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n #[derive(Clone, HashStable)]\n pub struct ReachableSet(pub Lrc<HirIdSet>);\n \n-fn reachable_set<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum) -> ReachableSet {\n+fn reachable_set<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, crate_num: CrateNum) -> ReachableSet {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);"}, {"sha": "3c99ec391533c409d353799743b65710e8586f25", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -169,7 +169,7 @@ impl Scope {\n         self.id\n     }\n \n-    pub fn node_id(&self, tcx: TyCtxt<'_, '_, '_>, scope_tree: &ScopeTree) -> ast::NodeId {\n+    pub fn node_id(&self, tcx: TyCtxt<'_, '_>, scope_tree: &ScopeTree) -> ast::NodeId {\n         match scope_tree.root_body {\n             Some(hir_id) => {\n                 tcx.hir().hir_to_node_id(hir::HirId {\n@@ -184,7 +184,7 @@ impl Scope {\n     /// Returns the span of this `Scope`. Note that in general the\n     /// returned span may not correspond to the span of any `NodeId` in\n     /// the AST.\n-    pub fn span(&self, tcx: TyCtxt<'_, '_, '_>, scope_tree: &ScopeTree) -> Span {\n+    pub fn span(&self, tcx: TyCtxt<'_, '_>, scope_tree: &ScopeTree) -> Span {\n         let node_id = self.node_id(tcx, scope_tree);\n         if node_id == ast::DUMMY_NODE_ID {\n             return DUMMY_SP;\n@@ -359,7 +359,7 @@ pub struct Context {\n }\n \n struct RegionResolutionVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n \n     // The number of expressions and patterns visited in the current body\n     expr_and_pat_count: usize,\n@@ -646,7 +646,7 @@ impl<'tcx> ScopeTree {\n \n     /// Assuming that the provided region was defined within this `ScopeTree`,\n     /// returns the outermost `Scope` that the region outlives.\n-    pub fn early_free_scope<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn early_free_scope<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                                       br: &ty::EarlyBoundRegion)\n                                       -> Scope {\n         let param_owner = tcx.parent(br.def_id).unwrap();\n@@ -677,7 +677,7 @@ impl<'tcx> ScopeTree {\n \n     /// Assuming that the provided region was defined within this `ScopeTree`,\n     /// returns the outermost `Scope` that the region outlives.\n-    pub fn free_scope<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, fr: &ty::FreeRegion)\n+    pub fn free_scope<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>, fr: &ty::FreeRegion)\n                                  -> Scope {\n         let param_owner = match fr.bound_region {\n             ty::BoundRegion::BrNamed(def_id, _) => {\n@@ -1327,7 +1327,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     }\n }\n \n-fn region_scope_tree<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n+fn region_scope_tree<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId)\n     -> &'tcx ScopeTree\n {\n     let closure_base_def_id = tcx.closure_base_def_id(def_id);"}, {"sha": "32577e019e0c2381a6a2398fc6ff1a9c4a686e85", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -218,7 +218,7 @@ impl_stable_hash_for!(struct crate::middle::resolve_lifetime::ResolveLifetimes {\n });\n \n struct LifetimeContext<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     map: &'a mut NamedRegionMap,\n     scope: ScopeRef<'a>,\n \n@@ -369,7 +369,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n /// directly, but rather use `named_region_map`, `is_late_bound_map`,\n /// etc.\n fn resolve_lifetimes<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     for_krate: CrateNum,\n ) -> &'tcx ResolveLifetimes {\n     assert_eq!(for_krate, LOCAL_CRATE);\n@@ -398,7 +398,7 @@ fn resolve_lifetimes<'tcx>(\n     tcx.arena.alloc(rl)\n }\n \n-fn krate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> NamedRegionMap {\n+fn krate<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> NamedRegionMap {\n     let krate = tcx.hir().krate();\n     let mut map = NamedRegionMap {\n         defs: Default::default(),\n@@ -1101,7 +1101,7 @@ impl ShadowKind {\n     }\n }\n \n-fn check_mixed_explicit_and_in_band_defs(tcx: TyCtxt<'_, '_, '_>, params: &P<[hir::GenericParam]>) {\n+fn check_mixed_explicit_and_in_band_defs(tcx: TyCtxt<'_, '_>, params: &P<[hir::GenericParam]>) {\n     let lifetime_params: Vec<_> = params\n         .iter()\n         .filter_map(|param| match param.kind {\n@@ -1129,7 +1129,7 @@ fn check_mixed_explicit_and_in_band_defs(tcx: TyCtxt<'_, '_, '_>, params: &P<[hi\n }\n \n fn signal_shadowing_problem(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     name: ast::Name,\n     orig: Original,\n     shadower: Shadower,\n@@ -1169,7 +1169,7 @@ fn signal_shadowing_problem(\n // if one of the label shadows a lifetime or another label.\n fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n     struct GatherLabels<'a, 'tcx: 'a> {\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         scope: ScopeRef<'a>,\n         labels_in_fn: &'a mut Vec<ast::Ident>,\n     }\n@@ -1218,7 +1218,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n     }\n \n     fn check_if_label_shadows_lifetime(\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'_, '_>,\n         mut scope: ScopeRef<'_>,\n         label: ast::Ident,\n     ) {\n@@ -1257,7 +1257,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n }\n \n fn compute_object_lifetime_defaults(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n ) -> HirIdMap<Vec<ObjectLifetimeDefault>> {\n     let mut map = HirIdMap::default();\n     for item in tcx.hir().krate().items.values() {\n@@ -1315,7 +1315,7 @@ fn compute_object_lifetime_defaults(\n /// of the form `T:'a` so as to determine the `ObjectLifetimeDefault`\n /// for each type parameter.\n fn object_lifetime_defaults_for_item(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     generics: &hir::Generics,\n ) -> Vec<ObjectLifetimeDefault> {\n     fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::GenericBound]) {"}, {"sha": "30c4a46271c214967d875dd328ebb082337ae605", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -106,7 +106,7 @@ impl_stable_hash_for!(struct self::Index<'tcx> {\n \n // A private tree-walker for producing an Index.\n struct Annotator<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     index: &'a mut Index<'tcx>,\n     parent_stab: Option<&'tcx Stability>,\n     parent_depr: Option<DeprecationEntry>,\n@@ -317,7 +317,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n }\n \n struct MissingStabilityAnnotations<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     access_levels: &'a AccessLevels,\n }\n \n@@ -390,7 +390,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n }\n \n impl<'tcx> Index<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Index<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx, 'tcx>) -> Index<'tcx> {\n         let is_staged_api =\n             tcx.sess.opts.debugging_opts.force_unstable_if_unmarked ||\n             tcx.features().staged_api;\n@@ -466,7 +466,7 @@ impl<'tcx> Index<'tcx> {\n \n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n-fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n }\n \n@@ -502,7 +502,7 @@ pub fn deprecation_in_effect(since: &str) -> bool {\n }\n \n struct Checker<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n /// Result of `TyCtxt::eval_stability`.\n@@ -521,7 +521,7 @@ pub enum EvalResult {\n     Unmarked,\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     // See issue #38412.\n     fn skip_stability_check_due_to_privacy(self, mut def_id: DefId) -> bool {\n         // Check if `def_id` is a trait method.\n@@ -827,7 +827,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     pub fn lookup_deprecation(self, id: DefId) -> Option<Deprecation> {\n         self.lookup_deprecation_entry(id).map(|depr| depr.attr)\n     }\n@@ -836,7 +836,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n /// Given the list of enabled features that were not language features (i.e., that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n@@ -921,7 +921,7 @@ pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n }\n \n fn unnecessary_stable_feature_lint<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     span: Span,\n     feature: Symbol,\n     since: Symbol"}, {"sha": "45d405df950e9ad9bddbed8b1c0241420b10732f", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -18,13 +18,13 @@ macro_rules! weak_lang_items {\n     ($($name:ident, $item:ident, $sym:ident;)*) => (\n \n struct Context<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     items: &'a mut lang_items::LanguageItems,\n }\n \n /// Checks the crate for usage of weak lang items, returning a vector of all the\n /// language items required by this crate, but not defined yet.\n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                              items: &mut lang_items::LanguageItems) {\n     // These are never called by user code, they're generated by the compiler.\n     // They will never implicitly be added to the `missing` array unless we do\n@@ -60,7 +60,7 @@ pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol> {\n /// Not all lang items are always required for each compilation, particularly in\n /// the case of panic=abort. In these situations some lang items are injected by\n /// crates and don't actually need to be defined in libstd.\n-pub fn whitelisted(tcx: TyCtxt<'_, '_, '_>, lang_item: lang_items::LangItem) -> bool {\n+pub fn whitelisted(tcx: TyCtxt<'_, '_>, lang_item: lang_items::LangItem) -> bool {\n     // If we're not compiling with unwinding, we won't actually need these\n     // symbols. Other panic runtimes ensure that the relevant symbols are\n     // available to link things together, but they're never exercised.\n@@ -72,7 +72,7 @@ pub fn whitelisted(tcx: TyCtxt<'_, '_, '_>, lang_item: lang_items::LangItem) ->\n     false\n }\n \n-fn verify<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn verify<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                     items: &lang_items::LanguageItems) {\n     // We only need to check for the presence of weak lang items if we're\n     // emitting something that's not an rlib.\n@@ -142,7 +142,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     }\n }\n \n-impl<'tcx, 'gcx> TyCtxt<'gcx, 'tcx, 'gcx> {\n+impl<'tcx, 'gcx> TyCtxt<'tcx, 'gcx> {\n     pub fn is_weak_lang_item(&self, item_def_id: DefId) -> bool {\n         let lang_items = self.lang_items();\n         let did = Some(item_def_id);"}, {"sha": "09d7f77ac9d5b0c5ea6b3a886820bac141d62196", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -66,7 +66,7 @@ enum AllocDiscriminant {\n \n pub fn specialized_encode_alloc_id<'tcx, E: Encoder>(\n     encoder: &mut E,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     alloc_id: AllocId,\n ) -> Result<(), E::Error> {\n     let alloc: GlobalAlloc<'tcx> ="}, {"sha": "90a683b73336260c5ce85c9e3deec7cb8e7701c5", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -1241,7 +1241,7 @@ impl<'tcx> Terminator<'tcx> {\n \n impl<'tcx> TerminatorKind<'tcx> {\n     pub fn if_<'gcx>(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         cond: Operand<'tcx>,\n         t: BasicBlock,\n         f: BasicBlock,\n@@ -2324,7 +2324,7 @@ impl<'tcx> Operand<'tcx> {\n     /// with given `DefId` and substs. Since this is used to synthesize\n     /// MIR, assumes `user_ty` is None.\n     pub fn function_handle(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n         span: Span,"}, {"sha": "0b095c2f0de561fb6c21edc2da2c0ecfbb4ed088", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -48,7 +48,7 @@ pub enum MonoItem<'tcx> {\n }\n \n impl<'tcx> MonoItem<'tcx> {\n-    pub fn size_estimate(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> usize {\n+    pub fn size_estimate(&self, tcx: TyCtxt<'tcx, 'tcx>) -> usize {\n         match *self {\n             MonoItem::Fn(instance) => {\n                 // Estimate the size of a function based on how many statements\n@@ -72,7 +72,7 @@ impl<'tcx> MonoItem<'tcx> {\n         }\n     }\n \n-    pub fn symbol_name(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> SymbolName {\n+    pub fn symbol_name(&self, tcx: TyCtxt<'tcx, 'tcx>) -> SymbolName {\n         match *self {\n             MonoItem::Fn(instance) => tcx.symbol_name(instance),\n             MonoItem::Static(def_id) => {\n@@ -88,7 +88,7 @@ impl<'tcx> MonoItem<'tcx> {\n     }\n \n     pub fn instantiation_mode(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                          tcx: TyCtxt<'tcx, 'tcx>)\n                           -> InstantiationMode {\n         let inline_in_all_cgus =\n             tcx.sess.opts.debugging_opts.inline_in_all_cgus.unwrap_or_else(|| {\n@@ -133,7 +133,7 @@ impl<'tcx> MonoItem<'tcx> {\n         }\n     }\n \n-    pub fn explicit_linkage(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<Linkage> {\n+    pub fn explicit_linkage(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Option<Linkage> {\n         let def_id = match *self {\n             MonoItem::Fn(ref instance) => instance.def_id(),\n             MonoItem::Static(def_id) => def_id,\n@@ -169,7 +169,7 @@ impl<'tcx> MonoItem<'tcx> {\n     /// Similarly, if a vtable method has such a signature, and therefore can't\n     /// be used, we can just not emit it and have a placeholder (a null pointer,\n     /// which will never be accessed) in its place.\n-    pub fn is_instantiable(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> bool {\n+    pub fn is_instantiable(&self, tcx: TyCtxt<'tcx, 'tcx>) -> bool {\n         debug!(\"is_instantiable({:?})\", self);\n         let (def_id, substs) = match *self {\n             MonoItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n@@ -181,7 +181,7 @@ impl<'tcx> MonoItem<'tcx> {\n         tcx.substitute_normalize_and_test_predicates((def_id, &substs))\n     }\n \n-    pub fn to_string(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, debug: bool) -> String {\n+    pub fn to_string(&self, tcx: TyCtxt<'tcx, 'tcx>, debug: bool) -> String {\n         return match *self {\n             MonoItem::Fn(instance) => {\n                 to_string_internal(tcx, \"fn \", instance, debug)\n@@ -195,7 +195,7 @@ impl<'tcx> MonoItem<'tcx> {\n             }\n         };\n \n-        fn to_string_internal<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        fn to_string_internal<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                         prefix: &str,\n                                         instance: Instance<'tcx>,\n                                         debug: bool)\n@@ -208,7 +208,7 @@ impl<'tcx> MonoItem<'tcx> {\n         }\n     }\n \n-    pub fn local_span(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<Span> {\n+    pub fn local_span(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Option<Span> {\n         match *self {\n             MonoItem::Fn(Instance { def, .. }) => {\n                 tcx.hir().as_local_hir_id(def.def_id())\n@@ -334,7 +334,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         base_n::encode(hash, base_n::CASE_INSENSITIVE)\n     }\n \n-    pub fn estimate_size(&mut self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+    pub fn estimate_size(&mut self, tcx: TyCtxt<'tcx, 'tcx>) {\n         // Estimate the size of a codegen unit as (approximately) the number of MIR\n         // statements it corresponds to.\n         self.size_estimate = Some(self.items.keys().map(|mi| mi.size_estimate(tcx)).sum());\n@@ -360,7 +360,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         WorkProductId::from_cgu_name(&self.name().as_str())\n     }\n \n-    pub fn work_product(&self, tcx: TyCtxt<'_, '_, '_>) -> WorkProduct {\n+    pub fn work_product(&self, tcx: TyCtxt<'_, '_>) -> WorkProduct {\n         let work_product_id = self.work_product_id();\n         tcx.dep_graph\n            .previous_work_product(&work_product_id)\n@@ -370,15 +370,15 @@ impl<'tcx> CodegenUnit<'tcx> {\n     }\n \n     pub fn items_in_deterministic_order(&self,\n-                                        tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                                        tcx: TyCtxt<'tcx, 'tcx>)\n                                         -> Vec<(MonoItem<'tcx>,\n                                                 (Linkage, Visibility))> {\n         // The codegen tests rely on items being process in the same order as\n         // they appear in the file, so for local items, we sort by node_id first\n         #[derive(PartialEq, Eq, PartialOrd, Ord)]\n         pub struct ItemSortKey(Option<HirId>, SymbolName);\n \n-        fn item_sort_key<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        fn item_sort_key<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                    item: MonoItem<'tcx>) -> ItemSortKey {\n             ItemSortKey(match item {\n                 MonoItem::Fn(ref instance) => {\n@@ -415,7 +415,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         items\n     }\n \n-    pub fn codegen_dep_node(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> DepNode {\n+    pub fn codegen_dep_node(&self, tcx: TyCtxt<'tcx, 'tcx>) -> DepNode {\n         DepNode::new(tcx, DepConstructor::CompileCodegenUnit(self.name().clone()))\n     }\n }\n@@ -446,12 +446,12 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for CodegenUnit<'tcx> {\n }\n \n pub struct CodegenUnitNameBuilder<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     cache: FxHashMap<CrateNum, String>,\n }\n \n impl CodegenUnitNameBuilder<'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'gcx, 'tcx>) -> Self {\n         CodegenUnitNameBuilder {\n             tcx,\n             cache: Default::default(),"}, {"sha": "1d5f7265673141147cc7ee11c71fc54c1227ccb3", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -33,7 +33,7 @@ impl<'gcx, 'tcx> PlaceTy<'tcx> {\n     /// not carry a `Ty` for `T`.)\n     ///\n     /// Note that the resulting type has not been normalized.\n-    pub fn field_ty(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, f: &Field) -> Ty<'tcx>\n+    pub fn field_ty(self, tcx: TyCtxt<'gcx, 'tcx>, f: &Field) -> Ty<'tcx>\n     {\n         let answer = match self.ty.sty {\n             ty::Adt(adt_def, substs) => {\n@@ -57,7 +57,7 @@ impl<'gcx, 'tcx> PlaceTy<'tcx> {\n     /// Convenience wrapper around `projection_ty_core` for\n     /// `PlaceElem`, where we can just use the `Ty` that is already\n     /// stored inline on field projection elems.\n-    pub fn projection_ty(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn projection_ty(self, tcx: TyCtxt<'gcx, 'tcx>,\n                          elem: &PlaceElem<'tcx>)\n                          -> PlaceTy<'tcx>\n     {\n@@ -71,7 +71,7 @@ impl<'gcx, 'tcx> PlaceTy<'tcx> {\n     /// (which should be trivial when `T` = `Ty`).\n     pub fn projection_ty_core<V, T>(\n         self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         elem: &ProjectionElem<V, T>,\n         mut handle_field: impl FnMut(&Self, &Field, &T) -> Ty<'tcx>)\n         -> PlaceTy<'tcx>\n@@ -121,7 +121,7 @@ BraceStructTypeFoldableImpl! {\n }\n \n impl<'tcx> Place<'tcx> {\n-    pub fn ty<'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> PlaceTy<'tcx>\n+    pub fn ty<'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'gcx, 'tcx>) -> PlaceTy<'tcx>\n         where D: HasLocalDecls<'tcx>\n     {\n         match *self {\n@@ -141,7 +141,7 @@ pub enum RvalueInitializationState {\n }\n \n impl<'tcx> Rvalue<'tcx> {\n-    pub fn ty<'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>\n+    pub fn ty<'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx>\n         where D: HasLocalDecls<'tcx>\n     {\n         match *self {\n@@ -222,7 +222,7 @@ impl<'tcx> Rvalue<'tcx> {\n }\n \n impl<'tcx> Operand<'tcx> {\n-    pub fn ty<'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>\n+    pub fn ty<'gcx, D>(&self, local_decls: &D, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx>\n         where D: HasLocalDecls<'tcx>\n     {\n         match self {\n@@ -234,7 +234,7 @@ impl<'tcx> Operand<'tcx> {\n }\n \n impl<'tcx> BinOp {\n-      pub fn ty<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+      pub fn ty<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                           lhs_ty: Ty<'tcx>,\n                           rhs_ty: Ty<'tcx>)\n                           -> Ty<'tcx> {"}, {"sha": "00a162a31fa561c188a191397ec214fbbc82dadf", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -48,11 +48,11 @@ pub struct AutoTraitInfo<'cx> {\n }\n \n pub struct AutoTraitFinder<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl<'tcx> AutoTraitFinder<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'tcx, 'tcx>) -> Self {\n         AutoTraitFinder { tcx }\n     }\n \n@@ -834,11 +834,11 @@ impl AutoTraitFinder<'tcx> {\n // Replaces all ReVars in a type with ty::Region's, using the provided map\n pub struct RegionReplacer<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     vid_to_region: &'a FxHashMap<ty::RegionVid, ty::Region<'tcx>>,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "469fd6f97666adf5994b72a76ee55cb2bc9469a7", "filename": "src/librustc/traits/codegen/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -18,7 +18,7 @@ use crate::ty::fold::TypeFoldable;\n /// that type check should guarantee to us that all nested\n /// obligations *could be* resolved if we wanted to.\n /// Assumes that this is run after the entire crate has been successfully type-checked.\n-pub fn codegen_fulfill_obligation<'tcx>(ty: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn codegen_fulfill_obligation<'tcx>(ty: TyCtxt<'tcx, 'tcx>,\n                                           (param_env, trait_ref):\n                                           (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>))\n                                           -> Vtable<'tcx, ()>\n@@ -74,7 +74,7 @@ pub fn codegen_fulfill_obligation<'tcx>(ty: TyCtxt<'tcx, 'tcx, 'tcx>,\n     })\n }\n \n-impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx> {\n     /// Monomorphizes a type from the AST by first applying the\n     /// in-scope substitutions and then normalizing any associated\n     /// types."}, {"sha": "95e96036b4992b8efdd6f0937ce6af6750ff2cd9", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -49,7 +49,7 @@ pub fn add_placeholder_note(err: &mut errors::DiagnosticBuilder<'_>) {\n /// with a suitably-freshened `ImplHeader` with those types\n /// substituted. Otherwise, invokes `no_overlap`.\n pub fn overlapping_impls<'gcx, F1, F2, R>(\n-    tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+    tcx: TyCtxt<'gcx, 'gcx>,\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     intercrate_mode: IntercrateMode,\n@@ -183,7 +183,7 @@ fn overlap_within_probe(\n     Some(OverlapResult { impl_header, intercrate_ambiguity_causes, involves_placeholder })\n }\n \n-pub fn trait_ref_is_knowable<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn trait_ref_is_knowable<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                              trait_ref: ty::TraitRef<'tcx>)\n                                              -> Option<Conflict>\n {\n@@ -229,7 +229,7 @@ pub fn trait_ref_is_knowable<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n     }\n }\n \n-pub fn trait_ref_is_local_or_fundamental<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn trait_ref_is_local_or_fundamental<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                                          trait_ref: ty::TraitRef<'tcx>)\n                                                          -> bool {\n     trait_ref.def_id.krate == LOCAL_CRATE || tcx.has_attr(trait_ref.def_id, sym::fundamental)\n@@ -246,7 +246,7 @@ pub enum OrphanCheckErr<'tcx> {\n ///\n /// 1. All type parameters in `Self` must be \"covered\" by some local type constructor.\n /// 2. Some local type must appear in `Self`.\n-pub fn orphan_check<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn orphan_check<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                     impl_def_id: DefId)\n                                     -> Result<(), OrphanCheckErr<'tcx>>\n {\n@@ -353,7 +353,7 @@ pub fn orphan_check<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n ///\n /// Note that this function is never called for types that have both type\n /// parameters and inference variables.\n-fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt<'_, '_, '_>,\n+fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt<'_, '_>,\n                                 trait_ref: ty::TraitRef<'tcx>,\n                                 in_crate: InCrate)\n                                 -> Result<(), OrphanCheckErr<'tcx>>\n@@ -430,7 +430,7 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt<'_, '_, '_>,\n     }\n }\n \n-fn uncovered_tys<'tcx>(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'tcx>, in_crate: InCrate)\n+fn uncovered_tys<'tcx>(tcx: TyCtxt<'_, '_>, ty: Ty<'tcx>, in_crate: InCrate)\n                        -> Vec<Ty<'tcx>> {\n     if ty_is_local_constructor(ty, in_crate) {\n         vec![]\n@@ -450,7 +450,7 @@ fn is_possibly_remote_type(ty: Ty<'_>, _in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_local(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n+fn ty_is_local(tcx: TyCtxt<'_, '_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n     ty_is_local_constructor(ty, in_crate) ||\n         fundamental_ty(ty) && ty.walk_shallow().any(|t| ty_is_local(tcx, t, in_crate))\n }"}, {"sha": "e43ca8e7e0acf76b809734756d2c01d3a3179e55", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -78,7 +78,7 @@ impl<T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n }\n \n impl dyn TraitEngine<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, '_, 'tcx>) -> Box<Self> {\n+    pub fn new(tcx: TyCtxt<'_, 'tcx>) -> Box<Self> {\n         if tcx.sess.opts.debugging_opts.chalk {\n             Box::new(ChalkFulfillmentContext::new())\n         } else {"}, {"sha": "50eac8f069058a8f19a4e1740b960b3c6d5faaf6", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -1249,7 +1249,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                            found: ty::PolyTraitRef<'tcx>)\n         -> DiagnosticBuilder<'tcx>\n     {\n-        fn build_fn_sig_string<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        fn build_fn_sig_string<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                                trait_ref: &ty::TraitRef<'tcx>) -> String {\n             let inputs = trait_ref.substs.type_at(1);\n             let sig = if let ty::Tuple(inputs) = inputs.sty {\n@@ -1294,7 +1294,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     pub fn recursive_type_with_infinite_size_error(self,\n                                                    type_def_id: DefId)\n                                                    -> DiagnosticBuilder<'tcx>\n@@ -1457,7 +1457,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ParamToVarFolder<'a, 'gcx, 'tcx> {\n-            fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.infcx.tcx }\n+            fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> { self.infcx.tcx }\n \n             fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n                 if let ty::Param(ty::ParamTy {name, .. }) = ty.sty {"}, {"sha": "b478824129909eff9122488c321473f8cb1f1fff", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -140,7 +140,7 @@ pub struct ObligationCause<'tcx> {\n }\n \n impl<'tcx> ObligationCause<'tcx> {\n-    pub fn span<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Span {\n+    pub fn span<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Span {\n         match self.code {\n             ObligationCauseCode::CompareImplMethodObligation { .. } |\n             ObligationCauseCode::MainFunctionType |\n@@ -365,7 +365,7 @@ impl<'tcx> DomainGoal<'tcx> {\n impl<'tcx> GoalKind<'tcx> {\n     pub fn from_poly_domain_goal<'gcx>(\n         domain_goal: PolyDomainGoal<'tcx>,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n     ) -> GoalKind<'tcx> {\n         match domain_goal.no_bound_vars() {\n             Some(p) => p.into_goal(),\n@@ -710,7 +710,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'gcx, 'tcx>(\n     }\n }\n \n-fn do_normalize_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn do_normalize_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                      region_context: DefId,\n                                      cause: ObligationCause<'tcx>,\n                                      elaborated_env: ty::ParamEnv<'tcx>,\n@@ -795,7 +795,7 @@ fn do_normalize_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n // FIXME: this is gonna need to be removed ...\n /// Normalizes the parameter environment, reporting errors if they occur.\n-pub fn normalize_param_env_or_error<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn normalize_param_env_or_error<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                               region_context: DefId,\n                                               unnormalized_env: ty::ParamEnv<'tcx>,\n                                               cause: ObligationCause<'tcx>)\n@@ -936,7 +936,7 @@ pub fn fully_normalize<'a, 'gcx, 'tcx, T>(\n /// environment. If this returns false, then either normalize\n /// encountered an error or one of the predicates did not hold. Used\n /// when creating vtables to check for unsatisfiable methods.\n-fn normalize_and_test_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn normalize_and_test_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                            predicates: Vec<ty::Predicate<'tcx>>)\n                                            -> bool\n {\n@@ -965,7 +965,7 @@ fn normalize_and_test_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     result\n }\n \n-fn substitute_normalize_and_test_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn substitute_normalize_and_test_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                       key: (DefId, SubstsRef<'tcx>))\n                                                       -> bool\n {\n@@ -984,7 +984,7 @@ fn substitute_normalize_and_test_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n /// that come from `trait_ref`, including its supertraits.\n #[inline] // FIXME(#35870): avoid closures being unexported due to `impl Trait`.\n fn vtable_methods<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n     -> &'tcx [Option<(DefId, SubstsRef<'tcx>)>]\n {\n@@ -1207,16 +1207,16 @@ where\n \n     fn lift_ex_clause_to_tcx<'gcx>(\n         ex_clause: &chalk_engine::ExClause<Self>,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n     ) -> Option<Self::LiftedExClause>;\n \n     fn lift_delayed_literal_to_tcx<'gcx>(\n         ex_clause: &chalk_engine::DelayedLiteral<Self>,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n     ) -> Option<Self::LiftedDelayedLiteral>;\n \n     fn lift_literal_to_tcx<'gcx>(\n         ex_clause: &chalk_engine::Literal<Self>,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n     ) -> Option<Self::LiftedLiteral>;\n }"}, {"sha": "88961c1dc81f1211be874e736d61b20dd9997fe8", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -83,7 +83,7 @@ pub enum MethodViolationCode {\n     UndispatchableReceiver,\n }\n \n-impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx> {\n \n     /// Returns the object safety violations that affect\n     /// astconv -- currently, `Self` in supertraits. This is needed\n@@ -703,7 +703,7 @@ impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     }\n }\n \n-pub(super) fn is_object_safe_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub(super) fn is_object_safe_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                 trait_def_id: DefId) -> bool {\n     tcx.object_safety_violations(trait_def_id).is_empty()\n }"}, {"sha": "85af5efb424131cacb23fe3c17c3ca2d6a3f8eb0", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -35,7 +35,7 @@ impl OnUnimplementedNote {\n     }\n }\n \n-fn parse_error(tcx: TyCtxt<'_, '_, '_>, span: Span,\n+fn parse_error(tcx: TyCtxt<'_, '_>, span: Span,\n                message: &str,\n                label: &str,\n                note: Option<&str>)\n@@ -52,7 +52,7 @@ fn parse_error(tcx: TyCtxt<'_, '_, '_>, span: Span,\n }\n \n impl<'gcx, 'tcx> OnUnimplementedDirective {\n-    fn parse(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn parse(tcx: TyCtxt<'gcx, 'tcx>,\n                  trait_def_id: DefId,\n                  items: &[NestedMetaItem],\n                  span: Span,\n@@ -133,7 +133,7 @@ impl<'gcx, 'tcx> OnUnimplementedDirective {\n     }\n \n \n-    pub fn of_item(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn of_item(tcx: TyCtxt<'gcx, 'tcx>,\n                    trait_def_id: DefId,\n                    impl_def_id: DefId)\n                    -> Result<Option<Self>, ErrorReported>\n@@ -165,7 +165,7 @@ impl<'gcx, 'tcx> OnUnimplementedDirective {\n     }\n \n     pub fn evaluate(&self,\n-                    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                    tcx: TyCtxt<'gcx, 'tcx>,\n                     trait_ref: ty::TraitRef<'tcx>,\n                     options: &[(Symbol, Option<String>)])\n                     -> OnUnimplementedNote\n@@ -215,7 +215,7 @@ impl<'gcx, 'tcx> OnUnimplementedDirective {\n }\n \n impl<'gcx, 'tcx> OnUnimplementedFormatString {\n-    fn try_parse(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn try_parse(tcx: TyCtxt<'gcx, 'tcx>,\n                      trait_def_id: DefId,\n                      from: LocalInternedString,\n                      err_sp: Span)\n@@ -228,7 +228,7 @@ impl<'gcx, 'tcx> OnUnimplementedFormatString {\n \n     fn verify(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         trait_def_id: DefId,\n         span: Span,\n     ) -> Result<(), ErrorReported> {\n@@ -274,7 +274,7 @@ impl<'gcx, 'tcx> OnUnimplementedFormatString {\n \n     pub fn format(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         trait_ref: ty::TraitRef<'tcx>,\n         options: &FxHashMap<Symbol, String>,\n     ) -> String {"}, {"sha": "e997e4d9c31838f7bc3b6fc58fdfa2b4452e13f9", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -323,7 +323,7 @@ impl<'a, 'b, 'gcx, 'tcx> AssocTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n }\n \n impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssocTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n-    fn tcx<'c>(&'c self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'c>(&'c self) -> TyCtxt<'gcx, 'tcx> {\n         self.selcx.tcx()\n     }\n \n@@ -836,7 +836,7 @@ struct Progress<'tcx> {\n }\n \n impl<'tcx> Progress<'tcx> {\n-    fn error<'gcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Self {\n+    fn error<'gcx>(tcx: TyCtxt<'gcx, 'tcx>) -> Self {\n         Progress {\n             ty: tcx.types.err,\n             obligations: vec![],"}, {"sha": "e2cb5cb89d98a1d4dcb3d3db0ffb27588938fe63", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -87,7 +87,7 @@ pub struct DropckOutlivesResult<'tcx> {\n impl<'tcx> DropckOutlivesResult<'tcx> {\n     pub fn report_overflows(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         span: Span,\n         ty: Ty<'tcx>,\n     ) {\n@@ -106,7 +106,7 @@ impl<'tcx> DropckOutlivesResult<'tcx> {\n \n     pub fn into_kinds_reporting_overflows(\n         self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         span: Span,\n         ty: Ty<'tcx>,\n     ) -> Vec<Kind<'tcx>> {\n@@ -190,7 +190,7 @@ impl_stable_hash_for!(struct DtorckConstraint<'tcx> {\n ///\n /// Note also that `needs_drop` requires a \"global\" type (i.e., one\n /// with erased regions), but this function does not.\n-pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx, '_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n         // None of these types have a destructor and hence they do not\n         // require anything in particular to outlive the dtor's"}, {"sha": "86067a7c1d801be90dcea730ba0d5f9f1c194716", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -83,7 +83,7 @@ struct QueryNormalizer<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n }\n \n impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx> {\n-    fn tcx<'c>(&'c self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'c>(&'c self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "b9ca0363fc68999314130a1c3ca500b3e597e2e2", "filename": "src/librustc/traits/query/normalize_erasing_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -10,7 +10,7 @@\n use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n \n-impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx> {\n     /// Erase the regions in `value` and then fully normalize all the\n     /// types found within. The result will also have regions erased.\n     ///\n@@ -63,12 +63,12 @@ impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n }\n \n struct NormalizeAfterErasingRegionsFolder<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n impl TypeFolder<'tcx, 'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "c663a65659c55b83c8f29a1f92ef50b7b97be194", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -25,14 +25,14 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for AscribeUserType<'tcx>\n     type QueryResponse = ();\n \n     fn try_fast_path(\n-        _tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        _tcx: TyCtxt<'gcx, 'tcx>,\n         _key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse> {\n         None\n     }\n \n     fn perform_query(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, ()>> {\n         tcx.type_op_ascribe_user_type(canonicalized)"}, {"sha": "c431178bb2a29f5e9417d0b626fbebc8551dd9ec", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -18,7 +18,7 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n     type QueryResponse = ();\n \n     fn try_fast_path(\n-        _tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        _tcx: TyCtxt<'gcx, 'tcx>,\n         key: &ParamEnvAnd<'tcx, Eq<'tcx>>,\n     ) -> Option<Self::QueryResponse> {\n         if key.value.a == key.value.b {\n@@ -29,7 +29,7 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n     }\n \n     fn perform_query(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, ()>> {\n         tcx.type_op_eq(canonicalized)"}, {"sha": "762e09b03acad3b873a351c90c66e65a1784ff5f", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -18,14 +18,14 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ImpliedOutlivesBounds<\n     type QueryResponse = Vec<OutlivesBound<'tcx>>;\n \n     fn try_fast_path(\n-        _tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        _tcx: TyCtxt<'gcx, 'tcx>,\n         _key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse> {\n         None\n     }\n \n     fn perform_query(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self::QueryResponse>> {\n         // FIXME this `unchecked_map` is only necessary because the"}, {"sha": "1553d17e684fadceebac0d61f23a7df2eb33847c", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -53,7 +53,7 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>:\n     /// actually hits the tcx cache lookup etc. Return `Some(r)` with\n     /// a final result or `None` to do the full path.\n     fn try_fast_path(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse>;\n \n@@ -64,7 +64,7 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>:\n     /// bad, because it would create subregion relationships that are\n     /// not captured in the return value.\n     fn perform_query(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self::QueryResponse>>;\n "}, {"sha": "52a0c6042baf56211705fa47c5f2b81f9d15e6f1", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -24,7 +24,7 @@ where\n {\n     type QueryResponse = T;\n \n-    fn try_fast_path(_tcx: TyCtxt<'tcx, 'gcx, 'tcx>, key: &ParamEnvAnd<'tcx, Self>) -> Option<T> {\n+    fn try_fast_path(_tcx: TyCtxt<'gcx, 'tcx>, key: &ParamEnvAnd<'tcx, Self>) -> Option<T> {\n         if !key.value.value.has_projections() {\n             Some(key.value.value)\n         } else {\n@@ -33,7 +33,7 @@ where\n     }\n \n     fn perform_query(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self::QueryResponse>> {\n         T::type_op_method(tcx, canonicalized)\n@@ -48,7 +48,7 @@ where\n \n pub trait Normalizable<'gcx, 'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx> + Copy {\n     fn type_op_method(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>>;\n \n@@ -64,7 +64,7 @@ where\n     'gcx: 'tcx,\n {\n     fn type_op_method(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>> {\n         tcx.type_op_normalize_ty(canonicalized)\n@@ -82,7 +82,7 @@ where\n     'gcx: 'tcx,\n {\n     fn type_op_method(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>> {\n         tcx.type_op_normalize_predicate(canonicalized)\n@@ -100,7 +100,7 @@ where\n     'gcx: 'tcx,\n {\n     fn type_op_method(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>> {\n         tcx.type_op_normalize_poly_fn_sig(canonicalized)\n@@ -118,7 +118,7 @@ where\n     'gcx: 'tcx,\n {\n     fn type_op_method(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>> {\n         tcx.type_op_normalize_fn_sig(canonicalized)"}, {"sha": "56a051e08e7165c68d721a5cd4693867e75ffd37", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -22,7 +22,7 @@ where\n     type QueryResponse = DropckOutlivesResult<'tcx>;\n \n     fn try_fast_path(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse> {\n         if trivial_dropck_outlives(tcx, key.value.dropped_ty) {\n@@ -33,7 +33,7 @@ where\n     }\n \n     fn perform_query(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self::QueryResponse>> {\n         // Subtle: note that we are not invoking"}, {"sha": "64fcc73187cf0324d8813707e57658b6702aa927", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -17,7 +17,7 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n     type QueryResponse = ();\n \n     fn try_fast_path(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse> {\n         // Proving Sized, very often on \"obviously sized\" types like\n@@ -38,7 +38,7 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n     }\n \n     fn perform_query(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, ()>> {\n         tcx.type_op_prove_predicate(canonicalized)"}, {"sha": "a2f47211f48288914792fe3678d7b374c022ddeb", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -20,7 +20,7 @@ impl<'tcx> Subtype<'tcx> {\n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n     type QueryResponse = ();\n \n-    fn try_fast_path(_tcx: TyCtxt<'tcx, 'gcx, 'tcx>, key: &ParamEnvAnd<'tcx, Self>) -> Option<()> {\n+    fn try_fast_path(_tcx: TyCtxt<'gcx, 'tcx>, key: &ParamEnvAnd<'tcx, Self>) -> Option<()> {\n         if key.value.sub == key.value.sup {\n             Some(())\n         } else {\n@@ -29,7 +29,7 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n     }\n \n     fn perform_query(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, ()>> {\n         tcx.type_op_subtype(canonicalized)"}, {"sha": "57a361d469effc04f54f2ac4e325328492725b43", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -300,7 +300,7 @@ enum SelectionCandidate<'tcx> {\n \n impl<'a, 'tcx> ty::Lift<'tcx> for SelectionCandidate<'a> {\n     type Lifted = SelectionCandidate<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         Some(match *self {\n             BuiltinCandidate { has_nested } => BuiltinCandidate { has_nested },\n             ImplCandidate(def_id) => ImplCandidate(def_id),\n@@ -568,7 +568,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.infcx\n     }\n \n-    pub fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -3989,7 +3989,7 @@ impl<T: Clone> WithDepNode<T> {\n         }\n     }\n \n-    pub fn get(&self, tcx: TyCtxt<'_, '_, '_>) -> T {\n+    pub fn get(&self, tcx: TyCtxt<'_, '_>) -> T {\n         tcx.dep_graph.read_index(self.dep_node);\n         self.cached_value.clone()\n     }"}, {"sha": "d395f7199fb2cc560a63d890487f3be74134d21a", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -110,7 +110,7 @@ pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n /// that impl, a less specialized impl, or the trait default,\n /// whichever applies.\n pub fn find_associated_item<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     item: &ty::AssocItem,\n     substs: SubstsRef<'tcx>,\n@@ -149,7 +149,7 @@ pub fn find_associated_item<'tcx>(\n /// Specialization is determined by the sets of types to which the impls apply;\n /// `impl1` specializes `impl2` if it applies to a subset of the types `impl2` applies\n /// to.\n-pub(super) fn specializes<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub(super) fn specializes<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                     (impl1_def_id, impl2_def_id): (DefId, DefId))\n     -> bool\n {\n@@ -286,7 +286,7 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n \n // Query provider for `specialization_graph_of`.\n pub(super) fn specialization_graph_provider<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     trait_id: DefId,\n ) -> &'tcx specialization_graph::Graph {\n     let mut sg = specialization_graph::Graph::new();\n@@ -390,7 +390,7 @@ pub(super) fn specialization_graph_provider<'tcx>(\n \n /// Recovers the \"impl X for Y\" signature from `impl_def_id` and returns it as a\n /// string.\n-fn to_pretty_impl_header(tcx: TyCtxt<'_, '_, '_>, impl_def_id: DefId) -> Option<String> {\n+fn to_pretty_impl_header(tcx: TyCtxt<'_, '_>, impl_def_id: DefId) -> Option<String> {\n     use std::fmt::Write;\n \n     let trait_ref = if let Some(tr) = tcx.impl_trait_ref(impl_def_id) {"}, {"sha": "89116fac7303bcb2870eac14c6916b27b0093b70", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -84,7 +84,7 @@ enum Inserted {\n impl<'gcx, 'tcx> Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n     fn insert_blindly(&mut self,\n-                      tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                      tcx: TyCtxt<'gcx, 'tcx>,\n                       impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         if let Some(sty) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n@@ -100,7 +100,7 @@ impl<'gcx, 'tcx> Children {\n     /// an impl with a parent. The impl must be present in the list of\n     /// children already.\n     fn remove_existing(&mut self,\n-                      tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                      tcx: TyCtxt<'gcx, 'tcx>,\n                       impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let vec: &mut Vec<DefId>;\n@@ -119,7 +119,7 @@ impl<'gcx, 'tcx> Children {\n     /// Attempt to insert an impl into this set of children, while comparing for\n     /// specialization relationships.\n     fn insert(&mut self,\n-              tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+              tcx: TyCtxt<'gcx, 'tcx>,\n               impl_def_id: DefId,\n               simplified_self: Option<SimplifiedType>)\n               -> Result<Inserted, OverlapError>\n@@ -294,7 +294,7 @@ impl<'gcx, 'tcx> Graph {\n     /// conflicts with it (has overlap, but neither specializes the other),\n     /// information about the area of overlap is returned in the `Err`.\n     pub fn insert(&mut self,\n-                  tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                  tcx: TyCtxt<'gcx, 'tcx>,\n                   impl_def_id: DefId)\n                   -> Result<Option<FutureCompatOverlapError>, OverlapError> {\n         assert!(impl_def_id.is_local());\n@@ -387,7 +387,7 @@ impl<'gcx, 'tcx> Graph {\n \n     /// Insert cached metadata mapping from a child impl back to its parent.\n     pub fn record_impl_from_cstore(&mut self,\n-                                   tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                                   tcx: TyCtxt<'gcx, 'tcx>,\n                                    parent: DefId,\n                                    child: DefId) {\n         if self.parent.insert(child, parent).is_some() {\n@@ -425,7 +425,7 @@ impl<'gcx, 'tcx> Node {\n     /// Iterate over the items defined directly by the given (impl or trait) node.\n     pub fn items(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n     ) -> ty::AssocItemsIterator<'gcx, 'tcx> {\n         tcx.associated_items(self.def_id())\n     }\n@@ -482,7 +482,7 @@ impl<'gcx, 'tcx> Ancestors<'gcx> {\n     #[inline]\n     pub fn defs(\n         self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         trait_item_name: Ident,\n         trait_item_kind: ty::AssocKind,\n         trait_def_id: DefId,\n@@ -508,7 +508,7 @@ impl<'gcx, 'tcx> Ancestors<'gcx> {\n \n /// Walk up the specialization ancestors of a given impl, starting with that\n /// impl itself.\n-pub fn ancestors(tcx: TyCtxt<'_, 'tcx, '_>,\n+pub fn ancestors(tcx: TyCtxt<'tcx, '_>,\n                  trait_def_id: DefId,\n                  start_from_impl: DefId)\n                  -> Ancestors<'tcx> {"}, {"sha": "e919f0ed2b4d6ec8a9f53cb9a4f76048920276a6", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -446,7 +446,7 @@ impl<'tcx> fmt::Display for traits::Clause<'tcx> {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> {\n     type Lifted = traits::SelectionError<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             super::Unimplemented => Some(super::Unimplemented),\n             super::OutputTypeParameterMismatch(a, b, ref err) => {\n@@ -464,7 +464,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n     type Lifted = traits::ObligationCauseCode<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             super::ReturnNoExpression => Some(super::ReturnNoExpression),\n             super::MiscObligation => Some(super::MiscObligation),\n@@ -546,7 +546,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::DerivedObligationCause<'a> {\n     type Lifted = traits::DerivedObligationCause<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.parent_trait_ref).and_then(|trait_ref|\n             tcx.lift(&*self.parent_code)\n                .map(|code| traits::DerivedObligationCause {\n@@ -559,7 +559,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::DerivedObligationCause<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCause<'a> {\n     type Lifted = traits::ObligationCause<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.code).map(|code| traits::ObligationCause {\n             span: self.span,\n             body_id: self.body_id,\n@@ -571,7 +571,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCause<'a> {\n // For codegen only.\n impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n     type Lifted = traits::Vtable<'tcx, ()>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match self.clone() {\n             traits::VtableImpl(traits::VtableImplData {\n                 impl_def_id,\n@@ -691,7 +691,7 @@ EnumLiftImpl! {\n \n impl<'a, 'tcx> Lift<'tcx> for traits::Environment<'a> {\n     type Lifted = traits::Environment<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.clauses).map(|clauses| {\n             traits::Environment {\n                 clauses,\n@@ -702,7 +702,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Environment<'a> {\n \n impl<'a, 'tcx, G: Lift<'tcx>> Lift<'tcx> for traits::InEnvironment<'a, G> {\n     type Lifted = traits::InEnvironment<'tcx, G::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.environment).and_then(|environment| {\n             tcx.lift(&self.goal).map(|goal| {\n                 traits::InEnvironment {\n@@ -721,7 +721,7 @@ where\n {\n     type Lifted = C::LiftedExClause;\n \n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         <C as traits::ChalkContextLift>::lift_ex_clause_to_tcx(self, tcx)\n     }\n }\n@@ -733,7 +733,7 @@ where\n {\n     type Lifted = C::LiftedDelayedLiteral;\n \n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         <C as traits::ChalkContextLift>::lift_delayed_literal_to_tcx(self, tcx)\n     }\n }\n@@ -745,7 +745,7 @@ where\n {\n     type Lifted = C::LiftedLiteral;\n \n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         <C as traits::ChalkContextLift>::lift_literal_to_tcx(self, tcx)\n     }\n }"}, {"sha": "ef4f6472c87ec3b9ecdcee539089b944316b4037", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -12,7 +12,7 @@ use crate::util::nodemap::FxHashSet;\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n \n-fn anonymize_predicate<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn anonymize_predicate<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                        pred: &ty::Predicate<'tcx>)\n                                        -> ty::Predicate<'tcx> {\n     match *pred {\n@@ -46,12 +46,12 @@ fn anonymize_predicate<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n }\n \n struct PredicateSet<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     set: FxHashSet<ty::Predicate<'tcx>>,\n }\n \n impl PredicateSet<'gcx, 'tcx> {\n-    fn new(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Self {\n+    fn new(tcx: TyCtxt<'gcx, 'tcx>) -> Self {\n         Self { tcx: tcx, set: Default::default() }\n     }\n \n@@ -94,15 +94,15 @@ pub struct Elaborator<'gcx, 'tcx> {\n }\n \n pub fn elaborate_trait_ref<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n     -> Elaborator<'gcx, 'tcx>\n {\n     elaborate_predicates(tcx, vec![trait_ref.to_predicate()])\n }\n \n pub fn elaborate_trait_refs<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>)\n     -> Elaborator<'gcx, 'tcx>\n {\n@@ -111,7 +111,7 @@ pub fn elaborate_trait_refs<'gcx, 'tcx>(\n }\n \n pub fn elaborate_predicates<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     mut predicates: Vec<ty::Predicate<'tcx>>)\n     -> Elaborator<'gcx, 'tcx>\n {\n@@ -256,13 +256,13 @@ impl Iterator for Elaborator<'gcx, 'tcx> {\n \n pub type Supertraits<'gcx, 'tcx> = FilterToTraits<Elaborator<'gcx, 'tcx>>;\n \n-pub fn supertraits<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn supertraits<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                     trait_ref: ty::PolyTraitRef<'tcx>)\n                                     -> Supertraits<'gcx, 'tcx> {\n     elaborate_trait_ref(tcx, trait_ref).filter_to_traits()\n }\n \n-pub fn transitive_bounds<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn transitive_bounds<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                           bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>)\n                                           -> Supertraits<'gcx, 'tcx> {\n     elaborate_trait_refs(tcx, bounds).filter_to_traits()\n@@ -281,7 +281,7 @@ pub fn transitive_bounds<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n /// Expansion is done via a DFS (depth-first search), and the `visited` field\n /// is used to avoid cycles.\n pub struct TraitAliasExpander<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     stack: Vec<TraitAliasExpansionInfo<'tcx>>,\n }\n \n@@ -338,7 +338,7 @@ impl<'tcx> TraitAliasExpansionInfo<'tcx> {\n }\n \n pub fn expand_trait_aliases<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     trait_refs: impl IntoIterator<Item = (ty::PolyTraitRef<'tcx>, Span)>\n ) -> TraitAliasExpander<'gcx, 'tcx> {\n     let items: Vec<_> = trait_refs\n@@ -415,12 +415,12 @@ impl<'gcx, 'tcx> Iterator for TraitAliasExpander<'gcx, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n \n pub struct SupertraitDefIds<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     stack: Vec<DefId>,\n     visited: FxHashSet<DefId>,\n }\n \n-pub fn supertrait_def_ids<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn supertrait_def_ids<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                            trait_def_id: DefId)\n                                            -> SupertraitDefIds<'gcx, 'tcx>\n {\n@@ -552,7 +552,7 @@ pub fn predicate_for_trait_ref<'tcx>(\n     }\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     pub fn predicate_for_trait_def(self,\n                                    param_env: ty::ParamEnv<'tcx>,\n                                    cause: ObligationCause<'tcx>,"}, {"sha": "38a85c21963cee99e741e10e3eb5f5dea4ed0985", "filename": "src/librustc/ty/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2F_match.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -20,18 +20,18 @@ use crate::mir::interpret::ConstValue;\n /// important thing about the result is Ok/Err. Also, matching never\n /// affects any type variables or unification state.\n pub struct Match<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>\n+    tcx: TyCtxt<'gcx, 'tcx>\n }\n \n impl Match<'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Match<'gcx, 'tcx> {\n+    pub fn new(tcx: TyCtxt<'gcx, 'tcx>) -> Match<'gcx, 'tcx> {\n         Match { tcx }\n     }\n }\n \n impl TypeRelation<'gcx, 'tcx> for Match<'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Match\" }\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.tcx }\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> { self.tcx }\n     fn a_is_expected(&self) -> bool { true } // irrelevant\n \n     fn relate_with_variance<T: Relate<'tcx>>(&mut self,"}, {"sha": "d5fe1060851609d97536606cef8c3f1a3850af3e", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -104,7 +104,7 @@ pub struct OverloadedDeref<'tcx> {\n }\n \n impl<'gcx, 'tcx> OverloadedDeref<'tcx> {\n-    pub fn method_call(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, source: Ty<'tcx>)\n+    pub fn method_call(&self, tcx: TyCtxt<'gcx, 'tcx>, source: Ty<'tcx>)\n                        -> (DefId, SubstsRef<'tcx>) {\n         let trait_def_id = match self.mutbl {\n             hir::MutImmutable => tcx.lang_items().deref_trait(),"}, {"sha": "3561a647d5e54920beeb160662353602c0b33275", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -108,7 +108,7 @@ pub fn encode_predicates<'tcx, E, C>(encoder: &mut E,\n }\n \n pub trait TyDecoder<'tcx>: Decoder {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx>;\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx>;\n \n     fn peek_byte(&self) -> u8;\n "}, {"sha": "466cb353c85e4a7981a1f1576b6af6beda9754a2", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -6,7 +6,7 @@ use syntax_pos::symbol::{sym, Symbol};\n use crate::hir::map::blocks::FnLikeNode;\n use syntax::attr;\n \n-impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx> {\n     /// Whether the `def_id` counts as const fn in your current crate, considering all active\n     /// feature gates\n     pub fn is_const_fn(self, def_id: DefId) -> bool {\n@@ -69,7 +69,7 @@ impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n \n pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n     /// only checks whether the function has a `const` modifier\n-    fn is_const_fn_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    fn is_const_fn_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> bool {\n         let hir_id = tcx.hir().as_local_hir_id(def_id)\n                               .expect(\"Non-local call to local provider is_const_fn\");\n \n@@ -83,7 +83,7 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         }\n     }\n \n-    fn is_promotable_const_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    fn is_promotable_const_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> bool {\n         tcx.is_const_fn(def_id) && match tcx.lookup_stability(def_id) {\n             Some(stab) => {\n                 if cfg!(debug_assertions) && stab.promotable {\n@@ -101,7 +101,7 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         }\n     }\n \n-    fn const_fn_is_allowed_fn_ptr<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    fn const_fn_is_allowed_fn_ptr<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> bool {\n         tcx.is_const_fn(def_id) &&\n             tcx.lookup_stability(def_id)\n                 .map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)"}, {"sha": "106637a5b20414904a1fae7d35a62ac0591f318b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -1016,13 +1016,13 @@ pub struct FreeRegionInfo {\n ///\n /// [rustc guide]: https://rust-lang.github.io/rustc-guide/ty.html\n #[derive(Copy, Clone)]\n-pub struct TyCtxt<'a, 'gcx: 'tcx, 'tcx: 'a> {\n+pub struct TyCtxt<'gcx: 'tcx, 'tcx> {\n     gcx: &'gcx GlobalCtxt<'gcx>,\n     interners: &'gcx CtxtInterners<'gcx>,\n-    dummy: PhantomData<(&'a (), &'tcx ())>,\n+    dummy: PhantomData<&'tcx ()>,\n }\n \n-impl<'gcx> Deref for TyCtxt<'_, 'gcx, '_> {\n+impl<'gcx> Deref for TyCtxt<'gcx, '_> {\n     type Target = &'gcx GlobalCtxt<'gcx>;\n     #[inline(always)]\n     fn deref(&self) -> &Self::Target {\n@@ -1119,10 +1119,10 @@ pub struct GlobalCtxt<'tcx> {\n     output_filenames: Arc<OutputFilenames>,\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     /// Gets the global `TyCtxt`.\n     #[inline]\n-    pub fn global_tcx(self) -> TyCtxt<'gcx, 'gcx, 'gcx> {\n+    pub fn global_tcx(self) -> TyCtxt<'gcx, 'gcx> {\n         TyCtxt {\n             gcx: self.gcx,\n             interners: &self.gcx.global_interners,\n@@ -1666,7 +1666,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx> {\n     pub fn encode_metadata(self)\n         -> EncodedMetadata\n     {\n@@ -1683,7 +1683,7 @@ impl<'gcx> GlobalCtxt<'gcx> {\n         f: F\n     ) -> R\n     where\n-        F: FnOnce(TyCtxt<'tcx, 'gcx, 'tcx>) -> R,\n+        F: FnOnce(TyCtxt<'gcx, 'tcx>) -> R,\n         'gcx: 'tcx,\n     {\n         let tcx = TyCtxt {\n@@ -1725,15 +1725,15 @@ impl<'gcx> GlobalCtxt<'gcx> {\n /// e.g., `()` or `u8`, was interned in a different context.\n pub trait Lift<'tcx>: fmt::Debug {\n     type Lifted: fmt::Debug + 'tcx;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted>;\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted>;\n }\n \n \n macro_rules! nop_lift {\n     ($ty:ty => $lifted:ty) => {\n         impl<'a, 'tcx> Lift<'tcx> for $ty {\n             type Lifted = $lifted;\n-            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n                 if tcx.interners.arena.in_arena(*self as *const _) {\n                     return Some(unsafe { mem::transmute(*self) });\n                 }\n@@ -1752,7 +1752,7 @@ macro_rules! nop_list_lift {\n     ($ty:ty => $lifted:ty) => {\n         impl<'a, 'tcx> Lift<'tcx> for &'a List<$ty> {\n             type Lifted = &'tcx List<$lifted>;\n-            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+            fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n                 if self.is_empty() {\n                     return Some(List::empty());\n                 }\n@@ -1815,7 +1815,7 @@ pub mod tls {\n     pub struct ImplicitCtxt<'a, 'gcx: 'tcx, 'tcx> {\n         /// The current TyCtxt. Initially created by `enter_global` and updated\n         /// by `enter_local` with a new local interner\n-        pub tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        pub tcx: TyCtxt<'gcx, 'tcx>,\n \n         /// The current query job, if any. This is updated by JobOwner::start in\n         /// ty::query::plumbing when executing a query\n@@ -1941,7 +1941,7 @@ pub mod tls {\n     /// This happens once per rustc session and TyCtxts only exists\n     /// inside the `f` function.\n     pub fn enter_global<'gcx, F, R>(gcx: &'gcx GlobalCtxt<'gcx>, f: F) -> R\n-        where F: FnOnce(TyCtxt<'gcx, 'gcx, 'gcx>) -> R\n+        where F: FnOnce(TyCtxt<'gcx, 'gcx>) -> R\n     {\n         // Update GCX_PTR to indicate there's a GlobalCtxt available\n         GCX_PTR.with(|lock| {\n@@ -1978,7 +1978,7 @@ pub mod tls {\n     /// Creates a TyCtxt and ImplicitCtxt based on the GCX_PTR thread local.\n     /// This is used in the deadlock handler.\n     pub unsafe fn with_global<F, R>(f: F) -> R\n-        where F: for<'gcx, 'tcx> FnOnce(TyCtxt<'tcx, 'gcx, 'tcx>) -> R\n+        where F: for<'gcx, 'tcx> FnOnce(TyCtxt<'gcx, 'tcx>) -> R\n     {\n         let gcx = GCX_PTR.with(|lock| *lock.lock());\n         assert!(gcx != 0);\n@@ -2030,7 +2030,7 @@ pub mod tls {\n     /// This will panic if you pass it a TyCtxt which has a different global interner from\n     /// the current ImplicitCtxt's tcx field.\n     #[inline]\n-    pub fn with_related_context<'gcx, 'tcx1, F, R>(tcx: TyCtxt<'tcx1, 'gcx, 'tcx1>, f: F) -> R\n+    pub fn with_related_context<'gcx, 'tcx1, F, R>(tcx: TyCtxt<'gcx, 'tcx1>, f: F) -> R\n         where F: for<'b, 'tcx2> FnOnce(&ImplicitCtxt<'b, 'gcx, 'tcx2>) -> R\n     {\n         with_context(|context| {\n@@ -2048,7 +2048,7 @@ pub mod tls {\n     /// This will panic if you pass it a TyCtxt which has a different global interner or\n     /// a different local interner from the current ImplicitCtxt's tcx field.\n     #[inline]\n-    pub fn with_fully_related_context<'gcx, 'tcx, F, R>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>, f: F) -> R\n+    pub fn with_fully_related_context<'gcx, 'tcx, F, R>(tcx: TyCtxt<'gcx, 'tcx>, f: F) -> R\n         where F: for<'b> FnOnce(&ImplicitCtxt<'b, 'gcx, 'tcx>) -> R\n     {\n         with_context(|context| {\n@@ -2065,7 +2065,7 @@ pub mod tls {\n     /// Panics if there is no ImplicitCtxt available\n     #[inline]\n     pub fn with<F, R>(f: F) -> R\n-        where F: for<'gcx, 'tcx> FnOnce(TyCtxt<'tcx, 'gcx, 'tcx>) -> R\n+        where F: for<'gcx, 'tcx> FnOnce(TyCtxt<'gcx, 'tcx>) -> R\n     {\n         with_context(|context| f(context.tcx))\n     }\n@@ -2074,7 +2074,7 @@ pub mod tls {\n     /// The closure is passed None if there is no ImplicitCtxt available\n     #[inline]\n     pub fn with_opt<F, R>(f: F) -> R\n-        where F: for<'gcx, 'tcx> FnOnce(Option<TyCtxt<'tcx, 'gcx, 'tcx>>) -> R\n+        where F: for<'gcx, 'tcx> FnOnce(Option<TyCtxt<'gcx, 'tcx>>) -> R\n     {\n         with_context_opt(|opt_context| f(opt_context.map(|context| context.tcx)))\n     }\n@@ -2098,7 +2098,7 @@ macro_rules! sty_debug_print {\n                 all_infer: usize,\n             }\n \n-            pub fn go(tcx: TyCtxt<'_, '_, '_>) {\n+            pub fn go(tcx: TyCtxt<'_, '_>) {\n                 let mut total = DebugStat {\n                     total: 0,\n                     lt_infer: 0,\n@@ -2151,7 +2151,7 @@ macro_rules! sty_debug_print {\n     }}\n }\n \n-impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx> {\n     pub fn print_debug_stats(self) {\n         sty_debug_print!(\n             self,\n@@ -2290,7 +2290,7 @@ macro_rules! intern_method {\n                                             $alloc_method:expr,\n                                             $alloc_to_key:expr,\n                                             $keep_in_local_tcx:expr) -> $ty:ty) => {\n-        impl<'a, 'gcx, $lt_tcx> TyCtxt<'a, 'gcx, $lt_tcx> {\n+        impl<'gcx, $lt_tcx> TyCtxt<'gcx, $lt_tcx> {\n             pub fn $method(self, v: $alloc) -> &$lt_tcx $ty {\n                 let key = ($alloc_to_key)(&v);\n \n@@ -2400,7 +2400,7 @@ intern_method! {\n     ) -> List<CanonicalVarInfo>\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     /// Given a `fn` type, returns an equivalent `unsafe fn` type;\n     /// that is, a `fn` type that is equivalent in every way for being\n     /// unsafe."}, {"sha": "330343c250c66f328c0ad5a9c90943b72d5b60c8", "filename": "src/librustc/ty/erase_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferase_regions.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -8,13 +8,13 @@ pub(super) fn provide(providers: &mut ty::query::Providers<'_>) {\n     };\n }\n \n-fn erase_regions_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n+fn erase_regions_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n     // N.B., use `super_fold_with` here. If we used `fold_with`, it\n     // could invoke the `erase_regions_ty` query recursively.\n     ty.super_fold_with(&mut RegionEraserVisitor { tcx })\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     /// Returns an equivalent value with all free regions removed (note\n     /// that late-bound regions remain, because they are important for\n     /// subtyping, but they are anonymized and normalized as well)..\n@@ -33,11 +33,11 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n }\n \n struct RegionEraserVisitor<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n }\n \n impl TypeFolder<'gcx, 'tcx> for RegionEraserVisitor<'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "000e0854f4e974b22c06084edb1966e98d6a76d1", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n }\n \n impl<'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n-    pub fn sort_string(&self, tcx: TyCtxt<'lcx, 'gcx, 'lcx>) -> Cow<'static, str> {\n+    pub fn sort_string(&self, tcx: TyCtxt<'gcx, 'lcx>) -> Cow<'static, str> {\n         match self.sty {\n             ty::Bool | ty::Char | ty::Int(_) |\n             ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => self.to_string().into(),\n@@ -249,7 +249,7 @@ impl<'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     pub fn note_and_explain_type_err(self,\n                                      db: &mut DiagnosticBuilder<'_>,\n                                      err: &TypeError<'tcx>,"}, {"sha": "238865c866e502eb8f111a10245c3d3ee9cc1561", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -55,7 +55,7 @@ pub enum SimplifiedTypeGen<D>\n /// then we can't say much about whether two types would unify. Put another way,\n /// `can_simplify_params` should be true if type parameters appear free in `ty` and `false` if they\n /// are to be considered bound.\n-pub fn simplify_type<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub fn simplify_type<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                      ty: Ty<'_>,\n                                      can_simplify_params: bool)\n                                      -> Option<SimplifiedType>"}, {"sha": "00ef9446fb1947edbc01e7cc9bba230e9f2093ed", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -156,7 +156,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n /// identity fold, it should invoke `foo.fold_with(self)` to fold each\n /// sub-item.\n pub trait TypeFolder<'gcx: 'tcx, 'tcx> : Sized {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'gcx, 'tcx>;\n+    fn tcx<'a>(&'a self) -> TyCtxt<'gcx, 'tcx>;\n \n     fn fold_binder<T>(&mut self, t: &Binder<T>) -> Binder<T>\n         where T : TypeFoldable<'tcx>\n@@ -203,7 +203,7 @@ pub struct BottomUpFolder<'gcx, 'tcx, F, G, H>\n           G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n           H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,\n {\n-    pub tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub tcx: TyCtxt<'gcx, 'tcx>,\n     pub ty_op: F,\n     pub lt_op: G,\n     pub ct_op: H,\n@@ -214,7 +214,7 @@ impl<'gcx, 'tcx, F, G, H> TypeFolder<'gcx, 'tcx> for BottomUpFolder<'gcx, 'tcx,\n           G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n           H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,\n {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.tcx }\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> { self.tcx }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let t = ty.super_fold_with(self);\n@@ -235,7 +235,7 @@ impl<'gcx, 'tcx, F, G, H> TypeFolder<'gcx, 'tcx> for BottomUpFolder<'gcx, 'tcx,\n ///////////////////////////////////////////////////////////////////////////\n // Region folder\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     /// Collects the free and escaping regions in `value` into `region_set`. Returns\n     /// whether any late-bound regions were skipped\n     pub fn collect_regions<T>(self,\n@@ -362,7 +362,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n /// visited by `fld_r`.\n \n pub struct RegionFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     skipped_regions: &'a mut bool,\n \n     /// Stores the index of a binder *just outside* the stuff we have\n@@ -382,7 +382,7 @@ pub struct RegionFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n impl<'a, 'gcx, 'tcx> RegionFolder<'a, 'gcx, 'tcx> {\n     #[inline]\n     pub fn new(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         skipped_regions: &'a mut bool,\n         fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n     ) -> RegionFolder<'a, 'gcx, 'tcx> {\n@@ -396,7 +396,7 @@ impl<'a, 'gcx, 'tcx> RegionFolder<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFolder<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.tcx }\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> { self.tcx }\n \n     fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> {\n         self.current_index.shift_in(1);\n@@ -427,7 +427,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFolder<'a, 'gcx, 'tcx> {\n \n /// Replaces the escaping bound vars (late bound regions or bound types) in a type.\n struct BoundVarReplacer<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n \n     /// As with `RegionFolder`, represents the index of a binder *just outside*\n     /// the ones we have visited.\n@@ -440,7 +440,7 @@ struct BoundVarReplacer<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> BoundVarReplacer<'a, 'gcx, 'tcx> {\n     fn new<F, G, H>(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         fld_r: &'a mut F,\n         fld_t: &'a mut G,\n         fld_c: &'a mut H,\n@@ -460,7 +460,7 @@ impl<'a, 'gcx, 'tcx> BoundVarReplacer<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for BoundVarReplacer<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.tcx }\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> { self.tcx }\n \n     fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> {\n         self.current_index.shift_in(1);\n@@ -542,7 +542,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for BoundVarReplacer<'a, 'gcx, 'tcx>\n     }\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     /// Replaces all regions bound by the given `Binder` with the\n     /// results returned by the closure; the closure is expected to\n     /// return a free region (relative to this binder), and hence the\n@@ -723,14 +723,14 @@ enum Direction {\n }\n \n struct Shifter<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     current_index: ty::DebruijnIndex,\n     amount: u32,\n     direction: Direction,\n }\n \n impl Shifter<'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'gcx, 'tcx>, amount: u32, direction: Direction) -> Self {\n+    pub fn new(tcx: TyCtxt<'gcx, 'tcx>, amount: u32, direction: Direction) -> Self {\n         Shifter {\n             tcx,\n             current_index: ty::INNERMOST,\n@@ -741,7 +741,7 @@ impl Shifter<'gcx, 'tcx> {\n }\n \n impl TypeFolder<'gcx, 'tcx> for Shifter<'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.tcx }\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> { self.tcx }\n \n     fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> {\n         self.current_index.shift_in(1);\n@@ -818,7 +818,7 @@ impl TypeFolder<'gcx, 'tcx> for Shifter<'gcx, 'tcx> {\n }\n \n pub fn shift_region<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     region: ty::Region<'tcx>,\n     amount: u32\n ) -> ty::Region<'tcx> {\n@@ -833,7 +833,7 @@ pub fn shift_region<'gcx, 'tcx>(\n }\n \n pub fn shift_vars<'gcx, 'tcx, T>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     value: &T,\n     amount: u32\n ) -> T where T: TypeFoldable<'tcx> {\n@@ -844,7 +844,7 @@ pub fn shift_vars<'gcx, 'tcx, T>(\n }\n \n pub fn shift_out_vars<'gcx, 'tcx, T>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     value: &T,\n     amount: u32\n ) -> T where T: TypeFoldable<'tcx> {"}, {"sha": "0573249e57c9abf5fdd4ad1eb238cf1a91055a1d", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -32,7 +32,7 @@ impl<'gcx, 'tcx> DefIdForest {\n     /// Creates a forest consisting of a single tree representing the entire\n     /// crate.\n     #[inline]\n-    pub fn full(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> DefIdForest {\n+    pub fn full(tcx: TyCtxt<'gcx, 'tcx>) -> DefIdForest {\n         let crate_id = tcx.hir().local_def_id(CRATE_NODE_ID);\n         DefIdForest::from_id(crate_id)\n     }\n@@ -53,14 +53,14 @@ impl<'gcx, 'tcx> DefIdForest {\n \n     /// Tests whether the forest contains a given DefId.\n     pub fn contains(&self,\n-                    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                    tcx: TyCtxt<'gcx, 'tcx>,\n                     id: DefId) -> bool\n     {\n         self.root_ids.iter().any(|root_id| tcx.is_descendant_of(id, *root_id))\n     }\n \n     /// Calculate the intersection of a collection of forests.\n-    pub fn intersection<I>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn intersection<I>(tcx: TyCtxt<'gcx, 'tcx>,\n                            iter: I) -> DefIdForest\n             where I: IntoIterator<Item=DefIdForest>\n     {\n@@ -97,7 +97,7 @@ impl<'gcx, 'tcx> DefIdForest {\n     }\n \n     /// Calculate the union of a collection of forests.\n-    pub fn union<I>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn union<I>(tcx: TyCtxt<'gcx, 'tcx>,\n                     iter: I) -> DefIdForest\n             where I: IntoIterator<Item=DefIdForest>\n     {"}, {"sha": "54558fd6561ac9564a348be15d737c95879120d2", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -51,7 +51,7 @@ mod def_id_forest;\n // This code should only compile in modules where the uninhabitedness of Foo is\n // visible.\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     /// Checks whether a type is visibly uninhabited from a particular module.\n     /// # Example\n     /// ```rust\n@@ -110,7 +110,7 @@ impl<'gcx, 'tcx> AdtDef {\n     /// Calculate the forest of DefIds from which this adt is visibly uninhabited.\n     fn uninhabited_from(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         substs: SubstsRef<'tcx>) -> DefIdForest\n     {\n         // Non-exhaustive ADTs from other crates are always considered inhabited.\n@@ -128,7 +128,7 @@ impl<'gcx, 'tcx> VariantDef {\n     /// Calculate the forest of DefIds from which this variant is visibly uninhabited.\n     pub fn uninhabited_from(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         substs: SubstsRef<'tcx>,\n         adt_kind: AdtKind) -> DefIdForest\n     {\n@@ -154,7 +154,7 @@ impl<'gcx, 'tcx> FieldDef {\n     /// Calculate the forest of DefIds from which this field is visibly uninhabited.\n     fn uninhabited_from(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         substs: SubstsRef<'tcx>,\n         is_enum: bool,\n     ) -> DefIdForest {\n@@ -182,7 +182,7 @@ impl<'gcx, 'tcx> FieldDef {\n \n impl<'gcx, 'tcx> TyS<'tcx> {\n     /// Calculate the forest of DefIds from which this type is visibly uninhabited.\n-    fn uninhabited_from(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> DefIdForest\n+    fn uninhabited_from(&self, tcx: TyCtxt<'gcx, 'tcx>) -> DefIdForest\n     {\n         match self.sty {\n             Adt(def, substs) => def.uninhabited_from(tcx, substs),"}, {"sha": "a48f88220f417ee97bef4e77568e2dc016f29562", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -44,7 +44,7 @@ pub enum InstanceDef<'tcx> {\n \n impl<'tcx> Instance<'tcx> {\n     pub fn ty(&self,\n-              tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+              tcx: TyCtxt<'tcx, 'tcx>)\n               -> Ty<'tcx>\n     {\n         let ty = tcx.type_of(self.def.def_id());\n@@ -55,7 +55,7 @@ impl<'tcx> Instance<'tcx> {\n         )\n     }\n \n-    fn fn_sig_noadjust(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> PolyFnSig<'tcx> {\n+    fn fn_sig_noadjust(&self, tcx: TyCtxt<'tcx, 'tcx>) -> PolyFnSig<'tcx> {\n         let ty = self.ty(tcx);\n         match ty.sty {\n             ty::FnDef(..) |\n@@ -105,7 +105,7 @@ impl<'tcx> Instance<'tcx> {\n         }\n     }\n \n-    pub fn fn_sig(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> ty::PolyFnSig<'tcx> {\n+    pub fn fn_sig(&self, tcx: TyCtxt<'tcx, 'tcx>) -> ty::PolyFnSig<'tcx> {\n         let mut fn_sig = self.fn_sig_noadjust(tcx);\n         if let InstanceDef::VtableShim(..) = self.def {\n             // Modify fn(self, ...) to fn(self: *mut Self, ...)\n@@ -136,13 +136,13 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n \n     #[inline]\n-    pub fn attrs(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n+    pub fn attrs(&self, tcx: TyCtxt<'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())\n     }\n \n     pub fn is_inline(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>\n+        tcx: TyCtxt<'tcx, 'tcx>\n     ) -> bool {\n         use crate::hir::map::DefPathData;\n         let def_id = match *self {\n@@ -158,7 +158,7 @@ impl<'tcx> InstanceDef<'tcx> {\n \n     pub fn requires_local(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>\n+        tcx: TyCtxt<'tcx, 'tcx>\n     ) -> bool {\n         if self.is_inline(tcx) {\n             return true\n@@ -218,7 +218,7 @@ impl<'b, 'tcx> Instance<'tcx> {\n         Instance { def: InstanceDef::Item(def_id), substs: substs }\n     }\n \n-    pub fn mono(tcx: TyCtxt<'b, 'tcx, 'b>, def_id: DefId) -> Instance<'tcx> {\n+    pub fn mono(tcx: TyCtxt<'tcx, 'b>, def_id: DefId) -> Instance<'tcx> {\n         Instance::new(def_id, tcx.global_tcx().empty_substs_for_def_id(def_id))\n     }\n \n@@ -245,7 +245,7 @@ impl<'b, 'tcx> Instance<'tcx> {\n     /// Presuming that coherence and type-check have succeeded, if this method is invoked\n     /// in a monomorphic context (i.e., like during codegen), then it is guaranteed to return\n     /// `Some`.\n-    pub fn resolve(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn resolve(tcx: TyCtxt<'tcx, 'tcx>,\n                    param_env: ty::ParamEnv<'tcx>,\n                    def_id: DefId,\n                    substs: SubstsRef<'tcx>) -> Option<Instance<'tcx>> {\n@@ -297,7 +297,7 @@ impl<'b, 'tcx> Instance<'tcx> {\n         result\n     }\n \n-    pub fn resolve_for_vtable(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn resolve_for_vtable(tcx: TyCtxt<'tcx, 'tcx>,\n                               param_env: ty::ParamEnv<'tcx>,\n                               def_id: DefId,\n                               substs: SubstsRef<'tcx>) -> Option<Instance<'tcx>> {\n@@ -317,7 +317,7 @@ impl<'b, 'tcx> Instance<'tcx> {\n     }\n \n     pub fn resolve_closure(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         def_id: DefId,\n         substs: ty::ClosureSubsts<'tcx>,\n         requested_kind: ty::ClosureKind)\n@@ -332,7 +332,7 @@ impl<'b, 'tcx> Instance<'tcx> {\n     }\n \n     pub fn resolve_drop_in_place(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         ty: Ty<'tcx>)\n         -> ty::Instance<'tcx>\n     {\n@@ -342,7 +342,7 @@ impl<'b, 'tcx> Instance<'tcx> {\n     }\n \n     pub fn fn_once_adapter_instance(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         closure_did: DefId,\n         substs: ty::ClosureSubsts<'tcx>)\n         -> Instance<'tcx>\n@@ -377,7 +377,7 @@ impl<'b, 'tcx> Instance<'tcx> {\n }\n \n fn resolve_associated_item<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     trait_item: &ty::AssocItem,\n     param_env: ty::ParamEnv<'tcx>,\n     trait_id: DefId,"}, {"sha": "327c430cd396f831803fa62c6f88584f3d37722e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -31,9 +31,9 @@ use rustc_target::abi::call::{\n \n \n pub trait IntegerExt {\n-    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx>;\n+    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>, signed: bool) -> Ty<'tcx>;\n     fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;\n-    fn repr_discr<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn repr_discr<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                             ty: Ty<'tcx>,\n                             repr: &ReprOptions,\n                             min: i128,\n@@ -42,7 +42,7 @@ pub trait IntegerExt {\n }\n \n impl IntegerExt for Integer {\n-    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx> {\n+    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>, signed: bool) -> Ty<'tcx> {\n         match (*self, signed) {\n             (I8, false) => tcx.types.u8,\n             (I16, false) => tcx.types.u16,\n@@ -77,7 +77,7 @@ impl IntegerExt for Integer {\n     /// signed discriminant range and #[repr] attribute.\n     /// N.B.: u128 values above i128::MAX will be treated as signed, but\n     /// that shouldn't affect anything, other than maybe debuginfo.\n-    fn repr_discr<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn repr_discr<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                             ty: Ty<'tcx>,\n                             repr: &ReprOptions,\n                             min: i128,\n@@ -126,11 +126,11 @@ impl IntegerExt for Integer {\n }\n \n pub trait PrimitiveExt {\n-    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx>;\n+    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Ty<'tcx>;\n }\n \n impl PrimitiveExt for Primitive {\n-    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx> {\n+    fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n             Float(FloatTy::F32) => tcx.types.f32,\n@@ -171,7 +171,7 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     }\n }\n \n-fn layout_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn layout_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                         query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                         -> Result<&'tcx LayoutDetails, LayoutError<'tcx>>\n {\n@@ -226,7 +226,7 @@ enum StructKind {\n     Prefixed(Size, Align),\n }\n \n-impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n+impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx>> {\n     fn scalar_pair(&self, a: Scalar, b: Scalar) -> LayoutDetails {\n         let dl = self.data_layout();\n         let b_align = b.value.align(dl);\n@@ -1221,7 +1221,7 @@ enum SavedLocalEligibility {\n // Also included in the layout are the upvars and the discriminant.\n // These are included as fields on the \"outer\" layout; they are not part\n // of any variant.\n-impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n+impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx>> {\n     /// Compute the eligibility and assignment of each local.\n     fn generator_saved_local_eligibility(&self, info: &GeneratorLayout<'tcx>)\n     -> (BitSet<GeneratorSavedLocal>, IndexVec<GeneratorSavedLocal, SavedLocalEligibility>) {\n@@ -1605,7 +1605,7 @@ pub enum SizeSkeleton<'tcx> {\n \n impl<'tcx> SizeSkeleton<'tcx> {\n     pub fn compute(ty: Ty<'tcx>,\n-                   tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                   tcx: TyCtxt<'tcx, 'tcx>,\n                    param_env: ty::ParamEnv<'tcx>)\n                    -> Result<SizeSkeleton<'tcx>, LayoutError<'tcx>> {\n         debug_assert!(!ty.has_infer_types());\n@@ -1727,21 +1727,21 @@ impl<'tcx> SizeSkeleton<'tcx> {\n }\n \n pub trait HasTyCtxt<'tcx>: HasDataLayout {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx, 'tcx>;\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx>;\n }\n \n pub trait HasParamEnv<'tcx> {\n     fn param_env(&self) -> ty::ParamEnv<'tcx>;\n }\n \n-impl<'gcx, 'tcx> HasDataLayout for TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> HasDataLayout for TyCtxt<'gcx, 'tcx> {\n     fn data_layout(&self) -> &TargetDataLayout {\n         &self.data_layout\n     }\n }\n \n-impl<'gcx, 'tcx> HasTyCtxt<'gcx> for TyCtxt<'tcx, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'gcx, 'gcx> {\n+impl<'gcx, 'tcx> HasTyCtxt<'gcx> for TyCtxt<'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'gcx> {\n         self.global_tcx()\n     }\n }\n@@ -1759,7 +1759,7 @@ impl<'tcx, T: HasDataLayout> HasDataLayout for LayoutCx<'tcx, T> {\n }\n \n impl<'gcx, 'tcx, T: HasTyCtxt<'gcx>> HasTyCtxt<'gcx> for LayoutCx<'tcx, T> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'gcx, 'gcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'gcx> {\n         self.tcx.tcx()\n     }\n }\n@@ -1796,7 +1796,7 @@ impl<T, E> MaybeResult<T> for Result<T, E> {\n \n pub type TyLayout<'tcx> = ::rustc_target::abi::TyLayout<'tcx, Ty<'tcx>>;\n \n-impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n+impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx, 'tcx>> {\n     type Ty = Ty<'tcx>;\n     type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n \n@@ -1855,7 +1855,7 @@ impl LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx, 'tcx>> {\n }\n \n // Helper (inherent) `layout_of` methods to avoid pushing `LayoutCx` to users.\n-impl TyCtxt<'_, 'tcx, '_> {\n+impl TyCtxt<'tcx, '_> {\n     /// Computes the layout of a type. Note that this implicitly\n     /// executes in \"reveal all\" mode.\n     #[inline]\n@@ -2189,7 +2189,7 @@ struct Niche {\n impl Niche {\n     fn reserve<'tcx>(\n         &self,\n-        cx: &LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>>,\n+        cx: &LayoutCx<'tcx, TyCtxt<'tcx, 'tcx>>,\n         count: u128,\n     ) -> Option<(u128, Scalar)> {\n         if count > self.available {\n@@ -2205,7 +2205,7 @@ impl Niche {\n     }\n }\n \n-impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx, 'tcx>> {\n+impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx, 'tcx>> {\n     /// Find the offset of a niche leaf field, starting from\n     /// the given type and recursing through aggregates.\n     // FIXME(eddyb) traverse already optimized enums."}, {"sha": "76681fe2e8cf429b9add20d0e148e91dde4dd233", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -213,7 +213,7 @@ impl AssocItem {\n         }\n     }\n \n-    pub fn signature<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> String {\n+    pub fn signature<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>) -> String {\n         match self.kind {\n             ty::AssocKind::Method => {\n                 // We skip the binder here because the binder would deanonymize all\n@@ -259,14 +259,14 @@ pub trait DefIdTree: Copy {\n     }\n }\n \n-impl<'gcx, 'tcx> DefIdTree for TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> DefIdTree for TyCtxt<'gcx, 'tcx> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         self.def_key(id).parent.map(|index| DefId { index: index, ..id })\n     }\n }\n \n impl Visibility {\n-    pub fn from_hir(visibility: &hir::Visibility, id: hir::HirId, tcx: TyCtxt<'_, '_, '_>) -> Self {\n+    pub fn from_hir(visibility: &hir::Visibility, id: hir::HirId, tcx: TyCtxt<'_, '_>) -> Self {\n         match visibility.node {\n             hir::VisibilityKind::Public => Visibility::Public,\n             hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n@@ -934,7 +934,7 @@ impl<'gcx, 'tcx> Generics {\n         own_counts\n     }\n \n-    pub fn requires_monomorphization(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> bool {\n+    pub fn requires_monomorphization(&self, tcx: TyCtxt<'gcx, 'tcx>) -> bool {\n         if self.own_requires_monomorphization() {\n             return true;\n         }\n@@ -959,7 +959,7 @@ impl<'gcx, 'tcx> Generics {\n \n     pub fn region_param(&'tcx self,\n                         param: &EarlyBoundRegion,\n-                        tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+                        tcx: TyCtxt<'gcx, 'tcx>)\n                         -> &'tcx GenericParamDef\n     {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n@@ -977,7 +977,7 @@ impl<'gcx, 'tcx> Generics {\n     /// Returns the `GenericParamDef` associated with this `ParamTy`.\n     pub fn type_param(&'tcx self,\n                       param: &ParamTy,\n-                      tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+                      tcx: TyCtxt<'gcx, 'tcx>)\n                       -> &'tcx GenericParamDef {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             let param = &self.params[index as usize];\n@@ -994,7 +994,7 @@ impl<'gcx, 'tcx> Generics {\n     /// Returns the `ConstParameterDef` associated with this `ParamConst`.\n     pub fn const_param(&'tcx self,\n                        param: &ParamConst,\n-                       tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+                       tcx: TyCtxt<'gcx, 'tcx>)\n                        -> &GenericParamDef {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             let param = &self.params[index as usize];\n@@ -1020,21 +1020,21 @@ impl<'tcx> serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}\n impl<'tcx> serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}\n \n impl<'gcx, 'tcx> GenericPredicates<'tcx> {\n-    pub fn instantiate(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, substs: SubstsRef<'tcx>)\n+    pub fn instantiate(&self, tcx: TyCtxt<'gcx, 'tcx>, substs: SubstsRef<'tcx>)\n                        -> InstantiatedPredicates<'tcx> {\n         let mut instantiated = InstantiatedPredicates::empty();\n         self.instantiate_into(tcx, &mut instantiated, substs);\n         instantiated\n     }\n \n-    pub fn instantiate_own(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, substs: SubstsRef<'tcx>)\n+    pub fn instantiate_own(&self, tcx: TyCtxt<'gcx, 'tcx>, substs: SubstsRef<'tcx>)\n                            -> InstantiatedPredicates<'tcx> {\n         InstantiatedPredicates {\n             predicates: self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)).collect(),\n         }\n     }\n \n-    fn instantiate_into(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn instantiate_into(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                         instantiated: &mut InstantiatedPredicates<'tcx>,\n                         substs: SubstsRef<'tcx>) {\n         if let Some(def_id) = self.parent {\n@@ -1045,22 +1045,22 @@ impl<'gcx, 'tcx> GenericPredicates<'tcx> {\n         );\n     }\n \n-    pub fn instantiate_identity(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    pub fn instantiate_identity(&self, tcx: TyCtxt<'gcx, 'tcx>)\n                                 -> InstantiatedPredicates<'tcx> {\n         let mut instantiated = InstantiatedPredicates::empty();\n         self.instantiate_identity_into(tcx, &mut instantiated);\n         instantiated\n     }\n \n-    fn instantiate_identity_into(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn instantiate_identity_into(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                                  instantiated: &mut InstantiatedPredicates<'tcx>) {\n         if let Some(def_id) = self.parent {\n             tcx.predicates_of(def_id).instantiate_identity_into(tcx, instantiated);\n         }\n         instantiated.predicates.extend(self.predicates.iter().map(|&(p, _)| p))\n     }\n \n-    pub fn instantiate_supertrait(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn instantiate_supertrait(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                                   poly_trait_ref: &ty::PolyTraitRef<'tcx>)\n                                   -> InstantiatedPredicates<'tcx>\n     {\n@@ -1134,7 +1134,7 @@ impl<'gcx, 'tcx> Predicate<'tcx> {\n     /// poly-trait-ref holds. This is slightly different from a normal\n     /// substitution in terms of what happens with bound regions. See\n     /// lengthy comment below for details.\n-    pub fn subst_supertrait(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn subst_supertrait(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                             trait_ref: &ty::PolyTraitRef<'tcx>)\n                             -> ty::Predicate<'tcx>\n     {\n@@ -1294,7 +1294,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n     }\n \n     #[inline]\n-    pub fn to_poly_trait_ref(&self, tcx: TyCtxt<'_, '_, '_>) -> PolyTraitRef<'tcx> {\n+    pub fn to_poly_trait_ref(&self, tcx: TyCtxt<'_, '_>) -> PolyTraitRef<'tcx> {\n         // Note: unlike with `TraitRef::to_poly_trait_ref()`,\n         // `self.0.trait_ref` is permitted to have escaping regions.\n         // This is because here `self` has a `Binder` and so does our\n@@ -1856,7 +1856,7 @@ impl<'gcx, 'tcx> VariantDef {\n     /// If someone speeds up attribute loading to not be a performance concern, they can\n     /// remove this hack and use the constructor `DefId` everywhere.\n     pub fn new(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         ident: Ident,\n         variant_did: Option<DefId>,\n         ctor_def_id: Option<DefId>,\n@@ -2069,7 +2069,7 @@ impl_stable_hash_for!(struct ReprOptions {\n });\n \n impl ReprOptions {\n-    pub fn new(tcx: TyCtxt<'_, '_, '_>, did: DefId) -> ReprOptions {\n+    pub fn new(tcx: TyCtxt<'_, '_>, did: DefId) -> ReprOptions {\n         let mut flags = ReprFlags::empty();\n         let mut size = None;\n         let mut max_align = 0;\n@@ -2146,7 +2146,7 @@ impl ReprOptions {\n impl<'gcx, 'tcx> AdtDef {\n     /// Creates a new `AdtDef`.\n     fn new(\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'_, '_>,\n         did: DefId,\n         kind: AdtKind,\n         variants: IndexVec<VariantIdx, VariantDef>,\n@@ -2286,7 +2286,7 @@ impl<'gcx, 'tcx> AdtDef {\n     }\n \n     /// Returns `true` if this type has a destructor.\n-    pub fn has_dtor(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> bool {\n+    pub fn has_dtor(&self, tcx: TyCtxt<'gcx, 'tcx>) -> bool {\n         self.destructor(tcx).is_some()\n     }\n \n@@ -2297,7 +2297,7 @@ impl<'gcx, 'tcx> AdtDef {\n     }\n \n     #[inline]\n-    pub fn predicates(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> &'tcx GenericPredicates<'gcx> {\n+    pub fn predicates(&self, tcx: TyCtxt<'gcx, 'tcx>) -> &'tcx GenericPredicates<'gcx> {\n         tcx.predicates_of(self.did)\n     }\n \n@@ -2351,7 +2351,7 @@ impl<'gcx, 'tcx> AdtDef {\n     #[inline]\n     pub fn eval_explicit_discr(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         expr_did: DefId,\n     ) -> Option<Discr<'tcx>> {\n         let param_env = ParamEnv::empty();\n@@ -2398,7 +2398,7 @@ impl<'gcx, 'tcx> AdtDef {\n     #[inline]\n     pub fn discriminants(\n         &'tcx self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n     ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'gcx> {\n         let repr_type = self.repr.discr_type();\n         let initial = repr_type.initial_discriminant(tcx.global_tcx());\n@@ -2428,7 +2428,7 @@ impl<'gcx, 'tcx> AdtDef {\n     /// assuming there are no constant-evaluation errors there.\n     #[inline]\n     pub fn discriminant_for_variant(&self,\n-                                    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                                    tcx: TyCtxt<'gcx, 'tcx>,\n                                     variant_index: VariantIdx)\n                                     -> Discr<'tcx> {\n         let (val, offset) = self.discriminant_def_for_variant(variant_index);\n@@ -2465,7 +2465,7 @@ impl<'gcx, 'tcx> AdtDef {\n         (expr_did, variant_index.as_u32() - explicit_index)\n     }\n \n-    pub fn destructor(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Destructor> {\n+    pub fn destructor(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Destructor> {\n         tcx.adt_destructor(self.did)\n     }\n \n@@ -2479,12 +2479,12 @@ impl<'gcx, 'tcx> AdtDef {\n     ///\n     /// Due to normalization being eager, this applies even if\n     /// the associated type is behind a pointer (e.g., issue #31299).\n-    pub fn sized_constraint(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> &'tcx [Ty<'tcx>] {\n+    pub fn sized_constraint(&self, tcx: TyCtxt<'gcx, 'tcx>) -> &'tcx [Ty<'tcx>] {\n         tcx.adt_sized_constraint(self.did).0\n     }\n \n     fn sized_constraint_for_ty(&self,\n-                               tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                               tcx: TyCtxt<'tcx, 'tcx>,\n                                ty: Ty<'tcx>)\n                                -> Vec<Ty<'tcx>> {\n         let result = match ty.sty {\n@@ -2564,7 +2564,7 @@ impl<'gcx, 'tcx> AdtDef {\n }\n \n impl<'gcx, 'tcx> FieldDef {\n-    pub fn ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n+    pub fn ty(&self, tcx: TyCtxt<'gcx, 'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.did).subst(tcx, subst)\n     }\n }\n@@ -2590,7 +2590,7 @@ impl<'tcx> ClosureKind {\n     // This is the initial value used when doing upvar inference.\n     pub const LATTICE_BOTTOM: ClosureKind = ClosureKind::Fn;\n \n-    pub fn trait_did(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> DefId {\n+    pub fn trait_did(&self, tcx: TyCtxt<'tcx, 'tcx>) -> DefId {\n         match *self {\n             ClosureKind::Fn => tcx.require_lang_item(FnTraitLangItem),\n             ClosureKind::FnMut => {\n@@ -2618,7 +2618,7 @@ impl<'tcx> ClosureKind {\n \n     /// Returns the representative scalar type for this closure kind.\n     /// See `TyS::to_opt_closure_kind` for more details.\n-    pub fn to_ty(self, tcx: TyCtxt<'tcx, '_, 'tcx>) -> Ty<'tcx> {\n+    pub fn to_ty(self, tcx: TyCtxt<'_, 'tcx>) -> Ty<'tcx> {\n         match self {\n             ty::ClosureKind::Fn => tcx.types.i8,\n             ty::ClosureKind::FnMut => tcx.types.i16,\n@@ -2755,7 +2755,7 @@ pub enum ImplOverlapKind {\n     Issue33140\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     pub fn body_tables(self, body: hir::BodyId) -> &'gcx TypeckTables<'gcx> {\n         self.typeck_tables_of(self.hir().body_owner_def_id(body))\n     }\n@@ -3116,7 +3116,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n }\n \n pub struct AssocItemsIterator<'gcx, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     def_ids: &'gcx [DefId],\n     next_index: usize,\n }\n@@ -3131,7 +3131,7 @@ impl Iterator for AssocItemsIterator<'_, '_> {\n     }\n }\n \n-fn associated_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> AssocItem {\n+fn associated_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> AssocItem {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let parent_id = tcx.hir().get_parent_item(id);\n     let parent_def_id = tcx.hir().local_def_id_from_hir_id(parent_id);\n@@ -3176,7 +3176,7 @@ pub struct AdtSizedConstraint<'tcx>(pub &'tcx [Ty<'tcx>]);\n ///       such.\n ///     - a Error, if a type contained itself. The representability\n ///       check should catch this case.\n-fn adt_sized_constraint<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn adt_sized_constraint<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                   def_id: DefId)\n                                   -> AdtSizedConstraint<'tcx> {\n     let def = tcx.adt_def(def_id);\n@@ -3192,7 +3192,7 @@ fn adt_sized_constraint<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     AdtSizedConstraint(result)\n }\n \n-fn associated_item_def_ids<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn associated_item_def_ids<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                      def_id: DefId)\n                                      -> &'tcx [DefId] {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -3217,14 +3217,14 @@ fn associated_item_def_ids<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn def_span<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Span {\n+fn def_span<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> Span {\n     tcx.hir().span_if_local(def_id).unwrap()\n }\n \n /// If the given `DefId` describes an item belonging to a trait,\n /// returns the `DefId` of the trait that the trait item belongs to;\n /// otherwise, returns `None`.\n-fn trait_of_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n+fn trait_of_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n     tcx.opt_associated_item(def_id)\n         .and_then(|associated_item| {\n             match associated_item.container {\n@@ -3235,7 +3235,7 @@ fn trait_of_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Option<D\n }\n \n /// Yields the parent function's `DefId` if `def_id` is an `impl Trait` definition.\n-pub fn is_impl_trait_defn(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<DefId> {\n+pub fn is_impl_trait_defn(tcx: TyCtxt<'_, '_>, def_id: DefId) -> Option<DefId> {\n     if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n         if let Node::Item(item) = tcx.hir().get_by_hir_id(hir_id) {\n             if let hir::ItemKind::Existential(ref exist_ty) = item.node {\n@@ -3247,7 +3247,7 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<DefI\n }\n \n /// See `ParamEnv` struct definition for details.\n-fn param_env<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn param_env<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                        def_id: DefId)\n                        -> ParamEnv<'tcx>\n {\n@@ -3285,26 +3285,26 @@ fn param_env<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n }\n \n-fn crate_disambiguator<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn crate_disambiguator<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                  crate_num: CrateNum) -> CrateDisambiguator {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.sess.local_crate_disambiguator()\n }\n \n-fn original_crate_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn original_crate_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                  crate_num: CrateNum) -> Symbol {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.crate_name.clone()\n }\n \n-fn crate_hash<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn crate_hash<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                         crate_num: CrateNum)\n                         -> Svh {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.hir().crate_hash\n }\n \n-fn instance_def_size_estimate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn instance_def_size_estimate<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                         instance_def: InstanceDef<'tcx>)\n                                         -> usize {\n     match instance_def {\n@@ -3321,7 +3321,7 @@ fn instance_def_size_estimate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n /// If `def_id` is an issue 33140 hack impl, returns its self type; otherwise, returns `None`.\n ///\n /// See [`ImplOverlapKind::Issue33140`] for more details.\n-fn issue33140_self_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn issue33140_self_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 def_id: DefId)\n                                 -> Option<Ty<'tcx>>\n {"}, {"sha": "c24c0541ad71f0be104bea269352f0d587538ce4", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -45,7 +45,7 @@ pub enum Component<'tcx> {\n     EscapingProjection(Vec<Component<'tcx>>),\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     /// Push onto `out` all the things that must outlive `'a` for the condition\n     /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n     pub fn push_outlives_components(&self, ty0: Ty<'tcx>,"}, {"sha": "d5bca55c2f1b1e6d292380d89f451e4911f8c1f8", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -37,7 +37,7 @@ pub trait Printer<'gcx: 'tcx, 'tcx>: Sized {\n     type DynExistential;\n     type Const;\n \n-    fn tcx(&'a self) -> TyCtxt<'tcx, 'gcx, 'tcx>;\n+    fn tcx(&'a self) -> TyCtxt<'gcx, 'tcx>;\n \n     fn print_def_path(\n         self,"}, {"sha": "a320eb47e6c1c70bbd3cc8aa3adde25dbe3b3b06", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -17,14 +17,14 @@ use syntax::ast;\n /// Same as `unique_type_name()` but with the result pushed onto the given\n /// `output` parameter.\n pub struct DefPathBasedNames<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     omit_disambiguators: bool,\n     omit_local_crate_name: bool,\n }\n \n impl DefPathBasedNames<'tcx> {\n     pub fn new(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         omit_disambiguators: bool,\n         omit_local_crate_name: bool,\n     ) -> Self {"}, {"sha": "d55f1c8983610594bc254e94f2e00e91050921f1", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -934,7 +934,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n pub struct FmtPrinter<'a, 'gcx, 'tcx, F>(Box<FmtPrinterData<'a, 'gcx, 'tcx, F>>);\n \n pub struct FmtPrinterData<'a, 'gcx, 'tcx, F> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     fmt: F,\n \n     empty_path: bool,\n@@ -963,7 +963,7 @@ impl<F> DerefMut for FmtPrinter<'_, '_, '_, F> {\n }\n \n impl<F> FmtPrinter<'a, 'gcx, 'tcx, F> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'gcx, 'tcx>, fmt: F, ns: Namespace) -> Self {\n+    pub fn new(tcx: TyCtxt<'gcx, 'tcx>, fmt: F, ns: Namespace) -> Self {\n         FmtPrinter(Box::new(FmtPrinterData {\n             tcx,\n             fmt,\n@@ -978,7 +978,7 @@ impl<F> FmtPrinter<'a, 'gcx, 'tcx, F> {\n     }\n }\n \n-impl TyCtxt<'_, '_, '_> {\n+impl TyCtxt<'_, '_> {\n     // HACK(eddyb) get rid of `def_path_str` and/or pass `Namespace` explicitly always\n     // (but also some things just print a `DefId` generally so maybe we need this?)\n     fn guess_def_namespace(self, def_id: DefId) -> Namespace {\n@@ -1025,7 +1025,7 @@ impl<F: fmt::Write> Printer<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F> {\n     type DynExistential = Self;\n     type Const = Self;\n \n-    fn tcx(&'a self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&'a self) -> TyCtxt<'gcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "c595d37989cb15bc968936a0173de1a18144f9c4", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -31,38 +31,38 @@ pub(crate) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n     fn query(key: Self::Key) -> Query<'tcx>;\n \n     // Don't use this method to access query results, instead use the methods on TyCtxt\n-    fn query_cache<'a>(tcx: TyCtxt<'a, 'tcx, '_>) -> &'a Lock<QueryCache<'tcx, Self>>;\n+    fn query_cache<'a>(tcx: TyCtxt<'tcx, '_>) -> &'a Lock<QueryCache<'tcx, Self>>;\n \n-    fn to_dep_node(tcx: TyCtxt<'_, 'tcx, '_>, key: &Self::Key) -> DepNode;\n+    fn to_dep_node(tcx: TyCtxt<'tcx, '_>, key: &Self::Key) -> DepNode;\n \n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n-    fn compute(tcx: TyCtxt<'_, 'tcx, '_>, key: Self::Key) -> Self::Value;\n+    fn compute(tcx: TyCtxt<'tcx, '_>, key: Self::Key) -> Self::Value;\n \n     fn hash_result(\n         hcx: &mut StableHashingContext<'_>,\n         result: &Self::Value\n     ) -> Option<Fingerprint>;\n \n-    fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>, error: CycleError<'tcx>) -> Self::Value;\n+    fn handle_cycle_error(tcx: TyCtxt<'tcx, '_>, error: CycleError<'tcx>) -> Self::Value;\n }\n \n pub(crate) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n-    fn describe(tcx: TyCtxt<'_, '_, '_>, key: Self::Key) -> Cow<'static, str>;\n+    fn describe(tcx: TyCtxt<'_, '_>, key: Self::Key) -> Cow<'static, str>;\n \n     #[inline]\n-    fn cache_on_disk(_: TyCtxt<'tcx, 'tcx, 'tcx>, _: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'tcx, 'tcx>, _: Self::Key) -> bool {\n         false\n     }\n \n-    fn try_load_from_disk(_: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn try_load_from_disk(_: TyCtxt<'tcx, 'tcx>,\n                           _: SerializedDepNodeIndex)\n                           -> Option<Self::Value> {\n         bug!(\"QueryDescription::load_from_disk() called for an unsupported query.\")\n     }\n }\n \n impl<'tcx, M: QueryAccessors<'tcx, Key=DefId>> QueryDescription<'tcx> for M {\n-    default fn describe(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Cow<'static, str> {\n+    default fn describe(tcx: TyCtxt<'_, '_>, def_id: DefId) -> Cow<'static, str> {\n         if !tcx.sess.verbose() {\n             format!(\"processing `{}`\", tcx.def_path_str(def_id)).into()\n         } else {\n@@ -73,7 +73,7 @@ impl<'tcx, M: QueryAccessors<'tcx, Key=DefId>> QueryDescription<'tcx> for M {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::analysis<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+    fn describe(_tcx: TyCtxt<'_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"running analysis passes on this crate\".into()\n     }\n }\n@@ -82,12 +82,12 @@ macro_rules! impl_disk_cacheable_query(\n     ($query_name:ident, |$tcx:tt, $key:tt| $cond:expr) => {\n         impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {\n             #[inline]\n-            fn cache_on_disk($tcx: TyCtxt<'tcx, 'tcx, 'tcx>, $key: Self::Key) -> bool {\n+            fn cache_on_disk($tcx: TyCtxt<'tcx, 'tcx>, $key: Self::Key) -> bool {\n                 $cond\n             }\n \n             #[inline]\n-            fn try_load_from_disk(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+            fn try_load_from_disk(tcx: TyCtxt<'tcx, 'tcx>,\n                                       id: SerializedDepNodeIndex)\n                                       -> Option<Self::Value> {\n                 tcx.queries.on_disk_cache.try_load_query_result(tcx, id)"}, {"sha": "f8fc2c101258617880fb7bfb648399071224abed", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> QueryJob<'tcx> {\n     #[cfg(parallel_compiler)]\n     pub(super) fn r#await<'lcx>(\n         &self,\n-        tcx: TyCtxt<'lcx, 'tcx, 'lcx>,\n+        tcx: TyCtxt<'tcx, 'lcx>,\n         span: Span,\n     ) -> Result<(), CycleError<'tcx>> {\n         tls::with_related_context(tcx, move |icx| {\n@@ -102,7 +102,7 @@ impl<'tcx> QueryJob<'tcx> {\n     #[cfg(not(parallel_compiler))]\n     pub(super) fn find_cycle_in_stack<'lcx>(\n         &self,\n-        tcx: TyCtxt<'lcx, 'tcx, 'lcx>,\n+        tcx: TyCtxt<'tcx, 'lcx>,\n         span: Span,\n     ) -> CycleError<'tcx> {\n         // Get the current executing query (waiter) and find the waitee amongst its parents\n@@ -338,7 +338,7 @@ fn connected_to_root<'tcx>(\n // Deterministically pick an query from a list\n #[cfg(parallel_compiler)]\n fn pick_query<'a, 'tcx, T, F: Fn(&T) -> (Span, Lrc<QueryJob<'tcx>>)>(\n-    tcx: TyCtxt<'_, 'tcx, '_>,\n+    tcx: TyCtxt<'tcx, '_>,\n     queries: &'a [T],\n     f: F\n ) -> &'a T {\n@@ -366,7 +366,7 @@ fn pick_query<'a, 'tcx, T, F: Fn(&T) -> (Span, Lrc<QueryJob<'tcx>>)>(\n fn remove_cycle<'tcx>(\n     jobs: &mut Vec<Lrc<QueryJob<'tcx>>>,\n     wakelist: &mut Vec<Lrc<QueryWaiter<'tcx>>>,\n-    tcx: TyCtxt<'_, 'tcx, '_>\n+    tcx: TyCtxt<'tcx, '_>\n ) -> bool {\n     let mut visited = FxHashSet::default();\n     let mut stack = Vec::new();\n@@ -505,7 +505,7 @@ pub unsafe fn handle_deadlock() {\n /// There may be multiple cycles involved in a deadlock, so this searches\n /// all active queries for cycles before finally resuming all the waiters at once.\n #[cfg(parallel_compiler)]\n-fn deadlock(tcx: TyCtxt<'_, '_, '_>, registry: &rayon_core::Registry) {\n+fn deadlock(tcx: TyCtxt<'_, '_>, registry: &rayon_core::Registry) {\n     let on_panic = OnDrop(|| {\n         eprintln!(\"deadlock handler panicked, aborting process\");\n         process::abort();"}, {"sha": "96a98b45f1f694c5fdc0103e82f65ad2f026adbd", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -22,15 +22,15 @@ pub(super) trait Key: Clone + Hash + Eq + Debug {\n \n     /// In the event that a cycle occurs, if no explicit span has been\n     /// given for a query with key `self`, what span should we use?\n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span;\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span;\n }\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n \n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n@@ -40,7 +40,7 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n         LOCAL_CRATE\n     }\n \n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n@@ -50,7 +50,7 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n         self.instance.query_crate()\n     }\n \n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         self.instance.default_span(tcx)\n     }\n }\n@@ -59,7 +59,7 @@ impl Key for CrateNum {\n     fn query_crate(&self) -> CrateNum {\n         *self\n     }\n-    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -68,7 +68,7 @@ impl Key for DefIndex {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, _tcx: TyCtxt<'_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -77,7 +77,7 @@ impl Key for DefId {\n     fn query_crate(&self) -> CrateNum {\n         self.krate\n     }\n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         tcx.def_span(*self)\n     }\n }\n@@ -86,7 +86,7 @@ impl Key for (DefId, DefId) {\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n@@ -95,7 +95,7 @@ impl Key for (CrateNum, DefId) {\n     fn query_crate(&self) -> CrateNum {\n         self.0\n     }\n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         self.1.default_span(tcx)\n     }\n }\n@@ -104,7 +104,7 @@ impl Key for (DefId, SimplifiedType) {\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n@@ -113,7 +113,7 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     fn query_crate(&self) -> CrateNum {\n         self.0.krate\n     }\n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         self.0.default_span(tcx)\n     }\n }\n@@ -122,7 +122,7 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     fn query_crate(&self) -> CrateNum {\n         self.1.def_id().krate\n     }\n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         tcx.def_span(self.1.def_id())\n     }\n }\n@@ -131,7 +131,7 @@ impl<'tcx> Key for (&'tcx ty::Const<'tcx>, mir::Field) {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -140,7 +140,7 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n     fn query_crate(&self) -> CrateNum {\n         self.def_id().krate\n     }\n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         tcx.def_span(self.def_id())\n     }\n }\n@@ -149,7 +149,7 @@ impl<'tcx> Key for ty::Const<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -158,7 +158,7 @@ impl<'tcx> Key for Ty<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -167,7 +167,7 @@ impl<'tcx> Key for ty::ParamEnv<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -176,7 +176,7 @@ impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n     fn query_crate(&self) -> CrateNum {\n         self.value.query_crate()\n     }\n-    fn default_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         self.value.default_span(tcx)\n     }\n }\n@@ -185,7 +185,7 @@ impl<'tcx> Key for traits::Environment<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, _: TyCtxt<'_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -194,7 +194,7 @@ impl Key for InternedString {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n-    fn default_span(&self, _tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, _tcx: TyCtxt<'_, '_>) -> Span {\n         DUMMY_SP\n     }\n }\n@@ -209,7 +209,7 @@ where\n         LOCAL_CRATE\n     }\n \n-    fn default_span(&self, _tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn default_span(&self, _tcx: TyCtxt<'_, '_>) -> Span {\n         DUMMY_SP\n     }\n }"}, {"sha": "71ea4ac772c317cbb870507fb870062112dbc059", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -157,7 +157,7 @@ impl<'sess> OnDiskCache<'sess> {\n     }\n \n     pub fn serialize<'tcx, E>(&self,\n-                                  tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                                  tcx: TyCtxt<'tcx, 'tcx>,\n                                   encoder: &mut E)\n                                   -> Result<(), E::Error>\n         where E: ty_codec::TyEncoder\n@@ -314,7 +314,7 @@ impl<'sess> OnDiskCache<'sess> {\n \n             return Ok(());\n \n-            fn sorted_cnums_including_local_crate(tcx: TyCtxt<'_, '_, '_>) -> Vec<CrateNum> {\n+            fn sorted_cnums_including_local_crate(tcx: TyCtxt<'_, '_>) -> Vec<CrateNum> {\n                 let mut cnums = vec![LOCAL_CRATE];\n                 cnums.extend_from_slice(&tcx.crates()[..]);\n                 cnums.sort_unstable();\n@@ -327,7 +327,7 @@ impl<'sess> OnDiskCache<'sess> {\n \n     /// Loads a diagnostic emitted during the previous compilation session.\n     pub fn load_diagnostics<'tcx>(&self,\n-                                      tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                                      tcx: TyCtxt<'tcx, 'tcx>,\n                                       dep_node_index: SerializedDepNodeIndex)\n                                       -> Vec<Diagnostic> {\n         let diagnostics: Option<EncodedDiagnostics> = self.load_indexed(\n@@ -355,7 +355,7 @@ impl<'sess> OnDiskCache<'sess> {\n     /// Returns the cached query result if there is something in the cache for\n     /// the given `SerializedDepNodeIndex`; otherwise returns `None`.\n     pub fn try_load_query_result<'tcx, T>(&self,\n-                                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                                          tcx: TyCtxt<'tcx, 'tcx>,\n                                           dep_node_index: SerializedDepNodeIndex)\n                                           -> Option<T>\n         where T: Decodable\n@@ -383,7 +383,7 @@ impl<'sess> OnDiskCache<'sess> {\n     }\n \n     fn load_indexed<'tcx, T>(&self,\n-                             tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                             tcx: TyCtxt<'tcx, 'tcx>,\n                              dep_node_index: SerializedDepNodeIndex,\n                              index: &FxHashMap<SerializedDepNodeIndex,\n                                                AbsoluteBytePos>,\n@@ -423,7 +423,7 @@ impl<'sess> OnDiskCache<'sess> {\n     // current-session-CrateNum. There might be CrateNums from the previous\n     // Session that don't occur in the current one. For these, the mapping\n     // maps to None.\n-    fn compute_cnum_map(tcx: TyCtxt<'_, '_, '_>,\n+    fn compute_cnum_map(tcx: TyCtxt<'_, '_>,\n                         prev_cnums: &[(u32, String, CrateDisambiguator)])\n                         -> IndexVec<CrateNum, Option<CrateNum>>\n     {\n@@ -458,7 +458,7 @@ impl<'sess> OnDiskCache<'sess> {\n /// we use for crate metadata decoding in that it can rebase spans and\n /// eventually will also handle things that contain `Ty` instances.\n struct CacheDecoder<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     opaque: opaque::Decoder<'a>,\n     source_map: &'a SourceMap,\n     cnum_map: &'a IndexVec<CrateNum, Option<CrateNum>>,\n@@ -527,7 +527,7 @@ fn decode_tagged<'a, 'tcx, D, T, V>(decoder: &mut D,\n \n impl<'a, 'tcx> ty_codec::TyDecoder<'tcx> for CacheDecoder<'a, 'tcx> {\n     #[inline]\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n \n@@ -745,7 +745,7 @@ for CacheDecoder<'a, 'tcx> {\n //- ENCODING -------------------------------------------------------------------\n \n struct CacheEncoder<'a, 'tcx, E: ty_codec::TyEncoder> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     encoder: &'a mut E,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n@@ -1064,7 +1064,7 @@ impl<'a> SpecializedDecoder<IntEncodedWithFixedSize> for opaque::Decoder<'a> {\n     }\n }\n \n-fn encode_query_results<'a, 'tcx, Q, E>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn encode_query_results<'a, 'tcx, Q, E>(tcx: TyCtxt<'tcx, 'tcx>,\n                                               encoder: &mut CacheEncoder<'a, 'tcx, E>,\n                                               query_result_index: &mut EncodedQueryResultIndex)\n                                               -> Result<(), E::Error>"}, {"sha": "639aa8e2c34b8f0c2d23ead3fe87996e78e3b346", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n     /// for some compile-time benchmarks.\n     #[inline(always)]\n     pub(super) fn try_get(\n-        tcx: TyCtxt<'a, 'tcx, '_>,\n+        tcx: TyCtxt<'tcx, '_>,\n         span: Span,\n         key: &Q::Key,\n     ) -> TryGetJob<'a, 'tcx, Q> {\n@@ -247,7 +247,7 @@ pub(super) enum TryGetJob<'a, 'tcx: 'a, D: QueryDescription<'tcx> + 'a> {\n     Cycle(D::Value),\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     /// Executes a job by changing the ImplicitCtxt to point to the\n     /// new query job while it executes. It returns the diagnostics\n     /// captured during execution and the actual result.\n@@ -259,7 +259,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n         compute: F)\n     -> R\n     where\n-        F: for<'lcx> FnOnce(TyCtxt<'lcx, 'gcx, 'lcx>) -> R\n+        F: for<'lcx> FnOnce(TyCtxt<'gcx, 'lcx>) -> R\n     {\n         // The TyCtxt stored in TLS has the same global interner lifetime\n         // as `self`, so we use `with_related_context` to relate the 'gcx lifetimes\n@@ -874,7 +874,7 @@ macro_rules! define_queries_inner {\n                 }\n             }\n \n-            pub fn describe(&self, tcx: TyCtxt<'_, '_, '_>) -> Cow<'static, str> {\n+            pub fn describe(&self, tcx: TyCtxt<'_, '_>) -> Cow<'static, str> {\n                 let (r, name) = match *self {\n                     $(Query::$name(key) => {\n                         (queries::$name::describe(tcx, key), stringify!($name))\n@@ -888,7 +888,7 @@ macro_rules! define_queries_inner {\n             }\n \n             // FIXME(eddyb) Get more valid Span's on queries.\n-            pub fn default_span(&self, tcx: TyCtxt<'_, $tcx, '_>, span: Span) -> Span {\n+            pub fn default_span(&self, tcx: TyCtxt<$tcx, '_>, span: Span) -> Span {\n                 if !span.is_dummy() {\n                     return span;\n                 }\n@@ -954,20 +954,20 @@ macro_rules! define_queries_inner {\n             }\n \n             #[inline(always)]\n-            fn query_cache<'a>(tcx: TyCtxt<'a, $tcx, '_>) -> &'a Lock<QueryCache<$tcx, Self>> {\n+            fn query_cache<'a>(tcx: TyCtxt<$tcx, '_>) -> &'a Lock<QueryCache<$tcx, Self>> {\n                 &tcx.queries.$name\n             }\n \n             #[allow(unused)]\n             #[inline(always)]\n-            fn to_dep_node(tcx: TyCtxt<'_, $tcx, '_>, key: &Self::Key) -> DepNode {\n+            fn to_dep_node(tcx: TyCtxt<$tcx, '_>, key: &Self::Key) -> DepNode {\n                 use crate::dep_graph::DepConstructor::*;\n \n                 DepNode::new(tcx, $node(*key))\n             }\n \n             #[inline]\n-            fn compute(tcx: TyCtxt<'_, 'tcx, '_>, key: Self::Key) -> Self::Value {\n+            fn compute(tcx: TyCtxt<'tcx, '_>, key: Self::Key) -> Self::Value {\n                 __query_compute::$name(move || {\n                     let provider = tcx.queries.providers.get(key.query_crate())\n                         // HACK(eddyb) it's possible crates may be loaded after\n@@ -988,7 +988,7 @@ macro_rules! define_queries_inner {\n             }\n \n             fn handle_cycle_error(\n-                tcx: TyCtxt<'_, 'tcx, '_>,\n+                tcx: TyCtxt<'tcx, '_>,\n                 error: CycleError<'tcx>\n             ) -> Self::Value {\n                 handle_cycle_error!([$($modifiers)*][tcx, error])\n@@ -997,7 +997,7 @@ macro_rules! define_queries_inner {\n \n         #[derive(Copy, Clone)]\n         pub struct TyCtxtEnsure<'gcx, 'tcx> {\n-            pub tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+            pub tcx: TyCtxt<'gcx, 'tcx>,\n         }\n \n         impl TyCtxtEnsure<$tcx, 'lcx> {\n@@ -1010,19 +1010,19 @@ macro_rules! define_queries_inner {\n \n         #[derive(Copy, Clone)]\n         pub struct TyCtxtAt<'gcx, 'tcx> {\n-            pub tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+            pub tcx: TyCtxt<'gcx, 'tcx>,\n             pub span: Span,\n         }\n \n         impl Deref for TyCtxtAt<'gcx, 'tcx> {\n-            type Target = TyCtxt<'tcx, 'gcx, 'tcx>;\n+            type Target = TyCtxt<'gcx, 'tcx>;\n             #[inline(always)]\n             fn deref(&self) -> &Self::Target {\n                 &self.tcx\n             }\n         }\n \n-        impl TyCtxt<'lcx, $tcx, 'lcx> {\n+        impl TyCtxt<$tcx, 'lcx> {\n             /// Returns a transparent wrapper for `TyCtxt`, which ensures queries\n             /// are executed instead of just returing their results.\n             #[inline(always)]\n@@ -1090,12 +1090,12 @@ macro_rules! define_provider_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$name:ident] [$K:ty] [$R:ty]))*)) => {\n         pub struct Providers<$tcx> {\n-            $(pub $name: fn(TyCtxt<$tcx, $tcx, $tcx>, $K) -> $R,)*\n+            $(pub $name: fn(TyCtxt<$tcx, $tcx>, $K) -> $R,)*\n         }\n \n         impl<$tcx> Default for Providers<$tcx> {\n             fn default() -> Self {\n-                $(fn $name<$tcx>(_: TyCtxt<$tcx, $tcx, $tcx>, key: $K) -> $R {\n+                $(fn $name<$tcx>(_: TyCtxt<$tcx, $tcx>, key: $K) -> $R {\n                     bug!(\"tcx.{}({:?}) unsupported by its crate\",\n                          stringify!($name), key);\n                 })*\n@@ -1149,7 +1149,7 @@ macro_rules! define_provider_struct {\n /// add it to the \"We don't have enough information to reconstruct...\" group in\n /// the match below.\n pub fn force_from_dep_node<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     dep_node: &DepNode\n ) -> bool {\n     use crate::dep_graph::RecoverKey;\n@@ -1237,7 +1237,7 @@ macro_rules! impl_load_from_cache {\n         impl DepNode {\n             // Check whether the query invocation corresponding to the given\n             // DepNode is eligible for on-disk-caching.\n-            pub fn cache_on_disk(&self, tcx: TyCtxt<'_, '_, '_>) -> bool {\n+            pub fn cache_on_disk(&self, tcx: TyCtxt<'_, '_>) -> bool {\n                 use crate::ty::query::queries;\n                 use crate::ty::query::QueryDescription;\n \n@@ -1255,7 +1255,7 @@ macro_rules! impl_load_from_cache {\n             // above `cache_on_disk` methods returns true.\n             // Also, as a sanity check, it expects that the corresponding query\n             // invocation has been marked as green already.\n-            pub fn load_from_on_disk_cache(&self, tcx: TyCtxt<'_, '_, '_>) {\n+            pub fn load_from_on_disk_cache(&self, tcx: TyCtxt<'_, '_>) {\n                 match self.kind {\n                     $(DepKind::$dep_kind => {\n                         debug_assert!(tcx.dep_graph"}, {"sha": "5c6b2e172d3c3503d3fffd4b12b1b06b2d96e5d9", "filename": "src/librustc/ty/query/values.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -4,36 +4,36 @@ use crate::ty::util::NeedsDrop;\n use syntax::symbol::InternedString;\n \n pub(super) trait Value<'tcx>: Sized {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self;\n+    fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx>) -> Self;\n }\n \n impl<'tcx, T> Value<'tcx> for T {\n-    default fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> T {\n+    default fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx>) -> T {\n         tcx.sess.abort_if_errors();\n         bug!(\"Value::from_cycle_error called without errors\");\n     }\n }\n \n impl<'tcx> Value<'tcx> for Ty<'tcx> {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx>) -> Ty<'tcx> {\n         tcx.types.err\n     }\n }\n \n impl<'tcx> Value<'tcx> for ty::SymbolName {\n-    fn from_cycle_error(_: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n+    fn from_cycle_error(_: TyCtxt<'tcx, 'tcx>) -> Self {\n         ty::SymbolName { name: InternedString::intern(\"<error>\") }\n     }\n }\n \n impl<'tcx> Value<'tcx> for NeedsDrop {\n-    fn from_cycle_error(_: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n+    fn from_cycle_error(_: TyCtxt<'tcx, 'tcx>) -> Self {\n         NeedsDrop(false)\n     }\n }\n \n impl<'tcx> Value<'tcx> for AdtSizedConstraint<'tcx> {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx, 'tcx>) -> Self {\n         AdtSizedConstraint(tcx.intern_type_list(&[tcx.types.err]))\n     }\n }"}, {"sha": "247f3fea89d15f1910af18c9af4a6933077683f6", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -23,7 +23,7 @@ pub enum Cause {\n }\n \n pub trait TypeRelation<'gcx: 'tcx, 'tcx> : Sized {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx>;\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx>;\n \n     /// Returns a static string we can use for printouts.\n     fn tag(&self) -> &'static str;"}, {"sha": "a6584173fd2803142be260484f85eeb33f78bbe4", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -337,14 +337,14 @@ CloneTypeFoldableAndLiftImpls! {\n // FIXME(eddyb) replace all the uses of `Option::map` with `?`.\n impl<'tcx, A: Lift<'tcx>, B: Lift<'tcx>> Lift<'tcx> for (A, B) {\n     type Lifted = (A::Lifted, B::Lifted);\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.0).and_then(|a| tcx.lift(&self.1).map(|b| (a, b)))\n     }\n }\n \n impl<'tcx, A: Lift<'tcx>, B: Lift<'tcx>, C: Lift<'tcx>> Lift<'tcx> for (A, B, C) {\n     type Lifted = (A::Lifted, B::Lifted, C::Lifted);\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.0).and_then(|a| {\n             tcx.lift(&self.1).and_then(|b| tcx.lift(&self.2).map(|c| (a, b, c)))\n         })\n@@ -353,7 +353,7 @@ impl<'tcx, A: Lift<'tcx>, B: Lift<'tcx>, C: Lift<'tcx>> Lift<'tcx> for (A, B, C)\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Option<T> {\n     type Lifted = Option<T::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             Some(ref x) => tcx.lift(x).map(Some),\n             None => Some(None)\n@@ -363,7 +363,7 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Option<T> {\n \n impl<'tcx, T: Lift<'tcx>, E: Lift<'tcx>> Lift<'tcx> for Result<T, E> {\n     type Lifted = Result<T::Lifted, E::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             Ok(ref x) => tcx.lift(x).map(Ok),\n             Err(ref e) => tcx.lift(e).map(Err)\n@@ -373,14 +373,14 @@ impl<'tcx, T: Lift<'tcx>, E: Lift<'tcx>> Lift<'tcx> for Result<T, E> {\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Box<T> {\n     type Lifted = Box<T::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&**self).map(Box::new)\n     }\n }\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for [T] {\n     type Lifted = Vec<T::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         // type annotation needed to inform `projection_must_outlive`\n         let mut result : Vec<<T as Lift<'tcx>>::Lifted>\n             = Vec::with_capacity(self.len());\n@@ -397,14 +397,14 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for [T] {\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Vec<T> {\n     type Lifted = Vec<T::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self[..])\n     }\n }\n \n impl<'tcx, I: Idx, T: Lift<'tcx>> Lift<'tcx> for IndexVec<I, T> {\n     type Lifted = IndexVec<I, T::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         self.iter()\n             .map(|e| tcx.lift(e))\n             .collect()\n@@ -413,7 +413,7 @@ impl<'tcx, I: Idx, T: Lift<'tcx>> Lift<'tcx> for IndexVec<I, T> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::TraitRef<'a> {\n     type Lifted = ty::TraitRef<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| ty::TraitRef {\n             def_id: self.def_id,\n             substs,\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitRef<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialTraitRef<'a> {\n     type Lifted = ty::ExistentialTraitRef<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| ty::ExistentialTraitRef {\n             def_id: self.def_id,\n             substs,\n@@ -433,7 +433,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialTraitRef<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialPredicate<'a> {\n     type Lifted = ty::ExistentialPredicate<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match self {\n             ty::ExistentialPredicate::Trait(x) => {\n                 tcx.lift(x).map(ty::ExistentialPredicate::Trait)\n@@ -450,7 +450,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialPredicate<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     type Lifted = ty::TraitPredicate<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>)\n                              -> Option<ty::TraitPredicate<'tcx>> {\n         tcx.lift(&self.trait_ref).map(|trait_ref| ty::TraitPredicate {\n             trait_ref,\n@@ -460,7 +460,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::SubtypePredicate<'a> {\n     type Lifted = ty::SubtypePredicate<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>)\n                              -> Option<ty::SubtypePredicate<'tcx>> {\n         tcx.lift(&(self.a, self.b)).map(|(a, b)| ty::SubtypePredicate {\n             a_is_expected: self.a_is_expected,\n@@ -472,14 +472,14 @@ impl<'a, 'tcx> Lift<'tcx> for ty::SubtypePredicate<'a> {\n \n impl<'tcx, A: Copy+Lift<'tcx>, B: Copy+Lift<'tcx>> Lift<'tcx> for ty::OutlivesPredicate<A, B> {\n     type Lifted = ty::OutlivesPredicate<A::Lifted, B::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&(self.0, self.1)).map(|(a, b)| ty::OutlivesPredicate(a, b))\n     }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionTy<'a> {\n     type Lifted = ty::ProjectionTy<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>)\n                              -> Option<ty::ProjectionTy<'tcx>> {\n         tcx.lift(&self.substs).map(|substs| {\n             ty::ProjectionTy {\n@@ -492,7 +492,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionTy<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> {\n     type Lifted = ty::ProjectionPredicate<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>)\n                              -> Option<ty::ProjectionPredicate<'tcx>> {\n         tcx.lift(&(self.projection_ty, self.ty)).map(|(projection_ty, ty)| {\n             ty::ProjectionPredicate {\n@@ -505,7 +505,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialProjection<'a> {\n     type Lifted = ty::ExistentialProjection<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| {\n             ty::ExistentialProjection {\n                 substs,\n@@ -518,7 +518,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialProjection<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n     type Lifted = ty::Predicate<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             ty::Predicate::Trait(ref binder) => {\n                 tcx.lift(binder).map(ty::Predicate::Trait)\n@@ -558,14 +558,14 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<T> {\n     type Lifted = ty::Binder<T::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(self.skip_binder()).map(ty::Binder::bind)\n     }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n     type Lifted = ty::ParamEnv<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.caller_bounds).map(|caller_bounds| {\n             ty::ParamEnv {\n                 reveal: self.reveal,\n@@ -578,7 +578,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n \n impl<'a, 'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::ParamEnvAnd<'a, T> {\n     type Lifted = ty::ParamEnvAnd<'tcx, T::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.param_env).and_then(|param_env| {\n             tcx.lift(&self.value).map(|value| {\n                 ty::ParamEnvAnd {\n@@ -592,7 +592,7 @@ impl<'a, 'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::ParamEnvAnd<'a, T> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::ClosureSubsts<'a> {\n     type Lifted = ty::ClosureSubsts<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| {\n             ty::ClosureSubsts { substs }\n         })\n@@ -601,7 +601,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ClosureSubsts<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::GeneratorSubsts<'a> {\n     type Lifted = ty::GeneratorSubsts<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.substs).map(|substs| {\n             ty::GeneratorSubsts { substs }\n         })\n@@ -610,7 +610,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::GeneratorSubsts<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjustment<'a> {\n     type Lifted = ty::adjustment::Adjustment<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.kind).and_then(|kind| {\n             tcx.lift(&self.target).map(|target| {\n                 ty::adjustment::Adjustment { kind, target }\n@@ -621,7 +621,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjustment<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjust<'a> {\n     type Lifted = ty::adjustment::Adjust<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             ty::adjustment::Adjust::NeverToAny =>\n                 Some(ty::adjustment::Adjust::NeverToAny),\n@@ -639,7 +639,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjust<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::OverloadedDeref<'a> {\n     type Lifted = ty::adjustment::OverloadedDeref<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.region).map(|region| {\n             ty::adjustment::OverloadedDeref {\n                 region,\n@@ -651,7 +651,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::OverloadedDeref<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n     type Lifted = ty::adjustment::AutoBorrow<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             ty::adjustment::AutoBorrow::Ref(r, m) => {\n                 tcx.lift(&r).map(|r| ty::adjustment::AutoBorrow::Ref(r, m))\n@@ -665,7 +665,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n     type Lifted = ty::GenSig<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&(self.yield_ty, self.return_ty))\n            .map(|(yield_ty, return_ty)| {\n                ty::GenSig {\n@@ -678,7 +678,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::FnSig<'a> {\n     type Lifted = ty::FnSig<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.inputs_and_output).map(|x| {\n             ty::FnSig {\n                 inputs_and_output: x,\n@@ -692,7 +692,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::FnSig<'a> {\n \n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::error::ExpectedFound<T> {\n     type Lifted = ty::error::ExpectedFound<T::Lifted>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.expected).and_then(|expected| {\n             tcx.lift(&self.found).map(|found| {\n                 ty::error::ExpectedFound {\n@@ -706,7 +706,7 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::error::ExpectedFound<T> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n     type Lifted = ty::error::TypeError<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         use crate::ty::error::TypeError::*;\n \n         Some(match *self {\n@@ -743,7 +743,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n     type Lifted = ty::InstanceDef<'tcx>;\n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match *self {\n             ty::InstanceDef::Item(def_id) =>\n                 Some(ty::InstanceDef::Item(def_id)),"}, {"sha": "5036408af39cca0ebd127e10ca2bbf0e33088e46", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -324,7 +324,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// Divides the closure substs into their respective\n     /// components. Single source of truth with respect to the\n     /// ordering.\n-    fn split(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> SplitClosureSubsts<'tcx> {\n+    fn split(self, def_id: DefId, tcx: TyCtxt<'_, '_>) -> SplitClosureSubsts<'tcx> {\n         let generics = tcx.generics_of(def_id);\n         let parent_len = generics.parent_count;\n         SplitClosureSubsts {\n@@ -335,7 +335,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     }\n \n     #[inline]\n-    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) ->\n+    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'_, '_>) ->\n         impl Iterator<Item=Ty<'tcx>> + 'tcx\n     {\n         let SplitClosureSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n@@ -351,15 +351,15 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// Returns the closure kind for this closure; may return a type\n     /// variable during inference. To get the closure kind during\n     /// inference, use `infcx.closure_kind(def_id, substs)`.\n-    pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+    pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty\n     }\n \n     /// Returns the type representing the closure signature for this\n     /// closure; may contain type variables during inference. To get\n     /// the closure signature during inference, use\n     /// `infcx.fn_sig(def_id)`.\n-    pub fn closure_sig_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+    pub fn closure_sig_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_sig_ty\n     }\n \n@@ -368,7 +368,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// there are no type variables.\n     ///\n     /// If you have an inference context, use `infcx.closure_kind()`.\n-    pub fn closure_kind(self, def_id: DefId, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> ty::ClosureKind {\n+    pub fn closure_kind(self, def_id: DefId, tcx: TyCtxt<'tcx, 'tcx>) -> ty::ClosureKind {\n         self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n     }\n \n@@ -377,7 +377,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// there are no type variables.\n     ///\n     /// If you have an inference context, use `infcx.closure_sig()`.\n-    pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> ty::PolyFnSig<'tcx> {\n+    pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'tcx, 'tcx>) -> ty::PolyFnSig<'tcx> {\n         let ty = self.closure_sig_ty(def_id, tcx);\n         match ty.sty {\n             ty::FnPtr(sig) => sig,\n@@ -401,7 +401,7 @@ struct SplitGeneratorSubsts<'tcx> {\n }\n \n impl<'tcx> GeneratorSubsts<'tcx> {\n-    fn split(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> SplitGeneratorSubsts<'tcx> {\n+    fn split(self, def_id: DefId, tcx: TyCtxt<'_, '_>) -> SplitGeneratorSubsts<'tcx> {\n         let generics = tcx.generics_of(def_id);\n         let parent_len = generics.parent_count;\n         SplitGeneratorSubsts {\n@@ -417,12 +417,12 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     /// It contains a tuple of all the types that could end up on a generator frame.\n     /// The state transformation MIR pass may only produce layouts which mention types\n     /// in this tuple. Upvars are not counted here.\n-    pub fn witness(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+    pub fn witness(self, def_id: DefId, tcx: TyCtxt<'_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).witness\n     }\n \n     #[inline]\n-    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) ->\n+    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'_, '_>) ->\n         impl Iterator<Item=Ty<'tcx>> + 'tcx\n     {\n         let SplitGeneratorSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n@@ -436,12 +436,12 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     }\n \n     /// Returns the type representing the yield type of the generator.\n-    pub fn yield_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+    pub fn yield_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).yield_ty\n     }\n \n     /// Returns the type representing the return type of the generator.\n-    pub fn return_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+    pub fn return_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).return_ty\n     }\n \n@@ -451,13 +451,13 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     /// N.B., some bits of the code prefers to see this wrapped in a\n     /// binder, but it never contains bound regions. Probably this\n     /// function should be removed.\n-    pub fn poly_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> PolyGenSig<'tcx> {\n+    pub fn poly_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_>) -> PolyGenSig<'tcx> {\n         ty::Binder::dummy(self.sig(def_id, tcx))\n     }\n \n     /// Returns the \"generator signature\", which consists of its yield\n     /// and return types.\n-    pub fn sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> GenSig<'tcx> {\n+    pub fn sig(self, def_id: DefId, tcx: TyCtxt<'_, '_>) -> GenSig<'tcx> {\n         ty::GenSig {\n             yield_ty: self.yield_ty(def_id, tcx),\n             return_ty: self.return_ty(def_id, tcx),\n@@ -479,7 +479,7 @@ impl<'gcx, 'tcx> GeneratorSubsts<'tcx> {\n \n     /// The valid variant indices of this Generator.\n     #[inline]\n-    pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Range<VariantIdx> {\n+    pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'gcx, 'tcx>) -> Range<VariantIdx> {\n         // FIXME requires optimized MIR\n         let num_variants = tcx.generator_layout(def_id).variant_fields.len();\n         (VariantIdx::new(0)..VariantIdx::new(num_variants))\n@@ -489,7 +489,7 @@ impl<'gcx, 'tcx> GeneratorSubsts<'tcx> {\n     /// out of range.\n     #[inline]\n     pub fn discriminant_for_variant(\n-        &self, def_id: DefId, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, variant_index: VariantIdx\n+        &self, def_id: DefId, tcx: TyCtxt<'gcx, 'tcx>, variant_index: VariantIdx\n     ) -> Discr<'tcx> {\n         // Generators don't support explicit discriminant values, so they are\n         // the same as the variant index.\n@@ -501,7 +501,7 @@ impl<'gcx, 'tcx> GeneratorSubsts<'tcx> {\n     /// variant indices.\n     #[inline]\n     pub fn discriminants(\n-        &'tcx self, def_id: DefId, tcx: TyCtxt<'tcx, 'gcx, 'tcx>\n+        &'tcx self, def_id: DefId, tcx: TyCtxt<'gcx, 'tcx>\n     ) -> impl Iterator<Item=(VariantIdx, Discr<'tcx>)> + Captures<'gcx> {\n         self.variant_range(def_id, tcx).map(move |index| {\n             (index, Discr { val: index.as_usize() as u128, ty: self.discr_ty(tcx) })\n@@ -522,7 +522,7 @@ impl<'gcx, 'tcx> GeneratorSubsts<'tcx> {\n \n     /// The type of the state discriminant used in the generator type.\n     #[inline]\n-    pub fn discr_ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    pub fn discr_ty(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx> {\n         tcx.types.u32\n     }\n \n@@ -533,7 +533,7 @@ impl<'gcx, 'tcx> GeneratorSubsts<'tcx> {\n     /// The locals are grouped by their variant number. Note that some locals may\n     /// be repeated in multiple variants.\n     #[inline]\n-    pub fn state_tys(self, def_id: DefId, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) ->\n+    pub fn state_tys(self, def_id: DefId, tcx: TyCtxt<'gcx, 'tcx>) ->\n         impl Iterator<Item=impl Iterator<Item=Ty<'tcx>> + Captures<'gcx>>\n     {\n         let layout = tcx.generator_layout(def_id);\n@@ -547,7 +547,7 @@ impl<'gcx, 'tcx> GeneratorSubsts<'tcx> {\n     /// This is the types of the fields of a generator which are not stored in a\n     /// variant.\n     #[inline]\n-    pub fn prefix_tys(self, def_id: DefId, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) ->\n+    pub fn prefix_tys(self, def_id: DefId, tcx: TyCtxt<'gcx, 'tcx>) ->\n         impl Iterator<Item=Ty<'tcx>>\n     {\n         self.upvar_tys(def_id, tcx)\n@@ -562,7 +562,7 @@ pub enum UpvarSubsts<'tcx> {\n \n impl<'tcx> UpvarSubsts<'tcx> {\n     #[inline]\n-    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) ->\n+    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'_, '_>) ->\n         impl Iterator<Item=Ty<'tcx>> + 'tcx\n     {\n         let upvar_kinds = match self {\n@@ -593,7 +593,7 @@ pub enum ExistentialPredicate<'tcx> {\n impl<'gcx, 'tcx> ExistentialPredicate<'tcx> {\n     /// Compares via an ordering that will not change if modules are reordered or other changes are\n     /// made to the tree. In particular, this ordering is preserved across incremental compilations.\n-    pub fn stable_cmp(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, other: &Self) -> Ordering {\n+    pub fn stable_cmp(&self, tcx: TyCtxt<'gcx, 'tcx>, other: &Self) -> Ordering {\n         use self::ExistentialPredicate::*;\n         match (*self, *other) {\n             (Trait(_), Trait(_)) => Ordering::Equal,\n@@ -611,7 +611,7 @@ impl<'gcx, 'tcx> ExistentialPredicate<'tcx> {\n }\n \n impl<'gcx, 'tcx> Binder<ExistentialPredicate<'tcx>> {\n-    pub fn with_self_ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n+    pub fn with_self_ty(&self, tcx: TyCtxt<'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::Predicate<'tcx> {\n         use crate::ty::ToPredicate;\n         match *self.skip_binder() {\n@@ -744,7 +744,7 @@ impl<'tcx> TraitRef<'tcx> {\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n-    pub fn identity<'gcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n+    pub fn identity<'gcx>(tcx: TyCtxt<'gcx, 'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n         TraitRef {\n             def_id,\n             substs: InternalSubsts::identity_for_item(tcx, def_id),\n@@ -764,7 +764,7 @@ impl<'tcx> TraitRef<'tcx> {\n         self.substs.types()\n     }\n \n-    pub fn from_method(tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    pub fn from_method(tcx: TyCtxt<'_, 'tcx>,\n                        trait_id: DefId,\n                        substs: SubstsRef<'tcx>)\n                        -> ty::TraitRef<'tcx> {\n@@ -817,7 +817,7 @@ impl<'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n         self.substs.types()\n     }\n \n-    pub fn erase_self_ty(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn erase_self_ty(tcx: TyCtxt<'gcx, 'tcx>,\n                          trait_ref: ty::TraitRef<'tcx>)\n                          -> ty::ExistentialTraitRef<'tcx> {\n         // Assert there is a Self.\n@@ -833,7 +833,7 @@ impl<'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n     /// we convert the principal trait-ref into a normal trait-ref,\n     /// you must give *some* self type. A common choice is `mk_err()`\n     /// or some placeholder type.\n-    pub fn with_self_ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n+    pub fn with_self_ty(&self, tcx: TyCtxt<'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::TraitRef<'tcx>  {\n         // otherwise the escaping vars would be captured by the binder\n         // debug_assert!(!self_ty.has_escaping_bound_vars());\n@@ -856,7 +856,7 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n     /// we convert the principal trait-ref into a normal trait-ref,\n     /// you must give *some* self type. A common choice is `mk_err()`\n     /// or some placeholder type.\n-    pub fn with_self_ty(&self, tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    pub fn with_self_ty(&self, tcx: TyCtxt<'_, 'tcx>,\n                         self_ty: Ty<'tcx>)\n                         -> ty::PolyTraitRef<'tcx>  {\n         self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))\n@@ -992,7 +992,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n     /// Construct a `ProjectionTy` by searching the trait from `trait_ref` for the\n     /// associated item named `item_name`.\n     pub fn from_ref_and_name(\n-        tcx: TyCtxt<'_, '_, '_>, trait_ref: ty::TraitRef<'tcx>, item_name: Ident\n+        tcx: TyCtxt<'_, '_>, trait_ref: ty::TraitRef<'tcx>, item_name: Ident\n     ) -> ProjectionTy<'tcx> {\n         let item_def_id = tcx.associated_items(trait_ref.def_id).find(|item| {\n             item.kind == ty::AssocKind::Type &&\n@@ -1008,7 +1008,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n     /// Extracts the underlying trait reference from this projection.\n     /// For example, if this is a projection of `<T as Iterator>::Item`,\n     /// then this function would return a `T: Iterator` trait reference.\n-    pub fn trait_ref(&self, tcx: TyCtxt<'_, '_, '_>) -> ty::TraitRef<'tcx> {\n+    pub fn trait_ref(&self, tcx: TyCtxt<'_, '_>) -> ty::TraitRef<'tcx> {\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n         ty::TraitRef {\n             def_id,\n@@ -1125,7 +1125,7 @@ impl<'gcx, 'tcx> ParamTy {\n         ParamTy::new(def.index, def.name)\n     }\n \n-    pub fn to_ty(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    pub fn to_ty(self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx> {\n         tcx.mk_ty_param(self.index, self.name)\n     }\n \n@@ -1153,7 +1153,7 @@ impl<'gcx, 'tcx> ParamConst {\n         ParamConst::new(def.index, def.name)\n     }\n \n-    pub fn to_const(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n+    pub fn to_const(self, tcx: TyCtxt<'gcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n         tcx.mk_const_param(self.index, self.name, ty)\n     }\n }\n@@ -1413,15 +1413,15 @@ impl<'tcx, 'gcx> ExistentialProjection<'tcx> {\n     /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,\n     /// then this function would return a `exists T. T: Iterator` existential trait\n     /// reference.\n-    pub fn trait_ref(&self, tcx: TyCtxt<'_, '_, '_>) -> ty::ExistentialTraitRef<'tcx> {\n+    pub fn trait_ref(&self, tcx: TyCtxt<'_, '_>) -> ty::ExistentialTraitRef<'tcx> {\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n         ty::ExistentialTraitRef{\n             def_id,\n             substs: self.substs,\n         }\n     }\n \n-    pub fn with_self_ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn with_self_ty(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                         self_ty: Ty<'tcx>)\n                         -> ty::ProjectionPredicate<'tcx>\n     {\n@@ -1439,7 +1439,7 @@ impl<'tcx, 'gcx> ExistentialProjection<'tcx> {\n }\n \n impl<'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n-    pub fn with_self_ty(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n+    pub fn with_self_ty(&self, tcx: TyCtxt<'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::PolyProjectionPredicate<'tcx> {\n         self.map_bound(|p| p.with_self_ty(tcx, self_ty))\n     }\n@@ -1652,7 +1652,7 @@ impl RegionKind {\n     /// of the impl, and for all the other highlighted regions, it\n     /// would return the `DefId` of the function. In other cases (not shown), this\n     /// function might return the `DefId` of a closure.\n-    pub fn free_region_binding_scope(&self, tcx: TyCtxt<'_, '_, '_>) -> DefId {\n+    pub fn free_region_binding_scope(&self, tcx: TyCtxt<'_, '_>) -> DefId {\n         match self {\n             ty::ReEarlyBound(br) => {\n                 tcx.parent(br.def_id).unwrap()\n@@ -1687,7 +1687,7 @@ impl<'gcx, 'tcx> TyS<'tcx> {\n     /// `ty.conservative_is_privately_uninhabited` implies that any value of type `ty`\n     /// will be `Abi::Uninhabited`. (Note that uninhabited types may have nonzero\n     /// size, to account for partial initialisation. See #49298 for details.)\n-    pub fn conservative_is_privately_uninhabited(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> bool {\n+    pub fn conservative_is_privately_uninhabited(&self, tcx: TyCtxt<'gcx, 'tcx>) -> bool {\n         // FIXME(varkor): we can make this less conversative by substituting concrete\n         // type arguments.\n         match self.sty {\n@@ -1799,15 +1799,15 @@ impl<'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    pub fn sequence_element_type(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx> {\n         match self.sty {\n             Array(ty, _) | Slice(ty) => ty,\n             Str => tcx.mk_mach_uint(ast::UintTy::U8),\n             _ => bug!(\"sequence_element_type called on non-sequence value: {}\", self),\n         }\n     }\n \n-    pub fn simd_type(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    pub fn simd_type(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx> {\n         match self.sty {\n             Adt(def, substs) => {\n                 def.non_enum_variant().fields[0].ty(tcx, substs)\n@@ -1816,7 +1816,7 @@ impl<'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn simd_size(&self, _cx: TyCtxt<'_, '_, '_>) -> usize {\n+    pub fn simd_size(&self, _cx: TyCtxt<'_, '_>) -> usize {\n         match self.sty {\n             Adt(def, _) => def.non_enum_variant().fields.len(),\n             _ => bug!(\"simd_size called on invalid type\")\n@@ -2036,7 +2036,7 @@ impl<'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn fn_sig(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> PolyFnSig<'tcx> {\n+    pub fn fn_sig(&self, tcx: TyCtxt<'gcx, 'tcx>) -> PolyFnSig<'tcx> {\n         match self.sty {\n             FnDef(def_id, substs) => {\n                 tcx.fn_sig(def_id).subst(tcx, substs)\n@@ -2084,7 +2084,7 @@ impl<'gcx, 'tcx> TyS<'tcx> {\n     /// If the type contains variants, returns the valid range of variant indices.\n     /// FIXME This requires the optimized MIR in the case of generators.\n     #[inline]\n-    pub fn variant_range(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Range<VariantIdx>> {\n+    pub fn variant_range(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Range<VariantIdx>> {\n         match self.sty {\n             TyKind::Adt(adt, _) => Some(adt.variant_range()),\n             TyKind::Generator(def_id, substs, _) => Some(substs.variant_range(def_id, tcx)),\n@@ -2098,7 +2098,7 @@ impl<'gcx, 'tcx> TyS<'tcx> {\n     #[inline]\n     pub fn discriminant_for_variant(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         variant_index: VariantIdx\n     ) -> Option<Discr<'tcx>> {\n         match self.sty {\n@@ -2189,7 +2189,7 @@ impl<'gcx, 'tcx> TyS<'tcx> {\n     ///\n     /// Returning true means the type is known to be sized. Returning\n     /// `false` means nothing -- could be sized, might not be.\n-    pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx, '_, 'tcx>) -> bool {\n+    pub fn is_trivially_sized(&self, tcx: TyCtxt<'_, 'tcx>) -> bool {\n         match self.sty {\n             ty::Infer(ty::IntVar(_)) | ty::Infer(ty::FloatVar(_)) |\n             ty::Uint(_) | ty::Int(_) | ty::Bool | ty::Float(_) |\n@@ -2240,7 +2240,7 @@ static_assert_size!(Const<'_>, 40);\n impl<'tcx> Const<'tcx> {\n     #[inline]\n     pub fn from_scalar(\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         val: Scalar,\n         ty: Ty<'tcx>,\n     ) -> &'tcx Self {\n@@ -2252,7 +2252,7 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     pub fn from_bits(\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         bits: u128,\n         ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     ) -> &'tcx Self {\n@@ -2264,24 +2264,24 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn zero_sized(tcx: TyCtxt<'tcx, '_, 'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n+    pub fn zero_sized(tcx: TyCtxt<'_, 'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n         Self::from_scalar(tcx, Scalar::zst(), ty)\n     }\n \n     #[inline]\n-    pub fn from_bool(tcx: TyCtxt<'tcx, '_, 'tcx>, v: bool) -> &'tcx Self {\n+    pub fn from_bool(tcx: TyCtxt<'_, 'tcx>, v: bool) -> &'tcx Self {\n         Self::from_bits(tcx, v as u128, ParamEnv::empty().and(tcx.types.bool))\n     }\n \n     #[inline]\n-    pub fn from_usize(tcx: TyCtxt<'tcx, '_, 'tcx>, n: u64) -> &'tcx Self {\n+    pub fn from_usize(tcx: TyCtxt<'_, 'tcx>, n: u64) -> &'tcx Self {\n         Self::from_bits(tcx, n as u128, ParamEnv::empty().and(tcx.types.usize))\n     }\n \n     #[inline]\n     pub fn to_bits(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     ) -> Option<u128> {\n         if self.ty != ty.value {\n@@ -2300,7 +2300,7 @@ impl<'tcx> Const<'tcx> {\n     #[inline]\n     pub fn assert_bits(\n         &self,\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'_, '_>,\n         ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     ) -> Option<u128> {\n         assert_eq!(self.ty, ty.value);\n@@ -2310,7 +2310,7 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn assert_bool(&self, tcx: TyCtxt<'_, '_, '_>) -> Option<bool> {\n+    pub fn assert_bool(&self, tcx: TyCtxt<'_, '_>) -> Option<bool> {\n         self.assert_bits(tcx, ParamEnv::empty().and(tcx.types.bool)).and_then(|v| match v {\n             0 => Some(false),\n             1 => Some(true),\n@@ -2319,22 +2319,22 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn assert_usize(&self, tcx: TyCtxt<'_, '_, '_>) -> Option<u64> {\n+    pub fn assert_usize(&self, tcx: TyCtxt<'_, '_>) -> Option<u64> {\n         self.assert_bits(tcx, ParamEnv::empty().and(tcx.types.usize)).map(|v| v as u64)\n     }\n \n     #[inline]\n     pub fn unwrap_bits(\n         &self,\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'_, '_>,\n         ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     ) -> u128 {\n         self.assert_bits(tcx, ty).unwrap_or_else(||\n             bug!(\"expected bits of {}, got {:#?}\", ty.value, self))\n     }\n \n     #[inline]\n-    pub fn unwrap_usize(&self, tcx: TyCtxt<'_, '_, '_>) -> u64 {\n+    pub fn unwrap_usize(&self, tcx: TyCtxt<'_, '_>) -> u64 {\n         self.assert_usize(tcx).unwrap_or_else(||\n             bug!(\"expected constant usize, got {:#?}\", self))\n     }"}, {"sha": "60579bcf3a5b4ee2df2b7382ad14c2f092b770b9", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> Kind<'tcx> {\n impl<'a, 'tcx> Lift<'tcx> for Kind<'a> {\n     type Lifted = Kind<'tcx>;\n \n-    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+    fn lift_to_tcx<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Option<Self::Lifted> {\n         match self.unpack() {\n             UnpackedKind::Lifetime(lt) => tcx.lift(&lt).map(|lt| lt.into()),\n             UnpackedKind::Type(ty) => tcx.lift(&ty).map(|ty| ty.into()),\n@@ -184,7 +184,7 @@ pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;\n \n impl<'a, 'gcx, 'tcx> InternalSubsts<'tcx> {\n     /// Creates a `InternalSubsts` that maps each generic parameter to itself.\n-    pub fn identity_for_item(tcx: TyCtxt<'tcx, 'gcx, 'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n+    pub fn identity_for_item(tcx: TyCtxt<'gcx, 'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n         Self::for_item(tcx, def_id, |param, _| {\n             tcx.mk_param_from_def(param)\n         })\n@@ -195,7 +195,7 @@ impl<'a, 'gcx, 'tcx> InternalSubsts<'tcx> {\n     /// the type parameter index. For regions, we use the `BoundRegion::BrNamed`\n     /// variant (which has a `DefId`).\n     pub fn bound_vars_for_item(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         def_id: DefId\n     ) -> SubstsRef<'tcx> {\n         Self::for_item(tcx, def_id, |param, _| {\n@@ -233,7 +233,7 @@ impl<'a, 'gcx, 'tcx> InternalSubsts<'tcx> {\n     /// The closures get to observe the `InternalSubsts` as they're\n     /// being built, which can be used to correctly\n     /// substitute defaults of generic parameters.\n-    pub fn for_item<F>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn for_item<F>(tcx: TyCtxt<'gcx, 'tcx>,\n                        def_id: DefId,\n                        mut mk_kind: F)\n                        -> SubstsRef<'tcx>\n@@ -247,7 +247,7 @@ impl<'a, 'gcx, 'tcx> InternalSubsts<'tcx> {\n     }\n \n     pub fn extend_to<F>(&self,\n-                        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                        tcx: TyCtxt<'gcx, 'tcx>,\n                         def_id: DefId,\n                         mut mk_kind: F)\n                         -> SubstsRef<'tcx>\n@@ -261,7 +261,7 @@ impl<'a, 'gcx, 'tcx> InternalSubsts<'tcx> {\n     }\n \n     fn fill_item<F>(substs: &mut SmallVec<[Kind<'tcx>; 8]>,\n-                    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                    tcx: TyCtxt<'gcx, 'tcx>,\n                     defs: &ty::Generics,\n                     mk_kind: &mut F)\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n@@ -372,15 +372,15 @@ impl<'a, 'gcx, 'tcx> InternalSubsts<'tcx> {\n     /// in a different item, with `target_substs` as the base for\n     /// the target impl/trait, with the source child-specific\n     /// parameters (e.g., method parameters) on top of that base.\n-    pub fn rebase_onto(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn rebase_onto(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                        source_ancestor: DefId,\n                        target_substs: SubstsRef<'tcx>)\n                        -> SubstsRef<'tcx> {\n         let defs = tcx.generics_of(source_ancestor);\n         tcx.mk_substs(target_substs.iter().chain(&self[defs.params.len()..]).cloned())\n     }\n \n-    pub fn truncate_to(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, generics: &ty::Generics)\n+    pub fn truncate_to(&self, tcx: TyCtxt<'gcx, 'tcx>, generics: &ty::Generics)\n                        -> SubstsRef<'tcx> {\n         tcx.mk_substs(self.iter().take(generics.count()).cloned())\n     }\n@@ -414,19 +414,19 @@ impl<'tcx> serialize::UseSpecializedDecodable for SubstsRef<'tcx> {}\n // there is more information available (for better errors).\n \n pub trait Subst<'tcx>: Sized {\n-    fn subst<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn subst<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                        substs: &[Kind<'tcx>]) -> Self {\n         self.subst_spanned(tcx, substs, None)\n     }\n \n-    fn subst_spanned<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn subst_spanned<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                                substs: &[Kind<'tcx>],\n                                span: Option<Span>)\n                                -> Self;\n }\n \n impl<'tcx, T:TypeFoldable<'tcx>> Subst<'tcx> for T {\n-    fn subst_spanned<'gcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    fn subst_spanned<'gcx>(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                                substs: &[Kind<'tcx>],\n                                span: Option<Span>)\n                                -> T\n@@ -445,7 +445,7 @@ impl<'tcx, T:TypeFoldable<'tcx>> Subst<'tcx> for T {\n // The actual substitution engine itself is a type folder.\n \n struct SubstFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     substs: &'a [Kind<'tcx>],\n \n     /// The location for which the substitution is performed, if available.\n@@ -462,7 +462,7 @@ struct SubstFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for SubstFolder<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.tcx }\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> { self.tcx }\n \n     fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> {\n         self.binders_passed += 1;"}, {"sha": "9c82082f8f5c77b96b0f35ae3097b965b282de81", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -64,14 +64,14 @@ impl<'gcx, 'tcx> TraitDef {\n         }\n     }\n \n-    pub fn ancestors(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn ancestors(&self, tcx: TyCtxt<'gcx, 'tcx>,\n                      of_impl: DefId)\n                      -> specialization_graph::Ancestors<'gcx> {\n         specialization_graph::ancestors(tcx, self.def_id, of_impl)\n     }\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     pub fn for_each_impl<F: FnMut(DefId)>(self, def_id: DefId, mut f: F) {\n         let impls = self.trait_impls_of(def_id);\n \n@@ -148,7 +148,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n }\n \n // Query provider for `trait_impls_of`.\n-pub(super) fn trait_impls_of_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub(super) fn trait_impls_of_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                 trait_id: DefId)\n                                                 -> &'tcx TraitImpls {\n     let mut impls = TraitImpls::default();"}, {"sha": "a88b3eaa586a30b2db6e4c134697ec9f973d521b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -51,10 +51,10 @@ impl<'tcx> fmt::Display for Discr<'tcx> {\n \n impl<'tcx> Discr<'tcx> {\n     /// Adds `1` to the value and wraps around if the maximum for the type is reached.\n-    pub fn wrap_incr<'gcx>(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Self {\n+    pub fn wrap_incr<'gcx>(self, tcx: TyCtxt<'gcx, 'tcx>) -> Self {\n         self.checked_add(tcx, 1).0\n     }\n-    pub fn checked_add<'gcx>(self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, n: u128) -> (Self, bool) {\n+    pub fn checked_add<'gcx>(self, tcx: TyCtxt<'gcx, 'tcx>, n: u128) -> (Self, bool) {\n         let (int, signed) = match self.ty.sty {\n             Int(ity) => (Integer::from_attr(&tcx, SignedInt(ity)), true),\n             Uint(uty) => (Integer::from_attr(&tcx, UnsignedInt(uty)), false),\n@@ -104,14 +104,14 @@ impl<'tcx> Discr<'tcx> {\n }\n \n pub trait IntTypeExt {\n-    fn to_ty<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx>;\n-    fn disr_incr<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, val: Option<Discr<'tcx>>)\n+    fn to_ty<'gcx, 'tcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx>;\n+    fn disr_incr<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>, val: Option<Discr<'tcx>>)\n                            -> Option<Discr<'tcx>>;\n-    fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Discr<'tcx>;\n+    fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Discr<'tcx>;\n }\n \n impl IntTypeExt for attr::IntType {\n-    fn to_ty<'gcx, 'tcx>(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Ty<'tcx> {\n+    fn to_ty<'gcx, 'tcx>(&self, tcx: TyCtxt<'gcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             SignedInt(ast::IntTy::I8)       => tcx.types.i8,\n             SignedInt(ast::IntTy::I16)      => tcx.types.i16,\n@@ -128,7 +128,7 @@ impl IntTypeExt for attr::IntType {\n         }\n     }\n \n-    fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Discr<'tcx> {\n+    fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Discr<'tcx> {\n         Discr {\n             val: 0,\n             ty: self.to_ty(tcx)\n@@ -137,7 +137,7 @@ impl IntTypeExt for attr::IntType {\n \n     fn disr_incr<'tcx>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         val: Option<Discr<'tcx>>,\n     ) -> Option<Discr<'tcx>> {\n         if let Some(val) = val {\n@@ -179,7 +179,7 @@ pub enum Representability {\n \n impl<'tcx> ty::ParamEnv<'tcx> {\n     pub fn can_type_implement_copy(self,\n-                                       tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                                       tcx: TyCtxt<'tcx, 'tcx>,\n                                        self_type: Ty<'tcx>)\n                                        -> Result<(), CopyImplementationError<'tcx>> {\n         // FIXME: (@jroesch) float this code up\n@@ -228,7 +228,7 @@ impl<'tcx> ty::ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n+impl<'tcx> TyCtxt<'tcx, 'tcx> {\n     /// Creates a hash of the type `Ty` which will be the same no matter what crate\n     /// context it's calculated within. This is used by the `type_id` intrinsic.\n     pub fn type_id_hash(self, ty: Ty<'tcx>) -> u64 {\n@@ -249,7 +249,7 @@ impl<'tcx> TyCtxt<'tcx, 'tcx, 'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl<'gcx, 'tcx> TyCtxt<'gcx, 'tcx> {\n     pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n         if let ty::Adt(def, substs) = ty.sty {\n             for field in def.all_fields() {\n@@ -632,7 +632,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n             seen_opaque_tys: FxHashSet<DefId>,\n             primary_def_id: DefId,\n             found_recursion: bool,\n-            tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+            tcx: TyCtxt<'gcx, 'tcx>,\n         }\n \n         impl<'gcx, 'tcx> OpaqueTypeExpander<'gcx, 'tcx> {\n@@ -659,7 +659,7 @@ impl<'gcx, 'tcx> TyCtxt<'tcx, 'gcx, 'tcx> {\n         }\n \n         impl<'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for OpaqueTypeExpander<'gcx, 'tcx> {\n-            fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+            fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n                 self.tcx\n             }\n \n@@ -696,7 +696,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// full requirements for the `Copy` trait (cc #29149) -- this\n     /// winds up being reported as an error during NLL borrow check.\n     pub fn is_copy_modulo_regions(&'tcx self,\n-                                  tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                                  tcx: TyCtxt<'tcx, 'tcx>,\n                                   param_env: ty::ParamEnv<'tcx>,\n                                   span: Span)\n                                   -> bool {\n@@ -724,7 +724,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// that the `Freeze` trait is not exposed to end users and is\n     /// effectively an implementation detail.\n     pub fn is_freeze(&'tcx self,\n-                     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                     tcx: TyCtxt<'tcx, 'tcx>,\n                      param_env: ty::ParamEnv<'tcx>,\n                      span: Span)-> bool\n     {\n@@ -739,7 +739,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// then `needs_drop` will definitely return `true` for `ty`.)\n     #[inline]\n     pub fn needs_drop(&'tcx self,\n-                      tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                      tcx: TyCtxt<'tcx, 'tcx>,\n                       param_env: ty::ParamEnv<'tcx>)\n                       -> bool {\n         tcx.needs_drop_raw(param_env.and(self)).0\n@@ -761,7 +761,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// Check whether a type is representable. This means it cannot contain unboxed\n     /// structural recursion. This check is needed for structs and enums.\n     pub fn is_representable(&'tcx self,\n-                            tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                            tcx: TyCtxt<'tcx, 'tcx>,\n                             sp: Span)\n                             -> Representability\n     {\n@@ -779,7 +779,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n \n         fn are_inner_types_recursive<'tcx>(\n-            tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span,\n+            tcx: TyCtxt<'tcx, 'tcx>, sp: Span,\n             seen: &mut Vec<Ty<'tcx>>,\n             representable_cache: &mut FxHashMap<Ty<'tcx>, Representability>,\n             ty: Ty<'tcx>)\n@@ -839,7 +839,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         // Does the type `ty` directly (without indirection through a pointer)\n         // contain any types on stack `seen`?\n         fn is_type_structurally_recursive<'tcx>(\n-            tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+            tcx: TyCtxt<'tcx, 'tcx>,\n             sp: Span,\n             seen: &mut Vec<Ty<'tcx>>,\n             representable_cache: &mut FxHashMap<Ty<'tcx>, Representability>,\n@@ -860,7 +860,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n \n         fn is_type_structurally_recursive_inner<'tcx>(\n-            tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+            tcx: TyCtxt<'tcx, 'tcx>,\n             sp: Span,\n             seen: &mut Vec<Ty<'tcx>>,\n             representable_cache: &mut FxHashMap<Ty<'tcx>, Representability>,\n@@ -937,7 +937,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     }\n }\n \n-fn is_copy_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_copy_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                          query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                          -> bool\n {\n@@ -953,7 +953,7 @@ fn is_copy_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         ))\n }\n \n-fn is_sized_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_sized_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                           query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                           -> bool\n {\n@@ -969,7 +969,7 @@ fn is_sized_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         ))\n }\n \n-fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                            query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                            -> bool\n {\n@@ -988,7 +988,7 @@ fn is_freeze_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n #[derive(Clone, HashStable)]\n pub struct NeedsDrop(pub bool);\n \n-fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                             query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                             -> NeedsDrop\n {"}, {"sha": "f0378b2e084df394cf7e3750bd30d2d05d58a8b5", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -509,7 +509,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n /// `'static` would appear in the list. The hard work is done by\n /// `ty::required_region_bounds`, see that for more information.\n pub fn object_region_bounds<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     existential_predicates: ty::Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>)\n     -> Vec<ty::Region<'tcx>>\n {"}, {"sha": "94219650a8e82ad7093a85613567f4a013ed7540", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -229,7 +229,7 @@ fn compatible_borrow_kinds(borrow_kind1: ty::BorrowKind,\n }\n \n impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n-    pub fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> { self.bccx.tcx }\n+    pub fn tcx(&self) -> TyCtxt<'tcx, 'tcx> { self.bccx.tcx }\n \n     pub fn each_issued_loan<F>(&self, node: hir::ItemLocalId, mut op: F) -> bool where\n         F: FnMut(&Loan<'tcx>) -> bool,"}, {"sha": "7a8a62edea1a3d47f3e29ba5e1ad5ad352b0bbed", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -45,7 +45,7 @@ pub enum PatternSource<'tcx> {\n ///\n /// In this latter case, this function will return `PatternSource::LetDecl`\n /// with a reference to the let\n-fn get_pattern_source<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, pat: &Pat) -> PatternSource<'tcx> {\n+fn get_pattern_source<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, pat: &Pat) -> PatternSource<'tcx> {\n \n     let parent = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n "}, {"sha": "8bdfa1352cbe0f51ab12ce870ab427e9720fd4cb", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -251,7 +251,7 @@ fn check_mutability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n-    pub fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> { self.bccx.tcx }\n+    pub fn tcx(&self) -> TyCtxt<'tcx, 'tcx> { self.bccx.tcx }\n \n     /// Guarantees that `cmt` is assignable, or reports an error.\n     fn guarantee_assignment_valid(&mut self,"}, {"sha": "aa94e100f334f03cea3adefc2f5145f1b4c4ec17", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -53,7 +53,7 @@ pub struct LoanDataFlowOperator;\n \n pub type LoanDataFlow<'tcx> = DataFlowContext<'tcx, LoanDataFlowOperator>;\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().borrowck(body_owner_def_id);\n     });\n@@ -73,7 +73,7 @@ pub struct AnalysisData<'tcx> {\n     pub move_data: move_data::FlowedMoveData<'tcx>,\n }\n \n-fn borrowck<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, owner_def_id: DefId)\n+fn borrowck<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, owner_def_id: DefId)\n     -> &'tcx BorrowCheckResult\n {\n     assert!(tcx.use_ast_borrowck() || tcx.migrate_borrowck());\n@@ -193,7 +193,7 @@ fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tc\n /// Accessor for introspective clients inspecting `AnalysisData` and\n /// the `BorrowckCtxt` itself , e.g., the flowgraph visualizer.\n pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body_id: hir::BodyId,\n     cfg: &cfg::CFG)\n     -> (BorrowckCtxt<'a, 'tcx>, AnalysisData<'tcx>)\n@@ -221,7 +221,7 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n // Type definitions\n \n pub struct BorrowckCtxt<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n \n     // tables for the current thing we are checking; set to\n     // Some in `borrowck_fn` and cleared later\n@@ -391,7 +391,7 @@ pub enum LoanPathElem<'tcx> {\n }\n \n fn closure_to_block(closure_id: LocalDefId,\n-                    tcx: TyCtxt<'_, '_, '_>) -> HirId {\n+                    tcx: TyCtxt<'_, '_>) -> HirId {\n     let closure_id = tcx.hir().local_def_id_to_node_id(closure_id);\n     match tcx.hir().get(closure_id) {\n         Node::Expr(expr) => match expr.node {"}, {"sha": "81d5a49a805c955b43a694015dc95c3d6f8cbc44", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -223,7 +223,7 @@ impl MoveData<'tcx> {\n \n     /// Returns the existing move path index for `lp`, if any, and otherwise adds a new index for\n     /// `lp` and any of its base paths that do not yet have an index.\n-    pub fn move_path(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn move_path(&self, tcx: TyCtxt<'tcx, 'tcx>,\n                      lp: Rc<LoanPath<'tcx>>) -> MovePathIndex {\n         if let Some(&index) = self.path_map.borrow().get(&lp) {\n             return index;\n@@ -311,7 +311,7 @@ impl MoveData<'tcx> {\n     }\n \n     /// Adds a new move entry for a move of `lp` that occurs at location `id` with kind `kind`.\n-    pub fn add_move(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn add_move(&self, tcx: TyCtxt<'tcx, 'tcx>,\n                     orig_lp: Rc<LoanPath<'tcx>>,\n                     id: hir::ItemLocalId,\n                     kind: MoveKind) {\n@@ -340,7 +340,7 @@ impl MoveData<'tcx> {\n         self.add_move_helper(tcx, orig_lp, id, kind);\n     }\n \n-    fn add_move_helper(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn add_move_helper(&self, tcx: TyCtxt<'tcx, 'tcx>,\n                        lp: Rc<LoanPath<'tcx>>,\n                        id: hir::ItemLocalId,\n                        kind: MoveKind) {\n@@ -365,7 +365,7 @@ impl MoveData<'tcx> {\n \n     /// Adds a new record for an assignment to `lp` that occurs at location `id` with the given\n     /// `span`.\n-    pub fn add_assignment(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn add_assignment(&self, tcx: TyCtxt<'tcx, 'tcx>,\n                           lp: Rc<LoanPath<'tcx>>,\n                           assign_id: hir::ItemLocalId,\n                           span: Span) {\n@@ -395,7 +395,7 @@ impl MoveData<'tcx> {\n         self.add_assignment_helper(tcx, lp, assign_id, span);\n     }\n \n-    fn add_assignment_helper(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn add_assignment_helper(&self, tcx: TyCtxt<'tcx, 'tcx>,\n                              lp: Rc<LoanPath<'tcx>>,\n                              assign_id: hir::ItemLocalId,\n                              span: Span) {"}, {"sha": "4e49fa57cb99c594af131e0cd88a783a13bc6f53", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -27,7 +27,7 @@ pub enum EntryOrExit {\n \n #[derive(Clone)]\n pub struct DataFlowContext<'tcx, O> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n \n     /// a name for the analysis using this dataflow instance\n     analysis_name: &'static str,\n@@ -225,7 +225,7 @@ pub enum KillFrom {\n }\n \n impl<'tcx, O: DataFlowOperator> DataFlowContext<'tcx, O> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn new(tcx: TyCtxt<'tcx, 'tcx>,\n                analysis_name: &'static str,\n                body: Option<&hir::Body>,\n                cfg: &cfg::CFG,"}, {"sha": "27ec939dd29336b0b5258e8ce15d01e48f9c7da0", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -9,7 +9,7 @@ use rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n use crate::ModuleLlvm;\n use crate::llvm::{self, False, True};\n \n-pub(crate) unsafe fn codegen(tcx: TyCtxt<'_, '_, '_>, mods: &mut ModuleLlvm, kind: AllocatorKind) {\n+pub(crate) unsafe fn codegen(tcx: TyCtxt<'_, '_>, mods: &mut ModuleLlvm, kind: AllocatorKind) {\n     let llcx = &*mods.llcx;\n     let llmod = mods.llmod();\n     let usize = match &tcx.sess.target.target.target_pointer_width[..] {"}, {"sha": "f68f3de11857495aa046ec9a82ac5b2d35d5131b", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -367,7 +367,7 @@ pub fn provide_extern(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn wasm_import_module(tcx: TyCtxt<'_, '_, '_>, id: DefId) -> Option<CString> {\n+fn wasm_import_module(tcx: TyCtxt<'_, '_>, id: DefId) -> Option<CString> {\n     tcx.wasm_import_module_map(id.krate)\n         .get(&id)\n         .map(|s| CString::new(&s[..]).unwrap())"}, {"sha": "6f3f9d4cb8b55d50dffbdb286af8c204eb2dd421", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -89,7 +89,7 @@ pub fn create_informational_target_machine(\n }\n \n pub fn create_target_machine(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     find_features: bool,\n ) -> &'static mut llvm::TargetMachine {\n     target_machine_factory(&tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE), find_features)()"}, {"sha": "60c141ab566da8ad916bf86b7b6952b3a7005eb6", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -42,7 +42,7 @@ use rustc::hir::CodegenFnAttrs;\n use crate::value::Value;\n \n pub fn write_compressed_metadata<'a, 'gcx>(\n-    tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+    tcx: TyCtxt<'gcx, 'gcx>,\n     metadata: &EncodedMetadata,\n     llvm_module: &mut ModuleLlvm\n ) {\n@@ -103,7 +103,7 @@ pub fn iter_globals(llmod: &'ll llvm::Module) -> ValueIter<'ll> {\n     }\n }\n \n-pub fn compile_codegen_unit(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, cgu_name: InternedString) {\n+pub fn compile_codegen_unit(tcx: TyCtxt<'tcx, 'tcx>, cgu_name: InternedString) {\n     let start_time = Instant::now();\n \n     let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);\n@@ -124,7 +124,7 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, cgu_name: InternedStr\n     submit_codegened_module_to_llvm(&LlvmCodegenBackend(()), tcx, module, cost);\n \n     fn module_codegen<'ll, 'tcx>(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         cgu_name: InternedString,\n     ) -> ModuleCodegen<ModuleLlvm> {\n         let cgu = tcx.codegen_unit(cgu_name);"}, {"sha": "28e27535a39ad49731c01b52ca346c59c6f4fe07", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -66,7 +66,7 @@ impl ty::layout::HasDataLayout for Builder<'_, '_, '_> {\n }\n \n impl ty::layout::HasTyCtxt<'tcx> for Builder<'_, '_, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n         self.cx.tcx\n     }\n }"}, {"sha": "e3126d0e25d5a1afec3840a2e05e1696d77ab817", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -35,7 +35,7 @@ use crate::abi::Abi;\n /// `llvm::Context` so that several compilation units may be optimized in parallel.\n /// All other LLVM data structures in the `CodegenCx` are tied to that `llvm::Context`.\n pub struct CodegenCx<'ll, 'tcx: 'll> {\n-    pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n     pub check_overflow: bool,\n     pub use_dll_storage_attrs: bool,\n     pub tls_model: llvm::ThreadLocalMode,\n@@ -141,7 +141,7 @@ pub fn is_pie_binary(sess: &Session) -> bool {\n }\n \n pub unsafe fn create_module(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     llcx: &'ll llvm::Context,\n     mod_name: &str,\n ) -> &'ll llvm::Module {\n@@ -207,7 +207,7 @@ pub unsafe fn create_module(\n }\n \n impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n-    crate fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    crate fn new(tcx: TyCtxt<'tcx, 'tcx>,\n                  codegen_unit: Arc<CodegenUnit<'tcx>>,\n                  llvm_module: &'ll crate::ModuleLlvm)\n                  -> Self {\n@@ -838,7 +838,7 @@ impl HasTargetSpec for CodegenCx<'ll, 'tcx> {\n }\n \n impl ty::layout::HasTyCtxt<'tcx> for CodegenCx<'ll, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "4fad236c32dd3525c68cdcbc9c9595cd5017ef43", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -894,7 +894,7 @@ fn pointer_type_metadata(\n     }\n }\n \n-pub fn compile_unit_metadata(tcx: TyCtxt<'_, '_, '_>,\n+pub fn compile_unit_metadata(tcx: TyCtxt<'_, '_>,\n                              codegen_unit_name: &str,\n                              debug_context: &CrateDebugContext<'ll, '_>)\n                              -> &'ll DIDescriptor {"}, {"sha": "17a6fe090b90531848efe4a2a965a0a9ecf1552a", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -103,29 +103,29 @@ mod va_arg;\n pub struct LlvmCodegenBackend(());\n \n impl ExtraBackendMethods for LlvmCodegenBackend {\n-    fn new_metadata(&self, tcx: TyCtxt<'_, '_, '_>, mod_name: &str) -> ModuleLlvm {\n+    fn new_metadata(&self, tcx: TyCtxt<'_, '_>, mod_name: &str) -> ModuleLlvm {\n         ModuleLlvm::new_metadata(tcx, mod_name)\n     }\n \n     fn write_compressed_metadata<'b, 'gcx>(\n         &self,\n-        tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+        tcx: TyCtxt<'gcx, 'gcx>,\n         metadata: &EncodedMetadata,\n         llvm_module: &mut ModuleLlvm\n     ) {\n         base::write_compressed_metadata(tcx, metadata, llvm_module)\n     }\n     fn codegen_allocator<'b, 'gcx>(\n         &self,\n-        tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+        tcx: TyCtxt<'gcx, 'gcx>,\n         mods: &mut ModuleLlvm,\n         kind: AllocatorKind\n     ) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n     fn compile_codegen_unit<'a, 'tcx: 'a>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         cgu_name: InternedString,\n     ) {\n         base::compile_codegen_unit(tcx, cgu_name);\n@@ -286,7 +286,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n \n     fn codegen_crate<'b, 'tcx>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n         rx: mpsc::Receiver<Box<dyn Any + Send>>\n@@ -365,7 +365,7 @@ unsafe impl Send for ModuleLlvm { }\n unsafe impl Sync for ModuleLlvm { }\n \n impl ModuleLlvm {\n-    fn new(tcx: TyCtxt<'_, '_, '_>, mod_name: &str) -> Self {\n+    fn new(tcx: TyCtxt<'_, '_>, mod_name: &str) -> Self {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n             let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;\n@@ -377,7 +377,7 @@ impl ModuleLlvm {\n         }\n     }\n \n-    fn new_metadata(tcx: TyCtxt<'_, '_, '_>, mod_name: &str) -> Self {\n+    fn new_metadata(tcx: TyCtxt<'_, '_>, mod_name: &str) -> Self {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n             let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;"}, {"sha": "260c07a7b6287a786a769f4b71754be671fc0212", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -25,7 +25,7 @@ pub struct LinkerInfo {\n }\n \n impl LinkerInfo {\n-    pub fn new(tcx: TyCtxt<'_, '_, '_>) -> LinkerInfo {\n+    pub fn new(tcx: TyCtxt<'_, '_>) -> LinkerInfo {\n         LinkerInfo {\n             exports: tcx.sess.crate_types.borrow().iter().map(|&c| {\n                 (c, exported_symbols(tcx, c))\n@@ -1012,7 +1012,7 @@ impl<'a> Linker for WasmLd<'a> {\n     }\n }\n \n-fn exported_symbols(tcx: TyCtxt<'_, '_, '_>, crate_type: CrateType) -> Vec<String> {\n+fn exported_symbols(tcx: TyCtxt<'_, '_>, crate_type: CrateType) -> Vec<String> {\n     if let Some(ref exports) = tcx.sess.target.target.options.override_export_symbols {\n         return exports.clone()\n     }"}, {"sha": "e805cb0003f0509f20463a51861c8d2b86d33f03", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -21,7 +21,7 @@ pub type ExportedSymbols = FxHashMap<\n     Arc<Vec<(String, SymbolExportLevel)>>,\n >;\n \n-pub fn threshold(tcx: TyCtxt<'_, '_, '_>) -> SymbolExportLevel {\n+pub fn threshold(tcx: TyCtxt<'_, '_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types.borrow())\n }\n \n@@ -46,7 +46,7 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType]) -> SymbolExpor\n     }\n }\n \n-fn reachable_non_generics_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn reachable_non_generics_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                              cnum: CrateNum)\n                                              -> &'tcx DefIdMap<SymbolExportLevel>\n {\n@@ -157,7 +157,7 @@ fn reachable_non_generics_provider<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     tcx.arena.alloc(reachable_non_generics)\n }\n \n-fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                      def_id: DefId)\n                                                      -> bool {\n     let export_threshold = threshold(tcx);\n@@ -169,13 +169,13 @@ fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn is_reachable_non_generic_provider_extern<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_reachable_non_generic_provider_extern<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                       def_id: DefId)\n                                                       -> bool {\n     tcx.reachable_non_generics(def_id.krate).contains_key(&def_id)\n }\n \n-fn exported_symbols_provider_local<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn exported_symbols_provider_local<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                              cnum: CrateNum)\n                                              -> Arc<Vec<(ExportedSymbol<'tcx>,\n                                                          SymbolExportLevel)>>\n@@ -279,7 +279,7 @@ fn exported_symbols_provider_local<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n fn upstream_monomorphizations_provider<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     cnum: CrateNum)\n     -> &'tcx DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>>\n {\n@@ -329,15 +329,15 @@ fn upstream_monomorphizations_provider<'tcx>(\n }\n \n fn upstream_monomorphizations_for_provider<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId)\n     -> Option<&'tcx FxHashMap<SubstsRef<'tcx>, CrateNum>>\n {\n     debug_assert!(!def_id.is_local());\n     tcx.upstream_monomorphizations(LOCAL_CRATE).get(&def_id)\n }\n \n-fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> bool {\n+fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_, '_>, def_id: DefId) -> bool {\n     if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n         !tcx.reachable_set(LOCAL_CRATE).0.contains(&hir_id)\n     } else {\n@@ -359,7 +359,7 @@ pub fn provide_extern(providers: &mut Providers<'_>) {\n     providers.upstream_monomorphizations_for = upstream_monomorphizations_for_provider;\n }\n \n-fn symbol_export_level(tcx: TyCtxt<'_, '_, '_>, sym_def_id: DefId) -> SymbolExportLevel {\n+fn symbol_export_level(tcx: TyCtxt<'_, '_>, sym_def_id: DefId) -> SymbolExportLevel {\n     // We export anything that's not mangled at the \"C\" layer as it probably has\n     // to do with ABI concerns. We do not, however, apply such treatment to\n     // special symbols in the standard library for various plumbing between"}, {"sha": "894884e19c3fde08fab7cf42424c097aeca3a662", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -375,7 +375,7 @@ fn need_pre_lto_bitcode_for_incr_comp(sess: &Session) -> bool {\n \n pub fn start_async_codegen<B: ExtraBackendMethods>(\n     backend: B,\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     metadata: EncodedMetadata,\n     coordinator_receive: Receiver<Box<dyn Any + Send>>,\n     total_cgus: usize\n@@ -996,7 +996,7 @@ enum MainThreadWorkerState {\n \n fn start_executing_work<B: ExtraBackendMethods>(\n     backend: B,\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     crate_info: &CrateInfo,\n     shared_emitter: SharedEmitter,\n     codegen_worker_send: Sender<Message<B>>,\n@@ -1862,7 +1862,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n     }\n \n     pub fn submit_pre_codegened_module_to_llvm(&self,\n-                                                       tcx: TyCtxt<'_, '_, '_>,\n+                                                       tcx: TyCtxt<'_, '_>,\n                                                        module: ModuleCodegen<B::Module>) {\n         self.wait_for_signal_to_codegen_item();\n         self.check_for_errors(tcx.sess);\n@@ -1872,7 +1872,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n         submit_codegened_module_to_llvm(&self.backend, tcx, module, cost);\n     }\n \n-    pub fn codegen_finished(&self, tcx: TyCtxt<'_, '_, '_>) {\n+    pub fn codegen_finished(&self, tcx: TyCtxt<'_, '_>) {\n         self.wait_for_signal_to_codegen_item();\n         self.check_for_errors(tcx.sess);\n         drop(self.coordinator_send.send(Box::new(Message::CodegenComplete::<B>)));\n@@ -1911,7 +1911,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n \n pub fn submit_codegened_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     module: ModuleCodegen<B::Module>,\n     cost: u64\n ) {\n@@ -1924,7 +1924,7 @@ pub fn submit_codegened_module_to_llvm<B: ExtraBackendMethods>(\n \n pub fn submit_post_lto_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     module: CachedModuleCodegen\n ) {\n     let llvm_work_item = WorkItem::CopyPostLtoArtifacts(module);\n@@ -1936,7 +1936,7 @@ pub fn submit_post_lto_module_to_llvm<B: ExtraBackendMethods>(\n \n pub fn submit_pre_lto_module_to_llvm<B: ExtraBackendMethods>(\n     _backend: &B,\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     module: CachedModuleCodegen\n ) {\n     let filename = pre_lto_bitcode_filename(&module.name);\n@@ -1961,7 +1961,7 @@ pub fn pre_lto_bitcode_filename(module_name: &str) -> String {\n     format!(\"{}.{}\", module_name, PRE_LTO_BC_EXT)\n }\n \n-fn msvc_imps_needed(tcx: TyCtxt<'_, '_, '_>) -> bool {\n+fn msvc_imps_needed(tcx: TyCtxt<'_, '_>) -> bool {\n     // This should never be true (because it's not supported). If it is true,\n     // something is wrong with commandline arg validation.\n     assert!(!(tcx.sess.opts.cg.linker_plugin_lto.enabled() &&"}, {"sha": "517d19c56a5654655072a0c4f5b2dfd1359f485d", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -480,7 +480,7 @@ pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n \n pub fn codegen_crate<B: ExtraBackendMethods>(\n     backend: B,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n     rx: mpsc::Receiver<Box<dyn Any + Send>>\n@@ -703,7 +703,7 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n     }\n }\n \n-fn assert_and_save_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+fn assert_and_save_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     time(tcx.sess,\n          \"assert dep graph\",\n          || ::rustc_incremental::assert_dep_graph(tcx));\n@@ -714,7 +714,7 @@ fn assert_and_save_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n }\n \n impl CrateInfo {\n-    pub fn new(tcx: TyCtxt<'_, '_, '_>) -> CrateInfo {\n+    pub fn new(tcx: TyCtxt<'_, '_>) -> CrateInfo {\n         let mut info = CrateInfo {\n             panic_runtime: None,\n             compiler_builtins: None,\n@@ -780,7 +780,7 @@ impl CrateInfo {\n     }\n }\n \n-fn is_codegened_item(tcx: TyCtxt<'_, '_, '_>, id: DefId) -> bool {\n+fn is_codegened_item(tcx: TyCtxt<'_, '_>, id: DefId) -> bool {\n     let (all_mono_items, _) =\n         tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n     all_mono_items.contains(&id)\n@@ -850,7 +850,7 @@ pub fn provide_both(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn determine_cgu_reuse<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn determine_cgu_reuse<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                  cgu: &CodegenUnit<'tcx>)\n                                  -> CguReuse {\n     if !tcx.dep_graph.is_fully_enabled() {"}, {"sha": "82af0049affc9d974f0a07fdffa974e79d141154", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -122,7 +122,7 @@ mod temp_stable_hash_impls {\n     }\n }\n \n-pub fn langcall(tcx: TyCtxt<'_, '_, '_>,\n+pub fn langcall(tcx: TyCtxt<'_, '_>,\n                 span: Option<Span>,\n                 msg: &str,\n                 li: LangItem)"}, {"sha": "50847b09805e9b682b16d7a4f8e05abfa73595fb", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -8,7 +8,7 @@ use rustc_data_structures::fx::FxHashSet;\n // any caching, i.e., calling the function twice with the same type will also do\n // the work twice. The `qualified` parameter only affects the first level of the\n // type name, further levels (i.e., type parameters) are always fully qualified.\n-pub fn compute_debuginfo_type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn compute_debuginfo_type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                              t: Ty<'tcx>,\n                                              qualified: bool)\n                                              -> String {\n@@ -20,7 +20,7 @@ pub fn compute_debuginfo_type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n // Pushes the name of the type as it should be stored in debuginfo on the\n // `output` String. See also compute_debuginfo_type_name().\n-pub fn push_debuginfo_type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn push_debuginfo_type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                           t: Ty<'tcx>,\n                                           qualified: bool,\n                                           output: &mut String,\n@@ -208,7 +208,7 @@ pub fn push_debuginfo_type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n         }\n     }\n \n-    fn push_item_name(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn push_item_name(tcx: TyCtxt<'tcx, 'tcx>,\n                       def_id: DefId,\n                       qualified: bool,\n                       output: &mut String) {\n@@ -228,7 +228,7 @@ pub fn push_debuginfo_type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     // reconstructed for items from non-local crates. For local crates, this\n     // would be possible but with inlining and LTO we have to use the least\n     // common denominator - otherwise we would run into conflicts.\n-    fn push_type_params<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn push_type_params<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                   substs: SubstsRef<'tcx>,\n                                   output: &mut String,\n                                   visited: &mut FxHashSet<Ty<'tcx>>) {"}, {"sha": "e6532f47bc86fe55bacb5d78a03465ca212c23a8", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -31,22 +31,22 @@ impl<'tcx, T> Backend<'tcx> for T where\n }\n \n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send {\n-    fn new_metadata(&self, sess: TyCtxt<'_, '_, '_>, mod_name: &str) -> Self::Module;\n+    fn new_metadata(&self, sess: TyCtxt<'_, '_>, mod_name: &str) -> Self::Module;\n     fn write_compressed_metadata<'gcx>(\n         &self,\n-        tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+        tcx: TyCtxt<'gcx, 'gcx>,\n         metadata: &EncodedMetadata,\n         llvm_module: &mut Self::Module,\n     );\n     fn codegen_allocator<'gcx>(\n         &self,\n-        tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+        tcx: TyCtxt<'gcx, 'gcx>,\n         mods: &mut Self::Module,\n         kind: AllocatorKind\n     );\n     fn compile_codegen_unit<'a, 'tcx: 'a>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         cgu_name: InternedString,\n     );\n     // If find_features is true this won't access `sess.crate_types` by assuming"}, {"sha": "521ef23b825fd565eb7e394a06ff806be5e834ba", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -36,7 +36,7 @@ pub trait CodegenBackend {\n     fn provide_extern(&self, _providers: &mut Providers<'_>);\n     fn codegen_crate<'tcx>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n         rx: mpsc::Receiver<Box<dyn Any + Send>>"}, {"sha": "cc6e368f11b3bca9ab524eab2e52c28546012e18", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -36,7 +36,7 @@ pub mod symbol_names_test;\n /// error in codegen. This is used to write compile-fail tests\n /// that actually test that compilation succeeds without\n /// reporting an error.\n-pub fn check_for_rustc_errors_attr(tcx: TyCtxt<'_, '_, '_>) {\n+pub fn check_for_rustc_errors_attr(tcx: TyCtxt<'_, '_>) {\n     if let Some((def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n         if tcx.has_attr(def_id, sym::rustc_error) {\n             tcx.sess.span_fatal(tcx.def_span(def_id), \"compilation successful\");"}, {"sha": "89b35b4cc6114e44b429140d9cebde06e150a0d0", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -112,7 +112,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn symbol_name(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, instance: Instance<'tcx>) -> InternedString {\n+fn symbol_name(tcx: TyCtxt<'tcx, 'tcx>, instance: Instance<'tcx>) -> InternedString {\n     let def_id = instance.def_id();\n     let substs = instance.substs;\n "}, {"sha": "5e7b29d13a16635f8fc92619237f836ca87547e6", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -14,7 +14,7 @@ use std::fmt::{self, Write};\n use std::mem::{self, discriminant};\n \n pub(super) fn mangle(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n     instantiating_crate: Option<CrateNum>,\n ) -> String {\n@@ -69,7 +69,7 @@ pub(super) fn mangle(\n }\n \n fn get_symbol_hash<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n \n     // instance this name will be for\n     instance: Instance<'tcx>,\n@@ -180,7 +180,7 @@ impl SymbolPath {\n }\n \n struct SymbolPrinter<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     path: SymbolPath,\n \n     // When `true`, `finalize_pending_component` isn't used.\n@@ -203,7 +203,7 @@ impl Printer<'tcx, 'tcx> for SymbolPrinter<'tcx> {\n     type DynExistential = Self;\n     type Const = Self;\n \n-    fn tcx(&'a self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx(&'a self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "6a155ba1b2a3ba2fc85fa748b69cb350188afca6", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -13,7 +13,7 @@ use std::fmt::Write;\n use std::ops::Range;\n \n pub(super) fn mangle(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n     instantiating_crate: Option<CrateNum>,\n ) -> String {\n@@ -76,7 +76,7 @@ struct BinderLevel {\n }\n \n struct SymbolMangler<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     compress: Option<Box<CompressionCaches<'tcx>>>,\n     binders: Vec<BinderLevel>,\n     out: String,\n@@ -223,7 +223,7 @@ impl Printer<'tcx, 'tcx> for SymbolMangler<'tcx> {\n     type DynExistential = Self;\n     type Const = Self;\n \n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "93b8a969d0b60025a5cc1581dd2cdefafd38e21e", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -11,7 +11,7 @@ use syntax::symbol::{Symbol, sym};\n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;\n const DEF_PATH: Symbol = sym::rustc_def_path;\n \n-pub fn report_symbol_names<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn report_symbol_names<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     // if the `rustc_attrs` feature is not enabled, then the\n     // attributes we are interested in cannot be present anyway, so\n     // skip the walk.\n@@ -26,7 +26,7 @@ pub fn report_symbol_names<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n }\n \n struct SymbolNamesTest<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl SymbolNamesTest<'tcx> {"}, {"sha": "a447baa7f41a8677f9526b5659033e9163ac71fc", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -156,7 +156,7 @@ impl PpSourceMode {\n     /// Constructs a `PrinterSupport` object and passes it to `f`.\n     fn call_with_pp_support<'tcx, A, F>(&self,\n                                         sess: &'tcx Session,\n-                                        tcx: Option<TyCtxt<'tcx, 'tcx, 'tcx>>,\n+                                        tcx: Option<TyCtxt<'tcx, 'tcx>>,\n                                         f: F)\n                                         -> A\n         where F: FnOnce(&dyn PrinterSupport) -> A\n@@ -188,7 +188,7 @@ impl PpSourceMode {\n     }\n     fn call_with_pp_support_hir<'tcx, A, F>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         f: F\n     ) -> A\n         where F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate) -> A\n@@ -270,7 +270,7 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n \n struct NoAnn<'hir> {\n     sess: &'hir Session,\n-    tcx: Option<TyCtxt<'hir, 'hir, 'hir>>,\n+    tcx: Option<TyCtxt<'hir, 'hir>>,\n }\n \n impl<'hir> PrinterSupport for NoAnn<'hir> {\n@@ -311,7 +311,7 @@ impl<'hir> pprust_hir::PpAnn for NoAnn<'hir> {\n \n struct IdentifiedAnnotation<'hir> {\n     sess: &'hir Session,\n-    tcx: Option<TyCtxt<'hir, 'hir, 'hir>>,\n+    tcx: Option<TyCtxt<'hir, 'hir>>,\n }\n \n impl<'hir> PrinterSupport for IdentifiedAnnotation<'hir> {\n@@ -456,7 +456,7 @@ impl<'a> pprust::PpAnn for HygieneAnnotation<'a> {\n \n \n struct TypedAnnotation<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     tables: Cell<&'a ty::TypeckTables<'tcx>>,\n }\n \n@@ -618,7 +618,7 @@ impl UserIdentifiedItem {\n }\n \n fn print_flowgraph<'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n-                                       tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                                       tcx: TyCtxt<'tcx, 'tcx>,\n                                        code: blocks::Code<'tcx>,\n                                        mode: PpFlowGraphMode,\n                                        mut out: W)\n@@ -755,7 +755,7 @@ pub fn print_after_parsing(sess: &Session,\n }\n \n pub fn print_after_hir_lowering<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     input: &Input,\n     krate: &ast::Crate,\n     ppm: PpMode,\n@@ -866,7 +866,7 @@ pub fn print_after_hir_lowering<'tcx>(\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n fn print_with_analysis<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ppm: PpMode,\n     uii: Option<UserIdentifiedItem>,\n     ofile: Option<&Path>"}, {"sha": "5e41b8c9efda25854c66735dfeaea2bca5438586", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -51,7 +51,7 @@ use std::io::Write;\n use syntax::ast;\n use syntax_pos::Span;\n \n-pub fn assert_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn assert_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.debugging_opts.dump_dep_graph {\n             dump_graph(tcx);\n@@ -90,7 +90,7 @@ type Sources = Vec<(Span, DefId, DepNode)>;\n type Targets = Vec<(Span, ast::Name, hir::HirId, DepNode)>;\n \n struct IfThisChanged<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     if_this_changed: Sources,\n     then_this_would_need: Targets,\n }\n@@ -184,7 +184,7 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n     }\n }\n \n-fn check_paths<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_paths<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                          if_this_changed: &Sources,\n                          then_this_would_need: &Targets)\n {\n@@ -217,7 +217,7 @@ fn check_paths<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn dump_graph(tcx: TyCtxt<'_, '_, '_>) {\n+fn dump_graph(tcx: TyCtxt<'_, '_>) {\n     let path: String = env::var(\"RUST_DEP_GRAPH\").unwrap_or_else(|_| \"dep_graph\".to_string());\n     let query = tcx.dep_graph.query();\n "}, {"sha": "12f81f337d3565cb97d3bf759fd191044fa33a39", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -35,7 +35,7 @@ const MODULE: Symbol = sym::module;\n const CFG: Symbol = sym::cfg;\n const KIND: Symbol = sym::kind;\n \n-pub fn assert_module_sources<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn assert_module_sources<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.incremental.is_none() {\n             return;\n@@ -60,7 +60,7 @@ pub fn assert_module_sources<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n }\n \n struct AssertModuleSource<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     available_cgus: BTreeSet<String>,\n }\n "}, {"sha": "e281636e9a1ce272d555f0252dfb0f3feaad3b7a", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -206,7 +206,7 @@ impl Assertion {\n     }\n }\n \n-pub fn check_dirty_clean_annotations<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_dirty_clean_annotations<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     // can't add `#[rustc_dirty]` etc without opting in to this feature\n     if !tcx.features().rustc_attrs {\n         return;\n@@ -235,7 +235,7 @@ pub fn check_dirty_clean_annotations<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n }\n \n pub struct DirtyCleanVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     checked_attrs: FxHashSet<ast::AttrId>,\n }\n \n@@ -537,7 +537,7 @@ impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n ///\n /// Also make sure that the `label` and `except` fields do not\n /// both exist.\n-fn check_config(tcx: TyCtxt<'_, '_, '_>, attr: &Attribute) -> bool {\n+fn check_config(tcx: TyCtxt<'_, '_>, attr: &Attribute) -> bool {\n     debug!(\"check_config(attr={:?})\", attr);\n     let config = &tcx.sess.parse_sess.config;\n     debug!(\"check_config: config={:?}\", config);\n@@ -572,7 +572,7 @@ fn check_config(tcx: TyCtxt<'_, '_, '_>, attr: &Attribute) -> bool {\n     }\n }\n \n-fn expect_associated_value(tcx: TyCtxt<'_, '_, '_>, item: &NestedMetaItem) -> ast::Name {\n+fn expect_associated_value(tcx: TyCtxt<'_, '_>, item: &NestedMetaItem) -> ast::Name {\n     if let Some(value) = item.value_str() {\n         value\n     } else {\n@@ -590,7 +590,7 @@ fn expect_associated_value(tcx: TyCtxt<'_, '_, '_>, item: &NestedMetaItem) -> as\n // the HIR. It is used to verfiy that we really ran checks for all annotated\n // nodes.\n pub struct FindAllAttrs<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     attr_names: Vec<Symbol>,\n     found_attrs: Vec<&'tcx Attribute>,\n }"}, {"sha": "adcd06d719cd97ebb33a58bf60836bf3a72b78d8", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -15,7 +15,7 @@ use super::fs::*;\n use super::file_format;\n use super::work_product;\n \n-pub fn dep_graph_tcx_init<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn dep_graph_tcx_init<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     if !tcx.dep_graph.is_fully_enabled() {\n         return\n     }"}, {"sha": "6f175acebf95d395faea9ed6be9216b4f9a6d04a", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -15,7 +15,7 @@ use super::dirty_clean;\n use super::file_format;\n use super::work_product;\n \n-pub fn save_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn save_dep_graph<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     debug!(\"save_dep_graph()\");\n     tcx.dep_graph.with_ignore(|| {\n         let sess = tcx.sess;\n@@ -129,7 +129,7 @@ fn save_in<F>(sess: &Session, path_buf: PathBuf, encode: F)\n     }\n }\n \n-fn encode_dep_graph(tcx: TyCtxt<'_, '_, '_>,\n+fn encode_dep_graph(tcx: TyCtxt<'_, '_>,\n                     encoder: &mut Encoder) {\n     // First encode the commandline arguments hash\n     tcx.sess.opts.dep_tracking_hash().encode(encoder).unwrap();\n@@ -234,7 +234,7 @@ fn encode_work_product_index(work_products: &FxHashMap<WorkProductId, WorkProduc\n     serialized_products.encode(encoder).unwrap();\n }\n \n-fn encode_query_cache(tcx: TyCtxt<'_, '_, '_>,\n+fn encode_query_cache(tcx: TyCtxt<'_, '_>,\n                       encoder: &mut Encoder) {\n     time(tcx.sess, \"serialize query result cache\", || {\n         tcx.serialize_query_result_cache(encoder).unwrap();"}, {"sha": "2fc78dcddd0409f630b007190938cd4df92ade9a", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -798,7 +798,7 @@ declare_box_region_type!(\n impl BoxedGlobalCtxt {\n     pub fn enter<F, R>(&mut self, f: F) -> R\n     where\n-        F: for<'tcx> FnOnce(TyCtxt<'tcx, 'tcx, 'tcx>) -> R\n+        F: for<'tcx> FnOnce(TyCtxt<'tcx, 'tcx>) -> R\n     {\n         self.access(|gcx| ty::tls::enter_global(gcx, |tcx| f(tcx)))\n     }\n@@ -879,7 +879,7 @@ pub fn create_global_ctxt(\n /// Runs the resolution, type-checking, region checking and other\n /// miscellaneous analysis passes on the crate.\n fn analysis<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     cnum: CrateNum,\n ) -> Result<()> {\n     assert_eq!(cnum, LOCAL_CRATE);\n@@ -999,7 +999,7 @@ fn analysis<'tcx>(\n }\n \n fn encode_and_write_metadata<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     outputs: &OutputFilenames,\n ) -> (middle::cstore::EncodedMetadata, bool) {\n     #[derive(PartialEq, Eq, PartialOrd, Ord)]\n@@ -1062,7 +1062,7 @@ fn encode_and_write_metadata<'tcx>(\n /// be discarded.\n pub fn start_codegen<'tcx>(\n     codegen_backend: &dyn CodegenBackend,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     rx: mpsc::Receiver<Box<dyn Any + Send>>,\n     outputs: &OutputFilenames,\n ) -> Box<dyn Any> {"}, {"sha": "864b59d8a84c4d6bc61884bed02f5faf91f60220", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -6,12 +6,12 @@ use rustc::ty::query::Providers;\n use syntax::attr;\n use syntax::symbol::sym;\n \n-pub fn find<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<DefId> {\n+pub fn find<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> Option<DefId> {\n     tcx.proc_macro_decls_static(LOCAL_CRATE)\n }\n \n fn proc_macro_decls_static<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     cnum: CrateNum,\n ) -> Option<DefId> {\n     assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "5eff28b194b98d1897ec692ef01cb14a7c6c273f", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -75,7 +75,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn lint_mod<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn lint_mod<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     lint::late_lint_mod(tcx, module_def_id, BuiltinCombinedModuleLateLintPass::new());\n }\n "}, {"sha": "494f0b66760521841addad4ab77c09aa6d023a40", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -519,11 +519,11 @@ enum FfiResult<'tcx> {\n     },\n }\n \n-fn is_zst<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, did: DefId, ty: Ty<'tcx>) -> bool {\n+fn is_zst<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, did: DefId, ty: Ty<'tcx>) -> bool {\n     tcx.layout_of(tcx.param_env(did).and(ty)).map(|layout| layout.is_zst()).unwrap_or(false)\n }\n \n-fn ty_is_known_nonnull<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n+fn ty_is_known_nonnull<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n         ty::FnPtr(_) => true,\n         ty::Ref(..) => true,\n@@ -555,7 +555,7 @@ fn ty_is_known_nonnull<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> boo\n /// to function pointers, references, core::num::NonZero*,\n /// core::ptr::NonNull, and #[repr(transparent)] newtypes.\n /// FIXME: This duplicates code in codegen.\n-fn is_repr_nullable_ptr<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_repr_nullable_ptr<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                   ty: Ty<'tcx>,\n                                   ty_def: &'tcx ty::AdtDef,\n                                   substs: SubstsRef<'tcx>)"}, {"sha": "bb6595b5a803657513def8c230c280ad0e6b5e2c", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -327,7 +327,7 @@ fn add_query_description_impl(\n             quote! {\n                 #[inline]\n                 fn try_load_from_disk(\n-                    #tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                    #tcx: TyCtxt<'tcx, 'tcx>,\n                     #id: SerializedDepNodeIndex\n                 ) -> Option<Self::Value> {\n                     #block\n@@ -338,7 +338,7 @@ fn add_query_description_impl(\n             quote! {\n                 #[inline]\n                 fn try_load_from_disk(\n-                    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                    tcx: TyCtxt<'tcx, 'tcx>,\n                     id: SerializedDepNodeIndex\n                 ) -> Option<Self::Value> {\n                     tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n@@ -350,7 +350,7 @@ fn add_query_description_impl(\n         quote! {\n             #[inline]\n             #[allow(unused_variables)]\n-            fn cache_on_disk(#tcx: TyCtxt<'tcx, 'tcx, 'tcx>, #key: Self::Key) -> bool {\n+            fn cache_on_disk(#tcx: TyCtxt<'tcx, 'tcx>, #key: Self::Key) -> bool {\n                 #expr\n             }\n \n@@ -367,7 +367,7 @@ fn add_query_description_impl(\n         quote! {\n             #[allow(unused_variables)]\n             fn describe(\n-                #tcx: TyCtxt<'_, '_, '_>,\n+                #tcx: TyCtxt<'_, '_>,\n                 #key: #arg,\n             ) -> Cow<'static, str> {\n                 format!(#desc).into()"}, {"sha": "75020693461a46aa4859d165d27af265fbe75035", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -40,7 +40,7 @@ macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => $compute:block)*) => {\n         pub fn provide_extern<$lt>(providers: &mut Providers<$lt>) {\n-            $(fn $name<$lt:$lt, T>($tcx: TyCtxt<$lt, $lt, $lt>, def_id_arg: T)\n+            $(fn $name<$lt:$lt, T>($tcx: TyCtxt<$lt, $lt>, def_id_arg: T)\n                                     -> <ty::queries::$name<$lt> as\n                                         QueryConfig<$lt>>::Value\n                 where T: IntoArgs,\n@@ -551,7 +551,7 @@ impl CrateStore for cstore::CStore {\n     }\n \n     fn encode_metadata<'tcx>(&self,\n-                                 tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                                 tcx: TyCtxt<'tcx, 'tcx>)\n                                  -> EncodedMetadata\n     {\n         encoder::encode_metadata(tcx)"}, {"sha": "017c38e0f9d500f945e14f707825767e869526ce", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -39,7 +39,7 @@ pub struct DecodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Decoder<'a>,\n     cdata: Option<&'a CrateMetadata>,\n     sess: Option<&'a Session>,\n-    tcx: Option<TyCtxt<'tcx, 'tcx, 'tcx>>,\n+    tcx: Option<TyCtxt<'tcx, 'tcx>>,\n \n     // Cache the last used source_file for translating spans as an optimization.\n     last_source_file_index: usize,\n@@ -55,7 +55,7 @@ pub trait Metadata<'a, 'tcx>: Copy {\n     fn raw_bytes(self) -> &'a [u8];\n     fn cdata(self) -> Option<&'a CrateMetadata> { None }\n     fn sess(self) -> Option<&'a Session> { None }\n-    fn tcx(self) -> Option<TyCtxt<'tcx, 'tcx, 'tcx>> { None }\n+    fn tcx(self) -> Option<TyCtxt<'tcx, 'tcx>> { None }\n \n     fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {\n         let tcx = self.tcx();\n@@ -114,14 +114,14 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, &'a Session) {\n     }\n }\n \n-impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'tcx, 'tcx, 'tcx>) {\n+impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'tcx, 'tcx>) {\n     fn raw_bytes(self) -> &'a [u8] {\n         self.0.raw_bytes()\n     }\n     fn cdata(self) -> Option<&'a CrateMetadata> {\n         Some(self.0)\n     }\n-    fn tcx(self) -> Option<TyCtxt<'tcx, 'tcx, 'tcx>> {\n+    fn tcx(self) -> Option<TyCtxt<'tcx, 'tcx>> {\n         Some(self.1)\n     }\n }\n@@ -146,7 +146,7 @@ impl<'a, 'tcx: 'a, T: Decodable> LazySeq<T> {\n }\n \n impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n-    pub fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx.expect(\"missing TyCtxt in DecodeContext\")\n     }\n \n@@ -172,7 +172,7 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n \n     #[inline]\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx.expect(\"missing TyCtxt in DecodeContext\")\n     }\n \n@@ -547,7 +547,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     fn get_variant(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         item: &Entry<'_>,\n         index: DefIndex,\n         parent_did: DefId,\n@@ -590,7 +590,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn get_adt_def(&self,\n                        item_id: DefIndex,\n-                       tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                       tcx: TyCtxt<'tcx, 'tcx>)\n                        -> &'tcx ty::AdtDef {\n         let item = self.entry(item_id);\n         let did = self.local_def_id(item_id);\n@@ -618,21 +618,21 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn get_predicates(&self,\n                           item_id: DefIndex,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                          tcx: TyCtxt<'tcx, 'tcx>)\n                           -> ty::GenericPredicates<'tcx> {\n         self.entry(item_id).predicates.unwrap().decode((self, tcx))\n     }\n \n     pub fn get_predicates_defined_on(&self,\n                                    item_id: DefIndex,\n-                                   tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                                   tcx: TyCtxt<'tcx, 'tcx>)\n                                    -> ty::GenericPredicates<'tcx> {\n         self.entry(item_id).predicates_defined_on.unwrap().decode((self, tcx))\n     }\n \n     pub fn get_super_predicates(&self,\n                                 item_id: DefIndex,\n-                                tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                                tcx: TyCtxt<'tcx, 'tcx>)\n                                 -> ty::GenericPredicates<'tcx> {\n         let super_predicates = match self.entry(item_id).kind {\n             EntryKind::Trait(data) => data.decode(self).super_predicates,\n@@ -650,7 +650,7 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(item_id).generics.unwrap().decode((self, sess))\n     }\n \n-    pub fn get_type(&self, id: DefIndex, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Ty<'tcx> {\n+    pub fn get_type(&self, id: DefIndex, tcx: TyCtxt<'tcx, 'tcx>) -> Ty<'tcx> {\n         self.entry(id).ty.unwrap().decode((self, tcx))\n     }\n \n@@ -702,15 +702,15 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn get_impl_trait(&self,\n                           id: DefIndex,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                          tcx: TyCtxt<'tcx, 'tcx>)\n                           -> Option<ty::TraitRef<'tcx>> {\n         self.get_impl_data(id).trait_ref.map(|tr| tr.decode((self, tcx)))\n     }\n \n     /// Iterates over all the stability attributes in the given crate.\n     pub fn get_lib_features(\n         &self,\n-        tcx: TyCtxt<'_, 'tcx, '_>,\n+        tcx: TyCtxt<'tcx, '_>,\n     ) -> &'tcx [(ast::Name, Option<ast::Name>)] {\n         // FIXME: For a proc macro crate, not sure whether we should return the \"host\"\n         // features or an empty Vec. Both don't cause ICEs.\n@@ -722,7 +722,7 @@ impl<'a, 'tcx> CrateMetadata {\n     /// Iterates over the language items in the given crate.\n     pub fn get_lang_items(\n         &self,\n-        tcx: TyCtxt<'_, 'tcx, '_>,\n+        tcx: TyCtxt<'tcx, '_>,\n     ) -> &'tcx [(DefId, usize)] {\n         if self.proc_macros.is_some() {\n             // Proc macro crates do not export any lang-items to the target.\n@@ -885,7 +885,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn maybe_get_optimized_mir(&self,\n-                                   tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                                   tcx: TyCtxt<'tcx, 'tcx>,\n                                    id: DefIndex)\n                                    -> Option<Body<'tcx>> {\n         match self.is_proc_macro(id) {\n@@ -1019,7 +1019,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn get_inherent_implementations_for_type(\n         &self,\n-        tcx: TyCtxt<'_, 'tcx, '_>,\n+        tcx: TyCtxt<'tcx, '_>,\n         id: DefIndex\n     ) -> &'tcx [DefId] {\n         tcx.arena.alloc_from_iter(self.entry(id)\n@@ -1030,7 +1030,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn get_implementations_for_trait(\n         &self,\n-        tcx: TyCtxt<'_, 'tcx, '_>,\n+        tcx: TyCtxt<'tcx, '_>,\n         filter: Option<DefId>,\n     ) -> &'tcx [DefId] {\n         if self.proc_macros.is_some() {\n@@ -1087,7 +1087,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn get_foreign_modules(\n         &self,\n-        tcx: TyCtxt<'_, 'tcx, '_>,\n+        tcx: TyCtxt<'tcx, '_>,\n     ) -> &'tcx [ForeignModule] {\n         if self.proc_macros.is_some() {\n             // Proc macro crates do not have any *target* foreign modules.\n@@ -1099,7 +1099,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn get_dylib_dependency_formats(\n         &self,\n-        tcx: TyCtxt<'_, 'tcx, '_>,\n+        tcx: TyCtxt<'tcx, '_>,\n     ) -> &'tcx [(CrateNum, LinkagePreference)] {\n         tcx.arena.alloc_from_iter(self.root\n             .dylib_dependency_formats\n@@ -1113,7 +1113,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn get_missing_lang_items(\n         &self,\n-        tcx: TyCtxt<'_, 'tcx, '_>,\n+        tcx: TyCtxt<'tcx, '_>,\n     ) -> &'tcx [lang_items::LangItem] {\n         if self.proc_macros.is_some() {\n             // Proc macro crates do not depend on any target weak lang-items.\n@@ -1136,7 +1136,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn exported_symbols(&self,\n-                            tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                            tcx: TyCtxt<'tcx, 'tcx>)\n                             -> Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)> {\n         if self.proc_macros.is_some() {\n             // If this crate is a custom derive crate, then we're not even going to\n@@ -1194,7 +1194,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn fn_sig(&self,\n                   id: DefIndex,\n-                  tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                  tcx: TyCtxt<'tcx, 'tcx>)\n                   -> ty::PolyFnSig<'tcx> {\n         let sig = match self.entry(id).kind {\n             EntryKind::Fn(data) |"}, {"sha": "ee7ffa1b0662813b21e47d84521a0a39bfc4bfde", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -42,7 +42,7 @@ use rustc::hir::intravisit;\n \n pub struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,\n-    pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n \n     entries_index: Index<'tcx>,\n \n@@ -1818,7 +1818,7 @@ impl EncodeContext<'tcx> {\n }\n \n struct ImplVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     impls: FxHashMap<DefId, Vec<DefIndex>>,\n }\n \n@@ -1865,7 +1865,7 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n-pub fn encode_metadata<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+pub fn encode_metadata<'tcx>(tcx: TyCtxt<'tcx, 'tcx>)\n                                  -> EncodedMetadata\n {\n     let mut encoder = opaque::Encoder::new(vec![]);\n@@ -1909,7 +1909,7 @@ pub fn encode_metadata<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n     EncodedMetadata { raw_data: result }\n }\n \n-pub fn get_repr_options<'tcx, 'gcx>(tcx: TyCtxt<'gcx, 'tcx, 'gcx>, did: DefId) -> ReprOptions {\n+pub fn get_repr_options<'tcx, 'gcx>(tcx: TyCtxt<'tcx, 'gcx>, did: DefId) -> ReprOptions {\n     let ty = tcx.type_of(did);\n     match ty.sty {\n         ty::Adt(ref def, _) => return def.repr,"}, {"sha": "7520fb607c5fa76df970b28664fbd37b4db3911b", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::middle::cstore::ForeignModule;\n use rustc::ty::TyCtxt;\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<ForeignModule> {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> Vec<ForeignModule> {\n     let mut collector = Collector {\n         tcx,\n         modules: Vec::new(),\n@@ -13,7 +13,7 @@ pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<ForeignModule> {\n }\n \n struct Collector<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     modules: Vec<ForeignModule>,\n }\n "}, {"sha": "1c50b0f293a622d190bd6f0932e23c0a639c08e9", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::TyCtxt;\n use rustc_target::spec::abi::Abi;\n use syntax::symbol::sym;\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<String> {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> Vec<String> {\n     let mut collector = Collector {\n         args: Vec::new(),\n     };"}, {"sha": "bcd91eb22cf1f24899fb638b8b4528f7788439d5", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -11,7 +11,7 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax::symbol::{Symbol, sym};\n use syntax::{span_err, struct_span_err};\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Vec<NativeLibrary> {\n+pub fn collect<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> Vec<NativeLibrary> {\n     let mut collector = Collector {\n         tcx,\n         libs: Vec::new(),\n@@ -29,7 +29,7 @@ pub fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n }\n \n struct Collector<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     libs: Vec<NativeLibrary>,\n }\n "}, {"sha": "85a5669dfe1420db29039fcb82ad3e122a6f159d", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -122,7 +122,7 @@ impl LocalsStateAtExit {\n \n impl<'tcx> BorrowSet<'tcx> {\n     pub fn build(\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         body: &Body<'tcx>,\n         locals_are_invalidated_at_exit: bool,\n         move_data: &MoveData<'tcx>\n@@ -162,7 +162,7 @@ impl<'tcx> BorrowSet<'tcx> {\n }\n \n struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &'a Body<'tcx>,\n     idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n     location_map: FxHashMap<Location, BorrowIndex>,"}, {"sha": "60ad8921c0b3d439ca9cbf20880074037ca694c1", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -87,7 +87,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> BorrowCheckResult<'tcx> {\n+fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> BorrowCheckResult<'tcx> {\n     let input_body = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n "}, {"sha": "a010338a08d12033737192f07ca8f48ae563f5f9", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -96,7 +96,7 @@ impl BorrowedContentSource<'tcx> {\n         }\n     }\n \n-    fn from_call(func: Ty<'tcx>, tcx: TyCtxt<'tcx, '_, 'tcx>) -> Option<Self> {\n+    fn from_call(func: Ty<'tcx>, tcx: TyCtxt<'_, 'tcx>) -> Option<Self> {\n         match func.sty {\n             ty::FnDef(def_id, substs) => {\n                 let trait_id = tcx.trait_of_item(def_id)?;"}, {"sha": "ccdde320df06e8a201c590499d289be0d5354732", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n }\n \n fn suggest_ampmut_self<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     local_decl: &mir::LocalDecl<'tcx>,\n ) -> (Span, String) {\n     let sp = local_decl.source_info.span;\n@@ -556,7 +556,7 @@ fn suggest_ampmut_self<'gcx, 'tcx>(\n // This implementation attempts to emulate AST-borrowck prioritization\n // by trying (3.), then (2.) and finally falling back on (1.).\n fn suggest_ampmut<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     local: Local,\n     local_decl: &mir::LocalDecl<'tcx>,\n@@ -623,7 +623,7 @@ fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n ///    |        ---------- use `&'a mut String` here to make mutable\n /// ```\n fn annotate_struct_field(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     ty: Ty<'tcx>,\n     field: &mir::Field,\n ) -> Option<(Span, String)> {"}, {"sha": "5563bdcaebf2725eb35a0bf7b49750f2c8c129f3", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n crate fn find<'tcx>(\n     body: &Body<'tcx>,\n     regioncx: &Rc<RegionInferenceContext<'tcx>>,\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     region_vid: RegionVid,\n     start_point: Location,\n ) -> Option<Cause> {\n@@ -30,7 +30,7 @@ crate fn find<'tcx>(\n struct UseFinder<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     body: &'cx Body<'tcx>,\n     regioncx: &'cx Rc<RegionInferenceContext<'tcx>>,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     region_vid: RegionVid,\n     start_point: Location,\n }\n@@ -101,7 +101,7 @@ impl<'cx, 'gcx, 'tcx> UseFinder<'cx, 'gcx, 'tcx> {\n \n struct DefUseVisitor<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     body: &'cx Body<'tcx>,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     region_vid: RegionVid,\n     def_use_result: Option<DefUseResult>,\n }"}, {"sha": "a8b197135b0a0d38399d2d5cfa26306910591b59", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -53,7 +53,7 @@ impl BorrowExplanation {\n     }\n     pub(in crate::borrow_check) fn add_explanation_to_diagnostic<'gcx, 'tcx>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         body: &Body<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         borrow_desc: &str,"}, {"sha": "fdeec036ad0430576a61e5a2dd3383608f028e6f", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -15,7 +15,7 @@ crate type AllFacts = PoloniusAllFacts<RegionVid, BorrowIndex, LocationIndex>;\n crate trait AllFactsExt {\n     /// Returns `true` if there is a need to gather `AllFacts` given the\n     /// current `-Z` flags.\n-    fn enabled(tcx: TyCtxt<'_, '_, '_>) -> bool;\n+    fn enabled(tcx: TyCtxt<'_, '_>) -> bool;\n \n     fn write_to_dir(\n         &self,\n@@ -26,7 +26,7 @@ crate trait AllFactsExt {\n \n impl AllFactsExt for AllFacts {\n     /// Return\n-    fn enabled(tcx: TyCtxt<'_, '_, '_>) -> bool {\n+    fn enabled(tcx: TyCtxt<'_, '_>) -> bool {\n         tcx.sess.opts.debugging_opts.nll_facts\n             || tcx.sess.opts.debugging_opts.polonius\n     }"}, {"sha": "12433ca365d68338ce4c1b96a673f2869286a083", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -18,7 +18,7 @@ use rustc::mir::{Operand, BorrowKind};\n use rustc_data_structures::graph::dominators::Dominators;\n \n pub(super) fn generate_invalidates<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,\n     body: &Body<'tcx>,\n@@ -44,7 +44,7 @@ pub(super) fn generate_invalidates<'gcx, 'tcx>(\n }\n \n struct InvalidationGenerator<'cx, 'tcx: 'cx, 'gcx: 'tcx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     all_facts: &'cx mut AllFacts,\n     location_table: &'cx LocationTable,\n     body: &'cx Body<'tcx>,"}, {"sha": "a263d3be3a54715f208acf2b857af07656b86141", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -194,7 +194,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// named variants.\n     fn give_name_from_error_region(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n@@ -303,7 +303,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// ```\n     fn get_named_span(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         error_region: &RegionKind,\n         name: InternedString,\n     ) -> Span {\n@@ -461,7 +461,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// to highlighting that closest type instead.\n     fn give_name_if_we_can_match_hir_ty(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n         argument_hir_ty: &hir::Ty,\n@@ -653,7 +653,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// ```\n     fn give_name_if_anonymous_region_appears_in_upvars(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         upvars: &[Upvar],\n         fr: RegionVid,\n         counter: &mut usize,"}, {"sha": "882a52a0c45653c4b8cfae207710b2a80a3be7ff", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -10,7 +10,7 @@ use syntax_pos::symbol::Symbol;\n impl<'tcx> RegionInferenceContext<'tcx> {\n     crate fn get_var_name_and_span_for_region(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         body: &Body<'tcx>,\n         upvars: &[Upvar],\n         fr: RegionVid,\n@@ -35,7 +35,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Search the upvars (if any) to find one that references fr. Return its index.\n     crate fn get_upvar_index_for_region(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         fr: RegionVid,\n     ) -> Option<usize> {\n         let upvar_index = self\n@@ -69,7 +69,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// declared.\n     crate fn get_upvar_name_and_span_for_region(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         upvars: &[Upvar],\n         upvar_index: usize,\n     ) -> (Symbol, Span) {\n@@ -91,7 +91,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// user - in particular, index 0 is not the implicit self parameter.\n     crate fn get_argument_index_for_region(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         fr: RegionVid,\n     ) -> Option<usize> {\n         let implicit_inputs = self.universal_regions.defining_ty.implicit_inputs();"}, {"sha": "13606f61a689c0cb2436d6c18e4c572f6ab6883e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -370,7 +370,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Adds annotations for `#[rustc_regions]`; see `UniversalRegions::annotate`.\n-    crate fn annotate(&self, tcx: TyCtxt<'tcx, '_, 'tcx>, err: &mut DiagnosticBuilder<'_>) {\n+    crate fn annotate(&self, tcx: TyCtxt<'_, 'tcx>, err: &mut DiagnosticBuilder<'_>) {\n         self.universal_regions.annotate(tcx, err)\n     }\n \n@@ -943,7 +943,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// `point`.\n     fn eval_verify_bound(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         body: &Body<'tcx>,\n         generic_ty: Ty<'tcx>,\n         lower_bound: RegionVid,\n@@ -976,7 +976,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     fn eval_if_eq(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         body: &Body<'tcx>,\n         generic_ty: Ty<'tcx>,\n         lower_bound: RegionVid,\n@@ -1022,7 +1022,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// higher-ranked things and so forth, and right now the inference\n     /// context is not permitted to make more inference variables. So\n     /// we use this kind of hacky solution.\n-    fn normalize_to_scc_representatives<T>(&self, tcx: TyCtxt<'tcx, '_, 'tcx>, value: T) -> T\n+    fn normalize_to_scc_representatives<T>(&self, tcx: TyCtxt<'_, 'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -1368,14 +1368,14 @@ impl<'tcx> RegionDefinition<'tcx> {\n pub trait ClosureRegionRequirementsExt<'gcx, 'tcx> {\n     fn apply_requirements(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         closure_def_id: DefId,\n         closure_substs: SubstsRef<'tcx>,\n     ) -> Vec<QueryRegionConstraint<'tcx>>;\n \n     fn subst_closure_mapping<T>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         closure_mapping: &IndexVec<RegionVid, ty::Region<'tcx>>,\n         value: &T,\n     ) -> T\n@@ -1398,7 +1398,7 @@ impl<'gcx, 'tcx> ClosureRegionRequirementsExt<'gcx, 'tcx> for ClosureRegionRequi\n     /// requirements.\n     fn apply_requirements(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         closure_def_id: DefId,\n         closure_substs: SubstsRef<'tcx>,\n     ) -> Vec<QueryRegionConstraint<'tcx>> {\n@@ -1453,7 +1453,7 @@ impl<'gcx, 'tcx> ClosureRegionRequirementsExt<'gcx, 'tcx> for ClosureRegionRequi\n \n     fn subst_closure_mapping<T>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         closure_mapping: &IndexVec<RegionVid, ty::Region<'tcx>>,\n         value: &T,\n     ) -> T"}, {"sha": "01dd60cc4891c092279a79dff00c126ad1f58e5c", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -15,7 +15,7 @@ use syntax_pos::DUMMY_SP;\n \n crate struct ConstraintConversion<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     universal_regions: &'a UniversalRegions<'tcx>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,"}, {"sha": "240588b1c88d3a768cf3246fcdf8e0aceb822488", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -75,7 +75,7 @@ pub(super) fn generate<'gcx, 'tcx>(\n // some region `R` in its type where `R` is not known to outlive a free\n // region (i.e., where `R` may be valid for just a subset of the fn body).\n fn compute_live_locals(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     free_regions: &FxHashSet<RegionVid>,\n     body: &Body<'tcx>,\n ) -> Vec<Local> {"}, {"sha": "bbfffc68b9692d10dc4e6839f36ab2455007bdef", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -235,7 +235,7 @@ fn translate_outlives_facts(cx: &mut BorrowCheckContext<'_, '_>) {\n     }\n }\n \n-fn mirbug(tcx: TyCtxt<'_, '_, '_>, span: Span, msg: &str) {\n+fn mirbug(tcx: TyCtxt<'_, '_>, span: Span, msg: &str) {\n     // We sometimes see MIR failures (notably predicate failures) due to\n     // the fact that we check rvalue sized predicates here. So use `delay_span_bug`\n     // to avoid reporting bugs in those cases.\n@@ -391,7 +391,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.cx.infcx.tcx\n     }\n \n@@ -1313,7 +1313,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         Ok(())\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -2504,7 +2504,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n     fn prove_closure_bounds(\n         &mut self,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n         location: Location,"}, {"sha": "6e64a6fae58d610110b5edf8e8d9395ea4a0d760", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> DefiningTy<'tcx> {\n     /// not a closure or generator, there are no upvars, and hence it\n     /// will be an empty list. The order of types in this list will\n     /// match up with the upvar order in the HIR, typesystem, and MIR.\n-    pub fn upvar_tys(self, tcx: TyCtxt<'tcx, '_, 'tcx>) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n+    pub fn upvar_tys(self, tcx: TyCtxt<'_, 'tcx>) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         match self {\n             DefiningTy::Closure(def_id, substs) => Either::Left(substs.upvar_tys(def_id, tcx)),\n             DefiningTy::Generator(def_id, substs, _) => {\n@@ -218,7 +218,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// `'1: '2`, then the caller would impose the constraint that\n     /// `V[1]: V[2]`.\n     pub fn closure_mapping(\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         closure_substs: SubstsRef<'tcx>,\n         expected_num_vars: usize,\n         closure_base_def_id: DefId,\n@@ -305,7 +305,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// that this region imposes on others. The methods in this file\n     /// handle the part about dumping the inference context internal\n     /// state.\n-    crate fn annotate(&self, tcx: TyCtxt<'tcx, '_, 'tcx>, err: &mut DiagnosticBuilder<'_>) {\n+    crate fn annotate(&self, tcx: TyCtxt<'_, 'tcx>, err: &mut DiagnosticBuilder<'_>) {\n         match self.defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n                 err.note(&format!(\n@@ -744,7 +744,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n \n     /// Replaces all free regions in `value` with region vids, as\n     /// returned by `to_region_vid`.\n-    pub fn fold_to_region_vids<T>(&self, tcx: TyCtxt<'tcx, '_, 'tcx>, value: &T) -> T\n+    pub fn fold_to_region_vids<T>(&self, tcx: TyCtxt<'_, 'tcx>, value: &T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -757,7 +757,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n /// Iterates over the late-bound regions defined on fn_def_id and\n /// invokes `f` with the liberated form of each one.\n fn for_each_late_bound_region_defined_on<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     fn_def_id: DefId,\n     mut f: impl FnMut(ty::Region<'tcx>),\n ) {"}, {"sha": "10a92253f9f64fcd649d3a535ca23b15fa74b1aa", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -24,7 +24,7 @@ pub(super) enum Control {\n /// Encapsulates the idea of iterating over every borrow that involves a particular path\n pub(super) fn each_borrow_involving_path<'tcx, 'gcx: 'tcx, F, I, S> (\n     s: &mut S,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     _location: Location,\n     access_place: (AccessDepth, &Place<'tcx>),"}, {"sha": "b969f0fd3c7aa02d5882c51d53f1077afab0a6e1", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -12,7 +12,7 @@ crate trait PlaceExt<'tcx> {\n     /// for borrows of raw pointer dereferents as well as shared references.\n     fn ignore_borrow(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         body: &Body<'tcx>,\n         locals_state_at_exit: &LocalsStateAtExit,\n         ) -> bool;\n@@ -21,7 +21,7 @@ crate trait PlaceExt<'tcx> {\n impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n     fn ignore_borrow(\n         &self,\n-        tcx: TyCtxt<'tcx, '_, 'tcx>,\n+        tcx: TyCtxt<'_, 'tcx>,\n         body: &Body<'tcx>,\n         locals_state_at_exit: &LocalsStateAtExit,\n     ) -> bool {"}, {"sha": "c1cbfd9e3c0bacbf12eed79f09991ca66eede10e", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -25,7 +25,7 @@ crate enum PlaceConflictBias {\n /// This is used to check for places conflicting outside of the borrow checking code (such as in\n /// dataflow).\n crate fn places_conflict<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     borrow_place: &Place<'tcx>,\n     access_place: &Place<'tcx>,\n@@ -47,7 +47,7 @@ crate fn places_conflict<'gcx, 'tcx>(\n /// array indices, for example) should be interpreted - this depends on what the caller wants in\n /// order to make the conservative choice and preserve soundness.\n pub(super) fn borrow_conflicts_with_place<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     borrow_place: &Place<'tcx>,\n     borrow_kind: BorrowKind,\n@@ -84,7 +84,7 @@ pub(super) fn borrow_conflicts_with_place<'gcx, 'tcx>(\n }\n \n fn place_components_conflict<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     borrow_projections: (&PlaceBase<'tcx>, ProjectionsIter<'_, 'tcx>),\n     borrow_kind: BorrowKind,\n@@ -299,7 +299,7 @@ fn place_components_conflict<'gcx, 'tcx>(\n // or disjoint (and have the same type!), return the overlap situation\n // between `elem1` and `elem2`.\n fn place_base_conflict<'gcx: 'tcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     elem1: &PlaceBase<'tcx>,\n     elem2: &PlaceBase<'tcx>,\n ) -> Overlap {\n@@ -366,7 +366,7 @@ fn place_base_conflict<'gcx: 'tcx, 'tcx>(\n // or disjoint (and have the same type!), return the overlap situation\n // between `elem1` and `elem2`.\n fn place_projection_conflict<'gcx: 'tcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     pi1: &Projection<'tcx>,\n     pi2: &Projection<'tcx>,"}, {"sha": "dd4aac0330c1ece65de357e09fd894fbe480dbab", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> IsPrefixOf<'tcx> for Place<'tcx> {\n \n pub(super) struct Prefixes<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     body: &'cx Body<'tcx>,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     kind: PrefixSet,\n     next: Option<&'cx Place<'tcx>>,\n }"}, {"sha": "f4b6f438163f96fc53591db75bae0e9931268d10", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -25,7 +25,7 @@ use syntax_pos::Span;\n use super::lints;\n \n /// Construct the MIR for a given `DefId`.\n-pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Body<'tcx> {\n+pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> Body<'tcx> {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n@@ -185,7 +185,7 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Body<'tc\n /// to the global tcx. Sadly, we don't have a \"folder\" that\n /// can change `'tcx` so we have to transmute afterwards.\n struct GlobalizeMir<'gcx> {\n-    tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+    tcx: TyCtxt<'gcx, 'gcx>,\n     span: Span\n }\n \n@@ -234,7 +234,7 @@ impl<'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'gcx> {\n ///////////////////////////////////////////////////////////////////////////\n // BuildMir -- walks a crate, looking for fn items and methods to build MIR from\n \n-fn liberated_closure_env_ty<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn liberated_closure_env_ty<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                             closure_expr_id: hir::HirId,\n                                             body_id: hir::BodyId)\n                                             -> Ty<'tcx> {\n@@ -551,7 +551,7 @@ macro_rules! unpack {\n     };\n }\n \n-fn should_abort_on_panic<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn should_abort_on_panic<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                          fn_def_id: DefId,\n                                          abi: Abi)\n                                          -> bool {"}, {"sha": "458e68cfcc59e297a297e193b7b128a030af68e0", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -44,7 +44,7 @@ const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n /// of a function's generic parameter will require knowledge about the bounds on the generic\n /// parameter. These bounds are passed to `mk_eval_cx` via the `ParamEnv` argument.\n pub(crate) fn mk_eval_cx<'mir, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n ) -> CompileTimeEvalContext<'mir, 'tcx> {\n@@ -53,7 +53,7 @@ pub(crate) fn mk_eval_cx<'mir, 'tcx>(\n }\n \n pub(crate) fn eval_promoted<'mir, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     cid: GlobalId<'tcx>,\n     body: &'mir mir::Body<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -474,7 +474,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx>\n // this function uses `unwrap` copiously, because an already validated constant must have valid\n // fields and can thus never fail outside of compiler bugs\n pub fn const_field<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     variant: Option<VariantIdx>,\n     field: mir::Field,\n@@ -499,7 +499,7 @@ pub fn const_field<'tcx>(\n // this function uses `unwrap` copiously, because an already validated constant must have valid\n // fields and can thus never fail outside of compiler bugs\n pub fn const_variant_index<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     val: &'tcx ty::Const<'tcx>,\n ) -> VariantIdx {\n@@ -519,7 +519,7 @@ pub fn error_to_const_error<'mir, 'tcx>(\n }\n \n fn validate_and_turn_into_const<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     constant: RawConst<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n@@ -562,7 +562,7 @@ fn validate_and_turn_into_const<'tcx>(\n }\n \n pub fn const_eval_provider<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     // see comment in const_eval_provider for what we're doing here\n@@ -586,7 +586,7 @@ pub fn const_eval_provider<'tcx>(\n }\n \n pub fn const_eval_raw_provider<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalRawResult<'tcx> {\n     // Because the constant is computed twice (once per value of `Reveal`), we are at risk of"}, {"sha": "6a536dc427bee5d4e53278f969d4f176254626e1", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -46,7 +46,7 @@ pub fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,\n /// is no need to maintain separate drop flags to track such state.\n //\n // FIXME: we have to do something for moving slice patterns.\n-fn place_contents_drop_state_cannot_differ<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn place_contents_drop_state_cannot_differ<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                                             body: &Body<'tcx>,\n                                                             place: &mir::Place<'tcx>) -> bool {\n     let ty = place.ty(body, tcx).ty;\n@@ -73,7 +73,7 @@ fn place_contents_drop_state_cannot_differ<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, '\n }\n \n pub(crate) fn on_lookup_result_bits<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n     lookup_result: LookupResult,\n@@ -91,15 +91,15 @@ pub(crate) fn on_lookup_result_bits<'gcx, 'tcx, F>(\n }\n \n pub(crate) fn on_all_children_bits<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n     move_path_index: MovePathIndex,\n     mut each_child: F)\n     where F: FnMut(MovePathIndex)\n {\n     fn is_terminal_path<'gcx, 'tcx>(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         body: &Body<'tcx>,\n         move_data: &MoveData<'tcx>,\n         path: MovePathIndex) -> bool\n@@ -109,7 +109,7 @@ pub(crate) fn on_all_children_bits<'gcx, 'tcx, F>(\n     }\n \n     fn on_all_children_bits<'gcx, 'tcx, F>(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         body: &Body<'tcx>,\n         move_data: &MoveData<'tcx>,\n         move_path_index: MovePathIndex,\n@@ -132,7 +132,7 @@ pub(crate) fn on_all_children_bits<'gcx, 'tcx, F>(\n }\n \n pub(crate) fn on_all_drop_children_bits<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'gcx, 'tcx>,\n     path: MovePathIndex,\n@@ -155,7 +155,7 @@ pub(crate) fn on_all_drop_children_bits<'gcx, 'tcx, F>(\n }\n \n pub(crate) fn drop_flag_effects_for_function_entry<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'gcx, 'tcx>,\n     mut callback: F)\n@@ -172,7 +172,7 @@ pub(crate) fn drop_flag_effects_for_function_entry<'gcx, 'tcx, F>(\n }\n \n pub(crate) fn drop_flag_effects_for_location<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     ctxt: &MoveDataParamEnv<'gcx, 'tcx>,\n     loc: Location,\n@@ -204,7 +204,7 @@ pub(crate) fn drop_flag_effects_for_location<'gcx, 'tcx, F>(\n }\n \n pub(crate) fn for_location_inits<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,\n     loc: Location,"}, {"sha": "ba38ef91ebe4627a6a4271d7aa3590c28a421273", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -30,7 +30,7 @@ newtype_index! {\n /// describing the borrow. These indexes are used for representing the\n /// borrows in compact bitvectors.\n pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &'a Body<'tcx>,\n \n     borrow_set: Rc<BorrowSet<'tcx>>,\n@@ -135,7 +135,7 @@ fn precompute_borrows_out_of_scope<'tcx>(\n \n impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     crate fn new(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         body: &'a Body<'tcx>,\n         nonlexical_regioncx: Rc<RegionInferenceContext<'tcx>>,\n         borrow_set: &Rc<BorrowSet<'tcx>>,"}, {"sha": "c1d302744858e74075aec9ee9d16bcc2cc7c4bb3", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -64,13 +64,13 @@ pub(super) mod borrows;\n /// between this data and `MaybeUninitializedPlaces` yields the set of\n /// places that would require a dynamic drop-flag at that statement.\n pub struct MaybeInitializedPlaces<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx: 'tcx, 'tcx> MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn new(tcx: TyCtxt<'gcx, 'tcx>,\n                body: &'a Body<'tcx>,\n                mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>)\n                -> Self\n@@ -119,13 +119,13 @@ impl<'a, 'gcx, 'tcx> HasMoveData<'tcx> for MaybeInitializedPlaces<'a, 'gcx, 'tcx\n /// between this data and `MaybeInitializedPlaces` yields the set of\n /// places that would require a dynamic drop-flag at that statement.\n pub struct MaybeUninitializedPlaces<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx, 'tcx> MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn new(tcx: TyCtxt<'gcx, 'tcx>,\n                body: &'a Body<'tcx>,\n                mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>)\n                -> Self\n@@ -173,13 +173,13 @@ impl<'a, 'gcx, 'tcx> HasMoveData<'tcx> for MaybeUninitializedPlaces<'a, 'gcx, 't\n /// this data and `MaybeInitializedPlaces` yields the set of places\n /// that would require a dynamic drop-flag at that statement.\n pub struct DefinitelyInitializedPlaces<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx, 'tcx: 'a> DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn new(tcx: TyCtxt<'gcx, 'tcx>,\n                body: &'a Body<'tcx>,\n                mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>)\n                -> Self\n@@ -222,13 +222,13 @@ impl<'a, 'gcx, 'tcx: 'a> HasMoveData<'tcx> for DefinitelyInitializedPlaces<'a, '\n /// }\n /// ```\n pub struct EverInitializedPlaces<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx: 'tcx, 'tcx: 'a> EverInitializedPlaces<'a, 'gcx, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    pub fn new(tcx: TyCtxt<'gcx, 'tcx>,\n                body: &'a Body<'tcx>,\n                mdpe: &'a MoveDataParamEnv<'gcx, 'tcx>)\n                -> Self"}, {"sha": "ae7690554f84e6f393ae24857bda641fc59d87df", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -121,7 +121,7 @@ pub struct MoveDataParamEnv<'gcx, 'tcx> {\n     pub(crate) param_env: ty::ParamEnv<'gcx>,\n }\n \n-pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'gcx, 'tcx>,\n                                                  body: &'a Body<'tcx>,\n                                                  def_id: DefId,\n                                                  attributes: &[ast::Attribute],\n@@ -139,7 +139,7 @@ pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n impl<'a, 'gcx: 'tcx, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     pub(crate) fn run<P>(self,\n-                         tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+                         tcx: TyCtxt<'gcx, 'tcx>,\n                          def_id: DefId,\n                          attributes: &[ast::Attribute],\n                          p: P) -> DataflowResults<'tcx, BD>"}, {"sha": "e4376202721345acaa6ac67dba93f8ea59dc5850", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -14,13 +14,13 @@ use super::IllegalMoveOriginKind::*;\n \n struct MoveDataBuilder<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     body: &'a Body<'tcx>,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     data: MoveData<'tcx>,\n     errors: Vec<(Place<'tcx>, MoveError<'tcx>)>,\n }\n \n impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n-    fn new(body: &'a Body<'tcx>, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Self {\n+    fn new(body: &'a Body<'tcx>, tcx: TyCtxt<'gcx, 'tcx>) -> Self {\n         let mut move_paths = IndexVec::new();\n         let mut path_map = IndexVec::new();\n         let mut init_path_map = IndexVec::new();\n@@ -204,7 +204,7 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n \n pub(super) fn gather_moves<'gcx, 'tcx>(\n     body: &Body<'tcx>,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>\n+    tcx: TyCtxt<'gcx, 'tcx>\n ) -> Result<MoveData<'tcx>, (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n     let mut builder = MoveDataBuilder::new(body, tcx);\n "}, {"sha": "aa8a1e54a6570d125f75096d49f73ceb827ca58b", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -306,7 +306,7 @@ impl<'tcx> MoveError<'tcx> {\n }\n \n impl<'gcx, 'tcx> MoveData<'tcx> {\n-    pub fn gather_moves(body: &Body<'tcx>, tcx: TyCtxt<'tcx, 'gcx, 'tcx>)\n+    pub fn gather_moves(body: &Body<'tcx>, tcx: TyCtxt<'gcx, 'tcx>)\n                         -> Result<Self, (Self, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n         builder::gather_moves(body, tcx)\n     }"}, {"sha": "934baa55a90438869782a2364edb5f3b8633771f", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -11,7 +11,7 @@ crate enum LitToConstError {\n \n crate fn lit_to_const<'gcx, 'tcx>(\n     lit: &'tcx ast::LitKind,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     ty: Ty<'tcx>,\n     neg: bool,\n ) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {"}, {"sha": "ff3383f6e14c09325d5d182aa08fe879c1775933", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -22,7 +22,7 @@ use crate::hair::constant::{lit_to_const, LitToConstError};\n \n #[derive(Clone)]\n pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n \n     pub root_lint_level: hir::HirId,\n@@ -200,7 +200,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         ty.needs_drop(self.tcx.global_tcx(), param_env)\n     }\n \n-    pub fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.tcx\n     }\n \n@@ -218,7 +218,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n }\n \n impl UserAnnotatedTyHelpers<'gcx, 'tcx> for Cx<'_, 'gcx, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.tcx()\n     }\n "}, {"sha": "9da51cae21830720fa6aea8d23ed0b095313a0ea", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -195,7 +195,7 @@ pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pattern<'tcx\n }\n \n struct LiteralExpander<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>\n+    tcx: TyCtxt<'tcx, 'tcx>\n }\n \n impl LiteralExpander<'tcx> {\n@@ -350,7 +350,7 @@ impl<'p, 'tcx> FromIterator<SmallVec<[&'p Pattern<'tcx>; 2]>> for Matrix<'p, 'tc\n }\n \n pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n-    pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n     /// The module in which the match occurs. This is necessary for\n     /// checking inhabited-ness of types because whether a type is (visibly)\n     /// inhabited can depend on whether it was defined in the current module or\n@@ -365,7 +365,7 @@ pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n     pub fn create_and_enter<F, R>(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         module: DefId,\n         f: F) -> R\n@@ -827,7 +827,7 @@ struct IntRange<'tcx> {\n }\n \n impl<'tcx> IntRange<'tcx> {\n-    fn from_ctor(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn from_ctor(tcx: TyCtxt<'tcx, 'tcx>,\n                  ctor: &Constructor<'tcx>)\n                  -> Option<IntRange<'tcx>> {\n         // Floating-point ranges are permitted and we don't want\n@@ -867,7 +867,7 @@ impl<'tcx> IntRange<'tcx> {\n         }\n     }\n \n-    fn from_pat(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn from_pat(tcx: TyCtxt<'tcx, 'tcx>,\n                 mut pat: &Pattern<'tcx>)\n                 -> Option<IntRange<'tcx>> {\n         let range = loop {\n@@ -889,7 +889,7 @@ impl<'tcx> IntRange<'tcx> {\n     }\n \n     // The return value of `signed_bias` should be XORed with an endpoint to encode/decode it.\n-    fn signed_bias(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> u128 {\n+    fn signed_bias(tcx: TyCtxt<'tcx, 'tcx>, ty: Ty<'tcx>) -> u128 {\n         match ty.sty {\n             ty::Int(ity) => {\n                 let bits = Integer::from_attr(&tcx, SignedInt(ity)).size().bits() as u128;\n@@ -901,7 +901,7 @@ impl<'tcx> IntRange<'tcx> {\n \n     /// Converts a `RangeInclusive` to a `ConstantValue` or inclusive `ConstantRange`.\n     fn range_to_ctor(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         ty: Ty<'tcx>,\n         r: RangeInclusive<u128>,\n     ) -> Constructor<'tcx> {\n@@ -918,7 +918,7 @@ impl<'tcx> IntRange<'tcx> {\n     /// Returns a collection of ranges that spans the values covered by `ranges`, subtracted\n     /// by the values covered by `self`: i.e., `ranges \\ self` (in set notation).\n     fn subtract_from(self,\n-                     tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                     tcx: TyCtxt<'tcx, 'tcx>,\n                      ranges: Vec<Constructor<'tcx>>)\n                      -> Vec<Constructor<'tcx>> {\n         let ranges = ranges.into_iter().filter_map(|r| {\n@@ -988,7 +988,7 @@ enum MissingCtors<'tcx> {\n // to compute the full set.)\n fn compute_missing_ctors<'a, 'tcx: 'a>(\n     info: MissingCtorsInfo,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     all_ctors: &Vec<Constructor<'tcx>>,\n     used_ctors: &Vec<Constructor<'tcx>>,\n ) -> MissingCtors<'tcx> {\n@@ -1424,7 +1424,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n // meaning all other types will compare unequal and thus equal patterns often do not cause the\n // second pattern to lint about unreachable match arms.\n fn slice_pat_covered_by_const<'tcx>(\n-    tcx: TyCtxt<'_, 'tcx, '_>,\n+    tcx: TyCtxt<'tcx, '_>,\n     _span: Span,\n     const_val: &'tcx ty::Const<'tcx>,\n     prefix: &[Pattern<'tcx>],\n@@ -1477,7 +1477,7 @@ fn slice_pat_covered_by_const<'tcx>(\n // Whether to evaluate a constructor using exhaustive integer matching. This is true if the\n // constructor is a range or constant with an integer type.\n fn should_treat_range_exhaustively(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ctor: &Constructor<'tcx>,\n ) -> bool {\n     let ty = match ctor {\n@@ -1525,7 +1525,7 @@ fn should_treat_range_exhaustively(\n /// between every pair of boundary points. (This essentially sums up to performing the intuitive\n /// merging operation depicted above.)\n fn split_grouped_constructors<'p, 'a: 'p, 'tcx: 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ctors: Vec<Constructor<'tcx>>,\n     &Matrix(ref m): &Matrix<'p, 'tcx>,\n     ty: Ty<'tcx>,\n@@ -1603,7 +1603,7 @@ fn split_grouped_constructors<'p, 'a: 'p, 'tcx: 'a>(\n \n /// Checks whether there exists any shared value in either `ctor` or `pat` by intersecting them.\n fn constructor_intersects_pattern<'p, 'a: 'p, 'tcx: 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ctor: &Constructor<'tcx>,\n     pat: &'p Pattern<'tcx>,\n ) -> Option<SmallVec<[&'p Pattern<'tcx>; 2]>> {\n@@ -1631,7 +1631,7 @@ fn constructor_intersects_pattern<'p, 'a: 'p, 'tcx: 'a>(\n }\n \n fn constructor_covered_by_range<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ctor: &Constructor<'tcx>,\n     pat: &Pattern<'tcx>,\n ) -> Result<bool, ErrorReported> {"}, {"sha": "0a60ed19b9a471735aa4ed88456f2b88e4965bc0", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -26,7 +26,7 @@ use std::slice;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     let body_id = if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n         tcx.hir().body_owned_by(id)\n     } else {\n@@ -48,7 +48,7 @@ fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> Diagn\n }\n \n struct MatchVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body_owner: DefId,\n     tables: &'a ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,"}, {"sha": "67325e7b75c83d8e1d5646de38f2fe0f67bf0ee1", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -327,15 +327,15 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n }\n \n pub struct PatternContext<'a, 'tcx: 'a> {\n-    pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n     pub tables: &'a ty::TypeckTables<'tcx>,\n     pub substs: SubstsRef<'tcx>,\n     pub errors: Vec<PatternError>,\n }\n \n impl<'a, 'tcx> Pattern<'tcx> {\n-    pub fn from_hir(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn from_hir(tcx: TyCtxt<'tcx, 'tcx>,\n                     param_env_and_substs: ty::ParamEnvAnd<'tcx, SubstsRef<'tcx>>,\n                     tables: &'a ty::TypeckTables<'tcx>,\n                     pat: &'tcx hir::Pat) -> Self {\n@@ -351,7 +351,7 @@ impl<'a, 'tcx> Pattern<'tcx> {\n }\n \n impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub fn new(tcx: TyCtxt<'tcx, 'tcx>,\n                param_env_and_substs: ty::ParamEnvAnd<'tcx, SubstsRef<'tcx>>,\n                tables: &'a ty::TypeckTables<'tcx>) -> Self {\n         PatternContext {\n@@ -1055,7 +1055,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n }\n \n impl UserAnnotatedTyHelpers<'tcx, 'tcx> for PatternContext<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n \n@@ -1243,7 +1243,7 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n }\n \n pub fn compare_const_vals<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     a: &'tcx ty::Const<'tcx>,\n     b: &'tcx ty::Const<'tcx>,\n     ty: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,"}, {"sha": "3b52f455190307f0ba1026beac892c96f9b8cd4d", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -2,7 +2,7 @@ use rustc::hir;\n use rustc::ty::{self, CanonicalUserType, TyCtxt, UserType};\n \n crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx>;\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx>;\n \n     fn tables(&self) -> &ty::TypeckTables<'tcx>;\n "}, {"sha": "5b91b88f276edbe3b111f2bf8594c8a25329b9be", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -173,7 +173,7 @@ impl<'mir, 'tcx, M> layout::HasTyCtxt<'tcx> for InterpretCx<'mir, 'tcx, M>\n     where M: Machine<'mir, 'tcx>\n {\n     #[inline]\n-    fn tcx<'d>(&'d self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx<'d>(&'d self) -> TyCtxt<'tcx, 'tcx> {\n         *self.tcx\n     }\n }"}, {"sha": "9c3dc40a5e1a0b0c9cf14882a92f0f784a59b4b7", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -10,7 +10,7 @@ use std::fmt::Write;\n use rustc::mir::interpret::{Allocation, ConstValue};\n \n struct AbsolutePathPrinter<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     path: String,\n }\n \n@@ -23,7 +23,7 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'tcx> {\n     type DynExistential = Self;\n     type Const = Self;\n \n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n \n@@ -212,7 +212,7 @@ impl Write for AbsolutePathPrinter<'_> {\n \n /// Produces an absolute path representation of the given type. See also the documentation on\n /// `std::any::type_name`\n-pub fn type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n+pub fn type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n     let alloc = alloc_type_name(tcx, ty);\n     tcx.mk_const(ty::Const {\n         val: ConstValue::Slice {\n@@ -226,7 +226,7 @@ pub fn type_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx ty:\n \n /// Directly returns an `Allocation` containing an absolute path representation of the given type.\n pub(super) fn alloc_type_name<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ty: Ty<'tcx>\n ) -> &'tcx Allocation {\n     let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;"}, {"sha": "1258dc041b83ae7b883be8810edc5bb022cdfea7", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -47,7 +47,7 @@ impl<'mir, 'tcx> InfiniteLoopDetector<'mir, 'tcx>\n {\n     pub fn observe_and_analyze(\n         &mut self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         span: Span,\n         memory: &Memory<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>,\n         stack: &[Frame<'mir, 'tcx>],"}, {"sha": "1cd48312412ccb6721c649f19c2dda78883d7945", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -7,7 +7,7 @@ use rustc::mir::{self, Body, TerminatorKind};\n use rustc::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n use rustc::ty::subst::InternalSubsts;\n \n-pub fn check(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check(tcx: TyCtxt<'tcx, 'tcx>,\n              body: &Body<'tcx>,\n              def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -17,7 +17,7 @@ pub fn check(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'tcx, 'tcx>,\n                                         fn_kind: FnKind<'_>,\n                                         body: &Body<'tcx>,\n                                         def_id: DefId) {"}, {"sha": "30d1ea726f9a86868b22ee8b1317d471ea02c050", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -281,7 +281,7 @@ impl<'tcx> InliningMap<'tcx> {\n     }\n }\n \n-pub fn collect_crate_mono_items<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn collect_crate_mono_items<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                           mode: MonoItemCollectionMode)\n                                           -> (FxHashSet<MonoItem<'tcx>>,\n                                                      InliningMap<'tcx>) {\n@@ -315,7 +315,7 @@ pub fn collect_crate_mono_items<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n // Find all non-generic items by walking the HIR. These items serve as roots to\n // start monomorphizing from.\n-fn collect_roots<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn collect_roots<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                            mode: MonoItemCollectionMode)\n                            -> Vec<MonoItem<'tcx>> {\n     debug!(\"Collecting roots\");\n@@ -347,7 +347,7 @@ fn collect_roots<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n // Collect all monomorphized items reachable from `starting_point`\n-fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx, 'tcx>,\n                                    starting_point: MonoItem<'tcx>,\n                                    visited: MTRef<'_, MTLock<FxHashSet<MonoItem<'tcx>>>>,\n                                    recursion_depths: &mut DefIdMap<usize>,\n@@ -413,7 +413,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     debug!(\"END collect_items_rec({})\", starting_point.to_string(tcx, true));\n }\n \n-fn record_accesses<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn record_accesses<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                              caller: MonoItem<'tcx>,\n                              callees: &[MonoItem<'tcx>],\n                              inlining_map: MTRef<'_, MTLock<InliningMap<'tcx>>>) {\n@@ -429,7 +429,7 @@ fn record_accesses<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     inlining_map.lock_mut().record_accesses(caller, accesses);\n }\n \n-fn check_recursion_limit<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_recursion_limit<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                    instance: Instance<'tcx>,\n                                    recursion_depths: &mut DefIdMap<usize>)\n                                    -> (DefId, usize) {\n@@ -463,7 +463,7 @@ fn check_recursion_limit<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     (def_id, recursion_depth)\n }\n \n-fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                      instance: Instance<'tcx>)\n {\n     let type_length = instance.substs.types().flat_map(|ty| ty.walk()).count();\n@@ -515,7 +515,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n struct MirNeighborCollector<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &'a mir::Body<'tcx>,\n     output: &'a mut Vec<MonoItem<'tcx>>,\n     param_substs: SubstsRef<'tcx>,\n@@ -679,7 +679,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n     }\n }\n \n-fn visit_drop_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn visit_drop_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                             ty: Ty<'tcx>,\n                             is_direct_call: bool,\n                             output: &mut Vec<MonoItem<'tcx>>)\n@@ -688,7 +688,7 @@ fn visit_drop_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     visit_instance_use(tcx, instance, is_direct_call, output);\n }\n \n-fn visit_fn_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn visit_fn_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                           ty: Ty<'tcx>,\n                           is_direct_call: bool,\n                           output: &mut Vec<MonoItem<'tcx>>)\n@@ -702,7 +702,7 @@ fn visit_fn_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn visit_instance_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn visit_instance_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 instance: ty::Instance<'tcx>,\n                                 is_direct_call: bool,\n                                 output: &mut Vec<MonoItem<'tcx>>)\n@@ -741,7 +741,7 @@ fn visit_instance_use<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n // Returns true if we should codegen an instance in the local crate.\n // Returns false if we can just link to the upstream crate and therefore don't\n // need a mono item.\n-fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, instance: &Instance<'tcx>)\n+fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, instance: &Instance<'tcx>)\n                                          -> bool {\n     let def_id = match instance.def {\n         ty::InstanceDef::Item(def_id) => def_id,\n@@ -776,7 +776,7 @@ fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, instance: &I\n     }\n     return true;\n \n-    fn is_available_upstream_generic<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn is_available_upstream_generic<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                def_id: DefId,\n                                                substs: SubstsRef<'tcx>)\n                                                -> bool {\n@@ -841,7 +841,7 @@ fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, instance: &I\n ///\n /// Finally, there is also the case of custom unsizing coercions, e.g., for\n /// smart pointers such as `Rc` and `Arc`.\n-fn find_vtable_types_for_unsizing<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn find_vtable_types_for_unsizing<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                             source_ty: Ty<'tcx>,\n                                             target_ty: Ty<'tcx>)\n                                             -> (Ty<'tcx>, Ty<'tcx>) {\n@@ -914,7 +914,7 @@ fn create_fn_mono_item<'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n \n /// Creates a `MonoItem` for each method that is referenced by the vtable for\n /// the given trait/impl pair.\n-fn create_mono_items_for_vtable_methods<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn create_mono_items_for_vtable_methods<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                   trait_ty: Ty<'tcx>,\n                                                   impl_ty: Ty<'tcx>,\n                                                   output: &mut Vec<MonoItem<'tcx>>) {\n@@ -949,7 +949,7 @@ fn create_mono_items_for_vtable_methods<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n //=-----------------------------------------------------------------------------\n \n struct RootCollector<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     mode: MonoItemCollectionMode,\n     output: &'a mut Vec<MonoItem<'tcx>>,\n     entry_fn: Option<(DefId, EntryFnType)>,\n@@ -1107,12 +1107,12 @@ impl RootCollector<'_, 'v> {\n     }\n }\n \n-fn item_requires_monomorphization<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn item_requires_monomorphization<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n     generics.requires_monomorphization(tcx)\n }\n \n-fn create_mono_items_for_default_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn create_mono_items_for_default_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                  item: &'tcx hir::Item,\n                                                  output: &mut Vec<MonoItem<'tcx>>) {\n     match item.node {\n@@ -1177,7 +1177,7 @@ fn create_mono_items_for_default_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n /// Scan the miri alloc in order to find function calls, closures, and drop-glue\n fn collect_miri<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     alloc_id: AllocId,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n@@ -1207,7 +1207,7 @@ fn collect_miri<'tcx>(\n }\n \n /// Scan the MIR in order to find function calls, closures, and drop-glue\n-fn collect_neighbours<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn collect_neighbours<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 instance: Instance<'tcx>,\n                                 output: &mut Vec<MonoItem<'tcx>>)\n {\n@@ -1237,7 +1237,7 @@ fn collect_neighbours<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn def_id_to_string<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn def_id_to_string<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                               def_id: DefId)\n                               -> String {\n     let mut output = String::new();\n@@ -1247,7 +1247,7 @@ fn def_id_to_string<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n fn collect_const<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     constant: &'tcx ty::Const<'tcx>,\n     param_substs: SubstsRef<'tcx>,\n     output: &mut Vec<MonoItem<'tcx>>,"}, {"sha": "2ba9600dfc9f03b189918fee05e21d43a1f1f8eb", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -48,7 +48,7 @@ pub trait MonoItemExt<'tcx>: fmt::Debug {\n         }\n     }\n \n-    fn symbol_name(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> ty::SymbolName {\n+    fn symbol_name(&self, tcx: TyCtxt<'tcx, 'tcx>) -> ty::SymbolName {\n         match *self.as_mono_item() {\n             MonoItem::Fn(instance) => tcx.symbol_name(instance),\n             MonoItem::Static(def_id) => {\n@@ -63,7 +63,7 @@ pub trait MonoItemExt<'tcx>: fmt::Debug {\n         }\n     }\n     fn instantiation_mode(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+                          tcx: TyCtxt<'tcx, 'tcx>)\n                           -> InstantiationMode {\n         let inline_in_all_cgus =\n             tcx.sess.opts.debugging_opts.inline_in_all_cgus.unwrap_or_else(|| {\n@@ -108,7 +108,7 @@ pub trait MonoItemExt<'tcx>: fmt::Debug {\n         }\n     }\n \n-    fn explicit_linkage(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<Linkage> {\n+    fn explicit_linkage(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Option<Linkage> {\n         let def_id = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => instance.def_id(),\n             MonoItem::Static(def_id) => def_id,\n@@ -144,7 +144,7 @@ pub trait MonoItemExt<'tcx>: fmt::Debug {\n     /// Similarly, if a vtable method has such a signature, and therefore can't\n     /// be used, we can just not emit it and have a placeholder (a null pointer,\n     /// which will never be accessed) in its place.\n-    fn is_instantiable(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> bool {\n+    fn is_instantiable(&self, tcx: TyCtxt<'tcx, 'tcx>) -> bool {\n         debug!(\"is_instantiable({:?})\", self);\n         let (def_id, substs) = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n@@ -156,7 +156,7 @@ pub trait MonoItemExt<'tcx>: fmt::Debug {\n         tcx.substitute_normalize_and_test_predicates((def_id, &substs))\n     }\n \n-    fn to_string(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, debug: bool) -> String {\n+    fn to_string(&self, tcx: TyCtxt<'tcx, 'tcx>, debug: bool) -> String {\n         return match *self.as_mono_item() {\n             MonoItem::Fn(instance) => {\n                 to_string_internal(tcx, \"fn \", instance, debug)\n@@ -170,7 +170,7 @@ pub trait MonoItemExt<'tcx>: fmt::Debug {\n             }\n         };\n \n-        fn to_string_internal<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        fn to_string_internal<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                         prefix: &str,\n                                         instance: Instance<'tcx>,\n                                         debug: bool)\n@@ -183,7 +183,7 @@ pub trait MonoItemExt<'tcx>: fmt::Debug {\n         }\n     }\n \n-    fn local_span(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<Span> {\n+    fn local_span(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Option<Span> {\n         match *self.as_mono_item() {\n             MonoItem::Fn(Instance { def, .. }) => {\n                 tcx.hir().as_local_hir_id(def.def_id())"}, {"sha": "929c2126b4d9e3218a5ba5c87d0d281637c57927", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n pub mod collector;\n pub mod partitioning;\n \n-pub fn custom_coerce_unsize_info<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn custom_coerce_unsize_info<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                            source_ty: Ty<'tcx>,\n                                            target_ty: Ty<'tcx>)\n                                            -> CustomCoerceUnsized {"}, {"sha": "38c887751b68f1972685bdb29622569fb283be6b", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -125,7 +125,7 @@ fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_, '_>) -> Inter\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))\n }\n \n-pub fn partition<'tcx, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn partition<'tcx, I>(tcx: TyCtxt<'tcx, 'tcx>,\n                               mono_items: I,\n                               strategy: PartitioningStrategy,\n                               inlining_map: &InliningMap<'tcx>)\n@@ -201,7 +201,7 @@ struct PostInliningPartitioning<'tcx> {\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n }\n \n-fn place_root_mono_items<'tcx, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn place_root_mono_items<'tcx, I>(tcx: TyCtxt<'tcx, 'tcx>,\n                                              mono_items: I)\n                                              -> PreInliningPartitioning<'tcx>\n     where I: Iterator<Item = MonoItem<'tcx>>\n@@ -276,7 +276,7 @@ fn place_root_mono_items<'tcx, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n fn mono_item_linkage_and_visibility(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     mono_item: &MonoItem<'tcx>,\n     can_be_internalized: &mut bool,\n     export_generics: bool,\n@@ -294,7 +294,7 @@ fn mono_item_linkage_and_visibility(\n }\n \n fn mono_item_visibility(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     mono_item: &MonoItem<'tcx>,\n     can_be_internalized: &mut bool,\n     export_generics: bool,\n@@ -439,7 +439,7 @@ fn mono_item_visibility(\n     }\n }\n \n-fn default_visibility(tcx: TyCtxt<'_, '_, '_>, id: DefId, is_generic: bool) -> Visibility {\n+fn default_visibility(tcx: TyCtxt<'_, '_>, id: DefId, is_generic: bool) -> Visibility {\n     if !tcx.sess.target.target.options.default_hidden_visibility {\n         return Visibility::Default\n     }\n@@ -463,7 +463,7 @@ fn default_visibility(tcx: TyCtxt<'_, '_, '_>, id: DefId, is_generic: bool) -> V\n     }\n }\n \n-fn merge_codegen_units<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn merge_codegen_units<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                              initial_partitioning: &mut PreInliningPartitioning<'tcx>,\n                              target_cgu_count: usize) {\n     assert!(target_cgu_count >= 1);\n@@ -585,7 +585,7 @@ fn place_inlined_mono_items<'tcx>(initial_partitioning: PreInliningPartitioning<\n     }\n }\n \n-fn internalize_symbols<'tcx>(_tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn internalize_symbols<'tcx>(_tcx: TyCtxt<'tcx, 'tcx>,\n                                  partitioning: &mut PostInliningPartitioning<'tcx>,\n                                  inlining_map: &InliningMap<'tcx>) {\n     if partitioning.codegen_units.len() == 1 {\n@@ -650,7 +650,7 @@ fn internalize_symbols<'tcx>(_tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn characteristic_def_id_of_mono_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn characteristic_def_id_of_mono_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                 mono_item: MonoItem<'tcx>)\n                                                 -> Option<DefId> {\n     match mono_item {\n@@ -698,7 +698,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n type CguNameCache = FxHashMap<(DefId, bool), InternedString>;\n \n-fn compute_codegen_unit_name(tcx: TyCtxt<'_, '_, '_>,\n+fn compute_codegen_unit_name(tcx: TyCtxt<'_, '_>,\n                              name_builder: &mut CodegenUnitNameBuilder<'_, '_>,\n                              def_id: DefId,\n                              volatile: bool,\n@@ -758,7 +758,7 @@ fn numbered_codegen_unit_name(name_builder: &mut CodegenUnitNameBuilder<'_, '_>,\n     name_builder.build_cgu_name_no_mangle(LOCAL_CRATE, &[\"cgu\"], Some(index))\n }\n \n-fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'tcx, 'tcx>,\n                                label: &str,\n                                cgus: I)\n     where I: Iterator<Item=&'b CodegenUnit<'tcx>>,\n@@ -787,7 +787,7 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n #[inline(never)] // give this a place in the profiler\n-fn assert_symbols_are_distinct<'a, 'tcx: 'a, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, mono_items: I)\n+fn assert_symbols_are_distinct<'a, 'tcx: 'a, I>(tcx: TyCtxt<'tcx, 'tcx>, mono_items: I)\n     where I: Iterator<Item=&'a MonoItem<'tcx>>\n {\n     let mut symbols: Vec<_> = mono_items.map(|mono_item| {\n@@ -831,7 +831,7 @@ fn assert_symbols_are_distinct<'a, 'tcx: 'a, I>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, m\n }\n \n fn collect_and_partition_mono_items<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     cnum: CrateNum,\n ) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>)\n {"}, {"sha": "f63e6996ddcbf9915db2e52ccf3f05e203818dc9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -26,7 +26,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.mir_shims = make_shim;\n }\n \n-fn make_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn make_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                        instance: ty::InstanceDef<'tcx>)\n                        -> &'tcx Body<'tcx>\n {\n@@ -166,7 +166,7 @@ fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n         .collect()\n }\n \n-fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                              def_id: DefId,\n                              ty: Option<Ty<'tcx>>)\n                              -> Body<'tcx>\n@@ -258,7 +258,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n pub struct DropShimElaborator<'a, 'tcx: 'a> {\n     pub body: &'a Body<'tcx>,\n     pub patch: MirPatch<'tcx>,\n-    pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n }\n \n@@ -273,7 +273,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx> { &mut self.patch }\n     fn body(&self) -> &'a Body<'tcx> { self.body }\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> { self.tcx }\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> { self.tcx }\n     fn param_env(&self) -> ty::ParamEnv<'tcx> { self.param_env }\n \n     fn drop_style(&self, _path: Self::Path, mode: DropFlagMode) -> DropStyle {\n@@ -306,7 +306,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n }\n \n /// Builds a `Clone::clone` shim for `self_ty`. Here, `def_id` is `Clone::clone`.\n-fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                               def_id: DefId,\n                               self_ty: Ty<'tcx>)\n                               -> Body<'tcx>\n@@ -341,7 +341,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n struct CloneShimBuilder<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n@@ -350,7 +350,7 @@ struct CloneShimBuilder<'tcx> {\n }\n \n impl CloneShimBuilder<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn new(tcx: TyCtxt<'tcx, 'tcx>,\n            def_id: DefId,\n            self_ty: Ty<'tcx>) -> Self {\n         // we must subst the self_ty because it's\n@@ -691,7 +691,7 @@ impl CloneShimBuilder<'tcx> {\n ///\n /// If `untuple_args` is a vec of types, the second argument of the\n /// function will be untupled as these types.\n-fn build_call_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn build_call_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                              def_id: DefId,\n                              rcvr_adjustment: Adjustment,\n                              call_kind: CallKind,\n@@ -842,7 +842,7 @@ fn build_call_shim<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     body\n }\n \n-pub fn build_adt_ctor<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ctor_id: DefId) -> &'tcx Body<'tcx> {\n+pub fn build_adt_ctor<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, ctor_id: DefId) -> &'tcx Body<'tcx> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n     let span = tcx.hir().span_if_local(ctor_id)"}, {"sha": "f71a1b42611d1192c3f27b5edc3e4e6e3ffa2021", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -32,7 +32,7 @@ pub use self::AddCallGuards::*;\n \n impl MirPass for AddCallGuards {\n     fn run_pass<'tcx>(&self,\n-                          _tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          _tcx: TyCtxt<'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         self.add_call_guards(body);"}, {"sha": "e0b8805ebfb349fece9e3c9c5714dc49a4ac2a0b", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -41,7 +41,7 @@ pub struct AddMovesForPackedDrops;\n \n impl MirPass for AddMovesForPackedDrops {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>)\n     {\n@@ -51,7 +51,7 @@ impl MirPass for AddMovesForPackedDrops {\n }\n \n pub fn add_moves_for_packed_drops<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &mut Body<'tcx>,\n     def_id: DefId)\n {\n@@ -60,7 +60,7 @@ pub fn add_moves_for_packed_drops<'tcx>(\n }\n \n fn add_moves_for_packed_drops_patch<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &Body<'tcx>,\n     def_id: DefId)\n     -> MirPatch<'tcx>\n@@ -91,7 +91,7 @@ fn add_moves_for_packed_drops_patch<'tcx>(\n }\n \n fn add_move_for_packed_drop<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &Body<'tcx>,\n     patch: &mut MirPatch<'tcx>,\n     terminator: &Terminator<'tcx>,"}, {"sha": "8f6c83e170294fb6a35002bdddd4b8dc459f11ea", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -48,7 +48,7 @@ fn is_stable<'tcx>(\n \n /// Determine whether this type may have a reference in it, recursing below compound types but\n /// not below references.\n-fn may_have_reference<'gcx, 'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> bool {\n+fn may_have_reference<'gcx, 'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'gcx, 'tcx>) -> bool {\n     match ty.sty {\n         // Primitive types that are not references\n         ty::Bool | ty::Char |\n@@ -75,7 +75,7 @@ fn may_have_reference<'gcx, 'tcx>(ty: Ty<'tcx>, tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -\n \n impl MirPass for AddRetag {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>)\n     {"}, {"sha": "84462c3940df4e98e691c4f353ff8b47fedef2b8", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -25,7 +25,7 @@ pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     /// Mark an `unsafe` block as used, so we don't lint it.\n     used_unsafe: FxHashSet<hir::HirId>,\n@@ -38,7 +38,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         min_const_fn: bool,\n         body: &'a Body<'tcx>,\n         source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n         // sanity check\n@@ -480,7 +480,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     }\n }\n \n-fn check_unused_unsafe<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_unused_unsafe<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                  def_id: DefId,\n                                  used_unsafe: &FxHashSet<hir::HirId>,\n                                  unsafe_blocks: &'a mut Vec<(hir::HirId, bool)>)\n@@ -505,7 +505,7 @@ fn check_unused_unsafe<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     hir::intravisit::Visitor::visit_body(&mut visitor, body);\n }\n \n-fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n+fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId)\n                                    -> UnsafetyCheckResult\n {\n     debug!(\"unsafety_violations({:?})\", def_id);\n@@ -546,7 +546,7 @@ fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n     }\n }\n \n-fn unsafe_derive_on_repr_packed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn unsafe_derive_on_repr_packed<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     let lint_hir_id = tcx.hir().as_local_hir_id(def_id).unwrap_or_else(||\n         bug!(\"checking unsafety for non-local def id {:?}\", def_id));\n \n@@ -566,7 +566,7 @@ fn unsafe_derive_on_repr_packed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: Def\n }\n \n /// Returns the `HirId` for an enclosing scope that is also `unsafe`.\n-fn is_enclosed(tcx: TyCtxt<'_, '_, '_>,\n+fn is_enclosed(tcx: TyCtxt<'_, '_>,\n                used_unsafe: &FxHashSet<hir::HirId>,\n                id: hir::HirId) -> Option<(String, hir::HirId)> {\n     let parent_id = tcx.hir().get_parent_node_by_hir_id(id);\n@@ -589,7 +589,7 @@ fn is_enclosed(tcx: TyCtxt<'_, '_, '_>,\n     }\n }\n \n-fn report_unused_unsafe(tcx: TyCtxt<'_, '_, '_>,\n+fn report_unused_unsafe(tcx: TyCtxt<'_, '_>,\n                         used_unsafe: &FxHashSet<hir::HirId>,\n                         id: hir::HirId) {\n     let span = tcx.sess.source_map().def_span(tcx.hir().span_by_hir_id(id));\n@@ -603,7 +603,7 @@ fn report_unused_unsafe(tcx: TyCtxt<'_, '_, '_>,\n     db.emit();\n }\n \n-fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n+fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> Option<DefId> {\n     debug!(\"builtin_derive_def_id({:?})\", def_id);\n     if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n         if tcx.has_attr(impl_def_id, sym::automatically_derived) {\n@@ -619,7 +619,7 @@ fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) ->\n     }\n }\n \n-pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n \n     // closures are handled by their parent fn."}, {"sha": "f552e635299e91472fa0fd28041fbe80a244f717", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -28,7 +28,7 @@ pub struct DeleteNonCodegenStatements;\n \n impl MirPass for CleanupNonCodegenStatements {\n     fn run_pass<'tcx>(&self,\n-                          _tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          _tcx: TyCtxt<'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         let mut delete = DeleteNonCodegenStatements;"}, {"sha": "d7c3cd52ebd057265644e7faf03f858d755365e5", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -32,7 +32,7 @@ pub struct ConstProp;\n \n impl MirPass for ConstProp {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         // will be evaluated by miri and produce its errors there\n@@ -85,7 +85,7 @@ type Const<'tcx> = OpTy<'tcx>;\n /// Finds optimization opportunities on the MIR.\n struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpretCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     source: MirSource<'tcx>,\n     places: IndexVec<Local, Option<Const<'tcx>>>,\n     can_const_prop: IndexVec<Local, bool>,\n@@ -113,15 +113,15 @@ impl<'mir, 'tcx> HasDataLayout for ConstPropagator<'mir, 'tcx> {\n \n impl<'mir, 'tcx> HasTyCtxt<'tcx> for ConstPropagator<'mir, 'tcx> {\n     #[inline]\n-    fn tcx<'c>(&'c self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx<'c>(&'c self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n }\n \n impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn new(\n         body: &mut Body<'tcx>,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         source: MirSource<'tcx>,\n     ) -> ConstPropagator<'mir, 'tcx> {\n         let param_env = tcx.param_env(source.def_id());\n@@ -599,7 +599,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n }\n \n-fn type_size_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn type_size_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                           param_env: ty::ParamEnv<'tcx>,\n                           ty: Ty<'tcx>) -> Option<u64> {\n     tcx.layout_of(param_env.and(ty)).ok().map(|layout| layout.size.bytes())"}, {"sha": "6282c7855f35c4127efee1d8dcc7a706f6e14b50", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -31,7 +31,7 @@ pub struct CopyPropagation;\n \n impl MirPass for CopyPropagation {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         // We only run when the MIR optimization level is > 1."}, {"sha": "5ba7ba193d00e2eaba895e65db615b2ecc57134b", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -7,7 +7,7 @@ pub struct Deaggregator;\n \n impl MirPass for Deaggregator {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();"}, {"sha": "52aafdef87ecbf25252d3757e5a6ac3aa1024214", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -19,7 +19,7 @@ impl MirPass for Marker {\n     }\n \n     fn run_pass<'tcx>(&self,\n-                          _tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          _tcx: TyCtxt<'tcx, 'tcx>,\n                           _source: MirSource<'tcx>,\n                           _body: &mut Body<'tcx>)\n     {\n@@ -38,7 +38,7 @@ impl fmt::Display for Disambiguator {\n }\n \n \n-pub fn on_mir_pass<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn on_mir_pass<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                              pass_num: &dyn fmt::Display,\n                              pass_name: &str,\n                              source: MirSource<'tcx>,\n@@ -56,7 +56,7 @@ pub fn on_mir_pass<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n pub fn emit_mir<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     outputs: &OutputFilenames)\n     -> io::Result<()>\n {"}, {"sha": "2a187753626fdaab1f3c18d97730e510c5460229", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -22,7 +22,7 @@ pub struct ElaborateDrops;\n \n impl MirPass for ElaborateDrops {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>)\n     {\n@@ -78,7 +78,7 @@ impl MirPass for ElaborateDrops {\n /// to not be reachable, because they are `drop` terminators\n /// that can't drop anything.\n fn find_dead_unwinds< 'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &Body<'tcx>,\n     def_id: hir::def_id::DefId,\n     env: &MoveDataParamEnv<'tcx, 'tcx>)\n@@ -142,7 +142,7 @@ struct InitializationData {\n \n impl InitializationData {\n     fn apply_location<'tcx>(&mut self,\n-                               tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                               tcx: TyCtxt<'tcx, 'tcx>,\n                                body: &Body<'tcx>,\n                                env: &MoveDataParamEnv<'tcx, 'tcx>,\n                                loc: Location)\n@@ -190,7 +190,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n         self.ctxt.body\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.ctxt.tcx\n     }\n \n@@ -290,7 +290,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n }\n \n struct ElaborateDropsCtxt<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &'a Body<'tcx>,\n     env: &'a MoveDataParamEnv<'tcx, 'tcx>,\n     flow_inits: DataflowResults<'tcx, MaybeInitializedPlaces<'a, 'tcx, 'tcx>>,"}, {"sha": "78713fee82cd847bf63dcb6c1201446919079d21", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -11,11 +11,11 @@ use rustc::mir::visit::{MutVisitor, TyContext};\n use crate::transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl EraseRegionsVisitor<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'tcx, 'tcx>) -> Self {\n         EraseRegionsVisitor {\n             tcx,\n         }\n@@ -51,7 +51,7 @@ pub struct EraseRegions;\n \n impl MirPass for EraseRegions {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         EraseRegionsVisitor::new(tcx).visit_body(body);"}, {"sha": "a3fef7c97b4c2da95a3a64179b9d1e876dcb32f4", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -169,7 +169,7 @@ struct SuspensionPoint {\n }\n \n struct TransformVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     state_adt_ref: &'tcx AdtDef,\n     state_substs: SubstsRef<'tcx>,\n \n@@ -311,7 +311,7 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n }\n \n fn make_generator_state_argument_indirect<'tcx>(\n-                tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                tcx: TyCtxt<'tcx, 'tcx>,\n                 def_id: DefId,\n                 body: &mut Body<'tcx>) {\n     let gen_ty = body.local_decls.raw[1].ty;\n@@ -336,7 +336,7 @@ fn make_generator_state_argument_indirect<'tcx>(\n }\n \n fn make_generator_state_argument_pinned<'tcx>(\n-                tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                tcx: TyCtxt<'tcx, 'tcx>,\n                 body: &mut Body<'tcx>) {\n     let ref_gen_ty = body.local_decls.raw[1].ty;\n \n@@ -416,7 +416,7 @@ struct LivenessInfo {\n }\n \n fn locals_live_across_suspend_points(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &Body<'tcx>,\n     source: MirSource<'tcx>,\n     movable: bool,\n@@ -678,7 +678,7 @@ impl<'body, 'tcx: 'body, 's> StorageConflictVisitor<'body, 'tcx, 's> {\n     }\n }\n \n-fn compute_layout<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compute_layout<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                             source: MirSource<'tcx>,\n                             upvars: &Vec<Ty<'tcx>>,\n                             interior: Ty<'tcx>,\n@@ -797,7 +797,7 @@ fn insert_switch<'tcx>(body: &mut Body<'tcx>,\n     }\n }\n \n-fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                        def_id: DefId,\n                                        body: &mut Body<'tcx>) {\n     use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n@@ -849,7 +849,7 @@ fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n fn create_generator_drop_shim<'tcx>(\n-                tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                tcx: TyCtxt<'tcx, 'tcx>,\n                 transform: &TransformVisitor<'tcx>,\n                 def_id: DefId,\n                 source: MirSource<'tcx>,\n@@ -939,7 +939,7 @@ fn insert_term_block<'tcx>(body: &mut Body<'tcx>, kind: TerminatorKind<'tcx>) ->\n     term_block\n }\n \n-fn insert_panic_block<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn insert_panic_block<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 body: &mut Body<'tcx>,\n                                 message: AssertMessage<'tcx>) -> BasicBlock {\n     let assert_block = BasicBlock::new(body.basic_blocks().len());\n@@ -970,7 +970,7 @@ fn insert_panic_block<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n fn create_generator_resume_function<'tcx>(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         transform: TransformVisitor<'tcx>,\n         def_id: DefId,\n         source: MirSource<'tcx>,\n@@ -1084,7 +1084,7 @@ fn create_cases<'tcx, F>(body: &mut Body<'tcx>,\n \n impl MirPass for StateTransform {\n     fn run_pass<'tcx>(&self,\n-                    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                    tcx: TyCtxt<'tcx, 'tcx>,\n                     source: MirSource<'tcx>,\n                     body: &mut Body<'tcx>) {\n         let yield_ty = if let Some(yield_ty) = body.yield_ty {"}, {"sha": "2818c11da4697f6daccf44f880582c8f5b352b65", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -39,7 +39,7 @@ struct CallSite<'tcx> {\n \n impl MirPass for Inline {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n@@ -49,7 +49,7 @@ impl MirPass for Inline {\n }\n \n struct Inliner<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     source: MirSource<'tcx>,\n }\n \n@@ -631,7 +631,7 @@ impl Inliner<'tcx> {\n     }\n }\n \n-fn type_size_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn type_size_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                           param_env: ty::ParamEnv<'tcx>,\n                           ty: Ty<'tcx>) -> Option<u64> {\n     tcx.layout_of(param_env.and(ty)).ok().map(|layout| layout.size.bytes())"}, {"sha": "89be1ba0bdf2ffc44f0a23754e12df38fc3e8277", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -13,7 +13,7 @@ pub struct InstCombine;\n \n impl MirPass for InstCombine {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         // We only run when optimizing MIR (at any level).\n@@ -65,12 +65,12 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n /// Finds optimization opportunities on the MIR.\n struct OptimizationFinder<'b, 'tcx> {\n     body: &'b Body<'tcx>,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     optimizations: OptimizationList<'tcx>,\n }\n \n impl OptimizationFinder<'b, 'tcx> {\n-    fn new(body: &'b Body<'tcx>, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> OptimizationFinder<'b, 'tcx> {\n+    fn new(body: &'b Body<'tcx>, tcx: TyCtxt<'tcx, 'tcx>) -> OptimizationFinder<'b, 'tcx> {\n         OptimizationFinder {\n             body,\n             tcx,"}, {"sha": "2b28eeb801ff8f0166935f205c97d1debbf5257b", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -11,7 +11,7 @@ pub struct Lower128Bit;\n \n impl MirPass for Lower128Bit {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         let debugging_override = tcx.sess.opts.debugging_opts.lower_128bit_ops;\n@@ -25,7 +25,7 @@ impl MirPass for Lower128Bit {\n }\n \n impl Lower128Bit {\n-    fn lower_128bit_ops<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>, body: &mut Body<'tcx>) {\n+    fn lower_128bit_ops<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>, body: &mut Body<'tcx>) {\n         let mut new_blocks = Vec::new();\n         let cur_len = body.basic_blocks().len();\n \n@@ -126,7 +126,7 @@ fn check_lang_item_type<'tcx, D>(\n     lhs: &Operand<'tcx>,\n     rhs: &Operand<'tcx>,\n     local_decls: &D,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+    tcx: TyCtxt<'tcx, 'tcx>)\n -> DefId\n     where D: HasLocalDecls<'tcx>\n {\n@@ -142,7 +142,7 @@ fn check_lang_item_type<'tcx, D>(\n     did\n }\n \n-fn lower_to<'tcx, D>(statement: &Statement<'tcx>, local_decls: &D, tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+fn lower_to<'tcx, D>(statement: &Statement<'tcx>, local_decls: &D, tcx: TyCtxt<'tcx, 'tcx>)\n     -> Option<(LangItem, RhsKind)>\n     where D: HasLocalDecls<'tcx>\n {\n@@ -172,7 +172,7 @@ enum RhsKind {\n }\n \n impl RhsKind {\n-    fn ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<Ty<'tcx>> {\n+    fn ty<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>) -> Option<Ty<'tcx>> {\n         match *self {\n             RhsKind::Unchanged => None,\n             RhsKind::ForceU128 => Some(tcx.types.u128),"}, {"sha": "eb8964882674802a7ab6db5180574689caa68767", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -50,13 +50,13 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn is_mir_available<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn is_mir_available<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> bool {\n     tcx.mir_keys(def_id.krate).contains(&def_id)\n }\n \n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n-fn mir_keys<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, krate: CrateNum)\n+fn mir_keys<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, krate: CrateNum)\n                       -> &'tcx DefIdSet {\n     assert_eq!(krate, LOCAL_CRATE);\n \n@@ -68,7 +68,7 @@ fn mir_keys<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, krate: CrateNum)\n     // Additionally, tuple struct/variant constructors have MIR, but\n     // they don't have a BodyId, so we need to build them separately.\n     struct GatherCtors<'a, 'tcx: 'a> {\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         set: &'a mut DefIdSet,\n     }\n     impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> {\n@@ -95,7 +95,7 @@ fn mir_keys<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, krate: CrateNum)\n     tcx.arena.alloc(set)\n }\n \n-fn mir_built<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_built<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     let mir = build::mir_build(tcx, def_id);\n     tcx.alloc_steal_mir(mir)\n }\n@@ -143,13 +143,13 @@ pub trait MirPass {\n     }\n \n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           source: MirSource<'tcx>,\n                           body: &mut Body<'tcx>);\n }\n \n pub fn run_passes(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &mut Body<'tcx>,\n     instance: InstanceDef<'tcx>,\n     mir_phase: MirPhase,\n@@ -196,7 +196,7 @@ pub fn run_passes(\n     }\n }\n \n-fn mir_const<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_const<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n@@ -210,7 +210,7 @@ fn mir_const<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<\n     tcx.alloc_steal_mir(body)\n }\n \n-fn mir_validated(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_validated(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     if let hir::BodyOwnerKind::Const = tcx.hir().body_owner_kind_by_hir_id(hir_id) {\n         // Ensure that we compute the `mir_const_qualif` for constants at\n@@ -227,7 +227,7 @@ fn mir_validated(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Bo\n     tcx.alloc_steal_mir(body)\n }\n \n-fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n     if tcx.is_constructor(def_id) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const"}, {"sha": "638aa1e7e02debd6ef7d11356a944b96a77c12a8", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -10,14 +10,14 @@ pub struct NoLandingPads;\n \n impl MirPass for NoLandingPads {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         no_landing_pads(tcx, body)\n     }\n }\n \n-pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, body: &mut Body<'tcx>) {\n+pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, body: &mut Body<'tcx>) {\n     if tcx.sess.no_landing_pads() {\n         NoLandingPads.visit_body(body);\n     }"}, {"sha": "7bbaa99798d5fa772cc484fad4c49b0174b7f6bb", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -148,7 +148,7 @@ pub fn collect_temps(body: &Body<'_>,\n }\n \n struct Promoter<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     source: &'a mut Body<'tcx>,\n     promoted: Body<'tcx>,\n     temps: &'a mut IndexVec<Local, TempState>,\n@@ -370,7 +370,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n }\n \n pub fn promote_candidates<'tcx>(body: &mut Body<'tcx>,\n-                                    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                                    tcx: TyCtxt<'tcx, 'tcx>,\n                                     mut temps: IndexVec<Local, TempState>,\n                                     candidates: Vec<Candidate>) {\n     // Visit candidates in reverse, in case they're nested."}, {"sha": "32d3b4589629cfe35676f90fb54723932f8871e2", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -124,7 +124,7 @@ impl<Q: Qualif, T> IndexMut<Q> for PerQualif<T> {\n }\n \n struct ConstCx<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     mode: Mode,\n     body: &'a Body<'tcx>,\n@@ -652,7 +652,7 @@ impl Deref for Checker<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Checker<'a, 'tcx> {\n-    fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn new(tcx: TyCtxt<'tcx, 'tcx>,\n            def_id: DefId,\n            body: &'a Body<'tcx>,\n            mode: Mode)\n@@ -1472,7 +1472,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_const_qualif<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn mir_const_qualif<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                               def_id: DefId)\n                               -> (u8, &'tcx BitSet<Local>) {\n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n@@ -1493,7 +1493,7 @@ pub struct QualifyAndPromoteConstants;\n \n impl MirPass for QualifyAndPromoteConstants {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n@@ -1668,7 +1668,7 @@ impl MirPass for QualifyAndPromoteConstants {\n     }\n }\n \n-fn args_required_const(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<FxHashSet<usize>> {\n+fn args_required_const(tcx: TyCtxt<'_, '_>, def_id: DefId) -> Option<FxHashSet<usize>> {\n     let attrs = tcx.get_attrs(def_id);\n     let attr = attrs.iter().find(|a| a.check_name(sym::rustc_args_required_const))?;\n     let mut ret = FxHashSet::default();"}, {"sha": "449d2d32456bd26900fd863bbe85f12670164d48", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -9,7 +9,7 @@ use syntax_pos::Span;\n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n pub fn is_min_const_fn(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n     body: &'a Body<'tcx>,\n ) -> McfResult {\n@@ -80,7 +80,7 @@ pub fn is_min_const_fn(\n }\n \n fn check_ty(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ty: Ty<'tcx>,\n     span: Span,\n     fn_def_id: DefId,\n@@ -129,7 +129,7 @@ fn check_ty(\n }\n \n fn check_rvalue(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &'a Body<'tcx>,\n     rvalue: &Rvalue<'tcx>,\n     span: Span,\n@@ -209,7 +209,7 @@ fn check_rvalue(\n }\n \n fn check_statement(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &'a Body<'tcx>,\n     statement: &Statement<'tcx>,\n ) -> McfResult {\n@@ -279,7 +279,7 @@ fn check_place(\n }\n \n fn check_terminator(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &'a Body<'tcx>,\n     terminator: &Terminator<'tcx>,\n ) -> McfResult {\n@@ -375,7 +375,7 @@ fn check_terminator(\n /// for being called from stable `const fn`s (`min_const_fn`).\n ///\n /// Adding more intrinsics requires sign-off from @rust-lang/lang.\n-fn is_intrinsic_whitelisted(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn is_intrinsic_whitelisted(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> bool {\n     match &tcx.item_name(def_id).as_str()[..] {\n         | \"size_of\"\n         | \"min_align_of\""}, {"sha": "23541a6e6bc7e694fa7386f3e86ee46f6cce6565", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -10,7 +10,7 @@ use crate::util::patch::MirPatch;\n pub struct RemoveNoopLandingPads;\n \n pub fn remove_noop_landing_pads<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     body: &mut Body<'tcx>)\n {\n     if tcx.sess.no_landing_pads() {\n@@ -23,7 +23,7 @@ pub fn remove_noop_landing_pads<'tcx>(\n \n impl MirPass for RemoveNoopLandingPads {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         remove_noop_landing_pads(tcx, body);"}, {"sha": "2a25cd2c9573a226f53042b526489d18758c9bd8", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -25,7 +25,7 @@ use crate::dataflow::has_rustc_mir_with;\n pub struct SanityCheck;\n \n impl MirPass for SanityCheck {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx, 'tcx>,\n                           src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = src.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n@@ -84,7 +84,7 @@ impl MirPass for SanityCheck {\n /// (If there are any calls to `rustc_peek` that do not match the\n /// expression form above, then that emits an error as well, but those\n /// errors are not intended to be used for unit tests.)\n-pub fn sanity_check_via_rustc_peek<'tcx, O>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn sanity_check_via_rustc_peek<'tcx, O>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                 body: &Body<'tcx>,\n                                                 def_id: DefId,\n                                                 _attributes: &[ast::Attribute],\n@@ -101,7 +101,7 @@ pub fn sanity_check_via_rustc_peek<'tcx, O>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn each_block<'tcx, O>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn each_block<'tcx, O>(tcx: TyCtxt<'tcx, 'tcx>,\n                            body: &Body<'tcx>,\n                            results: &DataflowResults<'tcx, O>,\n                            bb: mir::BasicBlock) where\n@@ -214,7 +214,7 @@ fn each_block<'tcx, O>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n                                       form `&expr`\"));\n }\n \n-fn is_rustc_peek<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_rustc_peek<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                            terminator: &'a Option<mir::Terminator<'tcx>>)\n                            -> Option<(&'a [mir::Operand<'tcx>], Span)> {\n     if let Some(mir::Terminator { ref kind, source_info, .. }) = *terminator {"}, {"sha": "65838946a7859104ddad6e01b47ffd63b5931b6c", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -58,7 +58,7 @@ impl MirPass for SimplifyCfg {\n     }\n \n     fn run_pass<'tcx>(&self,\n-                          _tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          _tcx: TyCtxt<'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body);\n@@ -297,7 +297,7 @@ pub struct SimplifyLocals;\n \n impl MirPass for SimplifyLocals {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         let mut marker = DeclMarker { locals: BitSet::new_empty(body.local_decls.len()) };"}, {"sha": "6f6dd1a7c8095fdf590e30d9c9f9a4d7be987fcf", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -20,7 +20,7 @@ impl MirPass for SimplifyBranches {\n     }\n \n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         for block in body.basic_blocks_mut() {"}, {"sha": "f71c30e587d7b39e9b162afaaf541c42b70b53d4", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -38,7 +38,7 @@ pub struct UniformArrayMoveOut;\n \n impl MirPass for UniformArrayMoveOut {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         let mut patch = MirPatch::new(body);\n@@ -53,7 +53,7 @@ impl MirPass for UniformArrayMoveOut {\n struct UniformArrayMoveOutVisitor<'a, 'tcx: 'a> {\n     body: &'a Body<'tcx>,\n     patch: &'a mut MirPatch<'tcx>,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UniformArrayMoveOutVisitor<'a, 'tcx> {\n@@ -163,7 +163,7 @@ pub struct RestoreSubsliceArrayMoveOut;\n \n impl MirPass for RestoreSubsliceArrayMoveOut {\n     fn run_pass<'tcx>(&self,\n-                          tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'tcx, 'tcx>,\n                           _src: MirSource<'tcx>,\n                           body: &mut Body<'tcx>) {\n         let mut patch = MirPatch::new(body);"}, {"sha": "c171bef4c96c41c27051760a5b27d5c0610f9b5c", "filename": "src/librustc_mir/util/alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Falignment.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -4,7 +4,7 @@ use rustc::mir::*;\n /// Returns `true` if this place is allowed to be less aligned\n /// than its containing struct (because it is within a packed\n /// struct).\n-pub fn is_disaligned<'tcx, L>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn is_disaligned<'tcx, L>(tcx: TyCtxt<'tcx, 'tcx>,\n                                   local_decls: &L,\n                                   param_env: ty::ParamEnv<'tcx>,\n                                   place: &Place<'tcx>)\n@@ -32,7 +32,7 @@ pub fn is_disaligned<'tcx, L>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn is_within_packed<'tcx, L>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn is_within_packed<'tcx, L>(tcx: TyCtxt<'tcx, 'tcx>,\n                                  local_decls: &L,\n                                  place: &Place<'tcx>)\n                                  -> bool"}, {"sha": "551cccf3d7d7f271e7ff4cf4bfce6c6b4653432c", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -788,7 +788,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     }\n }\n \n-impl BorrowckErrors<'tcx> for TyCtxt<'tcx, 'gcx, 'tcx> {\n+impl BorrowckErrors<'tcx> for TyCtxt<'gcx, 'tcx> {\n     fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         self,\n         sp: S,"}, {"sha": "efcb23aab2ed984ac65bec81b3d8c9cd68f96fd1", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -75,7 +75,7 @@ pub trait DropElaborator<'a, 'tcx: 'a> : fmt::Debug {\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx>;\n     fn body(&self) -> &'a Body<'tcx>;\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx>;\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx>;\n     fn param_env(&self) -> ty::ParamEnv<'tcx>;\n \n     fn drop_style(&self, path: Self::Path, mode: DropFlagMode) -> DropStyle;\n@@ -126,7 +126,7 @@ where\n         place.ty(self.elaborator.body(), self.tcx()).ty\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.elaborator.tcx()\n     }\n "}, {"sha": "2dc6c9061bf7ad5b8696323abc7c8c16d7bb9cc5", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -8,7 +8,7 @@ use std::io::{self, Write};\n use super::pretty::dump_mir_def_ids;\n \n /// Write a graphviz DOT graph of a list of MIRs.\n-pub fn write_mir_graphviz<'tcx, W>(tcx: TyCtxt<'tcx, '_, 'tcx>,\n+pub fn write_mir_graphviz<'tcx, W>(tcx: TyCtxt<'_, 'tcx>,\n                                    single: Option<DefId>,\n                                    w: &mut W)\n                                    -> io::Result<()>\n@@ -32,7 +32,7 @@ pub fn graphviz_safe_def_name(def_id: DefId) -> String {\n }\n \n /// Write a graphviz DOT graph of the MIR.\n-pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'tcx, '_, 'tcx>,\n+pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, 'tcx>,\n                                       def_id: DefId,\n                                       body: &Body<'_>,\n                                       w: &mut W) -> io::Result<()>\n@@ -133,7 +133,7 @@ fn write_edges<W: Write>(source: BasicBlock, body: &Body<'_>, w: &mut W) -> io::\n /// Write the graphviz DOT label for the overall graph. This is essentially a block of text that\n /// will appear below the graph, showing the type of the `fn` this MIR represents and the types of\n /// all the variables and temporaries.\n-fn write_graph_label<'gcx, 'tcx, W: Write>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn write_graph_label<'gcx, 'tcx, W: Write>(tcx: TyCtxt<'gcx, 'tcx>,\n                                                def_id: DefId,\n                                                body: &Body<'_>,\n                                                w: &mut W)"}, {"sha": "39840432c690e3525bf0ba88997b6cde55441a34", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -255,7 +255,7 @@ fn block<'tcx>(\n }\n \n pub fn dump_mir<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     pass_name: &str,\n     source: MirSource<'tcx>,\n     body: &Body<'tcx>,\n@@ -272,7 +272,7 @@ pub fn dump_mir<'tcx>(\n }\n \n fn dump_matched_mir_node<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     pass_name: &str,\n     node_path: &str,\n     source: MirSource<'tcx>,\n@@ -295,7 +295,7 @@ fn dump_matched_mir_node<'tcx>(\n }\n \n pub fn write_mir_fn<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     src: MirSource<'tcx>,\n     body: &Body<'tcx>,\n     w: &mut dyn Write,"}, {"sha": "3563ad43051dceb7070fcc8c5c1c37d3895b02f2", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -22,7 +22,7 @@ pub use self::graphviz::write_node_label as write_graphviz_node_label;\n \n /// If possible, suggest replacing `ref` with `ref mut`.\n pub fn suggest_ref_mut<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     binding_span: Span,\n ) -> Option<(String)> {\n     let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).unwrap();"}, {"sha": "8bf491acc26d9542ba0f29803f5b21f3d0b4ceca", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -63,7 +63,7 @@ pub enum PassWhere {\n /// - `foo & nll | bar & typeck` == match if `foo` and `nll` both appear in the name\n ///   or `typeck` and `bar` both appear in the name.\n pub fn dump_mir<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n@@ -94,7 +94,7 @@ pub fn dump_mir<'gcx, 'tcx, F>(\n }\n \n pub fn dump_enabled<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     pass_name: &str,\n     source: MirSource<'tcx>,\n ) -> bool {\n@@ -118,7 +118,7 @@ pub fn dump_enabled<'gcx, 'tcx>(\n // run while we are already attempting to evaluate `type_of`.\n \n fn dump_matched_mir_node<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     node_path: &str,\n@@ -158,7 +158,7 @@ fn dump_matched_mir_node<'gcx, 'tcx, F>(\n /// Also used by other bits of code (e.g., NLL inference) that dump\n /// graphviz data or other things.\n fn dump_path(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     extension: &str,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n@@ -225,7 +225,7 @@ fn dump_path(\n /// bits of code (e.g., NLL inference) that dump graphviz data or\n /// other things, and hence takes the extension as an argument.\n pub(crate) fn create_dump_file(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     extension: &str,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n@@ -241,7 +241,7 @@ pub(crate) fn create_dump_file(\n \n /// Write out a human-readable textual representation for the given MIR.\n pub fn write_mir_pretty<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     single: Option<DefId>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n@@ -280,7 +280,7 @@ pub fn write_mir_pretty<'gcx, 'tcx>(\n }\n \n pub fn write_mir_fn<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     src: MirSource<'tcx>,\n     body: &Body<'tcx>,\n     extra_data: &mut F,\n@@ -304,7 +304,7 @@ where\n \n /// Write out a human-readable textual representation for the given basic block.\n pub fn write_basic_block<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     block: BasicBlock,\n     body: &Body<'tcx>,\n     extra_data: &mut F,\n@@ -371,7 +371,7 @@ where\n /// information. There's often a lot of little things \"nuzzled up\" in\n /// a statement.\n fn write_extra<'gcx, 'tcx, F>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     write: &mut dyn Write,\n     mut visit_op: F,\n ) -> io::Result<()>\n@@ -390,7 +390,7 @@ where\n }\n \n struct ExtraComments<'gcx, 'tcx> {\n-    _tcx: TyCtxt<'tcx, 'gcx, 'tcx>, // don't need it now, but bet we will soon\n+    _tcx: TyCtxt<'gcx, 'tcx>, // don't need it now, but bet we will soon\n     comments: Vec<String>,\n }\n \n@@ -453,7 +453,7 @@ impl Visitor<'tcx> for ExtraComments<'gcx, 'tcx> {\n     }\n }\n \n-fn comment(tcx: TyCtxt<'_, '_, '_>, SourceInfo { span, scope }: SourceInfo) -> String {\n+fn comment(tcx: TyCtxt<'_, '_>, SourceInfo { span, scope }: SourceInfo) -> String {\n     format!(\n         \"scope {} at {}\",\n         scope.index(),\n@@ -463,7 +463,7 @@ fn comment(tcx: TyCtxt<'_, '_, '_>, SourceInfo { span, scope }: SourceInfo) -> S\n \n /// Prints local variables in a scope tree.\n fn write_scope_tree(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     body: &Body<'_>,\n     scope_tree: &FxHashMap<SourceScope, Vec<SourceScope>>,\n     w: &mut dyn Write,\n@@ -539,7 +539,7 @@ fn write_scope_tree(\n /// Write out a human-readable textual representation of the MIR's `fn` type and the types of its\n /// local variables (both user-defined bindings and compiler temporaries).\n pub fn write_mir_intro<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     src: MirSource<'tcx>,\n     body: &Body<'_>,\n     w: &mut dyn Write,\n@@ -570,7 +570,7 @@ pub fn write_mir_intro<'gcx, 'tcx>(\n }\n \n fn write_mir_sig(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     src: MirSource<'tcx>,\n     body: &Body<'_>,\n     w: &mut dyn Write,\n@@ -642,7 +642,7 @@ fn write_user_type_annotations(body: &Body<'_>, w: &mut dyn Write) -> io::Result\n     Ok(())\n }\n \n-pub fn dump_mir_def_ids(tcx: TyCtxt<'_, '_, '_>, single: Option<DefId>) -> Vec<DefId> {\n+pub fn dump_mir_def_ids(tcx: TyCtxt<'_, '_>, single: Option<DefId>) -> Vec<DefId> {\n     if let Some(i) = single {\n         vec![i]\n     } else {"}, {"sha": "c4ebd9cf89db2f6e38a62cf2a07004804f8e455d", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::TyCtxt;\n use syntax::ast::Attribute;\n use syntax::symbol::sym;\n \n-pub fn test_layout<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn test_layout<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     if tcx.features().rustc_attrs {\n         // if the `rustc_attrs` feature is not enabled, don't bother testing layout\n         tcx.hir()\n@@ -24,7 +24,7 @@ pub fn test_layout<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n }\n \n struct VarianceTest<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n@@ -105,7 +105,7 @@ impl VarianceTest<'tcx> {\n }\n \n struct UnwrapLayoutCx<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n }\n \n@@ -119,7 +119,7 @@ impl LayoutOf for UnwrapLayoutCx<'tcx> {\n }\n \n impl HasTyCtxt<'tcx> for UnwrapLayoutCx<'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "4c361e975b2e00da8eae887ba04a38a8ac78e7eb", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -45,7 +45,7 @@ struct CheckLoopVisitor<'a, 'hir: 'a> {\n     cx: Context,\n }\n \n-fn check_mod_loops<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn check_mod_loops<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckLoopVisitor {\n         sess: &tcx.sess,\n         hir_map: &tcx.hir(),"}, {"sha": "6a26d942537c7a591eb0ae9055693fb1f5f12d88", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -39,7 +39,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                   def_id: DefId)\n                                                   -> bool\n {\n@@ -51,7 +51,7 @@ fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     tcx.rvalue_promotable_map(def_id).contains(&body_id.hir_id.local_id)\n }\n \n-fn rvalue_promotable_map<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn rvalue_promotable_map<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                    def_id: DefId)\n                                    -> &'tcx ItemLocalSet\n {\n@@ -81,7 +81,7 @@ fn rvalue_promotable_map<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n struct CheckCrateVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     in_fn: bool,\n     in_static: bool,\n     mut_rvalue_borrows: HirIdSet,"}, {"sha": "f269d3af91f89f8a40ef7a8f239cb33a0842f136", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -30,12 +30,12 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n }\n \n /// Finds the function marked with `#[plugin_registrar]`, if any.\n-pub fn find_plugin_registrar<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Option<DefId> {\n+pub fn find_plugin_registrar<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> Option<DefId> {\n     tcx.plugin_registrar_fn(LOCAL_CRATE)\n }\n \n fn plugin_registrar_fn<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     cnum: CrateNum,\n ) -> Option<DefId> {\n     assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "38e102345b3e772a4e63f53e9c375fc0d2ba288f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -49,7 +49,7 @@ mod error_codes;\n /// manually. Second, it doesn't visit some type components like signatures of fn types, or traits\n /// in `impl Trait`, see individual comments in `DefIdVisitorSkeleton::visit_ty`.\n trait DefIdVisitor<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx>;\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx>;\n     fn shallow(&self) -> bool { false }\n     fn skip_assoc_tys(&self) -> bool { false }\n     fn visit_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool;\n@@ -78,7 +78,7 @@ struct DefIdVisitorSkeleton<'v, 'tcx, V>\n {\n     def_id_visitor: &'v mut V,\n     visited_opaque_tys: FxHashSet<DefId>,\n-    dummy: PhantomData<TyCtxt<'tcx, 'tcx, 'tcx>>,\n+    dummy: PhantomData<TyCtxt<'tcx, 'tcx>>,\n }\n \n impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>\n@@ -220,7 +220,7 @@ impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>\n     }\n }\n \n-fn def_id_visibility<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n+fn def_id_visibility<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId)\n                                -> (ty::Visibility, Span, &'static str) {\n     match tcx.hir().as_local_hir_id(def_id) {\n         Some(hir_id) => {\n@@ -323,15 +323,15 @@ fn def_id_visibility<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId)\n \n // Set the correct `TypeckTables` for the given `item_id` (or an empty table if\n // there is no `TypeckTables` for the item).\n-fn item_tables<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn item_tables<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                          hir_id: hir::HirId,\n                          empty_tables: &'a ty::TypeckTables<'tcx>)\n                          -> &'a ty::TypeckTables<'tcx> {\n     let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n     if tcx.has_typeck_tables(def_id) { tcx.typeck_tables_of(def_id) } else { empty_tables }\n }\n \n-fn min<'tcx>(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+fn min<'tcx>(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'tcx, 'tcx>)\n                  -> ty::Visibility {\n     if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }\n }\n@@ -343,7 +343,7 @@ fn min<'tcx>(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'tcx, 'tcx,\n /// in crates that have been updated to use pub(restricted).\n ////////////////////////////////////////////////////////////////////////////////\n struct PubRestrictedVisitor<'tcx> {\n-    tcx:  TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx:  TyCtxt<'tcx, 'tcx>,\n     has_pub_restricted: bool,\n }\n \n@@ -361,13 +361,13 @@ impl Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n ////////////////////////////////////////////////////////////////////////////////\n \n struct FindMin<'a, 'tcx, VL: VisibilityLike> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     access_levels: &'a AccessLevels,\n     min: VL,\n }\n \n impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> { self.tcx }\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> { self.tcx }\n     fn shallow(&self) -> bool { VL::SHALLOW }\n     fn skip_assoc_tys(&self) -> bool { true }\n     fn visit_def_id(&mut self, def_id: DefId, _kind: &str, _descr: &dyn fmt::Display) -> bool {\n@@ -383,7 +383,7 @@ trait VisibilityLike: Sized {\n \n     // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to\n     // associated types for which we can't determine visibility precisely.\n-    fn of_impl<'a, 'tcx>(hir_id: hir::HirId, tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    fn of_impl<'a, 'tcx>(hir_id: hir::HirId, tcx: TyCtxt<'tcx, 'tcx>,\n                          access_levels: &'a AccessLevels) -> Self {\n         let mut find = FindMin { tcx, access_levels, min: Self::MAX };\n         let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n@@ -426,7 +426,7 @@ impl VisibilityLike for Option<AccessLevel> {\n ////////////////////////////////////////////////////////////////////////////////\n \n struct EmbargoVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n \n     // Accessibility levels for reachable nodes.\n     access_levels: AccessLevels,\n@@ -815,7 +815,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n }\n \n impl DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> { self.ev.tcx }\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> { self.ev.tcx }\n     fn visit_def_id(&mut self, def_id: DefId, _kind: &str, _descr: &dyn fmt::Display) -> bool {\n         if let Some(hir_id) = self.ev.tcx.hir().as_local_hir_id(def_id) {\n             self.ev.update(hir_id, self.access_level);\n@@ -832,7 +832,7 @@ impl DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n //////////////////////////////////////////////////////////////////////////////////////\n \n struct NamePrivacyVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     current_item: hir::HirId,\n     empty_tables: &'a ty::TypeckTables<'tcx>,\n@@ -959,7 +959,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n ////////////////////////////////////////////////////////////////////////////////////////////\n \n struct TypePrivacyVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     current_item: DefId,\n     in_body: bool,\n@@ -1178,7 +1178,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n }\n \n impl DefIdVisitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> { self.tcx }\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> { self.tcx }\n     fn visit_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n         self.check_def_id(def_id, kind, descr)\n     }\n@@ -1192,7 +1192,7 @@ impl DefIdVisitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////////\n \n struct ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     access_levels: &'a AccessLevels,\n     in_variant: bool,\n     // Set of errors produced by this obsolete visitor.\n@@ -1536,7 +1536,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////////\n \n struct SearchInterfaceForPrivateItemsVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     item_id: hir::HirId,\n     item_def_id: DefId,\n     span: Span,\n@@ -1634,14 +1634,14 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n }\n \n impl DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> { self.tcx }\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> { self.tcx }\n     fn visit_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n         self.check_def_id(def_id, kind, descr)\n     }\n }\n \n struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     has_pub_restricted: bool,\n     old_error_set: &'a HirIdSet,\n }\n@@ -1814,7 +1814,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn check_mod_privacy<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn check_mod_privacy<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n     // Check privacy of names not checked in previous compilation stages.\n@@ -1842,7 +1842,7 @@ fn check_mod_privacy<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId)\n }\n \n fn privacy_access_levels<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     krate: CrateNum,\n ) -> &'tcx AccessLevels {\n     assert_eq!(krate, LOCAL_CRATE);\n@@ -1868,7 +1868,7 @@ fn privacy_access_levels<'tcx>(\n     tcx.arena.alloc(visitor.access_levels)\n }\n \n-fn check_private_in_public<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, krate: CrateNum) {\n+fn check_private_in_public<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, krate: CrateNum) {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);"}, {"sha": "3b4ea384a09a32914f9a5b50e56ae961bbbdaf10", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -77,7 +77,7 @@ macro_rules! access_from_vis {\n \n pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     dumper: &'ll mut JsonDumper<O>,\n \n     span: SpanUtils<'l>,"}, {"sha": "139fd640d628c44bbf7095f062d9318e6a3dfeab", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -52,7 +52,7 @@ use log::{debug, error, info};\n \n \n pub struct SaveContext<'l, 'tcx: 'l> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n     access_levels: &'l AccessLevels,\n     span_utils: SpanUtils<'tcx>,\n@@ -1115,7 +1115,7 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n }\n \n pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     krate: &ast::Crate,\n     cratename: &str,\n     input: &'l Input,"}, {"sha": "77f59ae6c32ce7f182343f85330eeeafd1c74dac", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -52,7 +52,7 @@ crate struct ChalkArenas<'gcx> {\n #[derive(Copy, Clone)]\n crate struct ChalkContext<'gcx> {\n     _arenas: ChalkArenas<'gcx>,\n-    tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+    tcx: TyCtxt<'gcx, 'gcx>,\n }\n \n #[derive(Copy, Clone)]\n@@ -527,7 +527,7 @@ impl ChalkContextLift<'tcx> for ChalkArenas<'a> {\n \n     fn lift_ex_clause_to_tcx(\n         ex_clause: &ChalkExClause<'a>,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>\n+        tcx: TyCtxt<'gcx, 'tcx>\n     ) -> Option<Self::LiftedExClause> {\n         Some(ChalkExClause {\n             subst: tcx.lift(&ex_clause.subst)?,\n@@ -539,7 +539,7 @@ impl ChalkContextLift<'tcx> for ChalkArenas<'a> {\n \n     fn lift_delayed_literal_to_tcx(\n         literal: &DelayedLiteral<ChalkArenas<'a>>,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>\n+        tcx: TyCtxt<'gcx, 'tcx>\n     ) -> Option<Self::LiftedDelayedLiteral> {\n         Some(match literal {\n             DelayedLiteral::CannotProve(()) => DelayedLiteral::CannotProve(()),\n@@ -553,7 +553,7 @@ impl ChalkContextLift<'tcx> for ChalkArenas<'a> {\n \n     fn lift_literal_to_tcx(\n         literal: &Literal<ChalkArenas<'a>>,\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n     ) -> Option<Self::LiftedLiteral> {\n         Some(match literal {\n             Literal::Negative(goal) => Literal::Negative(tcx.lift(goal)?),\n@@ -673,7 +673,7 @@ crate fn provide(p: &mut Providers<'_>) {\n }\n \n crate fn evaluate_goal<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     goal: ChalkCanonicalGoal<'tcx>\n ) -> Result<\n     &'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>,"}, {"sha": "7dc82648322495aab250bc316caaa8d0c320a1df", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -15,7 +15,7 @@ use crate::generic_types;\n /// `Implemented(ty: Trait) :- Implemented(nested: Trait)...`\n /// where `Trait` is specified by `trait_def_id`.\n fn builtin_impl_clause(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n     nested: &[Kind<'tcx>],\n     trait_def_id: DefId\n@@ -43,7 +43,7 @@ fn builtin_impl_clause(\n }\n \n crate fn assemble_builtin_unsize_impls<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     unsize_def_id: DefId,\n     source: Ty<'tcx>,\n     target: Ty<'tcx>,\n@@ -119,7 +119,7 @@ crate fn assemble_builtin_unsize_impls<'tcx>(\n }\n \n crate fn assemble_builtin_sized_impls<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     sized_def_id: DefId,\n     ty: Ty<'tcx>,\n     clauses: &mut Vec<Clause<'tcx>>\n@@ -223,7 +223,7 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n }\n \n crate fn assemble_builtin_copy_clone_impls<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     trait_def_id: DefId,\n     ty: Ty<'tcx>,\n     clauses: &mut Vec<Clause<'tcx>>"}, {"sha": "8702bc7dbc0894478582dc3873bf87e8dbba6500", "filename": "src/librustc_traits/chalk_context/program_clauses/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -19,7 +19,7 @@ use self::primitive::*;\n use self::builtin::*;\n \n fn assemble_clauses_from_impls<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     trait_def_id: DefId,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n@@ -33,7 +33,7 @@ fn assemble_clauses_from_impls<'tcx>(\n }\n \n fn assemble_clauses_from_assoc_ty_values<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     trait_def_id: DefId,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {"}, {"sha": "a1d9e7e0cde23eedd7c8c0823cf0026d37af873a", "filename": "src/librustc_traits/chalk_context/program_clauses/primitive.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -16,7 +16,7 @@ use crate::generic_types;\n use std::iter;\n \n crate fn wf_clause_for_raw_ptr<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     mutbl: hir::Mutability\n ) -> Clauses<'tcx> {\n     let ptr_ty = generic_types::raw_ptr(tcx, mutbl);\n@@ -33,7 +33,7 @@ crate fn wf_clause_for_raw_ptr<'tcx>(\n }\n \n crate fn wf_clause_for_fn_ptr<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     arity_and_output: usize,\n     variadic: bool,\n     unsafety: hir::Unsafety,\n@@ -53,7 +53,7 @@ crate fn wf_clause_for_fn_ptr<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_slice<'tcx>(tcx: TyCtxt<'tcx, '_, 'tcx>) -> Clauses<'tcx> {\n+crate fn wf_clause_for_slice<'tcx>(tcx: TyCtxt<'_, 'tcx>) -> Clauses<'tcx> {\n     let ty = generic_types::bound(tcx, 0);\n     let slice_ty = tcx.mk_slice(ty);\n \n@@ -83,7 +83,7 @@ crate fn wf_clause_for_slice<'tcx>(tcx: TyCtxt<'tcx, '_, 'tcx>) -> Clauses<'tcx>\n }\n \n crate fn wf_clause_for_array<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     length: &'tcx ty::Const<'tcx>\n ) -> Clauses<'tcx> {\n     let ty = generic_types::bound(tcx, 0);\n@@ -115,7 +115,7 @@ crate fn wf_clause_for_array<'tcx>(\n }\n \n crate fn wf_clause_for_tuple<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     arity: usize\n ) -> Clauses<'tcx> {\n     let type_list = generic_types::type_list(tcx, arity);\n@@ -159,7 +159,7 @@ crate fn wf_clause_for_tuple<'tcx>(\n }\n \n crate fn wf_clause_for_ref<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     mutbl: hir::Mutability\n ) -> Clauses<'tcx> {\n     let region = tcx.mk_region(\n@@ -186,7 +186,7 @@ crate fn wf_clause_for_ref<'tcx>(\n }\n \n crate fn wf_clause_for_fn_def<'tcx>(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     def_id: DefId\n ) -> Clauses<'tcx> {\n     let fn_def = generic_types::fn_def(tcx, def_id);"}, {"sha": "ff2cfc87297de912648fbd546a81cfdd72eccb90", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -170,7 +170,7 @@ impl AnswerSubstitutor<'cx, 'gcx, 'tcx> {\n }\n \n impl TypeRelation<'gcx, 'tcx> for AnswerSubstitutor<'cx, 'gcx, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "02b9b078fca912bad579091f42562644d17a0dd8", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -18,7 +18,7 @@ crate fn provide(p: &mut Providers<'_>) {\n }\n \n fn dropck_outlives<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonical_goal: CanonicalTyGoal<'tcx>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>, NoSolution> {\n     debug!(\"dropck_outlives(goal={:#?})\", canonical_goal);\n@@ -147,7 +147,7 @@ fn dropck_outlives<'tcx>(\n /// Returns a set of constraints that needs to be satisfied in\n /// order for `ty` to be valid for destruction.\n fn dtorck_constraint_for_ty<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     span: Span,\n     for_ty: Ty<'tcx>,\n     depth: usize,\n@@ -280,7 +280,7 @@ fn dtorck_constraint_for_ty<'gcx, 'tcx>(\n \n /// Calculates the dtorck constraint for a type.\n crate fn adt_dtorck_constraint<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Result<DtorckConstraint<'tcx>, NoSolution> {\n     let def = tcx.adt_def(def_id);"}, {"sha": "be3a8340e6006d2591b7eb45951253f9cf1669b2", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -14,7 +14,7 @@ crate fn provide(p: &mut Providers<'_>) {\n }\n \n fn evaluate_obligation<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonical_goal: CanonicalPredicateGoal<'tcx>,\n ) -> Result<EvaluationResult, OverflowError> {\n     tcx.infer_ctxt().enter_with_canonical("}, {"sha": "7eb1cd093a82f4838517affa91989dcba46f25ad", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -6,23 +6,23 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi;\n \n-crate fn bound(tcx: TyCtxt<'tcx, '_, 'tcx>, index: u32) -> Ty<'tcx> {\n+crate fn bound(tcx: TyCtxt<'_, 'tcx>, index: u32) -> Ty<'tcx> {\n     let ty = ty::Bound(\n         ty::INNERMOST,\n         ty::BoundVar::from_u32(index).into()\n     );\n     tcx.mk_ty(ty)\n }\n \n-crate fn raw_ptr(tcx: TyCtxt<'tcx, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n+crate fn raw_ptr(tcx: TyCtxt<'_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n     tcx.mk_ptr(ty::TypeAndMut {\n         ty: bound(tcx, 0),\n         mutbl,\n     })\n }\n \n crate fn fn_ptr(\n-    tcx: TyCtxt<'tcx, '_, 'tcx>,\n+    tcx: TyCtxt<'_, 'tcx>,\n     arity_and_output: usize,\n     c_variadic: bool,\n     unsafety: hir::Unsafety,\n@@ -44,7 +44,7 @@ crate fn fn_ptr(\n     tcx.mk_fn_ptr(fn_sig)\n }\n \n-crate fn type_list(tcx: TyCtxt<'tcx, '_, 'tcx>, arity: usize) -> SubstsRef<'tcx> {\n+crate fn type_list(tcx: TyCtxt<'_, 'tcx>, arity: usize) -> SubstsRef<'tcx> {\n     tcx.mk_substs(\n         (0..arity).into_iter()\n             .map(|i| ty::BoundVar::from(i))\n@@ -53,7 +53,7 @@ crate fn type_list(tcx: TyCtxt<'tcx, '_, 'tcx>, arity: usize) -> SubstsRef<'tcx>\n     )\n }\n \n-crate fn ref_ty(tcx: TyCtxt<'tcx, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n+crate fn ref_ty(tcx: TyCtxt<'_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n     let region = tcx.mk_region(\n         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n     );\n@@ -64,17 +64,17 @@ crate fn ref_ty(tcx: TyCtxt<'tcx, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx>\n     })\n }\n \n-crate fn fn_def(tcx: TyCtxt<'tcx, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+crate fn fn_def(tcx: TyCtxt<'_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_ty(ty::FnDef(def_id, InternalSubsts::bound_vars_for_item(tcx, def_id)))\n }\n \n-crate fn closure(tcx: TyCtxt<'tcx, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+crate fn closure(tcx: TyCtxt<'_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_closure(def_id, ty::ClosureSubsts {\n         substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n     })\n }\n \n-crate fn generator(tcx: TyCtxt<'tcx, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+crate fn generator(tcx: TyCtxt<'_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_generator(def_id, ty::GeneratorSubsts {\n         substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n     }, hir::GeneratorMovability::Movable)"}, {"sha": "88bc61886b7d40f611cad6d15aafe0baf6c86014", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -23,7 +23,7 @@ crate fn provide(p: &mut Providers<'_>) {\n }\n \n fn implied_outlives_bounds<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     goal: CanonicalTyGoal<'tcx>,\n ) -> Result<\n         &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>,"}, {"sha": "537b6d3e09012e3f697c2bb7ddb8702f45b98670", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -12,12 +12,12 @@ use rustc::hir::def_id::DefId;\n use rustc_data_structures::fx::FxHashSet;\n \n struct ClauseVisitor<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     round: &'a mut FxHashSet<Clause<'tcx>>,\n }\n \n impl ClauseVisitor<'a, 'tcx> {\n-    fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, round: &'a mut FxHashSet<Clause<'tcx>>) -> Self {\n+    fn new(tcx: TyCtxt<'tcx, 'tcx>, round: &'a mut FxHashSet<Clause<'tcx>>) -> Self {\n         ClauseVisitor {\n             tcx,\n             round,\n@@ -128,7 +128,7 @@ impl ClauseVisitor<'a, 'tcx> {\n }\n \n crate fn program_clauses_for_env<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     environment: Environment<'tcx>,\n ) -> Clauses<'tcx> {\n     debug!(\"program_clauses_for_env(environment={:?})\", environment);\n@@ -161,7 +161,7 @@ crate fn program_clauses_for_env<'tcx>(\n }\n \n crate fn environment<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId\n ) -> Environment<'tcx> {\n     use super::{Lower, IntoFromEnvGoal};"}, {"sha": "c73f61f070e37263d5784de85e854098433677a3", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> IntoWellFormedGoal for DomainGoal<'tcx> {\n }\n \n crate fn program_clauses_for<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n     // FIXME(eddyb) this should only be using `def_kind`.\n@@ -185,7 +185,7 @@ crate fn program_clauses_for<'tcx>(\n }\n \n fn program_clauses_for_trait<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n     // `trait Trait<P1..Pn> where WC { .. } // P0 == Self`\n@@ -300,7 +300,7 @@ fn program_clauses_for_trait<'tcx>(\n     )\n }\n \n-fn program_clauses_for_impl(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+fn program_clauses_for_impl(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> Clauses<'tcx> {\n     if let ImplPolarity::Negative = tcx.impl_polarity(def_id) {\n         return List::empty();\n     }\n@@ -344,7 +344,7 @@ fn program_clauses_for_impl(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Cla\n }\n \n pub fn program_clauses_for_type_def<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n     // Rule WellFormed-Type\n@@ -421,7 +421,7 @@ pub fn program_clauses_for_type_def<'tcx>(\n }\n \n pub fn program_clauses_for_associated_type_def<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     item_id: DefId,\n ) -> Clauses<'tcx> {\n     // Rule ProjectionEq-Placeholder\n@@ -559,7 +559,7 @@ pub fn program_clauses_for_associated_type_def<'tcx>(\n }\n \n pub fn program_clauses_for_associated_type_value<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     item_id: DefId,\n ) -> Clauses<'tcx> {\n     // Rule Normalize-From-Impl (see rustc guide)\n@@ -620,7 +620,7 @@ pub fn program_clauses_for_associated_type_value<'tcx>(\n     tcx.mk_clauses(iter::once(normalize_clause))\n }\n \n-pub fn dump_program_clauses<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn dump_program_clauses<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     if !tcx.features().rustc_attrs {\n         return;\n     }\n@@ -632,7 +632,7 @@ pub fn dump_program_clauses<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n }\n \n struct ClauseDumper<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl ClauseDumper<'tcx> {"}, {"sha": "5dec1613f1e950d06598e7dc0683fdc473f5a5a3", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -12,7 +12,7 @@ crate fn provide(p: &mut Providers<'_>) {\n }\n \n fn normalize_ty_after_erasing_regions<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     goal: ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Ty<'tcx> {\n     debug!(\"normalize_ty_after_erasing_regions(goal={:#?})\", goal);"}, {"sha": "448d42dc9b051e5e2b537eda82af84f7d66b35d7", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -15,7 +15,7 @@ crate fn provide(p: &mut Providers<'_>) {\n }\n \n fn normalize_projection_ty<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, NormalizationResult<'tcx>>>, NoSolution> {\n     debug!(\"normalize_provider(goal={:#?})\", goal);"}, {"sha": "f2ceff6185e92c73adcd2b0ea50476a6f11d68a5", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -35,7 +35,7 @@ crate fn provide(p: &mut Providers<'_>) {\n }\n \n fn type_op_ascribe_user_type<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, AscribeUserType<'tcx>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n@@ -94,7 +94,7 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n         );\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -167,7 +167,7 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n }\n \n fn type_op_eq<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Eq<'tcx>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n@@ -197,39 +197,39 @@ where\n }\n \n fn type_op_normalize_ty(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Ty<'tcx>>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_predicate(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Predicate<'tcx>>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, Predicate<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_fn_sig(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<FnSig<'tcx>>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, FnSig<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_poly_fn_sig(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<PolyFnSig<'tcx>>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, PolyFnSig<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_subtype<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Subtype<'tcx>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n@@ -243,7 +243,7 @@ fn type_op_subtype<'tcx>(\n }\n \n fn type_op_prove_predicate<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, ProvePredicate<'tcx>>>,\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()"}, {"sha": "9730623b552aca12ba1680bdb9e48964db5d4aa5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -41,7 +41,7 @@ use rustc_data_structures::fx::FxHashSet;\n pub struct PathSeg(pub DefId, pub usize);\n \n pub trait AstConv<'gcx, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'gcx, 'tcx>;\n+    fn tcx<'a>(&'a self) -> TyCtxt<'gcx, 'tcx>;\n \n     /// Returns the set of bounds in scope for the type parameter with\n     /// the given id.\n@@ -208,7 +208,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n     /// Report error if there is an explicit type parameter when using `impl Trait`.\n     fn check_impl_trait(\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'_, '_>,\n         span: Span,\n         seg: &hir::PathSegment,\n         generics: &ty::Generics,\n@@ -239,7 +239,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     /// Checks that the correct number of generic arguments have been provided.\n     /// Used specifically for function calls.\n     pub fn check_generic_arg_count_for_call(\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'_, '_>,\n         span: Span,\n         def: &ty::Generics,\n         seg: &hir::PathSegment,\n@@ -271,7 +271,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     /// Checks that the correct number of generic arguments have been provided.\n     /// This is used both for datatypes and function calls.\n     fn check_generic_arg_count(\n-        tcx: TyCtxt<'_, '_, '_>,\n+        tcx: TyCtxt<'_, '_>,\n         span: Span,\n         def: &ty::Generics,\n         args: &hir::GenericArgs,\n@@ -462,7 +462,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     /// - `inferred_kind`: if no parameter was provided, and inference is enabled, then\n     ///   creates a suitable inference variable.\n     pub fn create_substs_for_generic_args<'b>(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         def_id: DefId,\n         parent_substs: &[Kind<'tcx>],\n         has_self: bool,\n@@ -1810,7 +1810,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         has_err\n     }\n \n-    pub fn prohibit_assoc_ty_binding(tcx: TyCtxt<'_, '_, '_>, span: Span) {\n+    pub fn prohibit_assoc_ty_binding(tcx: TyCtxt<'_, '_>, span: Span) {\n         let mut err = struct_span_err!(tcx.sess, span, E0229,\n                                        \"associated type bindings are not allowed here\");\n         err.span_label(span, \"associated type not allowed here\").emit();\n@@ -2420,7 +2420,7 @@ impl<'gcx, 'tcx> Bounds<'tcx> {\n     /// where-clauses). Because some of our bounds listings (e.g.,\n     /// regions) don't include the self-type, you must supply the\n     /// self-type here (the `param_ty` parameter).\n-    pub fn predicates(&self, tcx: TyCtxt<'tcx, 'gcx, 'tcx>, param_ty: Ty<'tcx>)\n+    pub fn predicates(&self, tcx: TyCtxt<'gcx, 'tcx>, param_ty: Ty<'tcx>)\n                       -> Vec<(ty::Predicate<'tcx>, Span)>\n     {\n         // If it could be sized, and is, add the `Sized` predicate."}, {"sha": "8cb4360e65d3d2b65529ac3fb98e991c4af4db89", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -240,7 +240,7 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n }\n \n pub fn report_autoderef_recursion_limit_error<'gcx, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>, span: Span, ty: Ty<'tcx>)\n+    tcx: TyCtxt<'gcx, 'tcx>, span: Span, ty: Ty<'tcx>)\n {\n     // We've reached the recursion limit, error gracefully.\n     let suggested_limit = *tcx.sess.recursion_limit.get() * 2;"}, {"sha": "8e13bbed89e782218315984b1bafeba889c18d60", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -18,7 +18,7 @@ use rustc::hir;\n /// Checks that it is legal to call methods of the trait corresponding\n /// to `trait_id` (this only cares about the trait, not the specific\n /// method that is called).\n-pub fn check_legal_trait_for_method_call(tcx: TyCtxt<'_, '_, '_>, span: Span, trait_id: DefId) {\n+pub fn check_legal_trait_for_method_call(tcx: TyCtxt<'_, '_>, span: Span, trait_id: DefId) {\n     if tcx.lang_items().drop_trait() == Some(trait_id) {\n         struct_span_err!(tcx.sess, span, E0040, \"explicit use of destructor method\")\n             .span_label(span, \"explicit destructor calls not allowed\")"}, {"sha": "7c24ea1641493d1080aec87b587886ba0ae7b864", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -23,7 +23,7 @@ use super::{Inherited, FnCtxt, potentially_plural_count};\n /// - `trait_m`: the method in the trait\n /// - `impl_trait_ref`: the TraitRef corresponding to the trait implementation\n \n-pub fn compare_impl_method<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn compare_impl_method<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                      impl_m: &ty::AssocItem,\n                                      impl_m_span: Span,\n                                      trait_m: &ty::AssocItem,\n@@ -73,7 +73,7 @@ pub fn compare_impl_method<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn compare_predicate_entailment<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compare_predicate_entailment<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                           impl_m: &ty::AssocItem,\n                                           impl_m_span: Span,\n                                           trait_m: &ty::AssocItem,\n@@ -355,7 +355,7 @@ fn compare_predicate_entailment<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     })\n }\n \n-fn check_region_bounds_on_impl_method<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_region_bounds_on_impl_method<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                 span: Span,\n                                                 impl_m: &ty::AssocItem,\n                                                 trait_m: &ty::AssocItem,\n@@ -495,7 +495,7 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n     }\n }\n \n-fn compare_self_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compare_self_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                impl_m: &ty::AssocItem,\n                                impl_m_span: Span,\n                                trait_m: &ty::AssocItem,\n@@ -581,7 +581,7 @@ fn compare_self_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n fn compare_number_of_generics<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     impl_: &ty::AssocItem,\n     _impl_span: Span,\n     trait_: &ty::AssocItem,\n@@ -695,7 +695,7 @@ fn compare_number_of_generics<'tcx>(\n     }\n }\n \n-fn compare_number_of_method_arguments<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compare_number_of_method_arguments<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                 impl_m: &ty::AssocItem,\n                                                 impl_m_span: Span,\n                                                 trait_m: &ty::AssocItem,\n@@ -779,7 +779,7 @@ fn compare_number_of_method_arguments<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     Ok(())\n }\n \n-fn compare_synthetic_generics<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn compare_synthetic_generics<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                         impl_m: &ty::AssocItem,\n                                         trait_m: &ty::AssocItem)\n                                         -> Result<(), ErrorReported> {\n@@ -951,7 +951,7 @@ fn compare_synthetic_generics<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-pub fn compare_const_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn compare_const_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                     impl_c: &ty::AssocItem,\n                                     impl_c_span: Span,\n                                     trait_c: &ty::AssocItem,"}, {"sha": "1e6ae1e03091224f6888e27b6332a24516d82171", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -30,7 +30,7 @@ use syntax_pos::Span;\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n pub fn check_drop_impl<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     drop_impl_did: DefId,\n ) -> Result<(), ErrorReported> {\n     let dtor_self_type = tcx.type_of(drop_impl_did);\n@@ -65,7 +65,7 @@ pub fn check_drop_impl<'tcx>(\n }\n \n fn ensure_drop_params_and_item_params_correspond<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     drop_impl_did: DefId,\n     drop_impl_ty: Ty<'tcx>,\n     self_type_did: DefId,\n@@ -141,7 +141,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n /// Confirms that every predicate imposed by dtor_predicates is\n /// implied by assuming the predicates attached to self_type_did.\n fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     drop_impl_did: DefId,\n     dtor_predicates: &ty::GenericPredicates<'tcx>,\n     self_type_did: DefId,"}, {"sha": "2a553db5e5dded89aa523a43658c6710aa9df8d2", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -14,7 +14,7 @@ use rustc::hir;\n use std::iter;\n \n fn equate_intrinsic_type<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     it: &hir::ForeignItem,\n     n_tps: usize,\n     abi: Abi,\n@@ -79,7 +79,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n \n /// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n /// and in libcore/intrinsics.rs\n-pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                       it: &hir::ForeignItem) {\n     let param = |n| tcx.mk_ty_param(n, InternedString::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n@@ -400,7 +400,7 @@ pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n-pub fn check_platform_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_platform_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                it: &hir::ForeignItem) {\n     let param = |n| {\n         let name = InternedString::intern(&format!(\"P{}\", n));"}, {"sha": "8d55f3afdfd8a57de3d20801828604c0ac5a5d3b", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -395,7 +395,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     providers.method_autoderef_steps = method_autoderef_steps;\n }\n \n-fn method_autoderef_steps<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+fn method_autoderef_steps<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx>,\n                                           goal: CanonicalTyGoal<'tcx>)\n                                           -> MethodAutoderefStepsResult<'gcx>\n {"}, {"sha": "227b0c70354513aaa14dc3df9b2cb62f1946545e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -775,12 +775,12 @@ impl Ord for TraitInfo {\n }\n \n /// Retrieves all traits in this crate and any dependent crates.\n-pub fn all_traits<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Vec<TraitInfo> {\n+pub fn all_traits<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>) -> Vec<TraitInfo> {\n     tcx.all_traits(LOCAL_CRATE).iter().map(|&def_id| TraitInfo { def_id }).collect()\n }\n \n /// Computes all traits in this crate and any dependent crates.\n-fn compute_all_traits<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Vec<DefId> {\n+fn compute_all_traits<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>) -> Vec<DefId> {\n     use hir::itemlikevisit;\n \n     let mut traits = vec![];\n@@ -817,7 +817,7 @@ fn compute_all_traits<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>) -> Vec<DefId> {\n     // Cross-crate:\n \n     let mut external_mods = FxHashSet::default();\n-    fn handle_external_res(tcx: TyCtxt<'_, '_, '_>,\n+    fn handle_external_res(tcx: TyCtxt<'_, '_>,\n                            traits: &mut Vec<DefId>,\n                            external_mods: &mut FxHashSet<DefId>,\n                            res: Res) {\n@@ -859,12 +859,12 @@ struct UsePlacementFinder<'tcx, 'gcx> {\n     target_module: hir::HirId,\n     span: Option<Span>,\n     found_use: bool,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>\n+    tcx: TyCtxt<'gcx, 'tcx>\n }\n \n impl UsePlacementFinder<'tcx, 'gcx> {\n     fn check(\n-        tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+        tcx: TyCtxt<'gcx, 'tcx>,\n         krate: &'tcx hir::Crate,\n         target_module: hir::HirId,\n     ) -> (Option<Span>, bool) {"}, {"sha": "ba30f481596dfc5e843b8139cfa930a1dfb46a86", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -594,7 +594,7 @@ pub struct InheritedBuilder<'gcx, 'tcx> {\n }\n \n impl Inherited<'_, 'gcx, 'tcx> {\n-    pub fn build(tcx: TyCtxt<'gcx, 'gcx, 'gcx>, def_id: DefId)\n+    pub fn build(tcx: TyCtxt<'gcx, 'gcx>, def_id: DefId)\n                  -> InheritedBuilder<'gcx, 'tcx> {\n         let hir_id_root = if def_id.is_local() {\n             let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -685,7 +685,7 @@ impl Inherited<'a, 'gcx, 'tcx> {\n     }\n }\n \n-struct CheckItemTypesVisitor<'tcx> { tcx: TyCtxt<'tcx, 'tcx, 'tcx> }\n+struct CheckItemTypesVisitor<'tcx> { tcx: TyCtxt<'tcx, 'tcx> }\n \n impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_item(&mut self, i: &'tcx hir::Item) {\n@@ -695,33 +695,33 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }\n \n-pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n+pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n         tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n     })\n }\n \n-fn check_mod_item_types<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn check_mod_item_types<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-fn typeck_item_bodies<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum) {\n+fn typeck_item_bodies<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().typeck_tables_of(body_owner_def_id);\n     });\n }\n \n-fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     wfcheck::check_item_well_formed(tcx, def_id);\n }\n \n-fn check_trait_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn check_trait_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     wfcheck::check_trait_item(tcx, def_id);\n }\n \n-fn check_impl_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn check_impl_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     wfcheck::check_impl_item(tcx, def_id);\n }\n \n@@ -741,7 +741,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                             def_id: DefId)\n                             -> Option<ty::Destructor> {\n     tcx.calculate_dtor(def_id, &mut dropck::check_drop_impl)\n@@ -756,7 +756,7 @@ fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n /// may not succeed. In some cases where this function returns `None`\n /// (notably closures), `typeck_tables(def_id)` would wind up\n /// redirecting to the owning function.\n-fn primary_body_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn primary_body_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                              id: hir::HirId)\n                              -> Option<(hir::BodyId, Option<&'tcx hir::FnDecl>)>\n {\n@@ -797,7 +797,7 @@ fn primary_body_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                def_id: DefId)\n                                -> bool {\n     // Closures' tables come from their outermost function,\n@@ -811,13 +811,13 @@ fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     primary_body_of(tcx, id).is_some()\n }\n \n-fn used_trait_imports<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn used_trait_imports<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 def_id: DefId)\n                                 -> &'tcx DefIdSet {\n     &*tcx.typeck_tables_of(def_id).used_trait_imports\n }\n \n-fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                               def_id: DefId)\n                               -> &'tcx ty::TypeckTables<'tcx> {\n     // Closures' tables come from their outermost function,\n@@ -919,7 +919,7 @@ fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     tables\n }\n \n-fn check_abi<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: Span, abi: Abi) {\n+fn check_abi<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, span: Span, abi: Abi) {\n     if !tcx.sess.target.target.is_abi_supported(abi) {\n         struct_span_err!(tcx.sess, span, E0570,\n             \"The ABI `{}` is not supported for the current target\", abi).emit()\n@@ -1287,7 +1287,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     (fcx, gen_ty)\n }\n \n-fn check_struct<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_struct<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                           id: hir::HirId,\n                           span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n@@ -1303,7 +1303,7 @@ fn check_struct<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     check_packed(tcx, span, def_id);\n }\n \n-fn check_union<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_union<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                          id: hir::HirId,\n                          span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n@@ -1315,7 +1315,7 @@ fn check_union<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n fn check_opaque<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n     substs: SubstsRef<'tcx>,\n     span: Span,\n@@ -1335,7 +1335,7 @@ fn check_opaque<'tcx>(\n     }\n }\n \n-pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, it: &'tcx hir::Item) {\n+pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, it: &'tcx hir::Item) {\n     debug!(\n         \"check_item_type(it.hir_id={}, it.name={})\",\n         it.hir_id,\n@@ -1434,7 +1434,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, it: &'tcx hir::Item)\n     }\n }\n \n-fn maybe_check_static_with_link_section(tcx: TyCtxt<'_, '_, '_>, id: DefId, span: Span) {\n+fn maybe_check_static_with_link_section(tcx: TyCtxt<'_, '_>, id: DefId, span: Span) {\n     // Only restricted on wasm32 target for now\n     if !tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n         return\n@@ -1472,15 +1472,15 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_, '_, '_>, id: DefId, span\n     }\n }\n \n-fn check_on_unimplemented<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_on_unimplemented<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                     trait_def_id: DefId,\n                                     item: &hir::Item) {\n     let item_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n     // an error would be reported if this fails.\n     let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item_def_id);\n }\n \n-fn report_forbidden_specialization<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn report_forbidden_specialization<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                              impl_item: &hir::ImplItem,\n                                              parent_impl: DefId)\n {\n@@ -1506,7 +1506,7 @@ fn report_forbidden_specialization<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     err.emit();\n }\n \n-fn check_specialization_validity<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_specialization_validity<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                            trait_def: &ty::TraitDef,\n                                            trait_item: &ty::AssocItem,\n                                            impl_id: DefId,\n@@ -1532,7 +1532,7 @@ fn check_specialization_validity<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n }\n \n-fn check_impl_items_against_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_impl_items_against_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                             impl_span: Span,\n                                             impl_id: DefId,\n                                             impl_trait_ref: ty::TraitRef<'tcx>,\n@@ -1693,7 +1693,7 @@ fn check_impl_items_against_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n /// Checks whether a type can be represented in memory. In particular, it\n /// identifies types that contain themselves without indirection through a\n /// pointer, which would mean their size is unbounded.\n-fn check_representable<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_representable<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                  sp: Span,\n                                  item_def_id: DefId)\n                                  -> bool {\n@@ -1718,7 +1718,7 @@ fn check_representable<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     return true\n }\n \n-pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n+pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, sp: Span, def_id: DefId) {\n     let t = tcx.type_of(def_id);\n     if let ty::Adt(def, substs) = t.sty {\n         if def.is_struct() {\n@@ -1747,7 +1747,7 @@ pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId)\n     }\n }\n \n-fn check_packed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n+fn check_packed<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, sp: Span, def_id: DefId) {\n     let repr = tcx.adt_def(def_id).repr;\n     if repr.packed() {\n         for attr in tcx.get_attrs(def_id).iter() {\n@@ -1771,7 +1771,7 @@ fn check_packed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n     }\n }\n \n-fn check_packed_inner<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_packed_inner<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 def_id: DefId,\n                                 stack: &mut Vec<DefId>) -> bool {\n     let t = tcx.type_of(def_id);\n@@ -1801,7 +1801,7 @@ fn check_packed_inner<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     false\n }\n \n-fn check_transparent<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefId) {\n+fn check_transparent<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, sp: Span, def_id: DefId) {\n     let adt = tcx.adt_def(def_id);\n     if !adt.repr.transparent() {\n         return;\n@@ -1881,7 +1881,7 @@ fn check_transparent<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, sp: Span, def_id: DefI\n }\n \n #[allow(trivial_numeric_casts)]\n-pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                             sp: Span,\n                             vs: &'tcx [hir::Variant],\n                             id: hir::HirId) {\n@@ -1945,7 +1945,7 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     check_transparent(tcx, sp, def_id);\n }\n \n-fn report_unexpected_variant_res<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn report_unexpected_variant_res<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                                  res: Res,\n                                                  span: Span,\n                                                  qpath: &QPath) {\n@@ -1956,7 +1956,7 @@ fn report_unexpected_variant_res<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> { self.tcx }\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> { self.tcx }\n \n     fn get_type_parameter_bounds(&self, _: Span, def_id: DefId)\n                                  -> &'tcx ty::GenericPredicates<'tcx>\n@@ -5700,7 +5700,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                        generics: &ty::Generics,\n                                        ty: Ty<'tcx>) {\n     let own_counts = generics.own_counts();"}, {"sha": "2f3861b8d3478245e0d7c4a8df87055ef63a1210", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -651,6 +651,6 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn var_name(tcx: TyCtxt<'_, '_, '_>, var_hir_id: hir::HirId) -> ast::Name {\n+fn var_name(tcx: TyCtxt<'_, '_>, var_hir_id: hir::HirId) -> ast::Name {\n     tcx.hir().name_by_hir_id(var_hir_id)\n }"}, {"sha": "31d85be17b4c012aa82e723b67e48704e19c2958", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -35,7 +35,7 @@ struct CheckWfFcxBuilder<'gcx, 'tcx> {\n impl<'gcx, 'tcx> CheckWfFcxBuilder<'gcx, 'tcx> {\n     fn with_fcx<F>(&'tcx mut self, f: F) where\n         F: for<'b> FnOnce(&FnCtxt<'b, 'gcx, 'tcx>,\n-                         TyCtxt<'gcx, 'gcx, 'gcx>) -> Vec<Ty<'tcx>>\n+                         TyCtxt<'gcx, 'gcx>) -> Vec<Ty<'tcx>>\n     {\n         let id = self.id;\n         let span = self.span;\n@@ -68,7 +68,7 @@ impl<'gcx, 'tcx> CheckWfFcxBuilder<'gcx, 'tcx> {\n /// We do this check as a pre-pass before checking fn bodies because if these constraints are\n /// not included it frequently leads to confusing errors in fn bodies. So it's better to check\n /// the types first.\n-pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item_by_hir_id(hir_id);\n \n@@ -156,7 +156,7 @@ pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId\n     }\n }\n \n-pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n@@ -167,7 +167,7 @@ pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n }\n \n-pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n@@ -178,7 +178,7 @@ pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n }\n \n-fn check_associated_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_associated_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                    item_id: hir::HirId,\n                                    span: Span,\n                                    sig_if_method: Option<&hir::MethodSig>) {\n@@ -225,12 +225,12 @@ fn check_associated_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     })\n }\n \n-fn for_item<'gcx: 'tcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>, item: &hir::Item)\n+fn for_item<'gcx: 'tcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx>, item: &hir::Item)\n                             -> CheckWfFcxBuilder<'gcx, 'tcx> {\n     for_id(tcx, item.hir_id, item.span)\n }\n \n-fn for_id<'gcx: 'tcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>, id: hir::HirId, span: Span)\n+fn for_id<'gcx: 'tcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx>, id: hir::HirId, span: Span)\n                           -> CheckWfFcxBuilder<'gcx, 'tcx> {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     CheckWfFcxBuilder {\n@@ -242,7 +242,7 @@ fn for_id<'gcx: 'tcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>, id: hir::HirId, span:\n }\n \n /// In a type definition, we check that to ensure that the types of the fields are well-formed.\n-fn check_type_defn<'tcx, F>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_type_defn<'tcx, F>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 item: &hir::Item, all_sized: bool, mut lookup_fields: F)\n     where F: for<'fcx, 'gcx, 'tcx2> FnMut(&FnCtxt<'fcx, 'gcx, 'tcx2>) -> Vec<AdtVariant<'tcx2>>\n {\n@@ -312,7 +312,7 @@ fn check_type_defn<'tcx, F>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     });\n }\n \n-fn check_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n+fn check_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, item: &hir::Item) {\n     debug!(\"check_trait: {:?}\", item.hir_id);\n \n     let trait_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n@@ -335,7 +335,7 @@ fn check_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n     });\n }\n \n-fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n+fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, item: &hir::Item) {\n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n         let def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n@@ -348,7 +348,7 @@ fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item: &hir::Item) {\n }\n \n fn check_item_type<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     item_id: hir::HirId,\n     ty_span: Span,\n     allow_foreign_ty: bool,\n@@ -380,7 +380,7 @@ fn check_item_type<'tcx>(\n     });\n }\n \n-fn check_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                         item: &hir::Item,\n                         ast_self_ty: &hir::Ty,\n                         ast_trait_ref: &Option<hir::TraitRef>)\n@@ -422,7 +422,7 @@ fn check_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n \n /// Checks where-clauses and inline bounds that are declared on `def_id`.\n fn check_where_clauses<'gcx, 'fcx, 'tcx>(\n-    tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+    tcx: TyCtxt<'gcx, 'gcx>,\n     fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n     span: Span,\n     def_id: DefId,\n@@ -574,7 +574,7 @@ fn check_where_clauses<'gcx, 'fcx, 'tcx>(\n     }\n }\n \n-fn check_fn_or_method<'fcx, 'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+fn check_fn_or_method<'fcx, 'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx>,\n                                             fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n                                             span: Span,\n                                             sig: ty::PolyFnSig<'tcx>,\n@@ -617,7 +617,7 @@ fn check_fn_or_method<'fcx, 'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n /// ```\n ///\n fn check_existential_types<'fcx, 'gcx, 'tcx>(\n-    tcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+    tcx: TyCtxt<'gcx, 'gcx>,\n     fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n     fn_def_id: DefId,\n     span: Span,\n@@ -930,7 +930,7 @@ fn receiver_is_valid<'fcx, 'tcx, 'gcx>(\n     true\n }\n \n-fn check_variances_for_type_defn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn check_variances_for_type_defn<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                            item: &hir::Item,\n                                            hir_generics: &hir::Generics)\n {\n@@ -971,7 +971,7 @@ fn check_variances_for_type_defn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     }\n }\n \n-fn report_bivariance<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn report_bivariance<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                span: Span,\n                                param_name: ast::Name)\n {\n@@ -987,7 +987,7 @@ fn report_bivariance<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     err.emit();\n }\n \n-fn reject_shadowing_parameters(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) {\n+fn reject_shadowing_parameters(tcx: TyCtxt<'_, '_>, def_id: DefId) {\n     let generics = tcx.generics_of(def_id);\n     let parent = tcx.generics_of(generics.parent.unwrap());\n     let impl_params: FxHashMap<_, _> = parent.params.iter().flat_map(|param| match param.kind {\n@@ -1053,11 +1053,11 @@ fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n }\n \n pub struct CheckTypeWellFormedVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl CheckTypeWellFormedVisitor<'gcx> {\n-    pub fn new(tcx: TyCtxt<'gcx, 'gcx, 'gcx>) -> CheckTypeWellFormedVisitor<'gcx> {\n+    pub fn new(tcx: TyCtxt<'gcx, 'gcx>) -> CheckTypeWellFormedVisitor<'gcx> {\n         CheckTypeWellFormedVisitor {\n             tcx,\n         }\n@@ -1133,15 +1133,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn error_392<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: Span, param_name: ast::Name)\n+fn error_392<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, span: Span, param_name: ast::Name)\n                        -> DiagnosticBuilder<'tcx> {\n     let mut err = struct_span_err!(tcx.sess, span, E0392,\n                   \"parameter `{}` is never used\", param_name);\n     err.span_label(span, \"unused parameter\");\n     err\n }\n \n-fn error_194(tcx: TyCtxt<'_, '_, '_>, span: Span, trait_decl_span: Span, name: &str) {\n+fn error_194(tcx: TyCtxt<'_, '_>, span: Span, trait_decl_span: Span, name: &str) {\n     struct_span_err!(tcx.sess, span, E0194,\n                      \"type parameter `{}` shadows another type parameter of the same name\",\n                      name)"}, {"sha": "cc9097ea8c83b608c1d906e5e7e60734996835a7", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -123,7 +123,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'tcx> {\n         self.fcx.tcx\n     }\n \n@@ -762,24 +762,24 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n }\n \n trait Locatable {\n-    fn to_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span;\n+    fn to_span(&self, tcx: TyCtxt<'_, '_>) -> Span;\n }\n \n impl Locatable for Span {\n-    fn to_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+    fn to_span(&self, _: TyCtxt<'_, '_>) -> Span {\n         *self\n     }\n }\n \n impl Locatable for DefIndex {\n-    fn to_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn to_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         let hir_id = tcx.hir().def_index_to_hir_id(*self);\n         tcx.hir().span_by_hir_id(hir_id)\n     }\n }\n \n impl Locatable for hir::HirId {\n-    fn to_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n+    fn to_span(&self, tcx: TyCtxt<'_, '_>) -> Span {\n         tcx.hir().span_by_hir_id(*self)\n     }\n }\n@@ -789,7 +789,7 @@ impl Locatable for hir::HirId {\n // unresolved types and so forth.\n \n struct Resolver<'cx, 'gcx: 'cx + 'tcx, 'tcx: 'cx> {\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n     span: &'cx dyn Locatable,\n     body: &'gcx hir::Body,\n@@ -819,7 +819,7 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n }\n \n impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Resolver<'cx, 'gcx, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'gcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "5f4f88d954490c74d1a0443e0cbe6482a2d06519", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -13,7 +13,7 @@ use rustc::util::nodemap::DefIdSet;\n \n use rustc_data_structures::fx::FxHashMap;\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     let mut used_trait_imports = DefIdSet::default();\n     for &body_id in tcx.hir().krate().bodies.keys() {\n         let item_def_id = tcx.hir().body_owner_def_id(body_id);\n@@ -46,7 +46,7 @@ impl ItemLikeVisitor<'v> for CheckVisitor<'tcx> {\n }\n \n struct CheckVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     used_trait_imports: DefIdSet,\n }\n \n@@ -70,7 +70,7 @@ impl CheckVisitor<'tcx> {\n     }\n }\n \n-fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n \n     // Collect first the crates that are completely unused.  These we\n@@ -195,7 +195,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n }\n \n struct CollectExternCrateVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     crates_to_lint: &'a mut Vec<ExternCrateToLint>,\n }\n "}, {"sha": "653095e41f4256ff09cb0a30d221a0b1aebc8711", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use hir::Node;\n use rustc::hir::{self, ItemKind};\n \n-pub fn check_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, trait_def_id: DefId) {\n+pub fn check_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n         .check(tcx.lang_items().drop_trait(), visit_implementation_of_drop)\n         .check(tcx.lang_items().copy_trait(), visit_implementation_of_copy)\n@@ -27,13 +27,13 @@ pub fn check_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, trait_def_id: DefId) {\n }\n \n struct Checker<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     trait_def_id: DefId\n }\n \n impl<'tcx> Checker<'tcx> {\n     fn check<F>(&self, trait_def_id: Option<DefId>, mut f: F) -> &Self\n-        where F: FnMut(TyCtxt<'tcx, 'tcx, 'tcx>, DefId)\n+        where F: FnMut(TyCtxt<'tcx, 'tcx>, DefId)\n     {\n         if Some(self.trait_def_id) == trait_def_id {\n             for &impl_id in self.tcx.hir().trait_impls(self.trait_def_id) {\n@@ -45,7 +45,7 @@ impl<'tcx> Checker<'tcx> {\n     }\n }\n \n-fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, impl_did: DefId) {\n     if let ty::Adt(..) = tcx.type_of(impl_did).sty {\n         /* do nothing */\n     } else {\n@@ -73,7 +73,7 @@ fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_did: D\n     }\n }\n \n-fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n     let impl_hir_id = if let Some(n) = tcx.hir().as_local_hir_id(impl_did) {\n@@ -140,7 +140,7 @@ fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_did: D\n     }\n }\n \n-fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx, 'tcx>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\",\n            impl_did);\n \n@@ -154,7 +154,7 @@ fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_di\n }\n \n fn visit_implementation_of_dispatch_from_dyn<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     impl_did: DefId,\n ) {\n     debug!(\"visit_implementation_of_dispatch_from_dyn: impl_did={:?}\",\n@@ -324,7 +324,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(\n     }\n }\n \n-pub fn coerce_unsized_info<'gcx>(gcx: TyCtxt<'gcx, 'gcx, 'gcx>,\n+pub fn coerce_unsized_info<'gcx>(gcx: TyCtxt<'gcx, 'gcx>,\n                                      impl_did: DefId)\n                                      -> CoerceUnsizedInfo {\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);"}, {"sha": "8214fc50fed870bf5107cbe7834ee4f21b313e3c", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -17,7 +17,7 @@ use syntax::ast;\n use syntax_pos::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n-pub fn crate_inherent_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn crate_inherent_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                       crate_num: CrateNum)\n                                       -> &'tcx CrateInherentImpls {\n     assert_eq!(crate_num, LOCAL_CRATE);\n@@ -32,7 +32,7 @@ pub fn crate_inherent_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n /// On-demand query: yields a vector of the inherent impls for a specific type.\n-pub fn inherent_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn inherent_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 ty_def_id: DefId)\n                                 -> &'tcx [DefId] {\n     assert!(ty_def_id.is_local());\n@@ -69,7 +69,7 @@ pub fn inherent_impls<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n }\n \n struct InherentCollect<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     impls_map: CrateInherentImpls,\n }\n "}, {"sha": "feddd9f0b3cb05b76d2ec2b29bd7e1364bec418a", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -5,15 +5,15 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n \n-pub fn crate_inherent_impls_overlap_check<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn crate_inherent_impls_overlap_check<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                     crate_num: CrateNum) {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let krate = tcx.hir().krate();\n     krate.visit_all_item_likes(&mut InherentOverlapChecker { tcx });\n }\n \n struct InherentOverlapChecker<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>\n+    tcx: TyCtxt<'tcx, 'tcx>\n }\n \n impl InherentOverlapChecker<'tcx> {"}, {"sha": "421fdccc1fa253ae6e1aa961d95082fda7a267ab", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -18,7 +18,7 @@ mod inherent_impls_overlap;\n mod orphan;\n mod unsafety;\n \n-fn check_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_id: HirId) {\n+fn check_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n \n     // If there are no traits, then this implementation must have a\n@@ -41,7 +41,7 @@ fn check_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_id: HirId) {\n }\n \n fn enforce_trait_manually_implementable(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     impl_def_id: DefId,\n     trait_def_id: DefId\n ) {\n@@ -97,7 +97,7 @@ fn enforce_trait_manually_implementable(\n /// We allow impls of marker traits to overlap, so they can't override impls\n /// as that could make it ambiguous which associated item to use.\n fn enforce_empty_impls_for_marker_traits(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     impl_def_id: DefId,\n     trait_def_id: DefId\n ) {\n@@ -132,7 +132,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n+fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) {\n     let impls = tcx.hir().trait_impls(def_id);\n     for &impl_id in impls {\n         check_impl(tcx, impl_id);\n@@ -143,7 +143,7 @@ fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) {\n     builtin::check_trait(tcx, def_id);\n }\n \n-pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     for &trait_def_id in tcx.hir().krate().trait_impls.keys() {\n         tcx.ensure().coherent_trait(trait_def_id);\n     }\n@@ -159,7 +159,7 @@ pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n /// Overlap: no two impls for the same trait are implemented for the\n /// same type. Likewise, no two inherent impls for a given type\n /// constructor provide a method with the same name.\n-fn check_impl_overlap<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_id: HirId) {\n+fn check_impl_overlap<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n     let trait_def_id = trait_ref.def_id;"}, {"sha": "4e81102fd3b8472bcca8df4a6a4bd424a83f2658", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -6,13 +6,13 @@ use rustc::ty::{self, TyCtxt};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n-pub fn check<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     let mut orphan = OrphanChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut orphan);\n }\n \n struct OrphanChecker<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {"}, {"sha": "c3a97bc538941d29dd1149989be67e4404c58135", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -5,13 +5,13 @@ use rustc::ty::TyCtxt;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Unsafety};\n \n-pub fn check<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn check<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     let mut unsafety = UnsafetyChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut unsafety);\n }\n \n struct UnsafetyChecker<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl UnsafetyChecker<'tcx> {"}, {"sha": "02edf63dd5c7ee944f916d0f5b1047cfa94f1b3b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -56,7 +56,7 @@ struct OnlySelfBounds(bool);\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n-fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CollectItemTypesVisitor { tcx }.as_deep_visitor()\n@@ -97,14 +97,14 @@ pub fn provide(providers: &mut Providers<'_>) {\n /// `get_type_parameter_bounds` requests, drawing the information from\n /// the AST (`hir::Generics`), recursively.\n pub struct ItemCtxt<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     item_def_id: DefId,\n }\n \n ///////////////////////////////////////////////////////////////////////////\n \n struct CollectItemTypesVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n@@ -161,7 +161,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n // Utility types and common code for the above passes.\n \n impl ItemCtxt<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item_def_id: DefId) -> ItemCtxt<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx, 'tcx>, item_def_id: DefId) -> ItemCtxt<'tcx> {\n         ItemCtxt { tcx, item_def_id }\n     }\n \n@@ -171,7 +171,7 @@ impl ItemCtxt<'tcx> {\n }\n \n impl AstConv<'tcx, 'tcx> for ItemCtxt<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n \n@@ -254,7 +254,7 @@ impl AstConv<'tcx, 'tcx> for ItemCtxt<'tcx> {\n }\n \n fn type_param_predicates<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     (item_def_id, def_id): (DefId, DefId),\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n     use rustc::hir::*;\n@@ -382,7 +382,7 @@ impl ItemCtxt<'tcx> {\n /// `ast_ty_to_ty`, because we want to avoid triggering an all-out\n /// conversion of the type to avoid inducing unnecessary cycles.\n fn is_param<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     ast_ty: &hir::Ty,\n     param_id: hir::HirId,\n ) -> bool {\n@@ -398,7 +398,7 @@ fn is_param<'tcx>(\n     }\n }\n \n-fn convert_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item_id: hir::HirId) {\n+fn convert_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, item_id: hir::HirId) {\n     let it = tcx.hir().expect_item_by_hir_id(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n@@ -480,7 +480,7 @@ fn convert_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item_id: hir::HirId) {\n     }\n }\n \n-fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, trait_item_id: hir::HirId) {\n+fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, trait_item_id: hir::HirId) {\n     let trait_item = tcx.hir().expect_trait_item(trait_item_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n     tcx.generics_of(def_id);\n@@ -501,7 +501,7 @@ fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, trait_item_id: hir::H\n     tcx.predicates_of(def_id);\n }\n \n-fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_item_id: hir::HirId) {\n+fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, impl_item_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(impl_item_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n@@ -511,15 +511,15 @@ fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, impl_item_id: hir::Hir\n     }\n }\n \n-fn convert_variant_ctor<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, ctor_id: hir::HirId) {\n+fn convert_variant_ctor<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, ctor_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(ctor_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n     tcx.predicates_of(def_id);\n }\n \n fn convert_enum_variant_types<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n     variants: &[hir::Variant],\n ) {\n@@ -571,7 +571,7 @@ fn convert_enum_variant_types<'tcx>(\n }\n \n fn convert_variant<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     variant_did: Option<DefId>,\n     ctor_did: Option<DefId>,\n     ident: Ident,\n@@ -627,7 +627,7 @@ fn convert_variant<'tcx>(\n     )\n }\n \n-fn adt_def<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n+fn adt_def<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -695,7 +695,7 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::AdtD\n /// of `trait_def_id` are converted and stored. This also ensures that\n /// the transitive super-predicates are converted.\n fn super_predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     trait_def_id: DefId,\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n     debug!(\"super_predicates(trait_def_id={:?})\", trait_def_id);\n@@ -748,7 +748,7 @@ fn super_predicates_of<'tcx>(\n     })\n }\n \n-fn trait_def<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n+fn trait_def<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item_by_hir_id(hir_id);\n \n@@ -780,11 +780,11 @@ fn trait_def<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Tr\n }\n \n fn has_late_bound_regions<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     node: Node<'tcx>,\n ) -> Option<Span> {\n     struct LateBoundRegionsDetector<'tcx> {\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         outer_index: ty::DebruijnIndex,\n         has_late_bound_regions: Option<Span>,\n     }\n@@ -841,7 +841,7 @@ fn has_late_bound_regions<'tcx>(\n     }\n \n     fn has_late_bound_regions<'tcx>(\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         generics: &'tcx hir::Generics,\n         decl: &'tcx hir::FnDecl,\n     ) -> Option<Span> {\n@@ -890,7 +890,7 @@ fn has_late_bound_regions<'tcx>(\n     }\n }\n \n-fn generics_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n+fn generics_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -1133,7 +1133,7 @@ fn generics_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::\n     })\n }\n \n-fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: Span) {\n+fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, span: Span) {\n     span_err!(\n         tcx.sess,\n         span,\n@@ -1142,7 +1142,7 @@ fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, span: S\n     );\n }\n \n-fn type_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+fn type_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     checked_type_of(tcx, def_id, true).unwrap()\n }\n \n@@ -1151,7 +1151,7 @@ fn type_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n /// If you want to fail anyway, you can set the `fail` parameter to true, but in this case,\n /// you'd better just call [`type_of`] directly.\n pub fn checked_type_of<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n     fail: bool,\n ) -> Option<Ty<'tcx>> {\n@@ -1480,15 +1480,15 @@ pub fn checked_type_of<'tcx>(\n }\n \n fn find_existential_constraints<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Ty<'tcx> {\n     use rustc::hir::{ImplItem, Item, TraitItem};\n \n     debug!(\"find_existential_constraints({:?})\", def_id);\n \n     struct ConstraintLocator<'tcx> {\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         def_id: DefId,\n         // (first found type span, actual type, mapping from the existential type's generic\n         // parameters to the concrete type's generic parameters)\n@@ -1700,7 +1700,7 @@ fn find_existential_constraints<'tcx>(\n     }\n }\n \n-fn fn_sig<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n+fn fn_sig<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n     use rustc::hir::*;\n     use rustc::hir::Node::*;\n \n@@ -1777,7 +1777,7 @@ fn fn_sig<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> ty::PolyFnSig<'\n }\n \n fn impl_trait_ref<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Option<ty::TraitRef<'tcx>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n@@ -1794,7 +1794,7 @@ fn impl_trait_ref<'tcx>(\n     }\n }\n \n-fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> hir::ImplPolarity {\n+fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> hir::ImplPolarity {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     match tcx.hir().expect_item_by_hir_id(hir_id).node {\n         hir::ItemKind::Impl(_, polarity, ..) => polarity,\n@@ -1808,7 +1808,7 @@ fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> hir::Imp\n /// screen out those that do not appear in any where-clauses etc using\n /// `resolve_lifetime::early_bound_lifetimes`.\n fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     generics: &'a hir::Generics,\n ) -> impl Iterator<Item = &'a hir::GenericParam> + Captures<'tcx> {\n     generics\n@@ -1826,7 +1826,7 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n /// lifetime constraints. This includes all predicates returned by `explicit_predicates_of`, plus\n /// inferred constraints concerning which regions outlive other regions.\n fn predicates_defined_on<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n     debug!(\"predicates_defined_on({:?})\", def_id);\n@@ -1856,7 +1856,7 @@ fn predicates_defined_on<'tcx>(\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n fn predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n     let mut result = tcx.predicates_defined_on(def_id);\n@@ -1886,7 +1886,7 @@ fn predicates_of<'tcx>(\n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n fn explicit_predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> &'tcx ty::GenericPredicates<'tcx> {\n     use rustc::hir::*;\n@@ -2249,7 +2249,7 @@ fn predicates_from_bound<'tcx>(\n }\n \n fn compute_sig_of_foreign_fn_decl<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n     decl: &hir::FnDecl,\n     abi: abi::Abi,\n@@ -2293,7 +2293,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     fty\n }\n \n-fn is_foreign_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn is_foreign_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId) -> bool {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::ForeignItem(..)) => true,\n         Some(_) => false,\n@@ -2302,7 +2302,7 @@ fn is_foreign_item<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId) -> bool {\n }\n \n fn static_mutability<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: DefId,\n ) -> Option<hir::Mutability> {\n     match tcx.hir().get_if_local(def_id) {\n@@ -2318,7 +2318,7 @@ fn static_mutability<'tcx>(\n }\n \n fn from_target_feature(\n-    tcx: TyCtxt<'_, '_, '_>,\n+    tcx: TyCtxt<'_, '_>,\n     id: DefId,\n     attr: &ast::Attribute,\n     whitelist: &FxHashMap<String, Option<Symbol>>,\n@@ -2412,7 +2412,7 @@ fn from_target_feature(\n     }\n }\n \n-fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId, name: &str) -> Linkage {\n+fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, def_id: DefId, name: &str) -> Linkage {\n     use rustc::mir::mono::Linkage::*;\n \n     // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n@@ -2447,7 +2447,7 @@ fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, def_id: DefId, name: &st\n     }\n }\n \n-fn codegen_fn_attrs<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, id: DefId) -> CodegenFnAttrs {\n+fn codegen_fn_attrs<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, id: DefId) -> CodegenFnAttrs {\n     let attrs = tcx.get_attrs(id);\n \n     let mut codegen_fn_attrs = CodegenFnAttrs::new();"}, {"sha": "c26de71a20ba3a6709de51bbe36958e628457594", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     }\n }\n \n-pub fn identify_constrained_generic_params<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn identify_constrained_generic_params<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                               predicates: &ty::GenericPredicates<'tcx>,\n                                               impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                               input_parameters: &mut FxHashSet<Parameter>)\n@@ -136,7 +136,7 @@ pub fn identify_constrained_generic_params<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n /// which is determined by 1, which requires `U`, that is determined\n /// by 0. I should probably pick a less tangled example, but I can't\n /// think of any.\n-pub fn setup_constraining_predicates<'tcx>(tcx: TyCtxt<'_, '_, '_>,\n+pub fn setup_constraining_predicates<'tcx>(tcx: TyCtxt<'_, '_>,\n                                            predicates: &mut [(ty::Predicate<'tcx>, Span)],\n                                            impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                            input_parameters: &mut FxHashSet<Parameter>)"}, {"sha": "6a7bdf48ae9d4ea8a9193f239be8868fcd19a863", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -49,7 +49,7 @@ use syntax_pos::Span;\n /// impl<'a> Trait<Foo> for Bar { type X = &'a i32; }\n /// //   ^ 'a is unused and appears in assoc type, error\n /// ```\n-pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n@@ -58,7 +58,7 @@ pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n     }\n }\n \n-fn check_mod_impl_wf<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, module_def_id: DefId) {\n+fn check_mod_impl_wf<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut ImplWfCheck { tcx }\n@@ -73,7 +73,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n struct ImplWfCheck<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n@@ -92,7 +92,7 @@ impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }\n }\n \n-fn enforce_impl_params_are_constrained<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn enforce_impl_params_are_constrained<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                  impl_def_id: DefId,\n                                                  impl_item_refs: &[hir::ImplItemRef])\n {\n@@ -171,7 +171,7 @@ fn enforce_impl_params_are_constrained<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     // used elsewhere are not projected back out.\n }\n \n-fn report_unused_parameter(tcx: TyCtxt<'_, '_, '_>,\n+fn report_unused_parameter(tcx: TyCtxt<'_, '_>,\n                            span: Span,\n                            kind: &str,\n                            name: &str)\n@@ -186,7 +186,7 @@ fn report_unused_parameter(tcx: TyCtxt<'_, '_, '_>,\n }\n \n /// Enforce that we do not have two items in an impl with the same name.\n-fn enforce_impl_items_are_distinct<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn enforce_impl_items_are_distinct<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                              impl_item_refs: &[hir::ImplItemRef])\n {\n     let mut seen_type_items = FxHashMap::default();"}, {"sha": "cb8e699351aa685433229b98b41a6f3d6e3207a1", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -124,7 +124,7 @@ pub struct TypeAndSubsts<'tcx> {\n     ty: Ty<'tcx>,\n }\n \n-fn check_type_alias_enum_variants_enabled<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+fn check_type_alias_enum_variants_enabled<'gcx, 'tcx>(tcx: TyCtxt<'gcx, 'tcx>,\n                                                           span: Span) {\n     if !tcx.features().type_alias_enum_variants {\n         let mut err = tcx.sess.struct_span_err(\n@@ -140,7 +140,7 @@ fn check_type_alias_enum_variants_enabled<'gcx, 'tcx>(tcx: TyCtxt<'tcx, 'gcx, 't\n     }\n }\n \n-fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_, '_, '_>,\n+fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_, '_>,\n                                decl: &hir::FnDecl,\n                                abi: Abi,\n                                span: Span) {\n@@ -151,7 +151,7 @@ fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_, '_, '_>,\n     }\n }\n \n-fn require_same_types<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+fn require_same_types<'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                 cause: &ObligationCause<'tcx>,\n                                 expected: Ty<'tcx>,\n                                 actual: Ty<'tcx>)\n@@ -179,7 +179,7 @@ fn require_same_types<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n     })\n }\n \n-fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, main_def_id: DefId) {\n+fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, main_def_id: DefId) {\n     let main_id = tcx.hir().as_local_hir_id(main_def_id).unwrap();\n     let main_span = tcx.def_span(main_def_id);\n     let main_t = tcx.type_of(main_def_id);\n@@ -244,7 +244,7 @@ fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, main_def_id: DefId) {\n     }\n }\n \n-fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, start_def_id: DefId) {\n+fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, start_def_id: DefId) {\n     let start_id = tcx.hir().as_local_hir_id(start_def_id).unwrap();\n     let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);\n@@ -301,7 +301,7 @@ fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, start_def_id: DefId) {\n     }\n }\n \n-fn check_for_entry_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+fn check_for_entry_fn<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n@@ -318,7 +318,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     impl_wf_check::provide(providers);\n }\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n+pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx>)\n                              -> Result<(), ErrorReported>\n {\n     tcx.sess.profiler(|p| p.start_activity(\"type-check crate\"));\n@@ -381,7 +381,7 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>)\n \n /// A quasi-deprecated helper used in rustdoc and clippy to get\n /// the type from a HIR node.\n-pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_ty: &hir::Ty) -> Ty<'tcx> {\n+pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, hir_ty: &hir::Ty) -> Ty<'tcx> {\n     // In case there are any projections, etc., find the \"environment\"\n     // def-ID that will be used to determine the traits/predicates in\n     // scope.  This is derived from the enclosing item-like thing.\n@@ -392,7 +392,7 @@ pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_ty: &hir::Ty) -> Ty\n     astconv::AstConv::ast_ty_to_ty(&item_cx, hir_ty)\n }\n \n-pub fn hir_trait_to_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, hir_trait: &hir::TraitRef)\n+pub fn hir_trait_to_predicates<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, hir_trait: &hir::TraitRef)\n         -> (ty::PolyTraitRef<'tcx>, Bounds<'tcx>) {\n     // In case there are any projections, etc., find the \"environment\"\n     // def-ID that will be used to determine the traits/predicates in"}, {"sha": "9d621407caf5f6167538958d97c9f049d949b553", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -18,7 +18,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n \n     pub fn explicit_predicates_of(\n         &mut self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         def_id: DefId,\n     ) -> &RequiredPredicates<'tcx> {\n         self.map.entry(def_id).or_insert_with(|| {"}, {"sha": "73a1be0027ae47e4b796a4d40843cba097a1fbff", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -15,7 +15,7 @@ use super::utils::*;\n ///     was generated by walking the items in the crate. This will\n ///     now be filled with inferred predicates.\n pub fn infer_predicates<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n ) -> FxHashMap<DefId, RequiredPredicates<'tcx>> {\n     debug!(\"infer_predicates\");\n@@ -44,7 +44,7 @@ pub fn infer_predicates<'tcx>(\n }\n \n pub struct InferVisitor<'cx, 'tcx: 'cx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     global_inferred_outlives: &'cx mut FxHashMap<DefId, RequiredPredicates<'tcx>>,\n     predicates_added: &'cx mut bool,\n     explicit_map: &'cx mut ExplicitPredicatesMap<'tcx>,\n@@ -117,7 +117,7 @@ impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n }\n \n fn insert_required_predicates_to_be_wf<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     field_ty: Ty<'tcx>,\n     global_inferred_outlives: &FxHashMap<DefId, RequiredPredicates<'tcx>>,\n     required_predicates: &mut RequiredPredicates<'tcx>,\n@@ -255,7 +255,7 @@ pub struct IgnoreSelfTy(bool);\n /// can ignore, but we will want to process `U: 'static`,\n /// applying the substitution as above.\n pub fn check_explicit_predicates<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     def_id: &DefId,\n     substs: &[Kind<'tcx>],\n     required_predicates: &mut RequiredPredicates<'tcx>,"}, {"sha": "03e1a6e4d44bcf0d47a4ea3dc147843e6f79fea8", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -21,7 +21,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n fn inferred_outlives_of<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     item_def_id: DefId,\n ) -> &'tcx [ty::Predicate<'tcx>] {\n     let id = tcx\n@@ -71,7 +71,7 @@ fn inferred_outlives_of<'tcx>(\n }\n \n fn inferred_outlives_crate<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     crate_num: CrateNum,\n ) -> &'tcx CratePredicatesMap<'tcx> {\n     assert_eq!(crate_num, LOCAL_CRATE);"}, {"sha": "7055bbd3c51d249e3a0658db2d1d22ed64826b84", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -3,14 +3,14 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_inferred_outlives<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn test_inferred_outlives<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     tcx.hir()\n        .krate()\n        .visit_all_item_likes(&mut OutlivesTest { tcx });\n }\n \n struct OutlivesTest<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n }\n \n impl ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {"}, {"sha": "2aa2efbb6236b8ba9a16105451ab1ce8e4396957", "filename": "src/librustc_typeck/outlives/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Futils.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -11,7 +11,7 @@ pub type RequiredPredicates<'tcx> = BTreeSet<ty::OutlivesPredicate<Kind<'tcx>, t\n /// Given a requirement `T: 'a` or `'b: 'a`, deduce the\n /// outlives_component and add it to `required_predicates`\n pub fn insert_outlives_predicate<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     kind: Kind<'tcx>,\n     outlived_region: Region<'tcx>,\n     required_predicates: &mut RequiredPredicates<'tcx>,\n@@ -125,7 +125,7 @@ pub fn insert_outlives_predicate<'tcx>(\n     }\n }\n \n-fn is_free_region<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, region: Region<'_>) -> bool {\n+fn is_free_region<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, region: Region<'_>) -> bool {\n     // First, screen for regions that might appear in a type header.\n     match region {\n         // These correspond to `T: 'a` relationships:"}, {"sha": "5433afa2a7b8952e52719e0dd3a1082a3b5b0379", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         self.build_constraints_for_item(def_id);\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.terms_cx.tcx\n     }\n "}, {"sha": "c8079210022f6ae15e496000c9e0c6740cddee4c", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -34,7 +34,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn crate_variances<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum)\n+fn crate_variances<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, crate_num: CrateNum)\n                              -> &'tcx CrateVariancesMap<'tcx> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let mut arena = arena::TypedArena::default();\n@@ -43,7 +43,7 @@ fn crate_variances<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, crate_num: CrateNum)\n     tcx.arena.alloc(solve::solve_constraints(constraints_cx))\n }\n \n-fn variances_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>, item_def_id: DefId)\n+fn variances_of<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, item_def_id: DefId)\n                           -> &'tcx [ty::Variance] {\n     let id = tcx.hir().as_local_hir_id(item_def_id).expect(\"expected local def-id\");\n     let unsupported = || {"}, {"sha": "e566500571335ee9f457dc1ccd3b85f12716b053", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -48,7 +48,7 @@ impl<'a> fmt::Debug for VarianceTerm<'a> {\n // The first pass over the crate simply builds up the set of inferreds.\n \n pub struct TermsContext<'a, 'tcx: 'a> {\n-    pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n     pub arena: &'a TypedArena<VarianceTerm<'a>>,\n \n     // For marker types, UnsafeCell, and other lang items where\n@@ -64,7 +64,7 @@ pub struct TermsContext<'a, 'tcx: 'a> {\n     pub inferred_terms: Vec<VarianceTermPtr<'a>>,\n }\n \n-pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx>,\n                                                      arena: &'a mut TypedArena<VarianceTerm<'a>>)\n                                                      -> TermsContext<'a, 'tcx> {\n     let mut terms_cx = TermsContext {\n@@ -85,7 +85,7 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tc\n     terms_cx\n }\n \n-fn lang_items(tcx: TyCtxt<'_, '_, '_>) -> Vec<(hir::HirId, Vec<ty::Variance>)> {\n+fn lang_items(tcx: TyCtxt<'_, '_>) -> Vec<(hir::HirId, Vec<ty::Variance>)> {\n     let lang_items = tcx.lang_items();\n     let all = vec![\n         (lang_items.phantom_data(), vec![ty::Covariant]),"}, {"sha": "3f55b3360154ca8d22a5176c114e44a0191c6a15", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -3,12 +3,12 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_variance<'tcx>(tcx: TyCtxt<'tcx, 'tcx, 'tcx>) {\n+pub fn test_variance<'tcx>(tcx: TyCtxt<'tcx, 'tcx>) {\n     tcx.hir().krate().visit_all_item_likes(&mut VarianceTest { tcx });\n }\n \n struct VarianceTest<'tcx> {\n-    tcx: TyCtxt<'tcx, 'tcx, 'tcx>\n+    tcx: TyCtxt<'tcx, 'tcx>\n }\n \n impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {"}, {"sha": "b0f274ac6b7915d78a46171c005753de7ee5aec9", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n     fn extract_for_generics<'c, 'd>(\n         &self,\n-        tcx: TyCtxt<'d, 'c, 'd>,\n+        tcx: TyCtxt<'c, 'd>,\n         pred: ty::Predicate<'d>,\n     ) -> FxHashSet<GenericParamDef> {\n         pred.walk_tys()\n@@ -450,7 +450,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     // * We explcitly add a '?Sized' bound if we didn't find any 'Sized' predicates for a type\n     fn param_env_to_generics<'c, 'cx>(\n         &self,\n-        tcx: TyCtxt<'cx, 'c, 'cx>,\n+        tcx: TyCtxt<'c, 'cx>,\n         param_env_def_id: DefId,\n         param_env: ty::ParamEnv<'cx>,\n         mut existing_predicates: Vec<WherePredicate>,\n@@ -776,7 +776,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         vec.sort_by_cached_key(|x| format!(\"{:?}\", x))\n     }\n \n-    fn is_fn_ty(&self, tcx: TyCtxt<'_, '_, '_>, ty: &Type) -> bool {\n+    fn is_fn_ty(&self, tcx: TyCtxt<'_, '_>, ty: &Type) -> bool {\n         match &ty {\n             &&Type::ResolvedPath { ref did, .. } => {\n                 *did == tcx.require_lang_item(lang_items::FnTraitLangItem)\n@@ -791,11 +791,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n // Replaces all ReVars in a type with ty::Region's, using the provided map\n struct RegionReplacer<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     vid_to_region: &'a FxHashMap<ty::RegionVid, ty::Region<'tcx>>,\n-    tcx: TyCtxt<'tcx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'gcx, 'tcx>,\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "559dcaf5a8d3bded37c8be4d2a55f5d6b2d79d90", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -4432,7 +4432,7 @@ where\n \n // Start of code copied from rust-clippy\n \n-pub fn path_to_def_local(tcx: TyCtxt<'_, '_, '_>, path: &[Symbol]) -> Option<DefId> {\n+pub fn path_to_def_local(tcx: TyCtxt<'_, '_>, path: &[Symbol]) -> Option<DefId> {\n     let krate = tcx.hir().krate();\n     let mut items = krate.module.item_ids.clone();\n     let mut path_it = path.iter().peekable();\n@@ -4457,7 +4457,7 @@ pub fn path_to_def_local(tcx: TyCtxt<'_, '_, '_>, path: &[Symbol]) -> Option<Def\n     }\n }\n \n-pub fn path_to_def(tcx: TyCtxt<'_, '_, '_>, path: &[Symbol]) -> Option<DefId> {\n+pub fn path_to_def(tcx: TyCtxt<'_, '_>, path: &[Symbol]) -> Option<DefId> {\n     let crates = tcx.crates();\n \n     let krate = crates"}, {"sha": "b48ed12cc6baa4bd593aacf1d417b3467b62bb05", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -44,7 +44,7 @@ pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n pub struct DocContext<'tcx> {\n \n-    pub tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx, 'tcx>,\n     pub resolver: Rc<Option<RefCell<interface::BoxedResolver>>>,\n     /// The stack of module NodeIds up till this point\n     pub crate_name: Option<String>,"}, {"sha": "7fc3e5a0979205ee1a2b6a923d6bb18f04a173fb", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -60,7 +60,7 @@ impl CodegenBackend for TheBackend {\n \n     fn codegen_crate<'a, 'tcx>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx, 'tcx>,\n         _metadata: EncodedMetadata,\n         _need_metadata_module: bool,\n         _rx: mpsc::Receiver<Box<Any + Send>>"}, {"sha": "00190ed12b4d60e500ac5804a0d4637c4fbdda1a", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -11,26 +11,26 @@ use rustc::ty::{Ty, TyCtxt};\n fn ty_by_ref(\n     ty_val: Ty<'_>,\n     ty_ref: &Ty<'_>, //~ ERROR passing `Ty<'_>` by reference\n-    ty_ctxt_val: TyCtxt<'_, '_, '_>,\n-    ty_ctxt_ref: &TyCtxt<'_, '_, '_>, //~ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+    ty_ctxt_val: TyCtxt<'_, '_>,\n+    ty_ctxt_ref: &TyCtxt<'_, '_>, //~ ERROR passing `TyCtxt<'_, '_>` by reference\n ) {\n }\n \n-fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>) {}\n //~^ ERROR passing `Ty<'_>` by reference\n-//~^^ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+//~^^ ERROR passing `TyCtxt<'_, '_>` by reference\n \n trait T {\n     fn ty_by_ref_in_trait(\n         ty_val: Ty<'_>,\n         ty_ref: &Ty<'_>, //~ ERROR passing `Ty<'_>` by reference\n-        ty_ctxt_val: TyCtxt<'_, '_, '_>,\n-        ty_ctxt_ref: &TyCtxt<'_, '_, '_>, //~ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+        ty_ctxt_val: TyCtxt<'_, '_>,\n+        ty_ctxt_ref: &TyCtxt<'_, '_>, //~ ERROR passing `TyCtxt<'_, '_>` by reference\n     );\n \n-    fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>);\n+    fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>);\n     //~^ ERROR passing `Ty<'_>` by reference\n-    //~^^ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+    //~^^ ERROR passing `TyCtxt<'_, '_>` by reference\n }\n \n struct Foo;\n@@ -39,26 +39,26 @@ impl T for Foo {\n     fn ty_by_ref_in_trait(\n         ty_val: Ty<'_>,\n         ty_ref: &Ty<'_>,\n-        ty_ctxt_val: TyCtxt<'_, '_, '_>,\n-        ty_ctxt_ref: &TyCtxt<'_, '_, '_>,\n+        ty_ctxt_val: TyCtxt<'_, '_>,\n+        ty_ctxt_ref: &TyCtxt<'_, '_>,\n     ) {\n     }\n \n-    fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+    fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>) {}\n }\n \n impl Foo {\n     fn ty_by_ref_assoc(\n         ty_val: Ty<'_>,\n         ty_ref: &Ty<'_>, //~ ERROR passing `Ty<'_>` by reference\n-        ty_ctxt_val: TyCtxt<'_, '_, '_>,\n-        ty_ctxt_ref: &TyCtxt<'_, '_, '_>, //~ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+        ty_ctxt_val: TyCtxt<'_, '_>,\n+        ty_ctxt_ref: &TyCtxt<'_, '_>, //~ ERROR passing `TyCtxt<'_, '_>` by reference\n     ) {\n     }\n \n-    fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+    fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>) {}\n     //~^ ERROR passing `Ty<'_>` by reference\n-    //~^^ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+    //~^^ ERROR passing `TyCtxt<'_, '_>` by reference\n }\n \n fn main() {}"}, {"sha": "94440f0385a9229085a9ffa4db0581b38978fff1", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -10,71 +10,71 @@ note: lint level defined here\n LL | #![deny(ty_pass_by_reference)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: passing `TyCtxt<'_, '_, '_>` by reference\n+error: passing `TyCtxt<'_, '_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:15:18\n    |\n-LL |     ty_ctxt_ref: &TyCtxt<'_, '_, '_>,\n-   |                  ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+LL |     ty_ctxt_ref: &TyCtxt<'_, '_>,\n+   |                  ^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_>`\n \n error: passing `Ty<'_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:19:28\n    |\n-LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>) {}\n    |                            ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n-error: passing `TyCtxt<'_, '_, '_>` by reference\n+error: passing `TyCtxt<'_, '_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:19:55\n    |\n-LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n-   |                                                       ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>) {}\n+   |                                                       ^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_>`\n \n error: passing `Ty<'_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:26:17\n    |\n LL |         ty_ref: &Ty<'_>,\n    |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n-error: passing `TyCtxt<'_, '_, '_>` by reference\n+error: passing `TyCtxt<'_, '_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:28:22\n    |\n-LL |         ty_ctxt_ref: &TyCtxt<'_, '_, '_>,\n-   |                      ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+LL |         ty_ctxt_ref: &TyCtxt<'_, '_>,\n+   |                      ^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_>`\n \n error: passing `Ty<'_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:31:41\n    |\n-LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>);\n+LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>);\n    |                                         ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n-error: passing `TyCtxt<'_, '_, '_>` by reference\n+error: passing `TyCtxt<'_, '_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:31:68\n    |\n-LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>);\n-   |                                                                    ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>);\n+   |                                                                    ^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_>`\n \n error: passing `Ty<'_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:53:17\n    |\n LL |         ty_ref: &Ty<'_>,\n    |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n-error: passing `TyCtxt<'_, '_, '_>` by reference\n+error: passing `TyCtxt<'_, '_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:55:22\n    |\n-LL |         ty_ctxt_ref: &TyCtxt<'_, '_, '_>,\n-   |                      ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+LL |         ty_ctxt_ref: &TyCtxt<'_, '_>,\n+   |                      ^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_>`\n \n error: passing `Ty<'_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:59:38\n    |\n-LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>) {}\n    |                                      ^^^^^^^ help: try passing by value: `Ty<'_>`\n \n-error: passing `TyCtxt<'_, '_, '_>` by reference\n+error: passing `TyCtxt<'_, '_>` by reference\n   --> $DIR/pass_ty_by_ref.rs:59:65\n    |\n-LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n-   |                                                                 ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_>) {}\n+   |                                                                 ^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_>`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "fa019dfe3ae09b24d0ee97b5a6456521058a2668", "filename": "src/test/ui-fulldeps/internal-lints/qualified_ty_ty_ctxt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.rs?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -13,8 +13,8 @@ macro_rules! qualified_macro {\n         fn ty_in_macro(\n             ty_q: ty::Ty<'_>,\n             ty: Ty<'_>,\n-            ty_ctxt_q: ty::TyCtxt<'_, '_, '_>,\n-            ty_ctxt: TyCtxt<'_, '_, '_>,\n+            ty_ctxt_q: ty::TyCtxt<'_, '_>,\n+            ty_ctxt: TyCtxt<'_, '_>,\n         ) {\n             println!(\"{}\", stringify!($a));\n         }\n@@ -24,8 +24,8 @@ macro_rules! qualified_macro {\n fn ty_qualified(\n     ty_q: ty::Ty<'_>, //~ ERROR usage of qualified `ty::Ty<'_>`\n     ty: Ty<'_>,\n-    ty_ctxt_q: ty::TyCtxt<'_, '_, '_>, //~ ERROR usage of qualified `ty::TyCtxt<'_, '_, '_>`\n-    ty_ctxt: TyCtxt<'_, '_, '_>,\n+    ty_ctxt_q: ty::TyCtxt<'_, '_>, //~ ERROR usage of qualified `ty::TyCtxt<'_, '_>`\n+    ty_ctxt: TyCtxt<'_, '_>,\n ) {\n }\n "}, {"sha": "445546ab6eec0068a40acf56bf1da9f1a959a1e0", "filename": "src/test/ui-fulldeps/internal-lints/qualified_ty_ty_ctxt.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17cdd356da598eb46515352277d3664f05c888ee/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.stderr?ref=17cdd356da598eb46515352277d3664f05c888ee", "patch": "@@ -10,11 +10,11 @@ note: lint level defined here\n LL | #![deny(usage_of_qualified_ty)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n-error: usage of qualified `ty::TyCtxt<'_, '_, '_>`\n+error: usage of qualified `ty::TyCtxt<'_, '_>`\n   --> $DIR/qualified_ty_ty_ctxt.rs:27:16\n    |\n-LL |     ty_ctxt_q: ty::TyCtxt<'_, '_, '_>,\n-   |                ^^^^^^^^^^^^^^^^^^^^^^ help: try using it unqualified: `TyCtxt<'_, '_, '_>`\n+LL |     ty_ctxt_q: ty::TyCtxt<'_, '_>,\n+   |                ^^^^^^^^^^^^^^^^^^ help: try using it unqualified: `TyCtxt<'_, '_>`\n \n error: aborting due to 2 previous errors\n "}]}