{"sha": "7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYmZiMGE4Y2E0YWI3NGVlMzExMWU1N2EwMjRmOWU2MjU3Y2UzN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-10T16:50:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-10T16:50:45Z"}, "message": "Auto merge of #66681 - Mark-Simulacrum:toolstate-into-bootstrap, r=pietroalbini\n\nMove toolstate checking into bootstrap\n\nThis intends no functional changes, merely translates the spread of shell/python into Rust.\n\nOne problematic area that I'd like to avoid but wasn't quite able to figure out how is the master branch script which is still in bash/python -- I cared less about that since it is orthogonal to the actual checking that we're doing, though as-is we're duplicating some code across Rust and that script.\n\nr? @kennytm or maybe @pietroalbini", "tree": {"sha": "f92b20477121841db7a87c9537a73bc0b7526544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f92b20477121841db7a87c9537a73bc0b7526544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "html_url": "https://github.com/rust-lang/rust/commit/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8960acf023d6739a601ae83cfc3d4ac30a85893e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8960acf023d6739a601ae83cfc3d4ac30a85893e", "html_url": "https://github.com/rust-lang/rust/commit/8960acf023d6739a601ae83cfc3d4ac30a85893e"}, {"sha": "97d936423c914c4e3402bfecfd6943e1edf23815", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d936423c914c4e3402bfecfd6943e1edf23815", "html_url": "https://github.com/rust-lang/rust/commit/97d936423c914c4e3402bfecfd6943e1edf23815"}], "stats": {"total": 711, "additions": 445, "deletions": 266}, "files": [{"sha": "5c0b43c1d24e1fdbbc3287a53fed576912284ffe", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "patch": "@@ -368,6 +368,7 @@ impl<'a> Builder<'a> {\n                 check::Rustdoc\n             ),\n             Kind::Test => describe!(\n+                crate::toolstate::ToolStateCheck,\n                 test::Tidy,\n                 test::Ui,\n                 test::CompileFail,"}, {"sha": "1f4a4f923e04805a0f7dc6631e508c8138d03828", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "patch": "@@ -169,7 +169,6 @@ mod job {\n pub use crate::config::Config;\n use crate::flags::Subcommand;\n use crate::cache::{Interned, INTERNER};\n-use crate::toolstate::ToolState;\n \n const LLVM_TOOLS: &[&str] = &[\n     \"llvm-nm\", // used to inspect binaries; it shows symbol names, their sizes and visibility\n@@ -1074,32 +1073,6 @@ impl Build {\n         }\n     }\n \n-    /// Updates the actual toolstate of a tool.\n-    ///\n-    /// The toolstates are saved to the file specified by the key\n-    /// `rust.save-toolstates` in `config.toml`. If unspecified, nothing will be\n-    /// done. The file is updated immediately after this function completes.\n-    pub fn save_toolstate(&self, tool: &str, state: ToolState) {\n-        if let Some(ref path) = self.config.save_toolstates {\n-            if let Some(parent) = path.parent() {\n-                // Ensure the parent directory always exists\n-                t!(std::fs::create_dir_all(parent));\n-            }\n-            let mut file = t!(fs::OpenOptions::new()\n-                .create(true)\n-                .read(true)\n-                .write(true)\n-                .open(path));\n-\n-            let mut current_toolstates: HashMap<Box<str>, ToolState> =\n-                serde_json::from_reader(&mut file).unwrap_or_default();\n-            current_toolstates.insert(tool.into(), state);\n-            t!(file.seek(SeekFrom::Start(0)));\n-            t!(file.set_len(0));\n-            t!(serde_json::to_writer(file, &current_toolstates));\n-        }\n-    }\n-\n     fn in_tree_crates(&self, root: &str) -> Vec<&Crate> {\n         let mut ret = Vec::new();\n         let mut list = vec![INTERNER.intern_str(root)];"}, {"sha": "a6d9ef38e57b1684b84351733b0abe60f726ebb9", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 407, "deletions": 0, "changes": 407, "blob_url": "https://github.com/rust-lang/rust/blob/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "patch": "@@ -1,4 +1,28 @@\n use serde::{Deserialize, Serialize};\n+use build_helper::t;\n+use std::time;\n+use std::fs;\n+use std::io::{Seek, SeekFrom};\n+use std::collections::HashMap;\n+use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use std::fmt;\n+use std::process::Command;\n+use std::path::PathBuf;\n+use std::env;\n+\n+// Each cycle is 42 days long (6 weeks); the last week is 35..=42 then.\n+const BETA_WEEK_START: u64 = 35;\n+\n+#[cfg(linux)]\n+const OS: Option<&str> = Some(\"linux\");\n+\n+#[cfg(windows)]\n+const OS: Option<&str> = Some(\"windows\");\n+\n+#[cfg(all(not(linux), not(windows)))]\n+const OS: Option<&str> = None;\n+\n+type ToolstateData = HashMap<Box<str>, ToolState>;\n \n #[derive(Copy, Clone, Debug, Deserialize, Serialize, PartialEq, Eq)]\n #[serde(rename_all = \"kebab-case\")]\n@@ -12,9 +36,392 @@ pub enum ToolState {\n     BuildFail = 0,\n }\n \n+impl fmt::Display for ToolState {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", match self {\n+            ToolState::TestFail => \"test-fail\",\n+            ToolState::TestPass => \"test-pass\",\n+            ToolState::BuildFail => \"build-fail\",\n+        })\n+    }\n+}\n+\n impl Default for ToolState {\n     fn default() -> Self {\n         // err on the safe side\n         ToolState::BuildFail\n     }\n }\n+\n+/// Number of days after the last promotion of beta.\n+/// Its value is 41 on the Tuesday where \"Promote master to beta (T-2)\" happens.\n+/// The Wednesday after this has value 0.\n+/// We track this value to prevent regressing tools in the last week of the 6-week cycle.\n+fn days_since_beta_promotion() -> u64 {\n+    let since_epoch = t!(time::SystemTime::UNIX_EPOCH.elapsed());\n+    (since_epoch.as_secs() / 86400 - 20) % 42\n+}\n+\n+// These tools must test-pass on the beta/stable channels.\n+//\n+// On the nightly channel, their build step must be attempted, but they may not\n+// be able to build successfully.\n+static STABLE_TOOLS: &[(&str, &str)] = &[\n+    (\"book\", \"src/doc/book\"),\n+    (\"nomicon\", \"src/doc/nomicon\"),\n+    (\"reference\", \"src/doc/reference\"),\n+    (\"rust-by-example\", \"src/doc/rust-by-example\"),\n+    (\"edition-guide\", \"src/doc/edition-guide\"),\n+    (\"rls\", \"src/tools/rls\"),\n+    (\"rustfmt\", \"src/tools/rustfmt\"),\n+    (\"clippy-driver\", \"src/tools/clippy\"),\n+];\n+\n+// These tools are permitted to not build on the beta/stable channels.\n+//\n+// We do require that we checked whether they build or not on the tools builder,\n+// though, as otherwise we will be unable to file an issue if they start\n+// failing.\n+static NIGHTLY_TOOLS: &[(&str, &str)] = &[\n+    (\"miri\", \"src/tools/miri\"),\n+    (\"embedded-book\", \"src/doc/embedded-book\"),\n+    (\"rustc-guide\", \"src/doc/rustc-guide\"),\n+];\n+\n+fn print_error(tool: &str, submodule: &str) {\n+    eprintln!(\"\");\n+    eprintln!(\"We detected that this PR updated '{}', but its tests failed.\", tool);\n+    eprintln!(\"\");\n+    eprintln!(\"If you do intend to update '{}', please check the error messages above and\", tool);\n+    eprintln!(\"commit another update.\");\n+    eprintln!(\"\");\n+    eprintln!(\"If you do NOT intend to update '{}', please ensure you did not accidentally\", tool);\n+    eprintln!(\"change the submodule at '{}'. You may ask your reviewer for the\", submodule);\n+    eprintln!(\"proper steps.\");\n+    std::process::exit(3);\n+}\n+\n+fn check_changed_files(toolstates: &HashMap<Box<str>, ToolState>) {\n+    // Changed files\n+    let output = std::process::Command::new(\"git\")\n+        .arg(\"diff\")\n+        .arg(\"--name-status\")\n+        .arg(\"HEAD\")\n+        .arg(\"HEAD^\")\n+        .output();\n+    let output = match output {\n+        Ok(o) => o,\n+        Err(e) => {\n+            eprintln!(\"Failed to get changed files: {:?}\", e);\n+            std::process::exit(1);\n+        }\n+    };\n+\n+    let output = t!(String::from_utf8(output.stdout));\n+\n+    for (tool, submodule) in STABLE_TOOLS.iter().chain(NIGHTLY_TOOLS.iter()) {\n+        let changed = output.lines().any(|l| {\n+            l.starts_with(\"M\") && l.ends_with(submodule)\n+        });\n+        eprintln!(\"Verifying status of {}...\", tool);\n+        if !changed {\n+            continue;\n+        }\n+\n+        eprintln!(\"This PR updated '{}', verifying if status is 'test-pass'...\", submodule);\n+        if toolstates[*tool] != ToolState::TestPass {\n+            print_error(tool, submodule);\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct ToolStateCheck;\n+\n+impl Step for ToolStateCheck {\n+    type Output = ();\n+\n+    /// Runs the `linkchecker` tool as compiled in `stage` by the `host` compiler.\n+    ///\n+    /// This tool in `src/tools` will verify the validity of all our links in the\n+    /// documentation to ensure we don't have a bunch of dead ones.\n+    fn run(self, builder: &Builder<'_>) {\n+        if builder.config.dry_run {\n+            return;\n+        }\n+\n+        let days_since_beta_promotion = days_since_beta_promotion();\n+        let in_beta_week = days_since_beta_promotion >= BETA_WEEK_START;\n+        let is_nightly = !(builder.config.channel == \"beta\" || builder.config.channel == \"stable\");\n+        let toolstates = builder.toolstates();\n+\n+        let mut did_error = false;\n+\n+        for (tool, _) in STABLE_TOOLS.iter().chain(NIGHTLY_TOOLS.iter()) {\n+            if !toolstates.contains_key(*tool) {\n+                did_error = true;\n+                eprintln!(\"error: Tool `{}` was not recorded in tool state.\", tool);\n+            }\n+        }\n+\n+        if did_error {\n+            std::process::exit(1);\n+        }\n+\n+        check_changed_files(&toolstates);\n+\n+        for (tool, _) in STABLE_TOOLS.iter() {\n+            let state = toolstates[*tool];\n+\n+            if state != ToolState::TestPass {\n+                if !is_nightly {\n+                    did_error = true;\n+                    eprintln!(\"error: Tool `{}` should be test-pass but is {}\", tool, state);\n+                } else if in_beta_week {\n+                    did_error = true;\n+                    eprintln!(\"error: Tool `{}` should be test-pass but is {} during beta week.\",\n+                        tool, state);\n+                }\n+            }\n+        }\n+\n+        if did_error {\n+            std::process::exit(1);\n+        }\n+\n+        if builder.config.channel == \"nightly\" && env::var_os(\"TOOLSTATE_PUBLISH\").is_some() {\n+            commit_toolstate_change(&toolstates, in_beta_week);\n+        }\n+    }\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"check-tools\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(ToolStateCheck);\n+    }\n+}\n+\n+impl Builder<'_> {\n+    fn toolstates(&self) -> HashMap<Box<str>, ToolState> {\n+        if let Some(ref path) = self.config.save_toolstates {\n+            if let Some(parent) = path.parent() {\n+                // Ensure the parent directory always exists\n+                t!(std::fs::create_dir_all(parent));\n+            }\n+            let mut file = t!(fs::OpenOptions::new()\n+                .create(true)\n+                .write(true)\n+                .read(true)\n+                .open(path));\n+\n+            serde_json::from_reader(&mut file).unwrap_or_default()\n+        } else {\n+            Default::default()\n+        }\n+    }\n+\n+    /// Updates the actual toolstate of a tool.\n+    ///\n+    /// The toolstates are saved to the file specified by the key\n+    /// `rust.save-toolstates` in `config.toml`. If unspecified, nothing will be\n+    /// done. The file is updated immediately after this function completes.\n+    pub fn save_toolstate(&self, tool: &str, state: ToolState) {\n+        if let Some(ref path) = self.config.save_toolstates {\n+            if let Some(parent) = path.parent() {\n+                // Ensure the parent directory always exists\n+                t!(std::fs::create_dir_all(parent));\n+            }\n+            let mut file = t!(fs::OpenOptions::new()\n+                .create(true)\n+                .read(true)\n+                .write(true)\n+                .open(path));\n+\n+            let mut current_toolstates: HashMap<Box<str>, ToolState> =\n+                serde_json::from_reader(&mut file).unwrap_or_default();\n+            current_toolstates.insert(tool.into(), state);\n+            t!(file.seek(SeekFrom::Start(0)));\n+            t!(file.set_len(0));\n+            t!(serde_json::to_writer(file, &current_toolstates));\n+        }\n+    }\n+}\n+\n+/// This function `commit_toolstate_change` provides functionality for pushing a change\n+/// to the `rust-toolstate` repository.\n+///\n+/// The function relies on a GitHub bot user, which should have a Personal access\n+/// token defined in the environment variable $TOOLSTATE_REPO_ACCESS_TOKEN. If for\n+/// some reason you need to change the token, please update the Azure Pipelines\n+/// variable group.\n+///\n+///   1. Generate a new Personal access token:\n+///\n+///       * Login to the bot account, and go to Settings -> Developer settings ->\n+///           Personal access tokens\n+///       * Click \"Generate new token\"\n+///       * Enable the \"public_repo\" permission, then click \"Generate token\"\n+///       * Copy the generated token (should be a 40-digit hexadecimal number).\n+///           Save it somewhere secure, as the token would be gone once you leave\n+///           the page.\n+///\n+///   2. Update the variable group in Azure Pipelines\n+///\n+///       * Ping a member of the infrastructure team to do this.\n+///\n+///   4. Replace the email address below if the bot account identity is changed\n+///\n+///       * See <https://help.github.com/articles/about-commit-email-addresses/>\n+///           if a private email by GitHub is wanted.\n+fn commit_toolstate_change(\n+    current_toolstate: &ToolstateData,\n+    in_beta_week: bool,\n+) {\n+    fn git_config(key: &str, value: &str) {\n+        let status = Command::new(\"git\").arg(\"config\").arg(\"--global\").arg(key).arg(value).status();\n+        let success = match status {\n+            Ok(s) => s.success(),\n+            Err(_) => false,\n+        };\n+        if !success {\n+            panic!(\"git config key={} value={} successful (status: {:?})\", key, value, status);\n+        }\n+    }\n+\n+    // If changing anything here, then please check that src/ci/publish_toolstate.sh is up to date\n+    // as well.\n+    git_config(\"user.email\", \"7378925+rust-toolstate-update@users.noreply.github.com\");\n+    git_config(\"user.name\", \"Rust Toolstate Update\");\n+    git_config(\"credential.helper\", \"store\");\n+\n+    let credential = format!(\n+        \"https://{}:x-oauth-basic@github.com\\n\",\n+        t!(env::var(\"TOOLSTATE_REPO_ACCESS_TOKEN\")),\n+    );\n+    let git_credential_path = PathBuf::from(t!(env::var(\"HOME\"))).join(\".git-credentials\");\n+    t!(fs::write(&git_credential_path, credential));\n+\n+    let status = Command::new(\"git\").arg(\"clone\")\n+        .arg(\"--depth=1\")\n+        .arg(t!(env::var(\"TOOLSTATE_REPO\")))\n+        .status();\n+    let success = match status {\n+        Ok(s) => s.success(),\n+        Err(_) => false,\n+    };\n+    if !success {\n+        panic!(\"git clone successful (status: {:?})\", status);\n+    }\n+\n+    let old_toolstate = t!(fs::read(\"rust-toolstate/_data/latest.json\"));\n+    let old_toolstate: Vec<RepoState> = t!(serde_json::from_slice(&old_toolstate));\n+\n+    let message = format!(\"({} CI update)\", OS.expect(\"linux/windows only\"));\n+    let mut success = false;\n+    for _ in 1..=5 {\n+        // Update the toolstate results (the new commit-to-toolstate mapping) in the toolstate repo.\n+        change_toolstate(&current_toolstate, &old_toolstate, in_beta_week);\n+\n+        // `git commit` failing means nothing to commit.\n+        let status = t!(Command::new(\"git\")\n+            .current_dir(\"rust-toolstate\")\n+            .arg(\"commit\")\n+            .arg(\"-a\")\n+            .arg(\"-m\")\n+            .arg(&message)\n+            .status());\n+        if !status.success() {\n+            success = true;\n+            break;\n+        }\n+\n+        let status = t!(Command::new(\"git\")\n+            .current_dir(\"rust-toolstate\")\n+            .arg(\"push\")\n+            .arg(\"origin\")\n+            .arg(\"master\")\n+            .status());\n+        // If we successfully push, exit.\n+        if status.success() {\n+            success = true;\n+            break;\n+        }\n+        eprintln!(\"Sleeping for 3 seconds before retrying push\");\n+        std::thread::sleep(std::time::Duration::from_secs(3));\n+        let status = t!(Command::new(\"git\")\n+            .current_dir(\"rust-toolstate\")\n+            .arg(\"fetch\")\n+            .arg(\"origin\")\n+            .arg(\"master\")\n+            .status());\n+        assert!(status.success());\n+        let status = t!(Command::new(\"git\")\n+            .current_dir(\"rust-toolstate\")\n+            .arg(\"reset\")\n+            .arg(\"--hard\")\n+            .arg(\"origin/master\")\n+            .status());\n+        assert!(status.success());\n+    }\n+\n+    if !success {\n+        panic!(\"Failed to update toolstate repository with new data\");\n+    }\n+}\n+\n+fn change_toolstate(\n+    current_toolstate: &ToolstateData,\n+    old_toolstate: &[RepoState],\n+    in_beta_week: bool,\n+) {\n+    let mut regressed = false;\n+    for repo_state in old_toolstate {\n+        let tool = &repo_state.tool;\n+        let state = if cfg!(linux) {\n+            &repo_state.linux\n+        } else if cfg!(windows) {\n+            &repo_state.windows\n+        } else {\n+            unimplemented!()\n+        };\n+        let new_state = current_toolstate[tool.as_str()];\n+\n+        if new_state != *state {\n+            eprintln!(\"The state of `{}` has changed from `{}` to `{}`\", tool, state, new_state);\n+            if (new_state as u8) < (*state as u8) {\n+                if ![\"rustc-guide\", \"miri\", \"embedded-book\"].contains(&tool.as_str()) {\n+                    regressed = true;\n+                }\n+            }\n+        }\n+    }\n+\n+    if regressed && in_beta_week {\n+        std::process::exit(1);\n+    }\n+\n+    let commit = t!(std::process::Command::new(\"git\")\n+        .arg(\"rev-parse\")\n+        .arg(\"HEAD\")\n+        .output());\n+    let commit = t!(String::from_utf8(commit.stdout));\n+\n+    let toolstate_serialized = t!(serde_json::to_string(&current_toolstate));\n+\n+    let history_path = format!(\"rust-toolstate/history/{}.tsv\", OS.expect(\"linux/windows only\"));\n+    let mut file = t!(fs::read_to_string(&history_path));\n+    let end_of_first_line = file.find('\\n').unwrap();\n+    file.insert_str(end_of_first_line, &format!(\"{}\\t{}\\n\", commit, toolstate_serialized));\n+    t!(fs::write(&history_path, file));\n+}\n+\n+#[derive(Debug, Serialize, Deserialize)]\n+struct RepoState {\n+    tool: String,\n+    windows: ToolState,\n+    linux: ToolState,\n+    commit: String,\n+    datetime: String,\n+}"}, {"sha": "5248e41725836be2713221cebdaa5dfa9427fb62", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "patch": "@@ -163,7 +163,7 @@ jobs:\n         NO_LLVM_ASSERTIONS: 1\n       # MSVC tools tests\n       x86_64-msvc-tools:\n-        SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstate/toolstates.json windows\n+        SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstate/toolstates.json\n \n       # 32/64-bit MinGW builds."}, {"sha": "9c5a15a3cf4ed9054b5f496afc115a272d029fd7", "filename": "src/ci/azure-pipelines/master.yml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fazure-pipelines%2Fmaster.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fazure-pipelines%2Fmaster.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fmaster.yml?ref=7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "patch": "@@ -16,10 +16,7 @@ steps:\n - checkout: self\n   fetchDepth: 2\n \n-- script: |\n-    export MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n-    . src/ci/docker/x86_64-gnu-tools/repo.sh\n-    commit_toolstate_change \"$MESSAGE_FILE\" \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"$MESSAGE_FILE\" \"$TOOLSTATE_REPO_ACCESS_TOKEN\"\n+- script: src/ci/publish_toolstate.sh\n   displayName: Publish toolstate\n   env:\n     TOOLSTATE_REPO_ACCESS_TOKEN: $(TOOLSTATE_REPO_ACCESS_TOKEN)"}, {"sha": "51193402ee8426648bc430568fb9457bc1571464", "filename": "src/ci/docker/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile?ref=7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "patch": "@@ -17,14 +17,12 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-COPY x86_64-gnu-tools/checkregression.py /tmp/\n COPY x86_64-gnu-tools/checktools.sh /tmp/\n-COPY x86_64-gnu-tools/repo.sh /tmp/\n \n # Run rustbook with `linkcheck` feature enabled\n ENV CHECK_LINKS 1\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\\n   --save-toolstates=/tmp/toolstate/toolstates.json\n-ENV SCRIPT /tmp/checktools.sh ../x.py /tmp/toolstate/toolstates.json linux\n+ENV SCRIPT /tmp/checktools.sh ../x.py"}, {"sha": "4fbb8c4d2034900dda85f48c5d4afa55b2834c4f", "filename": "src/ci/docker/x86_64-gnu-tools/checkregression.py", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8960acf023d6739a601ae83cfc3d4ac30a85893e/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fcheckregression.py", "raw_url": "https://github.com/rust-lang/rust/raw/8960acf023d6739a601ae83cfc3d4ac30a85893e/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fcheckregression.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fcheckregression.py?ref=8960acf023d6739a601ae83cfc3d4ac30a85893e", "patch": "@@ -1,48 +0,0 @@\n-#!/usr/bin/env python\n-# -*- coding: utf-8 -*-\n-\n-## This script has two purposes: detect any tool that *regressed*, which is used\n-## during the week before the beta branches to reject PRs; and detect any tool\n-## that *changed* to see if we need to update the toolstate repo.\n-\n-import sys\n-import json\n-\n-# Regressions for these tools during the beta cutoff week do not cause failure.\n-# See `status_check` in `checktools.sh` for tools that have to pass on the\n-# beta/stable branches.\n-REGRESSION_OK = [\"rustc-guide\", \"miri\", \"embedded-book\"]\n-\n-if __name__ == '__main__':\n-    os_name = sys.argv[1]\n-    toolstate_file = sys.argv[2]\n-    current_state = sys.argv[3]\n-    verb = sys.argv[4] # 'regressed' or 'changed'\n-\n-    with open(toolstate_file, 'r') as f:\n-        toolstate = json.load(f)\n-    with open(current_state, 'r') as f:\n-        current = json.load(f)\n-\n-    regressed = False\n-    for cur in current:\n-        tool = cur['tool']\n-        state = cur[os_name]\n-        new_state = toolstate.get(tool, '')\n-        if verb == 'regressed':\n-            updated = new_state < state\n-        elif verb == 'changed':\n-            updated = new_state != state\n-        else:\n-            print('Unknown verb {}'.format(updated))\n-            sys.exit(2)\n-        if updated:\n-            print(\n-                'The state of \"{}\" has {} from \"{}\" to \"{}\"'\n-                .format(tool, verb, state, new_state)\n-            )\n-            if not (verb == 'regressed' and tool in REGRESSION_OK):\n-                regressed = True\n-\n-    if regressed:\n-        sys.exit(1)"}, {"sha": "e57fe2271398f35f6bdac8ef0357161f9b6c6e0c", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 1, "deletions": 115, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "patch": "@@ -3,18 +3,6 @@\n set -eu\n \n X_PY=\"$1\"\n-TOOLSTATE_FILE=\"$(realpath -m $2)\"\n-OS=\"$3\"\n-COMMIT=\"$(git rev-parse HEAD)\"\n-CHANGED_FILES=\"$(git diff --name-status HEAD HEAD^)\"\n-SIX_WEEK_CYCLE=\"$(( ($(date +%s) / 86400 - 20) % 42 ))\"\n-# ^ Number of days after the last promotion of beta.\n-#   Its value is 41 on the Tuesday where \"Promote master to beta (T-2)\" happens.\n-#   The Wednesday after this has value 0.\n-#   We track this value to prevent regressing tools in the last week of the 6-week cycle.\n-\n-mkdir -p \"$(dirname $TOOLSTATE_FILE)\"\n-touch \"$TOOLSTATE_FILE\"\n \n # Try to test all the tools and store the build/test success in the TOOLSTATE_FILE\n \n@@ -34,106 +22,4 @@ python2.7 \"$X_PY\" test --no-fail-fast \\\n \n set -e\n \n-cat \"$TOOLSTATE_FILE\"\n-echo\n-\n-# This function checks if a particular tool is *not* in status \"test-pass\".\n-check_tool_failed() {\n-    grep -vq '\"'\"$1\"'\":\"test-pass\"' \"$TOOLSTATE_FILE\"\n-}\n-\n-# This function checks that if a tool's submodule changed, the tool's state must improve\n-verify_submodule_changed() {\n-    echo \"Verifying status of $1...\"\n-    if echo \"$CHANGED_FILES\" | grep -q \"^M[[:blank:]]$2$\"; then\n-        echo \"This PR updated '$2', verifying if status is 'test-pass'...\"\n-        if check_tool_failed \"$1\"; then\n-            echo\n-            echo \"\u26a0\ufe0f We detected that this PR updated '$1', but its tests failed.\"\n-            echo\n-            echo \"If you do intend to update '$1', please check the error messages above and\"\n-            echo \"commit another update.\"\n-            echo\n-            echo \"If you do NOT intend to update '$1', please ensure you did not accidentally\"\n-            echo \"change the submodule at '$2'. You may ask your reviewer for the\"\n-            echo \"proper steps.\"\n-            exit 3\n-        fi\n-    fi\n-}\n-\n-# deduplicates the submodule check and the assertion that on beta some tools MUST be passing.\n-# $1 should be \"submodule_changed\" to only check tools that got changed by this PR,\n-# or \"beta_required\" to check all tools that have $2 set to \"beta\".\n-check_dispatch() {\n-    if [ \"$1\" = submodule_changed ]; then\n-        # ignore $2 (branch id)\n-        verify_submodule_changed $3 $4\n-    elif [ \"$2\" = beta ]; then\n-        echo \"Requiring test passing for $3...\"\n-        if check_tool_failed \"$3\"; then\n-            exit 4\n-        fi\n-    fi\n-}\n-\n-# List all tools here.\n-# This function gets called with \"submodule_changed\" for each PR that changed a submodule,\n-# and with \"beta_required\" for each PR that lands on beta/stable.\n-# The purpose of this function is to *reject* PRs if a tool is not \"test-pass\" and\n-# (a) the tool's submodule has been updated, or (b) we landed on beta/stable and the\n-# tool has to \"test-pass\" on that branch.\n-status_check() {\n-    check_dispatch $1 beta book src/doc/book\n-    check_dispatch $1 beta nomicon src/doc/nomicon\n-    check_dispatch $1 beta reference src/doc/reference\n-    check_dispatch $1 beta rust-by-example src/doc/rust-by-example\n-    check_dispatch $1 beta edition-guide src/doc/edition-guide\n-    check_dispatch $1 beta rls src/tools/rls\n-    check_dispatch $1 beta rustfmt src/tools/rustfmt\n-    check_dispatch $1 beta clippy-driver src/tools/clippy\n-    # These tools are not required on the beta/stable branches, but they *do* cause\n-    # PRs to fail if a submodule update does not fix them.\n-    # They will still cause failure during the beta cutoff week, unless `checkregression.py`\n-    # exempts them from that.\n-    check_dispatch $1 nightly miri src/tools/miri\n-    check_dispatch $1 nightly embedded-book src/doc/embedded-book\n-    check_dispatch $1 nightly rustc-guide src/doc/rustc-guide\n-}\n-\n-# If this PR is intended to update one of these tools, do not let the build pass\n-# when they do not test-pass.\n-\n-status_check \"submodule_changed\"\n-\n-CHECK_NOT=\"$(readlink -f \"$(dirname $0)/checkregression.py\")\"\n-# This callback is called by `commit_toolstate_change`, see `repo.sh`.\n-change_toolstate() {\n-    # only update the history\n-    if python2.7 \"$CHECK_NOT\" \"$OS\" \"$TOOLSTATE_FILE\" \"_data/latest.json\" changed; then\n-        echo 'Toolstate is not changed. Not updating.'\n-    else\n-        if [ $SIX_WEEK_CYCLE -ge 35 ]; then\n-            # Reject any regressions during the week before beta cutoff.\n-            python2.7 \"$CHECK_NOT\" \"$OS\" \"$TOOLSTATE_FILE\" \"_data/latest.json\" regressed\n-        fi\n-        sed -i \"1 a\\\\\n-$COMMIT\\t$(cat \"$TOOLSTATE_FILE\")\n-\" \"history/$OS.tsv\"\n-    fi\n-}\n-\n-if [ \"$RUST_RELEASE_CHANNEL\" = nightly ]; then\n-    if [ -n \"${TOOLSTATE_PUBLISH+is_set}\" ]; then\n-        . \"$(dirname $0)/repo.sh\"\n-        MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n-        echo \"($OS CI update)\" > \"$MESSAGE_FILE\"\n-        commit_toolstate_change \"$MESSAGE_FILE\" change_toolstate\n-        rm -f \"$MESSAGE_FILE\"\n-    fi\n-    exit 0\n-fi\n-\n-# abort compilation if an important tool doesn't build\n-# (this code is reachable if not on the nightly channel)\n-status_check \"beta_required\"\n+python2.7 \"$X_PY\" test check-tools"}, {"sha": "82700a00fb6af61e398dcceb7e3700cba8568af3", "filename": "src/ci/docker/x86_64-gnu-tools/repo.sh", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8960acf023d6739a601ae83cfc3d4ac30a85893e/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8960acf023d6739a601ae83cfc3d4ac30a85893e/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh?ref=8960acf023d6739a601ae83cfc3d4ac30a85893e", "patch": "@@ -1,68 +0,0 @@\n-#!/bin/sh\n-\n-# This file provides the function `commit_toolstate_change` for pushing a change\n-# to the `rust-toolstate` repository.\n-#\n-# The function relies on a GitHub bot user, which should have a Personal access\n-# token defined in the environment variable $TOOLSTATE_REPO_ACCESS_TOKEN. If for\n-# some reason you need to change the token, please update the Azure Pipelines\n-# variable group.\n-#\n-#   1. Generate a new Personal access token:\n-#\n-#       * Login to the bot account, and go to Settings -> Developer settings ->\n-#           Personal access tokens\n-#       * Click \"Generate new token\"\n-#       * Enable the \"public_repo\" permission, then click \"Generate token\"\n-#       * Copy the generated token (should be a 40-digit hexadecimal number).\n-#           Save it somewhere secure, as the token would be gone once you leave\n-#           the page.\n-#\n-#   2. Update the variable group in Azure Pipelines\n-#\n-#       * Ping a member of the infrastructure team to do this.\n-#\n-#   4. Replace the email address below if the bot account identity is changed\n-#\n-#       * See <https://help.github.com/articles/about-commit-email-addresses/>\n-#           if a private email by GitHub is wanted.\n-\n-commit_toolstate_change() {\n-    OLDFLAGS=\"$-\"\n-    set -eu\n-\n-    git config --global user.email '7378925+rust-toolstate-update@users.noreply.github.com'\n-    git config --global user.name 'Rust Toolstate Update'\n-    git config --global credential.helper store\n-    printf 'https://%s:x-oauth-basic@github.com\\n' \"$TOOLSTATE_REPO_ACCESS_TOKEN\" \\\n-        > \"$HOME/.git-credentials\"\n-    git clone --depth=1 $TOOLSTATE_REPO\n-\n-    cd rust-toolstate\n-    FAILURE=1\n-    MESSAGE_FILE=\"$1\"\n-    shift\n-    for RETRY_COUNT in 1 2 3 4 5; do\n-        # Call the callback.\n-        # - If we are in the `auto` branch (pre-landing), this is called from `checktools.sh` and\n-        #   the callback is `change_toolstate` in that file. The purpose of this is to publish the\n-        #   test results (the new commit-to-toolstate mapping) in the toolstate repo.\n-        # - If we are in the `master` branch (post-landing), this is called by the CI pipeline\n-        #   and the callback is `src/tools/publish_toolstate.py`. The purpose is to publish\n-        #   the new \"current\" toolstate in the toolstate repo.\n-        \"$@\"\n-        # `git commit` failing means nothing to commit.\n-        FAILURE=0\n-        git commit -a -F \"$MESSAGE_FILE\" || break\n-        # On failure randomly sleep for 0 to 3 seconds as a crude way to introduce jittering.\n-        git push origin master && break || sleep $(LC_ALL=C tr -cd 0-3 < /dev/urandom | head -c 1)\n-        FAILURE=1\n-        git fetch origin master\n-        git reset --hard origin/master\n-    done\n-    cd ..\n-\n-    set +eu\n-    set \"-$OLDFLAGS\"\n-    return $FAILURE\n-}"}, {"sha": "d8ff74078220eaee7d45c4af1536564831c455d6", "filename": "src/ci/publish_toolstate.sh", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fpublish_toolstate.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c/src%2Fci%2Fpublish_toolstate.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpublish_toolstate.sh?ref=7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "patch": "@@ -0,0 +1,33 @@\n+#!/bin/sh\n+\n+set -eu\n+\n+# The following lines are also found in src/bootstrap/toolstate.rs,\n+# so if updating here, please also update that file.\n+\n+export MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n+\n+git config --global user.email '7378925+rust-toolstate-update@users.noreply.github.com'\n+git config --global user.name 'Rust Toolstate Update'\n+git config --global credential.helper store\n+printf 'https://%s:x-oauth-basic@github.com\\n' \"$TOOLSTATE_REPO_ACCESS_TOKEN\" \\\n+    > \"$HOME/.git-credentials\"\n+git clone --depth=1 $TOOLSTATE_REPO\n+\n+cd rust-toolstate\n+FAILURE=1\n+for RETRY_COUNT in 1 2 3 4 5; do\n+    #  The purpose is to publish the new \"current\" toolstate in the toolstate repo.\n+    \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \\\n+        \"$(git log --format=%s -n1 HEAD)\" \\\n+        \"$MESSAGE_FILE\" \\\n+        \"$TOOLSTATE_REPO_ACCESS_TOKEN\"\n+    # `git commit` failing means nothing to commit.\n+    FAILURE=0\n+    git commit -a -F \"$MESSAGE_FILE\" || break\n+    # On failure randomly sleep for 0 to 3 seconds as a crude way to introduce jittering.\n+    git push origin master && break || sleep $(LC_ALL=C tr -cd 0-3 < /dev/urandom | head -c 1)\n+    FAILURE=1\n+    git fetch origin master\n+    git reset --hard origin/master\n+done"}]}