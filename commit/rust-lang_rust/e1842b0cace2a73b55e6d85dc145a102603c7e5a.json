{"sha": "e1842b0cace2a73b55e6d85dc145a102603c7e5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxODQyYjBjYWNlMmE3M2I1NWU2ZDg1ZGMxNDVhMTAyNjAzYzdlNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-14T12:59:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-14T12:59:24Z"}, "message": "Auto merge of #5583 - ebroto:reversed_empty_ranges, r=yaahc,flip1995\n\nReversed empty ranges\n\nThis lint checks range expressions with inverted limits which result in empty ranges. This includes also the ranges used to index slices.\n\nThe lint reverse_range_loop was covering iteration of reversed ranges in a for loop, which is a subset of what this new lint covers, so it has been removed. I'm not sure if that's the best choice. It would be doable to check in the new lint that we are not in the arguments of a for loop; I went for removing it because the logic was too similar to keep them separated.\n\nchangelog: Added reversed_empty_ranges lint that checks for ranges where the limits have been inverted, resulting in empty ranges. Removed reverse_range_loop which was covering a subset of the new lint.\n\nCloses #4192\nCloses #96", "tree": {"sha": "485e46e9e0801c7139778034426d136c8e14d1b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/485e46e9e0801c7139778034426d136c8e14d1b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1842b0cace2a73b55e6d85dc145a102603c7e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1842b0cace2a73b55e6d85dc145a102603c7e5a", "html_url": "https://github.com/rust-lang/rust/commit/e1842b0cace2a73b55e6d85dc145a102603c7e5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1842b0cace2a73b55e6d85dc145a102603c7e5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "714706839928d62b86bf6614ecd4d4f5c0d6f2c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/714706839928d62b86bf6614ecd4d4f5c0d6f2c4", "html_url": "https://github.com/rust-lang/rust/commit/714706839928d62b86bf6614ecd4d4f5c0d6f2c4"}, {"sha": "671c1e34cc11767aa4ea257b9f5c40dcee1441fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/671c1e34cc11767aa4ea257b9f5c40dcee1441fd", "html_url": "https://github.com/rust-lang/rust/commit/671c1e34cc11767aa4ea257b9f5c40dcee1441fd"}], "stats": {"total": 813, "additions": 500, "deletions": 313}, "files": [{"sha": "b25ef0493568d934b4869f4a3c7dcf1e89c33023", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -1545,7 +1545,7 @@ Released 2018-09-13\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n-[`reverse_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#reverse_range_loop\n+[`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse"}, {"sha": "0c4daeb731f9c1a5731a7db5ca5d41a12217236b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -624,7 +624,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &loops::NEEDLESS_COLLECT,\n         &loops::NEEDLESS_RANGE_LOOP,\n         &loops::NEVER_LOOP,\n-        &loops::REVERSE_RANGE_LOOP,\n         &loops::WHILE_IMMUTABLE_CONDITION,\n         &loops::WHILE_LET_LOOP,\n         &loops::WHILE_LET_ON_ITERATOR,\n@@ -770,6 +769,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &ranges::RANGE_MINUS_ONE,\n         &ranges::RANGE_PLUS_ONE,\n         &ranges::RANGE_ZIP_WITH_LEN,\n+        &ranges::REVERSED_EMPTY_RANGES,\n         &redundant_clone::REDUNDANT_CLONE,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n@@ -1283,7 +1283,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::NEEDLESS_COLLECT),\n         LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n         LintId::of(&loops::NEVER_LOOP),\n-        LintId::of(&loops::REVERSE_RANGE_LOOP),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n         LintId::of(&loops::WHILE_LET_LOOP),\n         LintId::of(&loops::WHILE_LET_ON_ITERATOR),\n@@ -1384,6 +1383,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&question_mark::QUESTION_MARK),\n         LintId::of(&ranges::RANGE_MINUS_ONE),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n+        LintId::of(&ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n         LintId::of(&redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING),\n@@ -1656,7 +1656,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::FOR_LOOP_OVER_RESULT),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n         LintId::of(&loops::NEVER_LOOP),\n-        LintId::of(&loops::REVERSE_RANGE_LOOP),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n@@ -1675,6 +1674,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&ptr::MUT_FROM_REF),\n+        LintId::of(&ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(&regex::INVALID_REGEX),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n@@ -1785,6 +1785,10 @@ fn register_removed_non_tool_lints(store: &mut rustc_lint::LintStore) {\n         \"unsafe_vector_initialization\",\n         \"the replacement suggested by this lint had substantially different behavior\",\n     );\n+    store.register_removed(\n+        \"reverse_range_loop\",\n+        \"this lint is now included in reversed_empty_ranges\",\n+    );\n }\n \n /// Register renamed lints."}, {"sha": "0bc6b70855ba6b98c2d476c228f3a76dbdaeef7a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 100, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -1,4 +1,4 @@\n-use crate::consts::{constant, Constant};\n+use crate::consts::constant;\n use crate::reexport::Name;\n use crate::utils::paths;\n use crate::utils::usage::{is_unused, mutated_variables};\n@@ -8,7 +8,7 @@ use crate::utils::{\n     multispan_sugg, snippet, snippet_opt, snippet_with_applicability, span_lint, span_lint_and_help,\n     span_lint_and_sugg, span_lint_and_then, SpanlessEq,\n };\n-use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sext, sugg};\n+use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sugg};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -270,30 +270,6 @@ declare_clippy_lint! {\n     \"collecting an iterator when collect is not needed\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for loops over ranges `x..y` where both `x` and `y`\n-    /// are constant and `x` is greater or equal to `y`, unless the range is\n-    /// reversed or has a negative `.step_by(_)`.\n-    ///\n-    /// **Why is it bad?** Such loops will either be skipped or loop until\n-    /// wrap-around (in debug code, this may `panic!()`). Both options are probably\n-    /// not intended.\n-    ///\n-    /// **Known problems:** The lint cannot catch loops over dynamically defined\n-    /// ranges. Doing this would require simulating all possible inputs and code\n-    /// paths through the program, which would be complex and error-prone.\n-    ///\n-    /// **Example:**\n-    /// ```ignore\n-    /// for x in 5..10 - 5 {\n-    ///     ..\n-    /// } // oops, stray `-`\n-    /// ```\n-    pub REVERSE_RANGE_LOOP,\n-    correctness,\n-    \"iteration over an empty range, such as `10..0` or `5..5`\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks `for` loops over slices with an explicit counter\n     /// and suggests the use of `.enumerate()`.\n@@ -463,7 +439,6 @@ declare_lint_pass!(Loops => [\n     FOR_LOOP_OVER_OPTION,\n     WHILE_LET_LOOP,\n     NEEDLESS_COLLECT,\n-    REVERSE_RANGE_LOOP,\n     EXPLICIT_COUNTER_LOOP,\n     EMPTY_LOOP,\n     WHILE_LET_ON_ITERATOR,\n@@ -761,7 +736,6 @@ fn check_for_loop<'a, 'tcx>(\n     expr: &'tcx Expr<'_>,\n ) {\n     check_for_loop_range(cx, pat, arg, body, expr);\n-    check_for_loop_reverse_range(cx, arg, expr);\n     check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, pat, arg, body, expr);\n     check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n@@ -1248,78 +1222,6 @@ fn is_end_eq_array_len<'tcx>(\n     false\n }\n \n-fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx Expr<'_>, expr: &'tcx Expr<'_>) {\n-    // if this for loop is iterating over a two-sided range...\n-    if let Some(higher::Range {\n-        start: Some(start),\n-        end: Some(end),\n-        limits,\n-    }) = higher::range(cx, arg)\n-    {\n-        // ...and both sides are compile-time constant integers...\n-        if let Some((start_idx, _)) = constant(cx, cx.tables, start) {\n-            if let Some((end_idx, _)) = constant(cx, cx.tables, end) {\n-                // ...and the start index is greater than the end index,\n-                // this loop will never run. This is often confusing for developers\n-                // who think that this will iterate from the larger value to the\n-                // smaller value.\n-                let ty = cx.tables.expr_ty(start);\n-                let (sup, eq) = match (start_idx, end_idx) {\n-                    (Constant::Int(start_idx), Constant::Int(end_idx)) => (\n-                        match ty.kind {\n-                            ty::Int(ity) => sext(cx.tcx, start_idx, ity) > sext(cx.tcx, end_idx, ity),\n-                            ty::Uint(_) => start_idx > end_idx,\n-                            _ => false,\n-                        },\n-                        start_idx == end_idx,\n-                    ),\n-                    _ => (false, false),\n-                };\n-\n-                if sup {\n-                    let start_snippet = snippet(cx, start.span, \"_\");\n-                    let end_snippet = snippet(cx, end.span, \"_\");\n-                    let dots = if limits == ast::RangeLimits::Closed {\n-                        \"..=\"\n-                    } else {\n-                        \"..\"\n-                    };\n-\n-                    span_lint_and_then(\n-                        cx,\n-                        REVERSE_RANGE_LOOP,\n-                        expr.span,\n-                        \"this range is empty so this for loop will never run\",\n-                        |diag| {\n-                            diag.span_suggestion(\n-                                arg.span,\n-                                \"consider using the following if you are attempting to iterate over this \\\n-                                 range in reverse\",\n-                                format!(\n-                                    \"({end}{dots}{start}).rev()\",\n-                                    end = end_snippet,\n-                                    dots = dots,\n-                                    start = start_snippet\n-                                ),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        },\n-                    );\n-                } else if eq && limits != ast::RangeLimits::Closed {\n-                    // if they are equal, it's also problematic - this loop\n-                    // will never run.\n-                    span_lint(\n-                        cx,\n-                        REVERSE_RANGE_LOOP,\n-                        expr.span,\n-                        \"this range is empty so this for loop will never run\",\n-                    );\n-                }\n-            }\n-        }\n-    }\n-}\n-\n fn lint_iter_method(cx: &LateContext<'_, '_>, args: &[Expr<'_>], arg: &Expr<'_>, method_name: &str) {\n     let mut applicability = Applicability::MachineApplicable;\n     let object = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);"}, {"sha": "83c6faac04149f344ea4916f50e05d437f7411e4", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 110, "deletions": 2, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -1,14 +1,17 @@\n+use crate::consts::{constant, Constant};\n use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n+use std::cmp::Ordering;\n \n use crate::utils::sugg::Sugg;\n+use crate::utils::{get_parent_expr, is_integer_const, snippet, snippet_opt, span_lint, span_lint_and_then};\n use crate::utils::{higher, SpanlessEq};\n-use crate::utils::{is_integer_const, snippet, snippet_opt, span_lint, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for zipping a collection with the range of\n@@ -84,10 +87,44 @@ declare_clippy_lint! {\n     \"`x..=(y-1)` reads better as `x..y`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for range expressions `x..y` where both `x` and `y`\n+    /// are constant and `x` is greater or equal to `y`.\n+    ///\n+    /// **Why is this bad?** Empty ranges yield no values so iterating them is a no-op.\n+    /// Moreover, trying to use a reversed range to index a slice will panic at run-time.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,no_run\n+    /// fn main() {\n+    ///     (10..=0).for_each(|x| println!(\"{}\", x));\n+    ///\n+    ///     let arr = [1, 2, 3, 4, 5];\n+    ///     let sub = &arr[3..1];\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn main() {\n+    ///     (0..=10).rev().for_each(|x| println!(\"{}\", x));\n+    ///\n+    ///     let arr = [1, 2, 3, 4, 5];\n+    ///     let sub = &arr[1..3];\n+    /// }\n+    /// ```\n+    pub REVERSED_EMPTY_RANGES,\n+    correctness,\n+    \"reversing the limits of range expressions, resulting in empty ranges\"\n+}\n+\n declare_lint_pass!(Ranges => [\n     RANGE_ZIP_WITH_LEN,\n     RANGE_PLUS_ONE,\n-    RANGE_MINUS_ONE\n+    RANGE_MINUS_ONE,\n+    REVERSED_EMPTY_RANGES,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n@@ -124,6 +161,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n \n         check_exclusive_range_plus_one(cx, expr);\n         check_inclusive_range_minus_one(cx, expr);\n+        check_reversed_empty_range(cx, expr);\n     }\n }\n \n@@ -202,6 +240,76 @@ fn check_inclusive_range_minus_one(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     }\n }\n \n+fn check_reversed_empty_range(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+    fn inside_indexing_expr(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+        matches!(\n+            get_parent_expr(cx, expr),\n+            Some(Expr {\n+                kind: ExprKind::Index(..),\n+                ..\n+            })\n+        )\n+    }\n+\n+    fn is_empty_range(limits: RangeLimits, ordering: Ordering) -> bool {\n+        match limits {\n+            RangeLimits::HalfOpen => ordering != Ordering::Less,\n+            RangeLimits::Closed => ordering == Ordering::Greater,\n+        }\n+    }\n+\n+    if_chain! {\n+        if let Some(higher::Range { start: Some(start), end: Some(end), limits }) = higher::range(cx, expr);\n+        let ty = cx.tables.expr_ty(start);\n+        if let ty::Int(_) | ty::Uint(_) = ty.kind;\n+        if let Some((start_idx, _)) = constant(cx, cx.tables, start);\n+        if let Some((end_idx, _)) = constant(cx, cx.tables, end);\n+        if let Some(ordering) = Constant::partial_cmp(cx.tcx, ty, &start_idx, &end_idx);\n+        if is_empty_range(limits, ordering);\n+        then {\n+            if inside_indexing_expr(cx, expr) {\n+                let (reason, outcome) = if ordering == Ordering::Equal {\n+                    (\"empty\", \"always yield an empty slice\")\n+                } else {\n+                    (\"reversed\", \"panic at run-time\")\n+                };\n+\n+                span_lint(\n+                    cx,\n+                    REVERSED_EMPTY_RANGES,\n+                    expr.span,\n+                    &format!(\"this range is {} and using it to index a slice will {}\", reason, outcome),\n+                );\n+            } else {\n+                span_lint_and_then(\n+                    cx,\n+                    REVERSED_EMPTY_RANGES,\n+                    expr.span,\n+                    \"this range is empty so it will yield no values\",\n+                    |diag| {\n+                        if ordering != Ordering::Equal {\n+                            let start_snippet = snippet(cx, start.span, \"_\");\n+                            let end_snippet = snippet(cx, end.span, \"_\");\n+                            let dots = match limits {\n+                                RangeLimits::HalfOpen => \"..\",\n+                                RangeLimits::Closed => \"..=\"\n+                            };\n+\n+                            diag.span_suggestion(\n+                                expr.span,\n+                                \"consider using the following if you are attempting to iterate over this \\\n+                                 range in reverse\",\n+                                format!(\"({}{}{}).rev()\", end_snippet, dots, start_snippet),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}\n+\n fn y_plus_one<'t>(cx: &LateContext<'_, '_>, expr: &'t Expr<'_>) -> Option<&'t Expr<'t>> {\n     match expr.kind {\n         ExprKind::Binary("}, {"sha": "e1a6d4bdd31f6674dd79363cac6a6d30bfca773d", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -1922,11 +1922,11 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"methods\",\n     },\n     Lint {\n-        name: \"reverse_range_loop\",\n+        name: \"reversed_empty_ranges\",\n         group: \"correctness\",\n-        desc: \"iteration over an empty range, such as `10..0` or `5..5`\",\n+        desc: \"reversing the limits of range expressions, resulting in empty ranges\",\n         deprecation: None,\n-        module: \"loops\",\n+        module: \"ranges\",\n     },\n     Lint {\n         name: \"same_functions_in_if_condition\","}, {"sha": "249a88a0b3982cdccb57fa64418d5831d54c9c33", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -21,7 +21,6 @@ impl Unrelated {\n     clippy::explicit_iter_loop,\n     clippy::explicit_into_iter_loop,\n     clippy::iter_next_loop,\n-    clippy::reverse_range_loop,\n     clippy::for_kv_map\n )]\n #[allow(\n@@ -32,61 +31,8 @@ impl Unrelated {\n )]\n #[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n-    const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n \n-    for i in (0..10).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (0..=10).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (0..MAX_LEN).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 5..=5 {\n-        // not an error, this is the range with only one element \u201c5\u201d\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 0..10 {\n-        // not an error, the start index is less than the end index\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in -10..0 {\n-        // not an error\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (10..0).map(|x| x * 2) {\n-        // not an error, it can't be known what arbitrary methods do to a range\n-        println!(\"{}\", i);\n-    }\n-\n-    // testing that the empty range lint folds constants\n-    for i in (5 + 4..10).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in ((3 - 1)..(5 + 2)).rev() {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (2 * 2)..(2 * 3) {\n-        // no error, 4..6 is fine\n-        println!(\"{}\", i);\n-    }\n-\n-    let x = 42;\n-    for i in x..10 {\n-        // no error, not constant-foldable\n-        println!(\"{}\", i);\n-    }\n-\n     // See #601\n     for i in 0..10 {\n         // no error, id_col does not exist outside the loop"}, {"sha": "306d85a6351e107f6a7e6bbb0b8c70d9843a4a93", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -21,7 +21,6 @@ impl Unrelated {\n     clippy::explicit_iter_loop,\n     clippy::explicit_into_iter_loop,\n     clippy::iter_next_loop,\n-    clippy::reverse_range_loop,\n     clippy::for_kv_map\n )]\n #[allow(\n@@ -32,61 +31,8 @@ impl Unrelated {\n )]\n #[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n-    const MAX_LEN: usize = 42;\n     let mut vec = vec![1, 2, 3, 4];\n \n-    for i in 10..0 {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 10..=0 {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in MAX_LEN..0 {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 5..=5 {\n-        // not an error, this is the range with only one element \u201c5\u201d\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in 0..10 {\n-        // not an error, the start index is less than the end index\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in -10..0 {\n-        // not an error\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (10..0).map(|x| x * 2) {\n-        // not an error, it can't be known what arbitrary methods do to a range\n-        println!(\"{}\", i);\n-    }\n-\n-    // testing that the empty range lint folds constants\n-    for i in 10..5 + 4 {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (5 + 2)..(3 - 1) {\n-        println!(\"{}\", i);\n-    }\n-\n-    for i in (2 * 2)..(2 * 3) {\n-        // no error, 4..6 is fine\n-        println!(\"{}\", i);\n-    }\n-\n-    let x = 42;\n-    for i in x..10 {\n-        // no error, not constant-foldable\n-        println!(\"{}\", i);\n-    }\n-\n     // See #601\n     for i in 0..10 {\n         // no error, id_col does not exist outside the loop"}, {"sha": "ddfe66d675f91efbc8f070116c570ef9eda5a496", "filename": "tests/ui/for_loop_fixable.stderr", "status": "modified", "additions": 16, "deletions": 72, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -1,152 +1,96 @@\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:38:14\n-   |\n-LL |     for i in 10..0 {\n-   |              ^^^^^\n-   |\n-   = note: `-D clippy::reverse-range-loop` implied by `-D warnings`\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in (0..10).rev() {\n-   |              ^^^^^^^^^^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:42:14\n-   |\n-LL |     for i in 10..=0 {\n-   |              ^^^^^^\n-   |\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in (0..=10).rev() {\n-   |              ^^^^^^^^^^^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:46:14\n-   |\n-LL |     for i in MAX_LEN..0 {\n-   |              ^^^^^^^^^^\n-   |\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in (0..MAX_LEN).rev() {\n-   |              ^^^^^^^^^^^^^^^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:71:14\n-   |\n-LL |     for i in 10..5 + 4 {\n-   |              ^^^^^^^^^\n-   |\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in (5 + 4..10).rev() {\n-   |              ^^^^^^^^^^^^^^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop_fixable.rs:75:14\n-   |\n-LL |     for i in (5 + 2)..(3 - 1) {\n-   |              ^^^^^^^^^^^^^^^^\n-   |\n-help: consider using the following if you are attempting to iterate over this range in reverse\n-   |\n-LL |     for i in ((3 - 1)..(5 + 2)).rev() {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:97:15\n+  --> $DIR/for_loop_fixable.rs:43:15\n    |\n LL |     for _v in vec.iter() {}\n    |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n    |\n    = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:99:15\n+  --> $DIR/for_loop_fixable.rs:45:15\n    |\n LL |     for _v in vec.iter_mut() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:102:15\n+  --> $DIR/for_loop_fixable.rs:48:15\n    |\n LL |     for _v in out_vec.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n    |\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:107:15\n+  --> $DIR/for_loop_fixable.rs:53:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:111:15\n+  --> $DIR/for_loop_fixable.rs:57:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:116:15\n+  --> $DIR/for_loop_fixable.rs:62:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:119:15\n+  --> $DIR/for_loop_fixable.rs:65:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:122:15\n+  --> $DIR/for_loop_fixable.rs:68:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:125:15\n+  --> $DIR/for_loop_fixable.rs:71:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:128:15\n+  --> $DIR/for_loop_fixable.rs:74:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:131:15\n+  --> $DIR/for_loop_fixable.rs:77:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:134:15\n+  --> $DIR/for_loop_fixable.rs:80:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:309:18\n+  --> $DIR/for_loop_fixable.rs:255:18\n    |\n LL |         for i in iterator.into_iter() {\n    |                  ^^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `iterator`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:329:18\n+  --> $DIR/for_loop_fixable.rs:275:18\n    |\n LL |         for _ in t.into_iter() {}\n    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `&t`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods\n-  --> $DIR/for_loop_fixable.rs:331:18\n+  --> $DIR/for_loop_fixable.rs:277:18\n    |\n LL |         for _ in r.into_iter() {}\n    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `r`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "e73536052f0f5bf597dd9154b4209984d87c54a7", "filename": "tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -5,7 +5,6 @@\n     clippy::explicit_iter_loop,\n     clippy::explicit_into_iter_loop,\n     clippy::iter_next_loop,\n-    clippy::reverse_range_loop,\n     clippy::for_kv_map\n )]\n #[allow(\n@@ -16,25 +15,8 @@\n     unused,\n     dead_code\n )]\n-#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n-    for i in 5..5 {\n-        println!(\"{}\", i);\n-    }\n-\n     let vec = vec![1, 2, 3, 4];\n \n     for _v in vec.iter().next() {}\n-\n-    for i in (5 + 2)..(8 - 1) {\n-        println!(\"{}\", i);\n-    }\n-\n-    const ZERO: usize = 0;\n-\n-    for i in ZERO..vec.len() {\n-        if f(&vec[i], &vec[i]) {\n-            panic!(\"at the disco\");\n-        }\n-    }\n }"}, {"sha": "1c9287b6acbb328d5b2335a797acb4a1c903a478", "filename": "tests/ui/for_loop_unfixable.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Ffor_loop_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.stderr?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -1,9 +1,10 @@\n-error[E0425]: cannot find function `f` in this scope\n-  --> $DIR/for_loop_unfixable.rs:36:12\n+error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n+  --> $DIR/for_loop_unfixable.rs:21:15\n    |\n-LL |         if f(&vec[i], &vec[i]) {\n-   |            ^ help: a local variable with a similar name exists: `i`\n+LL |     for _v in vec.iter().next() {}\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::iter-next-loop` implied by `-D warnings`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0425`."}, {"sha": "0083f94798fe4b2c650998d439f05cda4e7b0d0c", "filename": "tests/ui/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_memcpy.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -104,7 +104,7 @@ pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n         dst[i - 0] = src[i];\n     }\n \n-    #[allow(clippy::reverse_range_loop)]\n+    #[allow(clippy::reversed_empty_ranges)]\n     for i in 0..0 {\n         dst[i] = src[i];\n     }"}, {"sha": "ee2cbc3cf540eb1309ced9d7a3caee6720047611", "filename": "tests/ui/reversed_empty_ranges_fixable.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.fixed?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+const ANSWER: i32 = 42;\n+\n+fn main() {\n+    (21..=42).rev().for_each(|x| println!(\"{}\", x));\n+    let _ = (21..ANSWER).rev().filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n+\n+    for _ in (-42..=-21).rev() {}\n+    for _ in (21u32..42u32).rev() {}\n+\n+    // These should be ignored as they are not empty ranges:\n+\n+    (21..=42).for_each(|x| println!(\"{}\", x));\n+    (21..42).for_each(|x| println!(\"{}\", x));\n+\n+    let arr = [1, 2, 3, 4, 5];\n+    let _ = &arr[1..=3];\n+    let _ = &arr[1..3];\n+\n+    for _ in 21..=42 {}\n+    for _ in 21..42 {}\n+}"}, {"sha": "6ed5ca6daa0e8fd537e8b7e0635234dbb6f491cb", "filename": "tests/ui/reversed_empty_ranges_fixable.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+const ANSWER: i32 = 42;\n+\n+fn main() {\n+    (42..=21).for_each(|x| println!(\"{}\", x));\n+    let _ = (ANSWER..21).filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n+\n+    for _ in -21..=-42 {}\n+    for _ in 42u32..21u32 {}\n+\n+    // These should be ignored as they are not empty ranges:\n+\n+    (21..=42).for_each(|x| println!(\"{}\", x));\n+    (21..42).for_each(|x| println!(\"{}\", x));\n+\n+    let arr = [1, 2, 3, 4, 5];\n+    let _ = &arr[1..=3];\n+    let _ = &arr[1..3];\n+\n+    for _ in 21..=42 {}\n+    for _ in 21..42 {}\n+}"}, {"sha": "97933b8ff851530496f750deb848bb0a87668e1d", "filename": "tests/ui/reversed_empty_ranges_fixable.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.stderr?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,47 @@\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_fixable.rs:7:5\n+   |\n+LL |     (42..=21).for_each(|x| println!(\"{}\", x));\n+   |     ^^^^^^^^^\n+   |\n+   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     (21..=42).rev().for_each(|x| println!(\"{}\", x));\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_fixable.rs:8:13\n+   |\n+LL |     let _ = (ANSWER..21).filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     let _ = (21..ANSWER).rev().filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n+   |             ^^^^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_fixable.rs:10:14\n+   |\n+LL |     for _ in -21..=-42 {}\n+   |              ^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for _ in (-42..=-21).rev() {}\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_fixable.rs:11:14\n+   |\n+LL |     for _ in 42u32..21u32 {}\n+   |              ^^^^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for _ in (21u32..42u32).rev() {}\n+   |              ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f1503ed6d12f9437302a1fd16b08e865766506ff", "filename": "tests/ui/reversed_empty_ranges_loops_fixable.fixed", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_fixable.fixed?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,57 @@\n+// run-rustfix\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+fn main() {\n+    const MAX_LEN: usize = 42;\n+\n+    for i in (0..10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..=10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..MAX_LEN).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 5..=5 {\n+        // not an error, this is the range with only one element \u201c5\u201d\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 0..10 {\n+        // not an error, the start index is less than the end index\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in -10..0 {\n+        // not an error\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..10).rev().map(|x| x * 2) {\n+        println!(\"{}\", i);\n+    }\n+\n+    // testing that the empty range lint folds constants\n+    for i in (5 + 4..10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in ((3 - 1)..(5 + 2)).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (2 * 2)..(2 * 3) {\n+        // no error, 4..6 is fine\n+        println!(\"{}\", i);\n+    }\n+\n+    let x = 42;\n+    for i in x..10 {\n+        // no error, not constant-foldable\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "a733788dc22c1a2bf852644569375ec7ec1ea449", "filename": "tests/ui/reversed_empty_ranges_loops_fixable.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_fixable.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,57 @@\n+// run-rustfix\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+fn main() {\n+    const MAX_LEN: usize = 42;\n+\n+    for i in 10..0 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 10..=0 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in MAX_LEN..0 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 5..=5 {\n+        // not an error, this is the range with only one element \u201c5\u201d\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 0..10 {\n+        // not an error, the start index is less than the end index\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in -10..0 {\n+        // not an error\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (10..0).map(|x| x * 2) {\n+        println!(\"{}\", i);\n+    }\n+\n+    // testing that the empty range lint folds constants\n+    for i in 10..5 + 4 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (5 + 2)..(3 - 1) {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (2 * 2)..(2 * 3) {\n+        // no error, 4..6 is fine\n+        println!(\"{}\", i);\n+    }\n+\n+    let x = 42;\n+    for i in x..10 {\n+        // no error, not constant-foldable\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "e89e040a0ff9e0ae5f3b49e2eaf00f85bebf556b", "filename": "tests/ui/reversed_empty_ranges_loops_fixable.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_fixable.stderr?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,69 @@\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:7:14\n+   |\n+LL |     for i in 10..0 {\n+   |              ^^^^^\n+   |\n+   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (0..10).rev() {\n+   |              ^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:11:14\n+   |\n+LL |     for i in 10..=0 {\n+   |              ^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (0..=10).rev() {\n+   |              ^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:15:14\n+   |\n+LL |     for i in MAX_LEN..0 {\n+   |              ^^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (0..MAX_LEN).rev() {\n+   |              ^^^^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:34:14\n+   |\n+LL |     for i in (10..0).map(|x| x * 2) {\n+   |              ^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (0..10).rev().map(|x| x * 2) {\n+   |              ^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:39:14\n+   |\n+LL |     for i in 10..5 + 4 {\n+   |              ^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in (5 + 4..10).rev() {\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_fixable.rs:43:14\n+   |\n+LL |     for i in (5 + 2)..(3 - 1) {\n+   |              ^^^^^^^^^^^^^^^^\n+   |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+   |\n+LL |     for i in ((3 - 1)..(5 + 2)).rev() {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "c4c572244168b70fdae81f1c115674b0617e740c", "filename": "tests/ui/reversed_empty_ranges_loops_unfixable.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,11 @@\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+fn main() {\n+    for i in 5..5 {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (5 + 2)..(8 - 1) {\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "30095d20cfd41154df5eca93c924ab3578ca83b5", "filename": "tests/ui/reversed_empty_ranges_loops_unfixable.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_loops_unfixable.stderr?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,16 @@\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_unfixable.rs:4:14\n+   |\n+LL |     for i in 5..5 {\n+   |              ^^^^\n+   |\n+   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_loops_unfixable.rs:8:14\n+   |\n+LL |     for i in (5 + 2)..(8 - 1) {\n+   |              ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c9ca4c476683101ccd049f1ede61d4526025f1b2", "filename": "tests/ui/reversed_empty_ranges_unfixable.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_unfixable.rs?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,15 @@\n+#![warn(clippy::reversed_empty_ranges)]\n+\n+const ANSWER: i32 = 42;\n+const SOME_NUM: usize = 3;\n+\n+fn main() {\n+    let _ = (42 + 10..42 + 10).map(|x| x / 2).find(|&x| x == 21);\n+\n+    let arr = [1, 2, 3, 4, 5];\n+    let _ = &arr[3usize..=1usize];\n+    let _ = &arr[SOME_NUM..1];\n+    let _ = &arr[3..3];\n+\n+    for _ in ANSWER..ANSWER {}\n+}"}, {"sha": "12e5483ecdfff05e6d5869cbe51ea8b0038b72d4", "filename": "tests/ui/reversed_empty_ranges_unfixable.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1842b0cace2a73b55e6d85dc145a102603c7e5a/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_unfixable.stderr?ref=e1842b0cace2a73b55e6d85dc145a102603c7e5a", "patch": "@@ -0,0 +1,34 @@\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:7:13\n+   |\n+LL |     let _ = (42 + 10..42 + 10).map(|x| x / 2).find(|&x| x == 21);\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::reversed-empty-ranges` implied by `-D warnings`\n+\n+error: this range is reversed and using it to index a slice will panic at run-time\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:10:18\n+   |\n+LL |     let _ = &arr[3usize..=1usize];\n+   |                  ^^^^^^^^^^^^^^^\n+\n+error: this range is reversed and using it to index a slice will panic at run-time\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:11:18\n+   |\n+LL |     let _ = &arr[SOME_NUM..1];\n+   |                  ^^^^^^^^^^^\n+\n+error: this range is empty and using it to index a slice will always yield an empty slice\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:12:18\n+   |\n+LL |     let _ = &arr[3..3];\n+   |                  ^^^^\n+\n+error: this range is empty so it will yield no values\n+  --> $DIR/reversed_empty_ranges_unfixable.rs:14:14\n+   |\n+LL |     for _ in ANSWER..ANSWER {}\n+   |              ^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}