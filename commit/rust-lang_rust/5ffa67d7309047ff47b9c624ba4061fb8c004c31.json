{"sha": "5ffa67d7309047ff47b9c624ba4061fb8c004c31", "node_id": "C_kwDOAAsO6NoAKDVmZmE2N2Q3MzA5MDQ3ZmY0N2I5YzYyNGJhNDA2MWZiOGMwMDRjMzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-20T16:20:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-20T16:20:50Z"}, "message": "Auto merge of #103092 - petrochenkov:weaklto, r=wesleywiser\n\nlinker: Fix weak lang item linking with combination windows-gnu + LLD + LTO\n\nIn https://github.com/rust-lang/rust/pull/100404 this logic was originally disabled for MSVC due to issues with LTO, but the same issues appear on windows-gnu with LLD because that LLD uses the same underlying logic as MSVC LLD, just with re-syntaxed command line options.\n\nSo this PR just disables it for LTO builds in general.", "tree": {"sha": "27dcce6c0db7c6a67c13d0ffce15aa9a67d8025b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27dcce6c0db7c6a67c13d0ffce15aa9a67d8025b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ffa67d7309047ff47b9c624ba4061fb8c004c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffa67d7309047ff47b9c624ba4061fb8c004c31", "html_url": "https://github.com/rust-lang/rust/commit/5ffa67d7309047ff47b9c624ba4061fb8c004c31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ffa67d7309047ff47b9c624ba4061fb8c004c31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542febd2d383b5082277c7d165b098c0a3b513f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/542febd2d383b5082277c7d165b098c0a3b513f6", "html_url": "https://github.com/rust-lang/rust/commit/542febd2d383b5082277c7d165b098c0a3b513f6"}, {"sha": "acf51e13457c45b97cdfd551d85d3e75140e0ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/acf51e13457c45b97cdfd551d85d3e75140e0ff7", "html_url": "https://github.com/rust-lang/rust/commit/acf51e13457c45b97cdfd551d85d3e75140e0ff7"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "88b584c30866734d55a317cd6e84bc149a9f4e89", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ffa67d7309047ff47b9c624ba4061fb8c004c31/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffa67d7309047ff47b9c624ba4061fb8c004c31/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=5ffa67d7309047ff47b9c624ba4061fb8c004c31", "patch": "@@ -2715,7 +2715,7 @@ fn relevant_lib(sess: &Session, lib: &NativeLib) -> bool {\n     }\n }\n \n-fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n+pub(crate) fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n     match sess.lto() {\n         config::Lto::Fat => true,\n         config::Lto::Thin => {"}, {"sha": "ff1eee37ad9c04d1f4fcc67772b72f6df5cb4a62", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ffa67d7309047ff47b9c624ba4061fb8c004c31/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffa67d7309047ff47b9c624ba4061fb8c004c31/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=5ffa67d7309047ff47b9c624ba4061fb8c004c31", "patch": "@@ -1,3 +1,4 @@\n+use crate::back::link::are_upstream_rust_objects_already_included;\n use crate::back::metadata::create_compressed_metadata_file;\n use crate::back::write::{\n     compute_per_cgu_lto_type, start_async_codegen, submit_codegened_module_to_llvm,\n@@ -892,10 +893,14 @@ impl CrateInfo {\n \n         // Handle circular dependencies in the standard library.\n         // See comment before `add_linked_symbol_object` function for the details.\n-        // With msvc-like linkers it's both unnecessary (they support circular dependencies),\n-        // and causes linking issues (when weak lang item symbols are \"privatized\" by LTO).\n+        // If global LTO is enabled then almost everything (*) is glued into a single object file,\n+        // so this logic is not necessary and can cause issues on some targets (due to weak lang\n+        // item symbols being \"privatized\" to that object file), so we disable it.\n+        // (*) Native libs, and `#[compiler_builtins]` and `#[no_builtins]` crates are not glued,\n+        // and we assume that they cannot define weak lang items. This is not currently enforced\n+        // by the compiler, but that's ok because all this stuff is unstable anyway.\n         let target = &tcx.sess.target;\n-        if !target.is_like_msvc {\n+        if !are_upstream_rust_objects_already_included(tcx.sess) {\n             let missing_weak_lang_items: FxHashSet<&Symbol> = info\n                 .used_crates\n                 .iter()"}]}