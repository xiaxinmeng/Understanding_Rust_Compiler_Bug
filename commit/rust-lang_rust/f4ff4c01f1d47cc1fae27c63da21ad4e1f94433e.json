{"sha": "f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZmY0YzAxZjFkNDdjYzFmYWUyN2M2M2RhMjFhZDRlMWY5NDQzM2U=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-12T18:26:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-12T18:26:31Z"}, "message": "Rollup merge of #47305 - cramertj:better-calendar-alone, r=eddyb\n\nUse copy/clone closures to simplify calendar test\n\nSplit out from #47304\n\nr? @eddyb", "tree": {"sha": "22062d2e7cad3a15e54e87756e95249b949c580f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22062d2e7cad3a15e54e87756e95249b949c580f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e", "html_url": "https://github.com/rust-lang/rust/commit/f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40a6fb1336bb2025b2ef348c7caf4b4f39d90cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40a6fb1336bb2025b2ef348c7caf4b4f39d90cd", "html_url": "https://github.com/rust-lang/rust/commit/e40a6fb1336bb2025b2ef348c7caf4b4f39d90cd"}, {"sha": "ce4673df39892f415472745c0aeb695ae0ab9703", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4673df39892f415472745c0aeb695ae0ab9703", "html_url": "https://github.com/rust-lang/rust/commit/ce4673df39892f415472745c0aeb695ae0ab9703"}], "stats": {"total": 61, "additions": 14, "deletions": 47}, "files": [{"sha": "aca100591ddeca54a0fce560cdaa95c8f9ddeae0", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 14, "deletions": 47, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=f4ff4c01f1d47cc1fae27c63da21ad4e1f94433e", "patch": "@@ -15,7 +15,9 @@\n            universal_impl_trait,\n            fn_traits,\n            step_trait,\n-           unboxed_closures\n+           unboxed_closures,\n+           copy_closures,\n+           clone_closures\n )]\n \n //! Derived from: <https://raw.githubusercontent.com/quickfur/dcal/master/dcal.d>.\n@@ -234,54 +236,22 @@ impl Weekday {\n     }\n }\n \n-/// Wrapper for zero-sized closures.\n-// HACK(eddyb) Only needed because closures can't implement Copy.\n-struct Fn0<F>(std::marker::PhantomData<F>);\n-\n-impl<F> Copy for Fn0<F> {}\n-impl<F> Clone for Fn0<F> {\n-    fn clone(&self) -> Self { *self }\n-}\n-\n-impl<F: FnOnce<A>, A> FnOnce<A> for Fn0<F> {\n-    type Output = F::Output;\n-\n-    extern \"rust-call\" fn call_once(self, args: A) -> Self::Output {\n-        let f = unsafe { std::mem::uninitialized::<F>() };\n-        f.call_once(args)\n-    }\n-}\n-\n-impl<F: FnMut<A>, A> FnMut<A> for Fn0<F> {\n-    extern \"rust-call\" fn call_mut(&mut self, args: A) -> Self::Output {\n-        let mut f = unsafe { std::mem::uninitialized::<F>() };\n-        f.call_mut(args)\n-    }\n-}\n-\n-trait AsFn0<A>: Sized {\n-    fn copyable(self) -> Fn0<Self>;\n-}\n-\n-impl<F: FnMut<A>, A> AsFn0<A> for F {\n-    fn copyable(self) -> Fn0<Self> {\n-        assert_eq!(std::mem::size_of::<F>(), 0);\n-        Fn0(std::marker::PhantomData)\n-    }\n-}\n-\n /// GroupBy implementation.\n struct GroupBy<It: Iterator, F> {\n     it: std::iter::Peekable<It>,\n     f: F,\n }\n \n impl<It, F> Clone for GroupBy<It, F>\n-where It: Iterator + Clone, It::Item: Clone, F: Clone {\n-    fn clone(&self) -> GroupBy<It, F> {\n+where\n+    It: Iterator + Clone,\n+    It::Item: Clone,\n+    F: Clone,\n+{\n+    fn clone(&self) -> Self {\n         GroupBy {\n             it: self.it.clone(),\n-            f: self.f.clone()\n+            f: self.f.clone(),\n         }\n     }\n }\n@@ -331,14 +301,11 @@ impl<It: Iterator, F: FnMut(&It::Item) -> G, G: Eq> Iterator for InGroup<It, F,\n }\n \n trait IteratorExt: Iterator + Sized {\n-    fn group_by<G, F>(self, f: F) -> GroupBy<Self, Fn0<F>>\n-    where F: FnMut(&Self::Item) -> G,\n+    fn group_by<G, F>(self, f: F) -> GroupBy<Self, F>\n+    where F: Clone + FnMut(&Self::Item) -> G,\n           G: Eq\n     {\n-        GroupBy {\n-            it: self.peekable(),\n-            f: f.copyable(),\n-        }\n+        GroupBy { it: self.peekable(), f }\n     }\n \n     fn join(mut self, sep: &str) -> String\n@@ -382,7 +349,7 @@ fn test_spaces() {\n fn dates_in_year(year: i32) -> impl Iterator<Item=NaiveDate>+Clone {\n     InGroup {\n         it: NaiveDate::from_ymd(year, 1, 1)..,\n-        f: (|d: &NaiveDate| d.year()).copyable(),\n+        f: |d: &NaiveDate| d.year(),\n         g: year\n     }\n }"}]}