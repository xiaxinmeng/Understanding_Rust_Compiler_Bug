{"sha": "fb4553299ca2717e6c106cd6db36b7dc6c959aac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNDU1MzI5OWNhMjcxN2U2YzEwNmNkNmRiMzZiN2RjNmM5NTlhYWM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:41Z"}, "message": "Rollup merge of #55865 - RalfJung:unix-rwlock, r=alexcrichton\n\nUnix RwLock: avoid racy access to write_locked\n\nWe should only access `write_locked` if we really got the lock.", "tree": {"sha": "e57d1b0bea121367e8ee7dbaca06fc56a7e653ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57d1b0bea121367e8ee7dbaca06fc56a7e653ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb4553299ca2717e6c106cd6db36b7dc6c959aac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7US5CRBK7hj4Ov3rIwAAdHIIAE4a5H7a+asM+B4xQcxke9aO\nQfRx0AC1sajVcKBSgJjGF+g+z6vq91ieAMu18jNxcZayKqtwIf6mX4ggkDq25dWx\n0uLGphx1C9UavY8RQj1xCVKVrAjvswaeeRVT2rEWsLo+LAmf9VRT9J6bmrG+BX71\nwUtZr48N4L89PLjkjv9Qj+R8qQwDMvlyYNn2TusdwETWF/aDr9ndjclJBy8zfiH1\ncn38vNOYeysV/MKWfn4rRtQYm2YZztlAICts5GEx74XpMML/a3nARy2gJry/8K4D\nnZIgfmtr38UoP5D8SH7YJSnv9B4Ejn9JTByjBoPVBiIy1His7UFig31T8+5Rvp0=\n=5fZq\n-----END PGP SIGNATURE-----\n", "payload": "tree e57d1b0bea121367e8ee7dbaca06fc56a7e653ea\nparent 3c7acc78783dfb2df5437d3a793fbd194f1ea785\nparent db133901042f7ccc8194b240c8381281bc4be575\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276281 +0100\ncommitter GitHub <noreply@github.com> 1542276281 +0100\n\nRollup merge of #55865 - RalfJung:unix-rwlock, r=alexcrichton\n\nUnix RwLock: avoid racy access to write_locked\n\nWe should only access `write_locked` if we really got the lock.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4553299ca2717e6c106cd6db36b7dc6c959aac", "html_url": "https://github.com/rust-lang/rust/commit/fb4553299ca2717e6c106cd6db36b7dc6c959aac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb4553299ca2717e6c106cd6db36b7dc6c959aac/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7acc78783dfb2df5437d3a793fbd194f1ea785", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7acc78783dfb2df5437d3a793fbd194f1ea785", "html_url": "https://github.com/rust-lang/rust/commit/3c7acc78783dfb2df5437d3a793fbd194f1ea785"}, {"sha": "db133901042f7ccc8194b240c8381281bc4be575", "url": "https://api.github.com/repos/rust-lang/rust/commits/db133901042f7ccc8194b240c8381281bc4be575", "html_url": "https://github.com/rust-lang/rust/commit/db133901042f7ccc8194b240c8381281bc4be575"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "fcd6f7a27b6e3ff6b917981cb2b99e6998bb9d2c", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb4553299ca2717e6c106cd6db36b7dc6c959aac/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4553299ca2717e6c106cd6db36b7dc6c959aac/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=fb4553299ca2717e6c106cd6db36b7dc6c959aac", "patch": "@@ -14,7 +14,7 @@ use sync::atomic::{AtomicUsize, Ordering};\n \n pub struct RWLock {\n     inner: UnsafeCell<libc::pthread_rwlock_t>,\n-    write_locked: UnsafeCell<bool>,\n+    write_locked: UnsafeCell<bool>, // guarded by the `inner` RwLock\n     num_readers: AtomicUsize,\n }\n \n@@ -52,13 +52,13 @@ impl RWLock {\n         // allow that because it could lead to aliasing issues.\n         if r == libc::EAGAIN {\n             panic!(\"rwlock maximum reader count exceeded\");\n-        } else if r == libc::EDEADLK || *self.write_locked.get() {\n+        } else if r == libc::EDEADLK || (r == 0 && *self.write_locked.get()) {\n             if r == 0 {\n                 self.raw_unlock();\n             }\n             panic!(\"rwlock read lock would result in deadlock\");\n         } else {\n-            debug_assert_eq!(r, 0);\n+            assert_eq!(r, 0);\n             self.num_readers.fetch_add(1, Ordering::Relaxed);\n         }\n     }"}]}