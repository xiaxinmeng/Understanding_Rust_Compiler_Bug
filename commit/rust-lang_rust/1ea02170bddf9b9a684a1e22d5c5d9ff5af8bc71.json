{"sha": "1ea02170bddf9b9a684a1e22d5c5d9ff5af8bc71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYTAyMTcwYmRkZjliOWE2ODRhMWUyMmQ1YzVkOWZmNWFmOGJjNzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-01-07T20:20:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-01-08T01:01:07Z"}, "message": "doc: Highlight the testing guide correctly", "tree": {"sha": "31124609a52d8e57f6ac7ef11bc56328254a20fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31124609a52d8e57f6ac7ef11bc56328254a20fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea02170bddf9b9a684a1e22d5c5d9ff5af8bc71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea02170bddf9b9a684a1e22d5c5d9ff5af8bc71", "html_url": "https://github.com/rust-lang/rust/commit/1ea02170bddf9b9a684a1e22d5c5d9ff5af8bc71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea02170bddf9b9a684a1e22d5c5d9ff5af8bc71/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77ec04487b9e9c2673ed78c88beddd469d5de7b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/77ec04487b9e9c2673ed78c88beddd469d5de7b7", "html_url": "https://github.com/rust-lang/rust/commit/77ec04487b9e9c2673ed78c88beddd469d5de7b7"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "b56cea12273f434a0f23113b455ecb766516d1e6", "filename": "doc/guide-testing.md", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1ea02170bddf9b9a684a1e22d5c5d9ff5af8bc71/doc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ea02170bddf9b9a684a1e22d5c5d9ff5af8bc71/doc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-testing.md?ref=1ea02170bddf9b9a684a1e22d5c5d9ff5af8bc71", "patch": "@@ -4,7 +4,7 @@\n \n To create test functions, add a `#[test]` attribute like this:\n \n-```rust\n+~~~\n fn return_two() -> int {\n     2\n }\n@@ -14,17 +14,17 @@ fn return_two_test() {\n     let x = return_two();\n     assert!(x == 2);\n }\n-```\n+~~~\n \n To run these tests, use `rustc --test`:\n \n-```\n+~~~ {.notrust}\n $ rustc --test foo.rs; ./foo\n running 1 test\n test return_two_test ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n-```\n+~~~\n \n `rustc foo.rs` will *not* compile the tests, since `#[test]` implies\n `#[cfg(test)]`. The `--test` flag to `rustc` implies `--cfg test`.\n@@ -35,12 +35,12 @@ test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n Rust has built in support for simple unit testing. Functions can be\n marked as unit tests using the 'test' attribute.\n \n-```rust\n+~~~\n #[test]\n fn return_none_if_empty() {\n     // ... test code ...\n }\n-```\n+~~~\n \n A test function's signature must have no arguments and no return\n value. To run the tests in a crate, it must be compiled with the\n@@ -54,15 +54,15 @@ then the test fails.\n When compiling a crate with the '--test' flag '--cfg test' is also\n implied, so that tests can be conditionally compiled.\n \n-```rust\n+~~~\n #[cfg(test)]\n mod tests {\n     #[test]\n     fn return_none_if_empty() {\n       // ... test code ...\n     }\n }\n-```\n+~~~\n \n Additionally #[test] items behave as if they also have the\n #[cfg(test)] attribute, and will not be compiled when the --test flag\n@@ -79,14 +79,14 @@ Tests that are intended to fail can be annotated with the\n task to fail then the test will be counted as successful; otherwise it\n will be counted as a failure. For example:\n \n-```rust\n+~~~\n #[test]\n #[should_fail]\n fn test_out_of_bounds_failure() {\n     let v: [int] = [];\n     v[0];\n }\n-```\n+~~~\n \n A test runner built with the '--test' flag supports a limited set of\n arguments to control which tests are run: the first free argument\n@@ -126,7 +126,7 @@ amount.\n \n For example:\n \n-```rust\n+~~~\n extern mod extra;\n use std::vec;\n \n@@ -141,7 +141,7 @@ fn initialise_a_vector(b: &mut extra::test::BenchHarness) {\n     b.iter(|| {vec::from_elem(1024, 0u64);} );\n     b.bytes = 1024 * 8;\n }\n-```\n+~~~\n \n The benchmark runner will calibrate measurement of the benchmark\n function to run the `iter` block \"enough\" times to get a reliable\n@@ -168,7 +168,7 @@ test-runner. Benchmarks are compiled-in but not executed by default.\n \n ### Typical test run\n \n-```\n+~~~ {.notrust}\n > mytests\n \n running 30 tests\n@@ -178,11 +178,11 @@ running driver::tests::mytest2 ... ignored\n running driver::tests::mytest30 ... ok\n \n result: ok. 28 passed; 0 failed; 2 ignored\n-```\n+~~~ {.notrust}\n \n ### Test run with failures\n \n-```\n+~~~ {.notrust}\n > mytests\n \n running 30 tests\n@@ -192,23 +192,23 @@ running driver::tests::mytest2 ... ignored\n running driver::tests::mytest30 ... FAILED\n \n result: FAILED. 27 passed; 1 failed; 2 ignored\n-```\n+~~~\n \n ### Running ignored tests\n \n-```\n+~~~ {.notrust}\n > mytests --ignored\n \n running 2 tests\n running driver::tests::mytest2 ... failed\n running driver::tests::mytest10 ... ok\n \n result: FAILED. 1 passed; 1 failed; 0 ignored\n-```\n+~~~\n \n ### Running a subset of tests\n \n-```\n+~~~ {.notrust}\n > mytests mytest1\n \n running 11 tests\n@@ -218,19 +218,19 @@ running driver::tests::mytest10 ... ignored\n running driver::tests::mytest19 ... ok\n \n result: ok. 11 passed; 0 failed; 1 ignored\n-```\n+~~~\n \n ### Running benchmarks\n \n-```\n+~~~ {.notrust}\n > mytests --bench\n \n running 2 tests\n test bench_sum_1024_ints ... bench: 709 ns/iter (+/- 82)\n test initialise_a_vector ... bench: 424 ns/iter (+/- 99) = 19320 MB/s\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 2 measured\n-```\n+~~~\n \n ## Saving and ratcheting metrics\n "}]}