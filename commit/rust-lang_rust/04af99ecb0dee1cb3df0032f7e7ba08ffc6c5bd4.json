{"sha": "04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YWY5OWVjYjBkZWUxY2IzZGYwMDMyZjdlN2JhMDhmZmM2YzViZDQ=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-09T01:09:42Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-15T16:26:51Z"}, "message": "First step towards port handles.", "tree": {"sha": "7fdf9e23831a55a67f110565e907260b70421704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fdf9e23831a55a67f110565e907260b70421704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "html_url": "https://github.com/rust-lang/rust/commit/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/comments", "author": null, "committer": null, "parents": [{"sha": "a21ebb2f5ec5f158c3a2bbbccb76980624b1815f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f", "html_url": "https://github.com/rust-lang/rust/commit/a21ebb2f5ec5f158c3a2bbbccb76980624b1815f"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "2c4db3e0b312bfc92029b3cb380ad128f5bebbfc", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "patch": "@@ -65,6 +65,7 @@ struct type_desc;\n struct frame_glue_fns;\n \n typedef intptr_t rust_task_id;\n+typedef intptr_t rust_port_id;\n \n #ifndef __i386__\n #error \"Target CPU not supported.\""}, {"sha": "448babfbdeef5b89b250924d139e4548babea8f6", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "patch": "@@ -8,6 +8,8 @@ rust_port::rust_port(rust_task *task, size_t unit_sz)\n     LOG(task, comm,\n         \"new rust_port(task=0x%\" PRIxPTR \", unit_sz=%d) -> port=0x%\"\n         PRIxPTR, (uintptr_t)task, unit_sz, (uintptr_t)this);\n+\n+    id = task->register_port(this);\n }\n \n rust_port::~rust_port() {\n@@ -19,6 +21,8 @@ rust_port::~rust_port() {\n         rust_chan *chan = chans.peek();\n         chan->disassociate();\n     }\n+\n+    task->release_port(id);\n }\n \n bool rust_port::receive(void *dptr) {"}, {"sha": "9dac42244efa9ac33aed1882090f7d8190d2672d", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "patch": "@@ -2,10 +2,13 @@\n #define RUST_PORT_H\n \n class rust_port : public kernel_owned<rust_port>, public rust_cond {\n-\n public:\n     RUST_REFCOUNTED(rust_port);\n \n+private:\n+    rust_port_id id;\n+\n+public:\n     rust_kernel *kernel;\n     rust_task *task;\n     size_t unit_sz;"}, {"sha": "26ffcb307a535f17ec507c6bf49aadf015bf39ab", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "patch": "@@ -75,6 +75,7 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n     cond_name(\"none\"),\n     supervisor(spawner),\n     list_index(-1),\n+    next_port_id(0),\n     rendezvous_ptr(0),\n     running_on(-1),\n     pinned_on(-1),\n@@ -105,8 +106,6 @@ rust_task::~rust_task()\n     del_stk(this, stk);\n }\n \n-extern \"C\" void rust_new_exit_task_glue();\n-\n struct spawn_args {\n     rust_task *task;\n     uintptr_t a3;\n@@ -495,6 +494,26 @@ void rust_task::on_wakeup(rust_task::wakeup_callback *callback) {\n     _on_wakeup = callback;\n }\n \n+rust_port_id rust_task::register_port(rust_port *port) {\n+    scoped_lock with(lock);\n+\n+    rust_port_id id = next_port_id++;\n+    port_table.put(id, port);\n+    return id;\n+}\n+\n+void rust_task::release_port(rust_port_id id) {\n+    scoped_lock with(lock);\n+    port_table.remove(id);\n+}\n+\n+rust_port *rust_task::get_port_by_id(rust_port_id id) {\n+    scoped_lock with(lock);\n+    rust_port *port = NULL;\n+    port_table.get(id, &port);\n+    return port;\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "4286aaa8b41e452b76d092b3f70fc24c8d1ae566", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "patch": "@@ -59,6 +59,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     size_t gc_alloc_accum;\n \n     rust_task_id id;\n+    rust_port_id next_port_id;\n \n     // Keeps track of the last time this task yielded.\n     timer yield_timer;\n@@ -96,6 +97,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     lock_and_signal lock;\n \n+    hash_map<rust_port_id, rust_port *> port_table;\n+\n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_scheduler *sched,\n               rust_task_list *state,\n@@ -161,6 +164,10 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void unpin();\n \n     void on_wakeup(wakeup_callback *callback);\n+\n+    rust_port_id register_port(rust_port *port);\n+    void release_port(rust_port_id id);\n+    rust_port *get_port_by_id(rust_port_id id);\n };\n \n //"}]}