{"sha": "8640360870a32ff836a922d68b6988116610edbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDAzNjA4NzBhMzJmZjgzNmE5MjJkNjhiNjk4ODExNjYxMGVkYmM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-05T09:29:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-05T09:29:53Z"}, "message": "Rollup merge of #78733 - matthiaskrgr:cl11ppy, r=jyn514\n\nfix a couple of clippy warnings:\n\nfilter_next\nmanual_strip\nredundant_static_lifetimes\nsingle_char_pattern\nunnecessary_cast\nunused_unit\nop_ref\nredundant_closure\nuseless_conversion", "tree": {"sha": "9f9fa73119f1630547643a1fbb1d30434d114e3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f9fa73119f1630547643a1fbb1d30434d114e3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8640360870a32ff836a922d68b6988116610edbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfo8YRCRBK7hj4Ov3rIwAAdHIIAGgF45ajVJZtbJJgoHI+OyPu\nfRiBrRlJMDZROvKtqg0t+MGk1fK4fotJkMWNqrP9HamL7ISinT7v9FoJQgqSnZWr\nrmYizOmmZSWqSbwhxI9tlfFWCBn2bKKBFLgPK5+8dwPTo3V+ugGDV7FreioimrtH\njVjeJ2emG3ZID7G58z2ctrgczzFMyBLwDvyrK3kSCh6QK/ejJqTqjeSRGVprdCwF\nNn55q5ZH6tOUU5xB2WB1NIM3s0Pr+HObcR6oNEASq3JQsXRAfoFwiF5mFfjxcvrl\n2VH5p0ftRNr3Gc0AceSw6aqm/H8dYTE35L2UIg7FqTzMYQjKDKrFxupAlrk5rus=\n=ZQ5/\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f9fa73119f1630547643a1fbb1d30434d114e3f\nparent 9bbb052af8150c054e3fbb9875bf018490805305\nparent bcd2f2df67ac755b23f540a0657572eade281f12\nauthor Mara Bos <m-ou.se@m-ou.se> 1604568593 +0100\ncommitter GitHub <noreply@github.com> 1604568593 +0100\n\nRollup merge of #78733 - matthiaskrgr:cl11ppy, r=jyn514\n\nfix a couple of clippy warnings:\n\nfilter_next\nmanual_strip\nredundant_static_lifetimes\nsingle_char_pattern\nunnecessary_cast\nunused_unit\nop_ref\nredundant_closure\nuseless_conversion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8640360870a32ff836a922d68b6988116610edbc", "html_url": "https://github.com/rust-lang/rust/commit/8640360870a32ff836a922d68b6988116610edbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8640360870a32ff836a922d68b6988116610edbc/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bbb052af8150c054e3fbb9875bf018490805305", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbb052af8150c054e3fbb9875bf018490805305", "html_url": "https://github.com/rust-lang/rust/commit/9bbb052af8150c054e3fbb9875bf018490805305"}, {"sha": "bcd2f2df67ac755b23f540a0657572eade281f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd2f2df67ac755b23f540a0657572eade281f12", "html_url": "https://github.com/rust-lang/rust/commit/bcd2f2df67ac755b23f540a0657572eade281f12"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "ec87a88f4aba79d8f2844d456431fdc0666a6a1a", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -360,7 +360,7 @@ pub fn list_contains_name(items: &[NestedMetaItem], name: Symbol) -> bool {\n impl MetaItem {\n     fn token_trees_and_spacings(&self) -> Vec<TreeAndSpacing> {\n         let mut idents = vec![];\n-        let mut last_pos = BytePos(0 as u32);\n+        let mut last_pos = BytePos(0_u32);\n         for (i, segment) in self.path.segments.iter().enumerate() {\n             let is_first = i == 0;\n             if !is_first {"}, {"sha": "868989539d4fda6dca5a521d351263bf8c1484dd", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -739,7 +739,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 \"cannot infer {} {} {} `{}`{}\",\n                 kind_str, preposition, descr, type_name, parent_desc\n             )\n-            .into()\n         }\n     }\n }"}, {"sha": "3ed7d20ae4571c8ebdbd24a1522b6365b578500e", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -246,10 +246,10 @@ pub fn get_codegen_backend(sopts: &config::Options) -> Box<dyn CodegenBackend> {\n \n     INIT.call_once(|| {\n         #[cfg(feature = \"llvm\")]\n-        const DEFAULT_CODEGEN_BACKEND: &'static str = \"llvm\";\n+        const DEFAULT_CODEGEN_BACKEND: &str = \"llvm\";\n \n         #[cfg(not(feature = \"llvm\"))]\n-        const DEFAULT_CODEGEN_BACKEND: &'static str = \"cranelift\";\n+        const DEFAULT_CODEGEN_BACKEND: &str = \"cranelift\";\n \n         let codegen_name = sopts\n             .debugging_opts\n@@ -414,11 +414,10 @@ pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend\n             let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n             sysroot.join(libdir).with_file_name(\"codegen-backends\")\n         })\n-        .filter(|f| {\n+        .find(|f| {\n             info!(\"codegen backend candidate: {}\", f.display());\n             f.exists()\n-        })\n-        .next();\n+        });\n     let sysroot = sysroot.unwrap_or_else(|| {\n         let candidates = sysroot_candidates\n             .iter()"}, {"sha": "978f08927c6ef9a7af452fa226f3f0ce3d64f653", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -399,7 +399,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         def_id: DefId,\n         id: Option<HirId>,\n         span: Span,\n-        unmarked: impl FnOnce(Span, DefId) -> (),\n+        unmarked: impl FnOnce(Span, DefId),\n     ) {\n         let soft_handler = |lint, span, msg: &_| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {"}, {"sha": "709ffc3049ab81fb8d0e500f096cc521f2656e44", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -46,7 +46,7 @@ impl SwitchTargets {\n     pub fn new(targets: impl Iterator<Item = (u128, BasicBlock)>, otherwise: BasicBlock) -> Self {\n         let (values, mut targets): (SmallVec<_>, SmallVec<_>) = targets.unzip();\n         targets.push(otherwise);\n-        Self { values: values.into(), targets }\n+        Self { values, targets }\n     }\n \n     /// Builds a switch targets definition that jumps to `then` if the tested value equals `value`,"}, {"sha": "1474c7abfadaf0c55435905223f41c9b08901967", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -120,7 +120,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let move_out = self.move_data.moves[(*move_site).moi];\n                 let moved_place = &self.move_data.move_paths[move_out.path].place;\n                 // `*(_1)` where `_1` is a `Box` is actually a move out.\n-                let is_box_move = moved_place.as_ref().projection == &[ProjectionElem::Deref]\n+                let is_box_move = moved_place.as_ref().projection == [ProjectionElem::Deref]\n                     && self.body.local_decls[moved_place.local].ty.is_box();\n \n                 !is_box_move"}, {"sha": "82c0b924f287e3330facfed2e52b6bb43d654249", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n             };\n \n             // Check that destinations are identical, and if not, then don't optimize this block\n-            if &bbs[first].terminator().kind != &bbs[second].terminator().kind {\n+            if bbs[first].terminator().kind != bbs[second].terminator().kind {\n                 continue;\n             }\n "}, {"sha": "14f8c7b09f8e10b1b58b7c7b8d0597bcbebb87f7", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -1886,9 +1886,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n                             introduce_suggestion\n                                 .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n-                        } else if snippet.starts_with(\"&'_ \") {\n-                            introduce_suggestion\n-                                .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n+                        } else if let Some(stripped) = snippet.strip_prefix(\"&'_ \") {\n+                            introduce_suggestion.push((param.span, format!(\"&'a {}\", &stripped)));\n                         }\n                     }\n                 }"}, {"sha": "f52b64f488345edf1cfde7957f451d9cec3edbc6", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -1574,7 +1574,7 @@ fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {\n \n /// Removes UTF-8 BOM, if any.\n fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {\n-    if src.starts_with(\"\\u{feff}\") {\n+    if src.starts_with('\\u{feff}') {\n         src.drain(..3);\n         normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });\n     }"}, {"sha": "2d57c39f7c7e1ec2a1154d22ef6628a80984bf70", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -1388,11 +1388,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     ) {\n         let get_trait_impl = |trait_def_id| {\n-            self.tcx.find_map_relevant_impl(\n-                trait_def_id,\n-                trait_ref.skip_binder().self_ty(),\n-                |impl_def_id| Some(impl_def_id),\n-            )\n+            self.tcx.find_map_relevant_impl(trait_def_id, trait_ref.skip_binder().self_ty(), Some)\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n         let all_traits = self.tcx.all_traits(LOCAL_CRATE);"}, {"sha": "538c14c6b720e99cbd5cdb2cca17075e07721be0", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8640360870a32ff836a922d68b6988116610edbc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=8640360870a32ff836a922d68b6988116610edbc", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         Err(ErrorHandled::TooGeneric) => {\n                             pending_obligation.stalled_on = substs\n                                 .iter()\n-                                .filter_map(|ty| TyOrConstInferVar::maybe_from_generic_arg(ty))\n+                                .filter_map(TyOrConstInferVar::maybe_from_generic_arg)\n                                 .collect();\n                             ProcessResult::Unchanged\n                         }"}]}