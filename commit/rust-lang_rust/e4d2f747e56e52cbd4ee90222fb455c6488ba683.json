{"sha": "e4d2f747e56e52cbd4ee90222fb455c6488ba683", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZDJmNzQ3ZTU2ZTUyY2JkNGVlOTAyMjJmYjQ1NWM2NDg4YmE2ODM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T18:04:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T18:04:43Z"}, "message": "Rollup merge of #68700 - withoutboats:wake-trait, r=withoutboats\n\nAdd Wake trait for safe construction of Wakers.\n\nCurrently, constructing a waker requires calling the unsafe `Waker::from_raw` API. This API requires the user to manually construct a vtable for the waker themself - which is both cumbersome and very error prone. This API would provide an ergonomic, straightforward and guaranteed memory-safe way of constructing a waker.\n\nIt has been our longstanding intention that the `Waker` type essentially function as an `Arc<dyn Wake>`, with a `Wake` trait as defined here. Two considerations prevented the original API from being shipped as simply an `Arc<dyn Wake>`:\n\n- We want to support futures on embedded systems, which may not have an allocator, and in optimized executors for which this API may not be best-suited. Therefore, we have always explicitly supported the maximally-flexible (but also memory-unsafe) `RawWaker` API, and `Waker` has always lived in libcore.\n- Because `Waker` lives in libcore and `Arc` lives in liballoc, it has not been feasible to provide a constructor for `Waker` from `Arc<dyn Wake>`.\n\nTherefore, the Wake trait was left out of the initial version of the task waker API.\n\nHowever, as Rust 1.41, it is possible under the more flexible orphan rules to implement `From<Arc<W>> for Waker where W: Wake` in liballoc. Therefore, we can now define this constructor even though `Waker` lives in libcore.\n\nThis PR adds these APIs:\n\n- A `Wake` trait, which contains two methods\n    - A required method `wake`, which is called by `Waker::wake`\n    - A provided method `wake_by_ref`, which is called by `Waker::wake_by_ref` and which implementors can override if they can optimize this use case.\n- An implementation of `From<Arc<W>> for Waker where W: Wake + Send + Sync + 'static`\n- A similar implementation of `From<Arc<W>> for RawWaker`.", "tree": {"sha": "b2ffad434ce968422776356d812240ad49f56355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2ffad434ce968422776356d812240ad49f56355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4d2f747e56e52cbd4ee90222fb455c6488ba683", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeePo7CRBK7hj4Ov3rIwAAdHIIALJXChwcI+Ow0EXCYk/qWJKo\nRQVQoWWT2Tvfmh2V2aAuR9XenizsVpeU/Cp9MMqfOGNH0lFVOnp3Db+0yqxCb2r/\nKeiY/rS56npqIBze3hIzB5v5Jv5f2Rat8RqG7uYAGX83c2x8W0ll87sTO8O/psxx\nlNxWOuVCe58ohA5LZYSmQ6AtuOqCEUWvqNOWakLpyoffoKeJkSOHBTQmf8Mrrbgr\nfR2kup9FSjf6xf9kveynHqoheCvXroPBllJ0pLPo2RhmNWzjrzi05ldzwuq+AbGE\nq+hWfWVJXgHxW7pOpXwGYQvwdGLYQMXmsuwiNd7emhxxnoiSGCIsk5mnRMvo+lY=\n=hSPS\n-----END PGP SIGNATURE-----\n", "payload": "tree b2ffad434ce968422776356d812240ad49f56355\nparent 8549cfed4bbcdd28ef3a36e5de72c000e32f650e\nparent 32f5724e8ac35e5a314313c6053ff46702223b27\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584986683 +0100\ncommitter GitHub <noreply@github.com> 1584986683 +0100\n\nRollup merge of #68700 - withoutboats:wake-trait, r=withoutboats\n\nAdd Wake trait for safe construction of Wakers.\n\nCurrently, constructing a waker requires calling the unsafe `Waker::from_raw` API. This API requires the user to manually construct a vtable for the waker themself - which is both cumbersome and very error prone. This API would provide an ergonomic, straightforward and guaranteed memory-safe way of constructing a waker.\n\nIt has been our longstanding intention that the `Waker` type essentially function as an `Arc<dyn Wake>`, with a `Wake` trait as defined here. Two considerations prevented the original API from being shipped as simply an `Arc<dyn Wake>`:\n\n- We want to support futures on embedded systems, which may not have an allocator, and in optimized executors for which this API may not be best-suited. Therefore, we have always explicitly supported the maximally-flexible (but also memory-unsafe) `RawWaker` API, and `Waker` has always lived in libcore.\n- Because `Waker` lives in libcore and `Arc` lives in liballoc, it has not been feasible to provide a constructor for `Waker` from `Arc<dyn Wake>`.\n\nTherefore, the Wake trait was left out of the initial version of the task waker API.\n\nHowever, as Rust 1.41, it is possible under the more flexible orphan rules to implement `From<Arc<W>> for Waker where W: Wake` in liballoc. Therefore, we can now define this constructor even though `Waker` lives in libcore.\n\nThis PR adds these APIs:\n\n- A `Wake` trait, which contains two methods\n    - A required method `wake`, which is called by `Waker::wake`\n    - A provided method `wake_by_ref`, which is called by `Waker::wake_by_ref` and which implementors can override if they can optimize this use case.\n- An implementation of `From<Arc<W>> for Waker where W: Wake + Send + Sync + 'static`\n- A similar implementation of `From<Arc<W>> for RawWaker`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d2f747e56e52cbd4ee90222fb455c6488ba683", "html_url": "https://github.com/rust-lang/rust/commit/e4d2f747e56e52cbd4ee90222fb455c6488ba683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4d2f747e56e52cbd4ee90222fb455c6488ba683/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "html_url": "https://github.com/rust-lang/rust/commit/8549cfed4bbcdd28ef3a36e5de72c000e32f650e"}, {"sha": "32f5724e8ac35e5a314313c6053ff46702223b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f5724e8ac35e5a314313c6053ff46702223b27", "html_url": "https://github.com/rust-lang/rust/commit/32f5724e8ac35e5a314313c6053ff46702223b27"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "d55a1a3b63584185cdb60e86ee6f26d650334796", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4d2f747e56e52cbd4ee90222fb455c6488ba683/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d2f747e56e52cbd4ee90222fb455c6488ba683/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e4d2f747e56e52cbd4ee90222fb455c6488ba683", "patch": "@@ -161,6 +161,8 @@ pub mod str;\n pub mod string;\n #[cfg(target_has_atomic = \"ptr\")]\n pub mod sync;\n+#[cfg(target_has_atomic = \"ptr\")]\n+pub mod task;\n #[cfg(test)]\n mod tests;\n pub mod vec;"}, {"sha": "981095302c73002f623ccee646545c3e013dc31f", "filename": "src/liballoc/task.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e4d2f747e56e52cbd4ee90222fb455c6488ba683/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d2f747e56e52cbd4ee90222fb455c6488ba683/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=e4d2f747e56e52cbd4ee90222fb455c6488ba683", "patch": "@@ -0,0 +1,87 @@\n+#![unstable(feature = \"wake_trait\", issue = \"69912\")]\n+//! Types and Traits for working with asynchronous tasks.\n+use core::mem::{self, ManuallyDrop};\n+use core::task::{RawWaker, RawWakerVTable, Waker};\n+\n+use crate::sync::Arc;\n+\n+/// The implementation of waking a task on an executor.\n+///\n+/// This trait can be used to create a [`Waker`]. An executor can define an\n+/// implementation of this trait, and use that to construct a Waker to pass\n+/// to the tasks that are executed on that executor.\n+///\n+/// This trait is a memory-safe and ergonomic alternative to constructing a\n+/// [`RawWaker`]. It supports the common executor design in which the data\n+/// used to wake up a task is stored in an [`Arc`]. Some executors (especially\n+/// those for embedded systems) cannot use this API, which is why [`RawWaker`]\n+/// exists as an alternative for those systems.\n+#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+pub trait Wake {\n+    /// Wake this task.\n+    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    fn wake(self: Arc<Self>);\n+\n+    /// Wake this task without consuming the waker.\n+    ///\n+    /// If an executor supports a cheaper way to wake without consuming the\n+    /// waker, it should override this method. By default, it clones the\n+    /// [`Arc`] and calls `wake` on the clone.\n+    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    fn wake_by_ref(self: &Arc<Self>) {\n+        self.clone().wake();\n+    }\n+}\n+\n+#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n+    fn from(waker: Arc<W>) -> Waker {\n+        // SAFETY: This is safe because raw_waker safely constructs\n+        // a RawWaker from Arc<W>.\n+        unsafe { Waker::from_raw(raw_waker(waker)) }\n+    }\n+}\n+\n+#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n+    fn from(waker: Arc<W>) -> RawWaker {\n+        raw_waker(waker)\n+    }\n+}\n+\n+// NB: This private function for constructing a RawWaker is used, rather than\n+// inlining this into the `From<Arc<W>> for RawWaker` impl, to ensure that\n+// the safety of `From<Arc<W>> for Waker` does not depend on the correct\n+// trait dispatch - instead both impls call this function directly and\n+// explicitly.\n+#[inline(always)]\n+fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n+    // Increment the reference count of the arc to clone it.\n+    unsafe fn clone_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) -> RawWaker {\n+        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n+        mem::forget(Arc::clone(&waker));\n+        raw_waker(waker)\n+    }\n+\n+    // Wake by value, moving the Arc into the Wake::wake function\n+    unsafe fn wake<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n+        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n+        <W as Wake>::wake(waker);\n+    }\n+\n+    // Wake by reference, wrap the waker in ManuallyDrop to avoid dropping it\n+    unsafe fn wake_by_ref<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n+        let waker: ManuallyDrop<Arc<W>> = ManuallyDrop::new(Arc::from_raw(waker as *const W));\n+        <W as Wake>::wake_by_ref(&waker);\n+    }\n+\n+    // Decrement the reference count of the Arc on drop\n+    unsafe fn drop_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n+        mem::drop(Arc::from_raw(waker as *const W));\n+    }\n+\n+    RawWaker::new(\n+        Arc::into_raw(waker) as *const (),\n+        &RawWakerVTable::new(clone_waker::<W>, wake::<W>, wake_by_ref::<W>, drop_waker::<W>),\n+    )\n+}"}, {"sha": "e5dad307a209accac25554c99f92cace197cc740", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4d2f747e56e52cbd4ee90222fb455c6488ba683/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d2f747e56e52cbd4ee90222fb455c6488ba683/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e4d2f747e56e52cbd4ee90222fb455c6488ba683", "patch": "@@ -310,6 +310,7 @@\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]\n+#![feature(wake_trait)]\n // NB: the above list is sorted to minimize merge conflicts.\n #![default_lib_allocator]\n \n@@ -463,9 +464,14 @@ pub mod time;\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub mod task {\n     //! Types and Traits for working with asynchronous tasks.\n+\n     #[doc(inline)]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub use core::task::*;\n+\n+    #[doc(inline)]\n+    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    pub use alloc::task::*;\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}]}