{"sha": "ad21976fbc4776fe09f98cd087fbe4cecf23cd84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjE5NzZmYmM0Nzc2ZmUwOWY5OGNkMDg3ZmJlNGNlY2YyM2NkODQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T06:10:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T07:20:05Z"}, "message": "core: Add vec::capacity", "tree": {"sha": "fa22db7b2756e8ea4e90130de78678fb0c7bc1b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa22db7b2756e8ea4e90130de78678fb0c7bc1b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad21976fbc4776fe09f98cd087fbe4cecf23cd84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad21976fbc4776fe09f98cd087fbe4cecf23cd84", "html_url": "https://github.com/rust-lang/rust/commit/ad21976fbc4776fe09f98cd087fbe4cecf23cd84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad21976fbc4776fe09f98cd087fbe4cecf23cd84/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e42c5cf19bea49adc718e8502d364897bebac66", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e42c5cf19bea49adc718e8502d364897bebac66", "html_url": "https://github.com/rust-lang/rust/commit/5e42c5cf19bea49adc718e8502d364897bebac66"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "e4626c97c3eed47d20eaed25767e8b86af3cb49d", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad21976fbc4776fe09f98cd087fbe4cecf23cd84/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad21976fbc4776fe09f98cd087fbe4cecf23cd84/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=ad21976fbc4776fe09f98cd087fbe4cecf23cd84", "patch": "@@ -9,6 +9,7 @@ export is_not_empty;\n export same_length;\n export reserve;\n export reserve_at_least;\n+export capacity;\n export len;\n export from_fn;\n export from_elem;\n@@ -134,6 +135,14 @@ fn reserve_at_least<T>(&v: [const T], n: uint) {\n     reserve(v, uint::next_power_of_two(n));\n }\n \n+#[doc = \"\n+Returns the number of elements the vector can hold without reallocating\n+\"]\n+fn capacity<T>(&&v: [const T]) -> uint unsafe {\n+    let repr: **unsafe::vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n+    (**repr).alloc / sys::size_of::<T>()\n+}\n+\n #[doc = \"Returns the length of a vector\"]\n #[inline(always)]\n pure fn len<T>(&&v: [const T]) -> uint unsafe {\n@@ -1801,6 +1810,16 @@ mod tests {\n         unshift(x, 0);\n         assert x == [0, 1, 2, 3];\n     }\n+\n+    #[test]\n+    fn test_capacity() {\n+        let mut v = [0u64];\n+        reserve(v, 10u);\n+        assert capacity(v) == 10u;\n+        let mut v = [0u32];\n+        reserve(v, 10u);\n+        assert capacity(v) == 10u;\n+    }\n }\n \n // Local Variables:"}]}