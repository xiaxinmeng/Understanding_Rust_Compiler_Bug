{"sha": "bafddd4c0aa7939292c992e300593724b8e52aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZmRkZDRjMGFhNzkzOTI5MmM5OTJlMzAwNTkzNzI0YjhlNTJhYTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-13T14:18:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-13T14:18:40Z"}, "message": "Rollup merge of #62636 - alexcrichton:assert-build-cargo-once, r=Mark-Simulacrum\n\nrustbuild: Improve assert about building tools once\n\nIn developing #61557 I noticed that there were two parts of our tools\nthat were rebuilt twice on CI. One was rustfmt fixed in #61557, but\nanother was Cargo. The actual fix for Cargo's double compile was\nrust-lang/cargo#7010 and took some time to propagate here. In an effort\nto continue to assert that Cargo is itself not compiled twice, I updated\nthe assertion in rustbuild at the time of working on #61557 but couldn't\nland it because the fix wouldn't be ready until the next bootstrap.\n\nThe next bootstrap is now here, so the fix can now land! This does not\nchange the behavior of rustbuild but it is intended to catch the\nprevious iteration of compiling cargo twice. The main update here was to\nconsider more files than those in `$target/release/deps` but also\nconsider those in `$target/release`. That's where, for example,\n`libcargo.rlib` shows up and it's the file we learn about, and that's\nwhat we want to deduplicate.", "tree": {"sha": "de29762199d2bca5ba00c36b28fb7ca7feb346d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de29762199d2bca5ba00c36b28fb7ca7feb346d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bafddd4c0aa7939292c992e300593724b8e52aa7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdKehACRBK7hj4Ov3rIwAAdHIIAJ+q9qcXYaFRewRhKhkb+nms\ndcpqvnlmFNrC8snzu22NInRCfB1wsv4m3MZF+ppIMxHL/4Eypva0gEuU485kw+c+\nPkBx9X5PAI2MsE6mhpSRFn0lomp9l6Cq9QMHr4y3m3jMNi5g6OqmFgJQzgSlShnB\nUrRJeeDUkyA7gYSNCbQOj5IT0dF3YzPafDKtBl14SoYlcwxCr2gKwSMROCXQbfVy\nSZNs9nrknI5TTlvDeLTZoYWg8aITUOH9HqLwuXkcbt8aWp27PTbDfsisHyRVG8tH\nqqz0Un0fUFmBsHKje0XaPmjVInsnIQA2Iz5/Nlvo/adAIjt5Xc41SiONLtUNWnw=\n=0RpJ\n-----END PGP SIGNATURE-----\n", "payload": "tree de29762199d2bca5ba00c36b28fb7ca7feb346d5\nparent 4fe6e63cd60ade52cd24616e17de5c570b06b0e7\nparent 278e5fd2152bfba3234f97560a378bdb03e24a3d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1563027520 +0200\ncommitter GitHub <noreply@github.com> 1563027520 +0200\n\nRollup merge of #62636 - alexcrichton:assert-build-cargo-once, r=Mark-Simulacrum\n\nrustbuild: Improve assert about building tools once\n\nIn developing #61557 I noticed that there were two parts of our tools\nthat were rebuilt twice on CI. One was rustfmt fixed in #61557, but\nanother was Cargo. The actual fix for Cargo's double compile was\nrust-lang/cargo#7010 and took some time to propagate here. In an effort\nto continue to assert that Cargo is itself not compiled twice, I updated\nthe assertion in rustbuild at the time of working on #61557 but couldn't\nland it because the fix wouldn't be ready until the next bootstrap.\n\nThe next bootstrap is now here, so the fix can now land! This does not\nchange the behavior of rustbuild but it is intended to catch the\nprevious iteration of compiling cargo twice. The main update here was to\nconsider more files than those in `$target/release/deps` but also\nconsider those in `$target/release`. That's where, for example,\n`libcargo.rlib` shows up and it's the file we learn about, and that's\nwhat we want to deduplicate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bafddd4c0aa7939292c992e300593724b8e52aa7", "html_url": "https://github.com/rust-lang/rust/commit/bafddd4c0aa7939292c992e300593724b8e52aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bafddd4c0aa7939292c992e300593724b8e52aa7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fe6e63cd60ade52cd24616e17de5c570b06b0e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe6e63cd60ade52cd24616e17de5c570b06b0e7", "html_url": "https://github.com/rust-lang/rust/commit/4fe6e63cd60ade52cd24616e17de5c570b06b0e7"}, {"sha": "278e5fd2152bfba3234f97560a378bdb03e24a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/278e5fd2152bfba3234f97560a378bdb03e24a3d", "html_url": "https://github.com/rust-lang/rust/commit/278e5fd2152bfba3234f97560a378bdb03e24a3d"}], "stats": {"total": 69, "additions": 48, "deletions": 21}, "files": [{"sha": "a9269a7ad24aba7a9f65808b4937bc0605e77690", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bafddd4c0aa7939292c992e300593724b8e52aa7/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafddd4c0aa7939292c992e300593724b8e52aa7/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=bafddd4c0aa7939292c992e300593724b8e52aa7", "patch": "@@ -109,36 +109,63 @@ impl Step for ToolBuild {\n                     continue\n                 }\n \n-                // Don't worry about libs that turn out to be host dependencies\n-                // or build scripts, we only care about target dependencies that\n-                // are in `deps`.\n-                if let Some(maybe_target) = val.1\n-                    .parent()                   // chop off file name\n-                    .and_then(|p| p.parent())   // chop off `deps`\n-                    .and_then(|p| p.parent())   // chop off `release`\n-                    .and_then(|p| p.file_name())\n-                    .and_then(|p| p.to_str())\n-                {\n-                    if maybe_target != &*target {\n-                        continue\n+                // Don't worry about compiles that turn out to be host\n+                // dependencies or build scripts. To skip these we look for\n+                // anything that goes in `.../release/deps` but *doesn't* go in\n+                // `$target/release/deps`. This ensure that outputs in\n+                // `$target/release` are still considered candidates for\n+                // deduplication.\n+                if let Some(parent) = val.1.parent() {\n+                    if parent.ends_with(\"release/deps\") {\n+                        let maybe_target = parent\n+                            .parent()\n+                            .and_then(|p| p.parent())\n+                            .and_then(|p| p.file_name())\n+                            .and_then(|p| p.to_str())\n+                            .unwrap();\n+                        if maybe_target != &*target {\n+                            continue;\n+                        }\n                     }\n                 }\n \n+                // Record that we've built an artifact for `id`, and if one was\n+                // already listed then we need to see if we reused the same\n+                // artifact or produced a duplicate.\n                 let mut artifacts = builder.tool_artifacts.borrow_mut();\n                 let prev_artifacts = artifacts\n                     .entry(target)\n                     .or_default();\n-                if let Some(prev) = prev_artifacts.get(&*id) {\n-                    if prev.1 != val.1 {\n-                        duplicates.push((\n-                            id.to_string(),\n-                            val,\n-                            prev.clone(),\n-                        ));\n+                let prev = match prev_artifacts.get(&*id) {\n+                    Some(prev) => prev,\n+                    None => {\n+                        prev_artifacts.insert(id.to_string(), val);\n+                        continue;\n                     }\n-                    return\n+                };\n+                if prev.1 == val.1 {\n+                    return; // same path, same artifact\n                 }\n-                prev_artifacts.insert(id.to_string(), val);\n+\n+                // If the paths are different and one of them *isn't* inside of\n+                // `release/deps`, then it means it's probably in\n+                // `$target/release`, or it's some final artifact like\n+                // `libcargo.rlib`. In these situations Cargo probably just\n+                // copied it up from `$target/release/deps/libcargo-xxxx.rlib`,\n+                // so if the features are equal we can just skip it.\n+                let prev_no_hash = prev.1.parent().unwrap().ends_with(\"release/deps\");\n+                let val_no_hash = val.1.parent().unwrap().ends_with(\"release/deps\");\n+                if prev.2 == val.2 || !prev_no_hash || !val_no_hash {\n+                    return;\n+                }\n+\n+                // ... and otherwise this looks like we duplicated some sort of\n+                // compilation, so record it to generate an error later.\n+                duplicates.push((\n+                    id.to_string(),\n+                    val,\n+                    prev.clone(),\n+                ));\n             }\n         });\n "}]}