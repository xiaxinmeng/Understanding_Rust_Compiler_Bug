{"sha": "1e5d7724173c2ff16e1eacbb6b09e66daa0794e3", "node_id": "C_kwDOAAsO6NoAKDFlNWQ3NzI0MTczYzJmZjE2ZTFlYWNiYjZiMDllNjZkYWEwNzk0ZTM", "commit": {"author": {"name": "akida31", "email": "akida3@protonmail.com", "date": "2022-10-08T13:48:28Z"}, "committer": {"name": "akida31", "email": "akida3@protonmail.com", "date": "2022-12-13T15:24:38Z"}, "message": "Improve diagnostic when passing arg to closure and missing borrow.\n\nThis checks the number of references for the given and expected type and\nshows hints to the user if the numbers don't match.", "tree": {"sha": "465df0cf30f3dcee43fba36b8c839ce2f8edf82e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465df0cf30f3dcee43fba36b8c839ce2f8edf82e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e5d7724173c2ff16e1eacbb6b09e66daa0794e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ20GAFrM+jef+hIIAuGvLD2ft8kFAmOYmTYACgkQAuGvLD2f\nt8m1kg/8CiSdfH1fD/pfSbDkgivfY3xzseMUZqYVtFmEscX0zSIYldhTTk0+508C\nnwRyJKpsriALBxITXqxrjjC/QdVneKRlr+i02ZSlNUSpvGCfIaiwNWb9HY+7MZ/e\nfsQmu48+JxIY+OUXw03AJIo59dvCF6lT1HDFYNBj6ZTXpLQouWsKjB5JbPyUkUzK\nerG/VdclpeaOMEbzi5ZPpkRhJDcXQaeYF5mUn1kogRgE1YANqEJA+wwfK1tbAh9H\nTmgfoEVdGa8V4vJkePt55yYXf2V3udEXn60LzHMcGdfjgZsVOHy3otLODn0AQXJU\nMH8Sbow2kciquGMgJNGl6aFmR9FrSQ3HhsAFYoIDUeAf99hXmXeH9cAbFg3qEZoC\nIa6vtgw2MgYI8O2mWWxY8N6uF0dRBT6IsZMh0z4oy5smI3blUSLzmoV+BB/bQXoD\nxPj16G4EVOUmAogFDCRILisNh5zB49ZJetVroJeJ7k4QPLod7NADPgk8T55A3aRz\n22zwcH0yeVoT881ShRufVh/1VaP3OGTgLq72k5rKuNWEeyePbGkRH3dar+fZ/JpK\nyPHAZJl1BWu2QgI+v0Sh+fqupVW0tVw8Mwe7WN4cozKQA0lTG9/Ojx7sfvBfqpa6\ndSD/TxXqDUPVLjQazyn9ArfUya5H7ViPTIZ5pQP2KkClxdzYwrc=\n=YXFs\n-----END PGP SIGNATURE-----", "payload": "tree 465df0cf30f3dcee43fba36b8c839ce2f8edf82e\nparent 109cccbe4f345c0f0785ce860788580c3e2a29f5\nauthor akida31 <akida3@protonmail.com> 1665236908 +0200\ncommitter akida31 <akida3@protonmail.com> 1670945078 +0100\n\nImprove diagnostic when passing arg to closure and missing borrow.\n\nThis checks the number of references for the given and expected type and\nshows hints to the user if the numbers don't match.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5d7724173c2ff16e1eacbb6b09e66daa0794e3", "html_url": "https://github.com/rust-lang/rust/commit/1e5d7724173c2ff16e1eacbb6b09e66daa0794e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e5d7724173c2ff16e1eacbb6b09e66daa0794e3/comments", "author": {"login": "Akida31", "id": 47895118, "node_id": "MDQ6VXNlcjQ3ODk1MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/47895118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Akida31", "html_url": "https://github.com/Akida31", "followers_url": "https://api.github.com/users/Akida31/followers", "following_url": "https://api.github.com/users/Akida31/following{/other_user}", "gists_url": "https://api.github.com/users/Akida31/gists{/gist_id}", "starred_url": "https://api.github.com/users/Akida31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Akida31/subscriptions", "organizations_url": "https://api.github.com/users/Akida31/orgs", "repos_url": "https://api.github.com/users/Akida31/repos", "events_url": "https://api.github.com/users/Akida31/events{/privacy}", "received_events_url": "https://api.github.com/users/Akida31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Akida31", "id": 47895118, "node_id": "MDQ6VXNlcjQ3ODk1MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/47895118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Akida31", "html_url": "https://github.com/Akida31", "followers_url": "https://api.github.com/users/Akida31/followers", "following_url": "https://api.github.com/users/Akida31/following{/other_user}", "gists_url": "https://api.github.com/users/Akida31/gists{/gist_id}", "starred_url": "https://api.github.com/users/Akida31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Akida31/subscriptions", "organizations_url": "https://api.github.com/users/Akida31/orgs", "repos_url": "https://api.github.com/users/Akida31/repos", "events_url": "https://api.github.com/users/Akida31/events{/privacy}", "received_events_url": "https://api.github.com/users/Akida31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "109cccbe4f345c0f0785ce860788580c3e2a29f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/109cccbe4f345c0f0785ce860788580c3e2a29f5", "html_url": "https://github.com/rust-lang/rust/commit/109cccbe4f345c0f0785ce860788580c3e2a29f5"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "da6244acb3151eed4629278ba00ede3d4132da4e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e5d7724173c2ff16e1eacbb6b09e66daa0794e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5d7724173c2ff16e1eacbb6b09e66daa0794e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1e5d7724173c2ff16e1eacbb6b09e66daa0794e3", "patch": "@@ -1234,6 +1234,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     _ => None,\n                 };\n \n+                let found_node = found_did.and_then(|did| self.tcx.hir().get_if_local(did));\n                 let found_span = found_did.and_then(|did| self.tcx.hir().span_if_local(did));\n \n                 if self.reported_closure_mismatch.borrow().contains(&(span, found_span)) {\n@@ -1287,6 +1288,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         found_trait_ref,\n                         expected_trait_ref,\n                         obligation.cause.code(),\n+                        found_node,\n                     )\n                 } else {\n                     let (closure_span, closure_arg_span, found) = found_did"}, {"sha": "2923ad352a75ad143d334ff518b0b8a3c71a23d7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1e5d7724173c2ff16e1eacbb6b09e66daa0794e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5d7724173c2ff16e1eacbb6b09e66daa0794e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1e5d7724173c2ff16e1eacbb6b09e66daa0794e3", "patch": "@@ -258,6 +258,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         found: ty::PolyTraitRef<'tcx>,\n         expected: ty::PolyTraitRef<'tcx>,\n         cause: &ObligationCauseCode<'tcx>,\n+        found_node: Option<Node<'_>>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn note_conflicting_closure_bounds(\n@@ -1695,6 +1696,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         found: ty::PolyTraitRef<'tcx>,\n         expected: ty::PolyTraitRef<'tcx>,\n         cause: &ObligationCauseCode<'tcx>,\n+        found_node: Option<Node<'_>>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         pub(crate) fn build_fn_sig_ty<'tcx>(\n             infcx: &InferCtxt<'tcx>,\n@@ -1756,6 +1758,75 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         self.note_conflicting_closure_bounds(cause, &mut err);\n \n+        let found_args = match found.kind() {\n+            ty::FnPtr(f) => f.inputs().skip_binder().iter(),\n+            kind => {\n+                span_bug!(span, \"found was converted to a FnPtr above but is now {:?}\", kind)\n+            }\n+        };\n+        let expected_args = match expected.kind() {\n+            ty::FnPtr(f) => f.inputs().skip_binder().iter(),\n+            kind => {\n+                span_bug!(span, \"expected was converted to a FnPtr above but is now {:?}\", kind)\n+            }\n+        };\n+\n+        if let Some(found_node) = found_node {\n+            let fn_decl = match found_node {\n+                Node::Expr(expr) => match &expr.kind {\n+                    hir::ExprKind::Closure(hir::Closure { fn_decl, .. }) => fn_decl,\n+                    kind => {\n+                        span_bug!(found_span, \"expression must be a closure but is {:?}\", kind)\n+                    }\n+                },\n+                Node::Item(item) => match &item.kind {\n+                    hir::ItemKind::Fn(signature, _generics, _body) => signature.decl,\n+                    kind => {\n+                        span_bug!(found_span, \"item must be a function but is {:?}\", kind)\n+                    }\n+                },\n+                node => {\n+                    span_bug!(found_span, \"node must be a expr or item but is {:?}\", node)\n+                }\n+            };\n+\n+            let arg_spans = fn_decl.inputs.iter().map(|ty| ty.span);\n+\n+            fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, usize) {\n+                let mut refs = 0;\n+\n+                while let ty::Ref(_, new_ty, _) = ty.kind() {\n+                    ty = *new_ty;\n+                    refs += 1;\n+                }\n+\n+                (ty, refs)\n+            }\n+\n+            for ((found_arg, expected_arg), arg_span) in\n+                found_args.zip(expected_args).zip(arg_spans)\n+            {\n+                let (found_ty, found_refs) = get_deref_type_and_refs(*found_arg);\n+                let (expected_ty, expected_refs) = get_deref_type_and_refs(*expected_arg);\n+\n+                if found_ty == expected_ty {\n+                    let hint = if found_refs < expected_refs {\n+                        \"hint: consider borrowing here:\"\n+                    } else if found_refs == expected_refs {\n+                        continue;\n+                    } else {\n+                        \"hint: consider removing the borrow:\"\n+                    };\n+                    err.span_suggestion_verbose(\n+                        arg_span,\n+                        hint,\n+                        expected_arg.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+        }\n+\n         err\n     }\n "}]}