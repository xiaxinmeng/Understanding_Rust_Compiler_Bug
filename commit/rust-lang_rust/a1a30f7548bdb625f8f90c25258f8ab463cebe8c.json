{"sha": "a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "node_id": "C_kwDOAAsO6NoAKGExYTMwZjc1NDhiZGI2MjVmOGY5MGMyNTI1OGY4YWI0NjNjZWJlOGM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-05T12:02:16Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-01T09:15:59Z"}, "message": "add a rustc::query_stability lint", "tree": {"sha": "99c2f538217e5b632984902189e1eba204e407b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99c2f538217e5b632984902189e1eba204e407b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "html_url": "https://github.com/rust-lang/rust/commit/a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25862ffc8d360b34dd8ec82a2f01750aaab976b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/25862ffc8d360b34dd8ec82a2f01750aaab976b7", "html_url": "https://github.com/rust-lang/rust/commit/25862ffc8d360b34dd8ec82a2f01750aaab976b7"}], "stats": {"total": 379, "additions": 302, "deletions": 77}, "files": [{"sha": "a594339296f32b6601ac4500af3391f1c7a48263", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -34,6 +34,7 @@\n #![feature(box_patterns)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};"}, {"sha": "f4863137bdd59c947faf0d657928b8e5daa07fe3", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -8,6 +8,7 @@\n #![feature(box_patterns)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n pub mod ast_validation;\n pub mod feature_gate;"}, {"sha": "c288cc96990c228428858ffc33a93533c7c98c49", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -9,6 +9,7 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "eda9be58d9427147aab3f2cd4fe4774504d11957", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -12,6 +12,7 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n extern crate proc_macro;\n "}, {"sha": "75836e143856facc4a21b7c7578bef5798a364c1", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -11,6 +11,7 @@\n #![feature(extern_types)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use back::write::{create_informational_target_machine, create_target_machine};\n "}, {"sha": "9bb8db076a8d67d2bffccd3a218e7465668332de", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -7,6 +7,7 @@\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n //! This crate contains codegen code that is used by all codegen backends (LLVM and others).\n //! The backend-agnostic functions of this crate use functions defined in various traits that"}, {"sha": "838484876c72a3d92e20e2640cbc81ded0fb5626", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -22,6 +22,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "205f1cd77c0183a846de7c37b194cf7bb74565d6", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -26,6 +26,7 @@\n #![feature(vec_into_raw_parts)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "0f490c33102457af67d7f0eec004eedd32ba2961", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -8,6 +8,7 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;\n@@ -845,7 +846,7 @@ Available lint options:\n     let builtin = sort_lints(sess, builtin);\n \n     let (plugin_groups, builtin_groups): (Vec<_>, _) =\n-        lint_store.get_lint_groups().iter().cloned().partition(|&(.., p)| p);\n+        lint_store.get_lint_groups().partition(|&(.., p)| p);\n     let plugin_groups = sort_lint_groups(plugin_groups);\n     let builtin_groups = sort_lint_groups(builtin_groups);\n "}, {"sha": "a5c954cca136478c79626a8eb70ef6ff42c8a32b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -8,6 +8,7 @@\n #![feature(if_let_guard)]\n #![feature(let_else)]\n #![feature(nll)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "43a310f4eafe3f4442149812ac93ce133e05f876", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -9,6 +9,7 @@\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "3933746c319ecc89d5e630ec15cdf48c478fe7d5", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -581,6 +581,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(\n         rustc_trivial_field_reads, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE\n     ),\n+    // Used by the `rustc::potential_query_instability` lint to warn methods which\n+    // might not be stable during incremental compilation.\n+    rustc_attr!(rustc_lint_query_instability, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:"}, {"sha": "b4df3e1e396bdf2c4b5f4af70f665277cea8bba6", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -5,6 +5,7 @@\n #![feature(let_else)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "ae79e14db181c94e0bd061482455112f6a15ded0", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -23,6 +23,7 @@\n #![feature(min_specialization)]\n #![feature(label_break_value)]\n #![recursion_limit = \"512\"] // For rustdoc\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "eebeabbd45272fece4faa37a91c5b6e865a769eb", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -6,6 +6,7 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n mod callbacks;\n pub mod interface;"}, {"sha": "5da77b9f9466fcd24814acbebd80bb4cdc12c0a2", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -143,7 +143,11 @@ impl LintStore {\n         &self.lints\n     }\n \n-    pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> {\n+    pub fn get_lint_groups<'t>(\n+        &'t self,\n+    ) -> impl Iterator<Item = (&'static str, Vec<LintId>, bool)> + 't {\n+        // This function is not used in a way which observes the order of lints.\n+        #[cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n         self.lint_groups\n             .iter()\n             .filter(|(_, LintGroup { depr, .. })| {\n@@ -153,7 +157,6 @@ impl LintStore {\n             .map(|(k, LintGroup { lint_ids, from_plugin, .. })| {\n                 (*k, lint_ids.clone(), *from_plugin)\n             })\n-            .collect()\n     }\n \n     pub fn register_early_pass("}, {"sha": "b4b75bf64c9bd43417f0057be87b8e9406317d8e", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -5,7 +5,7 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::{GenericArg, HirId, Item, ItemKind, Node, Path, PathSegment, QPath, Ty, TyKind};\n+use rustc_hir::*;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -48,6 +48,58 @@ impl LateLintPass<'_> for DefaultHashTypes {\n     }\n }\n \n+declare_tool_lint! {\n+    pub rustc::POTENTIAL_QUERY_INSTABILITY,\n+    Allow,\n+    \"require explicit opt-in when using potentially unstable methods or functions\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(QueryStability => [POTENTIAL_QUERY_INSTABILITY]);\n+\n+impl LateLintPass<'_> for QueryStability {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        // FIXME(rustdoc): This lint uses typecheck results, causing rustdoc to\n+        // error if there are resolution failures.\n+        //\n+        // As internal lints are currently always run if there are `unstable_options`,\n+        // they are added to the lint store of rustdoc. Internal lints are also\n+        // not used via the `lint_mod` query. Crate lints run outside of a query\n+        // so rustdoc currently doesn't disable them.\n+        //\n+        // Instead of relying on this, either change crate lints to a query disabled by\n+        // rustdoc, only run internal lints if the user is explicitly opting in\n+        // or figure out a different way to avoid running lints for rustdoc.\n+        if cx.tcx.sess.opts.actually_rustdoc {\n+            return;\n+        }\n+\n+        let (span, def_id, substs) = match expr.kind {\n+            ExprKind::MethodCall(_, span, _, _) if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) => {\n+                (span, def_id, cx.typeck_results().node_substs(expr.hir_id))\n+            },\n+            _ => {\n+                let &ty::FnDef(def_id, substs) = cx.typeck_results().node_type(expr.hir_id).kind() else { return };\n+                (expr.span, def_id, substs)\n+            }\n+        };\n+        if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) {\n+            let def_id = instance.def_id();\n+            if cx.tcx.has_attr(def_id, sym::rustc_lint_query_instability) {\n+                cx.struct_span_lint(POTENTIAL_QUERY_INSTABILITY, span, |lint| {\n+                    let msg = format!(\n+                        \"using `{}` can result in unstable query results\",\n+                        cx.tcx.item_name(def_id)\n+                    );\n+                    lint.build(&msg)\n+                        .note(\"if you believe this case to be fine, allow this lint and add a comment explaining your rationale\")\n+                        .emit();\n+                })\n+            }\n+        }\n+    }\n+}\n+\n declare_tool_lint! {\n     pub rustc::USAGE_OF_TY_TYKIND,\n     Allow,"}, {"sha": "69863b5ff827fcd27fcbbdd3714db3e9ee16cb6c", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -30,12 +30,14 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n+#![feature(if_let_guard)]\n #![feature(iter_order_by)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;\n@@ -493,6 +495,8 @@ fn register_internals(store: &mut LintStore) {\n     store.register_early_pass(|| Box::new(LintPassImpl));\n     store.register_lints(&DefaultHashTypes::get_lints());\n     store.register_late_pass(|| Box::new(DefaultHashTypes));\n+    store.register_lints(&QueryStability::get_lints());\n+    store.register_late_pass(|| Box::new(QueryStability));\n     store.register_lints(&ExistingDocKeyword::get_lints());\n     store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n@@ -505,6 +509,7 @@ fn register_internals(store: &mut LintStore) {\n         None,\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n+            LintId::of(POTENTIAL_QUERY_INSTABILITY),\n             LintId::of(USAGE_OF_TY_TYKIND),\n             LintId::of(PASS_BY_VALUE),\n             LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),"}, {"sha": "046245080deb555423c13acbb062dd1c94f63e49", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -9,6 +9,7 @@\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n extern crate proc_macro;\n "}, {"sha": "e85cb413deb2ae6060174ba282a9d2c9393d5c65", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -56,6 +56,7 @@\n #![feature(nonzero_ops)]\n #![feature(unwrap_infallible)]\n #![recursion_limit = \"512\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "12ea740d48aec56bbc4c90430d699180269f4f8a", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -9,6 +9,7 @@\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "129efc2b523794aaf860d725d886fc85d200afbc", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -10,6 +10,7 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "bbc65b09ece1dbd34359af691ffaea0fcc388ad3", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -4,6 +4,7 @@\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "50d2c64ae78d43d410afcc60e2b7a313da1795c2", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 89, "deletions": 73, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -62,7 +62,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_attributes(\n         &self,\n         hir_id: HirId,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) {\n@@ -81,7 +81,7 @@ impl CheckAttrVisitor<'_> {\n                 }\n                 sym::target_feature => self.check_target_feature(hir_id, attr, span, target),\n                 sym::track_caller => {\n-                    self.check_track_caller(hir_id, &attr.span, attrs, span, target)\n+                    self.check_track_caller(hir_id, attr.span, attrs, span, target)\n                 }\n                 sym::doc => self.check_doc_attrs(\n                     attr,\n@@ -106,6 +106,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::rustc_legacy_const_generics => {\n                     self.check_rustc_legacy_const_generics(&attr, span, target, item)\n                 }\n+                sym::rustc_lint_query_instability => {\n+                    self.check_rustc_lint_query_instability(&attr, span, target)\n+                }\n                 sym::rustc_clean\n                 | sym::rustc_dirty\n                 | sym::rustc_if_this_changed\n@@ -253,7 +256,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n-    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Closure\n@@ -296,7 +299,7 @@ impl CheckAttrVisitor<'_> {\n                     E0518,\n                     \"attribute should be applied to function or closure\",\n                 )\n-                .span_label(*span, \"not a function or closure\")\n+                .span_label(span, \"not a function or closure\")\n                 .emit();\n                 false\n             }\n@@ -335,7 +338,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Checks if `#[naked]` is applied to a function definition.\n-    fn check_naked(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_naked(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n@@ -354,15 +357,15 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to a function definition\",\n                     )\n-                    .span_label(*span, \"not a function definition\")\n+                    .span_label(span, \"not a function definition\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if `#[cmse_nonsecure_entry]` is applied to a function definition.\n-    fn check_cmse_nonsecure_entry(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_cmse_nonsecure_entry(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n@@ -373,7 +376,7 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to a function definition\",\n                     )\n-                    .span_label(*span, \"not a function definition\")\n+                    .span_label(span, \"not a function definition\")\n                     .emit();\n                 false\n             }\n@@ -384,16 +387,16 @@ impl CheckAttrVisitor<'_> {\n     fn check_track_caller(\n         &self,\n         hir_id: HirId,\n-        attr_span: &Span,\n+        attr_span: Span,\n         attrs: &[Attribute],\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n             _ if attrs.iter().any(|attr| attr.has_name(sym::naked)) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    *attr_span,\n+                    attr_span,\n                     E0736,\n                     \"cannot use `#[track_caller]` with `#[naked]`\",\n                 )\n@@ -414,11 +417,11 @@ impl CheckAttrVisitor<'_> {\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    *attr_span,\n+                    attr_span,\n                     E0739,\n                     \"attribute should be applied to function\"\n                 )\n-                .span_label(*span, \"not a function\")\n+                .span_label(span, \"not a function\")\n                 .emit();\n                 false\n             }\n@@ -430,7 +433,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -450,15 +453,15 @@ impl CheckAttrVisitor<'_> {\n                     E0701,\n                     \"attribute can only be applied to a struct or enum\"\n                 )\n-                .span_label(*span, \"not a struct or enum\")\n+                .span_label(span, \"not a struct or enum\")\n                 .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if the `#[marker]` attribute on an `item` is valid. Returns `true` if valid.\n-    fn check_marker(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_marker(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Trait => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -473,7 +476,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute can only be applied to a trait\")\n-                    .span_label(*span, \"not a trait\")\n+                    .span_label(span, \"not a trait\")\n                     .emit();\n                 false\n             }\n@@ -505,7 +508,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -521,7 +524,7 @@ impl CheckAttrVisitor<'_> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(*span, \"not a function\")\n+                        .span_label(span, \"not a function\")\n                         .emit();\n                 });\n                 true\n@@ -538,7 +541,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                    .span_label(*span, \"not a function\")\n+                    .span_label(span, \"not a function\")\n                     .emit();\n                 false\n             }\n@@ -1090,7 +1093,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Warns against some misuses of `#[pass_by_value]`\n-    fn check_pass_by_value(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_pass_by_value(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Struct | Target::Enum | Target::TyAlias => true,\n             _ => {\n@@ -1100,21 +1103,15 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"`pass_by_value` attribute should be applied to a struct, enum or type alias.\",\n                     )\n-                    .span_label(*span, \"is not a struct, enum or type alias\")\n+                    .span_label(span, \"is not a struct, enum or type alias\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Warns against some misuses of `#[must_use]`\n-    fn check_must_use(\n-        &self,\n-        hir_id: HirId,\n-        attr: &Attribute,\n-        span: &Span,\n-        _target: Target,\n-    ) -> bool {\n+    fn check_must_use(&self, hir_id: HirId, attr: &Attribute, span: Span, _target: Target) -> bool {\n         let node = self.tcx.hir().get(hir_id);\n         if let Some(fn_node) = node.fn_kind() {\n             if let rustc_hir::IsAsync::Async = fn_node.asyncness() {\n@@ -1125,7 +1122,7 @@ impl CheckAttrVisitor<'_> {\n                               function, not the value within\",\n                     )\n                     .span_label(\n-                        *span,\n+                        span,\n                         \"this attribute does nothing, the `Future`s \\\n                                 returned by async functions are already `must_use`\",\n                     )\n@@ -1139,22 +1136,22 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Checks if `#[must_not_suspend]` is applied to a function. Returns `true` if valid.\n-    fn check_must_not_suspend(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_must_not_suspend(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Struct | Target::Enum | Target::Union | Target::Trait => true,\n             _ => {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"`must_not_suspend` attribute should be applied to a struct, enum, or trait\")\n-                        .span_label(*span, \"is not a struct, enum, or trait\")\n+                        .span_label(span, \"is not a struct, enum, or trait\")\n                         .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n-    fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1174,15 +1171,15 @@ impl CheckAttrVisitor<'_> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(*span, \"not a function\")\n+                        .span_label(span, \"not a function\")\n                         .emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[link]` is applied to an item other than a foreign module.\n-    fn check_link(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_link(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::ForeignMod => {}\n             _ => {\n@@ -1194,15 +1191,15 @@ impl CheckAttrVisitor<'_> {\n                          a future release!\",\n                     );\n \n-                    diag.span_label(*span, \"not an `extern` block\");\n+                    diag.span_label(span, \"not an `extern` block\");\n                     diag.emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[link_name]` is applied to an item other than a foreign function or static.\n-    fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::ForeignFn | Target::ForeignStatic => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1236,15 +1233,15 @@ impl CheckAttrVisitor<'_> {\n                         }\n                     }\n \n-                    diag.span_label(*span, \"not a foreign function or static\");\n+                    diag.span_label(span, \"not a foreign function or static\");\n                     diag.emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[no_link]` is applied to an `extern crate`. Returns `true` if valid.\n-    fn check_no_link(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_no_link(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::ExternCrate => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1262,7 +1259,7 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to an `extern crate` item\",\n                     )\n-                    .span_label(*span, \"not an `extern crate` item\")\n+                    .span_label(span, \"not an `extern crate` item\")\n                     .emit();\n                 false\n             }\n@@ -1278,7 +1275,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1299,7 +1296,7 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to a free function, impl method or static\",\n                     )\n-                    .span_label(*span, \"not a free function, impl method or static\")\n+                    .span_label(span, \"not a free function, impl method or static\")\n                     .emit();\n                 false\n             }\n@@ -1309,14 +1306,14 @@ impl CheckAttrVisitor<'_> {\n     fn check_rustc_layout_scalar_valid_range(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         if target != Target::Struct {\n             self.tcx\n                 .sess\n                 .struct_span_err(attr.span, \"attribute should be applied to a struct\")\n-                .span_label(*span, \"not a struct\")\n+                .span_label(span, \"not a struct\")\n                 .emit();\n             return false;\n         }\n@@ -1341,7 +1338,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_rustc_legacy_const_generics(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) -> bool {\n@@ -1350,7 +1347,7 @@ impl CheckAttrVisitor<'_> {\n             self.tcx\n                 .sess\n                 .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                .span_label(*span, \"not a function\")\n+                .span_label(span, \"not a function\")\n                 .emit();\n             return false;\n         }\n@@ -1436,6 +1433,25 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    fn check_rustc_lint_query_instability(\n+        &self,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        let is_function = matches!(target, Target::Fn | Target::Method(..));\n+        if !is_function {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"attribute should be applied to a function\")\n+                .span_label(span, \"not a function\")\n+                .emit();\n+            false\n+        } else {\n+            true\n+        }\n+    }\n+\n     /// Checks that the dep-graph debugging attributes are only present when the query-dep-graph\n     /// option is passed to the compiler.\n     fn check_rustc_dirty_clean(&self, attr: &Attribute) -> bool {\n@@ -1451,7 +1467,7 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     /// Checks if `#[link_section]` is applied to a function or static.\n-    fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::Static | Target::Fn | Target::Method(..) => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1471,15 +1487,15 @@ impl CheckAttrVisitor<'_> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(*span, \"not a function or static\")\n+                        .span_label(span, \"not a function or static\")\n                         .emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[no_mangle]` is applied to a function or static.\n-    fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::Static | Target::Fn => {}\n             Target::Method(..) if self.is_impl_item(hir_id) => {}\n@@ -1509,7 +1525,7 @@ impl CheckAttrVisitor<'_> {\n                             being phased out; it will become a hard error in \\\n                             a future release!\",\n                     )\n-                    .span_label(*span, format!(\"foreign {}\", foreign_item_kind))\n+                    .span_label(span, format!(\"foreign {}\", foreign_item_kind))\n                     .note(\"symbol names in extern blocks are not mangled\")\n                     .span_suggestion(\n                         attr.span,\n@@ -1532,7 +1548,7 @@ impl CheckAttrVisitor<'_> {\n                          being phased out; it will become a hard error in \\\n                          a future release!\",\n                     )\n-                    .span_label(*span, \"not a free function, impl method or static\")\n+                    .span_label(span, \"not a free function, impl method or static\")\n                     .emit();\n                 });\n             }\n@@ -1543,7 +1559,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_repr(\n         &self,\n         attrs: &[Attribute],\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n         hir_id: HirId,\n@@ -1677,7 +1693,7 @@ impl CheckAttrVisitor<'_> {\n                 \"{}\",\n                 &format!(\"attribute should be applied to {} {}\", article, allowed_targets)\n             )\n-            .span_label(*span, &format!(\"not {} {}\", article, allowed_targets))\n+            .span_label(span, &format!(\"not {} {}\", article, allowed_targets))\n             .emit();\n         }\n \n@@ -1740,7 +1756,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         attrs: &[Attribute],\n     ) -> bool {\n@@ -1773,7 +1789,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a macro\")\n-                    .span_label(*span, \"not a macro\")\n+                    .span_label(span, \"not a macro\")\n                     .emit();\n                 false\n             }\n@@ -1786,7 +1802,7 @@ impl CheckAttrVisitor<'_> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1807,7 +1823,7 @@ impl CheckAttrVisitor<'_> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to `const fn`\")\n-                    .span_label(*span, \"not a `const fn`\")\n+                    .span_label(span, \"not a `const fn`\")\n                     .emit();\n                 false\n             }\n@@ -1818,7 +1834,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_default_method_body_is_const(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1830,14 +1846,14 @@ impl CheckAttrVisitor<'_> {\n                         attr.span,\n                         \"attribute should be applied to a trait method with body\",\n                     )\n-                    .span_label(*span, \"not a trait method or missing a body\")\n+                    .span_label(span, \"not a trait method or missing a body\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n-    fn check_stability_promotable(&self, attr: &Attribute, _span: &Span, target: Target) -> bool {\n+    fn check_stability_promotable(&self, attr: &Attribute, _span: Span, target: Target) -> bool {\n         match target {\n             Target::Expression => {\n                 self.tcx\n@@ -1850,7 +1866,7 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    fn check_deprecated(&self, hir_id: HirId, attr: &Attribute, _span: &Span, target: Target) {\n+    fn check_deprecated(&self, hir_id: HirId, attr: &Attribute, _span: Span, target: Target) {\n         match target {\n             Target::Closure | Target::Expression | Target::Statement | Target::Arm => {\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n@@ -1912,37 +1928,37 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         }\n \n         let target = Target::from_item(item);\n-        self.check_attributes(item.hir_id(), &item.span, target, Some(ItemLike::Item(item)));\n+        self.check_attributes(item.hir_id(), item.span, target, Some(ItemLike::Item(item)));\n         intravisit::walk_item(self, item)\n     }\n \n     fn visit_generic_param(&mut self, generic_param: &'tcx hir::GenericParam<'tcx>) {\n         let target = Target::from_generic_param(generic_param);\n-        self.check_attributes(generic_param.hir_id, &generic_param.span, target, None);\n+        self.check_attributes(generic_param.hir_id, generic_param.span, target, None);\n         intravisit::walk_generic_param(self, generic_param)\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem<'tcx>) {\n         let target = Target::from_trait_item(trait_item);\n-        self.check_attributes(trait_item.hir_id(), &trait_item.span, target, None);\n+        self.check_attributes(trait_item.hir_id(), trait_item.span, target, None);\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n     fn visit_field_def(&mut self, struct_field: &'tcx hir::FieldDef<'tcx>) {\n-        self.check_attributes(struct_field.hir_id, &struct_field.span, Target::Field, None);\n+        self.check_attributes(struct_field.hir_id, struct_field.span, Target::Field, None);\n         intravisit::walk_field_def(self, struct_field);\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n-        self.check_attributes(arm.hir_id, &arm.span, Target::Arm, None);\n+        self.check_attributes(arm.hir_id, arm.span, Target::Arm, None);\n         intravisit::walk_arm(self, arm);\n     }\n \n     fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n         self.check_attributes(\n             f_item.hir_id(),\n-            &f_item.span,\n+            f_item.span,\n             target,\n             Some(ItemLike::ForeignItem(f_item)),\n         );\n@@ -1951,14 +1967,14 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let target = target_from_impl_item(self.tcx, impl_item);\n-        self.check_attributes(impl_item.hir_id(), &impl_item.span, target, None);\n+        self.check_attributes(impl_item.hir_id(), impl_item.span, target, None);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n         // When checking statements ignore expressions, they will be checked later.\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n-            self.check_attributes(l.hir_id, &stmt.span, Target::Statement, None);\n+            self.check_attributes(l.hir_id, stmt.span, Target::Statement, None);\n         }\n         intravisit::walk_stmt(self, stmt)\n     }\n@@ -1969,7 +1985,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n             _ => Target::Expression,\n         };\n \n-        self.check_attributes(expr.hir_id, &expr.span, target, None);\n+        self.check_attributes(expr.hir_id, expr.span, target, None);\n         intravisit::walk_expr(self, expr)\n     }\n \n@@ -1979,12 +1995,12 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         generics: &'tcx hir::Generics<'tcx>,\n         item_id: HirId,\n     ) {\n-        self.check_attributes(variant.id, &variant.span, Target::Variant, None);\n+        self.check_attributes(variant.id, variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant, generics, item_id)\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        self.check_attributes(param.hir_id, &param.span, Target::Param, None);\n+        self.check_attributes(param.hir_id, param.span, Target::Param, None);\n \n         intravisit::walk_param(self, param);\n     }\n@@ -2076,7 +2092,7 @@ fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut check_attr_visitor.as_deep_visitor());\n     if module_def_id.is_top_level_module() {\n-        check_attr_visitor.check_attributes(CRATE_HIR_ID, &DUMMY_SP, Target::Mod, None);\n+        check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());\n     }\n }"}, {"sha": "894048040984caa7706d11324cbeb4020a63fe60", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -13,6 +13,7 @@\n #![feature(nll)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "7c511ccbd576aeef1edd857d31075c0ce3a1fc55", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -4,6 +4,7 @@\n #![feature(try_blocks)]\n #![feature(associated_type_defaults)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use rustc_ast::MacroDef;\n use rustc_attr as attr;"}, {"sha": "bf859decc70fddeea9069ea5d966dfbcac50bc2b", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -7,6 +7,7 @@\n #![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "750ac76a771222d130c830997419fda760abeb5c", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -5,6 +5,7 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(extern_types)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "d5ad95ace973fbc73af115c6d03a119d19428153", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -18,6 +18,7 @@\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "c14b459570f5edfbb4d9eee2c2fef008babd2d3d", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -2,6 +2,7 @@\n #![feature(if_let_guard)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n mod dump_visitor;\n mod dumper;"}, {"sha": "383250cd68f17191654ec05ff5286a4a7e9e7d9f", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -3,6 +3,7 @@\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "823a927fd8c74c531eff95d138203f9c09716499", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -21,6 +21,7 @@\n #![feature(negative_impls)]\n #![feature(nll)]\n #![feature(min_specialization)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "18627cd2c099d28a2da577408f0a5f830fa0d296", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -1171,6 +1171,7 @@ symbols! {\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,\n         rustc_legacy_const_generics,\n+        rustc_lint_query_instability,\n         rustc_macro_transparency,\n         rustc_main,\n         rustc_mir,"}, {"sha": "f4d1f41902aff11802bb176b86720073c33822b1", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -91,6 +91,7 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "0041f5964059c9f646b57715b021800cccd96503", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -22,6 +22,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"512\"] // For rustdoc\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "7b004fa086bf3a1bbda36fd1793663d073245f79", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -69,6 +69,7 @@ This API is completely unstable and subject to change.\n #![feature(control_flow_enum)]\n #![feature(hash_drain_filter)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "9e61defc31e9732acea81b66878e4e791a4e8d82", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -371,6 +371,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n@@ -448,6 +449,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(vec, [1, 2, 3]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n@@ -471,6 +473,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter { base: self.base.iter() }\n@@ -500,6 +503,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n         IterMut { base: self.base.iter_mut() }\n@@ -560,6 +564,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert!(a.is_empty());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, K, V> {\n         Drain { base: self.base.drain() }\n@@ -601,6 +606,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, K, V, F>\n     where\n@@ -624,6 +630,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(map.len(), 4);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -1990,6 +1997,7 @@ impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S> {\n     type IntoIter = Iter<'a, K, V>;\n \n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> Iter<'a, K, V> {\n         self.iter()\n     }\n@@ -2001,6 +2009,7 @@ impl<'a, K, V, S> IntoIterator for &'a mut HashMap<K, V, S> {\n     type IntoIter = IterMut<'a, K, V>;\n \n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IterMut<'a, K, V> {\n         self.iter_mut()\n     }\n@@ -2030,6 +2039,7 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S> {\n     /// let vec: Vec<(&str, i32)> = map.into_iter().collect();\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IntoIter<K, V> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "d1450987e7374bfe1f2e50504be9f5c766e38852", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -185,6 +185,7 @@ impl<T, S> HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, T> {\n         Iter { base: self.base.iter() }\n@@ -244,6 +245,7 @@ impl<T, S> HashSet<T, S> {\n     /// assert!(set.is_empty());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, T> {\n         Drain { base: self.base.drain() }\n@@ -282,6 +284,7 @@ impl<T, S> HashSet<T, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, T, F>\n     where\n@@ -304,6 +307,7 @@ impl<T, S> HashSet<T, S> {\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -528,6 +532,7 @@ where\n     /// assert_eq!(diff, [4].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n         Difference { iter: self.iter(), other }\n@@ -555,6 +560,7 @@ where\n     /// assert_eq!(diff1, [1, 4].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn symmetric_difference<'a>(\n         &'a self,\n@@ -582,6 +588,7 @@ where\n     /// assert_eq!(intersection, [2, 3].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n         if self.len() <= other.len() {\n@@ -610,6 +617,7 @@ where\n     /// assert_eq!(union, [1, 2, 3, 4].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n         if self.len() >= other.len() {\n@@ -1410,6 +1418,7 @@ impl<'a, T, S> IntoIterator for &'a HashSet<T, S> {\n     type IntoIter = Iter<'a, T>;\n \n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> Iter<'a, T> {\n         self.iter()\n     }\n@@ -1441,6 +1450,7 @@ impl<T, S> IntoIterator for HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IntoIter<T> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "560675b448608a31ef1130b38e476afa69fec9d9", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+#![deny(rustc::potential_query_instability)]\n+\n+extern crate rustc_data_structures;\n+\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+\n+fn main() {\n+    let mut x = FxHashMap::<u32, i32>::default();\n+\n+    for _ in x.drain() {}\n+    //~^ ERROR using `drain` can result in unstable\n+\n+    for _ in x.iter() {}\n+    //~^ ERROR using `iter`\n+\n+    for _ in Some(&mut x).unwrap().iter_mut() {}\n+    //~^ ERROR using `iter_mut`\n+\n+    for _ in x {}\n+    //~^ ERROR using `into_iter`\n+}"}, {"sha": "7e8b448f41a9119911d9f5bd8a7ec58a5fcc7b95", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -0,0 +1,39 @@\n+error: using `drain` can result in unstable query results\n+  --> $DIR/query_stability.rs:13:16\n+   |\n+LL |     for _ in x.drain() {}\n+   |                ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/query_stability.rs:4:9\n+   |\n+LL | #![deny(rustc::potential_query_instability)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: using `iter` can result in unstable query results\n+  --> $DIR/query_stability.rs:16:16\n+   |\n+LL |     for _ in x.iter() {}\n+   |                ^^^^\n+   |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: using `iter_mut` can result in unstable query results\n+  --> $DIR/query_stability.rs:19:36\n+   |\n+LL |     for _ in Some(&mut x).unwrap().iter_mut() {}\n+   |                                    ^^^^^^^^\n+   |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: using `into_iter` can result in unstable query results\n+  --> $DIR/query_stability.rs:22:14\n+   |\n+LL |     for _ in x {}\n+   |              ^\n+   |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f478b73329eb76f0e446594dc32a85142e000470", "filename": "src/test/ui-fulldeps/internal-lints/query_stability_incorrect.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_lint_query_instability]\n+//~^ ERROR attribute should be applied to a function\n+struct Foo;\n+\n+impl Foo {\n+    #[rustc_lint_query_instability(a)]\n+    //~^ ERROR malformed `rustc_lint_query_instability`\n+    fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "b5156f2ac5905551077f73b3265e75c7d5d14410", "filename": "src/test/ui-fulldeps/internal-lints/query_stability_incorrect.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1a30f7548bdb625f8f90c25258f8ab463cebe8c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr?ref=a1a30f7548bdb625f8f90c25258f8ab463cebe8c", "patch": "@@ -0,0 +1,17 @@\n+error: malformed `rustc_lint_query_instability` attribute input\n+  --> $DIR/query_stability_incorrect.rs:10:5\n+   |\n+LL |     #[rustc_lint_query_instability(a)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_lint_query_instability]`\n+\n+error: attribute should be applied to a function\n+  --> $DIR/query_stability_incorrect.rs:5:1\n+   |\n+LL | #[rustc_lint_query_instability]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct Foo;\n+   | ----------- not a function\n+\n+error: aborting due to 2 previous errors\n+"}]}