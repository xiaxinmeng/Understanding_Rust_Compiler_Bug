{"sha": "1639e51f6e4d036478705f4581de3a7417ccec0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MzllNTFmNmU0ZDAzNjQ3ODcwNWY0NTgxZGUzYTc0MTdjY2VjMGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-27T01:34:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-27T19:50:49Z"}, "message": "Feature gate *all* slice patterns. #23121\n\nUntil some backwards-compatibility hazards are fixed in #23121,\nthese need to be unstable.\n\n[breaking-change]", "tree": {"sha": "2d46d1f1d593b0433ecfc0ca491bf1a9dfc74504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d46d1f1d593b0433ecfc0ca491bf1a9dfc74504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1639e51f6e4d036478705f4581de3a7417ccec0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1639e51f6e4d036478705f4581de3a7417ccec0f", "html_url": "https://github.com/rust-lang/rust/commit/1639e51f6e4d036478705f4581de3a7417ccec0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1639e51f6e4d036478705f4581de3a7417ccec0f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199bdcfeff5cfafd1f8e8ff583d7209272469879", "url": "https://api.github.com/repos/rust-lang/rust/commits/199bdcfeff5cfafd1f8e8ff583d7209272469879", "html_url": "https://github.com/rust-lang/rust/commit/199bdcfeff5cfafd1f8e8ff583d7209272469879"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "465918f29183cca8d5167b73cf649ec9b37c0c79", "filename": "src/doc/reference.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -2408,9 +2408,13 @@ considered off, and using the features will result in a compiler error.\n \n The currently implemented features of the reference compiler are:\n \n-* `advanced_slice_patterns` - see the [match expressions](#match-expressions)\n+* `advanced_slice_patterns` - See the [match expressions](#match-expressions)\n                               section for discussion; the exact semantics of\n-                              slice patterns are subject to change.\n+                              slice patterns are subject to change, so some types\n+\t\t\t      are still unstable.\n+\n+* `slice_patterns` - OK, actually, slice patterns are just scary and\n+                     completely unstable.\n \n * `asm` - The `asm!` macro provides a means for inline assembly. This is often\n           useful, but the exact syntax for this feature along with its\n@@ -3329,7 +3333,7 @@ array, like `[.., 42, ..]`. If preceded by a variable name, it will bind the\n corresponding slice to the variable. Example:\n \n ```\n-# #![feature(advanced_slice_patterns)]\n+# #![feature(advanced_slice_patterns, slice_patterns)]\n fn is_symmetric(list: &[u32]) -> bool {\n     match list {\n         [] | [_]                   => true,"}, {"sha": "4ebf696aa57a0b017cd70a063b00c3c7b7143990", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -177,6 +177,7 @@ match origin {\n If you want to match against a slice or array, you can use `&`:\n \n ```{rust}\n+# #![feature(slice_patterns)]\n fn main() {\n     let v = vec![\"match_this\", \"1\"];\n "}, {"sha": "fa83a88b8d272fa70b4bef995c4ff1eba4e3c764", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -40,6 +40,7 @@\n #![feature(step_by)]\n #![feature(str_char)]\n #![feature(convert)]\n+#![feature(slice_patterns)]\n #![cfg_attr(test, feature(rand, rustc_private, test, hash, collections))]\n #![cfg_attr(test, allow(deprecated))] // rand\n "}, {"sha": "9cc3063dee678eece513b665e98ebc0b9a7af015", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -26,6 +26,7 @@\n #![feature(debug_builders)]\n #![feature(unique)]\n #![feature(step_by)]\n+#![feature(slice_patterns)]\n #![allow(deprecated)] // rand\n \n extern crate core;"}, {"sha": "426555b061146b42cdd74bc22f822d3aa36654fe", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -45,6 +45,7 @@\n #![feature(str_char)]\n #![feature(convert)]\n #![feature(into_cow)]\n+#![feature(slice_patterns)]\n #![cfg_attr(test, feature(test))]\n \n #![allow(trivial_casts)]"}, {"sha": "db651de3cbfff42cb18b4de2950ec8fa04547704", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -39,6 +39,7 @@\n #![feature(path_ext)]\n #![feature(path_relative_from)]\n #![feature(convert)]\n+#![feature(slice_patterns)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "56ab38b8d5a1eba378027d0b1b67fc6a72ec707c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -129,6 +129,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(str_char)]\n #![feature(into_cow)]\n+#![feature(slice_patterns)]\n #![cfg_attr(test, feature(test, rustc_private, std_misc))]\n \n // Don't link to std. We are std."}, {"sha": "ef8a0aa7b52f1cfff2f5d9e6a928686ec9baac00", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -153,6 +153,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n     (\"allow_internal_unstable\", \"1.0.0\", Active),\n+\n+    // #23121. Array patterns have some hazards yet.\n+    (\"slice_patterns\", \"1.0.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -694,6 +697,11 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                    but at the end of a slice (e.g. \\\n                                    `[0, ..xs, 0]` are experimental\")\n             }\n+            ast::PatVec(..) => {\n+                self.gate_feature(\"slice_patterns\",\n+                                  pattern.span,\n+                                  \"slice pattern syntax is experimental\");\n+            }\n             ast::PatBox(..) => {\n                 self.gate_feature(\"box_patterns\",\n                                   pattern.span,"}, {"sha": "a456807bb90718ad0d86e73a3374aea88b663cab", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -41,6 +41,7 @@\n #![feature(str_char)]\n #![feature(convert)]\n #![feature(into_cow)]\n+#![feature(slice_patterns)]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "8ddca3cb1036663822037ed129f5587b2a0996c8", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -12,6 +12,7 @@\n \n #![crate_type=\"dylib\"]\n #![feature(plugin_registrar, rustc_private)]\n+#![feature(slice_patterns)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "c219b7c5424e926e20ff5a12767352b56466e3f2", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -10,6 +10,8 @@\n \n // Test that immutable pattern bindings cannot be reassigned.\n \n+#![feature(slice_patterns)]\n+\n enum E {\n     Foo(isize)\n }"}, {"sha": "d9a2f89a9e21ea56dc46aa936bc3f6fdfa1fb9c9", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we do not permit moves from &[] matched by a vec pattern.\n \n+#![feature(slice_patterns)]\n+\n #[derive(Clone, Debug)]\n struct Foo {\n     string: String"}, {"sha": "98052ad31a7ef13b524fba8b559d493bd834aabd", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n \n fn a<'a>() -> &'a [isize] {\n     let vec = vec!(1, 2, 3, 4);"}, {"sha": "db635893c81b9f5d4c03c61e1545dba44a5fba5f", "filename": "src/test/compile-fail/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn a() {\n     let mut v = vec!(1, 2, 3);\n     let vb: &mut [isize] = &mut v;"}, {"sha": "97dcaeb0bf1a3d2c2eb8a9b90f821aa0c72c81f5", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     let mut a = [1, 2, 3, 4];\n     let t = match a {"}, {"sha": "a69ce0cb365c765a07cf5d842edb9b5e4fda2455", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -11,6 +11,7 @@\n #![feature(advanced_slice_patterns)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(slice_patterns)]\n \n fn a() {\n     let mut vec = [box 1, box 2, box 3];"}, {"sha": "82b3490d7d7e118c79a875ec91288b0cd2960ad9", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn a<'a>() -> &'a isize {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[isize] = &vec; //~ ERROR `vec` does not live long enough"}, {"sha": "1daca371b3409c3eb9225936fe06408cb32cc264", "filename": "src/test/compile-fail/feature-gate-advanced-slice-features.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     let x = [ 1, 2, 3, 4, 5 ];\n     match x {"}, {"sha": "1333bfac64ee86d1edc9f2d0b3c624ec70462a5a", "filename": "src/test/compile-fail/issue-12369.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     let sl = vec![1,2,3];\n     let v: isize = match &*sl {"}, {"sha": "1580ec00f94b068b3c59c0884975ed4a8885bad2", "filename": "src/test/compile-fail/issue-12567.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) {\n     match (l1, l2) {\n         ([], []) => println!(\"both empty\"),"}, {"sha": "f907be161fa0815a4fa5af331cf97386d1d1f347", "filename": "src/test/compile-fail/issue-13482-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -10,6 +10,8 @@\n \n // compile-flags:-Z verbose\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     let x = [1,2];\n     let y = match x {"}, {"sha": "2fbfd6cc84eadccb0a1a1e83cfc1ed0ad514e56d", "filename": "src/test/compile-fail/issue-13482.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n   let x = [1,2];\n   let y = match x {"}, {"sha": "653ba165e74397c256bba6d36e690fa98f684926", "filename": "src/test/compile-fail/issue-15381.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-15381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-15381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15381.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     let values: Vec<u8> = vec![1,2,3,4,5,6,7,8];\n "}, {"sha": "ffab194149e12c79ba1525339844aaf40e2739b4", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n+#![feature(slice_patterns)]\n #![allow(dead_code)]\n \n // Matching against NaN should result in a warning"}, {"sha": "042ec95f7e753787500869760c5faa44b016f980", "filename": "src/test/compile-fail/match-ref-ice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n // The arity of `ref x` is always 1. If the pattern is compared to some non-structural type whose\n // arity is always 0, an ICE occurs.\n //"}, {"sha": "60d0c24bb3d3679002d03d3d4d5ffe9b590f56c7", "filename": "src/test/compile-fail/match-vec-fixed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn a() {\n     let v = [1, 2, 3];\n     match v {"}, {"sha": "0bbba8861217da39ff341bfa6387414d07f8dd15", "filename": "src/test/compile-fail/match-vec-mismatch-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     match () {\n         [()] => { }"}, {"sha": "ef75213d34b85109fa53a7e76d873d9b063f007d", "filename": "src/test/compile-fail/match-vec-mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     match \"foo\".to_string() {\n         ['f', 'o', ..] => {} //~ ERROR mismatched types"}, {"sha": "48b70b4bda08efc31983e0bffaee437639cb5ae3", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n \n fn main() {\n     let x: Vec<(isize, isize)> = Vec::new();"}, {"sha": "ad2b8c400e57608c0e2613223c846e1d3ae590f8", "filename": "src/test/compile-fail/non-exhaustive-match-nested.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n enum t { a(u), b }\n enum u { c, d }\n "}, {"sha": "b9749c2696e32adf505b7df91a53df19dba6bafd", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n enum t { a, b, }\n \n fn main() {"}, {"sha": "146265bf0e1508bfaa7755642f04d3c43a5a12d6", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n \n struct Foo {\n     first: bool,"}, {"sha": "8e83177090bb5223133a40c4b203fad65c2d1184", "filename": "src/test/compile-fail/regions-pattern-typing-issue-19552.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n fn assert_static<T: 'static>(_t: T) {}\n \n fn main() {"}, {"sha": "f36b8d0abc7e3a293e7acf00790403c4066abcbd", "filename": "src/test/run-make/graphviz-flowgraph/f07.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff07.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n pub fn pat_vec_7() {\n     match [7, 77, 777, 7777] {\n         [x, y, ..] => x + y"}, {"sha": "e2c96085714bac2394acf4ac88858a7a1044c76b", "filename": "src/test/run-pass/destructure-array-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -13,6 +13,8 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(slice_patterns)]\n+\n struct D { x: u8 }\n \n impl Drop for D { fn drop(&mut self) { } }"}, {"sha": "158bc8fcc1ac9c8fa9b5881c248d2fab0411d70f", "filename": "src/test/run-pass/ignore-all-the-things.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -11,6 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n \n struct Foo(int, int, int, int);\n struct Bar{a: int, b: int, c: int, d: int}"}, {"sha": "f89ad8c30103954aafc0644226423aa33c993841", "filename": "src/test/run-pass/issue-13027.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13027.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -13,6 +13,8 @@\n // Tests that match expression handles overlapped literal and range\n // properly in the presence of guard function.\n \n+#![feature(slice_patterns)]\n+\n fn val() -> uint { 1 }\n \n static CONST: uint = 1;"}, {"sha": "4369dc6292c36909b73b078a42b50d176e6eeb9c", "filename": "src/test/run-pass/issue-15080.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15080.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -10,6 +10,8 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     let mut x: &[_] = &[1, 2, 3, 4];\n "}, {"sha": "16c15daa80b6342608581b4ffc737a88a1a51514", "filename": "src/test/run-pass/issue-15104.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-15104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-15104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15104.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -10,6 +10,8 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     assert_eq!(count_members(&[1, 2, 3, 4]), 4);\n }"}, {"sha": "66c7f7ccec58072cc3b48f61720e6c9f06db3ffd", "filename": "src/test/run-pass/issue-16648.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-16648.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-16648.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16648.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -10,6 +10,8 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     let x: (int, &[int]) = (2, &[1, 2]);\n     assert_eq!(match x {"}, {"sha": "41fab9d9d54e0f905613e2200d58f5bd0b09846c", "filename": "src/test/run-pass/issue-17877.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17877.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -10,6 +10,8 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     assert_eq!(match [0u8; 1024] {\n         _ => 42_usize,"}, {"sha": "e2016feeb0ad75dbb0c4cdf72c7397e46e1f5d4a", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -11,6 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n \n use std::ops::Add;\n "}, {"sha": "1ba23de69a7de75b5e0e5c8dca7f3d59ba30a4a5", "filename": "src/test/run-pass/match-vec-alternatives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -11,6 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n \n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {\n     match (l1, l2) {"}, {"sha": "983ebc1b8dc18a853be642d7cdb2e7e94005094d", "filename": "src/test/run-pass/trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -11,6 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![feature(advanced_slice_patterns,)]\n+#![feature(slice_patterns)]\n \n fn f<T,>(_: T,) {}\n "}, {"sha": "2b80ad81037f216710a5fc691287b2b7c6bd204d", "filename": "src/test/run-pass/vec-matching-autoslice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -10,6 +10,8 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(slice_patterns)]\n+\n pub fn main() {\n     let x = [1, 2, 3];\n     match x {"}, {"sha": "1278eaf96a48c015c9b205352141bd7c794219ea", "filename": "src/test/run-pass/vec-matching-fixed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -11,6 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n \n fn a() {\n     let x = [1, 2, 3];"}, {"sha": "c375fc85bc1d35865cb251c0f6c5d8d3bd9af496", "filename": "src/test/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -11,6 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n \n fn foldl<T, U, F>(values: &[T],\n                   initial: U,"}, {"sha": "b6c2d050f7c5c2a9061cd04755125d6a224835e1", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(slice_patterns)]\n+\n pub fn main() {\n     let x = &[1, 2, 3, 4, 5];\n     let x: &[int] = &[1, 2, 3, 4, 5];"}, {"sha": "9ffd9a9a04c15748abb3d4bf3585acd66e6096f3", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -11,6 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n \n fn a() {\n     let x = [1];"}, {"sha": "091e3f03e7ac7dabfae546407a66f55bcbe1fa6b", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -11,6 +11,8 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(slice_patterns)]\n+\n struct Foo {\n     string: String\n }"}, {"sha": "b98f907774b97984dc79f628254b3f58c6b55ddb", "filename": "src/test/run-pass/zero_sized_subslice_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1639e51f6e4d036478705f4581de3a7417ccec0f/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs?ref=1639e51f6e4d036478705f4581de3a7417ccec0f", "patch": "@@ -10,6 +10,8 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(slice_patterns)]\n+\n fn main() {\n     let x = [(), ()];\n "}]}