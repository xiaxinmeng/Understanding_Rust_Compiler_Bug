{"sha": "a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "node_id": "C_kwDOAAsO6NoAKGE3ZTUxYWM5OWVmNmViZjUwNWY5ZDFlNTg0ZWEwZjE4MDM1NGE1Y2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T19:45:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T19:45:27Z"}, "message": "Auto merge of #2392 - RalfJung:rustup, r=RalfJung\n\nrustup", "tree": {"sha": "0945a64e09b2526078aa90c025538fe0bb1e9e20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0945a64e09b2526078aa90c025538fe0bb1e9e20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "html_url": "https://github.com/rust-lang/rust/commit/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8095d0af47cb96de2c3631388fee9997c8759c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8095d0af47cb96de2c3631388fee9997c8759c8", "html_url": "https://github.com/rust-lang/rust/commit/e8095d0af47cb96de2c3631388fee9997c8759c8"}, {"sha": "5721927afe9ccae2d09691d20223e68d8669fb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5721927afe9ccae2d09691d20223e68d8669fb0c", "html_url": "https://github.com/rust-lang/rust/commit/5721927afe9ccae2d09691d20223e68d8669fb0c"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "38f4b2bda5f2ed4093888c7e2919b49de039eacb", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "patch": "@@ -1 +1 @@\n-4603ac31b0655793a82f110f544dc1c6abc57bb7\n+29c5a028b0c92aa5da6a8eb6d6585a389fcf1035"}, {"sha": "190eb2098ad019a14770401abb8e88fe07278f26", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "patch": "@@ -258,7 +258,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Push frame.\n         let mir = this.load_mir(f.def, None)?;\n         let dest = match dest {\n-            Some(dest) => *dest,\n+            Some(dest) => dest.clone(),\n             None => MPlaceTy::fake_alloc_zst(this.layout_of(mir.return_ty())?).into(),\n         };\n         this.push_stack_frame(f, mir, &dest, stack_pop)?;"}, {"sha": "97f9a7b93cace0e4159e9c0425108a0a4ee675da", "filename": "src/shims/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fmod.rs?ref=a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "patch": "@@ -224,7 +224,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"frem_fast\" => mir::BinOp::Rem,\n                     _ => bug!(),\n                 };\n-                let float_finite = |x: ImmTy<'tcx, _>| -> InterpResult<'tcx, bool> {\n+                let float_finite = |x: &ImmTy<'tcx, _>| -> InterpResult<'tcx, bool> {\n                     Ok(match x.layout.ty.kind() {\n                         ty::Float(FloatTy::F32) => x.to_scalar()?.to_f32()?.is_finite(),\n                         ty::Float(FloatTy::F64) => x.to_scalar()?.to_f64()?.is_finite(),\n@@ -234,7 +234,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         ),\n                     })\n                 };\n-                match (float_finite(a)?, float_finite(b)?) {\n+                match (float_finite(&a)?, float_finite(&b)?) {\n                     (false, false) => throw_ub_format!(\n                         \"`{intrinsic_name}` intrinsic called with non-finite value as both parameters\",\n                     ),"}, {"sha": "42264f6ff3440f79ece8662404f886c1baa70077", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "patch": "@@ -108,7 +108,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // when we pop this frame.\n         if this.tcx.sess.panic_strategy() == PanicStrategy::Unwind {\n             this.frame_mut().extra.catch_unwind =\n-                Some(CatchUnwindData { catch_fn, data, dest: *dest, ret });\n+                Some(CatchUnwindData { catch_fn, data, dest: dest.clone(), ret });\n         }\n \n         Ok(())"}, {"sha": "d921b66afbd0d1c2e03dc4e2351465dd0e5865cc", "filename": "src/shims/unix/linux/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "patch": "@@ -188,8 +188,8 @@ pub fn futex<'tcx>(\n                 this.write_scalar(Scalar::from_machine_isize(0, this), dest)?;\n                 // Register a timeout callback if a timeout was specified.\n                 // This callback will override the return value when the timeout triggers.\n-                let dest = *dest;\n                 if let Some(timeout_time) = timeout_time {\n+                    let dest = dest.clone();\n                     this.register_timeout_callback(\n                         thread,\n                         timeout_time,"}, {"sha": "590bc1bf0056c7ccf0ca8d01381ad90d242718a7", "filename": "src/shims/unix/sync.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fshims%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fshims%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fsync.rs?ref=a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "patch": "@@ -828,9 +828,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // We return success for now and override it in the timeout callback.\n         this.write_scalar(Scalar::from_i32(0), dest)?;\n \n-        let dest = *dest;\n-\n         // Register the timeout callback.\n+        let dest = dest.clone();\n         this.register_timeout_callback(\n             active_thread,\n             timeout_time,"}, {"sha": "fb40291302d610643883c91e72b4398b15647984", "filename": "src/stacked_borrows/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd/src%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fmod.rs?ref=a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "patch": "@@ -985,7 +985,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // See https://github.com/rust-lang/unsafe-code-guidelines/issues/276.\n         let size = match size {\n             Some(size) => size,\n-            None => return Ok(*val),\n+            None => return Ok(val.clone()),\n         };\n \n         // Compute new borrow.\n@@ -1116,13 +1116,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// explicit. Also see <https://github.com/rust-lang/rust/issues/71117>.\n     fn retag_return_place(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let return_place = this.frame_mut().return_place;\n+        let return_place = &this.frame().return_place;\n         if return_place.layout.is_zst() {\n             // There may not be any memory here, nothing to do.\n             return Ok(());\n         }\n         // We need this to be in-memory to use tagged pointers.\n-        let return_place = this.force_allocation(&return_place)?;\n+        let return_place = this.force_allocation(&return_place.clone())?;\n \n         // We have to turn the place into a pointer to use the existing code.\n         // (The pointer type does not matter, so we use a raw pointer.)"}]}