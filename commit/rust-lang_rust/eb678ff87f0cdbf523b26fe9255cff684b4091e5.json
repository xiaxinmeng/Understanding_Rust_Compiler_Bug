{"sha": "eb678ff87f0cdbf523b26fe9255cff684b4091e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNjc4ZmY4N2YwY2RiZjUyM2IyNmZlOTI1NWNmZjY4NGI0MDkxZTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-06T22:23:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-08T23:12:13Z"}, "message": "librustc: Change the syntax of subslice matching to use postfix `..`\ninstead of prefix `..`.\n\nThis breaks code that looked like:\n\n    match foo {\n        [ first, ..middle, last ] => { ... }\n    }\n\nChange this code to:\n\n    match foo {\n        [ first, middle.., last ] => { ... }\n    }\n\nRFC #55.\n\nCloses #16967.\n\n[breaking-change]", "tree": {"sha": "9fb3745051a57fd5f73d6d50aabf07ce9d2f6ea4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb3745051a57fd5f73d6d50aabf07ce9d2f6ea4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb678ff87f0cdbf523b26fe9255cff684b4091e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb678ff87f0cdbf523b26fe9255cff684b4091e5", "html_url": "https://github.com/rust-lang/rust/commit/eb678ff87f0cdbf523b26fe9255cff684b4091e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb678ff87f0cdbf523b26fe9255cff684b4091e5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f34760e4173dda94162502153fe4c5a2a96fc9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f34760e4173dda94162502153fe4c5a2a96fc9d", "html_url": "https://github.com/rust-lang/rust/commit/6f34760e4173dda94162502153fe4c5a2a96fc9d"}], "stats": {"total": 192, "additions": 110, "deletions": 82}, "files": [{"sha": "af8020babf2097bd8d90ae8f30cf5666a5252deb", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -3300,7 +3300,7 @@ it will bind the corresponding slice to the variable. Example:\n fn is_symmetric(list: &[uint]) -> bool {\n     match list {\n         [] | [_]                   => true,\n-        [x, ..inside, y] if x == y => is_symmetric(inside),\n+        [x, inside.., y] if x == y => is_symmetric(inside),\n         _                          => false\n     }\n }"}, {"sha": "0e5a624b273336953726d98ac298e62ed0fef6e2", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -1707,7 +1707,7 @@ let score = match numbers {\n     [] => 0,\n     [a] => a * 10,\n     [a, b] => a * 6 + b * 4,\n-    [a, b, c, ..rest] => a * 5 + b * 3 + c * 2 + rest.len() as int\n+    [a, b, c, rest..] => a * 5 + b * 3 + c * 2 + rest.len() as int\n };\n ~~~~\n "}, {"sha": "3026b5c24c1a4be6e2397701d83c9dd2a8490661", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -1549,18 +1549,13 @@ impl<'a> Resolver<'a> {\n                             PathListMod { .. } => Some(item.span),\n                             _ => None\n                         }).collect::<Vec<Span>>();\n-                        match mod_spans.as_slice() {\n-                            [first, second, ..other] => {\n-                                self.resolve_error(first,\n-                                    \"`mod` import can only appear once in the list\");\n-                                self.session.span_note(second,\n-                                        \"another `mod` import appears here\");\n-                                for &other_span in other.iter() {\n-                                    self.session.span_note(other_span,\n-                                        \"another `mod` import appears here\");\n-                                }\n-                            },\n-                            [_] | [] => ()\n+                        if mod_spans.len() > 1 {\n+                            self.resolve_error(mod_spans[0],\n+                                \"`mod` import can only appear once in the list\");\n+                            for other_span in mod_spans.iter().skip(1) {\n+                                self.session.span_note(*other_span,\n+                                    \"another `mod` import appears here\");\n+                            }\n                         }\n \n                         for source_item in source_items.iter() {"}, {"sha": "ec6fd013d08aef274a6081217f87774831ad56ac", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -35,6 +35,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteManagedType,\n     ObsoleteManagedExpr,\n     ObsoleteImportRenaming,\n+    ObsoleteSubsliceMatch,\n }\n \n pub trait ParserObsoleteMethods {\n@@ -87,6 +88,10 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n             ObsoleteImportRenaming => (\n                 \"`use foo = bar` syntax\",\n                 \"write `use bar as foo` instead\"\n+            ),\n+            ObsoleteSubsliceMatch => (\n+                \"subslice match syntax\",\n+                \"instead of `..xs`, write `xs..` in a pattern\"\n             )\n         };\n "}, {"sha": "6aff1152f7e1d18c032cf958ad1fe64c46fd1ef3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -2858,43 +2858,42 @@ impl<'a> Parser<'a> {\n         let mut before_slice = true;\n \n         while self.token != token::RBRACKET {\n-            if first { first = false; }\n-            else { self.expect(&token::COMMA); }\n+            if first {\n+                first = false;\n+            } else {\n+                self.expect(&token::COMMA);\n+            }\n \n-            let mut is_slice = false;\n             if before_slice {\n                 if self.token == token::DOTDOT {\n                     self.bump();\n-                    is_slice = true;\n-                    before_slice = false;\n-                }\n-            }\n \n-            if is_slice {\n-                if self.token == token::COMMA || self.token == token::RBRACKET {\n-                    slice = Some(box(GC) ast::Pat {\n-                        id: ast::DUMMY_NODE_ID,\n-                        node: PatWild(PatWildMulti),\n-                        span: self.span,\n-                    })\n-                } else {\n-                    let subpat = self.parse_pat();\n-                    match *subpat {\n-                        ast::Pat { node: PatIdent(_, _, _), .. } => {\n-                            slice = Some(subpat);\n-                        }\n-                        ast::Pat { span, .. } => self.span_fatal(\n-                            span, \"expected an identifier or nothing\"\n-                        )\n+                    if self.token == token::COMMA ||\n+                            self.token == token::RBRACKET {\n+                        slice = Some(box(GC) ast::Pat {\n+                            id: ast::DUMMY_NODE_ID,\n+                            node: PatWild(PatWildMulti),\n+                            span: self.span,\n+                        });\n+                        before_slice = false;\n+                    } else {\n+                        let _ = self.parse_pat();\n+                        let span = self.span;\n+                        self.obsolete(span, ObsoleteSubsliceMatch);\n                     }\n+                    continue\n                 }\n+            }\n+\n+            let subpat = self.parse_pat();\n+            if before_slice && self.token == token::DOTDOT {\n+                self.bump();\n+                slice = Some(subpat);\n+                before_slice = false;\n+            } else if before_slice {\n+                before.push(subpat);\n             } else {\n-                let subpat = self.parse_pat();\n-                if before_slice {\n-                    before.push(subpat);\n-                } else {\n-                    after.push(subpat);\n-                }\n+                after.push(subpat);\n             }\n         }\n \n@@ -3065,7 +3064,11 @@ impl<'a> Parser<'a> {\n             // These expressions are limited to literals (possibly\n             // preceded by unary-minus) or identifiers.\n             let val = self.parse_literal_maybe_minus();\n-            if self.eat(&token::DOTDOT) {\n+            if self.token == token::DOTDOT &&\n+                    self.look_ahead(1, |t| {\n+                        *t != token::COMMA && *t != token::RBRACKET\n+                    }) {\n+                self.bump();\n                 let end = if is_ident_or_path(&self.token) {\n                     let path = self.parse_path(LifetimeAndTypesWithColons)\n                                    .path;\n@@ -3106,7 +3109,10 @@ impl<'a> Parser<'a> {\n                 }\n             });\n \n-            if self.look_ahead(1, |t| *t == token::DOTDOT) {\n+            if self.look_ahead(1, |t| *t == token::DOTDOT) &&\n+                    self.look_ahead(2, |t| {\n+                        *t != token::COMMA && *t != token::RBRACKET\n+                    }) {\n                 let start = self.parse_expr_res(RESTRICT_NO_BAR_OP);\n                 self.eat(&token::DOTDOT);\n                 let end = self.parse_expr_res(RESTRICT_NO_BAR_OP);"}, {"sha": "eaeb6aaab8a75134d2cc159eb30e8b023caa6ff3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -1912,13 +1912,13 @@ impl<'a> State<'a> {\n                                    |s, p| s.print_pat(&**p)));\n                 for p in slice.iter() {\n                     if !before.is_empty() { try!(self.word_space(\",\")); }\n+                    try!(self.print_pat(&**p));\n                     match **p {\n                         ast::Pat { node: ast::PatWild(ast::PatWildMulti), .. } => {\n                             // this case is handled by print_pat\n                         }\n                         _ => try!(word(&mut self.s, \"..\")),\n                     }\n-                    try!(self.print_pat(&**p));\n                     if !after.is_empty() { try!(self.word_space(\",\")); }\n                 }\n                 try!(self.commasep(Inconsistent,"}, {"sha": "d3c6a280e8c2a2dcabd6c582f56b758f47599250", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -25,7 +25,7 @@ pub fn main() {\n     );\n     let x: &[Foo] = x.as_slice();\n     match x {\n-        [_, ..tail] => {\n+        [_, tail..] => {\n             match tail {\n                 [Foo { string: a }, //~ ERROR cannot move out of dereference of `&`-pointer\n                  Foo { string: b }] => {"}, {"sha": "912441a38cfda45583c851245313d29fd9637f69", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -12,7 +12,7 @@ fn a<'a>() -> &'a [int] {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n     let tail = match vec {\n-        [_, ..tail] => tail,\n+        [_, tail..] => tail,\n         _ => fail!(\"a\")\n     };\n     tail\n@@ -22,7 +22,7 @@ fn b<'a>() -> &'a [int] {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n     let init = match vec {\n-        [..init, _] => init,\n+        [init.., _] => init,\n         _ => fail!(\"b\")\n     };\n     init\n@@ -32,7 +32,7 @@ fn c<'a>() -> &'a [int] {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n     let slice = match vec {\n-        [_, ..slice, _] => slice,\n+        [_, slice.., _] => slice,\n         _ => fail!(\"c\")\n     };\n     slice"}, {"sha": "cc1dbc81955435b7aab2029a2b0c3ff4d54c7660", "filename": "src/test/compile-fail/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -12,7 +12,7 @@ fn a() {\n     let mut v = vec!(1, 2, 3);\n     let vb: &mut [int] = v.as_mut_slice();\n     match vb {\n-        [_a, ..tail] => {\n+        [_a, tail..] => {\n             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow\n         }\n         _ => {}"}, {"sha": "cb8762f44fb7932ceef6283b1648635788e741cf", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     let mut a = [1i, 2, 3, 4];\n     let t = match a {\n-        [1, 2, ..tail] => tail,\n+        [1, 2, tail..] => tail,\n         _ => unreachable!()\n     };\n     a[0] = 0; //~ ERROR cannot assign to `a[..]` because it is borrowed"}, {"sha": "58932d1b4228a7a02e2ac2e6c7928680b8e9b53f", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -22,7 +22,7 @@ fn b() {\n     let mut vec = vec!(box 1i, box 2, box 3);\n     let vec: &mut [Box<int>] = vec.as_mut_slice();\n     match vec {\n-        [.._b] => {\n+        [_b..] => {\n             vec[0] = box 4; //~ ERROR cannot assign\n         }\n     }\n@@ -33,7 +33,7 @@ fn c() {\n     let vec: &mut [Box<int>] = vec.as_mut_slice();\n     match vec {\n         [_a,         //~ ERROR cannot move out\n-         .._b] => {  //~^ NOTE attempting to move value to here\n+         _b..] => {  //~^ NOTE attempting to move value to here\n \n             // Note: `_a` is *moved* here, but `b` is borrowing,\n             // hence illegal.\n@@ -50,7 +50,7 @@ fn d() {\n     let mut vec = vec!(box 1i, box 2, box 3);\n     let vec: &mut [Box<int>] = vec.as_mut_slice();\n     match vec {\n-        [.._a,     //~ ERROR cannot move out\n+        [_a..,     //~ ERROR cannot move out\n          _b] => {} //~ NOTE attempting to move value to here\n         _ => {}\n     }"}, {"sha": "2c9cf7d1b65be0abf147be7a86b1e360afb9a0f9", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -12,7 +12,7 @@ fn a<'a>() -> &'a int {\n     let vec = vec!(1, 2, 3, 4);\n     let vec: &[int] = vec.as_slice(); //~ ERROR `vec` does not live long enough\n     let tail = match vec {\n-        [_a, ..tail] => &tail[0],\n+        [_a, tail..] => &tail[0],\n         _ => fail!(\"foo\")\n     };\n     tail"}, {"sha": "4522b536ffd347eea776c924d58506608f00b6f4", "filename": "src/test/compile-fail/issue-12369.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let v: int = match sl.as_slice() {\n         [] => 0,\n         [a,b,c] => 3,\n-        [a, ..rest] => a,\n-        [10,a, ..rest] => 10 //~ ERROR: unreachable pattern\n+        [a, rest..] => a,\n+        [10,a, rest..] => 10 //~ ERROR: unreachable pattern\n     };\n }"}, {"sha": "26866cbbc6033c85e5de3a9536caf879226b0491", "filename": "src/test/compile-fail/issue-12567.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -11,10 +11,10 @@\n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) {\n     match (l1, l2) {\n         ([], []) => println!(\"both empty\"),\n-        ([], [hd, ..tl]) | ([hd, ..tl], []) => println!(\"one empty\"),\n+        ([], [hd, tl..]) | ([hd, tl..], []) => println!(\"one empty\"),\n         //~^ ERROR: cannot move out of dereference\n         //~^^ ERROR: cannot move out of dereference\n-        ([hd1, ..tl1], [hd2, ..tl2]) => println!(\"both nonempty\"),\n+        ([hd1, tl1..], [hd2, tl2..]) => println!(\"both nonempty\"),\n         //~^ ERROR: cannot move out of dereference\n         //~^^ ERROR: cannot move out of dereference\n     }"}, {"sha": "51e83c14aa0082686c1fd2c56969aeb67d381d86", "filename": "src/test/compile-fail/match-vec-invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fmatch-vec-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fmatch-vec-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-invalid.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     let a = Vec::new();\n     match a {\n-        [1, ..tail, ..tail] => {}, //~ ERROR: unexpected token: `..`\n+        [1, tail.., tail..] => {}, //~ ERROR: expected `,`, found `..`\n         _ => ()\n     }\n }"}, {"sha": "a85ce660e8b1ffc08302b5a7bb2f2b06edf47075", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -31,7 +31,7 @@ fn main() {\n     let x: Vec<char> = vec!('a', 'b', 'c');\n     let x: &[char] = x.as_slice();\n     match x {\n-        ['a', 'b', 'c', .._tail] => {}\n+        ['a', 'b', 'c', _tail..] => {}\n         ['a', 'b', 'c'] => {} //~ ERROR unreachable pattern\n         _ => {}\n     }"}, {"sha": "ae5f40d4874c991def4b70f6cf134d4b8925afe9", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -38,14 +38,14 @@ fn main() {\n     let vec = vec!(Some(42i), None, Some(21i));\n     let vec: &[Option<int>] = vec.as_slice();\n     match vec { //~ ERROR non-exhaustive patterns: `[]` not covered\n-        [Some(..), None, ..tail] => {}\n-        [Some(..), Some(..), ..tail] => {}\n+        [Some(..), None, tail..] => {}\n+        [Some(..), Some(..), tail..] => {}\n         [None] => {}\n     }\n     let vec = vec!(1i);\n     let vec: &[int] = vec.as_slice();\n     match vec {\n-        [_, ..tail] => (),\n+        [_, tail..] => (),\n         [] => ()\n     }\n     let vec = vec!(0.5f32);\n@@ -59,10 +59,10 @@ fn main() {\n     let vec = vec!(Some(42i), None, Some(21i));\n     let vec: &[Option<int>] = vec.as_slice();\n     match vec {\n-        [Some(..), None, ..tail] => {}\n-        [Some(..), Some(..), ..tail] => {}\n-        [None, None, ..tail] => {}\n-        [None, Some(..), ..tail] => {}\n+        [Some(..), None, tail..] => {}\n+        [Some(..), Some(..), tail..] => {}\n+        [None, None, tail..] => {}\n+        [None, Some(..), tail..] => {}\n         [Some(_)] => {}\n         [None] => {}\n         [] => {}"}, {"sha": "d7f95f20d9f7a717bd03665cfbb2993c47db2618", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -63,7 +63,7 @@ fn vectors_with_nested_enums() {\n         [Second(true), First] => (),\n         [Second(true), Second(true)] => (),\n         [Second(false), _] => (),\n-        [_, _, ..tail, _] => ()\n+        [_, _, tail.., _] => ()\n     }\n }\n "}, {"sha": "6330aac2d8b75878cd1d65be252213c07e97828c", "filename": "src/test/compile-fail/vec-matching-obsolete-syntax.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fvec-matching-obsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Fcompile-fail%2Fvec-matching-obsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-matching-obsolete-syntax.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = [1i, 2, 3];\n+    match x {\n+        [a, b, ..c] => {    //~ ERROR obsolete syntax\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+            let expected: &[_] = &[3];\n+            assert_eq!(c, expected);\n+        }\n+    }\n+}\n+"}, {"sha": "1709321a71cfdaa76f64f93a90abfad8012c2a8c", "filename": "src/test/run-pass/issue-15080.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15080.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -14,11 +14,11 @@ fn main() {\n     let mut result = vec!();\n     loop {\n         x = match x {\n-            [1, n, 3, ..rest] => {\n+            [1, n, 3, rest..] => {\n                 result.push(n);\n                 rest\n             }\n-            [n, ..rest] => {\n+            [n, rest..] => {\n                 result.push(n);\n                 rest\n             }"}, {"sha": "c6c9e8004558cce19afae47a568bd14ef69e7e5f", "filename": "src/test/run-pass/issue-15104.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fissue-15104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fissue-15104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15104.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -16,6 +16,6 @@ fn count_members(v: &[uint]) -> uint {\n     match v {\n         []         => 0,\n         [_]        => 1,\n-        [_x, ..xs] => 1 + count_members(xs)\n+        [_x, xs..] => 1 + count_members(xs)\n     }\n }"}, {"sha": "817f1ee13933b71b3a10004e655634df8852d06a", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     assert_eq!(d, \"baz\");\n \n     let out = bar(\"baz\", \"foo\");\n-    let [a, ..xs, d] = out;\n+    let [a, xs.., d] = out;\n     assert_eq!(a, \"baz\");\n     assert!(xs == [\"foo\", \"foo\"]);\n     assert_eq!(d, \"baz\");"}, {"sha": "519d6987a7eb3f4f72e7d813138ffa2cc1e144ee", "filename": "src/test/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -13,7 +13,7 @@ fn foldl<T,U:Clone>(values: &[T],\n                     function: |partial: U, element: &T| -> U)\n                     -> U {\n     match values {\n-        [ref head, ..tail] =>\n+        [ref head, tail..] =>\n             foldl(tail, function(initial, head), function),\n         [] => initial.clone()\n     }\n@@ -24,7 +24,7 @@ fn foldr<T,U:Clone>(values: &[T],\n                     function: |element: &T, partial: U| -> U)\n                     -> U {\n     match values {\n-        [..head, ref tail] =>\n+        [head.., ref tail] =>\n             foldr(head, function(tail, initial), function),\n         [] => initial.clone()\n     }"}, {"sha": "a140399447b3bcbb99837f04b8f433a9eed021da", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n     let x: &[int] = &[1, 2, 3, 4, 5];\n     if !x.is_empty() {\n         let el = match x {\n-            [1, ..ref tail] => &tail[0],\n+            [1, ref tail..] => &tail[0],\n             _ => unreachable!()\n         };\n         println!(\"{}\", *el);"}, {"sha": "bb636d6a6731ec65a6307cdbd0dac5ac4a3ed125", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -20,23 +20,23 @@ fn a() {\n fn b() {\n     let x = [1i, 2, 3];\n     match x {\n-        [a, b, ..c] => {\n+        [a, b, c..] => {\n             assert_eq!(a, 1);\n             assert_eq!(b, 2);\n             let expected: &[_] = &[3];\n             assert_eq!(c, expected);\n         }\n     }\n     match x {\n-        [..a, b, c] => {\n+        [a.., b, c] => {\n             let expected: &[_] = &[1];\n             assert_eq!(a, expected);\n             assert_eq!(b, 2);\n             assert_eq!(c, 3);\n         }\n     }\n     match x {\n-        [a, ..b, c] => {\n+        [a, b.., c] => {\n             assert_eq!(a, 1);\n             let expected: &[_] = &[2];\n             assert_eq!(b, expected);"}, {"sha": "a1a222549a086a10913365612ec7d78a17bffabf", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb678ff87f0cdbf523b26fe9255cff684b4091e5/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=eb678ff87f0cdbf523b26fe9255cff684b4091e5", "patch": "@@ -20,14 +20,14 @@ pub fn main() {\n         Foo { string: \"baz\".to_string() }\n     ];\n     match x {\n-        [ref first, ..tail] => {\n+        [ref first, tail..] => {\n             assert!(first.string == \"foo\".to_string());\n             assert_eq!(tail.len(), 2);\n             assert!(tail[0].string == \"bar\".to_string());\n             assert!(tail[1].string == \"baz\".to_string());\n \n             match tail {\n-                [Foo { .. }, _, Foo { .. }, .. _tail] => {\n+                [Foo { .. }, _, Foo { .. }, _tail..] => {\n                     unreachable!();\n                 }\n                 [Foo { string: ref a }, Foo { string: ref b }] => {"}]}