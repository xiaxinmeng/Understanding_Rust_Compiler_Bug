{"sha": "2ff1f24f2b95604b43518f334c445b9a5ab47c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZjFmMjRmMmI5NTYwNGI0MzUxOGYzMzRjNDQ1YjlhNWFiNDdjMjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-07T09:11:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-07T09:41:15Z"}, "message": "bump rust", "tree": {"sha": "f22e0473101ee729a560d38c8ec44eef3ec1a045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f22e0473101ee729a560d38c8ec44eef3ec1a045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ff1f24f2b95604b43518f334c445b9a5ab47c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff1f24f2b95604b43518f334c445b9a5ab47c21", "html_url": "https://github.com/rust-lang/rust/commit/2ff1f24f2b95604b43518f334c445b9a5ab47c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ff1f24f2b95604b43518f334c445b9a5ab47c21/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9e0f2d820cf2f55f8fc76194016fb513ac5b8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9e0f2d820cf2f55f8fc76194016fb513ac5b8c", "html_url": "https://github.com/rust-lang/rust/commit/0e9e0f2d820cf2f55f8fc76194016fb513ac5b8c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "48887947cdf79def91de84d444cf49fe8aeb3d6b", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ff1f24f2b95604b43518f334c445b9a5ab47c21/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/2ff1f24f2b95604b43518f334c445b9a5ab47c21/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=2ff1f24f2b95604b43518f334c445b9a5ab47c21", "patch": "@@ -1 +1 @@\n-nightly-2018-11-05\n+nightly-2018-11-07"}, {"sha": "20402f4a23293d3f5daa7da5da9d6b411986e2bb", "filename": "src/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ff1f24f2b95604b43518f334c445b9a5ab47c21/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff1f24f2b95604b43518f334c445b9a5ab47c21/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=2ff1f24f2b95604b43518f334c445b9a5ab47c21", "patch": "@@ -87,11 +87,11 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n \n             _ if intrinsic_name.starts_with(\"atomic_cxchg\") => {\n                 let ptr = self.ref_to_mplace(self.read_immediate(args[0])?)?;\n-                let expect_old = self.read_immediate(args[1])?; // read as value for the sake of `binary_op_val()`\n+                let expect_old = self.read_immediate(args[1])?; // read as value for the sake of `binary_op_imm()`\n                 let new = self.read_scalar(args[2])?;\n-                let old = self.read_immediate(ptr.into())?; // read as value for the sake of `binary_op_val()`\n-                // binary_op_val will bail if either of them is not a scalar\n-                let (eq, _) = self.binary_op_val(mir::BinOp::Eq, old, expect_old)?;\n+                let old = self.read_immediate(ptr.into())?; // read as value for the sake of `binary_op_imm()`\n+                // binary_op_imm will bail if either of them is not a scalar\n+                let (eq, _) = self.binary_op_imm(mir::BinOp::Eq, old, expect_old)?;\n                 let res = Immediate::ScalarPair(old.to_scalar_or_undef(), eq.into());\n                 self.write_immediate(res, dest)?; // old value is returned\n                 // update ptr depending on comparison\n@@ -234,7 +234,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 let a = self.read_immediate(args[0])?;\n                 let b = self.read_immediate(args[1])?;\n                 // check x % y != 0\n-                if self.binary_op_val(mir::BinOp::Rem, a, b)?.0.to_bytes()? != 0 {\n+                if self.binary_op_imm(mir::BinOp::Rem, a, b)?.0.to_bytes()? != 0 {\n                     return err!(ValidationFailure(format!(\"exact_div: {:?} cannot be divided by {:?}\", a, b)));\n                 }\n                 self.binop_ignore_overflow(mir::BinOp::Div, a, b, dest)?;"}]}