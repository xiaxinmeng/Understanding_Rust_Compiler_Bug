{"sha": "421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWJkNzdmNDJjMmZlOGEyNTk2ZGJjYzE1ODBlYzk3ZmI4OTAwOWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-06T16:32:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-06T16:32:46Z"}, "message": "Auto merge of #64564 - jonas-schievink:cowardly-default, r=nikomatsakis\n\nDeny specializing items not in the parent impl\n\nPart of https://github.com/rust-lang/rust/issues/29661 (https://github.com/rust-lang/rfcs/pull/2532). At least sort of?\n\nThis was discussed in https://github.com/rust-lang/rust/pull/61812#discussion_r300504114 and is needed for that PR to make progress (fixing an unsoundness).\n\nOne annoyance with doing this is that it sometimes requires users to copy-paste a provided trait method into an impl just to mark it `default` (ie. there is no syntax to forward this impl method to the provided trait method).\n\ncc @Centril and @arielb1", "tree": {"sha": "7c0dc2e29403ff3bc579d3d422a4495d067ca751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c0dc2e29403ff3bc579d3d422a4495d067ca751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "html_url": "https://github.com/rust-lang/rust/commit/421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9203ee7b56b9963e6b95a58fb43985a3d9a637f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9203ee7b56b9963e6b95a58fb43985a3d9a637f6", "html_url": "https://github.com/rust-lang/rust/commit/9203ee7b56b9963e6b95a58fb43985a3d9a637f6"}, {"sha": "47f89e7485ed7a76d8bfcbedcad07fd6b74fa927", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f89e7485ed7a76d8bfcbedcad07fd6b74fa927", "html_url": "https://github.com/rust-lang/rust/commit/47f89e7485ed7a76d8bfcbedcad07fd6b74fa927"}], "stats": {"total": 313, "additions": 268, "deletions": 45}, "files": [{"sha": "9b5d9431ae20491b8c10efa8d370f236ffffc4eb", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -871,11 +871,33 @@ impl<I: Iterator + ?Sized> Iterator for Box<I> {\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n         (**self).nth(n)\n     }\n+    fn last(self) -> Option<I::Item> {\n+        BoxIter::last(self)\n+    }\n+}\n+\n+trait BoxIter {\n+    type Item;\n+    fn last(self) -> Option<Self::Item>;\n+}\n+\n+impl<I: Iterator + ?Sized> BoxIter for Box<I> {\n+    type Item = I::Item;\n+    default fn last(self) -> Option<I::Item> {\n+        #[inline]\n+        fn some<T>(_: Option<T>, x: T) -> Option<T> {\n+            Some(x)\n+        }\n+\n+        self.fold(None, some)\n+    }\n }\n \n+/// Specialization for sized `I`s that uses `I`s implementation of `last()`\n+/// instead of the default.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: Iterator + Sized> Iterator for Box<I> {\n-    fn last(self) -> Option<I::Item> where I: Sized {\n+impl<I: Iterator> BoxIter for Box<I> {\n+    fn last(self) -> Option<I::Item> {\n         (*self).last()\n     }\n }"}, {"sha": "d88bbe145d1fd7be647528ec025f91e8e2a78c60", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -1505,8 +1505,8 @@ fn assoc_ty_def(\n \n     if let Some(assoc_item) = trait_def\n         .ancestors(tcx, impl_def_id)\n-        .defs(tcx, assoc_ty_name, ty::AssocKind::Type, trait_def_id)\n-        .next() {\n+        .leaf_def(tcx, assoc_ty_name, ty::AssocKind::Type) {\n+\n         assoc_item\n     } else {\n         // This is saying that neither the trait nor"}, {"sha": "9c80ef7d4a23e0a612fa1b06913f091bb4cd50a5", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -125,7 +125,7 @@ pub fn find_associated_item<'tcx>(\n     let trait_def = tcx.trait_def(trait_def_id);\n \n     let ancestors = trait_def.ancestors(tcx, impl_data.impl_def_id);\n-    match ancestors.defs(tcx, item.ident, item.kind, trait_def_id).next() {\n+    match ancestors.leaf_def(tcx, item.ident, item.kind) {\n         Some(node_item) => {\n             let substs = tcx.infer_ctxt().enter(|infcx| {\n                 let param_env = param_env.with_reveal_all();"}, {"sha": "c64d6748ea97d563e47b7de484320192875c4415", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -7,7 +7,6 @@ use crate::traits;\n use crate::ty::{self, TyCtxt, TypeFoldable};\n use crate::ty::fast_reject::{self, SimplifiedType};\n use syntax::ast::Ident;\n-use crate::util::captures::Captures;\n use crate::util::nodemap::{DefIdMap, FxHashMap};\n \n /// A per-trait graph of impls in specialization order. At the moment, this\n@@ -419,6 +418,35 @@ impl<'tcx> Node {\n         tcx.associated_items(self.def_id())\n     }\n \n+    /// Finds an associated item defined in this node.\n+    ///\n+    /// If this returns `None`, the item can potentially still be found in\n+    /// parents of this node.\n+    pub fn item(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        trait_item_name: Ident,\n+        trait_item_kind: ty::AssocKind,\n+        trait_def_id: DefId,\n+    ) -> Option<ty::AssocItem> {\n+        use crate::ty::AssocKind::*;\n+\n+        tcx.associated_items(self.def_id())\n+            .find(move |impl_item| match (trait_item_kind, impl_item.kind) {\n+                | (Const, Const)\n+                | (Method, Method)\n+                | (Type, Type)\n+                | (Type, OpaqueTy)  // assoc. types can be made opaque in impls\n+                => tcx.hygienic_eq(impl_item.ident, trait_item_name, trait_def_id),\n+\n+                | (Const, _)\n+                | (Method, _)\n+                | (Type, _)\n+                | (OpaqueTy, _)\n+                => false,\n+            })\n+    }\n+\n     pub fn def_id(&self) -> DefId {\n         match *self {\n             Node::Impl(did) => did,\n@@ -427,6 +455,7 @@ impl<'tcx> Node {\n     }\n }\n \n+#[derive(Copy, Clone)]\n pub struct Ancestors<'tcx> {\n     trait_def_id: DefId,\n     specialization_graph: &'tcx Graph,\n@@ -465,32 +494,18 @@ impl<T> NodeItem<T> {\n }\n \n impl<'tcx> Ancestors<'tcx> {\n-    /// Search the items from the given ancestors, returning each definition\n-    /// with the given name and the given kind.\n-    // FIXME(#35870): avoid closures being unexported due to `impl Trait`.\n-    #[inline]\n-    pub fn defs(\n-        self,\n+    /// Finds the bottom-most (ie. most specialized) definition of an associated\n+    /// item.\n+    pub fn leaf_def(\n+        mut self,\n         tcx: TyCtxt<'tcx>,\n         trait_item_name: Ident,\n         trait_item_kind: ty::AssocKind,\n-        trait_def_id: DefId,\n-    ) -> impl Iterator<Item = NodeItem<ty::AssocItem>> + Captures<'tcx> + 'tcx {\n-        self.flat_map(move |node| {\n-            use crate::ty::AssocKind::*;\n-            node.items(tcx).filter(move |impl_item| match (trait_item_kind, impl_item.kind) {\n-                | (Const, Const)\n-                | (Method, Method)\n-                | (Type, Type)\n-                | (Type, OpaqueTy)\n-                => tcx.hygienic_eq(impl_item.ident, trait_item_name, trait_def_id),\n-\n-                | (Const, _)\n-                | (Method, _)\n-                | (Type, _)\n-                | (OpaqueTy, _)\n-                => false,\n-            }).map(move |item| NodeItem { node: node, item: item })\n+    ) -> Option<NodeItem<ty::AssocItem>> {\n+        let trait_def_id = self.trait_def_id;\n+        self.find_map(|node| {\n+            node.item(tcx, trait_item_name, trait_item_kind, trait_def_id)\n+                .map(|item| NodeItem { node, item })\n         })\n     }\n }"}, {"sha": "d8b1effe09bf41de6cff5796c3e2856f2365991d", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -4,7 +4,6 @@ use syntax_pos::Span;\n \n use crate::hir;\n use crate::hir::def_id::DefId;\n-use crate::traits::specialize::specialization_graph::NodeItem;\n use crate::ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use crate::ty::outlives::Component;\n use crate::ty::subst::{GenericArg, Subst, SubstsRef};\n@@ -667,8 +666,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn impl_item_is_final(self, node_item: &NodeItem<hir::Defaultness>) -> bool {\n-        node_item.item.is_final() && !self.impl_is_default(node_item.node.def_id())\n+    pub fn impl_item_is_final(self, assoc_item: &ty::AssocItem) -> bool {\n+        assoc_item.defaultness.is_final() && !self.impl_is_default(assoc_item.container.id())\n     }\n }\n "}, {"sha": "c1c6a655d96a9132fe1e366f24b356a2582e1681", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -73,6 +73,17 @@ impl<'tcx, M: QueryAccessors<'tcx, Key = DefId>> QueryDescription<'tcx> for M {\n             format!(\"processing {:?} with query `{}`\", def_id, name).into()\n         }\n     }\n+\n+    default fn cache_on_disk(_: TyCtxt<'tcx>, _: Self::Key, _: Option<&Self::Value>) -> bool {\n+        false\n+    }\n+\n+    default fn try_load_from_disk(\n+        _: TyCtxt<'tcx>,\n+        _: SerializedDepNodeIndex,\n+    ) -> Option<Self::Value> {\n+        bug!(\"QueryDescription::load_from_disk() called for an unsupported query.\")\n+    }\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::analysis<'tcx> {"}, {"sha": "f130ee821d17cbbc71c1e482403af4913b3e13b2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -1713,24 +1713,60 @@ fn check_specialization_validity<'tcx>(\n     impl_id: DefId,\n     impl_item: &hir::ImplItem,\n ) {\n-    let ancestors = trait_def.ancestors(tcx, impl_id);\n-\n     let kind = match impl_item.kind {\n         hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n         hir::ImplItemKind::Method(..) => ty::AssocKind::Method,\n         hir::ImplItemKind::OpaqueTy(..) => ty::AssocKind::OpaqueTy,\n         hir::ImplItemKind::TyAlias(_) => ty::AssocKind::Type,\n     };\n \n-    let parent = ancestors.defs(tcx, trait_item.ident, kind, trait_def.def_id).nth(1)\n-        .map(|node_item| node_item.map(|parent| parent.defaultness));\n+    let mut ancestor_impls = trait_def.ancestors(tcx, impl_id)\n+        .skip(1)\n+        .filter_map(|parent| {\n+            if parent.is_from_trait() {\n+                None\n+            } else {\n+                Some((parent, parent.item(tcx, trait_item.ident, kind, trait_def.def_id)))\n+            }\n+        })\n+        .peekable();\n \n-    if let Some(parent) = parent {\n-        if tcx.impl_item_is_final(&parent) {\n-            report_forbidden_specialization(tcx, impl_item, parent.node.def_id());\n-        }\n+    if ancestor_impls.peek().is_none() {\n+        // No parent, nothing to specialize.\n+        return;\n     }\n \n+    let opt_result = ancestor_impls.find_map(|(parent_impl, parent_item)| {\n+        match parent_item {\n+            // Parent impl exists, and contains the parent item we're trying to specialize, but\n+            // doesn't mark it `default`.\n+            Some(parent_item) if tcx.impl_item_is_final(&parent_item) => {\n+                Some(Err(parent_impl.def_id()))\n+            }\n+\n+            // Parent impl contains item and makes it specializable.\n+            Some(_) => {\n+                Some(Ok(()))\n+            }\n+\n+            // Parent impl doesn't mention the item. This means it's inherited from the\n+            // grandparent. In that case, if parent is a `default impl`, inherited items use the\n+            // \"defaultness\" from the grandparent, else they are final.\n+            None => if tcx.impl_is_default(parent_impl.def_id()) {\n+                None\n+            } else {\n+                Some(Err(parent_impl.def_id()))\n+            }\n+        }\n+    });\n+\n+    // If `opt_result` is `None`, we have only encoutered `default impl`s that don't contain the\n+    // item. This is allowed, the item isn't actually getting specialized here.\n+    let result = opt_result.unwrap_or(Ok(()));\n+\n+    if let Err(parent_impl) = result {\n+        report_forbidden_specialization(tcx, impl_item, parent_impl);\n+    }\n }\n \n fn check_impl_items_against_trait<'tcx>(\n@@ -1846,8 +1882,7 @@ fn check_impl_items_against_trait<'tcx>(\n     let associated_type_overridden = overridden_associated_type.is_some();\n     for trait_item in tcx.associated_items(impl_trait_ref.def_id) {\n         let is_implemented = trait_def.ancestors(tcx, impl_id)\n-            .defs(tcx, trait_item.ident, trait_item.kind, impl_trait_ref.def_id)\n-            .next()\n+            .leaf_def(tcx, trait_item.ident, trait_item.kind)\n             .map(|node_item| !node_item.node.is_from_trait())\n             .unwrap_or(false);\n "}, {"sha": "1e5555355c3b319d3d6586d4319fd2d2e44d4d6d", "filename": "src/test/ui/specialization/auxiliary/cross_crates_defaults.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fauxiliary%2Fcross_crates_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fauxiliary%2Fcross_crates_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fauxiliary%2Fcross_crates_defaults.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -22,7 +22,9 @@ pub trait Bar {\n     fn bar(&self) -> i32 { 0 }\n }\n \n-impl<T> Bar for T {} // use the provided method\n+impl<T> Bar for T {\n+    default fn bar(&self) -> i32 { 0 }\n+}\n \n impl Bar for i32 {\n     fn bar(&self) -> i32 { 1 }"}, {"sha": "9546a5dd5f51699d64f466a3c9c94b2c4198ad2c", "filename": "src/test/ui/specialization/issue-36804.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-36804.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -13,6 +13,10 @@ where\n     fn next(&mut self) -> Option<T> {\n         unimplemented!()\n     }\n+\n+    default fn count(self) -> usize where Self: Sized {\n+        self.fold(0, |cnt, _| cnt + 1)\n+    }\n }\n \n impl<'a, I, T: 'a> Iterator for Cloned<I>"}, {"sha": "403f718d7dd9fbf8350a772ebd46b8ba91faace6", "filename": "src/test/ui/specialization/non-defaulted-item-fail.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -0,0 +1,53 @@\n+#![feature(specialization, associated_type_defaults)]\n+\n+// Test that attempting to override a non-default method or one not in the\n+// parent impl causes an error.\n+\n+trait Foo {\n+    type Ty = ();\n+    const CONST: u8 = 123;\n+    fn foo(&self) -> bool { true }\n+}\n+\n+// Specialization tree for Foo:\n+//\n+//       Box<T>              Vec<T>\n+//        / \\                 / \\\n+// Box<i32>  Box<i64>   Vec<()>  Vec<bool>\n+\n+impl<T> Foo for Box<T> {\n+    type Ty = bool;\n+    const CONST: u8 = 0;\n+    fn foo(&self) -> bool { false }\n+}\n+\n+// Allowed\n+impl Foo for Box<i32> {}\n+\n+// Can't override a non-`default` fn\n+impl Foo for Box<i64> {\n+    type Ty = Vec<()>;\n+//~^ error: `Ty` specializes an item from a parent `impl`, but that item is not marked `default`\n+    const CONST: u8 = 42;\n+//~^ error: `CONST` specializes an item from a parent `impl`, but that item is not marked `default`\n+    fn foo(&self) -> bool { true }\n+//~^ error: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n+}\n+\n+\n+// Doesn't mention the item = provided body/value is used and the method is final.\n+impl<T> Foo for Vec<T> {}\n+\n+// Allowed\n+impl Foo for Vec<()> {}\n+\n+impl Foo for Vec<bool> {\n+    type Ty = Vec<()>;\n+//~^ error: `Ty` specializes an item from a parent `impl`, but that item is not marked `default`\n+    const CONST: u8 = 42;\n+//~^ error: `CONST` specializes an item from a parent `impl`, but that item is not marked `default`\n+    fn foo(&self) -> bool { true }\n+//~^ error: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n+}\n+\n+fn main() {}"}, {"sha": "e6c5fc1441b2f4a934fb5644bcb0727a31b11d04", "filename": "src/test/ui/specialization/non-defaulted-item-fail.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fnon-defaulted-item-fail.stderr?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -0,0 +1,81 @@\n+error[E0520]: `Ty` specializes an item from a parent `impl`, but that item is not marked `default`\n+  --> $DIR/non-defaulted-item-fail.rs:29:5\n+   |\n+LL | / impl<T> Foo for Box<T> {\n+LL | |     type Ty = bool;\n+LL | |     const CONST: u8 = 0;\n+LL | |     fn foo(&self) -> bool { false }\n+LL | | }\n+   | |_- parent `impl` is here\n+...\n+LL |       type Ty = Vec<()>;\n+   |       ^^^^^^^^^^^^^^^^^^ cannot specialize default item `Ty`\n+   |\n+   = note: to specialize, `Ty` in the parent `impl` must be marked `default`\n+\n+error[E0520]: `CONST` specializes an item from a parent `impl`, but that item is not marked `default`\n+  --> $DIR/non-defaulted-item-fail.rs:31:5\n+   |\n+LL | / impl<T> Foo for Box<T> {\n+LL | |     type Ty = bool;\n+LL | |     const CONST: u8 = 0;\n+LL | |     fn foo(&self) -> bool { false }\n+LL | | }\n+   | |_- parent `impl` is here\n+...\n+LL |       const CONST: u8 = 42;\n+   |       ^^^^^^^^^^^^^^^^^^^^^ cannot specialize default item `CONST`\n+   |\n+   = note: to specialize, `CONST` in the parent `impl` must be marked `default`\n+\n+error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n+  --> $DIR/non-defaulted-item-fail.rs:33:5\n+   |\n+LL | / impl<T> Foo for Box<T> {\n+LL | |     type Ty = bool;\n+LL | |     const CONST: u8 = 0;\n+LL | |     fn foo(&self) -> bool { false }\n+LL | | }\n+   | |_- parent `impl` is here\n+...\n+LL |       fn foo(&self) -> bool { true }\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot specialize default item `foo`\n+   |\n+   = note: to specialize, `foo` in the parent `impl` must be marked `default`\n+\n+error[E0520]: `Ty` specializes an item from a parent `impl`, but that item is not marked `default`\n+  --> $DIR/non-defaulted-item-fail.rs:45:5\n+   |\n+LL | impl<T> Foo for Vec<T> {}\n+   | ------------------------- parent `impl` is here\n+...\n+LL |     type Ty = Vec<()>;\n+   |     ^^^^^^^^^^^^^^^^^^ cannot specialize default item `Ty`\n+   |\n+   = note: to specialize, `Ty` in the parent `impl` must be marked `default`\n+\n+error[E0520]: `CONST` specializes an item from a parent `impl`, but that item is not marked `default`\n+  --> $DIR/non-defaulted-item-fail.rs:47:5\n+   |\n+LL | impl<T> Foo for Vec<T> {}\n+   | ------------------------- parent `impl` is here\n+...\n+LL |     const CONST: u8 = 42;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ cannot specialize default item `CONST`\n+   |\n+   = note: to specialize, `CONST` in the parent `impl` must be marked `default`\n+\n+error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n+  --> $DIR/non-defaulted-item-fail.rs:49:5\n+   |\n+LL | impl<T> Foo for Vec<T> {}\n+   | ------------------------- parent `impl` is here\n+...\n+LL |     fn foo(&self) -> bool { true }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot specialize default item `foo`\n+   |\n+   = note: to specialize, `foo` in the parent `impl` must be marked `default`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0520`."}, {"sha": "9ae3d1e9f3931cb58b3dd1f0e595a1a306903b4c", "filename": "src/test/ui/specialization/specialization-default-methods.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421bd77f42c2fe8a2596dbcc1580ec97fb89009f/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-methods.rs?ref=421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "patch": "@@ -55,8 +55,9 @@ trait Bar {\n //                   /  \\\n //            Vec<i32>  $Vec<i64>\n \n-// use the provided method\n-impl<T> Bar for T {}\n+impl<T> Bar for T {\n+    default fn bar(&self) -> i32 { 0 }\n+}\n \n impl Bar for i32 {\n     fn bar(&self) -> i32 { 1 }"}]}