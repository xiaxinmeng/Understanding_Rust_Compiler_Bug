{"sha": "90d4aaad3a3d551e6e67b585e93636eec4d5e4f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZDRhYWFkM2EzZDU1MWU2ZTY3YjU4NWU5MzYzNmVlYzRkNWU0ZjA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-23T09:14:40Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-23T17:58:47Z"}, "message": "Rollup merge of #22613 - nick29581:fix-save-alias, r=huonw\n\n r? @huonw", "tree": {"sha": "adf7b51d7aa48ff19d2e5c30dd7c12dd570dd5ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adf7b51d7aa48ff19d2e5c30dd7c12dd570dd5ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90d4aaad3a3d551e6e67b585e93636eec4d5e4f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90d4aaad3a3d551e6e67b585e93636eec4d5e4f0", "html_url": "https://github.com/rust-lang/rust/commit/90d4aaad3a3d551e6e67b585e93636eec4d5e4f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90d4aaad3a3d551e6e67b585e93636eec4d5e4f0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e", "html_url": "https://github.com/rust-lang/rust/commit/f73457a1cc18ac623b17d9c3cb8d55b6bcbef70e"}, {"sha": "6f9b91d429bb816cff98213c77fcf03ac0cfd4aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9b91d429bb816cff98213c77fcf03ac0cfd4aa", "html_url": "https://github.com/rust-lang/rust/commit/6f9b91d429bb816cff98213c77fcf03ac0cfd4aa"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "5fa37465cd656a3c529b701891ec996e3b0be866", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/90d4aaad3a3d551e6e67b585e93636eec4d5e4f0/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d4aaad3a3d551e6e67b585e93636eec4d5e4f0/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=90d4aaad3a3d551e6e67b585e93636eec4d5e4f0", "patch": "@@ -1002,28 +1002,39 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             ast::PatStruct(ref path, ref fields, _) => {\n                 self.collected_paths.push((p.id, path.clone(), false, recorder::StructRef));\n                 visit::walk_path(self, path);\n-                let struct_def = match self.lookup_type_ref(p.id) {\n-                    Some(sd) => sd,\n-                    None => {\n-                        self.sess.span_bug(p.span,\n-                                           &format!(\"Could not find struct_def for `{}`\",\n-                                                   self.span.snippet(p.span)));\n+\n+                let def = self.analysis.ty_cx.def_map.borrow()[p.id];\n+                let struct_def = match def {\n+                    def::DefConst(..) => None,\n+                    def::DefVariant(_, variant_id, _) => Some(variant_id),\n+                    _ => {\n+                        match ty::ty_to_def_id(ty::node_id_to_type(&self.analysis.ty_cx, p.id)) {\n+                            None => {\n+                                self.sess.span_bug(p.span,\n+                                                   &format!(\"Could not find struct_def for `{}`\",\n+                                                            self.span.snippet(p.span)));\n+                            }\n+                            Some(def_id) => Some(def_id),\n+                        }\n                     }\n                 };\n-                for &Spanned { node: ref field, span } in fields {\n-                    let sub_span = self.span.span_for_first_ident(span);\n-                    let fields = ty::lookup_struct_fields(&self.analysis.ty_cx, struct_def);\n-                    for f in fields {\n-                        if f.name == field.ident.name {\n-                            self.fmt.ref_str(recorder::VarRef,\n-                                             span,\n-                                             sub_span,\n-                                             f.id,\n-                                             self.cur_scope);\n-                            break;\n+\n+                if let Some(struct_def) = struct_def {\n+                    let struct_fields = ty::lookup_struct_fields(&self.analysis.ty_cx, struct_def);\n+                    for &Spanned { node: ref field, span } in fields {\n+                        let sub_span = self.span.span_for_first_ident(span);\n+                        for f in &struct_fields {\n+                            if f.name == field.ident.name {\n+                                self.fmt.ref_str(recorder::VarRef,\n+                                                 span,\n+                                                 sub_span,\n+                                                 f.id,\n+                                                 self.cur_scope);\n+                                break;\n+                            }\n                         }\n+                        self.visit_pat(&*field.pat);\n                     }\n-                    self.visit_pat(&*field.pat);\n                 }\n             }\n             ast::PatEnum(ref path, _) => {"}]}