{"sha": "6b1dd82162d62fef5fee258b050c96686b5ccbf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMWRkODIxNjJkNjJmZWY1ZmVlMjU4YjA1MGM5NjY4NmI1Y2NiZjA=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-08T16:18:03Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T12:43:54Z"}, "message": "Prepare mir::Constant for ty::Const only supporting valtrees", "tree": {"sha": "bc90ce13e86bef6bdecf6aba6894b29a6ada9642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc90ce13e86bef6bdecf6aba6894b29a6ada9642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1dd82162d62fef5fee258b050c96686b5ccbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1dd82162d62fef5fee258b050c96686b5ccbf0", "html_url": "https://github.com/rust-lang/rust/commit/6b1dd82162d62fef5fee258b050c96686b5ccbf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1dd82162d62fef5fee258b050c96686b5ccbf0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b1f6ea46844280fa65c81cbb4d5bd07baeda270", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1f6ea46844280fa65c81cbb4d5bd07baeda270", "html_url": "https://github.com/rust-lang/rust/commit/1b1f6ea46844280fa65c81cbb4d5bd07baeda270"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "23ad5267c569ce804ef245f012a03eb2434a7c51", "filename": "src/constant.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6b1dd82162d62fef5fee258b050c96686b5ccbf0/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1dd82162d62fef5fee258b050c96686b5ccbf0/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=6b1dd82162d62fef5fee258b050c96686b5ccbf0", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Pointer, Scalar,\n };\n-use rustc_middle::ty::{Const, ConstKind};\n+use rustc_middle::ty::ConstKind;\n \n use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n@@ -39,7 +39,10 @@ impl ConstantCx {\n pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n-        let const_ = fx.monomorphize(constant.literal);\n+        let const_ = match fx.monomorphize(constant.literal) {\n+            ConstantSource::Ty(ct) => ct,\n+            ConstantSource::Val(..) => continue,\n+        };\n         match const_.val {\n             ConstKind::Value(_) => {}\n             ConstKind::Unevaluated(def, ref substs, promoted) => {\n@@ -113,19 +116,17 @@ pub(crate) fn codegen_constant<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n-    let const_ = fx.monomorphize(constant.literal);\n+    let const_ = match fx.monomorphize(constant.literal) {\n+        ConstantSource::Ty(ct) => ct,\n+        ConstantSource::Val(val, ty) => return codegen_const_value(fx, val, ty),\n+    };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n         ConstKind::Unevaluated(def, ref substs, promoted) if fx.tcx.is_static(def.did) => {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n-            return codegen_static_ref(\n-                fx,\n-                def.did,\n-                fx.layout_of(fx.monomorphize(&constant.literal.ty)),\n-            )\n-            .to_cvalue(fx);\n+            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(def, ref substs, promoted) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None) {\n@@ -422,11 +423,14 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n pub(crate) fn mir_operand_get_const_val<'tcx>(\n     fx: &FunctionCx<'_, '_, 'tcx>,\n     operand: &Operand<'tcx>,\n-) -> Option<&'tcx Const<'tcx>> {\n+) -> Option<ConstValue<'tcx>> {\n     match operand {\n         Operand::Copy(_) | Operand::Move(_) => None,\n-        Operand::Constant(const_) => {\n-            Some(fx.monomorphize(const_.literal).eval(fx.tcx, ParamEnv::reveal_all()))\n-        }\n+        Operand::Constant(const_) => match const_.literal {\n+            ConstantSource::Ty(const_) => {\n+                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val.try_to_value()\n+            }\n+            ConstantSource::Val(val, _) => Some(val),\n+        },\n     }\n }"}, {"sha": "83c91f789cd25eb219e10431cc1bf44905e32d2c", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b1dd82162d62fef5fee258b050c96686b5ccbf0/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1dd82162d62fef5fee258b050c96686b5ccbf0/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=6b1dd82162d62fef5fee258b050c96686b5ccbf0", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n         llvm.x86.sse2.cmp.ps | llvm.x86.sse2.cmp.pd, (c x, c y, o kind) {\n             let kind_const = crate::constant::mir_operand_get_const_val(fx, kind).expect(\"llvm.x86.sse2.cmp.* kind not const\");\n-            let flt_cc = match kind_const.val.try_to_bits(Size::from_bytes(1)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind_const)) {\n+            let flt_cc = match kind_const.try_to_bits(Size::from_bytes(1)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind_const)) {\n                 0 => FloatCC::Equal,\n                 1 => FloatCC::LessThan,\n                 2 => FloatCC::LessThanOrEqual,\n@@ -84,7 +84,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         llvm.x86.sse2.psrli.d, (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n+                let res_lane = match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n                 };\n@@ -94,7 +94,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         llvm.x86.sse2.pslli.d, (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, res_lane_layout, lane| {\n-                let res_lane = match imm8.val.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n+                let res_lane = match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n                 };"}, {"sha": "d17136080fea3212375348c3a902798dff676861", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b1dd82162d62fef5fee258b050c96686b5ccbf0/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1dd82162d62fef5fee258b050c96686b5ccbf0/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=6b1dd82162d62fef5fee258b050c96686b5ccbf0", "patch": "@@ -85,8 +85,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 use rustc_middle::mir::interpret::*;\n                 let idx_const = crate::constant::mir_operand_get_const_val(fx, idx).expect(\"simd_shuffle* idx not const\");\n \n-                let idx_bytes = match idx_const.val {\n-                    ty::ConstKind::Value(ConstValue::ByRef { alloc, offset }) => {\n+                let idx_bytes = match idx_const {\n+                    ConstValue::ByRef { alloc, offset } => {\n                         let ptr = Pointer::new(AllocId(0 /* dummy */), offset);\n                         let size = Size::from_bytes(4 * u64::from(ret_lane_count) /* size_of([u32; ret_lane_count]) */);\n                         alloc.get_bytes(fx, ptr, size).unwrap()\n@@ -130,7 +130,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 );\n             };\n \n-            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = base.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n@@ -159,7 +159,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 return;\n             };\n \n-            let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = v.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count));"}]}