{"sha": "af6984f6a6fad56f24345c03d018ac29549b169d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNjk4NGY2YTZmYWQ1NmYyNDM0NWMwM2QwMThhYzI5NTQ5YjE2OWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-14T10:05:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-14T10:05:50Z"}, "message": "Data-driven diagnostics tests", "tree": {"sha": "c41f12adf77fd07801b55776a1aa8ab6f7ffa66e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c41f12adf77fd07801b55776a1aa8ab6f7ffa66e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af6984f6a6fad56f24345c03d018ac29549b169d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af6984f6a6fad56f24345c03d018ac29549b169d", "html_url": "https://github.com/rust-lang/rust/commit/af6984f6a6fad56f24345c03d018ac29549b169d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af6984f6a6fad56f24345c03d018ac29549b169d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b2ce1a54f75ba5d933521ba8780aaf1ffeef407", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2ce1a54f75ba5d933521ba8780aaf1ffeef407", "html_url": "https://github.com/rust-lang/rust/commit/7b2ce1a54f75ba5d933521ba8780aaf1ffeef407"}], "stats": {"total": 193, "additions": 93, "deletions": 100}, "files": [{"sha": "49a616c6f0ea0244ca8d32c86d5517ed64bd31b9", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af6984f6a6fad56f24345c03d018ac29549b169d/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6984f6a6fad56f24345c03d018ac29549b169d/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=af6984f6a6fad56f24345c03d018ac29549b169d", "patch": "@@ -244,3 +244,25 @@ impl AstDiagnostic for MismatchedArgCount {\n         ast::CallExpr::cast(node).unwrap()\n     }\n }\n+\n+#[cfg(test)]\n+fn check_diagnostics(ra_fixture: &str) {\n+    use ra_db::{fixture::WithFixture, FileId};\n+    use ra_syntax::TextRange;\n+    use rustc_hash::FxHashMap;\n+\n+    use crate::test_db::TestDB;\n+\n+    let db = TestDB::with_files(ra_fixture);\n+    let annotations = db.extract_annotations();\n+\n+    let mut actual: FxHashMap<FileId, Vec<(TextRange, String)>> = FxHashMap::default();\n+    db.diag(|d| {\n+        // FXIME: macros...\n+        let file_id = d.source().file_id.original_file(&db);\n+        let range = d.syntax_node(&db).text_range();\n+        actual.entry(file_id).or_default().push((range, d.message().to_owned()));\n+    });\n+\n+    assert_eq!(annotations, actual);\n+}"}, {"sha": "277ace1802a67c8663bf3c75491aed9f23821d1f", "filename": "crates/ra_hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 70, "deletions": 99, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/af6984f6a6fad56f24345c03d018ac29549b169d/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6984f6a6fad56f24345c03d018ac29549b169d/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=af6984f6a6fad56f24345c03d018ac29549b169d", "patch": "@@ -376,146 +376,117 @@ pub fn record_pattern_missing_fields(\n \n #[cfg(test)]\n mod tests {\n-    use expect::{expect, Expect};\n-    use ra_db::fixture::WithFixture;\n-\n-    use crate::{diagnostics::MismatchedArgCount, test_db::TestDB};\n-\n-    fn check_diagnostic(ra_fixture: &str, expect: Expect) {\n-        let msg = TestDB::with_single_file(ra_fixture).0.diagnostic::<MismatchedArgCount>().0;\n-        expect.assert_eq(&msg);\n-    }\n-\n-    fn check_no_diagnostic(ra_fixture: &str) {\n-        let (s, diagnostic_count) =\n-            TestDB::with_single_file(ra_fixture).0.diagnostic::<MismatchedArgCount>();\n-\n-        assert_eq!(0, diagnostic_count, \"expected no diagnostic, found one: {}\", s);\n-    }\n+    use crate::diagnostics::check_diagnostics;\n \n     #[test]\n     fn simple_free_fn_zero() {\n-        check_diagnostic(\n-            r\"\n-            fn zero() {}\n-            fn f() { zero(1); }\n-            \",\n-            expect![[\"\\\"zero(1)\\\": Expected 0 arguments, found 1\\n\"]],\n+        check_diagnostics(\n+            r#\"\n+fn zero() {}\n+fn f() { zero(1); }\n+       //^^^^^^^ Expected 0 arguments, found 1\n+\"#,\n         );\n \n-        check_no_diagnostic(\n-            r\"\n-            fn zero() {}\n-            fn f() { zero(); }\n-            \",\n+        check_diagnostics(\n+            r#\"\n+fn zero() {}\n+fn f() { zero(); }\n+\"#,\n         );\n     }\n \n     #[test]\n     fn simple_free_fn_one() {\n-        check_diagnostic(\n-            r\"\n-            fn one(arg: u8) {}\n-            fn f() { one(); }\n-            \",\n-            expect![[\"\\\"one()\\\": Expected 1 argument, found 0\\n\"]],\n+        check_diagnostics(\n+            r#\"\n+fn one(arg: u8) {}\n+fn f() { one(); }\n+       //^^^^^ Expected 1 argument, found 0\n+\"#,\n         );\n \n-        check_no_diagnostic(\n-            r\"\n-            fn one(arg: u8) {}\n-            fn f() { one(1); }\n-            \",\n+        check_diagnostics(\n+            r#\"\n+fn one(arg: u8) {}\n+fn f() { one(1); }\n+\"#,\n         );\n     }\n \n     #[test]\n     fn method_as_fn() {\n-        check_diagnostic(\n-            r\"\n-            struct S;\n-            impl S {\n-                fn method(&self) {}\n-            }\n-\n-            fn f() {\n-                S::method();\n-            }\n-            \",\n-            expect![[\"\\\"S::method()\\\": Expected 1 argument, found 0\\n\"]],\n+        check_diagnostics(\n+            r#\"\n+struct S;\n+impl S { fn method(&self) {} }\n+\n+fn f() {\n+    S::method();\n+} //^^^^^^^^^^^ Expected 1 argument, found 0\n+\"#,\n         );\n \n-        check_no_diagnostic(\n-            r\"\n-            struct S;\n-            impl S {\n-                fn method(&self) {}\n-            }\n+        check_diagnostics(\n+            r#\"\n+struct S;\n+impl S { fn method(&self) {} }\n \n-            fn f() {\n-                S::method(&S);\n-                S.method();\n-            }\n-            \",\n+fn f() {\n+    S::method(&S);\n+    S.method();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn method_with_arg() {\n-        check_diagnostic(\n-            r\"\n-            struct S;\n-            impl S {\n-                fn method(&self, arg: u8) {}\n-            }\n+        check_diagnostics(\n+            r#\"\n+struct S;\n+impl S { fn method(&self, arg: u8) {} }\n \n             fn f() {\n                 S.method();\n-            }\n-            \",\n-            expect![[\"\\\"S.method()\\\": Expected 1 argument, found 0\\n\"]],\n+            } //^^^^^^^^^^ Expected 1 argument, found 0\n+            \"#,\n         );\n \n-        check_no_diagnostic(\n-            r\"\n-            struct S;\n-            impl S {\n-                fn method(&self, arg: u8) {}\n-            }\n+        check_diagnostics(\n+            r#\"\n+struct S;\n+impl S { fn method(&self, arg: u8) {} }\n \n-            fn f() {\n-                S::method(&S, 0);\n-                S.method(1);\n-            }\n-            \",\n+fn f() {\n+    S::method(&S, 0);\n+    S.method(1);\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn tuple_struct() {\n-        check_diagnostic(\n-            r\"\n-            struct Tup(u8, u16);\n-            fn f() {\n-                Tup(0);\n-            }\n-            \",\n-            expect![[\"\\\"Tup(0)\\\": Expected 2 arguments, found 1\\n\"]],\n+        check_diagnostics(\n+            r#\"\n+struct Tup(u8, u16);\n+fn f() {\n+    Tup(0);\n+} //^^^^^^ Expected 2 arguments, found 1\n+\"#,\n         )\n     }\n \n     #[test]\n     fn enum_variant() {\n-        check_diagnostic(\n-            r\"\n-            enum En {\n-                Variant(u8, u16),\n-            }\n-            fn f() {\n-                En::Variant(0);\n-            }\n-            \",\n-            expect![[\"\\\"En::Variant(0)\\\": Expected 2 arguments, found 1\\n\"]],\n+        check_diagnostics(\n+            r#\"\n+enum En { Variant(u8, u16), }\n+fn f() {\n+    En::Variant(0);\n+} //^^^^^^^^^^^^^^ Expected 2 arguments, found 1\n+\"#,\n         )\n     }\n }"}, {"sha": "0bd29f43528f4e4750f21b00203a6de637c176f9", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6984f6a6fad56f24345c03d018ac29549b169d/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6984f6a6fad56f24345c03d018ac29549b169d/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=af6984f6a6fad56f24345c03d018ac29549b169d", "patch": "@@ -94,7 +94,7 @@ impl TestDB {\n         panic!(\"Can't find module for file\")\n     }\n \n-    fn diag<F: FnMut(&dyn Diagnostic)>(&self, mut cb: F) {\n+    pub(crate) fn diag<F: FnMut(&dyn Diagnostic)>(&self, mut cb: F) {\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter() {\n             let crate_def_map = self.crate_def_map(krate);"}]}