{"sha": "f865164030ccd167a9e9f9fae665373fb58295fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NjUxNjQwMzBjY2QxNjdhOWU5ZjlmYWU2NjUzNzNmYjU4Mjk1ZmI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-14T20:10:10Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-16T20:06:06Z"}, "message": "Fill in reverse searcher impl for char", "tree": {"sha": "edf50e78b08990553851350fe0ddfa7c2ccb4d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf50e78b08990553851350fe0ddfa7c2ccb4d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f865164030ccd167a9e9f9fae665373fb58295fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f865164030ccd167a9e9f9fae665373fb58295fb", "html_url": "https://github.com/rust-lang/rust/commit/f865164030ccd167a9e9f9fae665373fb58295fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f865164030ccd167a9e9f9fae665373fb58295fb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9dc44a5e9857864905e1cdbf40ab9ac617f65e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9dc44a5e9857864905e1cdbf40ab9ac617f65e7", "html_url": "https://github.com/rust-lang/rust/commit/d9dc44a5e9857864905e1cdbf40ab9ac617f65e7"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "54e426893bc7eaca0b4ff332ca2503e76a246da0", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f865164030ccd167a9e9f9fae665373fb58295fb/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f865164030ccd167a9e9f9fae665373fb58295fb/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=f865164030ccd167a9e9f9fae665373fb58295fb", "patch": "@@ -128,6 +128,11 @@ pub unsafe trait Searcher<'a> {\n     fn next(&mut self) -> SearchStep;\n \n     /// Find the next `Match` result. See `next()`\n+    ///\n+    /// Unlike next(), there is no guarantee that the returned ranges\n+    /// of this and next_reject will overlap. This will return (start_match, end_match),\n+    /// where start_match is the index of where the match begins, and end_match is\n+    /// the index after the end of the match.\n     #[inline]\n     fn next_match(&mut self) -> Option<(usize, usize)> {\n         loop {\n@@ -139,7 +144,10 @@ pub unsafe trait Searcher<'a> {\n         }\n     }\n \n-    /// Find the next `Reject` result. See `next()`\n+    /// Find the next `Reject` result. See `next()` and `next_match()`\n+    ///\n+    /// Unlike next(), there is no guarantee that the returned ranges\n+    /// of this and next_match will overlap.\n     #[inline]\n     fn next_reject(&mut self) -> Option<(usize, usize)> {\n         loop {\n@@ -244,8 +252,9 @@ pub trait DoubleEndedSearcher<'a>: ReverseSearcher<'a> {}\n #[derive(Clone, Debug)]\n pub struct CharSearcher<'a> {\n     haystack: &'a str,\n-    // invariant: `finger` must be a valid utf8 byte index of `haystack`\n+    // invariant: `finger`/`finger_back` must be a valid utf8 byte index of `haystack`\n     finger: usize,\n+    finger_back: usize,\n     needle: char,\n     // For ascii chars\n     // invariant: must be an ASCII byte (no high bit)\n@@ -266,7 +275,7 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n         if let Some(ch) = iter.next() {\n             // add byte offset of current character\n             // without recalculating\n-            self.finger += iter.iter.len() - old_len;\n+            self.finger += old_len - iter.iter.len();\n             if ch == self.needle {\n                 SearchStep::Match(old_finger, self.finger)\n             } else {\n@@ -286,7 +295,7 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n                 // index is the index of a valid ASCII byte,\n                 // so we can add one to it\n                 self.finger += index + 1;\n-                Some((index, self.finger))\n+                Some((self.finger - 1, self.finger))\n             } else {\n                 None\n             }\n@@ -307,11 +316,45 @@ unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n     #[inline]\n     fn next_back(&mut self) -> SearchStep {\n-        unimplemented!();\n+        let old_finger = self.finger_back;\n+        let slice = unsafe { self.haystack.slice_unchecked(0, old_finger) };\n+        let mut iter = slice.chars();\n+        let old_len = iter.iter.len();\n+        if let Some(ch) = iter.next_back() {\n+            // subtract byte offset of current character\n+            // without recalculating\n+            self.finger_back -= old_len - iter.iter.len();\n+            if ch == self.needle {\n+                SearchStep::Match(self.finger_back, old_finger)\n+            } else {\n+                SearchStep::Reject(self.finger_back, old_finger)\n+            }\n+        } else {\n+            SearchStep::Done\n+        }\n     }\n     #[inline]\n     fn next_match_back(&mut self) -> Option<(usize, usize)> {\n-        unimplemented!();\n+        if let Some(byte) = self.single_byte {\n+            let old_finger = self.finger_back;\n+            let slice = unsafe { self.haystack.slice_unchecked(0, old_finger) };\n+            let bytes = slice.as_bytes();\n+            if let Some(index) = memchr::memrchr(byte, bytes) {\n+                // index is the index of a valid ASCII byte\n+                self.finger_back = index;\n+                Some((self.finger_back, self.finger_back + 1))\n+            } else {\n+                None\n+            }\n+        } else {\n+            loop {\n+                match self.next_back() {\n+                    SearchStep::Match(a, b) => break Some((a, b)),\n+                    SearchStep::Done => break None,\n+                    _ => continue,\n+                }\n+            }\n+        }\n     }\n \n     // let next_reject_back use the default implementation from the Searcher trait\n@@ -335,6 +378,7 @@ impl<'a> Pattern<'a> for char {\n         CharSearcher {\n             haystack,\n             finger: 0,\n+            finger_back: haystack.len(),\n             needle: self,\n             single_byte,\n         }"}]}