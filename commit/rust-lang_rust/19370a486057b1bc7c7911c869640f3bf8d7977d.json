{"sha": "19370a486057b1bc7c7911c869640f3bf8d7977d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MzcwYTQ4NjA1N2IxYmM3Yzc5MTFjODY5NjQwZjNiZjhkNzk3N2Q=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-17T12:24:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-17T12:24:54Z"}, "message": "Rollup merge of #81080 - bugadani:vec-diag, r=oli-obk,m-ou-se\n\nForce vec![] to expression position only\n\nr? `@oli-obk`\n\nI went with the lazy way of only changing what broke. I moved the test to ui/macros because the diagnostics no longer give suggestions.\n\nCloses #61933", "tree": {"sha": "908116cc9f209e8e40e2b68d8e6dd9ef74b8a314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/908116cc9f209e8e40e2b68d8e6dd9ef74b8a314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19370a486057b1bc7c7911c869640f3bf8d7977d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgBCyXCRBK7hj4Ov3rIwAAdHIIALCr0sqe6r39VHQGj+WDAYhS\nr3iA2G/V5Y2Fpynx/v9W/vEfIJdLOCMqsvkNZUoFm6r570W1XG8KODVkAS/OJJ6k\nubykOruEcbUJj/FCWwHoN3FoEG27kfCBQUaYJSzSO2DLuDddoTH3f3CcEve0K8x9\nqjKdazRJYtQdi3sqGyYE4S2QZfB6UX4vdYlxnKNHTpvIHqiz14SQMV3a8GBXq5MU\nnz65n2XtkjwJWnmiD8KdNwayYJ56suC7LEigYFd7jYBtM0zhSKBOZlr+DQPtLExC\nEAGx3JNJfR+Q83WcV4QNTf+rLuPxRqscxLNqAf6/s+PoJ7UymMINCfU3BmIkaHE=\n=bJ56\n-----END PGP SIGNATURE-----\n", "payload": "tree 908116cc9f209e8e40e2b68d8e6dd9ef74b8a314\nparent 92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6\nparent c127ed6e97535e4a20873d6cfe4fff364a2b9d9b\nauthor Mara Bos <m-ou.se@m-ou.se> 1610886294 +0000\ncommitter GitHub <noreply@github.com> 1610886294 +0000\n\nRollup merge of #81080 - bugadani:vec-diag, r=oli-obk,m-ou-se\n\nForce vec![] to expression position only\n\nr? `@oli-obk`\n\nI went with the lazy way of only changing what broke. I moved the test to ui/macros because the diagnostics no longer give suggestions.\n\nCloses #61933\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19370a486057b1bc7c7911c869640f3bf8d7977d", "html_url": "https://github.com/rust-lang/rust/commit/19370a486057b1bc7c7911c869640f3bf8d7977d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19370a486057b1bc7c7911c869640f3bf8d7977d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6", "html_url": "https://github.com/rust-lang/rust/commit/92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6"}, {"sha": "c127ed6e97535e4a20873d6cfe4fff364a2b9d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c127ed6e97535e4a20873d6cfe4fff364a2b9d9b", "html_url": "https://github.com/rust-lang/rust/commit/c127ed6e97535e4a20873d6cfe4fff364a2b9d9b"}], "stats": {"total": 100, "additions": 34, "deletions": 66}, "files": [{"sha": "e8c711cae64ef30498a941651ee4ef2003623c55", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/19370a486057b1bc7c7911c869640f3bf8d7977d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19370a486057b1bc7c7911c869640f3bf8d7977d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=19370a486057b1bc7c7911c869640f3bf8d7977d", "patch": "@@ -56,36 +56,11 @@ crate fn annotate_err_with_kind(\n     };\n }\n \n-/// Instead of e.g. `vec![a, b, c]` in a pattern context, suggest `[a, b, c]`.\n-fn suggest_slice_pat(e: &mut DiagnosticBuilder<'_>, site_span: Span, parser: &Parser<'_>) {\n-    let mut suggestion = None;\n-    if let Ok(code) = parser.sess.source_map().span_to_snippet(site_span) {\n-        if let Some(bang) = code.find('!') {\n-            suggestion = Some(code[bang + 1..].to_string());\n-        }\n-    }\n-    if let Some(suggestion) = suggestion {\n-        e.span_suggestion(\n-            site_span,\n-            \"use a slice pattern here instead\",\n-            suggestion,\n-            Applicability::MachineApplicable,\n-        );\n-    } else {\n-        e.span_label(site_span, \"use a slice pattern here instead\");\n-    }\n-    e.help(\n-        \"for more information, see https://doc.rust-lang.org/edition-guide/\\\n-        rust-2018/slice-patterns.html\",\n-    );\n-}\n-\n fn emit_frag_parse_err(\n     mut e: DiagnosticBuilder<'_>,\n     parser: &Parser<'_>,\n     orig_parser: &mut Parser<'_>,\n     site_span: Span,\n-    macro_ident: Ident,\n     arm_span: Span,\n     kind: AstFragmentKind,\n ) {\n@@ -113,9 +88,6 @@ fn emit_frag_parse_err(\n         e.span_label(site_span, \"in this macro invocation\");\n     }\n     match kind {\n-        AstFragmentKind::Pat if macro_ident.name == sym::vec => {\n-            suggest_slice_pat(&mut e, site_span, parser);\n-        }\n         // Try a statement if an expression is wanted but failed and suggest adding `;` to call.\n         AstFragmentKind::Expr => match parse_ast_fragment(orig_parser, AstFragmentKind::Stmts) {\n             Err(mut err) => err.cancel(),\n@@ -143,7 +115,7 @@ impl<'a> ParserAnyMacro<'a> {\n         let fragment = match parse_ast_fragment(parser, kind) {\n             Ok(f) => f,\n             Err(err) => {\n-                emit_frag_parse_err(err, parser, snapshot, site_span, macro_ident, arm_span, kind);\n+                emit_frag_parse_err(err, parser, snapshot, site_span, arm_span, kind);\n                 return kind.dummy(site_span);\n             }\n         };"}, {"sha": "14a10aac061a4bb4ed519bf52e2d15a56f400016", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19370a486057b1bc7c7911c869640f3bf8d7977d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19370a486057b1bc7c7911c869640f3bf8d7977d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=19370a486057b1bc7c7911c869640f3bf8d7977d", "patch": "@@ -140,6 +140,7 @@\n #![feature(type_alias_impl_trait)]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n+#![feature(decl_macro)]\n // Allow testing this library\n \n #[cfg(test)]\n@@ -193,4 +194,11 @@ mod std {\n #[unstable(feature = \"liballoc_internals\", issue = \"none\", reason = \"implementation detail\")]\n pub mod __export {\n     pub use core::format_args;\n+\n+    /// Force AST node to an expression to improve diagnostics in pattern position.\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    #[unstable(feature = \"liballoc_internals\", issue = \"none\", reason = \"implementation detail\")]\n+    pub macro force_expr($e:expr) {\n+        $e\n+    }\n }"}, {"sha": "3a46763c3f608ddf8625c06647b0a049a1c3f78a", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19370a486057b1bc7c7911c869640f3bf8d7977d/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19370a486057b1bc7c7911c869640f3bf8d7977d/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=19370a486057b1bc7c7911c869640f3bf8d7977d", "patch": "@@ -37,16 +37,16 @@\n #[cfg(not(test))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable(box_syntax)]\n+#[allow_internal_unstable(box_syntax, liballoc_internals)]\n macro_rules! vec {\n     () => (\n-        $crate::vec::Vec::new()\n+        $crate::__export::force_expr!($crate::vec::Vec::new())\n     );\n     ($elem:expr; $n:expr) => (\n-        $crate::vec::from_elem($elem, $n)\n+        $crate::__export::force_expr!($crate::vec::from_elem($elem, $n))\n     );\n     ($($x:expr),+ $(,)?) => (\n-        <[_]>::into_vec(box [$($x),+])\n+        $crate::__export::force_expr!(<[_]>::into_vec(box [$($x),+]))\n     );\n }\n "}, {"sha": "ce4298b8bb3347ada138f0ff73c94e00dfb9b94e", "filename": "src/test/ui/macros/vec-macro-in-pattern.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19370a486057b1bc7c7911c869640f3bf8d7977d/src%2Ftest%2Fui%2Fmacros%2Fvec-macro-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19370a486057b1bc7c7911c869640f3bf8d7977d/src%2Ftest%2Fui%2Fmacros%2Fvec-macro-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fvec-macro-in-pattern.rs?ref=19370a486057b1bc7c7911c869640f3bf8d7977d", "patch": "@@ -0,0 +1,10 @@\n+// This is a regression test for #61933\n+// Verify that the vec![] macro may not be used in patterns\n+// and that the resulting diagnostic is actually helpful.\n+\n+fn main() {\n+    match Some(vec![42]) {\n+        Some(vec![43]) => {} //~ ERROR arbitrary expressions aren't allowed in patterns\n+        _ => {}\n+    }\n+}"}, {"sha": "3dabebfdaa25346b427478adc93c4a9dc9343849", "filename": "src/test/ui/macros/vec-macro-in-pattern.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19370a486057b1bc7c7911c869640f3bf8d7977d/src%2Ftest%2Fui%2Fmacros%2Fvec-macro-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19370a486057b1bc7c7911c869640f3bf8d7977d/src%2Ftest%2Fui%2Fmacros%2Fvec-macro-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fvec-macro-in-pattern.stderr?ref=19370a486057b1bc7c7911c869640f3bf8d7977d", "patch": "@@ -0,0 +1,10 @@\n+error: arbitrary expressions aren't allowed in patterns\n+  --> $DIR/vec-macro-in-pattern.rs:7:14\n+   |\n+LL |         Some(vec![43]) => {}\n+   |              ^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "e1695d6820a817d3ba6d5e4501484872579886c6", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.fixed", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.fixed?ref=92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6", "patch": "@@ -1,8 +0,0 @@\n-// run-rustfix\n-fn main() {\n-    // everything after `.as_ref` should be suggested\n-    match Some(vec![3]).as_ref().map(|v| v.as_slice()) {\n-        Some([_x]) => (), //~ ERROR unexpected `(` after qualified path\n-        _ => (),\n-    }\n-}"}, {"sha": "4843629fbcf904788e0567d86717418ce7005794", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs?ref=92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6", "patch": "@@ -1,8 +0,0 @@\n-// run-rustfix\n-fn main() {\n-    // everything after `.as_ref` should be suggested\n-    match Some(vec![3]).as_ref().map(|v| v.as_slice()) {\n-        Some(vec![_x]) => (), //~ ERROR unexpected `(` after qualified path\n-        _ => (),\n-    }\n-}"}, {"sha": "f9d0464ac88b1f33e8dc7fe4fcf57cbc12a657ce", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr?ref=92dbfb541a2ab1cef3c680fe54c14e6bbc1f43f6", "patch": "@@ -1,16 +0,0 @@\n-error: unexpected `(` after qualified path\n-  --> $DIR/vec-macro-in-pattern.rs:5:14\n-   |\n-LL |         Some(vec![_x]) => (),\n-   |              ^^^^^^^^\n-   |              |\n-   |              unexpected `(` after qualified path\n-   |              the qualified path\n-   |              in this macro invocation\n-   |              help: use a slice pattern here instead: `[_x]`\n-   |\n-   = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-"}, {"sha": "755eec23c2ee33e886d8b835f651b2be4c95ecef", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19370a486057b1bc7c7911c869640f3bf8d7977d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19370a486057b1bc7c7911c869640f3bf8d7977d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=19370a486057b1bc7c7911c869640f3bf8d7977d", "patch": "@@ -1,4 +1,4 @@\n-error: expected type, found reserved keyword `box`\n+error: expected type, found `<[_]>::into_vec(box [0, 1])`\n   --> $DIR/issue-47666.rs:3:25\n    |\n LL |     let _ = Option:Some(vec![0, 1]);"}]}