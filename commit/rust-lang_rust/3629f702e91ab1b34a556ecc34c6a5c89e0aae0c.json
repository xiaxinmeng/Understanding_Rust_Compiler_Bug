{"sha": "3629f702e91ab1b34a556ecc34c6a5c89e0aae0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MjlmNzAyZTkxYWIxYjM0YTU1NmVjYzM0YzZhNWM4OWUwYWFlMGM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-04T21:08:20Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-04T22:45:16Z"}, "message": "std: merge str::raw::from_buf and str::raw::from_c_str", "tree": {"sha": "df070ab6f9ce06f6b2e206eef46eb6fbb6531cc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df070ab6f9ce06f6b2e206eef46eb6fbb6531cc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c", "html_url": "https://github.com/rust-lang/rust/commit/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce", "html_url": "https://github.com/rust-lang/rust/commit/bd908d4c0e9cc4717928e63d7ed64cd9ffe0bfce"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "7a7bcc3efa3b3a5cc5ef45e40b45265856e2135a", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=3629f702e91ab1b34a556ecc34c6a5c89e0aae0c", "patch": "@@ -93,7 +93,7 @@ pub fn fill_charp_buf(f: &fn(*mut c_char, size_t) -> bool) -> Option<~str> {\n     do buf.as_mut_buf |b, sz| {\n         if f(b, sz as size_t) {\n             unsafe {\n-                Some(str::raw::from_buf(b as *u8))\n+                Some(str::raw::from_c_str(b as *c_char))\n             }\n         } else {\n             None"}, {"sha": "4935477536fc5b8d7b914bfd8511bf3188af13cd", "filename": "src/libstd/str.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=3629f702e91ab1b34a556ecc34c6a5c89e0aae0c", "patch": "@@ -763,17 +763,6 @@ pub mod raw {\n     use vec::MutableVector;\n     use unstable::raw::{Slice, String};\n \n-    /// Create a Rust string from a null-terminated *u8 buffer\n-    pub unsafe fn from_buf(buf: *u8) -> ~str {\n-        let mut curr = buf;\n-        let mut i = 0u;\n-        while *curr != 0u8 {\n-            i += 1u;\n-            curr = ptr::offset(buf, i as int);\n-        }\n-        return from_buf_len(buf, i);\n-    }\n-\n     /// Create a Rust string from a *u8 buffer of the given length\n     pub unsafe fn from_buf_len(buf: *u8, len: uint) -> ~str {\n         let mut v: ~[u8] = vec::with_capacity(len + 1);\n@@ -784,17 +773,18 @@ pub mod raw {\n         v.push(0u8);\n \n         assert!(is_utf8(v));\n-        return cast::transmute(v);\n+        cast::transmute(v)\n     }\n \n     /// Create a Rust string from a null-terminated C string\n-    pub unsafe fn from_c_str(c_str: *libc::c_char) -> ~str {\n-        from_buf(c_str as *u8)\n-    }\n-\n-    /// Create a Rust string from a `*c_char` buffer of the given length\n-    pub unsafe fn from_c_str_len(c_str: *libc::c_char, len: uint) -> ~str {\n-        from_buf_len(c_str as *u8, len)\n+    pub unsafe fn from_c_str(buf: *libc::c_char) -> ~str {\n+        let mut curr = buf;\n+        let mut i = 0;\n+        while *curr != 0 {\n+            i += 1;\n+            curr = ptr::offset(buf, i);\n+        }\n+        from_buf_len(buf as *u8, i as uint)\n     }\n \n     /// Converts a vector of bytes to a new owned string.\n@@ -2805,11 +2795,11 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_from_buf() {\n+    fn test_raw_from_c_str() {\n         unsafe {\n-            let a = ~[65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n+            let a = ~[65, 65, 65, 65, 65, 65, 65, 0];\n             let b = vec::raw::to_ptr(a);\n-            let c = raw::from_buf(b);\n+            let c = raw::from_c_str(b);\n             assert_eq!(c, ~\"AAAAAAA\");\n         }\n     }"}, {"sha": "0e7d6d9f16a3c420f080df9a4115d7c09a1d49aa", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3629f702e91ab1b34a556ecc34c6a5c89e0aae0c/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=3629f702e91ab1b34a556ecc34c6a5c89e0aae0c", "patch": "@@ -10,15 +10,20 @@\n \n use std::str;\n \n-static a: [u8, ..3] = ['h' as u8, 'i' as u8, 0 as u8];\n-static c: &'static [u8, ..3] = &a;\n-static b: *u8 = c as *u8;\n+static A: [u8, ..2] = ['h' as u8, 'i' as u8];\n+static B: &'static [u8, ..2] = &A;\n+static C: *u8 = B as *u8;\n \n pub fn main() {\n-    let foo = &a as *u8;\n-    assert_eq!(unsafe { str::raw::from_bytes(a) }, ~\"hi\\x00\");\n-    assert_eq!(unsafe { str::raw::from_buf(foo) }, ~\"hi\");\n-    assert_eq!(unsafe { str::raw::from_buf(b) }, ~\"hi\");\n-    assert!(unsafe { *b == a[0] });\n-    assert!(unsafe { *(&c[0] as *u8) == a[0] });\n+    unsafe {\n+        let foo = &A as *u8;\n+        assert_eq!(str::raw::from_bytes(A), ~\"hi\");\n+        assert_eq!(str::raw::from_buf_len(foo, A.len()), ~\"hi\");\n+        assert_eq!(str::raw::from_buf_len(C, B.len()), ~\"hi\");\n+        assert!(*C == A[0]);\n+        assert!(*(&B[0] as *u8) == A[0]);\n+\n+        let bar = str::raw::from_bytes(A).to_c_str();\n+        assert_eq!(bar.with_ref(|buf| str::raw::from_c_str(buf)), ~\"hi\");\n+    }\n }"}]}