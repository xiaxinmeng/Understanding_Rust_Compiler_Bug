{"sha": "f55fef165eac03ca4ac1a115678684e82edf173d", "node_id": "C_kwDOAAsO6NoAKGY1NWZlZjE2NWVhYzAzY2E0YWMxYTExNTY3ODY4NGU4MmVkZjE3M2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-04T16:26:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-04T16:26:39Z"}, "message": "Rollup merge of #102647 - oli-obk:tilde_const_bounds, r=fee1-dead\n\nOnly allow ~const bounds for traits with #[const_trait]\n\nr? `@fee1-dead`", "tree": {"sha": "d33c0e998cf22e3e0f122b9a3d804590610de103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d33c0e998cf22e3e0f122b9a3d804590610de103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f55fef165eac03ca4ac1a115678684e82edf173d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPF6/CRBK7hj4Ov3rIwAAk+AIAIb7AevTHOQzoZuV7IlmtbBg\nEGhSspe5fhTCS2BG6PshBPXbmFk0GVRhyTmfRndwgUGbpkori9wo8csqZkxM7OB8\nA7RmJKfILJ0qn+oFYmgeBrlgmn9EuJ1LlmG3BMMK/GVFdXJM0HOdygJy8BDKazk2\nG7VxC52mSV059zAp/bW3jytVV52jwUf9XA2m3HCeQg463kTry8HXa/8kIu2P07iT\nBgn3RmShxlHImDENANe+kM/3c1MzMqUQkUfNK+X0d4jL3z2DcMbFeoWnk2we7x7l\nTTzaUFgjhhr+fnwaTkgQvPLlIUgn7mZ11kVqkWVqk5cZNgrxM0oqrc1B+Hm/f2c=\n=TzFs\n-----END PGP SIGNATURE-----\n", "payload": "tree d33c0e998cf22e3e0f122b9a3d804590610de103\nparent 5d584516b223e3a92fffa2c7e175734c23882340\nparent c72c6e01c8020c7a285b76a9b61934e3501b80f3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664900799 +0200\ncommitter GitHub <noreply@github.com> 1664900799 +0200\n\nRollup merge of #102647 - oli-obk:tilde_const_bounds, r=fee1-dead\n\nOnly allow ~const bounds for traits with #[const_trait]\n\nr? `@fee1-dead`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f55fef165eac03ca4ac1a115678684e82edf173d", "html_url": "https://github.com/rust-lang/rust/commit/f55fef165eac03ca4ac1a115678684e82edf173d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f55fef165eac03ca4ac1a115678684e82edf173d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d584516b223e3a92fffa2c7e175734c23882340", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d584516b223e3a92fffa2c7e175734c23882340", "html_url": "https://github.com/rust-lang/rust/commit/5d584516b223e3a92fffa2c7e175734c23882340"}, {"sha": "c72c6e01c8020c7a285b76a9b61934e3501b80f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c72c6e01c8020c7a285b76a9b61934e3501b80f3", "html_url": "https://github.com/rust-lang/rust/commit/c72c6e01c8020c7a285b76a9b61934e3501b80f3"}], "stats": {"total": 334, "additions": 216, "deletions": 118}, "files": [{"sha": "e502b9b54e3021ab926d96706f2d7b1d6fc81acf", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -191,32 +191,6 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.tcx.hir()\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        let tcx = self.tcx;\n-        if let hir::ItemKind::Impl(hir::Impl {\n-            constness: hir::Constness::Const,\n-            of_trait: Some(trait_ref),\n-            ..\n-        }) = item.kind\n-            && let Some(def_id) = trait_ref.trait_def_id()\n-        {\n-            let source_map = tcx.sess.source_map();\n-            if !tcx.has_attr(def_id, sym::const_trait) {\n-                tcx.sess\n-                    .struct_span_err(\n-                        source_map.guess_head_span(item.span),\n-                        \"const `impl`s must be for traits marked with `#[const_trait]`\",\n-                    )\n-                    .span_note(\n-                        source_map.guess_head_span(tcx.def_span(def_id)),\n-                        \"this trait must be annotated with `#[const_trait]`\",\n-                    )\n-                    .emit();\n-            }\n-        }\n-        intravisit::walk_item(self, item);\n-    }\n-\n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n         let kind = Some(hir::ConstContext::Const);\n         self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));"}, {"sha": "5f901d6995e4bd929fa766d5b2e73d43faf87494", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -308,6 +308,32 @@ impl<'tcx> WfPredicates<'tcx> {\n         let obligations = if trait_pred.constness == ty::BoundConstness::NotConst {\n             self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n         } else {\n+            if !tcx.has_attr(trait_ref.def_id, rustc_span::sym::const_trait) {\n+                if let Some(item) = self.item &&\n+                   let hir::ItemKind::Impl(impl_) = item.kind &&\n+                   let Some(trait_) = &impl_.of_trait &&\n+                   let Some(def_id) = trait_.trait_def_id() &&\n+                   def_id == trait_ref.def_id\n+                {\n+                    let trait_name = tcx.item_name(def_id);\n+                    let mut err = tcx.sess.struct_span_err(\n+                        self.span,\n+                        &format!(\"const `impl` for trait `{trait_name}` which is not marked with `#[const_trait]`\"),\n+                    );\n+                    if def_id.is_local() {\n+                        let sp = tcx.def_span(def_id).shrink_to_lo();\n+                        err.span_suggestion(sp, &format!(\"mark `{trait_name}` as const\"), \"#[const_trait]\", rustc_errors::Applicability::MachineApplicable);\n+                    }\n+                    err.note(\"marking a trait with `#[const_trait]` ensures all default method bodies are `const`\");\n+                    err.note(\"adding a non-const method body in the future would be a breaking change\");\n+                    err.emit();\n+                } else {\n+                    tcx.sess.span_err(\n+                        self.span,\n+                        \"~const can only be applied to `#[const_trait]` traits\",\n+                    );\n+                }\n+            }\n             self.nominal_obligations(trait_ref.def_id, trait_ref.substs)\n         };\n "}, {"sha": "e099700e3e7c8f2f06da079637a6efbd7decba33", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -264,7 +264,7 @@ pub trait IntoIterator {\n \n #[rustc_const_unstable(feature = \"const_intoiterator_identity\", issue = \"90603\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: ~const Iterator> const IntoIterator for I {\n+impl<I: Iterator> const IntoIterator for I {\n     type Item = I::Item;\n     type IntoIter = I;\n "}, {"sha": "d5ed52124e2ca42bd0af9629965e6959cd65b0eb", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -799,6 +799,7 @@ impl<T: ?Sized> Unpin for *mut T {}\n #[unstable(feature = \"const_trait_impl\", issue = \"67792\")]\n #[lang = \"destruct\"]\n #[rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg)]\n+#[const_trait]\n pub trait Destruct {}\n \n /// A marker for tuple types."}, {"sha": "02960b363e78f695824f372021ff5c280c73d709", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -22,8 +22,8 @@ LL |     for i in 0..x {\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n-LL | impl<I: ~const Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<I: Iterator> const IntoIterator for I {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n error[E0658]: mutable references are not allowed in constant functions"}, {"sha": "11e4ae309c01f5abddb458968d476586dc84dd63", "filename": "src/test/ui/consts/const-for.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -7,8 +7,8 @@ LL |     for _ in 0..5 {}\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n-LL | impl<I: ~const Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<I: Iterator> const IntoIterator for I {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error[E0015]: cannot call non-const fn `<std::ops::Range<i32> as Iterator>::next` in constants"}, {"sha": "fcf01d5bc71a343984a91fe8b7db3a231259b8dc", "filename": "src/test/ui/consts/constifconst-call-in-const-position.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl, generic_const_exprs)]\n \n+#[const_trait]\n pub trait Tr {\n     fn a() -> usize;\n }"}, {"sha": "d4a445120a25da4d7f05e807cf0493e5ad3f3f45", "filename": "src/test/ui/consts/constifconst-call-in-const-position.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -8,7 +8,7 @@ LL | #![feature(const_trait_impl, generic_const_exprs)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0080]: evaluation of `foo::<()>::{constant#0}` failed\n-  --> $DIR/constifconst-call-in-const-position.rs:15:38\n+  --> $DIR/constifconst-call-in-const-position.rs:16:38\n    |\n LL | const fn foo<T: ~const Tr>() -> [u8; T::a()] {\n    |                                      ^^^^^^ calling non-const function `<() as Tr>::a`"}, {"sha": "0910e9ad77a846a00e90a4a53b43f89998855eec", "filename": "src/test/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -47,8 +47,8 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n-LL | impl<I: ~const Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<I: Iterator> const IntoIterator for I {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error[E0658]: mutable references are not allowed in constants"}, {"sha": "414a8c87d2c417c71b50c225c6604ad6ad01bf34", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -2,13 +2,18 @@\n \n struct S;\n \n-impl PartialEq for S {\n+#[const_trait]\n+trait Foo {\n+    fn eq(&self, _: &Self) -> bool;\n+}\n+\n+impl Foo for S {\n     fn eq(&self, _: &S) -> bool {\n         true\n     }\n }\n \n-const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: ~const Foo>(t: &T) -> bool {\n     true\n }\n "}, {"sha": "706f52343659e3845232adc5f831f8731462b208", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,26 +1,21 @@\n-error[E0277]: can't compare `S` with `S` in const contexts\n-  --> $DIR/call-generic-method-nonconst.rs:18:34\n+error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n+  --> $DIR/call-generic-method-nonconst.rs:23:34\n    |\n LL | pub const EQ: bool = equals_self(&S);\n-   |                      ----------- ^^ no implementation for `S == S`\n+   |                      ----------- ^^ the trait `~const Foo` is not implemented for `S`\n    |                      |\n    |                      required by a bound introduced by this call\n    |\n-   = help: the trait `~const PartialEq` is not implemented for `S`\n-note: the trait `PartialEq` is implemented for `S`, but that implementation is not `const`\n-  --> $DIR/call-generic-method-nonconst.rs:18:34\n+note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n+  --> $DIR/call-generic-method-nonconst.rs:23:34\n    |\n LL | pub const EQ: bool = equals_self(&S);\n    |                                  ^^\n note: required by a bound in `equals_self`\n-  --> $DIR/call-generic-method-nonconst.rs:11:25\n-   |\n-LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n-   |                         ^^^^^^^^^^^^^^^^ required by this bound in `equals_self`\n-help: consider annotating `S` with `#[derive(PartialEq)]`\n-   |\n-LL | #[derive(PartialEq)]\n+  --> $DIR/call-generic-method-nonconst.rs:16:25\n    |\n+LL | const fn equals_self<T: ~const Foo>(t: &T) -> bool {\n+   |                         ^^^^^^^^^^ required by this bound in `equals_self`\n \n error: aborting due to previous error\n "}, {"sha": "ddf0e2d91c09759438443e5554293c49f506c0c0", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:43:5\n+  --> $DIR/const-drop-fail.rs:44:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -9,7 +9,7 @@ LL |     NonTrivialDrop,\n    |\n    = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n@@ -21,7 +21,7 @@ LL |     &mut NonTrivialDrop,\n    |     ++++\n \n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:45:5\n+  --> $DIR/const-drop-fail.rs:46:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -30,7 +30,7 @@ LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:45:5\n+  --> $DIR/const-drop-fail.rs:46:5\n    |\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -40,13 +40,13 @@ note: required because it appears within the type `ConstImplWithDropGlue`\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n-  --> $DIR/const-drop-fail.rs:47:5\n+  --> $DIR/const-drop-fail.rs:48:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -55,14 +55,14 @@ LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n    |\n note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-  --> $DIR/const-drop-fail.rs:28:25\n+  --> $DIR/const-drop-fail.rs:29:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n    |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: 1 redundant requirement hidden\n    = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`"}, {"sha": "565e2c77ac5ca54ab875a00beaa129a442a6a45c", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -19,7 +19,8 @@ impl const Drop for ConstImplWithDropGlue {\n     fn drop(&mut self) {}\n }\n \n-trait A { fn a() { println!(\"A\"); } }\n+#[const_trait]\n+trait A { fn a() { } }\n \n impl A for NonTrivialDrop {}\n "}, {"sha": "ddf0e2d91c09759438443e5554293c49f506c0c0", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:43:5\n+  --> $DIR/const-drop-fail.rs:44:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -9,7 +9,7 @@ LL |     NonTrivialDrop,\n    |\n    = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n@@ -21,7 +21,7 @@ LL |     &mut NonTrivialDrop,\n    |     ++++\n \n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:45:5\n+  --> $DIR/const-drop-fail.rs:46:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -30,7 +30,7 @@ LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:45:5\n+  --> $DIR/const-drop-fail.rs:46:5\n    |\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -40,13 +40,13 @@ note: required because it appears within the type `ConstImplWithDropGlue`\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n-  --> $DIR/const-drop-fail.rs:47:5\n+  --> $DIR/const-drop-fail.rs:48:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -55,14 +55,14 @@ LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n    |\n note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-  --> $DIR/const-drop-fail.rs:28:25\n+  --> $DIR/const-drop-fail.rs:29:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n    |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: 1 redundant requirement hidden\n    = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`"}, {"sha": "2b4963991dbefacd4a08c3e1f9baba36831cca35", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-requires-const-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,9 +1,9 @@\n #![feature(const_trait_impl)]\n \n pub trait A {}\n-//~^ NOTE: this trait must be annotated with `#[const_trait]`\n+//~^ HELP: mark `A` as const\n \n impl const A for () {}\n-//~^ ERROR: const `impl`s must be for traits marked with `#[const_trait]`\n+//~^ ERROR: const `impl` for trait `A` which is not marked with `#[const_trait]`\n \n fn main() {}"}, {"sha": "478adcf3e9e898d28cfd48addc6ad15f79c612f3", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-requires-const-trait.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,14 +1,14 @@\n-error: const `impl`s must be for traits marked with `#[const_trait]`\n-  --> $DIR/const-impl-requires-const-trait.rs:6:1\n+error: const `impl` for trait `A` which is not marked with `#[const_trait]`\n+  --> $DIR/const-impl-requires-const-trait.rs:6:12\n    |\n+LL | pub trait A {}\n+   | - help: mark `A` as const: `#[const_trait]`\n+...\n LL | impl const A for () {}\n-   | ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: this trait must be annotated with `#[const_trait]`\n-  --> $DIR/const-impl-requires-const-trait.rs:3:1\n+   |            ^\n    |\n-LL | pub trait A {}\n-   | ^^^^^^^^^^^\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n error: aborting due to previous error\n "}, {"sha": "96acdc300e0ddd81877bca2478e8c8e409cfcc7b", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,5 +1,6 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Tr {}\n impl Tr for () {}\n "}, {"sha": "d102956cd2ec24a9614764c91a88992066fc0490", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,16 +1,16 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n-  --> $DIR/default-method-body-is-const-body-checking.rs:11:15\n+  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n    |\n LL |         foo::<()>();\n    |               ^^ the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/default-method-body-is-const-body-checking.rs:11:15\n+  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n    |\n LL |         foo::<()>();\n    |               ^^\n note: required by a bound in `foo`\n-  --> $DIR/default-method-body-is-const-body-checking.rs:6:28\n+  --> $DIR/default-method-body-is-const-body-checking.rs:7:28\n    |\n LL | const fn foo<T>() where T: ~const Tr {}\n    |                            ^^^^^^^^^ required by this bound in `foo`"}, {"sha": "b86acb2cc9ab251c0dfbdd5a14badca474f38982", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.nn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b86acb2cc9ab251c0dfbdd5a14badca474f38982", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.ny.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d183efde2df1fd579615dec45b72940a9e7f98eb", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,14 +1,19 @@\n #![feature(const_trait_impl)]\n \n+// revisions: yy yn ny nn\n+\n+#[cfg_attr(any(yy, yn), const_trait)]\n trait Foo {\n     fn a(&self);\n }\n+\n+#[cfg_attr(any(yy, ny), const_trait)]\n trait Bar: ~const Foo {}\n+//[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n \n const fn foo<T: Bar>(x: &T) {\n     x.a();\n-    //~^ ERROR the trait bound\n-    //~| ERROR cannot call\n+    //[yn,yy]~^ ERROR the trait bound\n }\n \n fn main() {}"}, {"sha": "1766cdbee8af2b11d217576dff986e85bc76be5a", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5d584516b223e3a92fffa2c7e175734c23882340/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d584516b223e3a92fffa2c7e175734c23882340/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr?ref=5d584516b223e3a92fffa2c7e175734c23882340", "patch": "@@ -1,24 +0,0 @@\n-error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:9:7\n-   |\n-LL |     x.a();\n-   |       ^^^ the trait `~const Foo` is not implemented for `T`\n-   |\n-note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail-2.rs:9:7\n-   |\n-LL |     x.a();\n-   |       ^^^\n-\n-error[E0015]: cannot call non-const fn `<T as Foo>::a` in constant functions\n-  --> $DIR/super-traits-fail-2.rs:9:7\n-   |\n-LL |     x.a();\n-   |       ^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`."}, {"sha": "b52eb2c0332fd460e93f5f2b5d1586e4036a6c9f", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yn.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n+  --> $DIR/super-traits-fail-2.rs:15:5\n+   |\n+LL |     x.a();\n+   |     ^ - required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const Foo` is not implemented for `T`\n+   |\n+note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/super-traits-fail-2.rs:15:5\n+   |\n+LL |     x.a();\n+   |     ^\n+help: consider further restricting this bound\n+   |\n+LL | const fn foo<T: Bar + ~const Foo>(x: &T) {\n+   |                     ++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b52eb2c0332fd460e93f5f2b5d1586e4036a6c9f", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yy.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n+  --> $DIR/super-traits-fail-2.rs:15:5\n+   |\n+LL |     x.a();\n+   |     ^ - required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const Foo` is not implemented for `T`\n+   |\n+note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/super-traits-fail-2.rs:15:5\n+   |\n+LL |     x.a();\n+   |     ^\n+help: consider further restricting this bound\n+   |\n+LL | const fn foo<T: Bar + ~const Foo>(x: &T) {\n+   |                     ++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "191edca1761c83dbf63c8e32cce2f73b9457b710", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.nn.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -0,0 +1,14 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:12:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:15:17\n+   |\n+LL | const fn foo<T: ~const Bar>(x: &T) {\n+   |                 ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a3b4c302a57f8e7e4c050b87f8797da15edb8292", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.ny.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:12:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "70d2936d3b259d0e533ea6087044251b8c2a640e", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_trait_impl)]\n+\n+// revisions: yy yn ny nn\n+//[yy] check-pass\n+\n+#[cfg_attr(any(yy, yn), const_trait)]\n+trait Foo {\n+    fn a(&self);\n+}\n+\n+#[cfg_attr(any(yy, ny), const_trait)]\n+trait Bar: ~const Foo {}\n+//[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+\n+const fn foo<T: ~const Bar>(x: &T) {\n+    //[yn,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+    x.a();\n+}\n+\n+fn main() {}"}, {"sha": "9d611665465933e659179313a6d730ed30bac694", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.yn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:15:17\n+   |\n+LL | const fn foo<T: ~const Bar>(x: &T) {\n+   |                 ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5bd52151f42acdc097cd97516a038ad44ff31c2f", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,6 +1,7 @@\n #![feature(const_trait_impl)]\n #![feature(associated_type_bounds)]\n \n+#[const_trait]\n trait T {}\n struct S;\n impl T for S {}"}, {"sha": "5d2133156343d55884bec97eec62e6c73b5282d6", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,37 +1,37 @@\n error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:8:19\n+  --> $DIR/tilde-const-invalid-places.rs:9:19\n    |\n LL | fn rpit() -> impl ~const T { S }\n    |                   ^^^^^^^^\n    |\n    = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:11:17\n+  --> $DIR/tilde-const-invalid-places.rs:12:17\n    |\n LL | fn apit(_: impl ~const T) {}\n    |                 ^^^^^^^^\n    |\n    = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:14:50\n+  --> $DIR/tilde-const-invalid-places.rs:15:50\n    |\n LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n    |                                                  ^^^^^^^^\n    |\n    = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:17:48\n+  --> $DIR/tilde-const-invalid-places.rs:18:48\n    |\n LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n    |                                                ^^^^^^^^\n    |\n    = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` and `?` are mutually exclusive\n-  --> $DIR/tilde-const-invalid-places.rs:20:25\n+  --> $DIR/tilde-const-invalid-places.rs:21:25\n    |\n LL | struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n    |                         ^^^^^^^^^^^^^"}, {"sha": "bfe98b98c74206a8d896c60222f656accdd7a523", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -4,8 +4,10 @@\n // test is not enough.\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Bar {}\n \n+#[const_trait]\n trait Foo {\n     fn a();\n     fn b() where Self: ~const Bar;"}, {"sha": "f2846b6a6626208bd5da33a0da23714268dff9e4", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-const.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause-const.rs:17:5\n+  --> $DIR/trait-where-clause-const.rs:19:5\n    |\n LL |     T::b();\n    |     ^^^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause-const.rs:17:5\n+  --> $DIR/trait-where-clause-const.rs:19:5\n    |\n LL |     T::b();\n    |     ^^^^^^\n@@ -15,13 +15,13 @@ LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n    |                                    ++++++++++++\n \n error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause-const.rs:19:5\n+  --> $DIR/trait-where-clause-const.rs:21:5\n    |\n LL |     T::c::<T>();\n    |     ^^^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause-const.rs:19:5\n+  --> $DIR/trait-where-clause-const.rs:21:5\n    |\n LL |     T::c::<T>();\n    |     ^^^^^^^^^^^"}, {"sha": "3b028ac48db4bf430e8f9399493cc128725a42e0", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-self-referential.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Foo {\n     fn bar() where Self: ~const Foo;\n }"}, {"sha": "85ca5fc904877f35872c7f2ec99dc3d86589c455", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,5 +1,6 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Bar {}\n \n trait Foo {"}, {"sha": "11f0c40160d89e05c2cd944fc2a7ffd0e4596632", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f55fef165eac03ca4ac1a115678684e82edf173d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=f55fef165eac03ca4ac1a115678684e82edf173d", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:13:5\n+  --> $DIR/trait-where-clause.rs:14:5\n    |\n LL |     T::b();\n    |     ^^^^ the trait `Bar` is not implemented for `T`\n    |\n note: required by a bound in `Foo::b`\n-  --> $DIR/trait-where-clause.rs:7:24\n+  --> $DIR/trait-where-clause.rs:8:24\n    |\n LL |     fn b() where Self: ~const Bar;\n    |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n@@ -15,13 +15,13 @@ LL | fn test1<T: Foo + Bar>() {\n    |                 +++++\n \n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:15:12\n+  --> $DIR/trait-where-clause.rs:16:12\n    |\n LL |     T::c::<T>();\n    |            ^ the trait `Bar` is not implemented for `T`\n    |\n note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:8:13\n+  --> $DIR/trait-where-clause.rs:9:13\n    |\n LL |     fn c<T: ~const Bar>();\n    |             ^^^^^^^^^^ required by this bound in `Foo::c`"}]}