{"sha": "05cb0df748dbc14c43dea4d627d68721a52861c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Y2IwZGY3NDhkYmMxNGM0M2RlYTRkNjI3ZDY4NzIxYTUyODYxYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T20:21:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-13T20:21:04Z"}, "message": "Auto merge of #5033 - JohnTitor:split-use-self, r=flip1995\n\nSplit up `use_self` ui test\n\nPart of #2038\n\nchangelog: none", "tree": {"sha": "7682a87236a469d65a6e91b611ac131c1218bf70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7682a87236a469d65a6e91b611ac131c1218bf70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05cb0df748dbc14c43dea4d627d68721a52861c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05cb0df748dbc14c43dea4d627d68721a52861c6", "html_url": "https://github.com/rust-lang/rust/commit/05cb0df748dbc14c43dea4d627d68721a52861c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05cb0df748dbc14c43dea4d627d68721a52861c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920cdb59e1edf2c4cb2f266fa521f12c1b97a499", "url": "https://api.github.com/repos/rust-lang/rust/commits/920cdb59e1edf2c4cb2f266fa521f12c1b97a499", "html_url": "https://github.com/rust-lang/rust/commit/920cdb59e1edf2c4cb2f266fa521f12c1b97a499"}, {"sha": "291f2cbeb80b7313d2ba3a7dbe1b4d0f6a6ab1b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/291f2cbeb80b7313d2ba3a7dbe1b4d0f6a6ab1b6", "html_url": "https://github.com/rust-lang/rust/commit/291f2cbeb80b7313d2ba3a7dbe1b4d0f6a6ab1b6"}], "stats": {"total": 674, "additions": 342, "deletions": 332}, "files": [{"sha": "802de31b783f87f62074c7f1d60bda33815a0629", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=05cb0df748dbc14c43dea4d627d68721a52861c6", "patch": "@@ -69,117 +69,6 @@ mod lifetimes {\n     }\n }\n \n-#[allow(clippy::boxed_local)]\n-mod traits {\n-\n-    use std::ops::Mul;\n-\n-    trait SelfTrait {\n-        fn refs(p1: &Self) -> &Self;\n-        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self;\n-        fn mut_refs(p1: &mut Self) -> &mut Self;\n-        fn nested(p1: Box<Self>, p2: (&u8, &Self));\n-        fn vals(r: Self) -> Self;\n-    }\n-\n-    #[derive(Default)]\n-    struct Bad;\n-\n-    impl SelfTrait for Bad {\n-        fn refs(p1: &Self) -> &Self {\n-            p1\n-        }\n-\n-        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n-            p1\n-        }\n-\n-        fn mut_refs(p1: &mut Self) -> &mut Self {\n-            p1\n-        }\n-\n-        fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n-\n-        fn vals(_: Self) -> Self {\n-            Self::default()\n-        }\n-    }\n-\n-    impl Mul for Bad {\n-        type Output = Self;\n-\n-        fn mul(self, rhs: Self) -> Self {\n-            rhs\n-        }\n-    }\n-\n-    impl Clone for Bad {\n-        fn clone(&self) -> Self {\n-            Self\n-        }\n-    }\n-\n-    #[derive(Default)]\n-    struct Good;\n-\n-    impl SelfTrait for Good {\n-        fn refs(p1: &Self) -> &Self {\n-            p1\n-        }\n-\n-        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n-            p1\n-        }\n-\n-        fn mut_refs(p1: &mut Self) -> &mut Self {\n-            p1\n-        }\n-\n-        fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n-\n-        fn vals(_: Self) -> Self {\n-            Self::default()\n-        }\n-    }\n-\n-    impl Mul for Good {\n-        type Output = Self;\n-\n-        fn mul(self, rhs: Self) -> Self {\n-            rhs\n-        }\n-    }\n-\n-    trait NameTrait {\n-        fn refs(p1: &u8) -> &u8;\n-        fn ref_refs<'a>(p1: &'a &'a u8) -> &'a &'a u8;\n-        fn mut_refs(p1: &mut u8) -> &mut u8;\n-        fn nested(p1: Box<u8>, p2: (&u8, &u8));\n-        fn vals(p1: u8) -> u8;\n-    }\n-\n-    // Using `Self` instead of the type name is OK\n-    impl NameTrait for u8 {\n-        fn refs(p1: &Self) -> &Self {\n-            p1\n-        }\n-\n-        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n-            p1\n-        }\n-\n-        fn mut_refs(p1: &mut Self) -> &mut Self {\n-            p1\n-        }\n-\n-        fn nested(_p1: Box<Self>, _p2: (&Self, &Self)) {}\n-\n-        fn vals(_: Self) -> Self {\n-            Self::default()\n-        }\n-    }\n-}\n-\n mod issue2894 {\n     trait IntoBytes {\n         fn into_bytes(&self) -> Vec<u8>;"}, {"sha": "605c4f8c41fd51a8a69ea4a237865781974762f3", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=05cb0df748dbc14c43dea4d627d68721a52861c6", "patch": "@@ -69,117 +69,6 @@ mod lifetimes {\n     }\n }\n \n-#[allow(clippy::boxed_local)]\n-mod traits {\n-\n-    use std::ops::Mul;\n-\n-    trait SelfTrait {\n-        fn refs(p1: &Self) -> &Self;\n-        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self;\n-        fn mut_refs(p1: &mut Self) -> &mut Self;\n-        fn nested(p1: Box<Self>, p2: (&u8, &Self));\n-        fn vals(r: Self) -> Self;\n-    }\n-\n-    #[derive(Default)]\n-    struct Bad;\n-\n-    impl SelfTrait for Bad {\n-        fn refs(p1: &Bad) -> &Bad {\n-            p1\n-        }\n-\n-        fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n-            p1\n-        }\n-\n-        fn mut_refs(p1: &mut Bad) -> &mut Bad {\n-            p1\n-        }\n-\n-        fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n-\n-        fn vals(_: Bad) -> Bad {\n-            Bad::default()\n-        }\n-    }\n-\n-    impl Mul for Bad {\n-        type Output = Bad;\n-\n-        fn mul(self, rhs: Bad) -> Bad {\n-            rhs\n-        }\n-    }\n-\n-    impl Clone for Bad {\n-        fn clone(&self) -> Self {\n-            Bad\n-        }\n-    }\n-\n-    #[derive(Default)]\n-    struct Good;\n-\n-    impl SelfTrait for Good {\n-        fn refs(p1: &Self) -> &Self {\n-            p1\n-        }\n-\n-        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n-            p1\n-        }\n-\n-        fn mut_refs(p1: &mut Self) -> &mut Self {\n-            p1\n-        }\n-\n-        fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n-\n-        fn vals(_: Self) -> Self {\n-            Self::default()\n-        }\n-    }\n-\n-    impl Mul for Good {\n-        type Output = Self;\n-\n-        fn mul(self, rhs: Self) -> Self {\n-            rhs\n-        }\n-    }\n-\n-    trait NameTrait {\n-        fn refs(p1: &u8) -> &u8;\n-        fn ref_refs<'a>(p1: &'a &'a u8) -> &'a &'a u8;\n-        fn mut_refs(p1: &mut u8) -> &mut u8;\n-        fn nested(p1: Box<u8>, p2: (&u8, &u8));\n-        fn vals(p1: u8) -> u8;\n-    }\n-\n-    // Using `Self` instead of the type name is OK\n-    impl NameTrait for u8 {\n-        fn refs(p1: &Self) -> &Self {\n-            p1\n-        }\n-\n-        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n-            p1\n-        }\n-\n-        fn mut_refs(p1: &mut Self) -> &mut Self {\n-            p1\n-        }\n-\n-        fn nested(_p1: Box<Self>, _p2: (&Self, &Self)) {}\n-\n-        fn vals(_: Self) -> Self {\n-            Self::default()\n-        }\n-    }\n-}\n-\n mod issue2894 {\n     trait IntoBytes {\n         fn into_bytes(&self) -> Vec<u8>;"}, {"sha": "3cdb1cb32495ad7951c7424db5af7418d97011c0", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 20, "deletions": 110, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=05cb0df748dbc14c43dea4d627d68721a52861c6", "patch": "@@ -37,109 +37,19 @@ LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:89:22\n-   |\n-LL |         fn refs(p1: &Bad) -> &Bad {\n-   |                      ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:89:31\n-   |\n-LL |         fn refs(p1: &Bad) -> &Bad {\n-   |                               ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:93:37\n-   |\n-LL |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n-   |                                     ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:93:53\n-   |\n-LL |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n-   |                                                     ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:97:30\n-   |\n-LL |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n-   |                              ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:97:43\n-   |\n-LL |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n-   |                                           ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:101:28\n-   |\n-LL |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n-   |                            ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:101:46\n-   |\n-LL |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n-   |                                              ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:103:20\n-   |\n-LL |         fn vals(_: Bad) -> Bad {\n-   |                    ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:103:28\n-   |\n-LL |         fn vals(_: Bad) -> Bad {\n-   |                            ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:104:13\n-   |\n-LL |             Bad::default()\n-   |             ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:109:23\n-   |\n-LL |         type Output = Bad;\n-   |                       ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:111:27\n-   |\n-LL |         fn mul(self, rhs: Bad) -> Bad {\n-   |                           ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:111:35\n-   |\n-LL |         fn mul(self, rhs: Bad) -> Bad {\n-   |                                   ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:118:13\n-   |\n-LL |             Bad\n-   |             ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:200:56\n+  --> $DIR/use_self.rs:89:56\n    |\n LL |         fn bad(foos: &[Self]) -> impl Iterator<Item = &Foo> {\n    |                                                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:215:13\n+  --> $DIR/use_self.rs:104:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:223:25\n+  --> $DIR/use_self.rs:112:25\n    |\n LL |             fn new() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n@@ -148,7 +58,7 @@ LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:224:17\n+  --> $DIR/use_self.rs:113:17\n    |\n LL |                 Foo {}\n    |                 ^^^ help: use the applicable keyword: `Self`\n@@ -157,94 +67,94 @@ LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:259:21\n+  --> $DIR/use_self.rs:148:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:260:13\n+  --> $DIR/use_self.rs:149:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:247:29\n+  --> $DIR/use_self.rs:136:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:248:21\n+  --> $DIR/use_self.rs:137:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:277:21\n+  --> $DIR/use_self.rs:166:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:278:21\n+  --> $DIR/use_self.rs:167:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:279:21\n+  --> $DIR/use_self.rs:168:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:310:13\n+  --> $DIR/use_self.rs:199:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:311:13\n+  --> $DIR/use_self.rs:200:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:313:13\n+  --> $DIR/use_self.rs:202:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:332:13\n+  --> $DIR/use_self.rs:221:13\n    |\n LL |             TestStruct::from_something()\n    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:346:25\n+  --> $DIR/use_self.rs:235:25\n    |\n LL |         async fn g() -> S {\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:347:13\n+  --> $DIR/use_self.rs:236:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:351:16\n+  --> $DIR/use_self.rs:240:16\n    |\n LL |             &p[S::A..S::B]\n    |                ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:351:22\n+  --> $DIR/use_self.rs:240:22\n    |\n LL |             &p[S::A..S::B]\n    |                      ^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 40 previous errors\n+error: aborting due to 25 previous errors\n "}, {"sha": "1582ae114bf4c4b486af912d3e9d297171a49cda", "filename": "tests/ui/use_self_trait.fixed", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self_trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self_trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.fixed?ref=05cb0df748dbc14c43dea4d627d68721a52861c6", "patch": "@@ -0,0 +1,114 @@\n+// run-rustfix\n+\n+#![warn(clippy::use_self)]\n+#![allow(dead_code)]\n+#![allow(clippy::should_implement_trait, clippy::boxed_local)]\n+\n+use std::ops::Mul;\n+\n+trait SelfTrait {\n+    fn refs(p1: &Self) -> &Self;\n+    fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self;\n+    fn mut_refs(p1: &mut Self) -> &mut Self;\n+    fn nested(p1: Box<Self>, p2: (&u8, &Self));\n+    fn vals(r: Self) -> Self;\n+}\n+\n+#[derive(Default)]\n+struct Bad;\n+\n+impl SelfTrait for Bad {\n+    fn refs(p1: &Self) -> &Self {\n+        p1\n+    }\n+\n+    fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+        p1\n+    }\n+\n+    fn mut_refs(p1: &mut Self) -> &mut Self {\n+        p1\n+    }\n+\n+    fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n+\n+    fn vals(_: Self) -> Self {\n+        Self::default()\n+    }\n+}\n+\n+impl Mul for Bad {\n+    type Output = Self;\n+\n+    fn mul(self, rhs: Self) -> Self {\n+        rhs\n+    }\n+}\n+\n+impl Clone for Bad {\n+    fn clone(&self) -> Self {\n+        Self\n+    }\n+}\n+\n+#[derive(Default)]\n+struct Good;\n+\n+impl SelfTrait for Good {\n+    fn refs(p1: &Self) -> &Self {\n+        p1\n+    }\n+\n+    fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+        p1\n+    }\n+\n+    fn mut_refs(p1: &mut Self) -> &mut Self {\n+        p1\n+    }\n+\n+    fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n+\n+    fn vals(_: Self) -> Self {\n+        Self::default()\n+    }\n+}\n+\n+impl Mul for Good {\n+    type Output = Self;\n+\n+    fn mul(self, rhs: Self) -> Self {\n+        rhs\n+    }\n+}\n+\n+trait NameTrait {\n+    fn refs(p1: &u8) -> &u8;\n+    fn ref_refs<'a>(p1: &'a &'a u8) -> &'a &'a u8;\n+    fn mut_refs(p1: &mut u8) -> &mut u8;\n+    fn nested(p1: Box<u8>, p2: (&u8, &u8));\n+    fn vals(p1: u8) -> u8;\n+}\n+\n+// Using `Self` instead of the type name is OK\n+impl NameTrait for u8 {\n+    fn refs(p1: &Self) -> &Self {\n+        p1\n+    }\n+\n+    fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+        p1\n+    }\n+\n+    fn mut_refs(p1: &mut Self) -> &mut Self {\n+        p1\n+    }\n+\n+    fn nested(_p1: Box<Self>, _p2: (&Self, &Self)) {}\n+\n+    fn vals(_: Self) -> Self {\n+        Self::default()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "70667b9797e762c0ec4f383d58d0a1ced2316ce3", "filename": "tests/ui/use_self_trait.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.rs?ref=05cb0df748dbc14c43dea4d627d68721a52861c6", "patch": "@@ -0,0 +1,114 @@\n+// run-rustfix\n+\n+#![warn(clippy::use_self)]\n+#![allow(dead_code)]\n+#![allow(clippy::should_implement_trait, clippy::boxed_local)]\n+\n+use std::ops::Mul;\n+\n+trait SelfTrait {\n+    fn refs(p1: &Self) -> &Self;\n+    fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self;\n+    fn mut_refs(p1: &mut Self) -> &mut Self;\n+    fn nested(p1: Box<Self>, p2: (&u8, &Self));\n+    fn vals(r: Self) -> Self;\n+}\n+\n+#[derive(Default)]\n+struct Bad;\n+\n+impl SelfTrait for Bad {\n+    fn refs(p1: &Bad) -> &Bad {\n+        p1\n+    }\n+\n+    fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+        p1\n+    }\n+\n+    fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+        p1\n+    }\n+\n+    fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n+\n+    fn vals(_: Bad) -> Bad {\n+        Bad::default()\n+    }\n+}\n+\n+impl Mul for Bad {\n+    type Output = Bad;\n+\n+    fn mul(self, rhs: Bad) -> Bad {\n+        rhs\n+    }\n+}\n+\n+impl Clone for Bad {\n+    fn clone(&self) -> Self {\n+        Bad\n+    }\n+}\n+\n+#[derive(Default)]\n+struct Good;\n+\n+impl SelfTrait for Good {\n+    fn refs(p1: &Self) -> &Self {\n+        p1\n+    }\n+\n+    fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+        p1\n+    }\n+\n+    fn mut_refs(p1: &mut Self) -> &mut Self {\n+        p1\n+    }\n+\n+    fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n+\n+    fn vals(_: Self) -> Self {\n+        Self::default()\n+    }\n+}\n+\n+impl Mul for Good {\n+    type Output = Self;\n+\n+    fn mul(self, rhs: Self) -> Self {\n+        rhs\n+    }\n+}\n+\n+trait NameTrait {\n+    fn refs(p1: &u8) -> &u8;\n+    fn ref_refs<'a>(p1: &'a &'a u8) -> &'a &'a u8;\n+    fn mut_refs(p1: &mut u8) -> &mut u8;\n+    fn nested(p1: Box<u8>, p2: (&u8, &u8));\n+    fn vals(p1: u8) -> u8;\n+}\n+\n+// Using `Self` instead of the type name is OK\n+impl NameTrait for u8 {\n+    fn refs(p1: &Self) -> &Self {\n+        p1\n+    }\n+\n+    fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+        p1\n+    }\n+\n+    fn mut_refs(p1: &mut Self) -> &mut Self {\n+        p1\n+    }\n+\n+    fn nested(_p1: Box<Self>, _p2: (&Self, &Self)) {}\n+\n+    fn vals(_: Self) -> Self {\n+        Self::default()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4f2506cc1192fecd9514b2dcb36ce070f954642c", "filename": "tests/ui/use_self_trait.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05cb0df748dbc14c43dea4d627d68721a52861c6/tests%2Fui%2Fuse_self_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.stderr?ref=05cb0df748dbc14c43dea4d627d68721a52861c6", "patch": "@@ -0,0 +1,94 @@\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:21:18\n+   |\n+LL |     fn refs(p1: &Bad) -> &Bad {\n+   |                  ^^^ help: use the applicable keyword: `Self`\n+   |\n+   = note: `-D clippy::use-self` implied by `-D warnings`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:21:27\n+   |\n+LL |     fn refs(p1: &Bad) -> &Bad {\n+   |                           ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:25:33\n+   |\n+LL |     fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+   |                                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:25:49\n+   |\n+LL |     fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+   |                                                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:29:26\n+   |\n+LL |     fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+   |                          ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:29:39\n+   |\n+LL |     fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+   |                                       ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:33:24\n+   |\n+LL |     fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n+   |                        ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:33:42\n+   |\n+LL |     fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n+   |                                          ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:35:16\n+   |\n+LL |     fn vals(_: Bad) -> Bad {\n+   |                ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:35:24\n+   |\n+LL |     fn vals(_: Bad) -> Bad {\n+   |                        ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:36:9\n+   |\n+LL |         Bad::default()\n+   |         ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:41:19\n+   |\n+LL |     type Output = Bad;\n+   |                   ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:43:23\n+   |\n+LL |     fn mul(self, rhs: Bad) -> Bad {\n+   |                       ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:43:31\n+   |\n+LL |     fn mul(self, rhs: Bad) -> Bad {\n+   |                               ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:50:9\n+   |\n+LL |         Bad\n+   |         ^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 15 previous errors\n+"}]}