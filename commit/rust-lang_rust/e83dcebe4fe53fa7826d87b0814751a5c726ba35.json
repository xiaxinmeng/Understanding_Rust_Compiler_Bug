{"sha": "e83dcebe4fe53fa7826d87b0814751a5c726ba35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4M2RjZWJlNGZlNTNmYTc4MjZkODdiMDgxNDc1MWE1YzcyNmJhMzU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-06-04T20:39:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-04T20:39:41Z"}, "message": "Rollup merge of #61523 - Nemo157:hide-gen-future, r=cramertj\n\nHide gen_future API from documentation\n\nThis is internal rustc only API which should never be used outside code created by the current `async` transform, if it is used then the panic messages don't make sense as they're written from the perspective of that meaning there is a bug in the `async` transform (e.g. #61482).", "tree": {"sha": "e80b507146879e65d4355e2d14461fc36223ff8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e80b507146879e65d4355e2d14461fc36223ff8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e83dcebe4fe53fa7826d87b0814751a5c726ba35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc9tcNCRBK7hj4Ov3rIwAAdHIIAGf1QT1CIwFgP17gnjg4f8EE\nYsgDN3pE7yder7a8vIz9La5z4C8xwieyp3mMTtlRe2W2FGc8bWnbVybsLMnRFxjU\nW0U2aIz5ZAtmsDPp48N9nAKpCLZqfMy59GGCaYR1vf8ovnPvguZcBbv7w01rZWQU\nwvvWTwSkMql+gU3e+Tk3cKmpehYsLqOQKBP4pzVakS8qzXxPECziAXIr2aQoI/CT\ntJMOQ8piZua2D5iyQMX0PXIHKpsGwqmnXd4QabMwVx9X+DgJvw7dX5XIV+Hpl4o/\njH6LZbvU8AxFSn/RNOMG4VzXLvTl6AtxIPXGX6e54vG72C45wj/ANMyi3b2zKRc=\n=xEnB\n-----END PGP SIGNATURE-----\n", "payload": "tree e80b507146879e65d4355e2d14461fc36223ff8f\nparent 46344122d12975d64f14fa18e2a2b263895c1176\nparent 7980bc4bbc5f76b75264019dd18bff1da41a71e0\nauthor Pietro Albini <pietro@pietroalbini.org> 1559680781 +0200\ncommitter GitHub <noreply@github.com> 1559680781 +0200\n\nRollup merge of #61523 - Nemo157:hide-gen-future, r=cramertj\n\nHide gen_future API from documentation\n\nThis is internal rustc only API which should never be used outside code created by the current `async` transform, if it is used then the panic messages don't make sense as they're written from the perspective of that meaning there is a bug in the `async` transform (e.g. #61482).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e83dcebe4fe53fa7826d87b0814751a5c726ba35", "html_url": "https://github.com/rust-lang/rust/commit/e83dcebe4fe53fa7826d87b0814751a5c726ba35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e83dcebe4fe53fa7826d87b0814751a5c726ba35/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46344122d12975d64f14fa18e2a2b263895c1176", "url": "https://api.github.com/repos/rust-lang/rust/commits/46344122d12975d64f14fa18e2a2b263895c1176", "html_url": "https://github.com/rust-lang/rust/commit/46344122d12975d64f14fa18e2a2b263895c1176"}, {"sha": "7980bc4bbc5f76b75264019dd18bff1da41a71e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7980bc4bbc5f76b75264019dd18bff1da41a71e0", "html_url": "https://github.com/rust-lang/rust/commit/7980bc4bbc5f76b75264019dd18bff1da41a71e0"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "0406549ff07910d079c8dd9d49cd77c772d30a1c", "filename": "src/libstd/future.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e83dcebe4fe53fa7826d87b0814751a5c726ba35/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e83dcebe4fe53fa7826d87b0814751a5c726ba35/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=e83dcebe4fe53fa7826d87b0814751a5c726ba35", "patch": "@@ -16,12 +16,14 @@ pub use core::future::*;\n ///\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n pub fn from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {\n     GenFuture(x)\n }\n \n /// A wrapper around generators used to implement `Future` for `async`/`await` code.\n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n struct GenFuture<T: Generator<Yield = ()>>(T);\n@@ -30,6 +32,7 @@ struct GenFuture<T: Generator<Yield = ()>>(T);\n // self-referential borrows in the underlying generator.\n impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n \n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     type Output = T::Return;\n@@ -57,6 +60,7 @@ impl Drop for SetOnDrop {\n     }\n }\n \n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n /// Sets the thread-local task context used by async/await futures.\n pub fn set_task_context<F, R>(cx: &mut Context<'_>, f: F) -> R\n@@ -74,6 +78,7 @@ where\n     f()\n }\n \n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n /// Retrieves the thread-local task context used by async/await futures.\n ///\n@@ -105,6 +110,7 @@ where\n     unsafe { f(cx_ptr.as_mut()) }\n }\n \n+#[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n /// Polls a future in the current thread-local task waker.\n pub fn poll_with_tls_context<F>(f: Pin<&mut F>) -> Poll<F::Output>"}]}