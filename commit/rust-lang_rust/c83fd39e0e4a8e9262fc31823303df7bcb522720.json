{"sha": "c83fd39e0e4a8e9262fc31823303df7bcb522720", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4M2ZkMzllMGU0YThlOTI2MmZjMzE4MjMzMDNkZjdiY2I1MjI3MjA=", "commit": {"author": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-06-24T21:42:52Z"}, "committer": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-06-25T10:31:39Z"}, "message": "Resolve conflicts produced by GenericArgs\n\nAddresses the move/zip of Lifetimes and Types vectors from hir::PathParameters into the args vector of GenericArgs", "tree": {"sha": "3748229b5f5efa8d14934f8d15cbfc9691f303e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3748229b5f5efa8d14934f8d15cbfc9691f303e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c83fd39e0e4a8e9262fc31823303df7bcb522720", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE8rLaPclMjvVJWRZHnxhOEWSDEYEFAlswxZYACgkQnxhOEWSD\nEYFTIA/9HLD6t6RxyQN1HL7BqaHsPQF7YSKRyse5ak+v/1p/0R/A7bJTrJC+tFaj\nEmGYAjarKLMnaAn1OJZrZmqe32FXbDMROPqYo2WzhEo2RPRLIKSUdh/UwUWP7XN9\n4tbb8yLoIkh1Gb21NG4PE4rXBGIXpIAayNT1xOCunp/6nlvtt84ARUD58YXDhmsm\nfCGyoDqDnFbFwugVWPvzD3EPa8N/gI6fQFWUZ86z0QSPYP8octsKjBbRGUDr9o5w\n5hBlLmbG/GfK/BTA7I/Owco5v/8QRcnepyhkvuvMRN4jE8vyZdvWjfHTQQFk31hU\nUGdPONVPOaRpCXNYQwat6psSSCL2WLoacF1bU0bCfrL9dNm9eNqc7cNldM0foQ8G\nc+7vPuxKTu0CVXBrC+LH6HD5sWajbDSiiT9D66hiKxPiiUJwud4bCrFZ4l9lgXMz\npE1KYWpkT957uPRhdNJXB7d3R9eiRjUtXViackGBM3lJ2dYLCOLxPFyjVWf10O3O\nFvCNEXgRS6yynBz0egugoYc0KaW9uI85qMmWWzabDYBcr5hOCSCeFNMze4XFnVxB\n8mPx78+5qy1QdIdnCLyKqOzrXWdaDN6FFHfVJGGzgUXScug7ahs9wvYPAd2R8jyH\noIce00yOUeJyucJesrmIBzjPROsPXYr9nY0tZikizJMSZVnihUQ=\n=J8ot\n-----END PGP SIGNATURE-----", "payload": "tree 3748229b5f5efa8d14934f8d15cbfc9691f303e5\nparent d9a80d2f84458dda53d31f627b27aa9b9b2bc39b\nauthor flip1995 <9744647+flip1995@users.noreply.github.com> 1529876572 +0200\ncommitter flip1995 <9744647+flip1995@users.noreply.github.com> 1529922699 +0200\n\nResolve conflicts produced by GenericArgs\n\nAddresses the move/zip of Lifetimes and Types vectors from hir::PathParameters into the args vector of GenericArgs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c83fd39e0e4a8e9262fc31823303df7bcb522720", "html_url": "https://github.com/rust-lang/rust/commit/c83fd39e0e4a8e9262fc31823303df7bcb522720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c83fd39e0e4a8e9262fc31823303df7bcb522720/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a80d2f84458dda53d31f627b27aa9b9b2bc39b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a80d2f84458dda53d31f627b27aa9b9b2bc39b", "html_url": "https://github.com/rust-lang/rust/commit/d9a80d2f84458dda53d31f627b27aa9b9b2bc39b"}], "stats": {"total": 115, "additions": 86, "deletions": 29}, "files": [{"sha": "7e22fda4006c2ce159f776b14641ffde24ead43c", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=c83fd39e0e4a8e9262fc31823303df7bcb522720", "patch": "@@ -119,12 +119,15 @@ fn check_fn_inner<'a, 'tcx>(\n                         .expect(\"a path must have at least one segment\")\n                         .args;\n                     if let Some(ref params) = *params {\n-                        for bound in &params.lifetimes {\n-                            if bound.name.name() != \"'static\" && !bound.is_elided() {\n-                                return;\n-                            }\n-                            bounds_lts.push(bound);\n-                        }\n+                        params.args.iter().for_each(|param| match param {\n+                            GenericArg::Lifetime(bound) => {\n+                                if bound.name.name() != \"'static\" && !bound.is_elided() {\n+                                    return;\n+                                }\n+                                bounds_lts.push(bound);\n+                            },\n+                            _ => {},\n+                        });\n                     }\n                 }\n             }\n@@ -233,9 +236,9 @@ fn could_use_elision<'a, 'tcx: 'a>(\n fn allowed_lts_from(named_generics: &[GenericParam]) -> HashSet<RefLt> {\n     let mut allowed_lts = HashSet::new();\n     for par in named_generics.iter() {\n-        if let GenericParam::Lifetime(ref lt) = *par {\n-            if lt.bounds.is_empty() {\n-                allowed_lts.insert(RefLt::Named(lt.lifetime.name.name()));\n+        if let GenericParamKind::Lifetime { .. } = par.kind {\n+            if par.bounds.is_empty() {\n+                allowed_lts.insert(RefLt::Named(par.name.name()));\n             }\n         }\n     }\n@@ -299,7 +302,11 @@ impl<'v, 't> RefVisitor<'v, 't> {\n \n     fn collect_anonymous_lifetimes(&mut self, qpath: &QPath, ty: &Ty) {\n         if let Some(ref last_path_segment) = last_path_segment(qpath).args {\n-            if !last_path_segment.parenthesized && last_path_segment.lifetimes.is_empty() {\n+            if !last_path_segment.parenthesized\n+                && !last_path_segment.args.iter().any(|arg| match arg {\n+                    GenericArg::Lifetime(_) => true,\n+                    GenericArg::Type(_) => false,\n+                }) {\n                 let hir_id = self.cx.tcx.hir.node_to_hir_id(ty.id);\n                 match self.cx.tables.qpath_def(qpath, hir_id) {\n                     Def::TyAlias(def_id) | Def::Struct(def_id) => {\n@@ -431,9 +438,11 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n }\n \n fn report_extra_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, func: &'tcx FnDecl, generics: &'tcx Generics) {\n-    let hs = generics\n-        .lifetimes()\n-        .map(|lt| (lt.lifetime.name.name(), lt.lifetime.span))\n+    let hs = generics.params.iter()\n+        .filter_map(|par| match par.kind {\n+            GenericParamKind::Lifetime { .. } => Some((par.name.name(), par.span)),\n+            _ => None,\n+        })\n         .collect();\n     let mut checker = LifetimeChecker { map: hs };\n "}, {"sha": "b5e1780fd0ca062cb917845907859cefdf139920", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=c83fd39e0e4a8e9262fc31823303df7bcb522720", "patch": "@@ -2101,8 +2101,14 @@ fn is_as_ref_or_mut_trait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Gener\n                                 if params.parenthesized {\n                                     false\n                                 } else {\n-                                    params.types.len() == 1\n-                                        && (is_self_ty(&params.types[0]) || is_ty(&*params.types[0], self_ty))\n+                                    // FIXME(flip1995): messy, improve if there is a better option\n+                                    // in the compiler\n+                                    let types: Vec<_> = params.args.iter().filter_map(|arg| match arg {\n+                                        hir::GenericArg::Type(ty) => Some(ty),\n+                                        _ => None,\n+                                    }).collect();\n+                                    types.len() == 1\n+                                        && (is_self_ty(&types[0]) || is_ty(&*types[0], self_ty))\n                                 }\n                             } else {\n                                 false"}, {"sha": "03a45bc18472f7fd12662b555cb9aa7102aec557", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=c83fd39e0e4a8e9262fc31823303df7bcb522720", "patch": "@@ -219,7 +219,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                             if let Some(elem_ty) = path.segments.iter()\n                                 .find(|seg| seg.name == \"Vec\")\n                                 .and_then(|ps| ps.args.as_ref())\n-                                .map(|params| &params.types[0]);\n+                                .map(|params| params.args.iter().find_map(|arg| match arg {\n+                                    GenericArg::Type(ty) => Some(ty),\n+                                    GenericArg::Lifetime(_) => None,\n+                                }).unwrap());\n                             then {\n                                 let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n                                 db.span_suggestion(input.span,"}, {"sha": "78a07eddd4e2f89c17f4d4bca59bb831535f22c4", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=c83fd39e0e4a8e9262fc31823303df7bcb522720", "patch": "@@ -161,9 +161,14 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n                 if_chain! {\n                     if let TyPath(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).node;\n                     if let Some(&PathSegment{args: Some(ref parameters), ..}) = path.segments.last();\n-                    if parameters.types.len() == 1;\n                     then {\n-                        ty_snippet = snippet_opt(cx, parameters.types[0].span);\n+                        let types: Vec<_> = parameters.args.iter().filter_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty),\n+                            _ => None,\n+                        }).collect();\n+                        if types.len() == 1 {\n+                            ty_snippet = snippet_opt(cx, types[0].span);\n+                        }\n                     }\n                 };\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_owned()\")]) {\n@@ -220,7 +225,8 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n                     if let [ref bx] = *pp.segments;\n                     if let Some(ref params) = bx.args;\n                     if !params.parenthesized;\n-                    if let [ref inner] = *params.types;\n+                    if let [ref inner] = *params.args;\n+                    if let GenericArg::Type(inner) = inner;\n                     then {\n                         let replacement = snippet_opt(cx, inner.span);\n                         if let Some(r) = replacement {"}, {"sha": "c2e981979a18d34aa4f6dd9439741d03912fada9", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=c83fd39e0e4a8e9262fc31823303df7bcb522720", "patch": "@@ -457,7 +457,10 @@ fn get_type_snippet(cx: &LateContext, path: &QPath, to_ref_ty: Ty) -> String {\n     if_chain! {\n         if let Some(ref params) = seg.args;\n         if !params.parenthesized;\n-        if let Some(to_ty) = params.types.get(1);\n+        if let Some(to_ty) = params.args.iter().filter_map(|arg| match arg {\n+            GenericArg::Type(ty) => Some(ty),\n+            GenericArg::Lifetime(_) => None,\n+        }).nth(1);\n         if let TyRptr(_, ref to_ty) = to_ty.node;\n         then {\n             return snippet(cx, to_ty.ty.span, &to_ref_ty.to_string()).to_string();"}, {"sha": "ee5611a50a140969d77305eb7d51621654fe9283", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c83fd39e0e4a8e9262fc31823303df7bcb522720", "patch": "@@ -182,7 +182,10 @@ fn match_type_parameter(cx: &LateContext, qpath: &QPath, path: &[&str]) -> bool\n     if_chain! {\n         if let Some(ref params) = last.args;\n         if !params.parenthesized;\n-        if let Some(ty) = params.types.get(0);\n+        if let Some(ty) = params.args.iter().find_map(|arg| match arg {\n+            GenericArg::Type(ty) => Some(ty),\n+            GenericArg::Lifetime(_) => None,\n+        });\n         if let TyPath(ref qpath) = ty.node;\n         if let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(ty.id)));\n         if match_def_path(cx.tcx, did, path);\n@@ -246,22 +249,33 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                     for ty in p.segments.iter().flat_map(|seg| {\n                         seg.args\n                             .as_ref()\n-                            .map_or_else(|| [].iter(), |params| params.types.iter())\n+                            .map_or_else(|| [].iter(), |params| params.args.iter())\n+                            .filter_map(|arg| match arg {\n+                                GenericArg::Type(ty) => Some(ty),\n+                                GenericArg::Lifetime(_) => None,\n+                            })\n                     }) {\n                         check_ty(cx, ty, is_local);\n                     }\n                 },\n                 QPath::Resolved(None, ref p) => for ty in p.segments.iter().flat_map(|seg| {\n                     seg.args\n                         .as_ref()\n-                        .map_or_else(|| [].iter(), |params| params.types.iter())\n+                        .map_or_else(|| [].iter(), |params| params.args.iter())\n+                        .filter_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty),\n+                            GenericArg::Lifetime(_) => None,\n+                        })\n                 }) {\n                     check_ty(cx, ty, is_local);\n                 },\n                 QPath::TypeRelative(ref ty, ref seg) => {\n                     check_ty(cx, ty, is_local);\n                     if let Some(ref params) = seg.args {\n-                        for ty in params.types.iter() {\n+                        for ty in params.args.iter().filter_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty),\n+                            GenericArg::Lifetime(_) => None,\n+                        }) {\n                             check_ty(cx, ty, is_local);\n                         }\n                     }\n@@ -290,7 +304,8 @@ fn check_ty_rptr(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool, lt: &Lifeti\n                 if let [ref bx] = *path.segments;\n                 if let Some(ref params) = bx.args;\n                 if !params.parenthesized;\n-                if let [ref inner] = *params.types;\n+                if let [ref inner] = *params.args;\n+                if let GenericArg::Type(inner) = inner;\n                 then {\n                     if is_any_trait(inner) {\n                         // Ignore `Box<Any>` types, see #1884 for details.\n@@ -1862,7 +1877,11 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n     /// Checks that `ty` is a target type without a BuildHasher.\n     fn new<'a>(cx: &LateContext<'a, 'tcx>, hir_ty: &hir::Ty) -> Option<Self> {\n         if let TyPath(QPath::Resolved(None, ref path)) = hir_ty.node {\n-            let params = &path.segments.last().as_ref()?.args.as_ref()?.types;\n+            let params: Vec<_> = path.segments.last().as_ref()?.args.as_ref()?\n+                .args.iter().filter_map(|arg| match arg {\n+                    GenericArg::Type(ty) => Some(ty),\n+                    GenericArg::Lifetime(_) => None,\n+                }).collect();\n             let params_len = params.len();\n \n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);"}, {"sha": "170db6ceabb6b804e072842c84b17a0fded517bb", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=c83fd39e0e4a8e9262fc31823303df7bcb522720", "patch": "@@ -60,7 +60,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n                 let should_check = if let Some(ref params) = *parameters {\n-                    !params.parenthesized && params.lifetimes.len() == 0\n+                    !params.parenthesized && !params.args.iter().any(|arg| match arg {\n+                        GenericArg::Lifetime(_) => true,\n+                        GenericArg::Type(_) => false,\n+                    })\n                 } else {\n                     true\n                 };"}, {"sha": "ee6b004dc6cbd4b158cb105e8c8d40e946718708", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=c83fd39e0e4a8e9262fc31823303df7bcb522720", "patch": "@@ -152,6 +152,14 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         left.ident.name == right.ident.name && self.eq_expr(&left.expr, &right.expr)\n     }\n \n+    fn eq_generic_arg(&mut self, left: &GenericArg, right: &GenericArg) -> bool {\n+        match (left, right) {\n+            (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => self.eq_lifetime(l_lt, r_lt),\n+            (GenericArg::Type(l_ty), GenericArg::Type(r_ty)) => self.eq_ty(l_ty, r_ty),\n+            _ => false,\n+        }\n+    }\n+\n     fn eq_lifetime(&mut self, left: &Lifetime, right: &Lifetime) -> bool {\n         left.name == right.name\n     }\n@@ -203,8 +211,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n \n     fn eq_path_parameters(&mut self, left: &GenericArgs, right: &GenericArgs) -> bool {\n         if !(left.parenthesized || right.parenthesized) {\n-            over(&left.lifetimes, &right.lifetimes, |l, r| self.eq_lifetime(l, r))\n-                && over(&left.types, &right.types, |l, r| self.eq_ty(l, r))\n+            over(&left.args, &right.args, |l, r| self.eq_generic_arg(l, r)) // FIXME(flip1995): may not work\n                 && over(&left.bindings, &right.bindings, |l, r| self.eq_type_binding(l, r))\n         } else if left.parenthesized && right.parenthesized {\n             over(left.inputs(), right.inputs(), |l, r| self.eq_ty(l, r))"}, {"sha": "eb2197a5891e7afcad58c9eb041117d661596c31", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83fd39e0e4a8e9262fc31823303df7bcb522720/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=c83fd39e0e4a8e9262fc31823303df7bcb522720", "patch": "@@ -100,6 +100,7 @@ impl<'a> Sugg<'a> {\n             ast::ExprKind::ObsoleteInPlace(..) |\n             ast::ExprKind::Unary(..) |\n             ast::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n+            ast::ExprKind::Async(..) |\n             ast::ExprKind::Block(..) |\n             ast::ExprKind::Break(..) |\n             ast::ExprKind::Call(..) |"}]}