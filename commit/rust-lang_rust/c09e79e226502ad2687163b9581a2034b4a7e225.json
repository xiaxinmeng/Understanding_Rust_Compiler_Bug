{"sha": "c09e79e226502ad2687163b9581a2034b4a7e225", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOWU3OWUyMjY1MDJhZDI2ODcxNjNiOTU4MWEyMDM0YjRhN2UyMjU=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-24T15:59:35Z"}, "committer": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-31T17:22:35Z"}, "message": "Lint within internal macros without a suggestion", "tree": {"sha": "c6711872a6d9cacaa6b58e4de97385afcf52fc9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6711872a6d9cacaa6b58e4de97385afcf52fc9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09e79e226502ad2687163b9581a2034b4a7e225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09e79e226502ad2687163b9581a2034b4a7e225", "html_url": "https://github.com/rust-lang/rust/commit/c09e79e226502ad2687163b9581a2034b4a7e225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09e79e226502ad2687163b9581a2034b4a7e225/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa66f760c30419ee97af38990476c39ecf38a883", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa66f760c30419ee97af38990476c39ecf38a883", "html_url": "https://github.com/rust-lang/rust/commit/aa66f760c30419ee97af38990476c39ecf38a883"}], "stats": {"total": 101, "additions": 57, "deletions": 44}, "files": [{"sha": "17a088e09a082e95c45d4e331eb900e75cc90926", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c09e79e226502ad2687163b9581a2034b4a7e225/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09e79e226502ad2687163b9581a2034b4a7e225/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=c09e79e226502ad2687163b9581a2034b4a7e225", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::{\n-    in_macro, match_def_path, match_qpath, paths, snippet_with_applicability, span_help_and_lint, span_lint_and_sugg,\n+    in_macro, match_def_path, match_qpath, paths, snippet, snippet_with_applicability, span_help_and_lint,\n+    span_lint_and_sugg, span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n@@ -166,24 +167,28 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr, expr_span: Sp\n fn check_replace_with_default(cx: &LateContext<'_, '_>, src: &Expr, dest: &Expr, expr_span: Span) {\n     if let ExprKind::Call(ref repl_func, _) = src.kind {\n         if_chain! {\n-            if !in_macro(expr_span) && !in_external_macro(cx.tcx.sess, expr_span);\n+            if !in_external_macro(cx.tcx.sess, expr_span);\n             if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n             if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n             if match_def_path(cx, repl_def_id, &paths::DEFAULT_TRAIT_METHOD);\n             then {\n-                let mut applicability = Applicability::MachineApplicable;\n-\n-                span_lint_and_sugg(\n+                span_lint_and_then(\n                     cx,\n                     MEM_REPLACE_WITH_DEFAULT,\n                     expr_span,\n                     \"replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\",\n-                    \"consider using\",\n-                    format!(\n-                        \"std::mem::take({})\",\n-                        snippet_with_applicability(cx, dest.span, \"\", &mut applicability)\n-                    ),\n-                    applicability,\n+                    |db| {\n+                        if !in_macro(expr_span) {\n+                            let suggestion = format!(\"std::mem::take({})\", snippet(cx, dest.span, \"\"));\n+\n+                            db.span_suggestion(\n+                                expr_span,\n+                                \"consider using\",\n+                                suggestion,\n+                                Applicability::MachineApplicable\n+                            );\n+                        }\n+                    }\n                 );\n             }\n         }"}, {"sha": "58657b934fbfeb08e74e5d80569bff16afe4a9cc", "filename": "tests/ui/mem_replace.fixed", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=c09e79e226502ad2687163b9581a2034b4a7e225", "patch": "@@ -8,7 +8,6 @@\n // except according to those terms.\n \n // run-rustfix\n-// aux-build:macro_rules.rs\n #![allow(unused_imports)]\n #![warn(\n     clippy::all,\n@@ -17,17 +16,8 @@\n     clippy::mem_replace_with_default\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n use std::mem;\n \n-macro_rules! take {\n-    ($s:expr) => {\n-        std::mem::replace($s, Default::default())\n-    };\n-}\n-\n fn replace_option_with_none() {\n     let mut an_option = Some(1);\n     let _ = an_option.take();\n@@ -41,10 +31,6 @@ fn replace_with_default() {\n     let s = &mut String::from(\"foo\");\n     let _ = std::mem::take(s);\n     let _ = std::mem::take(s);\n-\n-    // dont lint within macros\n-    take!(s);\n-    take_external!(s);\n }\n \n fn main() {"}, {"sha": "eac0ce586a088836dff42cec25bd9b7d736b0607", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=c09e79e226502ad2687163b9581a2034b4a7e225", "patch": "@@ -8,7 +8,6 @@\n // except according to those terms.\n \n // run-rustfix\n-// aux-build:macro_rules.rs\n #![allow(unused_imports)]\n #![warn(\n     clippy::all,\n@@ -17,17 +16,8 @@\n     clippy::mem_replace_with_default\n )]\n \n-#[macro_use]\n-extern crate macro_rules;\n-\n use std::mem;\n \n-macro_rules! take {\n-    ($s:expr) => {\n-        std::mem::replace($s, Default::default())\n-    };\n-}\n-\n fn replace_option_with_none() {\n     let mut an_option = Some(1);\n     let _ = mem::replace(&mut an_option, None);\n@@ -41,10 +31,6 @@ fn replace_with_default() {\n     let s = &mut String::from(\"foo\");\n     let _ = std::mem::replace(s, String::default());\n     let _ = std::mem::replace(s, Default::default());\n-\n-    // dont lint within macros\n-    take!(s);\n-    take_external!(s);\n }\n \n fn main() {"}, {"sha": "d5dc66873b2fe4d00ee9d329983bd5028f13cc94", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=c09e79e226502ad2687163b9581a2034b4a7e225", "patch": "@@ -1,33 +1,33 @@\n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:33:13\n+  --> $DIR/mem_replace.rs:23:13\n    |\n LL |     let _ = mem::replace(&mut an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n    |\n    = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:35:13\n+  --> $DIR/mem_replace.rs:25:13\n    |\n LL |     let _ = mem::replace(an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:40:13\n+  --> $DIR/mem_replace.rs:30:13\n    |\n LL |     let _ = std::mem::replace(&mut s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:42:13\n+  --> $DIR/mem_replace.rs:32:13\n    |\n LL |     let _ = std::mem::replace(s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:43:13\n+  --> $DIR/mem_replace.rs:33:13\n    |\n LL |     let _ = std::mem::replace(s, Default::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`"}, {"sha": "e67e01737ba6d68b28b719117cadd266b2c5eb17", "filename": "tests/ui/mem_replace_macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.rs?ref=c09e79e226502ad2687163b9581a2034b4a7e225", "patch": "@@ -0,0 +1,23 @@\n+// aux-build:macro_rules.rs\n+#![warn(clippy::mem_replace_with_default)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+use std::mem;\n+\n+macro_rules! take {\n+    ($s:expr) => {\n+        std::mem::replace($s, Default::default())\n+    };\n+}\n+\n+fn replace_with_default() {\n+    let s = &mut String::from(\"foo\");\n+    take!(s);\n+    take_external!(s);\n+}\n+\n+fn main() {\n+    replace_with_default();\n+}"}, {"sha": "d7830331b29f34c9b383d0143ecfa6f845e9be6e", "filename": "tests/ui/mem_replace_macro.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09e79e226502ad2687163b9581a2034b4a7e225/tests%2Fui%2Fmem_replace_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.stderr?ref=c09e79e226502ad2687163b9581a2034b4a7e225", "patch": "@@ -0,0 +1,13 @@\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace_macro.rs:11:9\n+   |\n+LL |         std::mem::replace($s, Default::default())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     take!(s);\n+   |     --------- in this macro invocation\n+   |\n+   = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}