{"sha": "da093d713ad43ed918a667e48f62ad285d9924d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDkzZDcxM2FkNDNlZDkxOGE2NjdlNDhmNjJhZDI4NWQ5OTI0ZDE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-15T11:20:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-15T11:20:42Z"}, "message": "Remove `label` in dirty/clean annotations.", "tree": {"sha": "a12a176573179599df264866128ccc7e7f5f1d3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a12a176573179599df264866128ccc7e7f5f1d3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da093d713ad43ed918a667e48f62ad285d9924d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da093d713ad43ed918a667e48f62ad285d9924d1", "html_url": "https://github.com/rust-lang/rust/commit/da093d713ad43ed918a667e48f62ad285d9924d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da093d713ad43ed918a667e48f62ad285d9924d1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1ff91f439bc09f566da211c6449821b4e949279", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ff91f439bc09f566da211c6449821b4e949279", "html_url": "https://github.com/rust-lang/rust/commit/e1ff91f439bc09f566da211c6449821b4e949279"}], "stats": {"total": 1151, "additions": 452, "deletions": 699}, "files": [{"sha": "b4963e2e46014de26f9c00882c682602bb0af121", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -30,7 +30,6 @@ use std::iter::FromIterator;\n use std::vec::Vec;\n \n const EXCEPT: Symbol = sym::except;\n-const LABEL: Symbol = sym::label;\n const CFG: Symbol = sym::cfg;\n \n // Base and Extra labels to build up the labels\n@@ -122,16 +121,6 @@ struct Assertion {\n     dirty: Labels,\n }\n \n-impl Assertion {\n-    fn from_clean_labels(labels: Labels) -> Assertion {\n-        Assertion { clean: labels, dirty: Labels::default() }\n-    }\n-\n-    fn from_dirty_labels(labels: Labels) -> Assertion {\n-        Assertion { clean: Labels::default(), dirty: labels }\n-    }\n-}\n-\n pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n     if !tcx.sess.opts.debugging_opts.query_dep_graph {\n         return;\n@@ -181,15 +170,7 @@ impl DirtyCleanVisitor<'tcx> {\n             // skip: not the correct `cfg=`\n             return None;\n         }\n-        let assertion = if let Some(labels) = self.labels(attr) {\n-            if is_clean {\n-                Assertion::from_clean_labels(labels)\n-            } else {\n-                Assertion::from_dirty_labels(labels)\n-            }\n-        } else {\n-            self.assertion_auto(item_id, attr, is_clean)\n-        };\n+        let assertion = self.assertion_auto(item_id, attr, is_clean);\n         Some(assertion)\n     }\n \n@@ -218,16 +199,6 @@ impl DirtyCleanVisitor<'tcx> {\n         }\n     }\n \n-    fn labels(&self, attr: &Attribute) -> Option<Labels> {\n-        for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-            if item.has_name(LABEL) {\n-                let value = expect_associated_value(self.tcx, &item);\n-                return Some(self.resolve_labels(&item, value));\n-            }\n-        }\n-        None\n-    }\n-\n     /// `except=` attribute value\n     fn except(&self, attr: &Attribute) -> Labels {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n@@ -437,30 +408,19 @@ impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n /// Given a `#[rustc_dirty]` or `#[rustc_clean]` attribute, scan\n /// for a `cfg=\"foo\"` attribute and check whether we have a cfg\n /// flag called `foo`.\n-///\n-/// Also make sure that the `label` and `except` fields do not\n-/// both exist.\n fn check_config(tcx: TyCtxt<'_>, attr: &Attribute) -> bool {\n     debug!(\"check_config(attr={:?})\", attr);\n     let config = &tcx.sess.parse_sess.config;\n     debug!(\"check_config: config={:?}\", config);\n-    let (mut cfg, mut except, mut label) = (None, false, false);\n+    let mut cfg = None;\n     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n         if item.has_name(CFG) {\n             let value = expect_associated_value(tcx, &item);\n             debug!(\"check_config: searching for cfg {:?}\", value);\n             cfg = Some(config.contains(&(value, None)));\n+        } else if !item.has_name(EXCEPT) {\n+            tcx.sess.span_err(attr.span, &format!(\"unknown item `{}`\", item.name_or_empty()));\n         }\n-        if item.has_name(LABEL) {\n-            label = true;\n-        }\n-        if item.has_name(EXCEPT) {\n-            except = true;\n-        }\n-    }\n-\n-    if label && except {\n-        tcx.sess.span_fatal(attr.span, \"must specify only one of: `label`, `except`\");\n     }\n \n     match cfg {"}, {"sha": "ea1ea1943e97cc749f5b421efcc044485ec8ecba", "filename": "src/test/incremental/add_private_fn_at_krate_root_cc/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -24,7 +24,7 @@ extern crate point;\n pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -35,7 +35,7 @@ pub mod fn_calls_methods_in_same_impl {\n pub mod fn_calls_free_fn {\n     use point::{self, Point};\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         point::distance_squared(&x);\n@@ -46,7 +46,7 @@ pub mod fn_calls_free_fn {\n pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -56,7 +56,7 @@ pub mod fn_make_struct {\n pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -66,7 +66,7 @@ pub mod fn_read_field {\n pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "084ed232a55e882458e7c0b14501ddac722f6a9d", "filename": "src/test/incremental/callee_caller_cross_crate/b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fcallee_caller_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fcallee_caller_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcallee_caller_cross_crate%2Fb.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -6,12 +6,12 @@\n \n extern crate a;\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"rpass2\")]\n pub fn call_function0() {\n     a::function0(77);\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub fn call_function1() {\n     a::function1(77);\n }"}, {"sha": "3308ea56222f535ea45c64eaf971e59433fec6b3", "filename": "src/test/incremental/change_add_field/struct_point.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -70,7 +70,7 @@ pub mod point {\n pub mod fn_with_type_in_sig {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"typeck,fn_sig,optimized_mir\", cfg=\"cfail2\")]\n     pub fn boop(p: Option<&Point>) -> f32 {\n         p.map(|p| p.total()).unwrap_or(0.0)\n     }\n@@ -86,7 +86,7 @@ pub mod fn_with_type_in_sig {\n pub mod call_fn_with_type_in_sig {\n     use fn_with_type_in_sig;\n \n-    #[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"typeck,optimized_mir\", cfg=\"cfail2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_sig::boop(None)\n     }\n@@ -102,7 +102,7 @@ pub mod call_fn_with_type_in_sig {\n pub mod fn_with_type_in_body {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"typeck,optimized_mir\", cfg=\"cfail2\")]\n     pub fn boop() -> f32 {\n         Point::origin().total()\n     }\n@@ -115,7 +115,7 @@ pub mod fn_with_type_in_body {\n pub mod call_fn_with_type_in_body {\n     use fn_with_type_in_body;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_body::boop()\n     }\n@@ -125,7 +125,7 @@ pub mod call_fn_with_type_in_body {\n pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"typeck,fn_sig,optimized_mir\", cfg=\"cfail2\")]\n     pub fn make_origin(p: Point) -> Point {\n         Point { ..p }\n     }\n@@ -135,7 +135,7 @@ pub mod fn_make_struct {\n pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"typeck,fn_sig,optimized_mir\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -145,7 +145,7 @@ pub mod fn_read_field {\n pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"typeck,fn_sig,optimized_mir\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "1791c089cfa8bb6341c54d0beafcb907ecc44eb9", "filename": "src/test/incremental/change_private_fn/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -51,7 +51,7 @@ pub mod point {\n pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -62,7 +62,7 @@ pub mod fn_calls_methods_in_same_impl {\n pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -73,7 +73,7 @@ pub mod fn_calls_methods_in_another_impl {\n pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -83,7 +83,7 @@ pub mod fn_make_struct {\n pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -93,7 +93,7 @@ pub mod fn_read_field {\n pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "1c27ec3a3f7edafff235eb91e1733be08a73ba33", "filename": "src/test/incremental/change_private_fn_cc/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -23,7 +23,7 @@ extern crate point;\n pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -34,7 +34,7 @@ pub mod fn_calls_methods_in_same_impl {\n pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -45,7 +45,7 @@ pub mod fn_calls_methods_in_another_impl {\n pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -55,7 +55,7 @@ pub mod fn_make_struct {\n pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -65,7 +65,7 @@ pub mod fn_read_field {\n pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "cf43e4757cb81f415baba94764d66fc4f4565a1f", "filename": "src/test/incremental/change_private_impl_method/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -51,7 +51,7 @@ pub mod point {\n pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -62,7 +62,7 @@ pub mod fn_calls_methods_in_same_impl {\n pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -73,7 +73,7 @@ pub mod fn_calls_methods_in_another_impl {\n pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -83,7 +83,7 @@ pub mod fn_make_struct {\n pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -93,7 +93,7 @@ pub mod fn_read_field {\n pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "9fe8b5df93a25b901589ec085268824149e59561", "filename": "src/test/incremental/change_private_impl_method_cc/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -24,7 +24,7 @@ extern crate point;\n pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -35,7 +35,7 @@ pub mod fn_calls_methods_in_same_impl {\n pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn dirty() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n@@ -46,7 +46,7 @@ pub mod fn_calls_methods_in_another_impl {\n pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -56,7 +56,7 @@ pub mod fn_make_struct {\n pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -66,7 +66,7 @@ pub mod fn_read_field {\n pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "1b87b18fcd428f91d7999c6160f1b2b0faf9dcee", "filename": "src/test/incremental/change_pub_inherent_method_body/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -42,7 +42,7 @@ pub mod point {\n pub mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_origin();\n@@ -53,7 +53,7 @@ pub mod fn_calls_changed_method {\n pub mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n@@ -64,7 +64,7 @@ pub mod fn_calls_another_method {\n pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -74,7 +74,7 @@ pub mod fn_make_struct {\n pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -84,7 +84,7 @@ pub mod fn_read_field {\n pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "0a672956768a8075650af9ab99de9cdc4cfeb816", "filename": "src/test/incremental/change_pub_inherent_method_sig/struct_point.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -52,7 +52,7 @@ pub mod point {\n pub mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"typeck,optimized_mir\", cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_point(None);\n@@ -63,7 +63,7 @@ pub mod fn_calls_changed_method {\n pub mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n@@ -74,7 +74,7 @@ pub mod fn_calls_another_method {\n pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n@@ -84,7 +84,7 @@ pub mod fn_make_struct {\n pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n@@ -94,7 +94,7 @@ pub mod fn_read_field {\n pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }"}, {"sha": "ca476b4d2db1eaeaa976f06076e58ca71e8c31c1", "filename": "src/test/incremental/crate_hash_reorder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -7,9 +7,9 @@\n \n // Check that reordering otherwise identical items is not considered a\n // change at all.\n-#[rustc_clean(label = \"hir_crate\", cfg = \"rpass2\")]\n+#[rustc_clean(cfg = \"rpass2\")]\n // But removing an item, naturally, is.\n-#[rustc_dirty(label = \"hir_crate\", cfg = \"rpass3\")]\n+#[rustc_clean(except=\"hir_crate\", cfg = \"rpass3\")]\n #[cfg(rpass1)]\n pub struct X {\n     pub x: u32,"}, {"sha": "5f7832828a9d4d54d6683db0ae1b34aaf0529dd1", "filename": "src/test/incremental/dirty_clean.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fdirty_clean.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -25,15 +25,21 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_dirty(except=\"typeck\", cfg=\"cfail2\")]\n     pub fn y() {\n-        //[cfail2]~^ ERROR `typeck(y)` should be clean but is not\n+        //[cfail2]~^ ERROR `hir_owner(y)` should be dirty but is not\n+        //[cfail2]~| ERROR `hir_owner_nodes(y)` should be dirty but is not\n+        //[cfail2]~| ERROR `generics_of(y)` should be dirty but is not\n+        //[cfail2]~| ERROR `predicates_of(y)` should be dirty but is not\n+        //[cfail2]~| ERROR `type_of(y)` should be dirty but is not\n+        //[cfail2]~| ERROR `fn_sig(y)` should be dirty but is not\n+        //[cfail2]~| ERROR `typeck(y)` should be clean but is not\n         x::x();\n     }\n }\n \n mod z {\n-    #[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"typeck\", cfg=\"cfail2\")]\n     pub fn z() {\n         //[cfail2]~^ ERROR `typeck(z)` should be dirty but is not\n     }"}, {"sha": "d4201400f0fc697152f103ef29dbb3301fca7f8c", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -55,12 +55,8 @@ mod change_callee_indirectly_function {\n     #[cfg(not(cfail1))]\n     use super::callee2 as callee;\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-\n-\n+    #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_callee_indirectly_function() {\n         callee(1, 2)\n     }"}, {"sha": "49ee7a9cac091b2453deb87b33b0c4c99b8c406c", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -20,10 +20,8 @@ fn change_simple_index(slice: &[u32]) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n fn change_simple_index(slice: &[u32]) -> u32 {\n     slice[4]\n }\n@@ -37,10 +35,8 @@ fn change_lower_bound(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n fn change_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[2..5]\n }\n@@ -54,10 +50,8 @@ fn change_upper_bound(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n fn change_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n@@ -71,10 +65,8 @@ fn add_lower_bound(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n fn add_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..4]\n }\n@@ -88,10 +80,8 @@ fn add_upper_bound(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n fn add_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n@@ -105,10 +95,8 @@ fn change_mutability(slice: &mut [u32]) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n fn change_mutability(slice: &mut [u32]) -> u32 {\n     (&slice[3..5])[0]\n }\n@@ -122,10 +110,8 @@ fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n     &slice[3..=7]\n }"}, {"sha": "0ce5aeaaf5028b43c79a28e48a245f7f8aec408c", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 42, "deletions": 210, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -24,33 +24,17 @@\n pub struct LayoutPacked;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[repr(packed)]\n pub struct LayoutPacked;\n \n #[cfg(cfail1)]\n struct LayoutC;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[repr(C)]\n struct LayoutC;\n \n@@ -61,16 +45,8 @@ struct LayoutC;\n struct TupleStructFieldType(i32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct TupleStructFieldType(\n@@ -84,16 +60,8 @@ struct TupleStructFieldType(\n struct TupleStructAddField(i32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct TupleStructAddField(\n     i32,\n     u32\n@@ -106,16 +74,8 @@ struct TupleStructAddField(\n struct TupleStructFieldVisibility(char);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct TupleStructFieldVisibility(pub char);\n \n \n@@ -125,16 +85,8 @@ struct TupleStructFieldVisibility(pub char);\n struct RecordStructFieldType { x: f32 }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct RecordStructFieldType {\n@@ -148,16 +100,8 @@ struct RecordStructFieldType {\n struct RecordStructFieldName { x: f32 }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct RecordStructFieldName { y: f32 }\n \n \n@@ -167,16 +111,8 @@ struct RecordStructFieldName { y: f32 }\n struct RecordStructAddField { x: f32 }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct RecordStructAddField {\n     x: f32,\n     y: () }\n@@ -188,16 +124,8 @@ struct RecordStructAddField {\n struct RecordStructFieldVisibility { x: f32 }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct RecordStructFieldVisibility {\n     pub x: f32\n }\n@@ -209,16 +137,8 @@ struct RecordStructFieldVisibility {\n struct AddLifetimeParameter<'a>(&'a f32, &'a f64);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of,generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct AddLifetimeParameter<'a, 'b>(&'a f32, &'b f64);\n \n \n@@ -228,16 +148,8 @@ struct AddLifetimeParameter<'a, 'b>(&'a f32, &'b f64);\n struct AddLifetimeParameterBound<'a, 'b>(&'a f32, &'b f64);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct AddLifetimeParameterBound<'a, 'b: 'a>(\n     &'a f32,\n     &'b f64\n@@ -247,16 +159,8 @@ struct AddLifetimeParameterBound<'a, 'b: 'a>(\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n     &'a f32,\n     &'b f64)\n@@ -269,16 +173,8 @@ struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n struct AddTypeParameter<T1>(T1, T1);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,type_of,generics_of,predicates_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct AddTypeParameter<T1, T2>(\n      // The field contains the parent's Generics, so it's dirty even though its\n      // type hasn't changed.\n@@ -293,16 +189,8 @@ struct AddTypeParameter<T1, T2>(\n struct AddTypeParameterBound<T>(T);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct AddTypeParameterBound<T: Send>(\n     T\n );\n@@ -312,16 +200,8 @@ struct AddTypeParameterBound<T: Send>(\n struct AddTypeParameterBoundWhereClause<T>(T);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n struct AddTypeParameterBoundWhereClause<T>(\n     T\n ) where T: Sync;\n@@ -332,16 +212,8 @@ struct AddTypeParameterBoundWhereClause<T>(\n // fingerprint is stable (i.e., that there are no random influences like memory\n // addresses taken into account by the hashing algorithm).\n // Note: there is no #[cfg(...)], so this is ALWAYS compiled\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n pub struct EmptyStruct;\n \n \n@@ -351,16 +223,8 @@ pub struct EmptyStruct;\n struct Visibility;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n pub struct Visibility;\n \n struct ReferencedType1;\n@@ -373,16 +237,8 @@ mod tuple_struct_change_field_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     struct TupleStruct(\n         FieldType\n     );\n@@ -396,16 +252,8 @@ mod record_struct_change_field_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     struct RecordStruct {\n         _x: FieldType\n     }\n@@ -424,16 +272,8 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     struct Struct<T: Trait>(T);\n }\n \n@@ -444,15 +284,7 @@ mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,predicates_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     struct Struct<T>(T) where T : Trait;\n }"}, {"sha": "73d8364849673de6167581aae10c5ff877257468", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 208, "deletions": 212, "changes": 420, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -25,8 +25,8 @@\n trait TraitVisibility { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n pub trait TraitVisibility { }\n \n \n@@ -36,8 +36,8 @@ pub trait TraitVisibility { }\n trait TraitUnsafety { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n unsafe trait TraitUnsafety { }\n \n \n@@ -48,8 +48,8 @@ trait TraitAddMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n pub trait TraitAddMethod {\n     fn method();\n }\n@@ -63,8 +63,8 @@ trait TraitChangeMethodName {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodName {\n     fn methodChanged();\n }\n@@ -78,11 +78,11 @@ trait TraitAddReturnType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddReturnType {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method() -> u32;\n }\n \n@@ -95,11 +95,11 @@ trait TraitChangeReturnType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeReturnType {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method() -> u64;\n }\n \n@@ -112,11 +112,11 @@ trait TraitAddParameterToMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddParameterToMethod {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method(a: u32);\n }\n \n@@ -130,18 +130,16 @@ trait TraitChangeMethodParameterName {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterName {\n     // FIXME(#38501) This should preferably always be clean.\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method(b: u32);\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn with_default(y: i32) {}\n }\n \n@@ -154,11 +152,11 @@ trait TraitChangeMethodParameterType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterType {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method(a: i64);\n }\n \n@@ -171,11 +169,11 @@ trait TraitChangeMethodParameterTypeRef {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParameterTypeRef {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method(a: &mut i32);\n }\n \n@@ -188,11 +186,11 @@ trait TraitChangeMethodParametersOrder {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeMethodParametersOrder {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method(b: i64, a: i32);\n }\n \n@@ -205,11 +203,11 @@ trait TraitAddMethodAutoImplementation {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddMethodAutoImplementation {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method() { }\n }\n \n@@ -223,8 +221,8 @@ trait TraitChangeOrderOfMethods {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeOrderOfMethods {\n     fn method1();\n     fn method0();\n@@ -239,11 +237,11 @@ trait TraitChangeModeSelfRefToMut {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfRefToMut {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method(&mut self);\n }\n \n@@ -255,13 +253,11 @@ trait TraitChangeModeSelfOwnToMut: Sized {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToMut: Sized {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method(mut self) {}\n }\n \n@@ -273,11 +269,11 @@ trait TraitChangeModeSelfOwnToRef {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToRef {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method(&self);\n }\n \n@@ -290,11 +286,11 @@ trait TraitAddUnsafeModifier {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddUnsafeModifier {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     unsafe fn method();\n }\n \n@@ -307,11 +303,11 @@ trait TraitAddExternModifier {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddExternModifier {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     extern \"C\" fn method();\n }\n \n@@ -324,11 +320,11 @@ trait TraitChangeExternCToRustIntrinsic {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeExternCToRustIntrinsic {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     extern \"stdcall\" fn method();\n }\n \n@@ -341,11 +337,11 @@ trait TraitAddTypeParameterToMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddTypeParameterToMethod {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method<T>();\n }\n \n@@ -358,11 +354,11 @@ trait TraitAddLifetimeParameterToMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeParameterToMethod {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method<'a>();\n }\n \n@@ -379,11 +375,11 @@ trait TraitAddTraitBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToMethodTypeParameter {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method<T: ReferencedTrait0>();\n }\n \n@@ -396,11 +392,11 @@ trait TraitAddBuiltinBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToMethodTypeParameter {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method<T: Sized>();\n }\n \n@@ -413,11 +409,11 @@ trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method<'a, 'b: 'a>(a: &'a u32, b: &'b u32);\n }\n \n@@ -430,11 +426,11 @@ trait TraitAddSecondTraitBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToMethodTypeParameter {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method<T: ReferencedTrait0 + ReferencedTrait1>();\n }\n \n@@ -447,11 +443,11 @@ trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method<T: Sized + Sync>();\n }\n \n@@ -464,11 +460,11 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method<'a, 'b, 'c: 'a + 'b>(a: &'a u32, b: &'b u32, c: &'c u32);\n }\n \n@@ -478,14 +474,14 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n #[cfg(cfail1)]\n trait TraitAddAssociatedType {\n \n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method();\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddAssociatedType {\n     type Associated;\n \n@@ -506,11 +502,11 @@ trait TraitAddTraitBoundToAssociatedType {\n // Apparently the type bound contributes to the predicates of the trait, but\n // does not change the associated item itself.\n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToAssociatedType {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     type Associated: ReferencedTrait0;\n \n     fn method();\n@@ -527,11 +523,11 @@ trait TraitAddLifetimeBoundToAssociatedType<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     type Associated: 'a;\n \n     fn method();\n@@ -548,11 +544,11 @@ trait TraitAddDefaultToAssociatedType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddDefaultToAssociatedType {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     type Associated = ReferenceType0;\n \n     fn method();\n@@ -567,8 +563,8 @@ trait TraitAddAssociatedConstant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddAssociatedConstant {\n     const Value: u32;\n \n@@ -586,15 +582,15 @@ trait TraitAddInitializerToAssociatedConstant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddInitializerToAssociatedConstant {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     const Value: u32 = 1;\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method();\n }\n \n@@ -609,15 +605,15 @@ trait TraitChangeTypeOfAssociatedConstant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitChangeTypeOfAssociatedConstant {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     const Value: f64;\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method();\n }\n \n@@ -628,8 +624,8 @@ trait TraitChangeTypeOfAssociatedConstant {\n trait TraitAddSuperTrait { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSuperTrait : ReferencedTrait0 { }\n \n \n@@ -639,8 +635,8 @@ trait TraitAddSuperTrait : ReferencedTrait0 { }\n trait TraitAddBuiltiBound { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltiBound : Send { }\n \n \n@@ -650,8 +646,8 @@ trait TraitAddBuiltiBound : Send { }\n trait TraitAddStaticLifetimeBound { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddStaticLifetimeBound : 'static { }\n \n \n@@ -661,16 +657,16 @@ trait TraitAddStaticLifetimeBound : 'static { }\n trait TraitAddTraitAsSecondBound : ReferencedTrait0 { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddTraitAsSecondBound : ReferencedTrait0 + ReferencedTrait1 { }\n \n #[cfg(cfail1)]\n trait TraitAddTraitAsSecondBoundFromBuiltin : Send { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddTraitAsSecondBoundFromBuiltin : Send + ReferencedTrait0 { }\n \n \n@@ -680,16 +676,16 @@ trait TraitAddTraitAsSecondBoundFromBuiltin : Send + ReferencedTrait0 { }\n trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 + Send { }\n \n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin : Send { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin: Send + Copy { }\n \n \n@@ -699,16 +695,16 @@ trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin: Send + Copy { }\n trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 + 'static { }\n \n #[cfg(cfail1)]\n trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send + 'static { }\n \n \n@@ -718,8 +714,8 @@ trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send + 'static { }\n trait TraitAddTypeParameterToTrait { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddTypeParameterToTrait<T> { }\n \n \n@@ -729,8 +725,8 @@ trait TraitAddTypeParameterToTrait<T> { }\n trait TraitAddLifetimeParameterToTrait { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeParameterToTrait<'a> { }\n \n \n@@ -740,8 +736,8 @@ trait TraitAddLifetimeParameterToTrait<'a> { }\n trait TraitAddTraitBoundToTypeParameterOfTrait<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n \n@@ -751,8 +747,8 @@ trait TraitAddTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T: 'a> { }\n \n \n@@ -762,8 +758,8 @@ trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T: 'a> { }\n trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a, 'b> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b> { }\n \n \n@@ -773,8 +769,8 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b> { }\n trait TraitAddBuiltinBoundToTypeParameterOfTrait<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n \n@@ -784,8 +780,8 @@ trait TraitAddBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n trait TraitAddSecondTypeParameterToTrait<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTypeParameterToTrait<T, S> { }\n \n \n@@ -795,8 +791,8 @@ trait TraitAddSecondTypeParameterToTrait<T, S> { }\n trait TraitAddSecondLifetimeParameterToTrait<'a> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeParameterToTrait<'a, 'b> { }\n \n \n@@ -806,8 +802,8 @@ trait TraitAddSecondLifetimeParameterToTrait<'a, 'b> { }\n trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0 + ReferencedTrait1> { }\n \n \n@@ -817,8 +813,8 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0 + Refer\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a + 'b> { }\n \n \n@@ -828,8 +824,8 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a + 'b> { }\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b, 'c> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b + 'c, 'b, 'c> { }\n \n \n@@ -839,8 +835,8 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b + 'c, 'b, 'c>\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send + Sync> { }\n \n \n@@ -855,8 +851,8 @@ struct ReferenceType1 {}\n trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0 { }\n \n \n@@ -866,8 +862,8 @@ trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0\n trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> where T: 'a { }\n \n \n@@ -877,8 +873,8 @@ trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> where T: 'a { }\n trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> where 'a: 'b { }\n \n \n@@ -888,8 +884,8 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> where 'a: 'b\n trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n \n@@ -899,8 +895,8 @@ trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0 { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T>\n     where T: ReferencedTrait0 + ReferencedTrait1 { }\n \n@@ -911,8 +907,8 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T>\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a + 'b { }\n \n \n@@ -922,8 +918,8 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T:\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b + 'c { }\n \n \n@@ -933,8 +929,8 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> whe\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send + Sync { }\n \n \n@@ -945,11 +941,11 @@ mod change_return_type_of_method_indirectly_use {\n     #[cfg(not(cfail1))]\n     use super::ReferenceType1 as ReturnType;\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     trait TraitChangeReturnType {\n-        #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-        #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+        #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+        #[rustc_clean(cfg=\"cfail3\")]\n         fn method() -> ReturnType;\n     }\n }\n@@ -963,11 +959,11 @@ mod change_method_parameter_type_indirectly_by_use {\n     #[cfg(not(cfail1))]\n     use super::ReferenceType1 as ArgType;\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     trait TraitChangeArgType {\n-        #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-        #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+        #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+        #[rustc_clean(cfg=\"cfail3\")]\n         fn method(a: ArgType);\n     }\n }\n@@ -981,11 +977,11 @@ mod change_method_parameter_type_bound_indirectly_by_use {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameter {\n-        #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-        #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+        #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+        #[rustc_clean(cfg=\"cfail3\")]\n         fn method<T: Bound>(a: T);\n     }\n }\n@@ -1000,11 +996,11 @@ mod change_method_parameter_type_bound_indirectly_by_use_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameterWhere {\n-        #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-        #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+        #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+        #[rustc_clean(cfg=\"cfail3\")]\n         fn method<T>(a: T) where T: Bound;\n     }\n }\n@@ -1018,8 +1014,8 @@ mod change_method_type_parameter_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     trait TraitChangeTraitBound<T: Bound> {\n         fn method(a: T);\n     }\n@@ -1035,8 +1031,8 @@ mod change_method_type_parameter_bound_indirectly_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     trait TraitChangeTraitBoundWhere<T> where T: Bound {\n         fn method(a: T);\n     }"}, {"sha": "4cbbb0e6858a8a154bf7522e94b59fe81cd56624", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 74, "deletions": 78, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -30,18 +30,18 @@ impl ChangeMethodNameTrait for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n pub trait ChangeMethodNameTrait {\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method_name2();\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl ChangeMethodNameTrait for Foo {\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method_name2() { }\n }\n \n@@ -59,13 +59,11 @@ impl ChangeMethodBodyTrait for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl ChangeMethodBodyTrait for Foo {\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method_name() {\n         ()\n     }\n@@ -86,13 +84,11 @@ impl ChangeMethodBodyTraitInlined for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl ChangeMethodBodyTraitInlined for Foo {\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner_nodes\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n     fn method_name() {\n         panic!()\n@@ -117,11 +113,11 @@ pub trait ChangeMethodSelfnessTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl ChangeMethodSelfnessTrait for Foo {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method_name(&self) {\n         ()\n     }\n@@ -145,11 +141,11 @@ pub trait RemoveMethodSelfnessTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl RemoveMethodSelfnessTrait for Foo {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method_name() {}\n }\n \n@@ -171,11 +167,11 @@ pub trait ChangeMethodSelfmutnessTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl ChangeMethodSelfmutnessTrait for Foo {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method_name(&mut self) {}\n }\n \n@@ -197,8 +193,8 @@ pub trait ChangeItemKindTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl ChangeItemKindTrait for Foo {\n     type name = ();\n }\n@@ -223,8 +219,8 @@ pub trait RemoveItemTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl RemoveItemTrait for Foo {\n     type TypeName = ();\n }\n@@ -248,8 +244,8 @@ pub trait AddItemTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl AddItemTrait for Foo {\n     type TypeName = ();\n     fn method_name() { }\n@@ -268,17 +264,17 @@ impl ChangeHasValueTrait for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n pub trait ChangeHasValueTrait {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method_name() { }\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl ChangeHasValueTrait for Foo {\n     fn method_name() { }\n }\n@@ -295,11 +291,11 @@ impl AddDefaultTrait for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl AddDefaultTrait for Foo {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     default fn method_name() { }\n }\n \n@@ -321,11 +317,11 @@ pub trait AddArgumentTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl AddArgumentTrait for Foo {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method_name(&self, _x: u32) { }\n }\n \n@@ -347,11 +343,11 @@ pub trait ChangeArgumentTypeTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl ChangeArgumentTypeTrait for Foo {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn method_name(&self, _x: char) { }\n }\n \n@@ -370,11 +366,11 @@ impl AddTypeParameterToImpl<u32> for Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl<T> AddTypeParameterToImpl<T> for Bar<T> {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn id(t: T) -> T { t }\n }\n \n@@ -391,11 +387,11 @@ impl ChangeSelfTypeOfImpl for u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl ChangeSelfTypeOfImpl for u64 {\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -412,11 +408,11 @@ impl<T> AddLifetimeBoundToImplParameter for T {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl<T: 'static> AddLifetimeBoundToImplParameter for T {\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -433,11 +429,11 @@ impl<T> AddTraitBoundToImplParameter for T {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl<T: Clone> AddTraitBoundToImplParameter for T {\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -454,11 +450,11 @@ impl AddNoMangleToMethod for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl AddNoMangleToMethod for Foo {\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[no_mangle]\n     fn add_no_mangle_to_method(&self) { }\n }\n@@ -475,11 +471,11 @@ impl MakeMethodInline for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n impl MakeMethodInline for Foo {\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n     fn make_method_inline(&self) -> u8 { 0 }\n }"}, {"sha": "d5ec6e92bc0e1b21f072ad660e0e9ac985dbfca0", "filename": "src/test/incremental/hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhello_world.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -21,7 +21,7 @@ mod x {\n mod y {\n     use x;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+    #[rustc_clean(cfg=\"rpass2\")]\n     pub fn yyyy() {\n         x::xxxx();\n     }\n@@ -30,7 +30,7 @@ mod y {\n mod z {\n     use y;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+    #[rustc_clean(cfg=\"rpass2\")]\n     pub fn z() {\n         y::yyyy();\n     }"}, {"sha": "b31f60e972bf0bd2fefc74e8051919cacaac1972", "filename": "src/test/incremental/hygiene/auxiliary/cached_hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhygiene%2Fauxiliary%2Fcached_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fhygiene%2Fauxiliary%2Fcached_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhygiene%2Fauxiliary%2Fcached_hygiene.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -13,7 +13,7 @@ macro_rules! first_macro {\n     }\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,typeck,optimized_mir,promoted_mir\", cfg=\"rpass2\")]\n #[inline(always)]\n pub fn changed_fn() {\n     // This will cause additional hygiene to be generate,"}, {"sha": "5566506c039d3257bf6bf306800fd74a56b5a3fc", "filename": "src/test/incremental/ich_method_call_trait_scope.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -26,16 +26,12 @@ mod mod3 {\n     #[cfg(rpass2)]\n     use Trait2;\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n-    #[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+    #[rustc_clean(except=\"typeck\", cfg=\"rpass2\")]\n     fn bar() {\n         ().method();\n     }\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+    #[rustc_clean(cfg=\"rpass2\")]\n     fn baz() {\n         22; // no method call, traits in scope don't matter\n     }"}, {"sha": "379c09575edfbc2ca6a5492b0e730ca0ecdae65f", "filename": "src/test/incremental/ich_nested_items.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_nested_items.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -8,14 +8,12 @@\n #![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n \n-#[rustc_clean(label = \"hir_owner\", cfg = \"cfail2\")]\n-#[rustc_dirty(label = \"hir_owner_nodes\", cfg = \"cfail2\")]\n+#[rustc_clean(except = \"hir_owner_nodes\", cfg = \"cfail2\")]\n pub fn foo() {\n     #[cfg(cfail1)]\n     pub fn baz() {} // order is different...\n \n-    #[rustc_clean(label = \"hir_owner\", cfg = \"cfail2\")]\n-    #[rustc_clean(label = \"hir_owner_nodes\", cfg = \"cfail2\")]\n+    #[rustc_clean(cfg = \"cfail2\")]\n     pub fn bar() {} // but that doesn't matter.\n \n     #[cfg(cfail2)]"}, {"sha": "e6ab6bcebae09fcf3383955ce583e726f5fc842a", "filename": "src/test/incremental/ich_resolve_results.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_resolve_results.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -29,18 +29,14 @@ mod mod3 {\n     #[cfg(rpass3)]\n     use mod2::Foo;\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass3\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass3\")]\n+    #[rustc_clean(cfg=\"rpass2\")]\n+    #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"rpass3\")]\n     fn in_expr() {\n         Foo(0);\n     }\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass3\")]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass3\")]\n+    #[rustc_clean(cfg=\"rpass2\")]\n+    #[rustc_clean(except=\"hir_owner_nodes,typeck\", cfg=\"rpass3\")]\n     fn in_type() {\n         test::<Foo>();\n     }"}, {"sha": "639cfc918cb463ff9e40dd90e687146301cbc0fa", "filename": "src/test/incremental/rlib_cross_crate/b.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Frlib_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Frlib_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Frlib_cross_crate%2Fb.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -12,15 +12,15 @@\n \n extern crate a;\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"typeck\", cfg=\"rpass3\")]\n+#[rustc_clean(except=\"typeck,optimized_mir\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass3\")]\n pub fn use_X() -> u32 {\n     let x: a::X = 22;\n     x as u32\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"typeck\", cfg=\"rpass3\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass3\")]\n pub fn use_Y() {\n     let x: a::Y = 'c';\n }"}, {"sha": "e5f04e5dc5818b58d005b8e11bc1d9b6e925cb14", "filename": "src/test/incremental/source_loc_macros.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -7,26 +7,22 @@\n \n #![feature(rustc_attrs)]\n \n-#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n fn line_same() {\n     let _ = line!();\n }\n \n-#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n fn col_same() {\n     let _ = column!();\n }\n \n-#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n fn file_same() {\n     let _ = file!();\n }\n \n-#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"rpass2\")]\n fn line_different() {\n     #[cfg(rpass1)]\n     {\n@@ -38,8 +34,7 @@ fn line_different() {\n     }\n }\n \n-#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"rpass2\")]\n fn col_different() {\n     #[cfg(rpass1)]\n     {"}, {"sha": "70e2ea06b7ec4b4d0fb1ba06acba9fd4185fca5d", "filename": "src/test/incremental/span_hash_stable/auxiliary/sub1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub1.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -1,4 +1,4 @@\n-#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub struct SomeType {\n     pub x: u32,\n     pub y: i64,"}, {"sha": "1167cdb0a82a29882a512653bd66a980270fb731", "filename": "src/test/incremental/span_hash_stable/auxiliary/sub2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub2.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -1,4 +1,4 @@\n-#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub struct SomeOtherType {\n     pub a: i32,\n     pub b: u64,"}, {"sha": "8506636e22b7be65c7e67063d820e5411b7c6181", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -12,6 +12,5 @@\n pub fn main() {}\n \n #[cfg(rpass2)]\n-#[rustc_dirty(label=\"hir_owner\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,optimized_mir\", cfg=\"rpass2\")]\n pub fn main() {}"}, {"sha": "a29b61ab153dcb6b4039de0eeb6e7e6a0195d251", "filename": "src/test/incremental/spans_significant_w_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n }\n \n #[cfg(rpass2)]\n-#[rustc_dirty(label=\"optimized_mir\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"hir_owner,hir_owner_nodes,optimized_mir\", cfg=\"rpass2\")]\n pub fn main() {\n     let _ = 0u8 + 1;\n }"}, {"sha": "866f51d759ec4d5338b1d66cff40f479ca55f51b", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -18,8 +18,7 @@ pub mod x {\n     }\n \n     #[cfg(cfail2)]\n-    #[rustc_dirty(label=\"hir_owner_nodes\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"optimized_mir\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"hir_owner,hir_owner_nodes,optimized_mir,promoted_mir\", cfg=\"cfail2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n     }\n@@ -28,8 +27,7 @@ pub mod x {\n pub mod y {\n     use x;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"optimized_mir\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn y() {\n         x::x();\n     }\n@@ -38,8 +36,7 @@ pub mod y {\n pub mod z {\n     use y;\n \n-    #[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"optimized_mir\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     pub fn z() {\n         y::y();\n     }"}, {"sha": "720854f160528063d20203c1dc16f55f80752cfe", "filename": "src/test/incremental/struct_add_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_add_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_add_field.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -21,17 +21,17 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"fn_sig,typeck\", cfg=\"rpass2\")]\n pub fn use_X(x: X) -> u32 {\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"rpass2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "7498d0305e0b11667a0a9829e78fc531ef50bf64", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -24,21 +24,21 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"cfail2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     //[cfail2]~^ ERROR struct `X` has no field named `x`\n     x.x as u32\n     //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"cfail2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n     //[cfail2]~^ ERROR no field `x` on type `X`\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "37d2fba9901ad1051c2e9b206ca9c49ba6025aa4", "filename": "src/test/incremental/struct_change_field_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -24,19 +24,19 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"rpass2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"rpass2\")]\n pub fn use_EmbedX(x: EmbedX) -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "c78207bcb1a1f18c98ca3227a2d448872a79a071", "filename": "src/test/incremental/struct_change_field_type_cross_crate/b.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_type_cross_crate%2Fb.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -8,18 +8,18 @@ extern crate a;\n \n use a::*;\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"rpass2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"rpass2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "de30c818cfe05ebab4fa35ed61a6c0f1213eb307", "filename": "src/test/incremental/struct_change_nothing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_nothing.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -24,19 +24,19 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub fn use_EmbedX(x: EmbedX) -> u32 {\n     let x: X = X { x: 22 };\n     x.x as u32\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "b97a87e096292c4fb65b32948b707b8df3d2effa", "filename": "src/test/incremental/struct_remove_field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_remove_field.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -25,17 +25,17 @@ pub struct Y {\n     pub y: char\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"typeck,fn_sig\", cfg=\"rpass2\")]\n pub fn use_X(x: X) -> u32 {\n     x.x as u32\n }\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"rpass2\")]\n pub fn use_EmbedX(embed: EmbedX) -> u32 {\n     embed.x.x as u32\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n pub fn use_Y() {\n     let x: Y = Y { y: 'c' };\n }"}, {"sha": "f6c2526841c24a2f7db3473500f0e73aff793f78", "filename": "src/test/incremental/type_alias_cross_crate/b.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Ftype_alias_cross_crate%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Ftype_alias_cross_crate%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Ftype_alias_cross_crate%2Fb.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -6,15 +6,15 @@\n \n extern crate a;\n \n-#[rustc_dirty(label=\"typeck\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"typeck\", cfg=\"rpass3\")]\n+#[rustc_clean(except=\"typeck\", cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass3\")]\n pub fn use_X() -> u32 {\n     let x: a::X = 22;\n     x as u32\n }\n \n-#[rustc_clean(label=\"typeck\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"typeck\", cfg=\"rpass3\")]\n+#[rustc_clean(cfg=\"rpass2\")]\n+#[rustc_clean(cfg=\"rpass3\")]\n pub fn use_Y() {\n     let x: a::Y = 'c';\n }"}, {"sha": "d913342f8254511e64d38b9f02c50779b606999a", "filename": "src/test/incremental/unchecked_dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da093d713ad43ed918a667e48f62ad285d9924d1/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs?ref=da093d713ad43ed918a667e48f62ad285d9924d1", "patch": "@@ -10,25 +10,25 @@\n \n fn main() {\n \n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n     //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     {\n         // empty block\n     }\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     {\n         // empty block\n     }\n }\n \n struct _Struct {\n-    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(except=\"hir_owner\", cfg=\"cfail2\")]\n     //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     _field1: i32,\n \n-    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n     //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     _field2: i32,\n }"}]}