{"sha": "9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliM2RmZDhlYTk4N2NlMWQ0YjVjY2JjYjRjMDMyZjYwYTcxYzhjZmI=", "commit": {"author": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-04-24T07:19:11Z"}, "committer": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-05-25T20:09:02Z"}, "message": "core: Make pointer offset methods \"const fn\"\n\nSigned-off-by: Joe Richey <joerichey@google.com>", "tree": {"sha": "8991eba30b12f651a895ad36de14230c1c9547de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8991eba30b12f651a895ad36de14230c1c9547de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb", "html_url": "https://github.com/rust-lang/rust/commit/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb/comments", "author": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08df3116e92356311735be2d0c588d461e16fbff", "url": "https://api.github.com/repos/rust-lang/rust/commits/08df3116e92356311735be2d0c588d461e16fbff", "html_url": "https://github.com/rust-lang/rust/commit/08df3116e92356311735be2d0c588d461e16fbff"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "2d97fecf8a76673130965c2c52dae989bb0b1ff9", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb", "patch": "@@ -1314,6 +1314,7 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is\n     /// [`std::pointer::offset`](../../std/primitive.pointer.html#method.offset).\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Calculates the offset from a pointer, potentially wrapping.\n@@ -1331,6 +1332,7 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is\n     /// [`std::pointer::wrapping_offset`](../../std/primitive.pointer.html#method.wrapping_offset).\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with"}, {"sha": "7d21f9a9a66d0479038e91284f0d03fc638e103b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb", "patch": "@@ -85,6 +85,7 @@\n #![feature(const_panic)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n+#![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_result)]\n #![feature(const_slice_from_raw_parts)]"}, {"sha": "835183d171a794877d1167a2a238c1173f6f6e7a", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb", "patch": "@@ -151,8 +151,9 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub unsafe fn offset(self, count: isize) -> *const T\n+    pub const unsafe fn offset(self, count: isize) -> *const T\n     where\n         T: Sized,\n     {\n@@ -210,8 +211,9 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub fn wrapping_offset(self, count: isize) -> *const T\n+    pub const fn wrapping_offset(self, count: isize) -> *const T\n     where\n         T: Sized,\n     {\n@@ -393,8 +395,9 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub unsafe fn add(self, count: usize) -> Self\n+    pub const unsafe fn add(self, count: usize) -> Self\n     where\n         T: Sized,\n     {\n@@ -455,8 +458,9 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub unsafe fn sub(self, count: usize) -> Self\n+    pub const unsafe fn sub(self, count: usize) -> Self\n     where\n         T: Sized,\n     {\n@@ -511,8 +515,9 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub fn wrapping_add(self, count: usize) -> Self\n+    pub const fn wrapping_add(self, count: usize) -> Self\n     where\n         T: Sized,\n     {\n@@ -567,8 +572,9 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub fn wrapping_sub(self, count: usize) -> Self\n+    pub const fn wrapping_sub(self, count: usize) -> Self\n     where\n         T: Sized,\n     {"}, {"sha": "40b5e4e22340e9844ae05862645811a2c110980b", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=9b3dfd8ea987ce1d4b5ccbcb4c032f60a71c8cfb", "patch": "@@ -145,8 +145,9 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub unsafe fn offset(self, count: isize) -> *mut T\n+    pub const unsafe fn offset(self, count: isize) -> *mut T\n     where\n         T: Sized,\n     {\n@@ -203,8 +204,9 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub fn wrapping_offset(self, count: isize) -> *mut T\n+    pub const fn wrapping_offset(self, count: isize) -> *mut T\n     where\n         T: Sized,\n     {\n@@ -439,8 +441,9 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub unsafe fn add(self, count: usize) -> Self\n+    pub const unsafe fn add(self, count: usize) -> Self\n     where\n         T: Sized,\n     {\n@@ -501,8 +504,9 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub unsafe fn sub(self, count: usize) -> Self\n+    pub const unsafe fn sub(self, count: usize) -> Self\n     where\n         T: Sized,\n     {\n@@ -557,8 +561,9 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub fn wrapping_add(self, count: usize) -> Self\n+    pub const fn wrapping_add(self, count: usize) -> Self\n     where\n         T: Sized,\n     {\n@@ -613,8 +618,9 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n-    pub fn wrapping_sub(self, count: usize) -> Self\n+    pub const fn wrapping_sub(self, count: usize) -> Self\n     where\n         T: Sized,\n     {"}]}