{"sha": "d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNjUyZjZjMWRhMjhhZjBjZGMyMmU4MTEyYjdkM2I2Yjc0YWQ5ZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-31T07:02:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-31T07:02:10Z"}, "message": "Auto merge of #52630 - Mark-Simulacrum:rustdoc-cleanup-2, r=QuietMisdreavus\n\nDelete unused code in rustdoc\n\nAlso hid the unused crate exports of rustdoc. This is technically a breaking change but we don't even ship librustdoc in the sysroot so I don't expect breakage.", "tree": {"sha": "83696c72da4fbcf77d2874487e99fb88ce376f31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83696c72da4fbcf77d2874487e99fb88ce376f31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "html_url": "https://github.com/rust-lang/rust/commit/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fbd4a55f739f317fd6b527df49b4c3693aa5d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbd4a55f739f317fd6b527df49b4c3693aa5d00", "html_url": "https://github.com/rust-lang/rust/commit/4fbd4a55f739f317fd6b527df49b4c3693aa5d00"}, {"sha": "620c4fdf53ab4e1a1a4afa890e7fd534ec886ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/620c4fdf53ab4e1a1a4afa890e7fd534ec886ca9", "html_url": "https://github.com/rust-lang/rust/commit/620c4fdf53ab4e1a1a4afa890e7fd534ec886ca9"}], "stats": {"total": 217, "additions": 96, "deletions": 121}, "files": [{"sha": "7454f79ed6bbb6f9b50905f332330c905dcbacbe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "patch": "@@ -425,9 +425,6 @@ impl Item {\n     pub fn is_enum(&self) -> bool {\n         self.type_() == ItemType::Enum\n     }\n-    pub fn is_fn(&self) -> bool {\n-        self.type_() == ItemType::Function\n-    }\n     pub fn is_associated_type(&self) -> bool {\n         self.type_() == ItemType::AssociatedType\n     }\n@@ -2188,10 +2185,6 @@ pub struct FnDecl {\n }\n \n impl FnDecl {\n-    pub fn has_self(&self) -> bool {\n-        self.inputs.values.len() > 0 && self.inputs.values[0].name == \"self\"\n-    }\n-\n     pub fn self_type(&self) -> Option<SelfTy> {\n         self.inputs.values.get(0).and_then(|v| v.to_self())\n     }\n@@ -3547,21 +3540,6 @@ pub struct Path {\n }\n \n impl Path {\n-    pub fn singleton(name: String) -> Path {\n-        Path {\n-            global: false,\n-            def: Def::Err,\n-            segments: vec![PathSegment {\n-                name,\n-                args: GenericArgs::AngleBracketed {\n-                    lifetimes: Vec::new(),\n-                    types: Vec::new(),\n-                    bindings: Vec::new(),\n-                }\n-            }]\n-        }\n-    }\n-\n     pub fn last_name(&self) -> &str {\n         self.segments.last().unwrap().name.as_str()\n     }"}, {"sha": "d6e8f3d938e9301d07c0f99ea72dd301c49082a3", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "patch": "@@ -11,7 +11,6 @@\n //! This module is used to store stuff from Rust's AST in a more convenient\n //! manner (and with prettier names) before cleaning.\n pub use self::StructType::*;\n-pub use self::TypeBound::*;\n \n use syntax::ast;\n use syntax::ast::{Name, NodeId};\n@@ -91,11 +90,6 @@ pub enum StructType {\n     Unit,\n }\n \n-pub enum TypeBound {\n-    RegionBound,\n-    TraitBound(hir::TraitRef)\n-}\n-\n pub struct Struct {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,"}, {"sha": "6d96bc8e3603886bf558aca97f3114d3c496e0e5", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "patch": "@@ -12,19 +12,13 @@ use std::mem;\n \n use clean::*;\n \n-pub enum FoldItem {\n-    Retain(Item),\n-    Strip(Item),\n-    Erase,\n-}\n+pub struct StripItem(pub Item);\n \n-impl FoldItem {\n-    pub fn fold(self) -> Option<Item> {\n-        match self {\n-            FoldItem::Erase => None,\n-            FoldItem::Retain(i) => Some(i),\n-            FoldItem::Strip(item@ Item { inner: StrippedItem(..), .. } ) => Some(item),\n-            FoldItem::Strip(mut i) => {\n+impl StripItem {\n+    pub fn strip(self) -> Option<Item> {\n+        match self.0 {\n+            Item { inner: StrippedItem(..), .. } => Some(self.0),\n+            mut i => {\n                 i.inner = StrippedItem(box i.inner);\n                 Some(i)\n             }"}, {"sha": "065778d8d0725f5a49c5b84db2413d7b25e4c58a", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "patch": "@@ -60,20 +60,6 @@ pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>\n     String::from_utf8_lossy(&out[..]).into_owned()\n }\n \n-/// Highlights `src`, returning the HTML output. Returns only the inner html to\n-/// be inserted into an element. C.f., `render_with_highlighting` which includes\n-/// an enclosing `<pre>` block.\n-pub fn render_inner_with_highlighting(src: &str) -> io::Result<String> {\n-    let sess = parse::ParseSess::new(FilePathMapping::empty());\n-    let fm = sess.codemap().new_filemap(FileName::Custom(\"stdin\".to_string()), src.to_string());\n-\n-    let mut out = Vec::new();\n-    let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm, None), sess.codemap());\n-    classifier.write_source(&mut out)?;\n-\n-    Ok(String::from_utf8_lossy(&out).into_owned())\n-}\n-\n /// Processes a program (nested in the internal `lexer`), classifying strings of\n /// text by highlighting category (`Class`). Calls out to a `Writer` to write\n /// each span of text in sequence."}, {"sha": "041a233617083e4c0ef7c53990a3174c52a407ed", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "patch": "@@ -25,6 +25,7 @@\n #![feature(vec_remove_item)]\n #![feature(entry_and_modify)]\n #![feature(ptr_offset_from)]\n+#![feature(crate_visibility_modifier)]\n \n #![recursion_limit=\"256\"]\n \n@@ -72,28 +73,28 @@ use rustc_target::spec::TargetTriple;\n use rustc::session::config::get_cmd_lint_options;\n \n #[macro_use]\n-pub mod externalfiles;\n+mod externalfiles;\n \n-pub mod clean;\n-pub mod core;\n-pub mod doctree;\n-pub mod fold;\n+mod clean;\n+mod core;\n+mod doctree;\n+mod fold;\n pub mod html {\n-    pub mod highlight;\n-    pub mod escape;\n-    pub mod item_type;\n-    pub mod format;\n-    pub mod layout;\n+    crate mod highlight;\n+    crate mod escape;\n+    crate mod item_type;\n+    crate mod format;\n+    crate mod layout;\n     pub mod markdown;\n-    pub mod render;\n-    pub mod toc;\n+    crate mod render;\n+    crate mod toc;\n }\n-pub mod markdown;\n-pub mod passes;\n-pub mod visit_ast;\n-pub mod visit_lib;\n-pub mod test;\n-pub mod theme;\n+mod markdown;\n+mod passes;\n+mod visit_ast;\n+mod visit_lib;\n+mod test;\n+mod theme;\n \n use clean::AttributesExt;\n \n@@ -140,7 +141,7 @@ fn unstable<F>(name: &'static str, f: F) -> RustcOptGroup\n     RustcOptGroup::unstable(name, f)\n }\n \n-pub fn opts() -> Vec<RustcOptGroup> {\n+fn opts() -> Vec<RustcOptGroup> {\n     vec![\n         stable(\"h\", |o| o.optflag(\"h\", \"help\", \"show this help message\")),\n         stable(\"V\", |o| o.optflag(\"V\", \"version\", \"print rustdoc's version\")),\n@@ -334,15 +335,15 @@ pub fn opts() -> Vec<RustcOptGroup> {\n     ]\n }\n \n-pub fn usage(argv0: &str) {\n+fn usage(argv0: &str) {\n     let mut options = getopts::Options::new();\n     for option in opts() {\n         (option.apply)(&mut options);\n     }\n     println!(\"{}\", options.usage(&format!(\"{} [options] <input>\", argv0)));\n }\n \n-pub fn main_args(args: &[String]) -> isize {\n+fn main_args(args: &[String]) -> isize {\n     let mut options = getopts::Options::new();\n     for option in opts() {\n         (option.apply)(&mut options);"}, {"sha": "aa4acaf75bf31953220f1cddf068eb26aada8365", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 66, "deletions": 44, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "patch": "@@ -15,7 +15,7 @@ use std::mem;\n \n use clean::{self, GetDefId, Item};\n use fold;\n-use fold::FoldItem::Strip;\n+use fold::StripItem;\n \n mod collapse_docs;\n pub use self::collapse_docs::collapse_docs;\n@@ -35,24 +35,44 @@ pub use self::unindent_comments::unindent_comments;\n mod propagate_doc_cfg;\n pub use self::propagate_doc_cfg::propagate_doc_cfg;\n \n-type Pass = (&'static str,                                      // name\n-             fn(clean::Crate) -> clean::Crate,                  // fn\n-             &'static str);                                     // description\n+type Pass = (\n+    &'static str,                     // name\n+    fn(clean::Crate) -> clean::Crate, // fn\n+    &'static str,\n+); // description\n \n pub const PASSES: &'static [Pass] = &[\n-    (\"strip-hidden\", strip_hidden,\n-     \"strips all doc(hidden) items from the output\"),\n-    (\"unindent-comments\", unindent_comments,\n-     \"removes excess indentation on comments in order for markdown to like it\"),\n-    (\"collapse-docs\", collapse_docs,\n-     \"concatenates all document attributes into one document attribute\"),\n-    (\"strip-private\", strip_private,\n-     \"strips all private items from a crate which cannot be seen externally, \\\n-      implies strip-priv-imports\"),\n-    (\"strip-priv-imports\", strip_priv_imports,\n-     \"strips all private import statements (`use`, `extern crate`) from a crate\"),\n-    (\"propagate-doc-cfg\", propagate_doc_cfg,\n-     \"propagates `#[doc(cfg(...))]` to child items\"),\n+    (\n+        \"strip-hidden\",\n+        strip_hidden,\n+        \"strips all doc(hidden) items from the output\",\n+    ),\n+    (\n+        \"unindent-comments\",\n+        unindent_comments,\n+        \"removes excess indentation on comments in order for markdown to like it\",\n+    ),\n+    (\n+        \"collapse-docs\",\n+        collapse_docs,\n+        \"concatenates all document attributes into one document attribute\",\n+    ),\n+    (\n+        \"strip-private\",\n+        strip_private,\n+        \"strips all private items from a crate which cannot be seen externally, \\\n+         implies strip-priv-imports\",\n+    ),\n+    (\n+        \"strip-priv-imports\",\n+        strip_priv_imports,\n+        \"strips all private import statements (`use`, `extern crate`) from a crate\",\n+    ),\n+    (\n+        \"propagate-doc-cfg\",\n+        propagate_doc_cfg,\n+        \"propagates `#[doc(cfg(...))]` to child items\",\n+    ),\n ];\n \n pub const DEFAULT_PASSES: &'static [&'static str] = &[\n@@ -79,15 +99,9 @@ pub enum DefaultPassOption {\n \n pub fn defaults(default_set: DefaultPassOption) -> &'static [&'static str] {\n     match default_set {\n-        DefaultPassOption::Default => {\n-            DEFAULT_PASSES\n-        },\n-        DefaultPassOption::Private => {\n-            DEFAULT_PRIVATE_PASSES\n-        },\n-        DefaultPassOption::None => {\n-            &[]\n-        },\n+        DefaultPassOption::Default => DEFAULT_PASSES,\n+        DefaultPassOption::Private => DEFAULT_PRIVATE_PASSES,\n+        DefaultPassOption::None => &[],\n     }\n }\n \n@@ -110,14 +124,21 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n                 return ret;\n             }\n             // These items can all get re-exported\n-            clean::ExistentialItem(..) |\n-            clean::TypedefItem(..) | clean::StaticItem(..) |\n-            clean::StructItem(..) | clean::EnumItem(..) |\n-            clean::TraitItem(..) | clean::FunctionItem(..) |\n-            clean::VariantItem(..) | clean::MethodItem(..) |\n-            clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) |\n-            clean::ConstantItem(..) | clean::UnionItem(..) |\n-            clean::AssociatedConstItem(..) | clean::ForeignTypeItem => {\n+            clean::ExistentialItem(..)\n+            | clean::TypedefItem(..)\n+            | clean::StaticItem(..)\n+            | clean::StructItem(..)\n+            | clean::EnumItem(..)\n+            | clean::TraitItem(..)\n+            | clean::FunctionItem(..)\n+            | clean::VariantItem(..)\n+            | clean::MethodItem(..)\n+            | clean::ForeignFunctionItem(..)\n+            | clean::ForeignStaticItem(..)\n+            | clean::ConstantItem(..)\n+            | clean::UnionItem(..)\n+            | clean::AssociatedConstItem(..)\n+            | clean::ForeignTypeItem => {\n                 if i.def_id.is_local() {\n                     if !self.access_levels.is_exported(i.def_id) {\n                         return None;\n@@ -127,14 +148,14 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n \n             clean::StructFieldItem(..) => {\n                 if i.visibility != Some(clean::Public) {\n-                    return Strip(i).fold();\n+                    return StripItem(i).strip();\n                 }\n             }\n \n             clean::ModuleItem(..) => {\n                 if i.def_id.is_local() && i.visibility != Some(clean::Public) {\n                     let old = mem::replace(&mut self.update_retained, false);\n-                    let ret = Strip(self.fold_item_recur(i).unwrap()).fold();\n+                    let ret = StripItem(self.fold_item_recur(i).unwrap()).strip();\n                     self.update_retained = old;\n                     return ret;\n                 }\n@@ -167,7 +188,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n             // Struct variant fields have inherited visibility\n             clean::VariantItem(clean::Variant {\n-                kind: clean::VariantKind::Struct(..)\n+                kind: clean::VariantKind::Struct(..),\n             }) => true,\n             _ => false,\n         };\n@@ -192,7 +213,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n \n // This stripper discards all impls which reference stripped items\n struct ImplStripper<'a> {\n-    retained: &'a DefIdSet\n+    retained: &'a DefIdSet,\n }\n \n impl<'a> fold::DocFolder for ImplStripper<'a> {\n@@ -203,9 +224,7 @@ impl<'a> fold::DocFolder for ImplStripper<'a> {\n                 return None;\n             }\n             if let Some(did) = imp.for_.def_id() {\n-                if did.is_local() && !imp.for_.is_generic() &&\n-                    !self.retained.contains(&did)\n-                {\n+                if did.is_local() && !imp.for_.is_generic() && !self.retained.contains(&did) {\n                     return None;\n                 }\n             }\n@@ -233,9 +252,12 @@ struct ImportStripper;\n impl fold::DocFolder for ImportStripper {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         match i.inner {\n-            clean::ExternCrateItem(..) |\n-            clean::ImportItem(..) if i.visibility != Some(clean::Public) => None,\n-            _ => self.fold_item_recur(i)\n+            clean::ExternCrateItem(..) | clean::ImportItem(..)\n+                if i.visibility != Some(clean::Public) =>\n+            {\n+                None\n+            }\n+            _ => self.fold_item_recur(i),\n         }\n     }\n }"}, {"sha": "279c9603703cde34abbb46fc7c921644b1092fbb", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=d2652f6c1da28af0cdc22e8112b7d3b6b74ad9d7", "patch": "@@ -15,7 +15,7 @@ use clean::{self, AttributesExt, NestedAttributesExt};\n use clean::Item;\n use fold;\n use fold::DocFolder;\n-use fold::FoldItem::Strip;\n+use fold::StripItem;\n use passes::ImplStripper;\n \n /// Strip items marked `#[doc(hidden)]`\n@@ -49,7 +49,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n                     // strip things like impl methods but when doing so\n                     // we must not add any items to the `retained` set.\n                     let old = mem::replace(&mut self.update_retained, false);\n-                    let ret = Strip(self.fold_item_recur(i).unwrap()).fold();\n+                    let ret = StripItem(self.fold_item_recur(i).unwrap()).strip();\n                     self.update_retained = old;\n                     return ret;\n                 }"}]}