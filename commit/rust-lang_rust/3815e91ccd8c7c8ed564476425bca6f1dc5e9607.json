{"sha": "3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MTVlOTFjY2Q4YzdjOGVkNTY0NDc2NDI1YmNhNmYxZGM1ZTk2MDc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-21T22:37:34Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-10T21:33:06Z"}, "message": "Attach tokens to `NtMeta` (`ast::AttrItem`)\n\nAn `AttrItem` does not have outer attributes, so we only capture tokens\nwhen parsing a `macro_rules!` matcher", "tree": {"sha": "69467a8cbf355feb3ffed3f14e06e7f33dc5e180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69467a8cbf355feb3ffed3f14e06e7f33dc5e180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9am5IACgkQtAh+UQ6Y\nsWQ+8g/+M2KAie1q1WrR5sVoVWuYtFL9BkogEqGX3GfpQMG4KlIS/woCFoB/CmEW\nVLmbdrqdrmKjKtr+KX2Bl6eOFwwSZkqmmFU0BRW585/7G+jBzX3tN8MjVyoa9kh2\nOplss18HN8G7b0/B0S3iHK5YA0cqrhSbk7Q2HJUv+jYrbKg8p2PEpDMKyNQ1fxz/\nzDLYq+FkIJIuKXpkGM5eUWpgxXv4vcTFcgBBwpTNAhSR5FBhViyQVtAyt7/8W4Lr\nyFJ6jg+PwrNgUFhps5nqDboy+z7Hl5452unVKN0+5fU+PbqiHgT2qgIMY+hVu2BI\n3970hBRf/XXbVRC1oKzRHPpSCYt4ul2bIJaT8QO9w0Rrgnj7M0gPcanIfQZRzS0o\narMiUOlIwt4F/8WfbzsLl5MKGNvdeDluD5dFlcjQvs+T8Vh4JO1ERuzRsZoCPiln\nDf7vGMf2WJR9CWP23IKLxqD6+80TkXLMAead1akebOXkqjSlR5bNNSarM6GSbPCZ\nFanUqtj1CIFyayxwiCIpNp4k++Sb9OhlFjtxI6GvE4Yl+voEztC4Ql6nlgJKSgXv\nQTpFOFYM7Ypdsrp078p76vUjhhwPW3XIa+ayXs7NY8A12T+wriLiaYkO6+vrsOHP\nbc4azyaoPXXP5sVN+Cw88AM6xsPWfEj0pxrKImTMBYyOFg704TM=\n=9Po+\n-----END PGP SIGNATURE-----", "payload": "tree 69467a8cbf355feb3ffed3f14e06e7f33dc5e180\nparent d5a04a9927d1685d63f1d59039ea7dd03ee090a5\nauthor Aaron Hill <aa1ronham@gmail.com> 1598049454 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1599773586 -0400\n\nAttach tokens to `NtMeta` (`ast::AttrItem`)\n\nAn `AttrItem` does not have outer attributes, so we only capture tokens\nwhen parsing a `macro_rules!` matcher\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "html_url": "https://github.com/rust-lang/rust/commit/3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a04a9927d1685d63f1d59039ea7dd03ee090a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a04a9927d1685d63f1d59039ea7dd03ee090a5", "html_url": "https://github.com/rust-lang/rust/commit/d5a04a9927d1685d63f1d59039ea7dd03ee090a5"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "6db84f0dbd3987eeede4a0e66bad575c33611822", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "patch": "@@ -2419,6 +2419,7 @@ impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {\n pub struct AttrItem {\n     pub path: Path,\n     pub args: MacArgs,\n+    pub tokens: Option<TokenStream>,\n }\n \n /// A list of attributes."}, {"sha": "33bd93352316a21d96beb3c8e10e1a8893f00e0c", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "patch": "@@ -330,7 +330,7 @@ crate fn mk_attr_id() -> AttrId {\n }\n \n pub fn mk_attr(style: AttrStyle, path: Path, args: MacArgs, span: Span) -> Attribute {\n-    mk_attr_from_item(style, AttrItem { path, args }, span)\n+    mk_attr_from_item(style, AttrItem { path, args, tokens: None }, span)\n }\n \n pub fn mk_attr_from_item(style: AttrStyle, item: AttrItem, span: Span) -> Attribute {"}, {"sha": "3ba8ff65ee5142719decb441744b76e58b56e265", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "patch": "@@ -579,7 +579,7 @@ pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {\n pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n     let Attribute { kind, id: _, style: _, span } = attr;\n     match kind {\n-        AttrKind::Normal(AttrItem { path, args }) => {\n+        AttrKind::Normal(AttrItem { path, args, tokens: _ }) => {\n             vis.visit_path(path);\n             visit_mac_args(args, vis);\n         }\n@@ -709,7 +709,7 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n         token::NtLifetime(ident) => vis.visit_ident(ident),\n         token::NtLiteral(expr) => vis.visit_expr(expr),\n         token::NtMeta(item) => {\n-            let AttrItem { path, args } = item.deref_mut();\n+            let AttrItem { path, args, tokens: _ } = item.deref_mut();\n             vis.visit_path(path);\n             visit_mac_args(args, vis);\n         }"}, {"sha": "a28d022c66139c01e2c7de0e93e821dd0ee6d064", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "patch": "@@ -967,6 +967,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             AttrKind::Normal(ref item) => AttrKind::Normal(AttrItem {\n                 path: item.path.clone(),\n                 args: self.lower_mac_args(&item.args),\n+                tokens: None,\n             }),\n             AttrKind::DocComment(comment_kind, data) => AttrKind::DocComment(comment_kind, data),\n         };"}, {"sha": "5ed8b69d92ab7841d9c1f39715fcc937804a3279", "filename": "compiler/rustc_builtin_macros/src/cmdline_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs?ref=3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "patch": "@@ -15,7 +15,7 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n         );\n \n         let start_span = parser.token.span;\n-        let AttrItem { path, args } = match parser.parse_attr_item() {\n+        let AttrItem { path, args, tokens: _ } = match parser.parse_attr_item() {\n             Ok(ai) => ai,\n             Err(mut err) => {\n                 err.emit();"}, {"sha": "98faa8a0a0f1bf3472443bf4dec34be0bff301a8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "patch": "@@ -1777,6 +1777,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 kind: ast::AttrKind::Normal(AttrItem {\n                     path: meta.path,\n                     args: meta.kind.mac_args(meta.span),\n+                    tokens: None,\n                 }),\n                 span: at.span,\n                 id: at.id,"}, {"sha": "bf954783d8273e114889c2943e7cbd95dfc96b6e", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "patch": "@@ -277,6 +277,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n         Nonterminal::NtLifetime(ident) => {\n             Some(tokenstream::TokenTree::token(token::Lifetime(ident.name), ident.span).into())\n         }\n+        Nonterminal::NtMeta(ref attr) => attr.tokens.clone(),\n         Nonterminal::NtTT(ref tt) => Some(tt.clone().into()),\n         Nonterminal::NtExpr(ref expr) | Nonterminal::NtLiteral(ref expr) => {\n             if expr.tokens.is_none() {"}, {"sha": "98f94098bfc15fa9c4dca062ebd1780ee793b7d2", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "patch": "@@ -162,7 +162,7 @@ impl<'a> Parser<'a> {\n         } else {\n             let path = self.parse_path(PathStyle::Mod)?;\n             let args = self.parse_attr_args()?;\n-            ast::AttrItem { path, args }\n+            ast::AttrItem { path, args, tokens: None }\n         })\n     }\n "}, {"sha": "8717f4b92451ecb3071701396e9eecd423e0302b", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3815e91ccd8c7c8ed564476425bca6f1dc5e9607/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "patch": "@@ -169,7 +169,14 @@ impl<'a> Parser<'a> {\n                 }\n             }\n             NonterminalKind::Path => token::NtPath(self.parse_path(PathStyle::Type)?),\n-            NonterminalKind::Meta => token::NtMeta(P(self.parse_attr_item()?)),\n+            NonterminalKind::Meta => {\n+                let (mut attr, tokens) = self.collect_tokens(|this| this.parse_attr_item())?;\n+                // We may have eaten a nonterminal, which could already have tokens\n+                if attr.tokens.is_none() {\n+                    attr.tokens = Some(tokens);\n+                }\n+                token::NtMeta(P(attr))\n+            }\n             NonterminalKind::TT => token::NtTT(self.parse_token_tree()),\n             NonterminalKind::Vis => token::NtVis(self.parse_visibility(FollowedByType::Yes)?),\n             NonterminalKind::Lifetime => {"}]}