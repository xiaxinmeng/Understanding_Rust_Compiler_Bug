{"sha": "059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OWJiZDk2MmVjMDNjYmJlOGRhNmZmN2NhNWQyM2JiMmZmZGJmZWU=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-15T14:04:23Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-15T14:14:45Z"}, "message": "Add common struct for range", "tree": {"sha": "3bfd3a08ba12df3caa0f06d5de50bf0684013c12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bfd3a08ba12df3caa0f06d5de50bf0684013c12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "html_url": "https://github.com/rust-lang/rust/commit/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332", "html_url": "https://github.com/rust-lang/rust/commit/2c1b1c26f49afcca779ec3d6d20e0cb4cbbad332"}], "stats": {"total": 117, "additions": 48, "deletions": 69}, "files": [{"sha": "4d61bf8dae681b5451116e2cb0a0f70022dabcf6", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "patch": "@@ -19,7 +19,6 @@ use build::{BlockAnd, BlockAndExtension, Builder};\n use build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use hair::*;\n use hair::pattern::PatternTypeProjections;\n-use rustc::hir;\n use rustc::mir::*;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::VariantIdx;\n@@ -681,12 +680,7 @@ enum TestKind<'tcx> {\n     },\n \n     // test whether the value falls within an inclusive or exclusive range\n-    Range {\n-        lo: &'tcx ty::Const<'tcx>,\n-        hi: &'tcx ty::Const<'tcx>,\n-        ty: Ty<'tcx>,\n-        end: hir::RangeEnd,\n-    },\n+    Range(PatternRange<'tcx>),\n \n     // test length of the slice is equal to len\n     Len {"}, {"sha": "0ce642838707ed5aac8e95b3d1b659fa87e7b8c2", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 Err(match_pair)\n             }\n \n-            PatternKind::Range { lo, hi, ty, end } => {\n+            PatternKind::Range(PatternRange { lo, hi, ty, end }) => {\n                 let range = match ty.sty {\n                     ty::Char => {\n                         Some(('\\u{0000}' as u128, '\\u{10FFFF}' as u128, Size::from_bits(32)))"}, {"sha": "c8dec6d0b9764b67528e2d531a5d06f17f3dce03", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "patch": "@@ -72,16 +72,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            PatternKind::Range { lo, hi, ty, end } => {\n-                assert!(ty == match_pair.pattern.ty);\n+            PatternKind::Range(range) => {\n+                assert!(range.ty == match_pair.pattern.ty);\n                 Test {\n                     span: match_pair.pattern.span,\n-                    kind: TestKind::Range {\n-                        lo,\n-                        hi,\n-                        ty,\n-                        end,\n-                    },\n+                    kind: TestKind::Range(range),\n                 }\n             }\n \n@@ -137,9 +132,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Variant { .. } => {\n                 panic!(\"you should have called add_variants_to_switch instead!\");\n             }\n-            PatternKind::Range { ty, lo, hi, end } => {\n+            PatternKind::Range(range) => {\n                 // Check that none of the switch values are in the range.\n-                self.values_not_contained_in_range(ty, lo, hi, end, indices)\n+                self.values_not_contained_in_range(range, indices)\n                     .unwrap_or(false)\n             }\n             PatternKind::Slice { .. } |\n@@ -381,7 +376,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            TestKind::Range { ref lo, ref hi, ty, ref end } => {\n+            TestKind::Range(PatternRange { ref lo, ref hi, ty, ref end }) => {\n                 // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.\n                 let lo = self.literal_operand(test.span, ty.clone(), lo.clone());\n                 let hi = self.literal_operand(test.span, ty.clone(), hi.clone());\n@@ -536,9 +531,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n \n             (&TestKind::SwitchInt { switch_ty: _, ref options, ref indices },\n-             &PatternKind::Range { ty, lo, hi, end }) => {\n+             &PatternKind::Range(range)) => {\n                 let not_contained = self\n-                    .values_not_contained_in_range(ty, lo, hi, end, indices)\n+                    .values_not_contained_in_range(range, indices)\n                     .unwrap_or(false);\n \n                 if not_contained {\n@@ -630,12 +625,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            (&TestKind::Range {\n-                lo: test_lo, hi: test_hi, ty: test_ty, end: test_end,\n-            }, &PatternKind::Range {\n-                lo: pat_lo, hi: pat_hi, ty: _, end: pat_end,\n-            }) => {\n-                if (test_lo, test_hi, test_end) == (pat_lo, pat_hi, pat_end) {\n+            (&TestKind::Range(test),\n+             &PatternKind::Range(pat)) => {\n+                if test == pat {\n                     resulting_candidates[0]\n                         .push(self.candidate_without_match_pair(\n                             match_pair_index,\n@@ -648,13 +640,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     use std::cmp::Ordering::*;\n                     use rustc::hir::RangeEnd::*;\n \n-                    let param_env = ty::ParamEnv::empty().and(test_ty);\n+                    let param_env = ty::ParamEnv::empty().and(test.ty);\n                     let tcx = self.hir.tcx();\n \n-                    let lo = compare_const_vals(tcx, test_lo, pat_hi, param_env)?;\n-                    let hi = compare_const_vals(tcx, test_hi, pat_lo, param_env)?;\n+                    let lo = compare_const_vals(tcx, test.lo, pat.hi, param_env)?;\n+                    let hi = compare_const_vals(tcx, test.hi, pat.lo, param_env)?;\n \n-                    match (test_end, pat_end, lo, hi) {\n+                    match (test.end, pat.end, lo, hi) {\n                         // pat < test\n                         (_, _, Greater, _) |\n                         (_, Excluded, Equal, _) |\n@@ -675,12 +667,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            (&TestKind::Range {\n-                lo, hi, ty, end\n-            }, &PatternKind::Constant {\n-                ref value\n-            }) => {\n-                if self.const_range_contains(ty, lo, hi, end, value) == Some(false) {\n+            (&TestKind::Range(range), &PatternKind::Constant { ref value }) => {\n+                if self.const_range_contains(range, value) == Some(false) {\n                     // `value` is not contained in the testing range,\n                     // so `value` can be matched only if this test fails.\n                     resulting_candidates[1].push(candidate.clone());\n@@ -807,21 +795,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn const_range_contains(\n         &self,\n-        ty: Ty<'tcx>,\n-        lo: &'tcx ty::Const<'tcx>,\n-        hi: &'tcx ty::Const<'tcx>,\n-        end: RangeEnd,\n+        range: PatternRange<'tcx>,\n         value: &'tcx ty::Const<'tcx>,\n     ) -> Option<bool> {\n         use std::cmp::Ordering::*;\n \n-        let param_env = ty::ParamEnv::empty().and(ty);\n+        let param_env = ty::ParamEnv::empty().and(range.ty);\n         let tcx = self.hir.tcx();\n \n-        let a = compare_const_vals(tcx, lo, value, param_env)?;\n-        let b = compare_const_vals(tcx, value, hi, param_env)?;\n+        let a = compare_const_vals(tcx, range.lo, value, param_env)?;\n+        let b = compare_const_vals(tcx, value, range.hi, param_env)?;\n \n-        match (b, end) {\n+        match (b, range.end) {\n             (Less, _) |\n             (Equal, RangeEnd::Included) if a != Greater => Some(true),\n             _ => Some(false),\n@@ -830,14 +815,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn values_not_contained_in_range(\n         &self,\n-        ty: Ty<'tcx>,\n-        lo: &'tcx ty::Const<'tcx>,\n-        hi: &'tcx ty::Const<'tcx>,\n-        end: RangeEnd,\n+        range: PatternRange<'tcx>,\n         indices: &FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n     ) -> Option<bool> {\n         for val in indices.keys() {\n-            if self.const_range_contains(ty, lo, hi, end, val)? {\n+            if self.const_range_contains(range, val)? {\n                 return Some(false);\n             }\n         }"}, {"sha": "b254fce4b7684a6678d77ad99c75e2da1733d340", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "patch": "@@ -29,7 +29,7 @@ pub mod cx;\n mod constant;\n \n pub mod pattern;\n-pub use self::pattern::{BindingMode, Pattern, PatternKind, FieldPattern};\n+pub use self::pattern::{BindingMode, Pattern, PatternKind, PatternRange, FieldPattern};\n pub(crate) use self::pattern::{PatternTypeProjection, PatternTypeProjections};\n \n mod util;"}, {"sha": "c0bfee803ef8e2f69fc0ba0d62c08d14cff32e22", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "patch": "@@ -173,7 +173,7 @@ use self::WitnessPreference::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use super::{FieldPattern, Pattern, PatternKind};\n+use super::{FieldPattern, Pattern, PatternKind, PatternRange};\n use super::{PatternFoldable, PatternFolder, compare_const_vals};\n \n use rustc::hir::def_id::DefId;\n@@ -554,12 +554,12 @@ impl<'tcx> Witness<'tcx> {\n                 _ => {\n                     match *ctor {\n                         ConstantValue(value) => PatternKind::Constant { value },\n-                        ConstantRange(lo, hi, ty, end) => PatternKind::Range {\n+                        ConstantRange(lo, hi, ty, end) => PatternKind::Range(PatternRange {\n                             lo: ty::Const::from_bits(cx.tcx, lo, ty::ParamEnv::empty().and(ty)),\n                             hi: ty::Const::from_bits(cx.tcx, hi, ty::ParamEnv::empty().and(ty)),\n                             ty,\n                             end,\n-                        },\n+                        }),\n                         _ => PatternKind::Wild,\n                     }\n                 }\n@@ -820,7 +820,7 @@ impl<'tcx> IntRange<'tcx> {\n                 -> Option<IntRange<'tcx>> {\n         Self::from_ctor(tcx, &match pat.kind {\n             box PatternKind::Constant { value } => ConstantValue(value),\n-            box PatternKind::Range { lo, hi, ty, end } => ConstantRange(\n+            box PatternKind::Range(PatternRange { lo, hi, ty, end }) => ConstantRange(\n                 lo.to_bits(tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n                 hi.to_bits(tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n                 ty,\n@@ -1259,7 +1259,7 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n             Some(vec![Variant(adt_def.variants[variant_index].did)])\n         }\n         PatternKind::Constant { value } => Some(vec![ConstantValue(value)]),\n-        PatternKind::Range { lo, hi, ty, end } =>\n+        PatternKind::Range(PatternRange { lo, hi, ty, end }) =>\n             Some(vec![ConstantRange(\n                 lo.to_bits(cx.tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n                 hi.to_bits(cx.tcx, ty::ParamEnv::empty().and(ty)).unwrap(),\n@@ -1556,7 +1556,7 @@ fn constructor_covered_by_range<'a, 'tcx>(\n ) -> Result<bool, ErrorReported> {\n     let (from, to, end, ty) = match pat.kind {\n         box PatternKind::Constant { value } => (value, value, RangeEnd::Included, value.ty),\n-        box PatternKind::Range { lo, hi, ty, end } => (lo, hi, end, ty),\n+        box PatternKind::Range(PatternRange { lo, hi, end, ty }) => (lo, hi, end, ty),\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, from, to, ty);"}, {"sha": "b014a76a7393f5178015b89a4b4cd29dbdab61ff", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=059bbd962ec03cbbe8da6ff7ca5d23bb2ffdbfee", "patch": "@@ -219,12 +219,7 @@ pub enum PatternKind<'tcx> {\n         value: &'tcx ty::Const<'tcx>,\n     },\n \n-    Range {\n-        lo: &'tcx ty::Const<'tcx>,\n-        hi: &'tcx ty::Const<'tcx>,\n-        ty: Ty<'tcx>,\n-        end: RangeEnd,\n-    },\n+    Range(PatternRange<'tcx>),\n \n     /// matches against a slice, checking the length and extracting elements.\n     /// irrefutable when there is a slice pattern and both `prefix` and `suffix` are empty.\n@@ -243,6 +238,14 @@ pub enum PatternKind<'tcx> {\n     },\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq)]\n+pub struct PatternRange<'tcx> {\n+    pub lo: &'tcx ty::Const<'tcx>,\n+    pub hi: &'tcx ty::Const<'tcx>,\n+    pub ty: Ty<'tcx>,\n+    pub end: RangeEnd,\n+}\n+\n impl<'tcx> fmt::Display for Pattern<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self.kind {\n@@ -354,7 +357,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n             PatternKind::Constant { value } => {\n                 fmt_const_val(f, value)\n             }\n-            PatternKind::Range { lo, hi, ty: _, end } => {\n+            PatternKind::Range(PatternRange { lo, hi, ty: _, end }) => {\n                 fmt_const_val(f, lo)?;\n                 match end {\n                     RangeEnd::Included => write!(f, \"..=\")?,\n@@ -483,7 +486,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         );\n                         match (end, cmp) {\n                             (RangeEnd::Excluded, Some(Ordering::Less)) =>\n-                                PatternKind::Range { lo, hi, ty, end },\n+                                PatternKind::Range(PatternRange { lo, hi, ty, end }),\n                             (RangeEnd::Excluded, _) => {\n                                 span_err!(\n                                     self.tcx.sess,\n@@ -497,7 +500,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 PatternKind::Constant { value: lo }\n                             }\n                             (RangeEnd::Included, Some(Ordering::Less)) => {\n-                                PatternKind::Range { lo, hi, ty, end }\n+                                PatternKind::Range(PatternRange { lo, hi, ty, end })\n                             }\n                             (RangeEnd::Included, _) => {\n                                 let mut err = struct_span_err!(\n@@ -1177,17 +1180,17 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n             } => PatternKind::Constant {\n                 value: value.fold_with(folder)\n             },\n-            PatternKind::Range {\n+            PatternKind::Range(PatternRange {\n                 lo,\n                 hi,\n                 ty,\n                 end,\n-            } => PatternKind::Range {\n+            }) => PatternKind::Range(PatternRange {\n                 lo: lo.fold_with(folder),\n                 hi: hi.fold_with(folder),\n                 ty: ty.fold_with(folder),\n                 end,\n-            },\n+            }),\n             PatternKind::Slice {\n                 ref prefix,\n                 ref slice,"}]}