{"sha": "3e44ca95dd844863eeb9bba44209e43d2afb81a4", "node_id": "C_kwDOAAsO6NoAKDNlNDRjYTk1ZGQ4NDQ4NjNlZWI5YmJhNDQyMDllNDNkMmFmYjgxYTQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-02T21:04:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-02T21:14:17Z"}, "message": "remove some unused code and types", "tree": {"sha": "9cab9d3e9e55a6f22ee265ddee6d5807b4f51a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cab9d3e9e55a6f22ee265ddee6d5807b4f51a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e44ca95dd844863eeb9bba44209e43d2afb81a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e44ca95dd844863eeb9bba44209e43d2afb81a4", "html_url": "https://github.com/rust-lang/rust/commit/3e44ca95dd844863eeb9bba44209e43d2afb81a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e44ca95dd844863eeb9bba44209e43d2afb81a4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3fc9dff8f2cff217883cd4a6f979677a1263f9", "html_url": "https://github.com/rust-lang/rust/commit/ee3fc9dff8f2cff217883cd4a6f979677a1263f9"}], "stats": {"total": 86, "additions": 17, "deletions": 69}, "files": [{"sha": "594c14a642ded51def3afe5ee4ae60cee3d3e345", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e44ca95dd844863eeb9bba44209e43d2afb81a4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e44ca95dd844863eeb9bba44209e43d2afb81a4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=3e44ca95dd844863eeb9bba44209e43d2afb81a4", "patch": "@@ -2,7 +2,7 @@\n \n use crate::mir::{Body, ConstantKind, Promoted};\n use crate::ty::{self, OpaqueHiddenType, Ty, TyCtxt};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -115,21 +115,6 @@ pub enum UnusedUnsafe {\n     /// `unsafe` block nested under another (used) `unsafe` block\n     /// > ``\u2026 because it's nested under this `unsafe` block``\n     InUnsafeBlock(hir::HirId),\n-    /// `unsafe` block nested under `unsafe fn`\n-    /// > ``\u2026 because it's nested under this `unsafe fn` ``\n-    ///\n-    /// the second HirId here indicates the first usage of the `unsafe` block,\n-    /// which allows retrieval of the LintLevelSource for why that operation would\n-    /// have been permitted without the block\n-    InUnsafeFn(hir::HirId, hir::HirId),\n-}\n-\n-#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n-pub enum UsedUnsafeBlockData {\n-    SomeDisallowedInUnsafeFn,\n-    // the HirId here indicates the first usage of the `unsafe` block\n-    // (i.e. the one that's first encountered in the MIR traversal of the unsafety check)\n-    AllAllowedInUnsafeFn(hir::HirId),\n }\n \n #[derive(TyEncodable, TyDecodable, HashStable, Debug)]\n@@ -138,10 +123,7 @@ pub struct UnsafetyCheckResult {\n     pub violations: Vec<UnsafetyViolation>,\n \n     /// Used `unsafe` blocks in this function. This is used for the \"unused_unsafe\" lint.\n-    ///\n-    /// The keys are the used `unsafe` blocks, the UnusedUnsafeKind indicates whether\n-    /// or not any of the usages happen at a place that doesn't allow `unsafe_op_in_unsafe_fn`.\n-    pub used_unsafe_blocks: FxHashMap<hir::HirId, UsedUnsafeBlockData>,\n+    pub used_unsafe_blocks: FxHashSet<hir::HirId>,\n \n     /// This is `Some` iff the item is not a closure.\n     pub unused_unsafes: Option<Vec<(hir::HirId, UnusedUnsafe)>>,"}, {"sha": "a9eb60c7a15ad0e145f8552d1f9fca2b880d31bd", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 15, "deletions": 49, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3e44ca95dd844863eeb9bba44209e43d2afb81a4/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e44ca95dd844863eeb9bba44209e43d2afb81a4/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=3e44ca95dd844863eeb9bba44209e43d2afb81a4", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -11,7 +11,6 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n \n-use std::collections::hash_map;\n use std::ops::Bound;\n \n pub struct UnsafetyChecker<'a, 'tcx> {\n@@ -26,7 +25,7 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n     ///\n     /// The keys are the used `unsafe` blocks, the UnusedUnsafeKind indicates whether\n     /// or not any of the usages happen at a place that doesn't allow `unsafe_op_in_unsafe_fn`.\n-    used_unsafe_blocks: FxHashMap<HirId, UsedUnsafeBlockData>,\n+    used_unsafe_blocks: FxHashSet<HirId>,\n }\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n@@ -130,10 +129,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                 &AggregateKind::Closure(def_id, _) | &AggregateKind::Generator(def_id, _, _) => {\n                     let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n                         self.tcx.unsafety_check_result(def_id);\n-                    self.register_violations(\n-                        violations,\n-                        used_unsafe_blocks.iter().map(|(&h, &d)| (h, d)),\n-                    );\n+                    self.register_violations(violations, used_unsafe_blocks.iter().copied());\n                 }\n             },\n             _ => {}\n@@ -257,22 +253,8 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n     fn register_violations<'a>(\n         &mut self,\n         violations: impl IntoIterator<Item = &'a UnsafetyViolation>,\n-        new_used_unsafe_blocks: impl IntoIterator<Item = (HirId, UsedUnsafeBlockData)>,\n+        new_used_unsafe_blocks: impl IntoIterator<Item = HirId>,\n     ) {\n-        use UsedUnsafeBlockData::*;\n-\n-        let update_entry = |this: &mut Self, hir_id, new_usage| {\n-            match this.used_unsafe_blocks.entry(hir_id) {\n-                hash_map::Entry::Occupied(mut entry) => {\n-                    if new_usage == SomeDisallowedInUnsafeFn {\n-                        *entry.get_mut() = SomeDisallowedInUnsafeFn;\n-                    }\n-                }\n-                hash_map::Entry::Vacant(entry) => {\n-                    entry.insert(new_usage);\n-                }\n-            };\n-        };\n         let safety = self.body.source_scopes[self.source_info.scope]\n             .local_data\n             .as_ref()\n@@ -300,17 +282,13 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n             }),\n             Safety::BuiltinUnsafe => {}\n             Safety::ExplicitUnsafe(hir_id) => violations.into_iter().for_each(|_violation| {\n-                update_entry(\n-                    self,\n-                    hir_id,\n-                    SomeDisallowedInUnsafeFn,\n-                )\n+                self.used_unsafe_blocks.insert(hir_id);\n             }),\n         };\n \n-        new_used_unsafe_blocks\n-            .into_iter()\n-            .for_each(|(hir_id, usage_data)| update_entry(self, hir_id, usage_data));\n+        new_used_unsafe_blocks.into_iter().for_each(|hir_id| {\n+            self.used_unsafe_blocks.insert(hir_id);\n+        });\n     }\n     fn check_mut_borrowing_layout_constrained_field(\n         &mut self,\n@@ -407,34 +385,28 @@ enum Context {\n \n struct UnusedUnsafeVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    used_unsafe_blocks: &'a FxHashMap<HirId, UsedUnsafeBlockData>,\n+    used_unsafe_blocks: &'a FxHashSet<HirId>,\n     context: Context,\n     unused_unsafes: &'a mut Vec<(HirId, UnusedUnsafe)>,\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n     fn visit_block(&mut self, block: &'tcx hir::Block<'tcx>) {\n-        use UsedUnsafeBlockData::{AllAllowedInUnsafeFn, SomeDisallowedInUnsafeFn};\n-\n         if let hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::UserProvided) = block.rules {\n             let used = match self.tcx.lint_level_at_node(UNUSED_UNSAFE, block.hir_id) {\n-                (Level::Allow, _) => Some(SomeDisallowedInUnsafeFn),\n-                _ => self.used_unsafe_blocks.get(&block.hir_id).copied(),\n+                (Level::Allow, _) => true,\n+                _ => self.used_unsafe_blocks.contains(&block.hir_id),\n             };\n             let unused_unsafe = match (self.context, used) {\n-                (_, None) => UnusedUnsafe::Unused,\n-                (Context::Safe, Some(_))\n-                | (Context::UnsafeFn(_), Some(SomeDisallowedInUnsafeFn)) => {\n+                (_, false) => UnusedUnsafe::Unused,\n+                (Context::Safe, true) | (Context::UnsafeFn(_), true) => {\n                     let previous_context = self.context;\n                     self.context = Context::UnsafeBlock(block.hir_id);\n                     intravisit::walk_block(self, block);\n                     self.context = previous_context;\n                     return;\n                 }\n-                (Context::UnsafeFn(hir_id), Some(AllAllowedInUnsafeFn(lint_root))) => {\n-                    UnusedUnsafe::InUnsafeFn(hir_id, lint_root)\n-                }\n-                (Context::UnsafeBlock(hir_id), Some(_)) => UnusedUnsafe::InUnsafeBlock(hir_id),\n+                (Context::UnsafeBlock(hir_id), true) => UnusedUnsafe::InUnsafeBlock(hir_id),\n             };\n             self.unused_unsafes.push((block.hir_id, unused_unsafe));\n         }\n@@ -458,7 +430,7 @@ impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n fn check_unused_unsafe(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-    used_unsafe_blocks: &FxHashMap<HirId, UsedUnsafeBlockData>,\n+    used_unsafe_blocks: &FxHashSet<HirId>,\n ) -> Vec<(HirId, UnusedUnsafe)> {\n     let body_id = tcx.hir().maybe_body_owned_by(def_id);\n \n@@ -518,11 +490,6 @@ fn unsafety_check_result<'tcx>(\n }\n \n fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n-    if matches!(kind, UnusedUnsafe::InUnsafeFn(..)) {\n-        // We do *not* warn here, these unsafe blocks are actually required when\n-        // `unsafe_op_in_unsafe_fn` is warn or higher.\n-        return;\n-    }\n     let span = tcx.sess.source_map().guess_head_span(tcx.hir().span(id));\n     tcx.struct_span_lint_hir(UNUSED_UNSAFE, id, span, |lint| {\n         let msg = \"unnecessary `unsafe` block\";\n@@ -536,7 +503,6 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n                     \"because it's nested under this `unsafe` block\",\n                 );\n             }\n-            UnusedUnsafe::InUnsafeFn(_id, _usage_lint_root) => unreachable!(),\n         }\n \n         db.emit();"}]}