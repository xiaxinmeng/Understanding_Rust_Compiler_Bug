{"sha": "11e128025a7d855b80aa7ec1871e71451d8c8b7f", "node_id": "C_kwDOAAsO6NoAKDExZTEyODAyNWE3ZDg1NWI4MGFhN2VjMTg3MWU3MTQ1MWQ4YzhiN2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-10T05:09:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-10T05:09:57Z"}, "message": "Rollup merge of #107831 - nnethercote:query-refactoring, r=oli-obk\n\nQuery refactoring\n\nJust some cleanups I found when learning about the query system.\n\nBest reviewed one commit at a time.\n\nr? `@oli-obk`", "tree": {"sha": "b08d175889d5ab902af55c8a4d6290eed000581a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b08d175889d5ab902af55c8a4d6290eed000581a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11e128025a7d855b80aa7ec1871e71451d8c8b7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5dGlCRBK7hj4Ov3rIwAAhOcIAAr+q5MWbnMEvDKX1oiTmB2J\ndKUsikDEak0f65xSSnorX5KqK+A3oOtLthwWdLC9f0RkRmj3u+qZMiGc0sc5qnI9\nmp+sdOcnfPdkpH1k7M0/jesl6tEBM01RidudMzHzB7K+KECecjinQDYfNYtST21s\nRAd7m6l7V5JN7WOGzi7a4PdojiFHlD40vSzU/ASK1yY58zRTCUnAjSOufhTRYhX0\nbFMYZkog1PM2qfsza108x/eeWjjFfzZa+tsgDyKeiPxtfHDFoAWNiKY46DT+t2MS\nEQE5TqmciemfyHY2NtVkBaL+Yqf1/PoQpFUr6wN/DPMSPmUusXv4JjCWPkn82uU=\n=CEcy\n-----END PGP SIGNATURE-----\n", "payload": "tree b08d175889d5ab902af55c8a4d6290eed000581a\nparent 8fc9ed51f04dbb6e3d7f0928ebaea9c8bce6849b\nparent 243944c6535867f2d4e3bc44f4a8b0e300dc83b9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676005797 +0100\ncommitter GitHub <noreply@github.com> 1676005797 +0100\n\nRollup merge of #107831 - nnethercote:query-refactoring, r=oli-obk\n\nQuery refactoring\n\nJust some cleanups I found when learning about the query system.\n\nBest reviewed one commit at a time.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11e128025a7d855b80aa7ec1871e71451d8c8b7f", "html_url": "https://github.com/rust-lang/rust/commit/11e128025a7d855b80aa7ec1871e71451d8c8b7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11e128025a7d855b80aa7ec1871e71451d8c8b7f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fc9ed51f04dbb6e3d7f0928ebaea9c8bce6849b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc9ed51f04dbb6e3d7f0928ebaea9c8bce6849b", "html_url": "https://github.com/rust-lang/rust/commit/8fc9ed51f04dbb6e3d7f0928ebaea9c8bce6849b"}, {"sha": "243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/243944c6535867f2d4e3bc44f4a8b0e300dc83b9", "html_url": "https://github.com/rust-lang/rust/commit/243944c6535867f2d4e3bc44f4a8b0e300dc83b9"}], "stats": {"total": 104, "additions": 49, "deletions": 55}, "files": [{"sha": "b4a49e1df610c8bedd90e7712dfd8c5b674faebe", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -54,7 +54,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     trace!(\n         \"eval_body_using_ecx: pushing stack frame for global: {}{}\",\n-        with_no_trimmed_paths!(ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id()))),\n+        with_no_trimmed_paths!(ecx.tcx.def_path_str(cid.instance.def_id())),\n         cid.promoted.map_or_else(String::new, |p| format!(\"::promoted[{:?}]\", p))\n     );\n "}, {"sha": "1e2441d984ad6cf9f30634fb44d7d43092b88c26", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -203,12 +203,10 @@ impl CanonicalizeMode for CanonicalizeQueryResponse {\n                 // rust-lang/rust#57464: `impl Trait` can leak local\n                 // scopes (in manner violating typeck). Therefore, use\n                 // `delay_span_bug` to allow type error over an ICE.\n-                ty::tls::with(|tcx| {\n-                    tcx.sess.delay_span_bug(\n-                        rustc_span::DUMMY_SP,\n-                        &format!(\"unexpected region in query response: `{:?}`\", r),\n-                    );\n-                });\n+                canonicalizer.tcx.sess.delay_span_bug(\n+                    rustc_span::DUMMY_SP,\n+                    &format!(\"unexpected region in query response: `{:?}`\", r),\n+                );\n                 r\n             }\n         }"}, {"sha": "bc6d7c209971c84f9c5d78f72c1bb9cfb9bd2083", "filename": "compiler/rustc_interface/src/callbacks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -38,7 +38,7 @@ fn track_diagnostic(diagnostic: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnost\n \n             // Diagnostics are tracked, we can ignore the dependency.\n             let icx = tls::ImplicitCtxt { task_deps: TaskDepsRef::Ignore, ..icx.clone() };\n-            return tls::enter_context(&icx, move |_| (*f)(diagnostic));\n+            return tls::enter_context(&icx, move || (*f)(diagnostic));\n         }\n \n         // In any other case, invoke diagnostics anyway."}, {"sha": "33ebbb411ceb6824716e3c443e77f22021a27d98", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -738,30 +738,16 @@ pub static DEFAULT_EXTERN_QUERY_PROVIDERS: LazyLock<ExternProviders> = LazyLock:\n     extern_providers\n });\n \n-pub struct QueryContext<'tcx> {\n-    gcx: &'tcx GlobalCtxt<'tcx>,\n-}\n-\n-impl<'tcx> QueryContext<'tcx> {\n-    pub fn enter<F, R>(&mut self, f: F) -> R\n-    where\n-        F: FnOnce(TyCtxt<'tcx>) -> R,\n-    {\n-        let icx = ty::tls::ImplicitCtxt::new(self.gcx);\n-        ty::tls::enter_context(&icx, |_| f(icx.tcx))\n-    }\n-}\n-\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n     dep_graph: DepGraph,\n     untracked: Untracked,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n-    global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n+    gcx_cell: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n     hir_arena: &'tcx WorkerLocal<rustc_hir::Arena<'tcx>>,\n-) -> QueryContext<'tcx> {\n+) -> &'tcx GlobalCtxt<'tcx> {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to\n     // incr. comp. yet.\n@@ -785,8 +771,8 @@ pub fn create_global_ctxt<'tcx>(\n         TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n     });\n \n-    let gcx = sess.time(\"setup_global_ctxt\", || {\n-        global_ctxt.get_or_init(move || {\n+    sess.time(\"setup_global_ctxt\", || {\n+        gcx_cell.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n                 sess,\n                 lint_store,\n@@ -799,9 +785,7 @@ pub fn create_global_ctxt<'tcx>(\n                 rustc_query_impl::query_callbacks(arena),\n             )\n         })\n-    });\n-\n-    QueryContext { gcx }\n+    })\n }\n \n /// Runs the resolution, type-checking, region checking and other"}, {"sha": "6512695873ef90e88b74306fbc009cf8da24b9ec", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::{FailedWritingFile, RustcErrorFatal, RustcErrorUnexpectedAnnotation};\n use crate::interface::{Compiler, Result};\n-use crate::passes::{self, BoxedResolver, QueryContext};\n+use crate::passes::{self, BoxedResolver};\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -64,7 +64,7 @@ impl<'a, T> std::ops::DerefMut for QueryResult<'a, T> {\n     }\n }\n \n-impl<'a, 'tcx> QueryResult<'a, QueryContext<'tcx>> {\n+impl<'a, 'tcx> QueryResult<'a, &'tcx GlobalCtxt<'tcx>> {\n     pub fn enter<T>(&mut self, f: impl FnOnce(TyCtxt<'tcx>) -> T) -> T {\n         (*self.0).get_mut().enter(f)\n     }\n@@ -78,7 +78,7 @@ impl<T> Default for Query<T> {\n \n pub struct Queries<'tcx> {\n     compiler: &'tcx Compiler,\n-    gcx: OnceCell<GlobalCtxt<'tcx>>,\n+    gcx_cell: OnceCell<GlobalCtxt<'tcx>>,\n     queries: OnceCell<TcxQueries<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n@@ -90,15 +90,16 @@ pub struct Queries<'tcx> {\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    global_ctxt: Query<QueryContext<'tcx>>,\n+    // This just points to what's in `gcx_cell`.\n+    gcx: Query<&'tcx GlobalCtxt<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n }\n \n impl<'tcx> Queries<'tcx> {\n     pub fn new(compiler: &'tcx Compiler) -> Queries<'tcx> {\n         Queries {\n             compiler,\n-            gcx: OnceCell::new(),\n+            gcx_cell: OnceCell::new(),\n             queries: OnceCell::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n             hir_arena: WorkerLocal::new(|_| rustc_hir::Arena::default()),\n@@ -108,7 +109,7 @@ impl<'tcx> Queries<'tcx> {\n             register_plugins: Default::default(),\n             expansion: Default::default(),\n             dep_graph: Default::default(),\n-            global_ctxt: Default::default(),\n+            gcx: Default::default(),\n             ongoing_codegen: Default::default(),\n         }\n     }\n@@ -207,8 +208,8 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, QueryContext<'tcx>>> {\n-        self.global_ctxt.compute(|| {\n+    pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, &'tcx GlobalCtxt<'tcx>>> {\n+        self.gcx.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n             let (krate, resolver, lint_store) = self.expansion()?.steal();\n \n@@ -218,18 +219,18 @@ impl<'tcx> Queries<'tcx> {\n                 ast_lowering: untracked_resolver_for_lowering,\n             } = BoxedResolver::to_resolver_outputs(resolver);\n \n-            let mut qcx = passes::create_global_ctxt(\n+            let gcx = passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n                 self.dep_graph()?.steal(),\n                 untracked,\n                 &self.queries,\n-                &self.gcx,\n+                &self.gcx_cell,\n                 &self.arena,\n                 &self.hir_arena,\n             );\n \n-            qcx.enter(|tcx| {\n+            gcx.enter(|tcx| {\n                 let feed = tcx.feed_unit_query();\n                 feed.resolver_for_lowering(\n                     tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n@@ -239,7 +240,7 @@ impl<'tcx> Queries<'tcx> {\n                 let feed = tcx.feed_local_crate();\n                 feed.crate_name(crate_name);\n             });\n-            Ok(qcx)\n+            Ok(gcx)\n         })\n     }\n \n@@ -387,7 +388,7 @@ impl Compiler {\n \n         // NOTE: intentionally does not compute the global context if it hasn't been built yet,\n         // since that likely means there was a parse error.\n-        if let Some(Ok(gcx)) = &mut *queries.global_ctxt.result.borrow_mut() {\n+        if let Some(Ok(gcx)) = &mut *queries.gcx.result.borrow_mut() {\n             let gcx = gcx.get_mut();\n             // We assume that no queries are run past here. If there are new queries\n             // after this point, they'll show up as \"<unknown>\" in self-profiling data."}, {"sha": "2e82efba1924efa0bde696ae7f02c133bcbd2a97", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -55,7 +55,7 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n         ty::tls::with_context(|icx| {\n             let icx = ty::tls::ImplicitCtxt { task_deps, ..icx.clone() };\n \n-            ty::tls::enter_context(&icx, |_| op())\n+            ty::tls::enter_context(&icx, op)\n         })\n     }\n "}, {"sha": "56df1a66f9d29da7f705c0948b58cc79e46da58f", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -34,6 +34,7 @@\n #![feature(get_mut_unchecked)]\n #![feature(if_let_guard)]\n #![feature(iter_from_generator)]\n+#![feature(local_key_cell_methods)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(extern_types)]"}, {"sha": "d07d9190e011e43da6fc57b5656b6510bbb56780", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -468,6 +468,18 @@ pub struct GlobalCtxt<'tcx> {\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n }\n \n+impl<'tcx> GlobalCtxt<'tcx> {\n+    /// Installs `self` in a `TyCtxt` and `ImplicitCtxt` for the duration of\n+    /// `f`.\n+    pub fn enter<'a: 'tcx, F, R>(&'a self, f: F) -> R\n+    where\n+        F: FnOnce(TyCtxt<'tcx>) -> R,\n+    {\n+        let icx = tls::ImplicitCtxt::new(self);\n+        tls::enter_context(&icx, || f(icx.tcx))\n+    }\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Expects a body and returns its codegen attributes.\n     ///"}, {"sha": "5426ac8d739924d6cfb5637c8481d01db29f619e", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -89,9 +89,8 @@ mod tlv {\n     /// This is used to set the pointer to the new `ImplicitCtxt`.\n     #[inline]\n     pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: *const (), f: F) -> R {\n-        let old = get_tlv();\n-        let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n-        TLV.with(|tlv| tlv.set(value));\n+        let old = TLV.replace(value);\n+        let _reset = rustc_data_structures::OnDrop(move || TLV.set(old));\n         f()\n     }\n }\n@@ -110,9 +109,9 @@ unsafe fn downcast<'a, 'tcx>(context: *const ()) -> &'a ImplicitCtxt<'a, 'tcx> {\n #[inline]\n pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R\n where\n-    F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,\n+    F: FnOnce() -> R,\n {\n-    tlv::with_tlv(erase(context), || f(&context))\n+    tlv::with_tlv(erase(context), f)\n }\n \n /// Allows access to the current `ImplicitCtxt` in a closure if one is available."}, {"sha": "49309db564ea8a361edbc80287d3d4a68a1ea345", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -124,7 +124,7 @@ impl QueryContext for QueryCtxt<'_> {\n             };\n \n             // Use the `ImplicitCtxt` while we execute the query.\n-            tls::enter_context(&new_icx, |_| {\n+            tls::enter_context(&new_icx, || {\n                 rustc_data_structures::stack::ensure_sufficient_stack(compute)\n             })\n         })"}, {"sha": "2b543520198fb5280fb25a70f1e45e2a4b4c7fd2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -98,6 +98,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n     // obligation\n     fn get_from_await_ty<F>(\n         &self,\n+        tcx: TyCtxt<'tcx>,\n         visitor: AwaitsVisitor,\n         hir: map::Map<'tcx>,\n         ty_matches: F,\n@@ -134,9 +135,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n                                         .unwrap_or_else(|| {\n                                             bug!(\n                                                 \"node_type: no type for node {}\",\n-                                                ty::tls::with(|tcx| tcx\n-                                                    .hir()\n-                                                    .node_to_string(await_expr.hir_id))\n+                                                tcx.hir().node_to_string(await_expr.hir_id)\n                                             )\n                                         })\n                                 },\n@@ -2351,7 +2350,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         let mut interior_or_upvar_span = None;\n \n-        let from_awaited_ty = generator_data.get_from_await_ty(visitor, hir, ty_matches);\n+        let from_awaited_ty = generator_data.get_from_await_ty(self.tcx, visitor, hir, ty_matches);\n         debug!(?from_awaited_ty);\n \n         // The generator interior types share the same binders"}, {"sha": "90d6388b70cd8d5493799219dd15191e37bacdaf", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e128025a7d855b80aa7ec1871e71451d8c8b7f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e128025a7d855b80aa7ec1871e71451d8c8b7f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=11e128025a7d855b80aa7ec1871e71451d8c8b7f", "patch": "@@ -814,9 +814,9 @@ fn main_args(at_args: &[String]) -> MainResult {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n \n-            let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess);\n+            let mut gcx = abort_on_err(queries.global_ctxt(), sess);\n \n-            global_ctxt.enter(|tcx| {\n+            gcx.enter(|tcx| {\n                 let (krate, render_opts, mut cache) = sess.time(\"run_global_ctxt\", || {\n                     core::run_global_ctxt(\n                         tcx,"}]}