{"sha": "e838edc0b331bd02b276ff17a1a6f1f98e68a7b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MzhlZGMwYjMzMWJkMDJiMjc2ZmYxN2ExYTZmMWY5OGU2OGE3YjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-21T20:31:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-24T23:06:17Z"}, "message": "isolate those funcs in task that can run on the c stack", "tree": {"sha": "1c62d81618af561d6776d5b0ca2cddd4381a5e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c62d81618af561d6776d5b0ca2cddd4381a5e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e838edc0b331bd02b276ff17a1a6f1f98e68a7b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e838edc0b331bd02b276ff17a1a6f1f98e68a7b3", "html_url": "https://github.com/rust-lang/rust/commit/e838edc0b331bd02b276ff17a1a6f1f98e68a7b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e838edc0b331bd02b276ff17a1a6f1f98e68a7b3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb48817ade1ad4b9b41315038518d8d84ff8e57c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb48817ade1ad4b9b41315038518d8d84ff8e57c", "html_url": "https://github.com/rust-lang/rust/commit/fb48817ade1ad4b9b41315038518d8d84ff8e57c"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "09a914716e10b634fa88150d2eabacb26cff2d2d", "filename": "src/lib/task.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e838edc0b331bd02b276ff17a1a6f1f98e68a7b3/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e838edc0b331bd02b276ff17a1a6f1f98e68a7b3/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=e838edc0b331bd02b276ff17a1a6f1f98e68a7b3", "patch": "@@ -22,24 +22,25 @@ export spawn;\n export spawn_notify;\n export spawn_joinable;\n \n-native \"rust\" mod rustrt {\n-    fn task_sleep(time_in_us: uint);\n-    fn task_yield();\n-    fn task_join(t: task_id) -> int;\n-    fn pin_task();\n-    fn unpin_task();\n-    fn get_task_id() -> task_id;\n+native \"rust\" mod rustrt {                           // C Stack?\n+    fn task_sleep(time_in_us: uint);                 // No\n+    fn task_yield();                                 // No\n+    fn start_task(id: task_id, closure: *u8);        // No\n+    fn task_join(t: task_id) -> int;                 // Refactor\n+}\n \n-    type rust_chan;\n+native \"c-stack-cdecl\" mod rustrt2 = \"rustrt\" {\n+    fn pin_task();                                   // Yes\n+    fn unpin_task();                                 // Yes\n+    fn get_task_id() -> task_id;                     // Yes\n \n-    fn set_min_stack(stack_size: uint);\n+    fn set_min_stack(stack_size: uint);              // Yes\n \n     fn new_task() -> task_id;\n     fn drop_task(task: *rust_task);\n     fn get_task_pointer(id: task_id) -> *rust_task;\n \n-    fn migrate_alloc(alloc: *u8, target: task_id);\n-    fn start_task(id: task_id, closure: *u8);\n+    fn migrate_alloc(alloc: *u8, target: task_id);   // Yes\n }\n \n type rust_task =\n@@ -48,13 +49,13 @@ type rust_task =\n      mutable notify_chan: comm::chan<task_notification>,\n      mutable stack_ptr: *u8};\n \n-resource rust_task_ptr(task: *rust_task) { rustrt::drop_task(task); }\n+resource rust_task_ptr(task: *rust_task) { rustrt2::drop_task(task); }\n \n type task = int;\n type task_id = task;\n type joinable_task = (task_id, comm::port<task_notification>);\n \n-fn get_task_id() -> task_id { rustrt::get_task_id() }\n+fn get_task_id() -> task_id { rustrt2::get_task_id() }\n \n /**\n  * Hints the scheduler to yield this task for a specified ammount of time.\n@@ -86,11 +87,11 @@ fn join_id(t: task_id) -> task_result {\n \n fn unsupervise() { ret sys::unsupervise(); }\n \n-fn pin() { rustrt::pin_task(); }\n+fn pin() { rustrt2::pin_task(); }\n \n-fn unpin() { rustrt::unpin_task(); }\n+fn unpin() { rustrt2::unpin_task(); }\n \n-fn set_min_stack(stack_size: uint) { rustrt::set_min_stack(stack_size); }\n+fn set_min_stack(stack_size: uint) { rustrt2::set_min_stack(stack_size); }\n \n fn spawn<~T>(-data: T, f: fn(T)) -> task {\n     spawn_inner2(data, f, none)\n@@ -138,12 +139,12 @@ fn spawn_inner2<~T>(-data: T, f: fn(T),\n fn unsafe_spawn_inner(-thunk: fn@(),\n                       notify: option<comm::chan<task_notification>>) ->\n    task_id unsafe {\n-    let id = rustrt::new_task();\n+    let id = rustrt2::new_task();\n \n     let raw_thunk: {code: u32, env: u32} = cast(thunk);\n \n     // set up the task pointer\n-    let task_ptr <- rust_task_ptr(rustrt::get_task_pointer(id));\n+    let task_ptr <- rust_task_ptr(rustrt2::get_task_pointer(id));\n \n     assert (ptr::null() != (**task_ptr).stack_ptr);\n \n@@ -167,7 +168,7 @@ fn unsafe_spawn_inner(-thunk: fn@(),\n     }\n \n     // give the thunk environment's allocation to the new task\n-    rustrt::migrate_alloc(cast(raw_thunk.env), id);\n+    rustrt2::migrate_alloc(cast(raw_thunk.env), id);\n     rustrt::start_task(id, cast(thunkfn));\n     // don't cleanup the thunk in this task\n     unsafe::leak(thunk);"}]}