{"sha": "b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNjUyZWYyODg2ZTAxZjc3MjU1OWFhOTBkZjRjNDVlN2M3ZmIxZmQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-07T17:06:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-07T18:58:17Z"}, "message": "Remove documentation query", "tree": {"sha": "91f2a10f146d17fba626a4125d3a1fe1956e7f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91f2a10f146d17fba626a4125d3a1fe1956e7f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "html_url": "https://github.com/rust-lang/rust/commit/b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b886de53834168dd52b5e504a649292f129ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/03b886de53834168dd52b5e504a649292f129ae6", "html_url": "https://github.com/rust-lang/rust/commit/03b886de53834168dd52b5e504a649292f129ae6"}], "stats": {"total": 85, "additions": 26, "deletions": 59}, "files": [{"sha": "fb2631b3eec06cff10f443bb613d3331ef67a136", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "patch": "@@ -38,7 +38,7 @@ macro_rules! impl_has_attrs {\n             }\n             fn docs(self, db: &dyn HirDatabase) -> Option<Documentation> {\n                 let def = AttrDefId::$def_id(self.into());\n-                db.documentation(def)\n+                db.attrs(def).docs()\n             }\n             fn resolve_doc_path(self, db: &dyn HirDatabase, link: &str, ns: Option<Namespace>) -> Option<ModuleDef> {\n                 let def = AttrDefId::$def_id(self.into());"}, {"sha": "8d949b26476826dbacbac09e8f5ee0041ac3bc4c", "filename": "crates/hir/src/db.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdb.rs?ref=b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "patch": "@@ -2,12 +2,12 @@\n \n pub use hir_def::db::{\n     AttrsQuery, BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQueryQuery,\n-    CrateLangItemsQuery, DefDatabase, DefDatabaseStorage, DocumentationQuery, EnumDataQuery,\n-    ExprScopesQuery, FunctionDataQuery, GenericParamsQuery, ImplDataQuery, ImportMapQuery,\n-    InternConstQuery, InternDatabase, InternDatabaseStorage, InternEnumQuery, InternFunctionQuery,\n-    InternImplQuery, InternStaticQuery, InternStructQuery, InternTraitQuery, InternTypeAliasQuery,\n-    InternUnionQuery, ItemTreeQuery, LangItemQuery, ModuleLangItemsQuery, StaticDataQuery,\n-    StructDataQuery, TraitDataQuery, TypeAliasDataQuery, UnionDataQuery,\n+    CrateLangItemsQuery, DefDatabase, DefDatabaseStorage, EnumDataQuery, ExprScopesQuery,\n+    FunctionDataQuery, GenericParamsQuery, ImplDataQuery, ImportMapQuery, InternConstQuery,\n+    InternDatabase, InternDatabaseStorage, InternEnumQuery, InternFunctionQuery, InternImplQuery,\n+    InternStaticQuery, InternStructQuery, InternTraitQuery, InternTypeAliasQuery, InternUnionQuery,\n+    ItemTreeQuery, LangItemQuery, ModuleLangItemsQuery, StaticDataQuery, StructDataQuery,\n+    TraitDataQuery, TypeAliasDataQuery, UnionDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, InternEagerExpansionQuery, InternMacroQuery,"}, {"sha": "7825290e608b71c221b8c6b206cdcb60a24be539", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "patch": "@@ -5,6 +5,7 @@ use std::{ops, sync::Arc};\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n use hir_expand::{hygiene::Hygiene, AstId, InFile};\n+use itertools::Itertools;\n use mbe::ast_to_token_tree;\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n@@ -14,6 +15,7 @@ use tt::Subtree;\n \n use crate::{\n     db::DefDatabase,\n+    docs::Documentation,\n     item_tree::{ItemTreeId, ItemTreeNode},\n     nameres::ModuleSource,\n     path::ModPath,\n@@ -140,6 +142,20 @@ impl Attrs {\n             Some(cfg) => cfg_options.check(&cfg) != Some(false),\n         }\n     }\n+\n+    pub fn docs(&self) -> Option<Documentation> {\n+        let mut docs = String::new();\n+        self.by_key(\"doc\")\n+            .attrs()\n+            .flat_map(|attr| match attr.input.as_ref()? {\n+                AttrInput::Literal(s) => Some(s),\n+                AttrInput::TokenTree(_) => None,\n+            })\n+            .intersperse(&SmolStr::new_inline(\"\\n\"))\n+            // No FromIterator<SmolStr> for String\n+            .for_each(|s| docs.push_str(s.as_str()));\n+        if docs.is_empty() { None } else { Some(docs) }.map(|it| Documentation::new(&it))\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "7f250da3307f59da491726859c4c1cfd444837ef", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "patch": "@@ -10,7 +10,6 @@ use crate::{\n     attr::Attrs,\n     body::{scope::ExprScopes, Body, BodySourceMap},\n     data::{ConstData, FunctionData, ImplData, StaticData, TraitData, TypeAliasData},\n-    docs::Documentation,\n     generics::GenericParams,\n     import_map::ImportMap,\n     item_tree::ItemTree,\n@@ -105,11 +104,6 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(LangItems::lang_item_query)]\n     fn lang_item(&self, start_crate: CrateId, item: SmolStr) -> Option<LangItemTarget>;\n \n-    // FIXME(https://github.com/rust-analyzer/rust-analyzer/issues/2148#issuecomment-550519102)\n-    // Remove this query completely, in favor of `Attrs::docs` method\n-    #[salsa::invoke(Documentation::documentation_query)]\n-    fn documentation(&self, def: AttrDefId) -> Option<Documentation>;\n-\n     #[salsa::invoke(ImportMap::import_map_query)]\n     fn import_map(&self, krate: CrateId) -> Arc<ImportMap>;\n }"}, {"sha": "6a27effefa6e0c6f708fccdbaa933fc47c5b3006", "filename": "crates/hir_def/src/docs.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fhir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdocs.rs?ref=b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "patch": "@@ -5,16 +5,9 @@\n \n use std::sync::Arc;\n \n-use either::Either;\n use itertools::Itertools;\n use syntax::{ast, SmolStr};\n \n-use crate::{\n-    db::DefDatabase,\n-    src::{HasChildSource, HasSource},\n-    AdtId, AttrDefId, Lookup,\n-};\n-\n /// Holds documentation\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Documentation(Arc<str>);\n@@ -26,7 +19,7 @@ impl Into<String> for Documentation {\n }\n \n impl Documentation {\n-    fn new(s: &str) -> Documentation {\n+    pub fn new(s: &str) -> Documentation {\n         Documentation(s.into())\n     }\n \n@@ -40,42 +33,6 @@ impl Documentation {\n     pub fn as_str(&self) -> &str {\n         &*self.0\n     }\n-\n-    pub(crate) fn documentation_query(\n-        db: &dyn DefDatabase,\n-        def: AttrDefId,\n-    ) -> Option<Documentation> {\n-        match def {\n-            AttrDefId::ModuleId(module) => {\n-                let def_map = db.crate_def_map(module.krate);\n-                let src = def_map[module.local_id].declaration_source(db)?;\n-                docs_from_ast(&src.value)\n-            }\n-            AttrDefId::FieldId(it) => {\n-                let src = it.parent.child_source(db);\n-                match &src.value[it.local_id] {\n-                    Either::Left(_tuple) => None,\n-                    Either::Right(record) => docs_from_ast(record),\n-                }\n-            }\n-            AttrDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n-                AdtId::EnumId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n-                AdtId::UnionId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n-            },\n-            AttrDefId::EnumVariantId(it) => {\n-                let src = it.parent.child_source(db);\n-                docs_from_ast(&src.value[it.local_id])\n-            }\n-            AttrDefId::TraitId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n-            AttrDefId::MacroDefId(it) => docs_from_ast(&it.ast_id?.to_node(db.upcast())),\n-            AttrDefId::ConstId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n-            AttrDefId::StaticId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n-            AttrDefId::FunctionId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n-            AttrDefId::TypeAliasId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n-            AttrDefId::ImplId(_) => None,\n-        }\n-    }\n }\n \n pub(crate) fn docs_from_ast<N>(node: &N) -> Option<Documentation>\n@@ -94,7 +51,8 @@ fn merge_doc_comments_and_attrs(\n ) -> Option<String> {\n     match (doc_comment_text, doc_attr_text) {\n         (Some(mut comment_text), Some(attr_text)) => {\n-            comment_text.push_str(\"\\n\");\n+            comment_text.reserve(attr_text.len() + 1);\n+            comment_text.push('\\n');\n             comment_text.push_str(&attr_text);\n             Some(comment_text)\n         }"}, {"sha": "e2251f2b7d1b4a4816c03a2426dd284416fe30e4", "filename": "crates/ide_db/src/apply_change.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3652ef2886e01f772559aa90df4c45e7c7fb1fd/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fapply_change.rs?ref=b3652ef2886e01f772559aa90df4c45e7c7fb1fd", "patch": "@@ -166,7 +166,6 @@ impl RootDatabase {\n             hir::db::ModuleLangItemsQuery\n             hir::db::CrateLangItemsQuery\n             hir::db::LangItemQuery\n-            hir::db::DocumentationQuery\n             hir::db::ImportMapQuery\n \n             // HirDatabase"}]}