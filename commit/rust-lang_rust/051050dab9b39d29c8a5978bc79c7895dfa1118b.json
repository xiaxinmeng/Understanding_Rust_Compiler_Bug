{"sha": "051050dab9b39d29c8a5978bc79c7895dfa1118b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MTA1MGRhYjliMzlkMjljOGE1OTc4YmM3OWM3ODk1ZGZhMTExOGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-30T09:11:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-30T09:11:08Z"}, "message": "Auto merge of #49424 - oli-obk:stable_allocid_hash, r=michaelwoerister\n\nFix stable hashing of AllocIds\n\nr? @michaelwoerister\n\nfixes #49081", "tree": {"sha": "b006749a014b88960d43e2b53e77e4d259ef0a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b006749a014b88960d43e2b53e77e4d259ef0a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051050dab9b39d29c8a5978bc79c7895dfa1118b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051050dab9b39d29c8a5978bc79c7895dfa1118b", "html_url": "https://github.com/rust-lang/rust/commit/051050dab9b39d29c8a5978bc79c7895dfa1118b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051050dab9b39d29c8a5978bc79c7895dfa1118b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696076144d4d904cc99c02f85cf46bbe52404657", "url": "https://api.github.com/repos/rust-lang/rust/commits/696076144d4d904cc99c02f85cf46bbe52404657", "html_url": "https://github.com/rust-lang/rust/commit/696076144d4d904cc99c02f85cf46bbe52404657"}, {"sha": "fa60b7212373a0984c014c2ada74a0538b5b324c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa60b7212373a0984c014c2ada74a0538b5b324c", "html_url": "https://github.com/rust-lang/rust/commit/fa60b7212373a0984c014c2ada74a0538b5b324c"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "04b725957b627f41aef542b66288f58ea5c25fb4", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051050dab9b39d29c8a5978bc79c7895dfa1118b/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051050dab9b39d29c8a5978bc79c7895dfa1118b/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=051050dab9b39d29c8a5978bc79c7895dfa1118b", "patch": "@@ -15,6 +15,7 @@ use hir::map::definitions::Definitions;\n use ich::{self, CachingCodemapView, Fingerprint};\n use middle::cstore::CrateStore;\n use ty::{TyCtxt, fast_reject};\n+use mir::interpret::AllocId;\n use session::Session;\n \n use std::cmp::Ord;\n@@ -59,6 +60,8 @@ pub struct StableHashingContext<'a> {\n     // CachingCodemapView, so we initialize it lazily.\n     raw_codemap: &'a CodeMap,\n     caching_codemap: Option<CachingCodemapView<'a>>,\n+\n+    pub(super) alloc_id_recursion_tracker: FxHashSet<AllocId>,\n }\n \n #[derive(PartialEq, Eq, Clone, Copy)]\n@@ -102,6 +105,7 @@ impl<'a> StableHashingContext<'a> {\n             hash_spans: hash_spans_initial,\n             hash_bodies: true,\n             node_id_hashing_mode: NodeIdHashingMode::HashDefPath,\n+            alloc_id_recursion_tracker: Default::default(),\n         }\n     }\n "}, {"sha": "3bcaef265f24b9f3b9302fdc2d19e1405a365d37", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/051050dab9b39d29c8a5978bc79c7895dfa1118b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051050dab9b39d29c8a5978bc79c7895dfa1118b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=051050dab9b39d29c8a5978bc79c7895dfa1118b", "patch": "@@ -379,13 +379,13 @@ impl_stable_hash_for!(struct mir::interpret::MemoryPointer {\n });\n \n enum AllocDiscriminant {\n-    Static,\n-    Constant,\n+    Alloc,\n+    ExternStatic,\n     Function,\n }\n impl_stable_hash_for!(enum self::AllocDiscriminant {\n-    Static,\n-    Constant,\n+    Alloc,\n+    ExternStatic,\n     Function\n });\n \n@@ -397,17 +397,23 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::interpret::AllocId {\n     ) {\n         ty::tls::with_opt(|tcx| {\n             let tcx = tcx.expect(\"can't hash AllocIds during hir lowering\");\n-            if let Some(def_id) = tcx.interpret_interner.get_corresponding_static_def_id(*self) {\n-                AllocDiscriminant::Static.hash_stable(hcx, hasher);\n-                // statics are unique via their DefId\n-                def_id.hash_stable(hcx, hasher);\n-            } else if let Some(alloc) = tcx.interpret_interner.get_alloc(*self) {\n-                // not a static, can't be recursive, hash the allocation\n-                AllocDiscriminant::Constant.hash_stable(hcx, hasher);\n-                alloc.hash_stable(hcx, hasher);\n+            if let Some(alloc) = tcx.interpret_interner.get_alloc(*self) {\n+                AllocDiscriminant::Alloc.hash_stable(hcx, hasher);\n+                if !hcx.alloc_id_recursion_tracker.insert(*self) {\n+                    tcx\n+                        .interpret_interner\n+                        .get_corresponding_static_def_id(*self)\n+                        .hash_stable(hcx, hasher);\n+                    alloc.hash_stable(hcx, hasher);\n+                    assert!(hcx.alloc_id_recursion_tracker.remove(self));\n+                }\n             } else if let Some(inst) = tcx.interpret_interner.get_fn(*self) {\n                 AllocDiscriminant::Function.hash_stable(hcx, hasher);\n                 inst.hash_stable(hcx, hasher);\n+            } else if let Some(def_id) = tcx.interpret_interner\n+                                            .get_corresponding_static_def_id(*self) {\n+                AllocDiscriminant::ExternStatic.hash_stable(hcx, hasher);\n+                def_id.hash_stable(hcx, hasher);\n             } else {\n                 bug!(\"no allocation for {}\", self);\n             }"}, {"sha": "3e421b27c11bc84bb195deef8d0c4760121a3cfb", "filename": "src/test/incremental/static_stable_hash/issue-49301.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/051050dab9b39d29c8a5978bc79c7895dfa1118b/src%2Ftest%2Fincremental%2Fstatic_stable_hash%2Fissue-49301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051050dab9b39d29c8a5978bc79c7895dfa1118b/src%2Ftest%2Fincremental%2Fstatic_stable_hash%2Fissue-49301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstatic_stable_hash%2Fissue-49301.rs?ref=051050dab9b39d29c8a5978bc79c7895dfa1118b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// https://github.com/rust-lang/rust/issues/49081\n+\n+// revisions:rpass1 rpass2\n+\n+#[cfg(rpass1)]\n+pub static A: &str = \"hello\";\n+#[cfg(rpass2)]\n+pub static A: &str = \"xxxxx\";\n+\n+#[cfg(rpass1)]\n+fn main() {\n+    assert_eq!(A, \"hello\");\n+}\n+\n+#[cfg(rpass2)]\n+fn main() {\n+    assert_eq!(A, \"xxxxx\");\n+}"}]}