{"sha": "dff1e379fc55429ea9a4794634e02c17cebee603", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZjFlMzc5ZmM1NTQyOWVhOWE0Nzk0NjM0ZTAyYzE3Y2ViZWU2MDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-15T14:03:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Add support for parsing let expressions.", "tree": {"sha": "4ec38d68cd0186eebcfba9d20144d43e742a0a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec38d68cd0186eebcfba9d20144d43e742a0a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dff1e379fc55429ea9a4794634e02c17cebee603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dff1e379fc55429ea9a4794634e02c17cebee603", "html_url": "https://github.com/rust-lang/rust/commit/dff1e379fc55429ea9a4794634e02c17cebee603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dff1e379fc55429ea9a4794634e02c17cebee603/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71", "html_url": "https://github.com/rust-lang/rust/commit/3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71"}], "stats": {"total": 75, "additions": 22, "deletions": 53}, "files": [{"sha": "8cf05059e8a6455427ef34e879010fb80d7626b7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 49, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/dff1e379fc55429ea9a4794634e02c17cebee603/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff1e379fc55429ea9a4794634e02c17cebee603/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dff1e379fc55429ea9a4794634e02c17cebee603", "patch": "@@ -2215,13 +2215,8 @@ impl<'a> Parser<'a> {\n                     } else {\n                         ex = ExprKind::Yield(None);\n                     }\n-                } else if self.token.is_keyword(kw::Let) {\n-                    // Catch this syntax error here, instead of in `parse_ident`, so\n-                    // that we can explicitly mention that let is not to be used as an expression\n-                    let mut db = self.fatal(\"expected expression, found statement (`let`)\");\n-                    db.span_label(self.token.span, \"expected expression\");\n-                    db.note(\"variable declaration using `let` is a statement\");\n-                    return Err(db);\n+                } else if self.eat_keyword(kw::Let) {\n+                    return self.parse_let_expr(attrs);\n                 } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n                     let (await_hi, e_kind) = self.parse_await_macro_or_alt(lo, self.prev_span)?;\n                     hi = await_hi;\n@@ -2483,15 +2478,13 @@ impl<'a> Parser<'a> {\n                 attrs.extend::<Vec<_>>(expr.attrs.into());\n                 expr.attrs = attrs;\n                 match expr.node {\n-                    ExprKind::If(..) | ExprKind::IfLet(..) => {\n-                        if !expr.attrs.is_empty() {\n-                            // Just point to the first attribute in there...\n-                            let span = expr.attrs[0].span;\n-\n-                            self.span_err(span,\n-                                \"attributes are not yet allowed on `if` \\\n-                                expressions\");\n-                        }\n+                    ExprKind::If(..) if !expr.attrs.is_empty() => {\n+                        // Just point to the first attribute in there...\n+                        let span = expr.attrs[0].span;\n+\n+                        self.span_err(span,\n+                            \"attributes are not yet allowed on `if` \\\n+                            expressions\");\n                     }\n                     _ => {}\n                 }\n@@ -3163,9 +3156,6 @@ impl<'a> Parser<'a> {\n \n     /// Parses an `if` or `if let` expression (`if` token already eaten).\n     fn parse_if_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n-        if self.check_keyword(kw::Let) {\n-            return self.parse_if_let_expr(attrs);\n-        }\n         let lo = self.prev_span;\n         let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n \n@@ -3197,22 +3187,18 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(lo.to(hi), ExprKind::If(cond, thn, els), attrs))\n     }\n \n-    /// Parses an `if let` expression (`if` token already eaten).\n-    fn parse_if_let_expr(&mut self, attrs: ThinVec<Attribute>)\n-                             -> PResult<'a, P<Expr>> {\n+    /// Parses a `let $pats = $expr` pseudo-expression.\n+    /// The `let` token has already been eaten.\n+    fn parse_let_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;\n-        self.expect_keyword(kw::Let)?;\n         let pats = self.parse_pats()?;\n         self.expect(&token::Eq)?;\n-        let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n-        let thn = self.parse_block()?;\n-        let (hi, els) = if self.eat_keyword(kw::Else) {\n-            let expr = self.parse_else_expr()?;\n-            (expr.span, Some(expr))\n-        } else {\n-            (thn.span, None)\n-        };\n-        Ok(self.mk_expr(lo.to(hi), ExprKind::IfLet(pats, expr, thn, els), attrs))\n+\n+        let expr = self.with_res(\n+            Restrictions::NO_STRUCT_LITERAL,\n+            |this| this.parse_assoc_expr_with(1 + AssocOp::LAnd.precedence(), None.into())\n+        )?;\n+        Ok(self.mk_expr(lo.to(expr.span), ExprKind::Let(pats, expr), attrs))\n     }\n \n     /// Parses `move |args| expr`.\n@@ -3299,30 +3285,13 @@ impl<'a> Parser<'a> {\n     fn parse_while_expr(&mut self, opt_label: Option<Label>,\n                             span_lo: Span,\n                             mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n-        if self.token.is_keyword(kw::Let) {\n-            return self.parse_while_let_expr(opt_label, span_lo, attrs);\n-        }\n         let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         let span = span_lo.to(body.span);\n         return Ok(self.mk_expr(span, ExprKind::While(cond, body, opt_label), attrs));\n     }\n \n-    /// Parses a `while let` expression (`while` token already eaten).\n-    fn parse_while_let_expr(&mut self, opt_label: Option<Label>,\n-                                span_lo: Span,\n-                                mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n-        self.expect_keyword(kw::Let)?;\n-        let pats = self.parse_pats()?;\n-        self.expect(&token::Eq)?;\n-        let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n-        let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n-        attrs.extend(iattrs);\n-        let span = span_lo.to(body.span);\n-        return Ok(self.mk_expr(span, ExprKind::WhileLet(pats, expr, body, opt_label), attrs));\n-    }\n-\n     // parse `loop {...}`, `loop` token already eaten\n     fn parse_loop_expr(&mut self, opt_label: Option<Label>,\n                            span_lo: Span,"}, {"sha": "98e06ad73c94fb83a283d1105c00ec95ef1fb9b4", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dff1e379fc55429ea9a4794634e02c17cebee603/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff1e379fc55429ea9a4794634e02c17cebee603/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=dff1e379fc55429ea9a4794634e02c17cebee603", "patch": "@@ -134,6 +134,7 @@ pub(crate) fn ident_can_begin_expr(name: ast::Name, span: Span, is_raw: bool) ->\n         kw::Continue,\n         kw::False,\n         kw::For,\n+        kw::Let,\n         kw::If,\n         kw::Loop,\n         kw::Match,"}, {"sha": "81b5b08593726ada3a3ce85b8ff7c9d00cea5dac", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dff1e379fc55429ea9a4794634e02c17cebee603/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff1e379fc55429ea9a4794634e02c17cebee603/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=dff1e379fc55429ea9a4794634e02c17cebee603", "patch": "@@ -260,6 +260,7 @@ pub enum ExprPrecedence {\n \n     Box,\n     AddrOf,\n+    Let,\n     Unary,\n \n     Call,\n@@ -277,9 +278,7 @@ pub enum ExprPrecedence {\n     Path,\n     Paren,\n     If,\n-    IfLet,\n     While,\n-    WhileLet,\n     ForLoop,\n     Loop,\n     Match,\n@@ -318,6 +317,8 @@ impl ExprPrecedence {\n             // Unary, prefix\n             ExprPrecedence::Box |\n             ExprPrecedence::AddrOf |\n+            // Here `let pats = expr` has `let pats =` as a \"unary\" prefix of `expr`.\n+            ExprPrecedence::Let |\n             ExprPrecedence::Unary => PREC_PREFIX,\n \n             // Unary, postfix\n@@ -338,9 +339,7 @@ impl ExprPrecedence {\n             ExprPrecedence::Path |\n             ExprPrecedence::Paren |\n             ExprPrecedence::If |\n-            ExprPrecedence::IfLet |\n             ExprPrecedence::While |\n-            ExprPrecedence::WhileLet |\n             ExprPrecedence::ForLoop |\n             ExprPrecedence::Loop |\n             ExprPrecedence::Match |"}]}