{"sha": "9a221402e6086678c921b77eef4b676cbdefb8ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMjIxNDAyZTYwODY2NzhjOTIxYjc3ZWVmNGI2NzZjYmRlZmI4YWU=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-06T08:40:35Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-07T06:09:26Z"}, "message": "Make Python utils more idiomatic, use better names, fix -c mode of update_wiki.", "tree": {"sha": "e13754676c234c89e455da41ad6daceee3606463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e13754676c234c89e455da41ad6daceee3606463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a221402e6086678c921b77eef4b676cbdefb8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a221402e6086678c921b77eef4b676cbdefb8ae", "html_url": "https://github.com/rust-lang/rust/commit/9a221402e6086678c921b77eef4b676cbdefb8ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a221402e6086678c921b77eef4b676cbdefb8ae/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b91c1a509ef714f19c33bda500106d37fcdbb176", "url": "https://api.github.com/repos/rust-lang/rust/commits/b91c1a509ef714f19c33bda500106d37fcdbb176", "html_url": "https://github.com/rust-lang/rust/commit/b91c1a509ef714f19c33bda500106d37fcdbb176"}], "stats": {"total": 406, "additions": 160, "deletions": 246}, "files": [{"sha": "a6b636709c5231ddd9de23898cea2e2e9a5609a2", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a221402e6086678c921b77eef4b676cbdefb8ae/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/9a221402e6086678c921b77eef4b676cbdefb8ae/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=9a221402e6086678c921b77eef4b676cbdefb8ae", "patch": "@@ -7,6 +7,7 @@ out\n *.so\n *.rlib\n *.dll\n+*.pyc\n \n # Executables\n *.exe"}, {"sha": "ae8e4a72c08d8827efeed86d9f27844fbfc719f5", "filename": "util/export.py", "status": "modified", "additions": 29, "deletions": 127, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/9a221402e6086678c921b77eef4b676cbdefb8ae/util%2Fexport.py", "raw_url": "https://github.com/rust-lang/rust/raw/9a221402e6086678c921b77eef4b676cbdefb8ae/util%2Fexport.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fexport.py?ref=9a221402e6086678c921b77eef4b676cbdefb8ae", "patch": "@@ -1,79 +1,29 @@\n #!/usr/bin/env python\n # Build the gh-pages\n \n-import json\n-import os\n import re\n import sys\n+import json\n \n+from lintlib import parse_all, log\n \n-level_re = re.compile(r'''(Forbid|Deny|Warn|Allow)''')\n-conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n-confvar_re = re.compile(r'''/// Lint: (\\w+). (.*).*\\n *\\(\"([^\"]*)\", (?:[^,]*), (.*) => (.*)\\),''')\n lint_subheadline = re.compile(r'''^\\*\\*([\\w\\s]+?)[:?.!]?\\*\\*(.*)''')\n \n-conf_template = \"\"\"\n+CONF_TEMPLATE = \"\"\"\\\n This lint has the following configuration variables:\n \n-* `%s: %s`: %s (defaults to `%s`).\n-\"\"\"\n-\n-\n-# TODO: actual logging\n-def warn(*args):\n-    print(args)\n-\n-\n-def debug(*args):\n-    print(args)\n-\n-\n-def info(*args):\n-    print(args)\n-\n-\n-def parse_path(p=\"clippy_lints/src\"):\n-    lints = []\n-    for f in os.listdir(p):\n-        if f.endswith(\".rs\"):\n-            parse_file(lints, os.path.join(p, f))\n-\n-    conf = parse_conf(p)\n-    info(conf)\n+* `%s: %s`: %s (defaults to `%s`).\"\"\"\n \n-    for lint_id in conf:\n-        lint = next(l for l in lints if l['id'] == lint_id)\n-        if lint:\n-            lint['docs']['Configuration'] = (conf_template % conf[lint_id]).strip()\n \n-    return lints\n-\n-\n-def parse_conf(p):\n-    c = {}\n-    with open(p + '/utils/conf.rs') as f:\n-        f = f.read()\n-\n-        m = re.search(conf_re, f)\n-        m = m.groups()[0]\n-\n-        m = re.findall(confvar_re, m)\n-\n-        for (lint, doc, name, default, ty) in m:\n-            c[lint.lower()] = (name, ty, doc, default)\n-\n-    return c\n-\n-\n-def parseLintDef(level, comment, name):\n-    lint = {}\n-    lint['id'] = name\n-    lint['level'] = level\n-    lint['docs'] = {}\n+def parse_lint_def(lint):\n+    lint_dict = {}\n+    lint_dict['id'] = lint.name\n+    lint_dict['level'] = lint.level\n+    lint_dict['docs'] = {}\n \n     last_section = None\n \n-    for line in comment:\n+    for line in lint.doc:\n         if len(line.strip()) == 0:\n             continue\n \n@@ -86,77 +36,29 @@ def parseLintDef(level, comment, name):\n             text = line\n \n         if not last_section:\n-            warn(\"Skipping comment line as it was not preceded by a heading\")\n-            debug(\"in lint `%s`, line `%s`\" % name, line)\n-\n-        lint['docs'][last_section] = (lint['docs'].get(last_section, \"\") + \"\\n\" + text).strip()\n-\n-    return lint\n-\n-\n-def parse_file(d, f):\n-    last_comment = []\n-    comment = True\n-\n-    with open(f) as rs:\n-        for line in rs:\n-            if comment:\n-                if line.startswith(\"///\"):\n-                    if line.startswith(\"/// \"):\n-                        last_comment.append(line[4:])\n-                    else:\n-                        last_comment.append(line[3:])\n-                elif line.startswith(\"declare_lint!\"):\n-                    comment = False\n-                    deprecated = False\n-                    restriction = False\n-                elif line.startswith(\"declare_restriction_lint!\"):\n-                    comment = False\n-                    deprecated = False\n-                    restriction = True\n-                elif line.startswith(\"declare_deprecated_lint!\"):\n-                    comment = False\n-                    deprecated = True\n-                else:\n-                    last_comment = []\n-            if not comment:\n-                l = line.strip()\n-                m = re.search(r\"pub\\s+([A-Z_][A-Z_0-9]*)\", l)\n-\n-                if m:\n-                    name = m.group(1).lower()\n-\n-                    # Intentionally either a never looping or infinite loop\n-                    while not deprecated and not restriction:\n-                        m = re.search(level_re, line)\n-                        if m:\n-                            level = m.group(0)\n-                            break\n-\n-                        line = next(rs)\n-\n-                    if deprecated:\n-                        level = \"Deprecated\"\n-                    elif restriction:\n-                        level = \"Allow\"\n-\n-                    info(\"found %s with level %s in %s\" % (name, level, f))\n-                    d.append(parseLintDef(level, last_comment, name=name))\n-                    last_comment = []\n-                    comment = True\n-                if \"}\" in l:\n-                    warn(\"Warning: Missing Lint-Name in\", f)\n-                    comment = True\n+            log.warn(\"Skipping comment line as it was not preceded by a heading\")\n+            log.debug(\"in lint `%s`, line `%s`\", lint.name, line)\n+\n+        lint_dict['docs'][last_section] = \\\n+            (lint_dict['docs'].get(last_section, \"\") + \"\\n\" + text).strip()\n+\n+    return lint_dict\n \n \n def main():\n-    lints = parse_path()\n-    info(\"got %s lints\" % len(lints))\n+    lintlist, configs = parse_all()\n+    lints = {}\n+    for lint in lintlist:\n+        lints[lint.name] = parse_lint_def(lint)\n+        if lint.name in configs:\n+            lints[lint.name]['docs']['Configuration'] = \\\n+                CONF_TEMPLATE % configs[lint.name]\n+\n+    outfile = sys.argv[1] if len(sys.argv) > 1 else \"util/gh-pages/lints.json\"\n+    with open(outfile, \"w\") as fp:\n+        json.dump(list(lints.values()), fp, indent=2)\n+        log.info(\"wrote JSON for great justice\")\n \n-    outdir = sys.argv[1] if len(sys.argv) > 1 else \"util/gh-pages/lints.json\"\n-    with open(outdir, \"w\") as file:\n-        json.dump(lints, file, indent=2)\n-        info(\"wrote JSON for great justice\")\n \n if __name__ == \"__main__\":\n     main()"}, {"sha": "45a7110b6a9779c9cd1f4da4782d5791701a0033", "filename": "util/lintlib.py", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/9a221402e6086678c921b77eef4b676cbdefb8ae/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/9a221402e6086678c921b77eef4b676cbdefb8ae/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=9a221402e6086678c921b77eef4b676cbdefb8ae", "patch": "@@ -0,0 +1,95 @@\n+# Common utils for the several housekeeping scripts.\n+\n+import os\n+import re\n+import collections\n+\n+import logging as log\n+log.basicConfig(level=log.INFO, format='%(levelname)s: %(message)s')\n+\n+Lint = collections.namedtuple('Lint', 'name level doc sourcefile')\n+Config = collections.namedtuple('Config', 'name ty doc default')\n+\n+lintname_re = re.compile(r'''pub\\s+([A-Z_][A-Z_0-9]*)''')\n+level_re = re.compile(r'''(Forbid|Deny|Warn|Allow)''')\n+conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n+confvar_re = re.compile(\n+    r'''/// Lint: (\\w+). (.*).*\\n *\\(\"([^\"]*)\", (?:[^,]*), (.*) => (.*)\\),''')\n+\n+\n+def parse_lints(lints, filepath):\n+    last_comment = []\n+    comment = True\n+\n+    with open(filepath) as fp:\n+        for line in fp:\n+            if comment:\n+                if line.startswith(\"/// \"):\n+                    last_comment.append(line[4:])\n+                elif line.startswith(\"///\"):\n+                    last_comment.append(line[3:])\n+                elif line.startswith(\"declare_lint!\"):\n+                    comment = False\n+                    deprecated = False\n+                    restriction = False\n+                elif line.startswith(\"declare_restriction_lint!\"):\n+                    comment = False\n+                    deprecated = False\n+                    restriction = True\n+                elif line.startswith(\"declare_deprecated_lint!\"):\n+                    comment = False\n+                    deprecated = True\n+                else:\n+                    last_comment = []\n+            if not comment:\n+                m = lintname_re.search(line)\n+                if m:\n+                    name = m.group(1).lower()\n+\n+                    if deprecated:\n+                        level = \"Deprecated\"\n+                    elif restriction:\n+                        level = \"Allow\"\n+                    else:\n+                        while True:\n+                            m = level_re.search(line)\n+                            if m:\n+                                level = m.group(0)\n+                                break\n+                            line = next(fp)\n+\n+                    log.info(\"found %s with level %s in %s\",\n+                             name, level, filepath)\n+                    lints.append(Lint(name, level, last_comment, filepath))\n+                    last_comment = []\n+                    comment = True\n+                if \"}\" in line:\n+                    log.warn(\"Warning: missing Lint-Name in %s\", filepath)\n+                    comment = True\n+\n+\n+def parse_configs(path):\n+    configs = {}\n+    with open(os.path.join(path, 'utils/conf.rs')) as fp:\n+        contents = fp.read()\n+\n+    match = re.search(conf_re, contents)\n+    confvars = re.findall(confvar_re, match.group(1))\n+\n+    for (lint, doc, name, default, ty) in confvars:\n+        configs[lint.lower()] = Config(name, ty, doc, default)\n+\n+    return configs\n+\n+\n+def parse_all(path=\"clippy_lints/src\"):\n+    lints = []\n+    for filename in os.listdir(path):\n+        if filename.endswith(\".rs\"):\n+            parse_lints(lints, os.path.join(path, filename))\n+    log.info(\"got %s lints\", len(lints))\n+\n+    configs = parse_configs(path)\n+    log.info(\"got %d configs\", len(configs))\n+\n+    return lints, configs"}, {"sha": "a9bd32f2098972b0a3e4e902a8739c41db865470", "filename": "util/update_wiki.py", "status": "modified", "additions": 35, "deletions": 119, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/9a221402e6086678c921b77eef4b676cbdefb8ae/util%2Fupdate_wiki.py", "raw_url": "https://github.com/rust-lang/rust/raw/9a221402e6086678c921b77eef4b676cbdefb8ae/util%2Fupdate_wiki.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_wiki.py?ref=9a221402e6086678c921b77eef4b676cbdefb8ae", "patch": "@@ -3,93 +3,11 @@\n # requires the checked out wiki in ../rust-clippy.wiki/\n # with -c option, print a warning and set exit status 1 if the file would be\n # changed.\n-import os\n+\n import re\n import sys\n \n-\n-level_re = re.compile(r'''(Forbid|Deny|Warn|Allow)''')\n-conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n-confvar_re = re.compile(r'''/// Lint: (\\w+). (.*).*\\n *\\(\"([^\"]*)\", (?:[^,]*), (.*) => (.*)\\),''')\n-\n-\n-def parse_path(p=\"clippy_lints/src\"):\n-    d = {}\n-    for f in os.listdir(p):\n-        if f.endswith(\".rs\"):\n-            parse_file(d, os.path.join(p, f))\n-    return (d, parse_conf(p))\n-\n-\n-def parse_conf(p):\n-    c = {}\n-    with open(p + '/utils/conf.rs') as f:\n-        f = f.read()\n-\n-        m = re.search(conf_re, f)\n-        m = m.groups()[0]\n-\n-        m = re.findall(confvar_re, m)\n-\n-        for (lint, doc, name, default, ty) in m:\n-            c[lint.lower()] = (name, ty, doc, default)\n-\n-    return c\n-\n-\n-def parse_file(d, f):\n-    last_comment = []\n-    comment = True\n-\n-    with open(f) as rs:\n-        for line in rs:\n-            if comment:\n-                if line.startswith(\"///\"):\n-                    if line.startswith(\"/// \"):\n-                        last_comment.append(line[4:])\n-                    else:\n-                        last_comment.append(line[3:])\n-                elif line.startswith(\"declare_lint!\"):\n-                    comment = False\n-                    deprecated = False\n-                    restriction = False\n-                elif line.startswith(\"declare_restriction_lint!\"):\n-                    comment = False\n-                    deprecated = False\n-                    restriction = True\n-                elif line.startswith(\"declare_deprecated_lint!\"):\n-                    comment = False\n-                    deprecated = True\n-                else:\n-                    last_comment = []\n-            if not comment:\n-                l = line.strip()\n-                m = re.search(r\"pub\\s+([A-Z_][A-Z_0-9]*)\", l)\n-\n-                if m:\n-                    name = m.group(1).lower()\n-\n-                    # Intentionally either a never looping or infinite loop\n-                    while not deprecated and not restriction:\n-                        m = re.search(level_re, line)\n-                        if m:\n-                            level = m.group(0)\n-                            break\n-\n-                        line = next(rs)\n-\n-                    if deprecated:\n-                        level = \"Deprecated\"\n-                    elif restriction:\n-                        level = \"Allow\"\n-\n-                    print(\"found %s with level %s in %s\" % (name, level, f))\n-                    d[name] = (level, last_comment)\n-                    last_comment = []\n-                    comment = True\n-                if \"}\" in l:\n-                    print(\"Warning: Missing Lint-Name in\", f)\n-                    comment = True\n+from lintlib import log, parse_all\n \n PREFIX = \"\"\"Welcome to the rust-clippy wiki!\n \n@@ -108,14 +26,13 @@ def parse_file(d, f):\n \n \"\"\"\n \n-\n-template = \"\"\"\\n# `%s`\n+TEMPLATE = \"\"\"\\n# `%s`\n \n **Default level:** %s\n \n %s\"\"\"\n \n-conf_template = \"\"\"\n+CONF_TEMPLATE = \"\"\"\n **Configuration:** This lint has the following configuration variables:\n \n * `%s: %s`: %s (defaults to `%s`).\n@@ -129,51 +46,50 @@ def level_message(level):\n         return \"\\n**Those lints are %s by default**:\\n\\n\" % level\n \n \n-def write_wiki_page(d, c, f):\n-    keys = list(d.keys())\n-    keys.sort()\n-    with open(f, \"w\") as w:\n-        w.write(PREFIX)\n+def write_wiki_page(lints, configs, filepath):\n+    lints.sort()\n+    with open(filepath, \"w\") as fp:\n+        fp.write(PREFIX)\n \n         for level in ('Deny', 'Warn', 'Allow', 'Deprecated'):\n-            w.write(level_message(level))\n-            for k in keys:\n-                if d[k][0] == level:\n-                    w.write(\"[`%s`](#%s)\\n\" % (k, k))\n+            fp.write(level_message(level))\n+            for lint in lints:\n+                if lint.level == level:\n+                    fp.write(\"[`%s`](#%s)\\n\" % (lint.name, lint.name))\n \n-        w.write(WARNING)\n-        for k in keys:\n-            w.write(template % (k, d[k][0], \"\".join(d[k][1])))\n+        fp.write(WARNING)\n+        for lint in lints:\n+            fp.write(TEMPLATE % (lint.name, lint.level, \"\".join(lint.doc)))\n \n-            if k in c:\n-                w.write(conf_template % c[k])\n+            if lint.name in configs:\n+                fp.write(CONF_TEMPLATE % configs[lint.name])\n \n \n-def check_wiki_page(d, c, f):\n-    errors = []\n-    with open(f) as w:\n-        for line in w:\n-            m = re.match(\"# `([a-z_]+)`\", line)\n+def check_wiki_page(lints, configs, filepath):\n+    lintdict = dict((lint.name, lint) for lint in lints)\n+    errors = False\n+    with open(filepath) as fp:\n+        for line in fp:\n+            m = re.match(\"# `([a-z_0-9]+)`\", line)\n             if m:\n-                v = d.pop(m.group(1), \"()\")\n-                if v == \"()\":\n-                    errors.append(\"Missing wiki entry: \" + m.group(1))\n-    keys = list(d.keys())\n-    keys.sort()\n-    for k in keys:\n-        errors.append(\"Spurious wiki entry: \" + k)\n+                v = lintdict.pop(m.group(1), None)\n+                if v is None:\n+                    log.error(\"Spurious wiki entry: %s\", m.group(1))\n+                    errors = True\n+    for n in sorted(lintdict):\n+        log.error(\"Missing wiki entry: %s\", n)\n+        errors = True\n     if errors:\n-        print(\"\\n\".join(errors))\n-        sys.exit(1)\n+        return 1\n \n \n def main():\n-    (d, c) = parse_path()\n-    print('Found %s lints' % len(d))\n+    lints, configs = parse_all()\n     if \"-c\" in sys.argv:\n-        check_wiki_page(d, c, \"../rust-clippy.wiki/Home.md\")\n+        check_wiki_page(lints, configs, \"../rust-clippy.wiki/Home.md\")\n     else:\n-        write_wiki_page(d, c, \"../rust-clippy.wiki/Home.md\")\n+        write_wiki_page(lints, configs, \"../rust-clippy.wiki/Home.md\")\n+\n \n if __name__ == \"__main__\":\n     main()"}]}