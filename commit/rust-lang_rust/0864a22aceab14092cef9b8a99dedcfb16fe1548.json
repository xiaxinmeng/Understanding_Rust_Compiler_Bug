{"sha": "0864a22aceab14092cef9b8a99dedcfb16fe1548", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NjRhMjJhY2VhYjE0MDkyY2VmOWI4YTk5ZGVkY2ZiMTZmZTE1NDg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-08T18:43:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-08T18:44:38Z"}, "message": "stdlib: Add an interior vector version of union-find for now", "tree": {"sha": "a2a659666e8205a271d9b49e449a95eb345862e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a659666e8205a271d9b49e449a95eb345862e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0864a22aceab14092cef9b8a99dedcfb16fe1548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0864a22aceab14092cef9b8a99dedcfb16fe1548", "html_url": "https://github.com/rust-lang/rust/commit/0864a22aceab14092cef9b8a99dedcfb16fe1548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0864a22aceab14092cef9b8a99dedcfb16fe1548/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7db25e8f60af6894556a14cd420f7523f33e89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7db25e8f60af6894556a14cd420f7523f33e89b", "html_url": "https://github.com/rust-lang/rust/commit/d7db25e8f60af6894556a14cd420f7523f33e89b"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "21fd2cbbbc6951d510a0caff66392a87eb8b8f75", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0864a22aceab14092cef9b8a99dedcfb16fe1548/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/0864a22aceab14092cef9b8a99dedcfb16fe1548/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=0864a22aceab14092cef9b8a99dedcfb16fe1548", "patch": "@@ -78,6 +78,7 @@ mod sort;\n mod sha1;\n mod ebml;\n mod ufind;\n+mod ufindivec;\n mod extfmt;\n mod box;\n mod getopts;"}, {"sha": "9759820222a874510e4562ad06a759a4f46936f7", "filename": "src/lib/ufindivec.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0864a22aceab14092cef9b8a99dedcfb16fe1548/src%2Flib%2Fufindivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0864a22aceab14092cef9b8a99dedcfb16fe1548/src%2Flib%2Fufindivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fufindivec.rs?ref=0864a22aceab14092cef9b8a99dedcfb16fe1548", "patch": "@@ -0,0 +1,54 @@\n+\n+import option::none;\n+import option::some;\n+\n+\n+// A very naive implementation of union-find with unsigned integer nodes.\n+// Maintains the invariant that the root of a node is always equal to or less\n+// than the node itself.\n+type node = option::t[uint];\n+\n+type ufind = rec(mutable node[mutable] nodes);\n+\n+fn make() -> ufind {\n+    ret rec(mutable nodes=~[mutable]);\n+}\n+\n+fn make_set(&ufind ufnd) -> uint {\n+    auto idx = ivec::len(ufnd.nodes);\n+    ufnd.nodes += ~[mutable none[uint]];\n+    ret idx;\n+}\n+\n+\n+/// Creates sets as necessary to ensure that least `n` sets are present in the\n+/// data structure.\n+fn grow(&ufind ufnd, uint n) {\n+    while (set_count(ufnd) < n) { make_set(ufnd); }\n+}\n+\n+fn find(&ufind ufnd, uint n) -> uint {\n+    alt (ufnd.nodes.(n)) {\n+        case (none) { ret n; }\n+        case (some(?m)) { auto m_ = m; be find(ufnd, m_); }\n+    }\n+}\n+\n+fn union(&ufind ufnd, uint m, uint n) {\n+    auto m_root = find(ufnd, m);\n+    auto n_root = find(ufnd, n);\n+    if (m_root < n_root) {\n+        ufnd.nodes.(n_root) = some[uint](m_root);\n+    } else if (m_root > n_root) { ufnd.nodes.(m_root) = some[uint](n_root); }\n+}\n+\n+fn set_count(&ufind ufnd) -> uint { ret ivec::len[node](ufnd.nodes); }\n+\n+\n+// Removes all sets with IDs greater than or equal to the given value.\n+fn prune(&ufind ufnd, uint n) {\n+    // TODO: Use \"slice\" once we get rid of \"mutable?\"\n+\n+    auto len = ivec::len[node](ufnd.nodes);\n+    while (len != n) { ivec::pop[node](ufnd.nodes); len -= 1u; }\n+}"}]}