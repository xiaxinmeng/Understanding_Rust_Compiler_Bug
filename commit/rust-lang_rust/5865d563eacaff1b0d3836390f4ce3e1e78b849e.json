{"sha": "5865d563eacaff1b0d3836390f4ce3e1e78b849e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NjVkNTYzZWFjYWZmMWIwZDM4MzYzOTBmNGNlM2UxZTc4Yjg0OWU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-30T23:17:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-27T18:20:28Z"}, "message": "Visit for hir::Ty.", "tree": {"sha": "0e177fb238d4b79279eb69cefba8044fa5a38a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e177fb238d4b79279eb69cefba8044fa5a38a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5865d563eacaff1b0d3836390f4ce3e1e78b849e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5865d563eacaff1b0d3836390f4ce3e1e78b849e", "html_url": "https://github.com/rust-lang/rust/commit/5865d563eacaff1b0d3836390f4ce3e1e78b849e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5865d563eacaff1b0d3836390f4ce3e1e78b849e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b87d5cdf1f60b14140b9c68c2ecb05f1a61e651", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b87d5cdf1f60b14140b9c68c2ecb05f1a61e651", "html_url": "https://github.com/rust-lang/rust/commit/6b87d5cdf1f60b14140b9c68c2ecb05f1a61e651"}], "stats": {"total": 115, "additions": 55, "deletions": 60}, "files": [{"sha": "c265b53b37d52c9e1287edf950ee36be13e156ea", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=5865d563eacaff1b0d3836390f4ce3e1e78b849e", "patch": "@@ -450,7 +450,7 @@ pub fn walk_poly_trait_ref<'v, V>(\n ) where\n     V: Visitor<'v>,\n {\n-    walk_list!(visitor, visit_generic_param, &trait_ref.bound_generic_params);\n+    walk_list!(visitor, visit_generic_param, trait_ref.bound_generic_params);\n     visitor.visit_trait_ref(&trait_ref.trait_ref);\n }\n \n@@ -509,7 +509,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             visitor.visit_ty(ty);\n             visitor.visit_generics(generics)\n         }\n-        ItemKind::OpaqueTy(OpaqueTy { ref generics, ref bounds, .. }) => {\n+        ItemKind::OpaqueTy(OpaqueTy { ref generics, bounds, .. }) => {\n             visitor.visit_id(item.hir_id);\n             walk_generics(visitor, generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n@@ -538,13 +538,13 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n                 item.span,\n             );\n         }\n-        ItemKind::Trait(.., ref generics, ref bounds, trait_item_refs) => {\n+        ItemKind::Trait(.., ref generics, bounds, trait_item_refs) => {\n             visitor.visit_id(item.hir_id);\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item_ref, trait_item_refs);\n         }\n-        ItemKind::TraitAlias(ref generics, ref bounds) => {\n+        ItemKind::TraitAlias(ref generics, bounds) => {\n             visitor.visit_id(item.hir_id);\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n@@ -598,25 +598,25 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n             visitor.visit_ty(&mutable_type.ty)\n         }\n         TyKind::Never => {}\n-        TyKind::Tup(ref tuple_element_types) => {\n+        TyKind::Tup(tuple_element_types) => {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }\n         TyKind::BareFn(ref function_declaration) => {\n-            walk_list!(visitor, visit_generic_param, &function_declaration.generic_params);\n+            walk_list!(visitor, visit_generic_param, function_declaration.generic_params);\n             visitor.visit_fn_decl(&function_declaration.decl);\n         }\n         TyKind::Path(ref qpath) => {\n             visitor.visit_qpath(qpath, typ.hir_id, typ.span);\n         }\n-        TyKind::Def(item_id, ref lifetimes) => {\n+        TyKind::Def(item_id, lifetimes) => {\n             visitor.visit_nested_item(item_id);\n             walk_list!(visitor, visit_generic_arg, lifetimes);\n         }\n         TyKind::Array(ref ty, ref length) => {\n             visitor.visit_ty(ty);\n             visitor.visit_anon_const(length)\n         }\n-        TyKind::TraitObject(ref bounds, ref lifetime) => {\n+        TyKind::TraitObject(bounds, ref lifetime) => {\n             for bound in bounds {\n                 visitor.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n             }\n@@ -648,7 +648,7 @@ pub fn walk_qpath<'v, V: Visitor<'v>>(\n }\n \n pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>) {\n-    for segment in &path.segments {\n+    for segment in path.segments {\n         visitor.visit_path_segment(path.span, segment);\n     }\n }\n@@ -673,7 +673,7 @@ pub fn walk_generic_args<'v, V: Visitor<'v>>(\n     generic_args: &'v GenericArgs<'v>,\n ) {\n     walk_list!(visitor, visit_generic_arg, &generic_args.args);\n-    walk_list!(visitor, visit_assoc_type_binding, &generic_args.bindings);\n+    walk_list!(visitor, visit_assoc_type_binding, generic_args.bindings);\n }\n \n pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(\n@@ -686,7 +686,7 @@ pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(\n         TypeBindingKind::Equality { ref ty } => {\n             visitor.visit_ty(ty);\n         }\n-        TypeBindingKind::Constraint { ref bounds } => {\n+        TypeBindingKind::Constraint { bounds } => {\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n     }\n@@ -766,7 +766,7 @@ pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericB\n \n pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v GenericParam<'v>) {\n     visitor.visit_id(param.hir_id);\n-    walk_list!(visitor, visit_attribute, &param.attrs);\n+    walk_list!(visitor, visit_attribute, param.attrs);\n     match param.name {\n         ParamName::Plain(ident) => visitor.visit_ident(ident),\n         ParamName::Error | ParamName::Fresh(_) => {}\n@@ -776,12 +776,12 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n         GenericParamKind::Type { ref default, .. } => walk_list!(visitor, visit_ty, default),\n         GenericParamKind::Const { ref ty } => visitor.visit_ty(ty),\n     }\n-    walk_list!(visitor, visit_param_bound, &param.bounds);\n+    walk_list!(visitor, visit_param_bound, param.bounds);\n }\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics<'v>) {\n     walk_list!(visitor, visit_generic_param, &generics.params);\n-    walk_list!(visitor, visit_where_predicate, &generics.where_clause.predicates);\n+    walk_list!(visitor, visit_where_predicate, generics.where_clause.predicates);\n }\n \n pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n@@ -791,17 +791,15 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n     match predicate {\n         &WherePredicate::BoundPredicate(WhereBoundPredicate {\n             ref bounded_ty,\n-            ref bounds,\n-            ref bound_generic_params,\n+            bounds,\n+            bound_generic_params,\n             ..\n         }) => {\n             visitor.visit_ty(bounded_ty);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n         }\n-        &WherePredicate::RegionPredicate(WhereRegionPredicate {\n-            ref lifetime, ref bounds, ..\n-        }) => {\n+        &WherePredicate::RegionPredicate(WhereRegionPredicate { ref lifetime, bounds, .. }) => {\n             visitor.visit_lifetime(lifetime);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n@@ -822,7 +820,7 @@ pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionR\n }\n \n pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl<'v>) {\n-    for ty in &function_declaration.inputs {\n+    for ty in function_declaration.inputs {\n         visitor.visit_ty(ty)\n     }\n     walk_fn_ret_ty(visitor, &function_declaration.output)\n@@ -877,7 +875,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n                 trait_item.hir_id,\n             );\n         }\n-        TraitItemKind::Type(ref bounds, ref default) => {\n+        TraitItemKind::Type(bounds, ref default) => {\n             visitor.visit_id(trait_item.hir_id);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n@@ -931,7 +929,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n             visitor.visit_id(impl_item.hir_id);\n             visitor.visit_ty(ty);\n         }\n-        ImplItemKind::OpaqueTy(ref bounds) => {\n+        ImplItemKind::OpaqueTy(bounds) => {\n             visitor.visit_id(impl_item.hir_id);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }"}, {"sha": "a0b45639be9c2c8d5da96863532482614c9fae83", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5865d563eacaff1b0d3836390f4ce3e1e78b849e", "patch": "@@ -443,7 +443,7 @@ pub struct GenericArgs<'hir> {\n \n impl GenericArgs<'_> {\n     pub const fn none() -> Self {\n-        Self { args: HirVec::new(), bindings: HirVec::new(), parenthesized: false }\n+        Self { args: HirVec::new(), bindings: &[], parenthesized: false }\n     }\n \n     pub fn is_empty(&self) -> bool {\n@@ -580,7 +580,7 @@ impl Generics<'hir> {\n     pub const fn empty() -> Generics<'hir> {\n         Generics {\n             params: HirVec::new(),\n-            where_clause: WhereClause { predicates: HirVec::new(), span: DUMMY_SP },\n+            where_clause: WhereClause { predicates: &[], span: DUMMY_SP },\n             span: DUMMY_SP,\n         }\n     }"}, {"sha": "61afdab3e1cf6dc7f48faceae46bb0592be10d80", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=5865d563eacaff1b0d3836390f4ce3e1e78b849e", "patch": "@@ -10,6 +10,7 @@ use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n \n use crate::hir;\n+use crate::hir::HirVec;\n use crate::hir::{GenericArg, GenericParam, GenericParamKind};\n use crate::hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n \n@@ -307,7 +308,7 @@ impl<'a> State<'a> {\n             }\n             hir::TyKind::Def(..) => {}\n             hir::TyKind::Path(ref qpath) => self.print_qpath(qpath, false),\n-            hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n+            hir::TyKind::TraitObject(bounds, ref lifetime) => {\n                 let mut first = true;\n                 for bound in bounds {\n                     if first {\n@@ -418,7 +419,7 @@ impl<'a> State<'a> {\n     fn print_associated_type(\n         &mut self,\n         ident: ast::Ident,\n-        bounds: Option<&hir::GenericBounds<'_>>,\n+        bounds: Option<hir::GenericBounds<'_>>,\n         ty: Option<&hir::Ty<'_>>,\n     ) {\n         self.word_space(\"type\");\n@@ -891,7 +892,7 @@ impl<'a> State<'a> {\n             hir::ImplItemKind::TyAlias(ref ty) => {\n                 self.print_associated_type(ii.ident, None, Some(ty));\n             }\n-            hir::ImplItemKind::OpaqueTy(ref bounds) => {\n+            hir::ImplItemKind::OpaqueTy(bounds) => {\n                 self.word_space(\"type\");\n                 self.print_ident(ii.ident);\n                 self.print_bounds(\"= impl\", bounds);\n@@ -1586,7 +1587,7 @@ impl<'a> State<'a> {\n                         self.word_space(\"=\");\n                         self.print_type(ty);\n                     }\n-                    hir::TypeBindingKind::Constraint { ref bounds } => {\n+                    hir::TypeBindingKind::Constraint { bounds } => {\n                         self.print_bounds(\":\", bounds);\n                     }\n                 }\n@@ -1953,9 +1954,9 @@ impl<'a> State<'a> {\n         match param.kind {\n             GenericParamKind::Lifetime { .. } => {\n                 let mut sep = \":\";\n-                for bound in &param.bounds {\n+                for bound in param.bounds {\n                     match bound {\n-                        GenericBound::Outlives(lt) => {\n+                        GenericBound::Outlives(ref lt) => {\n                             self.s.word(sep);\n                             self.print_lifetime(lt);\n                             sep = \"+\";\n@@ -1965,7 +1966,7 @@ impl<'a> State<'a> {\n                 }\n             }\n             GenericParamKind::Type { ref default, .. } => {\n-                self.print_bounds(\":\", &param.bounds);\n+                self.print_bounds(\":\", param.bounds);\n                 match default {\n                     Some(default) => {\n                         self.s.space();\n@@ -2003,7 +2004,7 @@ impl<'a> State<'a> {\n                 &hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                     ref bound_generic_params,\n                     ref bounded_ty,\n-                    ref bounds,\n+                    bounds,\n                     ..\n                 }) => {\n                     self.print_formal_generic_params(bound_generic_params);\n@@ -2096,11 +2097,8 @@ impl<'a> State<'a> {\n             self.print_generic_params(generic_params);\n         }\n         let generics = hir::Generics {\n-            params: hir::HirVec::new(),\n-            where_clause: hir::WhereClause {\n-                predicates: hir::HirVec::new(),\n-                span: syntax_pos::DUMMY_SP,\n-            },\n+            params: HirVec::new(),\n+            where_clause: hir::WhereClause { predicates: &[], span: syntax_pos::DUMMY_SP },\n             span: syntax_pos::DUMMY_SP,\n         };\n         self.print_fn("}, {"sha": "0b226336faca39ea5d4961ad0c457926271ab432", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=5865d563eacaff1b0d3836390f4ce3e1e78b849e", "patch": "@@ -103,7 +103,7 @@ impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                 return;\n             }\n \n-            hir::TyKind::TraitObject(ref bounds, _) => {\n+            hir::TyKind::TraitObject(bounds, _) => {\n                 for bound in bounds {\n                     self.current_index.shift_in(1);\n                     self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);"}, {"sha": "29e3bcfe6a15ceca1a1bef3662149b8b5a9c74ec", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5865d563eacaff1b0d3836390f4ce3e1e78b849e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=5865d563eacaff1b0d3836390f4ce3e1e78b849e", "patch": "@@ -8,7 +8,6 @@\n use crate::hir::def::{DefKind, Res};\n use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use crate::hir::map::Map;\n-use crate::hir::ptr::P;\n use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName, QPath};\n use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n \n@@ -549,7 +548,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 });\n                 self.is_in_fn_syntax = was_in_fn_syntax;\n             }\n-            hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n+            hir::TyKind::TraitObject(bounds, ref lifetime) => {\n                 debug!(\"visit_ty: TraitObject(bounds={:?}, lifetime={:?})\", bounds, lifetime);\n                 for bound in bounds {\n                     self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n@@ -590,7 +589,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 };\n                 self.with(scope, |_, this| this.visit_ty(&mt.ty));\n             }\n-            hir::TyKind::Def(item_id, ref lifetimes) => {\n+            hir::TyKind::Def(item_id, lifetimes) => {\n                 // Resolve the lifetimes in the bounds to the lifetime defs in the generics.\n                 // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n                 // `type MyAnonTy<'b> = impl MyTrait<'b>;`\n@@ -604,7 +603,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         return;\n                     }\n                     // RPIT (return position impl trait)\n-                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { ref generics, ref bounds, .. }) => {\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { ref generics, bounds, .. }) => {\n                         (generics, bounds)\n                     }\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n@@ -738,7 +737,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     |this| intravisit::walk_trait_item(this, trait_item),\n                 );\n             }\n-            Type(ref bounds, ref ty) => {\n+            Type(bounds, ref ty) => {\n                 let generics = &trait_item.generics;\n                 let mut index = self.next_early_index();\n                 debug!(\"visit_ty: index = {}\", index);\n@@ -823,7 +822,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     this.visit_ty(ty);\n                 });\n             }\n-            OpaqueTy(ref bounds) => {\n+            OpaqueTy(bounds) => {\n                 let generics = &impl_item.generics;\n                 let mut index = self.next_early_index();\n                 let mut next_early_index = index;\n@@ -904,22 +903,22 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => {}\n                 GenericParamKind::Type { ref default, .. } => {\n-                    walk_list!(self, visit_param_bound, &param.bounds);\n+                    walk_list!(self, visit_param_bound, param.bounds);\n                     if let Some(ref ty) = default {\n                         self.visit_ty(&ty);\n                     }\n                 }\n                 GenericParamKind::Const { ref ty, .. } => {\n-                    walk_list!(self, visit_param_bound, &param.bounds);\n+                    walk_list!(self, visit_param_bound, param.bounds);\n                     self.visit_ty(&ty);\n                 }\n             }\n         }\n-        for predicate in &generics.where_clause.predicates {\n+        for predicate in generics.where_clause.predicates {\n             match predicate {\n                 &hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                     ref bounded_ty,\n-                    ref bounds,\n+                    bounds,\n                     ref bound_generic_params,\n                     ..\n                 }) => {\n@@ -956,7 +955,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 }\n                 &hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                     ref lifetime,\n-                    ref bounds,\n+                    bounds,\n                     ..\n                 }) => {\n                     self.visit_lifetime(lifetime);\n@@ -1014,7 +1013,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             };\n             self.with(scope, |old_scope, this| {\n                 this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n-                walk_list!(this, visit_generic_param, &trait_ref.bound_generic_params);\n+                walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n                 this.visit_trait_ref(&trait_ref.trait_ref)\n             })\n         } else {\n@@ -1059,7 +1058,7 @@ impl ShadowKind {\n     }\n }\n \n-fn check_mixed_explicit_and_in_band_defs(tcx: TyCtxt<'_>, params: &P<[hir::GenericParam<'_>]>) {\n+fn check_mixed_explicit_and_in_band_defs(tcx: TyCtxt<'_>, params: &[hir::GenericParam<'_>]) {\n     let lifetime_params: Vec<_> = params\n         .iter()\n         .filter_map(|param| match param.kind {\n@@ -1273,7 +1272,7 @@ fn object_lifetime_defaults_for_item(\n                 add_bounds(&mut set, &param.bounds);\n \n                 let param_def_id = tcx.hir().local_def_id(param.hir_id);\n-                for predicate in &generics.where_clause.predicates {\n+                for predicate in generics.where_clause.predicates {\n                     // Look for `type: ...` where clauses.\n                     let data = match *predicate {\n                         hir::WherePredicate::BoundPredicate(ref data) => data,\n@@ -1421,7 +1420,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         let mut remove_use = None;\n         let mut elide_use = None;\n-        let mut find_arg_use_span = |inputs: &hir::HirVec<hir::Ty<'_>>| {\n+        let mut find_arg_use_span = |inputs: &[hir::Ty<'_>]| {\n             for input in inputs {\n                 match input.kind {\n                     hir::TyKind::Rptr(lt, _) => {\n@@ -1463,12 +1462,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 match parent {\n                     Node::Item(item) => {\n                         if let hir::ItemKind::Fn(sig, _, _) = &item.kind {\n-                            find_arg_use_span(&sig.decl.inputs);\n+                            find_arg_use_span(sig.decl.inputs);\n                         }\n                     }\n                     Node::ImplItem(impl_item) => {\n                         if let hir::ImplItemKind::Method(sig, _) = &impl_item.kind {\n-                            find_arg_use_span(&sig.decl.inputs);\n+                            find_arg_use_span(sig.decl.inputs);\n                         }\n                     }\n                     _ => {}\n@@ -2045,7 +2044,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         });\n \n         // Resolve lifetimes found in the type `XX` from `Item = XX` bindings.\n-        for b in &generic_args.bindings {\n+        for b in generic_args.bindings {\n             let scope = Scope::ObjectLifetimeDefault {\n                 lifetime: if has_lifetime_parameter { None } else { Some(Region::Static) },\n                 s: self.scope,\n@@ -2269,7 +2268,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     self.outer_index.shift_in(1);\n                 }\n                 match ty.kind {\n-                    hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n+                    hir::TyKind::TraitObject(bounds, ref lifetime) => {\n                         for bound in bounds {\n                             self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n                         }\n@@ -2583,9 +2582,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             // It is a soft error to shadow a lifetime within a parent scope.\n             self.check_lifetime_param_for_shadowing(old_scope, &lifetime_i);\n \n-            for bound in &lifetime_i.bounds {\n+            for bound in lifetime_i.bounds {\n                 match bound {\n-                    hir::GenericBound::Outlives(lt) => match lt.name {\n+                    hir::GenericBound::Outlives(ref lt) => match lt.name {\n                         hir::LifetimeName::Underscore => self.tcx.sess.delay_span_bug(\n                             lt.span,\n                             \"use of `'_` in illegal place, but not caught by lowering\",\n@@ -2774,7 +2773,7 @@ fn insert_late_bound_lifetimes(\n     debug!(\"insert_late_bound_lifetimes(decl={:?}, generics={:?})\", decl, generics);\n \n     let mut constrained_by_input = ConstrainedCollector::default();\n-    for arg_ty in &decl.inputs {\n+    for arg_ty in decl.inputs {\n         constrained_by_input.visit_ty(arg_ty);\n     }\n "}]}