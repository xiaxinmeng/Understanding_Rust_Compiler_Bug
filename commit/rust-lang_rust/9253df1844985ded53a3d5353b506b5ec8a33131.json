{"sha": "9253df1844985ded53a3d5353b506b5ec8a33131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNTNkZjE4NDQ5ODVkZWQ1M2EzZDUzNTNiNTA2YjVlYzhhMzMxMzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:46:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:33Z"}, "message": "librustc: De-`@mut` `ImportResolution::type_target`", "tree": {"sha": "df627da90f959e57064bb8e816db73b074b51adf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df627da90f959e57064bb8e816db73b074b51adf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9253df1844985ded53a3d5353b506b5ec8a33131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9253df1844985ded53a3d5353b506b5ec8a33131", "html_url": "https://github.com/rust-lang/rust/commit/9253df1844985ded53a3d5353b506b5ec8a33131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9253df1844985ded53a3d5353b506b5ec8a33131/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c10d7177db81bd207705a92f6453f82ab11521a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c10d7177db81bd207705a92f6453f82ab11521a7", "html_url": "https://github.com/rust-lang/rust/commit/c10d7177db81bd207705a92f6453f82ab11521a7"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "9cca8b9dbfb492f88e2895760357f1f0107f2c7f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9253df1844985ded53a3d5353b506b5ec8a33131/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9253df1844985ded53a3d5353b506b5ec8a33131/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9253df1844985ded53a3d5353b506b5ec8a33131", "patch": "@@ -361,7 +361,7 @@ struct ImportResolution {\n     value_id: Cell<NodeId>,\n \n     /// The type that this `use` directive names, if there is one.\n-    type_target: Option<Target>,\n+    type_target: RefCell<Option<Target>>,\n     /// The source node of the `use` directive leading to the type target\n     /// being non-none\n     type_id: NodeId,\n@@ -374,15 +374,15 @@ impl ImportResolution {\n             value_id: Cell::new(id),\n             outstanding_references: Cell::new(0),\n             value_target: RefCell::new(None),\n-            type_target: None,\n+            type_target: RefCell::new(None),\n             is_public: Cell::new(is_public),\n         }\n     }\n \n     fn target_for_namespace(&self, namespace: Namespace)\n                                 -> Option<Target> {\n         match namespace {\n-            TypeNS      => return self.type_target,\n+            TypeNS      => return self.type_target.get(),\n             ValueNS     => return self.value_target.get(),\n         }\n     }\n@@ -2433,8 +2433,8 @@ impl Resolver {\n             BoundResult(target_module, name_bindings) => {\n                 debug!(\"(resolving single import) found type target: {:?}\",\n                         name_bindings.type_def.get().unwrap().type_def);\n-                import_resolution.type_target =\n-                    Some(Target::new(target_module, name_bindings));\n+                import_resolution.type_target.set(\n+                    Some(Target::new(target_module, name_bindings)));\n                 import_resolution.type_id = directive.id;\n                 used_public = name_bindings.defined_in_public_namespace(TypeNS);\n             }\n@@ -2445,7 +2445,7 @@ impl Resolver {\n         }\n \n         if import_resolution.value_target.get().is_none() &&\n-           import_resolution.type_target.is_none() {\n+           import_resolution.type_target.get().is_none() {\n             let msg = format!(\"unresolved import: there is no \\\n                                `{}` in `{}`\",\n                               self.session.str_of(source),\n@@ -2472,7 +2472,7 @@ impl Resolver {\n             }\n             None => {}\n         }\n-        match import_resolution.type_target {\n+        match import_resolution.type_target.get() {\n             Some(target) => {\n                 let def = target.bindings.def_for_namespace(TypeNS).unwrap();\n                 self.def_map.insert(directive.id, def);\n@@ -2519,7 +2519,7 @@ impl Resolver {\n                                                                    .iter() {\n             debug!(\"(resolving glob import) writing module resolution \\\n                     {:?} into `{}`\",\n-                   target_import_resolution.type_target.is_none(),\n+                   target_import_resolution.type_target.get().is_none(),\n                    self.module_to_str(module_));\n \n             if !target_import_resolution.is_public.get() {\n@@ -2537,8 +2537,8 @@ impl Resolver {\n                         @mut ImportResolution::new(id, is_public);\n                     new_import_resolution.value_target.set(\n                         target_import_resolution.value_target.get());\n-                    new_import_resolution.type_target =\n-                        target_import_resolution.type_target;\n+                    new_import_resolution.type_target.set(\n+                        target_import_resolution.type_target.get());\n \n                     import_resolutions.get().insert\n                         (*ident, new_import_resolution);\n@@ -2556,13 +2556,13 @@ impl Resolver {\n                                 Some(value_target));\n                         }\n                     }\n-                    match target_import_resolution.type_target {\n+                    match target_import_resolution.type_target.get() {\n                         None => {\n                             // Continue.\n                         }\n                         Some(type_target) => {\n-                            dest_import_resolution.type_target =\n-                                Some(type_target);\n+                            dest_import_resolution.type_target.set(\n+                                Some(type_target));\n                         }\n                     }\n                     dest_import_resolution.is_public.set(is_public);\n@@ -2602,8 +2602,8 @@ impl Resolver {\n             }\n             if name_bindings.defined_in_public_namespace(TypeNS) {\n                 debug!(\"(resolving glob import) ... for type target\");\n-                dest_import_resolution.type_target =\n-                    Some(Target::new(containing_module, name_bindings));\n+                dest_import_resolution.type_target.set(\n+                    Some(Target::new(containing_module, name_bindings)));\n                 dest_import_resolution.type_id = id;\n             }\n             dest_import_resolution.is_public.set(is_public);"}]}