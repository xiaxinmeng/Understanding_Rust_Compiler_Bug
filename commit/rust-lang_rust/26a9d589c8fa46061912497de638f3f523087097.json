{"sha": "26a9d589c8fa46061912497de638f3f523087097", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YTlkNTg5YzhmYTQ2MDYxOTEyNDk3ZGU2MzhmM2Y1MjMwODcwOTc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-07T23:05:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-07T23:05:39Z"}, "message": "Rollup merge of #51283 - kennytm:fix-51279-preempt-the-warning-song-and-dance, r=nikomatsakis\n\nDeny #[cfg] and #[cfg_attr] on generic parameters.\n\nFix #51279.\n\nAttributes on generic parameters are not expanded, meaning `#[cfg]`, `#[cfg_attr]` and attribute proc macros are entirely ignored on them.\n\nThis PR makes using the first two attributes an error, because if they are correctly expanded will affect the AST and change code behavior.\n\nI'm beta-nominating this, because generic parameter attributes are stabilizing in 1.27, and if we did not reserve their usage, we may never be able to repurpose the meaning of these attributes in the Rust 2015 edition.", "tree": {"sha": "57bc9392a285c70b1f92d22cacc0617eff554515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57bc9392a285c70b1f92d22cacc0617eff554515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26a9d589c8fa46061912497de638f3f523087097", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbGbpECRBK7hj4Ov3rIwAAdHIIAEGhdQIMdkp7VAUTJb6Q74cm\n/wle7jadtetQ9pgSAlzpKGlIf8ctrVWV6A+eudbup1ZUbqIDyr/oNOeuA+3Icwfc\nFBQ1cg8jHdIyV1Tz/V8pfD62KZoMKGWgRscDJmItgznuYd0YLRdBD70+4W+IgeRt\nx2Q+CBIZs91HyxKwGrcLe+iWckLoaqkN38V9ncaQyZh9PF61bghMmJQPfSzvBjJ8\nQ9A3JPRQkNcpBIcRddiCyhN4QIg5l15y+/NVZhKGIDjbuRfhl/ZFBSmkwdJMQ4PD\nuMlyK1KVhfZ/M3rdl0MnoEJ7e0z/0OHUjHsck+uqmQwqJqc/Y/R6s82nuZjF5H8=\n=OjZO\n-----END PGP SIGNATURE-----\n", "payload": "tree 57bc9392a285c70b1f92d22cacc0617eff554515\nparent 0bc15ed7c0878f9f314bdd1e02175574637602a5\nparent c9cb806689a9691e2a29836e2c597751cdbcfdc8\nauthor kennytm <kennytm@gmail.com> 1528412739 +0800\ncommitter GitHub <noreply@github.com> 1528412739 +0800\n\nRollup merge of #51283 - kennytm:fix-51279-preempt-the-warning-song-and-dance, r=nikomatsakis\n\nDeny #[cfg] and #[cfg_attr] on generic parameters.\n\nFix #51279.\n\nAttributes on generic parameters are not expanded, meaning `#[cfg]`, `#[cfg_attr]` and attribute proc macros are entirely ignored on them.\n\nThis PR makes using the first two attributes an error, because if they are correctly expanded will affect the AST and change code behavior.\n\nI'm beta-nominating this, because generic parameter attributes are stabilizing in 1.27, and if we did not reserve their usage, we may never be able to repurpose the meaning of these attributes in the Rust 2015 edition.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26a9d589c8fa46061912497de638f3f523087097", "html_url": "https://github.com/rust-lang/rust/commit/26a9d589c8fa46061912497de638f3f523087097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26a9d589c8fa46061912497de638f3f523087097/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc15ed7c0878f9f314bdd1e02175574637602a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc15ed7c0878f9f314bdd1e02175574637602a5", "html_url": "https://github.com/rust-lang/rust/commit/0bc15ed7c0878f9f314bdd1e02175574637602a5"}, {"sha": "c9cb806689a9691e2a29836e2c597751cdbcfdc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cb806689a9691e2a29836e2c597751cdbcfdc8", "html_url": "https://github.com/rust-lang/rust/commit/c9cb806689a9691e2a29836e2c597751cdbcfdc8"}], "stats": {"total": 127, "additions": 124, "deletions": 3}, "files": [{"sha": "2389ed799cfcc268301e70275aac9b3c190f029f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26a9d589c8fa46061912497de638f3f523087097/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a9d589c8fa46061912497de638f3f523087097/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=26a9d589c8fa46061912497de638f3f523087097", "patch": "@@ -17,7 +17,7 @@ pub use self::IntType::*;\n use ast;\n use ast::{AttrId, Attribute, Name, Ident, Path, PathSegment};\n use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n-use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind};\n+use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind, GenericParam};\n use codemap::{BytePos, Spanned, respan, dummy_spanned};\n use syntax_pos::Span;\n use errors::{Applicability, Handler};\n@@ -1444,6 +1444,22 @@ impl HasAttrs for Stmt {\n     }\n }\n \n+impl HasAttrs for GenericParam {\n+    fn attrs(&self) -> &[ast::Attribute] {\n+        match self {\n+            GenericParam::Lifetime(lifetime) => lifetime.attrs(),\n+            GenericParam::Type(ty) => ty.attrs(),\n+        }\n+    }\n+\n+    fn map_attrs<F: FnOnce(Vec<Attribute>) -> Vec<Attribute>>(self, f: F) -> Self {\n+        match self {\n+            GenericParam::Lifetime(lifetime) => GenericParam::Lifetime(lifetime.map_attrs(f)),\n+            GenericParam::Type(ty) => GenericParam::Type(ty.map_attrs(f)),\n+        }\n+    }\n+}\n+\n macro_rules! derive_has_attrs {\n     ($($ty:path),*) => { $(\n         impl HasAttrs for $ty {\n@@ -1463,5 +1479,5 @@ macro_rules! derive_has_attrs {\n \n derive_has_attrs! {\n     Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm,\n-    ast::Field, ast::FieldPat, ast::Variant_\n+    ast::Field, ast::FieldPat, ast::Variant_, ast::LifetimeDef, ast::TyParam\n }"}, {"sha": "3364378913952deabb76eacf3ae07d463028beb0", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26a9d589c8fa46061912497de638f3f523087097/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a9d589c8fa46061912497de638f3f523087097/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=26a9d589c8fa46061912497de638f3f523087097", "patch": "@@ -278,6 +278,22 @@ impl<'a> StripUnconfigured<'a> {\n             pattern\n         })\n     }\n+\n+    // deny #[cfg] on generic parameters until we decide what to do with it.\n+    // see issue #51279.\n+    pub fn disallow_cfg_on_generic_param(&mut self, param: &ast::GenericParam) {\n+        for attr in param.attrs() {\n+            let offending_attr = if attr.check_name(\"cfg\") {\n+                \"cfg\"\n+            } else if attr.check_name(\"cfg_attr\") {\n+                \"cfg_attr\"\n+            } else {\n+                continue;\n+            };\n+            let msg = format!(\"#[{}] cannot be applied on a generic parameter\", offending_attr);\n+            self.sess.span_diagnostic.span_err(attr.span, &msg);\n+        }\n+    }\n }\n \n impl<'a> fold::Folder for StripUnconfigured<'a> {"}, {"sha": "29030783ca6b848d0c253c019fb30f126f76e4a7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26a9d589c8fa46061912497de638f3f523087097/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a9d589c8fa46061912497de638f3f523087097/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=26a9d589c8fa46061912497de638f3f523087097", "patch": "@@ -1412,6 +1412,11 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         }\n     }\n \n+    fn fold_generic_param(&mut self, param: ast::GenericParam) -> ast::GenericParam {\n+        self.cfg.disallow_cfg_on_generic_param(&param);\n+        noop_fold_generic_param(param, self)\n+    }\n+\n     fn fold_attribute(&mut self, at: ast::Attribute) -> Option<ast::Attribute> {\n         // turn `#[doc(include=\"filename\")]` attributes into `#[doc(include(file=\"filename\",\n         // contents=\"file contents\")]` attributes"}, {"sha": "4d2a152df6eb9eb9124c9dfbe7bbd7574ead3413", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a9d589c8fa46061912497de638f3f523087097/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a9d589c8fa46061912497de638f3f523087097/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=26a9d589c8fa46061912497de638f3f523087097", "patch": "@@ -605,7 +605,7 @@ declare_features! (\n     // allow `'_` placeholder lifetimes\n     (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n     // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n-    (accepted, generic_param_attrs, \"1.26.0\", Some(48848), None),\n+    (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n     // Allows cfg(target_feature = \"...\").\n     (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n     // Allows #[target_feature(...)]"}, {"sha": "4639d73e44d3dc86028c248d57a4cadfc4f1d84c", "filename": "src/test/ui/issue-51279.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/26a9d589c8fa46061912497de638f3f523087097/src%2Ftest%2Fui%2Fissue-51279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a9d589c8fa46061912497de638f3f523087097/src%2Ftest%2Fui%2Fissue-51279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51279.rs?ref=26a9d589c8fa46061912497de638f3f523087097", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n+//~^ ERROR #[cfg] cannot be applied on a generic parameter\n+//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n+\n+impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n+//~^ ERROR #[cfg] cannot be applied on a generic parameter\n+//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n+\n+pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n+//~^ ERROR #[cfg] cannot be applied on a generic parameter\n+//~^^ ERROR #[cfg] cannot be applied on a generic parameter\n+\n+#[cfg(none)]\n+pub struct Y<#[cfg(none)] T>(T); // shouldn't care when the entire item is stripped out\n+\n+struct M<T>(*const T);\n+\n+unsafe impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n+    //~^ ERROR #[cfg_attr] cannot be applied on a generic parameter\n+    fn drop(&mut self) {}\n+}\n+\n+type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n+//~^ ERROR #[cfg] cannot be applied on a generic parameter"}, {"sha": "38d5a5acc50fe7b4e736cecdd16d97aa0e76da2e", "filename": "src/test/ui/issue-51279.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/26a9d589c8fa46061912497de638f3f523087097/src%2Ftest%2Fui%2Fissue-51279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26a9d589c8fa46061912497de638f3f523087097/src%2Ftest%2Fui%2Fissue-51279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51279.stderr?ref=26a9d589c8fa46061912497de638f3f523087097", "patch": "@@ -0,0 +1,50 @@\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:11:14\n+   |\n+LL | pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n+   |              ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:11:31\n+   |\n+LL | pub struct X<#[cfg(none)] 'a, #[cfg(none)] T>(&'a T);\n+   |                               ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:15:6\n+   |\n+LL | impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n+   |      ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:15:23\n+   |\n+LL | impl<#[cfg(none)] 'a, #[cfg(none)] T> X<'a, T> {}\n+   |                       ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:19:10\n+   |\n+LL | pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n+   |          ^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:19:27\n+   |\n+LL | pub fn f<#[cfg(none)] 'a, #[cfg(none)] T>(_: &'a T) {}\n+   |                           ^^^^^^^^^^^^\n+\n+error: #[cfg_attr] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:28:13\n+   |\n+LL | unsafe impl<#[cfg_attr(none, may_dangle)] T> Drop for M<T> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: #[cfg] cannot be applied on a generic parameter\n+  --> $DIR/issue-51279.rs:33:23\n+   |\n+LL | type Z<#[ignored] 'a, #[cfg(none)] T> = X<'a, T>;\n+   |                       ^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}]}