{"sha": "6f4726541e56ae02a7e31cc42d1d14df81848c58", "node_id": "C_kwDOAAsO6NoAKDZmNDcyNjU0MWU1NmFlMDJhN2UzMWNjNDJkMWQxNGRmODE4NDhjNTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-03T20:57:22Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-03T20:57:22Z"}, "message": "more clippy::perf fixes", "tree": {"sha": "ed72c3b1a5126739e25a771c9a8e8a98d6fec63a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed72c3b1a5126739e25a771c9a8e8a98d6fec63a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f4726541e56ae02a7e31cc42d1d14df81848c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4726541e56ae02a7e31cc42d1d14df81848c58", "html_url": "https://github.com/rust-lang/rust/commit/6f4726541e56ae02a7e31cc42d1d14df81848c58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f4726541e56ae02a7e31cc42d1d14df81848c58/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec689432fac6720b2f18101ac28a21add98b1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec689432fac6720b2f18101ac28a21add98b1b8", "html_url": "https://github.com/rust-lang/rust/commit/dec689432fac6720b2f18101ac28a21add98b1b8"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "9a163cf207e97ba7dc6bc0a56d81c4af6c21edcc", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f4726541e56ae02a7e31cc42d1d14df81848c58/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4726541e56ae02a7e31cc42d1d14df81848c58/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=6f4726541e56ae02a7e31cc42d1d14df81848c58", "patch": "@@ -842,7 +842,7 @@ pub trait LintContext: Sized {\n                     if let Some(positional_arg_to_replace) = position_sp_to_replace {\n                         let name = if is_formatting_arg { named_arg_name + \"$\" } else { named_arg_name };\n                         let span_to_replace = if let Ok(positional_arg_content) =\n-                            self.sess().source_map().span_to_snippet(positional_arg_to_replace) && positional_arg_content.starts_with(\":\") {\n+                            self.sess().source_map().span_to_snippet(positional_arg_to_replace) && positional_arg_content.starts_with(':') {\n                             positional_arg_to_replace.shrink_to_lo()\n                         } else {\n                             positional_arg_to_replace"}, {"sha": "8bd0b09ffc053405b693d9b804060715b2661c30", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f4726541e56ae02a7e31cc42d1d14df81848c58/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4726541e56ae02a7e31cc42d1d14df81848c58/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6f4726541e56ae02a7e31cc42d1d14df81848c58", "patch": "@@ -1378,19 +1378,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let tcx = self.tcx;\n \n-        let keys_and_jobs = tcx\n-            .mir_keys(())\n-            .iter()\n-            .filter_map(|&def_id| {\n-                let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n-                if encode_const || encode_opt {\n-                    Some((def_id, encode_const, encode_opt))\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect::<Vec<_>>();\n-        for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {\n+        let keys_and_jobs = tcx.mir_keys(()).iter().filter_map(|&def_id| {\n+            let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n+            if encode_const || encode_opt { Some((def_id, encode_const, encode_opt)) } else { None }\n+        });\n+        for (def_id, encode_const, encode_opt) in keys_and_jobs {\n             debug_assert!(encode_const || encode_opt);\n \n             debug!(\"EntryBuilder::encode_mir({:?})\", def_id);"}, {"sha": "ab71fa0bc1d4d2a407c3d3ea28db8a60496a63a2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f4726541e56ae02a7e31cc42d1d14df81848c58/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4726541e56ae02a7e31cc42d1d14df81848c58/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=6f4726541e56ae02a7e31cc42d1d14df81848c58", "patch": "@@ -1393,7 +1393,7 @@ impl<'a> Resolver<'a> {\n \n         // If only some candidates are accessible, take just them\n         if !candidates.iter().all(|v: &ImportSuggestion| !v.accessible) {\n-            candidates = candidates.into_iter().filter(|x| x.accessible).collect();\n+            candidates.retain(|x| x.accessible)\n         }\n \n         candidates"}, {"sha": "56bb71b5dcbdee2c0e00e542126125192314bf26", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f4726541e56ae02a7e31cc42d1d14df81848c58/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4726541e56ae02a7e31cc42d1d14df81848c58/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=6f4726541e56ae02a7e31cc42d1d14df81848c58", "patch": "@@ -429,7 +429,7 @@ mod cgroups {\n                         Some(b\"\") => Cgroup::V2,\n                         Some(controllers)\n                             if from_utf8(controllers)\n-                                .is_ok_and(|c| c.split(\",\").any(|c| c == \"cpu\")) =>\n+                                .is_ok_and(|c| c.split(',').any(|c| c == \"cpu\")) =>\n                         {\n                             Cgroup::V1\n                         }"}, {"sha": "1e6f20d2b491c4bce959b1e3bde66d37160128e9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f4726541e56ae02a7e31cc42d1d14df81848c58/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4726541e56ae02a7e31cc42d1d14df81848c58/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6f4726541e56ae02a7e31cc42d1d14df81848c58", "patch": "@@ -2367,9 +2367,9 @@ pub(crate) fn get_filtered_impls_for_reference<'a>(\n     let Some(v) = shared.cache.impls.get(&def_id) else { return (Vec::new(), Vec::new(), Vec::new()) };\n     // Since there is no \"direct implementation\" on the reference primitive type, we filter out\n     // every implementation which isn't a trait implementation.\n-    let traits: Vec<_> = v.iter().filter(|i| i.inner_impl().trait_.is_some()).collect();\n+    let traits = v.iter().filter(|i| i.inner_impl().trait_.is_some());\n     let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) =\n-        traits.into_iter().partition(|t| t.inner_impl().kind.is_auto());\n+        traits.partition(|t| t.inner_impl().kind.is_auto());\n \n     let (blanket_impl, concrete): (Vec<&Impl>, _) =\n         concrete.into_iter().partition(|t| t.inner_impl().kind.is_blanket());"}, {"sha": "fc4d46fe6b6f191fbe54d6391c17837a643ca497", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f4726541e56ae02a7e31cc42d1d14df81848c58/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f4726541e56ae02a7e31cc42d1d14df81848c58/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=6f4726541e56ae02a7e31cc42d1d14df81848c58", "patch": "@@ -312,7 +312,7 @@ pub(super) fn write_shared(\n                 if line.starts_with(&prefix) {\n                     continue;\n                 }\n-                if line.ends_with(\",\") {\n+                if line.ends_with(',') {\n                     ret.push(line[..line.len() - 1].to_string());\n                 } else {\n                     // No comma (it's the case for the last added crate line)"}]}