{"sha": "e644ca0d6a61f243c8a3cb9708bae6da216bc5de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NDRjYTBkNmE2MWYyNDNjOGEzY2I5NzA4YmFlNmRhMjE2YmM1ZGU=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-07T19:53:02Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-16T07:18:55Z"}, "message": "push_impls_of_trait is not needed, use map", "tree": {"sha": "ec9da9fa0084a46243619a73d2851104d9b84e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec9da9fa0084a46243619a73d2851104d9b84e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e644ca0d6a61f243c8a3cb9708bae6da216bc5de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e644ca0d6a61f243c8a3cb9708bae6da216bc5de", "html_url": "https://github.com/rust-lang/rust/commit/e644ca0d6a61f243c8a3cb9708bae6da216bc5de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e644ca0d6a61f243c8a3cb9708bae6da216bc5de/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199e0cd804f039ccdd414e37fe68323061ba4aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/199e0cd804f039ccdd414e37fe68323061ba4aa7", "html_url": "https://github.com/rust-lang/rust/commit/199e0cd804f039ccdd414e37fe68323061ba4aa7"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "e0bf6f86571299d8573eded6b185f74b3efa65b9", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e644ca0d6a61f243c8a3cb9708bae6da216bc5de/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e644ca0d6a61f243c8a3cb9708bae6da216bc5de/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=e644ca0d6a61f243c8a3cb9708bae6da216bc5de", "patch": "@@ -38,16 +38,18 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n         // check_for_overlapping_impls_of_trait() check, since that\n         // check can populate this table further with impls from other\n         // crates.\n-        let trait_def_ids: Vec<ast::DefId> =\n-            self.tcx.trait_impls.borrow().keys().map(|&d| d).collect();\n+        let trait_def_ids: Vec<(ast::DefId, Vec<ast::DefId>)> =\n+            self.tcx.trait_impls.borrow().iter().map(|(&k, v)|\n+                                                     (k, v.borrow().clone())).collect();\n \n-        for trait_def_id in trait_def_ids.iter() {\n-            self.check_for_overlapping_impls_of_trait(*trait_def_id);\n+        for &(trait_def_id, ref impls) in trait_def_ids.iter() {\n+            self.check_for_overlapping_impls_of_trait(trait_def_id, impls);\n         }\n     }\n \n     fn check_for_overlapping_impls_of_trait(&self,\n-                                            trait_def_id: ast::DefId)\n+                                            trait_def_id: ast::DefId,\n+                                            trait_impls: &Vec<ast::DefId>)\n     {\n         debug!(\"check_for_overlapping_impls_of_trait(trait_def_id={})\",\n                trait_def_id.repr(self.tcx));\n@@ -57,17 +59,14 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n         ty::populate_implementations_for_trait_if_necessary(self.tcx,\n                                                             trait_def_id);\n \n-        let mut impls = Vec::new();\n-        self.push_impls_of_trait(trait_def_id, &mut impls);\n-\n-        for (i, &impl1_def_id) in impls.iter().enumerate() {\n+        for (i, &impl1_def_id) in trait_impls.iter().enumerate() {\n             if impl1_def_id.krate != ast::LOCAL_CRATE {\n                 // we don't need to check impls if both are external;\n                 // that's the other crate's job.\n                 continue;\n             }\n \n-            for &impl2_def_id in impls.slice_from(i+1).iter() {\n+            for &impl2_def_id in trait_impls.slice_from(i+1).iter() {\n                 self.check_if_impls_overlap(trait_def_id,\n                                             impl1_def_id,\n                                             impl2_def_id);\n@@ -108,15 +107,6 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n         }\n     }\n \n-    fn push_impls_of_trait(&self,\n-                           trait_def_id: ast::DefId,\n-                           out: &mut Vec<ast::DefId>) {\n-        match self.tcx.trait_impls.borrow().get(&trait_def_id) {\n-            Some(impls) => { out.push_all(impls.borrow().as_slice()); }\n-            None => { /* no impls */ }\n-        }\n-    }\n-\n     fn span_of_impl(&self, impl_did: ast::DefId) -> Span {\n         assert_eq!(impl_did.krate, ast::LOCAL_CRATE);\n         self.tcx.map.span(impl_did.node)"}]}