{"sha": "410e2832e4037c786fbf037aae7b0907336f8809", "node_id": "C_kwDOAAsO6NoAKDQxMGUyODMyZTQwMzdjNzg2ZmJmMDM3YWFlN2IwOTA3MzM2Zjg4MDk", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-06T09:54:01Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-06T09:54:01Z"}, "message": "fix #71363 test by adding `-Z translate-remapped-path-to-local-path=no`\n\nThe test relies on library/std/src/error.rs not corresponding to a local\npath, but remapping might still find the related local file of a\nremapped path. To fix the test, this adds a new -Z flag to disable\nfinding the corresponding local path of a remapped path.", "tree": {"sha": "331d6ea4b0fc9dfe58f905a012318156a4544c6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/331d6ea4b0fc9dfe58f905a012318156a4544c6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/410e2832e4037c786fbf037aae7b0907336f8809", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmKdz0MACgkQzXazX3c0\ndp5qYA//VU+PCUOeOtrzfvfn1J1PI3mRPYKcOn7z/MCjpox7baOxyKQQspKCJaux\nztIQv6OCnLeNTXoS+pk7jegoMqz7nzFk91Z8Fqj2xRBoUMXJEWFek4acXyYHTQl7\nITfShRhKfylSNWpNHx7svLHYdQSJ4zuAZVmR0jKU4lcnaOt7YGHvHMZeGBYWqRKr\nfC47t7N5B3GAVX4o9E1nxa5VQlrDtQk4asmeW7ZAI/OkeCDmXF8WFmYKFf7MVFFb\n0I8INui8wNpUkiZgojSstLHsStykvEXBYMDtEcfQCvb/je8fxUPVZ5ali67I2GQL\nYWZ7i3ezqxIh266qbccft+GCRaFP8Dmybb3CYiirLXXiw7RZsyMgkISBejTa1s3H\nmt9CM8q3evpTnprQzNy1KW7L85f3h9dK+vcUTzfyFRjNwmpdpj9B1ImRM8pasXER\npPWt68M+T/HmUkfqYKK4cAUgKuvHjbgtfI354P1U0/xNGfq89Tz/BlT3s57dUkjD\nuvZE5cLwSf5qTnsTztufKWP/1zc4XMcdKY3YYgVi2qjp7A9HULz4uun4zaqjTezm\n5nGh8aPfOKiQ3a94d4z2brzNwthu4ir6fjlzMoZr3pmzv4zKotdPOhyIABNNeYT0\nhxbqe6EN8F6lHUlkSKKnULGRaKichsZw3XBI2qC6VE+InLWEsh0=\n=X7DA\n-----END PGP SIGNATURE-----", "payload": "tree 331d6ea4b0fc9dfe58f905a012318156a4544c6b\nparent 6609c6734de4df43e24d7672f8ae8786ecc8047e\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1654509241 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1654509241 +0200\n\nfix #71363 test by adding `-Z translate-remapped-path-to-local-path=no`\n\nThe test relies on library/std/src/error.rs not corresponding to a local\npath, but remapping might still find the related local file of a\nremapped path. To fix the test, this adds a new -Z flag to disable\nfinding the corresponding local path of a remapped path.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/410e2832e4037c786fbf037aae7b0907336f8809", "html_url": "https://github.com/rust-lang/rust/commit/410e2832e4037c786fbf037aae7b0907336f8809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/410e2832e4037c786fbf037aae7b0907336f8809/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6609c6734de4df43e24d7672f8ae8786ecc8047e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6609c6734de4df43e24d7672f8ae8786ecc8047e", "html_url": "https://github.com/rust-lang/rust/commit/6609c6734de4df43e24d7672f8ae8786ecc8047e"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "5517c87f1c6303d994347f4c4ccc612e91563d13", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/410e2832e4037c786fbf037aae7b0907336f8809/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410e2832e4037c786fbf037aae7b0907336f8809/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=410e2832e4037c786fbf037aae7b0907336f8809", "patch": "@@ -790,6 +790,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(thinlto, Some(true));\n     tracked!(thir_unsafeck, true);\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n+    tracked!(translate_remapped_path_to_local_path, false);\n     tracked!(trap_unreachable, Some(false));\n     tracked!(treat_err_as_bug, NonZeroUsize::new(1));\n     tracked!(tune_cpu, Some(String::from(\"abc\")));"}, {"sha": "07d7a75522e0de316f2830feb0e418ddeb0f8a80", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/410e2832e4037c786fbf037aae7b0907336f8809/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410e2832e4037c786fbf037aae7b0907336f8809/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=410e2832e4037c786fbf037aae7b0907336f8809", "patch": "@@ -1486,6 +1486,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .filter(|_| {\n                 // Only spend time on further checks if we have what to translate *to*.\n                 sess.opts.real_rust_source_base_dir.is_some()\n+                    // Some tests need the translation to be always skipped.\n+                    && sess.opts.debugging_opts.translate_remapped_path_to_local_path\n             })\n             .filter(|virtual_dir| {\n                 // Don't translate away `/rustc/$hash` if we're still remapping to it,"}, {"sha": "fbcda57e0f0572421f79647d4eb0e549c4fedf2d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/410e2832e4037c786fbf037aae7b0907336f8809/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410e2832e4037c786fbf037aae7b0907336f8809/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=410e2832e4037c786fbf037aae7b0907336f8809", "patch": "@@ -1546,6 +1546,8 @@ options! {\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n+    translate_remapped_path_to_local_path: bool = (true, parse_bool, [TRACKED],\n+        \"translate remapped paths into local paths when possible (default: yes)\"),\n     trap_unreachable: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\"),\n     treat_err_as_bug: Option<NonZeroUsize> = (None, parse_treat_err_as_bug, [TRACKED],"}, {"sha": "bbb4a93623b144b8d182c675c292b2f3a4e25511", "filename": "src/test/ui/span/issue-71363.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/410e2832e4037c786fbf037aae7b0907336f8809/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410e2832e4037c786fbf037aae7b0907336f8809/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs?ref=410e2832e4037c786fbf037aae7b0907336f8809", "patch": "@@ -1,10 +1,19 @@\n-// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/xyz -Z ui-testing=no\n-// only-x86_64-unknown-linux-gnu\n-//---^ Limiting target as the above unstable flags don't play well on some environment.\n+// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/xyz -Z translate-remapped-path-to-local-path=no -Z ui-testing=no\n \n struct MyError;\n impl std::error::Error for MyError {}\n //~^ ERROR: `MyError` doesn't implement `std::fmt::Display`\n //~| ERROR: `MyError` doesn't implement `Debug`\n \n fn main() {}\n+\n+// This test relies on library/std/src/error.rs *not* being included in the error message, so that\n+// we can test whether a file not included in the error message affects it (more specifically\n+// whether the line number of the excluded file affects the indentation of the other line numbers).\n+//\n+// To test this we're simulating a remap of the rust src base (so that library/std/src/error.rs\n+// does not point to a local file) *and* we're disabling the code to try mapping a remapped path to\n+// a local file (which would defeat the purpose of the former flag).\n+//\n+// Note that this comment is at the bottom of the file intentionally, as we need the line number of\n+// the impl to be lower than 10."}, {"sha": "04e2b46c31738f60a3719ca04722b6205bb89d48", "filename": "src/test/ui/span/issue-71363.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/410e2832e4037c786fbf037aae7b0907336f8809/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/410e2832e4037c786fbf037aae7b0907336f8809/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr?ref=410e2832e4037c786fbf037aae7b0907336f8809", "patch": "@@ -1,25 +1,25 @@\n error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n- --> $DIR/issue-71363.rs:6:6\n+ --> $DIR/issue-71363.rs:4:6\n   |\n-6 | impl std::error::Error for MyError {}\n+4 | impl std::error::Error for MyError {}\n   |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `MyError`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n \n error[E0277]: `MyError` doesn't implement `Debug`\n- --> $DIR/issue-71363.rs:6:6\n+ --> $DIR/issue-71363.rs:4:6\n   |\n-6 | impl std::error::Error for MyError {}\n+4 | impl std::error::Error for MyError {}\n   |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted using `{:?}`\n   |\n   = help: the trait `Debug` is not implemented for `MyError`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\n note: required by a bound in `std::error::Error`\n help: consider annotating `MyError` with `#[derive(Debug)]`\n   |\n-5 | #[derive(Debug)]\n+3 | #[derive(Debug)]\n   |\n \n error: aborting due to 2 previous errors"}]}