{"sha": "a63085dc5e718ad75a4571e9522d8a62a7c18ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MzA4NWRjNWU3MThhZDc1YTQ1NzFlOTUyMmQ4YTYyYTdjMThlZjE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-09T01:39:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-09T01:39:59Z"}, "message": "Rollup merge of #81849 - scottmcm:control-flow-comments, r=Mark-Simulacrum\n\nExpand the docs for ops::ControlFlow a bit\n\nSince I was writing some examples for an RFC anyway.\n\nAnd I almost made the mistake of reordering the variants, so added a note and a test about that.", "tree": {"sha": "93ad757cd735b0c4968f6db44e9530d400f9fe0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ad757cd735b0c4968f6db44e9530d400f9fe0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a63085dc5e718ad75a4571e9522d8a62a7c18ef1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIefwCRBK7hj4Ov3rIwAAdHIIAIqn68rW0MoFexfj80mWNUmC\nbvy1zGYApEQOVigmNOOSPWWl2UJDBYBsMZgRtAamJghgwSyCXLNnYaxLC1PQNDiN\nbzr4Rme8Esq9r2JAKezlD7yKXrBkqYx8ncYGIIwtcnXI+XhBKcyMlvqYme9dYLI7\nqKESEx0lDQVIOETWxVyl4k8TWWbr0WM4cA49+fdwoJvZJ3F5m3OaE7bcOYIpqWM7\na5iPHdF4zGYEl5MCE4D0zJ8BjTRuzACB2XaqWiv5Kkfabg1ZbBZuHNbXsKbQnVUC\n9jpVf8sXWuLsmZaxjTcv7Ydw4TALUtzR39lgOA/HFk7Y3ai+mcJMLDi1uym/KUo=\n=yOF/\n-----END PGP SIGNATURE-----\n", "payload": "tree 93ad757cd735b0c4968f6db44e9530d400f9fe0d\nparent 3619a6277af014d72c9bfbc6a8fcb3a5c4238d25\nparent 1b7309edd6b0e0a50b1e65c7888e3aa888baa10b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1612834799 +0100\ncommitter GitHub <noreply@github.com> 1612834799 +0100\n\nRollup merge of #81849 - scottmcm:control-flow-comments, r=Mark-Simulacrum\n\nExpand the docs for ops::ControlFlow a bit\n\nSince I was writing some examples for an RFC anyway.\n\nAnd I almost made the mistake of reordering the variants, so added a note and a test about that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a63085dc5e718ad75a4571e9522d8a62a7c18ef1", "html_url": "https://github.com/rust-lang/rust/commit/a63085dc5e718ad75a4571e9522d8a62a7c18ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a63085dc5e718ad75a4571e9522d8a62a7c18ef1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3619a6277af014d72c9bfbc6a8fcb3a5c4238d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/3619a6277af014d72c9bfbc6a8fcb3a5c4238d25", "html_url": "https://github.com/rust-lang/rust/commit/3619a6277af014d72c9bfbc6a8fcb3a5c4238d25"}, {"sha": "1b7309edd6b0e0a50b1e65c7888e3aa888baa10b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7309edd6b0e0a50b1e65c7888e3aa888baa10b", "html_url": "https://github.com/rust-lang/rust/commit/1b7309edd6b0e0a50b1e65c7888e3aa888baa10b"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "2f78ba8f28e29189697d5c78d375a792d13c3854", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 83, "deletions": 3, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a63085dc5e718ad75a4571e9522d8a62a7c18ef1/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63085dc5e718ad75a4571e9522d8a62a7c18ef1/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=a63085dc5e718ad75a4571e9522d8a62a7c18ef1", "patch": "@@ -1,13 +1,63 @@\n use crate::ops::Try;\n \n-/// Used to make try_fold closures more like normal loops\n+/// Used to tell an operation whether it should exit early or go on as usual.\n+///\n+/// This is used when exposing things (like graph traversals or visitors) where\n+/// you want the user to be able to choose whether to exit early.\n+/// Having the enum makes it clearer -- no more wondering \"wait, what did `false`\n+/// mean again?\" -- and allows including a value.\n+///\n+/// # Examples\n+///\n+/// Early-exiting from [`Iterator::try_for_each`]:\n+/// ```\n+/// #![feature(control_flow_enum)]\n+/// use std::ops::ControlFlow;\n+///\n+/// let r = (2..100).try_for_each(|x| {\n+///     if 403 % x == 0 {\n+///         return ControlFlow::Break(x)\n+///     }\n+///\n+///     ControlFlow::Continue(())\n+/// });\n+/// assert_eq!(r, ControlFlow::Break(13));\n+/// ```\n+///\n+/// A basic tree traversal:\n+/// ```no_run\n+/// #![feature(control_flow_enum)]\n+/// use std::ops::ControlFlow;\n+///\n+/// pub struct TreeNode<T> {\n+///     value: T,\n+///     left: Option<Box<TreeNode<T>>>,\n+///     right: Option<Box<TreeNode<T>>>,\n+/// }\n+///\n+/// impl<T> TreeNode<T> {\n+///     pub fn traverse_inorder<B>(&self, mut f: impl FnMut(&T) -> ControlFlow<B>) -> ControlFlow<B> {\n+///         if let Some(left) = &self.left {\n+///             left.traverse_inorder(&mut f)?;\n+///         }\n+///         f(&self.value)?;\n+///         if let Some(right) = &self.right {\n+///             right.traverse_inorder(&mut f)?;\n+///         }\n+///         ControlFlow::Continue(())\n+///     }\n+/// }\n+/// ```\n #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum ControlFlow<B, C = ()> {\n-    /// Continue in the loop, using the given value for the next iteration\n+    /// Move on to the next phase of the operation as normal.\n     Continue(C),\n-    /// Exit the loop, yielding the given value\n+    /// Exit the operation without running subsequent phases.\n     Break(B),\n+    // Yes, the order of the variants doesn't match the type parameters.\n+    // They're in this order so that `ControlFlow<A, B>` <-> `Result<B, A>`\n+    // is a no-op conversion in the `Try` implementation.\n }\n \n #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n@@ -33,13 +83,33 @@ impl<B, C> Try for ControlFlow<B, C> {\n \n impl<B, C> ControlFlow<B, C> {\n     /// Returns `true` if this is a `Break` variant.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// assert!(ControlFlow::<i32, String>::Break(3).is_break());\n+    /// assert!(!ControlFlow::<String, i32>::Continue(3).is_break());\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     pub fn is_break(&self) -> bool {\n         matches!(*self, ControlFlow::Break(_))\n     }\n \n     /// Returns `true` if this is a `Continue` variant.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// assert!(!ControlFlow::<i32, String>::Break(3).is_continue());\n+    /// assert!(ControlFlow::<String, i32>::Continue(3).is_continue());\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     pub fn is_continue(&self) -> bool {\n@@ -48,6 +118,16 @@ impl<B, C> ControlFlow<B, C> {\n \n     /// Converts the `ControlFlow` into an `Option` which is `Some` if the\n     /// `ControlFlow` was `Break` and `None` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// assert_eq!(ControlFlow::<i32, String>::Break(3).break_value(), Some(3));\n+    /// assert_eq!(ControlFlow::<String, i32>::Continue(3).break_value(), None);\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n     pub fn break_value(self) -> Option<B> {"}, {"sha": "339691b1176944f09cb7ab2e209799a2e3793dec", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a63085dc5e718ad75a4571e9522d8a62a7c18ef1/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63085dc5e718ad75a4571e9522d8a62a7c18ef1/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=a63085dc5e718ad75a4571e9522d8a62a7c18ef1", "patch": "@@ -15,6 +15,7 @@\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_offset)]\n+#![feature(control_flow_enum)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]"}, {"sha": "aa79dbac8f39dfc27f35c77bc635b4c00566f1b4", "filename": "library/core/tests/ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a63085dc5e718ad75a4571e9522d8a62a7c18ef1/library%2Fcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63085dc5e718ad75a4571e9522d8a62a7c18ef1/library%2Fcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fops.rs?ref=a63085dc5e718ad75a4571e9522d8a62a7c18ef1", "patch": "@@ -1,3 +1,5 @@\n+mod control_flow;\n+\n use core::ops::{Bound, Range, RangeFrom, RangeFull, RangeInclusive, RangeTo, RangeToInclusive};\n use core::ops::{Deref, DerefMut};\n "}, {"sha": "eacfd63a6c48f9a2960f09b9997b3a1345ebe2fd", "filename": "library/core/tests/ops/control_flow.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a63085dc5e718ad75a4571e9522d8a62a7c18ef1/library%2Fcore%2Ftests%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63085dc5e718ad75a4571e9522d8a62a7c18ef1/library%2Fcore%2Ftests%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fops%2Fcontrol_flow.rs?ref=a63085dc5e718ad75a4571e9522d8a62a7c18ef1", "patch": "@@ -0,0 +1,18 @@\n+use core::intrinsics::discriminant_value;\n+use core::ops::ControlFlow;\n+\n+#[test]\n+fn control_flow_discriminants_match_result() {\n+    // This isn't stable surface area, but helps keep `?` cheap between them,\n+    // even if LLVM can't always take advantage of it right now.\n+    // (Sadly Result and Option are inconsistent, so ControlFlow can't match both.)\n+\n+    assert_eq!(\n+        discriminant_value(&ControlFlow::<i32, i32>::Break(3)),\n+        discriminant_value(&Result::<i32, i32>::Err(3)),\n+    );\n+    assert_eq!(\n+        discriminant_value(&ControlFlow::<i32, i32>::Continue(3)),\n+        discriminant_value(&Result::<i32, i32>::Ok(3)),\n+    );\n+}"}]}