{"sha": "5aa8cc8412862fb15e2961de56e9f7cba691603b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYThjYzg0MTI4NjJmYjE1ZTI5NjFkZTU2ZTlmN2NiYTY5MTYwM2I=", "commit": {"author": {"name": "Richard Dodd", "email": "richard.o.dodd@gmail.com", "date": "2017-07-17T15:54:38Z"}, "committer": {"name": "Richard Dodd", "email": "richard.o.dodd@gmail.com", "date": "2017-07-17T16:01:01Z"}, "message": "Only set cwd for test process, not compiler", "tree": {"sha": "e8777e95782f9ef2147d3f1cc215ee972b8ce91d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8777e95782f9ef2147d3f1cc215ee972b8ce91d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa8cc8412862fb15e2961de56e9f7cba691603b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa8cc8412862fb15e2961de56e9f7cba691603b", "html_url": "https://github.com/rust-lang/rust/commit/5aa8cc8412862fb15e2961de56e9f7cba691603b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa8cc8412862fb15e2961de56e9f7cba691603b/comments", "author": {"login": "derekdreery", "id": 1392222, "node_id": "MDQ6VXNlcjEzOTIyMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1392222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derekdreery", "html_url": "https://github.com/derekdreery", "followers_url": "https://api.github.com/users/derekdreery/followers", "following_url": "https://api.github.com/users/derekdreery/following{/other_user}", "gists_url": "https://api.github.com/users/derekdreery/gists{/gist_id}", "starred_url": "https://api.github.com/users/derekdreery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derekdreery/subscriptions", "organizations_url": "https://api.github.com/users/derekdreery/orgs", "repos_url": "https://api.github.com/users/derekdreery/repos", "events_url": "https://api.github.com/users/derekdreery/events{/privacy}", "received_events_url": "https://api.github.com/users/derekdreery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "derekdreery", "id": 1392222, "node_id": "MDQ6VXNlcjEzOTIyMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1392222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derekdreery", "html_url": "https://github.com/derekdreery", "followers_url": "https://api.github.com/users/derekdreery/followers", "following_url": "https://api.github.com/users/derekdreery/following{/other_user}", "gists_url": "https://api.github.com/users/derekdreery/gists{/gist_id}", "starred_url": "https://api.github.com/users/derekdreery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derekdreery/subscriptions", "organizations_url": "https://api.github.com/users/derekdreery/orgs", "repos_url": "https://api.github.com/users/derekdreery/repos", "events_url": "https://api.github.com/users/derekdreery/events{/privacy}", "received_events_url": "https://api.github.com/users/derekdreery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c35030af87a5658929902cde18939145dcaed590", "url": "https://api.github.com/repos/rust-lang/rust/commits/c35030af87a5658929902cde18939145dcaed590", "html_url": "https://github.com/rust-lang/rust/commit/c35030af87a5658929902cde18939145dcaed590"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "b6d89c1f51ae68183780faffece20318e8b5b206", "filename": "src/tools/compiletest/src/procsrv.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8cc8412862fb15e2961de56e9f7cba691603b/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8cc8412862fb15e2961de56e9f7cba691603b/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs?ref=5aa8cc8412862fb15e2961de56e9f7cba691603b", "patch": "@@ -9,11 +9,14 @@\n // except according to those terms.\n \n use std::env;\n+use std::ffi::OsString;\n use std::io::prelude::*;\n use std::io;\n use std::path::PathBuf;\n use std::process::{Child, Command, ExitStatus, Output, Stdio};\n \n+/// Get the name of the environment variable that holds dynamic library\n+/// locations\n pub fn dylib_env_var() -> &'static str {\n     if cfg!(windows) {\n         \"PATH\"\n@@ -26,11 +29,13 @@ pub fn dylib_env_var() -> &'static str {\n     }\n }\n \n+/// Add `lib_path` and `aux_path` (if it is `Some`) to the dynamic library\n+/// env var\n fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n     // Need to be sure to put both the lib_path and the aux path in the dylib\n     // search path for the child.\n     let var = dylib_env_var();\n-    let mut path = env::split_paths(&env::var_os(var).unwrap_or_default())\n+    let mut path = env::split_paths(&env::var_os(var).unwrap_or(OsString::new()))\n         .collect::<Vec<_>>();\n     if let Some(p) = aux_path {\n         path.insert(0, PathBuf::from(p))\n@@ -42,12 +47,26 @@ fn add_target_env(cmd: &mut Command, lib_path: &str, aux_path: Option<&str>) {\n     cmd.env(var, newpath);\n }\n \n+/// Represents exit status, stdout and stderr of a completed process\n pub struct Result {\n     pub status: ExitStatus,\n     pub out: String,\n     pub err: String,\n }\n \n+/// Runs a test program\n+///\n+/// # Params\n+///  - `lib_path` Path to search for required library\n+///  - `prog` command to run\n+///  - `aux_path` Optional extra path to search for required\n+///    auxiliary libraries\n+///  - `args` List of arguments to pass to `prog`\n+///  - `env` List of environment variables to set, `.0` is variable name,\n+///    `.1` is value\n+///  - `input` String to be fed as stdin\n+///  - `current_dir` Optional working dir to run command in\n+///\n pub fn run(lib_path: &str,\n            prog: &str,\n            aux_path: Option<&str>,\n@@ -69,7 +88,6 @@ pub fn run(lib_path: &str,\n     }\n     if let Some(cwd) = current_dir {\n         cmd.current_dir(cwd);\n-        panic!(\"Backtrace\");\n     }\n \n     let mut process = cmd.spawn()?;\n@@ -85,6 +103,7 @@ pub fn run(lib_path: &str,\n     })\n }\n \n+/// Same as `run`, but return process rather than waiting on completion\n pub fn run_background(lib_path: &str,\n                       prog: &str,\n                       aux_path: Option<&str>,"}, {"sha": "c6dc78ef5057d4e5cc98108c5be3c9b45ff42a16", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8cc8412862fb15e2961de56e9f7cba691603b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8cc8412862fb15e2961de56e9f7cba691603b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5aa8cc8412862fb15e2961de56e9f7cba691603b", "patch": "@@ -334,7 +334,8 @@ impl<'test> TestCx<'test> {\n                              self.props.exec_env.clone(),\n                              self.config.compile_lib_path.to_str().unwrap(),\n                              Some(aux_dir.to_str().unwrap()),\n-                             Some(src))\n+                             Some(src),\n+                             None)\n     }\n \n     fn make_pp_args(&self,\n@@ -690,6 +691,7 @@ actual:\\n\\\n                                          environment,\n                                          self.config.run_lib_path.to_str().unwrap(),\n                                          None,\n+                                         None,\n                                          None);\n             }\n         }\n@@ -1235,15 +1237,21 @@ actual:\\n\\\n                                      env,\n                                      self.config.run_lib_path.to_str().unwrap(),\n                                      Some(aux_dir.to_str().unwrap()),\n+                                     None,\n                                      None)\n             }\n             _ => {\n                 let aux_dir = self.aux_output_dir_name();\n+                let working_dir =\n+                    Some(self.output_base_name()\n+                             .parent().unwrap()\n+                             .to_str().unwrap().to_owned());\n                 self.compose_and_run(self.make_run_args(),\n                                      env,\n                                      self.config.run_lib_path.to_str().unwrap(),\n                                      Some(aux_dir.to_str().unwrap()),\n-                                     None)\n+                                     None,\n+                                     working_dir)\n             }\n         }\n     }\n@@ -1321,6 +1329,7 @@ actual:\\n\\\n                                                 Vec::new(),\n                                                 aux_cx.config.compile_lib_path.to_str().unwrap(),\n                                                 Some(aux_dir.to_str().unwrap()),\n+                                                None,\n                                                 None);\n             if !auxres.status.success() {\n                 self.fatal_proc_rec(\n@@ -1334,16 +1343,18 @@ actual:\\n\\\n                              self.props.rustc_env.clone(),\n                              self.config.compile_lib_path.to_str().unwrap(),\n                              Some(aux_dir.to_str().unwrap()),\n-                             input)\n+                             input,\n+                             None)\n     }\n \n     fn compose_and_run(&self,\n                        ProcArgs{ args, prog }: ProcArgs,\n                        procenv: Vec<(String, String)> ,\n                        lib_path: &str,\n                        aux_path: Option<&str>,\n-                       input: Option<String>) -> ProcRes {\n-        self.program_output(lib_path, prog, aux_path, args, procenv, input)\n+                       input: Option<String>,\n+                       working_dir: Option<String>) -> ProcRes {\n+        self.program_output(lib_path, prog, aux_path, args, procenv, input, working_dir)\n     }\n \n     fn make_compile_args(&self,\n@@ -1536,7 +1547,8 @@ actual:\\n\\\n                       aux_path: Option<&str>,\n                       args: Vec<String>,\n                       env: Vec<(String, String)>,\n-                      input: Option<String>)\n+                      input: Option<String>,\n+                      working_dir: Option<String>)\n                       -> ProcRes {\n         let cmdline =\n         {\n@@ -1546,8 +1558,6 @@ actual:\\n\\\n             logv(self.config, format!(\"executing {}\", cmdline));\n             cmdline\n         };\n-        let working_dir =\n-            Some(self.output_base_name().parent().unwrap().to_str().unwrap().to_owned());\n \n         let procsrv::Result {\n             out,\n@@ -1723,7 +1733,7 @@ actual:\\n\\\n             args: vec![format!(\"-input-file={}\", irfile.to_str().unwrap()),\n                        self.testpaths.file.to_str().unwrap().to_owned()]\n         };\n-        self.compose_and_run(proc_args, Vec::new(), \"\", None, None)\n+        self.compose_and_run(proc_args, Vec::new(), \"\", None, None, None)\n     }\n \n     fn run_codegen_test(&self) {"}]}