{"sha": "9763f0a6bd0d576236ff126173d7df3462c22a52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NjNmMGE2YmQwZDU3NjIzNmZmMTI2MTczZDdkZjM0NjJjMjJhNTI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-17T19:57:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-17T20:00:01Z"}, "message": "Semantic highlight intradoclinks in documentation", "tree": {"sha": "6bb31b0325e8a7b9bef577901575a048344e8eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb31b0325e8a7b9bef577901575a048344e8eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9763f0a6bd0d576236ff126173d7df3462c22a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9763f0a6bd0d576236ff126173d7df3462c22a52", "html_url": "https://github.com/rust-lang/rust/commit/9763f0a6bd0d576236ff126173d7df3462c22a52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9763f0a6bd0d576236ff126173d7df3462c22a52/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec10835d604c534a0b0ad5fd3d8783e0bf123cbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb", "html_url": "https://github.com/rust-lang/rust/commit/ec10835d604c534a0b0ad5fd3d8783e0bf123cbb"}], "stats": {"total": 187, "additions": 132, "deletions": 55}, "files": [{"sha": "c7c1f4fee97ffdf10072cbb7f2c86ac4ddf5201e", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -65,20 +65,19 @@ pub(crate) fn extract_definitions_from_markdown(\n ) -> Vec<(String, Option<hir::Namespace>, Range<usize>)> {\n     let mut res = vec![];\n     let mut cb = |link: BrokenLink| {\n+        // These allocations are actually unnecessary but the lifetimes on BrokenLinkCallback are wrong\n+        // this is fixed in the repo but not on the crates.io release yet\n         Some((\n             /*url*/ link.reference.to_owned().into(),\n             /*title*/ link.reference.to_owned().into(),\n         ))\n     };\n     let doc = Parser::new_with_broken_link_callback(markdown, Options::empty(), Some(&mut cb));\n     for (event, range) in doc.into_offset_iter() {\n-        match event {\n-            Event::Start(Tag::Link(_link_type, ref target, ref title)) => {\n-                let link = if target.is_empty() { title } else { target };\n-                let (link, ns) = parse_link(link);\n-                res.push((link.to_string(), ns, range));\n-            }\n-            _ => {}\n+        if let Event::Start(Tag::Link(_, target, title)) = event {\n+            let link = if target.is_empty() { title } else { target };\n+            let (link, ns) = parse_link(&link);\n+            res.push((link.to_string(), ns, range));\n         }\n     }\n     res"}, {"sha": "1d34731ab99bcd10fe060ef0d1d7d73125fe56e4", "filename": "crates/ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -59,6 +59,7 @@ pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padd\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "947cc974ce0f7090c170dad00c05c611801ad436", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 87, "deletions": 33, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -1,16 +1,18 @@\n //! \"Recursive\" Syntax highlighting for code in doctests and fixtures.\n \n-use std::mem;\n+use std::{mem, ops::Range};\n \n use either::Either;\n use hir::{HasAttrs, Semantics};\n-use ide_db::call_info::ActiveParameter;\n+use ide_db::{call_info::ActiveParameter, defs::Definition};\n use syntax::{\n     ast::{self, AstNode, AttrsOwner, DocCommentsOwner},\n     match_ast, AstToken, NodeOrToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n \n-use crate::{Analysis, HlMod, HlRange, HlTag, RootDatabase};\n+use crate::{\n+    doc_links::extract_definitions_from_markdown, Analysis, HlMod, HlRange, HlTag, RootDatabase,\n+};\n \n use super::{highlights::Highlights, injector::Injector};\n \n@@ -120,24 +122,24 @@ impl AstNode for AttrsOwnerNode {\n fn doc_attributes<'node>(\n     sema: &Semantics<RootDatabase>,\n     node: &'node SyntaxNode,\n-) -> Option<(AttrsOwnerNode, hir::Attrs)> {\n+) -> Option<(AttrsOwnerNode, hir::Attrs, Definition)> {\n     match_ast! {\n         match node {\n-            ast::SourceFile(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Fn(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Struct(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Union(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::RecordField(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::TupleField(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Enum(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Variant(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Trait(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Module(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Static(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Const(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::TypeAlias(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::Impl(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n-            ast::MacroRules(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::SourceFile(it)  => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Module(def)))),\n+            ast::Module(it)      => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Module(def)))),\n+            ast::Fn(it)          => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Function(def)))),\n+            ast::Struct(it)      => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Struct(def))))),\n+            ast::Union(it)       => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Union(def))))),\n+            ast::Enum(it)        => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Adt(hir::Adt::Enum(def))))),\n+            ast::Variant(it)     => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Variant(def)))),\n+            ast::Trait(it)       => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Trait(def)))),\n+            ast::Static(it)      => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Static(def)))),\n+            ast::Const(it)       => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::Const(def)))),\n+            ast::TypeAlias(it)   => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::ModuleDef(hir::ModuleDef::TypeAlias(def)))),\n+            ast::Impl(it)        => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::SelfType(def))),\n+            ast::RecordField(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::Field(def))),\n+            ast::TupleField(it)  => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::Field(def))),\n+            ast::MacroRules(it)  => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db), Definition::Macro(def))),\n             // ast::MacroDef(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n             // ast::Use(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n             _ => return None\n@@ -147,25 +149,23 @@ fn doc_attributes<'node>(\n \n /// Injection of syntax highlighting of doctests.\n pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, node: &SyntaxNode) {\n-    let (owner, attributes) = match doc_attributes(sema, node) {\n+    let (owner, attributes, def) = match doc_attributes(sema, node) {\n         Some(it) => it,\n         None => return,\n     };\n \n-    if attributes.docs().map_or(true, |docs| !String::from(docs).contains(RUSTDOC_FENCE)) {\n-        return;\n-    }\n-    let attrs_source_map = attributes.source_map(&owner);\n-\n     let mut inj = Injector::default();\n     inj.add_unmapped(\"fn doctest() {\\n\");\n \n+    let attrs_source_map = attributes.source_map(&owner);\n+\n     let mut is_codeblock = false;\n     let mut is_doctest = false;\n \n     // Replace the original, line-spanning comment ranges by new, only comment-prefix\n     // spanning comment ranges.\n     let mut new_comments = Vec::new();\n+    let mut intra_doc_links = Vec::new();\n     let mut string;\n     for attr in attributes.by_key(\"doc\").attrs() {\n         let src = attrs_source_map.source_of(&attr);\n@@ -209,7 +209,22 @@ pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, n\n                     is_doctest = is_codeblock && is_rust;\n                     continue;\n                 }\n-                None if !is_doctest => continue,\n+                None if !is_doctest => {\n+                    intra_doc_links.extend(\n+                        extract_definitions_from_markdown(line)\n+                            .into_iter()\n+                            .filter(|(link, ns, _)| {\n+                                validate_intra_doc_link(sema.db, &def, link, *ns)\n+                            })\n+                            .map(|(.., Range { start, end })| {\n+                                TextRange::at(\n+                                    prev_range_start + TextSize::from(start as u32),\n+                                    TextSize::from((end - start) as u32),\n+                                )\n+                            }),\n+                    );\n+                    continue;\n+                }\n                 None => (),\n             }\n \n@@ -227,17 +242,28 @@ pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, n\n             inj.add_unmapped(\"\\n\");\n         }\n     }\n+\n+    for range in intra_doc_links {\n+        hl.add(HlRange {\n+            range,\n+            highlight: HlTag::IntraDocLink | HlMod::Documentation,\n+            binding_hash: None,\n+        });\n+    }\n+\n+    if new_comments.is_empty() {\n+        return; // no need to run an analysis on an empty file\n+    }\n+\n     inj.add_unmapped(\"\\n}\");\n \n     let (analysis, tmp_file_id) = Analysis::from_single_file(inj.text().to_string());\n \n-    for h in analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true)).unwrap() {\n-        for r in inj.map_range_up(h.range) {\n-            hl.add(HlRange {\n-                range: r,\n-                highlight: h.highlight | HlMod::Injected,\n-                binding_hash: h.binding_hash,\n-            });\n+    for HlRange { range, highlight, binding_hash } in\n+        analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true)).unwrap()\n+    {\n+        for range in inj.map_range_up(range) {\n+            hl.add(HlRange { range, highlight: highlight | HlMod::Injected, binding_hash });\n         }\n     }\n \n@@ -273,3 +299,31 @@ fn find_doc_string_in_attr(attr: &hir::Attr, it: &ast::Attr) -> Option<ast::Stri\n         }\n     }\n }\n+\n+fn validate_intra_doc_link(\n+    db: &RootDatabase,\n+    def: &Definition,\n+    link: &str,\n+    ns: Option<hir::Namespace>,\n+) -> bool {\n+    match def {\n+        Definition::ModuleDef(def) => match def {\n+            hir::ModuleDef::Module(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Function(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Adt(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Variant(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Const(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Static(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Trait(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::TypeAlias(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::BuiltinType(_) => None,\n+        },\n+        Definition::Macro(it) => it.resolve_doc_path(db, &link, ns),\n+        Definition::Field(it) => it.resolve_doc_path(db, &link, ns),\n+        Definition::SelfType(_)\n+        | Definition::Local(_)\n+        | Definition::GenericParam(_)\n+        | Definition::Label(_) => None,\n+    }\n+    .is_some()\n+}"}, {"sha": "ce46e5127a181619c72a2f45f3a0ac449b07024d", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -18,19 +18,20 @@ pub struct HlMods(u32);\n pub enum HlTag {\n     Symbol(SymbolKind),\n \n+    Attribute,\n     BoolLiteral,\n     BuiltinType,\n     ByteLiteral,\n     CharLiteral,\n-    NumericLiteral,\n-    StringLiteral,\n-    Attribute,\n     Comment,\n     EscapeSequence,\n     FormatSpecifier,\n+    IntraDocLink,\n     Keyword,\n-    Punctuation(HlPunct),\n+    NumericLiteral,\n     Operator,\n+    Punctuation(HlPunct),\n+    StringLiteral,\n     UnresolvedReference,\n \n     // For things which don't have a specific highlight.\n@@ -116,6 +117,7 @@ impl HlTag {\n             HlTag::Comment => \"comment\",\n             HlTag::EscapeSequence => \"escape_sequence\",\n             HlTag::FormatSpecifier => \"format_specifier\",\n+            HlTag::IntraDocLink => \"intra_doc_link\",\n             HlTag::Keyword => \"keyword\",\n             HlTag::Punctuation(punct) => match punct {\n                 HlPunct::Bracket => \"bracket\","}, {"sha": "60c7518af8fb826173916af89d11ddf4c1578881", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -7,6 +7,7 @@\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "5d802a64700a41bb44f6d72d3925dcb7f759ed27", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -7,6 +7,7 @@\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n@@ -98,6 +99,11 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"comment documentation\">/// </span><span class=\"intra_doc_link documentation\">[`Foo`](Foo)</span><span class=\"comment documentation\"> is a struct</span>\n+<span class=\"comment documentation\">/// </span><span class=\"intra_doc_link documentation\">[`all_the_links`](all_the_links)</span><span class=\"comment documentation\"> is this function</span>\n+<span class=\"comment documentation\">/// [`noop`](noop) is a macro below</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">all_the_links</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"parenthesis injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>"}, {"sha": "4e312765c0f79a0b5d5c797ede1cc36cef3d77c8", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -7,6 +7,7 @@\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "57dfe7509690b1917ab2207e3267d905bda2fc75", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -7,6 +7,7 @@\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "75dbd0f1422fc2570d7b0035ed736a618beb946a", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -7,6 +7,7 @@\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "423256a20200e573928eee3b5733767f9209abf5", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -7,6 +7,7 @@\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "fffe8c0f577ec33e5350d9cb37e24355ff63aba9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -7,6 +7,7 @@\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "34d8deb6846b2632a676cb495059eaf87ae7374a", "filename": "crates/ide/src/syntax_highlighting/test_data/injection.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -7,6 +7,7 @@\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "d9ca3a4c46f73f494cac246870994256d633d04d", "filename": "crates/ide/src/syntax_highlighting/test_data/rainbow_highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -7,6 +7,7 @@\n .label              { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .documentation      { color: #629755; }\n+.intra_doc_link     { color: #A9C577; }\n .injected           { opacity: 0.65 ; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "7b2922b0d5553bfb7b591b39ff38742fe8fb6261", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -468,7 +468,7 @@ fn main() {\n }\n \n #[test]\n-fn test_highlight_doctest() {\n+fn test_highlight_doc_comment() {\n     check_highlighting(\n         r#\"\n /// ```\n@@ -533,6 +533,11 @@ impl Foo {\n     }\n }\n \n+/// [`Foo`](Foo) is a struct\n+/// [`all_the_links`](all_the_links) is this function\n+/// [`noop`](noop) is a macro below\n+pub fn all_the_links() {}\n+\n /// ```\n /// noop!(1);\n /// ```"}, {"sha": "0cb7d12a76b223a24e6f85cdb5ff1de7ef56b8bb", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -45,15 +45,16 @@ define_semantic_token_types![\n     (BRACKET, \"bracket\"),\n     (BUILTIN_TYPE, \"builtinType\"),\n     (CHAR_LITERAL, \"characterLiteral\"),\n-    (COMMA, \"comma\"),\n     (COLON, \"colon\"),\n+    (COMMA, \"comma\"),\n+    (CONST_PARAMETER, \"constParameter\"),\n     (DOT, \"dot\"),\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),\n     (GENERIC, \"generic\"),\n-    (CONST_PARAMETER, \"constParameter\"),\n-    (LIFETIME, \"lifetime\"),\n+    (INTRA_DOC_LINK, \"intraDocLink\"),\n     (LABEL, \"label\"),\n+    (LIFETIME, \"lifetime\"),\n     (PARENTHESIS, \"parenthesis\"),\n     (PUNCTUATION, \"punctuation\"),\n     (SELF_KEYWORD, \"selfKeyword\"),"}, {"sha": "70501618e88bd9ef5c1cdfda97f30533959ba97c", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763f0a6bd0d576236ff126173d7df3462c22a52/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=9763f0a6bd0d576236ff126173d7df3462c22a52", "patch": "@@ -435,19 +435,20 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::Trait => lsp_types::SemanticTokenType::INTERFACE,\n             SymbolKind::Macro => lsp_types::SemanticTokenType::MACRO,\n         },\n+        HlTag::Attribute => semantic_tokens::ATTRIBUTE,\n+        HlTag::BoolLiteral => semantic_tokens::BOOLEAN,\n         HlTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n-        HlTag::None => semantic_tokens::GENERIC,\n         HlTag::ByteLiteral | HlTag::NumericLiteral => lsp_types::SemanticTokenType::NUMBER,\n-        HlTag::BoolLiteral => semantic_tokens::BOOLEAN,\n-        HlTag::StringLiteral => lsp_types::SemanticTokenType::STRING,\n         HlTag::CharLiteral => semantic_tokens::CHAR_LITERAL,\n         HlTag::Comment => lsp_types::SemanticTokenType::COMMENT,\n-        HlTag::Attribute => semantic_tokens::ATTRIBUTE,\n-        HlTag::Keyword => lsp_types::SemanticTokenType::KEYWORD,\n-        HlTag::UnresolvedReference => semantic_tokens::UNRESOLVED_REFERENCE,\n+        HlTag::EscapeSequence => semantic_tokens::ESCAPE_SEQUENCE,\n         HlTag::FormatSpecifier => semantic_tokens::FORMAT_SPECIFIER,\n+        HlTag::IntraDocLink => semantic_tokens::INTRA_DOC_LINK,\n+        HlTag::Keyword => lsp_types::SemanticTokenType::KEYWORD,\n+        HlTag::None => semantic_tokens::GENERIC,\n         HlTag::Operator => lsp_types::SemanticTokenType::OPERATOR,\n-        HlTag::EscapeSequence => semantic_tokens::ESCAPE_SEQUENCE,\n+        HlTag::StringLiteral => lsp_types::SemanticTokenType::STRING,\n+        HlTag::UnresolvedReference => semantic_tokens::UNRESOLVED_REFERENCE,\n         HlTag::Punctuation(punct) => match punct {\n             HlPunct::Bracket => semantic_tokens::BRACKET,\n             HlPunct::Brace => semantic_tokens::BRACE,"}]}