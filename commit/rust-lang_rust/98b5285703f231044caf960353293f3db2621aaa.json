{"sha": "98b5285703f231044caf960353293f3db2621aaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YjUyODU3MDNmMjMxMDQ0Y2FmOTYwMzUzMjkzZjNkYjI2MjFhYWE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-11T19:29:31Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-11T19:29:31Z"}, "message": "Rollup merge of #29777 - Manishearth:const_irrefutable_diag, r=eddyb\n\nNone", "tree": {"sha": "01106b293c1ab741057d290c9a93151bf54fea12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01106b293c1ab741057d290c9a93151bf54fea12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98b5285703f231044caf960353293f3db2621aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98b5285703f231044caf960353293f3db2621aaa", "html_url": "https://github.com/rust-lang/rust/commit/98b5285703f231044caf960353293f3db2621aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98b5285703f231044caf960353293f3db2621aaa/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef3fd96cf7abb284d069f57043d58dd07ab9edb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef3fd96cf7abb284d069f57043d58dd07ab9edb", "html_url": "https://github.com/rust-lang/rust/commit/3ef3fd96cf7abb284d069f57043d58dd07ab9edb"}, {"sha": "9be0ba5cc0e27e32e4d55332118f9891e97e5423", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be0ba5cc0e27e32e4d55332118f9891e97e5423", "html_url": "https://github.com/rust-lang/rust/commit/9be0ba5cc0e27e32e4d55332118f9891e97e5423"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "aa5824b96a1203c873c1ac4d3f283ea3b50ef215", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98b5285703f231044caf960353293f3db2621aaa/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b5285703f231044caf960353293f3db2621aaa/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=98b5285703f231044caf960353293f3db2621aaa", "patch": "@@ -153,7 +153,7 @@ pub enum ResolutionError<'a> {\n     /// error E0413: declaration shadows an enum variant or unit-like struct in scope\n     DeclarationShadowsEnumVariantOrUnitLikeStruct(Name),\n     /// error E0414: only irrefutable patterns allowed here\n-    OnlyIrrefutablePatternsAllowedHere,\n+    OnlyIrrefutablePatternsAllowedHere(DefId, Name),\n     /// error E0415: identifier is bound more than once in this parameter list\n     IdentifierBoundMoreThanOnceInParameterList(&'a str),\n     /// error E0416: identifier is bound more than once in the same pattern\n@@ -283,8 +283,16 @@ fn resolve_error<'b, 'a:'b, 'tcx:'a>(resolver: &'b Resolver<'a, 'tcx>, span: syn\n                           scope\",\n                          name);\n         },\n-        ResolutionError::OnlyIrrefutablePatternsAllowedHere => {\n+        ResolutionError::OnlyIrrefutablePatternsAllowedHere(did, name) => {\n             span_err!(resolver.session, span, E0414, \"only irrefutable patterns allowed here\");\n+            resolver.session.span_note(span, \"there already is a constant in scope sharing the same name as this pattern\");\n+            if let Some(sp) = resolver.ast_map.span_if_local(did) {\n+                resolver.session.span_note(sp, \"constant defined here\");\n+            }\n+            if let Some(directive) = resolver.current_module.import_resolutions.borrow().get(&name) {\n+                let item = resolver.ast_map.expect_item(directive.value_id);\n+                resolver.session.span_note(item.span, \"constant imported here\");\n+            }\n         },\n         ResolutionError::IdentifierBoundMoreThanOnceInParameterList(identifier) => {\n             span_err!(resolver.session, span, E0415,\n@@ -632,7 +640,7 @@ enum NameSearchType {\n #[derive(Copy, Clone)]\n enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(Def, LastPrivate),\n-    FoundConst(Def, LastPrivate),\n+    FoundConst(Def, LastPrivate, Name),\n     BareIdentifierPatternUnresolved\n }\n \n@@ -2685,7 +2693,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     renamed)\n                             );\n                         }\n-                        FoundConst(def, lp) if const_ok => {\n+                        FoundConst(def, lp, _) if const_ok => {\n                             debug!(\"(resolving pattern) resolving `{}` to \\\n                                     constant\",\n                                    renamed);\n@@ -2700,11 +2708,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 depth: 0\n                             });\n                         }\n-                        FoundConst(..) => {\n+                        FoundConst(def, _, name) => {\n                             resolve_error(\n                                 self,\n                                 pattern.span,\n-                                ResolutionError::OnlyIrrefutablePatternsAllowedHere\n+                                ResolutionError::OnlyIrrefutablePatternsAllowedHere(def.def_id(), name)\n                             );\n                         }\n                         BareIdentifierPatternUnresolved => {\n@@ -2929,7 +2937,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 return FoundStructOrEnumVariant(def, LastMod(AllPublic));\n                             }\n                             def @ DefConst(..) | def @ DefAssociatedConst(..) => {\n-                                return FoundConst(def, LastMod(AllPublic));\n+                                return FoundConst(def, LastMod(AllPublic), name);\n                             }\n                             DefStatic(..) => {\n                                 resolve_error(self,"}, {"sha": "2d345d9142b0bd70f025254d7c77ff53d15e3b44", "filename": "src/test/compile-fail/const-pattern-irrefutable.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/98b5285703f231044caf960353293f3db2621aaa/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b5285703f231044caf960353293f3db2621aaa/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs?ref=98b5285703f231044caf960353293f3db2621aaa", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    const b: u8 = 2; //~ NOTE constant defined here\n+    const d: u8 = 2; //~ NOTE constant defined here\n+}\n+\n+use foo::b as c; //~ NOTE constant imported here\n+use foo::d; //~ NOTE constant imported here\n+\n+const a: u8 = 2; //~ NOTE constant defined here\n+\n+fn main() {\n+    let a = 4; //~ ERROR only irrefutable\n+               //~^ NOTE there already is a constant in scope\n+    let c = 4; //~ ERROR only irrefutable\n+               //~^ NOTE there already is a constant in scope\n+    let d = 4; //~ ERROR only irrefutable\n+               //~^ NOTE there already is a constant in scope\n+}"}]}