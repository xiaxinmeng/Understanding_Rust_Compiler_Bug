{"sha": "70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZTVjMDhlMzk1NjRiMWNlNjlhZWFkYjI4N2ZjNDI5NmViZGYwNGE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-11T08:17:31Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T05:57:38Z"}, "message": "debuginfo: Extended test suite with various tests for enums.", "tree": {"sha": "bf971e5e59c3a441fd4980ceff3382f52afd7219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf971e5e59c3a441fd4980ceff3382f52afd7219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "html_url": "https://github.com/rust-lang/rust/commit/70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a33d1b8f1dd9898858bb65bd32c633e3cd63be9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a33d1b8f1dd9898858bb65bd32c633e3cd63be9d", "html_url": "https://github.com/rust-lang/rust/commit/a33d1b8f1dd9898858bb65bd32c633e3cd63be9d"}], "stats": {"total": 343, "additions": 343, "deletions": 0}, "files": [{"sha": "c73cddf0d89a772502fd3358b07fc9b184beeecf", "filename": "src/test/debug-info/borrowed-enum.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs?ref=70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print *the_a_ref\n+// check:$1 = {{TheA, x = 0, y = 8970181431921507452}, {TheA, 0, 2088533116, 2088533116}}\n+\n+// debugger:print *the_b_ref\n+// check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n+\n+// debugger:print *univariant_ref\n+// check:$3 = {{4820353753753434}}\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+enum ABC {\n+\tTheA { x: i64, y: i64 },\n+\tTheB (i64, i32, i32),\n+}\n+\n+// This is a special case since it does not have the implicit discriminant field.\n+enum Univariant {\n+    TheOnlyCase(i64)\n+}\n+\n+fn main() {\n+\n+\t// 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n+\t// 0b01111100011111000111110001111100 = 2088533116\n+\t// 0b0111110001111100 = 31868\n+\t// 0b01111100 = 124\n+    let the_a = TheA { x: 0, y: 8970181431921507452 };\n+    let the_a_ref : &ABC = &the_a;\n+\n+    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n+    // 0b00010001000100010001000100010001 = 286331153\n+    // 0b0001000100010001 = 4369\n+    // 0b00010001 = 17\n+    let the_b = TheB (0, 286331153, 286331153);\n+    let the_b_ref : &ABC = &the_b;\n+\n+    let univariant = TheOnlyCase(4820353753753434);\n+    let univariant_ref : &Univariant = &univariant;\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}\n\\ No newline at end of file"}, {"sha": "7e42690548e70cfaa6ec17b92c3ad32fec961848", "filename": "src/test/debug-info/evec-in-struct.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs?ref=70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:set print pretty off\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print no_padding1\n+// check:$1 = {x = {0, 1, 2}, y = -3, z = {4.5, 5.5}}\n+// debugger:print no_padding2\n+// check:$2 = {x = {6, 7, 8}, y = {{9, 10}, {11, 12}}}\n+\n+// debugger:print struct_internal_padding\n+// check:$3 = {x = {13, 14}, y = {15, 16}}\n+\n+// debugger:print single_vec\n+// check:$4 = {x = {17, 18, 19, 20, 21}}\n+\n+// debugger:print struct_padded_at_end\n+// check:$5 = {x = {22, 23}, y = {24, 25}}\n+\n+struct NoPadding1 {\n+    x: [u32, ..3],\n+    y: i32,\n+    z: [f32, ..2]\n+}\n+\n+struct NoPadding2 {\n+    x: [u32, ..3],\n+    y: [[u32, ..2], ..2]\n+}\n+\n+struct StructInternalPadding {\n+    x: [i16, ..2],\n+    y: [i64, ..2]\n+}\n+\n+struct SingleVec {\n+    x: [i16, ..5]\n+}\n+\n+struct StructPaddedAtEnd {\n+    x: [i64, ..2],\n+    y: [i16, ..2]\n+}\n+\n+fn main() {\n+\n+    let no_padding1 = NoPadding1 {\n+        x: [0, 1, 2],\n+        y: -3,\n+        z: [4.5, 5.5]\n+    };\n+\n+    let no_padding2 = NoPadding2 {\n+        x: [6, 7, 8],\n+        y: [[9, 10], [11, 12]]\n+    };\n+\n+    let struct_internal_padding = StructInternalPadding {\n+        x: [13, 14],\n+        y: [15, 16]\n+    };\n+\n+    let single_vec = SingleVec {\n+        x: [17, 18, 19, 20, 21]\n+    };\n+\n+    let struct_padded_at_end = StructPaddedAtEnd {\n+        x: [22, 23],\n+        y: [24, 25]\n+    };\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}\n\\ No newline at end of file"}, {"sha": "794a362e57310e03fa0a637b2ef7dc3ca5a424d7", "filename": "src/test/debug-info/managed-enum.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs?ref=70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print the_a->val\n+// check:$1 = {{TheA, x = 0, y = 8970181431921507452}, {TheA, 0, 2088533116, 2088533116}}\n+\n+// debugger:print the_b->val\n+// check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n+\n+// debugger:print univariant->val\n+// check:$3 = {{-9747455}}\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+enum ABC {\n+\tTheA { x: i64, y: i64 },\n+\tTheB (i64, i32, i32),\n+}\n+\n+// This is a special case since it does not have the implicit discriminant field.\n+enum Univariant {\n+    TheOnlyCase(i64)\n+}\n+\n+fn main() {\n+\n+    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // repeated byte. This way each interpretation of the union should look the same, no matter if\n+    // this is a big or little endian machine.\n+\n+\t// 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n+\t// 0b01111100011111000111110001111100 = 2088533116\n+\t// 0b0111110001111100 = 31868\n+\t// 0b01111100 = 124\n+    let the_a = @TheA { x: 0, y: 8970181431921507452 };\n+\n+    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n+    // 0b00010001000100010001000100010001 = 286331153\n+    // 0b0001000100010001 = 4369\n+    // 0b00010001 = 17\n+    let the_b = @TheB (0, 286331153, 286331153);\n+\n+    let univariant = @TheOnlyCase(-9747455);\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}\n\\ No newline at end of file"}, {"sha": "c8ad621f6f0d49dab3276914737e70df4ca9ab87", "filename": "src/test/debug-info/struct-in-enum.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs?ref=70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:set print union on\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print case1\n+// check:$1 = {{Case1, 0, {x = 2088533116, y = 2088533116, z = 31868}}, {Case1, 0, 8970181431921507452, 31868}}\n+\n+// debugger:print case2\n+// check:$2 = {{Case2, 0, {x = 286331153, y = 286331153, z = 4369}}, {Case2, 0, 1229782938247303441, 4369}}\n+\n+// debugger:print univariant\n+// check:$3 = {{{x = 123, y = 456, z = 789}}}\n+\n+struct Struct {\n+\tx: u32,\n+\ty: i32,\n+\tz: i16\n+}\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+enum Regular {\n+    Case1(u64, Struct),\n+    Case2(u64, u64, i16)\n+}\n+\n+enum Univariant {\n+\tTheOnlyCase(Struct)\n+}\n+\n+fn main() {\n+\n+    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // repeated byte. This way each interpretation of the union should look the same, no matter if\n+    // this is a big or little endian machine.\n+\n+    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n+    // 0b01111100011111000111110001111100 = 2088533116\n+    // 0b0111110001111100 = 31868\n+    // 0b01111100 = 124\n+    let case1 = Case1(0, Struct { x: 2088533116, y: 2088533116, z: 31868 });\n+\n+    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n+    // 0b00010001000100010001000100010001 = 286331153\n+    // 0b0001000100010001 = 4369\n+    // 0b00010001 = 17\n+    let case2 = Case2(0, 1229782938247303441, 4369);\n+\n+    let univariant = TheOnlyCase(Struct { x: 123, y: 456, z: 789 });\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}"}, {"sha": "c231ea5a42bb190a711e211661b3493dd1980cdc", "filename": "src/test/debug-info/unique-enum.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e5c08e39564b1ce69aeadb287fc4296ebdf04a/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Funique-enum.rs?ref=70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print *the_a\n+// check:$1 = {{TheA, x = 0, y = 8970181431921507452}, {TheA, 0, 2088533116, 2088533116}}\n+\n+// debugger:print *the_b\n+// check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n+\n+// debugger:print *univariant\n+// check:$3 = {{123234}}\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+enum ABC {\n+\tTheA { x: i64, y: i64 },\n+\tTheB (i64, i32, i32),\n+}\n+\n+// This is a special case since it does not have the implicit discriminant field.\n+enum Univariant {\n+    TheOnlyCase(i64)\n+}\n+\n+fn main() {\n+\n+    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // repeated byte. This way each interpretation of the union should look the same, no matter if\n+    // this is a big or little endian machine.\n+\n+\t// 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n+\t// 0b01111100011111000111110001111100 = 2088533116\n+\t// 0b0111110001111100 = 31868\n+\t// 0b01111100 = 124\n+    let the_a = ~TheA { x: 0, y: 8970181431921507452 };\n+\n+    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n+    // 0b00010001000100010001000100010001 = 286331153\n+    // 0b0001000100010001 = 4369\n+    // 0b00010001 = 17\n+    let the_b = ~TheB (0, 286331153, 286331153);\n+\n+    let univariant = ~TheOnlyCase(123234);\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}\n\\ No newline at end of file"}]}