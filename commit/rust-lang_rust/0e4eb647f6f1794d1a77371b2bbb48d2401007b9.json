{"sha": "0e4eb647f6f1794d1a77371b2bbb48d2401007b9", "node_id": "C_kwDOAAsO6NoAKDBlNGViNjQ3ZjZmMTc5NGQxYTc3MzcxYjJiYmI0OGQyNDAxMDA3Yjk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-12T16:44:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-12T16:44:46Z"}, "message": "More precise proc-macro errors", "tree": {"sha": "217be38032794efcde4a375ac82a5fbdd2817e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/217be38032794efcde4a375ac82a5fbdd2817e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e4eb647f6f1794d1a77371b2bbb48d2401007b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4eb647f6f1794d1a77371b2bbb48d2401007b9", "html_url": "https://github.com/rust-lang/rust/commit/0e4eb647f6f1794d1a77371b2bbb48d2401007b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e4eb647f6f1794d1a77371b2bbb48d2401007b9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f2a67b26feba72dd9ae0ad0d36a2b36652cc68c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2a67b26feba72dd9ae0ad0d36a2b36652cc68c", "html_url": "https://github.com/rust-lang/rust/commit/4f2a67b26feba72dd9ae0ad0d36a2b36652cc68c"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "193ef904de95ffb07e927cf0cae3f47460e37f40", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0e4eb647f6f1794d1a77371b2bbb48d2401007b9/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4eb647f6f1794d1a77371b2bbb48d2401007b9/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0e4eb647f6f1794d1a77371b2bbb48d2401007b9", "patch": "@@ -628,35 +628,42 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n         }\n \n         DefDiagnosticKind::UnresolvedProcMacro { ast } => {\n-            let mut precise_location = None;\n-            let (node, macro_name) = match ast {\n+            let (node, precise_location, macro_name) = match ast {\n                 MacroCallKind::FnLike { ast_id, .. } => {\n                     let node = ast_id.to_node(db.upcast());\n-                    (ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node))), None)\n+                    (\n+                        ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node))),\n+                        node.path().map(|it| it.syntax().text_range()),\n+                        node.path().and_then(|it| it.segment()).map(|it| it.to_string()),\n+                    )\n                 }\n                 MacroCallKind::Derive { ast_id, derive_attr_index, derive_index } => {\n                     let node = ast_id.to_node(db.upcast());\n-\n                     // Compute the precise location of the macro name's token in the derive\n                     // list.\n                     let token = (|| {\n-                        let derive_attr = node.attrs().nth(*derive_attr_index as usize)?;\n-                        derive_attr\n+                        let derive_attr = node\n+                            .doc_comments_and_attrs()\n+                            .nth(*derive_attr_index as usize)\n+                            .and_then(Either::left)?;\n+                        let token_tree = derive_attr.meta()?.token_tree()?;\n+                        let group_by = token_tree\n                             .syntax()\n                             .children_with_tokens()\n                             .filter_map(|elem| match elem {\n                                 syntax::NodeOrToken::Token(tok) => Some(tok),\n                                 _ => None,\n                             })\n-                            .group_by(|t| t.kind() == T![,])\n+                            .group_by(|t| t.kind() == T![,]);\n+                        let (_, mut group) = group_by\n                             .into_iter()\n                             .filter(|&(comma, _)| !comma)\n-                            .nth(*derive_index as usize)\n-                            .and_then(|(_, mut g)| g.find(|t| t.kind() == T![ident]))\n+                            .nth(*derive_index as usize)?;\n+                        group.find(|t| t.kind() == T![ident])\n                     })();\n-                    precise_location = token.as_ref().map(|tok| tok.text_range());\n                     (\n                         ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node))),\n+                        token.as_ref().map(|tok| tok.text_range()),\n                         token.as_ref().map(ToString::to_string),\n                     )\n                 }\n@@ -667,8 +674,10 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n                         .nth((*invoc_attr_index) as usize)\n                         .and_then(Either::left)\n                         .unwrap_or_else(|| panic!(\"cannot find attribute #{}\", invoc_attr_index));\n+\n                     (\n                         ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&attr))),\n+                        Some(attr.syntax().text_range()),\n                         attr.path()\n                             .and_then(|path| path.segment())\n                             .and_then(|seg| seg.name_ref())"}, {"sha": "fea3a0e8323d0a28a84c5cc46ac36dccd28107e5", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0e4eb647f6f1794d1a77371b2bbb48d2401007b9/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4eb647f6f1794d1a77371b2bbb48d2401007b9/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=0e4eb647f6f1794d1a77371b2bbb48d2401007b9", "patch": "@@ -8,20 +8,25 @@ use crate::{Diagnostic, DiagnosticsContext, Severity};\n //\n // If you are seeing a lot of \"proc macro not expanded\" warnings, you can add this option to the\n // `rust-analyzer.diagnostics.disabled` list to prevent them from showing. Alternatively you can\n-// enable support for procedural macros (see `rust-analyzer.procMacro.enable`).\n+// enable support for procedural macros (see `rust-analyzer.procMacro.attributes.enable`).\n pub(crate) fn unresolved_proc_macro(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::UnresolvedProcMacro,\n+    attr_proc_macros_enabled: bool,\n ) -> Diagnostic {\n     // Use more accurate position if available.\n     let display_range = d\n         .precise_location\n         .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()).range);\n-    // FIXME: it would be nice to tell the user whether proc macros are currently disabled\n     let message = match &d.macro_name {\n         Some(name) => format!(\"proc macro `{}` not expanded\", name),\n         None => \"proc macro not expanded\".to_string(),\n     };\n+    let message = format!(\n+        \"{message}{}\",\n+        if attr_proc_macros_enabled { \"\" } else { \" (attribute macro expansion is disabled)\" }\n+    );\n \n-    Diagnostic::new(\"unresolved-proc-macro\", message, display_range).severity(Severity::WeakWarning)\n+    Diagnostic::new(\"unresolved-proc-macro\", message, display_range)\n+        .severity(if attr_proc_macros_enabled { Severity::Error } else { Severity::WeakWarning })\n }"}, {"sha": "1cbe8ad72bb163f823dd2e0b90a4ad865d2011b9", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e4eb647f6f1794d1a77371b2bbb48d2401007b9/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4eb647f6f1794d1a77371b2bbb48d2401007b9/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=0e4eb647f6f1794d1a77371b2bbb48d2401007b9", "patch": "@@ -139,6 +139,7 @@ impl Default for ExprFillDefaultMode {\n \n #[derive(Default, Debug, Clone)]\n pub struct DiagnosticsConfig {\n+    pub attr_proc_macros_enabled: bool,\n     pub disable_experimental: bool,\n     pub disabled: FxHashSet<String>,\n     pub expr_fill_default: ExprFillDefaultMode,\n@@ -204,7 +205,7 @@ pub fn diagnostics(\n             AnyDiagnostic::UnresolvedImport(d) => handlers::unresolved_import::unresolved_import(&ctx, &d),\n             AnyDiagnostic::UnresolvedMacroCall(d) => handlers::unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n             AnyDiagnostic::UnresolvedModule(d) => handlers::unresolved_module::unresolved_module(&ctx, &d),\n-            AnyDiagnostic::UnresolvedProcMacro(d) => handlers::unresolved_proc_macro::unresolved_proc_macro(&ctx, &d),\n+            AnyDiagnostic::UnresolvedProcMacro(d) => handlers::unresolved_proc_macro::unresolved_proc_macro(&ctx, &d, config.attr_proc_macros_enabled),\n             AnyDiagnostic::InvalidDeriveTarget(d) => handlers::invalid_derive_target::invalid_derive_target(&ctx, &d),\n \n             AnyDiagnostic::InactiveCode(d) => match handlers::inactive_code::inactive_code(&ctx, &d) {"}, {"sha": "fcc4cbebc5e576dd10fbef26ee16c951445f768e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e4eb647f6f1794d1a77371b2bbb48d2401007b9/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4eb647f6f1794d1a77371b2bbb48d2401007b9/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=0e4eb647f6f1794d1a77371b2bbb48d2401007b9", "patch": "@@ -856,6 +856,7 @@ impl Config {\n \n     pub fn diagnostics(&self) -> DiagnosticsConfig {\n         DiagnosticsConfig {\n+            attr_proc_macros_enabled: self.expand_proc_attr_macros(),\n             disable_experimental: !self.data.diagnostics_experimental_enable,\n             disabled: self.data.diagnostics_disabled.clone(),\n             expr_fill_default: match self.data.assist_expressionFillDefault {\n@@ -893,7 +894,7 @@ impl Config {\n     }\n \n     pub fn expand_proc_attr_macros(&self) -> bool {\n-        self.data.procMacro_attributes_enable\n+        self.data.procMacro_enable && self.data.procMacro_attributes_enable\n     }\n \n     pub fn files(&self) -> FilesConfig {"}]}