{"sha": "373807a95cc427bb2672c96cb00ce71d8a5f4040", "node_id": "C_kwDOAAsO6NoAKDM3MzgwN2E5NWNjNDI3YmIyNjcyYzk2Y2IwMGNlNzFkOGE1ZjQwNDA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-29T14:14:11Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T15:34:40Z"}, "message": "Rename `ast::Static` to `ast::StaticItem` to match `ast::ConstItem`", "tree": {"sha": "c2636ebdc8e9c933a733ab034b7228fc2978f726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2636ebdc8e9c933a733ab034b7228fc2978f726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/373807a95cc427bb2672c96cb00ce71d8a5f4040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/373807a95cc427bb2672c96cb00ce71d8a5f4040", "html_url": "https://github.com/rust-lang/rust/commit/373807a95cc427bb2672c96cb00ce71d8a5f4040", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/373807a95cc427bb2672c96cb00ce71d8a5f4040/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bebdd7104c41fb1a32e2d9588f64874dd5a484f", "html_url": "https://github.com/rust-lang/rust/commit/4bebdd7104c41fb1a32e2d9588f64874dd5a484f"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "fb9d71b52a8a612d2fa7ae4c1d91e9382d3bfd41", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -2891,7 +2891,7 @@ pub struct Fn {\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct Static {\n+pub struct StaticItem {\n     pub ty: P<Ty>,\n     pub mutability: Mutability,\n     pub expr: Option<P<Expr>>,\n@@ -2917,7 +2917,7 @@ pub enum ItemKind {\n     /// A static item (`static`).\n     ///\n     /// E.g., `static FOO: i32 = 42;` or `static FOO: &'static str = \"bar\";`.\n-    Static(Box<Static>),\n+    Static(Box<StaticItem>),\n     /// A constant item (`const`).\n     ///\n     /// E.g., `const FOO: i32 = 42;`.\n@@ -3099,7 +3099,7 @@ impl From<ForeignItemKind> for ItemKind {\n     fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {\n         match foreign_item_kind {\n             ForeignItemKind::Static(a, b, c) => {\n-                ItemKind::Static(Static { ty: a, mutability: b, expr: c }.into())\n+                ItemKind::Static(StaticItem { ty: a, mutability: b, expr: c }.into())\n             }\n             ForeignItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),\n             ForeignItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),\n@@ -3113,7 +3113,7 @@ impl TryFrom<ItemKind> for ForeignItemKind {\n \n     fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {\n         Ok(match item_kind {\n-            ItemKind::Static(box Static { ty: a, mutability: b, expr: c }) => {\n+            ItemKind::Static(box StaticItem { ty: a, mutability: b, expr: c }) => {\n                 ForeignItemKind::Static(a, b, c)\n             }\n             ItemKind::Fn(fn_kind) => ForeignItemKind::Fn(fn_kind),"}, {"sha": "2424073ae53adae2bfb9b7f034e25f8ec70432dd", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -10,7 +10,7 @@\n use crate::ptr::P;\n use crate::token::{self, Token};\n use crate::tokenstream::*;\n-use crate::{ast::*, Static};\n+use crate::{ast::*, StaticItem};\n \n use rustc_data_structures::flat_map_in_place::FlatMapInPlace;\n use rustc_data_structures::sync::Lrc;\n@@ -1030,7 +1030,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     match kind {\n         ItemKind::ExternCrate(_orig_name) => {}\n         ItemKind::Use(use_tree) => vis.visit_use_tree(use_tree),\n-        ItemKind::Static(box Static { ty, mutability: _, expr }) => {\n+        ItemKind::Static(box StaticItem { ty, mutability: _, expr }) => {\n             vis.visit_ty(ty);\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }"}, {"sha": "3b08467fde2bf6b8a7a598e7066589785245d305", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -13,7 +13,7 @@\n //! instance, a walker looking for item names in a module will miss all of\n //! those that are created by the expansion of a macro.\n \n-use crate::{ast::*, Static};\n+use crate::{ast::*, StaticItem};\n \n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n@@ -305,7 +305,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     match &item.kind {\n         ItemKind::ExternCrate(_) => {}\n         ItemKind::Use(use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n-        ItemKind::Static(box Static { ty, mutability: _, expr })\n+        ItemKind::Static(box StaticItem { ty, mutability: _, expr })\n         | ItemKind::Const(box ConstItem { ty, expr, .. }) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);"}, {"sha": "f89e254a2f54dc248bc61e192cc7f4e175a9f10a", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -229,7 +229,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis_span, ident, attrs)\n             }\n-            ItemKind::Static(box ast::Static { ty: t, mutability: m, expr: e }) => {\n+            ItemKind::Static(box ast::StaticItem { ty: t, mutability: m, expr: e }) => {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Static(ty, *m, body_id)\n             }"}, {"sha": "236ebd04ae88d9f3be07df343455107c7513f4ab", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -10,7 +10,7 @@ use itertools::{Either, Itertools};\n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n use rustc_ast::*;\n-use rustc_ast::{walk_list, Static};\n+use rustc_ast::{walk_list, StaticItem};\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_macros::Subdiagnostic;\n@@ -990,7 +990,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     replace_span: self.ending_semi_or_hi(item.span),\n                 });\n             }\n-            ItemKind::Static(box Static { expr: None, .. }) => {\n+            ItemKind::Static(box StaticItem { expr: None, .. }) => {\n                 self.session.emit_err(errors::StaticWithoutBody {\n                     span: item.span,\n                     replace_span: self.ending_semi_or_hi(item.span),"}, {"sha": "c465f8c948a801ee468f3b6927d371fdd8218e26", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -2,7 +2,7 @@ use crate::pp::Breaks::Inconsistent;\n use crate::pprust::state::delimited::IterDelimited;\n use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n \n-use ast::Static;\n+use ast::StaticItem;\n use rustc_ast as ast;\n use rustc_ast::GenericBound;\n use rustc_ast::ModKind;\n@@ -157,7 +157,7 @@ impl<'a> State<'a> {\n                 self.print_use_tree(tree);\n                 self.word(\";\");\n             }\n-            ast::ItemKind::Static(box Static { ty, mutability: mutbl, expr: body }) => {\n+            ast::ItemKind::Static(box StaticItem { ty, mutability: mutbl, expr: body }) => {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(\n                     item.ident,"}, {"sha": "866cc5adbf3b15b4b40a6029d15cdaf0e9414278", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -25,12 +25,12 @@ pub fn expand(\n     // FIXME - if we get deref patterns, use them to reduce duplication here\n     let (item, is_stmt, ty_span) =\n         if let Annotatable::Item(item) = &item\n-            && let ItemKind::Static(box ast::Static { ty, ..}) = &item.kind\n+            && let ItemKind::Static(box ast::StaticItem { ty, ..}) = &item.kind\n         {\n             (item, false, ecx.with_def_site_ctxt(ty.span))\n         } else if let Annotatable::Stmt(stmt) = &item\n             && let StmtKind::Item(item) = &stmt.kind\n-            && let ItemKind::Static(box ast::Static { ty, ..}) = &item.kind\n+            && let ItemKind::Static(box ast::StaticItem { ty, ..}) = &item.kind\n         {\n             (item, true, ecx.with_def_site_ctxt(ty.span))\n         } else {"}, {"sha": "264f30fb10a124305e8fad61f49e357c757c6d86", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -627,7 +627,7 @@ impl<'a> ExtCtxt<'a> {\n             span,\n             name,\n             AttrVec::new(),\n-            ast::ItemKind::Static(ast::Static { ty, mutability, expr: Some(expr) }.into()),\n+            ast::ItemKind::Static(ast::StaticItem { ty, mutability, expr: Some(expr) }.into()),\n         )\n     }\n "}, {"sha": "ad328006051f1e3e7c4e5db3b091989352ce5c74", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -806,7 +806,7 @@ trait UnusedDelimLint {\n         use ast::ItemKind::*;\n \n         if let Const(box ast::ConstItem { expr: Some(expr), .. })\n-        | Static(box ast::Static { expr: Some(expr), .. }) = &item.kind\n+        | Static(box ast::StaticItem { expr: Some(expr), .. }) = &item.kind\n         {\n             self.check_unused_delims_expr(\n                 cx,"}, {"sha": "6422b8ac1ba458d58a4036865429451378923ed2", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -3,7 +3,7 @@ use crate::errors;\n use super::diagnostics::{dummy_arg, ConsumeClosingDelim};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n-use ast::Static;\n+use ast::StaticItem;\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n@@ -228,7 +228,7 @@ impl<'a> Parser<'a> {\n             self.bump(); // `static`\n             let m = self.parse_mutability();\n             let (ident, ty, expr) = self.parse_item_global(Some(m))?;\n-            (ident, ItemKind::Static(Box::new(Static { ty, mutability: m, expr })))\n+            (ident, ItemKind::Static(Box::new(StaticItem { ty, mutability: m, expr })))\n         } else if let Const::Yes(const_span) = self.parse_constness(Case::Sensitive) {\n             // CONST ITEM\n             if self.token.is_keyword(kw::Impl) {\n@@ -863,7 +863,7 @@ impl<'a> Parser<'a> {\n                 let kind = match AssocItemKind::try_from(kind) {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n-                        ItemKind::Static(box Static { ty, mutability: _, expr }) => {\n+                        ItemKind::Static(box StaticItem { ty, mutability: _, expr }) => {\n                             self.sess.emit_err(errors::AssociatedStaticItemNotAllowed { span });\n                             AssocItemKind::Const(Box::new(ConstItem {\n                                 defaultness: Defaultness::Final,"}, {"sha": "49c41470a1514c6174034c949e4ccd84d91d12e0", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -688,7 +688,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n             }\n \n             // These items live in the value namespace.\n-            ItemKind::Static(box ast::Static { mutability, .. }) => {\n+            ItemKind::Static(box ast::StaticItem { mutability, .. }) => {\n                 let res = Res::Def(DefKind::Static(mutability), def_id);\n                 self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));\n             }"}, {"sha": "19f46d45af678e8b8fa07194461239750085b77a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -2346,7 +2346,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 });\n             }\n \n-            ItemKind::Static(box ast::Static { ref ty, ref expr, .. })\n+            ItemKind::Static(box ast::StaticItem { ref ty, ref expr, .. })\n             | ItemKind::Const(box ast::ConstItem { ref ty, ref expr, .. }) => {\n                 self.with_static_rib(|this| {\n                     this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {"}, {"sha": "11b908e7e53d1c3a79c7f7c92ffa3cafb4767928", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::snippet;\n-use rustc_ast::ast::{Item, ItemKind, Ty, TyKind, Static, ConstItem};\n+use rustc_ast::ast::{Item, ItemKind, Ty, TyKind, StaticItem, ConstItem};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -106,7 +106,7 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n                 // #2438)\n             }\n \n-            if let ItemKind::Static(box Static { ty: ref var_type,.. }) = item.kind {\n+            if let ItemKind::Static(box StaticItem { ty: ref var_type,.. }) = item.kind {\n                 Self::visit_type(var_type, cx, \"statics have by default a `'static` lifetime\");\n             }\n         }"}, {"sha": "c5b58b0c060c0b32d812d78308d1d841209a28a1", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -286,7 +286,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(box ast::Static{ ty: lt, mutability: lm, expr: le}), Static(box ast::Static { ty: rt, mutability: rm, expr: re})) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Static(box ast::StaticItem { ty: lt, mutability: lm, expr: le}), Static(box ast::StaticItem { ty: rt, mutability: rm, expr: re})) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Const(box ast::ConstItem { defaultness: ld, ty: lt, expr: le}), Const(box ast::ConstItem { defaultness: rd, ty: rt, expr: re} )) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (\n             Fn(box ast::Fn {"}, {"sha": "d723ff538a8867bdf58781380e7c4700c19c2a3f", "filename": "tests/ui/stats/hir-stats.stderr", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/373807a95cc427bb2672c96cb00ce71d8a5f4040/tests%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/373807a95cc427bb2672c96cb00ce71d8a5f4040/tests%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstats%2Fhir-stats.stderr?ref=373807a95cc427bb2672c96cb00ce71d8a5f4040", "patch": "@@ -15,45 +15,45 @@ ast-stats-1 Arm                       96 ( 1.5%)             2            48\n ast-stats-1 ForeignItem               96 ( 1.5%)             1            96\n ast-stats-1 - Fn                        96 ( 1.5%)             1\n ast-stats-1 FnDecl                   120 ( 1.8%)             5            24\n-ast-stats-1 FieldDef                 160 ( 2.4%)             2            80\n-ast-stats-1 Stmt                     160 ( 2.4%)             5            32\n+ast-stats-1 FieldDef                 160 ( 2.5%)             2            80\n+ast-stats-1 Stmt                     160 ( 2.5%)             5            32\n ast-stats-1 - Local                     32 ( 0.5%)             1\n ast-stats-1 - MacCall                   32 ( 0.5%)             1\n ast-stats-1 - Expr                      96 ( 1.5%)             3\n-ast-stats-1 Param                    160 ( 2.4%)             4            40\n-ast-stats-1 Block                    192 ( 2.9%)             6            32\n+ast-stats-1 Param                    160 ( 2.5%)             4            40\n+ast-stats-1 Block                    192 ( 3.0%)             6            32\n ast-stats-1 Variant                  208 ( 3.2%)             2           104\n-ast-stats-1 GenericBound             224 ( 3.4%)             4            56\n-ast-stats-1 - Trait                    224 ( 3.4%)             4\n-ast-stats-1 AssocItem                416 ( 6.3%)             4           104\n-ast-stats-1 - Type                     208 ( 3.2%)             2\n-ast-stats-1 - Fn                       208 ( 3.2%)             2\n-ast-stats-1 GenericParam             480 ( 7.3%)             5            96\n-ast-stats-1 Pat                      504 ( 7.7%)             7            72\n+ast-stats-1 GenericBound             224 ( 3.5%)             4            56\n+ast-stats-1 - Trait                    224 ( 3.5%)             4\n+ast-stats-1 AssocItem                352 ( 5.4%)             4            88\n+ast-stats-1 - Type                     176 ( 2.7%)             2\n+ast-stats-1 - Fn                       176 ( 2.7%)             2\n+ast-stats-1 GenericParam             480 ( 7.4%)             5            96\n+ast-stats-1 Pat                      504 ( 7.8%)             7            72\n ast-stats-1 - Struct                    72 ( 1.1%)             1\n ast-stats-1 - Wild                      72 ( 1.1%)             1\n ast-stats-1 - Ident                    360 ( 5.5%)             5\n-ast-stats-1 Expr                     576 ( 8.8%)             8            72\n+ast-stats-1 Expr                     576 ( 8.9%)             8            72\n ast-stats-1 - Path                      72 ( 1.1%)             1\n ast-stats-1 - Match                     72 ( 1.1%)             1\n ast-stats-1 - Struct                    72 ( 1.1%)             1\n ast-stats-1 - Lit                      144 ( 2.2%)             2\n ast-stats-1 - Block                    216 ( 3.3%)             3\n-ast-stats-1 PathSegment              720 (11.0%)            30            24\n-ast-stats-1 Ty                       896 (13.7%)            14            64\n+ast-stats-1 PathSegment              720 (11.1%)            30            24\n+ast-stats-1 Ty                       896 (13.8%)            14            64\n ast-stats-1 - Ptr                       64 ( 1.0%)             1\n ast-stats-1 - Ref                       64 ( 1.0%)             1\n ast-stats-1 - ImplicitSelf             128 ( 2.0%)             2\n-ast-stats-1 - Path                     640 ( 9.8%)            10\n-ast-stats-1 Item                   1_224 (18.7%)             9           136\n+ast-stats-1 - Path                     640 ( 9.9%)            10\n+ast-stats-1 Item                   1_224 (18.9%)             9           136\n ast-stats-1 - Trait                    136 ( 2.1%)             1\n ast-stats-1 - Enum                     136 ( 2.1%)             1\n ast-stats-1 - ForeignMod               136 ( 2.1%)             1\n ast-stats-1 - Impl                     136 ( 2.1%)             1\n ast-stats-1 - Fn                       272 ( 4.2%)             2\n-ast-stats-1 - Use                      408 ( 6.2%)             3\n+ast-stats-1 - Use                      408 ( 6.3%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  6_552\n+ast-stats-1 Total                  6_488\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n@@ -65,55 +65,55 @@ ast-stats-2 ExprField                 48 ( 0.7%)             1            48\n ast-stats-2 WherePredicate            56 ( 0.8%)             1            56\n ast-stats-2 - BoundPredicate            56 ( 0.8%)             1\n ast-stats-2 Local                     72 ( 1.0%)             1            72\n-ast-stats-2 Arm                       96 ( 1.3%)             2            48\n-ast-stats-2 ForeignItem               96 ( 1.3%)             1            96\n-ast-stats-2 - Fn                        96 ( 1.3%)             1\n+ast-stats-2 Arm                       96 ( 1.4%)             2            48\n+ast-stats-2 ForeignItem               96 ( 1.4%)             1            96\n+ast-stats-2 - Fn                        96 ( 1.4%)             1\n ast-stats-2 InlineAsm                120 ( 1.7%)             1           120\n ast-stats-2 FnDecl                   120 ( 1.7%)             5            24\n ast-stats-2 Attribute                128 ( 1.8%)             4            32\n-ast-stats-2 - DocComment                32 ( 0.4%)             1\n-ast-stats-2 - Normal                    96 ( 1.3%)             3\n-ast-stats-2 FieldDef                 160 ( 2.2%)             2            80\n-ast-stats-2 Stmt                     160 ( 2.2%)             5            32\n-ast-stats-2 - Local                     32 ( 0.4%)             1\n-ast-stats-2 - Semi                      32 ( 0.4%)             1\n-ast-stats-2 - Expr                      96 ( 1.3%)             3\n-ast-stats-2 Param                    160 ( 2.2%)             4            40\n+ast-stats-2 - DocComment                32 ( 0.5%)             1\n+ast-stats-2 - Normal                    96 ( 1.4%)             3\n+ast-stats-2 FieldDef                 160 ( 2.3%)             2            80\n+ast-stats-2 Stmt                     160 ( 2.3%)             5            32\n+ast-stats-2 - Local                     32 ( 0.5%)             1\n+ast-stats-2 - Semi                      32 ( 0.5%)             1\n+ast-stats-2 - Expr                      96 ( 1.4%)             3\n+ast-stats-2 Param                    160 ( 2.3%)             4            40\n ast-stats-2 Block                    192 ( 2.7%)             6            32\n ast-stats-2 Variant                  208 ( 2.9%)             2           104\n-ast-stats-2 GenericBound             224 ( 3.1%)             4            56\n-ast-stats-2 - Trait                    224 ( 3.1%)             4\n-ast-stats-2 AssocItem                416 ( 5.8%)             4           104\n-ast-stats-2 - Type                     208 ( 2.9%)             2\n-ast-stats-2 - Fn                       208 ( 2.9%)             2\n-ast-stats-2 GenericParam             480 ( 6.7%)             5            96\n-ast-stats-2 Pat                      504 ( 7.0%)             7            72\n+ast-stats-2 GenericBound             224 ( 3.2%)             4            56\n+ast-stats-2 - Trait                    224 ( 3.2%)             4\n+ast-stats-2 AssocItem                352 ( 5.0%)             4            88\n+ast-stats-2 - Type                     176 ( 2.5%)             2\n+ast-stats-2 - Fn                       176 ( 2.5%)             2\n+ast-stats-2 GenericParam             480 ( 6.8%)             5            96\n+ast-stats-2 Pat                      504 ( 7.1%)             7            72\n ast-stats-2 - Struct                    72 ( 1.0%)             1\n ast-stats-2 - Wild                      72 ( 1.0%)             1\n-ast-stats-2 - Ident                    360 ( 5.0%)             5\n+ast-stats-2 - Ident                    360 ( 5.1%)             5\n ast-stats-2 Expr                     648 ( 9.1%)             9            72\n ast-stats-2 - Path                      72 ( 1.0%)             1\n ast-stats-2 - Match                     72 ( 1.0%)             1\n ast-stats-2 - Struct                    72 ( 1.0%)             1\n ast-stats-2 - InlineAsm                 72 ( 1.0%)             1\n ast-stats-2 - Lit                      144 ( 2.0%)             2\n ast-stats-2 - Block                    216 ( 3.0%)             3\n-ast-stats-2 PathSegment              792 (11.1%)            33            24\n-ast-stats-2 Ty                       896 (12.5%)            14            64\n+ast-stats-2 PathSegment              792 (11.2%)            33            24\n+ast-stats-2 Ty                       896 (12.6%)            14            64\n ast-stats-2 - Ptr                       64 ( 0.9%)             1\n ast-stats-2 - Ref                       64 ( 0.9%)             1\n ast-stats-2 - ImplicitSelf             128 ( 1.8%)             2\n-ast-stats-2 - Path                     640 ( 8.9%)            10\n-ast-stats-2 Item                   1_496 (20.9%)            11           136\n+ast-stats-2 - Path                     640 ( 9.0%)            10\n+ast-stats-2 Item                   1_496 (21.1%)            11           136\n ast-stats-2 - Trait                    136 ( 1.9%)             1\n ast-stats-2 - Enum                     136 ( 1.9%)             1\n ast-stats-2 - ExternCrate              136 ( 1.9%)             1\n ast-stats-2 - ForeignMod               136 ( 1.9%)             1\n ast-stats-2 - Impl                     136 ( 1.9%)             1\n ast-stats-2 - Fn                       272 ( 3.8%)             2\n-ast-stats-2 - Use                      544 ( 7.6%)             4\n+ast-stats-2 - Use                      544 ( 7.7%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  7_152\n+ast-stats-2 Total                  7_088\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}]}