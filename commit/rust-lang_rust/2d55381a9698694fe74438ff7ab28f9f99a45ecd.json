{"sha": "2d55381a9698694fe74438ff7ab28f9f99a45ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNTUzODFhOTY5ODY5NGZlNzQ0MzhmZjdhYjI4ZjlmOTlhNDVlY2Q=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-12T13:50:56Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-12T13:50:56Z"}, "message": "added string_add lint and fixed string_add_assign + test", "tree": {"sha": "e0e2f7b2d376a1ab7552d2d70a9a0190f53d8ec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0e2f7b2d376a1ab7552d2d70a9a0190f53d8ec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d55381a9698694fe74438ff7ab28f9f99a45ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d55381a9698694fe74438ff7ab28f9f99a45ecd", "html_url": "https://github.com/rust-lang/rust/commit/2d55381a9698694fe74438ff7ab28f9f99a45ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d55381a9698694fe74438ff7ab28f9f99a45ecd/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ff1e9a7664275cc31fc00f30609d54849197123", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ff1e9a7664275cc31fc00f30609d54849197123", "html_url": "https://github.com/rust-lang/rust/commit/6ff1e9a7664275cc31fc00f30609d54849197123"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "4644bac94cde1c78a5d319dcc5b5c1fdca9409c3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d55381a9698694fe74438ff7ab28f9f99a45ecd/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d55381a9698694fe74438ff7ab28f9f99a45ecd/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2d55381a9698694fe74438ff7ab28f9f99a45ecd", "patch": "@@ -30,6 +30,7 @@ Lints included in this crate:\n  - `collapsible_if`: Warns on cases where two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n  - `zero_width_space`: Warns on encountering a unicode zero-width space\n  - `string_add_assign`: Warns on `x = x + ..` where `x` is a `String` and suggests using `push_str(..)` instead.\n+ - `string_add`: Matches `x + ..` where `x` is a `String` and where `string_add_assign` doesn't warn. Allowed by default.\n  - `needless_return`: Warns on using `return expr;` when a simple `expr` would suffice.\n  - `let_and_return`: Warns on doing `let x = expr; x` at the end of a function.\n  - `option_unwrap_used`: Warns when `Option.unwrap()` is used, and suggests `.expect()`."}, {"sha": "f2872a17b56e7fb4f0d6f41c6d4c0fd47d4780ad", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d55381a9698694fe74438ff7ab28f9f99a45ecd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d55381a9698694fe74438ff7ab28f9f99a45ecd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2d55381a9698694fe74438ff7ab28f9f99a45ecd", "patch": "@@ -56,6 +56,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box misc::ModuloOne as LintPassObject);\n     reg.register_lint_pass(box unicode::Unicode as LintPassObject);\n     reg.register_lint_pass(box strings::StringAdd as LintPassObject);\n+    reg.register_lint_pass(box strings::StringAddAssign as LintPassObject);\n     reg.register_lint_pass(box returns::ReturnPass as LintPassObject);\n     reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n "}, {"sha": "60ea23556ac3b396d29ec82c706fd6f98e971f32", "filename": "src/strings.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2d55381a9698694fe74438ff7ab28f9f99a45ecd/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d55381a9698694fe74438ff7ab28f9f99a45ecd/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=2d55381a9698694fe74438ff7ab28f9f99a45ecd", "patch": "@@ -9,18 +9,56 @@ use syntax::ast::*;\n use syntax::codemap::{Span, Spanned};\n use eq_op::is_exp_equal;\n use types::match_ty_unwrap;\n-use utils::{match_def_path, span_lint, walk_ptrs_ty};\n+use utils::{match_def_path, span_lint, walk_ptrs_ty, get_parent_expr};\n \n declare_lint! {\n     pub STRING_ADD_ASSIGN,\n     Warn,\n     \"Warn on `x = x + ..` where x is a `String`\"\n }\n \n-#[derive(Copy,Clone)]\n+declare_lint! {\n+\tpub STRING_ADD,\n+\tAllow,\n+\t\"Warn on `x + ..` where x is a `String`\"\n+}\n+\n+#[derive(Copy, Clone)]\n pub struct StringAdd;\n \n impl LintPass for StringAdd {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(STRING_ADD)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, e: &Expr) {\n+\t\tif let &ExprBinary(Spanned{ node: BiAdd, .. }, ref left, _) = &e.node {\n+\t\t\tif is_string(cx, left) {\n+\t\t\t\tif let Allow = cx.current_level(STRING_ADD_ASSIGN) {\n+\t\t\t\t\t// the string_add_assign is allow, so no duplicates\n+\t\t\t\t} else {\n+\t\t\t\t\tlet parent = get_parent_expr(cx, e);\n+\t\t\t\t\tif let Some(ref p) = parent {\n+\t\t\t\t\t\tif let &ExprAssign(ref target, _) = &p.node {\n+\t\t\t\t\t\t\t// avoid duplicate matches\n+\t\t\t\t\t\t\tif is_exp_equal(target, left) { return; }\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t//TODO check for duplicates\n+\t\t\t\t span_lint(cx, STRING_ADD, e.span,\n+\t\t\t\t\t\t\"you add something to a string. \\\n+\t\t\t\t\t\tConsider using `String::push_str()` instead.\")\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+            \n+\n+#[derive(Copy, Clone)]\n+pub struct StringAddAssign;\n+\n+impl LintPass for StringAddAssign {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(STRING_ADD_ASSIGN)\n     }\n@@ -37,8 +75,9 @@ impl LintPass for StringAdd {\n }\n \n fn is_string(cx: &Context, e: &Expr) -> bool {\n-    if let TyStruct(did, _) = walk_ptrs_ty(cx.tcx.expr_ty(e)).sty {\n-        match_def_path(cx, did.did, &[\"std\", \"string\", \"String\"])\n+\tlet ty = walk_ptrs_ty(cx.tcx.expr_ty(e));\n+    if let TyStruct(did, _) = ty.sty {\n+        match_def_path(cx, did.did, &[\"collections\", \"string\", \"String\"])\n     } else { false }\n }\n "}, {"sha": "e898a087d08ba820f6d8dafaa1281d838e3bde0e", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d55381a9698694fe74438ff7ab28f9f99a45ecd/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d55381a9698694fe74438ff7ab28f9f99a45ecd/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=2d55381a9698694fe74438ff7ab28f9f99a45ecd", "patch": "@@ -2,11 +2,16 @@\n #![plugin(clippy)]\n \n #![deny(string_add_assign)]\n-\n+#![deny(string_add)]\n fn main() {\n-    let x = \"\".to_owned();\n+    let mut x = \"\".to_owned();\n \n-    for i in (1..3) {\n-        x = x + \".\"; //~ERROR\n+    for _ in (1..3) {\n+        x = x + \".\"; //~ERROR you assign the result of adding something to this string.\n     }\n+    \n+    let y = \"\".to_owned();\n+    let z = y + \"...\"; //~ERROR you add something to a string.\n+    \n+    assert_eq!(&x, &z);\n }"}]}