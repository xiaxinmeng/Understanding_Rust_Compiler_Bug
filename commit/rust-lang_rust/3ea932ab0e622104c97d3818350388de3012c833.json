{"sha": "3ea932ab0e622104c97d3818350388de3012c833", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYTkzMmFiMGU2MjIxMDRjOTdkMzgxODM1MDM4OGRlMzAxMmM4MzM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T01:21:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T02:07:04Z"}, "message": "Refer to \"`self` type\" instead of \"receiver type\"", "tree": {"sha": "736fb7a46022e7701181f7db3e3f531ab662067c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/736fb7a46022e7701181f7db3e3f531ab662067c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ea932ab0e622104c97d3818350388de3012c833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea932ab0e622104c97d3818350388de3012c833", "html_url": "https://github.com/rust-lang/rust/commit/3ea932ab0e622104c97d3818350388de3012c833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ea932ab0e622104c97d3818350388de3012c833/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "html_url": "https://github.com/rust-lang/rust/commit/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8"}], "stats": {"total": 230, "additions": 155, "deletions": 75}, "files": [{"sha": "baaccea16cb9be57c97e7057479a161495e20f7d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -1627,7 +1627,7 @@ impl<'tcx> ObligationCause<'tcx> {\n             MainFunctionType => Error0580(\"main function has wrong type\"),\n             StartFunctionType => Error0308(\"start function has wrong type\"),\n             IntrinsicType => Error0308(\"intrinsic has wrong type\"),\n-            MethodReceiver => Error0308(\"mismatched method receiver\"),\n+            MethodReceiver => Error0308(\"mismatched `self` parameter type\"),\n \n             // In the case where we have no more specific thing to\n             // say, also take a look at the error code, maybe we can"}, {"sha": "aac722b56a9831f417b80cdcb2a81318ee5a1623", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -47,13 +47,15 @@ impl ObjectSafetyViolation {\n                 \"the trait cannot use `Self` as a type parameter \\\n                  in the supertraits or where-clauses\".into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod) =>\n-                format!(\"method `{}` has no receiver\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) =>\n-                format!(\"method `{}` references the `Self` type \\\n-                         in its arguments or return type\", name).into(),\n-            ObjectSafetyViolation::Method(name,\n-                                            MethodViolationCode::WhereClauseReferencesSelf(_)) =>\n-                format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n+                format!(\"associated function `{}` has no `self` parameter\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) => format!(\n+                \"method `{}` references the `Self` type in its arguments or return type\",\n+                name,\n+            ).into(),\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::WhereClauseReferencesSelf(_),\n+            ) => format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver) =>"}, {"sha": "ac8ee43dd0801670797b165e48e1b7eba5a30237", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -762,19 +762,19 @@ fn check_opaque_types<'fcx, 'tcx>(\n     substituted_predicates\n }\n \n+const HELP_FOR_SELF_TYPE: &str =\n+    \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n+     `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n+     of the previous types except `Self`)\";\n+\n fn check_method_receiver<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     method_sig: &hir::MethodSig,\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {\n-    const HELP_FOR_SELF_TYPE: &str =\n-        \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\\n-         `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one \\\n-         of the previous types except `Self`)\";\n     // Check that the method has a valid receiver type, given the type `Self`.\n-    debug!(\"check_method_receiver({:?}, self_ty={:?})\",\n-           method, self_ty);\n+    debug!(\"check_method_receiver({:?}, self_ty={:?})\", method, self_ty);\n \n     if !method.method_has_self_argument {\n         return;\n@@ -805,12 +805,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n     if fcx.tcx.features().arbitrary_self_types {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {\n             // Report error; `arbitrary_self_types` was enabled.\n-            fcx.tcx.sess.diagnostic().mut_span_err(\n-                span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n-            ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n-            .help(HELP_FOR_SELF_TYPE)\n-            .code(DiagnosticId::Error(\"E0307\".into()))\n-            .emit();\n+            e0307(fcx, span, receiver_ty);\n         }\n     } else {\n         if !receiver_is_valid(fcx, span, receiver_ty, self_ty, false) {\n@@ -830,17 +825,22 @@ fn check_method_receiver<'fcx, 'tcx>(\n                 .emit();\n             } else {\n                 // Report error; would not have worked with `arbitrary_self_types`.\n-                fcx.tcx.sess.diagnostic().mut_span_err(\n-                    span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n-                ).note(\"type must be `Self` or a type that dereferences to it\")\n-                .help(HELP_FOR_SELF_TYPE)\n-                .code(DiagnosticId::Error(\"E0307\".into()))\n-                .emit();\n+                e0307(fcx, span, receiver_ty);\n             }\n         }\n     }\n }\n \n+fn e0307(fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n+    fcx.tcx.sess.diagnostic().mut_span_err(\n+        span,\n+        &format!(\"invalid `self` parameter type: {:?}\", receiver_ty)\n+    ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n+    .help(HELP_FOR_SELF_TYPE)\n+    .code(DiagnosticId::Error(\"E0307\".into()))\n+    .emit();\n+}\n+\n /// Returns whether `receiver_ty` would be considered a valid receiver type for `self_ty`. If\n /// `arbitrary_self_types` is enabled, `receiver_ty` must transitively deref to `self_ty`, possibly\n /// through a `*const/mut T` raw pointer. If the feature is not enabled, the requirements are more"}, {"sha": "ae0f17892959dcf493614c5172513b4195fdcd29", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -2425,6 +2425,83 @@ struct Bar<S, T> { x: Foo<S, T> }\n ```\n \"##,\n \n+E0307: r##\"\n+This error indicates that the `self` parameter in a method has an invalid\n+\"reciever type\".\n+\n+Methods take a special first parameter, of which there are three variants:\n+`self`, `&self`, and `&mut self`. The type `Self` acts as an alias to the\n+type of the current trait implementor, or \"receiver type\". Besides the\n+already mentioned `Self`, `&Self` and `&mut Self` valid receiver types, the\n+following are also valid, if less common: `self: Box<Self>`,\n+`self: Rc<Self>`, `self: Arc<Self>`, and `self: Pin<P>` (where P is one of\n+the previous types except `Self`).\n+\n+```\n+# struct Foo;\n+trait Trait {\n+    fn foo(&self);\n+//         ^^^^^ this let's you refer to the type that implements this trait\n+}\n+impl Trait for Foo {\n+//             ^^^ this is the \"receiver type\"\n+    fn foo(&self) {}\n+//         ^^^^^ this is of type `Foo`\n+}\n+```\n+\n+The above is equivalent to:\n+\n+```\n+# struct Foo;\n+# trait Trait {\n+#     fn foo(&self);\n+# }\n+impl Trait for Foo {\n+    fn foo(&self: &Foo) {}\n+}\n+```\n+\n+When using an invalid reciver type, like in the following example,\n+\n+```compile_fail,E0307\n+# struct Foo;\n+# struct Bar;\n+# trait Trait {\n+#     fn foo(&self);\n+# }\n+impl Trait for Struct {\n+    fn foo(&self: &Bar) {}\n+}\n+```\n+\n+The nightly feature [Arbintrary self types][AST] extends the accepted\n+receiver type to also include any type that can dereference to `Self`:\n+\n+```\n+#![feature(arbitrary_self_types)]\n+\n+struct Foo;\n+struct Bar;\n+\n+// Because you can dereference `Bar` into `Foo`...\n+impl std::ops::Deref for Bar {\n+    type Target = Foo;\n+\n+    fn deref(&self) -> &Foo {\n+        &Foo\n+    }\n+}\n+\n+impl Foo {\n+    fn foo(self: Bar) {}\n+//         ^^^^^^^^^ ...it can be used as the receiver type\n+}\n+```\n+\n+[AST]: https://doc.rust-lang.org/unstable-book/language-features/arbitrary-self-types.html\n+\"##,\n+\n E0321: r##\"\n A cross-crate opt-out trait was implemented on something which wasn't a struct\n or enum type. Erroneous code example:\n@@ -4851,7 +4928,6 @@ register_diagnostics! {\n //  E0247,\n //  E0248, // value used as a type, now reported earlier during resolution as E0412\n //  E0249,\n-    E0307, // invalid method `self` type\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion"}, {"sha": "6f219a6e0b1feabbd5c96ea660904dece1961b76", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -62,7 +62,7 @@ error[E0038]: the trait `X` cannot be made into an object\n LL | impl dyn X {\n    |      ^^^^^ the trait `X` cannot be made into an object\n    |\n-   = note: method `xxx` has no receiver\n+   = note: associated function `xxx` has no `self` parameter\n \n error: aborting due to 9 previous errors\n "}, {"sha": "9b5e719781281769cd8e18ef1d0e69e0f721c228", "filename": "src/test/ui/error-codes/E0033-teach.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| method `foo` has no receiver\n+    //~| associated function `foo` has no `self` parameter\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "1d4c2d788a43b7a04ae69a1e973e7e1cc9e01e96", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -10,7 +10,7 @@ error[E0038]: the trait `SomeTrait` cannot be made into an object\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n    |\n-   = note: method `foo` has no receiver\n+   = note: associated function `foo` has no `self` parameter\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:13:9"}, {"sha": "86dacfd1a47ba3d0ba1866a32c597e2d983472ee", "filename": "src/test/ui/error-codes/E0033.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let trait_obj: &dyn SomeTrait = SomeTrait;\n     //~^ ERROR expected value, found trait `SomeTrait`\n     //~| ERROR E0038\n-    //~| method `foo` has no receiver\n+    //~| associated function `foo` has no `self` parameter\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "803d7917e5638b59decfebd244d51941ff335d23", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -10,7 +10,7 @@ error[E0038]: the trait `SomeTrait` cannot be made into an object\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n    |\n-   = note: method `foo` has no receiver\n+   = note: associated function `foo` has no `self` parameter\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033.rs:11:9"}, {"sha": "9ab8e13893bc77b5b63bfb9b575b7dd4fd843faa", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -6,11 +6,11 @@ struct Foo<'a,'b> {\n impl<'a,'b> Foo<'a,'b> {\n     fn bar(self:\n            Foo<'b,'a>\n-    //~^ ERROR mismatched method receiver\n+    //~^ ERROR mismatched `self` parameter type\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched method receiver\n+    //~| ERROR mismatched `self` parameter type\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch"}, {"sha": "4bf2d573d4f967580eb8aa07333eb077e963b8ff", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/explicit-self-lifetime-mismatch.rs:8:12\n    |\n LL |            Foo<'b,'a>\n@@ -17,7 +17,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a,'b> Foo<'a,'b> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/explicit-self-lifetime-mismatch.rs:8:12\n    |\n LL |            Foo<'b,'a>"}, {"sha": "b47568400c3b702b5fd381647a59d2ee8bfd32f6", "filename": "src/test/ui/issues/issue-17740.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -4,11 +4,11 @@ struct Foo<'a> {\n \n impl <'a> Foo<'a>{\n     fn bar(self: &mut Foo) {\n-    //~^ mismatched method receiver\n+    //~^ mismatched `self` parameter type\n     //~| expected type `Foo<'a>`\n     //~| found type `Foo<'_>`\n     //~| lifetime mismatch\n-    //~| mismatched method receiver\n+    //~| mismatched `self` parameter type\n     //~| expected type `Foo<'a>`\n     //~| found type `Foo<'_>`\n     //~| lifetime mismatch"}, {"sha": "b8a0a0676319a292aa5ac9888fc9f3b7336ca303", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17740.rs:6:18\n    |\n LL |     fn bar(self: &mut Foo) {\n@@ -23,7 +23,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl <'a> Foo<'a>{\n    |       ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17740.rs:6:18\n    |\n LL |     fn bar(self: &mut Foo) {"}, {"sha": "44279cc867b46e268a4a5e58f76bf937f0990fb7", "filename": "src/test/ui/issues/issue-17905-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -6,8 +6,8 @@ impl Pair<\n     isize\n > {\n     fn say(self: &Pair<&str, isize>) {\n-//~^ ERROR mismatched method receiver\n-//~| ERROR mismatched method receiver\n+//~^ ERROR mismatched `self` parameter type\n+//~| ERROR mismatched `self` parameter type\n         println!(\"{:?}\", self);\n     }\n }"}, {"sha": "585bc9c14883bfb867afe9f9e22eed6a44ab15d3", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17905-2.rs:8:18\n    |\n LL |     fn say(self: &Pair<&str, isize>) {\n@@ -21,7 +21,7 @@ note: ...does not necessarily outlive the lifetime '_ as defined on the impl at\n LL |     &str,\n    |     ^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/issue-17905-2.rs:8:18\n    |\n LL |     fn say(self: &Pair<&str, isize>) {"}, {"sha": "d70a7c2b5299c6bbf6a2ce67a7c3fe47a3f055ed", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `Qiz` cannot be made into an object\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n    |\n-   = note: method `qiz` has no receiver\n+   = note: associated function `qiz` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "b1dac26d65a15552b0171de954b53273a0e4f8f0", "filename": "src/test/ui/issues/issue-56806.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -1,7 +1,6 @@\n pub trait Trait {\n     fn dyn_instead_of_self(self: Box<dyn Trait>);\n-    //~^ ERROR invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+    //~^ ERROR invalid `self` parameter type\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "a4f9aadcfef3ee3f1bb5e1e74cd4668c93dc1a4d", "filename": "src/test/ui/issues/issue-56806.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56806.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -1,11 +1,12 @@\n-error[E0307]: invalid method receiver type: std::boxed::Box<(dyn Trait + 'static)>\n+error[E0307]: invalid `self` parameter type: std::boxed::Box<(dyn Trait + 'static)>\n   --> $DIR/issue-56806.rs:2:34\n    |\n LL |     fn dyn_instead_of_self(self: Box<dyn Trait>);\n    |                                  ^^^^^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "c189c358b422340458fc873d7f589a4606fc64c5", "filename": "src/test/ui/object-safety/object-safety-no-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `Foo` cannot be made into an object\n LL | fn foo_implicit<T:Foo+'static>(b: Box<T>) -> Box<dyn Foo + 'static> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: method `foo` has no receiver\n+   = note: associated function `foo` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "63ac11dc8ae01b463a4269b14dbbdd3ca092fd8e", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n LL | fn bar(_x: Foo) {}\n    | ^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n    |\n-   = note: method `bar` has no receiver\n+   = note: associated function `bar` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "7a0cfb679ed67f84c4c14919f3a8921f7b856550", "filename": "src/test/ui/span/issue-27522.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -3,7 +3,7 @@\n struct SomeType {}\n \n trait Foo {\n-    fn handler(self: &SomeType); //~ ERROR invalid method receiver type\n+    fn handler(self: &SomeType); //~ ERROR invalid `self` parameter type\n }\n \n fn main() {}"}, {"sha": "8a254a9685543d6af60ca50aa544ba82d81c0ea0", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -1,11 +1,12 @@\n-error[E0307]: invalid method receiver type: &SomeType\n+error[E0307]: invalid `self` parameter type: &SomeType\n   --> $DIR/issue-27522.rs:6:22\n    |\n LL |     fn handler(self: &SomeType);\n    |                      ^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0307`."}, {"sha": "7f6bc0ebb70e51985242375a0bbbcab7daff9925", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `Tr` cannot be made into an object\n LL |     let _: &dyn Tr = &St;\n    |                      ^^^ the trait `Tr` cannot be made into an object\n    |\n-   = note: method `foo` has no receiver\n+   = note: associated function `foo` has no `self` parameter\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Tr>` for `&St`\n \n error[E0038]: the trait `Tr` cannot be made into an object\n@@ -13,7 +13,7 @@ error[E0038]: the trait `Tr` cannot be made into an object\n LL |     let _: &dyn Tr = &St;\n    |            ^^^^^^^ the trait `Tr` cannot be made into an object\n    |\n-   = note: method `foo` has no receiver\n+   = note: associated function `foo` has no `self` parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bdb8e197fbe498e1980562de3e00fc19f4d237bf", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -6,7 +6,7 @@ struct Foo {\n \n impl Foo {\n     fn foo(self: isize, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         self.f + x\n     }\n }\n@@ -17,11 +17,11 @@ struct Bar<T> {\n \n impl<T> Bar<T> {\n     fn foo(self: Bar<isize>, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         x\n     }\n     fn bar(self: &Bar<usize>, x: isize) -> isize {\n-        //~^ ERROR invalid method receiver type\n+        //~^ ERROR invalid `self` parameter type\n         x\n     }\n }\n@@ -34,14 +34,14 @@ trait SomeTrait {\n \n impl<'a, T> SomeTrait for &'a Bar<T> {\n     fn dummy1(self: &&'a Bar<T>) { }\n-    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched method receiver\n-    //~^ ERROR mismatched method receiver\n+    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched `self` parameter type\n+    //~^ ERROR mismatched `self` parameter type\n     fn dummy3(self: &&Bar<T>) {}\n-    //~^ ERROR mismatched method receiver\n+    //~^ ERROR mismatched `self` parameter type\n     //~| expected type `&'a Bar<T>`\n     //~| found type `&Bar<T>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched method receiver\n+    //~| ERROR mismatched `self` parameter type\n     //~| expected type `&'a Bar<T>`\n     //~| found type `&Bar<T>`\n     //~| lifetime mismatch"}, {"sha": "b2fe1b281fc999ee0ed8324d1b536abab6a2dc7f", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ea932ab0e622104c97d3818350388de3012c833/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=3ea932ab0e622104c97d3818350388de3012c833", "patch": "@@ -1,31 +1,31 @@\n-error[E0307]: invalid method receiver type: isize\n+error[E0307]: invalid `self` parameter type: isize\n   --> $DIR/ufcs-explicit-self-bad.rs:8:18\n    |\n LL |     fn foo(self: isize, x: isize) -> isize {\n    |                  ^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0307]: invalid method receiver type: Bar<isize>\n+error[E0307]: invalid `self` parameter type: Bar<isize>\n   --> $DIR/ufcs-explicit-self-bad.rs:19:18\n    |\n LL |     fn foo(self: Bar<isize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0307]: invalid method receiver type: &Bar<usize>\n+error[E0307]: invalid `self` parameter type: &Bar<usize>\n   --> $DIR/ufcs-explicit-self-bad.rs:23:18\n    |\n LL |     fn bar(self: &Bar<usize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n@@ -44,7 +44,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:37:21\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n@@ -63,7 +63,7 @@ note: ...does not necessarily outlive the anonymous lifetime #1 defined on the m\n LL |     fn dummy2(self: &Bar<T>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n@@ -82,7 +82,7 @@ note: ...does not necessarily outlive the lifetime 'a as defined on the impl at\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n    |      ^^\n \n-error[E0308]: mismatched method receiver\n+error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n@@ -103,4 +103,5 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n \n error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0307, E0308.\n+For more information about an error, try `rustc --explain E0307`."}]}