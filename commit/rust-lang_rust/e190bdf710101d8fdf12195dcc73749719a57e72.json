{"sha": "e190bdf710101d8fdf12195dcc73749719a57e72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOTBiZGY3MTAxMDFkOGZkZjEyMTk1ZGNjNzM3NDk3MTlhNTdlNzI=", "commit": {"author": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2020-07-16T22:40:50Z"}, "committer": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2020-07-16T22:40:50Z"}, "message": "fill in all those options.", "tree": {"sha": "c757d0b3f1d39afc798ccae97225cdcac240da01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c757d0b3f1d39afc798ccae97225cdcac240da01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e190bdf710101d8fdf12195dcc73749719a57e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e190bdf710101d8fdf12195dcc73749719a57e72", "html_url": "https://github.com/rust-lang/rust/commit/e190bdf710101d8fdf12195dcc73749719a57e72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e190bdf710101d8fdf12195dcc73749719a57e72/comments", "author": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ec236c8c7c5a32077c465eb254646a9860f802", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ec236c8c7c5a32077c465eb254646a9860f802", "html_url": "https://github.com/rust-lang/rust/commit/48ec236c8c7c5a32077c465eb254646a9860f802"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "2b3aa33dfa3d6752716f26501221aac31b04e1ee", "filename": "src/librustc_target/spec/thumbv4t_nintendo_gba.rs", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e190bdf710101d8fdf12195dcc73749719a57e72/src%2Flibrustc_target%2Fspec%2Fthumbv4t_nintendo_gba.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e190bdf710101d8fdf12195dcc73749719a57e72/src%2Flibrustc_target%2Fspec%2Fthumbv4t_nintendo_gba.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv4t_nintendo_gba.rs?ref=e190bdf710101d8fdf12195dcc73749719a57e72", "patch": "@@ -1,12 +1,11 @@\n-//! Targets the Nintendo Game Boy Advance (GBA).\n+//! Targets the Nintendo Game Boy Advance (GBA), a handheld game device from 2001.\n //!\n-//! The GBA is a handheld game device from 2001. Inside, the CPU is an ARM7TDMI.\n-//! That's in the ARMv4T architecture family.\n+//! Please ping @Lokathor if changes are needed.\n //!\n-//! Technically the device has no OS, however we're going to copy the\n-//! `mipsel_sony_psp` target setup and set the OS string to be \"GBA\". Other than\n-//! the setting of the `target_os` and `target_vendor` values, this target is a\n-//! fairly standard configuration for `thumbv4t`\n+//! Important: This target **does not** specify a linker script or the ROM\n+//! header. You'll still need to provide these yourself to construct a final\n+//! binary. Generally you'd do this with something like\n+//! `-Clink-arg=-Tmy_script.ld` and `-Clink-arg=my_crt.o`.\n \n use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n \n@@ -16,14 +15,65 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        target_os: \"gba\".to_string(),\n-        target_env: String::new(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"gba\".to_string(),\n         target_vendor: \"nintendo\".to_string(),\n         arch: \"arm\".to_string(),\n-        data_layout: \"TODO\".to_string(),\n+        /* Data layout args are '-' separated:\n+         * little endian\n+         * stack is 64-bit aligned (EABI)\n+         * pointers are 32-bit\n+         * i64 must be 64-bit aligned (EABI)\n+         * mangle names with ELF style\n+         * native integers are 32-bit\n+         * All other elements are default\n+         */\n+        data_layout: \"e-S64-p:32:32-i64:64-m:e-n32\".to_string(),\n         linker_flavor: LinkerFlavor::Ld,\n         options: TargetOptions {\n-            // TODO\n+            linker: Some(\"arm-none-eabi-ld\".to_string()),\n+            linker_is_gnu: true,\n+\n+            // extra args passed to the external assembler\n+            asm_args: vec![\"-mcpu=arm7tdmi\".to_string(), \"-mthumb-interwork\".to_string()],\n+\n+            cpu: \"arm7tdmi\".to_string(),\n+\n+            // minimum extra features, these cannot be disabled via -C\n+            features: \"+soft-float,+strict-align\".to_string(),\n+\n+            executables: true,\n+\n+            relocation_model: RelocModel::Static,\n+\n+            //function_sections: bool,\n+            //exe_suffix: String,\n+            main_needs_argc_argv: false,\n+\n+            // if we have thread-local storage\n+            has_elf_tls: false,\n+\n+            // don't have atomic compare-and-swap\n+            atomic_cas: false,\n+\n+            // always just abort\n+            panic_strategy: PanicStrategy::Abort,\n+\n+            // ABIs to not use\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n+\n+            // The minimum alignment for global symbols.\n+            min_global_align: Some(4),\n+\n+            // no threads here\n+            singlethread: true,\n+\n+            // GBA has no builtins\n+            no_builtins: true,\n+\n+            // this is off just like in the `thumb_base`\n+            emit_debug_gdb_scripts: false,\n+\n             ..TargetOptions::default()\n         },\n     })"}]}