{"sha": "7c5487dc62d569d4bc32cbe51951668406242137", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNTQ4N2RjNjJkNTY5ZDRiYzMyY2JlNTE5NTE2Njg0MDYyNDIxMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T07:49:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T07:49:52Z"}, "message": "Auto merge of #7562 - dswij:filter-next-false-positive, r=xFrednet\n\nFix false positive on `filter_next`\n\nfixes #7561\n\nchangelog: Fix false positive on [`filter_next`] when a method does not implement `Iterator`", "tree": {"sha": "803b1a01a433d91ba66979640e1c254cf151e584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803b1a01a433d91ba66979640e1c254cf151e584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c5487dc62d569d4bc32cbe51951668406242137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5487dc62d569d4bc32cbe51951668406242137", "html_url": "https://github.com/rust-lang/rust/commit/7c5487dc62d569d4bc32cbe51951668406242137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c5487dc62d569d4bc32cbe51951668406242137/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4d76b42fd12d963eddafb7e1d9b8559951f73be", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d76b42fd12d963eddafb7e1d9b8559951f73be", "html_url": "https://github.com/rust-lang/rust/commit/b4d76b42fd12d963eddafb7e1d9b8559951f73be"}, {"sha": "91b598a8e484da328325ece3400e8612b6f854df", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b598a8e484da328325ece3400e8612b6f854df", "html_url": "https://github.com/rust-lang/rust/commit/91b598a8e484da328325ece3400e8612b6f854df"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "bcf8d93b602ef2a7d03703f7864723af5806fca0", "filename": "clippy_lints/src/methods/filter_next.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c5487dc62d569d4bc32cbe51951668406242137/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5487dc62d569d4bc32cbe51951668406242137/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs?ref=7c5487dc62d569d4bc32cbe51951668406242137", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n-use clippy_utils::is_trait_method;\n use clippy_utils::source::snippet;\n+use clippy_utils::ty::implements_trait;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -16,7 +16,10 @@ pub(super) fn check<'tcx>(\n     filter_arg: &'tcx hir::Expr<'_>,\n ) {\n     // lint if caller of `.filter().next()` is an Iterator\n-    if is_trait_method(cx, expr, sym::Iterator) {\n+    let recv_impls_iterator = cx.tcx.get_diagnostic_item(sym::Iterator).map_or(false, |id| {\n+        implements_trait(cx, cx.typeck_results().expr_ty(recv), id, &[])\n+    });\n+    if recv_impls_iterator {\n         let msg = \"called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n                    `.find(..)` instead\";\n         let filter_snippet = snippet(cx, filter_arg.span, \"..\");"}, {"sha": "86a637ce3093c5ee936983cdc49c5477cab6cd52", "filename": "tests/ui/auxiliary/option_helpers.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7c5487dc62d569d4bc32cbe51951668406242137/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5487dc62d569d4bc32cbe51951668406242137/tests%2Fui%2Fauxiliary%2Foption_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Foption_helpers.rs?ref=7c5487dc62d569d4bc32cbe51951668406242137", "patch": "@@ -53,3 +53,12 @@ impl IteratorFalsePositives {\n         self.foo as usize\n     }\n }\n+\n+#[derive(Copy, Clone)]\n+pub struct IteratorMethodFalsePositives;\n+\n+impl IteratorMethodFalsePositives {\n+    pub fn filter(&self, _s: i32) -> std::vec::IntoIter<i32> {\n+        unimplemented!();\n+    }\n+}"}, {"sha": "c441b35b9920390c89edfc6ac504716cf25eae2f", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c5487dc62d569d4bc32cbe51951668406242137/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5487dc62d569d4bc32cbe51951668406242137/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=7c5487dc62d569d4bc32cbe51951668406242137", "patch": "@@ -32,7 +32,7 @@ use std::ops::Mul;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n \n-use option_helpers::IteratorFalsePositives;\n+use option_helpers::{IteratorFalsePositives, IteratorMethodFalsePositives};\n \n struct Lt<'a> {\n     foo: &'a u32,\n@@ -131,6 +131,9 @@ fn filter_next() {\n     // Check that we don't lint if the caller is not an `Iterator`.\n     let foo = IteratorFalsePositives { foo: 0 };\n     let _ = foo.filter().next();\n+\n+    let foo = IteratorMethodFalsePositives {};\n+    let _ = foo.filter(42).next();\n }\n \n fn main() {"}]}