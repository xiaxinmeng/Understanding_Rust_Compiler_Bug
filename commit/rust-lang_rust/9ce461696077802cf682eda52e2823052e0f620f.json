{"sha": "9ce461696077802cf682eda52e2823052e0f620f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZTQ2MTY5NjA3NzgwMmNmNjgyZWRhNTJlMjgyMzA1MmUwZjYyMGY=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-20T23:48:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-20T23:48:13Z"}, "message": "Rollup merge of #42091 - maccoda:maccoda/env_docs, r=frewsxcv\n\nImproving std::env docs\n\nAddresses #29351.\nHopefully this addresses the following points:\n> -  iterators should use the standard iterator boilerplate like https://doc.rust-lang.org/std/iter/struct.Map.html, this applies to all structs except for JoinPathsError\n> -  JoinPathsError should properly link the function it comes from and use language similar to https://doc.rust-lang.org/std/io/struct.Error.html\n> -  same wording issues with VarError\n> - functions need to ensure linkage to things they refer to in their descriptions\n> - Explain the difference between `os` and non-`os` structs and methods", "tree": {"sha": "4cd177346abe11094d953b79fb6841f3ae7ad379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cd177346abe11094d953b79fb6841f3ae7ad379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce461696077802cf682eda52e2823052e0f620f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce461696077802cf682eda52e2823052e0f620f", "html_url": "https://github.com/rust-lang/rust/commit/9ce461696077802cf682eda52e2823052e0f620f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce461696077802cf682eda52e2823052e0f620f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29456429013b225214151cb96355051b07f451d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/29456429013b225214151cb96355051b07f451d4", "html_url": "https://github.com/rust-lang/rust/commit/29456429013b225214151cb96355051b07f451d4"}, {"sha": "55d75c42ef95f39c4c6f762bd22df33b94864153", "url": "https://api.github.com/repos/rust-lang/rust/commits/55d75c42ef95f39c4c6f762bd22df33b94864153", "html_url": "https://github.com/rust-lang/rust/commit/55d75c42ef95f39c4c6f762bd22df33b94864153"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "27b40793ff64a7c8034e959fc623b708cee0eab7", "filename": "src/libstd/env.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9ce461696077802cf682eda52e2823052e0f620f/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce461696077802cf682eda52e2823052e0f620f/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=9ce461696077802cf682eda52e2823052e0f620f", "patch": "@@ -13,6 +13,13 @@\n //! This module contains functions to inspect various aspects such as\n //! environment variables, process arguments, the current directory, and various\n //! other important directories.\n+//!\n+//! There are several functions and structs in this module that have a\n+//! counterpart ending in `os`. Those ending in `os` will return an [`OsString`]\n+//! and those without will be returning a [`String`].\n+//!\n+//! [`OsString`]: ../../std/ffi/struct.OsString.html\n+//! [`String`]: ../string/struct.String.html\n \n #![stable(feature = \"env\", since = \"1.0.0\")]\n \n@@ -74,15 +81,17 @@ pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created through the [`std::env::vars`] function.\n+/// This structure is created by the [`std::env::vars`] function. See its\n+/// documentation for more.\n ///\n /// [`std::env::vars`]: fn.vars.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars { inner: VarsOs }\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n-/// This structure is created through the [`std::env::vars_os`] function.\n+/// This structure is created by the [`std::env::vars_os`] function. See\n+/// its documentation for more.\n ///\n /// [`std::env::vars_os`]: fn.vars_os.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -176,12 +185,10 @@ impl fmt::Debug for VarsOs {\n \n /// Fetches the environment variable `key` from the current process.\n ///\n-/// The returned result is [`Ok(s)`] if the environment variable is present and is\n-/// valid unicode. If the environment variable is not present, or it is not\n-/// valid unicode, then [`VarError`] will be returned.\n+/// # Errors\n ///\n-/// [`Ok(s)`]: ../result/enum.Result.html#variant.Ok\n-/// [`VarError`]: enum.VarError.html\n+/// * Environment variable is not present\n+/// * Environment variable is not valid unicode\n ///\n /// # Examples\n ///\n@@ -233,7 +240,8 @@ fn _var_os(key: &OsStr) -> Option<OsString> {\n     })\n }\n \n-/// Possible errors from the [`env::var`] function.\n+/// The error type for operations interacting with environment variables.\n+/// Possibly returned from the [`env::var`] function.\n ///\n /// [`env::var`]: fn.var.html\n #[derive(Debug, PartialEq, Eq, Clone)]\n@@ -356,10 +364,13 @@ fn _remove_var(k: &OsStr) {\n     })\n }\n \n-/// An iterator over `PathBuf` instances for parsing an environment variable\n-/// according to platform-specific conventions.\n+/// An iterator that splits an environment variable into paths according to\n+/// platform-specific conventions.\n ///\n-/// This structure is returned from `std::env::split_paths`.\n+/// This structure is created by the [`std::env::split_paths`] function See its\n+/// documentation for more.\n+///\n+/// [`std::env::split_paths`]: fn.split_paths.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n \n@@ -402,8 +413,10 @@ impl<'a> fmt::Debug for SplitPaths<'a> {\n     }\n }\n \n-/// Error type returned from `std::env::join_paths` when paths fail to be\n-/// joined.\n+/// The error type for operations on the `PATH` variable. Possibly returned from\n+/// the [`env::join_paths`] function.\n+///\n+/// [`env::join_paths`]: fn.join_paths.html\n #[derive(Debug)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct JoinPathsError {\n@@ -413,7 +426,7 @@ pub struct JoinPathsError {\n /// Joins a collection of [`Path`]s appropriately for the `PATH`\n /// environment variable.\n ///\n-/// Returns an [`OsString`] on success.\n+/// # Errors\n ///\n /// Returns an [`Err`][err] (containing an error message) if one of the input\n /// [`Path`]s contains an invalid character for constructing the `PATH`\n@@ -493,12 +506,16 @@ pub fn home_dir() -> Option<PathBuf> {\n \n /// Returns the path of a temporary directory.\n ///\n-/// On Unix, returns the value of the `TMPDIR` environment variable if it is\n+/// # Unix\n+///\n+/// Returns the value of the `TMPDIR` environment variable if it is\n /// set, otherwise for non-Android it returns `/tmp`. If Android, since there\n /// is no global temporary folder (it is usually allocated per-app), it returns\n /// `/data/local/tmp`.\n ///\n-/// On Windows, returns the value of, in order, the `TMP`, `TEMP`,\n+/// # Windows\n+///\n+/// Returns the value of, in order, the `TMP`, `TEMP`,\n /// `USERPROFILE` environment variable if any are set and not the empty\n /// string. Otherwise, `temp_dir` returns the path of the Windows directory.\n /// This behavior is identical to that of [`GetTempPath`][msdn], which this"}]}