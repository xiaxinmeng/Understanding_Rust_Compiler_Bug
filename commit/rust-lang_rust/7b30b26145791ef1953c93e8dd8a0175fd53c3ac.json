{"sha": "7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "node_id": "C_kwDOAAsO6NoAKDdiMzBiMjYxNDU3OTFlZjE5NTNjOTNlOGRkOGEwMTc1ZmQ1M2MzYWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-08T08:53:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-08T08:53:29Z"}, "message": "Auto merge of #2583 - RalfJung:rustup, r=oli-obk\n\ninitial josh subtree sync\n\nThis demonstrates what a josh-based rustup would look like with my patched josh. To create it I did\n```\ngit fetch http://localhost:8000/rust-lang/rust.git:start=75dd959a3a40eb5b4574f8d2e23aa6efbeb33573[:prefix=src/tools/miri]:/src/tools/miri.git master\ngit merge FETCH_HEAD\n./rustup-toolchain HEAD && ./miri fmt\ngit commit -am rustup\n```\nUnlike the [previous attempt](https://github.com/rust-lang/miri/pull/2554), this does not add a new root commit to the repo.\n\nOnce we merge this, we committed to using josh for subtree syncing, and in particular a version of josh that includes https://github.com/josh-project/josh/pull/961 (or something compatible).", "tree": {"sha": "3d2ee7a76fc0008ef8e6fed7ccc77e2ef58b86fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d2ee7a76fc0008ef8e6fed7ccc77e2ef58b86fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "html_url": "https://github.com/rust-lang/rust/commit/7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce4620bd4376a32b44f9e497070f83ce9501ac4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4620bd4376a32b44f9e497070f83ce9501ac4c", "html_url": "https://github.com/rust-lang/rust/commit/ce4620bd4376a32b44f9e497070f83ce9501ac4c"}, {"sha": "5243ae96fe6e82a6a03041d798fae59b5c0c3886", "url": "https://api.github.com/repos/rust-lang/rust/commits/5243ae96fe6e82a6a03041d798fae59b5c0c3886", "html_url": "https://github.com/rust-lang/rust/commit/5243ae96fe6e82a6a03041d798fae59b5c0c3886"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "7ad51520a4287e97758b8c6306066303f5983e66", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -435,11 +435,10 @@ Moreover, Miri recognizes some environment variables:\n   purpose.\n * `MIRI_NO_STD` (recognized by `cargo miri` and the test suite) makes sure that the target's\n   sysroot is built without libstd. This allows testing and running no_std programs.\n-* `MIRI_BLESS` (recognized by the test suite) overwrite all `stderr` and `stdout` files\n-  instead of checking whether the output matches.\n-* `MIRI_SKIP_UI_CHECKS` (recognized by the test suite) don't check whether the\n-  `stderr` or `stdout` files match the actual output. Useful for the rustc test suite\n-  which has subtle differences that we don't care about.\n+* `MIRI_BLESS` (recognized by the test suite and `cargo-miri-test/run-test.py`): overwrite all\n+  `stderr` and `stdout` files instead of checking whether the output matches.\n+* `MIRI_SKIP_UI_CHECKS` (recognized by the test suite): don't check whether the\n+  `stderr` or `stdout` files match the actual output.\n \n The following environment variables are *internal* and must not be used by\n anyone but Miri itself. They are used to communicate between different Miri"}, {"sha": "c43bf0bfab11b101b76c721f851759301ffbfcea", "filename": "src/tools/miri/cargo-miri/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fmain.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -1,3 +1,4 @@\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![allow(clippy::useless_format, clippy::derive_partial_eq_without_eq, rustc::internal)]\n \n #[macro_use]"}, {"sha": "7729a184d3278aabd8cb73af2e4e752e1d9a22a0", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -1 +1 @@\n-acb8934fd57b3c2740c4abac0a5728c2c9b1423b\n+e42c4d7218b2596276152c5eb1e69335621f3086"}, {"sha": "8e2222c39a242a234d28a98698499d2c9f1f88e2", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -7,9 +7,10 @@\n #![feature(int_log)]\n #![feature(variant_count)]\n #![feature(yeet_expr)]\n-#![feature(is_some_with)]\n+#![feature(is_some_and)]\n #![feature(nonzero_ops)]\n #![feature(local_key_cell_methods)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n // Configure clippy and other lints\n #![allow(\n     clippy::collapsible_else_if,\n@@ -27,6 +28,7 @@\n     clippy::type_complexity,\n     clippy::single_element_loop,\n     clippy::needless_return,\n+    clippy::bool_to_int_with_if,\n     // We are not implementing queries here so it's fine\n     rustc::potential_query_instability\n )]"}, {"sha": "b0c9d729c9d907b9b153e62363281095a6896535", "filename": "src/tools/miri/src/shims/unix/android/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fandroid%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fandroid%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fandroid%2Fdlsym.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -42,7 +42,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     );\n                 }\n \n-                let &[ref _sig, ref _func] = check_arg_count(args)?;\n+                let [_sig, _func] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n         }"}, {"sha": "ed68976773d11d4dc8f798e551bf8d87661e5d2f", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -1073,23 +1073,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 mask |= this.eval_libc(\"STATX_ATIME\")?.to_u32()?;\n                 InterpResult::Ok(tup)\n             })\n-            .unwrap_or(Ok((0, 0)))?;\n+            .unwrap_or_else(|| Ok((0, 0)))?;\n \n         let (created_sec, created_nsec) = metadata\n             .created\n             .map(|tup| {\n                 mask |= this.eval_libc(\"STATX_BTIME\")?.to_u32()?;\n                 InterpResult::Ok(tup)\n             })\n-            .unwrap_or(Ok((0, 0)))?;\n+            .unwrap_or_else(|| Ok((0, 0)))?;\n \n         let (modified_sec, modified_nsec) = metadata\n             .modified\n             .map(|tup| {\n                 mask |= this.eval_libc(\"STATX_MTIME\")?.to_u32()?;\n                 InterpResult::Ok(tup)\n             })\n-            .unwrap_or(Ok((0, 0)))?;\n+            .unwrap_or_else(|| Ok((0, 0)))?;\n \n         // Now we write everything to `statxbuf`. We write a zero for the unavailable fields.\n         this.write_int_fields_named("}, {"sha": "09d36ca9dfdb02475d4dbdb273f83c4a0a1ca15f", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -45,6 +45,7 @@ impl SbTag {\n     }\n \n     // The default to be used when SB is disabled\n+    #[allow(clippy::should_implement_trait)]\n     pub fn default() -> Self {\n         Self::new(1).unwrap()\n     }"}, {"sha": "07c211512f8711938fea153d7758bad49070e82a", "filename": "src/tools/miri/src/stacked_borrows/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -214,7 +214,7 @@ impl<'tcx> Stack {\n         }\n \n         // Couldn't find it in the stack; but if there is an unknown bottom it might be there.\n-        let found = self.unknown_bottom.is_some_and(|&unknown_limit| {\n+        let found = self.unknown_bottom.is_some_and(|unknown_limit| {\n             tag.0 < unknown_limit.0 // unknown_limit is an upper bound for what can be in the unknown bottom.\n         });\n         if found { Ok(None) } else { Err(()) }"}, {"sha": "c611b9c44be9df792b13dede1a94fe61d262d680", "filename": "src/tools/miri/test-cargo-miri/run-test.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Frun-test.py?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -33,10 +33,13 @@ def normalize_stderr(str):\n     return str\n \n def check_output(actual, path, name):\n+    if 'MIRI_BLESS' in os.environ:\n+        open(path, mode='w').write(actual)\n+        return True\n     expected = open(path).read()\n     if expected == actual:\n         return True\n-    print(f\"{path} did not match reference!\")\n+    print(f\"{name} output did not match reference in {path}!\")\n     print(f\"--- BEGIN diff {name} ---\")\n     for text in difflib.unified_diff(expected.split(\"\\n\"), actual.split(\"\\n\")):\n         print(text)"}, {"sha": "39e1857060d041b5b489fc858c635b09588c3b12", "filename": "src/tools/miri/test-cargo-miri/test.filter.cross-target.stdout.ref", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.cross-target.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.cross-target.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.cross-target.stdout.ref?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -1,4 +1,9 @@\n \n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+\n+\n running 0 tests\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out"}, {"sha": "39e1857060d041b5b489fc858c635b09588c3b12", "filename": "src/tools/miri/test-cargo-miri/test.filter.stdout.ref", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Ftest.filter.stdout.ref?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -1,4 +1,9 @@\n \n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+\n+\n running 0 tests\n \n test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out\n@@ -10,8 +15,3 @@ test simple ... ok\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out\n \n-\n-running 0 tests\n-\n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 4 filtered out; finished in $TIME\n-"}, {"sha": "20f34cf104d63f1b6f1f83c641ce34cf79b82600", "filename": "src/tools/miri/tests/fail/concurrency/windows_join_detached.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -8,7 +8,7 @@ LL |         let rc = unsafe { c::WaitForSingleObject(self.handle.as_raw_handle(\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n    = note: inside `std::sys::PLATFORM::thread::Thread::join` at RUSTLIB/std/src/sys/PLATFORM/thread.rs:LL:CC\n-   = note: inside `std::thread::JoinInner::<()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n+   = note: inside `std::thread::JoinInner::<'_, ()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n    = note: inside `std::thread::JoinHandle::<()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n note: inside `main` at $DIR/windows_join_detached.rs:LL:CC\n   --> $DIR/windows_join_detached.rs:LL:CC"}, {"sha": "4d402257b8bd07263151ee51220bb7842c9f92d5", "filename": "src/tools/miri/tests/fail/erroneous_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const2.stderr?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -4,9 +4,9 @@ error: any use of this value will cause an error\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    | --------------    ^^^^^ attempt to compute `5_u32 - 6_u32`, which would overflow\n    |\n-   = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/erroneous_const2.rs:LL:CC"}, {"sha": "fe9bb3bed7f013e7167668d25db31864a9127ff0", "filename": "src/tools/miri/tests/fail/invalid_bool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_bool.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -1,7 +1,6 @@\n // Validation makes this fail in the wrong place\n // Make sure we find these even with many checks disabled.\n //@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n-#![feature(bench_black_box)]\n \n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };"}, {"sha": "ce62fb0de04f80cf107a21a22688d03cbc1ead00", "filename": "src/tools/miri/tests/pass/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ffloat.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -1,4 +1,4 @@\n-#![feature(stmt_expr_attributes, bench_black_box)]\n+#![feature(stmt_expr_attributes)]\n #![allow(arithmetic_overflow)]\n use std::fmt::Debug;\n use std::hint::black_box;"}, {"sha": "a8281d30bac4a61e827ac54dcaab121c44cbe934", "filename": "src/tools/miri/tests/pass/issues/issue-miri-2433.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-2433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-2433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-2433.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -0,0 +1,24 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait T {\n+    type Item;\n+}\n+\n+type Alias<'a> = impl T<Item = &'a ()>;\n+\n+struct S;\n+impl<'a> T for &'a S {\n+    type Item = &'a ();\n+}\n+\n+fn filter_positive<'a>() -> Alias<'a> {\n+    &S\n+}\n+\n+fn with_positive(fun: impl Fn(Alias<'_>)) {\n+    fun(filter_positive());\n+}\n+\n+fn main() {\n+    with_positive(|_| ());\n+}"}, {"sha": "6def529dbe7c3e030627775fd748791e67f43931", "filename": "src/tools/miri/tests/pass/u128.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30b26145791ef1953c93e8dd8a0175fd53c3ac/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fu128.rs?ref=7b30b26145791ef1953c93e8dd8a0175fd53c3ac", "patch": "@@ -1,4 +1,3 @@\n-#![feature(bench_black_box)]\n use std::hint::black_box as b;\n \n fn main() {"}]}