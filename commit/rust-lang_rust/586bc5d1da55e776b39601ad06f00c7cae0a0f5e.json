{"sha": "586bc5d1da55e776b39601ad06f00c7cae0a0f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NmJjNWQxZGE1NWU3NzZiMzk2MDFhZDA2ZjAwYzdjYWUwYTBmNWU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T10:48:12Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T10:48:12Z"}, "message": "Reimplement 'if' conditions.", "tree": {"sha": "c5e94efec4697bd54a30adcc279c5c16eb43a342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5e94efec4697bd54a30adcc279c5c16eb43a342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/586bc5d1da55e776b39601ad06f00c7cae0a0f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/586bc5d1da55e776b39601ad06f00c7cae0a0f5e", "html_url": "https://github.com/rust-lang/rust/commit/586bc5d1da55e776b39601ad06f00c7cae0a0f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/586bc5d1da55e776b39601ad06f00c7cae0a0f5e/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1adc55370924ee9b5bf0bbbb62126c5c7781969", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1adc55370924ee9b5bf0bbbb62126c5c7781969", "html_url": "https://github.com/rust-lang/rust/commit/a1adc55370924ee9b5bf0bbbb62126c5c7781969"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "6e01f8e7944fb855a2486db90647196c5ecdf3cf", "filename": "src/interpreter.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/586bc5d1da55e776b39601ad06f00c7cae0a0f5e/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586bc5d1da55e776b39601ad06f00c7cae0a0f5e/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=586bc5d1da55e776b39601ad06f00c7cae0a0f5e", "patch": "@@ -162,8 +162,15 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             use rustc::mir::repr::Terminator::*;\n             match *block_data.terminator() {\n                 Return => break,\n+\n                 Goto { target } => block = target,\n \n+                If { ref cond, targets: (then_target, else_target) } => {\n+                    let cond_ptr = try!(self.operand_to_ptr(cond));\n+                    let cond = try!(self.memory.read_bool(&cond_ptr));\n+                    block = if cond { then_target } else { else_target }\n+                }\n+\n                 // Call { ref func, ref args, ref destination, .. } => {\n                 //     let ptr = destination.as_ref().map(|&(ref lv, _)| self.lvalue_to_ptr(lv));\n                 //     let func_val = self.operand_to_ptr(func);\n@@ -192,15 +199,6 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                 //     }\n                 // }\n \n-                // If { ref cond, targets: (then_target, else_target) } => {\n-                //     let cond_ptr = try!(self.operand_to_ptr(cond));\n-                //     match self.operand_to_ptr(cond) {\n-                //         Value::Bool(true) => block = then_target,\n-                //         Value::Bool(false) => block = else_target,\n-                //         cond_val => panic!(\"Non-boolean `if` condition value: {:?}\", cond_val),\n-                //     }\n-                // }\n-\n                 // SwitchInt { ref discr, ref values, ref targets, .. } => {\n                 //     let discr_val = self.read_lvalue(discr);\n "}, {"sha": "880ac71abc305036cd60bc70628d28ce398e01ea", "filename": "test/new_values.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/586bc5d1da55e776b39601ad06f00c7cae0a0f5e/test%2Fnew_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586bc5d1da55e776b39601ad06f00c7cae0a0f5e/test%2Fnew_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fnew_values.rs?ref=586bc5d1da55e776b39601ad06f00c7cae0a0f5e", "patch": "@@ -51,15 +51,15 @@ fn boolean() -> bool {\n     true\n }\n \n-// #[miri_run(expected = \"Int(0)\")]\n-// fn if_false() -> i32 {\n-//     if false { 1 } else { 0 }\n-// }\n+#[miri_run]\n+fn if_false() -> i32 {\n+    if false { 1 } else { 0 }\n+}\n \n-// #[miri_run(expected = \"Int(1)\")]\n-// fn if_true() -> i32 {\n-//     if true { 1 } else { 0 }\n-// }\n+#[miri_run]\n+fn if_true() -> i32 {\n+    if true { 1 } else { 0 }\n+}\n \n // #[miri_run(expected = \"Int(2)\")]\n // fn call() -> i32 {"}]}