{"sha": "e083273ec77b96a17f317d83fa3fed8ab205964a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwODMyNzNlYzc3Yjk2YTE3ZjMxN2Q4M2ZhM2ZlZDhhYjIwNTk2NGE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-12-13T03:03:32Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-12-31T01:06:31Z"}, "message": "Lint overflowing integer casts in const prop\n\nThis extends the invalid cases we catch in const prop to include\noverflowing integer casts using the same machinery as the overflowing\nbinary and unary operation logic.", "tree": {"sha": "609a360b3a82cdd0fdb2b93aa2a9154b3cd82d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/609a360b3a82cdd0fdb2b93aa2a9154b3cd82d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e083273ec77b96a17f317d83fa3fed8ab205964a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e083273ec77b96a17f317d83fa3fed8ab205964a", "html_url": "https://github.com/rust-lang/rust/commit/e083273ec77b96a17f317d83fa3fed8ab205964a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e083273ec77b96a17f317d83fa3fed8ab205964a/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9dd56ff9a08d74c53d5cc22d18f126a12749608", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd56ff9a08d74c53d5cc22d18f126a12749608", "html_url": "https://github.com/rust-lang/rust/commit/a9dd56ff9a08d74c53d5cc22d18f126a12749608"}], "stats": {"total": 134, "additions": 127, "deletions": 7}, "files": [{"sha": "8de85aab6e380edc5357a81080b98d88fd337b53", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e083273ec77b96a17f317d83fa3fed8ab205964a", "patch": "@@ -12,10 +12,10 @@ use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc::mir::{\n-    read_only, AggregateKind, BasicBlock, BinOp, Body, BodyAndCache, ClearCrossCrate, Constant,\n-    Local, LocalDecl, LocalKind, Location, Operand, Place, PlaceBase, ReadOnlyBodyAndCache, Rvalue,\n-    SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n-    UnOp, RETURN_PLACE,\n+    read_only, AggregateKind, BasicBlock, BinOp, Body, BodyAndCache, CastKind, ClearCrossCrate,\n+    Constant, Local, LocalDecl, LocalKind, Location, Operand, Place, PlaceBase,\n+    ReadOnlyBodyAndCache, Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement,\n+    StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n };\n use rustc::ty::layout::{\n     HasDataLayout, HasTyCtxt, LayoutError, LayoutOf, Size, TargetDataLayout, TyLayout,\n@@ -29,9 +29,9 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use crate::const_eval::error_to_const_error;\n use crate::interpret::{\n-    self, intern_const_alloc_recursive, AllocId, Allocation, Frame, ImmTy, Immediate, InterpCx,\n-    LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer,\n-    ScalarMaybeUndef, StackPopCleanup,\n+    self, intern_const_alloc_recursive, truncate, AllocId, Allocation, Frame, ImmTy, Immediate,\n+    InterpCx, LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy,\n+    Pointer, ScalarMaybeUndef, StackPopCleanup,\n };\n use crate::rustc::ty::subst::Subst;\n use crate::transform::{MirPass, MirSource};\n@@ -584,6 +584,45 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n             }\n \n+            Rvalue::Cast(CastKind::Misc, op, ty) => {\n+                trace!(\"checking Cast(Misc, {:?}, {:?})\", op, ty);\n+\n+                if ty.is_integral() && op.ty(&self.local_decls, self.tcx).is_integral() {\n+                    let value = self.use_ecx(source_info, |this| {\n+                        this.ecx.read_immediate(this.ecx.eval_operand(op, None)?)\n+                    })?;\n+\n+                    // Do not try to read bits for ZSTs\n+                    if !value.layout.is_zst() {\n+                        let value_size = value.layout.size;\n+                        let value_bits = value.to_scalar().and_then(|r| r.to_bits(value_size));\n+                        if let Ok(value_bits) = value_bits {\n+                            let truncated = truncate(value_bits, place_layout.size);\n+                            if truncated != value_bits {\n+                                let scope = source_info.scope;\n+                                let lint_root = match &self.source_scopes[scope].local_data {\n+                                    ClearCrossCrate::Set(data) => data.lint_root,\n+                                    ClearCrossCrate::Clear => return None,\n+                                };\n+                                self.tcx.lint_hir(\n+                                    ::rustc::lint::builtin::CONST_ERR,\n+                                    lint_root,\n+                                    span,\n+                                    &format!(\n+                                        \"truncating cast: the value {} requires {} bits but \\\n+                                              the target type is only {} bits\",\n+                                        value_bits,\n+                                        value_size.bits(),\n+                                        place_layout.size.bits()\n+                                    ),\n+                                );\n+                                return None;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n             _ => {}\n         }\n "}, {"sha": "9cfbfebdcc3dfc82fca6e2b400993ec79e3991eb", "filename": "src/test/mir-opt/const_prop/cast.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.rs?ref=e083273ec77b96a17f317d83fa3fed8ab205964a", "patch": "@@ -0,0 +1,49 @@\n+fn main() {\n+    let x = 42u8 as u32;\n+\n+    let y = 42u32 as u8;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+// let mut _0: ();\n+// let _1: u32;\n+// scope 1 {\n+//   debug x => _1;\n+//   let _2: u8;\n+//   scope 2 {\n+//     debug y => _2;\n+//   }\n+// }\n+// bb0: {\n+//   StorageLive(_1);\n+//   _1 = const 42u8 as u32 (Misc);\n+//   StorageLive(_2);\n+//   _2 = const 42u32 as u8 (Misc);\n+//   _0 = ();\n+//   StorageDead(_2);\n+//   StorageDead(_1);\n+//   return;\n+// }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+// let mut _0: ();\n+// let _1: u32;\n+// scope 1 {\n+//   debug x => _1;\n+//   let _2: u8;\n+//   scope 2 {\n+//     debug y => _2;\n+//   }\n+// }\n+// bb0: {\n+//   StorageLive(_1);\n+//   _1 = const 42u32;\n+//   StorageLive(_2);\n+//   _2 = const 42u8;\n+//   _0 = ();\n+//   StorageDead(_2);\n+//   StorageDead(_1);\n+//   return;\n+// }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "11a04611487ba7b7a038c474329e7420b4b73f11", "filename": "src/test/ui/consts/const-prop-overflowing-casts.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.rs?ref=e083273ec77b96a17f317d83fa3fed8ab205964a", "patch": "@@ -0,0 +1,9 @@\n+// build-fail\n+// ignore-tidy-linelength\n+\n+fn main() {\n+    let _ = 0u8 as u32;\n+    let _ = (1u32 << 31) as u16; //~ ERROR truncating cast: the value 2147483648 requires 32 bits but the target type is only 16 bits\n+    let _ = (1u16 << 15) as u8; //~ ERROR truncating cast: the value 32768 requires 16 bits but the target type is only 8 bits\n+    let _ = (!0u16) as u8; //~ ERROR truncating cast: the value 65535 requires 16 bits but the target type is only 8 bits\n+}"}, {"sha": "af4e2c7005afb7819e8597221c135ad54a8c8402", "filename": "src/test/ui/consts/const-prop-overflowing-casts.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.stderr?ref=e083273ec77b96a17f317d83fa3fed8ab205964a", "patch": "@@ -0,0 +1,22 @@\n+error: truncating cast: the value 2147483648 requires 32 bits but the target type is only 16 bits\n+  --> $DIR/const-prop-overflowing-casts.rs:6:13\n+   |\n+LL |     let _ = (1u32 << 31) as u16;\n+   |             ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: truncating cast: the value 32768 requires 16 bits but the target type is only 8 bits\n+  --> $DIR/const-prop-overflowing-casts.rs:7:13\n+   |\n+LL |     let _ = (1u16 << 15) as u8;\n+   |             ^^^^^^^^^^^^^^^^^^\n+\n+error: truncating cast: the value 65535 requires 16 bits but the target type is only 8 bits\n+  --> $DIR/const-prop-overflowing-casts.rs:8:13\n+   |\n+LL |     let _ = (!0u16) as u8;\n+   |             ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "b81a76851d3c3faa4833ae58ce4e317dba1578e1", "filename": "src/test/ui/simd/simd-intrinsic-generic-cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e083273ec77b96a17f317d83fa3fed8ab205964a/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-cast.rs?ref=e083273ec77b96a17f317d83fa3fed8ab205964a", "patch": "@@ -4,6 +4,7 @@\n \n #![feature(repr_simd, platform_intrinsics, concat_idents, test)]\n #![allow(non_camel_case_types)]\n+#![allow(const_err)] // the test macro casts i32s to i8 and u8 which causes lots of warnings\n \n extern crate test;\n "}]}