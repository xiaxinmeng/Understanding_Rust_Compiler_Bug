{"sha": "e0108a47abcd1977670aa2ca0e5e88321cf789bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTA4YTQ3YWJjZDE5Nzc2NzBhYTJjYTBlNWU4ODMyMWNmNzg5YmY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-11T10:51:47Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T05:57:38Z"}, "message": "debuginfo: DI generation for enums uses adt::represent_type() now.", "tree": {"sha": "e70ec40498b682d88b4496cc7588c7a68a74341b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e70ec40498b682d88b4496cc7588c7a68a74341b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0108a47abcd1977670aa2ca0e5e88321cf789bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0108a47abcd1977670aa2ca0e5e88321cf789bf", "html_url": "https://github.com/rust-lang/rust/commit/e0108a47abcd1977670aa2ca0e5e88321cf789bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0108a47abcd1977670aa2ca0e5e88321cf789bf/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e5c08e39564b1ce69aeadb287fc4296ebdf04a", "html_url": "https://github.com/rust-lang/rust/commit/70e5c08e39564b1ce69aeadb287fc4296ebdf04a"}], "stats": {"total": 170, "additions": 163, "deletions": 7}, "files": [{"sha": "fd38ec39bb1bba0d312cb5949fca12765c5184e4", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=e0108a47abcd1977670aa2ca0e5e88321cf789bf", "patch": "@@ -94,7 +94,7 @@ pub enum Repr {\n }\n \n /// For structs, and struct-like parts of anything fancier.\n-struct Struct {\n+pub struct Struct {\n     size: u64,\n     align: u64,\n     packed: bool,"}, {"sha": "93a6ab4fcd9051b4399c827072e286a6b54708b2", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=e0108a47abcd1977670aa2ca0e5e88321cf789bf", "patch": "@@ -50,6 +50,7 @@ use middle::trans::common::*;\n use middle::trans::machine;\n use middle::trans::type_of;\n use middle::trans::type_::Type;\n+use middle::trans::adt;\n use middle::trans;\n use middle::ty;\n use util::ppaux::ty_to_str;\n@@ -560,6 +561,161 @@ fn create_tuple_metadata(cx: &mut CrateContext,\n         span);\n }\n \n+// The stage0 snapshot does not yet support the fixes from PR #7557, so there are two versions of\n+// following function for now\n+#[cfg(not(stage0))]\n+fn create_enum_metadata(cx: &mut CrateContext,\n+                        enum_type: ty::t,\n+                        enum_def_id: ast::def_id,\n+                        substs: &ty::substs,\n+                        span: span)\n+                     -> DIType {\n+\n+    let enum_name = ty_to_str(cx.tcx, enum_type);\n+\n+    // For empty enums there is an early exit. Just describe it as an empty struct with the\n+    // appropriate type name\n+    if ty::type_is_empty(cx.tcx, enum_type) {\n+        return create_composite_type_metadata(cx, Type::nil(), enum_name, &[], &[], &[], span);\n+    }\n+\n+    // Prepare some data (llvm type, size, align, ...) about the discriminant. This data will be\n+    // needed in all of the following cases.\n+    let discriminant_llvm_type = Type::enum_discrim(cx);\n+    let (discriminant_size, discriminant_align) = size_and_align_of(cx, discriminant_llvm_type);\n+\n+    assert!(Type::enum_discrim(cx) == cx.int_type);\n+    let discriminant_type_metadata = get_or_create_type_metadata(cx, ty::mk_int(), span);\n+\n+    let variants : &[@ty::VariantInfo] = *ty::enum_variants(cx.tcx, enum_def_id);\n+\n+    let enumerators_metadata : ~[DIDescriptor] = variants\n+        .iter()\n+        .transform(|v| {\n+            let name : &str = cx.sess.str_of(v.name);\n+            let discriminant_value = v.disr_val as c_ulonglong;\n+\n+            do name.as_c_str |name| { unsafe {\n+                llvm::LLVMDIBuilderCreateEnumerator(\n+                    DIB(cx),\n+                    name,\n+                    discriminant_value)\n+            }}\n+        })\n+        .collect();\n+\n+    let loc = span_start(cx, span);\n+    let file_metadata = get_or_create_file_metadata(cx, loc.file.name);\n+\n+    let discriminant_type_metadata = do enum_name.as_c_str |enum_name| { unsafe {\n+        llvm::LLVMDIBuilderCreateEnumerationType(\n+            DIB(cx),\n+            file_metadata,\n+            enum_name,\n+            file_metadata,\n+            loc.line as c_uint,\n+            bytes_to_bits(discriminant_size),\n+            bytes_to_bits(discriminant_align),\n+            create_DIArray(DIB(cx), enumerators_metadata),\n+            discriminant_type_metadata)\n+    }};\n+\n+    let type_rep = adt::represent_type(cx, enum_type);\n+\n+    match *type_rep {\n+        adt::CEnum(*) => {\n+            return discriminant_type_metadata;\n+        }\n+        adt::Univariant(ref struct_def, _destroyed_flag) => {\n+            assert!(variants.len() == 1);\n+            return create_adt_struct_metadata(cx, struct_def, variants[0], None, span);\n+        }\n+        adt::General(ref struct_defs) => {\n+            let variants_member_metadata : ~[DIDescriptor] = do struct_defs\n+                .iter()\n+                .enumerate()\n+                .transform |(i, struct_def)| {\n+                    let variant_type_metadata = create_adt_struct_metadata(\n+                        cx,\n+                        struct_def,\n+                        variants[i],\n+                        Some(discriminant_type_metadata),\n+                        span);\n+\n+                    do \"\".as_c_str |name| { unsafe {\n+                        llvm::LLVMDIBuilderCreateMemberType(\n+                            DIB(cx),\n+                            file_metadata,\n+                            name,\n+                            file_metadata,\n+                            loc.line as c_uint,\n+                            bytes_to_bits(struct_def.size as uint),\n+                            bytes_to_bits(struct_def.align as uint),\n+                            bytes_to_bits(0),\n+                            0,\n+                            variant_type_metadata)\n+                    }}\n+            }.collect();\n+\n+            let enum_llvm_type = type_of::type_of(cx, enum_type);\n+            let (enum_type_size, enum_type_align) = size_and_align_of(cx, enum_llvm_type);\n+\n+            return do enum_name.as_c_str |enum_name| { unsafe { llvm::LLVMDIBuilderCreateUnionType(\n+                DIB(cx),\n+                file_metadata,\n+                enum_name,\n+                file_metadata,\n+                loc.line as c_uint,\n+                bytes_to_bits(enum_type_size),\n+                bytes_to_bits(enum_type_align),\n+                0, // Flags\n+                create_DIArray(DIB(cx), variants_member_metadata),\n+                0) // RuntimeLang\n+            }};\n+        }\n+        _ => { return ptr::null(); }\n+    }\n+\n+    fn create_adt_struct_metadata(cx: &mut CrateContext,\n+                                  struct_def: &adt::Struct,\n+                                  variant_info: &ty::VariantInfo,\n+                                  discriminant_type_metadata: Option<DIType>,\n+                                  span: span)\n+                               -> DICompositeType\n+    {\n+        let arg_llvm_types : ~[Type] = do struct_def.fields.map |&ty| { type_of::type_of(cx, ty) };\n+        let arg_metadata : ~[DIType] = do struct_def.fields.iter().enumerate()\n+            .transform |(i, &ty)| {\n+                match discriminant_type_metadata {\n+                    Some(metadata) if i == 0 => metadata,\n+                    _                        => get_or_create_type_metadata(cx, ty, span)\n+                }\n+        }.collect();\n+\n+        let mut arg_names = match variant_info.arg_names {\n+            Some(ref names) => do names.map |ident| { cx.sess.str_of(*ident).to_owned() },\n+            None => do variant_info.args.map |_| { ~\"\" }\n+        };\n+\n+        if (discriminant_type_metadata.is_some()) {\n+            arg_names.insert(0, ~\"\");\n+        }\n+\n+        let variant_llvm_type = Type::struct_(arg_llvm_types, struct_def.packed);\n+        let variant_name : &str = cx.sess.str_of(variant_info.name);\n+\n+        return create_composite_type_metadata(\n+            cx,\n+            variant_llvm_type,\n+            variant_name,\n+            arg_llvm_types,\n+            arg_names,\n+            arg_metadata,\n+            span);\n+    }\n+}\n+\n+#[cfg(stage0)]\n fn create_enum_metadata(cx: &mut CrateContext,\n                         enum_type: ty::t,\n                         enum_def_id: ast::def_id,"}, {"sha": "8c9a7799a293d91ca5936164f4f2165aa7535416", "filename": "src/test/debug-info/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs?ref=e0108a47abcd1977670aa2ca0e5e88321cf789bf", "patch": "@@ -22,7 +22,7 @@\n // check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n \n // debugger:print *univariant_ref\n-// check:$3 = {{4820353753753434}}\n+// check:$3 = {4820353753753434}\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "1a3600a7d8cb3a737bcb0e57eb9ce927e120853c", "filename": "src/test/debug-info/managed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs?ref=e0108a47abcd1977670aa2ca0e5e88321cf789bf", "patch": "@@ -22,7 +22,7 @@\n // check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n \n // debugger:print univariant->val\n-// check:$3 = {{-9747455}}\n+// check:$3 = {-9747455}\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "6d4a40e193fa50ca7017e84df022428e7073b0ea", "filename": "src/test/debug-info/struct-in-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs?ref=e0108a47abcd1977670aa2ca0e5e88321cf789bf", "patch": "@@ -21,7 +21,7 @@\n // check:$2 = {{Case2, 0, {x = 286331153, y = 286331153, z = 4369}}, {Case2, 0, 1229782938247303441, 4369}}\n \n // debugger:print univariant\n-// check:$3 = {{{x = 123, y = 456, z = 789}}}\n+// check:$3 = {{x = 123, y = 456, z = 789}}\n \n struct Struct {\n \tx: u32,"}, {"sha": "972772b07d28a068d7ce4bec7cde91bcae439cf5", "filename": "src/test/debug-info/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs?ref=e0108a47abcd1977670aa2ca0e5e88321cf789bf", "patch": "@@ -24,7 +24,7 @@\n // check:$3 = {{Case3, a = 0, b = 22873, c = 22873, d = 22873, e = 22873}, {Case3, a = 0, b = 1499027801, c = 1499027801}, {Case3, a = 0, b = 6438275382588823897}}\n \n // debugger:print univariant\n-// check:$4 = {{a = -1}}\n+// check:$4 = {a = -1}\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "66e64a1e20aa9a30209608d1d97b046502358aaf", "filename": "src/test/debug-info/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs?ref=e0108a47abcd1977670aa2ca0e5e88321cf789bf", "patch": "@@ -24,7 +24,7 @@\n // check:$3 = {{Case3, 0, 22873, 22873, 22873, 22873}, {Case3, 0, 1499027801, 1499027801}, {Case3, 0, 6438275382588823897}}\n \n // debugger:print univariant\n-// check:$4 = {{-1}}\n+// check:$4 = {-1}\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "443f641a858592d10773597f7582b92f7b6a9dc3", "filename": "src/test/debug-info/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0108a47abcd1977670aa2ca0e5e88321cf789bf/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Funique-enum.rs?ref=e0108a47abcd1977670aa2ca0e5e88321cf789bf", "patch": "@@ -22,7 +22,7 @@\n // check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n \n // debugger:print *univariant\n-// check:$3 = {{123234}}\n+// check:$3 = {123234}\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}]}