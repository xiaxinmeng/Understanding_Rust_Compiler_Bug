{"sha": "f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNzMwZDEzNmE3M2I5N2FjN2UxYWE4N2FkNjFmMGJhNzQwY2RiN2Y=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-04T11:45:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-04T11:45:13Z"}, "message": "Merge pull request #757 from RalfJung/test-ice\n\ntest for no-validation-only failure", "tree": {"sha": "065a25a4895c7b2be683cdb2be02c3a96d57216a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065a25a4895c7b2be683cdb2be02c3a96d57216a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc9lnJCRBK7hj4Ov3rIwAAdHIIAFTK1IzsjUF/Y5HXqGz/Qyh2\ncKvemimlSaQvDwPlSrIC522lM3iqpD7Apzs081Buu+MXWAA6oBZaKxI79d2MsyWT\n6acqeMCzCsilppSFwdRVScSt95XT/MJaAUwB5EbHQ2JpIDzWtclsv9uGkykSBubV\nHhYytEhPuu9w1/mmYDY7jweCDjpDyn0nz0T1Mter6mOpboRK5gC4oMf0rAR5+zhK\npeQzOtoo/1WaturaD0EcIdKSlHcUy9u5bncynadelQbQrEkKgVWDQTh+H8UtZ4EM\nUlAK7EwXmObMioeCo0YO/jEIU0dcmduLbMbR8siqHYVuMtBeEjNbi2t3HWVMu/Q=\n=4ZD6\n-----END PGP SIGNATURE-----\n", "payload": "tree 065a25a4895c7b2be683cdb2be02c3a96d57216a\nparent 09daf1134941cdf393cf998939ea4226ec1970b1\nparent c06134c4afdc82c298e424e8f3e43c7e5379197c\nauthor Ralf Jung <post@ralfj.de> 1559648713 +0200\ncommitter GitHub <noreply@github.com> 1559648713 +0200\n\nMerge pull request #757 from RalfJung/test-ice\n\ntest for no-validation-only failure"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f", "html_url": "https://github.com/rust-lang/rust/commit/f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09daf1134941cdf393cf998939ea4226ec1970b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/09daf1134941cdf393cf998939ea4226ec1970b1", "html_url": "https://github.com/rust-lang/rust/commit/09daf1134941cdf393cf998939ea4226ec1970b1"}, {"sha": "c06134c4afdc82c298e424e8f3e43c7e5379197c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c06134c4afdc82c298e424e8f3e43c7e5379197c", "html_url": "https://github.com/rust-lang/rust/commit/c06134c4afdc82c298e424e8f3e43c7e5379197c"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "930c6c17ac6c2231596e6f913c3924ca2aa3009f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f", "patch": "@@ -1 +1 @@\n-627486af15d222bcba336b12ea92a05237cc9ab1\n+021a5033098ff0e3f7126acc7ac35149d325f16d"}, {"sha": "8cff3a5c4b2e85e14ea18a01920aff53ab7ec3ef", "filename": "tests/run-pass/without-validation.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f/tests%2Frun-pass%2Fwithout-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f/tests%2Frun-pass%2Fwithout-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fwithout-validation.rs?ref=f1730d136a73b97ac7e1aa87ad61f0ba740cdb7f", "patch": "@@ -0,0 +1,24 @@\n+// When we notice something breaks only without validation, we add a test here.\n+// compile-flags: -Zmiri-disable-validation\n+use std::cell::*;\n+\n+fn refcell_unsize() {\n+    let cell: RefCell<[i32; 3]> = RefCell::new([1, 2, 3]);\n+    {\n+        let mut cellref: RefMut<'_, [i32; 3]> = cell.borrow_mut();\n+        cellref[0] = 4;\n+        let mut coerced: RefMut<'_, [i32]> = cellref;\n+        coerced[2] = 5;\n+    }\n+    {\n+        let comp: &mut [i32] = &mut [4, 2, 5];\n+        let cellref: Ref<'_, [i32; 3]> = cell.borrow();\n+        assert_eq!(&*cellref, comp);\n+        let coerced: Ref<'_, [i32]> = cellref;\n+        assert_eq!(&*coerced, comp);\n+    }\n+}\n+\n+fn main() {\n+    refcell_unsize();\n+}"}]}