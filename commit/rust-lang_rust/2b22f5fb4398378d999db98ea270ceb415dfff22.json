{"sha": "2b22f5fb4398378d999db98ea270ceb415dfff22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMjJmNWZiNDM5ODM3OGQ5OTlkYjk4ZWEyNzBjZWI0MTVkZmZmMjI=", "commit": {"author": {"name": "Erlend Tobiassen", "email": "erlend.tobiassen@gmail.com", "date": "2019-01-22T12:17:10Z"}, "committer": {"name": "Erlend Tobiassen", "email": "erlend.tobiassen@gmail.com", "date": "2019-01-22T12:17:10Z"}, "message": "Optimistically bail out of where clause loop if not at start of a type or lifetime", "tree": {"sha": "8b22ab009aaa53c904d12131468fe754f69d44d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b22ab009aaa53c904d12131468fe754f69d44d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b22f5fb4398378d999db98ea270ceb415dfff22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b22f5fb4398378d999db98ea270ceb415dfff22", "html_url": "https://github.com/rust-lang/rust/commit/2b22f5fb4398378d999db98ea270ceb415dfff22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b22f5fb4398378d999db98ea270ceb415dfff22/comments", "author": {"login": "regiontog", "id": 9137819, "node_id": "MDQ6VXNlcjkxMzc4MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9137819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regiontog", "html_url": "https://github.com/regiontog", "followers_url": "https://api.github.com/users/regiontog/followers", "following_url": "https://api.github.com/users/regiontog/following{/other_user}", "gists_url": "https://api.github.com/users/regiontog/gists{/gist_id}", "starred_url": "https://api.github.com/users/regiontog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regiontog/subscriptions", "organizations_url": "https://api.github.com/users/regiontog/orgs", "repos_url": "https://api.github.com/users/regiontog/repos", "events_url": "https://api.github.com/users/regiontog/events{/privacy}", "received_events_url": "https://api.github.com/users/regiontog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regiontog", "id": 9137819, "node_id": "MDQ6VXNlcjkxMzc4MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9137819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regiontog", "html_url": "https://github.com/regiontog", "followers_url": "https://api.github.com/users/regiontog/followers", "following_url": "https://api.github.com/users/regiontog/following{/other_user}", "gists_url": "https://api.github.com/users/regiontog/gists{/gist_id}", "starred_url": "https://api.github.com/users/regiontog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regiontog/subscriptions", "organizations_url": "https://api.github.com/users/regiontog/orgs", "repos_url": "https://api.github.com/users/regiontog/repos", "events_url": "https://api.github.com/users/regiontog/events{/privacy}", "received_events_url": "https://api.github.com/users/regiontog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aba42128f79993a092a8c0b3747acdc8f1b1be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aba42128f79993a092a8c0b3747acdc8f1b1be7", "html_url": "https://github.com/rust-lang/rust/commit/1aba42128f79993a092a8c0b3747acdc8f1b1be7"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "a7eacf97af0a907dfed6dd041fbff75aedbf8f3e", "filename": "crates/ra_syntax/src/grammar/type_params.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2b22f5fb4398378d999db98ea270ceb415dfff22/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b22f5fb4398378d999db98ea270ceb415dfff22/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=2b22f5fb4398378d999db98ea270ceb415dfff22", "patch": "@@ -105,27 +105,31 @@ pub(super) fn opt_where_clause(p: &mut Parser) {\n     let m = p.start();\n     p.bump();\n \n-    if is_where_clause_end(p) {\n-        // Empty where clause\n-    } else {\n-        loop {\n-            where_predicate(p);\n+    while is_where_predicate(p) {\n+        where_predicate(p);\n \n-            let comma = p.eat(COMMA);\n+        let comma = p.eat(COMMA);\n \n-            if is_where_clause_end(p) {\n-                break;\n-            }\n+        if is_where_clause_end(p) {\n+            break;\n+        }\n \n-            if !comma {\n-                p.error(\"expected comma\");\n-            }\n+        if !comma {\n+            p.error(\"expected comma\");\n         }\n     }\n \n     m.complete(p, WHERE_CLAUSE);\n }\n \n+fn is_where_predicate(p: &mut Parser) -> bool {\n+    match p.current() {\n+        LIFETIME => true,\n+        IMPL_KW => false,\n+        _ => types::is_type_start(p),\n+    }\n+}\n+\n fn is_where_clause_end(p: &mut Parser) -> bool {\n     p.current() == L_CURLY || p.current() == SEMI || p.current() == EQ\n }"}, {"sha": "83a54c190f6f0d23f40325a61dcc11fbac0003f8", "filename": "crates/ra_syntax/src/grammar/types.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b22f5fb4398378d999db98ea270ceb415dfff22/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b22f5fb4398378d999db98ea270ceb415dfff22/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs?ref=2b22f5fb4398378d999db98ea270ceb415dfff22", "patch": "@@ -36,6 +36,14 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n     }\n }\n \n+pub(super) fn is_type_start(p: &mut Parser) -> bool {\n+    match p.current() {\n+        L_PAREN | EXCL | STAR | L_BRACK | AMP | UNDERSCORE | FN_KW | FOR_KW | IMPL_KW | DYN_KW\n+        | L_ANGLE => true,\n+        _ => paths::is_path_start(p),\n+    }\n+}\n+\n pub(super) fn ascription(p: &mut Parser) {\n     p.expect(COLON);\n     type_(p)"}]}