{"sha": "68393aa594b0d3c5bfecd37d94fde5795de78771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MzkzYWE1OTRiMGQzYzViZmVjZDM3ZDk0ZmRlNTc5NWRlNzg3NzE=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-06-11T22:48:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-11T22:48:05Z"}, "message": "Add mask width conversion (#127)", "tree": {"sha": "3d5d4ad2072b2b3e29cece7c50d18eaa245826f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5d4ad2072b2b3e29cece7c50d18eaa245826f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68393aa594b0d3c5bfecd37d94fde5795de78771", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgw+glCRBK7hj4Ov3rIwAAY+cIADxVbyg3Gg0mchOn1AFBlI4i\ngP2pFrTQvQSKIz1B0ARXLJB6Llhs4aOmVgVzd6FEOMkDRNUqBa5207Sgcxblk8RY\njUZ0f/4zakA8u3VpJl4YgERyn/sY2tN/GatSX1bJmwwr2vCVyCMAgI2w/sOAXmw4\nN48Q3EHqlWIEcruL2NUIVx8tw/rMduMaBcEgr5qOfhCIbm4tkeR/Soilg5jzfQIK\nKJj8X+zsJyB7Jkt6Upo/eUYptYk+swm0VY16ocSF4FD3938rhcaUcegMQq9CHDfO\nkBm7zzBcLnzSFH/XvXIwX5AZIfGVB465oqSpw9M+RO3FKBBpJrqyZNNC+kzWSWI=\n=wXYB\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d5d4ad2072b2b3e29cece7c50d18eaa245826f1\nparent 3032a62d9310f34388fcff9be86c253e15b4f494\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1623451685 -0400\ncommitter GitHub <noreply@github.com> 1623451685 -0700\n\nAdd mask width conversion (#127)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68393aa594b0d3c5bfecd37d94fde5795de78771", "html_url": "https://github.com/rust-lang/rust/commit/68393aa594b0d3c5bfecd37d94fde5795de78771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68393aa594b0d3c5bfecd37d94fde5795de78771/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3032a62d9310f34388fcff9be86c253e15b4f494", "url": "https://api.github.com/repos/rust-lang/rust/commits/3032a62d9310f34388fcff9be86c253e15b4f494", "html_url": "https://github.com/rust-lang/rust/commit/3032a62d9310f34388fcff9be86c253e15b4f494"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "31c7f6e7c289ba0c80598c32a87c6d95b3501cf3", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/68393aa594b0d3c5bfecd37d94fde5795de78771/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68393aa594b0d3c5bfecd37d94fde5795de78771/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=68393aa594b0d3c5bfecd37d94fde5795de78771", "patch": "@@ -169,3 +169,26 @@ pub type Mask16<T, const LANES: usize> = BitMask<T, LANES>;\n pub type Mask32<T, const LANES: usize> = BitMask<T, LANES>;\n pub type Mask64<T, const LANES: usize> = BitMask<T, LANES>;\n pub type MaskSize<T, const LANES: usize> = BitMask<T, LANES>;\n+\n+macro_rules! impl_from {\n+    { $from:ident ($from_inner:ident) => $($to:ident ($to_inner:ident)),* } => {\n+        $(\n+        impl<const LANES: usize> From<$from<crate::$from<LANES>, LANES>> for $to<crate::$to<LANES>, LANES>\n+        where\n+            crate::$from_inner<LANES>: crate::LanesAtMost32,\n+            crate::$to_inner<LANES>: crate::LanesAtMost32,\n+            crate::$from<LANES>: crate::Mask,\n+            crate::$to<LANES>: crate::Mask,\n+        {\n+            fn from(value: $from<crate::$from<LANES>, LANES>) -> Self {\n+                unsafe { core::mem::transmute_copy(&value) }\n+            }\n+        }\n+        )*\n+    }\n+}\n+impl_from! { Mask8 (SimdI8) => Mask16 (SimdI16), Mask32 (SimdI32), Mask64 (SimdI64), MaskSize (SimdIsize) }\n+impl_from! { Mask16 (SimdI16) => Mask32 (SimdI32), Mask64 (SimdI64), MaskSize (SimdIsize), Mask8 (SimdI8) }\n+impl_from! { Mask32 (SimdI32) => Mask64 (SimdI64), MaskSize (SimdIsize), Mask8 (SimdI8), Mask16 (SimdI16) }\n+impl_from! { Mask64 (SimdI64) => MaskSize (SimdIsize), Mask8 (SimdI8), Mask16 (SimdI16), Mask32 (SimdI32) }\n+impl_from! { MaskSize (SimdIsize) => Mask8 (SimdI8), Mask16 (SimdI16), Mask32 (SimdI32), Mask64 (SimdI64) }"}, {"sha": "c2bfa03dfc6ece692a703d7ed31ecbe67ae5c5c0", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/68393aa594b0d3c5bfecd37d94fde5795de78771/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68393aa594b0d3c5bfecd37d94fde5795de78771/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=68393aa594b0d3c5bfecd37d94fde5795de78771", "patch": "@@ -212,3 +212,30 @@ define_mask! {\n     /// or unset.\n     struct MaskSize<const LANES: usize>(crate::SimdIsize<LANES>);\n }\n+\n+macro_rules! impl_from {\n+    { $from:ident ($from_inner:ident) => $($to:ident ($to_inner:ident)),* } => {\n+        $(\n+        impl<const LANES: usize, T, U> From<$from<T, LANES>> for $to<U, LANES>\n+        where\n+            crate::$from_inner<LANES>: crate::LanesAtMost32,\n+            crate::$to_inner<LANES>: crate::LanesAtMost32,\n+            T: crate::Mask,\n+            U: crate::Mask,\n+        {\n+            fn from(value: $from<T, LANES>) -> Self {\n+                let mut new = Self::splat(false);\n+                for i in 0..LANES {\n+                    unsafe { new.set_unchecked(i, value.test_unchecked(i)) }\n+                }\n+                new\n+            }\n+        }\n+        )*\n+    }\n+}\n+impl_from! { Mask8 (SimdI8) => Mask16 (SimdI16), Mask32 (SimdI32), Mask64 (SimdI64), MaskSize (SimdIsize) }\n+impl_from! { Mask16 (SimdI16) => Mask32 (SimdI32), Mask64 (SimdI64), MaskSize (SimdIsize), Mask8 (SimdI8) }\n+impl_from! { Mask32 (SimdI32) => Mask64 (SimdI64), MaskSize (SimdIsize), Mask8 (SimdI8), Mask16 (SimdI16) }\n+impl_from! { Mask64 (SimdI64) => MaskSize (SimdIsize), Mask8 (SimdI8), Mask16 (SimdI16), Mask32 (SimdI32) }\n+impl_from! { MaskSize (SimdIsize) => Mask8 (SimdI8), Mask16 (SimdI16), Mask32 (SimdI32), Mask64 (SimdI64) }"}, {"sha": "81a410de200e20ec919057e6322b605ce9a072a3", "filename": "crates/core_simd/src/masks/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/68393aa594b0d3c5bfecd37d94fde5795de78771/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68393aa594b0d3c5bfecd37d94fde5795de78771/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs?ref=68393aa594b0d3c5bfecd37d94fde5795de78771", "patch": "@@ -544,3 +544,26 @@ pub type masksizex4 = MaskSize<4>;\n \n /// Vector of eight pointer-width masks\n pub type masksizex8 = MaskSize<8>;\n+\n+macro_rules! impl_from {\n+    { $from:ident ($from_inner:ident) => $($to:ident ($to_inner:ident)),* } => {\n+        $(\n+        impl<const LANES: usize> From<$from<LANES>> for $to<LANES>\n+        where\n+            crate::$from_inner<LANES>: crate::LanesAtMost32,\n+            crate::$to_inner<LANES>: crate::LanesAtMost32,\n+            $from<LANES>: Mask,\n+            Self: Mask,\n+        {\n+            fn from(value: $from<LANES>) -> Self {\n+                Self(value.0.into())\n+            }\n+        }\n+        )*\n+    }\n+}\n+impl_from! { Mask8 (SimdI8) => Mask16 (SimdI16), Mask32 (SimdI32), Mask64 (SimdI64), MaskSize (SimdIsize) }\n+impl_from! { Mask16 (SimdI16) => Mask32 (SimdI32), Mask64 (SimdI64), MaskSize (SimdIsize), Mask8 (SimdI8) }\n+impl_from! { Mask32 (SimdI32) => Mask64 (SimdI64), MaskSize (SimdIsize), Mask8 (SimdI8), Mask16 (SimdI16) }\n+impl_from! { Mask64 (SimdI64) => MaskSize (SimdIsize), Mask8 (SimdI8), Mask16 (SimdI16), Mask32 (SimdI32) }\n+impl_from! { MaskSize (SimdIsize) => Mask8 (SimdI8), Mask16 (SimdI16), Mask32 (SimdI32), Mask64 (SimdI64) }"}, {"sha": "5c2e60dd7c8247d46ed5318842840887ddaea3ce", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68393aa594b0d3c5bfecd37d94fde5795de78771/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68393aa594b0d3c5bfecd37d94fde5795de78771/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=68393aa594b0d3c5bfecd37d94fde5795de78771", "patch": "@@ -82,3 +82,12 @@ macro_rules! test_mask_api {\n mod mask_api {\n     test_mask_api! { Mask8 }\n }\n+\n+#[test]\n+fn convert() {\n+    let values = [true, false, false, true, false, false, true, false];\n+    assert_eq!(\n+        core_simd::Mask8::from_array(values),\n+        core_simd::Mask32::from_array(values).into()\n+    );\n+}"}]}