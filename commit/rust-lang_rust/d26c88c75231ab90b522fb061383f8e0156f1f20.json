{"sha": "d26c88c75231ab90b522fb061383f8e0156f1f20", "node_id": "C_kwDOAAsO6NoAKGQyNmM4OGM3NTIzMWFiOTBiNTIyZmIwNjEzODNmOGUwMTU2ZjFmMjA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-21T02:33:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-21T02:33:22Z"}, "message": "Rollup merge of #107048 - DebugSteven:newer-x-check-cargo, r=albertlarsan68\n\ncheck for x version updates\n\nThis PR adds a check to tidy to assert that the installed version of `x` is equal to the version in `src/tools/x/Cargo.toml`. It checks the installed version of `x` by parsing the output of `cargo install --list` (as an option proposed in this [issue](https://github.com/rust-lang/rust/issues/106469)).\n\nIt does not warn if `x` has not yet been installed, on the assumption that the user isn't interested in using it.", "tree": {"sha": "25afc1d1406b1e089aba16dcc52c8a4107691bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25afc1d1406b1e089aba16dcc52c8a4107691bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d26c88c75231ab90b522fb061383f8e0156f1f20", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjy07yCRBK7hj4Ov3rIwAAmscIAD+1BtIBAA5rmOqkhmie7Mz5\nrvFH9rULV1rPgftnmN5pJ1cznOmzkWEpNd0OmPYwO2JLumV5VL4mg6LOLl116rku\n8GRDvvpaVbFhKLId+bQIOpneat7aEDCiNJNT/tslviKmAcMBYpdyAgNgRq5kq2aW\n3slzYHPYBBV3GwOx0YUwrqaFcqSn5/CbAwEtIYR27AtZZqVEfsIvz/Lr8GVLQRRd\n7x7CRocvgWxhmuz3J5RcBfMvu/WuMbOKdXsyft85xrq8VvrWZ4Mn94WTO0EFGBuk\n4Au/US5uBHpKXCN0goJeCZ1FDVs7kFoohtARR6QHupMfKEnlFl+OcHJdxmtwg/E=\n=sqNP\n-----END PGP SIGNATURE-----\n", "payload": "tree 25afc1d1406b1e089aba16dcc52c8a4107691bfc\nparent 68b390ae2a099a598bfe44d4ec36ae15159c283f\nparent 540ca2ff2acf5539868b1f1c156f6c895fdc9ffc\nauthor Michael Goulet <michael@errs.io> 1674268402 -0500\ncommitter GitHub <noreply@github.com> 1674268402 -0500\n\nRollup merge of #107048 - DebugSteven:newer-x-check-cargo, r=albertlarsan68\n\ncheck for x version updates\n\nThis PR adds a check to tidy to assert that the installed version of `x` is equal to the version in `src/tools/x/Cargo.toml`. It checks the installed version of `x` by parsing the output of `cargo install --list` (as an option proposed in this [issue](https://github.com/rust-lang/rust/issues/106469)).\n\nIt does not warn if `x` has not yet been installed, on the assumption that the user isn't interested in using it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d26c88c75231ab90b522fb061383f8e0156f1f20", "html_url": "https://github.com/rust-lang/rust/commit/d26c88c75231ab90b522fb061383f8e0156f1f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d26c88c75231ab90b522fb061383f8e0156f1f20/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68b390ae2a099a598bfe44d4ec36ae15159c283f", "url": "https://api.github.com/repos/rust-lang/rust/commits/68b390ae2a099a598bfe44d4ec36ae15159c283f", "html_url": "https://github.com/rust-lang/rust/commit/68b390ae2a099a598bfe44d4ec36ae15159c283f"}, {"sha": "540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc", "html_url": "https://github.com/rust-lang/rust/commit/540ca2ff2acf5539868b1f1c156f6c895fdc9ffc"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "7654f9c713ce169495307452f645a73089eefb7d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d26c88c75231ab90b522fb061383f8e0156f1f20/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d26c88c75231ab90b522fb061383f8e0156f1f20/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d26c88c75231ab90b522fb061383f8e0156f1f20", "patch": "@@ -5608,6 +5608,7 @@ dependencies = [\n  \"lazy_static\",\n  \"miropt-test-tools\",\n  \"regex\",\n+ \"semver\",\n  \"termcolor\",\n  \"walkdir\",\n ]"}, {"sha": "cdf1dd366046c56c92d285239cef4ecc9101e251", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d26c88c75231ab90b522fb061383f8e0156f1f20/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d26c88c75231ab90b522fb061383f8e0156f1f20/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=d26c88c75231ab90b522fb061383f8e0156f1f20", "patch": "@@ -12,6 +12,7 @@ miropt-test-tools = { path = \"../miropt-test-tools\" }\n lazy_static = \"1\"\n walkdir = \"2\"\n ignore = \"0.4.18\"\n+semver = \"1.0\"\n termcolor = \"1.1.3\"\n \n [[bin]]"}, {"sha": "35000320d1abfcbe24610b55ab4a5df2f5f82a76", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d26c88c75231ab90b522fb061383f8e0156f1f20/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26c88c75231ab90b522fb061383f8e0156f1f20/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=d26c88c75231ab90b522fb061383f8e0156f1f20", "patch": "@@ -70,3 +70,4 @@ pub mod ui_tests;\n pub mod unit_tests;\n pub mod unstable_book;\n pub mod walk;\n+pub mod x_version;"}, {"sha": "4c446b72a44951f20d4261debcbb2ae75a635de8", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26c88c75231ab90b522fb061383f8e0156f1f20/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26c88c75231ab90b522fb061383f8e0156f1f20/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=d26c88c75231ab90b522fb061383f8e0156f1f20", "patch": "@@ -114,6 +114,8 @@ fn main() {\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n \n+        check!(x_version, &root_path, &cargo);\n+\n         let collected = {\n             drain_handles(&mut handles);\n "}, {"sha": "c470d502a6548d31fcb298b9f4a022dee4598880", "filename": "src/tools/tidy/src/x_version.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d26c88c75231ab90b522fb061383f8e0156f1f20/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26c88c75231ab90b522fb061383f8e0156f1f20/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs?ref=d26c88c75231ab90b522fb061383f8e0156f1f20", "patch": "@@ -0,0 +1,68 @@\n+use semver::Version;\n+use std::path::Path;\n+use std::process::{Command, Stdio};\n+\n+pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n+    let cargo_list = Command::new(cargo).args([\"install\", \"--list\"]).stdout(Stdio::piped()).spawn();\n+\n+    let child = match cargo_list {\n+        Ok(child) => child,\n+        Err(e) => return tidy_error!(bad, \"failed to run `cargo`: {}\", e),\n+    };\n+\n+    let cargo_list = child.wait_with_output().unwrap();\n+\n+    if cargo_list.status.success() {\n+        let exe_list = String::from_utf8_lossy(&cargo_list.stdout);\n+        let exe_list = exe_list.lines();\n+\n+        let mut installed: Option<Version> = None;\n+\n+        for line in exe_list {\n+            let mut iter = line.split_whitespace();\n+            if iter.next() == Some(\"x\") {\n+                if let Some(version) = iter.next() {\n+                    // Check this is the rust-lang/rust x tool installation since it should be\n+                    // installed at a path containing `src/tools/x`.\n+                    if let Some(path) = iter.next() {\n+                        if path.contains(&\"src/tools/x\") {\n+                            let version = version.strip_prefix(\"v\").unwrap();\n+                            installed = Some(Version::parse(version).unwrap());\n+                            break;\n+                        }\n+                    };\n+                }\n+            } else {\n+                continue;\n+            }\n+        }\n+        // Unwrap the some if x is installed, otherwise return because it's fine if x isn't installed.\n+        let installed = if let Some(i) = installed { i } else { return };\n+\n+        if let Some(expected) = get_x_wrapper_version(root, cargo) {\n+            if installed < expected {\n+                return println!(\n+                    \"Current version of x is {installed}, but the latest version is {expected}\\nConsider updating to the newer version of x by running `cargo install --path src/tools/x`\"\n+                );\n+            }\n+        } else {\n+            return tidy_error!(\n+                bad,\n+                \"Unable to parse the latest version of `x` at `src/tools/x/Cargo.toml`\"\n+            );\n+        }\n+    } else {\n+        return tidy_error!(bad, \"failed to check version of `x`: {}\", cargo_list.status);\n+    }\n+}\n+\n+// Parse latest version out of `x` Cargo.toml\n+fn get_x_wrapper_version(root: &Path, cargo: &Path) -> Option<Version> {\n+    let mut cmd = cargo_metadata::MetadataCommand::new();\n+    cmd.cargo_path(cargo)\n+        .manifest_path(root.join(\"src/tools/x/Cargo.toml\"))\n+        .no_deps()\n+        .features(cargo_metadata::CargoOpt::AllFeatures);\n+    let mut metadata = t!(cmd.exec());\n+    metadata.packages.pop().map(|x| x.version)\n+}"}]}