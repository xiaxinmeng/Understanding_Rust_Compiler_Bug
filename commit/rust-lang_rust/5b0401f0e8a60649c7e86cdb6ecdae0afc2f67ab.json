{"sha": "5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMDQwMWYwZThhNjA2NDljN2U4NmNkYjZlY2RhZTBhZmMyZjY3YWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T04:36:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:29Z"}, "message": "librustc: De-`@mut` `FunctionContext::llretptr`", "tree": {"sha": "52af1b39777f3c627bcb93e5506d6c5b90caea08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52af1b39777f3c627bcb93e5506d6c5b90caea08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "html_url": "https://github.com/rust-lang/rust/commit/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7392bd3aec5ca3d017745f1a47b38df9ddaf968", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7392bd3aec5ca3d017745f1a47b38df9ddaf968", "html_url": "https://github.com/rust-lang/rust/commit/d7392bd3aec5ca3d017745f1a47b38df9ddaf968"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "827ab6ee70d7249e0d5c7a1d358a3cc87a4338da", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "patch": "@@ -1685,7 +1685,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n           llenv: unsafe {\n               Cell::new(llvm::LLVMGetUndef(Type::i8p().to_ref()))\n           },\n-          llretptr: None,\n+          llretptr: Cell::new(None),\n           entry_bcx: None,\n           alloca_insert_pt: None,\n           llreturn: None,\n@@ -1721,7 +1721,8 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n             // Otherwise, we normally allocate the llretptr, unless we\n             // have been instructed to skip it for immediate return\n             // values.\n-            fcx.llretptr = Some(make_return_pointer(fcx, substd_output_type));\n+            fcx.llretptr.set(Some(make_return_pointer(fcx,\n+                                                      substd_output_type)));\n         }\n     }\n     fcx\n@@ -1858,11 +1859,11 @@ pub fn finish_fn(fcx: @mut FunctionContext, last_bcx: @Block) {\n // Builds the return block for a function.\n pub fn build_return_block(fcx: &FunctionContext, ret_cx: @Block) {\n     // Return the value if this function immediate; otherwise, return void.\n-    if fcx.llretptr.is_none() || fcx.caller_expects_out_pointer {\n+    if fcx.llretptr.get().is_none() || fcx.caller_expects_out_pointer {\n         return RetVoid(ret_cx);\n     }\n \n-    let retptr = Value(fcx.llretptr.unwrap());\n+    let retptr = Value(fcx.llretptr.get().unwrap());\n     let retval = match retptr.get_dominating_store(ret_cx) {\n         // If there's only a single store to the ret slot, we can directly return\n         // the value that was stored and omit the store and the alloca\n@@ -1877,7 +1878,7 @@ pub fn build_return_block(fcx: &FunctionContext, ret_cx: @Block) {\n             retval\n         }\n         // Otherwise, load the return value from the ret slot\n-        None => Load(ret_cx, fcx.llretptr.unwrap())\n+        None => Load(ret_cx, fcx.llretptr.get().unwrap())\n     };\n \n \n@@ -1943,7 +1944,7 @@ pub fn trans_closure(ccx: @CrateContext,\n     if body.expr.is_none() || ty::type_is_voidish(bcx.tcx(), block_ty) {\n         bcx = controlflow::trans_block(bcx, body, expr::Ignore);\n     } else {\n-        let dest = expr::SaveIn(fcx.llretptr.unwrap());\n+        let dest = expr::SaveIn(fcx.llretptr.get().unwrap());\n         bcx = controlflow::trans_block(bcx, body, dest);\n     }\n \n@@ -2139,11 +2140,11 @@ pub fn trans_enum_variant_or_tuple_like_struct<A:IdAndTy>(\n     let bcx = copy_args_to_allocas(fcx, bcx, fn_args, raw_llargs, arg_tys);\n \n     let repr = adt::represent_type(ccx, result_ty);\n-    adt::trans_start_init(bcx, repr, fcx.llretptr.unwrap(), disr);\n+    adt::trans_start_init(bcx, repr, fcx.llretptr.get().unwrap(), disr);\n     for (i, fn_arg) in fn_args.iter().enumerate() {\n         let lldestptr = adt::trans_field_ptr(bcx,\n                                              repr,\n-                                             fcx.llretptr.unwrap(),\n+                                             fcx.llretptr.get().unwrap(),\n                                              disr,\n                                              i);\n         let llarg = {"}, {"sha": "199a2b18d753b79b383786354e03ce90ed0177bd", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "patch": "@@ -212,7 +212,7 @@ pub struct FunctionContext {\n     // this is an alloca in the function. Otherwise, it's the hidden first\n     // parameter to the function. After function construction, this should\n     // always be Some.\n-    llretptr: Option<ValueRef>,\n+    llretptr: Cell<Option<ValueRef>>,\n \n     entry_bcx: Option<@Block>,\n "}, {"sha": "0770e52f90a3d4d5159ca868c2747833b182f1be", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "patch": "@@ -266,7 +266,9 @@ pub fn trans_break_cont(bcx: @Block,\n                     Some(bcx) => bcx,\n                         // This is a return from a loop body block\n                         None => {\n-                            Store(bcx, C_bool(!to_end), bcx.fcx.llretptr.unwrap());\n+                            Store(bcx,\n+                                  C_bool(!to_end),\n+                                  bcx.fcx.llretptr.get().unwrap());\n                             cleanup_and_leave(bcx, None, Some(bcx.fcx.get_llreturn()));\n                             Unreachable(bcx);\n                             return bcx;\n@@ -292,7 +294,7 @@ pub fn trans_cont(bcx: @Block, label_opt: Option<Name>) -> @Block {\n pub fn trans_ret(bcx: @Block, e: Option<@ast::Expr>) -> @Block {\n     let _icx = push_ctxt(\"trans_ret\");\n     let mut bcx = bcx;\n-    let dest = match bcx.fcx.llretptr {\n+    let dest = match bcx.fcx.llretptr.get() {\n         None => expr::Ignore,\n         Some(retptr) => expr::SaveIn(retptr),\n     };"}, {"sha": "4aa42b09898420447cde2e2d2708af93323a731a", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "patch": "@@ -290,7 +290,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n             // NB: This needs to be kept in lockstep with the TypeId struct in\n             //     libstd/unstable/intrinsics.rs\n             let val = C_named_struct(type_of::type_of(ccx, output_type), [C_u64(hash)]);\n-            match bcx.fcx.llretptr {\n+            match bcx.fcx.llretptr.get() {\n                 Some(ptr) => {\n                     Store(bcx, val, ptr);\n                     RetVoid(bcx);\n@@ -301,7 +301,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n         \"init\" => {\n             let tp_ty = substs.tys[0];\n             let lltp_ty = type_of::type_of(ccx, tp_ty);\n-            match bcx.fcx.llretptr {\n+            match bcx.fcx.llretptr.get() {\n                 Some(ptr) => { Store(bcx, C_null(lltp_ty), ptr); RetVoid(bcx); }\n                 None if ty::type_is_nil(tp_ty) => RetVoid(bcx),\n                 None => Ret(bcx, C_null(lltp_ty)),\n@@ -349,7 +349,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n             if !ty::type_is_voidish(ccx.tcx, out_type) {\n                 let llsrcval = get_param(decl, first_real_arg);\n                 if type_is_immediate(ccx, in_type) {\n-                    match fcx.llretptr {\n+                    match fcx.llretptr.get() {\n                         Some(llretptr) => {\n                             Store(bcx, llsrcval, PointerCast(bcx, llretptr, llintype.ptr_to()));\n                             RetVoid(bcx);\n@@ -379,7 +379,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                     // NB: Do not use a Load and Store here. This causes massive\n                     // code bloat when `transmute` is used on large structural\n                     // types.\n-                    let lldestptr = fcx.llretptr.unwrap();\n+                    let lldestptr = fcx.llretptr.get().unwrap();\n                     let lldestptr = PointerCast(bcx, lldestptr, Type::i8p());\n                     let llsrcptr = PointerCast(bcx, llsrcval, Type::i8p());\n "}, {"sha": "ce118344874fb138c17ed0f36ffcfe331f1717f7", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=5b0401f0e8a60649c7e86cdb6ecdae0afc2f67ab", "patch": "@@ -309,7 +309,7 @@ impl Reflector {\n                 let mut bcx = fcx.entry_bcx.unwrap();\n                 let arg = BitCast(bcx, arg, llptrty);\n                 let ret = adt::trans_get_discr(bcx, repr, arg, Some(Type::i64()));\n-                Store(bcx, ret, fcx.llretptr.unwrap());\n+                Store(bcx, ret, fcx.llretptr.get().unwrap());\n                 match fcx.llreturn {\n                     Some(llreturn) => cleanup_and_Br(bcx, bcx, llreturn),\n                     None => bcx = cleanup_block(bcx, Some(bcx.llbb))"}]}