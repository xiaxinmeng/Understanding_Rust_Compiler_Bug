{"sha": "3602f07bbee5b13dcd799cbc79381e9428808048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MDJmMDdiYmVlNWIxM2RjZDc5OWNiYzc5MzgxZTk0Mjg4MDgwNDg=", "commit": {"author": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-07-05T14:42:52Z"}, "committer": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-07-05T14:50:29Z"}, "message": "Improve client logging (use output channel and more log levels)", "tree": {"sha": "6ab6a643f8ae0d4486b4078c757f8a31a93d0111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ab6a643f8ae0d4486b4078c757f8a31a93d0111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3602f07bbee5b13dcd799cbc79381e9428808048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3602f07bbee5b13dcd799cbc79381e9428808048", "html_url": "https://github.com/rust-lang/rust/commit/3602f07bbee5b13dcd799cbc79381e9428808048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3602f07bbee5b13dcd799cbc79381e9428808048/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0983e89ad9a28b142eccf3755a8c9aaeb37852", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0983e89ad9a28b142eccf3755a8c9aaeb37852", "html_url": "https://github.com/rust-lang/rust/commit/8b0983e89ad9a28b142eccf3755a8c9aaeb37852"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "033b04b6021d824d0a968c30ae349c7525a6796e", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3602f07bbee5b13dcd799cbc79381e9428808048/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3602f07bbee5b13dcd799cbc79381e9428808048/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=3602f07bbee5b13dcd799cbc79381e9428808048", "patch": "@@ -39,10 +39,10 @@ export class Config {\n \n     private refreshLogging() {\n         log.setEnabled(this.traceExtension);\n-        log.debug(\n-            \"Extension version:\", this.package.version,\n-            \"using configuration:\", this.cfg\n-        );\n+        log.info(\"Extension version:\", this.package.version);\n+\n+        const cfg = Object.entries(this.cfg).filter(([_, val]) => !(val instanceof Function));\n+        log.info(\"Using configuration\", Object.fromEntries(cfg));\n     }\n \n     private async onDidChangeConfiguration(event: vscode.ConfigurationChangeEvent) {"}, {"sha": "5877be8b27592cf42513d57af73abb3b272d053e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3602f07bbee5b13dcd799cbc79381e9428808048/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3602f07bbee5b13dcd799cbc79381e9428808048/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=3602f07bbee5b13dcd799cbc79381e9428808048", "patch": "@@ -59,8 +59,8 @@ async function tryActivate(context: vscode.ExtensionContext) {\n             message += \"you should close them and reload this window to retry. \";\n         }\n \n-        message += 'Open \"Help > Toggle Developer Tools > Console\" to see the logs ';\n-        message += '(enable verbose logs with \"rust-analyzer.trace.extension\")';\n+        message += 'See the logs in \"OUTPUT > Rust Analyzer Client\" (should open automatically). ';\n+        message += 'To enable verbose logs use { \"rust-analyzer.trace.extension\": true }';\n \n         log.error(\"Bootstrap error\", err);\n         throw new Error(message);\n@@ -214,7 +214,7 @@ async function bootstrapServer(config: Config, state: PersistentState): Promise<\n         );\n     }\n \n-    log.debug(\"Using server binary at\", path);\n+    log.info(\"Using server binary at\", path);\n \n     if (!isValidExecutable(path)) {\n         throw new Error(`Failed to execute ${path} --version`);"}, {"sha": "5705eed812d005d74bca6194be5c016e6caf656d", "filename": "editors/code/src/persistent_state.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3602f07bbee5b13dcd799cbc79381e9428808048/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3602f07bbee5b13dcd799cbc79381e9428808048/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=3602f07bbee5b13dcd799cbc79381e9428808048", "patch": "@@ -4,7 +4,7 @@ import { log } from './util';\n export class PersistentState {\n     constructor(private readonly globalState: vscode.Memento) {\n         const { lastCheck, releaseId, serverVersion } = this;\n-        log.debug(\"PersistentState: \", { lastCheck, releaseId, serverVersion });\n+        log.info(\"PersistentState:\", { lastCheck, releaseId, serverVersion });\n     }\n \n     /**"}, {"sha": "78fe6f5dab9599359cb4ee4fb3751dcdd1da756a", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3602f07bbee5b13dcd799cbc79381e9428808048/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3602f07bbee5b13dcd799cbc79381e9428808048/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=3602f07bbee5b13dcd799cbc79381e9428808048", "patch": "@@ -1,7 +1,9 @@\n import * as lc from \"vscode-languageclient\";\n+import * as fs from \"fs\";\n import * as vscode from \"vscode\";\n import { strict as nativeAssert } from \"assert\";\n import { spawnSync } from \"child_process\";\n+import { inspect } from \"util\";\n \n export function assert(condition: boolean, explanation: string): asserts condition {\n     try {\n@@ -14,21 +16,46 @@ export function assert(condition: boolean, explanation: string): asserts conditi\n \n export const log = new class {\n     private enabled = true;\n+    private readonly output = vscode.window.createOutputChannel(\"Rust Analyzer Client\");\n \n     setEnabled(yes: boolean): void {\n         log.enabled = yes;\n     }\n \n-    debug(message?: any, ...optionalParams: any[]): void {\n+    // Hint: the type [T, ...T[]] means a non-empty array\n+    debug(...msg: [unknown, ...unknown[]]): void {\n         if (!log.enabled) return;\n-        // eslint-disable-next-line no-console\n-        console.log(message, ...optionalParams);\n+        log.write(\"DEBUG\", ...msg);\n+        log.output.toString();\n     }\n \n-    error(message?: any, ...optionalParams: any[]): void {\n+    info(...msg: [unknown, ...unknown[]]): void {\n+        log.write(\"INFO\", ...msg);\n+    }\n+\n+    warn(...msg: [unknown, ...unknown[]]): void {\n+        debugger;\n+        log.write(\"WARN\", ...msg);\n+    }\n+\n+    error(...msg: [unknown, ...unknown[]]): void {\n         debugger;\n-        // eslint-disable-next-line no-console\n-        console.error(message, ...optionalParams);\n+        log.write(\"ERROR\", ...msg);\n+        log.output.show(true);\n+    }\n+\n+    private write(label: string, ...messageParts: unknown[]): void {\n+        const message = messageParts.map(log.stringify).join(\" \");\n+        const dateTime = new Date().toLocaleString();\n+        log.output.appendLine(`${label} [${dateTime}]: ${message}`);\n+    }\n+\n+    private stringify(val: unknown): string {\n+        if (typeof val === \"string\") return val;\n+        return inspect(val, {\n+            colors: false,\n+            depth: 6, // heuristic\n+        });\n     }\n };\n \n@@ -46,7 +73,7 @@ export async function sendRequestWithRetry<TParam, TRet>(\n             );\n         } catch (error) {\n             if (delay === null) {\n-                log.error(\"LSP request timed out\", { method: reqType.method, param, error });\n+                log.warn(\"LSP request timed out\", { method: reqType.method, param, error });\n                 throw error;\n             }\n \n@@ -55,7 +82,7 @@ export async function sendRequestWithRetry<TParam, TRet>(\n             }\n \n             if (error.code !== lc.ErrorCodes.ContentModified) {\n-                log.error(\"LSP request failed\", { method: reqType.method, param, error });\n+                log.warn(\"LSP request failed\", { method: reqType.method, param, error });\n                 throw error;\n             }\n \n@@ -87,11 +114,15 @@ export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n export function isValidExecutable(path: string): boolean {\n     log.debug(\"Checking availability of a binary at\", path);\n \n+    if (!fs.existsSync(path)) return false;\n+\n     const res = spawnSync(path, [\"--version\"], { encoding: 'utf8' });\n \n-    log.debug(res, \"--version output:\", res.output);\n+    const isSuccess = res.status === 0;\n+    const printOutput = isSuccess ? log.debug : log.warn;\n+    printOutput(path, \"--version:\", res);\n \n-    return res.status === 0;\n+    return isSuccess;\n }\n \n /** Sets ['when'](https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts) clause contexts */"}]}