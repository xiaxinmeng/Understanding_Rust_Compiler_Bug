{"sha": "d6e3c111011f6a270d56fdaf5222b484c4f38d65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZTNjMTExMDExZjZhMjcwZDU2ZmRhZjUyMjJiNDg0YzRmMzhkNjU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-15T19:26:27Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-18T04:03:58Z"}, "message": "Add additional missing lint handling logic", "tree": {"sha": "84fdb9999073045b26dc61d405f78f9444e27c5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84fdb9999073045b26dc61d405f78f9444e27c5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6e3c111011f6a270d56fdaf5222b484c4f38d65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmDzqC4ACgkQtAh+UQ6Y\nsWR1og/+M8Z5Vj6mi8xHWwSODfSFXRQwdcOcLapR7yJeIgD1QtJlvXSTb/2bTP7l\ngIYqdFWrjKXNF+ADgW+0oy+QTIclBZ9i5zoQl3TpJAddKiDsdz43gtWvrJM5sLdA\nOO2nz0uqSkPjHmuMQFjIXna2LQIG8kI9z8okquEaxCPbUJHbWyX9bNfuO3GBi1a6\n7ENidGzSYbiFYGcqE1avuamcQ5r82ei+rHOrPEYi0Sy0ApKUXHwyKIFL0STDSzq5\nnuuIyf9aSzpImwjJbKTCiakllSz+34c6BJ8DtgkRqHS7oDGYcVwzJPro2MBrr4W0\nmrhVP+G1g1FbMJhI9C+XekK5UJc+xDvh4rwK+17n/tVYk63cBLitTWAM0H0+Ox0p\njU7oFWaHqhaV1lR2uYM/h4VRvfs21qAALBzlrwcA5CFNFXAcR1GgP/96KudNVkvt\nsTD1/7o7A5d3llLM4KkTkjSrXUjgugN3plMlx+9hzC/HdYWG+k/L99K/sWwdAZ7Q\nK9MNIVd57IRqdA2AT2ceans7Mzz+pbuqF7Ua2jFExSF+RjjOQ9kBrPZV8617/xDk\nH9aZeuyFqsTIJms7Vz9fZV09OK1ZYyD7sXBywpqAFaEwBA8hyvWqTdEU4OZTITX6\neqLSqUDAU4f/5CI+/Mp5hF+BAEgxjeatVAmUmVqgE9UcDnsAjfY=\n=ob53\n-----END PGP SIGNATURE-----", "payload": "tree 84fdb9999073045b26dc61d405f78f9444e27c5e\nparent 2bd15a25ef24949abbcfe066c04cd2a266410c47\nauthor Aaron Hill <aa1ronham@gmail.com> 1626377187 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1626581038 -0500\n\nAdd additional missing lint handling logic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e3c111011f6a270d56fdaf5222b484c4f38d65", "html_url": "https://github.com/rust-lang/rust/commit/d6e3c111011f6a270d56fdaf5222b484c4f38d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6e3c111011f6a270d56fdaf5222b484c4f38d65/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd15a25ef24949abbcfe066c04cd2a266410c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd15a25ef24949abbcfe066c04cd2a266410c47", "html_url": "https://github.com/rust-lang/rust/commit/2bd15a25ef24949abbcfe066c04cd2a266410c47"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "208894c3791bbcd4288cc48fa9cf2543ec4f3154", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6e3c111011f6a270d56fdaf5222b484c4f38d65/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e3c111011f6a270d56fdaf5222b484c4f38d65/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=d6e3c111011f6a270d56fdaf5222b484c4f38d65", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n-use rustc_ast::{AstLike, Block, Inline, ItemKind, MacArgs};\n+use rustc_ast::{AstLike, Block, Inline, ItemKind, Local, MacArgs};\n use rustc_ast::{MacCallStmt, MacStmtStyle, MetaItemKind, ModKind, NestedMetaItem};\n use rustc_ast::{NodeId, PatKind, Path, StmtKind, Unsafe};\n use rustc_ast_pretty::pprust;\n@@ -1161,6 +1161,11 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         });\n     }\n \n+    // This is needed in order to set `lint_node_id` for `let` statements\n+    fn visit_local(&mut self, local: &mut P<Local>) {\n+        assign_id!(self, &mut local.id, || noop_visit_local(local, self));\n+    }\n+\n     fn flat_map_arm(&mut self, arm: ast::Arm) -> SmallVec<[ast::Arm; 1]> {\n         let mut arm = configure!(self, arm);\n \n@@ -1307,6 +1312,8 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         // The placeholder expander gives ids to statements, so we avoid folding the id here.\n+        // We don't use `assign_id!` - it will be called when we visit statement's contents\n+        // (e.g. an expression, item, or local)\n         let ast::Stmt { id, kind, span } = stmt;\n         noop_flat_map_stmt_kind(kind, self)\n             .into_iter()"}, {"sha": "7a8b731da5c2ee5d327dd0a882371a9e2149ea93", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6e3c111011f6a270d56fdaf5222b484c4f38d65/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e3c111011f6a270d56fdaf5222b484c4f38d65/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=d6e3c111011f6a270d56fdaf5222b484c4f38d65", "patch": "@@ -210,8 +210,10 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_arm(&mut self, a: &'a ast::Arm) {\n-        run_early_pass!(self, check_arm, a);\n-        ast_visit::walk_arm(self, a);\n+        self.with_lint_attrs(a.id, &a.attrs, |cx| {\n+            run_early_pass!(cx, check_arm, a);\n+            ast_visit::walk_arm(cx, a);\n+        })\n     }\n \n     fn visit_expr_post(&mut self, e: &'a ast::Expr) {"}, {"sha": "dcbc17bb26089380e71045b68fde32f27a55978b", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6e3c111011f6a270d56fdaf5222b484c4f38d65/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6e3c111011f6a270d56fdaf5222b484c4f38d65/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=d6e3c111011f6a270d56fdaf5222b484c4f38d65", "patch": "@@ -1,10 +1,16 @@\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:57:14\n+   |\n+LL | global_asm!(\".intel_syntax noprefix\", \"nop\");\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(bad_asm_style)]` on by default\n+\n warning: avoid using `.intel_syntax`, Intel syntax is the default\n   --> $DIR/inline-syntax.rs:31:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(bad_asm_style)]` on by default\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n   --> $DIR/inline-syntax.rs:34:15\n@@ -36,11 +42,5 @@ warning: avoid using `.intel_syntax`, Intel syntax is the default\n LL |             .intel_syntax noprefix\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:57:14\n-   |\n-LL | global_asm!(\".intel_syntax noprefix\", \"nop\");\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n-\n warning: 7 warnings emitted\n "}]}