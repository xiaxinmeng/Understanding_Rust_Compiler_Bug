{"sha": "6b55f04725b3645509b330e49f32a3ab943c9fd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNTVmMDQ3MjViMzY0NTUwOWIzMzBlNDlmMzJhM2FiOTQzYzlmZDk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-12T04:17:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-12T04:17:22Z"}, "message": "Rollup merge of #52514 - DiamondLovesYou:amdgpu-fixes, r=eddyb\n\nFix a few AMDGPU related issues\n\n* AMDGPU ignores `noinline` and sadly doesn't clear the attribute when it slaps `alwaysinline` on everything,\n* an AMDGPU related load bit range metadata assertion,\n* I didn't enable the `amdgpu` component in the `librustc_llvm` build script,\n* Add AMDGPU call abi info.", "tree": {"sha": "176027b78528ac54e3024347093463fe440a9d90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/176027b78528ac54e3024347093463fe440a9d90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b55f04725b3645509b330e49f32a3ab943c9fd9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbmJNSCRBK7hj4Ov3rIwAAdHIIAGSjQKxB/kcLYAmk62HwVC8b\nkXC/OSWRb4586PjSu+yw67xlCn1wQN9tY04309WgVPxxoPPFxwdj6KQg32MMdjN3\nc3EEeVfhQmZgXrhUaL2FVF+n/fEgbkNhdMCDIzDUjAgkJjpabPgm5kTNBsEEJWlu\ngmJ8Ryo2ALnhkVg0FxHU0SzLbHDao5EPJI6l2ID3xqd8o6sLK/Zr33bvj9T0dyri\nOh9BehcS+bKP3wzSMbZbn7RmmIAhLzyqposcTafdL7T59I8VBdbaTHDzY9ru5cir\nr+P8g+f4TxX2w8Tm2GwqUQ1xnbI6fnPyjBi5KE6ULky3q13LcAvdkNbtTic/zo8=\n=iLjd\n-----END PGP SIGNATURE-----\n", "payload": "tree 176027b78528ac54e3024347093463fe440a9d90\nparent 58063894d21c76ab5bc32bda30eee66703e0fdfb\nparent 66e8e1953e25a8d9e86e2e3fef88cc178a9cea02\nauthor kennytm <kennytm@gmail.com> 1536725842 +0800\ncommitter GitHub <noreply@github.com> 1536725842 +0800\n\nRollup merge of #52514 - DiamondLovesYou:amdgpu-fixes, r=eddyb\n\nFix a few AMDGPU related issues\n\n* AMDGPU ignores `noinline` and sadly doesn't clear the attribute when it slaps `alwaysinline` on everything,\n* an AMDGPU related load bit range metadata assertion,\n* I didn't enable the `amdgpu` component in the `librustc_llvm` build script,\n* Add AMDGPU call abi info.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b55f04725b3645509b330e49f32a3ab943c9fd9", "html_url": "https://github.com/rust-lang/rust/commit/6b55f04725b3645509b330e49f32a3ab943c9fd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b55f04725b3645509b330e49f32a3ab943c9fd9/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58063894d21c76ab5bc32bda30eee66703e0fdfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/58063894d21c76ab5bc32bda30eee66703e0fdfb", "html_url": "https://github.com/rust-lang/rust/commit/58063894d21c76ab5bc32bda30eee66703e0fdfb"}, {"sha": "66e8e1953e25a8d9e86e2e3fef88cc178a9cea02", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e8e1953e25a8d9e86e2e3fef88cc178a9cea02", "html_url": "https://github.com/rust-lang/rust/commit/66e8e1953e25a8d9e86e2e3fef88cc178a9cea02"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "51380db5b23df295c4f1125e5d12a3ec8f7d4c22", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=6b55f04725b3645509b330e49f32a3ab943c9fd9", "patch": "@@ -16,6 +16,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::Session;\n use rustc::session::config::Sanitizer;\n use rustc::ty::TyCtxt;\n+use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::FxHashMap;\n@@ -32,12 +33,16 @@ use value::Value;\n \n /// Mark LLVM function to use provided inline heuristic.\n #[inline]\n-pub fn inline(val: &'ll Value, inline: InlineAttr) {\n+pub fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr) {\n     use self::InlineAttr::*;\n     match inline {\n         Hint   => Attribute::InlineHint.apply_llfn(Function, val),\n         Always => Attribute::AlwaysInline.apply_llfn(Function, val),\n-        Never  => Attribute::NoInline.apply_llfn(Function, val),\n+        Never  => {\n+            if cx.tcx().sess.target.target.arch != \"amdgpu\" {\n+                Attribute::NoInline.apply_llfn(Function, val);\n+            }\n+        },\n         None   => {\n             Attribute::InlineHint.unapply_llfn(Function, val);\n             Attribute::AlwaysInline.unapply_llfn(Function, val);\n@@ -143,7 +148,7 @@ pub fn from_fn_attrs(\n     let codegen_fn_attrs = id.map(|id| cx.tcx.codegen_fn_attrs(id))\n         .unwrap_or(CodegenFnAttrs::new());\n \n-    inline(llfn, codegen_fn_attrs.inline);\n+    inline(cx, llfn, codegen_fn_attrs.inline);\n \n     // The `uwtable` attribute according to LLVM is:\n     //"}, {"sha": "e3526a5a2eead0888bb2b4e065a096ff84baa4bf", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=6b55f04725b3645509b330e49f32a3ab943c9fd9", "patch": "@@ -496,6 +496,14 @@ impl Builder<'a, 'll, 'tcx> {\n \n \n     pub fn range_metadata(&self, load: &'ll Value, range: Range<u128>) {\n+        if self.sess().target.target.arch == \"amdgpu\" {\n+            // amdgpu/LLVM does something weird and thinks a i64 value is\n+            // split into a v2i32, halving the bitwidth LLVM expects,\n+            // tripping an assertion. So, for now, just disable this\n+            // optimization.\n+            return;\n+        }\n+\n         unsafe {\n             let llty = val_ty(load);\n             let v = ["}, {"sha": "4b4ccb3b600b3a54f0d7a31dcac80ba472c2b828", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=6b55f04725b3645509b330e49f32a3ab943c9fd9", "patch": "@@ -96,7 +96,7 @@ pub fn get_fn(\n         debug!(\"get_fn: not casting pointer!\");\n \n         if instance.def.is_inline(tcx) {\n-            attributes::inline(llfn, attributes::InlineAttr::Hint);\n+            attributes::inline(cx, llfn, attributes::InlineAttr::Hint);\n         }\n         attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()));\n "}, {"sha": "a8502e9244768b8aee7835dd4167bfffeff311fb", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=6b55f04725b3645509b330e49f32a3ab943c9fd9", "patch": "@@ -180,7 +180,7 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     debug!(\"predefine_fn: mono_ty = {:?} instance = {:?}\", mono_ty, instance);\n     if instance.def.is_inline(cx.tcx) {\n-        attributes::inline(lldecl, attributes::InlineAttr::Hint);\n+        attributes::inline(cx, lldecl, attributes::InlineAttr::Hint);\n     }\n     attributes::from_fn_attrs(cx, lldecl, Some(instance.def.def_id()));\n "}, {"sha": "7d01ed556c8ddbee7d76dbdc369c7cb937ab5480", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=6b55f04725b3645509b330e49f32a3ab943c9fd9", "patch": "@@ -81,7 +81,7 @@ fn main() {\n     let is_crossed = target != host;\n \n     let mut optional_components =\n-        vec![\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\",\n+        vec![\"x86\", \"arm\", \"aarch64\", \"amdgpu\", \"mips\", \"powerpc\",\n              \"systemz\", \"jsbackend\", \"webassembly\", \"msp430\", \"sparc\", \"nvptx\"];\n \n     let mut version_cmd = Command::new(&llvm_config);"}, {"sha": "62462f04d8f56574706e040b8daba5aa2988fde3", "filename": "src/librustc_target/abi/call/amdgpu.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_target%2Fabi%2Fcall%2Famdgpu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_target%2Fabi%2Fcall%2Famdgpu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Famdgpu.rs?ref=6b55f04725b3645509b330e49f32a3ab943c9fd9", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use abi::call::{ArgType, FnType, };\n+use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+\n+fn classify_ret_ty<'a, Ty, C>(_tuncx: C, ret: &mut ArgType<'a, Ty>)\n+  where Ty: TyLayoutMethods<'a, C> + Copy,\n+        C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+  ret.extend_integer_width_to(32);\n+}\n+\n+fn classify_arg_ty<'a, Ty, C>(_cx: C, arg: &mut ArgType<'a, Ty>)\n+  where Ty: TyLayoutMethods<'a, C> + Copy,\n+        C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+  arg.extend_integer_width_to(32);\n+}\n+\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+  where Ty: TyLayoutMethods<'a, C> + Copy,\n+        C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+  if !fty.ret.is_ignore() {\n+    classify_ret_ty(cx, &mut fty.ret);\n+  }\n+\n+  for arg in &mut fty.args {\n+    if arg.is_ignore() {\n+      continue;\n+    }\n+    classify_arg_ty(cx, arg);\n+  }\n+}"}, {"sha": "788497a378fe9ee549874dfd2063b3fe84a23d56", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55f04725b3645509b330e49f32a3ab943c9fd9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=6b55f04725b3645509b330e49f32a3ab943c9fd9", "patch": "@@ -13,6 +13,7 @@ use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n use spec::HasTargetSpec;\n \n mod aarch64;\n+mod amdgpu;\n mod arm;\n mod asmjs;\n mod hexagon;\n@@ -503,6 +504,7 @@ impl<'a, Ty> FnType<'a, Ty> {\n                 x86_64::compute_abi_info(cx, self);\n             },\n             \"aarch64\" => aarch64::compute_abi_info(cx, self),\n+            \"amdgpu\" => amdgpu::compute_abi_info(cx, self),\n             \"arm\" => arm::compute_abi_info(cx, self),\n             \"mips\" => mips::compute_abi_info(cx, self),\n             \"mips64\" => mips64::compute_abi_info(cx, self),"}]}