{"sha": "f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5N2NmZjlhYmQ0ZWE3YTdhOGFjMjRiYjlhZmIwOWViMjcxYmNkYTk=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-16T22:04:55Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2015-01-31T10:38:46Z"}, "message": "Add MultiDecorator variant to SyntaxExtension enum", "tree": {"sha": "41f13a9e92d0171cc55331da1f2db2356c832ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f13a9e92d0171cc55331da1f2db2356c832ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9", "html_url": "https://github.com/rust-lang/rust/commit/f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77d59217a38e2982fdcf6bff800f1c9acc0d9aaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/77d59217a38e2982fdcf6bff800f1c9acc0d9aaf", "html_url": "https://github.com/rust-lang/rust/commit/77d59217a38e2982fdcf6bff800f1c9acc0d9aaf"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "7d802d953b35e85aba247a5be6475eb36b48dbe7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9", "patch": "@@ -418,11 +418,15 @@ impl MacResult for DummyResult {\n \n /// An enum representing the different kinds of syntax extensions.\n pub enum SyntaxExtension {\n+    /// A syntax extension that is attached to an item and creates new items\n+    /// based upon it.\n+    Decorator(Box<ItemDecorator + 'static>),\n+\n     /// A syntax extension that is attached to an item and creates new items\n     /// based upon it.\n     ///\n     /// `#[derive(...)]` is an `ItemDecorator`.\n-    Decorator(Box<ItemDecorator + 'static>),\n+    MultiDecorator(Box<MultiItemDecorator + 'static>),\n \n     /// A syntax extension that is attached to an item and modifies it\n     /// in-place."}, {"sha": "dbbcee0d9d826c34fad0009bfafa107ebe39d07e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f97cff9abd4ea7a7a8ac24bb9afb09eb271bcda9", "patch": "@@ -1096,6 +1096,28 @@ fn expand_annotatable(a: Annotatable,\n \n                     fld.cx.bt_pop();\n                 }\n+                MultiDecorator(ref dec) => {\n+                    attr::mark_used(attr);\n+\n+                    fld.cx.bt_push(ExpnInfo {\n+                        call_site: attr.span,\n+                        callee: NameAndSpan {\n+                            name: mname.get().to_string(),\n+                            format: MacroAttribute,\n+                            span: None\n+                        }\n+                    });\n+\n+                    // we'd ideally decorator_items.push_all(expand_item(item, fld)),\n+                    // but that double-mut-borrows fld\n+                    let mut items: SmallVector<P<ast::Item>> = SmallVector::zero();\n+                    dec.expand(fld.cx, attr.span, &*attr.node.value, a,\n+                               box |&mut: item| items.push(item));\n+                    decorator_items.extend(items.into_iter()\n+                        .flat_map(|item| expand_item(item, fld).into_iter()));\n+\n+                    fld.cx.bt_pop();\n+                }\n                 _ => new_attrs.push((*attr).clone()),\n             },\n             _ => new_attrs.push((*attr).clone()),"}]}