{"sha": "33993535efb490ddb0e3afb6e08e4f945ec28a04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOTkzNTM1ZWZiNDkwZGRiMGUzYWZiNmUwOGU0Zjk0NWVjMjhhMDQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-29T22:04:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-09-24T01:23:17Z"}, "message": "librustc: Remove garbage collected functions from front/{config,test} and metadata/{tydecode,tyencode}", "tree": {"sha": "f117f6164750c1b24591688e480a751226ae3445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f117f6164750c1b24591688e480a751226ae3445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33993535efb490ddb0e3afb6e08e4f945ec28a04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33993535efb490ddb0e3afb6e08e4f945ec28a04", "html_url": "https://github.com/rust-lang/rust/commit/33993535efb490ddb0e3afb6e08e4f945ec28a04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33993535efb490ddb0e3afb6e08e4f945ec28a04/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e5de06135fa9a857931191101d61a4abe149c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5de06135fa9a857931191101d61a4abe149c96", "html_url": "https://github.com/rust-lang/rust/commit/3e5de06135fa9a857931191101d61a4abe149c96"}], "stats": {"total": 121, "additions": 59, "deletions": 62}, "files": [{"sha": "efaebcca011280c2dcc8e46b1ccf9f29bd6470e0", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/33993535efb490ddb0e3afb6e08e4f945ec28a04/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33993535efb490ddb0e3afb6e08e4f945ec28a04/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=33993535efb490ddb0e3afb6e08e4f945ec28a04", "patch": "@@ -9,14 +9,11 @@\n // except according to those terms.\n \n \n-use std::option;\n use syntax::fold::ast_fold;\n use syntax::{ast, fold, attr};\n \n-type in_cfg_pred = @fn(attrs: &[ast::Attribute]) -> bool;\n-\n-struct Context {\n-    in_cfg: in_cfg_pred\n+struct Context<'self> {\n+    in_cfg: &'self fn(attrs: &[ast::Attribute]) -> bool,\n }\n \n // Support conditional compilation by transforming the AST, stripping out\n@@ -27,56 +24,55 @@ pub fn strip_unconfigured_items(crate: @ast::Crate) -> @ast::Crate {\n     }\n }\n \n-struct ItemRemover {\n-    ctxt: @Context,\n-}\n-\n-impl fold::ast_fold for ItemRemover {\n+impl<'self> fold::ast_fold for Context<'self> {\n     fn fold_mod(&self, module: &ast::_mod) -> ast::_mod {\n-        fold_mod(self.ctxt, module, self)\n+        fold_mod(self, module)\n     }\n     fn fold_block(&self, block: &ast::Block) -> ast::Block {\n-        fold_block(self.ctxt, block, self)\n+        fold_block(self, block)\n     }\n     fn fold_foreign_mod(&self, foreign_module: &ast::foreign_mod)\n                         -> ast::foreign_mod {\n-        fold_foreign_mod(self.ctxt, foreign_module, self)\n+        fold_foreign_mod(self, foreign_module)\n     }\n     fn fold_item_underscore(&self, item: &ast::item_) -> ast::item_ {\n-        fold_item_underscore(self.ctxt, item, self)\n+        fold_item_underscore(self, item)\n     }\n }\n \n-pub fn strip_items(crate: &ast::Crate, in_cfg: in_cfg_pred) -> @ast::Crate {\n-    let ctxt = @Context {\n+pub fn strip_items(crate: &ast::Crate,\n+                   in_cfg: &fn(attrs: &[ast::Attribute]) -> bool)\n+                   -> @ast::Crate {\n+    let ctxt = Context {\n         in_cfg: in_cfg,\n     };\n-    let precursor = ItemRemover {\n-        ctxt: ctxt,\n-    };\n-    @precursor.fold_crate(crate)\n+    @ctxt.fold_crate(crate)\n }\n \n-fn filter_item(cx: @Context, item: @ast::item) ->\n-   Option<@ast::item> {\n-    if item_in_cfg(cx, item) { option::Some(item) } else { option::None }\n+fn filter_item(cx: &Context, item: @ast::item) -> Option<@ast::item> {\n+    if item_in_cfg(cx, item) {\n+        Some(item)\n+    } else {\n+        None\n+    }\n }\n \n-fn filter_view_item<'r>(cx: @Context, view_item: &'r ast::view_item)-> Option<&'r ast::view_item> {\n+fn filter_view_item<'r>(cx: &Context, view_item: &'r ast::view_item)\n+                        -> Option<&'r ast::view_item> {\n     if view_item_in_cfg(cx, view_item) {\n-        option::Some(view_item)\n+        Some(view_item)\n     } else {\n-        option::None\n+        None\n     }\n }\n \n-fn fold_mod(cx: @Context, m: &ast::_mod, fld: &ItemRemover) -> ast::_mod {\n-    let filtered_items = do  m.items.iter().filter_map |a| {\n-        filter_item(cx, *a).and_then(|x| fld.fold_item(x))\n+fn fold_mod(cx: &Context, m: &ast::_mod) -> ast::_mod {\n+    let filtered_items = do m.items.iter().filter_map |a| {\n+        filter_item(cx, *a).and_then(|x| cx.fold_item(x))\n     }.collect();\n     let filtered_view_items = do m.view_items.iter().filter_map |a| {\n         do filter_view_item(cx, a).map_move |x| {\n-            fld.fold_view_item(x)\n+            cx.fold_view_item(x)\n         }\n     }.collect();\n     ast::_mod {\n@@ -85,22 +81,23 @@ fn fold_mod(cx: @Context, m: &ast::_mod, fld: &ItemRemover) -> ast::_mod {\n     }\n }\n \n-fn filter_foreign_item(cx: @Context, item: @ast::foreign_item) ->\n-   Option<@ast::foreign_item> {\n+fn filter_foreign_item(cx: &Context, item: @ast::foreign_item)\n+                       -> Option<@ast::foreign_item> {\n     if foreign_item_in_cfg(cx, item) {\n-        option::Some(item)\n-    } else { option::None }\n+        Some(item)\n+    } else {\n+        None\n+    }\n }\n \n-fn fold_foreign_mod(cx: @Context, nm: &ast::foreign_mod, fld: &ItemRemover)\n-                    -> ast::foreign_mod {\n+fn fold_foreign_mod(cx: &Context, nm: &ast::foreign_mod) -> ast::foreign_mod {\n     let filtered_items = nm.items\n                            .iter()\n                            .filter_map(|a| filter_foreign_item(cx, *a))\n                            .collect();\n     let filtered_view_items = do nm.view_items.iter().filter_map |a| {\n         do filter_view_item(cx, a).map_move |x| {\n-            fld.fold_view_item(x)\n+            cx.fold_view_item(x)\n         }\n     }.collect();\n     ast::foreign_mod {\n@@ -111,76 +108,78 @@ fn fold_foreign_mod(cx: @Context, nm: &ast::foreign_mod, fld: &ItemRemover)\n     }\n }\n \n-fn fold_item_underscore(cx: @Context, item: &ast::item_, fld: &ItemRemover)\n-                        -> ast::item_ {\n+fn fold_item_underscore(cx: &Context, item: &ast::item_) -> ast::item_ {\n     let item = match *item {\n         ast::item_impl(ref a, ref b, ref c, ref methods) => {\n             let methods = methods.iter().filter(|m| method_in_cfg(cx, **m))\n                 .map(|x| *x).collect();\n             ast::item_impl((*a).clone(), (*b).clone(), (*c).clone(), methods)\n         }\n         ast::item_trait(ref a, ref b, ref methods) => {\n-            let methods = methods.iter().filter(|m| trait_method_in_cfg(cx, *m) )\n-                .map(|x| (*x).clone()).collect();\n+            let methods = methods.iter()\n+                                 .filter(|m| trait_method_in_cfg(cx, *m) )\n+                                 .map(|x| (*x).clone())\n+                                 .collect();\n             ast::item_trait((*a).clone(), (*b).clone(), methods)\n         }\n         ref item => (*item).clone(),\n     };\n \n-    fold::noop_fold_item_underscore(&item, fld)\n+    fold::noop_fold_item_underscore(&item, cx)\n }\n \n-fn filter_stmt(cx: @Context, stmt: @ast::Stmt) ->\n-   Option<@ast::Stmt> {\n+fn filter_stmt(cx: &Context, stmt: @ast::Stmt) -> Option<@ast::Stmt> {\n     match stmt.node {\n       ast::StmtDecl(decl, _) => {\n         match decl.node {\n           ast::DeclItem(item) => {\n             if item_in_cfg(cx, item) {\n-                option::Some(stmt)\n-            } else { option::None }\n+                Some(stmt)\n+            } else {\n+                None\n+            }\n           }\n-          _ => option::Some(stmt)\n+          _ => Some(stmt)\n         }\n       }\n-      _ => option::Some(stmt)\n+      _ => Some(stmt),\n     }\n }\n \n-fn fold_block(cx: @Context, b: &ast::Block, fld: &ItemRemover) -> ast::Block {\n+fn fold_block(cx: &Context, b: &ast::Block) -> ast::Block {\n     let resulting_stmts = do b.stmts.iter().filter_map |a| {\n-        filter_stmt(cx, *a).and_then(|stmt| fld.fold_stmt(stmt))\n+        filter_stmt(cx, *a).and_then(|stmt| cx.fold_stmt(stmt))\n     }.collect();\n     let filtered_view_items = do b.view_items.iter().filter_map |a| {\n-        filter_view_item(cx, a).map(|x| fld.fold_view_item(*x))\n+        filter_view_item(cx, a).map(|x| cx.fold_view_item(*x))\n     }.collect();\n     ast::Block {\n         view_items: filtered_view_items,\n         stmts: resulting_stmts,\n-        expr: b.expr.map(|x| fld.fold_expr(*x)),\n+        expr: b.expr.map(|x| cx.fold_expr(*x)),\n         id: b.id,\n         rules: b.rules,\n         span: b.span,\n     }\n }\n \n-fn item_in_cfg(cx: @Context, item: @ast::item) -> bool {\n+fn item_in_cfg(cx: &Context, item: @ast::item) -> bool {\n     return (cx.in_cfg)(item.attrs);\n }\n \n-fn foreign_item_in_cfg(cx: @Context, item: @ast::foreign_item) -> bool {\n+fn foreign_item_in_cfg(cx: &Context, item: @ast::foreign_item) -> bool {\n     return (cx.in_cfg)(item.attrs);\n }\n \n-fn view_item_in_cfg(cx: @Context, item: &ast::view_item) -> bool {\n+fn view_item_in_cfg(cx: &Context, item: &ast::view_item) -> bool {\n     return (cx.in_cfg)(item.attrs);\n }\n \n-fn method_in_cfg(cx: @Context, meth: @ast::method) -> bool {\n+fn method_in_cfg(cx: &Context, meth: @ast::method) -> bool {\n     return (cx.in_cfg)(meth.attrs);\n }\n \n-fn trait_method_in_cfg(cx: @Context, meth: &ast::trait_method) -> bool {\n+fn trait_method_in_cfg(cx: &Context, meth: &ast::trait_method) -> bool {\n     match *meth {\n         ast::required(ref meth) => (cx.in_cfg)(meth.attrs),\n         ast::provided(@ref meth) => (cx.in_cfg)(meth.attrs)\n@@ -192,3 +191,4 @@ fn trait_method_in_cfg(cx: @Context, meth: &ast::trait_method) -> bool {\n fn in_cfg(cfg: &[@ast::MetaItem], attrs: &[ast::Attribute]) -> bool {\n     attr::test_cfg(cfg, attrs.iter().map(|x| *x))\n }\n+"}, {"sha": "18998015e95b48689f08fedc73f7ff23fe30f5ca", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33993535efb490ddb0e3afb6e08e4f945ec28a04/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33993535efb490ddb0e3afb6e08e4f945ec28a04/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=33993535efb490ddb0e3afb6e08e4f945ec28a04", "patch": "@@ -27,8 +27,6 @@ use syntax::opt_vec;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n \n-type node_id_gen = @fn() -> ast::NodeId;\n-\n struct Test {\n     span: Span,\n     path: ~[ast::Ident],"}, {"sha": "b94a43e07a1984c7fb13dd1336a290e9f1b335b5", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33993535efb490ddb0e3afb6e08e4f945ec28a04/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33993535efb490ddb0e3afb6e08e4f945ec28a04/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=33993535efb490ddb0e3afb6e08e4f945ec28a04", "patch": "@@ -95,8 +95,7 @@ pub fn parse_ident(st: &mut PState, last: char) -> ast::Ident {\n     return parse_ident_(st, |a| is_last(last, a) );\n }\n \n-fn parse_ident_(st: &mut PState, is_last: @fn(char) -> bool) ->\n-   ast::Ident {\n+fn parse_ident_(st: &mut PState, is_last: &fn(char) -> bool) -> ast::Ident {\n     let rslt = scan(st, is_last, str::from_utf8);\n     return st.tcx.sess.ident_of(rslt);\n }"}, {"sha": "417a6dae7bea08cdaa7e08084bbf05feaba255fb", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33993535efb490ddb0e3afb6e08e4f945ec28a04/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33993535efb490ddb0e3afb6e08e4f945ec28a04/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=33993535efb490ddb0e3afb6e08e4f945ec28a04", "patch": "@@ -26,7 +26,7 @@ use syntax::print::pprust::*;\n pub struct ctxt {\n     diag: @mut span_handler,\n     // Def -> str Callback:\n-    ds: @fn(DefId) -> ~str,\n+    ds: extern \"Rust\" fn(DefId) -> ~str,\n     // The type context.\n     tcx: ty::ctxt,\n     abbrevs: abbrev_ctxt"}]}