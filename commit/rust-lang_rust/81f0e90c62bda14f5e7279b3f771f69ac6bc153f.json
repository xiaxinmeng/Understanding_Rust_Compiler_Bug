{"sha": "81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjBlOTBjNjJiZGExNGY1ZTcyNzliM2Y3NzFmNjlhYzZiYzE1M2Y=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-14T16:37:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-05T13:26:09Z"}, "message": "Remove unneeded Lrc in query results.", "tree": {"sha": "b46324424df8cd0d6b37b4dbb0c54c0c1e77095c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b46324424df8cd0d6b37b4dbb0c54c0c1e77095c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "html_url": "https://github.com/rust-lang/rust/commit/81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2", "html_url": "https://github.com/rust-lang/rust/commit/5e1ad0d1e448a4ead87c52dd622e12a35c66a7f2"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "786e6b3216f948b2f9675b2b9e99d779242f75d3", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "patch": "@@ -1197,7 +1197,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_item_attrs(&self, node_id: DefIndex, sess: &Session) -> Lrc<[ast::Attribute]> {\n+    fn get_item_attrs(&self, node_id: DefIndex, sess: &Session) -> Vec<ast::Attribute> {\n         // The attributes for a tuple struct/variant are attached to the definition, not the ctor;\n         // we assume that someone passing in a tuple struct ctor is actually wanting to\n         // look at the definition\n@@ -1208,15 +1208,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             node_id\n         };\n \n-        Lrc::from(\n-            self.root\n-                .tables\n-                .attributes\n-                .get(self, item_id)\n-                .unwrap_or(Lazy::empty())\n-                .decode((self, sess))\n-                .collect::<Vec<_>>(),\n-        )\n+        self.root\n+            .tables\n+            .attributes\n+            .get(self, item_id)\n+            .unwrap_or(Lazy::empty())\n+            .decode((self, sess))\n+            .collect::<Vec<_>>()\n     }\n \n     fn get_struct_field_names(&self, id: DefIndex, sess: &Session) -> Vec<Spanned<ast::Name>> {"}, {"sha": "b36cd9b7ec6baf88a81bf40a62345393e97d3111", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "patch": "@@ -138,7 +138,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     lookup_deprecation_entry => {\n         cdata.get_deprecation(def_id.index).map(DeprecationEntry::external)\n     }\n-    item_attrs => { cdata.get_item_attrs(def_id.index, tcx.sess) }\n+    item_attrs => { tcx.arena.alloc_from_iter(\n+        cdata.get_item_attrs(def_id.index, tcx.sess).into_iter()\n+    ) }\n     // FIXME(#38501) We've skipped a `read` on the `hir_owner_nodes` of\n     // a `fn` when encoding, so the dep-tracking wouldn't work.\n     // This is only used by rustdoc anyway, which shouldn't have"}, {"sha": "9d64823d352c1f1dcd30ddb18a674348d35c7859", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "patch": "@@ -118,6 +118,9 @@ macro_rules! arena_types {\n             [] upvars: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n             [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n+            [] attribute: rustc_ast::ast::Attribute,\n+            [] name_set: rustc_data_structures::fx::FxHashSet<rustc_ast::ast::Name>,\n+            [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n             [] tys: rustc_middle::ty::TyS<$tcx>,"}, {"sha": "55ad94d70a5eadafc5b0d8f306cfd8f55ec5c964", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "patch": "@@ -610,7 +610,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query reachable_set(_: CrateNum) -> Lrc<HirIdSet> {\n+        query reachable_set(_: CrateNum) -> &'tcx HirIdSet {\n             desc { \"reachability\" }\n         }\n \n@@ -642,7 +642,7 @@ rustc_queries! {\n         query lookup_stability(_: DefId) -> Option<&'tcx attr::Stability> {}\n         query lookup_const_stability(_: DefId) -> Option<&'tcx attr::ConstStability> {}\n         query lookup_deprecation_entry(_: DefId) -> Option<DeprecationEntry> {}\n-        query item_attrs(_: DefId) -> Lrc<[ast::Attribute]> {}\n+        query item_attrs(_: DefId) -> &'tcx [ast::Attribute] {}\n     }\n \n     Codegen {\n@@ -1047,7 +1047,7 @@ rustc_queries! {\n             desc { \"looking up all possibly unused extern crates\" }\n         }\n         query names_imported_by_glob_use(_: DefId)\n-            -> Lrc<FxHashSet<ast::Name>> {\n+            -> &'tcx FxHashSet<ast::Name> {\n             eval_always\n         }\n "}, {"sha": "7b177390f01d2dc6e6833fdd41db6878452ec9b0", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "patch": "@@ -2721,7 +2721,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     };\n     providers.names_imported_by_glob_use = |tcx, id| {\n         assert_eq!(id.krate, LOCAL_CRATE);\n-        Lrc::new(tcx.glob_map.get(&id).cloned().unwrap_or_default())\n+        tcx.arena.alloc(tcx.glob_map.get(&id).cloned().unwrap_or_default())\n     };\n \n     providers.lookup_stability = |tcx, id| {"}, {"sha": "5bd467f8793bde6416c8b189df47af0c650f0926", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "patch": "@@ -3013,7 +3013,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(id) = self.hir().as_local_hir_id(did) {\n             Attributes::Borrowed(self.hir().attrs(id))\n         } else {\n-            Attributes::Owned(self.item_attrs(did))\n+            Attributes::Borrowed(self.item_attrs(did))\n         }\n     }\n "}, {"sha": "df947e154755f8e34a2f838f58bfe906fa72d577", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f0e90c62bda14f5e7279b3f771f69ac6bc153f/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=81f0e90c62bda14f5e7279b3f771f69ac6bc153f", "patch": "@@ -6,7 +6,6 @@\n // reachable as well.\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n@@ -375,7 +374,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n     }\n }\n \n-fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Lrc<HirIdSet> {\n+fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> &'tcx HirIdSet {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n@@ -421,7 +420,7 @@ fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Lrc<HirIdSet> {\n     debug!(\"Inline reachability shows: {:?}\", reachable_context.reachable_symbols);\n \n     // Return the set of reachable symbols.\n-    Lrc::new(reachable_context.reachable_symbols)\n+    tcx.arena.alloc(reachable_context.reachable_symbols)\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}]}