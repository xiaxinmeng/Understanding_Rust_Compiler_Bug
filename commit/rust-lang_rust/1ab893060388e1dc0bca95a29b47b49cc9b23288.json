{"sha": "1ab893060388e1dc0bca95a29b47b49cc9b23288", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYjg5MzA2MDM4OGUxZGMwYmNhOTVhMjliNDdiNDljYzliMjMyODg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-07T17:51:57Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:59Z"}, "message": "Move compiletest config into a struct", "tree": {"sha": "ac05b794703a3032736be469db40f53f6375ac1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac05b794703a3032736be469db40f53f6375ac1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ab893060388e1dc0bca95a29b47b49cc9b23288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab893060388e1dc0bca95a29b47b49cc9b23288", "html_url": "https://github.com/rust-lang/rust/commit/1ab893060388e1dc0bca95a29b47b49cc9b23288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ab893060388e1dc0bca95a29b47b49cc9b23288/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b881aaed90f56af95fe7da6bedcb9144f82ba93d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b881aaed90f56af95fe7da6bedcb9144f82ba93d", "html_url": "https://github.com/rust-lang/rust/commit/b881aaed90f56af95fe7da6bedcb9144f82ba93d"}], "stats": {"total": 139, "additions": 102, "deletions": 37}, "files": [{"sha": "a847a2f47f661a9ee405405387e7bd3d942597fb", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 102, "deletions": 37, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/1ab893060388e1dc0bca95a29b47b49cc9b23288/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab893060388e1dc0bca95a29b47b49cc9b23288/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=1ab893060388e1dc0bca95a29b47b49cc9b23288", "patch": "@@ -444,37 +444,99 @@ pub struct Compiletest<'a> {\n     suite: &'a str,\n }\n \n-static COMPILETESTS: &[(bool, &str, &str, &str)] = &[\n-    // default, path, mode, suite\n-    (true, \"src/test/codegen\", \"codegen\", \"codegen\"),\n-    (true, \"src/test/codegen-units\", \"codegen-units\", \"codegen-units\"),\n-    (true, \"src/test/compile-fail\", \"compile-fail\", \"compile-fail\"),\n-    (true, \"src/test/incremental\", \"incremental\", \"incremental\"),\n-    (true, \"src/test/mir-opt\", \"mir-opt\", \"mir-opt\"),\n-    (true, \"src/test/parse-fail\", \"parse-fail\", \"parse-fail\"),\n-    (true, \"src/test/run-fail\", \"run-fail\", \"run-fail\"),\n-    (true, \"src/test/run-pass\", \"run-pass\", \"run-pass\"),\n-    (true, \"src/test/run-pass-valgrind\", \"run-pass-valgrind\", \"run-pass-valgrind\"),\n-    (true, \"src/test/ui\", \"ui\", \"ui\"),\n-    (false, \"src/test/debuginfo-lldb\", \"debuginfo-lldb\", \"debuginfo\"),\n-    (false, \"src/test/debuginfo-gdb\", \"debuginfo-gdb\", \"debuginfo\"),\n+#[derive(Copy, Clone, Debug)]\n+struct Test {\n+    default: bool,\n+    path: &'static str,\n+    mode: &'static str,\n+    suite: &'static str,\n+}\n+\n+static COMPILETESTS: &[Test] = &[\n+    Test { default: true, path: \"src/test/codegen\", mode: \"codegen\", suite: \"codegen\" },\n+    Test {\n+        default: true,\n+        path: \"src/test/codegen-units\",\n+        mode: \"codegen-units\",\n+        suite: \"codegen-units\",\n+    },\n+    Test {\n+        default: true,\n+        path: \"src/test/compile-fail\",\n+        mode: \"compile-fail\",\n+        suite: \"compile-fail\",\n+    },\n+    Test { default: true, path: \"src/test/incremental\", mode: \"incremental\", suite: \"incremental\" },\n+    Test { default: true, path: \"src/test/mir-opt\", mode: \"mir-opt\", suite: \"mir-opt\" },\n+    Test { default: true, path: \"src/test/parse-fail\", mode: \"parse-fail\", suite: \"parse-fail\" },\n+    Test { default: true, path: \"src/test/run-fail\", mode: \"run-fail\", suite: \"run-fail\" },\n+    Test { default: true, path: \"src/test/run-pass\", mode: \"run-pass\", suite: \"run-pass\" },\n+    Test {\n+        default: true,\n+        path: \"src/test/run-pass-valgrind\",\n+        mode: \"run-pass-valgrind\",\n+        suite: \"run-pass-valgrind\"\n+    },\n+    Test { default: true, path: \"src/test/ui\", mode: \"ui\", suite: \"ui\" },\n+    Test {\n+        default: false,\n+        path: \"src/test/debuginfo-lldb\",\n+        mode: \"debuginfo-lldb\",\n+        suite: \"debuginfo\"\n+    },\n+    Test {\n+        default: false,\n+        path: \"src/test/debuginfo-gdb\",\n+        mode: \"debuginfo-gdb\",\n+        suite: \"debuginfo\"\n+    },\n \n     // FIXME: What this runs varies depending on the native platform being apple\n-    (true, \"src/test/debuginfo\", \"debuginfo-XXX\", \"debuginfo\"),\n-\n-    (true, \"src/test/ui-fulldeps\", \"ui\", \"ui-fulldeps\"),\n-    (true, \"src/test/run-pass-fulldeps\", \"run-pass\", \"run-pass-fulldeps\"),\n-    (true, \"src/test/run-fail-fulldeps\", \"run-fail\", \"run-fail-fulldeps\"),\n-    (true, \"src/test/compile-fail-fulldeps\", \"compile-fail\", \"compile-fail-fulldeps\"),\n-    (true, \"src/test/run-make\", \"run-make\", \"run-make\"),\n-    (true, \"src/test/rustdoc\", \"rustdoc\", \"rustdoc\"),\n-\n-    (false, \"src/test/pretty\", \"pretty\", \"pretty\"),\n-    (false, \"src/test/run-pass/pretty\", \"pretty\", \"run-pass\"),\n-    (false, \"src/test/run-fail/pretty\", \"pretty\", \"run-fail\"),\n-    (false, \"src/test/run-pass-valgrind/pretty\", \"pretty\", \"run-pass-valgrind\"),\n-    (false, \"src/test/run-pass-fulldeps/pretty\", \"pretty\", \"run-pass-fulldeps\"),\n-    (false, \"src/test/run-fail-fulldeps/pretty\", \"pretty\", \"run-fail-fulldeps\"),\n+    Test { default: true, path: \"src/test/debuginfo\", mode: \"debuginfo-XXX\", suite: \"debuginfo\" },\n+\n+    Test { default: true, path: \"src/test/ui-fulldeps\", mode: \"ui\", suite: \"ui-fulldeps\" },\n+    Test {\n+        default: true,\n+        path: \"src/test/run-pass-fulldeps\",\n+        mode: \"run-pass\",\n+        suite: \"run-pass-fulldeps\",\n+    },\n+    Test {\n+        default: true,\n+        path: \"src/test/run-fail-fulldeps\",\n+        mode: \"run-fail\",\n+        suite: \"run-fail-fulldeps\",\n+    },\n+    Test {\n+        default: true,\n+        path: \"src/test/compile-fail-fulldeps\",\n+        mode: \"compile-fail\",\n+        suite: \"compile-fail-fulldeps\",\n+    },\n+    Test { default: true, path: \"src/test/run-make\", mode: \"run-make\", suite: \"run-make\" },\n+    Test { default: true, path: \"src/test/rustdoc\", mode: \"rustdoc\", suite: \"rustdoc\" },\n+\n+    Test { default: false, path: \"src/test/pretty\", mode: \"pretty\", suite: \"pretty\" },\n+    Test { default: false, path: \"src/test/run-pass/pretty\", mode: \"pretty\", suite: \"run-pass\" },\n+    Test { default: false, path: \"src/test/run-fail/pretty\", mode: \"pretty\", suite: \"run-fail\" },\n+    Test {\n+        default: false,\n+        path: \"src/test/run-pass-valgrind/pretty\",\n+        mode: \"pretty\",\n+        suite: \"run-pass-valgrind\"\n+    },\n+    Test {\n+        default: false,\n+        path: \"src/test/run-pass-fulldeps/pretty\",\n+        mode: \"pretty\",\n+        suite: \"run-pass-fulldeps\",\n+    },\n+    Test {\n+        default: false,\n+        path: \"src/test/run-fail-fulldeps/pretty\",\n+        mode: \"pretty\",\n+        suite: \"run-fail-fulldeps\",\n+    },\n ];\n \n \n@@ -486,31 +548,34 @@ impl<'a> Step<'a> for Compiletest<'a> {\n         // Note that this is general, while a few more cases are skipped inside\n         // run() itself. This is to avoid duplication across should_run and\n         // make_run.\n-        COMPILETESTS.iter().any(|&(_, test_path, _, _)| {\n-            path.ends_with(test_path)\n+        COMPILETESTS.iter().any(|&test| {\n+            path.ends_with(test.path)\n         })\n     }\n \n     fn make_run(builder: &Builder, path: Option<&Path>, host: &str, target: &str) {\n         let compiler = builder.compiler(builder.top_stage, host);\n \n         let test = path.map(|path| {\n-            COMPILETESTS.iter().find(|&&(_, test_path, _, _)| {\n-                path.ends_with(test_path)\n+            COMPILETESTS.iter().find(|&&test| {\n+                path.ends_with(test.path)\n             }).unwrap_or_else(|| {\n                 panic!(\"make_run in compile test to receive test path, received {:?}\", path);\n             })\n         });\n \n         if let Some(test) = test { // specific test\n             builder.ensure(Compiletest {\n-                compiler, target, mode: test.2, suite: test.3\n+                compiler, target, mode: test.mode, suite: test.suite\n             });\n         } else { // default tests\n-            for &(default, _, mode, suite) in COMPILETESTS {\n-                if default {\n+            for test in COMPILETESTS {\n+                if test.default {\n                     builder.ensure(Compiletest {\n-                        compiler, target, mode, suite\n+                        compiler,\n+                        target,\n+                        mode: test.mode,\n+                        suite: test.suite\n                     });\n                 }\n             }"}]}