{"sha": "ef6ebaa2155d1c0da71d06f793707d419f56009f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNmViYWEyMTU1ZDFjMGRhNzFkMDZmNzkzNzA3ZDQxOWY1NjAwOWY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-09T11:24:14Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-11T02:48:17Z"}, "message": "Add a config option to suppress error message on string literal", "tree": {"sha": "1284b18542ee81050671648384073d2d669316b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1284b18542ee81050671648384073d2d669316b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef6ebaa2155d1c0da71d06f793707d419f56009f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6ebaa2155d1c0da71d06f793707d419f56009f", "html_url": "https://github.com/rust-lang/rust/commit/ef6ebaa2155d1c0da71d06f793707d419f56009f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef6ebaa2155d1c0da71d06f793707d419f56009f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e5d7866b3dc39481ba5e83287ba5078963137e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e5d7866b3dc39481ba5e83287ba5078963137e", "html_url": "https://github.com/rust-lang/rust/commit/d1e5d7866b3dc39481ba5e83287ba5078963137e"}], "stats": {"total": 85, "additions": 57, "deletions": 28}, "files": [{"sha": "d15507f4962556b2818c76067ebb9f9aef288288", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6ebaa2155d1c0da71d06f793707d419f56009f/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6ebaa2155d1c0da71d06f793707d419f56009f/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=ef6ebaa2155d1c0da71d06f793707d419f56009f", "patch": "@@ -684,6 +684,8 @@ create_config! {\n     error_on_line_overflow: bool, true, false, \"Error if unable to get all lines within max_width\";\n     error_on_line_overflow_comments: bool, true, false,\n         \"Error if unable to get comments within max_width\";\n+    error_on_line_overflow_strings: bool, true, false,\n+        \"Error if unable to get string letrais within max_width\";\n     report_todo: ReportTactic, ReportTactic::Never, false,\n         \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n     report_fixme: ReportTactic, ReportTactic::Never, false,"}, {"sha": "0db8925d01da5a5a3d32c31ef92611621b6ae9f5", "filename": "src/lib.rs", "status": "modified", "additions": 55, "deletions": 28, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ef6ebaa2155d1c0da71d06f793707d419f56009f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6ebaa2155d1c0da71d06f793707d419f56009f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ef6ebaa2155d1c0da71d06f793707d419f56009f", "patch": "@@ -39,6 +39,7 @@ use syntax::codemap::{CodeMap, FilePathMapping};\n use syntax::parse::{self, ParseSess};\n \n use checkstyle::{output_footer, output_header};\n+use comment::{CharClasses, FullCodeCharKind};\n use config::Config;\n use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n@@ -76,6 +77,7 @@ mod patterns;\n mod summary;\n mod vertical;\n \n+#[derive(Clone, Copy)]\n pub enum ErrorKind {\n     // Line has exceeded character limit (found, maximum)\n     LineOverflow(usize, usize),\n@@ -104,6 +106,7 @@ pub struct FormattingError {\n     line: usize,\n     kind: ErrorKind,\n     is_comment: bool,\n+    is_string: bool,\n     line_buffer: String,\n }\n \n@@ -116,12 +119,14 @@ impl FormattingError {\n     }\n \n     fn msg_suffix(&self) -> &str {\n-        match self.kind {\n-            ErrorKind::LineOverflow(..) if self.is_comment => {\n-                \"use `error_on_line_overflow_comments = false` to suppress \\\n-                 the warning against line comments\\n\"\n-            }\n-            _ => \"\",\n+        if self.is_comment {\n+            \"use `error_on_line_overflow_comments = false` to suppress \\\n+             the warning against comments\\n\"\n+        } else if self.is_string {\n+            \"use `error_on_line_overflow_strings = false` to suppress \\\n+             the warning against string literals\\n\"\n+        } else {\n+            \"\"\n         }\n     }\n \n@@ -363,6 +368,27 @@ fn is_skipped_line(line_number: usize, skipped_range: &[(usize, usize)]) -> bool\n         .any(|&(lo, hi)| lo <= line_number && line_number <= hi)\n }\n \n+fn should_report_error(\n+    config: &Config,\n+    char_kind: FullCodeCharKind,\n+    is_string: bool,\n+    error_kind: ErrorKind,\n+) -> bool {\n+    let allow_error_report = if char_kind.is_comment() {\n+        config.error_on_line_overflow_comments()\n+    } else if is_string {\n+        config.error_on_line_overflow_strings()\n+    } else {\n+        true\n+    };\n+\n+    match error_kind {\n+        ErrorKind::LineOverflow(..) => config.error_on_line_overflow() && allow_error_report,\n+        ErrorKind::TrailingWhitespace => allow_error_report,\n+        _ => true,\n+    }\n+}\n+\n // Formatting done on a char by char or line by line basis.\n // FIXME(#209) warn on bad license\n // FIXME(#20) other stuff for parity with make tidy\n@@ -381,26 +407,25 @@ fn format_lines(\n     let mut newline_count = 0;\n     let mut errors = vec![];\n     let mut issue_seeker = BadIssueSeeker::new(config.report_todo(), config.report_fixme());\n-    let mut prev_char: Option<char> = None;\n-    let mut is_comment = false;\n     let mut line_buffer = String::with_capacity(config.max_width() * 2);\n+    let mut is_string = false; // true if the current line contains a string literal.\n+    let mut format_line = config.file_lines().contains_line(name, cur_line);\n     let mut b = 0;\n \n-    for c in text.chars() {\n+    for (kind, c) in CharClasses::new(text.chars()) {\n         b += 1;\n         if c == '\\r' {\n             continue;\n         }\n \n-        let format_line = config.file_lines().contains_line(name, cur_line as usize);\n-\n         if format_line {\n             // Add warnings for bad todos/ fixmes\n             if let Some(issue) = issue_seeker.inspect(c) {\n                 errors.push(FormattingError {\n                     line: cur_line,\n                     kind: ErrorKind::BadIssue(issue),\n                     is_comment: false,\n+                    is_string: false,\n                     line_buffer: String::new(),\n                 });\n             }\n@@ -409,49 +434,50 @@ fn format_lines(\n         if c == '\\n' {\n             if format_line {\n                 // Check for (and record) trailing whitespace.\n-                if let Some(lw) = last_wspace {\n-                    trims.push((cur_line, lw, b, line_buffer.clone()));\n+                if let Some(..) = last_wspace {\n+                    if should_report_error(config, kind, is_string, ErrorKind::TrailingWhitespace) {\n+                        trims.push((cur_line, kind, line_buffer.clone()));\n+                    }\n                     line_len -= 1;\n                 }\n \n                 // Check for any line width errors we couldn't correct.\n-                let report_error_on_line_overflow = config.error_on_line_overflow()\n+                let error_kind = ErrorKind::LineOverflow(line_len, config.max_width());\n+                if line_len > config.max_width()\n                     && !is_skipped_line(cur_line, skipped_range)\n-                    && (config.error_on_line_overflow_comments() || !is_comment);\n-                if report_error_on_line_overflow && line_len > config.max_width() {\n+                    && should_report_error(config, kind, is_string, error_kind)\n+                {\n                     errors.push(FormattingError {\n                         line: cur_line,\n-                        kind: ErrorKind::LineOverflow(line_len, config.max_width()),\n-                        is_comment: is_comment,\n+                        kind: error_kind,\n+                        is_comment: kind.is_comment(),\n+                        is_string: is_string,\n                         line_buffer: line_buffer.clone(),\n                     });\n                 }\n             }\n \n             line_len = 0;\n             cur_line += 1;\n+            format_line = config.file_lines().contains_line(name, cur_line);\n             newline_count += 1;\n             last_wspace = None;\n-            prev_char = None;\n-            is_comment = false;\n             line_buffer.clear();\n+            is_string = false;\n         } else {\n             newline_count = 0;\n             line_len += 1;\n             if c.is_whitespace() {\n                 if last_wspace.is_none() {\n                     last_wspace = Some(b);\n                 }\n-            } else if c == '/' {\n-                if let Some('/') = prev_char {\n-                    is_comment = true;\n-                }\n-                last_wspace = None;\n             } else {\n                 last_wspace = None;\n             }\n-            prev_char = Some(c);\n             line_buffer.push(c);\n+            if kind.is_string() {\n+                is_string = true;\n+            }\n         }\n     }\n \n@@ -461,12 +487,13 @@ fn format_lines(\n         text.truncate(line);\n     }\n \n-    for &(l, _, _, ref b) in &trims {\n+    for &(l, kind, ref b) in &trims {\n         if !is_skipped_line(l, skipped_range) {\n             errors.push(FormattingError {\n                 line: l,\n                 kind: ErrorKind::TrailingWhitespace,\n-                is_comment: false,\n+                is_comment: kind.is_comment(),\n+                is_string: kind.is_string(),\n                 line_buffer: b.clone(),\n             });\n         }"}]}