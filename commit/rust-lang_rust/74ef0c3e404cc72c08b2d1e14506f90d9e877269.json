{"sha": "74ef0c3e404cc72c08b2d1e14506f90d9e877269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZWYwYzNlNDA0Y2M3MmMwOGIyZDFlMTQ1MDZmOTBkOWU4NzcyNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-16T19:04:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-16T19:04:16Z"}, "message": "Auto merge of #87201 - GuillaumeGomez:rollup-4loi2q9, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #87107 (Loop over all opaque types instead of looking at just the first one with the same DefId)\n - #87158 (Suggest full enum variant for local modules)\n - #87174 (Stabilize `[T; N]::map()`)\n - #87179 (Mark `const_trait_impl` as active)\n - #87180 (feat(rustdoc): open sidebar menu when links inside it are focused)\n - #87188 (Add GUI test for auto-hide-trait-implementations setting)\n - #87200 (TAIT: Infer all inference variables in opaque type substitutions via InferCx)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ee3ec7a9da52443949f2ab252c60bbfcb5a409e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee3ec7a9da52443949f2ab252c60bbfcb5a409e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ef0c3e404cc72c08b2d1e14506f90d9e877269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ef0c3e404cc72c08b2d1e14506f90d9e877269", "html_url": "https://github.com/rust-lang/rust/commit/74ef0c3e404cc72c08b2d1e14506f90d9e877269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ef0c3e404cc72c08b2d1e14506f90d9e877269/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c49895d9049f67e07e297ee487836a587f69690e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c49895d9049f67e07e297ee487836a587f69690e", "html_url": "https://github.com/rust-lang/rust/commit/c49895d9049f67e07e297ee487836a587f69690e"}, {"sha": "7d36d69b4a0e6606b9a9c077302df7464ac1a4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d36d69b4a0e6606b9a9c077302df7464ac1a4e7", "html_url": "https://github.com/rust-lang/rust/commit/7d36d69b4a0e6606b9a9c077302df7464ac1a4e7"}], "stats": {"total": 395, "additions": 162, "deletions": 233}, "files": [{"sha": "1786fa340cc8bb9831039ef8b839f997009c8ce8", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -127,13 +127,15 @@ impl<K, V> IntoIterator for VecMap<K, V> {\n     }\n }\n \n-impl<K, V> Extend<(K, V)> for VecMap<K, V> {\n+impl<K: PartialEq, V> Extend<(K, V)> for VecMap<K, V> {\n     fn extend<I: IntoIterator<Item = (K, V)>>(&mut self, iter: I) {\n-        self.0.extend(iter);\n+        for (k, v) in iter {\n+            self.insert(k, v);\n+        }\n     }\n \n-    fn extend_one(&mut self, item: (K, V)) {\n-        self.0.extend_one(item);\n+    fn extend_one(&mut self, (k, v): (K, V)) {\n+        self.insert(k, v);\n     }\n \n     fn extend_reserve(&mut self, additional: usize) {"}, {"sha": "15123b5b28d373d15e5ec6de04a9efd713354934", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -534,7 +534,7 @@ declare_features! (\n     (active, bindings_after_at, \"1.41.0\", Some(65490), None),\n \n     /// Allows `impl const Trait for T` syntax.\n-    (incomplete, const_trait_impl, \"1.42.0\", Some(67792), None),\n+    (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n \n     /// Allows `T: ?const Trait` syntax in bounds.\n     (incomplete, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None),"}, {"sha": "bfc942e6f10ff0e7cb7ae6ace99a4c2ae30bfd40", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -857,7 +857,7 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]\n pub struct OpaqueTypeKey<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "d5e334b5c65958887303dfadad538aa59bd82a5e", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -568,6 +568,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// - `substs`, the substs  used to instantiate this opaque type\n     /// - `instantiated_ty`, the inferred type C1 -- fully resolved, lifted version of\n     ///   `opaque_defn.concrete_ty`\n+    #[instrument(skip(self))]\n     fn infer_opaque_definition_from_instantiation(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n@@ -576,18 +577,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n-        debug!(\n-            \"infer_opaque_definition_from_instantiation(def_id={:?}, instantiated_ty={:?})\",\n-            def_id, instantiated_ty\n-        );\n-\n         // Use substs to build up a reverse map from regions to their\n         // identity mappings. This is necessary because of `impl\n         // Trait` lifetimes are computed by replacing existing\n         // lifetimes with 'static and remapping only those used in the\n         // `impl Trait` return type, resulting in the parameters\n         // shifting.\n         let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n+        debug!(?id_substs);\n         let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> =\n             substs.iter().enumerate().map(|(index, subst)| (subst, id_substs[index])).collect();\n \n@@ -602,7 +599,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             instantiated_ty,\n             span,\n         ));\n-        debug!(\"infer_opaque_definition_from_instantiation: definition_ty={:?}\", definition_ty);\n+        debug!(?definition_ty);\n \n         definition_ty\n     }\n@@ -857,14 +854,15 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                 self.tcx.mk_generator(def_id, substs, movability)\n             }\n \n-            ty::Param(..) => {\n+            ty::Param(param) => {\n                 // Look it up in the substitution list.\n                 match self.map.get(&ty.into()).map(|k| k.unpack()) {\n                     // Found it in the substitution list; replace with the parameter from the\n                     // opaque type.\n                     Some(GenericArgKind::Type(t1)) => t1,\n                     Some(u) => panic!(\"type mapped to unexpected kind: {:?}\", u),\n                     None => {\n+                        debug!(?param, ?self.map);\n                         self.tcx\n                             .sess\n                             .struct_span_err(\n@@ -931,8 +929,8 @@ struct Instantiator<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n+    #[instrument(skip(self))]\n     fn instantiate_opaque_types_in_map<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {\n-        debug!(\"instantiate_opaque_types_in_map(value={:?})\", value);\n         let tcx = self.infcx.tcx;\n         value.fold_with(&mut BottomUpFolder {\n             tcx,"}, {"sha": "3ea59906d3dcd326d241ecf902912180ce41247a", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -201,7 +202,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let sole_field = &variant.fields[0];\n                     let sole_field_ty = sole_field.ty(self.tcx, substs);\n                     if self.can_coerce(expr_ty, sole_field_ty) {\n-                        let variant_path = self.tcx.def_path_str(variant.def_id);\n+                        let variant_path =\n+                            with_no_trimmed_paths(|| self.tcx.def_path_str(variant.def_id));\n                         // FIXME #56861: DRYer prelude filtering\n                         if let Some(path) = variant_path.strip_prefix(\"std::prelude::\") {\n                             if let Some((_, path)) = path.split_once(\"::\") {"}, {"sha": "34d0908bcc74ea2df8f1aad5e16ef24a5f869537", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 116, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -112,11 +112,9 @@ use rustc_hir::{HirIdMap, ImplicitSelfKind, Node};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, RegionKind, Ty, TyCtxt, UserType};\n+use rustc_middle::ty::{self, Ty, TyCtxt, UserType};\n use rustc_session::config;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n@@ -321,117 +319,6 @@ fn used_trait_imports(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &FxHashSet<LocalDe\n     &*tcx.typeck(def_id).used_trait_imports\n }\n \n-/// Inspects the substs of opaque types, replacing any inference variables\n-/// with proper generic parameter from the identity substs.\n-///\n-/// This is run after we normalize the function signature, to fix any inference\n-/// variables introduced by the projection of associated types. This ensures that\n-/// any opaque types used in the signature continue to refer to generic parameters,\n-/// allowing them to be considered for defining uses in the function body\n-///\n-/// For example, consider this code.\n-///\n-/// ```rust\n-/// trait MyTrait {\n-///     type MyItem;\n-///     fn use_it(self) -> Self::MyItem\n-/// }\n-/// impl<T, I> MyTrait for T where T: Iterator<Item = I> {\n-///     type MyItem = impl Iterator<Item = I>;\n-///     fn use_it(self) -> Self::MyItem {\n-///         self\n-///     }\n-/// }\n-/// ```\n-///\n-/// When we normalize the signature of `use_it` from the impl block,\n-/// we will normalize `Self::MyItem` to the opaque type `impl Iterator<Item = I>`\n-/// However, this projection result may contain inference variables, due\n-/// to the way that projection works. We didn't have any inference variables\n-/// in the signature to begin with - leaving them in will cause us to incorrectly\n-/// conclude that we don't have a defining use of `MyItem`. By mapping inference\n-/// variables back to the actual generic parameters, we will correctly see that\n-/// we have a defining use of `MyItem`\n-fn fixup_opaque_types<'tcx, T>(tcx: TyCtxt<'tcx>, val: T) -> T\n-where\n-    T: TypeFoldable<'tcx>,\n-{\n-    struct FixupFolder<'tcx> {\n-        tcx: TyCtxt<'tcx>,\n-    }\n-\n-    impl<'tcx> TypeFolder<'tcx> for FixupFolder<'tcx> {\n-        fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n-            self.tcx\n-        }\n-\n-        fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-            match *ty.kind() {\n-                ty::Opaque(def_id, substs) => {\n-                    debug!(\"fixup_opaque_types: found type {:?}\", ty);\n-                    // Here, we replace any inference variables that occur within\n-                    // the substs of an opaque type. By definition, any type occurring\n-                    // in the substs has a corresponding generic parameter, which is what\n-                    // we replace it with.\n-                    // This replacement is only run on the function signature, so any\n-                    // inference variables that we come across must be the rust of projection\n-                    // (there's no other way for a user to get inference variables into\n-                    // a function signature).\n-                    if ty.needs_infer() {\n-                        let new_substs = InternalSubsts::for_item(self.tcx, def_id, |param, _| {\n-                            let old_param = substs[param.index as usize];\n-                            match old_param.unpack() {\n-                                GenericArgKind::Type(old_ty) => {\n-                                    if let ty::Infer(_) = old_ty.kind() {\n-                                        // Replace inference type with a generic parameter\n-                                        self.tcx.mk_param_from_def(param)\n-                                    } else {\n-                                        old_param.fold_with(self)\n-                                    }\n-                                }\n-                                GenericArgKind::Const(old_const) => {\n-                                    if let ty::ConstKind::Infer(_) = old_const.val {\n-                                        // This should never happen - we currently do not support\n-                                        // 'const projections', e.g.:\n-                                        // `impl<T: SomeTrait> MyTrait for T where <T as SomeTrait>::MyConst == 25`\n-                                        // which should be the only way for us to end up with a const inference\n-                                        // variable after projection. If Rust ever gains support for this kind\n-                                        // of projection, this should *probably* be changed to\n-                                        // `self.tcx.mk_param_from_def(param)`\n-                                        bug!(\n-                                            \"Found infer const: `{:?}` in opaque type: {:?}\",\n-                                            old_const,\n-                                            ty\n-                                        );\n-                                    } else {\n-                                        old_param.fold_with(self)\n-                                    }\n-                                }\n-                                GenericArgKind::Lifetime(old_region) => {\n-                                    if let RegionKind::ReVar(_) = old_region {\n-                                        self.tcx.mk_param_from_def(param)\n-                                    } else {\n-                                        old_param.fold_with(self)\n-                                    }\n-                                }\n-                            }\n-                        });\n-                        let new_ty = self.tcx.mk_opaque(def_id, new_substs);\n-                        debug!(\"fixup_opaque_types: new type: {:?}\", new_ty);\n-                        new_ty\n-                    } else {\n-                        ty\n-                    }\n-                }\n-                _ => ty.super_fold_with(self),\n-            }\n-        }\n-    }\n-\n-    debug!(\"fixup_opaque_types({:?})\", val);\n-    val.fold_with(&mut FixupFolder { tcx })\n-}\n-\n fn typeck_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (did, param_did): (LocalDefId, DefId),\n@@ -510,8 +397,6 @@ fn typeck_with_fallback<'tcx>(\n                 fn_sig,\n             );\n \n-            let fn_sig = fixup_opaque_types(tcx, fn_sig);\n-\n             let fcx = check_fn(&inh, param_env, fn_sig, decl, id, body, None).0;\n             fcx\n         } else {"}, {"sha": "0aa059b7de80fde78df7e570f621be4bbb307541", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -496,6 +496,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n             debug_assert!(!instantiated_ty.has_escaping_bound_vars());\n \n+            let opaque_type_key = self.fcx.fully_resolve(opaque_type_key).unwrap();\n+\n             // Prevent:\n             // * `fn foo<T>() -> Foo<T>`\n             // * `fn foo<T: Bound + Other>() -> Foo<T>`\n@@ -508,6 +510,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             // fn foo<U>() -> Foo<U> { .. }\n             // ```\n             // figures out the concrete type with `U`, but the stored type is with `T`.\n+\n+            // FIXME: why are we calling this here? This seems too early, and duplicated.\n             let definition_ty = self.fcx.infer_opaque_definition_from_instantiation(\n                 opaque_type_key,\n                 instantiated_ty,\n@@ -529,33 +533,33 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 }\n             }\n \n-            if !opaque_type_key.substs.needs_infer() {\n-                // We only want to add an entry into `concrete_opaque_types`\n-                // if we actually found a defining usage of this opaque type.\n-                // Otherwise, we do nothing - we'll either find a defining usage\n-                // in some other location, or we'll end up emitting an error due\n-                // to the lack of defining usage\n-                if !skip_add {\n-                    let old_concrete_ty = self\n-                        .typeck_results\n-                        .concrete_opaque_types\n-                        .insert(opaque_type_key, definition_ty);\n-                    if let Some(old_concrete_ty) = old_concrete_ty {\n-                        if old_concrete_ty != definition_ty {\n-                            span_bug!(\n-                                span,\n-                                \"`visit_opaque_types` tried to write different types for the same \\\n+            if opaque_type_key.substs.needs_infer() {\n+                span_bug!(span, \"{:#?} has inference variables\", opaque_type_key.substs)\n+            }\n+\n+            // We only want to add an entry into `concrete_opaque_types`\n+            // if we actually found a defining usage of this opaque type.\n+            // Otherwise, we do nothing - we'll either find a defining usage\n+            // in some other location, or we'll end up emitting an error due\n+            // to the lack of defining usage\n+            if !skip_add {\n+                let old_concrete_ty = self\n+                    .typeck_results\n+                    .concrete_opaque_types\n+                    .insert(opaque_type_key, definition_ty);\n+                if let Some(old_concrete_ty) = old_concrete_ty {\n+                    if old_concrete_ty != definition_ty {\n+                        span_bug!(\n+                            span,\n+                            \"`visit_opaque_types` tried to write different types for the same \\\n                                  opaque type: {:?}, {:?}, {:?}, {:?}\",\n-                                opaque_type_key.def_id,\n-                                definition_ty,\n-                                opaque_defn,\n-                                old_concrete_ty,\n-                            );\n-                        }\n+                            opaque_type_key.def_id,\n+                            definition_ty,\n+                            opaque_defn,\n+                            old_concrete_ty,\n+                        );\n                     }\n                 }\n-            } else {\n-                self.tcx().sess.delay_span_bug(span, \"`opaque_defn` has inference variables\");\n             }\n         }\n     }"}, {"sha": "7b0002914eca80d20d0df9cf6e94bfa4dbfe933f", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -509,11 +509,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n }\n \n+#[instrument(skip(tcx), level = \"debug\")]\n fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     use rustc_hir::{Expr, ImplItem, Item, TraitItem};\n \n-    debug!(\"find_opaque_ty_constraints({:?})\", def_id);\n-\n     struct ConstraintLocator<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n@@ -522,13 +521,11 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n \n     impl ConstraintLocator<'_> {\n+        #[instrument(skip(self), level = \"debug\")]\n         fn check(&mut self, def_id: LocalDefId) {\n             // Don't try to check items that cannot possibly constrain the type.\n             if !self.tcx.has_typeck_results(def_id) {\n-                debug!(\n-                    \"find_opaque_ty_constraints: no constraint for `{:?}` at `{:?}`: no typeck results\",\n-                    self.def_id, def_id,\n-                );\n+                debug!(\"no constraint: no typeck results\");\n                 return;\n             }\n             // Calling `mir_borrowck` can lead to cycle errors through\n@@ -540,21 +537,19 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 .get_by(|(key, _)| key.def_id == self.def_id)\n                 .is_none()\n             {\n-                debug!(\n-                    \"find_opaque_ty_constraints: no constraint for `{:?}` at `{:?}`\",\n-                    self.def_id, def_id,\n-                );\n+                debug!(\"no constraints in typeck results\");\n                 return;\n             }\n             // Use borrowck to get the type with unerased regions.\n             let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n-            if let Some((opaque_type_key, concrete_type)) =\n-                concrete_opaque_types.iter().find(|(key, _)| key.def_id == self.def_id)\n-            {\n-                debug!(\n-                    \"find_opaque_ty_constraints: found constraint for `{:?}` at `{:?}`: {:?}\",\n-                    self.def_id, def_id, concrete_type,\n-                );\n+            debug!(?concrete_opaque_types);\n+            for (opaque_type_key, concrete_type) in concrete_opaque_types {\n+                if opaque_type_key.def_id != self.def_id {\n+                    // Ignore constraints for other opaque types.\n+                    continue;\n+                }\n+\n+                debug!(?concrete_type, ?opaque_type_key.substs, \"found constraint\");\n \n                 // FIXME(oli-obk): trace the actual span from inference to improve errors.\n                 let span = self.tcx.def_span(def_id);\n@@ -603,7 +598,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n                 if let Some((prev_span, prev_ty)) = self.found {\n                     if *concrete_type != prev_ty {\n-                        debug!(\"find_opaque_ty_constraints: span={:?}\", span);\n+                        debug!(?span);\n                         // Found different concrete types for the opaque type.\n                         let mut err = self.tcx.sess.struct_span_err(\n                             span,\n@@ -619,11 +614,6 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 } else {\n                     self.found = Some((span, concrete_type));\n                 }\n-            } else {\n-                debug!(\n-                    \"find_opaque_ty_constraints: no constraint for `{:?}` at `{:?}`\",\n-                    self.def_id, def_id,\n-                );\n             }\n         }\n     }"}, {"sha": "78b799cd709763a6bb8ffbd52fd8ce2ad8773143", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -296,7 +296,6 @@ impl<T, const N: usize> [T; N] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(array_map)]\n     /// let x = [1, 2, 3];\n     /// let y = x.map(|v| v + 1);\n     /// assert_eq!(y, [2, 3, 4]);\n@@ -310,7 +309,7 @@ impl<T, const N: usize> [T; N] {\n     /// let y = x.map(|v| v.len());\n     /// assert_eq!(y, [6, 9, 3, 3]);\n     /// ```\n-    #[unstable(feature = \"array_map\", issue = \"75243\")]\n+    #[stable(feature = \"array_map\", since = \"1.55.0\")]\n     pub fn map<F, U>(self, f: F) -> [U; N]\n     where\n         F: FnMut(T) -> U,\n@@ -377,7 +376,7 @@ impl<T, const N: usize> [T; N] {\n     /// array if its elements are not `Copy`.\n     ///\n     /// ```\n-    /// #![feature(array_methods, array_map)]\n+    /// #![feature(array_methods)]\n     ///\n     /// let strings = [\"Ferris\".to_string(), \"\u2665\".to_string(), \"Rust\".to_string()];\n     /// let is_ascii = strings.each_ref().map(|s| s.is_ascii());"}, {"sha": "c7756a503c3e9956d7f1ba1089655fd631b4e25c", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,7 +1,6 @@\n #![feature(alloc_layout_extra)]\n #![feature(array_chunks)]\n #![feature(array_methods)]\n-#![feature(array_map)]\n #![feature(array_windows)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]"}, {"sha": "b86f012c0e168669479e4b8a6f461343ed09791c", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1732,7 +1732,8 @@ details.undocumented[open] > summary::before {\n \t\twidth: calc(100% + 30px);\n \t}\n \n-\t.show-it {\n+\t.show-it, .sidebar-elems:focus-within {\n+\t\tz-index:  2;\n \t\tleft: 0;\n \t}\n "}, {"sha": "7b1358fedc3b5e2201ca0adca36d55df3b79c106", "filename": "src/test/rustdoc-gui/auto-hide-trait-implementations.goml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Frustdoc-gui%2Fauto-hide-trait-implementations.goml", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Frustdoc-gui%2Fauto-hide-trait-implementations.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fauto-hide-trait-implementations.goml?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -0,0 +1,13 @@\n+// Checks that the setting \"auto hide trait implementations\" is working as expected.\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+\n+// By default, the trait implementations are not collapsed.\n+assert-attribute: (\"#trait-implementations-list > details\", {\"open\": \"\"}, ALL)\n+\n+// We now set the setting to auto hide all trait implementations.\n+local-storage: {\"rustdoc-auto-hide-trait-implementations\": \"true\" }\n+// We reload to ensure the trait implementations are collapsed as expected.\n+reload:\n+\n+// We now check that all matching elements don't have the open attributes.\n+assert-attribute-false: (\"#trait-implementations-list > details\", {\"open\": \"\"}, ALL)"}, {"sha": "f0c9361d0806bb00b044b928a4a8a82d03188a19", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -8,3 +8,13 @@ assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"-246px\"})\n // Opening the sidebar menu.\n click: \".sidebar-menu\"\n assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"0px\"})\n+// Closing the sidebar menu.\n+click: \".sidebar-menu\"\n+assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"-246px\"})\n+// Force the sidebar open by focusing a link inside it.\n+// This makes it easier for keyboard users to get to it.\n+focus: \".sidebar-title\"\n+assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"0px\"})\n+// When we tab out of the sidebar, close it.\n+focus: \".search-input\"\n+assert-css: (\".sidebar-elems\", {\"display\": \"block\", \"left\": \"-246px\"})"}, {"sha": "bed72ccb9f929668f0b3388f2be52e6f00dbcf3e", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -5,6 +5,7 @@\n #![feature(doc_keyword)]\n #![feature(doc_cfg)]\n \n+use std::convert::AsRef;\n use std::fmt;\n \n /// Basic function with some code examples:\n@@ -36,6 +37,12 @@ impl Foo {\n     }\n }\n \n+impl AsRef<str> for Foo {\n+    fn as_ref(&self) -> &str {\n+        \"hello\"\n+    }\n+}\n+\n /// Just a normal enum.\n #[doc(alias = \"ThisIsAnAlias\")]\n pub enum WhoLetTheDogOut {"}, {"sha": "5d38e032ac408518ffae53627349156d7856145d", "filename": "src/test/ui/consts/const-float-classify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -5,7 +5,6 @@\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n // Don't promote\n const fn nop<T>(x: T) -> T { x }"}, {"sha": "e3fda57548ea32c3d753a0d38adf2fd02cc55fa8", "filename": "src/test/ui/consts/rustc-impl-const-stability.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,7 +1,6 @@\n // build-pass\n \n #![crate_type = \"lib\"]\n-#![allow(incomplete_features)]\n #![feature(staged_api)]\n #![feature(const_trait_impl)]\n #![stable(feature = \"foo\", since = \"1.0.0\")]"}, {"sha": "4a1bd5da98b8a403876e778d041c7589f7f05a8d", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -3,7 +3,6 @@\n // FIXME: This test should fail since, within a const impl of `Foo`, the bound on `Foo::Bar` should\n // require a const impl of `Add` for the associated type.\n \n-#![allow(incomplete_features)]\n #![feature(const_trait_impl)]\n \n struct NonConstAdd(i32);"}, {"sha": "be73ec09ceb3ba8ea50f807aa4215fdd4a0895f6", "filename": "src/test/ui/rfc-2632-const-trait-impl/attr-misuse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n #[default_method_body_is_const] //~ ERROR attribute should be applied\n trait A {"}, {"sha": "fcb7e15b205e94535b1499b3d91dc25cccfe1857", "filename": "src/test/ui/rfc-2632-const-trait-impl/attr-misuse.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fattr-misuse.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error: attribute should be applied to a trait method with body\n-  --> $DIR/attr-misuse.rs:4:1\n+  --> $DIR/attr-misuse.rs:3:1\n    |\n LL |   #[default_method_body_is_const]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,15 +13,15 @@ LL | | }\n    | |_- not a trait method or missing a body\n \n error: attribute should be applied to a trait method with body\n-  --> $DIR/attr-misuse.rs:13:1\n+  --> $DIR/attr-misuse.rs:12:1\n    |\n LL | #[default_method_body_is_const]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | fn main() {}\n    | ------------ not a trait method or missing a body\n \n error: attribute should be applied to a trait method with body\n-  --> $DIR/attr-misuse.rs:6:5\n+  --> $DIR/attr-misuse.rs:5:5\n    |\n LL |     #[default_method_body_is_const]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d8fd7ef3c1f4450ae6c68d6dff6a0ea10997e50f", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n pub trait MyTrait {\n     fn func(self);"}, {"sha": "80e61ab0a9e8bb0ef13dc0c6e32a5407ae78bf0e", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/staged-api.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n #![feature(staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "33e839fd1203d51b5e70e6d9aa0e24e79df29a91", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(const_trait_impl)]\n \n pub trait Plus {"}, {"sha": "5a73c4debb481d0bfe1c47bb657c2490c9ed5692", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/call-const-trait-method-fail.rs:25:5\n+  --> $DIR/call-const-trait-method-fail.rs:24:5\n    |\n LL |     a.plus(b)\n    |     ^^^^^^^^^"}, {"sha": "cf38bc3c9645321cafbcf9f9e3e279e07e01a3a7", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![allow(incomplete_features)]\n #![feature(const_trait_impl)]\n \n struct Int(i32);"}, {"sha": "f3391aa63468cf91580aec8019bdd5bcb5e7a73e", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-chain.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(const_trait_impl)]\n #![feature(const_fn_trait_bound)]\n-#![allow(incomplete_features)]\n \n struct S;\n "}, {"sha": "087f8fbdcd1ea85eaca4ce49b197b9d250159742", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -2,7 +2,6 @@\n // ignore-test\n \n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n struct S;\n "}, {"sha": "aee88d6053eee2cee24404f497867fe66abe009e", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(const_trait_impl)]\n #![feature(const_fn_trait_bound)]\n-#![allow(incomplete_features)]\n \n struct S;\n "}, {"sha": "4b2f049b99d9e05063772574e45b0b1f2e34a63c", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(const_trait_impl)]\n \n pub struct Int(i32);"}, {"sha": "a0960a21d46f87e1c45420e6911e85ba61bce4df", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::ops::Add` for type `i32`\n-  --> $DIR/const-and-non-const-impl.rs:6:1\n+  --> $DIR/const-and-non-const-impl.rs:5:1\n    |\n LL | impl const std::ops::Add for i32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | impl const std::ops::Add for i32 {\n            - impl Add for i32;\n \n error[E0119]: conflicting implementations of trait `std::ops::Add` for type `Int`\n-  --> $DIR/const-and-non-const-impl.rs:24:1\n+  --> $DIR/const-and-non-const-impl.rs:23:1\n    |\n LL | impl std::ops::Add for Int {\n    | -------------------------- first implementation here\n@@ -17,7 +17,7 @@ LL | impl const std::ops::Add for Int {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Int`\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/const-and-non-const-impl.rs:6:1\n+  --> $DIR/const-and-non-const-impl.rs:5:1\n    |\n LL | impl const std::ops::Add for i32 {\n    | ^^^^^^^^^^^-------------^^^^^---"}, {"sha": "3a7074163523b0dab00be8a7c79ec3ebf47031d3", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-check-fns-in-const-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(const_trait_impl)]\n \n struct S;"}, {"sha": "aaec67161a6afe241b7eaee1a55cc7ec3b7f6f7e", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-check-fns-in-const-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-check-fns-in-const-impl.rs:12:16\n+  --> $DIR/const-check-fns-in-const-impl.rs:11:16\n    |\n LL |     fn foo() { non_const() }\n    |                ^^^^^^^^^^^"}, {"sha": "7a0db9c98ea61d53d8b7135b3429b114218515a2", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,6 +1,5 @@\n #![feature(const_trait_impl)]\n #![feature(const_fn_trait_bound)] // FIXME is this needed?\n-#![allow(incomplete_features)]\n \n trait ConstDefaultFn: Sized {\n     fn b(self);"}, {"sha": "63e4095af29437295bb6bc8a63b28326bba2a94b", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-default-method-bodies.rs:26:5\n+  --> $DIR/const-default-method-bodies.rs:25:5\n    |\n LL |     NonConstImpl.a();\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "bed4e9fd1e610acf74fe18e2b6aefe0626104ecb", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-norecover.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n struct Foo;\n "}, {"sha": "603f6b7d2835e88b373b31d2a6b2d8b4710d6bed", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-norecover.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-norecover.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `impl`\n-  --> $DIR/const-impl-norecover.rs:6:7\n+  --> $DIR/const-impl-norecover.rs:5:7\n    |\n LL | const impl Foo {\n    |       ^^^^ expected identifier, found keyword"}, {"sha": "470c653dd47019b5b1a978c766e37c5303d8f540", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-recovery.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n trait Foo {}\n "}, {"sha": "f815389ff01c3cacfbd480fab870243544426b9a", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-recovery.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `impl`\n-  --> $DIR/const-impl-recovery.rs:6:7\n+  --> $DIR/const-impl-recovery.rs:5:7\n    |\n LL | const impl Foo for i32 {}\n    |       ^^^^ expected identifier, found keyword\n@@ -10,7 +10,7 @@ LL | impl const Foo for i32 {}\n    |--    ^^^^^\n \n error: expected identifier, found keyword `impl`\n-  --> $DIR/const-impl-recovery.rs:10:7\n+  --> $DIR/const-impl-recovery.rs:9:7\n    |\n LL | const impl<T: Foo> Bar for T {}\n    |       ^^^^ expected identifier, found keyword"}, {"sha": "3f553a8ee70793d26d3a4f48d1c51fdb1a6974fb", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/cross-crate.rs:16:5\n+  --> $DIR/cross-crate.rs:15:5\n    |\n LL |     NonConst.func();\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "4bd3359947d948729c35569d4be29bfc912ad8db", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,6 +1,5 @@\n // revisions: stock gated\n #![cfg_attr(gated, feature(const_trait_impl))]\n-#![allow(incomplete_features)]\n \n // aux-build: cross-crate.rs\n extern crate cross_crate;"}, {"sha": "9908f47a7b28858b0c717963e2cb936f74e35380", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,11 +1,11 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/cross-crate.rs:16:5\n+  --> $DIR/cross-crate.rs:15:5\n    |\n LL |     NonConst.func();\n    |     ^^^^^^^^^^^^^^^\n \n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/cross-crate.rs:18:5\n+  --> $DIR/cross-crate.rs:17:5\n    |\n LL |     Const.func();\n    |     ^^^^^^^^^^^^"}, {"sha": "af4d3909e40515d083c322f20741e7b8f3256aff", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/feature-gate.rs:14:1\n+  --> $DIR/feature-gate.rs:13:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^"}, {"sha": "7bac72e1bb6fb608c2854ac5a3f89f7d391efed4", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -2,7 +2,6 @@\n // gate-test-const_trait_impl\n \n #![cfg_attr(gated, feature(const_trait_impl))]\n-#![allow(incomplete_features)]\n #![feature(rustc_attrs)]\n \n struct S;"}, {"sha": "91a8bb578a829ecdd7f0ec9f8312a745fc5b9acf", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.stock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.stock.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: const trait impls are experimental\n-  --> $DIR/feature-gate.rs:10:6\n+  --> $DIR/feature-gate.rs:9:6\n    |\n LL | impl const T for S {}\n    |      ^^^^^"}, {"sha": "91c3d2d5920bc6675b625f86ace4209f335d169a", "filename": "src/test/ui/rfc-2632-const-trait-impl/generic-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![allow(incomplete_features)]\n #![feature(const_trait_impl)]\n #![feature(const_fn_trait_bound)]\n "}, {"sha": "80a4442de2cba7332df2d0d4ce4787f02d9db52f", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,7 +1,6 @@\n // Regression test for #69615.\n \n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n pub trait MyTrait {\n     fn method(&self) -> Option<()>;"}, {"sha": "3ec329cba1eb2a027bbd07794078ae136b6e5079", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error[E0744]: `?` is not allowed in a `const fn`\n-  --> $DIR/hir-const-check.rs:12:9\n+  --> $DIR/hir-const-check.rs:11:9\n    |\n LL |         Some(())?;\n    |         ^^^^^^^^^"}, {"sha": "59de9e95719449df6623b7ce10446fdf58a3fe2e", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n trait Tr {\n     fn req(&self);"}, {"sha": "5301e0ad12ef1329c8360f8417bf788071117387", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn.rs:18:1\n+  --> $DIR/impl-with-default-fn.rs:17:1\n    |\n LL | / impl const Tr for S {\n LL | |     fn req(&self) {}\n@@ -9,7 +9,7 @@ LL | | }\n    = note: `prov` not implemented\n \n error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn.rs:33:1\n+  --> $DIR/impl-with-default-fn.rs:32:1\n    |\n LL | / impl const Tr for u32 {\n LL | |     fn req(&self) {}\n@@ -20,7 +20,7 @@ LL | | }\n    = note: `prov` not implemented\n \n error[E0046]: not all trait items implemented, missing: `req`\n-  --> $DIR/impl-with-default-fn.rs:27:1\n+  --> $DIR/impl-with-default-fn.rs:26:1\n    |\n LL |     fn req(&self);\n    |     -------------- `req` from trait"}, {"sha": "6b54a9eab5205bb904bfb9474b30d7f44f773962", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,4 +1,3 @@\n-#![allow(incomplete_features)]\n #![feature(allow_internal_unstable)]\n #![feature(const_add)]\n #![feature(const_trait_impl)]"}, {"sha": "86b685959a6cbcc77f0239a165cbed1349f82ee8", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -1,5 +1,5 @@\n error: trait methods cannot be stable const fn\n-  --> $DIR/stability.rs:14:5\n+  --> $DIR/stability.rs:13:5\n    |\n LL | /     fn sub(self, rhs: Self) -> Self {\n LL | |\n@@ -8,7 +8,7 @@ LL | |     }\n    | |_____^\n \n error: `<Int as Add>::add` is not yet stable as a const fn\n-  --> $DIR/stability.rs:32:5\n+  --> $DIR/stability.rs:31:5\n    |\n LL |     Int(1i32) + Int(2i32)\n    |     ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "82a1275bffaedf89ee825a02233a49d1985306f9", "filename": "src/test/ui/rfc-2632-const-trait-impl/syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsyntax.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -3,7 +3,6 @@\n \n #![feature(const_trait_bound_opt_out)]\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n \n // For now, this parses since an error does not occur until AST lowering.\n impl ?const T {}"}, {"sha": "1dfc0786668f235dc2d57fec01286d1d880a17e1", "filename": "src/test/ui/suggestions/suggest-full-enum-variant-for-local-module.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -0,0 +1,10 @@\n+mod option {\n+    pub enum O<T> {\n+        Some(T),\n+        None,\n+    }\n+}\n+\n+fn main() {\n+    let _: option::O<()> = (); //~ ERROR 9:28: 9:30: mismatched types [E0308]\n+}"}, {"sha": "22a0ce1e91d7243324dc0245a935d98f94024bbb", "filename": "src/test/ui/suggestions/suggest-full-enum-variant-for-local-module.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-full-enum-variant-for-local-module.rs:9:28\n+   |\n+LL |     let _: option::O<()> = ();\n+   |            -------------   ^^\n+   |            |               |\n+   |            |               expected enum `O`, found `()`\n+   |            |               help: try using a variant of the expected enum: `option::O::Some(())`\n+   |            expected due to this\n+   |\n+   = note:   expected enum `O<()>`\n+           found unit type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b7c8a58a656290da2fabd82e5ca7133a2c586c55", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -9,7 +9,7 @@ trait Bug {\n impl Bug for &() {\n     type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n     //~^ ERROR the trait bound `(): Bug` is not satisfied\n-    //~^^ ERROR could not find defining uses\n+    //~^^ ERROR the trait bound `(): Bug` is not satisfied\n \n     const FUN: fn() -> Self::Item = || ();\n     //~^ ERROR type alias impl trait is not permitted here"}, {"sha": "6857d5264b65ed717bc5bdf1410d3941fe57588d", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -25,11 +25,14 @@ LL |     type Item = impl Bug;\n    = help: the following implementations were found:\n              <&() as Bug>\n \n-error: could not find defining uses\n+error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:17\n    |\n LL |     type Item = impl Bug;\n-   |                 ^^^^^^^^\n+   |                 ^^^^^^^^ the trait `Bug` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <&() as Bug>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0c37399df8dd21fa70195fd42074bfc09447cfcd", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -12,6 +12,7 @@ trait Output<'a> {}\n impl<'a> Output<'a> for &'a str {}\n \n fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n+    //~^ ERROR: concrete type differs from previous defining opaque type use\n     let out: OpaqueOutputImpl<'a> = arg;\n     arg\n }"}, {"sha": "233c996340d844fe57b47485af643d0308d3a703", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74ef0c3e404cc72c08b2d1e14506f90d9e877269/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr?ref=74ef0c3e404cc72c08b2d1e14506f90d9e877269", "patch": "@@ -10,6 +10,18 @@ note: hidden type `&'<empty> str` captures lifetime smaller than the function bo\n LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n    |                             ^^^^^^^^^^^^^^^^^^^^\n \n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-85113.rs:14:1\n+   |\n+LL | fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&'<empty> str`, got `&'a str`\n+   |\n+note: previous use here\n+  --> $DIR/issue-85113.rs:14:1\n+   |\n+LL | fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0477]: the type `&'<empty> str` does not fulfill the required lifetime\n   --> $DIR/issue-85113.rs:5:29\n    |\n@@ -42,7 +54,7 @@ LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n    = note: expected `Output<'a>`\n               found `Output<'_>`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0477, E0495, E0700.\n For more information about an error, try `rustc --explain E0477`."}]}