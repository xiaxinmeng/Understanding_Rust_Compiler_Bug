{"sha": "db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNDQxZGUwYThkZmJhYzJhZTllMTBkOGZmNzNlNWVhZjVlNDhhNTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-28T20:05:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-28T20:05:08Z"}, "message": "Merge #4193\n\n4193: Make it impossible to forget to add a semantic token type / modifier r=kjeremy a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b0acd3e21038e3d8b5d538ab3dd8c8b7c387dc06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0acd3e21038e3d8b5d538ab3dd8c8b7c387dc06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqIx0CRBK7hj4Ov3rIwAAdHIIAApPQZdWGzWrpxWVBbYpzzSk\n0MpoMGjdL21b5qGZim3GNh/EvgpHpqSguVAIXcT1HlWO0bmwGZh1B8u/iq2aMdty\nFzx/LE9TG8SFb3ywU3YEQ+1n1/55GzlpQHaIhXv6uXIF+WG8hsuwLfN3HML+KE78\nKWjBNRSRmcKetsfJCXHMznnoArWbaYYVuGMANcv5AQz1bDb6v76XFCT8fpTYheNi\nq55C6An0P6HujHAB2zde2dXuUf36pYY4njfzxf9tkmIZACAQ7euBrlFMEb3h1uue\n02FQUDI35l/71cSEHwtjYqsDzz9nH65FNe65CsK4rOOCV4dclFx0axIG7/A1uHE=\n=pKnD\n-----END PGP SIGNATURE-----\n", "payload": "tree b0acd3e21038e3d8b5d538ab3dd8c8b7c387dc06\nparent 2096db90b43348cd68e5c06d2d910b1492757a17\nparent 890938a48c01753483f2d17865432acfd7a6c0e8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588104308 +0000\ncommitter GitHub <noreply@github.com> 1588104308 +0000\n\nMerge #4193\n\n4193: Make it impossible to forget to add a semantic token type / modifier r=kjeremy a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56", "html_url": "https://github.com/rust-lang/rust/commit/db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2096db90b43348cd68e5c06d2d910b1492757a17", "url": "https://api.github.com/repos/rust-lang/rust/commits/2096db90b43348cd68e5c06d2d910b1492757a17", "html_url": "https://github.com/rust-lang/rust/commit/2096db90b43348cd68e5c06d2d910b1492757a17"}, {"sha": "890938a48c01753483f2d17865432acfd7a6c0e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/890938a48c01753483f2d17865432acfd7a6c0e8", "html_url": "https://github.com/rust-lang/rust/commit/890938a48c01753483f2d17865432acfd7a6c0e8"}], "stats": {"total": 117, "additions": 61, "deletions": 56}, "files": [{"sha": "2dc5cb1196fc41e6f374185d731ac043c300ed3a", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 61, "deletions": 56, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=db441de0a8dfbac2ae9e10d8ff73e5eaf5e48a56", "patch": "@@ -4,64 +4,69 @@ use std::ops;\n \n use lsp_types::{Range, SemanticToken, SemanticTokenModifier, SemanticTokenType, SemanticTokens};\n \n-pub(crate) const ATTRIBUTE: SemanticTokenType = SemanticTokenType::new(\"attribute\");\n-pub(crate) const BUILTIN_TYPE: SemanticTokenType = SemanticTokenType::new(\"builtinType\");\n-pub(crate) const ENUM_MEMBER: SemanticTokenType = SemanticTokenType::new(\"enumMember\");\n-pub(crate) const LIFETIME: SemanticTokenType = SemanticTokenType::new(\"lifetime\");\n-pub(crate) const TYPE_ALIAS: SemanticTokenType = SemanticTokenType::new(\"typeAlias\");\n-pub(crate) const UNION: SemanticTokenType = SemanticTokenType::new(\"union\");\n-pub(crate) const UNRESOLVED_REFERENCE: SemanticTokenType =\n-    SemanticTokenType::new(\"unresolvedReference\");\n-pub(crate) const FORMAT_SPECIFIER: SemanticTokenType = SemanticTokenType::new(\"formatSpecifier\");\n-\n-pub(crate) const CONSTANT: SemanticTokenModifier = SemanticTokenModifier::new(\"constant\");\n-pub(crate) const CONTROL_FLOW: SemanticTokenModifier = SemanticTokenModifier::new(\"controlFlow\");\n-pub(crate) const MUTABLE: SemanticTokenModifier = SemanticTokenModifier::new(\"mutable\");\n-pub(crate) const UNSAFE: SemanticTokenModifier = SemanticTokenModifier::new(\"unsafe\");\n-\n-pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n-    SemanticTokenType::COMMENT,\n-    SemanticTokenType::KEYWORD,\n-    SemanticTokenType::STRING,\n-    SemanticTokenType::NUMBER,\n-    SemanticTokenType::REGEXP,\n-    SemanticTokenType::OPERATOR,\n-    SemanticTokenType::NAMESPACE,\n-    SemanticTokenType::TYPE,\n-    SemanticTokenType::STRUCT,\n-    SemanticTokenType::CLASS,\n-    SemanticTokenType::INTERFACE,\n-    SemanticTokenType::ENUM,\n-    SemanticTokenType::TYPE_PARAMETER,\n-    SemanticTokenType::FUNCTION,\n-    SemanticTokenType::MEMBER,\n-    SemanticTokenType::PROPERTY,\n-    SemanticTokenType::MACRO,\n-    SemanticTokenType::VARIABLE,\n-    SemanticTokenType::PARAMETER,\n-    SemanticTokenType::LABEL,\n-    ATTRIBUTE,\n-    BUILTIN_TYPE,\n-    ENUM_MEMBER,\n-    LIFETIME,\n-    TYPE_ALIAS,\n-    UNION,\n-    UNRESOLVED_REFERENCE,\n-    FORMAT_SPECIFIER,\n+macro_rules! define_semantic_token_types {\n+    ($(($ident:ident, $string:literal)),*$(,)?) => {\n+        $(pub(crate) const $ident: SemanticTokenType = SemanticTokenType::new($string);)*\n+\n+        pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n+            SemanticTokenType::COMMENT,\n+            SemanticTokenType::KEYWORD,\n+            SemanticTokenType::STRING,\n+            SemanticTokenType::NUMBER,\n+            SemanticTokenType::REGEXP,\n+            SemanticTokenType::OPERATOR,\n+            SemanticTokenType::NAMESPACE,\n+            SemanticTokenType::TYPE,\n+            SemanticTokenType::STRUCT,\n+            SemanticTokenType::CLASS,\n+            SemanticTokenType::INTERFACE,\n+            SemanticTokenType::ENUM,\n+            SemanticTokenType::TYPE_PARAMETER,\n+            SemanticTokenType::FUNCTION,\n+            SemanticTokenType::MEMBER,\n+            SemanticTokenType::PROPERTY,\n+            SemanticTokenType::MACRO,\n+            SemanticTokenType::VARIABLE,\n+            SemanticTokenType::PARAMETER,\n+            SemanticTokenType::LABEL,\n+            $($ident),*\n+        ];\n+    };\n+}\n+\n+define_semantic_token_types![\n+    (ATTRIBUTE, \"attribute\"),\n+    (BUILTIN_TYPE, \"builtinType\"),\n+    (ENUM_MEMBER, \"enumMember\"),\n+    (LIFETIME, \"lifetime\"),\n+    (TYPE_ALIAS, \"typeAlias\"),\n+    (UNION, \"union\"),\n+    (UNRESOLVED_REFERENCE, \"unresolvedReference\"),\n+    (FORMAT_SPECIFIER, \"formatSpecifier\"),\n ];\n \n-pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n-    SemanticTokenModifier::DOCUMENTATION,\n-    SemanticTokenModifier::DECLARATION,\n-    SemanticTokenModifier::DEFINITION,\n-    SemanticTokenModifier::STATIC,\n-    SemanticTokenModifier::ABSTRACT,\n-    SemanticTokenModifier::DEPRECATED,\n-    SemanticTokenModifier::READONLY,\n-    CONSTANT,\n-    MUTABLE,\n-    UNSAFE,\n-    CONTROL_FLOW,\n+macro_rules! define_semantic_token_modifiers {\n+    ($(($ident:ident, $string:literal)),*$(,)?) => {\n+        $(pub(crate) const $ident: SemanticTokenModifier = SemanticTokenModifier::new($string);)*\n+\n+        pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n+            SemanticTokenModifier::DOCUMENTATION,\n+            SemanticTokenModifier::DECLARATION,\n+            SemanticTokenModifier::DEFINITION,\n+            SemanticTokenModifier::STATIC,\n+            SemanticTokenModifier::ABSTRACT,\n+            SemanticTokenModifier::DEPRECATED,\n+            SemanticTokenModifier::READONLY,\n+            $($ident),*\n+        ];\n+    };\n+}\n+\n+define_semantic_token_modifiers![\n+    (CONSTANT, \"constant\"),\n+    (CONTROL_FLOW, \"controlFlow\"),\n+    (MUTABLE, \"mutable\"),\n+    (UNSAFE, \"unsafe\"),\n ];\n \n #[derive(Default)]"}]}