{"sha": "d1b2d6d64d0ec496c176c1c5169e211918080514", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYjJkNmQ2NGQwZWM0OTZjMTc2YzFjNTE2OWUyMTE5MTgwODA1MTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-23T19:50:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-23T19:50:57Z"}, "message": "Rollup merge of #60169 - varkor:tidy-unnecessary-ignore-newline, r=kennytm\n\nWarn when ignore-tidy-linelength is present, but no lines are too long\n\nIt's easy for a `// ignore-tidy-linelength` to be added when there is a genuine need to ignore a file's line length, but then after refactoring the need is gone, but the tidy directive is not removed. This means that in the future, further editing may accidentally add unnecessarily long lines. This change forces `// ignore-tidy-linelength` to be used exactly when necessary, to make sure such changes are intentional.", "tree": {"sha": "957842e7e0fb91f35e8ccfa934f646200749cb25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/957842e7e0fb91f35e8ccfa934f646200749cb25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1b2d6d64d0ec496c176c1c5169e211918080514", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcv2yhCRBK7hj4Ov3rIwAAdHIIAIKt5Jyeg0kSPgFl8KY0ERvS\nwTR5+EfRdD5fTlmIggIdCnGibAp32vEiIc5i3aOBTQkJbIAnWVyUOQam++sPv1yW\nNtKImeR3X8t3qUYJY9UI6QT60cUycSRIi1eAn8WhfDko4p4DHxORUXq6SYWQ39pL\nOEPv1yHYbeANUP3d+2v94OwOhP7moLbMSoKp51MlHrFpUvT1MR83oy9dy3Pf6Kv2\nBHiPNHQmzQb1wRLeZslrZ6ED50xU80E+hweKTmGDKtoKjy173SuGnBAhocgBjVOV\n+A/Op6822g4hIrHL09wTt8WCXY+gLwnZY+L/1Vp3pJ7hs2f0fipFHx4OUSOatm4=\n=iJy7\n-----END PGP SIGNATURE-----\n", "payload": "tree 957842e7e0fb91f35e8ccfa934f646200749cb25\nparent 88a1dee03c56ab06c752b89b621602cdc5116f07\nparent 5ab5806c875b9336cd97ff5e58f803b6c95fb9b2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556049057 +0200\ncommitter GitHub <noreply@github.com> 1556049057 +0200\n\nRollup merge of #60169 - varkor:tidy-unnecessary-ignore-newline, r=kennytm\n\nWarn when ignore-tidy-linelength is present, but no lines are too long\n\nIt's easy for a `// ignore-tidy-linelength` to be added when there is a genuine need to ignore a file's line length, but then after refactoring the need is gone, but the tidy directive is not removed. This means that in the future, further editing may accidentally add unnecessarily long lines. This change forces `// ignore-tidy-linelength` to be used exactly when necessary, to make sure such changes are intentional.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b2d6d64d0ec496c176c1c5169e211918080514", "html_url": "https://github.com/rust-lang/rust/commit/d1b2d6d64d0ec496c176c1c5169e211918080514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1b2d6d64d0ec496c176c1c5169e211918080514/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88a1dee03c56ab06c752b89b621602cdc5116f07", "url": "https://api.github.com/repos/rust-lang/rust/commits/88a1dee03c56ab06c752b89b621602cdc5116f07", "html_url": "https://github.com/rust-lang/rust/commit/88a1dee03c56ab06c752b89b621602cdc5116f07"}, {"sha": "5ab5806c875b9336cd97ff5e58f803b6c95fb9b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab5806c875b9336cd97ff5e58f803b6c95fb9b2", "html_url": "https://github.com/rust-lang/rust/commit/5ab5806c875b9336cd97ff5e58f803b6c95fb9b2"}], "stats": {"total": 432, "additions": 182, "deletions": 250}, "files": [{"sha": "dad9792233847fd7ad77a28fc72dc4d5aa439a6a", "filename": "src/ci/docker/dist-various-1/install-x86_64-redox.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-x86_64-redox.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-x86_64-redox.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-x86_64-redox.sh?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,4 @@\n #!/usr/bin/env bash\n-# ignore-tidy-linelength\n \n set -ex\n "}, {"sha": "3b91918288a2b5d72438a64ff81707f4d59b83f1", "filename": "src/ci/docker/dist-various-2/build-fuchsia-toolchain.sh", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-fuchsia-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-fuchsia-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-fuchsia-toolchain.sh?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,7 +1,5 @@\n #!/usr/bin/env bash\n \n-# ignore-tidy-linelength\n-\n set -ex\n source shared.sh\n "}, {"sha": "6af344fab15125428d6bc0251eb3123a7377e836", "filename": "src/test/codegen-units/item-collection/cross-crate-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -3,7 +3,6 @@\n // ignoring this test until MIR codegen has taken over completely\n // ignore-test\n \n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "e1991046d4366397e3ae8b94cc8a54d50b017d9b", "filename": "src/test/codegen-units/item-collection/cross-crate-generic-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "442438b64b66f95ee974968ecbef65d7f0e6b780", "filename": "src/test/codegen-units/item-collection/cross-crate-trait-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "3f61f124d240937ba08e622c7c89616e5b7b51fd", "filename": "src/test/codegen-units/item-collection/function-as-argument.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "839097042048279afc959d16b429699b49b74eac", "filename": "src/test/codegen-units/item-collection/generic-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "571bb4fa867cbf432d21e0a2f18787c57f4f123b", "filename": "src/test/codegen-units/item-collection/generic-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "e45644cd375626bd89095957142de42a5a199895", "filename": "src/test/codegen-units/item-collection/impl-in-non-instantiated-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "10bc52f6a8d22ceab4d3e5de62842f2eb8ea9bcd", "filename": "src/test/codegen-units/item-collection/items-within-generic-items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "26d2fb1b42194a977e1f8e4733607a131e6e7a51", "filename": "src/test/codegen-units/item-collection/non-generic-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "2358d38942a71d672b5c9ba7e3b711ea686f0c2e", "filename": "src/test/codegen-units/item-collection/overloaded-operators.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Foverloaded-operators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Foverloaded-operators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Foverloaded-operators.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "f6005eed43c7d85afba6c4ddef2516fe70206a4b", "filename": "src/test/codegen-units/item-collection/static-init.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,4 @@\n // compile-flags:-Zprint-mono-items=eager\n-// ignore-tidy-linelength\n \n #![feature(start)]\n "}, {"sha": "7e28ba58b63faa074d0d8e620cb25361bf05e9c9", "filename": "src/test/codegen-units/item-collection/statics-and-consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "f090c0c8d130ad3af4ada94cc4db3961177c86b7", "filename": "src/test/codegen-units/item-collection/trait-implementations.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "27ace8e31add3743fffeb5ae330c9615e789eba3", "filename": "src/test/codegen-units/item-collection/trait-method-as-argument.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "11f6cc62d49e3c9ee72f3b8c2befb8db8a5297f1", "filename": "src/test/codegen-units/item-collection/trait-method-default-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![deny(dead_code)]"}, {"sha": "ec6be0ecf43efb41bae6e57f0e32cd593366c55b", "filename": "src/test/codegen-units/item-collection/unreferenced-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=lazy\n \n #![deny(dead_code)]"}, {"sha": "4d095e4d6c7e99753222ec0cc3a01ddc58583196", "filename": "src/test/codegen-units/item-collection/unreferenced-inline-function.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-inline-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-inline-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-inline-function.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=lazy\n \n // N.B., we do not expect *any* monomorphization to be generated here."}, {"sha": "fd794df37608b131fb566dbe8060c86fd2bbf0b0", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n // compile-flags:-Zinline-in-all-cgus\n "}, {"sha": "4a5e294ea0f4ae7beb4ac480a0bf54b5a823bba0", "filename": "src/test/codegen-units/item-collection/unused-traits-and-generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funused-traits-and-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funused-traits-and-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funused-traits-and-generics.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags:-Zprint-mono-items=eager\n \n #![crate_type=\"lib\"]"}, {"sha": "bbded480b0c15400abe0a789cda03d19bd6215e8", "filename": "src/test/codegen-units/partitioning/statics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // We specify -Z incremental here because we want to test the partitioning for\n // incremental compilation\n // compile-flags:-Zprint-mono-items=lazy -Zincremental=tmp/partitioning-tests/statics"}, {"sha": "ae2ff9994fdf0c77151d3f62dd3ba8b645fa0fd8", "filename": "src/test/codegen/adjustments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fadjustments.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n "}, {"sha": "2272488375fdde6a587eee480c359fc401e42c83", "filename": "src/test/codegen/enum-debug-niche.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -2,7 +2,6 @@\n // before 7.0, then backported to the Rust LLVM fork.  It tests that\n // optimized enum debug info accurately reflects the enum layout.\n \n-// ignore-tidy-linelength\n // ignore-windows\n // min-system-llvm-version 8.0\n "}, {"sha": "3539aae42eae7af03048e5a9bd33ac08a591e0a4", "filename": "src/test/codegen/enum-debug-tagged.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -2,7 +2,6 @@\n // before 7.0, then backported to the Rust LLVM fork.  It tests that\n // debug info for tagged (ordinary) enums is properly emitted.\n \n-// ignore-tidy-linelength\n // ignore-windows\n // min-system-llvm-version 8.0\n "}, {"sha": "eea16805c596821b25e6b713e7ae9f32f592631c", "filename": "src/test/codegen/generic-debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fgeneric-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fgeneric-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgeneric-debug.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-windows\n \n // compile-flags: -g -C no-prepopulate-passes"}, {"sha": "7f1b0e17f871e53014cc51027edda93b3187ea84", "filename": "src/test/codegen/mainsubprogram.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,7 +1,6 @@\n // This test depends on a patch that was committed to upstream LLVM\n // before 4.0, formerly backported to the Rust LLVM fork.\n \n-// ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n "}, {"sha": "b03290af0e3b76a382be7bcf73a4dd5f960fc238", "filename": "src/test/codegen/mainsubprogramstart.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n "}, {"sha": "49f93cf62c7544edc6c2d78d9686797935c9a442", "filename": "src/test/codegen/noreturn-uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -g -C no-prepopulate-passes\n-// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n "}, {"sha": "95c100571ce6ed418808ab020d45754ad53c656d", "filename": "src/test/codegen/noreturnflag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -g -C no-prepopulate-passes\n-// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n "}, {"sha": "bbe0d81de3d421b93a94e96d6edefd7cf4070736", "filename": "src/test/codegen/panic-abort-windows.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpanic-abort-windows.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // This test is for *-windows-msvc only.\n // ignore-android\n // ignore-bitrig"}, {"sha": "cbb9942347673a03f18b41952a29ced69520614a", "filename": "src/test/codegen/refs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frefs.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -C no-prepopulate-passes\n-// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n "}, {"sha": "30d6112fd02f6a5e3b1aa66e54438eae99dbec9e", "filename": "src/test/codegen/remap_path_prefix/xcrate-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows\n-// ignore-tidy-linelength\n // compile-flags: -g -C metadata=foo -C no-prepopulate-passes\n // aux-build:xcrate-generic.rs\n "}, {"sha": "82d65b101b06d38732220dfaa4c6ecd500a9ac06", "filename": "src/test/codegen/vtabletype.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvtabletype.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,7 +1,6 @@\n // This test depends on a patch that was committed to upstream LLVM\n // after 5.0, then backported to the Rust LLVM fork.\n \n-// ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n "}, {"sha": "13577b0587ff04cb5c0579c7296c73b69f80d9e6", "filename": "src/test/debuginfo/enum-thinlto.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n // min-system-llvm-version: 8.0\n // min-gdb-version: 8.2"}, {"sha": "72d38a6f045442ddab8382864cd1e4dae228cb72", "filename": "src/test/debuginfo/generic-enum-with-different-disr-sizes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-lldb: FIXME(#27089)\n // min-lldb-version: 310\n "}, {"sha": "4f75ef4fa9b9a548dfae9d70fa7a5f4882a661bd", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // ignore-lldb\n \n // Require LLVM with DW_TAG_variant_part and a gdb that can read it."}, {"sha": "c440ce059f7215f47906460319e5cd48e5e33bc5", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n // read it.\n // min-system-llvm-version: 8.0"}, {"sha": "627b99445ea81707a477f8ecd12c00486b5ae5f4", "filename": "src/test/incremental/remapped_paths_cc/auxiliary/extern_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fauxiliary%2Fextern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fauxiliary%2Fextern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fauxiliary%2Fextern_crate.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n //[rpass1] compile-flags: -g\n //[rpass2] compile-flags: -g\n //[rpass3] compile-flags: -g --remap-path-prefix={{src-base}}=/the/src"}, {"sha": "ca0e9fa811a260a5a0f65dfb26496d9c8435498e", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -5,8 +5,6 @@\n // so subtle breakage in them can leave a quite hard-to-find trail of\n // destruction.\n \n-// ignore-tidy-linelength\n-\n fn main() {\n     let nodrop_x = false;\n     let nodrop_y;"}, {"sha": "2a6c2db03bec14abff7b5cfb629f5c8ec06f331c", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -5,7 +5,6 @@\n \n // compile-flags:-Zborrowck=mir -Zverbose\n //                              ^^^^^^^^^ force compiler to dump more region information\n-// ignore-tidy-linelength\n \n #![allow(warnings)]\n "}, {"sha": "c099b1dccb6684fce22ed078e7077b00b96adaff", "filename": "src/test/mir-opt/storage_ranges.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n fn main() {\n     let a = 0;\n     {"}, {"sha": "2f47b694ae912ee8089558451c174ccaebdd9034", "filename": "src/test/run-pass/issues/issue-16278.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16278.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -3,8 +3,8 @@\n \n // this file has some special \\r\\n endings (use xxd to see them)\n \n-fn main() {assert_eq!(b\"\", b\"\\\n+fn main() {assert_eq!(b\"\", b\"\\\r\n                                    \");\n-assert_eq!(b\"\\n\", b\"\n+assert_eq!(b\"\\n\", b\"\r\n \");\n }"}, {"sha": "c7a13bbf606cbe68d0db8bbfa9b87c05021e31e0", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-end-whitespace\n-\n #![deny(intra_doc_link_resolution_failure)]\n \n // An error in calculating spans while reporting intra-doc link resolution errors caused rustdoc to"}, {"sha": "79702a1a546b7497fbebf082a0de0717bdf1e51a", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,11 +1,11 @@\n error: `[i]` cannot be resolved, ignoring it...\n-  --> $DIR/intra-link-span-ice-55723.rs:11:10\n+  --> $DIR/intra-link-span-ice-55723.rs:9:10\n    |\n LL | /// \uff08arr[i]\uff09\n    |           ^ cannot be resolved, ignoring\n    |\n note: lint level defined here\n-  --> $DIR/intra-link-span-ice-55723.rs:3:9\n+  --> $DIR/intra-link-span-ice-55723.rs:1:9\n    |\n LL | #![deny(intra_doc_link_resolution_failure)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c2a98049a48cb7000f9e5ad0db4d7fe9a06c81cc", "filename": "src/test/rustdoc/empty-mod-private.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags: --document-private-items\n \n // @has 'empty_mod_private/index.html' '//a[@href=\"foo/index.html\"]' 'foo'"}, {"sha": "60b7b28ae4acf6b4c9fa99102f21f4a65277ff59", "filename": "src/test/rustdoc/extern-html-root-url.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc%2Fextern-html-root-url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc%2Fextern-html-root-url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-html-root-url.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // compile-flags:-Z unstable-options --extern-html-root-url core=https://example.com/core/0.1.0\n \n // @has extern_html_root_url/index.html"}, {"sha": "9f24e817fd3ebcc298d3f874afdbe54080279c2d", "filename": "src/test/rustdoc/method-list.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmethod-list.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Foo.html"}, {"sha": "8e88b2b59015d7b7bc7fc23b894da3bb3c34f30a", "filename": "src/test/rustdoc/pub-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc%2Fpub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Frustdoc%2Fpub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-method.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // compile-flags: --document-private-items\n \n #![crate_name = \"foo\"]"}, {"sha": "40786c032b180f611ef8b7549f97446845c61a62", "filename": "src/test/ui/borrowck/two-phase-activation-sharing-interference.nll_target.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:32:15\n+  --> $DIR/two-phase-activation-sharing-interference.rs:30:15\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:40:13\n+  --> $DIR/two-phase-activation-sharing-interference.rs:38:13\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -21,7 +21,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:51:13\n+  --> $DIR/two-phase-activation-sharing-interference.rs:49:13\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -32,7 +32,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:62:14\n+  --> $DIR/two-phase-activation-sharing-interference.rs:60:14\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here"}, {"sha": "4d77ac915b1e7657729fb52204f2126a94f615a9", "filename": "src/test/ui/borrowck/two-phase-activation-sharing-interference.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // revisions: nll_target\n \n // The following revisions are disabled due to missing support from two-phase beyond autorefs"}, {"sha": "1174a76adabcbcc8bc0bfb66d9b760c478003d9b", "filename": "src/test/ui/consts/const-array-oob.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(const_indexing)]\n \n const FOO: [usize; 3] = [1, 2, 3];"}, {"sha": "f25cac5cddd474c5f5852b65ed1feda2c57a3fda", "filename": "src/test/ui/consts/const-array-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-array-oob.rs:8:19\n+  --> $DIR/const-array-oob.rs:6:19\n    |\n LL | const BLUB: [u32; FOO[4]] = [5, 6];\n    |                   ^^^^^^ index out of bounds: the len is 3 but the index is 4"}, {"sha": "c4f9fdce74907f1e1a08d913f8030f5ce9fd68d7", "filename": "src/test/ui/deprecation/deprecation-in-future.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // run-pass\n \n #![deny(deprecated_in_future)]"}, {"sha": "2284cfa8d685b9f0d730067665de5d037a261a73", "filename": "src/test/ui/deprecation/deprecation-in-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n warning: use of deprecated item 'deprecated_future': text\n-  --> $DIR/deprecation-in-future.rs:11:5\n+  --> $DIR/deprecation-in-future.rs:9:5\n    |\n LL |     deprecated_future(); // ok; deprecated_in_future only applies to rustc_deprecated\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "f4a6f3fd62a05666513111af0b5c152e4852ba5a", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #[derive(Eqr)]\n //~^ ERROR cannot find derive macro `Eqr` in this scope\n struct Foo;"}, {"sha": "cf0173dfad5cd53e347ce1e4423dfc5ea28917ea", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error: cannot find derive macro `Eqr` in this scope\n-  --> $DIR/deriving-meta-unknown-trait.rs:3:10\n+  --> $DIR/deriving-meta-unknown-trait.rs:1:10\n    |\n LL | #[derive(Eqr)]\n    |          ^^^ help: try: `Eq`"}, {"sha": "f8f565f4d9c14be524db2eb7fc8217ce26ad0979", "filename": "src/test/ui/discrim/discrim-overflow-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Issue 23030: Detect overflowing discriminant\n //\n // Check that we detect the overflow even if enum is not used."}, {"sha": "198ebe9eb51f9383c264e600c1d8c5bf1f02a5c7", "filename": "src/test/ui/discrim/discrim-overflow-2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,61 +1,61 @@\n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:17:9\n+  --> $DIR/discrim-overflow-2.rs:15:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 127\n    |\n    = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:26:9\n+  --> $DIR/discrim-overflow-2.rs:24:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 255\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:35:9\n+  --> $DIR/discrim-overflow-2.rs:33:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 32767\n    |\n    = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:44:9\n+  --> $DIR/discrim-overflow-2.rs:42:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 65535\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:53:9\n+  --> $DIR/discrim-overflow-2.rs:51:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 2147483647\n    |\n    = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:62:9\n+  --> $DIR/discrim-overflow-2.rs:60:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 4294967295\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:71:9\n+  --> $DIR/discrim-overflow-2.rs:69:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 9223372036854775807\n    |\n    = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:80:9\n+  --> $DIR/discrim-overflow-2.rs:78:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 18446744073709551615"}, {"sha": "d8a9dacfa5180e0fb0b7990549153f11063bfc0f", "filename": "src/test/ui/discrim/discrim-overflow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // Issue 23030: Detect overflowing discriminant\n \n // See also run-pass/discrim-explicit-23030.rs where the suggested"}, {"sha": "a2ae4863f9f79abe6e3c8ed35b077d7ab46b4c8b", "filename": "src/test/ui/discrim/discrim-overflow.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,61 +1,61 @@\n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:15:9\n+  --> $DIR/discrim-overflow.rs:13:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 127\n    |\n    = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:26:9\n+  --> $DIR/discrim-overflow.rs:24:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 255\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:37:9\n+  --> $DIR/discrim-overflow.rs:35:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 32767\n    |\n    = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:48:9\n+  --> $DIR/discrim-overflow.rs:46:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 65535\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:60:9\n+  --> $DIR/discrim-overflow.rs:58:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 2147483647\n    |\n    = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:72:9\n+  --> $DIR/discrim-overflow.rs:70:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 4294967295\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:84:9\n+  --> $DIR/discrim-overflow.rs:82:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 9223372036854775807\n    |\n    = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:96:9\n+  --> $DIR/discrim-overflow.rs:94:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 18446744073709551615"}, {"sha": "3631415fc5f987f9f9f981a8628667aa48e995fe", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // edition:2015\n \n // tests that editions work with the tyvar warning-turned-error"}, {"sha": "508d5df2a7160cc59ff9c4fe189e06732c91f0b4", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,11 +1,11 @@\n error: type annotations needed\n-  --> $DIR/edition-raw-pointer-method-2015.rs:10:15\n+  --> $DIR/edition-raw-pointer-method-2015.rs:9:15\n    |\n LL |     let _ = y.is_null();\n    |               ^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/edition-raw-pointer-method-2015.rs:6:8\n+  --> $DIR/edition-raw-pointer-method-2015.rs:5:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^"}, {"sha": "af0b2d6bd4aa698596c40fe96858757d72da147c", "filename": "src/test/ui/editions/edition-raw-pointer-method-2018.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n // edition:2018\n \n // tests that editions work with the tyvar warning-turned-error"}, {"sha": "23452495b4bc6fbe84ca9e2e6934cde63721b5ab", "filename": "src/test/ui/editions/edition-raw-pointer-method-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0699]: the type of this value must be known to call a method on a raw pointer on it\n-  --> $DIR/edition-raw-pointer-method-2018.rs:10:15\n+  --> $DIR/edition-raw-pointer-method-2018.rs:9:15\n    |\n LL |     let _ = y.is_null();\n    |               ^^^^^^^"}, {"sha": "0c03a8761df01ce8ec850c838e85256ca3c31877", "filename": "src/test/ui/error-codes/E0375.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ferror-codes%2FE0375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ferror-codes%2FE0375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0375.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(coerce_unsized)]\n use std::ops::CoerceUnsized;\n "}, {"sha": "a68b3af5aaf76be695286389958e6c803ea837c2", "filename": "src/test/ui/error-codes/E0375.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0375]: implementing the trait `CoerceUnsized` requires multiple coercions\n-  --> $DIR/E0375.rs:12:12\n+  --> $DIR/E0375.rs:10:12\n    |\n LL | impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^ requires multiple coercions"}, {"sha": "d118b7f4ff2b230c0617e42ca63709c7e565ae3f", "filename": "src/test/ui/feature-gates/feature-gate-ffi_returns_twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![crate_type = \"lib\"]\n \n extern {"}, {"sha": "72e414eab9248aedbd831511d741abb53765afaa", "filename": "src/test/ui/feature-gates/feature-gate-ffi_returns_twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the `#[ffi_returns_twice]` attribute is an experimental feature\n-  --> $DIR/feature-gate-ffi_returns_twice.rs:5:5\n+  --> $DIR/feature-gate-ffi_returns_twice.rs:4:5\n    |\n LL |     #[ffi_returns_twice]\n    |     ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "845e18df11b54f8975fef122b0a17ceceea2d6ac", "filename": "src/test/ui/ffi_returns_twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fffi_returns_twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fffi_returns_twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_returns_twice.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-linelength\n #![feature(ffi_returns_twice)]\n #![crate_type = \"lib\"]\n "}, {"sha": "862892e27be98a1b3e82b22a33bda6956b33532c", "filename": "src/test/ui/ffi_returns_twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fffi_returns_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fffi_returns_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_returns_twice.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0724]: `#[ffi_returns_twice]` may only be used on foreign functions\n-  --> $DIR/ffi_returns_twice.rs:5:1\n+  --> $DIR/ffi_returns_twice.rs:4:1\n    |\n LL | #[ffi_returns_twice]\n    | ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1c601bc3c34eaff144bca7db1920fcd0be9866b7", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n use std::cell::Cell;\n use std::rc::Rc;\n "}, {"sha": "61450d3203cd876830e14d34858be9b4b383a610", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,29 +1,29 @@\n error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n-  --> $DIR/auto-trait-leak.rs:14:16\n+  --> $DIR/auto-trait-leak.rs:12:16\n    |\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:14:1\n+  --> $DIR/auto-trait-leak.rs:12:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:23:16\n+  --> $DIR/auto-trait-leak.rs:21:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:23:1\n+  --> $DIR/auto-trait-leak.rs:21:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n    = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n note: cycle used when checking item types in top-level module\n-  --> $DIR/auto-trait-leak.rs:3:1\n+  --> $DIR/auto-trait-leak.rs:1:1\n    |\n LL | / use std::cell::Cell;\n LL | | use std::rc::Rc;\n@@ -35,30 +35,30 @@ LL | | }\n    | |_^\n \n error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n-  --> $DIR/auto-trait-leak.rs:14:16\n+  --> $DIR/auto-trait-leak.rs:12:16\n    |\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:14:1\n+  --> $DIR/auto-trait-leak.rs:12:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:23:16\n+  --> $DIR/auto-trait-leak.rs:21:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:23:1\n+  --> $DIR/auto-trait-leak.rs:21:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n note: cycle used when checking item types in top-level module\n-  --> $DIR/auto-trait-leak.rs:3:1\n+  --> $DIR/auto-trait-leak.rs:1:1\n    |\n LL | / use std::cell::Cell;\n LL | | use std::rc::Rc;\n@@ -70,15 +70,15 @@ LL | | }\n    | |_^\n \n error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak.rs:17:5\n+  --> $DIR/auto-trait-leak.rs:15:5\n    |\n LL |     send(cycle2().clone());\n    |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n    |\n    = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n    = note: required because it appears within the type `impl std::clone::Clone`\n note: required by `send`\n-  --> $DIR/auto-trait-leak.rs:6:1\n+  --> $DIR/auto-trait-leak.rs:4:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fb4b54051237c1366a406be296be90570e8b9405", "filename": "src/test/ui/impl-trait/auto-trait-leak2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n use std::cell::Cell;\n use std::rc::Rc;\n "}, {"sha": "19899ff83f7c30310592c2d4103490ed55b06ca3", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,29 +1,29 @@\n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:15:5\n+  --> $DIR/auto-trait-leak2.rs:13:5\n    |\n LL |     send(before());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:9:5: 9:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n note: required by `send`\n-  --> $DIR/auto-trait-leak2.rs:12:1\n+  --> $DIR/auto-trait-leak2.rs:10:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:18:5\n+  --> $DIR/auto-trait-leak2.rs:16:5\n    |\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:26:5: 26:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n note: required by `send`\n-  --> $DIR/auto-trait-leak2.rs:12:1\n+  --> $DIR/auto-trait-leak2.rs:10:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c5c966a959ae950499dae99599c1877305ddeeec", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,6 +1,4 @@\n // issue #21405\n-// ignore-tidy-linelength\n-\n struct Foo;\n \n fn foo<F>(f: F) where F: FnMut(Foo) {}"}, {"sha": "afb3376638a96f9373570e19af0718c7bc82ebd4", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `is_empty` found for type `Foo` in the current scope\n-  --> $DIR/method-suggestion-no-duplication.rs:9:15\n+  --> $DIR/method-suggestion-no-duplication.rs:7:15\n    |\n LL | struct Foo;\n    | ----------- method `is_empty` not found for this"}, {"sha": "254d810d79dbc1d6a9a684949a1db873f69abea6", "filename": "src/test/ui/invalid-module-declaration/invalid-module-declaration.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-module-declaration%2Finvalid-module-declaration.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n mod auxiliary {\n     mod foo;\n }"}, {"sha": "b902893bf822438bfcf7d4302ae4cfd22527ea9e", "filename": "src/test/ui/issues/issue-21950.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-21950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-21950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n use std::ops::Add;\n \n fn main() {"}, {"sha": "7655e0811e066b4f0cd5b7b11d8e0fc06d33e783", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,13 +1,13 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-21950.rs:7:14\n+  --> $DIR/issue-21950.rs:5:14\n    |\n LL |             &Add;\n    |              ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n-  --> $DIR/issue-21950.rs:7:14\n+  --> $DIR/issue-21950.rs:5:14\n    |\n LL |             &Add;\n    |              ^^^ associated type `Output` must be specified"}, {"sha": "90912cfda0d4e78a005f860d21aee35d66c0f80b", "filename": "src/test/ui/issues/issue-22370.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-22370.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-22370.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n trait A<T=Self> {}\n \n fn f(a: &A) {}"}, {"sha": "f21551a55bc9a0732d6681fe28e141cfcf9d8f71", "filename": "src/test/ui/issues/issue-22370.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0393]: the type parameter `T` must be explicitly specified\n-  --> $DIR/issue-22370.rs:5:10\n+  --> $DIR/issue-22370.rs:3:10\n    |\n LL | fn f(a: &A) {}\n    |          ^ missing reference to `T`"}, {"sha": "4b8e3aa9eb3e10afdcc68e1279c4d7a832f62751", "filename": "src/test/ui/issues/issue-22560.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n use std::ops::{Add, Sub};\n \n type Test = Add +"}, {"sha": "5a056dff590feebdbed4e16e51bdeafbbd6f4def", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,27 +1,27 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:5:13\n+  --> $DIR/issue-22560.rs:3:13\n    |\n LL | type Test = Add +\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:8:13\n+  --> $DIR/issue-22560.rs:6:13\n    |\n LL |             Sub;\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/issue-22560.rs:8:13\n+  --> $DIR/issue-22560.rs:6:13\n    |\n LL |             Sub;\n    |             ^^^ non-auto additional trait\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n-  --> $DIR/issue-22560.rs:5:13\n+  --> $DIR/issue-22560.rs:3:13\n    |\n LL |   type Test = Add +\n    |  _____________^"}, {"sha": "319aa2a5cce9eb50ce24795ab30b3fca2a0c9c23", "filename": "src/test/ui/issues/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,6 +1,4 @@\n-// ignore-tidy-linelength\n-\n-//~^^ ERROR\n+//~ ERROR\n \n #![feature(optin_builtin_traits)]\n "}, {"sha": "1103de0d91043802d61b4674962c2b7eb135d342", "filename": "src/test/ui/issues/issue-23080-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080-2.rs:7:1\n+  --> $DIR/issue-23080-2.rs:5:1\n    |\n LL | / unsafe auto trait Trait {\n LL | |"}, {"sha": "fdfee6981447df330673cc00b57766fe273a40c2", "filename": "src/test/ui/issues/issue-23080.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(optin_builtin_traits)]\n \n unsafe auto trait Trait {"}, {"sha": "91c27217324269672ab0f74ff7ff419ec69e0b5b", "filename": "src/test/ui/issues/issue-23080.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080.rs:5:1\n+  --> $DIR/issue-23080.rs:3:1\n    |\n LL | / unsafe auto trait Trait {\n LL | |"}, {"sha": "2b457a57d3ede06f54e2839a3abb8ce02bbc392c", "filename": "src/test/ui/issues/issue-23281.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n pub struct Struct;\n \n impl Struct {"}, {"sha": "e540d4e8192428ad76842dba27b045a4539898ca", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `(dyn std::ops::Fn() + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-23281.rs:6:5\n+  --> $DIR/issue-23281.rs:4:5\n    |\n LL |     pub fn function(funs: Vec<Fn() -> ()>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "6fa9961f26cc8aca036eacafc8abdb786147f825", "filename": "src/test/ui/issues/issue-59488.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n fn foo() -> i32 {\n     42\n }"}, {"sha": "e0cb1f7b96df8c3b84a01dc20aa9b522cf118b4e", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:16:9\n+  --> $DIR/issue-59488.rs:14:9\n    |\n LL |     foo > 12;\n    |     --- ^ -- {integer}\n@@ -8,7 +8,7 @@ LL |     foo > 12;\n    |     help: you might have forgotten to call this function: `foo()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:16:11\n+  --> $DIR/issue-59488.rs:14:11\n    |\n LL |     foo > 12;\n    |           ^^ expected fn item, found integer\n@@ -17,7 +17,7 @@ LL |     foo > 12;\n               found type `i32`\n \n error[E0369]: binary operation `>` cannot be applied to type `fn(i64) -> i64 {bar}`\n-  --> $DIR/issue-59488.rs:20:9\n+  --> $DIR/issue-59488.rs:18:9\n    |\n LL |     bar > 13;\n    |     --- ^ -- {integer}\n@@ -26,7 +26,7 @@ LL |     bar > 13;\n    |     help: you might have forgotten to call this function: `bar( /* arguments */ )`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:20:11\n+  --> $DIR/issue-59488.rs:18:11\n    |\n LL |     bar > 13;\n    |           ^^ expected fn item, found integer\n@@ -35,7 +35,7 @@ LL |     bar > 13;\n               found type `i64`\n \n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:24:9\n+  --> $DIR/issue-59488.rs:22:9\n    |\n LL |     foo > foo;\n    |     --- ^ --- fn() -> i32 {foo}\n@@ -51,7 +51,7 @@ LL |     foo > foo();\n    |           ^^^^^\n \n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:27:9\n+  --> $DIR/issue-59488.rs:25:9\n    |\n LL |     foo > bar;\n    |     --- ^ --- fn(i64) -> i64 {bar}\n@@ -61,7 +61,7 @@ LL |     foo > bar;\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:27:11\n+  --> $DIR/issue-59488.rs:25:11\n    |\n LL |     foo > bar;\n    |           ^^^ expected fn item, found a different fn item\n@@ -70,7 +70,7 @@ LL |     foo > bar;\n               found type `fn(i64) -> i64 {bar}`\n \n error[E0369]: binary operation `==` cannot be applied to type `fn(usize) -> Foo {Foo::Bar}`\n-  --> $DIR/issue-59488.rs:32:5\n+  --> $DIR/issue-59488.rs:30:5\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -82,7 +82,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n-  --> $DIR/issue-59488.rs:32:5\n+  --> $DIR/issue-59488.rs:30:5\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n@@ -93,7 +93,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n-  --> $DIR/issue-59488.rs:32:5\n+  --> $DIR/issue-59488.rs:30:5\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`"}, {"sha": "d53b5144760257809a5d2f8f5449ae4ad83c96dc", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n trait Foo {}\n \n impl Foo for dyn Send {}"}, {"sha": "448cc953d40adac7d35c97d8e185f2862a3c9ee8", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + 'static)`: (E0119)\n-  --> $DIR/lint-incoherent-auto-trait-objects.rs:7:1\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:5:1\n    |\n LL | impl Foo for dyn Send {}\n    | --------------------- first implementation here\n@@ -12,7 +12,7 @@ LL | impl Foo for dyn Send + Send {}\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/lint-incoherent-auto-trait-objects.rs:13:1\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:11:1\n    |\n LL | impl Foo for dyn Send + Sync {}\n    | ---------------------------- first implementation here\n@@ -24,7 +24,7 @@ LL | impl Foo for dyn Sync + Send {}\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/lint-incoherent-auto-trait-objects.rs:17:1\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:15:1\n    |\n LL | impl Foo for dyn Sync + Send {}\n    | ---------------------------- first implementation here"}, {"sha": "516325ce1d797f33e6eb1a0069884f079c05b57b", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "e28b22035f5d4c67e0dfc1291c4d58be1952e472", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/moves-based-on-type-block-bad.rs:24:19\n+  --> $DIR/moves-based-on-type-block-bad.rs:22:19\n    |\n LL |             match hellothere.x {\n    |                   ^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n    |                            - data moved here\n    |\n note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/moves-based-on-type-block-bad.rs:27:28\n+  --> $DIR/moves-based-on-type-block-bad.rs:25:28\n    |\n LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n    |                            ^"}, {"sha": "fd3dc0abdc8fc98638144e7512aa3d803e752a47", "filename": "src/test/ui/on-unimplemented/auxiliary/no_debug.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![crate_type = \"lib\"]\n \n pub struct Bar;"}, {"sha": "758220d3c4ecd028fc9dfcf424094e6efe7b351e", "filename": "src/test/ui/on-unimplemented/slice-index.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,7 +1,4 @@\n // Test new Index error message for slices\n-// ignore-tidy-linelength\n-\n-\n \n use std::ops::Index;\n "}, {"sha": "25a65460071da4efd600e61b5fecf57ab59d7843", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the type `[i32]` cannot be indexed by `i32`\n-  --> $DIR/slice-index.rs:11:5\n+  --> $DIR/slice-index.rs:8:5\n    |\n LL |     x[1i32];\n    |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n@@ -8,7 +8,7 @@ LL |     x[1i32];\n    = note: required because of the requirements on the impl of `std::ops::Index<i32>` for `[i32]`\n \n error[E0277]: the type `[i32]` cannot be indexed by `std::ops::RangeTo<i32>`\n-  --> $DIR/slice-index.rs:12:5\n+  --> $DIR/slice-index.rs:9:5\n    |\n LL |     x[..1i32];\n    |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`"}, {"sha": "8d8ee4da987176134799b5835c1c5ea3d91f4ae1", "filename": "src/test/ui/parser/byte-string-literals.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,8 +1,5 @@\n // compile-flags: -Z continue-parse-after-error\n \n-\n-// ignore-tidy-tab\n-\n static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n \n pub fn main() {"}, {"sha": "b8554844440105035d4574bb6e74780a846f3e96", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,29 +1,29 @@\n error: unknown byte escape: f\n-  --> $DIR/byte-string-literals.rs:6:32\n+  --> $DIR/byte-string-literals.rs:3:32\n    |\n LL | static FOO: &'static [u8] = b\"\\f\";\n    |                                ^ unknown byte escape\n \n error: unknown byte escape: f\n-  --> $DIR/byte-string-literals.rs:9:8\n+  --> $DIR/byte-string-literals.rs:6:8\n    |\n LL |     b\"\\f\";\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n-  --> $DIR/byte-string-literals.rs:10:10\n+  --> $DIR/byte-string-literals.rs:7:10\n    |\n LL |     b\"\\x0Z\";\n    |          ^\n \n error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n-  --> $DIR/byte-string-literals.rs:11:7\n+  --> $DIR/byte-string-literals.rs:8:7\n    |\n LL |     b\"\u00e9\";\n    |       ^\n \n error: unterminated double quote byte string\n-  --> $DIR/byte-string-literals.rs:12:7\n+  --> $DIR/byte-string-literals.rs:9:7\n    |\n LL |       b\"a\n    |  _______^"}, {"sha": "5297d0d9842e28835b5da3be1a2fc913a8925fbb", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n /*\n  * We don't infer `T: 'static` outlives relationships by default.\n  * Instead an additional feature gate `infer_static_outlives_requirements`"}, {"sha": "b049d8a4ab3c31b1dc67e7ea4cc3ce04a39e6e84", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,13 +1,13 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/dont-infer-static.rs:10:5\n+  --> $DIR/dont-infer-static.rs:8:5\n    |\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound `U: 'static`...\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^\n    |\n note: ...so that the type `U` will meet its required lifetime bounds\n-  --> $DIR/dont-infer-static.rs:10:5\n+  --> $DIR/dont-infer-static.rs:8:5\n    |\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^"}, {"sha": "71d2d322265565c2f933de0d642f2d428fcedbe0", "filename": "src/test/ui/rfc-2093-infer-outlives/enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(rustc_attrs)]\n \n // Needs an explicit where clause stating outlives condition. (RFC 2093)"}, {"sha": "dd56c1f79c71230e5cfdb5f9729ec483c9e6398d", "filename": "src/test/ui/rfc-2093-infer-outlives/enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/enum.rs:9:1\n+  --> $DIR/enum.rs:7:1\n    |\n LL | / enum Foo<'a, T> {\n LL | |     One(Bar<'a, T>)\n@@ -9,7 +9,7 @@ LL | | }\n    = note: T : 'a\n \n error: rustc_outlives\n-  --> $DIR/enum.rs:15:1\n+  --> $DIR/enum.rs:13:1\n    |\n LL | / struct Bar<'b, U> {\n LL | |     field2: &'b U\n@@ -19,7 +19,7 @@ LL | | }\n    = note: U : 'b\n \n error: rustc_outlives\n-  --> $DIR/enum.rs:21:1\n+  --> $DIR/enum.rs:19:1\n    |\n LL | / enum Ying<'c, K> {\n LL | |     One(&'c Yang<K>)"}, {"sha": "7ec05aab29a715dcccfaf443095b1cd068f68b93", "filename": "src/test/ui/span/issue-24356.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fspan%2Fissue-24356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fspan%2Fissue-24356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #24356\n \n-// ignore-tidy-linelength\n-\n fn main() {\n     {\n         use std::ops::Deref;"}, {"sha": "4827e9ddd50fd4eeb1ceb2427307a1ec90a6c2ac", "filename": "src/test/ui/span/issue-24356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0046]: not all trait items implemented, missing: `Target`\n-  --> $DIR/issue-24356.rs:20:9\n+  --> $DIR/issue-24356.rs:18:9\n    |\n LL |         impl Deref for Thing {\n    |         ^^^^^^^^^^^^^^^^^^^^ missing `Target` in implementation"}, {"sha": "ea0a66540b93125888be4906a7f0d4c5b12fa7a4", "filename": "src/test/ui/span/issue-7575.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,6 +1,4 @@\n // Test the mechanism for warning about possible missing `self` declarations.\n-// ignore-tidy-linelength\n-\n trait CtxtFn {\n     fn f8(self, _: usize) -> usize;\n     fn f9(_: usize) -> usize;"}, {"sha": "614638752f166590a16fc5ac86ae991cfa268cb3", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,24 +1,24 @@\n error[E0599]: no method named `f9` found for type `usize` in the current scope\n-  --> $DIR/issue-7575.rs:64:18\n+  --> $DIR/issue-7575.rs:62:18\n    |\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n    |                  ^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: candidate #1 is defined in the trait `CtxtFn`\n-  --> $DIR/issue-7575.rs:6:5\n+  --> $DIR/issue-7575.rs:4:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `CtxtFn::f9(u, 342)` instead\n note: candidate #2 is defined in the trait `OtherTrait`\n-  --> $DIR/issue-7575.rs:10:5\n+  --> $DIR/issue-7575.rs:8:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `OtherTrait::f9(u, 342)` instead\n note: candidate #3 is defined in the trait `UnusedTrait`\n-  --> $DIR/issue-7575.rs:19:5\n+  --> $DIR/issue-7575.rs:17:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -30,7 +30,7 @@ LL |     fn f9(_: usize) -> usize;\n            candidate #3: `UnusedTrait`\n \n error[E0599]: no method named `fff` found for type `Myisize` in the current scope\n-  --> $DIR/issue-7575.rs:64:30\n+  --> $DIR/issue-7575.rs:62:30\n    |\n LL | struct Myisize(isize);\n    | ---------------------- method `fff` not found for this\n@@ -43,20 +43,20 @@ LL |     u.f8(42) + u.f9(342) + m.fff(42)\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `Myisize`\n-  --> $DIR/issue-7575.rs:41:5\n+  --> $DIR/issue-7575.rs:39:5\n    |\n LL |     fn fff(i: isize) -> isize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0599]: no method named `is_str` found for type `T` in the current scope\n-  --> $DIR/issue-7575.rs:72:7\n+  --> $DIR/issue-7575.rs:70:7\n    |\n LL |     t.is_str()\n    |       ^^^^^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in the trait `ManyImplTrait`\n-  --> $DIR/issue-7575.rs:47:5\n+  --> $DIR/issue-7575.rs:45:5\n    |\n LL |     fn is_str() -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^"}, {"sha": "cda1aff133f94b63d5ffb23949e2063376e7e0df", "filename": "src/test/ui/stability-attribute/stability-attribute-issue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,6 +1,4 @@\n // aux-build:stability_attribute_issue.rs\n-// ignore-tidy-linelength\n-\n #![deny(deprecated)]\n \n extern crate stability_attribute_issue;"}, {"sha": "7e6fbe1600d1ed2e74066bc17189ec9f3bbb2bbc", "filename": "src/test/ui/stability-attribute/stability-attribute-issue.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: use of unstable library feature 'unstable_test_feature'\n-  --> $DIR/stability-attribute-issue.rs:10:5\n+  --> $DIR/stability-attribute-issue.rs:8:5\n    |\n LL |     unstable();\n    |     ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     unstable();\n    = help: add #![feature(unstable_test_feature)] to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_test_feature': message\n-  --> $DIR/stability-attribute-issue.rs:12:5\n+  --> $DIR/stability-attribute-issue.rs:10:5\n    |\n LL |     unstable_msg();\n    |     ^^^^^^^^^^^^"}, {"sha": "e4487fb110cf1bb71a641261cdcfa30456dde2dd", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n #![feature(optin_builtin_traits)]\n \n struct Managed;"}, {"sha": "4d435bf4e8b249c9b23bc5e18eb7c46db4e7a55b", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -1,40 +1,40 @@\n error[E0277]: `MyNotSync` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:35:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:5\n    |\n LL |     is_sync::<MyNotSync>();\n    |     ^^^^^^^^^^^^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `MyNotSync`\n note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:31:1\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n    |\n LL | fn is_sync<T: Sync>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:38:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:5\n    |\n LL |     is_sync::<MyTypeWUnsafe>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n    |\n    = help: within `MyTypeWUnsafe`, the trait `std::marker::Sync` is not implemented for `std::cell::UnsafeCell<u8>`\n    = note: required because it appears within the type `MyTypeWUnsafe`\n note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:31:1\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n    |\n LL | fn is_sync<T: Sync>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Managed` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:41:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n    |\n LL |     is_sync::<MyTypeManaged>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n    |\n    = help: within `MyTypeManaged`, the trait `std::marker::Sync` is not implemented for `Managed`\n    = note: required because it appears within the type `MyTypeManaged`\n note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:31:1\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n    |\n LL | fn is_sync<T: Sync>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9ab88d6e9aeac8049dc68c1c39a7b4325319cf25", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 75, "deletions": 22, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b2d6d64d0ec496c176c1c5169e211918080514/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=d1b2d6d64d0ec496c176c1c5169e211918080514", "patch": "@@ -9,8 +9,8 @@\n //! * No `TODO` or `XXX` directives.\n //! * No unexplained ` ```ignore ` or ` ```rust,ignore ` doc tests.\n //!\n-//! A number of these checks can be opted-out of with various directives like\n-//! `// ignore-tidy-linelength`.\n+//! A number of these checks can be opted-out of with various directives of the form:\n+//! `// ignore-tidy-CHECK-NAME`.\n \n use std::fs::File;\n use std::io::prelude::*;\n@@ -90,6 +90,36 @@ fn long_line_is_ok(line: &str) -> bool {\n     false\n }\n \n+enum Directive {\n+    /// By default, tidy always warns against style issues.\n+    Deny,\n+\n+    /// `Ignore(false)` means that an `ignore-tidy-*` directive\n+    /// has been provided, but is unnecessary. `Ignore(true)`\n+    /// means that it is necessary (i.e. a warning would be\n+    /// produced if `ignore-tidy-*` was not present).\n+    Ignore(bool),\n+}\n+\n+fn contains_ignore_directive(contents: &String, check: &str) -> Directive {\n+    if contents.contains(&format!(\"// ignore-tidy-{}\", check)) ||\n+        contents.contains(&format!(\"# ignore-tidy-{}\", check)) {\n+        Directive::Ignore(false)\n+    } else {\n+        Directive::Deny\n+    }\n+}\n+\n+macro_rules! suppressible_tidy_err {\n+    ($err:ident, $skip:ident, $msg:expr) => {\n+        if let Directive::Deny = $skip {\n+            $err($msg);\n+        } else {\n+            $skip = Directive::Ignore(true);\n+        }\n+    };\n+}\n+\n pub fn check(path: &Path, bad: &mut bool) {\n     let mut contents = String::new();\n     super::walk(path, &mut super::filter_dirs, &mut |file| {\n@@ -107,29 +137,32 @@ pub fn check(path: &Path, bad: &mut bool) {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }\n \n-        let skip_cr = contents.contains(\"ignore-tidy-cr\");\n-        let skip_tab = contents.contains(\"ignore-tidy-tab\");\n-        let skip_length = contents.contains(\"ignore-tidy-linelength\");\n-        let skip_end_whitespace = contents.contains(\"ignore-tidy-end-whitespace\");\n-        let skip_copyright = contents.contains(\"ignore-tidy-copyright\");\n+        let mut skip_cr = contains_ignore_directive(&contents, \"cr\");\n+        let mut skip_tab = contains_ignore_directive(&contents, \"tab\");\n+        let mut skip_length = contains_ignore_directive(&contents, \"linelength\");\n+        let mut skip_end_whitespace = contains_ignore_directive(&contents, \"end-whitespace\");\n+        let mut skip_copyright = contains_ignore_directive(&contents, \"copyright\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n         for (i, line) in contents.split('\\n').enumerate() {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n-            if !skip_length && line.chars().count() > COLS\n-                && !long_line_is_ok(line) {\n-                    err(&format!(\"line longer than {} chars\", COLS));\n+            if line.chars().count() > COLS && !long_line_is_ok(line) {\n+                suppressible_tidy_err!(\n+                    err,\n+                    skip_length,\n+                    &format!(\"line longer than {} chars\", COLS)\n+                );\n             }\n-            if !skip_tab && line.contains('\\t') {\n-                err(\"tab character\");\n+            if line.contains('\\t') {\n+                suppressible_tidy_err!(err, skip_tab, \"tab character\");\n             }\n-            if !skip_end_whitespace && (line.ends_with(' ') || line.ends_with('\\t')) {\n-                err(\"trailing whitespace\");\n+            if line.ends_with(' ') || line.ends_with('\\t') {\n+                suppressible_tidy_err!(err, skip_end_whitespace, \"trailing whitespace\");\n             }\n-            if !skip_cr && line.contains('\\r') {\n-                err(\"CR character\");\n+            if line.contains('\\r') {\n+                suppressible_tidy_err!(err, skip_cr, \"CR character\");\n             }\n             if filename != \"style.rs\" {\n                 if line.contains(\"TODO\") {\n@@ -139,12 +172,16 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     err(\"XXX is deprecated; use FIXME\")\n                 }\n             }\n-            if !skip_copyright && (line.starts_with(\"// Copyright\") ||\n-                                   line.starts_with(\"# Copyright\") ||\n-                                   line.starts_with(\"Copyright\"))\n-                               && (line.contains(\"Rust Developers\") ||\n-                                   line.contains(\"Rust Project Developers\")) {\n-                err(\"copyright notices attributed to the Rust Project Developers are deprecated\");\n+            if (line.starts_with(\"// Copyright\") ||\n+                line.starts_with(\"# Copyright\") ||\n+                line.starts_with(\"Copyright\"))\n+                && (line.contains(\"Rust Developers\") ||\n+                    line.contains(\"Rust Project Developers\")) {\n+                suppressible_tidy_err!(\n+                    err,\n+                    skip_copyright,\n+                    \"copyright notices attributed to the Rust Project Developers are deprecated\"\n+                );\n             }\n             if line.ends_with(\"```ignore\") || line.ends_with(\"```rust,ignore\") {\n                 err(UNEXPLAINED_IGNORE_DOCTEST_INFO);\n@@ -169,5 +206,21 @@ pub fn check(path: &Path, bad: &mut bool) {\n             1 => {}\n             n => tidy_error!(bad, \"{}: too many trailing newlines ({})\", file.display(), n),\n         };\n+\n+        if let Directive::Ignore(false) = skip_cr {\n+            tidy_error!(bad, \"{}: ignoring CR characters unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_tab {\n+            tidy_error!(bad, \"{}: ignoring tab characters unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_length {\n+            tidy_error!(bad, \"{}: ignoring line length unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_end_whitespace {\n+            tidy_error!(bad, \"{}: ignoring trailing whitespace unnecessarily\", file.display());\n+        }\n+        if let Directive::Ignore(false) = skip_copyright {\n+            tidy_error!(bad, \"{}: ignoring copyright unnecessarily\", file.display());\n+        }\n     })\n }"}]}