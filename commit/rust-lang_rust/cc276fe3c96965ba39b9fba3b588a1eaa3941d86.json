{"sha": "cc276fe3c96965ba39b9fba3b588a1eaa3941d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMjc2ZmUzYzk2OTY1YmEzOWI5ZmJhM2I1ODhhMWVhYTM5NDFkODY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-04T01:15:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T03:39:56Z"}, "message": "rt: Be more precise with VALGRIND_MAKE_MEM_UNDEFINED", "tree": {"sha": "e0891c8a19fedf11797652052a6dbbcf3e45b2be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0891c8a19fedf11797652052a6dbbcf3e45b2be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc276fe3c96965ba39b9fba3b588a1eaa3941d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc276fe3c96965ba39b9fba3b588a1eaa3941d86", "html_url": "https://github.com/rust-lang/rust/commit/cc276fe3c96965ba39b9fba3b588a1eaa3941d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc276fe3c96965ba39b9fba3b588a1eaa3941d86/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c78da1e17016d178d55d5f899ab254f5ed44a899", "url": "https://api.github.com/repos/rust-lang/rust/commits/c78da1e17016d178d55d5f899ab254f5ed44a899", "html_url": "https://github.com/rust-lang/rust/commit/c78da1e17016d178d55d5f899ab254f5ed44a899"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "0522b3b98473c764dfb4cd8e186652dc959fee40", "filename": "src/rt/rust_stack.cpp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc276fe3c96965ba39b9fba3b588a1eaa3941d86/src%2Frt%2Frust_stack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cc276fe3c96965ba39b9fba3b588a1eaa3941d86/src%2Frt%2Frust_stack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.cpp?ref=cc276fe3c96965ba39b9fba3b588a1eaa3941d86", "patch": "@@ -17,13 +17,15 @@ register_valgrind_stack(stk_seg *stk) {\n }\n \n void\n-prepare_valgrind_stack(stk_seg *stk) {\n+reuse_valgrind_stack(stk_seg *stk, uint8_t *sp) {\n #ifndef NVALGRIND\n     // Establish that the stack is accessible.  This must be done when reusing\n     // old stack segments, since the act of popping the stack previously\n     // caused valgrind to consider the whole thing inaccessible.\n-    size_t sz = stk->end - (uintptr_t)&stk->data[0];\n-    VALGRIND_MAKE_MEM_UNDEFINED(stk->data, sz);\n+    assert(sp >= stk->data && sp <= (uint8_t*) stk->end\n+\t   && \"Stack pointer must be inside stack segment\");\n+    size_t sz = stk->end - (uintptr_t)sp;\n+    VALGRIND_MAKE_MEM_UNDEFINED(sp, sz);\n #endif\n }\n "}, {"sha": "bea86cf1ec8f555cbdf4d39f828322926d48c114", "filename": "src/rt/rust_stack.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc276fe3c96965ba39b9fba3b588a1eaa3941d86/src%2Frt%2Frust_stack.h", "raw_url": "https://github.com/rust-lang/rust/raw/cc276fe3c96965ba39b9fba3b588a1eaa3941d86/src%2Frt%2Frust_stack.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.h?ref=cc276fe3c96965ba39b9fba3b588a1eaa3941d86", "patch": "@@ -26,7 +26,7 @@ destroy_stack(memory_region *region, stk_seg *stk);\n // Must be called before each time a stack is reused to tell valgrind\n // that the stack is accessible.\n void\n-prepare_valgrind_stack(stk_seg *stk);\n+reuse_valgrind_stack(stk_seg *stk, uint8_t *sp);\n \n // Run a sanity check\n void"}, {"sha": "71f4949888f540e8f2ae2d436fb283b58db49ebc", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc276fe3c96965ba39b9fba3b588a1eaa3941d86/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cc276fe3c96965ba39b9fba3b588a1eaa3941d86/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=cc276fe3c96965ba39b9fba3b588a1eaa3941d86", "patch": "@@ -571,7 +571,6 @@ rust_task::new_stack(size_t requested_sz) {\n             LOG(this, mem, \"reusing existing stack\");\n             stk = stk->prev;\n             A(thread, stk->prev == NULL, \"Bogus stack ptr\");\n-            prepare_valgrind_stack(stk);\n             return;\n         } else {\n             LOG(this, mem, \"existing stack is not big enough\");\n@@ -637,12 +636,29 @@ rust_task::del_stack() {\n \n void *\n rust_task::next_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n+    stk_seg *maybe_next_stack = NULL;\n+    if (stk != NULL) {\n+        maybe_next_stack = stk->prev;\n+    }\n+\n     new_stack(stk_sz + args_sz);\n     A(thread, stk->end - (uintptr_t)stk->data >= stk_sz + args_sz,\n       \"Did not receive enough stack\");\n     uint8_t *new_sp = (uint8_t*)stk->end;\n     // Push the function arguments to the new stack\n     new_sp = align_down(new_sp - args_sz);\n+\n+    // When reusing a stack segment we need to tell valgrind that this area of\n+    // memory is accessible before writing to it, because the act of popping\n+    // the stack previously made all of the stack inaccessible.\n+    if (maybe_next_stack == stk) {\n+        // I don't know exactly where the region ends that valgrind needs us\n+        // to mark accessible. On x86_64 these extra bytes aren't needed, but\n+        // on i386 we get errors without.\n+        int fudge_bytes = 16;\n+        reuse_valgrind_stack(stk, new_sp - fudge_bytes);\n+    }\n+\n     memcpy(new_sp, args_addr, args_sz);\n     A(thread, rust_task_thread::get_task() == this,\n       \"Recording the stack limit for the wrong thread\");"}]}