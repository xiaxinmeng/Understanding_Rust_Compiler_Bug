{"sha": "c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OGExYWIxNTgxMTBhMzVlZTIyYTlmZTA2ZGMwOGQzMWFhNmM1NmE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-01T06:31:21Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-30T02:51:56Z"}, "message": "changes to tests", "tree": {"sha": "ca60ef450ea0c6ebc40779ac1e8d80ddb9375ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca60ef450ea0c6ebc40779ac1e8d80ddb9375ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "html_url": "https://github.com/rust-lang/rust/commit/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d500cfd74c02b6f9f84a4e7387d8126c79f3f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d500cfd74c02b6f9f84a4e7387d8126c79f3f76", "html_url": "https://github.com/rust-lang/rust/commit/1d500cfd74c02b6f9f84a4e7387d8126c79f3f76"}], "stats": {"total": 201, "additions": 60, "deletions": 141}, "files": [{"sha": "115b224241b209febbfbad005ea4b335bebafe5f", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "patch": "@@ -196,8 +196,8 @@ pub fn check_object_safety(tcx: &ty::ctxt, object_trait: &ty::TyTrait, span: Spa\n         let check_for_self_ty = |ty| {\n             if ty::type_has_self(ty) {\n                 Some(format!(\n-                    \"cannot call a method (`{}`) whose type (`{}`) contains \\\n-                     a self-type through a trait object\",\n+                    \"cannot call a method (`{}`) whose type contains \\\n+                     a self-type (`{}`) through a trait object\",\n                     method_name, ty_to_string(tcx, ty)))\n             } else {\n                 None"}, {"sha": "59da797b12633c284d8f78b255791a77bfe9b6cf", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "patch": "@@ -172,7 +172,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n mod test {\n     use prelude::*;\n     use io;\n-    use io::{MemReader, MemWriter};\n+    use io::{MemReader, MemWriter, BytesReader};\n \n     struct InitialZeroByteReader {\n         count: int,\n@@ -189,6 +189,7 @@ mod test {\n             }\n         }\n     }\n+    impl BytesReader for InitialZeroByteReader {}\n \n     struct EofReader;\n \n@@ -197,6 +198,7 @@ mod test {\n             Err(io::standard_error(io::EndOfFile))\n         }\n     }\n+    impl BytesReader for EofReader {}\n \n     struct ErroringReader;\n \n@@ -205,6 +207,7 @@ mod test {\n             Err(io::standard_error(io::InvalidInput))\n         }\n     }\n+    impl BytesReader for ErroringReader {}\n \n     struct PartialReader {\n         count: int,"}, {"sha": "5694565b4ea6a98e7a6ab5be9bb0226bbf6b09d6", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "patch": "@@ -265,7 +265,7 @@ impl<T: Iterator<u8>> Reader for IterReader<T> {\n \n #[cfg(test)]\n mod test {\n-    use io::{MemReader, MemWriter, BufReader};\n+    use io::{MemReader, MemWriter, BufReader, AsRefReader};\n     use io;\n     use boxed::Box;\n     use super::*;"}, {"sha": "44ee5002dce3d409a2d391ecd0e732dede7a7e20", "filename": "src/test/compile-fail/selftype-traittype.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d500cfd74c02b6f9f84a4e7387d8126c79f3f76/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d500cfd74c02b6f9f84a4e7387d8126c79f3f76/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs?ref=1d500cfd74c02b6f9f84a4e7387d8126c79f3f76", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-trait add {\n-    fn plus(&self, x: Self) -> Self;\n-}\n-\n-fn do_add(x: Box<add+'static>, y: Box<add+'static>) -> Box<add+'static> {\n-    x.plus(y) //~ ERROR E0038\n-}\n-\n-fn main() {}"}, {"sha": "88b907a5cb965538e59ece6e7977b932861b1016", "filename": "src/test/compile-fail/trait-objects.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Fcompile-fail%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Fcompile-fail%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-objects.rs?ref=c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo(self);\n+}\n+\n+trait Bar {\n+    fn bar(&self, x: &Self);\n+}\n+\n+trait Baz {\n+    fn baz<T>(&self, x: &T);\n+}\n+\n+impl Foo for int {\n+    fn foo(self) {}\n+}\n+\n+impl Bar for int {\n+    fn bar(&self, _x: &int) {}\n+}\n+\n+impl Baz for int {\n+    fn baz<T>(&self, _x: &T) {}\n+}\n+\n+fn main() {\n+    let _: &Foo = &42i; //~ ERROR cannot convert to a trait object\n+    let _: &Bar = &42i; //~ ERROR cannot convert to a trait object\n+    let _: &Baz = &42i; //~ ERROR cannot convert to a trait object\n+\n+    let _ = &42i as &Foo; //~ ERROR cannot convert to a trait object\n+    let _ = &42i as &Bar; //~ ERROR cannot convert to a trait object\n+    let _ = &42i as &Baz; //~ ERROR cannot convert to a trait object\n+}"}, {"sha": "a24f7710d7b61c88c740c9565cbb7e530dea96b1", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "patch": "@@ -16,5 +16,5 @@ impl bar for uint { fn dup(&self) -> uint { *self } fn blah<X>(&self) {} }\n fn main() {\n     10i.dup::<int>(); //~ ERROR does not take type parameters\n     10i.blah::<int, int>(); //~ ERROR incorrect number of type parameters\n-    (box 10i as Box<bar>).dup(); //~ ERROR contains a self-type\n+    (box 10i as Box<bar>).dup(); //~ ERROR cannot convert to a trait object\n }"}, {"sha": "3a588367a9709a4f074a151d6d623d05f74fbc41", "filename": "src/test/run-pass/by-value-self-objects.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1d500cfd74c02b6f9f84a4e7387d8126c79f3f76/src%2Ftest%2Frun-pass%2Fby-value-self-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d500cfd74c02b6f9f84a4e7387d8126c79f3f76/src%2Ftest%2Frun-pass%2Fby-value-self-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fby-value-self-objects.rs?ref=1d500cfd74c02b6f9f84a4e7387d8126c79f3f76", "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-static mut destructor_count: uint = 0;\n-\n-trait Foo {\n-    fn foo(self, x: int);\n-}\n-\n-struct S {\n-    x: int,\n-    y: int,\n-    z: int,\n-    s: String,\n-}\n-\n-impl Foo for S {\n-    fn foo(self, x: int) {\n-        assert!(self.x == 2);\n-        assert!(self.y == 3);\n-        assert!(self.z == 4);\n-        assert!(self.s.as_slice() == \"hello\");\n-        assert!(x == 5);\n-    }\n-}\n-\n-impl Drop for S {\n-    fn drop(&mut self) {\n-        println!(\"bye 1!\");\n-        unsafe {\n-            destructor_count += 1;\n-        }\n-    }\n-}\n-\n-impl Foo for int {\n-    fn foo(self, x: int) {\n-        println!(\"{}\", x * x);\n-    }\n-}\n-\n-fn f() {\n-    let s = S {\n-        x: 2,\n-        y: 3,\n-        z: 4,\n-        s: \"hello\".to_string(),\n-    };\n-    let st = box s as Box<Foo>;\n-    st.foo(5);\n-    println!(\"bye 2!\");\n-}\n-\n-fn g() {\n-    let s = 2i;\n-    let st = box s as Box<Foo>;\n-    st.foo(3);\n-    println!(\"bye 3!\");\n-}\n-\n-fn main() {\n-    f();\n-\n-    unsafe {\n-        assert!(destructor_count == 1);\n-    }\n-\n-    g();\n-}\n-"}, {"sha": "f08805fe49c2c9c7ae74e3e3db39f7de49cccb68", "filename": "src/test/run-pass/issue-11267.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Frun-pass%2Fissue-11267.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Frun-pass%2Fissue-11267.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11267.rs?ref=c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "patch": "@@ -12,11 +12,14 @@\n \n struct Empty;\n \n-impl Iterator<int> for Empty {\n+trait T<U> {\n+    fn next(&mut self) -> Option<U>;\n+}\n+impl T<int> for Empty {\n     fn next(&mut self) -> Option<int> { None }\n }\n \n-fn do_something_with(a : &mut Iterator<int>) {\n+fn do_something_with(a : &mut T<int>) {\n     println!(\"{}\", a.next())\n }\n "}, {"sha": "0c09e456930c2d83f3d2b6debdfd4f953a6c1dc9", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "patch": "@@ -60,16 +60,16 @@ fn dd() -> Result<int, int> {\n }\n \n trait A {\n-    fn aaa(self) -> int {\n+    fn aaa(&self) -> int {\n         3\n     }\n-    fn bbb(self) -> int {\n+    fn bbb(&self) -> int {\n         return 3;\n     }\n-    fn ccc(self) -> Result<int, int> {\n+    fn ccc(&self) -> Result<int, int> {\n         Ok(3)\n     }\n-    fn ddd(self) -> Result<int, int> {\n+    fn ddd(&self) -> Result<int, int> {\n         return Ok(3);\n     }\n }"}, {"sha": "8f0ec5ec7a19e89a30536a2352684dbb4c5e60cc", "filename": "src/test/run-pass/trait-cast-generic.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1d500cfd74c02b6f9f84a4e7387d8126c79f3f76/src%2Ftest%2Frun-pass%2Ftrait-cast-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d500cfd74c02b6f9f84a4e7387d8126c79f3f76/src%2Ftest%2Frun-pass%2Ftrait-cast-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast-generic.rs?ref=1d500cfd74c02b6f9f84a4e7387d8126c79f3f76", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Testing casting of a generic Struct to a Trait with a generic method.\n-// This is test for issue 10955.\n-#![allow(unused_variable)]\n-\n-trait Foo {\n-    fn f<A>(a: A) -> A {\n-        a\n-    }\n-}\n-\n-struct Bar<T> {\n-    x: T,\n-}\n-\n-impl<T> Foo for Bar<T> { }\n-\n-pub fn main() {\n-    let a = Bar { x: 1u };\n-    let b = &a as &Foo;\n-}"}, {"sha": "c4880e97c458bef96152d15ddd9df87fdd8b2363", "filename": "src/test/run-pass/trait-default-method-xc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs?ref=c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "patch": "@@ -72,9 +72,6 @@ pub fn main() {\n     assert_eq!(g(0i, 3.14f64, 1i), (3.14f64, 1i));\n     assert_eq!(g(false, 3.14f64, 1i), (3.14, 1));\n \n-    let obj = box 0i as Box<A>;\n-    assert_eq!(obj.h(), 11);\n-\n \n     // Trying out a real one\n     assert!(12i.test_neq(&10i));"}]}