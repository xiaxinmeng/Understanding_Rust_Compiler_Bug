{"sha": "12ff4d0bd633b44939b6bca4ec67b0eac2d8be42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZmY0ZDBiZDYzM2I0NDkzOWI2YmNhNGVjNjdiMGVhYzJkOGJlNDI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-17T23:59:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-20T01:31:34Z"}, "message": "review comments: use closures", "tree": {"sha": "f2f186848aeba1d494b9564e0ae9f93fc7ca6e07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f186848aeba1d494b9564e0ae9f93fc7ca6e07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ff4d0bd633b44939b6bca4ec67b0eac2d8be42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ff4d0bd633b44939b6bca4ec67b0eac2d8be42", "html_url": "https://github.com/rust-lang/rust/commit/12ff4d0bd633b44939b6bca4ec67b0eac2d8be42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ff4d0bd633b44939b6bca4ec67b0eac2d8be42/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2102723887cbd3253dace65f4574422be516259c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2102723887cbd3253dace65f4574422be516259c", "html_url": "https://github.com/rust-lang/rust/commit/2102723887cbd3253dace65f4574422be516259c"}], "stats": {"total": 83, "additions": 31, "deletions": 52}, "files": [{"sha": "528f5aaf034c773cde28da15fcaf20e79281ee61", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 31, "deletions": 52, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/12ff4d0bd633b44939b6bca4ec67b0eac2d8be42/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ff4d0bd633b44939b6bca4ec67b0eac2d8be42/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=12ff4d0bd633b44939b6bca4ec67b0eac2d8be42", "patch": "@@ -2914,71 +2914,50 @@ fn add_missing_lifetime_specifiers_label(\n     if count > 1 {\n         err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n     } else {\n-        let mut introduce_suggestion = vec![];\n-        if let Some(generics) = missing_named_lifetime_spots.iter().last() {\n-            introduce_suggestion.push(match &generics.params {\n-                [] => (generics.span, \"<'lifetime>\".to_string()),\n-                [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n-            });\n-        }\n+        let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+            err.span_suggestion(\n+                span,\n+                \"consider using the named lifetime\",\n+                sugg,\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+        let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+            err.span_label(span, \"expected named lifetime parameter\");\n+\n+            if let Some(generics) = missing_named_lifetime_spots.iter().last() {\n+                let mut introduce_suggestion = vec![];\n+                introduce_suggestion.push(match &generics.params {\n+                    [] => (generics.span, \"<'lifetime>\".to_string()),\n+                    [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n+                });\n+                introduce_suggestion.push((span, sugg));\n+                err.multipart_suggestion(\n+                    \"consider introducing a named lifetime parameter\",\n+                    introduce_suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        };\n \n         match (lifetime_names.len(), lifetime_names.iter().next(), snippet) {\n             (1, Some(name), Some(\"&\")) => {\n-                err.span_suggestion(\n-                    span,\n-                    \"consider using the named lifetime\",\n-                    format!(\"&{} \", name),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                suggest_existing(err, format!(\"&{} \", name));\n             }\n             (1, Some(name), Some(\"'_\")) => {\n-                err.span_suggestion(\n-                    span,\n-                    \"consider using the named lifetime\",\n-                    name.to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                suggest_existing(err, name.to_string());\n             }\n             (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n-                err.span_suggestion(\n-                    span,\n-                    \"consider using the named lifetime\",\n-                    format!(\"{}<{}>\", snippet, name),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n             }\n             (0, _, Some(\"&\")) => {\n-                err.span_label(span, \"expected named lifetime parameter\");\n-                if !introduce_suggestion.is_empty() {\n-                    introduce_suggestion.push((span, \"&'lifetime \".to_string()));\n-                    err.multipart_suggestion(\n-                        \"consider introducing a named lifetime parameter\",\n-                        introduce_suggestion,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n+                suggest_new(err, \"&'lifetime \".to_string());\n             }\n             (0, _, Some(\"'_\")) => {\n-                err.span_label(span, \"expected named lifetime parameter\");\n-                if !introduce_suggestion.is_empty() {\n-                    introduce_suggestion.push((span, \"'lifetime\".to_string()));\n-                    err.multipart_suggestion(\n-                        \"consider introducing a named lifetime parameter\",\n-                        introduce_suggestion,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n+                suggest_new(err, \"'lifetime\".to_string());\n             }\n             (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n-                err.span_label(span, \"expected named lifetime parameter\");\n-                if !introduce_suggestion.is_empty() {\n-                    introduce_suggestion.push((span, format!(\"{}<'lifetime>\", snippet)));\n-                    err.multipart_suggestion(\n-                        \"consider introducing a named lifetime parameter\",\n-                        introduce_suggestion,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n+                suggest_new(err, format!(\"{}<'lifetime>\", snippet));\n             }\n             _ => {\n                 err.span_label(span, \"expected lifetime parameter\");"}]}