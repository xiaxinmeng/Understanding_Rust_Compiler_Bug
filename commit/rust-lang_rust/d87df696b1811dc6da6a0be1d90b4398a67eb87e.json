{"sha": "d87df696b1811dc6da6a0be1d90b4398a67eb87e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4N2RmNjk2YjE4MTFkYzZkYTZhMGJlMWQ5MGI0Mzk4YTY3ZWI4N2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T15:18:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T16:25:41Z"}, "message": "fix overlapping mutable and shared references in BTreeMap's into_slices_mut", "tree": {"sha": "3ec2b6dffa9a24449de754408b98a69cd2c4e0ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec2b6dffa9a24449de754408b98a69cd2c4e0ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d87df696b1811dc6da6a0be1d90b4398a67eb87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d87df696b1811dc6da6a0be1d90b4398a67eb87e", "html_url": "https://github.com/rust-lang/rust/commit/d87df696b1811dc6da6a0be1d90b4398a67eb87e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d87df696b1811dc6da6a0be1d90b4398a67eb87e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54494727855cd14229f5d456591ed2a2f027c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54494727855cd14229f5d456591ed2a2f027c46", "html_url": "https://github.com/rust-lang/rust/commit/e54494727855cd14229f5d456591ed2a2f027c46"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "cb38e6470ab11b648ee6373691f3e9eb734a4fb2", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d87df696b1811dc6da6a0be1d90b4398a67eb87e/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87df696b1811dc6da6a0be1d90b4398a67eb87e/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=d87df696b1811dc6da6a0be1d90b4398a67eb87e", "patch": "@@ -645,6 +645,8 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n \n     fn into_key_slice_mut(mut self) -> &'a mut [K] {\n+        // Same as for `into_key_slice` above, we try to avoid a run-time check\n+        // (the alignment comparison will usually be performed at compile-time).\n         if mem::align_of::<K>() > mem::align_of::<LeafNode<(), ()>>() && self.is_shared_root() {\n             &mut []\n         } else {\n@@ -667,9 +669,26 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         }\n     }\n \n-    fn into_slices_mut(self) -> (&'a mut [K], &'a mut [V]) {\n-        let k = unsafe { ptr::read(&self) };\n-        (k.into_key_slice_mut(), self.into_val_slice_mut())\n+    fn into_slices_mut(mut self) -> (&'a mut [K], &'a mut [V]) {\n+        debug_assert!(!self.is_shared_root());\n+        // We cannot use the getters here, because calling the second one\n+        // invalidates the reference returned by the first.\n+        // More precisely, it is the call to `len` that is the culprit,\n+        // because that creates a shared reference to the header, which *can*\n+        // overlap with the keys.\n+        unsafe {\n+            let len = self.len();\n+            let leaf = self.as_leaf_mut();\n+            let keys = slice::from_raw_parts_mut(\n+                MaybeUninit::first_ptr_mut(&mut (*leaf).keys),\n+                len\n+            );\n+            let vals = slice::from_raw_parts_mut(\n+                MaybeUninit::first_ptr_mut(&mut (*leaf).vals),\n+                len\n+            );\n+            (keys, vals)\n+        }\n     }\n }\n "}]}