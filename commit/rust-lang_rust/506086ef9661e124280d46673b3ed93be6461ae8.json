{"sha": "506086ef9661e124280d46673b3ed93be6461ae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNjA4NmVmOTY2MWUxMjQyODBkNDY2NzNiM2VkOTNiZTY0NjFhZTg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-03T22:49:34Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-04T10:25:10Z"}, "message": "jump to the cleanup block in the unwind path for open_drop_for_box\n\nsilly bug. Hopefully the last one.", "tree": {"sha": "bf93b3e9455ea6ad0ee307b20bd7b960d8a3aba5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf93b3e9455ea6ad0ee307b20bd7b960d8a3aba5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/506086ef9661e124280d46673b3ed93be6461ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/506086ef9661e124280d46673b3ed93be6461ae8", "html_url": "https://github.com/rust-lang/rust/commit/506086ef9661e124280d46673b3ed93be6461ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/506086ef9661e124280d46673b3ed93be6461ae8/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "148f8422f3bf1c1e50a3773c71e333aa6b166f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/148f8422f3bf1c1e50a3773c71e333aa6b166f22", "html_url": "https://github.com/rust-lang/rust/commit/148f8422f3bf1c1e50a3773c71e333aa6b166f22"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "cbe923ead9f1332fb4fa42cb09e0c5ff28ed813c", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/506086ef9661e124280d46673b3ed93be6461ae8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506086ef9661e124280d46673b3ed93be6461ae8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=506086ef9661e124280d46673b3ed93be6461ae8", "patch": "@@ -694,7 +694,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                         targets: variant_drops\n                     });\n \n-                self.drop_flag_test_block(c, c.is_cleanup, switch_block)\n+                self.drop_flag_test_block(c, switch_block)\n             }\n         }\n     }\n@@ -749,7 +749,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             );\n         }\n \n-        self.drop_flag_test_block(c, c.is_cleanup, drop_block)\n+        self.drop_flag_test_block(c, drop_block)\n     }\n \n     /// Create a simple conditional drop.\n@@ -764,7 +764,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let drop_bb = self.drop_block(c);\n         self.drop_flags_for_drop(c, drop_bb);\n \n-        self.drop_flag_test_block(c, c.is_cleanup, drop_bb)\n+        self.drop_flag_test_block(c, drop_bb)\n     }\n \n     fn new_block<'a>(&mut self,\n@@ -791,22 +791,30 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n     fn drop_flag_test_block<'a>(&mut self,\n                                 c: &DropCtxt<'a, 'tcx>,\n-                                is_cleanup: bool,\n                                 on_set: BasicBlock)\n-                                -> BasicBlock\n+                                -> BasicBlock {\n+        self.drop_flag_test_block_with_succ(c, c.is_cleanup, on_set, c.succ)\n+    }\n+\n+    fn drop_flag_test_block_with_succ<'a>(&mut self,\n+                                          c: &DropCtxt<'a, 'tcx>,\n+                                          is_cleanup: bool,\n+                                          on_set: BasicBlock,\n+                                          on_unset: BasicBlock)\n+                                          -> BasicBlock\n     {\n         let (maybe_live, maybe_dead) = c.init_data.state(c.path);\n         debug!(\"drop_flag_test_block({:?},{:?},{:?}) - {:?}\",\n                c, is_cleanup, on_set, (maybe_live, maybe_dead));\n \n         match (maybe_live, maybe_dead) {\n-            (false, _) => c.succ,\n+            (false, _) => on_unset,\n             (true, false) => on_set,\n             (true, true) => {\n                 let flag = self.drop_flag(c.path).unwrap();\n                 self.new_block(c, is_cleanup, TerminatorKind::If {\n                     cond: Operand::Consume(flag),\n-                    targets: (on_set, c.succ)\n+                    targets: (on_set, on_unset)\n                 })\n             }\n         }\n@@ -841,7 +849,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         is_cleanup: bool\n     ) -> BasicBlock {\n         let block = self.unelaborated_free_block(c, ty, target, is_cleanup);\n-        self.drop_flag_test_block(c, is_cleanup, block)\n+        self.drop_flag_test_block_with_succ(c, is_cleanup, block, target)\n     }\n \n     fn unelaborated_free_block<'a>("}]}