{"sha": "0f7513a4eecbbfd4babc69513d94abb568342bf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNzUxM2E0ZWVjYmJmZDRiYWJjNjk1MTNkOTRhYmI1NjgzNDJiZjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-10T15:24:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-10T15:24:47Z"}, "message": "Merge pull request #383 from bjorn3/rustup\n\nRustup to rustc 1.28.0-nightly (2a0062974 2018-06-09)", "tree": {"sha": "1b6df0a9b0d1ab5f43d9d465247644989855c0ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b6df0a9b0d1ab5f43d9d465247644989855c0ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f7513a4eecbbfd4babc69513d94abb568342bf0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbHUK/CRBK7hj4Ov3rIwAAdHIIAJAraP/6iR2dJd+iXnkCBav/\nXAI2zBcEzq2EEPIvF/x5IjwhabAGan038dwTCRVHpE7LrboanGSxGN8smbkEHN6z\n/a3Gb/UW2j3Q3qKUh+t6U3ftLFvGr6nJfIRXLK9iVU528z4wu3KPNuC1LNCapA64\nG4wtD5P/S+rftBhYV5t1f98TbNyDLjy9UPq9QpsT5Q5Bi8Gq996EHFbZvkMQ45ei\nB/hvkixvRtotSQxWby4PCZHRhlPse/eBQf5Y0UyWwJrJEpezRQ6jqNemvm1t/C0H\npy2GQJHjSk9A//rWL6DTtrlgPCsBR+yGyzP6J2MrM2f1ak8/6jJvapd4l6G3NGc=\n=xhdM\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b6df0a9b0d1ab5f43d9d465247644989855c0ea\nparent 0755fd64290912f2d77c8e6d210217d407213a8d\nparent 25ca33d1073cfcd53c12f43df4e3a315411bef9d\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1528644287 +0200\ncommitter GitHub <noreply@github.com> 1528644287 +0200\n\nMerge pull request #383 from bjorn3/rustup\n\nRustup to rustc 1.28.0-nightly (2a0062974 2018-06-09)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7513a4eecbbfd4babc69513d94abb568342bf0", "html_url": "https://github.com/rust-lang/rust/commit/0f7513a4eecbbfd4babc69513d94abb568342bf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f7513a4eecbbfd4babc69513d94abb568342bf0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0755fd64290912f2d77c8e6d210217d407213a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0755fd64290912f2d77c8e6d210217d407213a8d", "html_url": "https://github.com/rust-lang/rust/commit/0755fd64290912f2d77c8e6d210217d407213a8d"}, {"sha": "25ca33d1073cfcd53c12f43df4e3a315411bef9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ca33d1073cfcd53c12f43df4e3a315411bef9d", "html_url": "https://github.com/rust-lang/rust/commit/25ca33d1073cfcd53c12f43df4e3a315411bef9d"}], "stats": {"total": 100, "additions": 54, "deletions": 46}, "files": [{"sha": "0fbb46246aea8a8c99d665e1836bbae4ca3d8e09", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0f7513a4eecbbfd4babc69513d94abb568342bf0/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7513a4eecbbfd4babc69513d94abb568342bf0/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=0f7513a4eecbbfd4babc69513d94abb568342bf0", "patch": "@@ -5,8 +5,7 @@ extern crate rustc_driver;\n extern crate test;\n \n use self::miri::eval_main;\n-use self::rustc::session::Session;\n-use self::rustc_driver::{driver, CompilerCalls, Compilation};\n+use self::rustc_driver::{driver, Compilation};\n use std::cell::RefCell;\n use std::rc::Rc;\n use test::Bencher;\n@@ -36,37 +35,26 @@ pub fn run(filename: &str, bencher: &mut Bencher) {\n         \"--sysroot\".to_string(),\n         find_sysroot(),\n     ];\n-    let compiler_calls = &mut MiriCompilerCalls(Rc::new(RefCell::new(bencher)));\n-    rustc_driver::run_compiler(args, compiler_calls, None, None);\n-}\n-\n-impl<'a> CompilerCalls<'a> for MiriCompilerCalls<'a> {\n-    fn build_controller(\n-        &mut self,\n-        _: &Session,\n-        _: &getopts::Matches,\n-    ) -> driver::CompileController<'a> {\n-        let mut control: driver::CompileController<'a> = driver::CompileController::basic();\n-\n-        let bencher = self.0.clone();\n+    let bencher = RefCell::new(bencher);\n \n-        control.after_analysis.stop = Compilation::Stop;\n-        control.after_analysis.callback = Box::new(move |state| {\n-            state.session.abort_if_errors();\n+    let mut control = driver::CompileController::basic();\n \n-            let tcx = state.tcx.unwrap();\n-            let (entry_node_id, _, _) = state.session.entry_fn.borrow().expect(\n-                \"no main or start function found\",\n-            );\n-            let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n+    control.after_analysis.stop = Compilation::Stop;\n+    control.after_analysis.callback = Box::new(move |state| {\n+        state.session.abort_if_errors();\n \n-            bencher.borrow_mut().iter(|| {\n-                eval_main(tcx, entry_def_id, None);\n-            });\n+        let tcx = state.tcx.unwrap();\n+        let (entry_node_id, _, _) = state.session.entry_fn.borrow().expect(\n+            \"no main or start function found\",\n+        );\n+        let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n \n-            state.session.abort_if_errors();\n+        bencher.borrow_mut().iter(|| {\n+            eval_main(tcx, entry_def_id, None);\n         });\n \n-        control\n-    }\n+        state.session.abort_if_errors();\n+    });\n+\n+    rustc_driver::run_compiler(args, Box::new(control), None, None);\n }"}, {"sha": "3e2cd032a80e8a92ced399efd024f9a8969f2e13", "filename": "rustc_tests/src/main.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f7513a4eecbbfd4babc69513d94abb568342bf0/rustc_tests%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7513a4eecbbfd4babc69513d94abb568342bf0/rustc_tests%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tests%2Fsrc%2Fmain.rs?ref=0f7513a4eecbbfd4babc69513d94abb568342bf0", "patch": "@@ -24,7 +24,7 @@ use rustc::ty::TyCtxt;\n use syntax::ast;\n \n struct MiriCompilerCalls {\n-    default: RustcDefaultCalls,\n+    default: Box<RustcDefaultCalls>,\n     /// whether we are building for the host\n     host_target: bool,\n }\n@@ -63,11 +63,12 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n     ) -> Compilation {\n         self.default.late_callback(trans, matches, sess, cstore, input, odir, ofile)\n     }\n-    fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> CompileController<'a> {\n-        let mut control = self.default.build_controller(sess, matches);\n+    fn build_controller(self: Box<Self>, sess: &Session, matches: &getopts::Matches) -> CompileController<'a> {\n+        let this = *self;\n+        let mut control = this.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n         control.after_analysis.callback = Box::new(after_analysis);\n-        if !self.host_target {\n+        if !this.host_target {\n             // only fully compile targets on the host\n             control.after_analysis.stop = Compilation::Stop;\n         }\n@@ -182,10 +183,10 @@ fn main() {\n         let buf = BufWriter::default();\n         let output = buf.clone();\n         let result = std::panic::catch_unwind(|| {\n-            rustc_driver::run_compiler(&args, &mut MiriCompilerCalls {\n-                default: RustcDefaultCalls,\n+            rustc_driver::run_compiler(&args, Box::new(MiriCompilerCalls {\n+                default: Box::new(RustcDefaultCalls),\n                 host_target,\n-            }, None, Some(Box::new(buf)));\n+            }), None, Some(Box::new(buf)));\n         });\n \n         match result {"}, {"sha": "35e83d49125e010132b66f2624c0525aadf0a6be", "filename": "src/bin/miri.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f7513a4eecbbfd4babc69513d94abb568342bf0/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7513a4eecbbfd4babc69513d94abb568342bf0/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=0f7513a4eecbbfd4babc69513d94abb568342bf0", "patch": "@@ -23,7 +23,7 @@ use syntax::ast;\n use std::path::PathBuf;\n \n struct MiriCompilerCalls {\n-    default: RustcDefaultCalls,\n+    default: Box<RustcDefaultCalls>,\n     /// Whether to begin interpretation at the start_fn lang item or not\n     /// \n     /// If false, the interpretation begins at the `main` function\n@@ -78,13 +78,14 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         self.default.late_callback(codegen_backend, matches, sess, cstore, input, odir, ofile)\n     }\n     fn build_controller(\n-        &mut self,\n+        self: Box<Self>,\n         sess: &Session,\n         matches: &getopts::Matches,\n     ) -> CompileController<'a> {\n-        let mut control = self.default.build_controller(sess, matches);\n+        let this = *self;\n+        let mut control = this.default.build_controller(sess, matches);\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n-        let start_fn = self.start_fn;\n+        let start_fn = this.start_fn;\n         control.after_analysis.callback = Box::new(move |state| after_analysis(state, start_fn));\n         if sess.target.target != sess.host {\n             // only fully compile targets on the host. linking will fail for cross-compilation.\n@@ -234,8 +235,8 @@ fn main() {\n     // Make sure we always have all the MIR (e.g. for auxilary builds in unit tests).\n     args.push(\"-Zalways-encode-mir\".to_owned());\n \n-    rustc_driver::run_compiler(&args, &mut MiriCompilerCalls {\n-        default: RustcDefaultCalls,\n+    rustc_driver::run_compiler(&args, Box::new(MiriCompilerCalls {\n+        default: Box::new(RustcDefaultCalls),\n         start_fn,\n-    }, None, None);\n+    }), None, None);\n }"}, {"sha": "d2ee39dd995a4d1a02a5ad3be131acd4b5584ed0", "filename": "src/lib.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f7513a4eecbbfd4babc69513d94abb568342bf0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7513a4eecbbfd4babc69513d94abb568342bf0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0f7513a4eecbbfd4babc69513d94abb568342bf0", "patch": "@@ -24,6 +24,7 @@ use rustc::ty::layout::{TyLayout, LayoutOf, Size};\n use rustc::ty::subst::Subst;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n+use rustc::middle::const_val;\n \n use syntax::ast::Mutability;\n use syntax::codemap::Span;\n@@ -253,9 +254,26 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                 //tcx.sess.err(\"the evaluated program leaked memory\");\n             }\n         }\n-        Err(mut e) => {\n-            ecx.tcx.sess.err(&e.to_string());\n-            ecx.report(&mut e, true, None);\n+        Err(e) => {\n+            if let Some(frame) = ecx.stack().last() {\n+                let block = &frame.mir.basic_blocks()[frame.block];\n+                let span = if frame.stmt < block.statements.len() {\n+                    block.statements[frame.stmt].source_info.span\n+                } else {\n+                    block.terminator().source_info.span\n+                };\n+\n+                let mut err = const_val::struct_error(ecx.tcx.tcx.at(span), \"constant evaluation error\");\n+                let (frames, span) = ecx.generate_stacktrace(None);\n+                err.span_label(span, e.to_string());\n+                for const_val::FrameInfo { span, location, .. } in frames {\n+                    err.span_note(span, &format!(\"inside call to `{}`\", location));\n+                }\n+                err.emit();\n+            } else {\n+                ecx.tcx.sess.err(&e.to_string());\n+            }\n+\n             for (i, frame) in ecx.stack().iter().enumerate() {\n                 trace!(\"-------------------\");\n                 trace!(\"Frame {}\", i);"}]}