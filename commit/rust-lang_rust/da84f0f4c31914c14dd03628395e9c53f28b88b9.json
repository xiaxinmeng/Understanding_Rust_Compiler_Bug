{"sha": "da84f0f4c31914c14dd03628395e9c53f28b88b9", "node_id": "C_kwDOAAsO6NoAKGRhODRmMGY0YzMxOTE0YzE0ZGQwMzYyODM5NWU5YzUzZjI4Yjg4Yjk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T03:06:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T03:48:08Z"}, "message": "Add `rustc_lexer::TokenKind::Eof`.\n\nFor alignment with `rust_ast::TokenKind::Eof`. Plus it's a bit faster,\ndue to less `Option` manipulation in `StringReader::next_token`.", "tree": {"sha": "d9eb0bd96b7d5405355d9a6ea06aca2a1b544562", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9eb0bd96b7d5405355d9a6ea06aca2a1b544562"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da84f0f4c31914c14dd03628395e9c53f28b88b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da84f0f4c31914c14dd03628395e9c53f28b88b9", "html_url": "https://github.com/rust-lang/rust/commit/da84f0f4c31914c14dd03628395e9c53f28b88b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da84f0f4c31914c14dd03628395e9c53f28b88b9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc0022a3634dd4a931ac9f68e63017c959bc8be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0022a3634dd4a931ac9f68e63017c959bc8be7", "html_url": "https://github.com/rust-lang/rust/commit/cc0022a3634dd4a931ac9f68e63017c959bc8be7"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "18ebed7c70e15c254781227d0a24afee9dcdd467", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/da84f0f4c31914c14dd03628395e9c53f28b88b9/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da84f0f4c31914c14dd03628395e9c53f28b88b9/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=da84f0f4c31914c14dd03628395e9c53f28b88b9", "patch": "@@ -139,6 +139,9 @@ pub enum TokenKind {\n \n     /// Unknown token, not expected by the lexer, e.g. \"\u2116\"\n     Unknown,\n+\n+    /// End of input.\n+    Eof,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n@@ -235,7 +238,10 @@ pub fn validate_raw_str(input: &str, prefix_len: u32) -> Result<(), RawStrError>\n /// Creates an iterator that produces tokens from the input string.\n pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {\n     let mut cursor = Cursor::new(input);\n-    std::iter::from_fn(move || cursor.advance_token())\n+    std::iter::from_fn(move || {\n+        let token = cursor.advance_token();\n+        if token.kind != TokenKind::Eof { Some(token) } else { None }\n+    })\n }\n \n /// True if `c` is considered a whitespace according to Rust language definition.\n@@ -297,8 +303,11 @@ pub fn is_ident(string: &str) -> bool {\n \n impl Cursor<'_> {\n     /// Parses a token from the input string.\n-    pub fn advance_token(&mut self) -> Option<Token> {\n-        let first_char = self.bump()?;\n+    pub fn advance_token(&mut self) -> Token {\n+        let first_char = match self.bump() {\n+            Some(c) => c,\n+            None => return Token::new(TokenKind::Eof, 0),\n+        };\n         let token_kind = match first_char {\n             // Slash, comment or block comment.\n             '/' => match self.first() {\n@@ -419,7 +428,7 @@ impl Cursor<'_> {\n             }\n             _ => Unknown,\n         };\n-        let res = Some(Token::new(token_kind, self.pos_within_token()));\n+        let res = Token::new(token_kind, self.pos_within_token());\n         self.reset_pos_within_token();\n         res\n     }"}, {"sha": "67fefd19d8b25c96adcecfd53f145ab784d55c36", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da84f0f4c31914c14dd03628395e9c53f28b88b9/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da84f0f4c31914c14dd03628395e9c53f28b88b9/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=da84f0f4c31914c14dd03628395e9c53f28b88b9", "patch": "@@ -80,14 +80,7 @@ impl<'a> StringReader<'a> {\n \n         // Skip trivial (whitespace & comments) tokens\n         loop {\n-            let token = match self.cursor.advance_token() {\n-                Some(token) => token,\n-                None => {\n-                    let span = self.mk_sp(self.pos, self.pos);\n-                    return (Token::new(token::Eof, span), preceded_by_whitespace);\n-                }\n-            };\n-\n+            let token = self.cursor.advance_token();\n             let start = self.pos;\n             self.pos = self.pos + BytePos(token.len);\n \n@@ -327,6 +320,7 @@ impl<'a> StringReader<'a> {\n                 err.emit();\n                 token?\n             }\n+            rustc_lexer::TokenKind::Eof => token::Eof,\n         })\n     }\n "}, {"sha": "ea65a6334c9e4be4e584bd5daba480632593b3c0", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da84f0f4c31914c14dd03628395e9c53f28b88b9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da84f0f4c31914c14dd03628395e9c53f28b88b9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=da84f0f4c31914c14dd03628395e9c53f28b88b9", "patch": "@@ -415,7 +415,10 @@ struct TokenIter<'a> {\n impl<'a> Iterator for TokenIter<'a> {\n     type Item = (TokenKind, &'a str);\n     fn next(&mut self) -> Option<(TokenKind, &'a str)> {\n-        let token = self.cursor.advance_token()?;\n+        let token = self.cursor.advance_token();\n+        if token.kind == TokenKind::Eof {\n+            return None;\n+        }\n         let (text, rest) = self.src.split_at(token.len as usize);\n         self.src = rest;\n         Some((token.kind, text))\n@@ -849,6 +852,7 @@ impl<'a> Classifier<'a> {\n                 Class::Ident(self.new_span(before, text))\n             }\n             TokenKind::Lifetime { .. } => Class::Lifetime,\n+            TokenKind::Eof => panic!(\"Eof in advance\"),\n         };\n         // Anything that didn't return above is the simple case where we the\n         // class just spans a single token, so we can use the `string` method."}]}