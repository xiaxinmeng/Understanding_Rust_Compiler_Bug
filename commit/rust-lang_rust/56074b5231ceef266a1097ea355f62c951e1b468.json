{"sha": "56074b5231ceef266a1097ea355f62c951e1b468", "node_id": "C_kwDOAAsO6NoAKDU2MDc0YjUyMzFjZWVmMjY2YTEwOTdlYTM1NWY2MmM5NTFlMWI0Njg", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-10-14T01:24:58Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-10-31T16:32:57Z"}, "message": "Rewrite implementation of `#[alloc_error_handler]`\n\nThe new implementation doesn't use weak lang items and instead changes\n`#[alloc_error_handler]` to an attribute macro just like\n`#[global_allocator]`.\n\nThe attribute will generate the `__rg_oom` function which is called by\nthe compiler-generated `__rust_alloc_error_handler`. If no `__rg_oom`\nfunction is defined in any crate then the compiler shim will call\n`__rdl_oom` in the alloc crate which will simply panic.\n\nThis also fixes link errors with `-C link-dead-code` with\n`default_alloc_error_handler`: `__rg_oom` was previously defined in the\nalloc crate and would attempt to reference the `oom` lang item, even if\nit didn't exist. This worked as long as `__rg_oom` was excluded from\nlinking since it was not called.\n\nThis is a prerequisite for the stabilization of\n`default_alloc_error_handler` (#102318).", "tree": {"sha": "054030cdf3133c8b3bd6466ae143c1be8c769c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/054030cdf3133c8b3bd6466ae143c1be8c769c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56074b5231ceef266a1097ea355f62c951e1b468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56074b5231ceef266a1097ea355f62c951e1b468", "html_url": "https://github.com/rust-lang/rust/commit/56074b5231ceef266a1097ea355f62c951e1b468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56074b5231ceef266a1097ea355f62c951e1b468/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afca78a0b03db144c5d8b9f8868feebfe096309", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afca78a0b03db144c5d8b9f8868feebfe096309", "html_url": "https://github.com/rust-lang/rust/commit/2afca78a0b03db144c5d8b9f8868feebfe096309"}], "stats": {"total": 607, "additions": 441, "deletions": 166}, "files": [{"sha": "eaf1b1167cf21863153e14be1900acf6220f9e68", "filename": "compiler/rustc_builtin_macros/src/alloc_error_handler.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Falloc_error_handler.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -0,0 +1,104 @@\n+use crate::util::check_builtin_macro_attribute;\n+\n+use rustc_ast::ptr::P;\n+use rustc_ast::{self as ast, FnHeader, FnSig, Generics, StmtKind};\n+use rustc_ast::{Fn, ItemKind, Stmt, TyKind, Unsafe};\n+use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_span::symbol::{kw, sym, Ident};\n+use rustc_span::Span;\n+use thin_vec::thin_vec;\n+\n+pub fn expand(\n+    ecx: &mut ExtCtxt<'_>,\n+    _span: Span,\n+    meta_item: &ast::MetaItem,\n+    item: Annotatable,\n+) -> Vec<Annotatable> {\n+    check_builtin_macro_attribute(ecx, meta_item, sym::alloc_error_handler);\n+\n+    let orig_item = item.clone();\n+    let not_function = || {\n+        ecx.sess\n+            .parse_sess\n+            .span_diagnostic\n+            .span_err(item.span(), \"alloc_error_handler must be a function\");\n+        vec![orig_item.clone()]\n+    };\n+\n+    // Allow using `#[alloc_error_handler]` on an item statement\n+    // FIXME - if we get deref patterns, use them to reduce duplication here\n+    let (item, is_stmt, sig_span) = match &item {\n+        Annotatable::Item(item) => match item.kind {\n+            ItemKind::Fn(ref fn_kind) => (item, false, ecx.with_def_site_ctxt(fn_kind.sig.span)),\n+            _ => return not_function(),\n+        },\n+        Annotatable::Stmt(stmt) => match &stmt.kind {\n+            StmtKind::Item(item_) => match item_.kind {\n+                ItemKind::Fn(ref fn_kind) => {\n+                    (item_, true, ecx.with_def_site_ctxt(fn_kind.sig.span))\n+                }\n+                _ => return not_function(),\n+            },\n+            _ => return not_function(),\n+        },\n+        _ => return not_function(),\n+    };\n+\n+    // Generate a bunch of new items using the AllocFnFactory\n+    let span = ecx.with_def_site_ctxt(item.span);\n+\n+    // Generate item statements for the allocator methods.\n+    let stmts = vec![generate_handler(ecx, item.ident, span, sig_span)];\n+\n+    // Generate anonymous constant serving as container for the allocator methods.\n+    let const_ty = ecx.ty(sig_span, TyKind::Tup(Vec::new()));\n+    let const_body = ecx.expr_block(ecx.block(span, stmts));\n+    let const_item = ecx.item_const(span, Ident::new(kw::Underscore, span), const_ty, const_body);\n+    let const_item = if is_stmt {\n+        Annotatable::Stmt(P(ecx.stmt_item(span, const_item)))\n+    } else {\n+        Annotatable::Item(const_item)\n+    };\n+\n+    // Return the original item and the new methods.\n+    vec![orig_item, const_item]\n+}\n+\n+// #[rustc_std_internal_symbol]\n+// unsafe fn __rg_oom(size: usize, align: usize) -> ! {\n+//     handler(core::alloc::Layout::from_size_align_unchecked(size, align))\n+// }\n+fn generate_handler(cx: &ExtCtxt<'_>, handler: Ident, span: Span, sig_span: Span) -> Stmt {\n+    let usize = cx.path_ident(span, Ident::new(sym::usize, span));\n+    let ty_usize = cx.ty_path(usize);\n+    let size = Ident::from_str_and_span(\"size\", span);\n+    let align = Ident::from_str_and_span(\"align\", span);\n+\n+    let layout_new = cx.std_path(&[sym::alloc, sym::Layout, sym::from_size_align_unchecked]);\n+    let layout_new = cx.expr_path(cx.path(span, layout_new));\n+    let layout =\n+        cx.expr_call(span, layout_new, vec![cx.expr_ident(span, size), cx.expr_ident(span, align)]);\n+\n+    let call = cx.expr_call_ident(sig_span, handler, vec![layout]);\n+\n+    let never = ast::FnRetTy::Ty(cx.ty(span, TyKind::Never));\n+    let params = vec![cx.param(span, size, ty_usize.clone()), cx.param(span, align, ty_usize)];\n+    let decl = cx.fn_decl(params, never);\n+    let header = FnHeader { unsafety: Unsafe::Yes(span), ..FnHeader::default() };\n+    let sig = FnSig { decl, header, span: span };\n+\n+    let body = Some(cx.block_expr(call));\n+    let kind = ItemKind::Fn(Box::new(Fn {\n+        defaultness: ast::Defaultness::Final,\n+        sig,\n+        generics: Generics::default(),\n+        body,\n+    }));\n+\n+    let special = sym::rustc_std_internal_symbol;\n+    let special = cx.meta_word(span, special);\n+    let attrs = thin_vec![cx.attribute(special)];\n+\n+    let item = cx.item(span, Ident::from_str_and_span(\"__rg_oom\", span), attrs, kind);\n+    cx.stmt_item(sig_span, item)\n+}"}, {"sha": "bde0102186a478165cdadbc0ab5f5904ec2543b9", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -25,6 +25,7 @@ use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n use rustc_span::symbol::sym;\n \n+mod alloc_error_handler;\n mod assert;\n mod cfg;\n mod cfg_accessible;\n@@ -94,6 +95,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n     }\n \n     register_attr! {\n+        alloc_error_handler: alloc_error_handler::expand,\n         bench: test::expand_bench,\n         cfg_accessible: cfg_accessible::Expander,\n         cfg_eval: cfg_eval::expand,"}, {"sha": "12bb00d346db42c42c88adfad2d5939df371c1f6", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -5,6 +5,7 @@ use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_session::config::OomStrategy;\n+use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -23,7 +24,7 @@ pub(crate) fn codegen(\n             module,\n             unwind_context,\n             kind,\n-            tcx.lang_items().oom().is_some(),\n+            tcx.alloc_error_handler_kind(()).unwrap(),\n             tcx.sess.opts.unstable_opts.oom,\n         );\n         true\n@@ -36,7 +37,7 @@ fn codegen_inner(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n-    has_alloc_error_handler: bool,\n+    alloc_error_handler_kind: AllocatorKind,\n     oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n@@ -108,12 +109,12 @@ fn codegen_inner(\n         returns: vec![],\n     };\n \n-    let callee_name = if has_alloc_error_handler { \"__rg_oom\" } else { \"__rdl_oom\" };\n+    let callee_name = alloc_error_handler_kind.fn_name(sym::oom);\n \n     let func_id =\n         module.declare_function(\"__rust_alloc_error_handler\", Linkage::Export, &sig).unwrap();\n \n-    let callee_func_id = module.declare_function(callee_name, Linkage::Import, &sig).unwrap();\n+    let callee_func_id = module.declare_function(&callee_name, Linkage::Import, &sig).unwrap();\n \n     let mut ctx = Context::new();\n     ctx.func.signature = sig;"}, {"sha": "e2c9ffe9c1c301dedb200c88e8d8dfb2cd649ef7", "filename": "compiler/rustc_codegen_gcc/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -7,7 +7,7 @@ use rustc_span::symbol::sym;\n \n use crate::GccContext;\n \n-pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) {\n+pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_name: &str, kind: AllocatorKind, alloc_error_handler_kind: AllocatorKind) {\n     let context = &mods.context;\n     let usize =\n         match tcx.sess.target.pointer_width {\n@@ -90,14 +90,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n         .collect();\n     let func = context.new_function(None, FunctionType::Exported, void, &args, name, false);\n \n-    let kind =\n-        if has_alloc_error_handler {\n-            AllocatorKind::Global\n-        }\n-        else {\n-            AllocatorKind::Default\n-        };\n-    let callee = kind.fn_name(sym::oom);\n+    let callee = alloc_error_handler_kind.fn_name(sym::oom);\n     let args: Vec<_> = types.iter().enumerate()\n         .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n         .collect();"}, {"sha": "dd0daf2c38b109c9775edf7ca5d70056b9e4c699", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -153,11 +153,11 @@ impl CodegenBackend for GccCodegenBackend {\n }\n \n impl ExtraBackendMethods for GccCodegenBackend {\n-    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) -> Self::Module {\n+    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind, alloc_error_handler_kind: AllocatorKind) -> Self::Module {\n         let mut mods = GccContext {\n             context: Context::default(),\n         };\n-        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind, has_alloc_error_handler); }\n+        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind, alloc_error_handler_kind); }\n         mods\n     }\n "}, {"sha": "fed56cdd43821e6cb2dd76a0918e7dcc5c55bf32", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -15,7 +15,7 @@ pub(crate) unsafe fn codegen(\n     module_llvm: &mut ModuleLlvm,\n     module_name: &str,\n     kind: AllocatorKind,\n-    has_alloc_error_handler: bool,\n+    alloc_error_handler_kind: AllocatorKind,\n ) {\n     let llcx = &*module_llvm.llcx;\n     let llmod = module_llvm.llmod();\n@@ -117,8 +117,7 @@ pub(crate) unsafe fn codegen(\n         attributes::apply_to_llfn(llfn, llvm::AttributePlace::Function, &[uwtable]);\n     }\n \n-    let kind = if has_alloc_error_handler { AllocatorKind::Global } else { AllocatorKind::Default };\n-    let callee = kind.fn_name(sym::oom);\n+    let callee = alloc_error_handler_kind.fn_name(sym::oom);\n     let callee = llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n     // -> ! DIFlagNoReturn\n     attributes::apply_to_llfn(callee, llvm::AttributePlace::Function, &[no_return]);"}, {"sha": "d51aced85df43141c779d0902244f651bdcb7358", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -108,11 +108,11 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         tcx: TyCtxt<'tcx>,\n         module_name: &str,\n         kind: AllocatorKind,\n-        has_alloc_error_handler: bool,\n+        alloc_error_handler_kind: AllocatorKind,\n     ) -> ModuleLlvm {\n         let mut module_llvm = ModuleLlvm::new_metadata(tcx, module_name);\n         unsafe {\n-            allocator::codegen(tcx, &mut module_llvm, module_name, kind, has_alloc_error_handler);\n+            allocator::codegen(tcx, &mut module_llvm, module_name, kind, alloc_error_handler_kind);\n         }\n         module_llvm\n     }"}, {"sha": "752f6b1ef40c92fcdd64994d03c715f9ad6ee90b", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -193,8 +193,11 @@ fn exported_symbols_provider_local<'tcx>(\n     }\n \n     if tcx.allocator_kind(()).is_some() {\n-        for method in ALLOCATOR_METHODS {\n-            let symbol_name = format!(\"__rust_{}\", method.name);\n+        for symbol_name in ALLOCATOR_METHODS\n+            .iter()\n+            .map(|method| format!(\"__rust_{}\", method.name))\n+            .chain([\"__rust_alloc_error_handler\".to_string(), OomStrategy::SYMBOL.to_string()])\n+        {\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));\n \n             symbols.push(("}, {"sha": "c1411690f8289883f8cc391bffd19018b797fad0", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -638,7 +638,14 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n         let module_llvm = tcx.sess.time(\"write_allocator_module\", || {\n-            backend.codegen_allocator(tcx, &llmod_id, kind, tcx.lang_items().oom().is_some())\n+            backend.codegen_allocator(\n+                tcx,\n+                &llmod_id,\n+                kind,\n+                // If allocator_kind is Some then alloc_error_handler_kind must\n+                // also be Some.\n+                tcx.alloc_error_handler_kind(()).unwrap(),\n+            )\n         });\n \n         Some(ModuleCodegen { name: llmod_id, module_llvm, kind: ModuleKind::Allocator })"}, {"sha": "5c35070ea66f4f1ffca07091755333058e6f146e", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -119,7 +119,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         tcx: TyCtxt<'tcx>,\n         module_name: &str,\n         kind: AllocatorKind,\n-        has_alloc_error_handler: bool,\n+        alloc_error_handler_kind: AllocatorKind,\n     ) -> Self::Module;\n     /// This generates the codegen unit and returns it along with\n     /// a `u64` giving an estimate of the unit's processing cost."}, {"sha": "c292ae9b32abba5af8a913994643c571303332c2", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -150,12 +150,28 @@ metadata_no_multiple_global_alloc =\n metadata_prev_global_alloc =\n     previous global allocator defined here\n \n+metadata_no_multiple_alloc_error_handler =\n+    cannot define multiple allocation error handlers\n+    .label = cannot define a new allocation error handler\n+\n+metadata_prev_alloc_error_handler =\n+    previous allocation error handler defined here\n+\n metadata_conflicting_global_alloc =\n     the `#[global_allocator]` in {$other_crate_name} conflicts with global allocator in: {$crate_name}\n \n+metadata_conflicting_alloc_error_handler =\n+    the `#[alloc_error_handler]` in {$other_crate_name} conflicts with allocation error handler in: {$crate_name}\n+\n metadata_global_alloc_required =\n     no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait\n \n+metadata_alloc_func_required =\n+    `#[alloc_error_handler]` function required, but not found\n+\n+metadata_missing_alloc_error_handler =\n+    use `#![feature(default_alloc_error_handler)]` for a default error handler\n+\n metadata_no_transitive_needs_dep =\n     the crate `{$crate_name}` cannot depend on a crate that needs {$needs_crate_name}, but it depends on `{$deps_crate_name}`\n "}, {"sha": "bc5bfe2a24448ba575c4adcc4697a1b9b3549847", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -367,12 +367,6 @@ passes_unknown_external_lang_item =\n passes_missing_panic_handler =\n     `#[panic_handler]` function required, but not found\n \n-passes_alloc_func_required =\n-    `#[alloc_error_handler]` function required, but not found\n-\n-passes_missing_alloc_error_handler =\n-    use `#![feature(default_alloc_error_handler)]` for a default error handler\n-\n passes_missing_lang_item =\n     language item required, but not found: `{$name}`\n     .note = this can occur when a binary crate with `#![no_std]` is compiled for a target where `{$name}` is defined in the standard library"}, {"sha": "14c8e3c458c497a241673ea10558f5298363f059", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -554,10 +554,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(rustc_reallocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     rustc_attr!(rustc_deallocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     rustc_attr!(rustc_allocator_zeroed, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n-    gated!(\n-        alloc_error_handler, Normal, template!(Word), WarnFollowing,\n-        experimental!(alloc_error_handler)\n-    ),\n     gated!(\n         default_lib_allocator, Normal, template!(Word), WarnFollowing, allocator_internals,\n         experimental!(default_lib_allocator),"}, {"sha": "a55224d10972abf01a57e95933d174bab7481941", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -126,14 +126,12 @@ impl<CTX> HashStable<CTX> for LangItem {\n }\n \n /// Extracts the first `lang = \"$name\"` out of a list of attributes.\n-/// The attributes `#[panic_handler]` and `#[alloc_error_handler]`\n-/// are also extracted out when found.\n+/// The `#[panic_handler]` attribute is also extracted out when found.\n pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n     attrs.iter().find_map(|attr| {\n         Some(match attr {\n             _ if attr.has_name(sym::lang) => (attr.value_str()?, attr.span),\n             _ if attr.has_name(sym::panic_handler) => (sym::panic_impl, attr.span),\n-            _ if attr.has_name(sym::alloc_error_handler) => (sym::oom, attr.span),\n             _ => return None,\n         })\n     })\n@@ -240,7 +238,6 @@ language_item_table! {\n     ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn,             GenericRequirement::None;\n     BoxFree,                 sym::box_free,            box_free_fn,                Target::Fn,             GenericRequirement::Minimum(1);\n     DropInPlace,             sym::drop_in_place,       drop_in_place_fn,           Target::Fn,             GenericRequirement::Minimum(1);\n-    Oom,                     sym::oom,                 oom,                        Target::Fn,             GenericRequirement::None;\n     AllocLayout,             sym::alloc_layout,        alloc_layout,               Target::Struct,         GenericRequirement::None;\n \n     Start,                   sym::start,               start_fn,                   Target::Fn,             GenericRequirement::Exact(1);"}, {"sha": "0cc50c6dd85054642fdb576e5137c7bded4bb934", "filename": "compiler/rustc_hir/src/weak_lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -27,5 +27,4 @@ weak_lang_items! {\n     PanicImpl,          rust_begin_unwind;\n     EhPersonality,      rust_eh_personality;\n     EhCatchTypeinfo,    rust_eh_catch_typeinfo;\n-    Oom,                rust_oom;\n }"}, {"sha": "b706d786b52518ef5db07778c06ae3b6e2e3296e", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -211,13 +211,6 @@ pub(super) fn check_fn<'a, 'tcx>(\n         check_panic_info_fn(tcx, panic_impl_did.expect_local(), fn_sig, decl, declared_ret_ty);\n     }\n \n-    // Check that a function marked as `#[alloc_error_handler]` has signature `fn(Layout) -> !`\n-    if let Some(alloc_error_handler_did) = tcx.lang_items().oom()\n-        && alloc_error_handler_did == hir.local_def_id(fn_id).to_def_id()\n-    {\n-        check_alloc_error_fn(tcx, alloc_error_handler_did.expect_local(), fn_sig, decl, declared_ret_ty);\n-    }\n-\n     (fcx, gen_ty)\n }\n \n@@ -273,52 +266,3 @@ fn check_panic_info_fn(\n         tcx.sess.span_err(span, \"should have no const parameters\");\n     }\n }\n-\n-fn check_alloc_error_fn(\n-    tcx: TyCtxt<'_>,\n-    fn_id: LocalDefId,\n-    fn_sig: ty::FnSig<'_>,\n-    decl: &hir::FnDecl<'_>,\n-    declared_ret_ty: Ty<'_>,\n-) {\n-    let Some(alloc_layout_did) = tcx.lang_items().alloc_layout() else {\n-        tcx.sess.err(\"language item required, but not found: `alloc_layout`\");\n-        return;\n-    };\n-\n-    if *declared_ret_ty.kind() != ty::Never {\n-        tcx.sess.span_err(decl.output.span(), \"return type should be `!`\");\n-    }\n-\n-    let inputs = fn_sig.inputs();\n-    if inputs.len() != 1 {\n-        tcx.sess.span_err(tcx.def_span(fn_id), \"function should have one argument\");\n-        return;\n-    }\n-\n-    let arg_is_alloc_layout = match inputs[0].kind() {\n-        ty::Adt(ref adt, _) => adt.did() == alloc_layout_did,\n-        _ => false,\n-    };\n-\n-    if !arg_is_alloc_layout {\n-        tcx.sess.span_err(decl.inputs[0].span, \"argument should be `Layout`\");\n-    }\n-\n-    let DefKind::Fn = tcx.def_kind(fn_id) else {\n-        let span = tcx.def_span(fn_id);\n-        tcx.sess.span_err(span, \"`#[alloc_error_handler]` should be a function\");\n-        return;\n-    };\n-\n-    let generic_counts = tcx.generics_of(fn_id).own_counts();\n-    if generic_counts.types != 0 {\n-        let span = tcx.def_span(fn_id);\n-        tcx.sess.span_err(span, \"`#[alloc_error_handler]` function should have no type parameters\");\n-    }\n-    if generic_counts.consts != 0 {\n-        let span = tcx.def_span(fn_id);\n-        tcx.sess\n-            .span_err(span, \"`#[alloc_error_handler]` function should have no const parameters\");\n-    }\n-}"}, {"sha": "d4c457975a8422e76f31321a85c3f3713699d1b7", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 85, "deletions": 12, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -1,8 +1,10 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n use crate::errors::{\n-    ConflictingGlobalAlloc, CrateNotPanicRuntime, GlobalAllocRequired, NoMultipleGlobalAlloc,\n-    NoPanicStrategy, NoTransitiveNeedsDep, NotProfilerRuntime, ProfilerBuiltinsNeedsCore,\n+    AllocFuncRequired, ConflictingAllocErrorHandler, ConflictingGlobalAlloc, CrateNotPanicRuntime,\n+    GlobalAllocRequired, MissingAllocErrorHandler, NoMultipleAllocErrorHandler,\n+    NoMultipleGlobalAlloc, NoPanicStrategy, NoTransitiveNeedsDep, NotProfilerRuntime,\n+    ProfilerBuiltinsNeedsCore,\n };\n use crate::locator::{CrateError, CrateLocator, CratePaths};\n use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob};\n@@ -41,8 +43,13 @@ pub struct CStore {\n     /// This crate needs an allocator and either provides it itself, or finds it in a dependency.\n     /// If the above is true, then this field denotes the kind of the found allocator.\n     allocator_kind: Option<AllocatorKind>,\n+    /// This crate needs an allocation error handler and either provides it itself, or finds it in a dependency.\n+    /// If the above is true, then this field denotes the kind of the found allocator.\n+    alloc_error_handler_kind: Option<AllocatorKind>,\n     /// This crate has a `#[global_allocator]` item.\n     has_global_allocator: bool,\n+    /// This crate has a `#[alloc_error_handler]` item.\n+    has_alloc_error_handler: bool,\n \n     /// This map is used to verify we get no hash conflicts between\n     /// `StableCrateId` values.\n@@ -197,10 +204,18 @@ impl CStore {\n         self.allocator_kind\n     }\n \n+    pub(crate) fn alloc_error_handler_kind(&self) -> Option<AllocatorKind> {\n+        self.alloc_error_handler_kind\n+    }\n+\n     pub(crate) fn has_global_allocator(&self) -> bool {\n         self.has_global_allocator\n     }\n \n+    pub(crate) fn has_alloc_error_handler(&self) -> bool {\n+        self.has_alloc_error_handler\n+    }\n+\n     pub fn report_unused_deps(&self, tcx: TyCtxt<'_>) {\n         let json_unused_externs = tcx.sess.opts.json_unused_externs;\n \n@@ -247,7 +262,9 @@ impl<'a> CrateLoader<'a> {\n                 metas: IndexVec::from_elem_n(None, 1),\n                 injected_panic_runtime: None,\n                 allocator_kind: None,\n+                alloc_error_handler_kind: None,\n                 has_global_allocator: false,\n+                has_alloc_error_handler: false,\n                 stable_crate_ids,\n                 unused_externs: Vec::new(),\n             },\n@@ -792,6 +809,13 @@ impl<'a> CrateLoader<'a> {\n             }\n             spans => !spans.is_empty(),\n         };\n+        self.cstore.has_alloc_error_handler = match &*alloc_error_handler_spans(&self.sess, krate) {\n+            [span1, span2, ..] => {\n+                self.sess.emit_err(NoMultipleAllocErrorHandler { span2: *span2, span1: *span1 });\n+                true\n+            }\n+            spans => !spans.is_empty(),\n+        };\n \n         // Check to see if we actually need an allocator. This desire comes\n         // about through the `#![needs_allocator]` attribute and is typically\n@@ -832,22 +856,48 @@ impl<'a> CrateLoader<'a> {\n                 }\n             }\n         }\n+        let mut alloc_error_handler =\n+            self.cstore.has_alloc_error_handler.then(|| Symbol::intern(\"this crate\"));\n+        for (_, data) in self.cstore.iter_crate_data() {\n+            if data.has_alloc_error_handler() {\n+                match alloc_error_handler {\n+                    Some(other_crate) => {\n+                        self.sess.emit_err(ConflictingAllocErrorHandler {\n+                            crate_name: data.name(),\n+                            other_crate_name: other_crate,\n+                        });\n+                    }\n+                    None => alloc_error_handler = Some(data.name()),\n+                }\n+            }\n+        }\n \n         if global_allocator.is_some() {\n             self.cstore.allocator_kind = Some(AllocatorKind::Global);\n-            return;\n+        } else {\n+            // Ok we haven't found a global allocator but we still need an\n+            // allocator. At this point our allocator request is typically fulfilled\n+            // by the standard library, denoted by the `#![default_lib_allocator]`\n+            // attribute.\n+            if !self.sess.contains_name(&krate.attrs, sym::default_lib_allocator)\n+                && !self.cstore.iter_crate_data().any(|(_, data)| data.has_default_lib_allocator())\n+            {\n+                self.sess.emit_err(GlobalAllocRequired);\n+            }\n+            self.cstore.allocator_kind = Some(AllocatorKind::Default);\n         }\n \n-        // Ok we haven't found a global allocator but we still need an\n-        // allocator. At this point our allocator request is typically fulfilled\n-        // by the standard library, denoted by the `#![default_lib_allocator]`\n-        // attribute.\n-        if !self.sess.contains_name(&krate.attrs, sym::default_lib_allocator)\n-            && !self.cstore.iter_crate_data().any(|(_, data)| data.has_default_lib_allocator())\n-        {\n-            self.sess.emit_err(GlobalAllocRequired);\n+        if alloc_error_handler.is_some() {\n+            self.cstore.alloc_error_handler_kind = Some(AllocatorKind::Global);\n+        } else {\n+            // The alloc crate provides a default allocation error handler if\n+            // one isn't specified.\n+            if !self.sess.features_untracked().default_alloc_error_handler {\n+                self.sess.emit_err(AllocFuncRequired);\n+                self.sess.emit_note(MissingAllocErrorHandler);\n+            }\n+            self.cstore.alloc_error_handler_kind = Some(AllocatorKind::Default);\n         }\n-        self.cstore.allocator_kind = Some(AllocatorKind::Default);\n     }\n \n     fn inject_dependency_if(\n@@ -1023,3 +1073,26 @@ fn global_allocator_spans(sess: &Session, krate: &ast::Crate) -> Vec<Span> {\n     visit::walk_crate(&mut f, krate);\n     f.spans\n }\n+\n+fn alloc_error_handler_spans(sess: &Session, krate: &ast::Crate) -> Vec<Span> {\n+    struct Finder<'a> {\n+        sess: &'a Session,\n+        name: Symbol,\n+        spans: Vec<Span>,\n+    }\n+    impl<'ast, 'a> visit::Visitor<'ast> for Finder<'a> {\n+        fn visit_item(&mut self, item: &'ast ast::Item) {\n+            if item.ident.name == self.name\n+                && self.sess.contains_name(&item.attrs, sym::rustc_std_internal_symbol)\n+            {\n+                self.spans.push(item.span);\n+            }\n+            visit::walk_item(self, item)\n+        }\n+    }\n+\n+    let name = Symbol::intern(&AllocatorKind::Global.fn_name(sym::oom));\n+    let mut f = Finder { sess, name, spans: Vec::new() };\n+    visit::walk_crate(&mut f, krate);\n+    f.spans\n+}"}, {"sha": "289fa53aa5ef6f641412dfd0faedd5f427dcaae2", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -343,17 +343,42 @@ pub struct NoMultipleGlobalAlloc {\n     pub span1: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(metadata_no_multiple_alloc_error_handler)]\n+pub struct NoMultipleAllocErrorHandler {\n+    #[primary_span]\n+    #[label]\n+    pub span2: Span,\n+    #[label(metadata_prev_alloc_error_handler)]\n+    pub span1: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(metadata_conflicting_global_alloc)]\n pub struct ConflictingGlobalAlloc {\n     pub crate_name: Symbol,\n     pub other_crate_name: Symbol,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(metadata_conflicting_alloc_error_handler)]\n+pub struct ConflictingAllocErrorHandler {\n+    pub crate_name: Symbol,\n+    pub other_crate_name: Symbol,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(metadata_global_alloc_required)]\n pub struct GlobalAllocRequired;\n \n+#[derive(Diagnostic)]\n+#[diag(metadata_alloc_func_required)]\n+pub struct AllocFuncRequired;\n+\n+#[derive(Diagnostic)]\n+#[diag(metadata_missing_alloc_error_handler)]\n+pub struct MissingAllocErrorHandler;\n+\n #[derive(Diagnostic)]\n #[diag(metadata_no_transitive_needs_dep)]\n pub struct NoTransitiveNeedsDep<'a> {"}, {"sha": "8e80d794a13680df61c90fe9e4399c2a362dcb8f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -1764,6 +1764,10 @@ impl CrateMetadata {\n         self.root.has_global_allocator\n     }\n \n+    pub(crate) fn has_alloc_error_handler(&self) -> bool {\n+        self.root.has_alloc_error_handler\n+    }\n+\n     pub(crate) fn has_default_lib_allocator(&self) -> bool {\n         self.root.has_default_lib_allocator\n     }"}, {"sha": "f475b0b39811c5f281ed3af160f7c959112890af", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -255,6 +255,7 @@ provide! { tcx, def_id, other, cdata,\n     is_panic_runtime => { cdata.root.panic_runtime }\n     is_compiler_builtins => { cdata.root.compiler_builtins }\n     has_global_allocator => { cdata.root.has_global_allocator }\n+    has_alloc_error_handler => { cdata.root.has_alloc_error_handler }\n     has_panic_handler => { cdata.root.has_panic_handler }\n     is_profiler_runtime => { cdata.root.profiler_runtime }\n     required_panic_strategy => { cdata.root.required_panic_strategy }\n@@ -339,6 +340,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         allocator_kind: |tcx, ()| CStore::from_tcx(tcx).allocator_kind(),\n+        alloc_error_handler_kind: |tcx, ()| CStore::from_tcx(tcx).alloc_error_handler_kind(),\n         is_private_dep: |_tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n             false\n@@ -464,6 +466,10 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n             assert_eq!(cnum, LOCAL_CRATE);\n             CStore::from_tcx(tcx).has_global_allocator()\n         },\n+        has_alloc_error_handler: |tcx, cnum| {\n+            assert_eq!(cnum, LOCAL_CRATE);\n+            CStore::from_tcx(tcx).has_alloc_error_handler()\n+        },\n         postorder_cnums: |tcx, ()| {\n             tcx.arena\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))"}, {"sha": "c907ee6462870dd5beb2bb9b69eb1a32fdf3c668", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -670,6 +670,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 panic_in_drop_strategy: tcx.sess.opts.unstable_opts.panic_in_drop,\n                 edition: tcx.sess.edition(),\n                 has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),\n+                has_alloc_error_handler: tcx.has_alloc_error_handler(LOCAL_CRATE),\n                 has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n                 has_default_lib_allocator: tcx\n                     .sess"}, {"sha": "aa6d378a43aca95870ed71c2c7f4d3b816a5b88c", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -223,6 +223,7 @@ pub(crate) struct CrateRoot {\n     panic_in_drop_strategy: PanicStrategy,\n     edition: Edition,\n     has_global_allocator: bool,\n+    has_alloc_error_handler: bool,\n     has_panic_handler: bool,\n     has_default_lib_allocator: bool,\n "}, {"sha": "33acaed435b89eeeeb25429b60b9d66a6de92dc4", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -1391,6 +1391,13 @@ rustc_queries! {\n         desc { \"checking if the crate has_global_allocator\" }\n         separate_provide_extern\n     }\n+    query has_alloc_error_handler(_: CrateNum) -> bool {\n+        // This query depends on untracked global state in CStore\n+        eval_always\n+        fatal_cycle\n+        desc { \"checking if the crate has_alloc_error_handler\" }\n+        separate_provide_extern\n+    }\n     query has_panic_handler(_: CrateNum) -> bool {\n         fatal_cycle\n         desc { \"checking if the crate has_panic_handler\" }\n@@ -1761,6 +1768,10 @@ rustc_queries! {\n         eval_always\n         desc { \"getting the allocator kind for the current crate\" }\n     }\n+    query alloc_error_handler_kind(_: ()) -> Option<AllocatorKind> {\n+        eval_always\n+        desc { \"alloc error handler kind for the current crate\" }\n+    }\n \n     query upvars_mentioned(def_id: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n         desc { |tcx| \"collecting upvars mentioned in `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "b779edbc30f754e091c0d690c134a30a5ac62877", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -470,11 +470,6 @@ fn has_allow_dead_code_or_lang_attr_helper(\n         return true;\n     }\n \n-    // (To be) stable attribute for #[lang = \"oom\"]\n-    if tcx.sess.contains_name(attrs, sym::alloc_error_handler) {\n-        return true;\n-    }\n-\n     let def_id = tcx.hir().local_def_id(id);\n     if tcx.def_kind(def_id).has_codegen_attrs() {\n         let cg_attrs = tcx.codegen_fn_attrs(def_id);"}, {"sha": "4a5cfd2d429cd67f1f435b770595595a5239e664", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -701,14 +701,6 @@ pub struct UnknownExternLangItem {\n #[diag(passes_missing_panic_handler)]\n pub struct MissingPanicHandler;\n \n-#[derive(Diagnostic)]\n-#[diag(passes_alloc_func_required)]\n-pub struct AllocFuncRequired;\n-\n-#[derive(Diagnostic)]\n-#[diag(passes_missing_alloc_error_handler)]\n-pub struct MissingAllocErrorHandler;\n-\n #[derive(Diagnostic)]\n #[diag(passes_missing_lang_item)]\n #[note]"}, {"sha": "f0815fcd8db9a6de59b633dcdb12368d05e6bd1d", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -7,10 +7,7 @@ use rustc_middle::middle::lang_items::required;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n \n-use crate::errors::{\n-    AllocFuncRequired, MissingAllocErrorHandler, MissingLangItem, MissingPanicHandler,\n-    UnknownExternLangItem,\n-};\n+use crate::errors::{MissingLangItem, MissingPanicHandler, UnknownExternLangItem};\n \n /// Checks the crate for usage of weak lang items, returning a vector of all the\n /// language items required by this crate, but not defined yet.\n@@ -69,11 +66,6 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n         if missing.contains(&item) && required(tcx, item) && items.get(item).is_none() {\n             if item == LangItem::PanicImpl {\n                 tcx.sess.emit_err(MissingPanicHandler);\n-            } else if item == LangItem::Oom {\n-                if !tcx.features().default_alloc_error_handler {\n-                    tcx.sess.emit_err(AllocFuncRequired);\n-                    tcx.sess.emit_note(MissingAllocErrorHandler);\n-                }\n             } else {\n                 tcx.sess.emit_err(MissingLangItem { name: item.name() });\n             }"}, {"sha": "8c6663569a553e87f226bbd7a1e1c361acbebfd6", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -402,19 +402,18 @@ pub use std::alloc::handle_alloc_error;\n #[allow(unused_attributes)]\n #[unstable(feature = \"alloc_internals\", issue = \"none\")]\n pub mod __alloc_error_handler {\n-    use crate::alloc::Layout;\n-\n-    // called via generated `__rust_alloc_error_handler`\n-\n-    // if there is no `#[alloc_error_handler]`\n+    // called via generated `__rust_alloc_error_handler` if there is no\n+    // `#[alloc_error_handler]`.\n     #[rustc_std_internal_symbol]\n     pub unsafe fn __rdl_oom(size: usize, _align: usize) -> ! {\n         panic!(\"memory allocation of {size} bytes failed\")\n     }\n \n-    // if there is an `#[alloc_error_handler]`\n+    #[cfg(bootstrap)]\n     #[rustc_std_internal_symbol]\n     pub unsafe fn __rg_oom(size: usize, align: usize) -> ! {\n+        use crate::alloc::Layout;\n+\n         let layout = unsafe { Layout::from_size_align_unchecked(size, align) };\n         extern \"Rust\" {\n             #[lang = \"oom\"]"}, {"sha": "2850d84acc3274b09f9169dc6c1b377ddd516730", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -1511,6 +1511,17 @@ pub(crate) mod builtin {\n         /* compiler built-in */\n     }\n \n+    /// Attribute macro applied to a function to register it as a handler for allocation failure.\n+    ///\n+    /// See also [`std::alloc::handle_alloc_error`](../../../std/alloc/fn.handle_alloc_error.html).\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"alloc_error_handler\", issue = \"51540\")]\n+    #[allow_internal_unstable(rustc_attrs)]\n+    #[rustc_builtin_macro]\n+    pub macro alloc_error_handler($item:item) {\n+        /* compiler built-in */\n+    }\n+\n     /// Keeps the item it's applied to if the passed path is accessible, and removes it otherwise.\n     #[unstable(\n         feature = \"cfg_accessible\","}, {"sha": "804a179bdb3c04a835e47c97db8896da119f73bb", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -75,6 +75,9 @@ pub use crate::macros::builtin::{RustcDecodable, RustcEncodable};\n \n // Do not `doc(no_inline)` so that they become doc items on their own\n // (no public module for them to be re-exported from).\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+pub use crate::macros::builtin::alloc_error_handler;\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n pub use crate::macros::builtin::{bench, derive, global_allocator, test, test_case};\n "}, {"sha": "36d9e8921ef31f110eaf284b7747aadd1044e44a", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -59,6 +59,9 @@ pub use core::prelude::v1::{RustcDecodable, RustcEncodable};\n \n // Do not `doc(no_inline)` so that they become doc items on their own\n // (no public module for them to be re-exported from).\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n+pub use core::prelude::v1::alloc_error_handler;\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n pub use core::prelude::v1::{bench, derive, global_allocator, test, test_case};\n "}, {"sha": "c93645369928c4dce0ac7dd2399b456687a54f3b", "filename": "src/test/run-make-fulldeps/issue-51671/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2FMakefile?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -6,4 +6,4 @@ all:\n \t$(RUSTC) --emit=obj app.rs\n \tnm $(TMPDIR)/app.o | $(CGREP) rust_begin_unwind\n \tnm $(TMPDIR)/app.o | $(CGREP) rust_eh_personality\n-\tnm $(TMPDIR)/app.o | $(CGREP) rust_oom\n+\tnm $(TMPDIR)/app.o | $(CGREP) __rg_oom"}, {"sha": "e9dc1e9744fb143a2c406f72de9425a33fde97b8", "filename": "src/test/run-make-fulldeps/issue-51671/app.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2Fapp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2Fapp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2Fapp.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"bin\"]\n-#![feature(lang_items)]\n+#![feature(lang_items, alloc_error_handler)]\n #![no_main]\n #![no_std]\n \n@@ -14,7 +14,7 @@ fn panic(_: &PanicInfo) -> ! {\n #[lang = \"eh_personality\"]\n fn eh() {}\n \n-#[lang = \"oom\"]\n+#[alloc_error_handler]\n fn oom(_: Layout) -> ! {\n     loop {}\n }"}, {"sha": "cd06423e3a557279ebb5fe61522922fdf3a0f126", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -8,8 +8,8 @@ use core::alloc::Layout;\n \n #[alloc_error_handler]\n fn oom(\n-    info: &Layout, //~ ERROR argument should be `Layout`\n-) -> () //~ ERROR return type should be `!`\n+    info: &Layout, //~^ ERROR mismatched types\n+) -> () //~^^ ERROR mismatched types\n {\n     loop {}\n }"}, {"sha": "d0911fa3985d0aee007ecbb1e5f226b628749ae9", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-1.stderr", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -1,14 +1,50 @@\n-error: return type should be `!`\n-  --> $DIR/alloc-error-handler-bad-signature-1.rs:12:6\n+error[E0308]: mismatched types\n+  --> $DIR/alloc-error-handler-bad-signature-1.rs:10:1\n    |\n-LL | ) -> ()\n-   |      ^^\n-\n-error: argument should be `Layout`\n-  --> $DIR/alloc-error-handler-bad-signature-1.rs:11:11\n+LL |    #[alloc_error_handler]\n+   |    ---------------------- in this procedural macro expansion\n+LL |    fn oom(\n+   |   _^\n+   |  |_|\n+   | ||\n+LL | ||     info: &Layout,\n+LL | || ) -> ()\n+   | ||_______- arguments to this function are incorrect\n+LL | |  {\n+LL | |      loop {}\n+LL | |  }\n+   | |__^ expected `&Layout`, found struct `Layout`\n+   |\n+note: function defined here\n+  --> $DIR/alloc-error-handler-bad-signature-1.rs:10:4\n    |\n+LL | fn oom(\n+   |    ^^^\n LL |     info: &Layout,\n-   |           ^^^^^^^\n+   |     -------------\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/alloc-error-handler-bad-signature-1.rs:10:1\n+   |\n+LL |    #[alloc_error_handler]\n+   |    ---------------------- in this procedural macro expansion\n+LL |    fn oom(\n+   |   _^\n+   |  |_|\n+   | ||\n+LL | ||     info: &Layout,\n+LL | || ) -> ()\n+   | ||_______^ expected `!`, found `()`\n+LL | |  {\n+LL | |      loop {}\n+LL | |  }\n+   | |__- expected `!` because of return type\n+   |\n+   = note:   expected type `!`\n+           found unit type `()`\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4f76257fc726769df8d21c61816611337c032be8", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -8,8 +8,8 @@ struct Layout;\n \n #[alloc_error_handler]\n fn oom(\n-    info: Layout, //~ ERROR argument should be `Layout`\n-) { //~ ERROR return type should be `!`\n+    info: Layout, //~^ ERROR mismatched types\n+) { //~^^ ERROR mismatched types\n     loop {}\n }\n "}, {"sha": "5777279855d9768b9d05555b3405d00b6a1d2fd8", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "modified", "additions": 57, "deletions": 8, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -1,14 +1,63 @@\n-error: return type should be `!`\n-  --> $DIR/alloc-error-handler-bad-signature-2.rs:12:3\n+error[E0308]: mismatched types\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:10:1\n    |\n-LL | ) {\n-   |   ^\n-\n-error: argument should be `Layout`\n-  --> $DIR/alloc-error-handler-bad-signature-2.rs:11:11\n+LL |    #[alloc_error_handler]\n+   |    ---------------------- in this procedural macro expansion\n+LL |    fn oom(\n+   |   _^\n+   |  |_|\n+   | ||\n+LL | ||     info: Layout,\n+LL | || ) {\n+   | || -\n+   | ||_|\n+   | |  arguments to this function are incorrect\n+LL | |      loop {}\n+LL | |  }\n+   | |__^ expected struct `Layout`, found struct `core::alloc::Layout`\n+   |\n+   = note: struct `core::alloc::Layout` and struct `Layout` have similar names, but are actually distinct types\n+note: struct `core::alloc::Layout` is defined in crate `core`\n+  --> $SRC_DIR/core/src/alloc/layout.rs:LL:COL\n+   |\n+LL | pub struct Layout {\n+   | ^^^^^^^^^^^^^^^^^\n+note: struct `Layout` is defined in the current crate\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:7:1\n+   |\n+LL | struct Layout;\n+   | ^^^^^^^^^^^^^\n+note: function defined here\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:10:4\n    |\n+LL | fn oom(\n+   |    ^^^\n LL |     info: Layout,\n-   |           ^^^^^^\n+   |     ------------\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/alloc-error-handler-bad-signature-2.rs:10:1\n+   |\n+LL |    #[alloc_error_handler]\n+   |    ---------------------- in this procedural macro expansion\n+LL |    fn oom(\n+   |   _^\n+   |  |_|\n+   | ||\n+LL | ||     info: Layout,\n+LL | || ) {\n+   | || ^\n+   | ||_|\n+   | |  expected `!`, found `()`\n+LL | |      loop {}\n+LL | |  }\n+   | |__- expected `!` because of return type\n+   |\n+   = note:   expected type `!`\n+           found unit type `()`\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8430fabe84d0962dbeb17ca26afaa414b764100e", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -7,7 +7,7 @@\n struct Layout;\n \n #[alloc_error_handler]\n-fn oom() -> ! { //~ ERROR function should have one argument\n+fn oom() -> ! { //~ ERROR this function takes 0 arguments but 1 argument was supplied\n     loop {}\n }\n "}, {"sha": "77ea8ef052091605c5d3e9cfe9ee853d8331617b", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -1,8 +1,25 @@\n-error: function should have one argument\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/alloc-error-handler-bad-signature-3.rs:10:1\n    |\n+LL |   #[alloc_error_handler]\n+   |   ---------------------- in this procedural macro expansion\n+LL |   fn oom() -> ! {\n+   |  _-^^^^^^^^^^^^\n+LL | |     loop {}\n+LL | | }\n+   | |_- argument of type `core::alloc::Layout` unexpected\n+   |\n+note: function defined here\n+  --> $DIR/alloc-error-handler-bad-signature-3.rs:10:4\n+   |\n LL | fn oom() -> ! {\n-   | ^^^^^^^^^^^^^\n+   |    ^^^\n+   = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: remove the extra argument\n+   |\n+LL | fn oom() -> !() {\n+   |              ++\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "78d189d20b64d4d9393595cf46190a976404fa9d", "filename": "src/test/ui/feature-gates/feature-gate-alloc-error-handler.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.rs?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -5,10 +5,12 @@\n \n use core::alloc::Layout;\n \n-#[alloc_error_handler] //~ ERROR the `#[alloc_error_handler]` attribute is an experimental feature\n+#[alloc_error_handler] //~ ERROR use of unstable library feature 'alloc_error_handler'\n fn oom(info: Layout) -> ! {\n     loop {}\n }\n \n #[panic_handler]\n-fn panic(_: &core::panic::PanicInfo) -> ! { loop {} }\n+fn panic(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "f414eb463dfbcc1f5747aaa70f060a3453dc92c4", "filename": "src/test/ui/feature-gates/feature-gate-alloc-error-handler.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56074b5231ceef266a1097ea355f62c951e1b468/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-alloc-error-handler.stderr?ref=56074b5231ceef266a1097ea355f62c951e1b468", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: the `#[alloc_error_handler]` attribute is an experimental feature\n-  --> $DIR/feature-gate-alloc-error-handler.rs:8:1\n+error[E0658]: use of unstable library feature 'alloc_error_handler'\n+  --> $DIR/feature-gate-alloc-error-handler.rs:8:3\n    |\n LL | #[alloc_error_handler]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #51540 <https://github.com/rust-lang/rust/issues/51540> for more information\n    = help: add `#![feature(alloc_error_handler)]` to the crate attributes to enable"}]}