{"sha": "a9f178c148858b3b121aaf849907905262a41a6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZjE3OGMxNDg4NThiM2IxMjFhYWY4NDk5MDc5MDUyNjJhNDFhNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-06T21:59:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-06T21:59:09Z"}, "message": "auto merge of #7570 : kballard/rust/iterator-size-hint, r=thestinger\n\nChange the signature of Iterator.size_hint() to always have a lower bound.\r\n\r\nImplement .size_hint() on all remaining iterators (if it differs from the default).", "tree": {"sha": "604acc843a45c4e141c1977ff8acdefa616fcc2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/604acc843a45c4e141c1977ff8acdefa616fcc2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f178c148858b3b121aaf849907905262a41a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f178c148858b3b121aaf849907905262a41a6c", "html_url": "https://github.com/rust-lang/rust/commit/a9f178c148858b3b121aaf849907905262a41a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f178c148858b3b121aaf849907905262a41a6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1c7768b32f7304e6e9fe2cb53680da9fa004d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c7768b32f7304e6e9fe2cb53680da9fa004d4e", "html_url": "https://github.com/rust-lang/rust/commit/c1c7768b32f7304e6e9fe2cb53680da9fa004d4e"}, {"sha": "e6f9b08610050f8e98903829056cf6ff83e95ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f9b08610050f8e98903829056cf6ff83e95ef3", "html_url": "https://github.com/rust-lang/rust/commit/e6f9b08610050f8e98903829056cf6ff83e95ef3"}], "stats": {"total": 192, "additions": 161, "deletions": 31}, "files": [{"sha": "1f7ba9f65303c824814e7a6ee2d5379ab9e8ba87", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=a9f178c148858b3b121aaf849907905262a41a6c", "patch": "@@ -186,6 +186,9 @@ pub struct PriorityQueueIterator <'self, T> {\n impl<'self, T> Iterator<&'self T> for PriorityQueueIterator<'self, T> {\n     #[inline]\n     fn next(&mut self) -> Option<(&'self T)> { self.iter.next() }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n #[cfg(test)]"}, {"sha": "17970f158dd2320caaa247a1b733552be136b583", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=a9f178c148858b3b121aaf849907905262a41a6c", "patch": "@@ -198,14 +198,15 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     /// Get a lazy iterator over the key-value pairs in the map.\n     /// Requires that it be frozen (immutable).\n     pub fn iter<'a>(&'a self) -> TreeMapIterator<'a, K, V> {\n-        TreeMapIterator{stack: ~[], node: &self.root}\n+        TreeMapIterator{stack: ~[], node: &self.root, remaining: self.length}\n     }\n }\n \n /// Lazy forward iterator over a map\n pub struct TreeMapIterator<'self, K, V> {\n     priv stack: ~[&'self ~TreeNode<K, V>],\n-    priv node: &'self Option<~TreeNode<K, V>>\n+    priv node: &'self Option<~TreeNode<K, V>>,\n+    priv remaining: uint\n }\n \n impl<'self, K, V> Iterator<(&'self K, &'self V)> for TreeMapIterator<'self, K, V> {\n@@ -222,12 +223,18 @@ impl<'self, K, V> Iterator<(&'self K, &'self V)> for TreeMapIterator<'self, K, V\n               None => {\n                 let res = self.stack.pop();\n                 self.node = &res.right;\n+                self.remaining -= 1;\n                 return Some((&res.key, &res.value));\n               }\n             }\n         }\n         None\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        (self.remaining, Some(self.remaining))\n+    }\n }\n \n impl<'self, T> Iterator<&'self T> for TreeSetIterator<'self, T> {"}, {"sha": "3ce645e012b791373349a717afd10f00d88bfe96", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=a9f178c148858b3b121aaf849907905262a41a6c", "patch": "@@ -125,9 +125,9 @@ impl<E:CLike> Iterator<E> for EnumSetIterator<E> {\n         Some(elem)\n     }\n \n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n-        let exact = Some(self.bits.population_count());\n-        (exact, exact)\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let exact = self.bits.population_count();\n+        (exact, Some(exact))\n     }\n }\n "}, {"sha": "b164bcbd28b3ceb46762d8442ba4f223c773404a", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 124, "deletions": 12, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=a9f178c148858b3b121aaf849907905262a41a6c", "patch": "@@ -26,6 +26,7 @@ use option::{Option, Some, None};\n use ops::{Add, Mul};\n use cmp::Ord;\n use clone::Clone;\n+use uint;\n \n /// Conversion from an `Iterator`\n pub trait FromIterator<A, T: Iterator<A>> {\n@@ -43,7 +44,7 @@ pub trait Iterator<A> {\n     /// Return a lower bound and upper bound on the remaining length of the iterator.\n     ///\n     /// The common use case for the estimate is pre-allocating space to store the results.\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) { (None, None) }\n+    fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -684,18 +685,18 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<A, T, U> {\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n         let (a_lower, a_upper) = self.a.size_hint();\n         let (b_lower, b_upper) = self.b.size_hint();\n \n-        let lower = match (a_lower, b_lower) {\n-            (Some(x), Some(y)) => Some(x + y),\n-            (Some(x), None) => Some(x),\n-            (None, Some(y)) => Some(y),\n-            (None, None) => None\n+        let lower = if uint::max_value - a_lower < b_lower {\n+            uint::max_value\n+        } else {\n+            a_lower + b_lower\n         };\n \n         let upper = match (a_upper, b_upper) {\n+            (Some(x), Some(y)) if uint::max_value - x < y => Some(uint::max_value),\n             (Some(x), Some(y)) => Some(x + y),\n             _ => None\n         };\n@@ -719,6 +720,23 @@ impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for ZipIterator<A, T\n             _ => None\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (a_lower, a_upper) = self.a.size_hint();\n+        let (b_lower, b_upper) = self.b.size_hint();\n+\n+        let lower = cmp::min(a_lower, b_lower);\n+\n+        let upper = match (a_upper, b_upper) {\n+            (Some(x), Some(y)) => Some(cmp::min(x,y)),\n+            (Some(x), None) => Some(x),\n+            (None, Some(y)) => Some(y),\n+            (None, None) => None\n+        };\n+\n+        (lower, upper)\n+    }\n }\n \n /// An iterator which maps the values of `iter` with `f`\n@@ -737,7 +755,7 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for MapIterator<'self, A, B, T> {\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n         self.iter.size_hint()\n     }\n }\n@@ -762,9 +780,9 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n         let (_, upper) = self.iter.size_hint();\n-        (None, upper) // can't know a lower bound, due to the predicate\n+        (0, upper) // can't know a lower bound, due to the predicate\n     }\n }\n \n@@ -787,9 +805,9 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B,\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n         let (_, upper) = self.iter.size_hint();\n-        (None, upper) // can't know a lower bound, due to the predicate\n+        (0, upper) // can't know a lower bound, due to the predicate\n     }\n }\n \n@@ -812,6 +830,11 @@ impl<A, T: Iterator<A>> Iterator<(uint, A)> for EnumerateIterator<A, T> {\n             _ => None\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        self.iter.size_hint()\n+    }\n }\n \n /// An iterator which rejects elements while `predicate` is true\n@@ -844,6 +867,12 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for SkipWhileIterator<'self, A, T> {\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper) // can't know a lower bound, due to the predicate\n+    }\n }\n \n /// An iterator which only accepts elements while `predicate` is true\n@@ -872,6 +901,12 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhileIterator<'self, A, T> {\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper) // can't know a lower bound, due to the predicate\n+    }\n }\n \n /// An iterator which skips over `n` elements of `iter`.\n@@ -905,6 +940,21 @@ impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<A, T> {\n             next\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (lower, upper) = self.iter.size_hint();\n+\n+        let lower = if lower >= self.n { lower - self.n } else { 0 };\n+\n+        let upper = match upper {\n+            Some(x) if x >= self.n => Some(x - self.n),\n+            Some(_) => Some(0),\n+            None => None\n+        };\n+\n+        (lower, upper)\n+    }\n }\n \n /// An iterator which only iterates over the first `n` iterations of `iter`.\n@@ -925,6 +975,20 @@ impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<A, T> {\n             None\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (lower, upper) = self.iter.size_hint();\n+\n+        let lower = cmp::min(lower, self.n);\n+\n+        let upper = match upper {\n+            Some(x) if x < self.n => Some(x),\n+            _ => Some(self.n)\n+        };\n+\n+        (lower, upper)\n+    }\n }\n \n /// An iterator to maintain state while iterating another iterator\n@@ -941,6 +1005,12 @@ impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for ScanIterator<'self, A, B,\n     fn next(&mut self) -> Option<B> {\n         self.iter.next().chain(|a| (self.f)(&mut self.state, a))\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper) // can't know a lower bound, due to the scan function\n+    }\n }\n \n /// An iterator that maps each element to an iterator,\n@@ -1022,6 +1092,11 @@ impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n         self.state = self.state.add(&self.step); // FIXME: #6050\n         Some(result)\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        (uint::max_value, None) // Too bad we can't specify an infinite lower bound\n+    }\n }\n \n #[cfg(test)]\n@@ -1237,6 +1312,43 @@ mod tests {\n         assert_eq!(v.slice(0, 0).iter().transform(|&x| x).min(), None);\n     }\n \n+    #[test]\n+    fn test_iterator_size_hint() {\n+        let c = Counter::new(0, 1);\n+        let v = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+        let v2 = &[10, 11, 12];\n+        let vi = v.iter();\n+\n+        assert_eq!(c.size_hint(), (uint::max_value, None));\n+        assert_eq!(vi.size_hint(), (10, Some(10)));\n+\n+        assert_eq!(c.take_(5).size_hint(), (5, Some(5)));\n+        assert_eq!(c.skip(5).size_hint().second(), None);\n+        assert_eq!(c.take_while(|_| false).size_hint(), (0, None));\n+        assert_eq!(c.skip_while(|_| false).size_hint(), (0, None));\n+        assert_eq!(c.enumerate().size_hint(), (uint::max_value, None));\n+        assert_eq!(c.chain_(vi.transform(|&i| i)).size_hint(), (uint::max_value, None));\n+        assert_eq!(c.zip(vi).size_hint(), (10, Some(10)));\n+        assert_eq!(c.scan(0, |_,_| Some(0)).size_hint(), (0, None));\n+        assert_eq!(c.filter(|_| false).size_hint(), (0, None));\n+        assert_eq!(c.transform(|_| 0).size_hint(), (uint::max_value, None));\n+        assert_eq!(c.filter_map(|_| Some(0)).size_hint(), (0, None));\n+\n+        assert_eq!(vi.take_(5).size_hint(), (5, Some(5)));\n+        assert_eq!(vi.take_(12).size_hint(), (10, Some(10)));\n+        assert_eq!(vi.skip(3).size_hint(), (7, Some(7)));\n+        assert_eq!(vi.skip(12).size_hint(), (0, Some(0)));\n+        assert_eq!(vi.take_while(|_| false).size_hint(), (0, Some(10)));\n+        assert_eq!(vi.skip_while(|_| false).size_hint(), (0, Some(10)));\n+        assert_eq!(vi.enumerate().size_hint(), (10, Some(10)));\n+        assert_eq!(vi.chain_(v2.iter()).size_hint(), (13, Some(13)));\n+        assert_eq!(vi.zip(v2.iter()).size_hint(), (3, Some(3)));\n+        assert_eq!(vi.scan(0, |_,_| Some(0)).size_hint(), (0, Some(10)));\n+        assert_eq!(vi.filter(|_| false).size_hint(), (0, Some(10)));\n+        assert_eq!(vi.transform(|i| i+1).size_hint(), (10, Some(10)));\n+        assert_eq!(vi.filter_map(|_| Some(0)).size_hint(), (0, Some(10)));\n+    }\n+\n     #[test]\n     fn test_collect() {\n         let a = ~[1, 2, 3, 4, 5];"}, {"sha": "7244a9a7aac54fe4ac0ffa5d49832b07a85abeb1", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=a9f178c148858b3b121aaf849907905262a41a6c", "patch": "@@ -2024,14 +2024,14 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+            fn size_hint(&self) -> (uint, Option<uint>) {\n                 let diff = if $step > 0 {\n                     (self.end as uint) - (self.ptr as uint)\n                 } else {\n                     (self.ptr as uint) - (self.end as uint)\n                 };\n-                let exact = Some(diff / size_of::<$elem>());\n-                (exact, exact)\n+                let exact = diff / size_of::<$elem>();\n+                (exact, Some(exact))\n             }\n         }\n     }\n@@ -2132,7 +2132,7 @@ impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n     pub fn from_iterator(iterator: &mut T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();\n-        let mut xs = with_capacity(lower.get_or_zero());\n+        let mut xs = with_capacity(lower);\n         for iterator.advance |x| {\n             xs.push(x);\n         }\n@@ -2968,28 +2968,28 @@ mod tests {\n         use iterator::*;\n         let xs = [1, 2, 5, 10, 11];\n         let mut it = xs.iter();\n-        assert_eq!(it.size_hint(), (Some(5), Some(5)));\n+        assert_eq!(it.size_hint(), (5, Some(5)));\n         assert_eq!(it.next().unwrap(), &1);\n-        assert_eq!(it.size_hint(), (Some(4), Some(4)));\n+        assert_eq!(it.size_hint(), (4, Some(4)));\n         assert_eq!(it.next().unwrap(), &2);\n-        assert_eq!(it.size_hint(), (Some(3), Some(3)));\n+        assert_eq!(it.size_hint(), (3, Some(3)));\n         assert_eq!(it.next().unwrap(), &5);\n-        assert_eq!(it.size_hint(), (Some(2), Some(2)));\n+        assert_eq!(it.size_hint(), (2, Some(2)));\n         assert_eq!(it.next().unwrap(), &10);\n-        assert_eq!(it.size_hint(), (Some(1), Some(1)));\n+        assert_eq!(it.size_hint(), (1, Some(1)));\n         assert_eq!(it.next().unwrap(), &11);\n-        assert_eq!(it.size_hint(), (Some(0), Some(0)));\n+        assert_eq!(it.size_hint(), (0, Some(0)));\n         assert!(it.next().is_none());\n     }\n \n     #[test]\n     fn test_iter_size_hints() {\n         use iterator::*;\n         let mut xs = [1, 2, 5, 10, 11];\n-        assert_eq!(xs.iter().size_hint(), (Some(5), Some(5)));\n-        assert_eq!(xs.rev_iter().size_hint(), (Some(5), Some(5)));\n-        assert_eq!(xs.mut_iter().size_hint(), (Some(5), Some(5)));\n-        assert_eq!(xs.mut_rev_iter().size_hint(), (Some(5), Some(5)));\n+        assert_eq!(xs.iter().size_hint(), (5, Some(5)));\n+        assert_eq!(xs.rev_iter().size_hint(), (5, Some(5)));\n+        assert_eq!(xs.mut_iter().size_hint(), (5, Some(5)));\n+        assert_eq!(xs.mut_rev_iter().size_hint(), (5, Some(5)));\n     }\n \n     #[test]"}, {"sha": "8e2da3d6eb1aab48bf78d0a6b082e9a5cf511138", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f178c148858b3b121aaf849907905262a41a6c/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=a9f178c148858b3b121aaf849907905262a41a6c", "patch": "@@ -146,4 +146,12 @@ impl<'self, T> Iterator<&'self T> for OptVecIterator<'self, T> {\n             None => None\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        match self.iter {\n+            Some(ref x) => x.size_hint(),\n+            None => (0, Some(0))\n+        }\n+    }\n }"}]}