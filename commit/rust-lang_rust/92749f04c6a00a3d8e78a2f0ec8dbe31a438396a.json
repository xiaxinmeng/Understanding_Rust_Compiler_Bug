{"sha": "92749f04c6a00a3d8e78a2f0ec8dbe31a438396a", "node_id": "C_kwDOAAsO6NoAKDkyNzQ5ZjA0YzZhMDBhM2Q4ZTc4YTJmMGVjOGRiZTMxYTQzODM5NmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-21T16:24:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-21T16:24:56Z"}, "message": "Auto merge of #98098 - bjorn3:archive_refactor, r=michaelwoerister\n\nRemove the source archive functionality of ArchiveWriter\n\nWe now build archives through strictly additive means rather than taking an existing archive and potentially substracting parts. This is simpler and makes it easier to swap out the archive writer in https://github.com/rust-lang/rust/pull/97485.", "tree": {"sha": "df9dbb3520768be00a9592a2f25f391631330416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df9dbb3520768be00a9592a2f25f391631330416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92749f04c6a00a3d8e78a2f0ec8dbe31a438396a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92749f04c6a00a3d8e78a2f0ec8dbe31a438396a", "html_url": "https://github.com/rust-lang/rust/commit/92749f04c6a00a3d8e78a2f0ec8dbe31a438396a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92749f04c6a00a3d8e78a2f0ec8dbe31a438396a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5543d22de2935315d09cb2a30f952277862d3b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5543d22de2935315d09cb2a30f952277862d3b6f", "html_url": "https://github.com/rust-lang/rust/commit/5543d22de2935315d09cb2a30f952277862d3b6f"}, {"sha": "73b3ae0b8a5f84a231ec8fa850711ab5d6c027a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b3ae0b8a5f84a231ec8fa850711ab5d6c027a3", "html_url": "https://github.com/rust-lang/rust/commit/73b3ae0b8a5f84a231ec8fa850711ab5d6c027a3"}], "stats": {"total": 43, "additions": 8, "deletions": 35}, "files": [{"sha": "0812f930b5dea20c06b97e93127c9105174c5dd5", "filename": "src/archive.rs", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/92749f04c6a00a3d8e78a2f0ec8dbe31a438396a/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92749f04c6a00a3d8e78a2f0ec8dbe31a438396a/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=92749f04c6a00a3d8e78a2f0ec8dbe31a438396a", "patch": "@@ -30,50 +30,19 @@ pub(crate) struct ArArchiveBuilder<'a> {\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n-        let (src_archives, entries) = if let Some(input) = input {\n-            let read_cache = ReadCache::new(File::open(input).unwrap());\n-            let archive = ArchiveFile::parse(&read_cache).unwrap();\n-            let mut entries = Vec::new();\n-\n-            for entry in archive.members() {\n-                let entry = entry.unwrap();\n-                entries.push((\n-                    entry.name().to_vec(),\n-                    ArchiveEntry::FromArchive { archive_index: 0, file_range: entry.file_range() },\n-                ));\n-            }\n-\n-            (vec![read_cache.into_inner()], entries)\n-        } else {\n-            (vec![], Vec::new())\n-        };\n-\n+    fn new(sess: &'a Session, output: &Path) -> Self {\n         ArArchiveBuilder {\n             sess,\n             dst: output.to_path_buf(),\n             use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n             // FIXME fix builtin ranlib on macOS\n             no_builtin_ranlib: sess.target.is_like_osx,\n \n-            src_archives,\n-            entries,\n+            src_archives: vec![],\n+            entries: vec![],\n         }\n     }\n \n-    fn src_files(&mut self) -> Vec<String> {\n-        self.entries.iter().map(|(name, _)| String::from_utf8(name.clone()).unwrap()).collect()\n-    }\n-\n-    fn remove_file(&mut self, name: &str) {\n-        let index = self\n-            .entries\n-            .iter()\n-            .position(|(entry_name, _)| entry_name == name.as_bytes())\n-            .expect(\"Tried to remove file not existing in src archive\");\n-        self.entries.remove(index);\n-    }\n-\n     fn add_file(&mut self, file: &Path) {\n         self.entries.push((\n             file.file_name().unwrap().to_str().unwrap().to_string().into_bytes(),\n@@ -105,7 +74,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) {\n+    fn build(mut self) -> bool {\n         enum BuilderKind {\n             Bsd(ar::Builder<File>),\n             Gnu(ar::GnuBuilder<File>),\n@@ -204,6 +173,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             )\n         };\n \n+        let any_members = !entries.is_empty();\n+\n         // Add all files\n         for (entry_name, data) in entries.into_iter() {\n             let header = ar::Header::new(entry_name, data.len() as u64);\n@@ -229,6 +200,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                 self.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n             }\n         }\n+\n+        any_members\n     }\n \n     fn inject_dll_import_lib("}]}