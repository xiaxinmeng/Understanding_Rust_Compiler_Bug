{"sha": "3ced546033973a63cb2ef1644ca099740fdfb1c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZWQ1NDYwMzM5NzNhNjNjYjJlZjE2NDRjYTA5OTc0MGZkZmIxYzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-23T10:16:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-23T10:16:24Z"}, "message": "Make code more understandable\n\nAvoid mutation of snapshot's config -- that's spooky action at a\ndistance. Instead, copy it over to a local variable.\n\nThis points out a minor architecture problem, which we won't fix right\naway.\n\nVarious `ide`-level config structs, like `AssistConfig`, are geared\ntowards one-shot use when calling a specific methods. On the other\nhand, the large `Config` struct in `rust-analyzer` is a long-term\nconfig store.\n\nThe fact that `Config` stores `AssistConfig` is accidental -- a better\ndesign would probably be to just store `ConfigData` inside `Config`\nand create various `Config`s on the fly out of it.", "tree": {"sha": "7c38c6204afc8faa7f9b2ede6e6d5ffe73f8b80f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c38c6204afc8faa7f9b2ede6e6d5ffe73f8b80f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ced546033973a63cb2ef1644ca099740fdfb1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ced546033973a63cb2ef1644ca099740fdfb1c2", "html_url": "https://github.com/rust-lang/rust/commit/3ced546033973a63cb2ef1644ca099740fdfb1c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ced546033973a63cb2ef1644ca099740fdfb1c2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1aca75974d917755c04e5040100dfb6ae92f2f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1aca75974d917755c04e5040100dfb6ae92f2f9", "html_url": "https://github.com/rust-lang/rust/commit/e1aca75974d917755c04e5040100dfb6ae92f2f9"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "83b3a343cd20c3d5d29325919434933d1e1d690d", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ced546033973a63cb2ef1644ca099740fdfb1c2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ced546033973a63cb2ef1644ca099740fdfb1c2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=3ced546033973a63cb2ef1644ca099740fdfb1c2", "patch": "@@ -8,8 +8,9 @@ use std::{\n };\n \n use ide::{\n-    CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData,\n-    NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope, SymbolKind, TextEdit,\n+    AssistConfig, CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction,\n+    HoverGotoTypeData, NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n+    SymbolKind, TextEdit,\n };\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n@@ -882,24 +883,27 @@ pub(crate) fn handle_code_action(\n     let range = from_proto::text_range(&line_index, params.range);\n     let frange = FileRange { file_id, range };\n \n-    snap.config.assist.allowed = params\n-        .clone()\n-        .context\n-        .only\n-        .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n+    let assists_config = AssistConfig {\n+        allowed: params\n+            .clone()\n+            .context\n+            .only\n+            .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect()),\n+        ..snap.config.assist\n+    };\n \n     let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n     add_quick_fixes(&snap, &params, &mut res)?;\n \n     if snap.config.client_caps.code_action_resolve {\n         for (index, assist) in\n-            snap.analysis.unresolved_assists(&snap.config.assist, frange)?.into_iter().enumerate()\n+            snap.analysis.unresolved_assists(&assists_config, frange)?.into_iter().enumerate()\n         {\n             res.push(to_proto::unresolved_code_action(&snap, params.clone(), assist, index)?);\n         }\n     } else {\n-        for assist in snap.analysis.resolved_assists(&snap.config.assist, frange)?.into_iter() {\n+        for assist in snap.analysis.resolved_assists(&assists_config, frange)?.into_iter() {\n             res.push(to_proto::resolved_code_action(&snap, assist)?);\n         }\n     }"}]}