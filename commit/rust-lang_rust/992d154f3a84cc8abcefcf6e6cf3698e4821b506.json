{"sha": "992d154f3a84cc8abcefcf6e6cf3698e4821b506", "node_id": "C_kwDOAAsO6NoAKDk5MmQxNTRmM2E4NGNjOGFiY2VmY2Y2ZTZjZjM2OThlNDgyMWI1MDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-15T08:13:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-15T08:13:23Z"}, "message": "Auto merge of #109089 - compiler-errors:opt_rpitit_info-follow-up, r=spastorino\n\nEncode `opt_rpitit_info` for associated types\n\nFollow-up, only last commit matters\n\nr? `@spastorino`\n\nThis needs a perf run after the parent pr lands", "tree": {"sha": "939b8cd57b00da61d748f11fac3f89a2f0078cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939b8cd57b00da61d748f11fac3f89a2f0078cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992d154f3a84cc8abcefcf6e6cf3698e4821b506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992d154f3a84cc8abcefcf6e6cf3698e4821b506", "html_url": "https://github.com/rust-lang/rust/commit/992d154f3a84cc8abcefcf6e6cf3698e4821b506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992d154f3a84cc8abcefcf6e6cf3698e4821b506/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84e5ff04a647ce28540300244a26ba120642eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84e5ff04a647ce28540300244a26ba120642eea", "html_url": "https://github.com/rust-lang/rust/commit/e84e5ff04a647ce28540300244a26ba120642eea"}, {"sha": "0404e264a23af0f0a3485713843c6525d0e949c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0404e264a23af0f0a3485713843c6525d0e949c8", "html_url": "https://github.com/rust-lang/rust/commit/0404e264a23af0f0a3485713843c6525d0e949c8"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "0070e46ffdf02cf2060427f1f86377bb3bf331e5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=992d154f3a84cc8abcefcf6e6cf3698e4821b506", "patch": "@@ -1087,6 +1087,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             _ => bug!(\"cannot get associated-item of `{:?}`\", self.def_key(id)),\n         };\n         let container = self.root.tables.assoc_container.get(self, id).unwrap();\n+        let opt_rpitit_info =\n+            self.root.tables.opt_rpitit_info.get(self, id).map(|d| d.decode(self));\n \n         ty::AssocItem {\n             name,\n@@ -1095,8 +1097,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             trait_item_def_id: self.get_trait_item_def_id(id),\n             container,\n             fn_has_self_parameter: has_self,\n-            // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): We need to encode this\n-            opt_rpitit_info: None,\n+            opt_rpitit_info,\n         }\n     }\n "}, {"sha": "9649ce2c5a77161c14db6828ee52d2baaccd7412", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=992d154f3a84cc8abcefcf6e6cf3698e4821b506", "patch": "@@ -1350,6 +1350,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         if trait_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n+        if let Some(rpitit_info) = trait_item.opt_rpitit_info {\n+            let rpitit_info = self.lazy(rpitit_info);\n+            self.tables.opt_rpitit_info.set_some(def_id.index, rpitit_info);\n+        }\n     }\n \n     fn encode_info_for_impl_item(&mut self, def_id: DefId) {\n@@ -1384,6 +1388,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n             self.tables.is_intrinsic.set(def_id.index, tcx.is_intrinsic(def_id));\n         }\n+        if let Some(rpitit_info) = impl_item.opt_rpitit_info {\n+            let rpitit_info = self.lazy(rpitit_info);\n+            self.tables.opt_rpitit_info.set_some(def_id.index, rpitit_info);\n+        }\n     }\n \n     fn encode_mir(&mut self) {"}, {"sha": "e71a1c9810249c4b8846f1903da5159f524e7dd8", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=992d154f3a84cc8abcefcf6e6cf3698e4821b506", "patch": "@@ -355,6 +355,7 @@ define_tables! {\n     inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Clause<'static>, Span)>>,\n     inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n     associated_items_for_impl_trait_in_trait: Table<DefIndex, LazyArray<DefId>>,\n+    opt_rpitit_info: Table<DefIndex, Option<LazyValue<ty::ImplTraitInTraitData>>>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,"}, {"sha": "7534d06ae91f1e3575c818363d232da849179d66", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=992d154f3a84cc8abcefcf6e6cf3698e4821b506", "patch": "@@ -63,6 +63,7 @@ trivially_parameterized_over_tcx! {\n     ty::DeducedParamAttrs,\n     ty::Generics,\n     ty::ImplPolarity,\n+    ty::ImplTraitInTraitData,\n     ty::ReprOptions,\n     ty::TraitDef,\n     ty::UnusedGenericParams,"}, {"sha": "d41bf603983c071f8f51e3f9208698e5dab259f4", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992d154f3a84cc8abcefcf6e6cf3698e4821b506/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=992d154f3a84cc8abcefcf6e6cf3698e4821b506", "patch": "@@ -119,12 +119,9 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // When computing the param_env of an RPITIT, copy param_env of the containing function. The\n     // synthesized associated type doesn't have extra predicates to assume.\n-    let def_id =\n-        if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n-            fn_def_id\n-        } else {\n-            def_id\n-        };\n+    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+        return tcx.param_env(fn_def_id);\n+    }\n \n     // Compute the bounds on Self and the type parameters.\n     let ty::InstantiatedPredicates { mut predicates, .. } ="}]}