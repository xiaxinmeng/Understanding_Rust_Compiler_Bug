{"sha": "7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "node_id": "C_kwDOAAsO6NoAKDdlM2ZkMzNhNjY1MmJjNjZiN2U3Y2VhMDg1N2Y4OGUxYzNiNzk4NWI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-12T03:37:18Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-12T03:51:10Z"}, "message": "Remove unused argument from `visit_poly_trait_ref`.", "tree": {"sha": "da0ac3f686b30735014e3f36a03c1fa492026840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da0ac3f686b30735014e3f36a03c1fa492026840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "html_url": "https://github.com/rust-lang/rust/commit/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec5bda0dc9d01d75306dcd1ef73634cf3a87b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec5bda0dc9d01d75306dcd1ef73634cf3a87b12", "html_url": "https://github.com/rust-lang/rust/commit/9ec5bda0dc9d01d75306dcd1ef73634cf3a87b12"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "8f5f314ecae1d309323611c8f4116494eb20edb3", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "patch": "@@ -388,8 +388,8 @@ pub trait Visitor<'v>: Sized {\n     fn visit_param_bound(&mut self, bounds: &'v GenericBound<'v>) {\n         walk_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef<'v>, m: TraitBoundModifier) {\n-        walk_poly_trait_ref(self, t, m)\n+    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef<'v>) {\n+        walk_poly_trait_ref(self, t)\n     }\n     fn visit_variant_data(&mut self, s: &'v VariantData<'v>) {\n         walk_struct_def(self, s)\n@@ -495,11 +495,7 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n     }\n }\n \n-pub fn walk_poly_trait_ref<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    trait_ref: &'v PolyTraitRef<'v>,\n-    _modifier: TraitBoundModifier,\n-) {\n+pub fn walk_poly_trait_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v PolyTraitRef<'v>) {\n     walk_list!(visitor, visit_generic_param, trait_ref.bound_generic_params);\n     visitor.visit_trait_ref(&trait_ref.trait_ref);\n }\n@@ -681,7 +677,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n         }\n         TyKind::TraitObject(bounds, ref lifetime, _syntax) => {\n             for bound in bounds {\n-                visitor.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n+                visitor.visit_poly_trait_ref(bound);\n             }\n             visitor.visit_lifetime(lifetime);\n         }\n@@ -807,8 +803,8 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n \n pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericBound<'v>) {\n     match *bound {\n-        GenericBound::Trait(ref typ, modifier) => {\n-            visitor.visit_poly_trait_ref(typ, modifier);\n+        GenericBound::Trait(ref typ, _modifier) => {\n+            visitor.visit_poly_trait_ref(typ);\n         }\n         GenericBound::LangItemTrait(_, _span, hir_id, args) => {\n             visitor.visit_id(hir_id);"}, {"sha": "d8f540b74465d46c1ad725a6c18b27c86330d2f0", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n             hir::TyKind::TraitObject(bounds, ..) => {\n                 for bound in bounds {\n                     self.current_index.shift_in(1);\n-                    self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n+                    self.visit_poly_trait_ref(bound);\n                     self.current_index.shift_out(1);\n                 }\n             }"}, {"sha": "da6f1c5eeccfd1112d25b7a27c63cecdba145e16", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "patch": "@@ -258,13 +258,9 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         hir_visit::walk_where_predicate(self, p);\n     }\n \n-    fn visit_poly_trait_ref(\n-        &mut self,\n-        t: &'tcx hir::PolyTraitRef<'tcx>,\n-        m: hir::TraitBoundModifier,\n-    ) {\n-        lint_callback!(self, check_poly_trait_ref, t, m);\n-        hir_visit::walk_poly_trait_ref(self, t, m);\n+    fn visit_poly_trait_ref(&mut self, t: &'tcx hir::PolyTraitRef<'tcx>) {\n+        lint_callback!(self, check_poly_trait_ref, t);\n+        hir_visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {"}, {"sha": "57732741a33478217ac738f3df0630e7144bdbab", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "patch": "@@ -31,7 +31,7 @@ macro_rules! late_lint_methods {\n             fn check_ty(a: &$hir hir::Ty<$hir>);\n             fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n             fn check_generics(a: &$hir hir::Generics<$hir>);\n-            fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>, b: hir::TraitBoundModifier);\n+            fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>);\n             fn check_fn(\n                 a: rustc_hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,"}, {"sha": "4d97046171231c7d9be27cdfa6246be7e552770c", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "patch": "@@ -682,7 +682,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let scope = Scope::TraitRefBoundary { s: self.scope };\n                 self.with(scope, |this| {\n                     for bound in bounds {\n-                        this.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n+                        this.visit_poly_trait_ref(bound);\n                     }\n                 });\n                 match lifetime.name {\n@@ -1105,11 +1105,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_poly_trait_ref(\n-        &mut self,\n-        trait_ref: &'tcx hir::PolyTraitRef<'tcx>,\n-        _modifier: hir::TraitBoundModifier,\n-    ) {\n+    fn visit_poly_trait_ref(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) {\n         debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n \n         let (mut binders, scope_type) = self.poly_trait_ref_binder_info();"}, {"sha": "fe74ed28aa5cc340caa8aee06d8b2201ee2611ba", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "patch": "@@ -1346,16 +1346,12 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             }\n         }\n \n-        fn visit_poly_trait_ref(\n-            &mut self,\n-            tr: &'tcx hir::PolyTraitRef<'tcx>,\n-            m: hir::TraitBoundModifier,\n-        ) {\n+        fn visit_poly_trait_ref(&mut self, tr: &'tcx hir::PolyTraitRef<'tcx>) {\n             if self.has_late_bound_regions.is_some() {\n                 return;\n             }\n             self.outer_index.shift_in(1);\n-            intravisit::walk_poly_trait_ref(self, tr, m);\n+            intravisit::walk_poly_trait_ref(self, tr);\n             self.outer_index.shift_out(1);\n         }\n "}, {"sha": "28dbfbab2e19bd511908dc8b2f8da751a4d2932b", "filename": "src/tools/clippy/clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{\n-    def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, TraitBoundModifier, Ty, TyKind, UseKind,\n+    def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, Ty, TyKind, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -120,7 +120,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n         }\n     }\n \n-    fn check_poly_trait_ref(&mut self, cx: &LateContext<'tcx>, poly: &'tcx PolyTraitRef<'tcx>, _: TraitBoundModifier) {\n+    fn check_poly_trait_ref(&mut self, cx: &LateContext<'tcx>, poly: &'tcx PolyTraitRef<'tcx>) {\n         self.check_res_emit(cx, &poly.trait_ref.path.res, poly.trait_ref.path.span);\n     }\n }"}, {"sha": "643a7cfd577b796a193593b12702861f4f184894", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n     ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin,\n-    TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -422,7 +422,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         self.record(&Some(*lifetime));\n     }\n \n-    fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>, tbm: TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>) {\n         let trait_ref = &poly_tref.trait_ref;\n         if CLOSURE_TRAIT_BOUNDS.iter().any(|&item| {\n             self.cx\n@@ -435,7 +435,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n             sub_visitor.visit_trait_ref(trait_ref);\n             self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n         } else {\n-            walk_poly_trait_ref(self, poly_tref, tbm);\n+            walk_poly_trait_ref(self, poly_tref);\n         }\n     }\n \n@@ -466,7 +466,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                     self.unelided_trait_object_lifetime = true;\n                 }\n                 for bound in bounds {\n-                    self.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n+                    self.visit_poly_trait_ref(bound);\n                 }\n             },\n             _ => walk_ty(self, ty),"}]}