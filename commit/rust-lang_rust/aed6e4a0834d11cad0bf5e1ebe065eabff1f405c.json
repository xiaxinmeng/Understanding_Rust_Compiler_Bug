{"sha": "aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZDZlNGEwODM0ZDExY2FkMGJmNWUxZWJlMDY1ZWFiZmYxZjQwNWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-10T21:07:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T20:24:46Z"}, "message": "introduce a `UserTypeAnnotation` enum", "tree": {"sha": "25f4d86f919813d744870bf7e60c97d9ce37fddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25f4d86f919813d744870bf7e60c97d9ce37fddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "html_url": "https://github.com/rust-lang/rust/commit/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e339e84fffb3156aaa78fbf686436de02ba4cf48", "url": "https://api.github.com/repos/rust-lang/rust/commits/e339e84fffb3156aaa78fbf686436de02ba4cf48", "html_url": "https://github.com/rust-lang/rust/commit/e339e84fffb3156aaa78fbf686436de02ba4cf48"}], "stats": {"total": 214, "additions": 126, "deletions": 88}, "files": [{"sha": "38a298d81ddaa2361240d3580d67fccff69d53c2", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -587,3 +587,16 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::ClosureOutlivesSubj\n }\n \n impl_stable_hash_for!(struct mir::interpret::GlobalId<'tcx> { instance, promoted });\n+\n+impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::UserTypeAnnotation<'gcx> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+        match *self {\n+            mir::UserTypeAnnotation::Ty(ref ty) => {\n+                ty.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+}"}, {"sha": "eb4aa7ece49a0712a41207a47210cd07d57cea30", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -710,7 +710,7 @@ pub struct LocalDecl<'tcx> {\n     /// e.g. via `let x: T`, then we carry that type here. The MIR\n     /// borrow checker needs this information since it can affect\n     /// region inference.\n-    pub user_ty: Option<(CanonicalTy<'tcx>, Span)>,\n+    pub user_ty: Option<(UserTypeAnnotation<'tcx>, Span)>,\n \n     /// Name of the local, used in debuginfo and pretty-printing.\n     ///\n@@ -1737,7 +1737,7 @@ pub enum StatementKind<'tcx> {\n     /// - `Contravariant` -- requires that `T_y :> T`\n     /// - `Invariant` -- requires that `T_y == T`\n     /// - `Bivariant` -- no effect\n-    AscribeUserType(Place<'tcx>, ty::Variance, CanonicalTy<'tcx>),\n+    AscribeUserType(Place<'tcx>, ty::Variance, UserTypeAnnotation<'tcx>),\n \n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n@@ -2188,7 +2188,7 @@ pub enum AggregateKind<'tcx> {\n         &'tcx AdtDef,\n         usize,\n         &'tcx Substs<'tcx>,\n-        Option<CanonicalTy<'tcx>>,\n+        Option<UserTypeAnnotation<'tcx>>,\n         Option<usize>,\n     ),\n \n@@ -2392,7 +2392,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n /// this does not necessarily mean that they are \"==\" in Rust -- in\n /// particular one must be wary of `NaN`!\n \n-#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct Constant<'tcx> {\n     pub span: Span,\n     pub ty: Ty<'tcx>,\n@@ -2402,11 +2402,25 @@ pub struct Constant<'tcx> {\n     /// indicate that `Vec<_>` was explicitly specified.\n     ///\n     /// Needed for NLL to impose user-given type constraints.\n-    pub user_ty: Option<CanonicalTy<'tcx>>,\n+    pub user_ty: Option<UserTypeAnnotation<'tcx>>,\n \n     pub literal: &'tcx ty::Const<'tcx>,\n }\n \n+/// A user-given type annotation attached to a constant.  These arise\n+/// from constants that are named via paths, like `Foo::<A>::new` and\n+/// so forth.\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum UserTypeAnnotation<'tcx> {\n+    Ty(CanonicalTy<'tcx>),\n+}\n+\n+EnumTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for UserTypeAnnotation<'tcx> {\n+        (UserTypeAnnotation::Ty)(ty),\n+    }\n+}\n+\n newtype_index! {\n     pub struct Promoted {\n         DEBUG_FORMAT = \"promoted[{}]\""}, {"sha": "3e92b1fd7ce980b0d775d78d5698b8dca38f26b0", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use ty::subst::Substs;\n-use ty::{CanonicalTy, ClosureSubsts, GeneratorSubsts, Region, Ty};\n+use ty::{ClosureSubsts, GeneratorSubsts, Region, Ty};\n use mir::*;\n use syntax_pos::Span;\n \n@@ -147,9 +147,9 @@ macro_rules! make_mir_visitor {\n             fn visit_ascribe_user_ty(&mut self,\n                                      place: & $($mutability)* Place<'tcx>,\n                                      variance: & $($mutability)* ty::Variance,\n-                                     c_ty: & $($mutability)* CanonicalTy<'tcx>,\n+                                     user_ty: & $($mutability)* UserTypeAnnotation<'tcx>,\n                                      location: Location) {\n-                self.super_ascribe_user_ty(place, variance, c_ty, location);\n+                self.super_ascribe_user_ty(place, variance, user_ty, location);\n             }\n \n             fn visit_place(&mut self,\n@@ -214,8 +214,8 @@ macro_rules! make_mir_visitor {\n                 self.super_ty(ty);\n             }\n \n-            fn visit_user_ty(&mut self, ty: & $($mutability)* CanonicalTy<'tcx>) {\n-                self.super_canonical_ty(ty);\n+            fn visit_user_type_annotation(&mut self, ty: & $($mutability)* UserTypeAnnotation<'tcx>) {\n+                self.super_user_type_annotation(ty);\n             }\n \n             fn visit_region(&mut self,\n@@ -390,9 +390,9 @@ macro_rules! make_mir_visitor {\n                     StatementKind::AscribeUserType(\n                         ref $($mutability)* place,\n                         ref $($mutability)* variance,\n-                        ref $($mutability)* c_ty,\n+                        ref $($mutability)* user_ty,\n                     ) => {\n-                        self.visit_ascribe_user_ty(place, variance, c_ty, location);\n+                        self.visit_ascribe_user_ty(place, variance, user_ty, location);\n                     }\n                     StatementKind::Nop => {}\n                 }\n@@ -637,10 +637,10 @@ macro_rules! make_mir_visitor {\n             fn super_ascribe_user_ty(&mut self,\n                                      place: & $($mutability)* Place<'tcx>,\n                                      _variance: & $($mutability)* ty::Variance,\n-                                     c_ty: & $($mutability)* CanonicalTy<'tcx>,\n+                                     user_ty: & $($mutability)* UserTypeAnnotation<'tcx>,\n                                      location: Location) {\n                 self.visit_place(place, PlaceContext::Validate, location);\n-                self.visit_user_ty(c_ty);\n+                self.visit_user_type_annotation(user_ty);\n             }\n \n             fn super_place(&mut self,\n@@ -736,7 +736,7 @@ macro_rules! make_mir_visitor {\n                     source_info: *source_info,\n                 });\n                 if let Some((user_ty, _)) = user_ty {\n-                    self.visit_user_ty(user_ty);\n+                    self.visit_user_type_annotation(user_ty);\n                 }\n                 self.visit_source_info(source_info);\n                 self.visit_source_scope(visibility_scope);\n@@ -783,7 +783,7 @@ macro_rules! make_mir_visitor {\n                 self.visit_source_scope(scope);\n             }\n \n-            fn super_canonical_ty(&mut self, _ty: & $($mutability)* CanonicalTy<'tcx>) {\n+            fn super_user_type_annotation(&mut self, _ty: & $($mutability)* UserTypeAnnotation<'tcx>) {\n             }\n \n             fn super_ty(&mut self, _ty: & $($mutability)* Ty<'tcx>) {"}, {"sha": "30b263a923a7fc3f06f041cbeaa7907fbb03ac4e", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -18,9 +18,10 @@ use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, Rvalue};\n use rustc::mir::{Statement, Terminator};\n+use rustc::mir::UserTypeAnnotation;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorSubsts, RegionVid};\n+use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid};\n \n pub(super) fn generate_constraints<'cx, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'gcx, 'tcx>,\n@@ -179,7 +180,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n         &mut self,\n         _place: &Place<'tcx>,\n         _variance: &ty::Variance,\n-        _c_ty: &CanonicalTy<'tcx>,\n+        _user_ty: &UserTypeAnnotation<'tcx>,\n         _location: Location,\n     ) {\n     }"}, {"sha": "363afb87ed909f7c5654515778f6b4d4e5629409", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n-use rustc::mir::{BasicBlock, Location, Mir, Statement, StatementKind};\n+use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n+use rustc::mir::{BasicBlock, Location, Mir, Statement, StatementKind, UserTypeAnnotation};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n \n@@ -65,12 +65,12 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n-    fn visit_user_ty(&mut self, _ty: &mut CanonicalTy<'tcx>) {\n-        // `user_ty` annotations represent the types that the user\n+    fn visit_user_type_annotation(&mut self, _ty: &mut UserTypeAnnotation<'tcx>) {\n+        // User type annotations represent the types that the user\n         // wrote in the progarm. We don't want to erase the regions\n         // from these types: rather, we want to add them as\n         // constraints at type-check time.\n-        debug!(\"visit_user_ty: skipping renumber\");\n+        debug!(\"visit_user_type_annotation: skipping renumber\");\n     }\n \n     fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {"}, {"sha": "1e79bc272e4c0ba687dc58fe02a83375fcefc63a", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -43,7 +43,7 @@ use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, UnpackedKind};\n-use rustc::ty::{self, CanonicalTy, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind};\n+use rustc::ty::{self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind};\n use std::rc::Rc;\n use std::{fmt, iter};\n use syntax_pos::{Span, DUMMY_SP};\n@@ -966,7 +966,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         &mut self,\n         a: Ty<'tcx>,\n         v: ty::Variance,\n-        b: CanonicalTy<'tcx>,\n+        b: UserTypeAnnotation<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n@@ -1837,7 +1837,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     /// If this rvalue supports a user-given type annotation, then\n     /// extract and return it. This represents the final type of the\n     /// rvalue and will be unified with the inferred type.\n-    fn rvalue_user_ty(&self, rvalue: &Rvalue<'tcx>) -> Option<CanonicalTy<'tcx>> {\n+    fn rvalue_user_ty(&self, rvalue: &Rvalue<'tcx>) -> Option<UserTypeAnnotation<'tcx>> {\n         match rvalue {\n             Rvalue::Use(_)\n             | Rvalue::Repeat(..)"}, {"sha": "35d0b96b88a969f5aa33a884e22f44afae10d081", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -10,12 +10,12 @@\n \n use borrow_check::nll::constraints::OutlivesConstraint;\n use borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n-use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::infer::nll_relate::{TypeRelating, TypeRelatingDelegate};\n-use rustc::mir::ConstraintCategory;\n+use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n+use rustc::mir::{ConstraintCategory, UserTypeAnnotation};\n use rustc::traits::query::Fallible;\n use rustc::ty::relate::TypeRelation;\n-use rustc::ty::{self, CanonicalTy, Ty};\n+use rustc::ty::{self, Ty};\n use syntax_pos::DUMMY_SP;\n \n /// Adds sufficient constraints to ensure that `a <: b`.\n@@ -61,20 +61,21 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n     a: Ty<'tcx>,\n     v: ty::Variance,\n-    canonical_b: CanonicalTy<'tcx>,\n+    user_ty: UserTypeAnnotation<'tcx>,\n     locations: Locations,\n     category: ConstraintCategory,\n     borrowck_context: Option<&mut BorrowCheckContext<'_, 'tcx>>,\n ) -> Fallible<Ty<'tcx>> {\n     debug!(\n         \"relate_type_and_user_type(a={:?}, v={:?}, b={:?}, locations={:?})\",\n-        a, v, canonical_b, locations\n+        a, v, user_ty, locations\n     );\n \n-    let (b, _values) = infcx.instantiate_canonical_with_fresh_inference_vars(\n-        DUMMY_SP,\n-        &canonical_b,\n-    );\n+    let (b, _values) = match user_ty {\n+        UserTypeAnnotation::Ty(canonical_ty) => {\n+            infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_ty)\n+        }\n+    };\n \n     // The `TypeRelating` code assumes that the \"canonical variables\"\n     // appear in the \"a\" side, so flip `Contravariant` ambient"}, {"sha": "99c0a52a8ee36c91c56380b6d4882452f6fc9098", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -20,7 +20,7 @@ use build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use hair::*;\n use rustc::hir;\n use rustc::mir::*;\n-use rustc::ty::{self, CanonicalTy, Ty};\n+use rustc::ty::{self, Ty};\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::{Name, NodeId};\n@@ -491,7 +491,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn visit_bindings(\n         &mut self,\n         pattern: &Pattern<'tcx>,\n-        mut pattern_user_ty: Option<(CanonicalTy<'tcx>, Span)>,\n+        mut pattern_user_ty: Option<(UserTypeAnnotation<'tcx>, Span)>,\n         f: &mut impl FnMut(\n             &mut Self,\n             Mutability,\n@@ -500,7 +500,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             NodeId,\n             Span,\n             Ty<'tcx>,\n-            Option<(CanonicalTy<'tcx>, Span)>,\n+            Option<(UserTypeAnnotation<'tcx>, Span)>,\n         ),\n     ) {\n         match *pattern.kind {\n@@ -626,7 +626,7 @@ struct Binding<'tcx> {\n struct Ascription<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n-    user_ty: CanonicalTy<'tcx>,\n+    user_ty: UserTypeAnnotation<'tcx>,\n }\n \n #[derive(Clone, Debug)]\n@@ -1470,7 +1470,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         num_patterns: usize,\n         var_id: NodeId,\n         var_ty: Ty<'tcx>,\n-        user_var_ty: Option<(CanonicalTy<'tcx>, Span)>,\n+        user_var_ty: Option<(UserTypeAnnotation<'tcx>, Span)>,\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n         pat_span: Span,"}, {"sha": "9865867a196ca3b34f5899cf6b6bc6e7eb0ba472", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -86,12 +86,12 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         let mut pattern = cx.pattern_from_hir(&local.pat);\n \n                         if let Some(ty) = &local.ty {\n-                            if let Some(user_ty) = cx.tables.user_provided_tys().get(ty.hir_id) {\n+                            if let Some(&user_ty) = cx.tables.user_provided_tys().get(ty.hir_id) {\n                                 pattern = Pattern {\n                                     ty: pattern.ty,\n                                     span: pattern.span,\n                                     kind: Box::new(PatternKind::AscribeUserType {\n-                                        user_ty: *user_ty,\n+                                        user_ty: UserTypeAnnotation::Ty(user_ty),\n                                         user_ty_span: ty.span,\n                                         subpattern: pattern\n                                     })"}, {"sha": "4dc43a533cfc5036b57d1bbebc7e2e0ab130643b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -296,11 +296,11 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n                     let user_ty = cx.tables().user_substs(fun.hir_id)\n                         .map(|user_substs| {\n-                            user_substs.unchecked_map(|user_substs| {\n+                            UserTypeAnnotation::Ty(user_substs.unchecked_map(|user_substs| {\n                                 // Here, we just pair an `AdtDef` with the\n                                 // `user_substs`, so no new types etc are introduced.\n                                 cx.tcx().mk_adt(adt_def, user_substs)\n-                            })\n+                            }))\n                         });\n \n                     let field_refs = args.iter()\n@@ -725,9 +725,11 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         }\n         hir::ExprKind::Type(ref source, ref ty) => {\n             let user_provided_tys = cx.tables.user_provided_tys();\n-            let user_ty = *user_provided_tys\n-                .get(ty.hir_id)\n-                .expect(&format!(\"{:?} not found in user_provided_tys, source: {:?}\", ty, source));\n+            let user_ty = UserTypeAnnotation::Ty(\n+                *user_provided_tys\n+                    .get(ty.hir_id)\n+                    .expect(&format!(\"{:?} not found in user_provided_tys, source: {:?}\", ty, source))\n+            );\n             if source.is_place_expr() {\n                 ExprKind::PlaceTypeAscription {\n                     source: source.to_ref(),\n@@ -763,7 +765,7 @@ fn user_substs_applied_to_def(\n     cx: &mut Cx<'a, 'gcx, 'tcx>,\n     hir_id: hir::HirId,\n     def: &Def,\n-) -> Option<CanonicalTy<'tcx>> {\n+) -> Option<UserTypeAnnotation<'tcx>> {\n     match def {\n         // A reference to something callable -- e.g., a fn, method, or\n         // a tuple-struct or tuple-variant. This has the type of a\n@@ -772,11 +774,14 @@ fn user_substs_applied_to_def(\n         Def::Method(_) |\n         Def::StructCtor(_, CtorKind::Fn) |\n         Def::VariantCtor(_, CtorKind::Fn) =>\n-            Some(cx.tables().user_substs(hir_id)?.unchecked_map(|user_substs| {\n-                // Here, we just pair a `DefId` with the\n-                // `user_substs`, so no new types etc are introduced.\n-                cx.tcx().mk_fn_def(def.def_id(), user_substs)\n-            })),\n+            Some(\n+                UserTypeAnnotation::Ty(cx.tables().user_substs(hir_id)?.unchecked_map(|user_substs| {\n+                        // Here, we just pair a `DefId` with the\n+                        // `user_substs`, so no new types etc are introduced.\n+                        cx.tcx().mk_fn_def(def.def_id(), user_substs)\n+                    }),\n+                )\n+            ),\n \n         Def::Const(_def_id) |\n         Def::AssociatedConst(_def_id) =>"}, {"sha": "781b6c92aa13a859b00691c0bf1baa68606b8d97", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -14,11 +14,11 @@\n //! unit-tested and separated from the Rust source and compiler data\n //! structures.\n \n-use rustc::mir::{BinOp, BorrowKind, Field, UnOp};\n+use rustc::mir::{BinOp, BorrowKind, UserTypeAnnotation, Field, UnOp};\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{AdtDef, CanonicalTy, UpvarSubsts, Region, Ty, Const};\n+use rustc::ty::{AdtDef, UpvarSubsts, Region, Ty, Const};\n use rustc::hir;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -268,20 +268,20 @@ pub enum ExprKind<'tcx> {\n \n         /// Optional user-given substs: for something like `let x =\n         /// Bar::<T> { ... }`.\n-        user_ty: Option<CanonicalTy<'tcx>>,\n+        user_ty: Option<UserTypeAnnotation<'tcx>>,\n \n         fields: Vec<FieldExprRef<'tcx>>,\n         base: Option<FruInfo<'tcx>>\n     },\n     PlaceTypeAscription {\n         source: ExprRef<'tcx>,\n         /// Type that the user gave to this expression\n-        user_ty: CanonicalTy<'tcx>,\n+        user_ty: UserTypeAnnotation<'tcx>,\n     },\n     ValueTypeAscription {\n         source: ExprRef<'tcx>,\n         /// Type that the user gave to this expression\n-        user_ty: CanonicalTy<'tcx>,\n+        user_ty: UserTypeAnnotation<'tcx>,\n     },\n     Closure {\n         closure_id: DefId,\n@@ -291,13 +291,7 @@ pub enum ExprKind<'tcx> {\n     },\n     Literal {\n         literal: &'tcx Const<'tcx>,\n-\n-        /// Optional user-given type: for something like\n-        /// `collect::<Vec<_>>`, this would be present and would\n-        /// indicate that `Vec<_>` was explicitly specified.\n-        ///\n-        /// Needed for NLL to impose user-given type constraints.\n-        user_ty: Option<CanonicalTy<'tcx>>,\n+        user_ty: Option<UserTypeAnnotation<'tcx>>,\n     },\n     InlineAsm {\n         asm: &'tcx hir::InlineAsm,"}, {"sha": "cb974366a3029b7560f86c72f0379f735e00db0c", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -20,9 +20,9 @@ use const_eval::{const_field, const_variant_index};\n \n use hair::util::UserAnnotatedTyHelpers;\n \n-use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n+use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability, UserTypeAnnotation};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n-use rustc::ty::{self, CanonicalTy, TyCtxt, AdtDef, Ty, Region};\n+use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty};\n use rustc::ty::subst::{Substs, Kind};\n use rustc::hir::{self, PatKind, RangeEnd};\n use rustc::hir::def::{Def, CtorKind};\n@@ -69,7 +69,7 @@ pub enum PatternKind<'tcx> {\n     Wild,\n \n     AscribeUserType {\n-        user_ty: CanonicalTy<'tcx>,\n+        user_ty: UserTypeAnnotation<'tcx>,\n         subpattern: Pattern<'tcx>,\n         user_ty_span: Span,\n     },\n@@ -980,7 +980,7 @@ macro_rules! CloneImpls {\n CloneImpls!{ <'tcx>\n     Span, Field, Mutability, ast::Name, ast::NodeId, usize, &'tcx ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode<'tcx>, &'tcx AdtDef,\n-    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, CanonicalTy<'tcx>\n+    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserTypeAnnotation<'tcx>\n }\n \n impl<'tcx> PatternFoldable<'tcx> for FieldPattern<'tcx> {"}, {"sha": "46a957f453cbb6f397e0fb5d8b7d70ab1057ae13", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n use rustc::hir;\n-use rustc::ty::{self, AdtDef, CanonicalTy, TyCtxt};\n+use rustc::mir::UserTypeAnnotation;\n+use rustc::ty::{self, AdtDef, TyCtxt};\n \n crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'_, 'gcx, 'tcx>;\n@@ -20,32 +21,41 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n         &self,\n         hir_id: hir::HirId,\n         adt_def: &'tcx AdtDef,\n-    ) -> Option<CanonicalTy<'tcx>> {\n+    ) -> Option<UserTypeAnnotation<'tcx>> {\n         let user_substs = self.tables().user_substs(hir_id)?;\n-        Some(user_substs.unchecked_map(|user_substs| {\n-            // Here, we just pair an `AdtDef` with the\n-            // `user_substs`, so no new types etc are introduced.\n-            self.tcx().mk_adt(adt_def, user_substs)\n-        }))\n+        Some(UserTypeAnnotation::Ty(user_substs.unchecked_map(\n+            |user_substs| {\n+                // Here, we just pair an `AdtDef` with the\n+                // `user_substs`, so no new types etc are introduced.\n+                self.tcx().mk_adt(adt_def, user_substs)\n+            },\n+        )))\n     }\n \n     /// Looks up the type associated with this hir-id and applies the\n     /// user-given substitutions; the hir-id must map to a suitable\n     /// type.\n-    fn user_substs_applied_to_ty_of_hir_id(&self, hir_id: hir::HirId) -> Option<CanonicalTy<'tcx>> {\n+    fn user_substs_applied_to_ty_of_hir_id(\n+        &self,\n+        hir_id: hir::HirId,\n+    ) -> Option<UserTypeAnnotation<'tcx>> {\n         let user_substs = self.tables().user_substs(hir_id)?;\n         match &self.tables().node_id_to_type(hir_id).sty {\n-            ty::Adt(adt_def, _) => Some(user_substs.unchecked_map(|user_substs| {\n-                // Ok to call `unchecked_map` because we just pair an\n-                // `AdtDef` with the `user_substs`, so no new types\n-                // etc are introduced.\n-                self.tcx().mk_adt(adt_def, user_substs)\n-            })),\n-            ty::FnDef(def_id, _) => Some(user_substs.unchecked_map(|user_substs| {\n-                // Here, we just pair a `DefId` with the\n-                // `user_substs`, so no new types etc are introduced.\n-                self.tcx().mk_fn_def(*def_id, user_substs)\n-            })),\n+            ty::Adt(adt_def, _) => Some(UserTypeAnnotation::Ty(user_substs.unchecked_map(\n+                |user_substs| {\n+                    // Ok to call `unchecked_map` because we just pair an\n+                    // `AdtDef` with the `user_substs`, so no new types\n+                    // etc are introduced.\n+                    self.tcx().mk_adt(adt_def, user_substs)\n+                },\n+            ))),\n+            ty::FnDef(def_id, _) => Some(UserTypeAnnotation::Ty(user_substs.unchecked_map(\n+                |user_substs| {\n+                    // Here, we just pair a `DefId` with the\n+                    // `user_substs`, so no new types etc are introduced.\n+                    self.tcx().mk_fn_def(*def_id, user_substs)\n+                },\n+            ))),\n             sty => bug!(\n                 \"sty: {:?} should not have user-substs {:?} recorded \",\n                 sty,"}]}