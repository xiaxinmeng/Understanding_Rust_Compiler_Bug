{"sha": "751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MWJjZjVmYTA4ZWU1YzViYTE1NmU0M2M3ZjgzMjdmNzk2OGIwMmY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-15T11:36:39Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-15T14:59:08Z"}, "message": "Clippy", "tree": {"sha": "e09c906d3e3a2f64c60c10e23a83d0cd9648f1d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e09c906d3e3a2f64c60c10e23a83d0cd9648f1d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "html_url": "https://github.com/rust-lang/rust/commit/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d55729987ff798b49838e5b5707cfca807b5b6b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d55729987ff798b49838e5b5707cfca807b5b6b7", "html_url": "https://github.com/rust-lang/rust/commit/d55729987ff798b49838e5b5707cfca807b5b6b7"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "aacfa12d437eade62c6277f0ce8dff9944fdc4a0", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "patch": "@@ -83,7 +83,7 @@ fn main() {\n     );\n \n     if let Err(e) = run(&opts) {\n-        println!(\"{}\", opts.usage(&format!(\"{}\", e)));\n+        println!(\"{}\", opts.usage(&e.to_string()));\n         process::exit(1);\n     }\n }"}, {"sha": "b35e8ea4587836b0f1c10066b8a8e57d9c72e3fb", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "patch": "@@ -1543,7 +1543,7 @@ pub fn rewrite_struct_field_prefix(\n             rewrite_ident(context, name),\n             type_annotation_spacing.0\n         ),\n-        None => format!(\"{}\", vis),\n+        None => vis.to_string(),\n     })\n }\n \n@@ -2004,18 +2004,13 @@ fn rewrite_fn_base(\n         one_line_budget, multi_line_budget, arg_indent\n     );\n \n+    result.push('(');\n     // Check if vertical layout was forced.\n-    if one_line_budget == 0 {\n-        if snuggle_angle_bracket {\n-            result.push('(');\n-        } else {\n-            result.push_str(\"(\");\n-            if context.config.indent_style() == IndentStyle::Visual {\n-                result.push_str(&arg_indent.to_string_with_newline(context.config));\n-            }\n-        }\n-    } else {\n-        result.push('(');\n+    if one_line_budget == 0\n+        && !snuggle_angle_bracket\n+        && context.config.indent_style() == IndentStyle::Visual\n+    {\n+        result.push_str(&arg_indent.to_string_with_newline(context.config));\n     }\n \n     // Skip `pub(crate)`."}, {"sha": "92990fe9a1715fc9b2e7d7488b73e65412abab1c", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "patch": "@@ -50,7 +50,7 @@ impl<'a> ListFormatting<'a> {\n             ends_with_newline: true,\n             preserve_newline: false,\n             nested: false,\n-            config: config,\n+            config,\n         }\n     }\n "}, {"sha": "1e668cf1d8724ed58ab736850618650907206058", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "patch": "@@ -1073,7 +1073,7 @@ fn next_space(tok: &Token) -> SpaceState {\n /// when the macro is not an instance of try! (or parsing the inner expression\n /// failed).\n pub fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext) -> Option<ast::Expr> {\n-    if &format!(\"{}\", mac.node.path) == \"try\" {\n+    if &mac.node.path.to_string() == \"try\" {\n         let ts: TokenStream = mac.node.tts.clone().into();\n         let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n \n@@ -1491,5 +1491,5 @@ fn rewrite_macro_with_items(\n     result.push_str(&shape.indent.to_string_with_newline(context.config));\n     result.push_str(closer);\n     result.push_str(trailing_semicolon);\n-    return Some(result);\n+    Some(result)\n }"}, {"sha": "053ce1b921285b1b24c45ae894f9e7de7361a887", "filename": "src/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "patch": "@@ -425,7 +425,7 @@ impl<'a> Context<'a> {\n                     _ => expr.rewrite(self.context, shape),\n                 }\n             }\n-            item @ _ => item.rewrite(self.context, shape),\n+            item => item.rewrite(self.context, shape),\n         };\n \n         if let Some(rewrite) = rewrite {"}, {"sha": "ed081adcd86d171e09a26dfe2aed3387dd224323", "filename": "src/source_map.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_map.rs?ref=751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "patch": "@@ -51,11 +51,13 @@ impl<'a> SpanUtils for SnippetProvider<'a> {\n     }\n \n     fn span_before(&self, original: Span, needle: &str) -> BytePos {\n-        self.opt_span_before(original, needle).expect(&format!(\n-            \"bad span: {}: {}\",\n-            needle,\n-            self.span_to_snippet(original).unwrap()\n-        ))\n+        self.opt_span_before(original, needle).unwrap_or_else(|| {\n+            panic!(\n+                \"bad span: {}: {}\",\n+                needle,\n+                self.span_to_snippet(original).unwrap()\n+            )\n+        })\n     }\n \n     fn opt_span_after(&self, original: Span, needle: &str) -> Option<BytePos> {"}, {"sha": "2ff3b7e525a3095e006eadea15203f94d15c9c79", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "patch": "@@ -45,7 +45,7 @@ pub fn is_same_visibility(a: &Visibility, b: &Visibility) -> bool {\n         (\n             VisibilityKind::Restricted { path: p, .. },\n             VisibilityKind::Restricted { path: q, .. },\n-        ) => format!(\"{}\", p) == format!(\"{}\", q),\n+        ) => p.to_string() == q.to_string(),\n         (VisibilityKind::Public, VisibilityKind::Public)\n         | (VisibilityKind::Inherited, VisibilityKind::Inherited)\n         | ("}, {"sha": "63e2c6bdcac57c88c8128682b20880aaa8975a67", "filename": "src/visitor.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751bcf5fa08ee5c5ba156e43c7f8327f7968b02f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=751bcf5fa08ee5c5ba156e43c7f8327f7968b02f", "patch": "@@ -112,7 +112,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 if contains_skip(get_attrs_from_stmt(stmt)) {\n                     self.push_skipped_with_span(stmt.span());\n                 } else {\n-                    let shape = self.shape().clone();\n+                    let shape = self.shape();\n                     let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n                     self.push_rewrite(stmt.span(), rewrite)\n                 }\n@@ -367,13 +367,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n                     .map(|x| BytePos(x as u32) + source!(self, item.span).lo());\n-                let block_indent = self.block_indent.clone();\n+                let block_indent = self.block_indent;\n                 let rw =\n                     self.with_context(|ctx| format_impl(&ctx, item, block_indent, where_span_end));\n                 self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::Trait(..) => {\n-                let block_indent = self.block_indent.clone();\n+                let block_indent = self.block_indent;\n                 let rw = self.with_context(|ctx| format_trait(&ctx, item, block_indent));\n                 self.push_rewrite(item.span, rw);\n             }\n@@ -652,20 +652,19 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         ErrorKind::DeprecatedAttr,\n                     )],\n                 );\n-            } else if attr.path.segments[0].ident.to_string() == \"rustfmt\" {\n-                if attr.path.segments.len() == 1\n-                    || attr.path.segments[1].ident.to_string() != \"skip\"\n-                {\n-                    let file_name = self.source_map.span_to_filename(attr.span).into();\n-                    self.report.append(\n-                        file_name,\n-                        vec![FormattingError::from_span(\n-                            attr.span,\n-                            &self.source_map,\n-                            ErrorKind::BadAttr,\n-                        )],\n-                    );\n-                }\n+            } else if attr.path.segments[0].ident.to_string() == \"rustfmt\"\n+                && (attr.path.segments.len() == 1\n+                    || attr.path.segments[1].ident.to_string() != \"skip\")\n+            {\n+                let file_name = self.source_map.span_to_filename(attr.span).into();\n+                self.report.append(\n+                    file_name,\n+                    vec![FormattingError::from_span(\n+                        attr.span,\n+                        &self.source_map,\n+                        ErrorKind::BadAttr,\n+                    )],\n+                );\n             }\n         }\n         if contains_skip(attrs) {"}]}