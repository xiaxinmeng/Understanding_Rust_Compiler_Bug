{"sha": "afc2149c05c7f56602fc63af64b4ffe6223e5114", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYzIxNDljMDVjN2Y1NjYwMmZjNjNhZjY0YjRmZmU2MjIzZTUxMTQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-12T07:31:00Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-15T19:48:10Z"}, "message": "rustc: support extern crates loaded after query engine creation.", "tree": {"sha": "e7ab5ce0ba62e939dfda7358611a61766346c653", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ab5ce0ba62e939dfda7358611a61766346c653"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afc2149c05c7f56602fc63af64b4ffe6223e5114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afc2149c05c7f56602fc63af64b4ffe6223e5114", "html_url": "https://github.com/rust-lang/rust/commit/afc2149c05c7f56602fc63af64b4ffe6223e5114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afc2149c05c7f56602fc63af64b4ffe6223e5114/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f53c87b4b1f097e111c9525d60470ed22631018", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f53c87b4b1f097e111c9525d60470ed22631018", "html_url": "https://github.com/rust-lang/rust/commit/9f53c87b4b1f097e111c9525d60470ed22631018"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "6738267b5b8c809ef5f987b39d88c0ddce10bc6f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afc2149c05c7f56602fc63af64b4ffe6223e5114/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc2149c05c7f56602fc63af64b4ffe6223e5114/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=afc2149c05c7f56602fc63af64b4ffe6223e5114", "patch": "@@ -1247,7 +1247,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     .collect(),\n             hir,\n             def_path_hash_to_def_id,\n-            queries: query::Queries::new(providers, on_disk_query_result_cache),\n+            queries: query::Queries::new(\n+                providers,\n+                extern_providers,\n+                on_disk_query_result_cache,\n+            ),\n             rcache: Lock::new(FxHashMap()),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),"}, {"sha": "25e72f462e680006634de0636a81e0e6e10b0181", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afc2149c05c7f56602fc63af64b4ffe6223e5114/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc2149c05c7f56602fc63af64b4ffe6223e5114/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=afc2149c05c7f56602fc63af64b4ffe6223e5114", "patch": "@@ -692,10 +692,12 @@ macro_rules! define_queries_inner {\n         impl<$tcx> Queries<$tcx> {\n             pub fn new(\n                 providers: IndexVec<CrateNum, Providers<$tcx>>,\n+                fallback_extern_providers: Providers<$tcx>,\n                 on_disk_cache: OnDiskCache<'tcx>,\n             ) -> Self {\n                 Queries {\n                     providers,\n+                    fallback_extern_providers: Box::new(fallback_extern_providers),\n                     on_disk_cache,\n                     $($name: Lock::new(QueryCache::new())),*\n                 }\n@@ -818,7 +820,13 @@ macro_rules! define_queries_inner {\n             #[inline]\n             fn compute(tcx: TyCtxt<'_, 'tcx, '_>, key: Self::Key) -> Self::Value {\n                 __query_compute::$name(move || {\n-                    let provider = tcx.queries.providers[key.query_crate()].$name;\n+                    let provider = tcx.queries.providers.get(key.query_crate())\n+                        // HACK(eddyb) it's possible crates may be loaded after\n+                        // the query engine is created, and because crate loading\n+                        // is not yet integrated with the query engine, such crates\n+                        // would be be missing appropriate entries in `providers`.\n+                        .unwrap_or(&tcx.queries.fallback_extern_providers)\n+                        .$name;\n                     provider(tcx.global_tcx(), key)\n                 })\n             }\n@@ -899,6 +907,7 @@ macro_rules! define_queries_struct {\n             pub(crate) on_disk_cache: OnDiskCache<'tcx>,\n \n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n+            fallback_extern_providers: Box<Providers<$tcx>>,\n \n             $($(#[$attr])*  $name: Lock<QueryCache<$tcx, queries::$name<$tcx>>>,)*\n         }"}]}