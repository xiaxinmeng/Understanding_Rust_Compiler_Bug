{"sha": "15ec5d26084fe13c984b4e6c2933e048e070680c", "node_id": "C_kwDOAAsO6NoAKDE1ZWM1ZDI2MDg0ZmUxM2M5ODRiNGU2YzI5MzNlMDQ4ZTA3MDY4MGM", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-18T19:26:23Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-18T19:26:23Z"}, "message": "further refactor", "tree": {"sha": "00980b709051439570650f33840145a100d20d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00980b709051439570650f33840145a100d20d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ec5d26084fe13c984b4e6c2933e048e070680c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ec5d26084fe13c984b4e6c2933e048e070680c", "html_url": "https://github.com/rust-lang/rust/commit/15ec5d26084fe13c984b4e6c2933e048e070680c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ec5d26084fe13c984b4e6c2933e048e070680c/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf8870eeadf4ce73c5e7dfed071fbc41231aa324", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8870eeadf4ce73c5e7dfed071fbc41231aa324", "html_url": "https://github.com/rust-lang/rust/commit/bf8870eeadf4ce73c5e7dfed071fbc41231aa324"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "26b6898e588029e74efc69848a6f892c4e6ccb5b", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/15ec5d26084fe13c984b4e6c2933e048e070680c/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ec5d26084fe13c984b4e6c2933e048e070680c/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=15ec5d26084fe13c984b4e6c2933e048e070680c", "patch": "@@ -232,36 +232,29 @@ fn emit_return_lint(\n     if ret_span.from_expansion() {\n         return;\n     }\n-    if let Some(inner_span) = inner_span {\n-        let mut applicability = Applicability::MachineApplicable;\n-        span_lint_hir_and_then(\n-            cx,\n-            NEEDLESS_RETURN,\n-            emission_place,\n-            ret_span,\n-            \"unneeded `return` statement\",\n-            |diag| {\n-                let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n-                diag.span_suggestion(ret_span, \"remove `return`\", snippet, applicability);\n-            },\n-        );\n+    let mut applicability = Applicability::MachineApplicable;\n+    let return_replacement = inner_span.map_or_else(\n+        || replacement.to_string(),\n+        |inner_span| {\n+            let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n+            snippet.to_string()\n+        },\n+    );\n+    let sugg_help = if inner_span.is_some() {\n+        \"remove `return`\"\n     } else {\n-        span_lint_hir_and_then(\n-            cx,\n-            NEEDLESS_RETURN,\n-            emission_place,\n-            ret_span,\n-            \"unneeded `return` statement\",\n-            |diag| {\n-                diag.span_suggestion(\n-                    ret_span,\n-                    replacement.sugg_help(),\n-                    replacement.to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n-            },\n-        )\n-    }\n+        replacement.sugg_help()\n+    };\n+    span_lint_hir_and_then(\n+        cx,\n+        NEEDLESS_RETURN,\n+        emission_place,\n+        ret_span,\n+        \"unneeded `return` statement\",\n+        |diag| {\n+            diag.span_suggestion(ret_span, sugg_help, return_replacement, applicability);\n+        },\n+    );\n }\n \n fn last_statement_borrows<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {"}]}