{"sha": "e051eb32c2ed802a51d02c33cec6c8fe07516918", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNTFlYjMyYzJlZDgwMmE1MWQwMmMzM2NlYzZjOGZlMDc1MTY5MTg=", "commit": {"author": {"name": "Mathieu Border\u00e9", "email": "mathieu@Mathieus-MacBook-Pro.local", "date": "2016-10-04T21:25:00Z"}, "committer": {"name": "Mathieu Border\u00e9", "email": "mathieu@Mathieus-MacBook-Pro.local", "date": "2016-10-05T04:46:04Z"}, "message": "ICH - Include omitted elements in inc. comp. hash #36914", "tree": {"sha": "56aa9aa77103898d9fe3ca45f75700aced5c9d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56aa9aa77103898d9fe3ca45f75700aced5c9d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e051eb32c2ed802a51d02c33cec6c8fe07516918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e051eb32c2ed802a51d02c33cec6c8fe07516918", "html_url": "https://github.com/rust-lang/rust/commit/e051eb32c2ed802a51d02c33cec6c8fe07516918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e051eb32c2ed802a51d02c33cec6c8fe07516918/comments", "author": null, "committer": null, "parents": [{"sha": "9081c003d32f0ae7cf5d5df394e92721ec559bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9081c003d32f0ae7cf5d5df394e92721ec559bcc", "html_url": "https://github.com/rust-lang/rust/commit/9081c003d32f0ae7cf5d5df394e92721ec559bcc"}], "stats": {"total": 162, "additions": 146, "deletions": 16}, "files": [{"sha": "603a7fc40eb4f82d4453ad52c9bb0ae700a47fa7", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 146, "deletions": 16, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/e051eb32c2ed802a51d02c33cec6c8fe07516918/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e051eb32c2ed802a51d02c33cec6c8fe07516918/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=e051eb32c2ed802a51d02c33cec6c8fe07516918", "patch": "@@ -15,6 +15,11 @@\n \n use self::SawExprComponent::*;\n use self::SawAbiComponent::*;\n+use self::SawItemComponent::*;\n+use self::SawPatComponent::*;\n+use self::SawTyComponent::*;\n+use self::SawTraitOrImplItemComponent::*;\n+use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::parse::token;\n use syntax_pos::{Span, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos};\n@@ -155,19 +160,19 @@ enum SawAbiComponent<'a> {\n \n     SawMod,\n     SawForeignItem,\n-    SawItem,\n-    SawTy,\n+    SawItem(SawItemComponent),\n+    SawTy(SawTyComponent),\n     SawGenerics,\n-    SawTraitItem,\n-    SawImplItem,\n+    SawTraitItem(SawTraitOrImplItemComponent),\n+    SawImplItem(SawTraitOrImplItemComponent),\n     SawStructField,\n     SawVariant,\n     SawPath(bool),\n     SawPathSegment,\n     SawPathParameters,\n     SawPathListItem,\n     SawBlock,\n-    SawPat,\n+    SawPat(SawPatComponent),\n     SawLocal,\n     SawArm,\n     SawExpr(SawExprComponent<'a>),\n@@ -198,6 +203,9 @@ enum SawAbiComponent<'a> {\n /// because the SVH is just a developer convenience; there is no\n /// guarantee of collision-freedom, hash collisions are just\n /// (hopefully) unlikely.)\n+///\n+/// The xxxComponent enums and saw_xxx functions for Item, Pat,\n+/// Ty, TraitItem and ImplItem follow the same methodology.\n #[derive(Hash)]\n enum SawExprComponent<'a> {\n \n@@ -267,6 +275,134 @@ fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n     }\n }\n \n+#[derive(Hash)]\n+enum SawItemComponent {\n+    SawItemExternCrate,\n+    SawItemUse,\n+    SawItemStatic(Mutability),\n+    SawItemConst,\n+    SawItemFn(Unsafety, Constness, Abi),\n+    SawItemMod,\n+    SawItemForeignMod,\n+    SawItemTy,\n+    SawItemEnum,\n+    SawItemStruct,\n+    SawItemUnion,\n+    SawItemTrait(Unsafety),\n+    SawItemDefaultImpl(Unsafety),\n+    SawItemImpl(Unsafety, ImplPolarity)\n+}\n+\n+fn saw_item(node: &Item_) -> SawItemComponent {\n+    match *node {\n+        ItemExternCrate(..) => SawItemExternCrate,\n+        ItemUse(..) => SawItemUse,\n+        ItemStatic(_, mutability, _) => SawItemStatic(mutability),\n+        ItemConst(..) =>SawItemConst,\n+        ItemFn(_, unsafety, constness, abi, _, _) => SawItemFn(unsafety, constness, abi),\n+        ItemMod(..) => SawItemMod,\n+        ItemForeignMod(..) => SawItemForeignMod,\n+        ItemTy(..) => SawItemTy,\n+        ItemEnum(..) => SawItemEnum,\n+        ItemStruct(..) => SawItemStruct,\n+        ItemUnion(..) => SawItemUnion,\n+        ItemTrait(unsafety, ..) => SawItemTrait(unsafety),\n+        ItemDefaultImpl(unsafety, _) => SawItemDefaultImpl(unsafety),\n+        ItemImpl(unsafety, implpolarity, ..) => SawItemImpl(unsafety, implpolarity)\n+    }\n+}\n+\n+#[derive(Hash)]\n+enum SawPatComponent {\n+    SawPatWild,\n+    SawPatBinding(BindingMode),\n+    SawPatStruct,\n+    SawPatTupleStruct,\n+    SawPatPath,\n+    SawPatTuple,\n+    SawPatBox,\n+    SawPatRef(Mutability),\n+    SawPatLit,\n+    SawPatRange,\n+    SawPathVec\n+}\n+\n+fn saw_pat(node: &PatKind) -> SawPatComponent {\n+    match *node {\n+        PatKind::Wild => SawPatWild,\n+        PatKind::Binding(bindingmode, ..) => SawPatBinding(bindingmode),\n+        PatKind::Struct(..) => SawPatStruct,\n+        PatKind::TupleStruct(..) => SawPatTupleStruct,\n+        PatKind::Path(..) => SawPatPath,\n+        PatKind::Tuple(..) => SawPatTuple,\n+        PatKind::Box(..) => SawPatBox,\n+        PatKind::Ref(_, mutability) => SawPatRef(mutability),\n+        PatKind::Lit(..) => SawPatLit,\n+        PatKind::Range(..) => SawPatRange,\n+        PatKind::Vec(..) => SawPathVec\n+    }\n+}\n+\n+#[derive(Hash)]\n+enum SawTyComponent {\n+    SawTyVec,\n+    SawTyFixedLengthVec,\n+    SawTyPtr(Mutability),\n+    SawTyRptr(Mutability),\n+    SawTyBareFn,\n+    SawTyNever,\n+    SawTyTup,\n+    SawTyPath,\n+    SawTyObjectSum,\n+    SawTyPolyTraitRef,\n+    SawTyImplTrait,\n+    SawTyTypeof,\n+    SawTyInfer\n+}\n+\n+fn saw_ty(node: &Ty_) -> SawTyComponent {\n+    match *node {\n+      TyVec(..) => SawTyVec,\n+      TyFixedLengthVec(..) => SawTyFixedLengthVec,\n+      TyPtr(ref mty) => SawTyPtr(mty.mutbl),\n+      TyRptr(_, ref mty) => SawTyRptr(mty.mutbl),\n+      TyBareFn(..) => SawTyBareFn,\n+      TyNever => SawTyNever,\n+      TyTup(..) => SawTyTup,\n+      TyPath(..) => SawTyPath,\n+      TyObjectSum(..) => SawTyObjectSum,\n+      TyPolyTraitRef(..) => SawTyPolyTraitRef,\n+      TyImplTrait(..) => SawTyImplTrait,\n+      TyTypeof(..) => SawTyTypeof,\n+      TyInfer => SawTyInfer\n+    }\n+}\n+\n+#[derive(Hash)]\n+enum SawTraitOrImplItemComponent {\n+    SawTraitOrImplItemConst,\n+    SawTraitOrImplItemMethod(Unsafety, Constness, Abi),\n+    SawTraitOrImplItemType\n+}\n+\n+fn saw_trait_item(ti: &TraitItem_) -> SawTraitOrImplItemComponent {\n+    match *ti {\n+        ConstTraitItem(..) => SawTraitOrImplItemConst,\n+        MethodTraitItem(ref sig, _) =>\n+            SawTraitOrImplItemMethod(sig.unsafety, sig.constness, sig.abi),\n+        TypeTraitItem(..) => SawTraitOrImplItemType\n+    }\n+}\n+\n+fn saw_impl_item(ii: &ImplItemKind) -> SawTraitOrImplItemComponent {\n+    match *ii {\n+        ImplItemKind::Const(..) => SawTraitOrImplItemConst,\n+        ImplItemKind::Method(ref sig, _) =>\n+            SawTraitOrImplItemMethod(sig.unsafety, sig.constness, sig.abi),\n+        ImplItemKind::Type(..) => SawTraitOrImplItemType\n+    }\n+}\n+\n #[derive(Clone, Copy, Hash, Eq, PartialEq)]\n enum SawSpanExpnKind {\n     NoExpansion,\n@@ -383,10 +519,7 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_item(&mut self, i: &'tcx Item) {\n         debug!(\"visit_item: {:?} st={:?}\", i, self.st);\n-\n-        SawItem.hash(self.st);\n-        // Hash the value of the discriminant of the Item variant.\n-        self.hash_discriminant(&i.node);\n+        SawItem(saw_item(&i.node)).hash(self.st);\n         hash_span!(self, i.span);\n         hash_attrs!(self, &i.attrs);\n         visit::walk_item(self, i)\n@@ -399,7 +532,7 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_ty(&mut self, t: &'tcx Ty) {\n         debug!(\"visit_ty: st={:?}\", self.st);\n-        SawTy.hash(self.st);\n+        SawTy(saw_ty(&t.node)).hash(self.st);\n         hash_span!(self, t.span);\n         visit::walk_ty(self, t)\n     }\n@@ -412,17 +545,15 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_trait_item(&mut self, ti: &'tcx TraitItem) {\n         debug!(\"visit_trait_item: st={:?}\", self.st);\n-        SawTraitItem.hash(self.st);\n-        self.hash_discriminant(&ti.node);\n+        SawTraitItem(saw_trait_item(&ti.node)).hash(self.st);\n         hash_span!(self, ti.span);\n         hash_attrs!(self, &ti.attrs);\n         visit::walk_trait_item(self, ti)\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx ImplItem) {\n         debug!(\"visit_impl_item: st={:?}\", self.st);\n-        SawImplItem.hash(self.st);\n-        self.hash_discriminant(&ii.node);\n+        SawImplItem(saw_impl_item(&ii.node)).hash(self.st);\n         hash_span!(self, ii.span);\n         hash_attrs!(self, &ii.attrs);\n         visit::walk_impl_item(self, ii)\n@@ -452,8 +583,7 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_pat(&mut self, p: &'tcx Pat) {\n         debug!(\"visit_pat: st={:?}\", self.st);\n-        SawPat.hash(self.st);\n-        self.hash_discriminant(&p.node);\n+        SawPat(saw_pat(&p.node)).hash(self.st);\n         hash_span!(self, p.span);\n         visit::walk_pat(self, p)\n     }"}]}