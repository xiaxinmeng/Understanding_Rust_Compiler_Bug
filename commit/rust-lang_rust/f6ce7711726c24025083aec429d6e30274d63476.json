{"sha": "f6ce7711726c24025083aec429d6e30274d63476", "node_id": "C_kwDOAAsO6NoAKGY2Y2U3NzExNzI2YzI0MDI1MDgzYWVjNDI5ZDZlMzAyNzRkNjM0NzY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-24T12:57:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-24T13:10:05Z"}, "message": "Merge landing_pad and set_cleanup into cleanup_landing_pad", "tree": {"sha": "f7f0abf45219a24354a21c653dcb551bfaa5855c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f0abf45219a24354a21c653dcb551bfaa5855c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6ce7711726c24025083aec429d6e30274d63476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ce7711726c24025083aec429d6e30274d63476", "html_url": "https://github.com/rust-lang/rust/commit/f6ce7711726c24025083aec429d6e30274d63476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6ce7711726c24025083aec429d6e30274d63476/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "html_url": "https://github.com/rust-lang/rust/commit/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "ffb77e16a14863c505b199efdf2acdb02e9118a8", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6ce7711726c24025083aec429d6e30274d63476/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ce7711726c24025083aec429d6e30274d63476/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=f6ce7711726c24025083aec429d6e30274d63476", "patch": "@@ -1260,7 +1260,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // TODO(antoyo)\n     }\n \n-    fn landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>, _num_clauses: usize) -> RValue<'gcc> {\n+    fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n         let field1 = self.context.new_field(None, self.u8_type, \"landing_pad_field_1\");\n         let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n         let struct_type = self.context.new_struct_type(None, \"landing_pad\", &[field1, field2]);\n@@ -1271,10 +1271,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // rustc_codegen_ssa now calls the unwinding builder methods even on panic=abort.\n     }\n \n-    fn set_cleanup(&mut self, _landing_pad: RValue<'gcc>) {\n-        // TODO(antoyo)\n-    }\n-\n     fn resume(&mut self, _exn: RValue<'gcc>) {\n         unimplemented!();\n     }"}, {"sha": "c9a04e6280f4092d4537ffec4e535a12ffafa805", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f6ce7711726c24025083aec429d6e30274d63476/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ce7711726c24025083aec429d6e30274d63476/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=f6ce7711726c24025083aec429d6e30274d63476", "patch": "@@ -962,25 +962,12 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn landing_pad(\n-        &mut self,\n-        ty: &'ll Type,\n-        pers_fn: &'ll Value,\n-        num_clauses: usize,\n-    ) -> &'ll Value {\n-        // Use LLVMSetPersonalityFn to set the personality. It supports arbitrary Consts while,\n-        // LLVMBuildLandingPad requires the argument to be a Function (as of LLVM 12). The\n-        // personality lives on the parent function anyway.\n-        self.set_personality_fn(pers_fn);\n-        unsafe {\n-            llvm::LLVMBuildLandingPad(self.llbuilder, ty, None, num_clauses as c_uint, UNNAMED)\n-        }\n-    }\n-\n-    fn set_cleanup(&mut self, landing_pad: &'ll Value) {\n+    fn cleanup_landing_pad(&mut self, ty: &'ll Type, pers_fn: &'ll Value) -> &'ll Value {\n+        let landing_pad = self.landing_pad(ty, pers_fn, 1 /* FIXME should this be 0? */);\n         unsafe {\n             llvm::LLVMSetCleanup(landing_pad, llvm::True);\n         }\n+        landing_pad\n     }\n \n     fn resume(&mut self, exn: &'ll Value) {\n@@ -1477,4 +1464,19 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n             None\n         }\n     }\n+\n+    pub(crate) fn landing_pad(\n+        &mut self,\n+        ty: &'ll Type,\n+        pers_fn: &'ll Value,\n+        num_clauses: usize,\n+    ) -> &'ll Value {\n+        // Use LLVMSetPersonalityFn to set the personality. It supports arbitrary Consts while,\n+        // LLVMBuildLandingPad requires the argument to be a Function (as of LLVM 12). The\n+        // personality lives on the parent function anyway.\n+        self.set_personality_fn(pers_fn);\n+        unsafe {\n+            llvm::LLVMBuildLandingPad(self.llbuilder, ty, None, num_clauses as c_uint, UNNAMED)\n+        }\n+    }\n }"}, {"sha": "4c7a09ca1e94b2ede7ff45f957aaf240552c3a8e", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6ce7711726c24025083aec429d6e30274d63476/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ce7711726c24025083aec429d6e30274d63476/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=f6ce7711726c24025083aec429d6e30274d63476", "patch": "@@ -1373,8 +1373,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             let llpersonality = self.cx.eh_personality();\n             let llretty = self.landing_pad_type();\n-            let lp = bx.landing_pad(llretty, llpersonality, 1);\n-            bx.set_cleanup(lp);\n+            let lp = bx.cleanup_landing_pad(llretty, llpersonality);\n \n             let slot = self.get_personality_slot(&mut bx);\n             slot.storage_live(&mut bx);"}, {"sha": "53fb21b269a12f46a3696388ff69324d1f773132", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6ce7711726c24025083aec429d6e30274d63476/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6ce7711726c24025083aec429d6e30274d63476/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=f6ce7711726c24025083aec429d6e30274d63476", "patch": "@@ -424,13 +424,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn set_personality_fn(&mut self, personality: Self::Value);\n \n     // These are used by everyone except msvc\n-    fn landing_pad(\n-        &mut self,\n-        ty: Self::Type,\n-        pers_fn: Self::Value,\n-        num_clauses: usize,\n-    ) -> Self::Value;\n-    fn set_cleanup(&mut self, landing_pad: Self::Value);\n+    fn cleanup_landing_pad(&mut self, ty: Self::Type, pers_fn: Self::Value) -> Self::Value;\n     fn resume(&mut self, exn: Self::Value);\n \n     // These are used only by msvc"}]}