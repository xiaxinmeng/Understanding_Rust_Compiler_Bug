{"sha": "f937a10c4ef9448abdea6e6d4fa63472723bc779", "node_id": "C_kwDOAAsO6NoAKGY5MzdhMTBjNGVmOTQ0OGFiZGVhNmU2ZDRmYTYzNDcyNzIzYmM3Nzk", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-10T07:07:49Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-16T03:48:43Z"}, "message": "Bless ui tests after typeck code change", "tree": {"sha": "503e78043f3686032983a869218be26b4c9154b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/503e78043f3686032983a869218be26b4c9154b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f937a10c4ef9448abdea6e6d4fa63472723bc779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f937a10c4ef9448abdea6e6d4fa63472723bc779", "html_url": "https://github.com/rust-lang/rust/commit/f937a10c4ef9448abdea6e6d4fa63472723bc779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f937a10c4ef9448abdea6e6d4fa63472723bc779/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8813cf10eea79f7703e716b6c050e818220670a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8813cf10eea79f7703e716b6c050e818220670a", "html_url": "https://github.com/rust-lang/rust/commit/f8813cf10eea79f7703e716b6c050e818220670a"}], "stats": {"total": 224, "additions": 101, "deletions": 123}, "files": [{"sha": "50b7ce1f8c01db3c869fb447dba119458f8a3f86", "filename": "src/test/ui/consts/const-fn-error.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -3,8 +3,10 @@ const X : usize = 2;\n const fn f(x: usize) -> usize {\n     let mut sum = 0;\n     for i in 0..x {\n-        //~^ ERROR the trait bound\n+        //~^ ERROR cannot convert\n         //~| ERROR `for` is not allowed in a `const fn`\n+        //~| ERROR mutable references are not allowed in constant functions\n+        //~| ERROR cannot call non-const fn\n         sum += i;\n     }\n     sum"}, {"sha": "e36324f0b3eea2680367b8780d7413fde536266e", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -4,32 +4,46 @@ error[E0658]: `for` is not allowed in a `const fn`\n LL | /     for i in 0..x {\n LL | |\n LL | |\n+LL | |\n+LL | |\n LL | |         sum += i;\n LL | |     }\n    | |_____^\n    |\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `std::ops::Range<usize>: Iterator` is not satisfied\n+error[E0015]: cannot convert `std::ops::Range<usize>` into an iterator in constant functions\n   --> $DIR/const-fn-error.rs:5:14\n    |\n LL |     for i in 0..x {\n-   |              ^^^^ `std::ops::Range<usize>` is not an iterator\n+   |              ^^^^\n    |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<usize>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<usize>`, but that implementation is not `const`\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL | impl<I: ~const Iterator> const IntoIterator for I {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/const-fn-error.rs:5:14\n+   |\n+LL |     for i in 0..x {\n+   |              ^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0015]: cannot call non-const fn `<std::ops::Range<usize> as Iterator>::next` in constant functions\n   --> $DIR/const-fn-error.rs:5:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n-   = note: required for `std::ops::Range<usize>` to implement `~const IntoIterator`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-LL | const fn f(x: usize) -> usize where std::ops::Range<usize>: ~const Iterator {\n-   |                               +++++++++++++++++++++++++++++++++++++++++++++\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0277, E0658.\n-For more information about an error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0015, E0658.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "bec7b808905360a7b0bb1bb0ac30ac5c4358a0fa", "filename": "src/test/ui/consts/const-for-feature-gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.rs?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -3,7 +3,6 @@\n const _: () = {\n     for _ in 0..5 {}\n     //~^ error: `for` is not allowed in a `const`\n-    //~| error: the trait bound\n };\n \n fn main() {}"}, {"sha": "2ea377e09f61eaf4df483e78aacd34d8c82f802e", "filename": "src/test/ui/consts/const-for-feature-gate.stderr", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for-feature-gate.stderr?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -7,21 +7,6 @@ LL |     for _ in 0..5 {}\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n-  --> $DIR/const-for-feature-gate.rs:4:14\n-   |\n-LL |     for _ in 0..5 {}\n-   |              ^^^^ `std::ops::Range<{integer}>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n-  --> $DIR/const-for-feature-gate.rs:4:14\n-   |\n-LL |     for _ in 0..5 {}\n-   |              ^^^^\n-   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0277, E0658.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8db2485355833d3b58313271859f15afbc05c843", "filename": "src/test/ui/consts/const-for.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for.rs?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -3,7 +3,8 @@\n \n const _: () = {\n     for _ in 0..5 {}\n-    //~^ error: the trait bound\n+    //~^ error: cannot call\n+    //~| error: cannot convert\n };\n \n fn main() {}"}, {"sha": "f2e1c8a4991a31c5f265db040cf518b6b0695c74", "filename": "src/test/ui/consts/const-for.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -1,17 +1,24 @@\n-error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+error[E0015]: cannot convert `std::ops::Range<i32>` into an iterator in constants\n   --> $DIR/const-for.rs:5:14\n    |\n LL |     for _ in 0..5 {}\n-   |              ^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |              ^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+LL | impl<I: ~const Iterator> const IntoIterator for I {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+\n+error[E0015]: cannot call non-const fn `<std::ops::Range<i32> as Iterator>::next` in constants\n   --> $DIR/const-for.rs:5:14\n    |\n LL |     for _ in 0..5 {}\n    |              ^^^^\n-   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n+   |\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "2b8561a2644888486e4cf3648bd54b2405e3d3cc", "filename": "src/test/ui/consts/control-flow/loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.rs?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -51,12 +51,10 @@ const _: i32 = {\n     let mut x = 0;\n \n     for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n-        //~^ ERROR the trait bound\n         x += i;\n     }\n \n     for i in 0..4 { //~ ERROR `for` is not allowed in a `const`\n-        //~^ ERROR the trait bound\n         x += i;\n     }\n "}, {"sha": "5f6ad8c105d7433cbc2781d9f97f9b10f3796150", "filename": "src/test/ui/consts/control-flow/loop.stderr", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Floop.stderr?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -2,7 +2,6 @@ error[E0658]: `for` is not allowed in a `const`\n   --> $DIR/loop.rs:53:5\n    |\n LL | /     for i in 0..4 {\n-LL | |\n LL | |         x += i;\n LL | |     }\n    | |_____^\n@@ -11,46 +10,16 @@ LL | |     }\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n error[E0658]: `for` is not allowed in a `const`\n-  --> $DIR/loop.rs:58:5\n+  --> $DIR/loop.rs:57:5\n    |\n LL | /     for i in 0..4 {\n-LL | |\n LL | |         x += i;\n LL | |     }\n    | |_____^\n    |\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n-  --> $DIR/loop.rs:53:14\n-   |\n-LL |     for i in 0..4 {\n-   |              ^^^^ `std::ops::Range<{integer}>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n-  --> $DIR/loop.rs:53:14\n-   |\n-LL |     for i in 0..4 {\n-   |              ^^^^\n-   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n-\n-error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n-  --> $DIR/loop.rs:58:14\n-   |\n-LL |     for i in 0..4 {\n-   |              ^^^^ `std::ops::Range<{integer}>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n-  --> $DIR/loop.rs:58:14\n-   |\n-LL |     for i in 0..4 {\n-   |              ^^^^\n-   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0277, E0658.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2d5c9358752964fe15482ba28ddd3487ac359788", "filename": "src/test/ui/issues/issue-50582.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.rs?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n     //~^ ERROR cannot add\n     //~| ERROR `for` is not allowed in a `const`\n-    //~| ERROR the trait bound\n }"}, {"sha": "53ecc6112ffeea581033243573a15916eb2bc45a", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -7,20 +7,6 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n-  --> $DIR/issue-50582.rs:2:29\n-   |\n-LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n-   |                             ^^^^ `std::ops::Range<{integer}>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n-  --> $DIR/issue-50582.rs:2:29\n-   |\n-LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n-   |                             ^^^^\n-   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n-\n error[E0277]: cannot add `()` to `{integer}` in const contexts\n   --> $DIR/issue-50582.rs:2:18\n    |\n@@ -39,7 +25,7 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n              <&'a isize as Add<isize>>\n            and 48 others\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0658.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "a2f11c98d5a3070536a3db46ad6d6cbc1765c0ad", "filename": "src/test/ui/issues/issue-50585.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.rs?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     |y: Vec<[(); for x in 0..2 {}]>| {};\n     //~^ ERROR mismatched types\n     //~| ERROR `for` is not allowed in a `const`\n-    //~| ERROR the trait bound\n }"}, {"sha": "e43cc20cbb57d2882e0c085cba16ebdc96d97819", "filename": "src/test/ui/issues/issue-50585.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -7,27 +7,13 @@ LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n-  --> $DIR/issue-50585.rs:2:27\n-   |\n-LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n-   |                           ^^^^ `std::ops::Range<{integer}>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n-  --> $DIR/issue-50585.rs:2:27\n-   |\n-LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n-   |                           ^^^^\n-   = note: required for `std::ops::Range<{integer}>` to implement `~const IntoIterator`\n-\n error[E0308]: mismatched types\n   --> $DIR/issue-50585.rs:2:18\n    |\n LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n    |                  ^^^^^^^^^^^^^^^^ expected `usize`, found `()`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0277, E0308, E0658.\n-For more information about an error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0308, E0658.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "0498a8a16259010501a0387c4bcfb61a2e839a74", "filename": "src/test/ui/never_type/issue-52443.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.rs?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -8,5 +8,7 @@ fn main() {\n \n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR `for` is not allowed in a `const`\n-    //~| ERROR the trait bound\n+    //~| ERROR cannot convert\n+    //~| ERROR mutable references\n+    //~| ERROR cannot call\n }"}, {"sha": "3c0daa4c55f017b39ece743b5d2e666600688ac0", "filename": "src/test/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -38,25 +38,37 @@ LL |     [(); loop { break }];\n    |                 expected `usize`, found `()`\n    |                 help: give it a value of the expected type: `break 42`\n \n-error[E0277]: the trait bound `RangeFrom<usize>: Iterator` is not satisfied\n+error[E0015]: cannot convert `RangeFrom<usize>` into an iterator in constants\n   --> $DIR/issue-52443.rs:9:21\n    |\n LL |     [(); { for _ in 0usize.. {}; 0}];\n-   |                     ^^^^^^^^ `RangeFrom<usize>` is not an iterator\n+   |                     ^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL | impl<I: ~const Iterator> const IntoIterator for I {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+\n+error[E0658]: mutable references are not allowed in constants\n+  --> $DIR/issue-52443.rs:9:21\n    |\n-   = help: the trait `~const Iterator` is not implemented for `RangeFrom<usize>`\n-note: the trait `Iterator` is implemented for `RangeFrom<usize>`, but that implementation is not `const`\n+LL |     [(); { for _ in 0usize.. {}; 0}];\n+   |                     ^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0015]: cannot call non-const fn `<RangeFrom<usize> as Iterator>::next` in constants\n   --> $DIR/issue-52443.rs:9:21\n    |\n LL |     [(); { for _ in 0usize.. {}; 0}];\n    |                     ^^^^^^^^\n-   = note: required for `RangeFrom<usize>` to implement `~const IntoIterator`\n-help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-LL | fn main() where RangeFrom<usize>: ~const Iterator {\n-   |           +++++++++++++++++++++++++++++++++++++++\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n-Some errors have detailed explanations: E0277, E0308, E0658.\n-For more information about an error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0015, E0308, E0658.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "1a07dc46c5e8a28f14670fcd2951a3a21d3d9b11", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.rs?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -4,6 +4,7 @@ fn main() {\n     <i32 as Add<u32>>::add(1, 2);\n     //~^ ERROR cannot add `u32` to `i32`\n     //~| ERROR cannot add `u32` to `i32`\n+    //~| ERROR cannot add `u32` to `i32`\n     <i32 as Add<i32>>::add(1u32, 2);\n     //~^ ERROR mismatched types\n     <i32 as Add<i32>>::add(1, 2u32);"}, {"sha": "22647622128c1f9cb952bcf7fb8e4d8923a945ec", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f937a10c4ef9448abdea6e6d4fa63472723bc779/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=f937a10c4ef9448abdea6e6d4fa63472723bc779", "patch": "@@ -18,8 +18,26 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n              <&'a isize as Add<isize>>\n            and 48 others\n \n+error[E0277]: cannot add `u32` to `i32`\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:4:5\n+   |\n+LL |     <i32 as Add<u32>>::add(1, 2);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n+   |\n+   = help: the trait `Add<u32>` is not implemented for `i32`\n+   = help: the following other types implement trait `Add<Rhs>`:\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n+           and 48 others\n+\n error[E0308]: mismatched types\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:7:28\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:8:28\n    |\n LL |     <i32 as Add<i32>>::add(1u32, 2);\n    |     ---------------------- ^^^^ expected `i32`, found `u32`\n@@ -37,7 +55,7 @@ LL |     <i32 as Add<i32>>::add(1i32, 2);\n    |                             ~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:9:31\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:10:31\n    |\n LL |     <i32 as Add<i32>>::add(1, 2u32);\n    |     ----------------------    ^^^^ expected `i32`, found `u32`\n@@ -72,7 +90,7 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n              <&'a isize as Add<isize>>\n            and 48 others\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}]}