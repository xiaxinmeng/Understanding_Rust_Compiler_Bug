{"sha": "7be7f67198c617ad482717d9bf2c7dca9c2cd169", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZTdmNjcxOThjNjE3YWQ0ODI3MTdkOWJmMmM3ZGNhOWMyY2QxNjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-13T13:39:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-13T13:39:51Z"}, "message": "rename add_resolution -> add_scope_def", "tree": {"sha": "5fa82899fc15f5739ef80997c04fd9cc8153e786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa82899fc15f5739ef80997c04fd9cc8153e786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be7f67198c617ad482717d9bf2c7dca9c2cd169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be7f67198c617ad482717d9bf2c7dca9c2cd169", "html_url": "https://github.com/rust-lang/rust/commit/7be7f67198c617ad482717d9bf2c7dca9c2cd169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be7f67198c617ad482717d9bf2c7dca9c2cd169/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbe79ed9adaeb93e0c9b8bc1d7f67dff075b8dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbe79ed9adaeb93e0c9b8bc1d7f67dff075b8dd", "html_url": "https://github.com/rust-lang/rust/commit/2fbe79ed9adaeb93e0c9b8bc1d7f67dff075b8dd"}], "stats": {"total": 18, "additions": 0, "deletions": 18}, "files": [{"sha": "ad414412b14f1fd8d1ea956a108a37659bc43787", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7be7f67198c617ad482717d9bf2c7dca9c2cd169/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be7f67198c617ad482717d9bf2c7dca9c2cd169/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=7be7f67198c617ad482717d9bf2c7dca9c2cd169", "patch": "@@ -43,24 +43,6 @@ impl Completions {\n     ) {\n         use hir::ModuleDef::*;\n \n-        // if let Some(macro_) = resolution.get_macros() {\n-        //     self.add_macro(ctx, Some(local_name.clone()), macro_);\n-        // }\n-\n-        // let def = resolution.as_ref().take_types().or_else(|| resolution.as_ref().take_values());\n-        // let def = match def {\n-        //     // Only insert once if it is just a macro name\n-        //     None if resolution.get_macros().is_some() => return,\n-        //     None => {\n-        //         self.add(CompletionItem::new(\n-        //             CompletionKind::Reference,\n-        //             ctx.source_range(),\n-        //             local_name,\n-        //         ));\n-        //         return;\n-        //     }\n-        //     Some(it) => it,\n-        // };\n         let mut completion_kind = CompletionKind::Reference;\n         let (kind, docs) = match resolution {\n             ScopeDef::ModuleDef(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),"}]}