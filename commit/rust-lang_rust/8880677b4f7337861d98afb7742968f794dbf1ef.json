{"sha": "8880677b4f7337861d98afb7742968f794dbf1ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ODA2NzdiNGY3MzM3ODYxZDk4YWZiNzc0Mjk2OGY3OTRkYmYxZWY=", "commit": {"author": {"name": "Joe Frikker", "email": "jfrikker@gmail.com", "date": "2019-06-25T01:28:46Z"}, "committer": {"name": "Joe Frikker", "email": "jfrikker@gmail.com", "date": "2019-06-25T01:28:46Z"}, "message": "Making try_err machine applicable", "tree": {"sha": "5f4e504450fc9b8cd10e9296cd5f403db7ca27ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f4e504450fc9b8cd10e9296cd5f403db7ca27ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8880677b4f7337861d98afb7742968f794dbf1ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8880677b4f7337861d98afb7742968f794dbf1ef", "html_url": "https://github.com/rust-lang/rust/commit/8880677b4f7337861d98afb7742968f794dbf1ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8880677b4f7337861d98afb7742968f794dbf1ef/comments", "author": {"login": "jfrikker", "id": 1620319, "node_id": "MDQ6VXNlcjE2MjAzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1620319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrikker", "html_url": "https://github.com/jfrikker", "followers_url": "https://api.github.com/users/jfrikker/followers", "following_url": "https://api.github.com/users/jfrikker/following{/other_user}", "gists_url": "https://api.github.com/users/jfrikker/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrikker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrikker/subscriptions", "organizations_url": "https://api.github.com/users/jfrikker/orgs", "repos_url": "https://api.github.com/users/jfrikker/repos", "events_url": "https://api.github.com/users/jfrikker/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrikker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jfrikker", "id": 1620319, "node_id": "MDQ6VXNlcjE2MjAzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1620319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrikker", "html_url": "https://github.com/jfrikker", "followers_url": "https://api.github.com/users/jfrikker/followers", "following_url": "https://api.github.com/users/jfrikker/following{/other_user}", "gists_url": "https://api.github.com/users/jfrikker/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrikker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrikker/subscriptions", "organizations_url": "https://api.github.com/users/jfrikker/orgs", "repos_url": "https://api.github.com/users/jfrikker/repos", "events_url": "https://api.github.com/users/jfrikker/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrikker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6c6976dd12406d2b57de17f1f667527d7977c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6c6976dd12406d2b57de17f1f667527d7977c6", "html_url": "https://github.com/rust-lang/rust/commit/1e6c6976dd12406d2b57de17f1f667527d7977c6"}], "stats": {"total": 121, "additions": 103, "deletions": 18}, "files": [{"sha": "7466221fb11eb7d2f1fb3a9ca7cd2e86f3791625", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8880677b4f7337861d98afb7742968f794dbf1ef/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8880677b4f7337861d98afb7742968f794dbf1ef/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=8880677b4f7337861d98afb7742968f794dbf1ef", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n                     \"returning an `Err(_)` with the `?` operator\",\n                     \"try this\",\n                     suggestion,\n-                    Applicability::MaybeIncorrect\n+                    Applicability::MachineApplicable\n                 );\n             }\n         }"}, {"sha": "fe4be727be1c102810097aae11207c2b0778d8b4", "filename": "tests/ui/try_err.fixed", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8880677b4f7337861d98afb7742968f794dbf1ef/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8880677b4f7337861d98afb7742968f794dbf1ef/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=8880677b4f7337861d98afb7742968f794dbf1ef", "patch": "@@ -0,0 +1,75 @@\n+// run-rustfix\n+\n+#![deny(clippy::try_err)]\n+\n+// Tests that a simple case works\n+// Should flag `Err(err)?`\n+pub fn basic_test() -> Result<i32, i32> {\n+    let err: i32 = 1;\n+    if true { // To avoid warnings during rustfix\n+        return Err(err);\n+    }\n+    Ok(0)\n+}\n+\n+// Tests that `.into()` is added when appropriate\n+pub fn into_test() -> Result<i32, i32> {\n+    let err: u8 = 1;\n+    if true { // To avoid warnings during rustfix\n+        return Err(err.into());\n+    }\n+    Ok(0)\n+}\n+\n+// Tests that tries in general don't trigger the error\n+pub fn negative_test() -> Result<i32, i32> {\n+    Ok(nested_error()? + 1)\n+}\n+\n+\n+// Tests that `.into()` isn't added when the error type\n+// matches the surrounding closure's return type, even\n+// when it doesn't match the surrounding function's.\n+pub fn closure_matches_test() -> Result<i32, i32> {\n+    let res: Result<i32, i8> = Some(1).into_iter()\n+        .map(|i| {\n+            let err: i8 = 1;\n+            if true { // To avoid warnings during rustfix\n+                return Err(err);\n+            }\n+            Ok(i)\n+        })\n+        .next()\n+        .unwrap();\n+\n+    Ok(res?)\n+}\n+\n+// Tests that `.into()` isn't added when the error type\n+// doesn't match the surrounding closure's return type.\n+pub fn closure_into_test() -> Result<i32, i32> {\n+    let res: Result<i32, i16> = Some(1).into_iter()\n+        .map(|i| {\n+            let err: i8 = 1;\n+            if true { // To avoid warnings during rustfix\n+                return Err(err.into());\n+            }\n+            Ok(i)\n+        })\n+        .next()\n+        .unwrap();\n+\n+    Ok(res?)\n+}\n+\n+fn nested_error() -> Result<i32, i32> {\n+    Ok(1)\n+}\n+\n+fn main() {\n+    basic_test().unwrap();\n+    into_test().unwrap();\n+    negative_test().unwrap();\n+    closure_matches_test().unwrap();\n+    closure_into_test().unwrap();\n+}"}, {"sha": "c72f88da8e35aa9e474f9ad0a79292ed6d06608a", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8880677b4f7337861d98afb7742968f794dbf1ef/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8880677b4f7337861d98afb7742968f794dbf1ef/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=8880677b4f7337861d98afb7742968f794dbf1ef", "patch": "@@ -1,17 +1,23 @@\n+// run-rustfix\n+\n #![deny(clippy::try_err)]\n \n // Tests that a simple case works\n // Should flag `Err(err)?`\n pub fn basic_test() -> Result<i32, i32> {\n     let err: i32 = 1;\n-    Err(err)?;\n+    if true { // To avoid warnings during rustfix\n+        Err(err)?;\n+    }\n     Ok(0)\n }\n \n // Tests that `.into()` is added when appropriate\n pub fn into_test() -> Result<i32, i32> {\n     let err: u8 = 1;\n-    Err(err)?;\n+    if true { // To avoid warnings during rustfix\n+        Err(err)?;\n+    }\n     Ok(0)\n }\n \n@@ -28,7 +34,9 @@ pub fn closure_matches_test() -> Result<i32, i32> {\n     let res: Result<i32, i8> = Some(1).into_iter()\n         .map(|i| {\n             let err: i8 = 1;\n-            Err(err)?;\n+            if true { // To avoid warnings during rustfix\n+                Err(err)?;\n+            }\n             Ok(i)\n         })\n         .next()\n@@ -43,7 +51,9 @@ pub fn closure_into_test() -> Result<i32, i32> {\n     let res: Result<i32, i16> = Some(1).into_iter()\n         .map(|i| {\n             let err: i8 = 1;\n-            Err(err)?;\n+            if true { // To avoid warnings during rustfix\n+                Err(err)?;\n+            }\n             Ok(i)\n         })\n         .next()"}, {"sha": "2d095f1b6e0bb9c257ac2534b6e439140bdb7024", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8880677b4f7337861d98afb7742968f794dbf1ef/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8880677b4f7337861d98afb7742968f794dbf1ef/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=8880677b4f7337861d98afb7742968f794dbf1ef", "patch": "@@ -1,32 +1,32 @@\n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:7:5\n+  --> $DIR/try_err.rs:10:9\n    |\n-LL |     Err(err)?;\n-   |     ^^^^^^^^^ help: try this: `return Err(err)`\n+LL |         Err(err)?;\n+   |         ^^^^^^^^^ help: try this: `return Err(err)`\n    |\n note: lint level defined here\n-  --> $DIR/try_err.rs:1:9\n+  --> $DIR/try_err.rs:3:9\n    |\n LL | #![deny(clippy::try_err)]\n    |         ^^^^^^^^^^^^^^^\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:14:5\n+  --> $DIR/try_err.rs:19:9\n    |\n-LL |     Err(err)?;\n-   |     ^^^^^^^^^ help: try this: `return Err(err.into())`\n+LL |         Err(err)?;\n+   |         ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:31:13\n+  --> $DIR/try_err.rs:38:17\n    |\n-LL |             Err(err)?;\n-   |             ^^^^^^^^^ help: try this: `return Err(err)`\n+LL |                 Err(err)?;\n+   |                 ^^^^^^^^^ help: try this: `return Err(err)`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:46:13\n+  --> $DIR/try_err.rs:55:17\n    |\n-LL |             Err(err)?;\n-   |             ^^^^^^^^^ help: try this: `return Err(err.into())`\n+LL |                 Err(err)?;\n+   |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: aborting due to 4 previous errors\n "}]}