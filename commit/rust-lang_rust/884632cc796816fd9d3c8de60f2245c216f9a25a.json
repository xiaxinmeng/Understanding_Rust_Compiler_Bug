{"sha": "884632cc796816fd9d3c8de60f2245c216f9a25a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NDYzMmNjNzk2ODE2ZmQ5ZDNjOGRlNjBmMjI0NWMyMTZmOWEyNWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-03T20:59:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-03T21:09:01Z"}, "message": "rustc: Always handle exported symbols on the wasm target\n\nCurrently when linking an artifact rustc will only conditionally call\nthe `Linker::export_symbols` function, but this causes issues on some\ntargets, like WebAssembly, where it means that executable outputs will\nnot have the same symbols exported that cdylib outputs have. This commit\nsinks the conditional call to `export_symbols` inside the various\nimplementations of the function that still need it, and otherwise the\nwasm linker is configured to always pass through symbol visibility\nlists.", "tree": {"sha": "6a77de2a110d0f5d0f2313c05c30756382d5c098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a77de2a110d0f5d0f2313c05c30756382d5c098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/884632cc796816fd9d3c8de60f2245c216f9a25a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/884632cc796816fd9d3c8de60f2245c216f9a25a", "html_url": "https://github.com/rust-lang/rust/commit/884632cc796816fd9d3c8de60f2245c216f9a25a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/884632cc796816fd9d3c8de60f2245c216f9a25a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3af1bdc4bcc502d576b1e836f99bae1eb29dbafd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3af1bdc4bcc502d576b1e836f99bae1eb29dbafd", "html_url": "https://github.com/rust-lang/rust/commit/3af1bdc4bcc502d576b1e836f99bae1eb29dbafd"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "d530af559af13a6e744798224c4c623c4310396b", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=884632cc796816fd9d3c8de60f2245c216f9a25a", "patch": "@@ -1017,12 +1017,10 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n         }\n     }\n \n-    // If we're building a dynamic library then some platforms need to make sure\n-    // that all symbols are exported correctly from the dynamic library.\n-    if crate_type != config::CrateType::Executable ||\n-       sess.target.target.options.is_like_emscripten {\n-        cmd.export_symbols(tmpdir, crate_type);\n-    }\n+    // If we're building something like a dynamic library then some platforms\n+    // need to make sure that all symbols are exported correctly from the\n+    // dynamic library.\n+    cmd.export_symbols(tmpdir, crate_type);\n \n     // When linking a dynamic library, we put the metadata into a section of the\n     // executable. This metadata is in a separate object file from the main"}, {"sha": "926f4febe7bae7ca61b68a75feb7bd1f15c1f669", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=884632cc796816fd9d3c8de60f2245c216f9a25a", "patch": "@@ -372,6 +372,11 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n+        // Symbol visibility in object files typically takes care of this.\n+        if crate_type == CrateType::Executable {\n+            return;\n+        }\n+\n         // If we're compiling a dylib, then we let symbol visibility in object\n         // files to take care of whether they're exported or not.\n         //\n@@ -645,6 +650,11 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn export_symbols(&mut self,\n                       tmpdir: &Path,\n                       crate_type: CrateType) {\n+        // Symbol visibility takes care of this typically\n+        if crate_type == CrateType::Executable {\n+            return;\n+        }\n+\n         let path = tmpdir.join(\"lib.def\");\n         let res: io::Result<()> = try {\n             let mut f = BufWriter::new(File::create(&path)?);"}, {"sha": "15403d8d4109d88ba8b4088ab691493304f0ad81", "filename": "src/test/run-make/wasm-export-all-symbols/Makefile", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile?ref=884632cc796816fd9d3c8de60f2245c216f9a25a", "patch": "@@ -6,8 +6,14 @@ all:\n \t$(RUSTC) bar.rs --target wasm32-unknown-unknown\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n \t$(NODE) verify.js $(TMPDIR)/foo.wasm\n+\t$(RUSTC) main.rs --target wasm32-unknown-unknown\n+\t$(NODE) verify.js $(TMPDIR)/main.wasm\n \t$(RUSTC) bar.rs --target wasm32-unknown-unknown -O\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown -O\n \t$(NODE) verify.js $(TMPDIR)/foo.wasm\n+\t$(RUSTC) main.rs --target wasm32-unknown-unknown -O\n+\t$(NODE) verify.js $(TMPDIR)/main.wasm\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown -C lto\n \t$(NODE) verify.js $(TMPDIR)/foo.wasm\n+\t$(RUSTC) main.rs --target wasm32-unknown-unknown -C lto\n+\t$(NODE) verify.js $(TMPDIR)/main.wasm"}, {"sha": "0edda7d7b8842debbdd5417ed08d904c00d9c956", "filename": "src/test/run-make/wasm-export-all-symbols/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fmain.rs?ref=884632cc796816fd9d3c8de60f2245c216f9a25a", "patch": "@@ -0,0 +1,3 @@\n+extern crate bar;\n+\n+fn main() {}"}, {"sha": "7b6fc7a45682b2b96bee0f99af97c2662506fb14", "filename": "src/test/run-make/wasm-export-all-symbols/verify.js", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fverify.js", "raw_url": "https://github.com/rust-lang/rust/raw/884632cc796816fd9d3c8de60f2245c216f9a25a/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fverify.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2Fverify.js?ref=884632cc796816fd9d3c8de60f2245c216f9a25a", "patch": "@@ -16,7 +16,13 @@ for (const entry of list) {\n   nexports += 1;\n }\n \n-if (nexports != 1)\n-  throw new Error(\"should only have one function export\");\n if (my_exports.foo === undefined)\n   throw new Error(\"`foo` wasn't defined\");\n+\n+if (my_exports.main === undefined) {\n+  if (nexports != 1)\n+    throw new Error(\"should only have one function export\");\n+} else {\n+  if (nexports != 2)\n+    throw new Error(\"should only have two function exports\");\n+}"}]}