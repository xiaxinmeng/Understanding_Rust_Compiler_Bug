{"sha": "7c8b36f6f151707833e75463068f0630dd0a0644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOGIzNmY2ZjE1MTcwNzgzM2U3NTQ2MzA2OGYwNjMwZGQwYTA2NDQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-21T17:13:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-21T17:13:06Z"}, "message": "Rollup merge of #46157 - martinlindhe:master, r=kennytm\n\nfix some typos\n\nThis is the result of me testing out a WIP source code typo-finder\nand your project was the random target this time.", "tree": {"sha": "3a6ffba1817907b557e03e8663d4bae6a27c413f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a6ffba1817907b557e03e8663d4bae6a27c413f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c8b36f6f151707833e75463068f0630dd0a0644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8b36f6f151707833e75463068f0630dd0a0644", "html_url": "https://github.com/rust-lang/rust/commit/7c8b36f6f151707833e75463068f0630dd0a0644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c8b36f6f151707833e75463068f0630dd0a0644/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f0a1e26b239f0516276565b24b9ac1ff24d7033", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0a1e26b239f0516276565b24b9ac1ff24d7033", "html_url": "https://github.com/rust-lang/rust/commit/7f0a1e26b239f0516276565b24b9ac1ff24d7033"}, {"sha": "ece9a57d1b6e10ef2ad1dffd19fd6033cdc760ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece9a57d1b6e10ef2ad1dffd19fd6033cdc760ee", "html_url": "https://github.com/rust-lang/rust/commit/ece9a57d1b6e10ef2ad1dffd19fd6033cdc760ee"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "e3767df2808fa765501388991b2780ff5cc8ad84", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -421,7 +421,7 @@ Here are those same steps in detail:\n \n These instructions are specific to updating `rustfmt`, however they may apply\n to the other submodules as well. Please help by improving these instructions\n-if you find any discrepencies or special cases that need to be addressed.\n+if you find any discrepancies or special cases that need to be addressed.\n \n To update the `rustfmt` submodule, start by running the appropriate\n [`git submodule` command](https://git-scm.com/book/en/v2/Git-Tools-Submodules)."}, {"sha": "7f5035a837cf07d4cc57165b401557678f574ce2", "filename": "RELEASES.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -621,7 +621,7 @@ Misc\n ----\n \n - [rustdoc can now use pulldown-cmark with the `--enable-commonmark` flag][40338]\n-- [Added rust-winbg script for better debugging on Windows][39983]\n+- [Added rust-windbg script for better debugging on Windows][39983]\n - [Rust now uses the official cross compiler for NetBSD][40612]\n - [rustdoc now accepts `#` at the start of files][40828]\n - [Fixed jemalloc support for musl][41168]\n@@ -1655,7 +1655,7 @@ Diagnostics\n -----------\n \n * [Replace macro backtraces with labeled local uses][35702]\n-* [Improve error message for missplaced doc comments][33922]\n+* [Improve error message for misplaced doc comments][33922]\n * [Buffer unix and lock windows to prevent message interleaving][35975]\n * [Update lifetime errors to specifically note temporaries][36171]\n * [Special case a few colors for Windows][36178]\n@@ -1963,7 +1963,7 @@ Language\n   useful](https://github.com/rust-lang/rust/pull/34908)\n * [`macro_rules!` `stmt` matchers correctly consume the entire contents when\n   inside non-braces invocations](https://github.com/rust-lang/rust/pull/34886)\n-* [Semicolons are properly required as statement delimeters inside\n+* [Semicolons are properly required as statement delimiters inside\n   `macro_rules!` invocations](https://github.com/rust-lang/rust/pull/34660)\n * [`cfg_attr` works on `path` attributes](https://github.com/rust-lang/rust/pull/34546)\n \n@@ -2188,7 +2188,7 @@ Compatibility Notes\n * [`const`s and `static`s may not have unsized types](https://github.com/rust-lang/rust/pull/34443)\n * [The new follow-set rules that place restrictions on `macro_rules!`\n   in order to ensure syntax forward-compatibility have been enabled](https://github.com/rust-lang/rust/pull/33982)\n-  This was an [ammendment to RFC 550](https://github.com/rust-lang/rfcs/pull/1384),\n+  This was an [amendment to RFC 550](https://github.com/rust-lang/rfcs/pull/1384),\n   and has been a warning since 1.10.\n * [`cfg` attribute process has been refactored to fix various bugs](https://github.com/rust-lang/rust/pull/33706).\n   This causes breakage in some corner cases.\n@@ -3345,7 +3345,7 @@ Libraries\n * `FromStr` is [implemented for `SockAddrV4` and `SockAddrV6`][1.5s].\n * There are now `From` conversions [between floating point\n   types][1.5f] where the conversions are lossless.\n-* Thera are now `From` conversions [between integer types][1.5i] where\n+* There are now `From` conversions [between integer types][1.5i] where\n   the conversions are lossless.\n * [`fs::Metadata` implements `Clone`][1.5fs].\n * The `parse` method [accepts a leading \"+\" when parsing\n@@ -3545,7 +3545,7 @@ Libraries\n * [`IntoIterator` is implemented for references to `Option` and\n   `Result`][into2].\n * [`HashMap` and `HashSet` implement `Extend<&T>` where `T:\n-  Copy`][ext] as part of [RFC 839]. This will cause type inferance\n+  Copy`][ext] as part of [RFC 839]. This will cause type inference\n   breakage in rare situations.\n * [`BinaryHeap` implements `Debug`][bh2].\n * [`Borrow` and `BorrowMut` are implemented for fixed-size\n@@ -3556,7 +3556,7 @@ Libraries\n * `&mut T` where `T: std::fmt::Write` [also implements\n   `std::fmt::Write`][mutw].\n * [A stable regression in `VecDeque::push_back` and other\n-  capicity-altering methods that caused panics for zero-sized types\n+  capacity-altering methods that caused panics for zero-sized types\n   was fixed][vd].\n * [Function pointers implement traits for up to 12 parameters][fp2].\n \n@@ -3743,7 +3743,7 @@ Libraries\n   [better for long data][sh].\n * [`AtomicPtr`] implements [`Send`].\n * The [`read_to_end`] implementations for [`Stdin`] and [`File`]\n-  are now [specialized to use uninitalized buffers for increased\n+  are now [specialized to use uninitialized buffers for increased\n   performance][rte].\n * Lifetime parameters of foreign functions [are now resolved\n   properly][f].\n@@ -3872,7 +3872,7 @@ Highlights\n * This is the first release with [experimental support for linking\n   with the MSVC linker and lib C on Windows (instead of using the GNU\n   variants via MinGW)][win]. It is yet recommended only for the most\n-  intrepid Rusticians.\n+  intrepid Rustaceans.\n * Benchmark compilations are showing a 30% improvement in\n   bootstrapping over 1.1.\n \n@@ -4738,7 +4738,7 @@ Version 0.11.0 (2014-07-02)\n   * Libraries\n     * The standard library is now a \"facade\" over a number of underlying\n       libraries. This means that development on the standard library should\n-      be speeder due to smaller crates, as well as a clearer line between\n+      be speedier due to smaller crates, as well as a clearer line between\n       all dependencies.\n     * A new library, libcore, lives under the standard library's facade\n       which is Rust's \"0-assumption\" library, suitable for embedded and"}, {"sha": "fa3ba02482f569b81903c27ff85f716ae8a3ede3", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -185,7 +185,7 @@ pub unsafe fn setup(build: &mut Build) {\n                             0, FALSE, DUPLICATE_SAME_ACCESS);\n \n     // If this failed, well at least we tried! An example of DuplicateHandle\n-    // failing in the past has been when the wrong python2 package spawed this\n+    // failing in the past has been when the wrong python2 package spawned this\n     // build system (e.g. the `python2` package in MSYS instead of\n     // `mingw-w64-x86_64-python2`. Not sure why it failed, but the \"failure\n     // mode\" here is that we only clean everything up when the build system"}, {"sha": "bc275b7fc745c2b903aca80eec1cc71b5d757345", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -78,7 +78,7 @@ pub fn check(build: &mut Build) {\n     }\n \n     let mut cmd_finder = Finder::new();\n-    // If we've got a git directory we're gona need git to update\n+    // If we've got a git directory we're gonna need git to update\n     // submodules and learn about various other aspects.\n     if build.rust_info.is_git() {\n         cmd_finder.must_have(\"git\");"}, {"sha": "8d4dbc399986fa1865208170018d51c450ef3f0b", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -36,14 +36,14 @@ a Docker image.\n \n     1. Select the \"default\" virtual machine inside VirtualBox, then click\n         \"Settings\"\n-    2. Go to \"Shared Folders\", click \"Add shared foldrer\" (the folder icon with\n+    2. Go to \"Shared Folders\", click \"Add shared folder\" (the folder icon with\n         a plus sign), fill in the following information, then click \"OK\":\n \n         * Folder path: `E:\\rust`\n         * Folder name: `e/rust`\n         * Read-only: \u2610 *unchecked*\n         * Auto-mount: \u2611 *checked*\n-        * Make Permanant: \u2611 *checked*\n+        * Make Permanent: \u2611 *checked*\n \n 3. VirtualBox might not support creating symbolic links inside a shared folder\n     by default. You can enable it manually by running these from `cmd.exe`:"}, {"sha": "5b4314d57e6ccd7968971032c7a80c05f00d62e4", "filename": "src/ci/docker/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -52,7 +52,7 @@ curl $URL/2017-03-17-netbsd-comp.tgz | \\\n cd usr/src\n \n # The options, in order, do the following\n-# * this is an unpriviledged build\n+# * this is an unprivileged build\n # * output to a predictable location\n # * disable various uneeded stuff\n MKUNPRIVED=yes TOOLDIR=/x-tools/x86_64-unknown-netbsd \\"}, {"sha": "ffb3532f497f99077628396d554abd25dab27a5a", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -37,7 +37,7 @@ if [ \"$DIST_SRC\" = \"\" ]; then\n fi\n \n # If we're deploying artifacts then we set the release channel, otherwise if\n-# we're not deploying then we want to be sure to enable all assertions becauase\n+# we're not deploying then we want to be sure to enable all assertions because\n # we'll be running tests\n #\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`"}, {"sha": "e51c63cf008981ae5f4cfcfcbdb2f77cd6bb9f85", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -279,7 +279,7 @@ $ rustdoc README.md --markdown-playground-url https://play.rust-lang.org/\n ```\n \n When rendering a Markdown file, this flag gives the base URL of the Rust\n-Playround, to use for generating `Run` buttons.\n+Playground, to use for generating `Run` buttons.\n \n \n ## `--markdown-no-toc`: don't generate a table of contents\n@@ -291,7 +291,7 @@ $ rustdoc README.md --markdown-no-toc\n ```\n \n When generating documentation from a Markdown file, by default, `rustdoc` will\n-generate a table of contents. This flag supresses that, and no TOC will be\n+generate a table of contents. This flag suppresses that, and no TOC will be\n generated.\n \n "}, {"sha": "e5a603a3709f6453dc4eaa4ca4610b69bbd94afe", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -50,7 +50,7 @@ running them. Here's the full algorithm rustdoc uses to preprocess examples:\n 5. Finally, if the example does not contain `fn main`, the remainder of the\n    text is wrapped in `fn main() { your_code }`.\n \n-For more about that caveat in rule 4, see \"Documeting Macros\" below.\n+For more about that caveat in rule 4, see \"Documenting Macros\" below.\n \n ## Hiding portions of the example\n "}, {"sha": "5c8124c9c6b7d459e2b19ec4a2cf381991e8ca34", "filename": "src/doc/unstable-book/src/language-features/optin-builtin-traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -10,7 +10,7 @@ The `optin_builtin_traits` feature gate allows you to define auto traits.\n \n Auto traits, like [`Send`] or [`Sync`] in the standard library, are marker traits\n that are automatically implemented for every type, unless the type, or a type it contains, \n-has explictly opted out via a negative impl. \n+has explicitly opted out via a negative impl. \n \n [`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n [`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html"}, {"sha": "d845c99a88a691946d439861d7df4acec850a998", "filename": "src/doc/unstable-book/src/language-features/unboxed-closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -9,7 +9,7 @@ See Also: [`fn_traits`](library-features/fn-traits.html)\n ----\n \n The `unboxed_closures` feature allows you to write functions using the `\"rust-call\"` ABI,\n-required for implmenting the [`Fn*`] family of traits. `\"rust-call\"` functions must have \n+required for implementing the [`Fn*`] family of traits. `\"rust-call\"` functions must have \n exactly one (non self) argument, a tuple representing the argument list.\n \n [`Fn*`]: https://doc.rust-lang.org/std/ops/trait.Fn.html"}, {"sha": "2cfc8698c4b67f7e9c8c9cb569aaa54758645542", "filename": "src/etc/installer/exe/modpath.iss", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fetc%2Finstaller%2Fexe%2Fmodpath.iss", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fetc%2Finstaller%2Fexe%2Fmodpath.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fexe%2Fmodpath.iss?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -144,7 +144,7 @@ begin\n \tend;\n end;\n \n-// Split a string into an array using passed delimeter\n+// Split a string into an array using passed delimiter\n procedure Explode(var Dest: TArrayOfString; Text: String; Separator: String);\n var\n \ti: Integer;"}, {"sha": "7148a1143fd46e985da8054a584eddf904817951", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -536,7 +536,7 @@ use string;\n /// assert_eq!(s, \"Hello, world!\");\n /// ```\n ///\n-/// Please note that using [`format!`] might be preferrable.\n+/// Please note that using [`format!`] might be preferable.\n /// Example:\n ///\n /// ```"}, {"sha": "472eef77d7956411ddfa93d4ab60d7e291860ef9", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -72,7 +72,7 @@ macro_rules! vec {\n \n /// Creates a `String` using interpolation of runtime expressions.\n ///\n-/// The first argument `format!` recieves is a format string.  This must be a string\n+/// The first argument `format!` receives is a format string.  This must be a string\n /// literal.  The power of the formatting string is in the `{}`s contained.\n ///\n /// Additional parameters passed to `format!` replace the `{}`s within the"}, {"sha": "58f08fd8bc11d854216f571034d8d0213c53606e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -346,7 +346,7 @@ impl<T> Rc<T> {\n             unsafe {\n                 let val = ptr::read(&*this); // copy the contained object\n \n-                // Indicate to Weaks that they can't be promoted by decrememting\n+                // Indicate to Weaks that they can't be promoted by decrementing\n                 // the strong count, and then remove the implicit \"strong weak\"\n                 // pointer while also handling drop logic by just crafting a\n                 // fake Weak."}, {"sha": "cd0f4a22e9cfac32009a54cb535cfab4260129b8", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -596,7 +596,7 @@ impl String {\n     /// Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`]\n     /// if `v` contains any invalid data.\n     ///\n-    /// [`Err`]: ../../std/result/enum.Result.htlm#variant.Err\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///"}, {"sha": "a14a5d32738b3198dbdec3c7c9de9eada796c063", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -1427,12 +1427,12 @@ mod pattern {\n         Reject(6, 7),\n         Match (7, 7),\n     ]);\n-    make_test!(str_searcher_mulibyte_haystack, \" \", \"\u251c\u2500\u2500\", [\n+    make_test!(str_searcher_multibyte_haystack, \" \", \"\u251c\u2500\u2500\", [\n         Reject(0, 3),\n         Reject(3, 6),\n         Reject(6, 9),\n     ]);\n-    make_test!(str_searcher_empty_needle_mulibyte_haystack, \"\", \"\u251c\u2500\u2500\", [\n+    make_test!(str_searcher_empty_needle_multibyte_haystack, \"\", \"\u251c\u2500\u2500\", [\n         Match (0, 0),\n         Reject(0, 3),\n         Match (3, 3),\n@@ -1455,7 +1455,7 @@ mod pattern {\n         Match (5, 6),\n         Reject(6, 7),\n     ]);\n-    make_test!(char_searcher_mulibyte_haystack, ' ', \"\u251c\u2500\u2500\", [\n+    make_test!(char_searcher_multibyte_haystack, ' ', \"\u251c\u2500\u2500\", [\n         Reject(0, 3),\n         Reject(3, 6),\n         Reject(6, 9),"}, {"sha": "c29449a241e4576dbf447252e9b59eebe02dd374", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -1089,7 +1089,7 @@ impl<T> Vec<T> {\n         // Memory safety\n         //\n         // When the Drain is first created, it shortens the length of\n-        // the source vector to make sure no uninitalized or moved-from elements\n+        // the source vector to make sure no uninitialized or moved-from elements\n         // are accessible at all if the Drain's destructor never gets to run.\n         //\n         // Drain will ptr::read out the values to remove."}, {"sha": "8bdb29d25606f81756b37437032f286dadcad96d", "filename": "src/libbacktrace/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibbacktrace%2Fconfigure", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fconfigure?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -14584,7 +14584,7 @@ func_basename ()\n #             to NONDIR_REPLACEMENT.\n #             value returned in \"$func_dirname_result\"\n #   basename: Compute filename of FILE.\n-#             value retuned in \"$func_basename_result\"\n+#             value returned in \"$func_basename_result\"\n # Implementation must be kept synchronized with func_dirname\n # and func_basename. For efficiency, we do not delegate to\n # those functions but instead duplicate the functionality here."}, {"sha": "eff9e62be8a05644a842fd99ca5ae814282797b0", "filename": "src/libbacktrace/ltmain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibbacktrace%2Fltmain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibbacktrace%2Fltmain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fltmain.sh?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -177,7 +177,7 @@ basename=\"s,^.*/,,\"\n #             to NONDIR_REPLACEMENT.\n #             value returned in \"$func_dirname_result\"\n #   basename: Compute filename of FILE.\n-#             value retuned in \"$func_basename_result\"\n+#             value returned in \"$func_basename_result\"\n # Implementation must be kept synchronized with func_dirname\n # and func_basename. For efficiency, we do not delegate to\n # those functions but instead duplicate the functionality here."}, {"sha": "cc324b585bcf9143a21c8cb1402607c8876fd215", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -952,7 +952,7 @@ pub trait UpperExp {\n /// assert_eq!(output, \"Hello world!\");\n /// ```\n ///\n-/// Please note that using [`write!`] might be preferrable. Example:\n+/// Please note that using [`write!`] might be preferable. Example:\n ///\n /// ```\n /// use std::fmt::Write;"}, {"sha": "1b39e029604d5c63aec60a0de3098b7b5658b8f3", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -111,7 +111,7 @@ impl<A: Array> ArrayVec<A> {\n         // Memory safety\n         //\n         // When the Drain is first created, it shortens the length of\n-        // the source vector to make sure no uninitalized or moved-from elements\n+        // the source vector to make sure no uninitialized or moved-from elements\n         // are accessible at all if the Drain's destructor never gets to run.\n         //\n         // Drain will ptr::read out the values to remove."}, {"sha": "4e35cf840de96434d6e1ec3512258836627e31b2", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -3752,7 +3752,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_eq_recievers() {\n+    fn test_eq_receivers() {\n         use borrow::Cow;\n \n         let borrowed: &Path = Path::new(\"foo/bar\");"}, {"sha": "4d2ba5e2b120c7cfd8bae548a12cb025314d4621", "filename": "src/test/mir-opt/issue-41697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8b36f6f151707833e75463068f0630dd0a0644/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697.rs?ref=7c8b36f6f151707833e75463068f0630dd0a0644", "patch": "@@ -12,7 +12,7 @@\n // artificial cycles: during type-checking, we had to get the MIR for\n // the constant expressions in `[u8; 2]`, which in turn would trigger\n // an attempt to get the item-path, which in turn would request the\n-// types of the impl, which would trigger a cycle. We supressed this\n+// types of the impl, which would trigger a cycle. We suppressed this\n // cycle now by forcing mir-dump to avoid asking for types of an impl.\n \n #![feature(rustc_attrs)]"}]}