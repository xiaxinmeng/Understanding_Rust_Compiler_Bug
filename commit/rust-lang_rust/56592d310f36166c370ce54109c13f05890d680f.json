{"sha": "56592d310f36166c370ce54109c13f05890d680f", "node_id": "C_kwDOAAsO6NoAKDU2NTkyZDMxMGYzNjE2NmMzNzBjZTU0MTA5YzEzZjA1ODkwZDY4MGY", "commit": {"author": {"name": "BlackHoleFox", "email": "blackholefoxdev@gmail.com", "date": "2022-12-01T09:02:36Z"}, "committer": {"name": "BlackHoleFox", "email": "blackholefoxdev@gmail.com", "date": "2022-12-03T00:12:16Z"}, "message": "Fix passing MACOSX_DEPLOYMENT_TARGET to the linker", "tree": {"sha": "ca7cf40f07fc0d16e1bb16a2bfbd49cc985598c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca7cf40f07fc0d16e1bb16a2bfbd49cc985598c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56592d310f36166c370ce54109c13f05890d680f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56592d310f36166c370ce54109c13f05890d680f", "html_url": "https://github.com/rust-lang/rust/commit/56592d310f36166c370ce54109c13f05890d680f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56592d310f36166c370ce54109c13f05890d680f/comments", "author": {"login": "BlackHoleFox", "id": 20936452, "node_id": "MDQ6VXNlcjIwOTM2NDUy", "avatar_url": "https://avatars.githubusercontent.com/u/20936452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlackHoleFox", "html_url": "https://github.com/BlackHoleFox", "followers_url": "https://api.github.com/users/BlackHoleFox/followers", "following_url": "https://api.github.com/users/BlackHoleFox/following{/other_user}", "gists_url": "https://api.github.com/users/BlackHoleFox/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlackHoleFox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlackHoleFox/subscriptions", "organizations_url": "https://api.github.com/users/BlackHoleFox/orgs", "repos_url": "https://api.github.com/users/BlackHoleFox/repos", "events_url": "https://api.github.com/users/BlackHoleFox/events{/privacy}", "received_events_url": "https://api.github.com/users/BlackHoleFox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BlackHoleFox", "id": 20936452, "node_id": "MDQ6VXNlcjIwOTM2NDUy", "avatar_url": "https://avatars.githubusercontent.com/u/20936452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlackHoleFox", "html_url": "https://github.com/BlackHoleFox", "followers_url": "https://api.github.com/users/BlackHoleFox/followers", "following_url": "https://api.github.com/users/BlackHoleFox/following{/other_user}", "gists_url": "https://api.github.com/users/BlackHoleFox/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlackHoleFox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlackHoleFox/subscriptions", "organizations_url": "https://api.github.com/users/BlackHoleFox/orgs", "repos_url": "https://api.github.com/users/BlackHoleFox/repos", "events_url": "https://api.github.com/users/BlackHoleFox/events{/privacy}", "received_events_url": "https://api.github.com/users/BlackHoleFox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "html_url": "https://github.com/rust-lang/rust/commit/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0"}], "stats": {"total": 108, "additions": 76, "deletions": 32}, "files": [{"sha": "e72cab629ff19058cd332c33689fc851ee263cc4", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=56592d310f36166c370ce54109c13f05890d680f", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n use crate::spec::{FramePointer, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -10,8 +10,6 @@ pub fn target() -> Target {\n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n-\n     Target {\n         // Clang automatically chooses a more specific target based on\n         // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work"}, {"sha": "3c90a5e7e93ea74ca2ae33ac230ad3522d10f841", "filename": "compiler/rustc_target/src/spec/apple/tests.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple%2Ftests.rs?ref=56592d310f36166c370ce54109c13f05890d680f", "patch": "@@ -1,6 +1,6 @@\n use crate::spec::{\n-    aarch64_apple_ios_sim, aarch64_apple_watchos_sim, x86_64_apple_ios, x86_64_apple_tvos,\n-    x86_64_apple_watchos_sim,\n+    aarch64_apple_darwin, aarch64_apple_ios_sim, aarch64_apple_watchos_sim, i686_apple_darwin,\n+    x86_64_apple_darwin, x86_64_apple_ios, x86_64_apple_tvos, x86_64_apple_watchos_sim,\n };\n \n #[test]\n@@ -18,3 +18,18 @@ fn simulator_targets_set_abi() {\n         assert_eq!(target.abi, \"sim\")\n     }\n }\n+\n+#[test]\n+fn macos_link_environment_unmodified() {\n+    let all_macos_targets = [\n+        aarch64_apple_darwin::target(),\n+        i686_apple_darwin::target(),\n+        x86_64_apple_darwin::target(),\n+    ];\n+\n+    for target in all_macos_targets {\n+        // macOS targets should only remove information for cross-compiling, but never\n+        // for the host.\n+        assert_eq!(target.link_env_remove, crate::spec::cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"]);\n+    }\n+}"}, {"sha": "7f8160b5dec62d7ce4ed0b5a4ff5113cfb4da9ac", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=56592d310f36166c370ce54109c13f05890d680f", "patch": "@@ -72,16 +72,6 @@ impl Arch {\n             Arm64_sim => \"apple-a12\",\n         }\n     }\n-\n-    fn link_env_remove(self) -> StaticCow<[StaticCow<str>]> {\n-        match self {\n-            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n-            | Arm64_sim => {\n-                cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n-            }\n-            X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n-        }\n-    }\n }\n \n fn pre_link_args(os: &'static str, arch: Arch, abi: &'static str) -> LinkArgs {\n@@ -140,7 +130,7 @@ pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n         abi: abi.into(),\n         os: os.into(),\n         cpu: arch.target_cpu().into(),\n-        link_env_remove: arch.link_env_remove(),\n+        link_env_remove: link_env_remove(arch, os),\n         vendor: \"apple\".into(),\n         linker_flavor: LinkerFlavor::Darwin(Cc::Yes, Lld::No),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n@@ -211,20 +201,38 @@ pub fn macos_llvm_target(arch: Arch) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch.target_name(), major, minor)\n }\n \n-pub fn macos_link_env_remove() -> Vec<StaticCow<str>> {\n-    let mut env_remove = Vec::with_capacity(2);\n-    // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n-    // may occur when we're linking a custom build script while targeting iOS for example.\n-    if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n-        if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\") {\n-            env_remove.push(\"SDKROOT\".into())\n+fn link_env_remove(arch: Arch, os: &'static str) -> StaticCow<[StaticCow<str>]> {\n+    // Apple platforms only officially support macOS as a host for any compilation.\n+    //\n+    // If building for macOS, we go ahead and remove any erronous environment state\n+    // that's only applicable to cross-OS compilation. Always leave anything for the\n+    // host OS alone though.\n+    if os == \"macos\" {\n+        let mut env_remove = Vec::with_capacity(2);\n+        // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n+        // may occur when we're linking a custom build script while targeting iOS for example.\n+        if let Ok(sdkroot) = env::var(\"SDKROOT\") {\n+            if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\")\n+            {\n+                env_remove.push(\"SDKROOT\".into())\n+            }\n+        }\n+        // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n+        // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n+        // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n+        env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".into());\n+        env_remove.into()\n+    } else {\n+        // Otherwise if cross-compiling for a different OS/SDK, remove any part\n+        // of the linking environment that's wrong and reversed.\n+        match arch {\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n+            | Arm64_sim => {\n+                cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n+            }\n+            X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n         }\n     }\n-    // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n-    // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n-    // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n-    env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".into());\n-    env_remove\n }\n \n fn ios_deployment_target() -> (u32, u32) {"}, {"sha": "ad22467ba9c8970ad4cdf13b804d648b307f6cfb", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=56592d310f36166c370ce54109c13f05890d680f", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -7,7 +7,6 @@ pub fn target() -> Target {\n     let mut base = opts(\"macos\", arch);\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m32\"]);\n-    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.frame_pointer = FramePointer::Always;\n "}, {"sha": "9a3e7a8050025c01cc63e69238ad78756b736213", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56592d310f36166c370ce54109c13f05890d680f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=56592d310f36166c370ce54109c13f05890d680f", "patch": "@@ -1,4 +1,4 @@\n-use super::apple_base::{macos_link_env_remove, macos_llvm_target, opts, Arch};\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n use crate::spec::{StackProbeType, Target, TargetOptions};\n \n@@ -8,7 +8,6 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(128); // core2 supports cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n     base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n-    base.link_env_remove.to_mut().extend(macos_link_env_remove());\n     base.stack_probes = StackProbeType::X86;\n     base.supported_sanitizers =\n         SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;"}, {"sha": "70fca04365378e4af715d7948589000a591399e4", "filename": "src/test/run-make/macos-deployment-target/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56592d310f36166c370ce54109c13f05890d680f/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/56592d310f36166c370ce54109c13f05890d680f/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2FMakefile?ref=56592d310f36166c370ce54109c13f05890d680f", "patch": "@@ -0,0 +1,21 @@\n+# only-macos\n+#\n+# Check that a set deployment target actually makes it to the linker.\n+# This is important since its a compatibility hazard. The linker will\n+# generate load commands differently based on what minimum OS it can assume.\n+\n+include ../../run-make-fulldeps/tools.mk\n+\n+ifeq ($(strip $(shell uname -m)),arm64)\n+\tGREP_PATTERN = \"minos 11.0\"\n+else\n+ \tGREP_PATTERN = \"version 10.9\"\n+endif\n+\n+OUT_FILE=$(TMPDIR)/with_deployment_target.dylib\n+all:\n+\tenv MACOSX_DEPLOYMENT_TARGET=10.9 $(RUSTC) with_deployment_target.rs -o $(OUT_FILE)\n+# XXX: The check is for either the x86_64 minimum OR the aarch64 minimum (M1 starts at macOS 11).\n+# They also use different load commands, so we let that change with each too. The aarch64 check\n+# isn't as robust as the x86 one, but testing both seems unneeded.\n+\tvtool -show-build $(OUT_FILE) | $(CGREP) -e $(GREP_PATTERN)"}, {"sha": "342fe0ecbcfcd20085014a4b62278cfe2b762cbc", "filename": "src/test/run-make/macos-deployment-target/with_deployment_target.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56592d310f36166c370ce54109c13f05890d680f/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2Fwith_deployment_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56592d310f36166c370ce54109c13f05890d680f/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2Fwith_deployment_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-deployment-target%2Fwith_deployment_target.rs?ref=56592d310f36166c370ce54109c13f05890d680f", "patch": "@@ -0,0 +1,4 @@\n+#![crate_type = \"cdylib\"]\n+\n+#[allow(dead_code)]\n+fn something_and_nothing() {}"}]}