{"sha": "8931fbd694d1e350e828cbef2c1a09bd4dff6cc7", "node_id": "C_kwDOAAsO6NoAKDg5MzFmYmQ2OTRkMWUzNTBlODI4Y2JlZjJjMWEwOWJkNGRmZjZjYzc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-30T12:48:49Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-30T12:48:49Z"}, "message": "add logging to `write_resolution`", "tree": {"sha": "d13f28d2009907950e84fd4bb455819876cc1dd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13f28d2009907950e84fd4bb455819876cc1dd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8931fbd694d1e350e828cbef2c1a09bd4dff6cc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8931fbd694d1e350e828cbef2c1a09bd4dff6cc7", "html_url": "https://github.com/rust-lang/rust/commit/8931fbd694d1e350e828cbef2c1a09bd4dff6cc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8931fbd694d1e350e828cbef2c1a09bd4dff6cc7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d845bd412cf49ad55860266324ed63fd4e3bcfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d845bd412cf49ad55860266324ed63fd4e3bcfc", "html_url": "https://github.com/rust-lang/rust/commit/1d845bd412cf49ad55860266324ed63fd4e3bcfc"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "9ef5f331aaa5c578a514f0ab7667e60d444495bf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8931fbd694d1e350e828cbef2c1a09bd4dff6cc7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8931fbd694d1e350e828cbef2c1a09bd4dff6cc7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=8931fbd694d1e350e828cbef2c1a09bd4dff6cc7", "patch": "@@ -156,6 +156,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.typeck_results.borrow_mut().field_indices_mut().insert(hir_id, index);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     pub(in super::super) fn write_resolution(\n         &self,\n         hir_id: hir::HirId,\n@@ -164,8 +165,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.typeck_results.borrow_mut().type_dependent_defs_mut().insert(hir_id, r);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn write_method_call(&self, hir_id: hir::HirId, method: MethodCallee<'tcx>) {\n-        debug!(\"write_method_call(hir_id={:?}, method={:?})\", hir_id, method);\n         self.write_resolution(hir_id, Ok((DefKind::AssocFn, method.def_id)));\n         self.write_substs(hir_id, method.substs);\n "}]}