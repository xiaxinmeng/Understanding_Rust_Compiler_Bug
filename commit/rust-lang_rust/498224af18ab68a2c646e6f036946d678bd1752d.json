{"sha": "498224af18ab68a2c646e6f036946d678bd1752d", "node_id": "C_kwDOAAsO6NoAKDQ5ODIyNGFmMThhYjY4YTJjNjQ2ZTZmMDM2OTQ2ZDY3OGJkMTc1MmQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-01T22:48:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-01T22:48:34Z"}, "message": "Merge #11393\n\n11393: fix: Complete functions and methods from block level impls r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11372\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e451b31775047cea2debda10b55d257ed22354d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e451b31775047cea2debda10b55d257ed22354d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/498224af18ab68a2c646e6f036946d678bd1752d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+bjCCRBK7hj4Ov3rIwAAelAIAE6gki6vtFMMsnDmixpxw1Ih\nSE0cY55dmTpRGJAOrFGJhTjyvz7OLQEWeUWhxHIjiPfXv2cX7Z+4IlOkKRSBbi4o\n8ZUIa+ZK0LTp0gyMZSyHq5EEfhWDwIUnJyjpqEbnDG4v9W8v7Rp4pmFklYZfBvBj\nvcbtcKAYaG+1DCmWasxLtitany6GuWhCrX3nM9lv7a8A9lwAx7E4aTpKG3S2X1gE\nwr+KTZbHQ9quQgkl62LUSioQCtp0sq+KHt33s5lm+ZMEHz44uE8JlYkooeEeOSQZ\nakTEuolq+B8IbMfh+BAbBEuY90vjbeC+5iRp3rCSOKq+6gw++4z/VL2fW2qSmpY=\n=XrKa\n-----END PGP SIGNATURE-----\n", "payload": "tree e451b31775047cea2debda10b55d257ed22354d5\nparent 5ee21fee9c503e68c059433d72be06c18fe3a663\nparent d7a544e69a98aeb29464f9bc5c5d0be4a1f47a76\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643755714 +0000\ncommitter GitHub <noreply@github.com> 1643755714 +0000\n\nMerge #11393\n\n11393: fix: Complete functions and methods from block level impls r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11372\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/498224af18ab68a2c646e6f036946d678bd1752d", "html_url": "https://github.com/rust-lang/rust/commit/498224af18ab68a2c646e6f036946d678bd1752d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/498224af18ab68a2c646e6f036946d678bd1752d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ee21fee9c503e68c059433d72be06c18fe3a663", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee21fee9c503e68c059433d72be06c18fe3a663", "html_url": "https://github.com/rust-lang/rust/commit/5ee21fee9c503e68c059433d72be06c18fe3a663"}, {"sha": "d7a544e69a98aeb29464f9bc5c5d0be4a1f47a76", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a544e69a98aeb29464f9bc5c5d0be4a1f47a76", "html_url": "https://github.com/rust-lang/rust/commit/d7a544e69a98aeb29464f9bc5c5d0be4a1f47a76"}], "stats": {"total": 232, "additions": 160, "deletions": 72}, "files": [{"sha": "e091af4bf8cdaa3b1f4ff9bd26334904ae0d0985", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -2787,6 +2787,7 @@ impl Type {\n         db: &dyn HirDatabase,\n         krate: Crate,\n         traits_in_scope: &FxHashSet<TraitId>,\n+        with_local_impls: Option<Module>,\n         name: Option<&Name>,\n         mut callback: impl FnMut(Type, Function) -> Option<T>,\n     ) -> Option<T> {\n@@ -2797,6 +2798,7 @@ impl Type {\n             db,\n             krate,\n             traits_in_scope,\n+            with_local_impls,\n             name,\n             &mut |ty, assoc_item_id| {\n                 if let AssocItemId::FunctionId(func) = assoc_item_id {\n@@ -2816,6 +2818,7 @@ impl Type {\n         db: &dyn HirDatabase,\n         krate: Crate,\n         traits_in_scope: &FxHashSet<TraitId>,\n+        with_local_impls: Option<Module>,\n         name: Option<&Name>,\n         callback: &mut dyn FnMut(&Ty, AssocItemId) -> ControlFlow<()>,\n     ) {\n@@ -2831,7 +2834,7 @@ impl Type {\n             env,\n             krate,\n             traits_in_scope,\n-            None,\n+            with_local_impls.and_then(|b| b.id.containing_block()).into(),\n             name,\n             method_resolution::LookupMode::MethodCall,\n             &mut |ty, id| callback(&ty.value, id),\n@@ -2843,6 +2846,7 @@ impl Type {\n         db: &dyn HirDatabase,\n         krate: Crate,\n         traits_in_scope: &FxHashSet<TraitId>,\n+        with_local_impls: Option<Module>,\n         name: Option<&Name>,\n         mut callback: impl FnMut(Type, AssocItem) -> Option<T>,\n     ) -> Option<T> {\n@@ -2852,6 +2856,7 @@ impl Type {\n             db,\n             krate,\n             traits_in_scope,\n+            with_local_impls,\n             name,\n             &mut |ty, assoc_item_id| {\n                 if let Some(res) = callback(self.derived(ty.clone()), assoc_item_id.into()) {\n@@ -2869,6 +2874,7 @@ impl Type {\n         db: &dyn HirDatabase,\n         krate: Crate,\n         traits_in_scope: &FxHashSet<TraitId>,\n+        with_local_impls: Option<Module>,\n         name: Option<&Name>,\n         callback: &mut dyn FnMut(&Ty, AssocItemId) -> ControlFlow<()>,\n     ) {\n@@ -2883,7 +2889,7 @@ impl Type {\n             env,\n             krate,\n             traits_in_scope,\n-            None,\n+            with_local_impls.and_then(|b| b.id.containing_block()).into(),\n             name,\n             method_resolution::LookupMode::Path,\n             &mut |ty, id| callback(&ty.value, id),"}, {"sha": "4f1bdee705ddb5a5fcd7ca9a0983c05c08976cda", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -996,7 +996,7 @@ impl<'a> InferenceContext<'a> {\n                 self.trait_env.clone(),\n                 krate,\n                 &traits_in_scope,\n-                self.resolver.module(),\n+                self.resolver.module().into(),\n                 method_name,\n             )\n         });"}, {"sha": "b63ef2ffdc8a7c80fcb8b455bd8a74e51a4a9864", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -227,7 +227,7 @@ impl<'a> InferenceContext<'a> {\n             self.table.trait_env.clone(),\n             krate,\n             &traits_in_scope,\n-            self.resolver.module(),\n+            self.resolver.module().into(),\n             Some(name),\n             method_resolution::LookupMode::Path,\n             move |_ty, item| {"}, {"sha": "c91b6f2e82d10d336df3182840932723e26d2be7", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 54, "deletions": 31, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -437,7 +437,7 @@ pub(crate) fn lookup_method(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n-    visible_from_module: Option<ModuleId>,\n+    visible_from_module: VisibleFromModule,\n     name: &Name,\n ) -> Option<(Canonical<Ty>, FunctionId)> {\n     iterate_method_candidates(\n@@ -468,6 +468,34 @@ pub enum LookupMode {\n     Path,\n }\n \n+#[derive(Clone, Copy)]\n+pub enum VisibleFromModule {\n+    /// Filter for results that are visible from the given module\n+    Filter(ModuleId),\n+    /// Include impls from the given block.\n+    IncludeBlock(BlockId),\n+    /// Do nothing special in regards visibility\n+    None,\n+}\n+\n+impl From<Option<ModuleId>> for VisibleFromModule {\n+    fn from(module: Option<ModuleId>) -> Self {\n+        match module {\n+            Some(module) => Self::Filter(module),\n+            None => Self::None,\n+        }\n+    }\n+}\n+\n+impl From<Option<BlockId>> for VisibleFromModule {\n+    fn from(block: Option<BlockId>) -> Self {\n+        match block {\n+            Some(block) => Self::IncludeBlock(block),\n+            None => Self::None,\n+        }\n+    }\n+}\n+\n // This would be nicer if it just returned an iterator, but that runs into\n // lifetime problems, because we need to borrow temp `CrateImplDefs`.\n // FIXME add a context type here?\n@@ -477,7 +505,7 @@ pub fn iterate_method_candidates<T>(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n-    visible_from_module: Option<ModuleId>,\n+    visible_from_module: VisibleFromModule,\n     name: Option<&Name>,\n     mode: LookupMode,\n     mut callback: impl FnMut(&Canonical<Ty>, AssocItemId) -> Option<T>,\n@@ -510,7 +538,7 @@ pub fn iterate_method_candidates_dyn(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n-    visible_from_module: Option<ModuleId>,\n+    visible_from_module: VisibleFromModule,\n     name: Option<&Name>,\n     mode: LookupMode,\n     callback: &mut dyn FnMut(&Canonical<Ty>, AssocItemId) -> ControlFlow<()>,\n@@ -578,7 +606,7 @@ fn iterate_method_candidates_with_autoref(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n-    visible_from_module: Option<ModuleId>,\n+    visible_from_module: VisibleFromModule,\n     name: Option<&Name>,\n     mut callback: &mut dyn FnMut(&Canonical<Ty>, AssocItemId) -> ControlFlow<()>,\n ) -> ControlFlow<()> {\n@@ -644,7 +672,7 @@ fn iterate_method_candidates_by_receiver(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n-    visible_from_module: Option<ModuleId>,\n+    visible_from_module: VisibleFromModule,\n     name: Option<&Name>,\n     mut callback: &mut dyn FnMut(&Canonical<Ty>, AssocItemId) -> ControlFlow<()>,\n ) -> ControlFlow<()> {\n@@ -686,7 +714,7 @@ fn iterate_method_candidates_for_self_ty(\n     env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     traits_in_scope: &FxHashSet<TraitId>,\n-    visible_from_module: Option<ModuleId>,\n+    visible_from_module: VisibleFromModule,\n     name: Option<&Name>,\n     mut callback: &mut dyn FnMut(&Canonical<Ty>, AssocItemId) -> ControlFlow<()>,\n ) -> ControlFlow<()> {\n@@ -797,43 +825,38 @@ fn iterate_inherent_methods(\n     name: Option<&Name>,\n     receiver_ty: Option<&Canonical<Ty>>,\n     krate: CrateId,\n-    visible_from_module: Option<ModuleId>,\n+    visible_from_module: VisibleFromModule,\n     callback: &mut dyn FnMut(&Canonical<Ty>, AssocItemId) -> ControlFlow<()>,\n ) -> ControlFlow<()> {\n     let def_crates = match def_crates(db, &self_ty.value, krate) {\n         Some(k) => k,\n         None => return ControlFlow::Continue(()),\n     };\n \n-    if let Some(module_id) = visible_from_module {\n-        if let Some(block_id) = module_id.containing_block() {\n-            if let Some(impls) = db.inherent_impls_in_block(block_id) {\n-                impls_for_self_ty(\n-                    &impls,\n-                    self_ty,\n-                    db,\n-                    env.clone(),\n-                    name,\n-                    receiver_ty,\n-                    visible_from_module,\n-                    callback,\n-                )?;\n-            }\n+    let (module, block) = match visible_from_module {\n+        VisibleFromModule::Filter(module) => (Some(module), module.containing_block()),\n+        VisibleFromModule::IncludeBlock(block) => (None, Some(block)),\n+        VisibleFromModule::None => (None, None),\n+    };\n+\n+    if let Some(block_id) = block {\n+        if let Some(impls) = db.inherent_impls_in_block(block_id) {\n+            impls_for_self_ty(\n+                &impls,\n+                self_ty,\n+                db,\n+                env.clone(),\n+                name,\n+                receiver_ty,\n+                module,\n+                callback,\n+            )?;\n         }\n     }\n \n     for krate in def_crates {\n         let impls = db.inherent_impls_in_crate(krate);\n-        impls_for_self_ty(\n-            &impls,\n-            self_ty,\n-            db,\n-            env.clone(),\n-            name,\n-            receiver_ty,\n-            visible_from_module,\n-            callback,\n-        )?;\n+        impls_for_self_ty(&impls, self_ty, db, env.clone(), name, receiver_ty, module, callback)?;\n     }\n     return ControlFlow::Continue(());\n "}, {"sha": "0d2daa8dc30c567ab17b9af90dec6a735a546bb5", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -156,6 +156,7 @@ fn is_ref_and_impls_iter_method(\n             sema.db,\n             krate,\n             &traits_in_scope,\n+            None,\n             Some(&wanted_method),\n             |_, func| {\n                 if func.ret_type(sema.db).impls_trait(sema.db, iter_trait, &[]) {"}, {"sha": "cb3fbed21995a74682d8c3a55fa8a096e7564a8a", "filename": "crates/ide_assists/src/handlers/generate_is_empty_from_len.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -93,7 +93,9 @@ fn get_impl_method(\n     let krate = impl_def.module(db).krate();\n     let ty = impl_def.self_ty(db);\n     let traits_in_scope = scope.visible_traits();\n-    ty.iterate_method_candidates(db, krate, &traits_in_scope, Some(fn_name), |_, func| Some(func))\n+    ty.iterate_method_candidates(db, krate, &traits_in_scope, None, Some(fn_name), |_, func| {\n+        Some(func)\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "a072d223e0daf610cbcfe33f27342d5bfaeeaaa9", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -253,7 +253,7 @@ fn enum_variants_with_paths(\n ) {\n     let variants = enum_.variants(ctx.db);\n \n-    let module = if let Some(module) = ctx.scope.module() {\n+    let module = if let Some(module) = ctx.module {\n         // Compute path from the completion site if available.\n         module\n     } else {"}, {"sha": "29fe096e135608fd9c6817a000c5cb4aee92d7f3", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -80,7 +80,7 @@ fn flyimport_derive(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n         return None;\n     };\n     let potential_import_name = ctx.token.to_string();\n-    let module = ctx.scope.module()?;\n+    let module = ctx.module?;\n     let parent = ctx.token.parent()?;\n     let user_input_lowercased = potential_import_name.to_lowercase();\n     let import_assets = ImportAssets::for_fuzzy_path("}, {"sha": "b8bab941706f8e4480da65b3316359c90ed3df4e", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -84,12 +84,19 @@ fn complete_methods(\n             traits_in_scope.remove(&drop_trait.into());\n         }\n \n-        receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n-            if func.self_param(ctx.db).is_some() && seen_methods.insert(func.name(ctx.db)) {\n-                f(func);\n-            }\n-            None::<()>\n-        });\n+        receiver.iterate_method_candidates(\n+            ctx.db,\n+            krate,\n+            &traits_in_scope,\n+            ctx.module,\n+            None,\n+            |_ty, func| {\n+                if func.self_param(ctx.db).is_some() && seen_methods.insert(func.name(ctx.db)) {\n+                    f(func);\n+                }\n+                None::<()>\n+            },\n+        );\n     }\n }\n \n@@ -265,6 +272,37 @@ fn foo(a: lib::A) { a.$0 }\n         );\n     }\n \n+    #[test]\n+    fn test_local_impls() {\n+        check(\n+            r#\"\n+//- /lib.rs crate:lib\n+pub struct A {}\n+mod m {\n+    impl super::A {\n+        pub fn pub_module_method(&self) {}\n+    }\n+    fn f() {\n+        impl super::A {\n+            pub fn pub_foreign_local_method(&self) {}\n+        }\n+    }\n+}\n+//- /main.rs crate:main deps:lib\n+fn foo(a: lib::A) {\n+    impl lib::A {\n+        fn local_method(&self) {}\n+    }\n+    a.$0\n+}\n+\"#,\n+            expect![[r#\"\n+                me local_method()      fn(&self)\n+                me pub_module_method() fn(&self)\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_doc_hidden_filtering() {\n         check("}, {"sha": "782a119c9e7e7338a9451bbde9a780083263e441", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -217,7 +217,7 @@ pub(crate) fn position_for_import(\n }\n \n fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAssets> {\n-    let current_module = ctx.scope.module()?;\n+    let current_module = ctx.module?;\n     if let Some(dot_receiver) = ctx.dot_receiver() {\n         ImportAssets::for_fuzzy_method_call(\n             current_module,"}, {"sha": "64e992c2e6be6c651b104da4d5377029b9a43b11", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n \n     let _p = profile::span(\"completion::complete_mod\");\n \n-    let current_module = ctx.scope.module()?;\n+    let current_module = ctx.module?;\n \n     let module_definition_file =\n         current_module.definition_source(ctx.db).file_id.original_file(ctx.db);"}, {"sha": "85df19f1dd49253830598131dbf17130ba27d3a5", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -51,7 +51,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         None => return,\n     };\n \n-    let context_module = ctx.scope.module();\n+    let context_module = ctx.module;\n \n     match ctx.completion_location {\n         Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n@@ -75,7 +75,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     match kind {\n         Some(PathKind::Vis { .. }) => {\n             if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n-                if let Some(current_module) = ctx.scope.module() {\n+                if let Some(current_module) = ctx.module {\n                     if let Some(next) = current_module\n                         .path_to_root(ctx.db)\n                         .into_iter()\n@@ -189,7 +189,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     ty\n                 }\n                 hir::ModuleDef::BuiltinType(builtin) => {\n-                    let module = match ctx.scope.module() {\n+                    let module = match ctx.module {\n                         Some(it) => it,\n                         None => return,\n                     };\n@@ -205,10 +205,17 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             let krate = ctx.krate;\n             if let Some(krate) = krate {\n                 let traits_in_scope = ctx.scope.visible_traits();\n-                ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n-                    add_assoc_item(acc, ctx, item);\n-                    None::<()>\n-                });\n+                ty.iterate_path_candidates(\n+                    ctx.db,\n+                    krate,\n+                    &traits_in_scope,\n+                    ctx.module,\n+                    None,\n+                    |_ty, item| {\n+                        add_assoc_item(acc, ctx, item);\n+                        None::<()>\n+                    },\n+                );\n \n                 // Iterate assoc types separately\n                 ty.iterate_assoc_items(ctx.db, krate, |item| {\n@@ -239,14 +246,21 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n \n                 let traits_in_scope = ctx.scope.visible_traits();\n                 let mut seen = FxHashSet::default();\n-                ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n-                    // We might iterate candidates of a trait multiple times here, so deduplicate\n-                    // them.\n-                    if seen.insert(item) {\n-                        add_assoc_item(acc, ctx, item);\n-                    }\n-                    None::<()>\n-                });\n+                ty.iterate_path_candidates(\n+                    ctx.db,\n+                    krate,\n+                    &traits_in_scope,\n+                    ctx.module,\n+                    None,\n+                    |_ty, item| {\n+                        // We might iterate candidates of a trait multiple times here, so deduplicate\n+                        // them.\n+                        if seen.insert(item) {\n+                            add_assoc_item(acc, ctx, item);\n+                        }\n+                        None::<()>\n+                    },\n+                );\n             }\n         }\n         hir::PathResolution::Macro(mac) => acc.add_macro(ctx, None, mac),"}, {"sha": "ec1ee292be41ab5381dbc70923d01830f3f9855f", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -59,8 +59,7 @@ pub(crate) fn complete_record_literal(\n     }\n \n     if let hir::Adt::Struct(strukt) = ctx.expected_type.as_ref()?.as_adt()? {\n-        let module =\n-            if let Some(module) = ctx.scope.module() { module } else { strukt.module(ctx.db) };\n+        let module = if let Some(module) = ctx.module { module } else { strukt.module(ctx.db) };\n \n         let path = module.find_use_path(ctx.db, hir::ModuleDef::from(strukt));\n "}, {"sha": "a31a552dadb36277c4f69271fba120ae00dba3f0", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -103,6 +103,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) token: SyntaxToken,\n     /// The crate of the current file.\n     pub(super) krate: Option<hir::Crate>,\n+    /// The crate of the `scope`.\n+    pub(super) module: Option<hir::Module>,\n     pub(super) expected_name: Option<NameOrNameRef>,\n     pub(super) expected_type: Option<Type>,\n \n@@ -338,7 +340,7 @@ impl<'a> CompletionContext<'a> {\n         attrs: &hir::Attrs,\n         defining_crate: hir::Crate,\n     ) -> bool {\n-        let module = match self.scope.module() {\n+        let module = match self.module {\n             Some(it) => it,\n             None => return false,\n         };\n@@ -394,6 +396,7 @@ impl<'a> CompletionContext<'a> {\n         let token = sema.descend_into_macros_single(original_token.clone());\n         let scope = sema.scope_at_offset(&token.parent()?, offset);\n         let krate = scope.krate();\n+        let module = scope.module();\n         let mut locals = vec![];\n         scope.process_all_names(&mut |name, scope| {\n             if let ScopeDef::Local(local) = scope {\n@@ -410,6 +413,7 @@ impl<'a> CompletionContext<'a> {\n             original_token,\n             token,\n             krate,\n+            module,\n             expected_name: None,\n             expected_type: None,\n             function_def: None,"}, {"sha": "641a15aa65db8ce234f32d121585d15b4a365ccb", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -144,7 +144,7 @@ fn visible_fields(\n     fields: &[hir::Field],\n     item: impl HasAttrs,\n ) -> Option<(Vec<hir::Field>, bool)> {\n-    let module = ctx.completion.scope.module()?;\n+    let module = ctx.completion.module?;\n     let n_fields = fields.len();\n     let fields = fields\n         .iter()"}, {"sha": "6be7b9d43bc87dc1872e13551fb29520a5f2a251", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -119,7 +119,7 @@ fn visible_fields(\n     fields: &[hir::Field],\n     item: impl HasAttrs,\n ) -> Option<(Vec<hir::Field>, bool)> {\n-    let module = ctx.completion.scope.module()?;\n+    let module = ctx.completion.module?;\n     let n_fields = fields.len();\n     let fields = fields\n         .iter()"}, {"sha": "3a4f713333baae7cc079eefdb3f77102f52e58f5", "filename": "crates/ide_completion/src/snippet.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fsnippet.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -185,11 +185,8 @@ fn import_edits(\n             hir::PathResolution::Def(def) => def.into(),\n             _ => return None,\n         };\n-        let path = ctx.scope.module()?.find_use_path_prefixed(\n-            ctx.db,\n-            item,\n-            ctx.config.insert_use.prefix_kind,\n-        )?;\n+        let path =\n+            ctx.module?.find_use_path_prefixed(ctx.db, item, ctx.config.insert_use.prefix_kind)?;\n         Some((path.len() > 1).then(|| ImportEdit {\n             import: LocatedImport::new(path.clone(), item, item, None),\n             scope: import_scope.clone(),"}, {"sha": "c037c3e0f87638cf47c25016e703dc58fecb473e", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -505,6 +505,7 @@ fn trait_applicable_items(\n             current_crate,\n             &trait_candidates,\n             None,\n+            None,\n             |_, assoc| {\n                 if required_assoc_items.contains(&assoc) {\n                     if let AssocItem::Function(f) = assoc {\n@@ -531,6 +532,7 @@ fn trait_applicable_items(\n             current_crate,\n             &trait_candidates,\n             None,\n+            None,\n             |_, function| {\n                 let assoc = function.as_assoc_item(db)?;\n                 if required_assoc_items.contains(&assoc) {"}, {"sha": "844b19779a8776ee2ac2ba252bba0a142f66c4f8", "filename": "crates/ide_ssr/src/resolving.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498224af18ab68a2c646e6f036946d678bd1752d/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fresolving.rs?ref=498224af18ab68a2c646e6f036946d678bd1752d", "patch": "@@ -219,10 +219,12 @@ impl<'db> ResolutionScope<'db> {\n         let resolved_qualifier = self.scope.speculative_resolve(&path.qualifier()?)?;\n         if let hir::PathResolution::Def(hir::ModuleDef::Adt(adt)) = resolved_qualifier {\n             let name = path.segment()?.name_ref()?;\n+            let module = self.scope.module()?;\n             adt.ty(self.scope.db).iterate_path_candidates(\n                 self.scope.db,\n-                self.scope.module()?.krate(),\n+                module.krate(),\n                 &self.scope.visible_traits(),\n+                Some(module),\n                 None,\n                 |_ty, assoc_item| {\n                     let item_name = assoc_item.name(self.scope.db)?;"}]}