{"sha": "dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "node_id": "C_kwDOAAsO6NoAKGRmZTEzZGJiY2Y2Y2NkNTAzYTgyZGViOGY1YTgwODcxM2QwMzk5YzY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-07T08:21:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-10T23:30:14Z"}, "message": "only suggest removing semicolon when expr implements trait", "tree": {"sha": "d626a297157057c62500c8992ce0521274285ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d626a297157057c62500c8992ce0521274285ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "html_url": "https://github.com/rust-lang/rust/commit/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "027a232755fa9728e9699337267f6675dfd0a8ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/027a232755fa9728e9699337267f6675dfd0a8ba", "html_url": "https://github.com/rust-lang/rust/commit/027a232755fa9728e9699337267f6675dfd0a8ba"}], "stats": {"total": 129, "additions": 97, "deletions": 32}, "files": [{"sha": "ead1f0126c465a37c5ebac944dc2caee60075500", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -1083,20 +1083,31 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. })) = node\n-            && let body = hir.body(*body_id)\n-            && let hir::ExprKind::Block(blk, _) = &body.value.kind\n+            && let hir::ExprKind::Block(blk, _) = &hir.body(*body_id).value.kind\n             && sig.decl.output.span().overlaps(span)\n             && blk.expr.is_none()\n-            && *trait_pred.self_ty().skip_binder().kind() == ty::Tuple(ty::List::empty())\n-            // FIXME(estebank): When encountering a method with a trait\n-            // bound not satisfied in the return type with a body that has\n-            // no return, suggest removal of semicolon on last statement.\n-            // Once that is added, close #54771.\n+            && trait_pred.self_ty().skip_binder().is_unit()\n             && let Some(stmt) = blk.stmts.last()\n-            && let hir::StmtKind::Semi(_) = stmt.kind\n+            && let hir::StmtKind::Semi(expr) = stmt.kind\n+            // Only suggest this if the expression behind the semicolon implements the predicate\n+            && let Some(typeck_results) = self.in_progress_typeck_results\n+            && let Some(ty) = typeck_results.borrow().expr_ty_opt(expr)\n+            && self.predicate_may_hold(&self.mk_trait_obligation_with_new_self_ty(obligation.param_env, trait_pred, ty))\n         {\n-            let sp = self.tcx.sess.source_map().end_point(stmt.span);\n-            err.span_label(sp, \"consider removing this semicolon\");\n+            err.span_label(\n+                expr.span,\n+                &format!(\n+                    \"this expression has type `{}`, which implements `{}`\",\n+                    ty,\n+                    trait_pred.print_modifiers_and_trait_path()\n+                )\n+            );\n+            err.span_suggestion(\n+                self.tcx.sess.source_map().end_point(stmt.span),\n+                \"remove this semicolon\",\n+                String::new(),\n+                Applicability::MachineApplicable\n+            );\n             return true;\n         }\n         false"}, {"sha": "f6a5243274cd267ddffe8f36ef39249abcdd4b38", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -936,7 +936,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 err.span_suggestion_short(\n                     span_semi,\n-                    \"consider removing this semicolon\",\n+                    \"remove this semicolon\",\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "2412dcd32f79a608fc301714a5dcb9cac3d9ac14", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -7,7 +7,7 @@ LL | pub fn f() -> String {\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n LL |     \"bla\".to_string();\n-   |                      - help: consider removing this semicolon\n+   |                      - help: remove this semicolon\n \n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:8:15\n@@ -18,7 +18,7 @@ LL | pub fn g() -> String {\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n-   |                           - help: consider removing this semicolon\n+   |                           - help: remove this semicolon\n \n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:13:25\n@@ -29,7 +29,7 @@ LL | pub fn macro_tests() -> u32 {\n    |        implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     mac!();\n-   |           - help: consider removing this semicolon\n+   |           - help: remove this semicolon\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5b8d96fd4ebe2eaa172fe4252f06a749c9e17bc3", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -7,7 +7,7 @@ LL | fn blah() -> i32 {\n    |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     ;\n-   |     - help: consider removing this semicolon\n+   |     - help: remove this semicolon\n \n error: aborting due to previous error\n "}, {"sha": "a33448edff2bcc7a02fb5fc8e0dc467c27b93e85", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -15,7 +15,7 @@ LL | fn bar() -> String {\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"foobar\".to_string()\n LL |     ;\n-   |     - help: consider removing this semicolon\n+   |     - help: remove this semicolon\n \n error: aborting due to 2 previous errors\n "}, {"sha": "623e917da07e86d0c5c7fe639ca07ac934fa596f", "filename": "src/test/ui/closures/old-closure-expression-remove-semicolon.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.fixed?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -7,6 +7,6 @@ fn foo() -> i32 {\n fn main() {\n     let _x: i32 = {\n         //~^ ERROR mismatched types\n-        foo() //~ HELP consider removing this semicolon\n+        foo() //~ HELP remove this semicolon\n     };\n }"}, {"sha": "4974b0866494533f3417ac87b02f7dc5f168fcc9", "filename": "src/test/ui/closures/old-closure-expression-remove-semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.rs?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -7,6 +7,6 @@ fn foo() -> i32 {\n fn main() {\n     let _x: i32 = {\n         //~^ ERROR mismatched types\n-        foo(); //~ HELP consider removing this semicolon\n+        foo(); //~ HELP remove this semicolon\n     };\n }"}, {"sha": "9b73ce4fee3463e0f800c0d4453ed258601e6a19", "filename": "src/test/ui/closures/old-closure-expression-remove-semicolon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fold-closure-expression-remove-semicolon.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -5,7 +5,7 @@ LL |       let _x: i32 = {\n    |  ___________________^\n LL | |\n LL | |         foo();\n-   | |              - help: consider removing this semicolon\n+   | |              - help: remove this semicolon\n LL | |     };\n    | |_____^ expected `i32`, found `()`\n "}, {"sha": "a4843bca58c9953ebc6e234d1398129ff3a3d2cf", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -6,7 +6,7 @@ LL | fn plus_one(x: i32) -> i32 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x + 1;\n-   |          - help: consider removing this semicolon\n+   |          - help: remove this semicolon\n \n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:8:13\n@@ -16,7 +16,7 @@ LL | fn foo() -> Result<u8, u64> {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Ok(1);\n-   |          - help: consider removing this semicolon\n+   |          - help: remove this semicolon\n    |\n    = note:   expected enum `Result<u8, u64>`\n            found unit type `()`"}, {"sha": "d6e74d10e03c920096f4aaa238d3ce39d16c1fde", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(b: bool) -> Result<bool,String> {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Err(\"bar\".to_string());\n-   |                           - help: consider removing this semicolon\n+   |                           - help: remove this semicolon\n    |\n    = note:   expected enum `Result<bool, String>`\n            found unit type `()`"}, {"sha": "82d136bd318d8d7726a75eb40f0c1c55c04cd75f", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -14,7 +14,7 @@ LL | fn bar(x: u32) -> u32 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x * 2;\n-   |          - help: consider removing this semicolon\n+   |          - help: remove this semicolon\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:13:19"}, {"sha": "5a17c108ccc132a7db44d0f90605e2a27a5d009f", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -1,8 +1,25 @@\n trait Bar {}\n-impl Bar for u8 {}\n+\n+impl Bar for i32 {}\n+\n+struct Qux;\n+\n+impl Bar for Qux {}\n+\n fn foo() -> impl Bar {\n-    5; //~^ ERROR the trait bound `(): Bar` is not satisfied\n+    //~^ ERROR the trait bound `(): Bar` is not satisfied\n+    //~| ERROR the trait bound `(): Bar` is not satisfied\n+    //~| HELP the following other types implement trait `Bar`:\n+    5;\n+    //~^ HELP remove this semicolon\n+}\n+\n+fn bar() -> impl Bar {\n+    //~^ ERROR the trait bound `(): Bar` is not satisfied\n     //~| ERROR the trait bound `(): Bar` is not satisfied\n+    //~| HELP the following other types implement trait `Bar`:\n+    //~| HELP the following other types implement trait `Bar`:\n+    \"\";\n }\n \n fn main() {}"}, {"sha": "43f8b7c66f07a19c9b4a104a4c6135ef0cda95c4", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.stderr", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -1,23 +1,58 @@\n error[E0277]: the trait bound `(): Bar` is not satisfied\n-  --> $DIR/impl-trait-return-trailing-semicolon.rs:3:13\n+  --> $DIR/impl-trait-return-trailing-semicolon.rs:9:13\n    |\n LL | fn foo() -> impl Bar {\n    |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\n+...\n LL |     5;\n-   |      - consider removing this semicolon\n+   |     -- help: remove this semicolon\n+   |     |\n+   |     this expression has type `{integer}`, which implements `Bar`\n \n error[E0277]: the trait bound `(): Bar` is not satisfied\n-  --> $DIR/impl-trait-return-trailing-semicolon.rs:3:22\n+  --> $DIR/impl-trait-return-trailing-semicolon.rs:9:22\n    |\n LL |   fn foo() -> impl Bar {\n    |  ______________________^\n+LL | |\n+LL | |\n+LL | |\n LL | |     5;\n LL | |\n LL | | }\n    | |_^ the trait `Bar` is not implemented for `()`\n    |\n-   = help: the trait `Bar` is implemented for `u8`\n+   = help: the following other types implement trait `Bar`:\n+             Qux\n+             i32\n+\n+error[E0277]: the trait bound `(): Bar` is not satisfied\n+  --> $DIR/impl-trait-return-trailing-semicolon.rs:17:13\n+   |\n+LL | fn bar() -> impl Bar {\n+   |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\n+   |\n+   = help: the following other types implement trait `Bar`:\n+             Qux\n+             i32\n+\n+error[E0277]: the trait bound `(): Bar` is not satisfied\n+  --> $DIR/impl-trait-return-trailing-semicolon.rs:17:22\n+   |\n+LL |   fn bar() -> impl Bar {\n+   |  ______________________^\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |     \"\";\n+LL | | }\n+   | |_^ the trait `Bar` is not implemented for `()`\n+   |\n+   = help: the following other types implement trait `Bar`:\n+             Qux\n+             i32\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8665f2e70a85c597659af38f7907634701f529ff", "filename": "src/test/ui/suggestions/issue-81098.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81098.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -27,7 +27,9 @@ LL | fn ok() -> impl core::fmt::Display {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ `()` cannot be formatted with the default formatter\n LL |\n LL |     1;\n-   |      - consider removing this semicolon\n+   |     -- help: remove this semicolon\n+   |     |\n+   |     this expression has type `{integer}`, which implements `std::fmt::Display`\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead"}, {"sha": "60f423a1163172c71e446c78c5bf4830ef367259", "filename": "src/test/ui/suggestions/match-with-different-arm-types-as-stmt-instead-of-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-with-different-arm-types-as-stmt-instead-of-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe13dbbcf6ccd503a82deb8f5a808713d0399c6/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-with-different-arm-types-as-stmt-instead-of-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-with-different-arm-types-as-stmt-instead-of-expr.stderr?ref=dfe13dbbcf6ccd503a82deb8f5a808713d0399c6", "patch": "@@ -7,7 +7,7 @@ LL | fn not_all_paths(a: &str) -> u32 {\n    |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     };\n-   |      - help: consider removing this semicolon\n+   |      - help: remove this semicolon\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-with-different-arm-types-as-stmt-instead-of-expr.rs:26:14"}]}