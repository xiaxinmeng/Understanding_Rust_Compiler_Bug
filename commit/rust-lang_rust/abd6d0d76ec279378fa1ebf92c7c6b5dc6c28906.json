{"sha": "abd6d0d76ec279378fa1ebf92c7c6b5dc6c28906", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZDZkMGQ3NmVjMjc5Mzc4ZmExZWJmOTJjN2M2YjVkYzZjMjg5MDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T00:46:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T17:20:28Z"}, "message": "comments for `defining_ty` and `compute_indices`\n\nPlus an extra assertion.", "tree": {"sha": "570025c6b027f2f9ac8d3699aaf0513de779bd48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/570025c6b027f2f9ac8d3699aaf0513de779bd48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd6d0d76ec279378fa1ebf92c7c6b5dc6c28906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd6d0d76ec279378fa1ebf92c7c6b5dc6c28906", "html_url": "https://github.com/rust-lang/rust/commit/abd6d0d76ec279378fa1ebf92c7c6b5dc6c28906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd6d0d76ec279378fa1ebf92c7c6b5dc6c28906/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ac071cd6e14c887fbb7526da8958b53aaf7198", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ac071cd6e14c887fbb7526da8958b53aaf7198", "html_url": "https://github.com/rust-lang/rust/commit/75ac071cd6e14c887fbb7526da8958b53aaf7198"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "5336bd271f5903c6488eef0edf9f1e0aa4f9362a", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/abd6d0d76ec279378fa1ebf92c7c6b5dc6c28906/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd6d0d76ec279378fa1ebf92c7c6b5dc6c28906/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=abd6d0d76ec279378fa1ebf92c7c6b5dc6c28906", "patch": "@@ -456,6 +456,21 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Returns the \"defining type\" of the current MIR:\n+    ///\n+    /// - for functions, this is the `TyFnDef`;\n+    /// - for closures, this is the `TyClosure`;\n+    /// - for generators, this is the `TyGenerator`;\n+    /// - for constants, this is the type of value that gets produced.\n+    ///   - FIXME. Constants are handled somewhat inelegantly; this gets\n+    ///     patched in a later PR that has already landed on nll-master.\n+    ///\n+    /// The key feature of the \"defining type\" is that it contains the\n+    /// information needed to derive all the universal regions that\n+    /// are in scope as well as the types of the inputs/output from\n+    /// the MIR. In general, early-bound universal regions appear free\n+    /// in the defining type and late-bound regions appear bound in\n+    /// the signature.\n     fn defining_ty(&self) -> ty::Ty<'tcx> {\n         let tcx = self.infcx.tcx;\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n@@ -471,6 +486,10 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n             .replace_free_regions_with_nll_infer_vars(FR, &defining_ty)\n     }\n \n+    /// Builds a hashmap that maps from the universal regions that are\n+    /// in scope (as a `ty::Region<'tcx>`) to their indices (as a\n+    /// `RegionVid`). The map returned by this function contains only\n+    /// the early-bound regions.\n     fn compute_indices(\n         &self,\n         fr_static: RegionVid,\n@@ -490,6 +509,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                 // that correspond to early-bound regions declared on\n                 // the `closure_base_def_id`.\n                 assert!(substs.substs.len() >= identity_substs.len());\n+                assert_eq!(substs.substs.regions().count(), identity_substs.regions().count());\n                 substs.substs\n             }\n             ty::TyFnDef(_, substs) => substs,"}]}