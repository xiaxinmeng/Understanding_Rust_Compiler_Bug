{"sha": "f38eb93634b844ee8351501502f5331b04f063a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOGViOTM2MzRiODQ0ZWU4MzUxNTAxNTAyZjUzMzFiMDRmMDYzYTU=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-24T16:24:05Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-24T16:30:16Z"}, "message": "Fix clashing_extern_declarations false positive.\n\nFixes a false positive for transparent newtype with a non-zero member.", "tree": {"sha": "da0868a6884c6f34f902aa012083b04a9ea5b5e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da0868a6884c6f34f902aa012083b04a9ea5b5e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f38eb93634b844ee8351501502f5331b04f063a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f38eb93634b844ee8351501502f5331b04f063a5", "html_url": "https://github.com/rust-lang/rust/commit/f38eb93634b844ee8351501502f5331b04f063a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f38eb93634b844ee8351501502f5331b04f063a5/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03017003c77d782cf7ed841a05d7c628a9b93f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/03017003c77d782cf7ed841a05d7c628a9b93f25", "html_url": "https://github.com/rust-lang/rust/commit/03017003c77d782cf7ed841a05d7c628a9b93f25"}], "stats": {"total": 110, "additions": 101, "deletions": 9}, "files": [{"sha": "bfdf3e3b3956a2f2351153369e19384b47a16ffd", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f38eb93634b844ee8351501502f5331b04f063a5/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38eb93634b844ee8351501502f5331b04f063a5/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f38eb93634b844ee8351501502f5331b04f063a5", "patch": "@@ -2162,6 +2162,38 @@ impl ClashingExternDeclarations {\n             ckind: CItemKind,\n         ) -> bool {\n             debug!(\"structurally_same_type_impl(cx, a = {:?}, b = {:?})\", a, b);\n+            let tcx = cx.tcx;\n+\n+            // Given a transparent newtype, reach through and grab the inner\n+            // type unless the newtype makes the type non-null.\n+            let non_transparent_ty = |ty: Ty<'tcx>| -> Ty<'tcx> {\n+                let mut ty = ty;\n+                loop {\n+                    if let ty::Adt(def, substs) = ty.kind {\n+                        let is_transparent = def.subst(tcx, substs).repr.transparent();\n+                        let is_enum = def.is_enum();\n+                        let is_non_null = crate::types::guaranteed_nonnull_optimization(tcx, &def);\n+                        debug!(\n+                            \"non_transparent_ty({:?}) -- type is transparent? {}, type is enum? {}, type is non-null? {}\",\n+                            ty, is_transparent, is_enum, is_non_null\n+                        );\n+                        if is_transparent && !is_enum && !is_non_null {\n+                            ty = def\n+                                .non_enum_variant()\n+                                .transparent_newtype_field(tcx)\n+                                .unwrap()\n+                                .ty(tcx, substs);\n+                            continue;\n+                        }\n+                    }\n+                    debug!(\"non_transparent_ty -> {:?}\", ty);\n+                    return ty;\n+                }\n+            };\n+\n+            let a = non_transparent_ty(a);\n+            let b = non_transparent_ty(b);\n+\n             if !seen_types.insert((a, b)) {\n                 // We've encountered a cycle. There's no point going any further -- the types are\n                 // structurally the same."}, {"sha": "849e8df1e5fdbf7a97dabc2737f4463a5940f610", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f38eb93634b844ee8351501502f5331b04f063a5/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38eb93634b844ee8351501502f5331b04f063a5/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=f38eb93634b844ee8351501502f5331b04f063a5", "patch": "@@ -11,7 +11,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::interpret::{sign_extend, truncate};\n use rustc_middle::ty::layout::{IntegerExt, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, AdtKind, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n@@ -527,22 +527,26 @@ enum FfiResult<'tcx> {\n     FfiUnsafe { ty: Ty<'tcx>, reason: String, help: Option<String> },\n }\n \n+crate fn guaranteed_nonnull_optimization<'tcx>(tcx: TyCtxt<'tcx>, def: &ty::AdtDef) -> bool {\n+    tcx.get_attrs(def.did)\n+        .iter()\n+        .any(|a| tcx.sess.check_name(a, sym::rustc_nonnull_optimization_guaranteed))\n+}\n+\n /// Is type known to be non-null?\n-fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: CItemKind) -> bool {\n+crate fn ty_is_known_nonnull<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, mode: CItemKind) -> bool {\n     let tcx = cx.tcx;\n     match ty.kind {\n         ty::FnPtr(_) => true,\n         ty::Ref(..) => true,\n         ty::Adt(def, _) if def.is_box() && matches!(mode, CItemKind::Definition) => true,\n         ty::Adt(def, substs) if def.repr.transparent() && !def.is_union() => {\n-            let guaranteed_nonnull_optimization = tcx\n-                .get_attrs(def.did)\n-                .iter()\n-                .any(|a| tcx.sess.check_name(a, sym::rustc_nonnull_optimization_guaranteed));\n+            let marked_non_null = guaranteed_nonnull_optimization(tcx, &def);\n \n-            if guaranteed_nonnull_optimization {\n+            if marked_non_null {\n                 return true;\n             }\n+\n             for variant in &def.variants {\n                 if let Some(field) = variant.transparent_newtype_field(tcx) {\n                     if ty_is_known_nonnull(cx, field.ty(tcx, substs), mode) {"}, {"sha": "a2de01254477df330e3ada3948559d7170e270c2", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f38eb93634b844ee8351501502f5331b04f063a5/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38eb93634b844ee8351501502f5331b04f063a5/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=f38eb93634b844ee8351501502f5331b04f063a5", "patch": "@@ -258,6 +258,62 @@ mod non_zero_and_non_null {\n     }\n }\n \n+// See #75739\n+mod non_zero_transparent {\n+    mod a1 {\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            fn f1() -> NonZeroUsize;\n+        }\n+    }\n+\n+    mod b1 {\n+        #[repr(transparent)]\n+        struct X(NonZeroUsize);\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            fn f1() -> X;\n+        }\n+    }\n+\n+    mod a2 {\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            fn f2() -> NonZeroUsize;\n+        }\n+    }\n+\n+    mod b2 {\n+        #[repr(transparent)]\n+        struct X1(NonZeroUsize);\n+\n+        #[repr(transparent)]\n+        struct X(X1);\n+\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            // Same case as above, but with two layers of newtyping.\n+            fn f2() -> X;\n+        }\n+    }\n+\n+    mod a3 {\n+        #[repr(transparent)]\n+        struct X(core::ptr::NonNull<i32>);\n+\n+        use std::num::NonZeroUsize;\n+        extern \"C\" {\n+            fn f3() -> X;\n+        }\n+    }\n+\n+    mod b3 {\n+        extern \"C\" {\n+            fn f3() -> core::ptr::NonNull<i32>;\n+        }\n+    }\n+}\n+\n mod null_optimised_enums {\n     mod a {\n         extern \"C\" {"}, {"sha": "f2e53e4a3cc0e512171661ee8cf8d32a3b2ca2b5", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f38eb93634b844ee8351501502f5331b04f063a5/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f38eb93634b844ee8351501502f5331b04f063a5/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=f38eb93634b844ee8351501502f5331b04f063a5", "patch": "@@ -166,7 +166,7 @@ LL |             fn non_null_ptr() -> *const usize;\n               found `unsafe extern \"C\" fn() -> *const usize`\n \n warning: `option_non_zero_usize_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:281:13\n+  --> $DIR/clashing-extern-fn.rs:337:13\n    |\n LL |             fn option_non_zero_usize_incorrect() -> usize;\n    |             ---------------------------------------------- `option_non_zero_usize_incorrect` previously declared here\n@@ -178,7 +178,7 @@ LL |             fn option_non_zero_usize_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `option_non_null_ptr_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:283:13\n+  --> $DIR/clashing-extern-fn.rs:339:13\n    |\n LL |             fn option_non_null_ptr_incorrect() -> *const usize;\n    |             --------------------------------------------------- `option_non_null_ptr_incorrect` previously declared here"}]}