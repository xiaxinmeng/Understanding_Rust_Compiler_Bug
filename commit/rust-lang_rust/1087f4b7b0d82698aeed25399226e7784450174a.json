{"sha": "1087f4b7b0d82698aeed25399226e7784450174a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwODdmNGI3YjBkODI2OThhZWVkMjUzOTkyMjZlNzc4NDQ1MDE3NGE=", "commit": {"author": {"name": "David Rajchenbach-Teller", "email": "dteller@mozilla.com", "date": "2011-11-05T10:31:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-05T20:04:35Z"}, "message": "[Docfix] lib/str.rs: Applied review suggestions, took the opportunity to improve doc of my new functions.", "tree": {"sha": "7d19588794481206cfe603dc58a879317573355f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d19588794481206cfe603dc58a879317573355f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1087f4b7b0d82698aeed25399226e7784450174a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1087f4b7b0d82698aeed25399226e7784450174a", "html_url": "https://github.com/rust-lang/rust/commit/1087f4b7b0d82698aeed25399226e7784450174a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1087f4b7b0d82698aeed25399226e7784450174a/comments", "author": {"login": "Yoric", "id": 10190, "node_id": "MDQ6VXNlcjEwMTkw", "avatar_url": "https://avatars.githubusercontent.com/u/10190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yoric", "html_url": "https://github.com/Yoric", "followers_url": "https://api.github.com/users/Yoric/followers", "following_url": "https://api.github.com/users/Yoric/following{/other_user}", "gists_url": "https://api.github.com/users/Yoric/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yoric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yoric/subscriptions", "organizations_url": "https://api.github.com/users/Yoric/orgs", "repos_url": "https://api.github.com/users/Yoric/repos", "events_url": "https://api.github.com/users/Yoric/events{/privacy}", "received_events_url": "https://api.github.com/users/Yoric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b17847b2323167b557b84b088f0c865724829c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17847b2323167b557b84b088f0c865724829c30", "html_url": "https://github.com/rust-lang/rust/commit/b17847b2323167b557b84b088f0c865724829c30"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "d5ed5814457e162486130fa17c270e656d833633", "filename": "src/lib/str.rs", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1087f4b7b0d82698aeed25399226e7784450174a/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1087f4b7b0d82698aeed25399226e7784450174a/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=1087f4b7b0d82698aeed25399226e7784450174a", "patch": "@@ -139,9 +139,23 @@ fn byte_len(s: str) -> uint unsafe {\n }\n \n /*\n-Function byte_len_range\n+Function: byte_len_range\n \n As byte_len but for a substring\n+\n+Parameters:\n+s - A string\n+byte_offset - The byte offset at which to start in the string\n+char_len    - The number of chars (not bytes!) in the range\n+\n+Returns:\n+The number of bytes in the substring starting at `byte_offset` and\n+containing `char_len` chars.\n+\n+Safety note:\n+\n+This function fails if `byte_offset` or `char_len` do not represent\n+valid positions in `s`\n */\n fn byte_len_range(s: str, byte_offset: uint, char_len: uint) -> uint {\n     let i = byte_offset;\n@@ -334,19 +348,46 @@ fn iter_chars(s: str, it: block(char)) {\n }\n \n /*\n- Function: loop_chars\n+Function: loop_chars\n \n- As `iter_chars` but may be interrupted\n-*/\n+Loop through a string, char by char\n+\n+Parameters:\n+s  - A string to traverse. It may be empty.\n+it - A block to execute with each consecutive character of `s`.\n+Return `true` to continue, `false` to stop.\n+\n+Returns:\n+\n+`true` If execution proceeded correctly, `false` if it was interrupted,\n+that is if `it` returned `false` at any point.\n+ */\n fn loop_chars(s: str, it: block(char) -> bool) -> bool{\n     ret loop_chars_sub(s, 0u, byte_len(s), it);\n }\n \n /*\n- Function: loop_chars_sub\n+Function: loop_chars\n \n- As `loop_chars` but on a substring\n-*/\n+Loop through a substring, char by char\n+\n+Parameters:\n+s           - A string to traverse. It may be empty.\n+byte_offset - The byte offset at which to start in the string.\n+byte_len    - The number of bytes to traverse in the string\n+it          - A block to execute with each consecutive character of `s`.\n+Return `true` to continue, `false` to stop.\n+\n+Returns:\n+\n+`true` If execution proceeded correctly, `false` if it was interrupted,\n+that is if `it` returned `false` at any point.\n+\n+Safety note:\n+- This function does not check whether the substring is valid.\n+- This function fails if `byte_offset` or `byte_len` do not\n+ represent valid positions inside `s`\n+ */\n fn loop_chars_sub(s: str, byte_offset: uint, byte_len: uint,\n               it: block(char) -> bool) -> bool {\n    let i = byte_offset;\n@@ -373,6 +414,20 @@ fn char_len(s: str) -> uint {\n Function: char_len_range\n \n As char_len but for a slice of a string\n+\n+Parameters:\n+ s           - A valid string\n+ byte_start  - The position inside `s` where to start counting in bytes.\n+ byte_len    - The number of bytes of `s` to take into account.\n+\n+Returns:\n+ The number of Unicode characters in `s` in\n+segment [byte_start, byte_start+len( .\n+\n+Safety note:\n+- This function does not check whether the substring is valid.\n+- This function fails if `byte_offset` or `byte_len` do not\n+ represent valid positions inside `s`\n */\n fn char_len_range(s: str, byte_start: uint, byte_len: uint) -> uint {\n     let i     = byte_start;"}]}