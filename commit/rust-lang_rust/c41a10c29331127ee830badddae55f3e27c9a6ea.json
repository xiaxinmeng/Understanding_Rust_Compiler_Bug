{"sha": "c41a10c29331127ee830badddae55f3e27c9a6ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MWExMGMyOTMzMTEyN2VlODMwYmFkZGRhZTU1ZjNlMjdjOWE2ZWE=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-21T08:34:34Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-05-21T08:34:34Z"}, "message": "Apply suggestions from @Veetaha code review", "tree": {"sha": "b30bbcb65ff0717ea5a8b5060b288e03f157d1f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b30bbcb65ff0717ea5a8b5060b288e03f157d1f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c41a10c29331127ee830badddae55f3e27c9a6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c41a10c29331127ee830badddae55f3e27c9a6ea", "html_url": "https://github.com/rust-lang/rust/commit/c41a10c29331127ee830badddae55f3e27c9a6ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c41a10c29331127ee830badddae55f3e27c9a6ea/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee40ccbe963a0a5e3e998c1652378e1035dc40d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee40ccbe963a0a5e3e998c1652378e1035dc40d", "html_url": "https://github.com/rust-lang/rust/commit/8ee40ccbe963a0a5e3e998c1652378e1035dc40d"}], "stats": {"total": 97, "additions": 44, "deletions": 53}, "files": [{"sha": "a55b2f860f68ff25627a3f306dae8597959b2107", "filename": "editors/code/src/cargo.ts", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c41a10c29331127ee830badddae55f3e27c9a6ea/editors%2Fcode%2Fsrc%2Fcargo.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c41a10c29331127ee830badddae55f3e27c9a6ea/editors%2Fcode%2Fsrc%2Fcargo.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcargo.ts?ref=c41a10c29331127ee830badddae55f3e27c9a6ea", "patch": "@@ -25,7 +25,7 @@ export function artifactSpec(args: readonly string[]): ArtifactSpec {\n     switch (cargoArgs[0]) {\n         case \"run\": cargoArgs[0] = \"build\"; break;\n         case \"test\": {\n-            if (cargoArgs.indexOf(\"--no-run\") === -1) {\n+            if (!cargoArgs.includes(\"--no-run\")) {\n                 cargoArgs.push(\"--no-run\");\n             }\n             break;\n@@ -36,9 +36,7 @@ export function artifactSpec(args: readonly string[]): ArtifactSpec {\n     if (cargoArgs[0] === \"test\") {\n         // for instance, `crates\\rust-analyzer\\tests\\heavy_tests\\main.rs` tests\n         // produce 2 artifacts: {\"kind\": \"bin\"} and {\"kind\": \"test\"}\n-        result.filter = (artifacts) => {\n-            return artifacts.filter(a => a.isTest);\n-        };\n+        result.filter = (artifacts) => artifacts.filter(it => it.isTest);\n     }\n \n     return result;\n@@ -48,7 +46,7 @@ export class Cargo {\n     constructor(readonly rootFolder: string, readonly output: OutputChannel) { }\n \n     private async getArtifacts(spec: ArtifactSpec): Promise<CompilationArtifact[]> {\n-        let artifacts: CompilationArtifact[] = [];\n+        const artifacts: CompilationArtifact[] = [];\n \n         try {\n             await this.runCargo(spec.cargoArgs,\n@@ -75,11 +73,7 @@ export class Cargo {\n             throw new Error(`Cargo invocation has failed: ${err}`);\n         }\n \n-        if (spec.filter) {\n-            artifacts = spec.filter(artifacts);\n-        }\n-\n-        return artifacts;\n+        return spec.filter?.(artifacts) ?? artifacts;\n     }\n \n     async executableFromArgs(args: readonly string[]): Promise<string> {"}, {"sha": "22df80ad318e5ef9106f9b7946daeb7507af9748", "filename": "editors/code/tests/runTests.ts", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c41a10c29331127ee830badddae55f3e27c9a6ea/editors%2Fcode%2Ftests%2FrunTests.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c41a10c29331127ee830badddae55f3e27c9a6ea/editors%2Fcode%2Ftests%2FrunTests.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2FrunTests.ts?ref=c41a10c29331127ee830badddae55f3e27c9a6ea", "patch": "@@ -4,43 +4,40 @@ import * as fs from 'fs';\n import { runTests } from 'vscode-test';\n \n async function main() {\n-    try {\n-        // The folder containing the Extension Manifest package.json\n-        // Passed to `--extensionDevelopmentPath`\n-        const extensionDevelopmentPath = path.resolve(__dirname, '../../');\n-\n-        // Minimum supported version.\n-        const jsonData = fs.readFileSync(path.join(extensionDevelopmentPath, 'package.json'));\n-        const json = JSON.parse(jsonData.toString());\n-        let minimalVersion: string = json.engines.vscode;\n-        if (minimalVersion.startsWith('^')) minimalVersion = minimalVersion.slice(1);\n-\n-        const launchArgs = [\"--disable-extensions\"];\n-\n-        // All test suites (either unit tests or integration tests) should be in subfolders.\n-        const extensionTestsPath = path.resolve(__dirname, './unit/index');\n-\n-        // Run tests using the minimal supported version.\n-        await runTests({\n-            version: minimalVersion,\n-            launchArgs,\n-            extensionDevelopmentPath,\n-            extensionTestsPath\n-        });\n-\n-        // and the latest one\n-        await runTests({\n-            version: 'stable',\n-            launchArgs,\n-            extensionDevelopmentPath,\n-            extensionTestsPath\n-        });\n-\n-    } catch (err) {\n-        // eslint-disable-next-line no-console\n-        console.error('Failed to run tests', err);\n-        process.exit(1);\n-    }\n+    // The folder containing the Extension Manifest package.json\n+    // Passed to `--extensionDevelopmentPath`\n+    const extensionDevelopmentPath = path.resolve(__dirname, '../../');\n+\n+    // Minimum supported version.\n+    const jsonData = fs.readFileSync(path.join(extensionDevelopmentPath, 'package.json'));\n+    const json = JSON.parse(jsonData.toString());\n+    let minimalVersion: string = json.engines.vscode;\n+    if (minimalVersion.startsWith('^')) minimalVersion = minimalVersion.slice(1);\n+\n+    const launchArgs = [\"--disable-extensions\"];\n+\n+    // All test suites (either unit tests or integration tests) should be in subfolders.\n+    const extensionTestsPath = path.resolve(__dirname, './unit/index');\n+\n+    // Run tests using the minimal supported version.\n+    await runTests({\n+        version: minimalVersion,\n+        launchArgs,\n+        extensionDevelopmentPath,\n+        extensionTestsPath\n+    });\n+\n+    // and the latest one\n+    await runTests({\n+        version: 'stable',\n+        launchArgs,\n+        extensionDevelopmentPath,\n+        extensionTestsPath\n+    });\n }\n \n-main();\n+main().catch(err => {\n+    // eslint-disable-next-line no-console\n+    console.error('Failed to run tests', err);\n+    process.exit(1);\n+});"}, {"sha": "5165720b458b89ee1ba8dc5fc17da71873f39e47", "filename": "editors/code/tests/unit/index.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c41a10c29331127ee830badddae55f3e27c9a6ea/editors%2Fcode%2Ftests%2Funit%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c41a10c29331127ee830badddae55f3e27c9a6ea/editors%2Fcode%2Ftests%2Funit%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Findex.ts?ref=c41a10c29331127ee830badddae55f3e27c9a6ea", "patch": "@@ -11,10 +11,10 @@ export function run(): Promise<void> {\n \n     const testsRoot = __dirname;\n \n-    return new Promise((c, e) => {\n+    return new Promise((resolve, reject) => {\n         glob('**/**.test.js', { cwd: testsRoot }, (err, files) => {\n             if (err) {\n-                return e(err);\n+                return reject(err);\n             }\n \n             // Add files to the test suite\n@@ -25,13 +25,13 @@ export function run(): Promise<void> {\n                 mocha.timeout(100000);\n                 mocha.run(failures => {\n                     if (failures > 0) {\n-                        e(new Error(`${failures} tests failed.`));\n+                        reject(new Error(`${failures} tests failed.`));\n                     } else {\n-                        c();\n+                        resolve();\n                     }\n                 });\n             } catch (err) {\n-                e(err);\n+                reject(err);\n             }\n         });\n     });"}]}