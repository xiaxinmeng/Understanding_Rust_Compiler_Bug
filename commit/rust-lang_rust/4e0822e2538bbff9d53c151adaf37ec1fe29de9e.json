{"sha": "4e0822e2538bbff9d53c151adaf37ec1fe29de9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMDgyMmUyNTM4YmJmZjlkNTNjMTUxYWRhZjM3ZWMxZmUyOWRlOWU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T12:13:43Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T22:57:37Z"}, "message": "syntax: allow macros to expand to items with attributes.\n\nFixes #4471.", "tree": {"sha": "de8c351c0322b7f81cdd176e5f03a4ecd091b6e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de8c351c0322b7f81cdd176e5f03a4ecd091b6e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e0822e2538bbff9d53c151adaf37ec1fe29de9e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0822e2538bbff9d53c151adaf37ec1fe29de9e", "html_url": "https://github.com/rust-lang/rust/commit/4e0822e2538bbff9d53c151adaf37ec1fe29de9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e0822e2538bbff9d53c151adaf37ec1fe29de9e/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a70df1d3cf12eae47536a96e26c1e7e0030b75a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a70df1d3cf12eae47536a96e26c1e7e0030b75a", "html_url": "https://github.com/rust-lang/rust/commit/3a70df1d3cf12eae47536a96e26c1e7e0030b75a"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "343116df64276a0d55059ac6ebe1582263a33382", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e0822e2538bbff9d53c151adaf37ec1fe29de9e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0822e2538bbff9d53c151adaf37ec1fe29de9e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=4e0822e2538bbff9d53c151adaf37ec1fe29de9e", "patch": "@@ -20,6 +20,7 @@ use ext::tt::macro_parser::{named_match, matched_seq, matched_nonterminal};\n use ext::tt::macro_parser::{parse, parse_or_else, success, failure};\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n+use parse::attr::parser_attr;\n use parse::token::{get_ident_interner, special_idents, gensym_ident, ident_to_str};\n use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt, EOF};\n use print;\n@@ -54,12 +55,14 @@ impl AnyMacro for ParserAnyMacro {\n         ret\n     }\n     fn make_item(&self) -> Option<@ast::item> {\n-        let ret = self.parser.parse_item(~[]);     // no attrs\n+        let attrs = self.parser.parse_outer_attributes();\n+        let ret = self.parser.parse_item(attrs);\n         self.ensure_complete_parse(false);\n         ret\n     }\n     fn make_stmt(&self) -> @ast::Stmt {\n-        let ret = self.parser.parse_stmt(~[]);     // no attrs\n+        let attrs = self.parser.parse_outer_attributes();\n+        let ret = self.parser.parse_stmt(attrs);\n         self.ensure_complete_parse(true);\n         ret\n     }"}, {"sha": "7cbc8ef98c92910fdb4bd19b1ed1a1cc2220a26e", "filename": "src/test/run-pass/macro-attributes.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4e0822e2538bbff9d53c151adaf37ec1fe29de9e/src%2Ftest%2Frun-pass%2Fmacro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0822e2538bbff9d53c151adaf37ec1fe29de9e/src%2Ftest%2Frun-pass%2Fmacro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-attributes.rs?ref=4e0822e2538bbff9d53c151adaf37ec1fe29de9e", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-pretty - token trees can't pretty print\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! compiles_fine {\n+    ($at:attr) => {\n+        // test that the different types of attributes work\n+        #[attribute]\n+        /// Documentation!\n+        $at\n+\n+        // check that the attributes are recognised by requiring this\n+        // to be removed to avoid a compile error\n+        #[cfg(always_remove)]\n+        static MISTYPED: () = \"foo\";\n+    }\n+}\n+\n+// item\n+compiles_fine!(#[foo])\n+\n+pub fn main() {\n+    // statement\n+    compiles_fine!(#[bar]);\n+}"}]}