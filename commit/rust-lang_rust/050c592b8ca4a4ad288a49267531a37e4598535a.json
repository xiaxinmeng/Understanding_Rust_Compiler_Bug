{"sha": "050c592b8ca4a4ad288a49267531a37e4598535a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MGM1OTJiOGNhNGE0YWQyODhhNDkyNjc1MzFhMzdlNDU5ODUzNWE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-26T23:00:23Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-26T23:00:23Z"}, "message": "Exclude inherent traits more eagerly", "tree": {"sha": "0cf92a4d1fc5945202fe3e0fad8d0903abf7aa7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf92a4d1fc5945202fe3e0fad8d0903abf7aa7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050c592b8ca4a4ad288a49267531a37e4598535a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050c592b8ca4a4ad288a49267531a37e4598535a", "html_url": "https://github.com/rust-lang/rust/commit/050c592b8ca4a4ad288a49267531a37e4598535a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050c592b8ca4a4ad288a49267531a37e4598535a/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4015b6aaa0dd80f5c85c7ed03e83d0d16042264", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4015b6aaa0dd80f5c85c7ed03e83d0d16042264", "html_url": "https://github.com/rust-lang/rust/commit/b4015b6aaa0dd80f5c85c7ed03e83d0d16042264"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "ae52dd8bb87bcc39d3b8edfcfe54a341eb22e53b", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/050c592b8ca4a4ad288a49267531a37e4598535a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050c592b8ca4a4ad288a49267531a37e4598535a/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=050c592b8ca4a4ad288a49267531a37e4598535a", "patch": "@@ -420,6 +420,8 @@ fn trait_applicable_items(\n \n     let db = sema.db;\n \n+    let related_dyn_traits =\n+        trait_candidate.receiver_ty.applicable_inherent_traits(db).collect::<FxHashSet<_>>();\n     let mut required_assoc_items = FxHashSet::default();\n     let trait_candidates = items_locator::items_with_name(\n         sema,\n@@ -431,13 +433,15 @@ fn trait_applicable_items(\n     .filter_map(|input| item_as_assoc(db, input))\n     .filter_map(|assoc| {\n         let assoc_item_trait = assoc.containing_trait(db)?;\n-        required_assoc_items.insert(assoc);\n-        Some(assoc_item_trait.into())\n+        if related_dyn_traits.contains(&assoc_item_trait) {\n+            None\n+        } else {\n+            required_assoc_items.insert(assoc);\n+            Some(assoc_item_trait.into())\n+        }\n     })\n     .collect();\n \n-    let related_dyn_traits =\n-        trait_candidate.receiver_ty.applicable_inherent_traits(db).collect::<FxHashSet<_>>();\n     let mut located_imports = FxHashSet::default();\n \n     if trait_assoc_item {\n@@ -454,10 +458,6 @@ fn trait_applicable_items(\n                         }\n                     }\n                     let located_trait = assoc.containing_trait(db)?;\n-                    if related_dyn_traits.contains(&located_trait) {\n-                        return None;\n-                    }\n-\n                     let trait_item = ItemInNs::from(ModuleDef::from(located_trait));\n                     let original_item = assoc_to_item(assoc);\n                     located_imports.insert(LocatedImport::new(\n@@ -480,9 +480,6 @@ fn trait_applicable_items(\n                 let assoc = function.as_assoc_item(db)?;\n                 if required_assoc_items.contains(&assoc) {\n                     let located_trait = assoc.containing_trait(db)?;\n-                    if related_dyn_traits.contains(&located_trait) {\n-                        return None;\n-                    }\n                     let trait_item = ItemInNs::from(ModuleDef::from(located_trait));\n                     let original_item = assoc_to_item(assoc);\n                     located_imports.insert(LocatedImport::new("}]}