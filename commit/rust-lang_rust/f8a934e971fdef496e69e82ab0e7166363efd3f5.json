{"sha": "f8a934e971fdef496e69e82ab0e7166363efd3f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YTkzNGU5NzFmZGVmNDk2ZTY5ZTgyYWIwZTcxNjYzNjNlZmQzZjU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-11T07:55:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-11T22:15:58Z"}, "message": "Encapsulate `RcStr` in `syntax::util::interner`.", "tree": {"sha": "624824d0e0d44d4498baa6853d72211d3e40c6e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/624824d0e0d44d4498baa6853d72211d3e40c6e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8a934e971fdef496e69e82ab0e7166363efd3f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a934e971fdef496e69e82ab0e7166363efd3f5", "html_url": "https://github.com/rust-lang/rust/commit/f8a934e971fdef496e69e82ab0e7166363efd3f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8a934e971fdef496e69e82ab0e7166363efd3f5/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d5f85996e92a8cbc0112926dded59daa2bf9fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d5f85996e92a8cbc0112926dded59daa2bf9fdd", "html_url": "https://github.com/rust-lang/rust/commit/6d5f85996e92a8cbc0112926dded59daa2bf9fdd"}], "stats": {"total": 87, "additions": 25, "deletions": 62}, "files": [{"sha": "6ebd2ca6ec1a4746bd515382964573fe8e8a8d2a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8a934e971fdef496e69e82ab0e7166363efd3f5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a934e971fdef496e69e82ab0e7166363efd3f5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f8a934e971fdef496e69e82ab0e7166363efd3f5", "patch": "@@ -17,8 +17,7 @@ pub use self::Token::*;\n use ast::{self, BinOpKind};\n use ext::mtwt;\n use ptr::P;\n-use util::interner::{RcStr, StrInterner};\n-use util::interner;\n+use util::interner::StrInterner;\n use tokenstream;\n \n use serialize::{Decodable, Decoder, Encodable, Encoder};\n@@ -397,7 +396,7 @@ macro_rules! declare_keywords {(\n     }\n \n     fn mk_fresh_ident_interner() -> IdentInterner {\n-        interner::StrInterner::prefill(&[$($string,)*])\n+        StrInterner::prefill(&[$($string,)*])\n     }\n }}\n \n@@ -502,19 +501,19 @@ pub fn reset_ident_interner() {\n /// somehow.\n #[derive(Clone, PartialEq, Hash, PartialOrd, Eq, Ord)]\n pub struct InternedString {\n-    string: RcStr,\n+    string: Rc<String>,\n }\n \n impl InternedString {\n     #[inline]\n     pub fn new(string: &'static str) -> InternedString {\n         InternedString {\n-            string: RcStr::new(string),\n+            string: Rc::new(string.to_owned()),\n         }\n     }\n \n     #[inline]\n-    fn new_from_rc_str(string: RcStr) -> InternedString {\n+    fn new_from_rc_str(string: Rc<String>) -> InternedString {\n         InternedString {\n             string: string,\n         }"}, {"sha": "68dbd6272f4d8b9836fb62abd63cba809a9ef257", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 20, "deletions": 56, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f8a934e971fdef496e69e82ab0e7166363efd3f5/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a934e971fdef496e69e82ab0e7166363efd3f5/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=f8a934e971fdef496e69e82ab0e7166363efd3f5", "patch": "@@ -16,11 +16,8 @@ use ast::Name;\n \n use std::borrow::Borrow;\n use std::cell::RefCell;\n-use std::cmp::Ordering;\n use std::collections::HashMap;\n-use std::fmt;\n use std::hash::Hash;\n-use std::ops::Deref;\n use std::rc::Rc;\n \n pub struct Interner<T> {\n@@ -91,56 +88,26 @@ impl<T: Eq + Hash + Clone + 'static> Interner<T> {\n     }\n }\n \n-#[derive(Clone, PartialEq, Hash, PartialOrd)]\n-pub struct RcStr {\n-    string: Rc<String>,\n-}\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+struct RcStr(Rc<String>);\n \n impl RcStr {\n-    pub fn new(string: &str) -> RcStr {\n-        RcStr {\n-            string: Rc::new(string.to_string()),\n-        }\n-    }\n-}\n-\n-impl Eq for RcStr {}\n-\n-impl Ord for RcStr {\n-    fn cmp(&self, other: &RcStr) -> Ordering {\n-        self[..].cmp(&other[..])\n-    }\n-}\n-\n-impl fmt::Debug for RcStr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self[..].fmt(f)\n-    }\n-}\n-\n-impl fmt::Display for RcStr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self[..].fmt(f)\n+    fn new(string: &str) -> Self {\n+        RcStr(Rc::new(string.to_owned()))\n     }\n }\n \n impl Borrow<str> for RcStr {\n     fn borrow(&self) -> &str {\n-        &self.string[..]\n+        &self.0\n     }\n }\n \n-impl Deref for RcStr {\n-    type Target = str;\n-\n-    fn deref(&self) -> &str { &self.string[..] }\n-}\n-\n /// A StrInterner differs from Interner<String> in that it accepts\n /// &str rather than RcStr, resulting in less allocation.\n pub struct StrInterner {\n     map: RefCell<HashMap<RcStr, Name>>,\n-    vect: RefCell<Vec<RcStr> >,\n+    vect: RefCell<Vec<Rc<String>> >,\n }\n \n /// When traits can extend traits, we should extend index<Name,T> to get []\n@@ -165,16 +132,16 @@ impl StrInterner {\n         }\n \n         let new_idx = Name(self.len() as u32);\n-        let val = RcStr::new(val);\n-        map.insert(val.clone(), new_idx);\n+        let val = Rc::new(val.to_owned());\n+        map.insert(RcStr(val.clone()), new_idx);\n         self.vect.borrow_mut().push(val);\n         new_idx\n     }\n \n     pub fn gensym(&self, val: &str) -> Name {\n         let new_idx = Name(self.len() as u32);\n         // leave out of .map to avoid colliding\n-        self.vect.borrow_mut().push(RcStr::new(val));\n+        self.vect.borrow_mut().push(Rc::new(val.to_owned()));\n         new_idx\n     }\n \n@@ -197,20 +164,16 @@ impl StrInterner {\n         new_idx\n     }\n \n-    pub fn get(&self, idx: Name) -> RcStr {\n+    pub fn get(&self, idx: Name) -> Rc<String> {\n         (*self.vect.borrow())[idx.0 as usize].clone()\n     }\n \n     pub fn len(&self) -> usize {\n         self.vect.borrow().len()\n     }\n \n-    pub fn find<Q: ?Sized>(&self, val: &Q) -> Option<Name>\n-    where RcStr: Borrow<Q>, Q: Eq + Hash {\n-        match (*self.map.borrow()).get(val) {\n-            Some(v) => Some(*v),\n-            None => None,\n-        }\n+    pub fn find(&self, val: &str) -> Option<Name> {\n+        self.map.borrow().get(val).cloned()\n     }\n \n     pub fn clear(&self) {\n@@ -227,6 +190,7 @@ impl StrInterner {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use super::RcStr;\n     use ast::Name;\n \n     #[test]\n@@ -294,13 +258,13 @@ mod tests {\n         assert_eq!(i.gensym(\"dog\"), Name(4));\n         // gensym tests again with gensym_copy:\n         assert_eq!(i.gensym_copy(Name(2)), Name(5));\n-        assert_eq!(i.get(Name(5)), RcStr::new(\"zebra\"));\n+        assert_eq!(*i.get(Name(5)), \"zebra\");\n         assert_eq!(i.gensym_copy(Name(2)), Name(6));\n-        assert_eq!(i.get(Name(6)), RcStr::new(\"zebra\"));\n-        assert_eq!(i.get(Name(0)), RcStr::new(\"dog\"));\n-        assert_eq!(i.get(Name(1)), RcStr::new(\"cat\"));\n-        assert_eq!(i.get(Name(2)), RcStr::new(\"zebra\"));\n-        assert_eq!(i.get(Name(3)), RcStr::new(\"zebra\"));\n-        assert_eq!(i.get(Name(4)), RcStr::new(\"dog\"));\n+        assert_eq!(*i.get(Name(6)), \"zebra\");\n+        assert_eq!(*i.get(Name(0)), \"dog\");\n+        assert_eq!(*i.get(Name(1)), \"cat\");\n+        assert_eq!(*i.get(Name(2)), \"zebra\");\n+        assert_eq!(*i.get(Name(3)), \"zebra\");\n+        assert_eq!(*i.get(Name(4)), \"dog\");\n     }\n }"}]}