{"sha": "b3d325127143296de07269da7940a411526df022", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZDMyNTEyNzE0MzI5NmRlMDcyNjlkYTc5NDBhNDExNTI2ZGYwMjI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-18T15:57:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-18T15:57:37Z"}, "message": "Rollup merge of #82215 - TaKO8Ki:replace-if-let-while-let, r=varkor\n\nReplace if-let and while-let with `if let` and `while let`\n\nThis pull request replaces if-let and while-let with `if let` and `while let`.\n\ncloses https://github.com/rust-lang/rust/issues/82205", "tree": {"sha": "0ad15dcddfe3a66f30c30605f1150bcf4314cd3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ad15dcddfe3a66f30c30605f1150bcf4314cd3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3d325127143296de07269da7940a411526df022", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLo5yCRBK7hj4Ov3rIwAAdHIIAHioVCGVGSjIRi2PWZcMZJBa\nhqcsbpChWD/4iXMwsR/qVCIZSywB+Ua9fbw9/3EaHkOuG79jYoL5z7DkbvwQURbH\nflrUikF9zTYcdIkNn6JzqqNnQBxT7pPKAxKZnIFYUtaA1HO9xHnzZ2CStR/8W81D\nUrjdKYr6JVnrzPEH9PeYExhcqTjGS6oBQQDqgpaidaA0Se9uQUq7ts1vZcC/8g+o\nFfbzEB0SfDQhox0kj9PmpA7jcZmv7fbCsqaaPVkB4rLyd6el1Tfk7pLHMKm7KfWl\nbbEQxgvD61PVZfmffyHPL0tsnbcSQZFViApxAs7I6sUuXsTwYML6rHzzUgLjQv4=\n=lgtG\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ad15dcddfe3a66f30c30605f1150bcf4314cd3e\nparent f01b339dae824e61feba6b778fdd701cbb68c820\nparent 0f04875d2e21919e5f716b9946407ba07de08840\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613663857 +0100\ncommitter GitHub <noreply@github.com> 1613663857 +0100\n\nRollup merge of #82215 - TaKO8Ki:replace-if-let-while-let, r=varkor\n\nReplace if-let and while-let with `if let` and `while let`\n\nThis pull request replaces if-let and while-let with `if let` and `while let`.\n\ncloses https://github.com/rust-lang/rust/issues/82205\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d325127143296de07269da7940a411526df022", "html_url": "https://github.com/rust-lang/rust/commit/b3d325127143296de07269da7940a411526df022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3d325127143296de07269da7940a411526df022/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f01b339dae824e61feba6b778fdd701cbb68c820", "url": "https://api.github.com/repos/rust-lang/rust/commits/f01b339dae824e61feba6b778fdd701cbb68c820", "html_url": "https://github.com/rust-lang/rust/commit/f01b339dae824e61feba6b778fdd701cbb68c820"}, {"sha": "0f04875d2e21919e5f716b9946407ba07de08840", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f04875d2e21919e5f716b9946407ba07de08840", "html_url": "https://github.com/rust-lang/rust/commit/0f04875d2e21919e5f716b9946407ba07de08840"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "0161c9325c2111e573d91a609bfa8a102fe608b2", "filename": "compiler/rustc_error_codes/src/error_codes/E0162.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0162.md", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0162.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0162.md?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -1,6 +1,6 @@\n #### Note: this error code is no longer emitted by the compiler.\n \n-An if-let pattern attempts to match the pattern, and enters the body if the\n+An `if let` pattern attempts to match the pattern, and enters the body if the\n match was successful. If the match is irrefutable (when it cannot fail to\n match), use a regular `let`-binding instead. For instance:\n "}, {"sha": "7bcd6c0cbf379fe8a0b09bd6b7d0930001ffb389", "filename": "compiler/rustc_error_codes/src/error_codes/E0165.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0165.md", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0165.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0165.md?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -1,6 +1,6 @@\n #### Note: this error code is no longer emitted by the compiler.\n \n-A while-let pattern attempts to match the pattern, and enters the body if the\n+A `while let` pattern attempts to match the pattern, and enters the body if the\n match was successful. If the match is irrefutable (when it cannot fail to\n match), use a regular `let`-binding inside a `loop` instead. For instance:\n "}, {"sha": "8eeee19cc298af84ddca5da9c2bdafa037fd604a", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -1815,7 +1815,7 @@ declare_lint! {\n \n declare_lint! {\n     /// The `irrefutable_let_patterns` lint detects detects [irrefutable\n-    /// patterns] in [if-let] and [while-let] statements.\n+    /// patterns] in [`if let`] and [`while let`] statements.\n     ///\n     ///\n     ///\n@@ -1832,7 +1832,7 @@ declare_lint! {\n     /// ### Explanation\n     ///\n     /// There usually isn't a reason to have an irrefutable pattern in an\n-    /// if-let or while-let statement, because the pattern will always match\n+    /// `if let` or `while let` statement, because the pattern will always match\n     /// successfully. A [`let`] or [`loop`] statement will suffice. However,\n     /// when generating code with a macro, forbidding irrefutable patterns\n     /// would require awkward workarounds in situations where the macro\n@@ -1843,14 +1843,14 @@ declare_lint! {\n     /// See [RFC 2086] for more details.\n     ///\n     /// [irrefutable patterns]: https://doc.rust-lang.org/reference/patterns.html#refutability\n-    /// [if-let]: https://doc.rust-lang.org/reference/expressions/if-expr.html#if-let-expressions\n-    /// [while-let]: https://doc.rust-lang.org/reference/expressions/loop-expr.html#predicate-pattern-loops\n+    /// [`if let`]: https://doc.rust-lang.org/reference/expressions/if-expr.html#if-let-expressions\n+    /// [`while let`]: https://doc.rust-lang.org/reference/expressions/loop-expr.html#predicate-pattern-loops\n     /// [`let`]: https://doc.rust-lang.org/reference/statements.html#let-statements\n     /// [`loop`]: https://doc.rust-lang.org/reference/expressions/loop-expr.html#infinite-loops\n     /// [RFC 2086]: https://github.com/rust-lang/rfcs/blob/master/text/2086-allow-if-let-irrefutables.md\n     pub IRREFUTABLE_LET_PATTERNS,\n     Warn,\n-    \"detects irrefutable patterns in if-let and while-let statements\"\n+    \"detects irrefutable patterns in `if let` and `while let` statements\"\n }\n \n declare_lint! {"}, {"sha": "e928f3c5d4d09d8d0b398b3957b11a821dc7f624", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -368,9 +368,9 @@ fn unreachable_pattern(tcx: TyCtxt<'_>, span: Span, id: HirId, catchall: Option<\n fn irrefutable_let_pattern(tcx: TyCtxt<'_>, span: Span, id: HirId, source: hir::MatchSource) {\n     tcx.struct_span_lint_hir(IRREFUTABLE_LET_PATTERNS, id, span, |lint| {\n         let msg = match source {\n-            hir::MatchSource::IfLetDesugar { .. } => \"irrefutable if-let pattern\",\n-            hir::MatchSource::WhileLetDesugar => \"irrefutable while-let pattern\",\n-            hir::MatchSource::IfLetGuardDesugar => \"irrefutable if-let guard\",\n+            hir::MatchSource::IfLetDesugar { .. } => \"irrefutable `if let` pattern\",\n+            hir::MatchSource::WhileLetDesugar => \"irrefutable `while let` pattern\",\n+            hir::MatchSource::IfLetGuardDesugar => \"irrefutable `if let` guard\",\n             _ => bug!(),\n         };\n         lint.build(msg).emit()"}, {"sha": "9328f7cd9ec7b6b72fb6786a328dfc0197eb754c", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -45,7 +45,7 @@ impl NonConstExpr {\n                 return None;\n             }\n \n-            Self::Match(IfLetGuardDesugar) => bug!(\"if-let guard outside a `match` expression\"),\n+            Self::Match(IfLetGuardDesugar) => bug!(\"`if let` guard outside a `match` expression\"),\n \n             // All other expressions are allowed.\n             Self::Loop(Loop | While | WhileLet)"}, {"sha": "28d57e92c37313b17bb483a17a1d533f1b470484", "filename": "src/test/ui/binding/if-let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fbinding%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fbinding%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fif-let.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -6,7 +6,7 @@ pub fn main() {\n     if let Some(y) = x {\n         assert_eq!(y, 3);\n     } else {\n-        panic!(\"if-let panicked\");\n+        panic!(\"`if let` panicked\");\n     }\n     let mut worked = false;\n     if let Some(_) = x {\n@@ -54,7 +54,7 @@ pub fn main() {\n         if let Foo::Two(b) = a {\n             assert_eq!(b, 42_usize);\n         } else {\n-            panic!(\"panic in nested if-let\");\n+            panic!(\"panic in nested `if let`\");\n         }\n     }\n }"}, {"sha": "6107a082237c6617708b5041820c955da4e4797b", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-single-variant-diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -16,7 +16,7 @@ fn main() {\n         // FIXME(project-rfc-2229#24): Change this to be a destructure pattern\n         // once this is fixed, to remove the warning.\n         if let SingleVariant::Point(ref mut x, _) = point {\n-            //~^ WARNING: irrefutable if-let pattern\n+            //~^ WARNING: irrefutable `if let` pattern\n             *x += 1;\n         }\n     };"}, {"sha": "5c7a56c7ceda48bf3d26bf7e049fb9ec0b801b15", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-single-variant-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-single-variant-diagnostics.stderr?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-warning: irrefutable if-let pattern\n+warning: irrefutable `if let` pattern\n   --> $DIR/closure-origin-single-variant-diagnostics.rs:18:9\n    |\n LL | /         if let SingleVariant::Point(ref mut x, _) = point {"}, {"sha": "7208e388a16212a4fa334224f71d693958363e7f", "filename": "src/test/ui/expr/if/if-let.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -4,8 +4,8 @@ fn macros() {\n     macro_rules! foo{\n         ($p:pat, $e:expr, $b:block) => {{\n             if let $p = $e $b\n-            //~^ WARN irrefutable if-let\n-            //~| WARN irrefutable if-let\n+            //~^ WARN irrefutable `if let`\n+            //~| WARN irrefutable `if let`\n         }}\n     }\n     macro_rules! bar{\n@@ -23,27 +23,27 @@ fn macros() {\n }\n \n pub fn main() {\n-    if let a = 1 { //~ WARN irrefutable if-let\n+    if let a = 1 { //~ WARN irrefutable `if let`\n         println!(\"irrefutable pattern\");\n     }\n \n-    if let a = 1 { //~ WARN irrefutable if-let\n+    if let a = 1 { //~ WARN irrefutable `if let`\n         println!(\"irrefutable pattern\");\n     } else if true {\n-        println!(\"else-if in irrefutable if-let\");\n+        println!(\"else-if in irrefutable `if let`\");\n     } else {\n-        println!(\"else in irrefutable if-let\");\n+        println!(\"else in irrefutable `if let`\");\n     }\n \n     if let 1 = 2 {\n         println!(\"refutable pattern\");\n-    } else if let a = 1 { //~ WARN irrefutable if-let\n+    } else if let a = 1 { //~ WARN irrefutable `if let`\n         println!(\"irrefutable pattern\");\n     }\n \n     if true {\n         println!(\"if\");\n-    } else if let a = 1 { //~ WARN irrefutable if-let\n+    } else if let a = 1 { //~ WARN irrefutable `if let`\n         println!(\"irrefutable pattern\");\n     }\n }"}, {"sha": "468e913a773c05ae89aedce87796c99e0426d7cb", "filename": "src/test/ui/expr/if/if-let.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -1,4 +1,4 @@\n-warning: irrefutable if-let pattern\n+warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:6:13\n    |\n LL |               if let $p = $e $b\n@@ -12,7 +12,7 @@ LL | |     });\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: irrefutable if-let pattern\n+warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:6:13\n    |\n LL |               if let $p = $e $b\n@@ -25,27 +25,27 @@ LL | |     });\n    |\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: irrefutable if-let pattern\n+warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:26:5\n    |\n LL | /     if let a = 1 {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     }\n    | |_____^\n \n-warning: irrefutable if-let pattern\n+warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:30:5\n    |\n LL | /     if let a = 1 {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     } else if true {\n-LL | |         println!(\"else-if in irrefutable if-let\");\n+LL | |         println!(\"else-if in irrefutable `if let`\");\n LL | |     } else {\n-LL | |         println!(\"else in irrefutable if-let\");\n+LL | |         println!(\"else in irrefutable `if let`\");\n LL | |     }\n    | |_____^\n \n-warning: irrefutable if-let pattern\n+warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:40:12\n    |\n LL |       } else if let a = 1 {\n@@ -54,7 +54,7 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |     }\n    | |_____^\n \n-warning: irrefutable if-let pattern\n+warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:46:12\n    |\n LL |       } else if let a = 1 {"}, {"sha": "1f3b73f96d8b9c2c965e32f41ddacf00cb9e0c0c", "filename": "src/test/ui/issues/issue-19991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -1,4 +1,4 @@\n-// Test if the sugared if-let construct correctly prints \"missing an else clause\" when an else\n+// Test if the sugared `if let` construct correctly prints \"missing an else clause\" when an else\n // clause does not exist, instead of the unsympathetic \"`match` arms have incompatible types\"\n \n fn main() {"}, {"sha": "c1cfa4695c9ee2be5b7bfe56368432773840e77f", "filename": "src/test/ui/pattern/usefulness/deny-irrefutable-let-patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -1,9 +1,9 @@\n #![deny(irrefutable_let_patterns)]\n \n fn main() {\n-    if let _ = 5 {} //~ ERROR irrefutable if-let pattern\n+    if let _ = 5 {} //~ ERROR irrefutable `if let` pattern\n \n-    while let _ = 5 { //~ ERROR irrefutable while-let pattern\n+    while let _ = 5 { //~ ERROR irrefutable `while let` pattern\n         break;\n     }\n }"}, {"sha": "1de30f7db069814f21b7b4da08c33d376d7e17c7", "filename": "src/test/ui/pattern/usefulness/deny-irrefutable-let-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.stderr?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -1,4 +1,4 @@\n-error: irrefutable if-let pattern\n+error: irrefutable `if let` pattern\n   --> $DIR/deny-irrefutable-let-patterns.rs:4:5\n    |\n LL |     if let _ = 5 {}\n@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(irrefutable_let_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: irrefutable while-let pattern\n+error: irrefutable `while let` pattern\n   --> $DIR/deny-irrefutable-let-patterns.rs:6:5\n    |\n LL | /     while let _ = 5 {"}, {"sha": "d921367b91775f3c114471e5e16b170f1025d0f4", "filename": "src/test/ui/rfc-2294-if-let-guard/warns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -5,7 +5,7 @@\n fn irrefutable_let_guard() {\n     match Some(()) {\n         Some(x) if let () = x => {}\n-        //~^ ERROR irrefutable if-let guard\n+        //~^ ERROR irrefutable `if let` guard\n         _ => {}\n     }\n }"}, {"sha": "33fa25d32fb1b4706dd398d7d2efafc886b5f913", "filename": "src/test/ui/rfc-2294-if-let-guard/warns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -1,4 +1,4 @@\n-error: irrefutable if-let guard\n+error: irrefutable `if let` guard\n   --> $DIR/warns.rs:7:24\n    |\n LL |         Some(x) if let () = x => {}"}, {"sha": "b9a49b47c8ff5911594d7b805de37357742f3d5d", "filename": "src/test/ui/while-let.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -5,8 +5,8 @@ fn macros() {\n     macro_rules! foo{\n         ($p:pat, $e:expr, $b:block) => {{\n             while let $p = $e $b\n-            //~^ WARN irrefutable while-let\n-            //~| WARN irrefutable while-let\n+            //~^ WARN irrefutable `while let`\n+            //~| WARN irrefutable `while let`\n         }}\n     }\n     macro_rules! bar{\n@@ -24,7 +24,7 @@ fn macros() {\n }\n \n pub fn main() {\n-    while let _a = 1 { //~ WARN irrefutable while-let\n+    while let _a = 1 { //~ WARN irrefutable `while let`\n         println!(\"irrefutable pattern\");\n         break;\n     }"}, {"sha": "6538b9fbe6f28654c975af55e6092af072350b55", "filename": "src/test/ui/while-let.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fwhile-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftest%2Fui%2Fwhile-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.stderr?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -1,4 +1,4 @@\n-warning: irrefutable while-let pattern\n+warning: irrefutable `while let` pattern\n   --> $DIR/while-let.rs:7:13\n    |\n LL |               while let $p = $e $b\n@@ -12,7 +12,7 @@ LL | |     });\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: irrefutable while-let pattern\n+warning: irrefutable `while let` pattern\n   --> $DIR/while-let.rs:7:13\n    |\n LL |               while let $p = $e $b\n@@ -25,7 +25,7 @@ LL | |     });\n    |\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: irrefutable while-let pattern\n+warning: irrefutable `while let` pattern\n   --> $DIR/while-let.rs:27:5\n    |\n LL | /     while let _a = 1 {"}, {"sha": "1c9373a756c8896d3de7472131aa8839f3d16206", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3d325127143296de07269da7940a411526df022/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d325127143296de07269da7940a411526df022/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=b3d325127143296de07269da7940a411526df022", "patch": "@@ -340,7 +340,7 @@ declare_clippy_lint! {\n     /// ```\n     pub WHILE_LET_ON_ITERATOR,\n     style,\n-    \"using a while-let loop instead of a for loop on an iterator\"\n+    \"using a `while let` loop instead of a for loop on an iterator\"\n }\n \n declare_clippy_lint! {"}]}