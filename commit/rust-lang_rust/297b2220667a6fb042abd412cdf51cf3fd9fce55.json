{"sha": "297b2220667a6fb042abd412cdf51cf3fd9fce55", "node_id": "C_kwDOAAsO6NoAKDI5N2IyMjIwNjY3YTZmYjA0MmFiZDQxMmNkZjUxY2YzZmQ5ZmNlNTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-25T19:06:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-25T19:06:32Z"}, "message": "Rollup merge of #110556 - kylematsuda:earlybinder-explicit-item-bounds, r=compiler-errors\n\nSwitch to `EarlyBinder` for `explicit_item_bounds`\n\nPart of the work to finish https://github.com/rust-lang/rust/issues/105779.\n\nThis PR adds `EarlyBinder` to the return type of the `explicit_item_bounds` query and removes `bound_explicit_item_bounds`.\n\nr? `@compiler-errors` (hope it's okay to request you, since you reviewed #110299 and #110498 :smiley:)", "tree": {"sha": "5f9dd4a8a067e21f4f0330b537f8b2d9046b661b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f9dd4a8a067e21f4f0330b537f8b2d9046b661b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/297b2220667a6fb042abd412cdf51cf3fd9fce55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkSCS4CRBK7hj4Ov3rIwAAItwIAKhWZ/6BSCpvAhq2ZY2FppyH\nMdL7AuX1+1GhVDGc/db5Iif4M3IaVTSQJJklPFXrfEzx8CF/hdvuuMRkLdCTyCtI\n7gYvWS0gR+KKtIrOXFmWvzIqx2L9BRDzkObTZm3N8rfgZu+nVaYmG2N2QkNtFND8\nY7OwraUhH7LMHgxJQRjEchRZn0KMNus5FCfmenTIuVanHgrdg9ev8MXeWzPl5wqS\nvUNhAiyEV5kNuTj6b5DW9aeEK8z0EcW3t9LIG8lWMdbZc3rAq1OLNG02kA2nRuUy\nyVLjxPZVAkri/ACIfHqS8Kpoke9zgGlNB6ZB1/GcRj89G5/j2d9nhEmv8OeG3nM=\n=r0KB\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f9dd4a8a067e21f4f0330b537f8b2d9046b661b\nparent 666fee2a5fb3a4ec75953b9e6622662ae10b9ae5\nparent 5a69b5d0f9753a7e780849ec930b1bb48653588b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682449592 +0200\ncommitter GitHub <noreply@github.com> 1682449592 +0200\n\nRollup merge of #110556 - kylematsuda:earlybinder-explicit-item-bounds, r=compiler-errors\n\nSwitch to `EarlyBinder` for `explicit_item_bounds`\n\nPart of the work to finish https://github.com/rust-lang/rust/issues/105779.\n\nThis PR adds `EarlyBinder` to the return type of the `explicit_item_bounds` query and removes `bound_explicit_item_bounds`.\n\nr? `@compiler-errors` (hope it's okay to request you, since you reviewed #110299 and #110498 :smiley:)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/297b2220667a6fb042abd412cdf51cf3fd9fce55", "html_url": "https://github.com/rust-lang/rust/commit/297b2220667a6fb042abd412cdf51cf3fd9fce55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/297b2220667a6fb042abd412cdf51cf3fd9fce55/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "666fee2a5fb3a4ec75953b9e6622662ae10b9ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/666fee2a5fb3a4ec75953b9e6622662ae10b9ae5", "html_url": "https://github.com/rust-lang/rust/commit/666fee2a5fb3a4ec75953b9e6622662ae10b9ae5"}, {"sha": "5a69b5d0f9753a7e780849ec930b1bb48653588b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a69b5d0f9753a7e780849ec930b1bb48653588b", "html_url": "https://github.com/rust-lang/rust/commit/5a69b5d0f9753a7e780849ec930b1bb48653588b"}], "stats": {"total": 159, "additions": 88, "deletions": 71}, "files": [{"sha": "5db0f72919d03fae07f334998dc6cf7d79c41485", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -702,7 +702,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 .copied()\n                 .find_map(find_fn_kind_from_did),\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => tcx\n-                .bound_explicit_item_bounds(def_id)\n+                .explicit_item_bounds(def_id)\n                 .subst_iter_copied(tcx, substs)\n                 .find_map(find_fn_kind_from_did),\n             ty::Closure(_, substs) => match substs.as_closure().kind() {"}, {"sha": "65c2f5955cdd0d38d634ce3259b689407d4ee1e4", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -320,7 +320,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         };\n         let prohibit_opaque = tcx\n             .explicit_item_bounds(def_id)\n-            .iter()\n+            .subst_identity_iter_copied()\n             .try_for_each(|(predicate, _)| predicate.visit_with(&mut visitor));\n \n         if let Some(ty) = prohibit_opaque.break_value() {"}, {"sha": "48214b899a4b81f123205feb8aa08303f3198cb3", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -839,7 +839,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n             });\n             self.types.insert(proj.def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n-            for (pred, pred_span) in self.interner().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.interner(), proj.substs) {\n+            for (pred, pred_span) in self.interner().explicit_item_bounds(proj.def_id).subst_iter_copied(self.interner(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n                     &ObligationCause::misc(self.span, self.body_id),\n@@ -2023,7 +2023,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     };\n \n     let obligations: Vec<_> = tcx\n-        .bound_explicit_item_bounds(trait_ty.def_id)\n+        .explicit_item_bounds(trait_ty.def_id)\n         .subst_iter_copied(tcx, rebased_substs)\n         .map(|(concrete_ty_bound, span)| {\n             debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);"}, {"sha": "0eafab017c7f3badc3d46e22cc93dcee8774f3f4", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -360,7 +360,9 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n                             tcx,\n                             param_env,\n                             item_def_id,\n-                            tcx.explicit_item_bounds(item_def_id).to_vec(),\n+                            tcx.explicit_item_bounds(item_def_id)\n+                                .subst_identity_iter_copied()\n+                                .collect::<Vec<_>>(),\n                             &FxIndexSet::default(),\n                             gat_def_id.def_id,\n                             gat_generics,\n@@ -1125,7 +1127,7 @@ fn check_associated_type_bounds(wfcx: &WfCheckingCtxt<'_, '_>, item: ty::AssocIt\n     let bounds = wfcx.tcx().explicit_item_bounds(item.def_id);\n \n     debug!(\"check_associated_type_bounds: bounds={:?}\", bounds);\n-    let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n+    let wf_obligations = bounds.subst_identity_iter_copied().flat_map(|(bound, bound_span)| {\n         let normalized_bound = wfcx.normalize(span, None, bound);\n         traits::wf::predicate_obligations(\n             wfcx.infcx,\n@@ -1588,7 +1590,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n                 }\n             });\n             for (bound, bound_span) in tcx\n-                .bound_explicit_item_bounds(opaque_ty.def_id)\n+                .explicit_item_bounds(opaque_ty.def_id)\n                 .subst_iter_copied(tcx, opaque_ty.substs)\n             {\n                 let bound = self.wfcx.normalize(bound_span, None, bound);"}, {"sha": "80d6bc7db9e8f3e54533c5312aa740e4e6f2f16d", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -79,14 +79,14 @@ fn opaque_type_bounds<'tcx>(\n pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-) -> &'_ [(ty::Predicate<'_>, Span)] {\n+) -> ty::EarlyBinder<&'_ [(ty::Predicate<'_>, Span)]> {\n     match tcx.opt_rpitit_info(def_id.to_def_id()) {\n         // RPITIT's bounds are the same as opaque type bounds, but with\n         // a projection self type.\n         Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n             let item = tcx.hir().get_by_def_id(opaque_def_id.expect_local()).expect_item();\n             let opaque_ty = item.expect_opaque_ty();\n-            return opaque_type_bounds(\n+            return ty::EarlyBinder(opaque_type_bounds(\n                 tcx,\n                 opaque_def_id.expect_local(),\n                 opaque_ty.bounds,\n@@ -95,15 +95,15 @@ pub(super) fn explicit_item_bounds(\n                     ty::InternalSubsts::identity_for_item(tcx, def_id),\n                 ),\n                 item.span,\n-            );\n+            ));\n         }\n         // These should have been fed!\n         Some(ty::ImplTraitInTraitData::Impl { .. }) => unreachable!(),\n         None => {}\n     }\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    match tcx.hir().get(hir_id) {\n+    let bounds = match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n             span,\n@@ -123,16 +123,18 @@ pub(super) fn explicit_item_bounds(\n             opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n-    }\n+    };\n+    ty::EarlyBinder(bounds)\n }\n \n pub(super) fn item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> ty::EarlyBinder<&'_ ty::List<ty::Predicate<'_>>> {\n-    let bounds = tcx.mk_predicates_from_iter(util::elaborate(\n-        tcx,\n-        tcx.explicit_item_bounds(def_id).iter().map(|&(bound, _span)| bound),\n-    ));\n-    ty::EarlyBinder(bounds)\n+    tcx.explicit_item_bounds(def_id).map_bound(|bounds| {\n+        tcx.mk_predicates_from_iter(util::elaborate(\n+            tcx,\n+            bounds.iter().map(|&(bound, _span)| bound),\n+        ))\n+    })\n }"}, {"sha": "e735b048d7343f7ed4d29f2a894ec9ed93caf15b", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -153,8 +153,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n     let mut collector =\n         OpaqueTypeLifetimeCollector { tcx, root_def_id: item_def_id.to_def_id(), variances };\n     let id_substs = ty::InternalSubsts::identity_for_item(tcx, item_def_id);\n-    for pred in tcx.bound_explicit_item_bounds(item_def_id.to_def_id()).transpose_iter() {\n-        let pred = pred.map_bound(|(pred, _)| *pred).subst(tcx, id_substs);\n+    for (pred, _) in tcx.explicit_item_bounds(item_def_id).subst_iter_copied(tcx, id_substs) {\n         debug!(?pred);\n \n         // We only ignore opaque type substs if the opaque type is the outermost type."}, {"sha": "aefde8109a07a71dd5995a75522c893abff6a7ab", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -530,7 +530,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for ty in [first_ty, second_ty] {\n                     for (pred, _) in self\n                         .tcx\n-                        .bound_explicit_item_bounds(rpit_def_id)\n+                        .explicit_item_bounds(rpit_def_id)\n                         .subst_iter_copied(self.tcx, substs)\n                     {\n                         let pred = pred.kind().rebind(match pred.kind().skip_binder() {"}, {"sha": "7046269c2de22c953644630010d4a85e7e8f92fa", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -172,7 +172,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => self\n                 .deduce_closure_signature_from_predicates(\n                     expected_ty,\n-                    self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n+                    self.tcx.explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n                 ),\n             ty::Dynamic(ref object_type, ..) => {\n                 let sig = object_type.projection_bounds().find_map(|pb| {\n@@ -713,13 +713,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => self\n                 .tcx\n-                .bound_explicit_item_bounds(def_id)\n+                .explicit_item_bounds(def_id)\n                 .subst_iter_copied(self.tcx, substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n             ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => self\n                 .tcx\n-                .bound_explicit_item_bounds(proj.def_id)\n+                .explicit_item_bounds(proj.def_id)\n                 .subst_iter_copied(self.tcx, proj.substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             _ => span_bug!("}, {"sha": "5b432475fc3845ef8ccc01d0070d0e1534d89d36", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -571,7 +571,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for &(predicate, _) in fcx.tcx.explicit_item_bounds(def) {\n+            for &(predicate, _) in fcx.tcx.explicit_item_bounds(def).skip_binder() {\n                 // We only look at the `DefId`, so it is safe to skip the binder here.\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n                     predicate.kind().skip_binder()"}, {"sha": "547f851526f0a23555c8eb88149568f7dc096d9f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -402,7 +402,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n         let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n \n-        self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs).find_map(\n+        self.tcx.explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs).find_map(\n             |(predicate, _)| {\n                 predicate\n                     .kind()"}, {"sha": "334395945ea966ebb99822e13c149cdd2de71bea", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -540,7 +540,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 .obligations;\n         }\n \n-        let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());\n+        let item_bounds = tcx.explicit_item_bounds(def_id);\n \n         for (predicate, _) in item_bounds.subst_iter_copied(tcx, substs) {\n             let predicate = predicate.fold_with(&mut BottomUpFolder {"}, {"sha": "15715c8fca039a7af21ae2913c70739052974a25", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n         // For every projection predicate in the opaque type's explicit bounds,\n         // check that the type that we're assigning actually satisfies the bounds\n         // of the associated type.\n-        for &(pred, pred_span) in cx.tcx.explicit_item_bounds(def_id) {\n+        for (pred, pred_span) in cx.tcx.explicit_item_bounds(def_id).subst_identity_iter_copied() {\n             // Liberate bound regions in the predicate since we\n             // don't actually care about lifetimes in this check.\n             let predicate = cx.tcx.liberate_late_bound_regions(def_id, pred.kind());\n@@ -112,7 +112,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n             // with `impl Send: OtherTrait`.\n             for (assoc_pred, assoc_pred_span) in cx\n                 .tcx\n-                .bound_explicit_item_bounds(proj.projection_ty.def_id)\n+                .explicit_item_bounds(proj.projection_ty.def_id)\n                 .subst_iter_copied(cx.tcx, &proj.projection_ty.substs)\n             {\n                 let assoc_pred = assoc_pred.fold_with(proj_replacer);"}, {"sha": "eb175e96997b3cf074d7d7e3b25ebe51c59ebe39", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -254,7 +254,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 }\n                 ty::Adt(def, _) => is_def_must_use(cx, def.did(), span),\n                 ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n-                    elaborate(cx.tcx, cx.tcx.explicit_item_bounds(def).iter().cloned())\n+                    elaborate(cx.tcx, cx.tcx.explicit_item_bounds(def).subst_identity_iter_copied())\n                         // We only care about self bounds for the impl-trait\n                         .filter_only_self()\n                         .find_map(|(pred, _span)| {"}, {"sha": "0719dfc167fb5190810294845fbbcd30fc52a637", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::GeneratorDiagnosticData;\n-use rustc_middle::ty::{self, ParameterizedOverTcx, Ty, TyCtxt, Visibility};\n+use rustc_middle::ty::{self, ParameterizedOverTcx, Predicate, Ty, TyCtxt, Visibility};\n use rustc_serialize::opaque::MemDecoder;\n use rustc_serialize::{Decodable, Decoder};\n use rustc_session::cstore::{\n@@ -857,6 +857,20 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n+    fn get_explicit_item_bounds(\n+        self,\n+        index: DefIndex,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> ty::EarlyBinder<&'tcx [(Predicate<'tcx>, Span)]> {\n+        let lazy = self.root.tables.explicit_item_bounds.get(self, index);\n+        let output = if lazy.is_default() {\n+            &mut []\n+        } else {\n+            tcx.arena.alloc_from_iter(lazy.decode((self, tcx)))\n+        };\n+        ty::EarlyBinder(&*output)\n+    }\n+\n     fn get_variant(self, kind: &DefKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n         let adt_kind = match kind {\n             DefKind::Variant => ty::AdtKind::Enum,"}, {"sha": "4a3b783c63670bd026f373f81cdd5a924d70764d", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -203,7 +203,7 @@ impl IntoArgs for (CrateNum, SimplifiedType) {\n }\n \n provide! { tcx, def_id, other, cdata,\n-    explicit_item_bounds => { table_defaulted_array }\n+    explicit_item_bounds => { cdata.get_explicit_item_bounds(def_id.index, tcx) }\n     explicit_predicates_of => { table }\n     generics_of => { table }\n     inferred_outlives_of => { table_defaulted_array }"}, {"sha": "f5ffdd27cae3f9d03d06e32406f39d438b325cf8", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -1423,7 +1423,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_explicit_item_bounds(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_explicit_item_bounds({:?})\", def_id);\n-        let bounds = self.tcx.explicit_item_bounds(def_id);\n+        let bounds = self.tcx.explicit_item_bounds(def_id).skip_binder();\n         record_defaulted_array!(self.tables.explicit_item_bounds[def_id] <- bounds);\n     }\n "}, {"sha": "84b5d6b0d0fa103c9e6b071961d1f8b26c5ffb2b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -251,7 +251,7 @@ rustc_queries! {\n     /// `key` is the `DefId` of the associated type or opaque type.\n     ///\n     /// Bounds from the parent (e.g. with nested impl trait) are not included.\n-    query explicit_item_bounds(key: DefId) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n+    query explicit_item_bounds(key: DefId) -> ty::EarlyBinder<&'tcx [(ty::Predicate<'tcx>, Span)]> {\n         desc { |tcx| \"finding item bounds for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern"}, {"sha": "7df4be263d58d03d06dcd449217d1b85cadd35d5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -1603,7 +1603,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = ty.kind() else { return false };\n         let future_trait = self.require_lang_item(LangItem::Future, None);\n \n-        self.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n+        self.explicit_item_bounds(def_id).skip_binder().iter().any(|&(predicate, _)| {\n             let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() else {\n                 return false;\n             };"}, {"sha": "1c1432ecd5a058448c1522e144d728b5559649c0", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -914,7 +914,7 @@ pub trait PrettyPrinter<'tcx>:\n \n         // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n         // by looking up the projections associated with the def_id.\n-        let bounds = tcx.bound_explicit_item_bounds(def_id);\n+        let bounds = tcx.explicit_item_bounds(def_id);\n \n         let mut traits = FxIndexMap::default();\n         let mut fn_traits = FxIndexMap::default();"}, {"sha": "63b2acdbe4e5d099010267fba86cb5dabb8d7eb7", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -612,6 +612,12 @@ where\n     ) -> SubstIter<'s, 'tcx, I> {\n         SubstIter { it: self.0.into_iter(), tcx, substs }\n     }\n+\n+    /// Similar to [`subst_identity`](EarlyBinder::subst_identity),\n+    /// but on an iterator of `TypeFoldable` values.\n+    pub fn subst_identity_iter(self) -> I::IntoIter {\n+        self.0.into_iter()\n+    }\n }\n \n pub struct SubstIter<'s, 'tcx, I: IntoIterator> {\n@@ -664,6 +670,12 @@ where\n     ) -> SubstIterCopied<'s, 'tcx, I> {\n         SubstIterCopied { it: self.0.into_iter(), tcx, substs }\n     }\n+\n+    /// Similar to [`subst_identity`](EarlyBinder::subst_identity),\n+    /// but on an iterator of values that deref to a `TypeFoldable`.\n+    pub fn subst_identity_iter_copied(self) -> impl Iterator<Item = <I::Item as Deref>::Target> {\n+        self.0.into_iter().map(|v| *v)\n+    }\n }\n \n pub struct SubstIterCopied<'a, 'tcx, I: IntoIterator> {"}, {"sha": "4c346b00256ccd7411b8a5c093489a3fa89d5601", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -701,13 +701,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }\n     }\n \n-    pub fn bound_explicit_item_bounds(\n-        self,\n-        def_id: DefId,\n-    ) -> ty::EarlyBinder<&'tcx [(ty::Predicate<'tcx>, rustc_span::Span)]> {\n-        ty::EarlyBinder(self.explicit_item_bounds(def_id))\n-    }\n-\n     /// Returns names of captured upvars for closures and generators.\n     ///\n     /// Here are some examples:"}, {"sha": "e44dd084b2de5d6f384c709a3f261f263360e552", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -1800,7 +1800,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         // FIXME: support adding the attribute to TAITs\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {\n             let mut has_emitted = false;\n-            for &(predicate, _) in tcx.explicit_item_bounds(def) {\n+            for &(predicate, _) in tcx.explicit_item_bounds(def).skip_binder() {\n                 // We only look at the `DefId`, so it is safe to skip the binder here.\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(ref poly_trait_predicate)) =\n                     predicate.kind().skip_binder()"}, {"sha": "c607c7fd5f4a73e586d3b08d3e9aebbbe92628b8", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -269,7 +269,7 @@ where\n                     // and are visited by shallow visitors.\n                     self.visit_predicates(ty::GenericPredicates {\n                         parent: None,\n-                        predicates: tcx.explicit_item_bounds(def_id),\n+                        predicates: tcx.explicit_item_bounds(def_id).skip_binder(),\n                     })?;\n                 }\n             }\n@@ -1784,7 +1784,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     fn bounds(&mut self) -> &mut Self {\n         self.visit_predicates(ty::GenericPredicates {\n             parent: None,\n-            predicates: self.tcx.explicit_item_bounds(self.item_def_id),\n+            predicates: self.tcx.explicit_item_bounds(self.item_def_id).skip_binder(),\n         });\n         self\n     }"}, {"sha": "73e2efc3b000e4722815d69ae362632aff6ce29a", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -297,8 +297,8 @@ fn bounds_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span\n     tcx.associated_items(trait_def_id)\n         .in_definition_order()\n         .filter(|item| item.kind == ty::AssocKind::Type)\n-        .flat_map(|item| tcx.explicit_item_bounds(item.def_id))\n-        .filter_map(|pred_span| predicate_references_self(tcx, *pred_span))\n+        .flat_map(|item| tcx.explicit_item_bounds(item.def_id).subst_identity_iter_copied())\n+        .filter_map(|pred_span| predicate_references_self(tcx, pred_span))\n         .collect()\n }\n "}, {"sha": "c319b2e31c7e673f1f8fe6dcd5b57708e9c4980c", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -50,12 +50,11 @@ impl<'tcx> RustIrDatabase<'tcx> {\n     where\n         ty::Predicate<'tcx>: LowerInto<'tcx, std::option::Option<T>>,\n     {\n-        let bounds = self.interner.tcx.bound_explicit_item_bounds(def_id);\n-        bounds\n-            .0\n-            .iter()\n-            .map(|(bound, _)| bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars))\n-            .filter_map(|bound| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n+        self.interner\n+            .tcx\n+            .explicit_item_bounds(def_id)\n+            .subst_iter_copied(self.interner.tcx, &bound_vars)\n+            .filter_map(|(bound, _)| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n             .collect()\n     }\n }\n@@ -506,15 +505,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let identity_substs = InternalSubsts::identity_for_item(self.interner.tcx, opaque_ty_id.0);\n \n-        let explicit_item_bounds = self.interner.tcx.bound_explicit_item_bounds(opaque_ty_id.0);\n+        let explicit_item_bounds = self.interner.tcx.explicit_item_bounds(opaque_ty_id.0);\n         let bounds =\n             explicit_item_bounds\n-                .0\n-                .iter()\n+                .subst_iter_copied(self.interner.tcx, &bound_vars)\n                 .map(|(bound, _)| {\n-                    explicit_item_bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars)\n-                })\n-                .map(|bound| {\n                     bound.fold_with(&mut ReplaceOpaqueTyFolder {\n                         tcx: self.interner.tcx,\n                         opaque_ty_id,"}, {"sha": "c992a5388d19900577ff1574d1cafa38a4f4a555", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -422,8 +422,8 @@ fn clean_projection<'tcx>(\n         let bounds = cx\n             .tcx\n             .explicit_item_bounds(ty.skip_binder().def_id)\n-            .iter()\n-            .map(|(bound, _)| EarlyBinder(*bound).subst(cx.tcx, ty.skip_binder().substs))\n+            .subst_iter_copied(cx.tcx, ty.skip_binder().substs)\n+            .map(|(pred, _)| pred)\n             .collect::<Vec<_>>();\n         return clean_middle_opaque_bounds(cx, bounds);\n     }\n@@ -1315,10 +1315,11 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n \n             if let ty::TraitContainer = assoc_item.container {\n-                let bounds = tcx.explicit_item_bounds(assoc_item.def_id);\n+                let bounds =\n+                    tcx.explicit_item_bounds(assoc_item.def_id).subst_identity_iter_copied();\n                 let predicates = tcx.explicit_predicates_of(assoc_item.def_id).predicates;\n                 let predicates =\n-                    tcx.arena.alloc_from_iter(bounds.into_iter().chain(predicates).copied());\n+                    tcx.arena.alloc_from_iter(bounds.chain(predicates.iter().copied()));\n                 let mut generics = clean_ty_generics(\n                     cx,\n                     tcx.generics_of(assoc_item.def_id),\n@@ -1845,8 +1846,8 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             let bounds = cx\n                 .tcx\n                 .explicit_item_bounds(def_id)\n-                .iter()\n-                .map(|(bound, _)| EarlyBinder(*bound).subst(cx.tcx, substs))\n+                .subst_iter_copied(cx.tcx, substs)\n+                .map(|(bound, _)| bound)\n                 .collect::<Vec<_>>();\n             clean_middle_opaque_bounds(cx, bounds)\n         }"}, {"sha": "ff838c2d56e43f85214b79bdcc0e635c99e5f936", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, AliasTy, Clause, EarlyBinder, PredicateKind};\n+use rustc_middle::ty::{self, AliasTy, Clause, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n@@ -66,8 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n-            for &(p, _span) in preds {\n-                let p = EarlyBinder(p).subst(cx.tcx, substs);\n+            for (p, _span) in preds.subst_iter_copied(cx.tcx, substs) {\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {\n                     if Some(trait_pred.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;"}, {"sha": "cb700126c2bd5b074ae400e4e452144f2e91edd6", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/297b2220667a6fb042abd412cdf51cf3fd9fce55/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297b2220667a6fb042abd412cdf51cf3fd9fce55/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=297b2220667a6fb042abd412cdf51cf3fd9fce55", "patch": "@@ -90,7 +90,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                         return false;\n                     }\n \n-                    for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n+                    for (predicate, _span) in cx.tcx.explicit_item_bounds(def_id).subst_identity_iter_copied() {\n                         match predicate.kind().skip_binder() {\n                             // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n                             // and check substituions to find `U`.\n@@ -267,7 +267,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n-            for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n+            for (predicate, _) in cx.tcx.explicit_item_bounds(def_id).skip_binder() {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n                         return true;\n@@ -743,7 +743,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: AliasTy<'tcx>) -> Option\n \n     for (pred, _) in cx\n         .tcx\n-        .bound_explicit_item_bounds(ty.def_id)\n+        .explicit_item_bounds(ty.def_id)\n         .subst_iter_copied(cx.tcx, ty.substs)\n     {\n         match pred.kind().skip_binder() {"}]}