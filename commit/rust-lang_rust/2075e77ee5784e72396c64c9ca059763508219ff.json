{"sha": "2075e77ee5784e72396c64c9ca059763508219ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzVlNzdlZTU3ODRlNzIzOTZjNjRjOWNhMDU5NzYzNTA4MjE5ZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-22T15:29:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-22T15:32:46Z"}, "message": "CodeAction groups", "tree": {"sha": "7a03fa418be34764403f53c5d4fc120a0dc776eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a03fa418be34764403f53c5d4fc120a0dc776eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2075e77ee5784e72396c64c9ca059763508219ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2075e77ee5784e72396c64c9ca059763508219ff", "html_url": "https://github.com/rust-lang/rust/commit/2075e77ee5784e72396c64c9ca059763508219ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2075e77ee5784e72396c64c9ca059763508219ff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "html_url": "https://github.com/rust-lang/rust/commit/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca"}], "stats": {"total": 192, "additions": 109, "deletions": 83}, "files": [{"sha": "0e4412ade00691218286abedf5ea5e35f8e5f0df", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -102,6 +102,7 @@ pub struct ClientCapsConfig {\n     pub hierarchical_symbols: bool,\n     pub code_action_literals: bool,\n     pub work_done_progress: bool,\n+    pub code_action_group: bool,\n }\n \n impl Default for Config {\n@@ -294,9 +295,13 @@ impl Config {\n \n         self.assist.allow_snippets(false);\n         if let Some(experimental) = &caps.experimental {\n-            let enable =\n+            let snippet_text_edit =\n                 experimental.get(\"snippetTextEdit\").and_then(|it| it.as_bool()) == Some(true);\n-            self.assist.allow_snippets(enable);\n+            self.assist.allow_snippets(snippet_text_edit);\n+\n+            let code_action_group =\n+                experimental.get(\"codeActionGroup\").and_then(|it| it.as_bool()) == Some(true);\n+            self.client_caps.code_action_group = code_action_group\n         }\n     }\n }"}, {"sha": "c40cfdcdcaf05cf2a8f891067e61243f06c25098", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -65,6 +65,7 @@ expression: diag\n         fixes: [\n             CodeAction {\n                 title: \"return the expression directly\",\n+                group: None,\n                 kind: Some(\n                     \"quickfix\",\n                 ),"}, {"sha": "6dd3fcb2eab83f7d75b615b0c31bbf872cc04c7e", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -50,6 +50,7 @@ expression: diag\n         fixes: [\n             CodeAction {\n                 title: \"consider prefixing with an underscore\",\n+                group: None,\n                 kind: Some(\n                     \"quickfix\",\n                 ),"}, {"sha": "a500d670a72c85fd54a37d80c9bdc13b3d05650d", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -145,6 +145,7 @@ fn map_rust_child_diagnostic(\n     } else {\n         MappedRustChildDiagnostic::SuggestedFix(lsp_ext::CodeAction {\n             title: rd.message.clone(),\n+            group: None,\n             kind: Some(\"quickfix\".to_string()),\n             edit: Some(lsp_ext::SnippetWorkspaceEdit {\n                 // FIXME: there's no good reason to use edit_map here...."}, {"sha": "c25d90a504d54508548c1b03a8c9a521a98840bc", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -133,14 +133,6 @@ pub struct Runnable {\n     pub cwd: Option<PathBuf>,\n }\n \n-#[derive(Deserialize, Serialize, Debug)]\n-#[serde(rename_all = \"camelCase\")]\n-pub struct SourceChange {\n-    pub label: String,\n-    pub workspace_edit: SnippetWorkspaceEdit,\n-    pub cursor_position: Option<lsp_types::TextDocumentPositionParams>,\n-}\n-\n pub enum InlayHints {}\n \n impl Request for InlayHints {\n@@ -196,6 +188,8 @@ impl Request for CodeActionRequest {\n pub struct CodeAction {\n     pub title: String,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub group: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub kind: Option<String>,\n     #[serde(skip_serializing_if = \"Option::is_none\")]\n     pub command: Option<lsp_types::Command>,"}, {"sha": "89144f74312bd43be32139319c0c996dc211b722", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 6, "deletions": 48, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -18,7 +18,7 @@ use lsp_types::{\n     SemanticTokensResult, SymbolInformation, TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use ra_ide::{\n-    Assist, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n+    FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n     TextEdit,\n };\n use ra_prof::profile;\n@@ -720,6 +720,7 @@ pub fn handle_code_action(\n     let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n+    let frange = FileRange { file_id, range };\n \n     let diagnostics = world.analysis().diagnostics(file_id)?;\n     let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n@@ -733,7 +734,8 @@ pub fn handle_code_action(\n     for source_edit in fixes_from_diagnostics {\n         let title = source_edit.label.clone();\n         let edit = to_proto::snippet_workspace_edit(&world, source_edit)?;\n-        let action = lsp_ext::CodeAction { title, kind: None, edit: Some(edit), command: None };\n+        let action =\n+            lsp_ext::CodeAction { title, group: None, kind: None, edit: Some(edit), command: None };\n         res.push(action);\n     }\n \n@@ -745,53 +747,9 @@ pub fn handle_code_action(\n         res.push(fix.action.clone());\n     }\n \n-    let mut grouped_assists: FxHashMap<String, (usize, Vec<Assist>)> = FxHashMap::default();\n-    for assist in\n-        world.analysis().assists(&world.config.assist, FileRange { file_id, range })?.into_iter()\n-    {\n-        match &assist.group_label {\n-            Some(label) => grouped_assists\n-                .entry(label.to_owned())\n-                .or_insert_with(|| {\n-                    let idx = res.len();\n-                    let dummy = lsp_ext::CodeAction {\n-                        title: String::new(),\n-                        kind: None,\n-                        command: None,\n-                        edit: None,\n-                    };\n-                    res.push(dummy);\n-                    (idx, Vec::new())\n-                })\n-                .1\n-                .push(assist),\n-            None => {\n-                res.push(to_proto::code_action(&world, assist)?.into());\n-            }\n-        }\n-    }\n-\n-    for (group_label, (idx, assists)) in grouped_assists {\n-        if assists.len() == 1 {\n-            res[idx] = to_proto::code_action(&world, assists.into_iter().next().unwrap())?.into();\n-        } else {\n-            let title = group_label;\n-\n-            let mut arguments = Vec::with_capacity(assists.len());\n-            for assist in assists {\n-                let source_change = to_proto::source_change(&world, assist.source_change)?;\n-                arguments.push(to_value(source_change)?);\n-            }\n-\n-            let command = Some(Command {\n-                title: title.clone(),\n-                command: \"rust-analyzer.selectAndApplySourceChange\".to_string(),\n-                arguments: Some(vec![serde_json::Value::Array(arguments)]),\n-            });\n-            res[idx] = lsp_ext::CodeAction { title, kind: None, edit: None, command };\n-        }\n+    for assist in world.analysis().assists(&world.config.assist, frange)?.into_iter() {\n+        res.push(to_proto::code_action(&world, assist)?.into());\n     }\n-\n     Ok(Some(res))\n }\n "}, {"sha": "461944ada6e498e3b0170549e83699af74767959", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -478,15 +478,6 @@ pub(crate) fn resource_op(\n     Ok(res)\n }\n \n-pub(crate) fn source_change(\n-    world: &WorldSnapshot,\n-    source_change: SourceChange,\n-) -> Result<lsp_ext::SourceChange> {\n-    let label = source_change.label.clone();\n-    let workspace_edit = self::snippet_workspace_edit(world, source_change)?;\n-    Ok(lsp_ext::SourceChange { label, workspace_edit, cursor_position: None })\n-}\n-\n pub(crate) fn snippet_workspace_edit(\n     world: &WorldSnapshot,\n     source_change: SourceChange,\n@@ -606,6 +597,7 @@ fn main() <fold>{\n pub(crate) fn code_action(world: &WorldSnapshot, assist: Assist) -> Result<lsp_ext::CodeAction> {\n     let res = lsp_ext::CodeAction {\n         title: assist.label,\n+        group: if world.config.client_caps.code_action_group { assist.group_label } else { None },\n         kind: Some(String::new()),\n         edit: Some(snippet_workspace_edit(world, assist.source_change)?),\n         command: None,"}, {"sha": "d90875f8bd239595fe5fbc27621856d41345d74f", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -5,7 +5,7 @@ It's a best effort document, when in doubt, consult the source (and send a PR wi\n We aim to upstream all non Rust-specific extensions to the protocol, but this is not a top priority.\n All capabilities are enabled via `experimental` field of `ClientCapabilities`.\n \n-## `SnippetTextEdit`\n+## Snippet `TextEdit`\n \n **Client Capability:** `{ \"snippetTextEdit\": boolean }`\n \n@@ -36,7 +36,7 @@ At the moment, rust-analyzer guarantees that only a single edit will have `Inser\n * Where exactly are `SnippetTextEdit`s allowed (only in code actions at the moment)?\n * Can snippets span multiple files (so far, no)?\n \n-## `joinLines`\n+## Join Lines\n \n **Server Capability:** `{ \"joinLines\": boolean }`\n \n@@ -119,3 +119,48 @@ SSR with query `foo($a:expr, $b:expr) ==>> ($a).foo($b)` will transform, eg `foo\n \n * Probably needs search without replace mode\n * Needs a way to limit the scope to certain files.\n+\n+## `CodeAction` Groups\n+\n+**Client Capability:** `{ \"codeActionGroup\": boolean }`\n+\n+If this capability is set, `CodeAction` returned from the server contain an additional field, `group`:\n+\n+```typescript\n+interface CodeAction {\n+\ttitle: string;\n+    group?: string;\n+    ...\n+}\n+```\n+\n+All code-actions with the same `group` should be grouped under single (extendable) entry in lightbulb menu.\n+The set of actions `[ { title: \"foo\" }, { group: \"frobnicate\", title: \"bar\" }, { group: \"frobnicate\", title: \"baz\" }]` should be rendered as\n+\n+```\n+\ud83d\udca1\n+  +-------------+\n+  | foo         |\n+  +-------------+-----+\n+  | frobnicate >| bar |\n+  +-------------+-----+\n+                | baz |\n+                +-----+\n+```\n+\n+Alternatively, selecting `frobnicate` could present a user with an additional menu to choose between `bar` and `baz`.\n+\n+### Example\n+\n+```rust\n+fn main() {\n+    let x: Entry/*cursor here*/ = todo!();\n+}\n+```\n+\n+Invoking code action at this position will yield two code actions for importing `Entry` from either `collections::HashMap` or `collection::BTreeMap`, grouped under a single \"import\" group.\n+\n+### Unresolved Questions\n+\n+* Is a fixed two-level structure enough?\n+* Should we devise a general way to encode custom interaction protocols for GUI refactorings?"}, {"sha": "d64f9a3f97938948b9f3abce0ac77b71cc45c44b", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -41,23 +41,51 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                 return client.sendRequest(lc.CodeActionRequest.type, params, token).then((values) => {\n                     if (values === null) return undefined;\n                     const result: (vscode.CodeAction | vscode.Command)[] = [];\n+                    const groups = new Map<string, { index: number; items: vscode.CodeAction[] }>();\n                     for (const item of values) {\n                         if (lc.CodeAction.is(item)) {\n                             const action = client.protocol2CodeConverter.asCodeAction(item);\n-                            if (isSnippetEdit(item)) {\n+                            const group = actionGroup(item);\n+                            if (isSnippetEdit(item) || group) {\n                                 action.command = {\n                                     command: \"rust-analyzer.applySnippetWorkspaceEdit\",\n                                     title: \"\",\n                                     arguments: [action.edit],\n                                 };\n                                 action.edit = undefined;\n                             }\n-                            result.push(action);\n+\n+                            if (group) {\n+                                let entry = groups.get(group);\n+                                if (!entry) {\n+                                    entry = { index: result.length, items: [] };\n+                                    groups.set(group, entry);\n+                                    result.push(action);\n+                                }\n+                                entry.items.push(action);\n+                            } else {\n+                                result.push(action);\n+                            }\n                         } else {\n                             const command = client.protocol2CodeConverter.asCommand(item);\n                             result.push(command);\n                         }\n                     }\n+                    for (const [group, { index, items }] of groups) {\n+                        if (items.length === 1) {\n+                            result[index] = items[0];\n+                        } else {\n+                            const action = new vscode.CodeAction(group);\n+                            action.command = {\n+                                command: \"rust-analyzer.applyActionGroup\",\n+                                title: \"\",\n+                                arguments: [items.map((item) => {\n+                                    return { label: item.title, edit: item.command!!.arguments!![0] };\n+                                })],\n+                            };\n+                            result[index] = action;\n+                        }\n+                    }\n                     return result;\n                 },\n                     (_error) => undefined\n@@ -81,15 +109,16 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n     // implementations are still in the \"proposed\" category for 3.16.\n     client.registerFeature(new CallHierarchyFeature(client));\n     client.registerFeature(new SemanticTokensFeature(client));\n-    client.registerFeature(new SnippetTextEditFeature());\n+    client.registerFeature(new ExperimentalFeatures());\n \n     return client;\n }\n \n-class SnippetTextEditFeature implements lc.StaticFeature {\n+class ExperimentalFeatures implements lc.StaticFeature {\n     fillClientCapabilities(capabilities: lc.ClientCapabilities): void {\n         const caps: any = capabilities.experimental ?? {};\n         caps.snippetTextEdit = true;\n+        caps.codeActionGroup = true;\n         capabilities.experimental = caps;\n     }\n     initialize(_capabilities: lc.ServerCapabilities<any>, _documentSelector: lc.DocumentSelector | undefined): void {\n@@ -107,3 +136,7 @@ function isSnippetEdit(action: lc.CodeAction): boolean {\n     }\n     return false;\n }\n+\n+function actionGroup(action: lc.CodeAction): string | undefined {\n+    return (action as any).group;\n+}"}, {"sha": "abb53a2481525dfc7f2dc5fce424d8a49670b149", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -41,15 +41,11 @@ export function applySourceChange(ctx: Ctx): Cmd {\n     };\n }\n \n-export function selectAndApplySourceChange(ctx: Ctx): Cmd {\n-    return async (changes: ra.SourceChange[]) => {\n-        if (changes.length === 1) {\n-            await sourceChange.applySourceChange(ctx, changes[0]);\n-        } else if (changes.length > 0) {\n-            const selectedChange = await vscode.window.showQuickPick(changes);\n-            if (!selectedChange) return;\n-            await sourceChange.applySourceChange(ctx, selectedChange);\n-        }\n+export function applyActionGroup(_ctx: Ctx): Cmd {\n+    return async (actions: { label: string; edit: vscode.WorkspaceEdit }[]) => {\n+        const selectedAction = await vscode.window.showQuickPick(actions);\n+        if (!selectedAction) return;\n+        await applySnippetWorkspaceEdit(selectedAction.edit);\n     };\n }\n "}, {"sha": "4d45138696d17ccea733163dca5f83e478a692e4", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2075e77ee5784e72396c64c9ca059763508219ff/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2075e77ee5784e72396c64c9ca059763508219ff/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=2075e77ee5784e72396c64c9ca059763508219ff", "patch": "@@ -92,7 +92,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n     ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEditCommand);\n-    ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n+    ctx.registerCommand('applyActionGroup', commands.applyActionGroup);\n \n     ctx.pushCleanup(activateTaskProvider(workspaceFolder));\n "}]}