{"sha": "0756719a305c1da552b980d0f05fa844f0194ed7", "node_id": "C_kwDOAAsO6NoAKDA3NTY3MTlhMzA1YzFkYTU1MmI5ODBkMGYwNWZhODQ0ZjAxOTRlZDc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-17T10:56:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-17T10:56:14Z"}, "message": "Replace some SmolStr usages with String as the conversion happens anyways", "tree": {"sha": "52572c1c4205fa1ba7c3d8349e3f402c796b4a29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52572c1c4205fa1ba7c3d8349e3f402c796b4a29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0756719a305c1da552b980d0f05fa844f0194ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0756719a305c1da552b980d0f05fa844f0194ed7", "html_url": "https://github.com/rust-lang/rust/commit/0756719a305c1da552b980d0f05fa844f0194ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0756719a305c1da552b980d0f05fa844f0194ed7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91833f19747738ba0ebf50357a73e62d15b127f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/91833f19747738ba0ebf50357a73e62d15b127f2", "html_url": "https://github.com/rust-lang/rust/commit/91833f19747738ba0ebf50357a73e62d15b127f2"}], "stats": {"total": 95, "additions": 44, "deletions": 51}, "files": [{"sha": "343a8f7acce3c04709a8f6cdb80e6f1dda51f634", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0756719a305c1da552b980d0f05fa844f0194ed7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0756719a305c1da552b980d0f05fa844f0194ed7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=0756719a305c1da552b980d0f05fa844f0194ed7", "patch": "@@ -8,7 +8,7 @@ use itertools::Itertools;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, AstNode, HasArgList, HasGenericParams, HasName, UnaryOp},\n-    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, SyntaxNode, TextRange, T,\n+    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, T,\n };\n \n use crate::FileId;\n@@ -60,7 +60,7 @@ pub enum InlayKind {\n pub struct InlayHint {\n     pub range: TextRange,\n     pub kind: InlayKind,\n-    pub label: SmolStr,\n+    pub label: String,\n }\n \n // Feature: Inlay Hints\n@@ -248,7 +248,7 @@ fn closing_brace_hints(\n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBraceHint,\n-        label: label.into(),\n+        label,\n     });\n \n     None\n@@ -262,6 +262,13 @@ fn lifetime_fn_hints(\n     if config.lifetime_elision_hints == LifetimeElisionHints::Never {\n         return None;\n     }\n+\n+    let mk_lt_hint = |t: SyntaxToken, label| InlayHint {\n+        range: t.text_range(),\n+        kind: InlayKind::LifetimeHint,\n+        label,\n+    };\n+\n     let param_list = func.param_list()?;\n     let generic_param_list = func.generic_param_list();\n     let ret_type = func.ret_type();\n@@ -378,11 +385,7 @@ fn lifetime_fn_hints(\n                 ast::Type::RefType(ty) if ty.lifetime().is_none() => {\n                     if let Some(amp) = ty.amp_token() {\n                         is_trivial = false;\n-                        acc.push(InlayHint {\n-                            range: amp.text_range(),\n-                            kind: InlayKind::LifetimeHint,\n-                            label: output_lt.clone(),\n-                        });\n+                        acc.push(mk_lt_hint(amp, output_lt.to_string()));\n                     }\n                 }\n                 _ => (),\n@@ -398,8 +401,8 @@ fn lifetime_fn_hints(\n     for (_, amp_token, _, is_elided) in potential_lt_refs {\n         if is_elided {\n             let t = amp_token?;\n-            let lt = a.next()?.clone();\n-            acc.push(InlayHint { range: t.text_range(), kind: InlayKind::LifetimeHint, label: lt });\n+            let lt = a.next()?;\n+            acc.push(mk_lt_hint(t, lt.to_string()));\n         }\n     }\n \n@@ -409,16 +412,14 @@ fn lifetime_fn_hints(\n         (Some(gpl), allocated_lifetimes) => {\n             let angle_tok = gpl.l_angle_token()?;\n             let is_empty = gpl.generic_params().next().is_none();\n-            acc.push(InlayHint {\n-                range: angle_tok.text_range(),\n-                kind: InlayKind::GenericParamListHint,\n-                label: format!(\n+            acc.push(mk_lt_hint(\n+                angle_tok,\n+                format!(\n                     \"{}{}\",\n                     allocated_lifetimes.iter().format(\", \"),\n                     if is_empty { \"\" } else { \", \" }\n-                )\n-                .into(),\n-            });\n+                ),\n+            ));\n         }\n         (None, allocated_lifetimes) => acc.push(InlayHint {\n             range: func.name()?.syntax().text_range(),\n@@ -456,7 +457,7 @@ fn closure_ret_hints(\n         range: param_list.syntax().text_range(),\n         kind: InlayKind::ClosureReturnTypeHint,\n         label: hint_iterator(sema, &famous_defs, config, &ty)\n-            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string().into()),\n+            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string()),\n     });\n     Some(())\n }\n@@ -482,7 +483,7 @@ fn reborrow_hints(\n     acc.push(InlayHint {\n         range: expr.syntax().text_range(),\n         kind: InlayKind::ImplicitReborrowHint,\n-        label: SmolStr::new_inline(label),\n+        label: label.to_string(),\n     });\n     Some(())\n }\n@@ -539,7 +540,7 @@ fn chaining_hints(\n                 range: expr.syntax().text_range(),\n                 kind: InlayKind::ChainingHint,\n                 label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n-                    ty.display_truncated(sema.db, config.max_length).to_string().into()\n+                    ty.display_truncated(sema.db, config.max_length).to_string()\n                 }),\n             });\n         }\n@@ -606,11 +607,7 @@ fn binding_mode_hints(\n             (true, false) => \"&\",\n             _ => return,\n         };\n-        acc.push(InlayHint {\n-            range,\n-            kind: InlayKind::BindingModeHint,\n-            label: SmolStr::new_inline(r),\n-        });\n+        acc.push(InlayHint { range, kind: InlayKind::BindingModeHint, label: r.to_string() });\n     });\n     match pat {\n         ast::Pat::IdentPat(pat) if pat.ref_token().is_none() && pat.mut_token().is_none() => {\n@@ -620,11 +617,7 @@ fn binding_mode_hints(\n                 hir::BindingMode::Ref(Mutability::Mut) => \"ref mut\",\n                 hir::BindingMode::Ref(Mutability::Shared) => \"ref\",\n             };\n-            acc.push(InlayHint {\n-                range,\n-                kind: InlayKind::BindingModeHint,\n-                label: SmolStr::new_inline(bm),\n-            });\n+            acc.push(InlayHint { range, kind: InlayKind::BindingModeHint, label: bm.to_string() });\n         }\n         _ => (),\n     }\n@@ -663,7 +656,7 @@ fn bind_pat_hints(\n             {\n                 return None;\n             }\n-            ty_name.into()\n+            ty_name\n         }\n     };\n \n@@ -738,7 +731,7 @@ fn hint_iterator(\n     famous_defs: &FamousDefs,\n     config: &InlayHintsConfig,\n     ty: &hir::Type,\n-) -> Option<SmolStr> {\n+) -> Option<String> {\n     let db = sema.db;\n     let strukt = ty.strip_references().as_adt()?;\n     let krate = strukt.module(db).krate();\n@@ -775,7 +768,7 @@ fn hint_iterator(\n                     )\n                     .to_string()\n                 });\n-            return Some(format!(\"{}{}{}\", LABEL_START, ty_display, LABEL_END).into());\n+            return Some(format!(\"{}{}{}\", LABEL_START, ty_display, LABEL_END));\n         }\n     }\n "}, {"sha": "83d863ce36b818f8ac15af5130e08eea9c0fe712", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0756719a305c1da552b980d0f05fa844f0194ed7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0756719a305c1da552b980d0f05fa844f0194ed7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0756719a305c1da552b980d0f05fa844f0194ed7", "patch": "@@ -433,24 +433,6 @@ pub(crate) fn inlay_hint(\n             | InlayKind::LifetimeHint\n             | InlayKind::ClosingBraceHint => position(line_index, inlay_hint.range.end()),\n         },\n-        label: lsp_types::InlayHintLabel::String(match inlay_hint.kind {\n-            InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n-            InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n-            InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n-            _ => inlay_hint.label.to_string(),\n-        }),\n-        kind: match inlay_hint.kind {\n-            InlayKind::ParameterHint => Some(lsp_types::InlayHintKind::PARAMETER),\n-            InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n-                Some(lsp_types::InlayHintKind::TYPE)\n-            }\n-            InlayKind::BindingModeHint\n-            | InlayKind::GenericParamListHint\n-            | InlayKind::LifetimeHint\n-            | InlayKind::ImplicitReborrowHint\n-            | InlayKind::ClosingBraceHint => None,\n-        },\n-        tooltip: None,\n         padding_left: Some(match inlay_hint.kind {\n             InlayKind::TypeHint => !render_colons,\n             InlayKind::ChainingHint | InlayKind::ClosingBraceHint => true,\n@@ -471,7 +453,25 @@ pub(crate) fn inlay_hint(\n             InlayKind::BindingModeHint => inlay_hint.label != \"&\",\n             InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n         }),\n+        label: lsp_types::InlayHintLabel::String(match inlay_hint.kind {\n+            InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n+            InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n+            InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n+            _ => inlay_hint.label,\n+        }),\n+        kind: match inlay_hint.kind {\n+            InlayKind::ParameterHint => Some(lsp_types::InlayHintKind::PARAMETER),\n+            InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n+                Some(lsp_types::InlayHintKind::TYPE)\n+            }\n+            InlayKind::BindingModeHint\n+            | InlayKind::GenericParamListHint\n+            | InlayKind::LifetimeHint\n+            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::ClosingBraceHint => None,\n+        },\n         text_edits: None,\n+        tooltip: None,\n         data: None,\n     }\n }"}]}