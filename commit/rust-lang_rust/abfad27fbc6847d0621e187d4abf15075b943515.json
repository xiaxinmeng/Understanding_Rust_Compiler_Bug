{"sha": "abfad27fbc6847d0621e187d4abf15075b943515", "node_id": "C_kwDOAAsO6NoAKGFiZmFkMjdmYmM2ODQ3ZDA2MjFlMTg3ZDRhYmYxNTA3NWI5NDM1MTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-15T21:02:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-15T21:02:59Z"}, "message": "Rollup merge of #105727 - estebank:use-impl-trait, r=oli-obk\n\nTweak output for bare `dyn Trait` in arguments\n\nFix #35825.", "tree": {"sha": "be41a79016f13bda73f3557f86782b4270820dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be41a79016f13bda73f3557f86782b4270820dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abfad27fbc6847d0621e187d4abf15075b943515", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjm4uDCRBK7hj4Ov3rIwAA+P4IAGAVFHApthKbHdR8YumL48Tz\n88E4ln1JF64N7k4CWsZTNA+5w9YLSEhz1BWJ4QwOtOSGgAQ1BQiaReqy3cWbBWgi\nUdrDoc0pdA0nDe+NXF82Iwnq0bsSo227WK/cRxMbt2tTLzfVNMADtJY4pJuvD1Ya\n0gXFGogRKELxpFDrzUHn0bb8Kz57422pw3ksb9kDP4qAOt4vm4jfE+bZlM5Jxg+j\n26IIxisJXsnPA6P6H6tG2ImMyq00i7gZzSpNwrBbS5Li/00/XJs0c2x+zJvNBg7z\nRxRD5E7yf6VueqHhjH5QBTIwT0l1BnCiqO4XFFVhCjr+5FOFSwkj9rGOxSVAwrA=\n=RYZc\n-----END PGP SIGNATURE-----\n", "payload": "tree be41a79016f13bda73f3557f86782b4270820dad\nparent 24e584b991c3ab3297e114f36f0b45aa6df21d63\nparent 124f19485dcfdcbc081f667036e82d0daf98927e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671138179 +0100\ncommitter GitHub <noreply@github.com> 1671138179 +0100\n\nRollup merge of #105727 - estebank:use-impl-trait, r=oli-obk\n\nTweak output for bare `dyn Trait` in arguments\n\nFix #35825.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abfad27fbc6847d0621e187d4abf15075b943515", "html_url": "https://github.com/rust-lang/rust/commit/abfad27fbc6847d0621e187d4abf15075b943515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abfad27fbc6847d0621e187d4abf15075b943515/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24e584b991c3ab3297e114f36f0b45aa6df21d63", "url": "https://api.github.com/repos/rust-lang/rust/commits/24e584b991c3ab3297e114f36f0b45aa6df21d63", "html_url": "https://github.com/rust-lang/rust/commit/24e584b991c3ab3297e114f36f0b45aa6df21d63"}, {"sha": "124f19485dcfdcbc081f667036e82d0daf98927e", "url": "https://api.github.com/repos/rust-lang/rust/commits/124f19485dcfdcbc081f667036e82d0daf98927e", "html_url": "https://github.com/rust-lang/rust/commit/124f19485dcfdcbc081f667036e82d0daf98927e"}], "stats": {"total": 108, "additions": 85, "deletions": 23}, "files": [{"sha": "057b0a368bf9b7f8ff48b3277d4e412791c4a497", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -1626,7 +1626,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let trait_obj = if has_dyn { &snippet[4..] } else { &snippet };\n         if only_never_return {\n             // No return paths, probably using `panic!()` or similar.\n-            // Suggest `-> T`, `-> impl Trait`, and if `Trait` is object safe, `-> Box<dyn Trait>`.\n+            // Suggest `-> impl Trait`, and if `Trait` is object safe, `-> Box<dyn Trait>`.\n             suggest_trait_object_return_type_alternatives(\n                 err,\n                 ret_ty.span,\n@@ -2548,6 +2548,25 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n             ObligationCauseCode::SizedArgumentType(sp) => {\n                 if let Some(span) = sp {\n+                    if let ty::PredicateKind::Clause(clause) = predicate.kind().skip_binder()\n+                        && let ty::Clause::Trait(trait_pred) = clause\n+                        && let ty::Dynamic(..) = trait_pred.self_ty().kind()\n+                    {\n+                        let span = if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)\n+                            && snippet.starts_with(\"dyn \")\n+                        {\n+                            let pos = snippet.len() - snippet[3..].trim_start().len();\n+                            span.with_hi(span.lo() + BytePos(pos as u32))\n+                        } else {\n+                            span.shrink_to_lo()\n+                        };\n+                        err.span_suggestion_verbose(\n+                            span,\n+                            \"you can use `impl Trait` as the argument type\",\n+                            \"impl \".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                     err.span_suggestion_verbose(\n                         span.shrink_to_lo(),\n                         \"function arguments must have a statically known size, borrowed types \\\n@@ -3610,13 +3629,6 @@ fn suggest_trait_object_return_type_alternatives(\n     trait_obj: &str,\n     is_object_safe: bool,\n ) {\n-    err.span_suggestion(\n-        ret_ty,\n-        \"use some type `T` that is `T: Sized` as the return type if all return paths have the \\\n-            same type\",\n-        \"T\",\n-        Applicability::MaybeIncorrect,\n-    );\n     err.span_suggestion(\n         ret_ty,\n         &format!("}, {"sha": "c04e57843d4b21f4d16e5205630273d4f199cc37", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -1,5 +1,5 @@\n+#![allow(unused, bare_trait_objects)]\n #[repr(align(256))]\n-#[allow(dead_code)]\n struct A {\n     v: u8,\n }\n@@ -14,13 +14,17 @@ impl Foo for A {\n     }\n }\n \n-fn foo(x: dyn Foo) {\n-    //~^ ERROR [E0277]\n+fn foo(x: dyn Foo) { //~ ERROR [E0277]\n     x.foo()\n }\n \n+fn bar(x: Foo) { //~ ERROR [E0277]\n+    x.foo()\n+}\n+\n+fn qux(_: [()]) {} //~ ERROR [E0277]\n+\n fn main() {\n     let x: Box<dyn Foo> = Box::new(A { v: 22 });\n-    foo(*x);\n-    //~^ ERROR [E0277]\n+    foo(*x); //~ ERROR [E0277]\n }"}, {"sha": "92c71392672e197537c6a72525b9059a31c19852", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -6,13 +6,47 @@ LL | fn foo(x: dyn Foo) {\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n    = help: unsized fn params are gated as an unstable feature\n+help: you can use `impl Trait` as the argument type\n+   |\n+LL | fn foo(x: impl Foo) {\n+   |           ~~~~\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn foo(x: &dyn Foo) {\n    |           +\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n-  --> $DIR/feature-gate-unsized_fn_params.rs:24:9\n+  --> $DIR/feature-gate-unsized_fn_params.rs:21:8\n+   |\n+LL | fn bar(x: Foo) {\n+   |        ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n+   = help: unsized fn params are gated as an unstable feature\n+help: you can use `impl Trait` as the argument type\n+   |\n+LL | fn bar(x: impl Foo) {\n+   |           ++++\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn bar(x: &Foo) {\n+   |           +\n+\n+error[E0277]: the size for values of type `[()]` cannot be known at compilation time\n+  --> $DIR/feature-gate-unsized_fn_params.rs:25:8\n+   |\n+LL | fn qux(_: [()]) {}\n+   |        ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[()]`\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn qux(_: &[()]) {}\n+   |           +\n+\n+error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n+  --> $DIR/feature-gate-unsized_fn_params.rs:29:9\n    |\n LL |     foo(*x);\n    |         ^^ doesn't have a size known at compile-time\n@@ -21,6 +55,6 @@ LL |     foo(*x);\n    = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "9aeeb88cf04f2befd08f101afdb57860769e220d", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -6,6 +6,10 @@ LL | fn f(f: dyn FnOnce()) {}\n    |\n    = help: the trait `Sized` is not implemented for `(dyn FnOnce() + 'static)`\n    = help: unsized fn params are gated as an unstable feature\n+help: you can use `impl Trait` as the argument type\n+   |\n+LL | fn f(f: impl FnOnce()) {}\n+   |         ~~~~\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn f(f: &dyn FnOnce()) {}"}, {"sha": "7f73d5e12d1962a9288eb62d472d632b983b1ae4", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -70,10 +70,6 @@ error[E0746]: return type cannot have an unboxed trait object\n LL | fn bak() -> dyn Trait { unimplemented!() }\n    |             ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-help: use some type `T` that is `T: Sized` as the return type if all return paths have the same type\n-   |\n-LL | fn bak() -> T { unimplemented!() }\n-   |             ~\n help: use `impl Trait` as the return type if all return paths have the same type but you want to expose only the trait in the signature\n    |\n LL | fn bak() -> impl Trait { unimplemented!() }"}, {"sha": "1669b550a9bafe26442e406d91bb02a980d135e7", "filename": "src/test/ui/issues/issue-18107.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -4,10 +4,6 @@ error[E0746]: return type cannot have an unboxed trait object\n LL |     dyn AbstractRenderer\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-help: use some type `T` that is `T: Sized` as the return type if all return paths have the same type\n-   |\n-LL |     T\n-   |\n help: use `impl AbstractRenderer` as the return type if all return paths have the same type but you want to expose only the trait in the signature\n    |\n LL |     impl AbstractRenderer"}, {"sha": "3ca6a2957e14b91768b6c421dc222634f5886677", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -23,6 +23,10 @@ LL | pub fn f(_: dyn ToString) {}\n    |\n    = help: the trait `Sized` is not implemented for `(dyn ToString + 'static)`\n    = help: unsized fn params are gated as an unstable feature\n+help: you can use `impl Trait` as the argument type\n+   |\n+LL | pub fn f(_: impl ToString) {}\n+   |             ~~~~\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | pub fn f(_: &dyn ToString) {}"}, {"sha": "ffff403e0d4656508d4dbdbf3c4e7b32f6bb749f", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -6,6 +6,10 @@ LL |     r: dyn A + 'static\n    |\n    = help: the trait `Sized` is not implemented for `(dyn A + 'static)`\n    = help: unsized fn params are gated as an unstable feature\n+help: you can use `impl Trait` as the argument type\n+   |\n+LL |     r: impl A + 'static\n+   |        ~~~~\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL |     r: &dyn A + 'static"}, {"sha": "558e6b7b118d8221125e8cdd953d2ac1b9834bdd", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -6,6 +6,10 @@ LL | fn foo(_x: K) {}\n    |\n    = help: the trait `Sized` is not implemented for `(dyn I + 'static)`\n    = help: unsized fn params are gated as an unstable feature\n+help: you can use `impl Trait` as the argument type\n+   |\n+LL | fn foo(_x: impl K) {}\n+   |            ++++\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn foo(_x: &K) {}"}, {"sha": "36b08a7d3093141c3ee61e6ff410794cc2092341", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abfad27fbc6847d0621e187d4abf15075b943515/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=abfad27fbc6847d0621e187d4abf15075b943515", "patch": "@@ -20,6 +20,10 @@ LL | fn foo(_x: Foo + Send) {\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + Send + 'static)`\n    = help: unsized fn params are gated as an unstable feature\n+help: you can use `impl Trait` as the argument type\n+   |\n+LL | fn foo(_x: impl Foo + Send) {\n+   |            ++++\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn foo(_x: &Foo + Send) {"}]}