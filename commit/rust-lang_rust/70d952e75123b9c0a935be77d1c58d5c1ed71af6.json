{"sha": "70d952e75123b9c0a935be77d1c58d5c1ed71af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZDk1MmU3NTEyM2I5YzBhOTM1YmU3N2QxYzU4ZDVjMWVkNzFhZjY=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-28T01:07:01Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-28T21:59:46Z"}, "message": "lintcheck: more fixes\n\nfix a couple of issues when checking if lintcheck needed rerun after clippy binary changed.\nI was apparently still comparing the times wrongly, but it should be fixed\u2122 now...\nI actually looked at the date of the sources.toml and not at the date of the log file!\n\nAlso fix progress report counter not advancing in squential mode", "tree": {"sha": "3141eb7c9e1de99a0541e90b1531107caddb00f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3141eb7c9e1de99a0541e90b1531107caddb00f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d952e75123b9c0a935be77d1c58d5c1ed71af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d952e75123b9c0a935be77d1c58d5c1ed71af6", "html_url": "https://github.com/rust-lang/rust/commit/70d952e75123b9c0a935be77d1c58d5c1ed71af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d952e75123b9c0a935be77d1c58d5c1ed71af6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9a7a2a2750ee112f71d95b3f588bc9d51e949a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a7a2a2750ee112f71d95b3f588bc9d51e949a5", "html_url": "https://github.com/rust-lang/rust/commit/b9a7a2a2750ee112f71d95b3f588bc9d51e949a5"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "60e677b1e13fe2cdfa5bc0762accfb28a99f91ca", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/70d952e75123b9c0a935be77d1c58d5c1ed71af6/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d952e75123b9c0a935be77d1c58d5c1ed71af6/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=70d952e75123b9c0a935be77d1c58d5c1ed71af6", "patch": "@@ -496,7 +496,7 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> (String, HashMap<&String,\n \n /// check if the latest modification of the logfile is older than the modification date of the\n /// clippy binary, if this is true, we should clean the lintchec shared target directory and recheck\n-fn lintcheck_needs_rerun(toml_path: &PathBuf) -> bool {\n+fn lintcheck_needs_rerun(lintcheck_logs_path: &PathBuf) -> bool {\n     let clippy_modified: std::time::SystemTime = {\n         let mut times = [CLIPPY_DRIVER_PATH, CARGO_CLIPPY_PATH].iter().map(|p| {\n             std::fs::metadata(p)\n@@ -505,17 +505,17 @@ fn lintcheck_needs_rerun(toml_path: &PathBuf) -> bool {\n                 .expect(\"failed to get modification date\")\n         });\n         // the oldest modification of either of the binaries\n-        std::cmp::min(times.next().unwrap(), times.next().unwrap())\n+        std::cmp::max(times.next().unwrap(), times.next().unwrap())\n     };\n \n-    let logs_modified: std::time::SystemTime = std::fs::metadata(toml_path)\n+    let logs_modified: std::time::SystemTime = std::fs::metadata(lintcheck_logs_path)\n         .expect(\"failed to get metadata of file\")\n         .modified()\n         .expect(\"failed to get modification date\");\n \n-    // if clippys modification time is smaller (older) than the logs mod time, we need to rerun\n-    // lintcheck\n-    clippy_modified < logs_modified\n+    // time is represented in seconds since X\n+    // logs_modified 2 and clippy_modified 5 means clippy binary is older and we need to recheck\n+    logs_modified < clippy_modified\n }\n \n /// lintchecks `main()` function\n@@ -528,7 +528,7 @@ pub fn run(clap_config: &ArgMatches) {\n \n     // if the clippy bin is newer than our logs, throw away target dirs to force clippy to\n     // refresh the logs\n-    if lintcheck_needs_rerun(&config.sources_toml_path) {\n+    if lintcheck_needs_rerun(&config.lintcheck_results_path) {\n         let shared_target_dir = \"target/lintcheck/shared_target_dir\";\n         match std::fs::metadata(&shared_target_dir) {\n             Ok(metadata) => {\n@@ -538,8 +538,7 @@ pub fn run(clap_config: &ArgMatches) {\n                         .expect(\"failed to remove target/lintcheck/shared_target_dir\");\n                 }\n             },\n-            Err(_) => { // dir probably does not exist, don't remove anything\n-            },\n+            Err(_) => { /*  dir probably does not exist, don't remove anything  */ },\n         }\n     }\n \n@@ -566,6 +565,8 @@ pub fn run(clap_config: &ArgMatches) {\n     let crates = read_crates(&config.sources_toml_path);\n     let old_stats = read_stats_from_file(&config.lintcheck_results_path);\n \n+    let counter = AtomicUsize::new(1);\n+\n     let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n         // if we don't have the specified crate in the .toml, throw an error\n         if !crates.iter().any(|krate| {\n@@ -595,8 +596,6 @@ pub fn run(clap_config: &ArgMatches) {\n         if config.max_jobs > 1 {\n             // run parallel with rayon\n \n-            let counter = AtomicUsize::new(0);\n-\n             // Ask rayon for thread count. Assume that half of that is the number of physical cores\n             // Use one target dir for each core so that we can run N clippys in parallel.\n             // We need to use different target dirs because cargo would lock them for a single build otherwise,\n@@ -623,7 +622,7 @@ pub fn run(clap_config: &ArgMatches) {\n             crates\n                 .into_iter()\n                 .map(|krate| krate.download_and_extract())\n-                .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, num_crates))\n+                .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, 1, num_crates))\n                 .flatten()\n                 .collect()\n         }"}]}