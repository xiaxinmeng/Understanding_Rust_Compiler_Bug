{"sha": "7ebaf1c5c6dcff22d554bc0169a7416f1305c8c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYmFmMWM1YzZkY2ZmMjJkNTU0YmMwMTY5YTc0MTZmMTMwNWM4YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-15T11:57:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-15T11:57:31Z"}, "message": "Auto merge of #25423 - dotdash:assume, r=huonw\n\nThe assume intrinsic has a strong, negative impact on compile times, so\r\nwe're currently only using it in places where LLVM can simplify it to\r\nnonnull metadata on a load intruction. Unfortunately a recent change\r\nthat fixed invalid assume calls introduce new assume calls for which\r\nthis simplification can not happen, leading to a massive regression in\r\ncompile times in certain cases.\r\n\r\nMoving the assumptions from the middle of the function to the beginning\r\nallows the simplification to happen again, bringing compile times back\r\nto their old levels.\r\n\r\nFixes #25393", "tree": {"sha": "57ae62875b2876a0ee90ae8d6b909ab4a498145c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57ae62875b2876a0ee90ae8d6b909ab4a498145c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebaf1c5c6dcff22d554bc0169a7416f1305c8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebaf1c5c6dcff22d554bc0169a7416f1305c8c4", "html_url": "https://github.com/rust-lang/rust/commit/7ebaf1c5c6dcff22d554bc0169a7416f1305c8c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebaf1c5c6dcff22d554bc0169a7416f1305c8c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579e31929feff51dcaf8d444648eff8de735f91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/579e31929feff51dcaf8d444648eff8de735f91a", "html_url": "https://github.com/rust-lang/rust/commit/579e31929feff51dcaf8d444648eff8de735f91a"}, {"sha": "02603334ae22971409c11e547a3568d70b9c60ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/02603334ae22971409c11e547a3568d70b9c60ac", "html_url": "https://github.com/rust-lang/rust/commit/02603334ae22971409c11e547a3568d70b9c60ac"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "546e0bc806e12cab0f5376786782409b755152ff", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7ebaf1c5c6dcff22d554bc0169a7416f1305c8c4/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebaf1c5c6dcff22d554bc0169a7416f1305c8c4/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=7ebaf1c5c6dcff22d554bc0169a7416f1305c8c4", "patch": "@@ -665,14 +665,14 @@ macro_rules! iterator {\n             #[inline]\n             fn next(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n-                if self.ptr == self.end {\n-                    None\n-                } else {\n-                    unsafe {\n-                        if mem::size_of::<T>() != 0 {\n-                            ::intrinsics::assume(!self.ptr.is_null());\n-                            ::intrinsics::assume(!self.end.is_null());\n-                        }\n+                unsafe {\n+                    if mem::size_of::<T>() != 0 {\n+                        assume(!self.ptr.is_null());\n+                        assume(!self.end.is_null());\n+                    }\n+                    if self.ptr == self.end {\n+                        None\n+                    } else {\n                         let old = self.ptr;\n                         self.ptr = slice_offset!(self.ptr, 1);\n                         Some(slice_ref!(old))\n@@ -710,15 +710,15 @@ macro_rules! iterator {\n             #[inline]\n             fn next_back(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n-                if self.end == self.ptr {\n-                    None\n-                } else {\n-                    unsafe {\n+                unsafe {\n+                    if mem::size_of::<T>() != 0 {\n+                        assume(!self.ptr.is_null());\n+                        assume(!self.end.is_null());\n+                    }\n+                    if self.end == self.ptr {\n+                        None\n+                    } else {\n                         self.end = slice_offset!(self.end, -1);\n-                        if mem::size_of::<T>() != 0 {\n-                            ::intrinsics::assume(!self.ptr.is_null());\n-                            ::intrinsics::assume(!self.end.is_null());\n-                        }\n                         Some(slice_ref!(self.end))\n                     }\n                 }"}]}